WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: drivers/block/dst/kst.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#73: FILE: drivers/block/dst/kst.c:31:
+struct kst_poll_helper
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#74: FILE: drivers/block/dst/kst.c:32:
+^Ipoll_table ^I^Ipt;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: drivers/block/dst/kst.c:43:
+static int kst_sock_create(struct kst_state *st, struct saddr *addr,
+		int type, int proto, int backlog)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#137: FILE: drivers/block/dst/kst.c:95:
+static int kst_state_wake_callback(wait_queue_t *wait, unsigned mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: drivers/block/dst/kst.c:96:
+static int kst_state_wake_callback(wait_queue_t *wait, unsigned mode,
+		int sync, void *key)

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: drivers/block/dst/kst.c:99:
+	struct kst_state *st = container_of(wait, struct kst_state, wait);
+	kst_wake(st);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: drivers/block/dst/kst.c:104:
+static void kst_queue_func(struct file *file, wait_queue_head_t *whead,
+				 poll_table *pt)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: drivers/block/dst/kst.c:136:
+		req = list_entry(st->request_list.next, struct dst_request,
+				request_list_entry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: drivers/block/dst/kst.c:192:
+	dprintk("%s: bio: %p, size: %u, idx: %d, num: %d, req: %p.\n",
+			__func__, bio, bio->bi_size, bio->bi_idx,

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: drivers/block/dst/kst.c:209:
+	dprintk("%s: bio: %p, req: %p, size: %llu, orig_size: %llu, "
+			"bi_size: %u, err: %d, flags: %u.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: drivers/block/dst/kst.c:254:
+static struct kst_state *kst_state_init(struct dst_node *node,
+		unsigned int permissions,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct kst_state)...)
#302: FILE: drivers/block/dst/kst.c:260:
+	st = kzalloc(sizeof(struct kst_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#362: FILE: drivers/block/dst/kst.c:320:
+ * callbacks in case of errors or successfull operation finish.
                                   ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: drivers/block/dst/kst.c:364:
+	dprintk("%s: broke the loop: err: %d, list_empty: %d.\n",
+			__func__, err, list_empty(&st->request_list));

WARNING:TYPO_SPELLING: 'explicitely' may be misspelled - perhaps 'explicitly'?
#416: FILE: drivers/block/dst/kst.c:374:
+			 * node, so it must be freed explicitely.
 			                             ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: drivers/block/dst/kst.c:408:
+		wait_event_interruptible_timeout(w->wait,
+				!list_empty(&w->ready_list) ||

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*w)...) over kzalloc(sizeof(struct kst_worker)...)
#481: FILE: drivers/block/dst/kst.c:439:
+	w = kzalloc(sizeof(struct kst_worker), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: drivers/block/dst/kst.c:538:
+static int kst_data_recv_bio_vec(struct kst_state *st, struct bio_vec *bv,
+		unsigned int offset, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/block/dst/kst.c:559:
+	err = kernel_recvmsg(st->socket, &msg, &iov, 1, iov.iov_len,
+			msg.msg_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#612: FILE: drivers/block/dst/kst.c:570:
+static int kst_data_send_bio_vec(struct kst_state *st, struct bio_vec *bv,
+		unsigned int offset, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: drivers/block/dst/kst.c:578:
+static int kst_data_send_bio_vec_slow(struct kst_state *st, struct bio_vec *bv,
+		unsigned int offset, unsigned int size)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#691: FILE: drivers/block/dst/kst.c:649:
+		for (i=req->idx; i<req->num; ++i) {
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#691: FILE: drivers/block/dst/kst.c:649:
+		for (i=req->idx; i<req->num; ++i) {
 		                  ^

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: drivers/block/dst/kst.c:664:
+	dprintk("%s: start: [%c], start: %llu, idx: %d, num: %d, "
+			"size: %llu, offset: %u, flags: %x, use_csum: %d.\n",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#707: FILE: drivers/block/dst/kst.c:665:
+			__func__, (bio_rw(req->bio) == WRITE)?'W':'R',
 			                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#707: FILE: drivers/block/dst/kst.c:665:
+			__func__, (bio_rw(req->bio) == WRITE)?'W':'R',
 			                                         ^

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#716: FILE: drivers/block/dst/kst.c:674:
+		dprintk("%s: page: %p, slab: %d, count: %d, max: %d, off: %u, len: %u, req->offset: %u, "

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPLIT_STRING: quoted string split across lines
#717: FILE: drivers/block/dst/kst.c:675:
+		dprintk("%s: page: %p, slab: %d, count: %d, max: %d, off: %u, len: %u, req->offset: %u, "
+				"req->size: %llu, cur_size: %u, flags: %x, "

WARNING:SPLIT_STRING: quoted string split across lines
#718: FILE: drivers/block/dst/kst.c:676:
+				"req->size: %llu, cur_size: %u, flags: %x, "
+				"use_csum: %d, req->csum: %x.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#726: FILE: drivers/block/dst/kst.c:684:
+			printk(KERN_ERR "%s: %d/%d: start: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#727: FILE: drivers/block/dst/kst.c:685:
+			printk(KERN_ERR "%s: %d/%d: start: %llu, "
+				"bv_offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#728: FILE: drivers/block/dst/kst.c:686:
+				"bv_offset: %u, bv_len: %u, "
+				"req_offset: %u, req_size: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#729: FILE: drivers/block/dst/kst.c:687:
+				"req_offset: %u, req_size: %llu, "
+				"req: %p, bio: %p, err: %d.\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#734: FILE: drivers/block/dst/kst.c:692:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: drivers/block/dst/kst.c:702:
+			if (use_csum && bio_rw(req->bio) == WRITE &&
+					!req->tmp_offset) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/block/dst/kst.c:705:
+				r.csum = cpu_to_be32(dst_csum_bvec(bv,
+						req->offset, cur_size));

WARNING:SPLIT_STRING: quoted string split across lines
#752: FILE: drivers/block/dst/kst.c:710:
+			dprintk("%s: %d/%d: sending header: cmd: %u, start: %llu, "
+				"bv_offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#753: FILE: drivers/block/dst/kst.c:711:
+				"bv_offset: %u, bv_len: %u, "
+				"a offset: %u, offset: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#754: FILE: drivers/block/dst/kst.c:712:
+				"a offset: %u, offset: %u, "
+				"cur_size: %u, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/block/dst/kst.c:728:
+		if (use_csum && (bio_rw(req->bio) != WRITE) &&
+				!(req->flags & DST_REQ_CHEKSUM_RECV)) {

WARNING:SPLIT_STRING: quoted string split across lines
#775: FILE: drivers/block/dst/kst.c:733:
+			dprintk("%s: %d/%d: receiving header: start: %llu, "
+				"bv_offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#776: FILE: drivers/block/dst/kst.c:734:
+				"bv_offset: %u, bv_len: %u, "
+				"a offset: %u, offset: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#777: FILE: drivers/block/dst/kst.c:735:
+				"a offset: %u, offset: %u, "
+				"cur_size: %u, err: %d.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#790: FILE: drivers/block/dst/kst.c:748:
+				printk("%s: req: %p, old csum: %x, new: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#791: FILE: drivers/block/dst/kst.c:749:
+				printk("%s: req: %p, old csum: %x, new: %x.\n",
+						__func__, req, req->tmp_csum,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#793: FILE: drivers/block/dst/kst.c:751:
+				BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/block/dst/kst.c:755:
+			dprintk("%s: req: %p, old csum: %x, new: %x.\n",
+					__func__, req, req->tmp_csum,

WARNING:SPLIT_STRING: quoted string split across lines
#813: FILE: drivers/block/dst/kst.c:771:
+			dprintk("%s: %d/%d: this: start: %llu, bv_offset: %u, "
+				"bv_len: %u, offset: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#814: FILE: drivers/block/dst/kst.c:772:
+				"bv_len: %u, offset: %u, "
+				"cur_size: %u, err: %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#827: FILE: drivers/block/dst/kst.c:785:
+			dprintk("%s: req: %p, csum: %x, received csum: %x.\n",
+					__func__, req, csum, req->tmp_csum);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#830: FILE: drivers/block/dst/kst.c:788:
+				printk("%s: %d/%d: broken checksum: start: %llu, "

WARNING:SPLIT_STRING: quoted string split across lines
#831: FILE: drivers/block/dst/kst.c:789:
+				printk("%s: %d/%d: broken checksum: start: %llu, "
+					"bv_offset: %u, bv_len: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#832: FILE: drivers/block/dst/kst.c:790:
+					"bv_offset: %u, bv_len: %u, "
+					"a offset: %u, offset: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#833: FILE: drivers/block/dst/kst.c:791:
+					"a offset: %u, offset: %u, "
+					"cur_size: %u, orig_size: %llu.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#838: FILE: drivers/block/dst/kst.c:796:
+				printk("%s: broken checksum: req: %p, csum: %x, "

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: drivers/block/dst/kst.c:797:
+				printk("%s: broken checksum: req: %p, csum: %x, "
+					"should be: %x, flags: %x, "

WARNING:SPLIT_STRING: quoted string split across lines
#840: FILE: drivers/block/dst/kst.c:798:
+					"should be: %x, flags: %x, "
+					"req->tmp_offset: %u, rw: %lu.\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#859: FILE: drivers/block/dst/kst.c:817:
+	if (err <= 0 && err != -EAGAIN) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#862: FILE: drivers/block/dst/kst.c:820:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#867: FILE: drivers/block/dst/kst.c:825:
+		dprintk("%s: return: idx: %d, num: %d, offset: %u, "
+				"size: %llu, err: %d.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#872: FILE: drivers/block/dst/kst.c:830:
+	dprintk("%s: end: start: %llu, idx: %d, num: %d, "
+			"size: %llu, offset: %u.\n",

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#881: FILE: drivers/block/dst/kst.c:839:
+	if (err && printk_ratelimit())

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#882: FILE: drivers/block/dst/kst.c:840:
+		printk("%s: freeing bio: %p, bi_size: %u, "

WARNING:SPLIT_STRING: quoted string split across lines
#883: FILE: drivers/block/dst/kst.c:841:
+		printk("%s: freeing bio: %p, bi_size: %u, "
+			"orig_size: %llu, req: %p, err: %d.\n",

WARNING:SPLIT_STRING: quoted string split across lines
#898: FILE: drivers/block/dst/kst.c:856:
+	dprintk("%s: req: %p, num: %d, idx: %d, bio: %p, "
+			"revents: %x, flags: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: drivers/block/dst/kst.c:908:
+	dprintk("%s: free req: %p, pool: %p, bio: %p, state: %p, node: %p.\n",
+			__func__, req, req->node->w->req_pool,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: drivers/block/dst/kst.c:927:
+	dprintk("%s: start: %llu, size: %llu, bio: %p.\n",
+			__func__, req->start, req->size, req->bio);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1025: FILE: drivers/block/dst/kst.c:983:
+	if (err && printk_ratelimit()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1026: FILE: drivers/block/dst/kst.c:984:
+		printk("%s: error [%c], start: %llu, idx: %d, num: %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1027: FILE: drivers/block/dst/kst.c:985:
+		printk("%s: error [%c], start: %llu, idx: %d, num: %d, "
+				"size: %llu, offset: %u, err: %d.\n",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#1028: FILE: drivers/block/dst/kst.c:986:
+			__func__, (bio_rw(req->bio) == WRITE)?'W':'R',
 			                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1028: FILE: drivers/block/dst/kst.c:986:
+			__func__, (bio_rw(req->bio) == WRITE)?'W':'R',
 			                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1051: FILE: drivers/block/dst/kst.c:1009:
+	st->socket->sk->sk_sndbuf = st->socket->sk->sk_sndbuf = 1024*1024*10;
 	                                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1051: FILE: drivers/block/dst/kst.c:1009:
+	st->socket->sk->sk_sndbuf = st->socket->sk->sk_sndbuf = 1024*1024*10;
 	                                                                 ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1051: FILE: drivers/block/dst/kst.c:1009:
+	st->socket->sk->sk_sndbuf = st->socket->sk->sk_sndbuf = 1024*1024*10;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#1072: FILE: drivers/block/dst/kst.c:1030:
+		dprintk("%s: state %p does not know how "
+				"to recover from error %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: drivers/block/dst/kst.c:1036:
+	err = sock_create(st->socket->ops->family, st->socket->type,
+			st->socket->sk->sk_protocol, &sock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1082: FILE: drivers/block/dst/kst.c:1040:
+	sock->sk->sk_sndtimeo = sock->sk->sk_rcvtimeo =

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1156: FILE: drivers/block/dst/kst.c:1114:
+	bio->bi_size = req->size = req->orig_size;

WARNING:SPLIT_STRING: quoted string split across lines
#1203: FILE: drivers/block/dst/kst.c:1161:
+	dprintk("\n%s: st: %p, cmd: %u, sector: %llu, size: %u, "
+			"csum: %x, offset: %u.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1212: FILE: drivers/block/dst/kst.c:1170:
+	if ((s64)(r.sector + to_sector(r.size)) < 0 ||
+		(r.sector + to_sector(r.size)) > st->node->size ||

WARNING:SPLIT_STRING: quoted string split across lines
#1300: FILE: drivers/block/dst/kst.c:1258:
+			dprintk("%s: %d/%d: page: %p, size: %u, "
+					"offset: %u (used zero), err: %d.\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1321: FILE: drivers/block/dst/kst.c:1279:
+		req->size = req->orig_size = bio->bi_size;

WARNING:SPLIT_STRING: quoted string split across lines
#1327: FILE: drivers/block/dst/kst.c:1285:
+		dprintk("%s: submitting: bio: %p, req: %p, start: %llu, "
+			"size: %llu, idx: %d, num: %d, offset: %u, csum: %x.\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1335: FILE: drivers/block/dst/kst.c:1293:
+		if (r.cmd == DST_READ) {
+			generic_make_request(bio);
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: drivers/block/dst/kst.c:1343:
+	err = sock_create(st->socket->ops->family, st->socket->type,
+			st->socket->sk->sk_protocol, &newsock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1406: FILE: drivers/block/dst/kst.c:1364:
+		if (!memcmp(sec_addr, new_addr,
+				addr.sa_data_len - s->sec.check_offset)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1425: FILE: drivers/block/dst/kst.c:1383:
+		struct sockaddr_in *sin = (struct sockaddr_in *)&addr;
+		printk(KERN_INFO "%s: Client: %u.%u.%u.%u:%d.\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1425: FILE: drivers/block/dst/kst.c:1383:
+		printk(KERN_INFO "%s: Client: %u.%u.%u.%u:%d.\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1426: FILE: drivers/block/dst/kst.c:1384:
+		printk(KERN_INFO "%s: Client: %u.%u.%u.%u:%d.\n", __func__,
+			NIPQUAD(sin->sin_addr.s_addr), ntohs(sin->sin_port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1429: FILE: drivers/block/dst/kst.c:1387:
+		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)&addr;
+		printk(KERN_INFO "%s: Client: "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1429: FILE: drivers/block/dst/kst.c:1387:
+		printk(KERN_INFO "%s: Client: "

WARNING:SPLIT_STRING: quoted string split across lines
#1430: FILE: drivers/block/dst/kst.c:1388:
+		printk(KERN_INFO "%s: Client: "
+			"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1437: FILE: drivers/block/dst/kst.c:1395:
+	newst = kst_state_init(st->node, permissions,
+			&kst_data_export_ops, newsock);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1463: FILE: drivers/block/dst/kst.c:1421:
+	for (i=0; i<tmp->le->secure_attr_num; ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1463: FILE: drivers/block/dst/kst.c:1421:
+	for (i=0; i<tmp->le->secure_attr_num; ++i) {
 	           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*s)...) over kmalloc(sizeof(struct dst_secure)...)
#1464: FILE: drivers/block/dst/kst.c:1422:
+		s = kmalloc(sizeof(struct dst_secure), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1476: FILE: drivers/block/dst/kst.c:1434:
+			printk(KERN_INFO "%s: Client: %u.%u.%u.%u:%d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1477: FILE: drivers/block/dst/kst.c:1435:
+			printk(KERN_INFO "%s: Client: %u.%u.%u.%u:%d, "
+					"permissions: %x.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1483: FILE: drivers/block/dst/kst.c:1441:
+			printk(KERN_INFO "%s: Client: "

WARNING:SPLIT_STRING: quoted string split across lines
#1484: FILE: drivers/block/dst/kst.c:1442:
+			printk(KERN_INFO "%s: Client: "
+				"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1485: FILE: drivers/block/dst/kst.c:1443:
+				"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x:%d, "
+				"permissions: %x.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: drivers/block/dst/kst.c:1450:
+	err = kst_sock_create(st, &tmp->le->rctl.addr, tmp->le->rctl.type,
+			tmp->le->rctl.proto, tmp->le->backlog);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1513: FILE: drivers/block/dst/kst.c:1471:
+ * ^Ito remote node, which contain data.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1515: FILE: drivers/block/dst/kst.c:1473:
+ * ^Istorage's node connects to given node to get/put data.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1517: FILE: drivers/block/dst/kst.c:1475:
+ * ^Istate.$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1524: FILE: drivers/block/dst/kst.c:1482:
+};
+static struct kst_state_ops kst_data_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1532: FILE: drivers/block/dst/kst.c:1490:
+struct kst_state *kst_listener_state_init(struct dst_node *node,
+		struct dst_le_template *tmp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1539: FILE: drivers/block/dst/kst.c:1497:
+struct kst_state *kst_data_state_init(struct dst_node *node,
+		struct socket *newsock)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351159.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 61 warnings, 45 checks, 1513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351159.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
