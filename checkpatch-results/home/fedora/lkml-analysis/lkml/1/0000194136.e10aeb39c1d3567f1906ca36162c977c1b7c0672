WARNING:REPEATED_WORD: Possible repeated word: 'really'
#45: 
The state of these patches is : really really far from completeness.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/linux/pmc.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#105: FILE: include/linux/pmc.h:18:
+	unsigned long allowed[NR_LOGICAL_PMC/(8*sizeof(unsigned long))];
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#105: FILE: include/linux/pmc.h:18:
+	unsigned long allowed[NR_LOGICAL_PMC/(8*sizeof(unsigned long))];
 	                                       ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#106: FILE: include/linux/pmc.h:19:
+	uint64_t interval;	/* Interval between signals (pmc increments) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#107: FILE: include/linux/pmc.h:20:
+	uint64_t count;		/* Current count updated by PMC (internal) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#108: FILE: include/linux/pmc.h:21:
+	uint64_t offset;	/* offset of count (internal) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: include/linux/pmc.h:31:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#124: FILE: kernel/pmc.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#138: FILE: kernel/pmc.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#139: FILE: kernel/pmc.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:BAD_SIGN_OFF: Duplicate signature
#179: 
Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#194: FILE: arch/i386/Kconfig.debug:87:
+config PMC
+	default y
+	bool "Enable Performance Monitoring Counter Abstraction"
+	help
+	  This option enables abstracted PMCs.
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#206: FILE: include/asm-i386/pmc.h:1:
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#213: FILE: include/asm-i386/pmc.h:8:
+#if 0

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#222: FILE: include/asm-i386/pmc.h:17:
+#define _C0	(1<<C0)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#222: FILE: include/asm-i386/pmc.h:17:
+#define _C0	(1<<C0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#223: FILE: include/asm-i386/pmc.h:18:
+#define _C1	(1<<C1)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#223: FILE: include/asm-i386/pmc.h:18:
+#define _C1	(1<<C1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#224: FILE: include/asm-i386/pmc.h:19:
+#define _C2	(1<<C2)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#224: FILE: include/asm-i386/pmc.h:19:
+#define _C2	(1<<C2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#225: FILE: include/asm-i386/pmc.h:20:
+#define _C3	(1<<C3)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#225: FILE: include/asm-i386/pmc.h:20:
+#define _C3	(1<<C3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#226: FILE: include/asm-i386/pmc.h:21:
+#define _C4	(1<<C4)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#226: FILE: include/asm-i386/pmc.h:21:
+#define _C4	(1<<C4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#227: FILE: include/asm-i386/pmc.h:22:
+#define _C5	(1<<C5)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#227: FILE: include/asm-i386/pmc.h:22:
+#define _C5	(1<<C5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#228: FILE: include/asm-i386/pmc.h:23:
+#define _C6	(1<<C6)
            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#228: FILE: include/asm-i386/pmc.h:23:
+#define _C6	(1<<C6)

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#234: FILE: include/asm-i386/pmc.h:29:
+ * Architecture dependant PMCs
                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#241: FILE: include/asm-i386/pmc.h:36:
+#define _LOGICAL_ARCH_PMC_A	(1<<LOGICAL_ARCH_PMC_A)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#241: FILE: include/asm-i386/pmc.h:36:
+#define _LOGICAL_ARCH_PMC_A	(1<<LOGICAL_ARCH_PMC_A)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#242: FILE: include/asm-i386/pmc.h:37:
+#define _LOGICAL_ARCH_PMC_B	(1<<LOGICAL_ARCH_PMC_B)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#242: FILE: include/asm-i386/pmc.h:37:
+#define _LOGICAL_ARCH_PMC_B	(1<<LOGICAL_ARCH_PMC_B)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#243: FILE: include/asm-i386/pmc.h:38:
+#define _LOGICAL_ARCH_PMC_C	(1<<LOGICAL_ARCH_PMC_C)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#243: FILE: include/asm-i386/pmc.h:38:
+#define _LOGICAL_ARCH_PMC_C	(1<<LOGICAL_ARCH_PMC_C)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#250: FILE: include/asm-i386/pmc.h:45:
+		(_LOGICAL_ARCH_PMC_A|_LOGICAL_ARCH_PMC_B|_LOGICAL_ARCH_PMC_C)
 		                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#250: FILE: include/asm-i386/pmc.h:45:
+		(_LOGICAL_ARCH_PMC_A|_LOGICAL_ARCH_PMC_B|_LOGICAL_ARCH_PMC_C)
 		                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#252: FILE: include/asm-i386/pmc.h:47:
+		(_LOGICAL_ARCH_PMC_A|_LOGICAL_ARCH_PMC_B)
 		                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: include/asm-i386/pmc.h:49:
+		(_LOGICAL_ARCH_PMC_B|_LOGICAL_ARCH_PMC_C)
 		                    ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#261: FILE: arch/i386/kernel/pmc.c:1:
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#282: FILE: arch/i386/kernel/pmc.c:22:
+	/* LOGICAL_ARCH_PMC_A */	{ _C0|_C2, _C0|_C3, _C0|_C3, _C0|_C1|_C2|_C3, },
 	                        	                                        ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#290: FILE: arch/i386/kernel/pmc.c:30:
+static unsigned int pmc_phys_to_msr_mapping[NR_PHYSICAL_PMC] =
+{ 0xa, 0xb, 0xc, 0xd }

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#298: FILE: arch/i386/kernel/pmc.c:38:
+
+

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#299: FILE: arch/i386/kernel/pmc.c:39:
+	switch (control_pmc) {
+		case C0:/* Set bit X pos 4 */
[...]
+		case C1:
[...]
+		case C2:
[...]
+		case C3:
[...]
+		case C4:
[...]
+		case C5:
[...]
+		case C6:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#327: FILE: arch/i386/kernel/pmc.c:67:
+		if (client_iter.assigned != logical
+				&& client_iter.assigned >= 0)

WARNING:TYPO_SPELLING: 'ressources' may be misspelled - perhaps 'resources'?
#347: FILE: arch/i386/kernel/pmc.c:87:
+//FIXME: add relocation of ressources if other ressources can be assigned to
                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'ressources' may be misspelled - perhaps 'resources'?
#347: FILE: arch/i386/kernel/pmc.c:87:
+//FIXME: add relocation of ressources if other ressources can be assigned to
                                                ^^^^^^^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#359: FILE: arch/i386/kernel/pmc.c:99:
+	for (l=0; l<NR_LOGICAL_PMC; l++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#359: FILE: arch/i386/kernel/pmc.c:99:
+	for (l=0; l<NR_LOGICAL_PMC; l++) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#362: FILE: arch/i386/kernel/pmc.c:102:
+		for (c=0; c<NR_CONTROL; c++) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#362: FILE: arch/i386/kernel/pmc.c:102:
+		for (c=0; c<NR_CONTROL; c++) {
 		           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#363: FILE: arch/i386/kernel/pmc.c:103:
+			control_members = control_fail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#364: FILE: arch/i386/kernel/pmc.c:104:
+			for (p=0; p<NR_PHYSICAL_PMC; p++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#364: FILE: arch/i386/kernel/pmc.c:104:
+			for (p=0; p<NR_PHYSICAL_PMC; p++) {
 			           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#366: FILE: arch/i386/kernel/pmc.c:106:
+				if (pmc_phys_mapping[l][p] & (1<<c)) {
 				                               ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#375: FILE: arch/i386/kernel/pmc.c:115:
+				for (p=0; p<NR_PHYSICAL_PMC; p++) {
 				      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#375: FILE: arch/i386/kernel/pmc.c:115:
+				for (p=0; p<NR_PHYSICAL_PMC; p++) {
 				           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#401: FILE: arch/i386/kernel/pmc.c:141:
+	for (p=0; p<NR_PHYSICAL_PMC; p++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#401: FILE: arch/i386/kernel/pmc.c:141:
+	for (p=0; p<NR_PHYSICAL_PMC; p++) {
 	           ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#409: FILE: arch/i386/kernel/pmc.c:149:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#425: FILE: arch/i386/kernel/pmc.c:165:
+	uint64_t count;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#442: FILE: arch/i386/kernel/pmc.c:182:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#448: FILE: arch/i386/kernel/pmc.c:188:
+	switch (client.control) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#449: FILE: arch/i386/kernel/pmc.c:189:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#450: FILE: arch/i386/kernel/pmc.c:190:
+
+	}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#456: FILE: arch/i386/kernel/pmc.c:196:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#457: FILE: arch/i386/kernel/pmc.c:197:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#458: FILE: arch/i386/kernel/pmc.c:198:
+
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194136.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 11 warnings, 49 checks, 346 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000194136.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
