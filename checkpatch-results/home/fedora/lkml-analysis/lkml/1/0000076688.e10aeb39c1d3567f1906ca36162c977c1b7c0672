CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#108: FILE: include/asm-generic/vmlinux.lds.h:215:
+		*(__jump_strings)/* Jump: strings */	\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: include/linux/ftrace.h:230:
+extern int ftrace_make_jump(struct dyn_ftrace *rec, unsigned long addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/ftrace.h:231:
+extern int ftrace_make_jump_nop(struct dyn_ftrace *rec, unsigned long addr);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: include/linux/jump_label.h:1:
+#ifndef _LINUX_JUMP_LABEL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#166: FILE: include/linux/jump_label.h:11:
+#define JUMP_LABEL_NAME(tag)						\
+	const char __sjstrtab_##tag[]					\
+	__used __attribute__((section("__jump_strings")))  = #tag;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__jump_strings") over __attribute__((section("__jump_strings")))
#168: FILE: include/linux/jump_label.h:13:
+	__used __attribute__((section("__jump_strings")))  = #tag;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#170: FILE: include/linux/jump_label.h:15:
+#define JUMP_LABEL_IF(tag, label, cond)					\
+	asm goto ("1:"   /* 5-byte insn */				\
+	   P6_NOP5							\
+		".pushsection __jump_table,  \"a\" \n\t"		\
+		_ASM_PTR "1b, %l[" #label "], %c0 \n\t"			\
+		".popsection \n\t"					\
+		: :  "i" (__sjstrtab_##tag) :  : label)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#171: FILE: include/linux/jump_label.h:16:
+	asm goto ("1:"   /* 5-byte insn */				\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#173: FILE: include/linux/jump_label.h:18:
+		".pushsection __jump_table,  \"a\" \n\t"		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#174: FILE: include/linux/jump_label.h:19:
+		_ASM_PTR "1b, %l[" #label "], %c0 \n\t"			\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#175: FILE: include/linux/jump_label.h:20:
+		".popsection \n\t"					\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#184: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL_IF(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#184: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL_IF(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#184: FILE: include/linux/jump_label.h:29:
+#define JUMP_LABEL_IF(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#220: FILE: kernel/jump_label.c:1:
+#include <linux/init.h>

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#227: FILE: kernel/jump_label.c:8:
+#include <asm/cacheflush.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#245: FILE: kernel/jump_label.c:26:
+extern struct jump_entry __start___jump_table[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#246: FILE: kernel/jump_label.c:27:
+extern struct jump_entry __stop___jump_table[];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#250: FILE: kernel/jump_label.c:31:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: kernel/jump_label.c:36:
+			printk("find_jump_entry matched: %s\n", iter->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'find_jump_entry', this function's name, in a string
#255: FILE: kernel/jump_label.c:36:
+			printk("find_jump_entry matched: %s\n", iter->name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: kernel/jump_label.c:127:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#348: FILE: kernel/jump_label.c:129:
+	printk("__start___jump_table is: %p\n", __start___jump_table);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: kernel/jump_label.c:130:
+	printk("__stop___jump_table is: %p\n", __stop___jump_table);

ERROR:SPACING: space required before the open parenthesis '('
#350: FILE: kernel/jump_label.c:131:
+	for(iter = __start___jump_table; iter < __stop___jump_table; iter++)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#351: FILE: kernel/jump_label.c:132:
+		printk("jump label: code: %p, target: %p, name: %s\n", iter->code, iter->target, iter->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#351: FILE: kernel/jump_label.c:132:
+		printk("jump label: code: %p, target: %p, name: %s\n", iter->code, iter->target, iter->name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 20 warnings, 5 checks, 277 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000076688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
