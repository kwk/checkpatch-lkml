WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
   based on the key which user specified(e.g. wait time total, contended num)

CHECK:BIT_MACRO: Prefer using the BIT macro
#109: FILE: tools/perf/builtin-lock.c:29:
+#define LOCKHASH_SIZE		(1UL << LOCKHASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'dealed' may be misspelled - perhaps 'dealt'?
#125: FILE: tools/perf/builtin-lock.c:44:
+	 * so address of lockdep_map should be dealed as 64bit.
 	                                       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: tools/perf/builtin-lock.c:45:
+	 * Is there more better solution? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#147: FILE: tools/perf/builtin-lock.c:63:
+#define SINGLE_KEY(member)					\
+	static int lock_stat_key_ ## member(struct lock_stat *one,	\
+					 struct lock_stat *two)		\
+	{								\
+	if (one->member > two->member)					\
+		return 1;						\
+	else								\
+		return 0;						\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#147: FILE: tools/perf/builtin-lock.c:63:
+#define SINGLE_KEY(member)					\
+	static int lock_stat_key_ ## member(struct lock_stat *one,	\
+					 struct lock_stat *two)		\
+	{								\
+	if (one->member > two->member)					\
+		return 1;						\
+	else								\
+		return 0;						\
+	}

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lock_stat*' should also have an identifier name
#170: FILE: tools/perf/builtin-lock.c:86:
+	int (*key)(struct lock_stat*, struct lock_stat*);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct lock_stat*' should also have an identifier name
#170: FILE: tools/perf/builtin-lock.c:86:
+	int (*key)(struct lock_stat*, struct lock_stat*);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: tools/perf/builtin-lock.c:248:
+static void prof_lock_acquire_event(struct trace_acquire_event *acquire_event,
 			struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#348: FILE: tools/perf/builtin-lock.c:263:
+		BUG_ON(1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: tools/perf/builtin-lock.c:288:
+		BUG_ON(1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#410: FILE: tools/perf/builtin-lock.c:312:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: tools/perf/builtin-lock.c:320:
+static void prof_lock_release_event(struct trace_release_event *release_event,
 			struct event *__event __used,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#451: FILE: tools/perf/builtin-lock.c:351:
+		BUG_ON(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#642: FILE: tools/perf/builtin-lock.c:637:
+	OPT_STRING('k', "key", &sort_key, "acquired",
+		    "key for sorting"),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 6 checks, 586 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
