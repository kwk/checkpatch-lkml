WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/haptic/Kconfig:1:
+menuconfig HAPTIC
+	bool "Haptic support"
+	help
+	  Say Y to enable haptic support. It enables the haptic and controls
+	  from userspace.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/haptic/Kconfig:9:
+config HAPTIC_CLASS
+	tristate "Haptic Class Support"
+	help
+	  This option enables the haptic sysfs class in /sys/class/haptic.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/haptic/haptic-class.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: drivers/haptic/haptic-class.c:44:
+  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: drivers/haptic/haptic-class.c:51:
+  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: drivers/haptic/haptic-class.c:62:
+  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/haptic/haptic-class.c:70:
+  \$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: drivers/haptic/haptic-class.c:89:
+static ssize_t haptic_show_value(struct class *class,
+		char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: drivers/haptic/haptic-class.c:109:
+static ssize_t haptic_store_value(struct class *class,
+		const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#200: FILE: drivers/haptic/haptic-class.c:119:
+		ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: drivers/haptic/haptic-class.c:158:
+int haptic_classdev_register(struct device *parent,
+				struct haptic_classdev *haptic_cdev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: drivers/haptic/haptic-class.c:163:
+	haptic_cdev->dev = device_create(haptic_class, parent, 0,
+				haptic_cdev, "%s", haptic_cdev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#251: FILE: drivers/haptic/haptic-class.c:170:
+		printk(KERN_ERR "%s: class_create_file(enable) failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: drivers/haptic/haptic-class.c:171:
+		printk(KERN_ERR "%s: class_create_file(enable) failed\n",
+				 __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: drivers/haptic/haptic-class.c:176:
+		printk(KERN_ERR "%s: class_create_file(oneshot) failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/haptic/haptic-class.c:177:
+		printk(KERN_ERR "%s: class_create_file(oneshot) failed\n",
+				 __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#263: FILE: drivers/haptic/haptic-class.c:182:
+		printk(KERN_ERR "%s: class_create_file(level) failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: drivers/haptic/haptic-class.c:183:
+		printk(KERN_ERR "%s: class_create_file(level) failed\n",
+				 __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: drivers/haptic/haptic-class.c:188:
+		printk(KERN_ERR "%s: class_create_file(level_max) failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: drivers/haptic/haptic-class.c:189:
+		printk(KERN_ERR "%s: class_create_file(level_max) failed\n",
+				 __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#275: FILE: drivers/haptic/haptic-class.c:194:
+		printk(KERN_ERR "%s: class_create_file(value) failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: drivers/haptic/haptic-class.c:195:
+		printk(KERN_ERR "%s: class_create_file(value) failed\n",
+				 __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#287: FILE: drivers/haptic/haptic-class.c:206:
+	printk(KERN_INFO "Registered haptic device: %s\n", haptic_cdev->name);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*iter)...) over kmalloc(sizeof(struct class_dev_iter)...)
#320: FILE: drivers/haptic/haptic-class.c:239:
+	iter = kmalloc(sizeof(struct class_dev_iter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#343: FILE: drivers/haptic/haptic.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/haptic/haptic.h:21:
+static inline void haptic_set_value(struct haptic_classdev *haptic_cdev,
+					enum haptic_value value)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#384: FILE: include/linux/haptic.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#417: FILE: include/linux/haptic.h:34:
+#define HAPTIC_SUSPENDED		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: include/linux/haptic.h:40:
+	void			(*set)(struct haptic_classdev *self,
+					  enum haptic_value value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: include/linux/haptic.h:45:
+	ssize_t (*show_enable)(struct device *dev,
+			struct device_attribute *attr, char *buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: include/linux/haptic.h:47:
+	ssize_t (*store_enable)(struct device *dev,
+			struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: include/linux/haptic.h:51:
+	ssize_t (*store_oneshot)(struct device *dev,
+			struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: include/linux/haptic.h:55:
+	ssize_t (*show_level)(struct device *dev,
+			struct device_attribute *attr, char *buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: include/linux/haptic.h:57:
+	ssize_t (*store_level)(struct device *dev,
+			struct device_attribute *attr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: include/linux/haptic.h:61:
+	ssize_t (*show_level_max)(struct device *dev,
+			struct device_attribute *attr, char *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/haptic.h:67:
+extern int haptic_classdev_register(struct device *parent,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: include/linux/haptic.h:68:
+extern int haptic_classdev_register(struct device *parent,
+				 struct haptic_classdev *haptic_cdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/linux/haptic.h:69:
+extern void haptic_classdev_unregister(struct haptic_classdev *lcd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#453: FILE: include/linux/haptic.h:70:
+extern void haptic_classdev_suspend(struct haptic_classdev *haptic_cdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#454: FILE: include/linux/haptic.h:71:
+extern void haptic_classdev_resume(struct haptic_classdev *haptic_cdev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062953.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 24 checks, 391 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062953.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
