WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: ltt/ltt-serialize.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#80: FILE: ltt/ltt-serialize.c:27:
+#define LTT_ATTRIBUTE_NETWORK_BYTE_ORDER (1<<1)
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#80: FILE: ltt/ltt-serialize.c:27:
+#define LTT_ATTRIBUTE_NETWORK_BYTE_ORDER (1<<1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'exepected' may be misspelled - perhaps 'expected'?
#156: FILE: ltt/ltt-serialize.c:103:
+ *            The following % arguments are exepected by the callback
                                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: ltt/ltt-serialize.c:129:
+static inline const char *parse_trace_type(const char *fmt,
+		char *trace_size, enum ltt_type *trace_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: ltt/ltt-serialize.c:230:
+static inline const char *parse_c_type(const char *fmt,
+		char *c_size, enum ltt_type *c_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: ltt/ltt-serialize.c:315:
+static inline size_t serialize_trace_data(struct rchan_buf *buf,
+		size_t buf_offset,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#375: FILE: ltt/ltt-serialize.c:322:
+		uint64_t v_uint64;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: ltt/ltt-serialize.c:349:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#423: FILE: ltt/ltt-serialize.c:370:
+			BUG();

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#430: FILE: ltt/ltt-serialize.c:377:
+		tmp.v_string.len = strlen(tmp.v_string.s)+1;
 		                                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: ltt/ltt-serialize.c:380:
+			ltt_relay_write(buf, buf_offset, tmp.v_string.s,
+				tmp.v_string.len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#437: FILE: ltt/ltt-serialize.c:384:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: ltt/ltt-serialize.c:408:
+					ltt_relay_write(buf, buf_offset,
+					(uint8_t[]){ (uint8_t)tmp.v_uint64 },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: ltt/ltt-serialize.c:412:
+					ltt_relay_write(buf, buf_offset,
+					(uint8_t[]){ (uint8_t)tmp.v_ulong },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: ltt/ltt-serialize.c:418:
+					ltt_relay_write(buf, buf_offset,
+					(uint16_t[]){ (uint16_t)tmp.v_uint64 },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: ltt/ltt-serialize.c:422:
+					ltt_relay_write(buf, buf_offset,
+					(uint16_t[]){ (uint16_t)tmp.v_ulong },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: ltt/ltt-serialize.c:428:
+					ltt_relay_write(buf, buf_offset,
+					(uint32_t[]){ (uint32_t)tmp.v_uint64 },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: ltt/ltt-serialize.c:432:
+					ltt_relay_write(buf, buf_offset,
+					(uint32_t[]){ (uint32_t)tmp.v_ulong },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: ltt/ltt-serialize.c:441:
+				ltt_relay_write(buf, buf_offset,
+				(uint64_t[]){ (uint64_t)tmp.v_uint64 },

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: ltt/ltt-serialize.c:445:
+				BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: ltt/ltt-serialize.c:458:
+				ltt_relay_write(buf, buf_offset,
+					(int64_t[]){ (int64_t)tmp.v_ulong },

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: ltt/ltt-serialize.c:463:
+				ltt_relay_write(buf, buf_offset,
+					(uint64_t[]){ (uint64_t)tmp.v_ulong },

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: ltt/ltt-serialize.c:467:
+				BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: ltt/ltt-serialize.c:479:
+notrace size_t ltt_serialize_data(struct rchan_buf *buf, size_t buf_offset,
+			struct ltt_serialize_closure *closure,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: ltt/ltt-serialize.c:498:
+			fmt = parse_trace_type(fmt, &trace_size, &trace_type,
+				&attributes);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: ltt/ltt-serialize.c:518:
+			buf_offset = serialize_trace_data(buf,
+						buf_offset, trace_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: ltt/ltt-serialize.c:539:
+static notrace size_t ltt_get_data_size(struct ltt_serialize_closure *closure,
+				void *serialize_private, int *largest_align,

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: ltt/ltt-serialize.c:543:
+	ltt_serialize_cb cb = closure->callbacks[0];
+	closure->cb_idx = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#598: FILE: ltt/ltt-serialize.c:545:
+	return (size_t)cb(NULL, 0, closure, serialize_private,
+				largest_align, fmt, args);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: ltt/ltt-serialize.c:550:
+void ltt_write_event_data(struct rchan_buf *buf, size_t buf_offset,
+				struct ltt_serialize_closure *closure,

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: ltt/ltt-serialize.c:555:
+	ltt_serialize_cb cb = closure->callbacks[0];
+	closure->cb_idx = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#613: FILE: ltt/ltt-serialize.c:560:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <eID>
#619: FILE: ltt/ltt-serialize.c:566:
+	uint16_t eID;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#619: FILE: ltt/ltt-serialize.c:566:
+	uint16_t eID;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#626: FILE: ltt/ltt-serialize.c:573:
+	uint64_t tsc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: ltt/ltt-serialize.c:611:
+	data_size = ltt_get_data_size(&closure, serialize_private,
+					&largest_align, fmt, &args_copy);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: ltt/ltt-serialize.c:646:
+		ret = ltt_reserve_slot(trace, channel, &transport_data,
+					data_size, &slot_size, &buf_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: ltt/ltt-serialize.c:657:
+		buf_offset = ltt_write_event_header(trace,
+					channel, buf, buf_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: ltt/ltt-serialize.c:660:
+		ltt_write_event_data(buf, buf_offset, &closure,
+					serialize_private,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158725.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 31 checks, 685 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158725.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
