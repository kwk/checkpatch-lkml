WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#40: FILE: security/tomoyo/capability.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#41: FILE: security/tomoyo/capability.c:2:
+ * security/tomoyo/capability.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#146: FILE: security/tomoyo/capability.c:107:
+#if TMY_MAX_PROFILES != 256
+		&& profile < TMY_MAX_PROFILES

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#148: FILE: security/tomoyo/capability.c:109:
+#endif
+		&& profile_ptr[profile] ?

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: security/tomoyo/capability.c:118:
+	int i;
+	if (profile >= TMY_MAX_PROFILES)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited before semicolon
#170: FILE: security/tomoyo/capability.c:131:
+ok: ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#180: FILE: security/tomoyo/capability.c:141:
+	struct profile *ptr;
+	ptr = tmy_new_capability_profile(profile);

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: security/tomoyo/capability.c:158:
+	int step;
+	for (step = head->read_step;

WARNING:LINE_SPACING: Missing a blank line after declarations
#202: FILE: security/tomoyo/capability.c:163:
+		const struct profile *profile = profile_ptr[i];
+		head->read_step = step;

WARNING:SPACING: space prohibited before semicolon
#220: FILE: security/tomoyo/capability.c:181:
+	int len = 64 ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: security/tomoyo/capability.c:215:
+	const u16 hash = capability;
+	if (!domain)

CHECK:SPACING: No space is necessary after a cast
#261: FILE: security/tomoyo/capability.c:222:
+		acl = (struct capability_acl *) ptr;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#263: FILE: security/tomoyo/capability.c:224:
+		if (ptr->type == TMY_TYPE_CAPABILITY_ACL
+		    && acl->capability == hash

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#264: FILE: security/tomoyo/capability.c:225:
+		    && acl->capability == hash
+		    && ptr->cond == condition) {

CHECK:SPACING: No space is necessary after a cast
#279: FILE: security/tomoyo/capability.c:240:
+	error = tmy_add_acl(domain, (struct acl_info *) acl);

WARNING:SPACING: space prohibited before semicolon
#281: FILE: security/tomoyo/capability.c:242:
+remove: ;

CHECK:SPACING: No space is necessary after a cast
#284: FILE: security/tomoyo/capability.c:245:
+		acl = (struct capability_acl *) ptr;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#285: FILE: security/tomoyo/capability.c:246:
+		if (ptr->type != TMY_TYPE_CAPABILITY_ACL || ptr->is_deleted ||
+		    acl->capability != hash || ptr->cond != condition) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#290: FILE: security/tomoyo/capability.c:251:
+ok: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: security/tomoyo/capability.c:271:
+	const u16 hash = capability;
+	if (!mode)

CHECK:SPACING: No space is necessary after a cast
#313: FILE: security/tomoyo/capability.c:274:
+		struct capability_acl *acl = (struct capability_acl *) ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: security/tomoyo/capability.c:275:
+		struct capability_acl *acl = (struct capability_acl *) ptr;
+		if (ptr->type != TMY_TYPE_CAPABILITY_ACL || ptr->is_deleted

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#315: FILE: security/tomoyo/capability.c:276:
+		if (ptr->type != TMY_TYPE_CAPABILITY_ACL || ptr->is_deleted
+		    || acl->capability != hash

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#316: FILE: security/tomoyo/capability.c:277:
+		    || acl->capability != hash
+		    || tmy_check_condition(ptr->cond, NULL))

WARNING:LINE_SPACING: Missing a blank line after declarations
#351: FILE: security/tomoyo/capability.c:312:
+	unsigned int capability;
+	for (capability = 0; capability < TMY_MAX_CAPABILITY_INDEX;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356854.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 10 checks, 320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000356854.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
