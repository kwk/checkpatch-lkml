WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#37: 
It currently includes a new gettimeofday implemention and optimized
                                         ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: arch/x86_64/mm/init.c:163:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: arch/x86_64/mm/init.c:163:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#152: FILE: arch/x86_64/mm/init.c:163:
+set_kernel_map(void *vaddr,unsigned long len,unsigned long phys,pgprot_t prot)
                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: arch/x86_64/mm/init.c:166:
+	void *end = vaddr + ALIGN(len, PAGE_SIZE);
+	for (; vaddr < end; vaddr += PAGE_SIZE, phys += PAGE_SIZE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#180: FILE: arch/x86_64/vdso/vdso-note.S:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#210: FILE: arch/x86_64/vdso/vdso.lds.S:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#346: FILE: arch/x86_64/vdso/vclock_gettime.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#366: FILE: arch/x86_64/vdso/vclock_gettime.c:21:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: arch/x86_64/vdso/vclock_gettime.c:30:
+	long ret;
+	asm("syscall" : "=a" (ret) :

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/x86_64/vdso/vclock_gettime.c:31:
+	    "0" (__NR_clock_gettime),"D" (clock), "S" (ts) : "memory");
 	                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: arch/x86_64/vdso/vclock_gettime.c:38:
+	cycles_t (*vread)(void);
+	vread = gtod->clock.vread;

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: arch/x86_64/vdso/vclock_gettime.c:46:
+	unsigned long seq, ns;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: arch/x86_64/vdso/vclock_gettime.c:74:
+	unsigned long seq, ns, secs;
+	do {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#441: FILE: arch/x86_64/vdso/vclock_gettime.c:96:
+}
+int clock_gettime(clockid_t, struct timespec *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#442: FILE: arch/x86_64/vdso/vclock_gettime.c:97:
+	__attribute__((weak, alias("__vdso_clock_gettime")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_clock_gettime") over __attribute__((alias("__vdso_clock_gettime")))
#442: FILE: arch/x86_64/vdso/vclock_gettime.c:97:
+	__attribute__((weak, alias("__vdso_clock_gettime")));

WARNING:LINE_SPACING: Missing a blank line after declarations
#447: FILE: arch/x86_64/vdso/vclock_gettime.c:102:
+	long ret;
+	if (likely(gtod->sysctl_enabled && gtod->clock.vread)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tz"
#453: FILE: arch/x86_64/vdso/vclock_gettime.c:108:
+		if (unlikely(tz != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#455: FILE: arch/x86_64/vdso/vclock_gettime.c:110:
+			/* This relies on gcc inlining the memcpy. We'll notice
+			   if it ever fails to do so. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#455: FILE: arch/x86_64/vdso/vclock_gettime.c:110:
+			   if it ever fails to do so. */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#464: FILE: arch/x86_64/vdso/vclock_gettime.c:119:
+}
+int gettimeofday(struct timeval *, struct timezone *)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#465: FILE: arch/x86_64/vdso/vclock_gettime.c:120:
+	__attribute__((weak, alias("__vdso_gettimeofday")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_gettimeofday") over __attribute__((alias("__vdso_gettimeofday")))
#465: FILE: arch/x86_64/vdso/vclock_gettime.c:120:
+	__attribute__((weak, alias("__vdso_gettimeofday")));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#471: FILE: arch/x86_64/vdso/vma.c:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#486: FILE: arch/x86_64/vdso/vma.c:16:
+#define VEXTERN(x) extern typeof(__ ## x) *vdso_ ## x;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#486: FILE: arch/x86_64/vdso/vma.c:16:
+#define VEXTERN(x) extern typeof(__ ## x) *vdso_ ## x;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#491: FILE: arch/x86_64/vdso/vma.c:21:
+extern unsigned short vdso_sync_cpuid;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#497: FILE: arch/x86_64/vdso/vma.c:27:
+	unsigned offset = var - &vdso_kernel_start[0] + VDSO_TEXT_OFFSET;

WARNING:LINE_SPACING: Missing a blank line after declarations
#499: FILE: arch/x86_64/vdso/vma.c:29:
+	void *p = vbase + offset;
+	if (*(void **)p != (void *)VMAGIC) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#500: FILE: arch/x86_64/vdso/vma.c:30:
+		printk("VDSO: variable %s broken\n", name);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#512: FILE: arch/x86_64/vdso/vma.c:42:
+	vdso_pages = kmalloc(sizeof(struct page *) * npages, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#517: FILE: arch/x86_64/vdso/vma.c:47:
+		struct page *p;
+		p = alloc_page(GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#521: FILE: arch/x86_64/vdso/vma.c:51:
+		copy_page(page_address(p), vdso_start + i*PAGE_SIZE);
 		                                         ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#529: FILE: arch/x86_64/vdso/vma.c:59:
+		printk("VDSO: I'm broken; not ELF\n");

CHECK:SPACING: No space is necessary after a cast
#533: FILE: arch/x86_64/vdso/vma.c:63:
+#define V(x) *(typeof(x) *) var_ref(vbase, (char *)RELOC_HIDE(&x, 0), #x)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#533: FILE: arch/x86_64/vdso/vma.c:63:
+#define V(x) *(typeof(x) *) var_ref(vbase, (char *)RELOC_HIDE(&x, 0), #x)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#533: FILE: arch/x86_64/vdso/vma.c:63:
+#define V(x) *(typeof(x) *) var_ref(vbase, (char *)RELOC_HIDE(&x, 0), #x)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#534: FILE: arch/x86_64/vdso/vma.c:64:
+#define VEXTERN(x) \
+	V(vdso_ ## x) = &__ ## x;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#534: FILE: arch/x86_64/vdso/vma.c:64:
+#define VEXTERN(x) \
+	V(vdso_ ## x) = &__ ## x;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: arch/x86_64/vdso/vma.c:71:
+	printk("Cannot allocate vdso\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#545: FILE: arch/x86_64/vdso/vma.c:75:
+__initcall(init_vdso_vars);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#550: FILE: arch/x86_64/vdso/vma.c:80:
+/* Put the vdso above the (randomized) stack with another randomized offset.
+   This way there is no hole in the middle of address space.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: arch/x86_64/vdso/vma.c:82:
+   This doesn't give that many random bits */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#553: FILE: arch/x86_64/vdso/vma.c:83:
+static unsigned long vdso_addr(unsigned long start, unsigned len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#556: FILE: arch/x86_64/vdso/vma.c:86:
+	unsigned offset;

WARNING:LINE_SPACING: Missing a blank line after declarations
#557: FILE: arch/x86_64/vdso/vma.c:87:
+	unsigned offset;
+	end = (start + PMD_SIZE - 1) & PMD_MASK;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#570: FILE: arch/x86_64/vdso/vma.c:100:
+/* Setup a VMA at program startup for the vsyscall page.
+   Not called for compat tasks */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#570: FILE: arch/x86_64/vdso/vma.c:100:
+   Not called for compat tasks */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#576: FILE: arch/x86_64/vdso/vma.c:106:
+	unsigned len = round_up(vdso_end - vdso_start, PAGE_SIZE);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#589: FILE: arch/x86_64/vdso/vma.c:119:
+				      VM_READ|VM_EXEC|
 				             ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#589: FILE: arch/x86_64/vdso/vma.c:119:
+				      VM_READ|VM_EXEC|
 				                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: arch/x86_64/vdso/vma.c:120:
+				      VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC|
 				                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#590: FILE: arch/x86_64/vdso/vma.c:120:
+				      VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC|
 				                            ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#590: FILE: arch/x86_64/vdso/vma.c:120:
+				      VM_MAYREAD|VM_MAYWRITE|VM_MAYEXEC|
 				                                       ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#604: FILE: arch/x86_64/vdso/vma.c:134:
+	vdso_enabled = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#607: FILE: arch/x86_64/vdso/vma.c:137:
+__setup("vdso=", vdso_setup);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#613: FILE: arch/x86_64/vdso/vdso.S:1:
+	.section ".vdso","a"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#620: FILE: arch/x86_64/vdso/vdso-start.S:1:
+	.globl vdso_kernel_start

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: include/asm-x86_64/pgtable.h:418:
+extern void set_kernel_map(void *vaddr, unsigned long len,

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#681: FILE: include/asm-x86_64/vsyscall.h:25:
+#define __section_vsyscall_clock __attribute__ \
+	((unused, __section__ (".vsyscall_clock"),aligned(16)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#682: FILE: include/asm-x86_64/vsyscall.h:26:
+	((unused, __section__ (".vsyscall_clock"),aligned(16)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#682: FILE: include/asm-x86_64/vsyscall.h:26:
+	((unused, __section__ (".vsyscall_clock"),aligned(16)))
 	                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#713: FILE: include/asm-x86_64/elf.h:165:
 
+

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SETUP_ADDITIONAL_PAGES' is wrong - use Kconfig variables or standard guards instead
#714: FILE: include/asm-x86_64/elf.h:166:
+#define ARCH_HAS_SETUP_ADDITIONAL_PAGES 1

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#716: FILE: include/asm-x86_64/elf.h:168:
+extern int arch_setup_additional_pages(struct linux_binprm *bprm,

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: include/asm-x86_64/elf.h:169:
+                                       int executable_stack);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: include/asm-x86_64/elf.h:169:
+                                       int executable_stack);$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#721: FILE: include/asm-x86_64/elf.h:173:
+#define ARCH_DLINFO						\
+do if (vdso_enabled) {						\
+	NEW_AUX_ENT(AT_SYSINFO_EHDR,(unsigned long)current->mm->context.vdso);\
+} while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#723: FILE: include/asm-x86_64/elf.h:175:
+	NEW_AUX_ENT(AT_SYSINFO_EHDR,(unsigned long)current->mm->context.vdso);\
 	                           ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#734: FILE: arch/x86_64/vdso/vextern.h:1:
+#ifndef VEXTERN

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#736: FILE: arch/x86_64/vdso/vextern.h:3:
+#define VEXTERN(x) \
+	extern typeof(x) *vdso_ ## x __attribute__((visibility("hidden")));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#736: FILE: arch/x86_64/vdso/vextern.h:3:
+#define VEXTERN(x) \
+	extern typeof(x) *vdso_ ## x __attribute__((visibility("hidden")));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#743: FILE: arch/x86_64/vdso/vextern.h:10:
+/* Any kernel variables used in the vDSO must be exported in the main
+   kernel's vmlinux.lds.S/vsyscall.h/proper __section and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#745: FILE: arch/x86_64/vdso/vextern.h:12:
+   The main kernel later fills in the values.   */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#755: FILE: arch/x86_64/vdso/vgetcpu.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#770: FILE: arch/x86_64/vdso/vgetcpu.c:16:
+long __vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#770: FILE: arch/x86_64/vdso/vgetcpu.c:16:
+long __vdso_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#776: FILE: arch/x86_64/vdso/vgetcpu.c:22:
+	/* Fast cache - only recompute value once per jiffies and avoid
+	   relatively costly rdtscp/cpuid otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#782: FILE: arch/x86_64/vdso/vgetcpu.c:28:
+	   If you don't like it pass NULL. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#783: FILE: arch/x86_64/vdso/vgetcpu.c:29:
+	if (tcache && tcache->blob[0] == (j = *vdso_jiffies)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#803: FILE: arch/x86_64/vdso/vgetcpu.c:49:
+long getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#803: FILE: arch/x86_64/vdso/vgetcpu.c:49:
+long getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *tcache)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#804: FILE: arch/x86_64/vdso/vgetcpu.c:50:
+	__attribute__((weak, alias("__vdso_getcpu")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("__vdso_getcpu") over __attribute__((alias("__vdso_getcpu")))
#804: FILE: arch/x86_64/vdso/vgetcpu.c:50:
+	__attribute__((weak, alias("__vdso_getcpu")));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: arch/x86_64/vdso/vvar.c:1:
+/* Define pointer to external vDSO variables.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#811: FILE: arch/x86_64/vdso/vvar.c:2:
+/* Define pointer to external vDSO variables.
+   These are part of the vDSO. The kernel fills in the real addresses

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#813: FILE: arch/x86_64/vdso/vvar.c:4:
+   kernel isn't yet and we don't know the final addresses. */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#820: FILE: arch/x86_64/vdso/vvar.c:11:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x = (void *)VMAGIC;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#820: FILE: arch/x86_64/vdso/vvar.c:11:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x = (void *)VMAGIC;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#820: FILE: arch/x86_64/vdso/vvar.c:11:
+#define VEXTERN(x) typeof (__ ## x) *vdso_ ## x = (void *)VMAGIC;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#901: FILE: include/asm-x86_64/vgtod.h:1:
+#ifndef _ASM_VGTOD_H

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#925: FILE: include/asm-x86_64/vgtod.h:25:
+};
+extern struct vsyscall_gtod_data __vsyscall_gtod_data

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#935: FILE: arch/x86_64/vdso/voffset.h:1:
+#define VDSO_TEXT_OFFSET 0x500

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 61 warnings, 17 checks, 721 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
