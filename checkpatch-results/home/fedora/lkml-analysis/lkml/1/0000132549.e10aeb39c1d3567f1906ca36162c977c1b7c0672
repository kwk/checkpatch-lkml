WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/8b3725621074040d380664964ffbc40610aef8c6

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#81: 
filter file at the root of the subsytem.  Note however, that if any
                               ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#83: 
set, the set will fail and all filters in the subsytem are
                                              ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: kernel/trace/trace.h:765:
+extern void print_event_filter(struct ftrace_event_call *call,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#164: FILE: kernel/trace/trace.h:767:
+extern int apply_event_filter(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: kernel/trace/trace.h:769:
+extern int apply_subsystem_event_filter(struct event_subsystem *system,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: kernel/trace/trace.h:771:
+extern void print_subsystem_event_filter(struct event_subsystem *system,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#211: FILE: kernel/trace/trace.h:819:
+	u##size *addr = (u##size *)(event + pred->offset);		\
 	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#270: FILE: kernel/trace/trace_events.c:519:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#279: FILE: kernel/trace/trace_events.c:525:
+	free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#331: FILE: kernel/trace/trace_events.c:575:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#340: FILE: kernel/trace/trace_events.c:581:
+	free_page((unsigned long) buf);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*system->filter)...) over kzalloc(sizeof(struct event_filter)...)
#351: FILE: kernel/trace/trace_events.c:737:
+	system->filter = kzalloc(sizeof(struct event_filter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#353: FILE: kernel/trace/trace_events.c:739:
+	if (!system->filter) {
+		pr_warning("Could not allocate filter for subsystem "

WARNING:SPLIT_STRING: quoted string split across lines
#354: FILE: kernel/trace/trace_events.c:740:
+		pr_warning("Could not allocate filter for subsystem "
+			   "'%s'\n", name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#631: FILE: kernel/trace/trace_events_filter.c:232:
+	BUG_ON(!filter->filter_string);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#677: FILE: kernel/trace/trace_events_filter.c:265:
+	free_page((unsigned long) buf);

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#915: FILE: kernel/trace/trace_events_filter.c:536:
+		if (strict_strtoull(pred->str_val, 0, &val)) {

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#1443: FILE: kernel/trace/trace_events_filter.c:959:
+			if (!operand1)
[...]
+			else if (!operand2)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1447: FILE: kernel/trace/trace_events_filter.c:963:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1459: FILE: kernel/trace/trace_events_filter.c:975:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: kernel/trace/trace_events_filter.c:977:
+				err = filter_add_subsystem_pred(ps, system,
+							pred, filter_string);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1465: FILE: kernel/trace/trace_events_filter.c:981:
+			operand1 = operand2 = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#1478: FILE: kernel/trace/trace_events_filter.c:994:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1484: FILE: kernel/trace/trace_events_filter.c:1000:
+		operand1 = operand2 = NULL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000132549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 18 checks, 1434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000132549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
