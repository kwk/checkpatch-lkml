WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
> > > Of course, because the oom killer must be aware that tasks in disjoint

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#135: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: Documentation/cgroups/oom.txt:9:
+/proc/<pid>/oom_adj. Giving it a high score will increase the likelihood of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: Documentation/cgroups/oom.txt:10:
+this process being killed by the oom-killer.  Valid values are in the range $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#163: FILE: Documentation/cgroups/oom.txt:24:
+oom.victim value, the usual badness heuristics would be applied. The $

WARNING:TYPO_SPELLING: 'unnecesarily' may be misspelled - perhaps 'unnecessarily'?
#168: FILE: Documentation/cgroups/oom.txt:29:
+get killed unnecesarily.
            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#193: FILE: include/linux/oomcontrol.h:1:
+#ifndef _LINUX_OOMCONTROL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#197: FILE: include/linux/oomcontrol.h:5:
+struct oom_cgroup { $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: include/linux/oomcontrol.h:9:
+^I */  $

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#220: FILE: init/Kconfig:357:
+config CGROUP_OOM
+	bool "Oom cgroup subsystem"
+	depends on CGROUPS
+	help
+	  This provides a cgroup subsystem which aids controlling
+	  the order in which tasks whould be killed during
+	  out of memory situations.
+	
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'whould' may be misspelled - perhaps 'would'?
#225: FILE: init/Kconfig:362:
+	  the order in which tasks whould be killed during
 	                           ^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: init/Kconfig:364:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: mm/Makefile:36:
+obj-$(CONFIG_CGROUP_OOM) += oomcontrol.o $

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#254: FILE: mm/oom_kill.c:200:
constrained_alloc(struct zonelist *zonelist,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: space preferred before that '-' (ctx:VxE)
#279: FILE: mm/oom_kill.c:268:
+		honour_cpuset_constraint = *(container_of(p->cgroups-
 		                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#281: FILE: mm/oom_kill.c:269:
+                                                struct oom_cgroup, css))-$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#281: FILE: mm/oom_kill.c:269:
+                                                struct oom_cgroup, css))-$

CHECK:SPACING: space preferred before that '-' (ctx:VxE)
#281: FILE: mm/oom_kill.c:269:
+                                                struct oom_cgroup, css))-
                                                                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'taskvictim == chosenvictim'
#284: FILE: mm/oom_kill.c:271:
+		if (taskvictim > chosenvictim ||
+			(((taskvictim == chosenvictim) ||
+				(cpuset_constrained && honour_cpuset_constraint))
+				 && points > *ppoints) ||
+			(taskvictim && !chosen)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: mm/oom_kill.c:272:
+		if (taskvictim > chosenvictim ||
+			(((taskvictim == chosenvictim) ||

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: mm/oom_kill.c:274:
+				(cpuset_constrained && honour_cpuset_constraint))
+				 && points > *ppoints) ||

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#289: FILE: mm/oom_kill.c:276:
+			(taskvictim && !chosen)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#294: FILE: mm/oom_kill.c:281:
+
+		}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: mm/oom_kill.c:282:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#321: FILE: mm/oom_kill.c:541:
+static void __out_of_memory(gfp_t gfp_mask, int order, int $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: mm/oom_kill.c:598:
+^I__out_of_memory(0, 0, 0); $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: mm/oomcontrol.c:1:
+/*

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: mm/oomcontrol.c:15:
+        return container_of(cgroup_subsys_state(cgrp,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: mm/oomcontrol.c:15:
+        return container_of(cgroup_subsys_state(cgrp,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: mm/oomcontrol.c:16:
+                                oom_subsys_id), struct oom_cgroup,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: mm/oomcontrol.c:16:
+                                oom_subsys_id), struct oom_cgroup,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: mm/oomcontrol.c:17:
+                                css);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: mm/oomcontrol.c:17:
+                                css);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#380: FILE: mm/oomcontrol.c:20:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/oomcontrol.c:22:
+static struct cgroup_subsys_state *oom_create(struct cgroup_subsys *ss,
+						   struct cgroup *cont)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#394: FILE: mm/oomcontrol.c:34:
+	if (cont->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#411: FILE: mm/oomcontrol.c:51:
+	struct oom_cgroup *oom_css = oom_css_from_cgroup(cont);
+	if (cont->parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#411: FILE: mm/oomcontrol.c:51:
+	if (cont->parent == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: mm/oomcontrol.c:57:
+                                       u64 val)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: mm/oomcontrol.c:57:
+static int oom_victim_write(struct cgroup *cgrp, struct cftype *cft,
+                                       u64 val)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: mm/oomcontrol.c:57:
+                                       u64 val)$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#419: FILE: mm/oomcontrol.c:59:
+{
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: mm/oomcontrol.c:60:
+        cgroup_lock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: mm/oomcontrol.c:60:
+        cgroup_lock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: mm/oomcontrol.c:64:
+        cgroup_unlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: mm/oomcontrol.c:64:
+        cgroup_unlock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#426: FILE: mm/oomcontrol.c:66:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#426: FILE: mm/oomcontrol.c:66:
+        return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: mm/oomcontrol.c:71:
+        u64 victim = (oom_css_from_cgroup(cgrp))->victim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: mm/oomcontrol.c:71:
+        u64 victim = (oom_css_from_cgroup(cgrp))->victim;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: mm/oomcontrol.c:73:
+        return victim;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: mm/oomcontrol.c:73:
+        return victim;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: mm/oomcontrol.c:77:
+                            const char *buffer)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: mm/oomcontrol.c:77:
+                            const char *buffer)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: mm/oomcontrol.c:90:
+        if (*(oom_css_from_cgroup(cgrp))->cpuset_constraint)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: mm/oomcontrol.c:90:
+        if (*(oom_css_from_cgroup(cgrp))->cpuset_constraint)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: mm/oomcontrol.c:118:
+                                struct cgroup *cont)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: mm/oomcontrol.c:118:
+static int oom_populate(struct cgroup_subsys *ss,
+                                struct cgroup *cont)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: mm/oomcontrol.c:118:
+                                struct cgroup *cont)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#482: FILE: mm/oomcontrol.c:122:
+	if  (cont->parent == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: mm/oomcontrol.c:124:
+		ret = cgroup_add_files(cont, ss, oom_cgroup_root_files,
+				ARRAY_SIZE(oom_cgroup_root_files));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: mm/oomcontrol.c:127:
+		ret = cgroup_add_files(cont, ss, oom_cgroup_files,
+				ARRAY_SIZE(oom_cgroup_files));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176679.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 21 warnings, 17 checks, 320 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000176679.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
