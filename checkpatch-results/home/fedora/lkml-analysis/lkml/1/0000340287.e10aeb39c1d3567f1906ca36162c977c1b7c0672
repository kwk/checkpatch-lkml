CHECK:BRACES: braces {} should be used on all arms of this statement
#147: FILE: drivers/kvm/lapic.c:343:
+		if (vcpu->arch.mp_state == VCPU_MP_STATE_RUNNABLE)
[...]
-		else if (vcpu->mp_state == VCPU_MP_STATE_HALTED) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#280: FILE: drivers/kvm/lapic.c:833:
 	apic_debug("apic base msr is 0x%016" PRIx64 ", and base address is "
+		   "0x%lx.\n", apic->vcpu->arch.apic_base, apic->base_address);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SIZEOF_PARENTHESIS: sizeof *sp should be sizeof(*sp)
#506: FILE: drivers/kvm/mmu.c:571:
+	sp = mmu_memory_cache_alloc(&vcpu->arch.mmu_page_header_cache, sizeof *sp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#639: FILE: drivers/kvm/mmu.c:1077:
+		if (vcpu->arch.mmu.root_level == PT32E_ROOT_LEVEL) {
[...]
-		} else if (vcpu->mmu.root_level == 0)
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#955: FILE: drivers/kvm/svm.c:230:
+	vcpu->arch.rip = svm->vmcb->save.rip = svm->next_rip;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: drivers/kvm/svm.c:799:
+       vcpu->arch.cr4 = cr4;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index >= 0'
#1292: FILE: drivers/kvm/vmx.c:664:
+		if ((index >= 0) && (vmx->vcpu.arch.shadow_efer & EFER_SCE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1749: FILE: drivers/kvm/vmx.c:2273:
 		    == INTR_TYPE_EXT_INTR
+		    && vcpu->arch.rmode.active) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1946: FILE: drivers/kvm/x86.c:267:
 		} else
[...]
+		if (is_pae(vcpu) && !load_pdptrs(vcpu, vcpu->arch.cr3)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1976: FILE: drivers/kvm/x86.c:310:
 	} else if (is_paging(vcpu) && !is_pae(vcpu) && (cr4 & X86_CR4_PAE)
+		   && !load_pdptrs(vcpu, vcpu->arch.cr3)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2032: FILE: drivers/kvm/x86.c:440:
 	if (is_paging(vcpu)
+	    && (vcpu->arch.shadow_efer & EFER_LME) != (efer & EFER_LME)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: drivers/kvm/x86.c:848:
+	if (copy_to_user(entries, &vcpu->arch.cpuid_entries,
+			   vcpu->arch.cpuid_nent * sizeof(struct kvm_cpuid_entry2)))

WARNING:SIZEOF_PARENTHESIS: sizeof *s should be sizeof(*s)
#2152: FILE: drivers/kvm/x86.c:1024:
+	memcpy(s->regs, vcpu->arch.apic->regs, sizeof *s);

WARNING:SIZEOF_PARENTHESIS: sizeof *s should be sizeof(*s)
#2161: FILE: drivers/kvm/x86.c:1034:
+	memcpy(vcpu->arch.apic->regs, s->regs, sizeof *s);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2352: FILE: drivers/kvm/x86.c:1886:
+	q = vmap(vcpu->arch.pio.guest_pages, nr_pages, VM_READ|VM_WRITE,
 	                                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2444: FILE: drivers/kvm/x86.c:1999:
+	vcpu->run->io.size = vcpu->arch.pio.size = size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2453: FILE: drivers/kvm/x86.c:2001:
+	vcpu->run->io.count = vcpu->arch.pio.count = vcpu->arch.pio.cur_count = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2454: FILE: drivers/kvm/x86.c:2002:
+	vcpu->run->io.port = vcpu->arch.pio.port = port;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2480: FILE: drivers/kvm/x86.c:2037:
+	vcpu->run->io.size = vcpu->arch.pio.size = size;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2489: FILE: drivers/kvm/x86.c:2039:
+	vcpu->run->io.count = vcpu->arch.pio.count = vcpu->arch.pio.cur_count = count;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2490: FILE: drivers/kvm/x86.c:2040:
+	vcpu->run->io.port = vcpu->arch.pio.port = port;

WARNING:SIZEOF_PARENTHESIS: sizeof vcpu->arch.irq_pending should be sizeof(vcpu->arch.irq_pending)
#2937: FILE: drivers/kvm/x86.c:2753:
+		       sizeof vcpu->arch.irq_pending);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3022: FILE: drivers/kvm/x86.c:2942:
+	BUG_ON((unsigned long)&vcpu->arch.host_fx_image & 0xF);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3154: FILE: drivers/kvm/x86.h:496:
+	return vcpu->arch.mp_state == VCPU_MP_STATE_RUNNABLE
+	       || vcpu->arch.mp_state == VCPU_MP_STATE_SIPI_RECEIVED;

WARNING:SIZEOF_PARENTHESIS: sizeof c->regs should be sizeof(c->regs)
#3169: FILE: drivers/kvm/x86_emulate.c:773:
+	memcpy(c->regs, ctxt->vcpu->arch.regs, sizeof c->regs);

WARNING:SIZEOF_PARENTHESIS: sizeof c->regs should be sizeof(c->regs)
#3178: FILE: drivers/kvm/x86_emulate.c:1229:
+	memcpy(c->regs, ctxt->vcpu->arch.regs, sizeof c->regs);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#3193: FILE: drivers/kvm/x86_emulate.c:1250:
 			if ((c->rep_prefix == REPE_PREFIX) &&
[...]
+					ctxt->vcpu->arch.rip = c->eip;

WARNING:SIZEOF_PARENTHESIS: sizeof c->regs should be sizeof(c->regs)
#3227: FILE: drivers/kvm/x86_emulate.c:1668:
+	memcpy(ctxt->vcpu->arch.regs, c->regs, sizeof c->regs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 16 checks, 2937 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
