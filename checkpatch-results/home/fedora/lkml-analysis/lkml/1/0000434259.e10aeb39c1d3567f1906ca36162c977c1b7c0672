WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#86: FILE: drivers/md/Kconfig:265:
+config DM_DELAY
+	tristate "I/O delaying target (EXPERIMENTAL)"
+	depends on BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	A target that delays reads and/or writes and can send
+	them to different devices.  Useful for testing.
+
+	If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: drivers/md/dm-delay.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#145: FILE: drivers/md/dm-delay.c:31:
+	unsigned read_delay;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#146: FILE: drivers/md/dm-delay.c:32:
+	unsigned reads;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#150: FILE: drivers/md/dm-delay.c:36:
+	unsigned write_delay;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#151: FILE: drivers/md/dm-delay.c:37:
+	unsigned writes;

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: drivers/md/dm-delay.c:86:
+	int start_timer = 0;
+	BIO_LIST(flush_bios);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses - maybe == should be = ?
#207: FILE: drivers/md/dm-delay.c:93:
+			if ((bio_data_dir(delayed->bio) == WRITE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: drivers/md/dm-delay.c:101:
+		if (!start_timer) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#218: FILE: drivers/md/dm-delay.c:104:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#261: FILE: drivers/md/dm-delay.c:147:
+	dc->reads = dc->writes = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#263: FILE: drivers/md/dm-delay.c:149:
+	if (sscanf(argv[1], "%llu", &tmpll) != 1) {
+		ti->error = "Invalid device sector";
+		goto bad;
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#269: FILE: drivers/md/dm-delay.c:155:
+	if (sscanf(argv[2], "%u", &dc->read_delay) != 1) {
+		ti->error = "Invalid delay";
+		goto bad;
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#285: FILE: drivers/md/dm-delay.c:171:
+	if (sscanf(argv[4], "%llu", &tmpll) != 1) {
+		ti->error = "Invalid write device sector";
+		goto bad;
+	}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#291: FILE: drivers/md/dm-delay.c:177:
+	if (sscanf(argv[5], "%u", &dc->write_delay) != 1) {
+		ti->error = "Invalid write delay";
+		goto bad;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#354: FILE: drivers/md/dm-delay.c:240:
+	delayed->expires = expires = jiffies + (delay * HZ / 1000);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dc->dev_write'
#393: FILE: drivers/md/dm-delay.c:279:
+	if ((bio_data_dir(bio) == WRITE) && (dc->dev_write)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#409: FILE: drivers/md/dm-delay.c:295:
+			char *result, unsigned maxlen)

CHECK:SPACING: No space is necessary after a cast
#421: FILE: drivers/md/dm-delay.c:307:
+		       (unsigned long long) dc->start_read,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#425: FILE: drivers/md/dm-delay.c:311:
+			       (unsigned long long) dc->start_write,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 7 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434259.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
