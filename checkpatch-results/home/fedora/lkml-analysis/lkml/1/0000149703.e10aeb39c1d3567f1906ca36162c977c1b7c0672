WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
This patch adds complete SPC-3 compliant PROUT PREEMPT service action support,

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#106: 
SPC-3 PR [iSCSI] Service Action: implict RELEASE cleared reservation holder TYPE: Write Exclusive Access, All Registrants ALL_TG_PT: 1
                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/lio-core/target_core_pr.c:1218:
+		core_scsi3_ua_allocate(pr_reg_p->pr_reg_nacl,
+				pr_reg_p->pr_res_mapped_lun,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: drivers/lio-core/target_core_pr.c:1298:
+			core_scsi3_ua_allocate(pr_reg_nacl, pr_res_mapped_lun,
 				0x2A, ASCQ_2AH_RESERVATIONS_PREEMPTED);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#209: FILE: drivers/lio-core/target_core_pr.c:1312:
+static void __core_scsi3_complete_pro_preempt(

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#218: FILE: drivers/lio-core/target_core_pr.c:1321:
+	 * Do an implict RELEASE of the existing reservation.
 	         ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/lio-core/target_core_pr.c:1325:
+		__core_scsi3_complete_pro_release(dev, nacl,
+				dev->dev_pr_res_holder, 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#229: FILE: drivers/lio-core/target_core_pr.c:1332:
+	printk(KERN_INFO "SPC-3 PR [%s] Service Action: PREEMPT created new"

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: drivers/lio-core/target_core_pr.c:1333:
+	printk(KERN_INFO "SPC-3 PR [%s] Service Action: PREEMPT created new"
+		" reservation holder TYPE: %s ALL_TG_PT: %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#233: FILE: drivers/lio-core/target_core_pr.c:1336:
+	printk(KERN_INFO "SPC-3 PR [%s] PREEMPT from Node: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: drivers/lio-core/target_core_pr.c:1337:
+	printk(KERN_INFO "SPC-3 PR [%s] PREEMPT from Node: %s\n",
+		tfo->get_fabric_name(), nacl->initiatorname);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: drivers/lio-core/target_core_pr.c:1367:
+		printk(KERN_ERR "SPC-3 PR: Unable to locate"

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: drivers/lio-core/target_core_pr.c:1368:
+		printk(KERN_ERR "SPC-3 PR: Unable to locate"
+			" PR_REGISTERED *pr_reg for PREEMPT\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#273: FILE: drivers/lio-core/target_core_pr.c:1376:
+		printk(KERN_ERR "SPC-3 PR: Illegal SCOPE: 0x%02x\n", scope);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG'
#280: FILE: drivers/lio-core/target_core_pr.c:1383:
+	if (pr_res_holder &&
+	   ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
+	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG'
#280: FILE: drivers/lio-core/target_core_pr.c:1383:
+	if (pr_res_holder &&
+	   ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
+	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/lio-core/target_core_pr.c:1384:
+	if (pr_res_holder &&
+	   ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder->pr_res_key != sa_res_key'
#299: FILE: drivers/lio-core/target_core_pr.c:1402:
+	if (!(pr_res_holder) || (pr_res_holder->pr_res_key != sa_res_key)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/lio-core/target_core_pr.c:1411:
+		list_for_each_entry_safe(pr_reg, pr_reg_tmp,
+				&pr_tmpl->registration_list, pr_reg_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: drivers/lio-core/target_core_pr.c:1437:
+				__core_scsi3_free_registration(dev, pr_reg,
+							calling_it_nexus);

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#343: FILE: drivers/lio-core/target_core_pr.c:1446:
+				 * all other registrations and do an implict
 				                                     ^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_reg->pr_res_key != sa_res_key'
#350: FILE: drivers/lio-core/target_core_pr.c:1453:
+				if ((sa_res_key) &&
+				     (pr_reg->pr_res_key != sa_res_key))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: drivers/lio-core/target_core_pr.c:1454:
+				if ((sa_res_key) &&
+				     (pr_reg->pr_res_key != sa_res_key))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/lio-core/target_core_pr.c:1468:
+				core_scsi3_ua_allocate(pr_reg_nacl,
+					pr_res_mapped_lun, 0x2A,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: drivers/lio-core/target_core_pr.c:1491:
+			__core_scsi3_complete_pro_preempt(dev, pr_reg_n,
+					type, scope);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/lio-core/target_core_pr.c:1521:
+		__core_scsi3_complete_pro_preempt(dev, pr_reg_n,
+				type, scope);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: drivers/lio-core/target_core_pr.c:1540:
+	__core_scsi3_complete_pro_release(dev, pr_res_holder->pr_reg_nacl,
+				dev->dev_pr_res_holder, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: drivers/lio-core/target_core_pr.c:1553:
+	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
+			&pr_tmpl->registration_list, pr_reg_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#451: FILE: drivers/lio-core/target_core_pr.c:1554:
+			&pr_tmpl->registration_list, pr_reg_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/lio-core/target_core_pr.c:1566:
+		__core_scsi3_free_registration(dev, pr_reg,
+				calling_it_nexus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: drivers/lio-core/target_core_pr.c:1574:
+		core_scsi3_ua_allocate(pr_reg_nacl, pr_res_mapped_lun, 0x2A,
+				ASCQ_2AH_RESERVATIONS_PREEMPTED);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prh_type != type'
#492: FILE: drivers/lio-core/target_core_pr.c:1595:
+	if ((prh_type != type) || (prh_scope != scope)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prh_scope != scope'
#492: FILE: drivers/lio-core/target_core_pr.c:1595:
+	if ((prh_type != type) || (prh_scope != scope)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: drivers/lio-core/target_core_pr.c:1598:
+		list_for_each_entry_safe(pr_reg, pr_reg_tmp,
+			&pr_tmpl->registration_list, pr_reg_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#496: FILE: drivers/lio-core/target_core_pr.c:1599:
+			&pr_tmpl->registration_list, pr_reg_list) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/lio-core/target_core_pr.c:1605:
+			core_scsi3_ua_allocate(pr_reg->pr_reg_nacl,
+					pr_reg->pr_res_mapped_lun, 0x2A,

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#523: FILE: drivers/lio-core/target_core_pr.c:1704:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 26 checks, 376 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
