WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: fs/azfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#146: FILE: fs/azfs/inode.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#147: FILE: fs/azfs/inode.c:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/bug.h> instead of <asm/bug.h>
#178: FILE: fs/azfs/inode.c:53:
+#include <asm/bug.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#180: FILE: fs/azfs/inode.c:55:
+#include <asm/pgtable.h>

WARNING:INCLUDE_LINUX: Use #include <linux/string.h> instead of <asm/string.h>
#181: FILE: fs/azfs/inode.c:56:
+#include <asm/string.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#187: FILE: fs/azfs/inode.c:62:
+#define AZFS_SUPERBLOCK_FLAGS		MS_SYNCHRONOUS | \
+					MS_DIRSYNC | \
+					MS_ACTIVE

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#191: FILE: fs/azfs/inode.c:66:
+#define AZFS_BDI_CAPABILITIES		BDI_CAP_NO_ACCT_DIRTY | \
+					BDI_CAP_NO_WRITEBACK | \
+					BDI_CAP_MAP_COPY | \
+					BDI_CAP_MAP_DIRECT | \
+					BDI_CAP_VMFLAGS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#197: FILE: fs/azfs/inode.c:72:
+#define AZFS_CACHE_FLAGS		SLAB_HWCACHE_ALIGN | \
+					SLAB_RECLAIM_ACCOUNT | \
+					SLAB_MEM_SPREAD

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#220: FILE: fs/azfs/inode.c:95:
+	spinlock_t			lock;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#237: FILE: fs/azfs/inode.c:112:
+static struct kmem_cache		*azfs_znode_cache __read_mostly = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#238: FILE: fs/azfs/inode.c:113:
+static struct kmem_cache		*azfs_block_cache __read_mostly = NULL;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'inode' may be better as '(inode)' to avoid precedence issues
#240: FILE: fs/azfs/inode.c:115:
+#define I2S(inode) \
+	inode->i_sb->s_fs_info

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#381: FILE: fs/azfs/inode.c:256:
+ * @dir, @dentry, @mode, @nd: see inode_operations methods
                           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#385: FILE: fs/azfs/inode.c:260:
+	    struct nameidata *nd)
 	                      ^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#416: FILE: fs/azfs/inode.c:291:
+	inode = azfs_new_inode(dir->i_sb, dir, S_IFLNK | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#422: FILE: fs/azfs/inode.c:297:
+		iput(inode);
 		^^^^

CHECK:SPACING: No space is necessary after a cast
#458: FILE: fs/azfs/inode.c:333:
+	todo = min((loff_t) iov->iov_len, i_size_read(inode) - pos);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#468: FILE: fs/azfs/inode.c:343:
+		if (copy_to_user(target, (void*) pin, size)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#468: FILE: fs/azfs/inode.c:343:
+		if (copy_to_user(target, (void*) pin, size)) {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#517: FILE: fs/azfs/inode.c:392:
+		if (copy_from_user((void*) pin, source, size)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#517: FILE: fs/azfs/inode.c:392:
+		if (copy_from_user((void*) pin, source, size)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#633: FILE: fs/azfs/inode.c:508:
+		west = east = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: fs/azfs/inode.c:545:
+				if (!azfs_block_init(&znode->block_list,
+						east->id, count)) {

CHECK:SPACING: No space is necessary after a cast
#691: FILE: fs/azfs/inode.c:566:
+			if ((signed long) count + delta > 0) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#698: FILE: fs/azfs/inode.c:573:
+			west = east = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: fs/azfs/inode.c:603:
+					if (!azfs_block_init(&super->block_list,
+							id, count)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: fs/azfs/inode.c:625:
+	znode->size = min(i_size_read(inode),
+			(loff_t) inode->i_blocks << super->block_shift);

CHECK:SPACING: No space is necessary after a cast
#750: FILE: fs/azfs/inode.c:625:
+			(loff_t) inode->i_blocks << super->block_shift);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#786: FILE: fs/azfs/inode.c:661:
+static struct inode_operations azfs_dir_iops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#807: FILE: fs/azfs/inode.c:682:
+static struct inode_operations azfs_reg_iops = {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#829: FILE: fs/azfs/inode.c:704:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#833: FILE: fs/azfs/inode.c:708:
+		dir->i_mtime = dir->i_ctime = inode->i_mtime;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#938: FILE: fs/azfs/inode.c:813:
+	inodes = blocks = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Opt_blocksize_short>
#967: FILE: fs/azfs/inode.c:842:
+	Opt_blocksize_short,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_blocksize_long>
#968: FILE: fs/azfs/inode.c:843:
+	Opt_blocksize_long,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#969: FILE: fs/azfs/inode.c:844:
+	Opt_uid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#970: FILE: fs/azfs/inode.c:845:
+	Opt_gid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#971: FILE: fs/azfs/inode.c:846:
+	Opt_err

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1030: FILE: fs/azfs/inode.c:905:
+	printk(KERN_ERR "%s: invalid mount option\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: fs/azfs/inode.c:906:
+	printk(KERN_ERR "%s: invalid mount option\n",
+			AZFS_FILESYSTEM_NAME);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1051: FILE: fs/azfs/inode.c:926:
+	BUG_ON(!sb->s_bdev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1055: FILE: fs/azfs/inode.c:930:
+	BUG_ON(!disk || !disk->queue);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1058: FILE: fs/azfs/inode.c:933:
+		printk(KERN_ERR "%s needs a block device with a "

WARNING:SPLIT_STRING: quoted string split across lines
#1059: FILE: fs/azfs/inode.c:934:
+		printk(KERN_ERR "%s needs a block device with a "
+				"direct_access() method\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1061: FILE: fs/azfs/inode.c:936:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#1081: FILE: fs/azfs/inode.c:956:
+		if (data && strlen((char*) data))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1081: FILE: fs/azfs/inode.c:956:
+		if (data && strlen((char*) data))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1082: FILE: fs/azfs/inode.c:957:
+			printk(KERN_WARNING "/dev/%s was already mounted with "

WARNING:SPLIT_STRING: quoted string split across lines
#1083: FILE: fs/azfs/inode.c:958:
+			printk(KERN_WARNING "/dev/%s was already mounted with "
+					"%s before, it will be mounted with "

WARNING:SPLIT_STRING: quoted string split across lines
#1084: FILE: fs/azfs/inode.c:959:
+					"%s before, it will be mounted with "
+					"mount options used last time, "

WARNING:SPLIT_STRING: quoted string split across lines
#1085: FILE: fs/azfs/inode.c:960:
+					"mount options used last time, "
+					"options just given would be ignored\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*super)...) over kzalloc(sizeof(struct azfs_super)...)
#1089: FILE: fs/azfs/inode.c:964:
+		super = kzalloc(sizeof(struct azfs_super), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: fs/azfs/inode.c:971:
+		if (!azfs_parse_mount_parameters(super, (char*) data)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1096: FILE: fs/azfs/inode.c:971:
+		if (!azfs_parse_mount_parameters(super, (char*) data)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1101: FILE: fs/azfs/inode.c:976:
+		inode = azfs_new_inode(sb, NULL, S_IFDIR | S_IRWXUGO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1130: FILE: fs/azfs/inode.c:1005:
+		block = azfs_block_init(&super->block_list,
+				0, super->media_size >> super->block_shift);

CHECK:SPACING: No space is necessary after a cast
#1141: FILE: fs/azfs/inode.c:1016:
+		super->ph_addr = (unsigned long) kaddr;

CHECK:SPACING: No space is necessary after a cast
#1143: FILE: fs/azfs/inode.c:1018:
+		super->io_addr = (unsigned long) ioremap_flags(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1143: FILE: fs/azfs/inode.c:1018:
+		super->io_addr = (unsigned long) ioremap_flags(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1160: FILE: fs/azfs/inode.c:1035:
+		printk(KERN_INFO "Block size on %s is smaller then system "

WARNING:SPLIT_STRING: quoted string split across lines
#1161: FILE: fs/azfs/inode.c:1036:
+		printk(KERN_INFO "Block size on %s is smaller then system "
+				"page size: mmap() would not be supported\n",

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1175: FILE: fs/azfs/inode.c:1050:
+			iput(inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1228: FILE: fs/azfs/inode.c:1103:
+	azfs_znode_cache = kmem_cache_create("azfs_znode_cache",
+			sizeof(struct azfs_znode), 0, AZFS_CACHE_FLAGS, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1230: FILE: fs/azfs/inode.c:1105:
+		printk(KERN_ERR "Could not allocate inode cache for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1231: FILE: fs/azfs/inode.c:1106:
+		printk(KERN_ERR "Could not allocate inode cache for %s\n",
+				AZFS_FILESYSTEM_NAME);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: fs/azfs/inode.c:1112:
+	azfs_block_cache = kmem_cache_create("azfs_block_cache",
+			sizeof(struct azfs_block), 0, AZFS_CACHE_FLAGS, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1239: FILE: fs/azfs/inode.c:1114:
+		printk(KERN_ERR "Could not allocate block cache for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: fs/azfs/inode.c:1115:
+		printk(KERN_ERR "Could not allocate block cache for %s\n",
+				AZFS_FILESYSTEM_NAME);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1247: FILE: fs/azfs/inode.c:1122:
+		printk(KERN_ERR "Could not register %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1248: FILE: fs/azfs/inode.c:1123:
+		printk(KERN_ERR "Could not register %s\n",
+				AZFS_FILESYSTEM_NAME);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1256: FILE: fs/azfs/inode.c:1131:
+	if (azfs_block_cache)
+		kmem_cache_destroy(azfs_block_cache);

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#1259: FILE: fs/azfs/inode.c:1134:
+	if (azfs_znode_cache)
+		kmem_cache_destroy(azfs_znode_cache);

CHECK:SPACING: No space is necessary after a cast
#1278: FILE: fs/azfs/inode.c:1153:
+		iounmap((void*) super->io_addr);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1278: FILE: fs/azfs/inode.c:1153:
+		iounmap((void*) super->io_addr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 29 warnings, 34 checks, 1238 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258037.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
