WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
system and a second set for GFP_THISNODE allocations. Based on the zones allowed

WARNING:TYPO_SPELLING: 'interates' may be misspelled - perhaps 'iterates'?
#34: 
macro is introduced called for_each_zone_zonelist() interates through each
                                                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#74: FILE: arch/parisc/mm/init.c:616:
+					printk("[%d/%s] ", zone_to_nid(zone),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: arch/parisc/mm/init.c:617:
+					printk("[%d/%s] ", zone_to_nid(zone),
+								zone->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#88: FILE: fs/buffer.c:379:
+		zones = first_zones_zonelist(node_zonelist(nid, GFP_NOFS),
+						gfp_zone(GFP_NOFS));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/buffer.c:382:
+			try_to_free_pages(node_zonelist(nid, GFP_NOFS), 0,
+						GFP_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#191: FILE: include/linux/mmzone.h:718:
+static inline struct zone **first_zones_zonelist(struct zonelist *zonelist,
+					enum zone_type highest_zoneidx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: include/linux/mmzone.h:732:
+static inline struct zone **next_zones_zonelist(struct zone **z,
+					enum zone_type highest_zoneidx)

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#215: FILE: include/linux/mmzone.h:742:
+ * for_each_zone_zonelist - helper macro to iterate over valid zones in a zonelist at or below a given zone index

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#223: FILE: include/linux/mmzone.h:750:
+#define for_each_zone_zonelist(zone, z, zlist, highidx) \
+	for (z = first_zones_zonelist(zlist, highidx), zone = *z++;	\
+		zone;							\
+		z = next_zones_zonelist(z, highidx), zone = *z++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#223: FILE: include/linux/mmzone.h:750:
+#define for_each_zone_zonelist(zone, z, zlist, highidx) \
+	for (z = first_zones_zonelist(zlist, highidx), zone = *z++;	\
+		zone;							\
+		z = next_zones_zonelist(z, highidx), zone = *z++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'highidx' - possible side-effects?
#223: FILE: include/linux/mmzone.h:750:
+#define for_each_zone_zonelist(zone, z, zlist, highidx) \
+	for (z = first_zones_zonelist(zlist, highidx), zone = *z++;	\
+		zone;							\
+		z = next_zones_zonelist(z, highidx), zone = *z++)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#344: FILE: mm/page_alloc.c:1558:
+			zonelist, high_zoneidx, ALLOC_WMARK_LOW|ALLOC_CPUSET);
 			                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: mm/page_alloc.c:1603:
+	page = get_page_from_freelist(gfp_mask, order, zonelist,
+						high_zoneidx, alloc_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#381: FILE: mm/page_alloc.c:1667:
+			zonelist, high_zoneidx, ALLOC_WMARK_HIGH|ALLOC_CPUSET);
 			                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "zonelist->zones[j]"
#421: FILE: mm/page_alloc.c:2158:
+	for (j = 0; zonelist->zones[j] != NULL; j++)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: mm/page_alloc.c:2161:
+	j = build_zonelists_node(NODE_DATA(node), zonelist, j,
+							MAX_NR_ZONES - 1);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#507: FILE: mm/page_alloc.c:2337:
+	zonelist->zlcache_ptr = zlc = &zonelist->zlcache;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/page_alloc.c:2374:
+		j = build_zonelists_node(NODE_DATA(node), zonelist, j,
+							MAX_NR_ZONES - 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: mm/page_alloc.c:2380:
+		j = build_zonelists_node(NODE_DATA(node), zonelist, j,
+							MAX_NR_ZONES - 1);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#609: FILE: mm/slab.c:3262:
+		if (cpuset_zone_allowed_hardwall(zone, flags) &&
[...]
 				obj = ____cache_alloc_node(cache,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: mm/slab.c:3263:
+		if (cpuset_zone_allowed_hardwall(zone, flags) &&
 			cache->nodelists[nid] &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: mm/slub.c:1361:
+		if (n && cpuset_zone_allowed_hardwall(zone, flags) &&
 				n->nr_partial > MIN_PARTIAL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 18 checks, 578 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
