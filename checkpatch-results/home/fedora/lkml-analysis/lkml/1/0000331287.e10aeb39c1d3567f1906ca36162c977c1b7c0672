WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#65: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: arch/microblaze/mm/consistent.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'alloced' may be misspelled - perhaps 'allocated'?
#87: FILE: arch/microblaze/mm/consistent.c:18:
+ * in this mirror region will not be cached.  It's alloced from the same
                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#119: FILE: arch/microblaze/mm/consistent.c:50:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#121: FILE: arch/microblaze/mm/consistent.c:52:
+#include <asm/mmu_context.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#123: FILE: arch/microblaze/mm/consistent.c:54:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#124: FILE: arch/microblaze/mm/consistent.c:55:
+#include <asm/pgtable.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#136: FILE: arch/microblaze/mm/consistent.c:67:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#155: FILE: arch/microblaze/mm/consistent.c:86:
+	/* Here's the magic!  Note if the uncached shadow is not implemented,
+	   it's up to the calling code to also test that condition and make

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#159: FILE: arch/microblaze/mm/consistent.c:90:
+	ret = (void *)((unsigned) ret | UNCACHED_SHADOW_MASK);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: arch/microblaze/mm/consistent.c:90:
+	ret = (void *)((unsigned) ret | UNCACHED_SHADOW_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#195: FILE: arch/microblaze/mm/consistent.c:126:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#199: FILE: arch/microblaze/mm/consistent.c:130:
+	vaddr = (void *)((unsigned)vaddr & ~UNCACHED_SHADOW_MASK);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#218: FILE: arch/microblaze/mm/consistent.c:149:
+	end = start+size;
 	           ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#222: FILE: arch/microblaze/mm/consistent.c:153:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/microblaze/mm/consistent.c:172:
+void consistent_sync_page(struct page *page, unsigned long offset,
+	size_t size, int direction)

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: arch/microblaze/mm/consistent.c:175:
+	unsigned long start = (unsigned long)page_address(page) + offset;
+	consistent_sync((void *)start, size, direction);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#252: FILE: include/asm-microblaze/page.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#253: FILE: include/asm-microblaze/page.h:2:
+ * include/asm-microblaze/page.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#271: FILE: include/asm-microblaze/page.h:20:
+#define PAGE_SIZE	(1UL << PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#272: FILE: include/asm-microblaze/page.h:21:
+#define PAGE_MASK	(~(PAGE_SIZE-1))
                  	            ^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#293: FILE: include/asm-microblaze/page.h:42:
+typedef struct { unsigned long	pte; }		pte_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#294: FILE: include/asm-microblaze/page.h:43:
+typedef struct { unsigned long	ste[64]; }	pmd_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#295: FILE: include/asm-microblaze/page.h:44:
+typedef struct { pmd_t		pue[1]; }	pud_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#296: FILE: include/asm-microblaze/page.h:45:
+typedef struct { pud_t		pge[1]; }	pgd_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#297: FILE: include/asm-microblaze/page.h:46:
+typedef struct { unsigned long	pgprot; }	pgprot_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#311: FILE: include/asm-microblaze/page.h:60:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#311: FILE: include/asm-microblaze/page.h:60:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#311: FILE: include/asm-microblaze/page.h:60:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#311: FILE: include/asm-microblaze/page.h:60:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#311: FILE: include/asm-microblaze/page.h:60:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#312: FILE: include/asm-microblaze/page.h:61:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: include/asm-microblaze/page.h:61:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	                 ^

CHECK:SPACING: No space is necessary after a cast
#340: FILE: include/asm-microblaze/page.h:89:
+#define __pa(vaddr)		((unsigned long) (vaddr))

CHECK:SPACING: No space is necessary after a cast
#341: FILE: include/asm-microblaze/page.h:90:
+#define __va(paddr)		((void *) (paddr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#356: FILE: include/asm-microblaze/page.h:105:
+#define pfn_valid(pfn)		((pfn) >= min_low_pfn && (pfn) < max_mapnr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: include/asm-microblaze/segment.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#376: FILE: include/asm-microblaze/segment.h:2:
+ * include/asm-microblaze/segment.h

WARNING:NEW_TYPEDEFS: do not add new typedefs
#391: FILE: include/asm-microblaze/segment.h:17:
+typedef struct {

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#409: FILE: include/asm-microblaze/segment.h:35:
+#define set_fs(x) \
+		do { current_thread_info()->addr_limit = (x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#423: FILE: include/asm-microblaze/unaligned.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#424: FILE: include/asm-microblaze/unaligned.h:2:
+ * include/asm-microblaze/unaligned.h

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 19 checks, 351 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331287.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
