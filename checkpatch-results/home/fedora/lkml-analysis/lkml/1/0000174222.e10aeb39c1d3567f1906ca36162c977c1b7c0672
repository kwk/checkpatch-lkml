WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#74: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: security/integrity/ima/ima_fs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#114: FILE: security/integrity/ima/ima_fs.c:36:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#121: FILE: security/integrity/ima/ima_fs.c:43:
+static struct file_operations ima_htable_violations_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#125: FILE: security/integrity/ima/ima_fs.c:47:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#131: FILE: security/integrity/ima/ima_fs.c:53:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#133: FILE: security/integrity/ima/ima_fs.c:55:
+static struct file_operations ima_measurements_count_ops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#198: FILE: security/integrity/ima/ima_fs.c:120:
+	if (e == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SIZEOF_PARENTHESIS: sizeof pcr should be sizeof(pcr)
#206: FILE: security/integrity/ima/ima_fs.c:128:
+	ima_putc(m, &pcr, sizeof pcr);

WARNING:SIZEOF_PARENTHESIS: sizeof namelen should be sizeof(namelen)
#213: FILE: security/integrity/ima/ima_fs.c:135:
+	ima_putc(m, &namelen, sizeof namelen);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#224: FILE: security/integrity/ima/ima_fs.c:146:
+static struct seq_operations ima_measurments_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#236: FILE: security/integrity/ima/ima_fs.c:158:
+static struct file_operations ima_measurements_ops = {

WARNING:SIZEOF_PARENTHESIS: sizeof namelen should be sizeof(namelen)
#265: FILE: security/integrity/ima/ima_fs.c:187:
+		ima_putc(m, &namelen, sizeof namelen);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#281: FILE: security/integrity/ima/ima_fs.c:203:
+	if (e == NULL)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#299: FILE: security/integrity/ima/ima_fs.c:221:
+static struct seq_operations ima_ascii_measurements_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#311: FILE: security/integrity/ima/ima_fs.c:233:
+static struct file_operations ima_ascii_measurements_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#332: FILE: security/integrity/ima/ima_fs.c:254:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#339: FILE: security/integrity/ima/ima_fs.c:261:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#346: FILE: security/integrity/ima/ima_fs.c:268:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#352: FILE: security/integrity/ima/ima_fs.c:274:
+	    securityfs_create_file("violations", S_IRUSR | S_IRGRP,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174222.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 3 checks, 342 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174222.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
