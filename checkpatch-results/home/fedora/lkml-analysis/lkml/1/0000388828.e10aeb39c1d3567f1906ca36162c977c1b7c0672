WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#49: FILE: drivers/ata/Kconfig:591:
+config PATA_BF54X
+	tristate "Blackfin 54x ATAPI support"
+	depends on BF542 || BF548 || BF549
+	help
+	  This option enables support for the built-in ATAPI controller on
+	  Blackfin 54x family chips.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/ata/Kconfig:600:
+config PATA_BF54X_DMA
+	bool "DMA mode"
+	depends on PATA_BF54X
+	default y
+	help
+	  Enable DMA mode for Blackfin ATAPI controller.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#79: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: drivers/ata/pata_bf54x.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#85: FILE: drivers/ata/pata_bf54x.c:2:
+ * File:         drivers/ata/pata_bf54x.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: drivers/ata/pata_bf54x.c:26:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#123: FILE: drivers/ata/pata_bf54x.c:40:
+#include <asm/gpio.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#159: FILE: drivers/ata/pata_bf54x.c:76:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#160: FILE: drivers/ata/pata_bf54x.c:77:
+#define ATAPI_GET_CONTROL(base)\
+	bfin_read16(base + ATAPI_OFFSET_CONTROL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#162: FILE: drivers/ata/pata_bf54x.c:79:
+#define ATAPI_SET_CONTROL(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_CONTROL, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#164: FILE: drivers/ata/pata_bf54x.c:81:
+#define ATAPI_GET_STATUS(base)\
+	bfin_read16(base + ATAPI_OFFSET_STATUS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#166: FILE: drivers/ata/pata_bf54x.c:83:
+#define ATAPI_GET_DEV_ADDR(base)\
+	bfin_read16(base + ATAPI_OFFSET_DEV_ADDR)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#168: FILE: drivers/ata/pata_bf54x.c:85:
+#define ATAPI_SET_DEV_ADDR(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_DEV_ADDR, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#170: FILE: drivers/ata/pata_bf54x.c:87:
+#define ATAPI_GET_DEV_TXBUF(base)\
+	bfin_read16(base + ATAPI_OFFSET_DEV_TXBUF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#172: FILE: drivers/ata/pata_bf54x.c:89:
+#define ATAPI_SET_DEV_TXBUF(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_DEV_TXBUF, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#174: FILE: drivers/ata/pata_bf54x.c:91:
+#define ATAPI_GET_DEV_RXBUF(base)\
+	bfin_read16(base + ATAPI_OFFSET_DEV_RXBUF)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#176: FILE: drivers/ata/pata_bf54x.c:93:
+#define ATAPI_SET_DEV_RXBUF(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_DEV_RXBUF, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#178: FILE: drivers/ata/pata_bf54x.c:95:
+#define ATAPI_GET_INT_MASK(base)\
+	bfin_read16(base + ATAPI_OFFSET_INT_MASK)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#180: FILE: drivers/ata/pata_bf54x.c:97:
+#define ATAPI_SET_INT_MASK(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_INT_MASK, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#182: FILE: drivers/ata/pata_bf54x.c:99:
+#define ATAPI_GET_INT_STATUS(base)\
+	bfin_read16(base + ATAPI_OFFSET_INT_STATUS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#184: FILE: drivers/ata/pata_bf54x.c:101:
+#define ATAPI_SET_INT_STATUS(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_INT_STATUS, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#186: FILE: drivers/ata/pata_bf54x.c:103:
+#define ATAPI_GET_XFER_LEN(base)\
+	bfin_read16(base + ATAPI_OFFSET_XFER_LEN)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#188: FILE: drivers/ata/pata_bf54x.c:105:
+#define ATAPI_SET_XFER_LEN(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_XFER_LEN, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#190: FILE: drivers/ata/pata_bf54x.c:107:
+#define ATAPI_GET_LINE_STATUS(base)\
+	bfin_read16(base + ATAPI_OFFSET_LINE_STATUS)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#192: FILE: drivers/ata/pata_bf54x.c:109:
+#define ATAPI_GET_SM_STATE(base)\
+	bfin_read16(base + ATAPI_OFFSET_SM_STATE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#194: FILE: drivers/ata/pata_bf54x.c:111:
+#define ATAPI_GET_TERMINATE(base)\
+	bfin_read16(base + ATAPI_OFFSET_TERMINATE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#196: FILE: drivers/ata/pata_bf54x.c:113:
+#define ATAPI_SET_TERMINATE(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_TERMINATE, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#198: FILE: drivers/ata/pata_bf54x.c:115:
+#define ATAPI_GET_PIO_TFRCNT(base)\
+	bfin_read16(base + ATAPI_OFFSET_PIO_TFRCNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#200: FILE: drivers/ata/pata_bf54x.c:117:
+#define ATAPI_GET_DMA_TFRCNT(base)\
+	bfin_read16(base + ATAPI_OFFSET_DMA_TFRCNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#202: FILE: drivers/ata/pata_bf54x.c:119:
+#define ATAPI_GET_UMAIN_TFRCNT(base)\
+	bfin_read16(base + ATAPI_OFFSET_UMAIN_TFRCNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#204: FILE: drivers/ata/pata_bf54x.c:121:
+#define ATAPI_GET_UDMAOUT_TFRCNT(base)\
+	bfin_read16(base + ATAPI_OFFSET_UDMAOUT_TFRCNT)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#206: FILE: drivers/ata/pata_bf54x.c:123:
+#define ATAPI_GET_REG_TIM_0(base)\
+	bfin_read16(base + ATAPI_OFFSET_REG_TIM_0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#208: FILE: drivers/ata/pata_bf54x.c:125:
+#define ATAPI_SET_REG_TIM_0(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_REG_TIM_0, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#210: FILE: drivers/ata/pata_bf54x.c:127:
+#define ATAPI_GET_PIO_TIM_0(base)\
+	bfin_read16(base + ATAPI_OFFSET_PIO_TIM_0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#212: FILE: drivers/ata/pata_bf54x.c:129:
+#define ATAPI_SET_PIO_TIM_0(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_PIO_TIM_0, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#214: FILE: drivers/ata/pata_bf54x.c:131:
+#define ATAPI_GET_PIO_TIM_1(base)\
+	bfin_read16(base + ATAPI_OFFSET_PIO_TIM_1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#216: FILE: drivers/ata/pata_bf54x.c:133:
+#define ATAPI_SET_PIO_TIM_1(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_PIO_TIM_1, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#218: FILE: drivers/ata/pata_bf54x.c:135:
+#define ATAPI_GET_MULTI_TIM_0(base)\
+	bfin_read16(base + ATAPI_OFFSET_MULTI_TIM_0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#220: FILE: drivers/ata/pata_bf54x.c:137:
+#define ATAPI_SET_MULTI_TIM_0(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_MULTI_TIM_0, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#222: FILE: drivers/ata/pata_bf54x.c:139:
+#define ATAPI_GET_MULTI_TIM_1(base)\
+	bfin_read16(base + ATAPI_OFFSET_MULTI_TIM_1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#224: FILE: drivers/ata/pata_bf54x.c:141:
+#define ATAPI_SET_MULTI_TIM_1(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_MULTI_TIM_1, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#226: FILE: drivers/ata/pata_bf54x.c:143:
+#define ATAPI_GET_MULTI_TIM_2(base)\
+	bfin_read16(base + ATAPI_OFFSET_MULTI_TIM_2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#228: FILE: drivers/ata/pata_bf54x.c:145:
+#define ATAPI_SET_MULTI_TIM_2(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_MULTI_TIM_2, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#230: FILE: drivers/ata/pata_bf54x.c:147:
+#define ATAPI_GET_ULTRA_TIM_0(base)\
+	bfin_read16(base + ATAPI_OFFSET_ULTRA_TIM_0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#232: FILE: drivers/ata/pata_bf54x.c:149:
+#define ATAPI_SET_ULTRA_TIM_0(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_ULTRA_TIM_0, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#234: FILE: drivers/ata/pata_bf54x.c:151:
+#define ATAPI_GET_ULTRA_TIM_1(base)\
+	bfin_read16(base + ATAPI_OFFSET_ULTRA_TIM_1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#236: FILE: drivers/ata/pata_bf54x.c:153:
+#define ATAPI_SET_ULTRA_TIM_1(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_ULTRA_TIM_1, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#238: FILE: drivers/ata/pata_bf54x.c:155:
+#define ATAPI_GET_ULTRA_TIM_2(base)\
+	bfin_read16(base + ATAPI_OFFSET_ULTRA_TIM_2)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#240: FILE: drivers/ata/pata_bf54x.c:157:
+#define ATAPI_SET_ULTRA_TIM_2(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_ULTRA_TIM_2, val)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#242: FILE: drivers/ata/pata_bf54x.c:159:
+#define ATAPI_GET_ULTRA_TIM_3(base)\
+	bfin_read16(base + ATAPI_OFFSET_ULTRA_TIM_3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'base' may be better as '(base)' to avoid precedence issues
#244: FILE: drivers/ata/pata_bf54x.c:161:
+#define ATAPI_SET_ULTRA_TIM_3(base, val)\
+	bfin_write16(base + ATAPI_OFFSET_ULTRA_TIM_3, val)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#252: FILE: drivers/ata/pata_bf54x.c:169:
+static const u32 pio_fsclk[] =
+{ 33333333, 33333333, 33333333, 33333333, 33333333 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#270: FILE: drivers/ata/pata_bf54x.c:187:
+static const u32 udma_fsclk[] =
+{ 33333333, 33333333, 40000000, 50000000, 80000000, 133333333 };

CHECK:LINE_SPACING: Please don't use multiple blank lines
#330: FILE: drivers/ata/pata_bf54x.c:247:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: drivers/ata/pata_bf54x.c:262:
+static unsigned short num_clocks_min(unsigned long tmin,
+				unsigned long fsclk)

WARNING:SPACING: space prohibited before semicolon
#347: FILE: drivers/ata/pata_bf54x.c:264:
+	unsigned long tmp ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: drivers/ata/pata_bf54x.c:267:
+	tmp = tmin * (fsclk/1000/1000) / 1000;
 	                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#350: FILE: drivers/ata/pata_bf54x.c:267:
+	tmp = tmin * (fsclk/1000/1000) / 1000;
 	                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#352: FILE: drivers/ata/pata_bf54x.c:269:
+	if ((tmp*1000*1000) < (tmin*(fsclk/1000))) {
 	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#352: FILE: drivers/ata/pata_bf54x.c:269:
+	if ((tmp*1000*1000) < (tmin*(fsclk/1000))) {
 	             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#352: FILE: drivers/ata/pata_bf54x.c:269:
+	if ((tmp*1000*1000) < (tmin*(fsclk/1000))) {
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#352: FILE: drivers/ata/pata_bf54x.c:269:
+	if ((tmp*1000*1000) < (tmin*(fsclk/1000))) {
 	                                  ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#352: FILE: drivers/ata/pata_bf54x.c:269:
+	if ((tmp*1000*1000) < (tmin*(fsclk/1000))) {
+		result++;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#380: FILE: drivers/ata/pata_bf54x.c:297:
+	/* the most restrictive timing value is t6 and tc, the DIOW - data hold
+	* If one SCLK pulse is longer than this minimum value then register

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#420: FILE: drivers/ata/pata_bf54x.c:337:
+		ATAPI_SET_REG_TIM_0(base, (teoc_reg<<8 | t2_reg));
 		                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#421: FILE: drivers/ata/pata_bf54x.c:338:
+		ATAPI_SET_PIO_TIM_0(base, (t4_reg<<12 | t2_pio<<4 | t1_reg));
 		                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#421: FILE: drivers/ata/pata_bf54x.c:338:
+		ATAPI_SET_PIO_TIM_0(base, (t4_reg<<12 | t2_pio<<4 | t1_reg));
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: drivers/ata/pata_bf54x.c:342:
+			ATAPI_SET_CONTROL(base,
+				ATAPI_GET_CONTROL(base) | IORDY_EN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: drivers/ata/pata_bf54x.c:345:
+			ATAPI_SET_CONTROL(base,
+				ATAPI_GET_CONTROL(base) & ~IORDY_EN);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#500: FILE: drivers/ata/pata_bf54x.c:417:
+				ATAPI_SET_ULTRA_TIM_0(base, (tenv<<8 | tack));
 				                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: drivers/ata/pata_bf54x.c:419:
+				ATAPI_SET_ULTRA_TIM_1(base,
+					(tcyc_tdvs<<8 | tdvs));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#502: FILE: drivers/ata/pata_bf54x.c:419:
+					(tcyc_tdvs<<8 | tdvs));
 					          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#503: FILE: drivers/ata/pata_bf54x.c:420:
+				ATAPI_SET_ULTRA_TIM_2(base, (tmli<<8 | tss));
 				                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#504: FILE: drivers/ata/pata_bf54x.c:421:
+				ATAPI_SET_ULTRA_TIM_3(base, (trp<<8 | tzah));
 				                                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: drivers/ata/pata_bf54x.c:425:
+				ATAPI_SET_INT_MASK(base,
+					ATAPI_GET_INT_MASK(base)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#554: FILE: drivers/ata/pata_bf54x.c:471:
+			ATAPI_SET_MULTI_TIM_0(base, (tm<<8 | td));
 			                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#555: FILE: drivers/ata/pata_bf54x.c:472:
+			ATAPI_SET_MULTI_TIM_1(base, (tkr<<8 | tkw));
 			                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#556: FILE: drivers/ata/pata_bf54x.c:473:
+			ATAPI_SET_MULTI_TIM_2(base, (teoc<<8 | th));
 			                                 ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#565: FILE: drivers/ata/pata_bf54x.c:482:
+	return;
+}

WARNING:TYPO_SPELLING: 'Resgister' may be misspelled - perhaps 'Register'?
#594: FILE: drivers/ata/pata_bf54x.c:511:
+ *    Description:    Writes to ATA Device Resgister
                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/ata/pata_bf54x.c:516:
+static void write_atapi_register(void __iomem *base,
+		unsigned long ata_reg, unsigned short value)

WARNING:TYPO_SPELLING: 'Resgister' may be misspelled - perhaps 'Register'?
#631: FILE: drivers/ata/pata_bf54x.c:548:
+ *Description:    Reads from ATA Device Resgister
                                         ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/ata/pata_bf54x.c:553:
+static unsigned short read_atapi_register(void __iomem *base,
+		unsigned long ata_reg)

WARNING:TYPO_SPELLING: 'Resgister' may be misspelled - perhaps 'Register'?
#669: FILE: drivers/ata/pata_bf54x.c:586:
+ *    Description:    Writes to ATA Device Resgister
                                            ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/ata/pata_bf54x.c:591:
+static void write_atapi_data(void __iomem *base,
+		int len, unsigned short *buf)

WARNING:TYPO_SPELLING: 'Resgister' may be misspelled - perhaps 'Register'?
#714: FILE: drivers/ata/pata_bf54x.c:631:
+ *	Description:    Reads from ATA Device Resgister
   	                                      ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/ata/pata_bf54x.c:636:
+static void read_atapi_data(void __iomem *base,
+		int len, unsigned short *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: drivers/ata/pata_bf54x.c:694:
+			write_atapi_register(base, ATA_REG_FEATURE,
+						tf->hob_feature);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: drivers/ata/pata_bf54x.c:696:
+			write_atapi_register(base, ATA_REG_NSECT,
+						tf->hob_nsect);

WARNING:SPLIT_STRING: quoted string split across lines
#784: FILE: drivers/ata/pata_bf54x.c:701:
+			pr_debug("hob: feat 0x%X nsect 0x%X, lba 0x%X "
+				 "0x%X 0x%X\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: drivers/ata/pata_bf54x.c:715:
+		pr_debug("feat 0x%X nsect 0x%X lba 0x%X 0x%X 0x%X\n",
+			tf->feature,

WARNING:LINE_SPACING: Missing a blank line after declarations
#823: FILE: drivers/ata/pata_bf54x.c:740:
+	void __iomem *base = (void __iomem *)ap->ioaddr.ctl_addr;
+	return read_atapi_register(base, ATA_REG_STATUS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#868: FILE: drivers/ata/pata_bf54x.c:785:
+	void __iomem *base = (void __iomem *)ap->ioaddr.ctl_addr;
+	pr_debug("ata%u: cmd 0x%X\n", ap->print_id, tf->command);

WARNING:LINE_SPACING: Missing a blank line after declarations
#882: FILE: drivers/ata/pata_bf54x.c:799:
+	void __iomem *base = (void __iomem *)ap->ioaddr.ctl_addr;
+	return read_atapi_register(base, ATA_REG_ALTSTATUS);

WARNING:TYPO_SPELLING: 'kenel' may be misspelled - perhaps 'kernel'?
#963: FILE: drivers/ata/pata_bf54x.c:880:
+		 * common kenel code should be flushed if WB
 		          ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#969: FILE: drivers/ata/pata_bf54x.c:886:
+			flush_dcache_range(sg_dma_address(sg),
+				sg_dma_address(sg) + sg_dma_len(sg));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1024: FILE: drivers/ata/pata_bf54x.c:941:
+	if (qc->tf.flags & ATA_TFLAG_WRITE)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1026: FILE: drivers/ata/pata_bf54x.c:943:
+	else {

WARNING:TYPO_SPELLING: 'kenel' may be misspelled - perhaps 'kernel'?
#1032: FILE: drivers/ata/pata_bf54x.c:949:
+			 * common kenel code should be invalidated if
 			          ^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1037: FILE: drivers/ata/pata_bf54x.c:954:
+				invalidate_dcache_range(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nsect == 0x55'
#1074: FILE: drivers/ata/pata_bf54x.c:991:
+	if ((nsect == 0x55) && (lbal == 0xaa))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lbal == 0xaa'
#1074: FILE: drivers/ata/pata_bf54x.c:991:
+	if ((nsect == 0x55) && (lbal == 0xaa))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nsect == 1'
#1109: FILE: drivers/ata/pata_bf54x.c:1026:
+		if ((nsect == 1) && (lbal == 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lbal == 1'
#1109: FILE: drivers/ata/pata_bf54x.c:1026:
+		if ((nsect == 1) && (lbal == 1))

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1141: FILE: drivers/ata/pata_bf54x.c:1058:
+	udelay(20);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1143: FILE: drivers/ata/pata_bf54x.c:1060:
+	udelay(20);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: drivers/ata/pata_bf54x.c:1096:
+static int bfin_std_softreset(struct ata_port *ap, unsigned int *classes,
+		unsigned long deadline)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1227: FILE: drivers/ata/pata_bf54x.c:1144:
+	if (ATAPI_GET_STATUS(base) & (MULTI_XFER_ON|ULTRA_XFER_ON)) {
 	                                           ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1227: FILE: drivers/ata/pata_bf54x.c:1144:
+	if (ATAPI_GET_STATUS(base) & (MULTI_XFER_ON|ULTRA_XFER_ON)) {
+		host_stat = ATA_DMA_ACTIVE;
+	}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1230: FILE: drivers/ata/pata_bf54x.c:1147:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT)) {
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1230: FILE: drivers/ata/pata_bf54x.c:1147:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT)) {
 	                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1230: FILE: drivers/ata/pata_bf54x.c:1147:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT)) {
+		host_stat = ATA_DMA_INTR;
+	}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1233: FILE: drivers/ata/pata_bf54x.c:1150:
+	if (int_status & (MULTI_TERM_INT|UDMAIN_TERM_INT|UDMAOUT_TERM_INT)) {
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1233: FILE: drivers/ata/pata_bf54x.c:1150:
+	if (int_status & (MULTI_TERM_INT|UDMAIN_TERM_INT|UDMAOUT_TERM_INT)) {
 	                                                ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1233: FILE: drivers/ata/pata_bf54x.c:1150:
+	if (int_status & (MULTI_TERM_INT|UDMAIN_TERM_INT|UDMAOUT_TERM_INT)) {
+		host_stat = ATA_DMA_ERR;
+	}

CHECK:SPACING: No space is necessary after a cast
#1255: FILE: drivers/ata/pata_bf54x.c:1172:
+	unsigned short *buf16 = (u16 *) buf;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1259: FILE: drivers/ata/pata_bf54x.c:1176:
+	if (write_data) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1339: FILE: drivers/ata/pata_bf54x.c:1256:
+	ATAPI_SET_INT_STATUS(base, ATAPI_GET_INT_STATUS(base)|ATAPI_DEV_INT
 	                                                     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1408: FILE: drivers/ata/pata_bf54x.c:1325:
+	if (classes[0] == ATA_DEV_NONE && classes[1] == ATA_DEV_NONE) {
+		return;
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: drivers/ata/pata_bf54x.c:1361:
+		if (request_dma(CH_ATAPI_TX,
+			"BFIN ATAPI TX DMA") >= 0)

WARNING:SPLIT_STRING: quoted string split across lines
#1453: FILE: drivers/ata/pata_bf54x.c:1370:
+	dev_err(ap->dev, "Unable to request ATAPI DMA!"
+		" Continue in PIO mode.\n");

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1548: FILE: drivers/ata/pata_bf54x.c:1465:
+	udelay(30);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1552: FILE: drivers/ata/pata_bf54x.c:1469:
+	msleep(2);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1596: FILE: drivers/ata/pata_bf54x.c:1513:
+static int __devinit bfin_atapi_probe(struct platform_device *pdev)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1602: FILE: drivers/ata/pata_bf54x.c:1519:
+	const struct ata_port_info *ppi[] =
+		{ &bfin_port_info[board_idx], NULL };

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#1616: FILE: drivers/ata/pata_bf54x.c:1533:
+	if (res == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'faild' may be misspelled - perhaps 'failed'?
#1629: FILE: drivers/ata/pata_bf54x.c:1546:
+		dev_err(&pdev->dev, "Requesting Peripherals faild\n");
 		                                            ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: drivers/ata/pata_bf54x.c:1557:
+	if (ata_host_activate(host, platform_get_irq(pdev, 0),
+		ata_interrupt, IRQF_SHARED, &bfin_sht) != 0) {

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1656: FILE: drivers/ata/pata_bf54x.c:1573:
+static int __devexit bfin_atapi_remove(struct platform_device *pdev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388828.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 30 warnings, 95 checks, 1654 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388828.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
