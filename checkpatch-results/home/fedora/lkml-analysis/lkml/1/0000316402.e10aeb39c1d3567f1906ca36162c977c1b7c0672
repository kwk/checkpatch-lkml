WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
Subject: [PATCH] stacktrace: add reliability information to saved stack traces

CHECK:BRACES: Unbalanced braces around else statement
#107: FILE: arch/mips/kernel/stacktrace.c:26:
+			else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#109: FILE: arch/mips/kernel/stacktrace.c:28:
+				trace->entries.addr[trace->nr_entries++]
+					= addr;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:BRACES: braces {} should be used on all arms of this statement
#134: FILE: arch/s390/kernel/stacktrace.c:31:
+			if (!trace->skip) {
[...]
+			} else
[...]

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#136: FILE: arch/s390/kernel/stacktrace.c:33:
+				trace->entries.addr[trace->nr_entries++]
+					= addr;

CHECK:BRACES: Unbalanced braces around else statement
#137: FILE: arch/s390/kernel/stacktrace.c:34:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: arch/sh/kernel/stacktrace.c:30:
+			else {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#169: FILE: arch/sh/kernel/stacktrace.c:32:
+				trace->entries.addr[trace->nr_entries++]
+					= addr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: include/linux/stacktrace.h:40:
+static inline void init_stack_trace(struct stack_trace *trace,
+	unsigned int n, int skip, unsigned long *addr, bool *reliable)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: kernel/latencytop.c:106:
+	init_stack_trace(&trace, LT_BACKTRACEDEPTH, 0,
+		lat->backtrace, lat->backtrace_reliable);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: kernel/lockdep.c:341:
+	init_stack_trace(trace,
+		MAX_STACK_TRACE_ENTRIES - nr_stack_trace_entries, 3,

CHECK:SPACING: No space is necessary after a cast
#407: FILE: kernel/stacktrace.c:19:
+		printk("%*.s [<%p>] ", spaces, "", (void *) e->addr[i]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#407: FILE: kernel/stacktrace.c:19:
+		printk("%*.s [<%p>] ", spaces, "", (void *) e->addr[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#413: FILE: kernel/stacktrace.c:22:
+			printk("%s ", !e->reliable[i] ? "?" : " ");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 11 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
