WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#114: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1786: FILE: arch/x86/mm/kmmio.c:1:
+/* Support for MMIO probes.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#1804: FILE: arch/x86/mm/kmmio.c:19:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1805: FILE: arch/x86/mm/kmmio.c:20:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1808: FILE: arch/x86/mm/kmmio.c:23:
+#include <asm/pgtable.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#1813: FILE: arch/x86/mm/kmmio.c:28:
+#define KMMIO_TABLE_SIZE (1 << KMMIO_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1815: FILE: arch/x86/mm/kmmio.c:30:
+#define KMMIO_PAGE_TABLE_SIZE (1 << KMMIO_PAGE_HASH_BITS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1825: FILE: arch/x86/mm/kmmio.c:40:
+static int kmmio_page_fault(struct pt_regs *regs, unsigned long error_code,
+						unsigned long address);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1827: FILE: arch/x86/mm/kmmio.c:42:
+static int kmmio_die_notifier(struct notifier_block *nb, unsigned long val,
+								void *args);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1850: FILE: arch/x86/mm/kmmio.c:65:
+	int i;
+	for (i = 0; i < KMMIO_PAGE_TABLE_SIZE; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1883: FILE: arch/x86/mm/kmmio.c:98:
+	struct kmmio_probe *p;
+	list_for_each_entry(p, &kmmio_probes, list) {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1898: FILE: arch/x86/mm/kmmio.c:113:
+		struct kmmio_fault_page *p
+			= list_entry(tmp, struct kmmio_fault_page, list);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1913: FILE: arch/x86/mm/kmmio.c:128:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1914: FILE: arch/x86/mm/kmmio.c:129:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",
+						__FUNCTION__, page);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1914: FILE: arch/x86/mm/kmmio.c:129:
+						__FUNCTION__, page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1920: FILE: arch/x86/mm/kmmio.c:135:
+		pmd_t *pmd = (pmd_t *)pte;
+		set_pmd(pmd, __pmd(pmd_val(*pmd) & ~_PAGE_PRESENT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1939: FILE: arch/x86/mm/kmmio.c:154:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1940: FILE: arch/x86/mm/kmmio.c:155:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",
+						__FUNCTION__, page);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1940: FILE: arch/x86/mm/kmmio.c:155:
+						__FUNCTION__, page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1946: FILE: arch/x86/mm/kmmio.c:161:
+		pmd_t *pmd = (pmd_t *)pte;
+		set_pmd(pmd, __pmd(pmd_val(*pmd) | _PAGE_PRESENT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1988: FILE: arch/x86/mm/kmmio.c:203:
+		printk(KERN_EMERG "mmiotrace: recursive probe hit on CPU %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1989: FILE: arch/x86/mm/kmmio.c:204:
+		printk(KERN_EMERG "mmiotrace: recursive probe hit on CPU %d, "
+					"for address %lu. Ignoring.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2011: FILE: arch/x86/mm/kmmio.c:226:
+	ctx->saved_flags = (regs->flags & (TF_MASK|IF_MASK));
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2126: FILE: arch/x86/mm/kmmio.c:341:
+			printk(KERN_ERR "mmio: Unable to set page fault.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2174: FILE: arch/x86/mm/kmmio.c:389:
+static int kmmio_page_fault(struct pt_regs *regs, unsigned long error_code,
+						unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2183: FILE: arch/x86/mm/kmmio.c:398:
+static int kmmio_die_notifier(struct notifier_block *nb, unsigned long val,
+								void *args)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2199: FILE: arch/x86/mm/kmmio.h:1:
+#ifndef _LINUX_KMMIO_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2263: FILE: arch/x86/mm/mmio-mod.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2275: FILE: arch/x86/mm/mmio-mod.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2276: FILE: arch/x86/mm/mmio-mod.c:14:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#2288: FILE: arch/x86/mm/mmio-mod.c:26:
+#include <asm/io.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#2291: FILE: arch/x86/mm/mmio-mod.c:29:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#2294: FILE: arch/x86/mm/mmio-mod.c:32:
+#include <asm/atomic.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2320: FILE: arch/x86/mm/mmio-mod.c:58:
+static struct file_operations mmio_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2324: FILE: arch/x86/mm/mmio-mod.c:62:
+static const size_t subbuf_size = 256*1024;
                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2330: FILE: arch/x86/mm/mmio-mod.c:68:
+static unsigned int      n_subbufs = 32*4;
                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2362: FILE: arch/x86/mm/mmio-mod.c:100:
+static int write_marker(struct file *file, const char __user *buffer,
+					unsigned long count, void *data)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2393: FILE: arch/x86/mm/mmio-mod.c:131:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2394: FILE: arch/x86/mm/mmio-mod.c:132:
+		printk(KERN_ERR "Error in %s: no pte for page 0x%08lx\n",
+						__FUNCTION__, address);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2394: FILE: arch/x86/mm/mmio-mod.c:132:
+						__FUNCTION__, address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2399: FILE: arch/x86/mm/mmio-mod.c:137:
+		printk(KERN_EMERG MODULE_NAME ": 4MB pages are not "

WARNING:SPLIT_STRING: quoted string split across lines
#2400: FILE: arch/x86/mm/mmio-mod.c:138:
+		printk(KERN_EMERG MODULE_NAME ": 4MB pages are not "
+						"currently supported: %lx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2402: FILE: arch/x86/mm/mmio-mod.c:140:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2404: FILE: arch/x86/mm/mmio-mod.c:142:
+	printk(KERN_DEBUG MODULE_NAME ": pte for 0x%lx: 0x%lx 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2405: FILE: arch/x86/mm/mmio-mod.c:143:
+	printk(KERN_DEBUG MODULE_NAME ": pte for 0x%lx: 0x%lx 0x%lx\n",
+					address, pte_val(*pte),

WARNING:LINE_SPACING: Missing a blank line after declarations
#2416: FILE: arch/x86/mm/mmio-mod.c:154:
+	const unsigned long cpu = smp_processor_id();
+	printk(KERN_EMERG MODULE_NAME ": unexpected fault for address: %lx, "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2416: FILE: arch/x86/mm/mmio-mod.c:154:
+	printk(KERN_EMERG MODULE_NAME ": unexpected fault for address: %lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#2417: FILE: arch/x86/mm/mmio-mod.c:155:
+	printk(KERN_EMERG MODULE_NAME ": unexpected fault for address: %lx, "
+					"last fault for address: %lx\n",

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2420: FILE: arch/x86/mm/mmio-mod.c:158:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2423: FILE: arch/x86/mm/mmio-mod.c:161:
+	print_symbol(KERN_EMERG "last faulting EIP was at %s\n",
+							pf_reason[cpu].ip);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2424: FILE: arch/x86/mm/mmio-mod.c:162:
+	printk(KERN_EMERG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2427: FILE: arch/x86/mm/mmio-mod.c:165:
+	printk(KERN_EMERG

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2433: FILE: arch/x86/mm/mmio-mod.c:171:
+	print_symbol(KERN_EMERG "last faulting RIP was at %s\n",
+							pf_reason[cpu].ip);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2434: FILE: arch/x86/mm/mmio-mod.c:172:
+	printk(KERN_EMERG "rax: %016lx   rcx: %016lx   rdx: %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2435: FILE: arch/x86/mm/mmio-mod.c:173:
+	printk(KERN_EMERG "rax: %016lx   rcx: %016lx   rdx: %016lx\n",
+					regs->ax, regs->cx, regs->dx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2436: FILE: arch/x86/mm/mmio-mod.c:174:
+	printk(KERN_EMERG "rsi: %016lx   rdi: %016lx   "

WARNING:SPLIT_STRING: quoted string split across lines
#2437: FILE: arch/x86/mm/mmio-mod.c:175:
+	printk(KERN_EMERG "rsi: %016lx   rdi: %016lx   "
+				"rbp: %016lx   rsp: %016lx\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2440: FILE: arch/x86/mm/mmio-mod.c:178:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2444: FILE: arch/x86/mm/mmio-mod.c:182:
+static void pre(struct kmmio_probe *p, struct pt_regs *regs,
+						unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2497: FILE: arch/x86/mm/mmio-mod.c:235:
+			unsigned char *ip = (unsigned char *)instptr;
+			cpu_trace[cpu].header.type |=

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2507: FILE: arch/x86/mm/mmio-mod.c:245:
+static void post(struct kmmio_probe *p, unsigned long condition,
+							struct pt_regs *regs)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2514: FILE: arch/x86/mm/mmio-mod.c:252:
+		printk(KERN_EMERG MODULE_NAME ": unexpected post handler");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'post', this function's name, in a string
#2514: FILE: arch/x86/mm/mmio-mod.c:252:
+		printk(KERN_EMERG MODULE_NAME ": unexpected post handler");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2515: FILE: arch/x86/mm/mmio-mod.c:253:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2521: FILE: arch/x86/mm/mmio-mod.c:259:
+		cpu_trace[cpu].rw.value = get_ins_reg_val(pf_reason[cpu].ip,
+									regs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2536: FILE: arch/x86/mm/mmio-mod.c:274:
+static int subbuf_start_handler(struct rchan_buf *buf, void *subbuf,
+					void *prev_subbuf, size_t prev_padding)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2541: FILE: arch/x86/mm/mmio-mod.c:279:
+	int count;
+	if (relay_buf_full(buf)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2543: FILE: arch/x86/mm/mmio-mod.c:281:
+			printk(KERN_ERR MODULE_NAME ": cpu %d buffer full!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2544: FILE: arch/x86/mm/mmio-mod.c:282:
+			printk(KERN_ERR MODULE_NAME ": cpu %d buffer full!\n",
+									cpu);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2547: FILE: arch/x86/mm/mmio-mod.c:285:
+	} else if ((count = atomic_read(drop))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2548: FILE: arch/x86/mm/mmio-mod.c:286:
+		printk(KERN_ERR MODULE_NAME

WARNING:SPLIT_STRING: quoted string split across lines
#2550: FILE: arch/x86/mm/mmio-mod.c:288:
+					": cpu %d buffer no longer full, "
+					"missed %d events.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2560: FILE: arch/x86/mm/mmio-mod.c:298:
+static struct dentry *create_buf_file_handler(const char *filename,
+						struct dentry *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2575: FILE: arch/x86/mm/mmio-mod.c:313:
+	buf_file = debugfs_create_file(filename, mode, parent, buf,
+								&mmio_fops);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2597: FILE: arch/x86/mm/mmio-mod.c:335:
+static struct rchan *create_channel(unsigned size, unsigned n)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2597: FILE: arch/x86/mm/mmio-mod.c:335:
+static struct rchan *create_channel(unsigned size, unsigned n)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2615: FILE: arch/x86/mm/mmio-mod.c:353:
+};
+static LIST_HEAD(trace_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2619: FILE: arch/x86/mm/mmio-mod.c:357:
+static void do_ioremap_trace_core(unsigned long offset, unsigned long size,
+							void __iomem *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2658: FILE: arch/x86/mm/mmio-mod.c:396:
+static void ioremap_trace_core(unsigned long offset, unsigned long size,
+							void __iomem *addr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset != filter_offset'
#2660: FILE: arch/x86/mm/mmio-mod.c:398:
+	if ((filter_offset) && (offset != filter_offset))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset < ISA_END_ADDRESS'
#2664: FILE: arch/x86/mm/mmio-mod.c:402:
+	if (!ISA_trace && (offset < ISA_END_ADDRESS) &&
+					(offset + size > ISA_START_ADDRESS)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2665: FILE: arch/x86/mm/mmio-mod.c:403:
+	if (!ISA_trace && (offset < ISA_END_ADDRESS) &&
+					(offset + size > ISA_START_ADDRESS)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2666: FILE: arch/x86/mm/mmio-mod.c:404:
+		printk(KERN_NOTICE MODULE_NAME ": Ignoring map of low "

WARNING:SPLIT_STRING: quoted string split across lines
#2667: FILE: arch/x86/mm/mmio-mod.c:405:
+		printk(KERN_NOTICE MODULE_NAME ": Ignoring map of low "
+						"PCI/ISA area (0x%lx-0x%lx)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#2677: FILE: arch/x86/mm/mmio-mod.c:415:
+	void __iomem *p = ioremap_cache(offset, size);
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_cache(0x%lx, 0x%lx) = %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2677: FILE: arch/x86/mm/mmio-mod.c:415:
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_cache(0x%lx, 0x%lx) = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2678: FILE: arch/x86/mm/mmio-mod.c:416:
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_cache(0x%lx, 0x%lx) = %p\n",
+							offset, size, p);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2687: FILE: arch/x86/mm/mmio-mod.c:425:
+	void __iomem *p = ioremap_nocache(offset, size);
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_nocache(0x%lx, 0x%lx) = %p\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2687: FILE: arch/x86/mm/mmio-mod.c:425:
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_nocache(0x%lx, 0x%lx) = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2688: FILE: arch/x86/mm/mmio-mod.c:426:
+	printk(KERN_DEBUG MODULE_NAME ": ioremap_nocache(0x%lx, 0x%lx) = %p\n",
+							offset, size, p);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2694: FILE: arch/x86/mm/mmio-mod.c:432:
+void iounmap_trace(volatile void __iomem *addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2714: FILE: arch/x86/mm/mmio-mod.c:452:
+	struct remap_trace *tmp;
+	printk(KERN_DEBUG MODULE_NAME ": Unmapping %p.\n", addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2714: FILE: arch/x86/mm/mmio-mod.c:452:
+	printk(KERN_DEBUG MODULE_NAME ": Unmapping %p.\n", addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2740: FILE: arch/x86/mm/mmio-mod.c:478:
+		printk(KERN_WARNING MODULE_NAME ": purging non-iounmapped "

WARNING:SPLIT_STRING: quoted string split across lines
#2741: FILE: arch/x86/mm/mmio-mod.c:479:
+		printk(KERN_WARNING MODULE_NAME ": purging non-iounmapped "
+					"trace @0x%08lx, size 0x%lx.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2759: FILE: arch/x86/mm/mmio-mod.c:497:
+		printk(KERN_ERR MODULE_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2767: FILE: arch/x86/mm/mmio-mod.c:505:
+		printk(KERN_ERR MODULE_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2778: FILE: arch/x86/mm/mmio-mod.c:516:
+	printk(KERN_DEBUG MODULE_NAME ": loaded.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2780: FILE: arch/x86/mm/mmio-mod.c:518:
+		printk(KERN_DEBUG MODULE_NAME ": MMIO tracing disabled.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2782: FILE: arch/x86/mm/mmio-mod.c:520:
+		printk(KERN_WARNING MODULE_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2789: FILE: arch/x86/mm/mmio-mod.c:527:
+	printk(KERN_DEBUG MODULE_NAME ": unload...\n");

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#2795: FILE: arch/x86/mm/mmio-mod.c:533:
+	if (dir)
+		debugfs_remove(dir);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2807: FILE: arch/x86/mm/pf_in.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2822: FILE: arch/x86/mm/pf_in.c:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2823: FILE: arch/x86/mm/pf_in.c:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#2828: FILE: arch/x86/mm/pf_in.c:22:
+/*  $Id: pf_in.c,v 1.1.1.1 2002/11/12 05:56:32 brlock Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2839: FILE: arch/x86/mm/pf_in.c:33:
+#ifdef __i386__

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2845: FILE: arch/x86/mm/pf_in.c:39:
+};
+/* IA32 Manual 3, 3-432*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2849: FILE: arch/x86/mm/pf_in.c:43:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2856: FILE: arch/x86/mm/pf_in.c:50:
+};
+static unsigned int mw8[] = { 0x88, 0x8A, 0xC6, 0xB60F, 0xBE0F };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2868: FILE: arch/x86/mm/pf_in.c:62:
+};
+/* AMD64 Manual 3, Appendix A*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2872: FILE: arch/x86/mm/pf_in.c:66:
+};
+static unsigned int reg_wop[] = { 0x88, 0x89 };

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2878: FILE: arch/x86/mm/pf_in.c:72:
+};
+/* 8 bit only */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2889: FILE: arch/x86/mm/pf_in.c:83:
+static int skip_prefix(unsigned char *addr, int *shorted, int *enlarged,
+								int *rexr)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'opcode' may be better as '(opcode)' to avoid precedence issues
#2932: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'array' - possible side-effects?
#2932: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2932: FILE: arch/x86/mm/pf_in.c:126:
+#define CHECK_OP_TYPE(opcode, array, type) \
+	for (i = 0; i < ARRAY_SIZE(array); i++) { \
+		if (array[i] == opcode) { \
+			rv = type; \
+			goto exit; \
+		} \
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2959: FILE: arch/x86/mm/pf_in.c:153:
+}
+#undef CHECK_OP_TYPE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2979: FILE: arch/x86/mm/pf_in.c:173:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3009: FILE: arch/x86/mm/pf_in.c:203:
+	printk(KERN_ERR "mmiotrace: Unknown opcode 0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3103: FILE: arch/x86/mm/pf_in.c:297:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3165: FILE: arch/x86/mm/pf_in.c:359:
+		printk(KERN_ERR "mmiotrace: Error reg no# %d\n", no);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3195: FILE: arch/x86/mm/pf_in.c:389:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#3196: FILE: arch/x86/mm/pf_in.c:390:
+	printk(KERN_ERR "mmiotrace: Not a register instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3218: FILE: arch/x86/mm/pf_in.c:412:
+		printk(KERN_ERR "mmiotrace: Error width# %d\n", reg);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3243: FILE: arch/x86/mm/pf_in.c:437:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "

WARNING:SPLIT_STRING: quoted string split across lines
#3244: FILE: arch/x86/mm/pf_in.c:438:
+	printk(KERN_ERR "mmiotrace: Not an immediate instruction, opcode "
+							"0x%02x\n", opcode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3269: FILE: arch/x86/mm/pf_in.c:463:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "

WARNING:SPLIT_STRING: quoted string split across lines
#3270: FILE: arch/x86/mm/pf_in.c:464:
+		printk(KERN_ERR "mmiotrace: not a memory access instruction "
+						"at 0x%lx, rm_mod=0x%02x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3290: FILE: arch/x86/mm/pf_in.c:484:
+		printk(KERN_ERR "mmiotrace: Error: width.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3302: FILE: arch/x86/mm/pf_in.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3317: FILE: arch/x86/mm/pf_in.h:16:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3318: FILE: arch/x86/mm/pf_in.h:17:
+ *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3347: FILE: arch/x86/mm/testmmiotrace.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#3351: FILE: arch/x86/mm/testmmiotrace.c:5:
+#include <asm/io.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3354: FILE: arch/x86/mm/testmmiotrace.c:8:
+extern void __iomem *ioremap_nocache_trace(unsigned long offset,
+						unsigned long size);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3355: FILE: arch/x86/mm/testmmiotrace.c:9:
+extern void iounmap_trace(volatile void __iomem *addr);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3355: FILE: arch/x86/mm/testmmiotrace.c:9:
+extern void iounmap_trace(volatile void __iomem *addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#3366: FILE: arch/x86/mm/testmmiotrace.c:20:
+	unsigned int i;
+	for (i = 0; i < 256; i++)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3377: FILE: arch/x86/mm/testmmiotrace.c:31:
+	volatile unsigned int v;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3378: FILE: arch/x86/mm/testmmiotrace.c:32:
+	volatile unsigned int v;
+	for (i = 0; i < 256; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3389: FILE: arch/x86/mm/testmmiotrace.c:43:
+	void __iomem *p = ioremap_nocache_trace(mmio_address, 0x4000);
+	if (!p) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3390: FILE: arch/x86/mm/testmmiotrace.c:44:
+		printk(KERN_ERR MODULE_NAME ": could not ioremap IO memory, "

WARNING:SPLIT_STRING: quoted string split across lines
#3391: FILE: arch/x86/mm/testmmiotrace.c:45:
+		printk(KERN_ERR MODULE_NAME ": could not ioremap IO memory, "
+							"aborting.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3402: FILE: arch/x86/mm/testmmiotrace.c:56:
+		printk(KERN_ERR MODULE_NAME ": you have to use the module "

WARNING:SPLIT_STRING: quoted string split across lines
#3403: FILE: arch/x86/mm/testmmiotrace.c:57:
+		printk(KERN_ERR MODULE_NAME ": you have to use the module "
+						"argument mmio_address.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3404: FILE: arch/x86/mm/testmmiotrace.c:58:
+		printk(KERN_ERR MODULE_NAME ": DO NOT LOAD THIS MODULE UNLESS"

WARNING:SPLIT_STRING: quoted string split across lines
#3405: FILE: arch/x86/mm/testmmiotrace.c:59:
+		printk(KERN_ERR MODULE_NAME ": DO NOT LOAD THIS MODULE UNLESS"
+				" YOU REALLY KNOW WHAT YOU ARE DOING!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3409: FILE: arch/x86/mm/testmmiotrace.c:63:
+	printk(KERN_WARNING MODULE_NAME ": WARNING: mapping 16 kB @ 0x%08lx "

WARNING:SPLIT_STRING: quoted string split across lines
#3410: FILE: arch/x86/mm/testmmiotrace.c:64:
+	printk(KERN_WARNING MODULE_NAME ": WARNING: mapping 16 kB @ 0x%08lx "
+					"in PCI address space, and writing "

WARNING:SPLIT_STRING: quoted string split across lines
#3411: FILE: arch/x86/mm/testmmiotrace.c:65:
+					"in PCI address space, and writing "
+					"rubbish in there.\n", mmio_address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3418: FILE: arch/x86/mm/testmmiotrace.c:72:
+	printk(KERN_DEBUG MODULE_NAME ": unloaded.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324173.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 92 warnings, 53 checks, 1624 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324173.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
