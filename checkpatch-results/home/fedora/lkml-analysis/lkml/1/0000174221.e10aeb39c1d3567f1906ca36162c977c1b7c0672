WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#42: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#130: FILE: security/integrity/ima/ima.h:141:
+int ima_parse_add_rule(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#231: FILE: security/integrity/ima/ima_fs.c:298:
+static struct file_operations ima_measure_policy_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#244: FILE: security/integrity/ima/ima_fs.c:337:
+					    S_IRUSR | S_IRGRP | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#375: FILE: security/integrity/ima/ima_policy.c:166:
  * ima_measure points to either the measure_default_rules or the
+ * the new measure_policy_rules.

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#408: FILE: security/integrity/ima/ima_policy.c:201:
+	Opt_err = -1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_measure>
#409: FILE: security/integrity/ima/ima_policy.c:202:
+	Opt_measure = 1, Opt_dont_measure,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dont_measure>
#409: FILE: security/integrity/ima/ima_policy.c:202:
+	Opt_measure = 1, Opt_dont_measure,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_obj_user>
#410: FILE: security/integrity/ima/ima_policy.c:203:
+	Opt_obj_user, Opt_obj_role, Opt_obj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_obj_role>
#410: FILE: security/integrity/ima/ima_policy.c:203:
+	Opt_obj_user, Opt_obj_role, Opt_obj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_obj_type>
#410: FILE: security/integrity/ima/ima_policy.c:203:
+	Opt_obj_user, Opt_obj_role, Opt_obj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_subj_user>
#411: FILE: security/integrity/ima/ima_policy.c:204:
+	Opt_subj_user, Opt_subj_role, Opt_subj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_subj_role>
#411: FILE: security/integrity/ima/ima_policy.c:204:
+	Opt_subj_user, Opt_subj_role, Opt_subj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_subj_type>
#411: FILE: security/integrity/ima/ima_policy.c:204:
+	Opt_subj_user, Opt_subj_role, Opt_subj_type,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_func>
#412: FILE: security/integrity/ima/ima_policy.c:205:
+	Opt_func, Opt_mask, Opt_fsmagic, Opt_uid

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mask>
#412: FILE: security/integrity/ima/ima_policy.c:205:
+	Opt_func, Opt_mask, Opt_fsmagic, Opt_uid

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fsmagic>
#412: FILE: security/integrity/ima/ima_policy.c:205:
+	Opt_func, Opt_mask, Opt_fsmagic, Opt_uid

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#412: FILE: security/integrity/ima/ima_policy.c:205:
+	Opt_func, Opt_mask, Opt_fsmagic, Opt_uid

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#453: FILE: security/integrity/ima/ima_policy.c:246:
+	while ((p = strsep(&rule, " \n")) != NULL) {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#502: FILE: security/integrity/ima/ima_policy.c:295:
+			result = strict_strtoul(args[0].from, 16,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#509: FILE: security/integrity/ima/ima_policy.c:302:
+			result = strict_strtoul(args[0].from, 10, &lnum);

CHECK:SPACING: No space is necessary after a cast
#511: FILE: security/integrity/ima/ima_policy.c:304:
+				entry->uid = (uid_t) lnum;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#555: FILE: security/integrity/ima/ima_policy.c:348:
+			printk(KERN_INFO "%s: unknown token: %s\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#556: FILE: security/integrity/ima/ima_policy.c:349:
+			       __FUNCTION__, p);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void ima_delete_rules() should probably be void ima_delete_rules(void)
#609: FILE: security/integrity/ima/ima_policy.c:402:
+void ima_delete_rules()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 14 checks, 543 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174221.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
