CHECK:MACRO_ARG_REUSE: Macro argument reuse '_buf' - possible side-effects?
#110: FILE: include/linux/kernel.h:188:
+#define MPRINTK_INITIALIZER(_buf, _size)				\
+	{								\
+		.buf		= _buf,					\
+		.body		= _buf,					\
+		.cur		= _buf,					\
+		.end		= _buf + _size,				\
+		.flags		= 0					\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_size' may be better as '(_size)' to avoid precedence issues
#110: FILE: include/linux/kernel.h:188:
+#define MPRINTK_INITIALIZER(_buf, _size)				\
+	{								\
+		.buf		= _buf,					\
+		.body		= _buf,					\
+		.cur		= _buf,					\
+		.end		= _buf + _size,				\
+		.flags		= 0					\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#119: FILE: include/linux/kernel.h:197:
+#define DEFINE_MPRINTK(name, size)					\
+	char __##name##_buf[size];					\
+	struct mprintk name = MPRINTK_INITIALIZER(__##name##_buf, size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#135: FILE: include/linux/kernel.h:214:
+}
+extern void mprintk_init_alloc(struct mprintk *mp, gfp_t gfp);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#135: FILE: include/linux/kernel.h:214:
+extern void mprintk_init_alloc(struct mprintk *mp, gfp_t gfp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/kernel.h:215:
+extern void mprintk_free(struct mprintk *mp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/kernel.h:216:
+extern int vmprintk(struct mprintk *mp, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#138: FILE: include/linux/kernel.h:217:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/kernel.h:218:
+extern int vmprintk_set_header(struct mprintk *mp, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#140: FILE: include/linux/kernel.h:219:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/kernel.h:220:
+extern int vmprintk_flush(struct mprintk *mp, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#142: FILE: include/linux/kernel.h:221:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/kernel.h:222:
+extern int mprintk(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#144: FILE: include/linux/kernel.h:223:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/kernel.h:224:
+extern int mprintk_set_header(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#146: FILE: include/linux/kernel.h:225:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/kernel.h:226:
+extern int mprintk_flush(struct mprintk *mp, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#148: FILE: include/linux/kernel.h:227:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#173: FILE: include/linux/kernel.h:263:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#177: FILE: include/linux/kernel.h:267:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#181: FILE: include/linux/kernel.h:271:
+	__attribute__ ((format (printf, 2, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#185: FILE: include/linux/kernel.h:275:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#189: FILE: include/linux/kernel.h:279:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#193: FILE: include/linux/kernel.h:283:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:BIT_MACRO: Prefer using the BIT macro
#216: FILE: kernel/printk.c:57:
+#define MPRINTK_BUF_ALLOC		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: kernel/printk.c:58:
+#define MPRINTK_HAS_HEADER_LOGLV	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: kernel/printk.c:59:
+#define MPRINTK_OVERFLOWED		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#219: FILE: kernel/printk.c:60:
+#define MPRINTK_LOGLV_OVERRIDDEN	(1 << 3)

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#313: FILE: kernel/printk.c:933:
+ * va_list @args intead of argument list.
                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: kernel/printk.c:990:
+		printk("\n" KERN_ERR

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#387: FILE: kernel/printk.c:1007:
+ * takes va_list @args intead of argument list.
                        ^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#420: FILE: kernel/printk.c:1040:
+	printk(KERN_WARNING "vmprintk_set_header() failed: %s\n", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vmprintk_set_header', this function's name, in a string
#420: FILE: kernel/printk.c:1040:
+	printk(KERN_WARNING "vmprintk_set_header() failed: %s\n", reason);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'intead' may be misspelled - perhaps 'instead'?
#433: FILE: kernel/printk.c:1053:
+ * va_list @args intead of argument list.
                  ^^^^^^

WARNING:TYPO_SPELLING: 'overrided' may be misspelled - perhaps 'overrode'?
#458: FILE: kernel/printk.c:1078:
+ * level if the previous message contained log level overrided and
                                                      ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 16 checks, 427 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
