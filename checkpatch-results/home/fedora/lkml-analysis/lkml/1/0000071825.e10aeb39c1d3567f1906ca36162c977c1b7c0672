WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
http://infocenter.arm.com/help/topic/com.arm.doc.ddi0424a/DDI0424A_dmac_pl330_r0p0_trm.pdf

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: drivers/dma/Kconfig:100:
+config PL330_DMAC
+	bool "PrimeCell DMA Controller(PL330) support"
+	depends on ARCH_S5PC1XX
+	select DMA_ENGINE
+	help
+	  Enable support for the PrimeCell DMA Controller(PL330) support.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/dma/pl330_dmac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: drivers/dma/pl330_dmac.c:29:
+static unsigned int pl330_get_reg(struct pl330_device *pl330_dev,
+		unsigned int reg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/dma/pl330_dmac.c:37:
+static void pl330_set_reg(struct pl330_device *pl330_dev, unsigned int reg,
+		unsigned int val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/dma/pl330_dmac.c:202:
+static inline int pl330_dmalpends(u8 *desc_pool_virt, u8 backwards_jump,
+		bool lc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/dma/pl330_dmac.c:212:
+static inline int pl330_dmalpendb(u8 *desc_pool_virt, u8 backwards_jump,
+		bool lc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#447: FILE: drivers/dma/pl330_dmac.c:368:
+static void pl330_dmago(struct pl330_chan *pl330_ch, struct pl330_desc *desc,
+		bool ns)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: drivers/dma/pl330_dmac.c:418:
+	desc->desc_pool_virt = dma_alloc_coherent(dev, PL330_POOL_SIZE, &phys,
+			flags);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#551: FILE: drivers/dma/pl330_dmac.c:472:
+	pl330_ch->completed = chan->cookie = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/dma/pl330_dmac.c:492:
+	list_for_each_entry_safe(desc, _desc, &pl330_ch->complete_desc,
+			desc_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: drivers/dma/pl330_dmac.c:495:
+		dma_free_coherent(dev, PL330_POOL_SIZE, desc->desc_pool_virt,
+				desc->async_tx.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/dma/pl330_dmac.c:499:
+	list_for_each_entry_safe(desc, _desc, &pl330_ch->queue_desc,
+			desc_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/dma/pl330_dmac.c:502:
+		dma_free_coherent(dev, PL330_POOL_SIZE, desc->desc_pool_virt,
+				desc->async_tx.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#585: FILE: drivers/dma/pl330_dmac.c:506:
+	list_for_each_entry_safe(desc, _desc, &pl330_ch->free_desc,
+			desc_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/dma/pl330_dmac.c:509:
+		dma_free_coherent(dev, PL330_POOL_SIZE, desc->desc_pool_virt,
+				desc->async_tx.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/dma/pl330_dmac.c:515:
+static enum dma_status pl330_is_tx_complete(struct dma_chan *chan,
+		dma_cookie_t cookie, dma_cookie_t *done, dma_cookie_t *used)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: drivers/dma/pl330_dmac.c:549:
+static unsigned int pl330_make_instructions(struct pl330_chan *pl330_ch,
+		struct pl330_desc *desc, dma_addr_t dest, dma_addr_t src,

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: drivers/dma/pl330_dmac.c:610:
+		u8 periph = dma_slave->peri_num;
+		inst_size += pl330_dmawfps(buf + inst_size, periph);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#696: FILE: drivers/dma/pl330_dmac.c:617:
+		u8 periph = dma_slave->peri_num;
+		inst_size += pl330_dmawfps(buf + inst_size, periph);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: drivers/dma/pl330_dmac.c:630:
+		dev_dbg(dev, "inst_size - loop_start0: 0x%x\n",
+				inst_size - loop_start0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: drivers/dma/pl330_dmac.c:637:
+		dev_dbg(dev, "inst_size - loop_start1: 0x%x\n",
+				inst_size - loop_start1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#730: FILE: drivers/dma/pl330_dmac.c:651:
+			u8 periph = dma_slave->peri_num;
+			inst_size += pl330_dmawfps(buf + inst_size, periph);

WARNING:LINE_SPACING: Missing a blank line after declarations
#738: FILE: drivers/dma/pl330_dmac.c:659:
+			u8 periph = dma_slave->peri_num;
+			inst_size += pl330_dmawfps(buf + inst_size, periph);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: drivers/dma/pl330_dmac.c:671:
+		dev_dbg(dev, "inst_size - loop_start0: 0x%x\n",
+				inst_size - loop_start0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#766: FILE: drivers/dma/pl330_dmac.c:687:
+pl330_prep_dma_memcpy(struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
+		size_t len, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: drivers/dma/pl330_dmac.c:708:
+pl330_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
+		unsigned int sg_len, enum dma_data_direction direction,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: drivers/dma/pl330_dmac.c:719:
+	BUG_ON(!dma_slave);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#799: FILE: drivers/dma/pl330_dmac.c:720:
+	BUG_ON(direction == DMA_BIDIRECTIONAL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#802: FILE: drivers/dma/pl330_dmac.c:723:
+		BUG_ON(direction == DMA_TO_DEVICE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#805: FILE: drivers/dma/pl330_dmac.c:726:
+		BUG_ON(direction == DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#832: FILE: drivers/dma/pl330_dmac.c:753:
+		inst_size = pl330_make_instructions(pl330_ch, desc, dest, src,
+				len, inst_size, direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#952: FILE: drivers/dma/pl330_dmac.c:873:
+	pl330_dev->reg_base = devm_ioremap(&pdev->dev, res->start,
+			res->end - res->start + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/dma/pl330_dmac.c:886:
+	ret = devm_request_irq(&pdev->dev, irq, pl330_irq_handler, 0,
+			dev_name(&pdev->dev), pl330_dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#996: FILE: drivers/dma/pl330_dmac.c:917:
+		tasklet_init(&pl330_ch->tasklet, pl330_ch_tasklet,
+				(unsigned long)pl330_ch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1001: FILE: drivers/dma/pl330_dmac.c:922:
+		list_add_tail(&pl330_ch->common.device_node,
+				&dma_dev->channels);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1013: FILE: drivers/dma/pl330_dmac.c:934:
+	dev_info(&pdev->dev, "PL330 DMA Controller: ( %s%s)\n",
+		dma_has_cap(DMA_MEMCPY, dma_dev->cap_mask) ? "memcpy " : "",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: drivers/dma/pl330_dmac.c:956:
+	list_for_each_entry_safe(pl330_ch, _pl330_ch,
+			&pl330_dev->common.channels, common.device_node) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1067: FILE: drivers/dma/pl330_dmac.c:988:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1080: FILE: drivers/dma/pl330_dmac.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1109: FILE: drivers/dma/pl330_dmac.h:30:
+#define PL330_FTC(ch)		(0x40 + (ch << 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1110: FILE: drivers/dma/pl330_dmac.h:31:
+#define PL330_CS(ch)		(0x100 + (ch << 3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1111: FILE: drivers/dma/pl330_dmac.h:32:
+#define PL330_CPC(ch)		(0x104 + (ch << 3))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1112: FILE: drivers/dma/pl330_dmac.h:33:
+#define PL330_SA(ch)		(0x400 + (ch << 5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1113: FILE: drivers/dma/pl330_dmac.h:34:
+#define PL330_DA(ch)		(0x404 + (ch << 5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1114: FILE: drivers/dma/pl330_dmac.h:35:
+#define PL330_CC(ch)		(0x408 + (ch << 5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1115: FILE: drivers/dma/pl330_dmac.h:36:
+#define PL330_LC0(ch)		(0x40c + (ch << 5))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ch' may be better as '(ch)' to avoid precedence issues
#1116: FILE: drivers/dma/pl330_dmac.h:37:
+#define PL330_LC1(ch)		(0x410 + (ch << 5))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1137: FILE: drivers/dma/pl330_dmac.h:58:
+#define PL330_SRC_INC			(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1138: FILE: drivers/dma/pl330_dmac.h:59:
+#define PL330_SRC_BSIZE_1BYTE		(1 << 1)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1145: FILE: drivers/dma/pl330_dmac.h:66:
+#define PL330_SRC_BLEN(n)		((n - 1) << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1146: FILE: drivers/dma/pl330_dmac.h:67:
+#define PL330_DEST_INC			(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1147: FILE: drivers/dma/pl330_dmac.h:68:
+#define PL330_DEST_BSIZE_1BYTE		(1 << 15)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1154: FILE: drivers/dma/pl330_dmac.h:75:
+#define PL330_DEST_BLEN(n)		((n - 18) << 4)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1242: FILE: drivers/dma/pl330_dmac.h:163:
+	spinlock_t			lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000071825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 42 checks, 1186 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000071825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
