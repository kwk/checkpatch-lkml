WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
dma_map/unmap_sg need to execute barrier only after the last buffer has been

WARNING:TYPO_SPELLING: 'imporves' may be misspelled - perhaps 'improves'?
#29: 
mapped/unmapped. This imporves performance in situations where multiple
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#47: FILE: arch/arm/include/asm/dma-mapping.h:114:
+static inline void __dma_page_cpu_to_dev_nobarrier(struct page *page,
+	unsigned long off, size_t size, enum dma_data_direction dir)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#49: FILE: arch/arm/include/asm/dma-mapping.h:116:
+	extern void ___dma_page_cpu_to_dev_nobarrier(struct page *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#49: FILE: arch/arm/include/asm/dma-mapping.h:116:
+	extern void ___dma_page_cpu_to_dev_nobarrier(struct page *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#49: FILE: arch/arm/include/asm/dma-mapping.h:116:
+	extern void ___dma_page_cpu_to_dev_nobarrier(struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#49: FILE: arch/arm/include/asm/dma-mapping.h:116:
+	extern void ___dma_page_cpu_to_dev_nobarrier(struct page *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#50: FILE: arch/arm/include/asm/dma-mapping.h:117:
+	extern void ___dma_page_cpu_to_dev_nobarrier(struct page *,
+		unsigned long, size_t, enum dma_data_direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#57: FILE: arch/arm/include/asm/dma-mapping.h:124:
+static inline void __dma_page_dev_to_cpu_nobarrier(struct page *page,
+	unsigned long off, size_t size, enum dma_data_direction dir)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: arch/arm/include/asm/dma-mapping.h:126:
+	extern void ___dma_page_dev_to_cpu_nobarrier(struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#59: FILE: arch/arm/include/asm/dma-mapping.h:126:
+	extern void ___dma_page_dev_to_cpu_nobarrier(struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#59: FILE: arch/arm/include/asm/dma-mapping.h:126:
+	extern void ___dma_page_dev_to_cpu_nobarrier(struct page *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#59: FILE: arch/arm/include/asm/dma-mapping.h:126:
+	extern void ___dma_page_dev_to_cpu_nobarrier(struct page *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#60: FILE: arch/arm/include/asm/dma-mapping.h:127:
+	extern void ___dma_page_dev_to_cpu_nobarrier(struct page *,
+		unsigned long, size_t, enum dma_data_direction);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#77: FILE: arch/arm/include/asm/dma-mapping.h:332:
+static inline dma_addr_t dma_map_page_nobarrier(struct device *dev,
+		struct page *page, unsigned long offset, size_t size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: arch/arm/include/asm/dma-mapping.h:339:
+static inline void dma_unmap_page_nobarrier(struct device *dev,
+		dma_addr_t handle, size_t size, enum dma_data_direction dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: arch/arm/include/asm/dma-mapping.h:431:
+static inline dma_addr_t dma_map_page_nobarrier(struct device *dev,
+		struct page *page, unsigned long offset, size_t size,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#117: FILE: arch/arm/include/asm/dma-mapping.h:434:
+	BUG_ON(!valid_dma_direction(dir));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: arch/arm/include/asm/dma-mapping.h:498:
+static inline void dma_unmap_page_nobarrier(struct device *dev,
+		dma_addr_t handle, size_t size, enum dma_data_direction dir)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: arch/arm/include/asm/dma-mapping.h:501:
+	__dma_page_dev_to_cpu_nobarrier(dma_to_page(dev, handle),
+		handle & ~PAGE_MASK, size, dir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#165: FILE: arch/arm/mm/dma-mapping.c:512:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: arch/arm/mm/dma-mapping.c:514:
+void ___dma_page_cpu_to_dev_nobarrier(struct page *page, unsigned long off,
+	size_t size, enum dma_data_direction dir)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#174: FILE: arch/arm/mm/dma-mapping.c:521:
+	if (dir == DMA_FROM_DEVICE) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: arch/arm/mm/dma-mapping.c:531:
+void ___dma_page_dev_to_cpu_nobarrier(struct page *page, unsigned long off,
+	size_t size, enum dma_data_direction dir)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#206: FILE: arch/arm/mm/dma-mapping.c:565:
+	for_each_sg(sg, s, nents - 1 , i) {
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: arch/arm/mm/dma-mapping.c:567:
+		s->dma_address = dma_map_page_nobarrier(dev, sg_page(s),
+					s->offset, s->length, dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: arch/arm/mm/dma-mapping.c:575:
+	s->dma_address = dma_map_page(dev, sg_page(s), s->offset,
+					s->length, dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: arch/arm/mm/dma-mapping.c:584:
+		dma_unmap_page_nobarrier(dev, sg_dma_address(s),
+						sg_dma_len(s), dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/arm/mm/dma-mapping.c:609:
+		dma_unmap_page_nobarrier(dev, sg_dma_address(s),
+						sg_dma_len(s), dir);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013253.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 18 checks, 194 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013253.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
