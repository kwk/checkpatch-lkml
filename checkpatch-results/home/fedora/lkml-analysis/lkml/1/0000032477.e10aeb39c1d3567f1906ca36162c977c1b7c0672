WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#225: FILE: fs/btrfs/extent_io.c:2021:
+			BUG_ON(blocksize != PAGE_SIZE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#353: FILE: mm/filemap.c:124:
+	 * if we're uptodate, flush out into the cleancache, otherwise
 	            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: include/linux/cleancache.h:1:
+#ifndef _LINUX_CLEANCACHE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#374: FILE: include/linux/cleancache.h:7:
+extern void cleancache_init(struct super_block *sb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/cleancache.h:8:
+extern void shared_cleancache_init(struct super_block *sb, char *uuid);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#376: FILE: include/linux/cleancache.h:9:
+extern int cleancache_get(struct address_space *mapping, unsigned long index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: include/linux/cleancache.h:10:
+extern int cleancache_get(struct address_space *mapping, unsigned long index,
+	       struct page *empty_page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: include/linux/cleancache.h:11:
+extern int cleancache_put(struct address_space *mapping, unsigned long index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: include/linux/cleancache.h:12:
+extern int cleancache_put(struct address_space *mapping, unsigned long index,
+		struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/cleancache.h:13:
+extern int cleancache_flush(struct address_space *mapping, unsigned long index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/cleancache.h:14:
+extern int cleancache_flush_inode(struct address_space *mapping);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/cleancache.h:15:
+extern int cleancache_flush_filesystem(struct super_block *s);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: include/linux/cleancache.h:26:
+static inline int cleancache_get(struct address_space *mapping,
+		unsigned long index, struct page *empty_page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: include/linux/cleancache.h:32:
+static inline int cleancache_put(struct address_space *mapping,
+		unsigned long index, struct page *page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: include/linux/cleancache.h:38:
+static inline int cleancache_flush(struct address_space *mapping,
+		unsigned long index)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#426: FILE: mm/cleancache.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#427: FILE: mm/cleancache.c:2:
+ * linux/mm/cleancache.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: mm/cleancache.c:43:
+int cleancache_put(struct address_space *mapping, unsigned long index,
+ struct page *page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: mm/cleancache.c:43:
+ struct page *page)$

CHECK:SPACING: No space is necessary after a cast
#471: FILE: mm/cleancache.c:46:
+	u64 obj = (unsigned long) mapping->host->i_ino;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#472: FILE: mm/cleancache.c:47:
+	u32 ind = (u32) index;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#484: FILE: mm/cleancache.c:59:
+		printk(KERN_INFO

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: mm/cleancache.c:72:
+int cleancache_get(struct address_space *mapping, unsigned long index,
+ struct page *empty_page)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: mm/cleancache.c:72:
+ struct page *empty_page)$

CHECK:SPACING: No space is necessary after a cast
#500: FILE: mm/cleancache.c:75:
+	u64 obj = (unsigned long) mapping->host->i_ino;

CHECK:SPACING: No space is necessary after a cast
#501: FILE: mm/cleancache.c:76:
+	u32 ind = (u32) index;

CHECK:SPACING: No space is necessary after a cast
#522: FILE: mm/cleancache.c:97:
+	u64 obj = (unsigned long) mapping->host->i_ino;

CHECK:SPACING: No space is necessary after a cast
#523: FILE: mm/cleancache.c:98:
+	u32 ind = (u32) index;

CHECK:SPACING: No space is necessary after a cast
#537: FILE: mm/cleancache.c:112:
+	u64 obj = (unsigned long) mapping->host->i_ino;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#556: FILE: mm/cleancache.c:131:
+	printk(KERN_INFO

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000032477.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 21 checks, 477 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000032477.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
