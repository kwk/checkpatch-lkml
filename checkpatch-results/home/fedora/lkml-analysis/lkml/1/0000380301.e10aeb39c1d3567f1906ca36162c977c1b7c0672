WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: drivers/kvm/irq.c:65:
+	struct kvm_vcpu *vcpu = (struct kvm_vcpu *)info;
+	printk(KERN_DEBUG "vcpu_kick_intr %p \n", vcpu);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#121: FILE: drivers/kvm/irq.c:65:
+	printk(KERN_DEBUG "vcpu_kick_intr %p \n", vcpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'vcpu_kick_intr', this function's name, in a string
#121: FILE: drivers/kvm/irq.c:65:
+	printk(KERN_DEBUG "vcpu_kick_intr %p \n", vcpu);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#121: FILE: drivers/kvm/irq.c:65:
+	printk(KERN_DEBUG "vcpu_kick_intr %p \n", vcpu);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#169: FILE: drivers/kvm/irq.h:79:
+#define ASSERT(x)  ^I^I^I^I^I^I^I\$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#172: FILE: drivers/kvm/irq.h:82:
+		printk(KERN_EMERG "assertion failed %s: %d: %s\n",	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: drivers/kvm/irq.h:84:
+		BUG();							\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: drivers/kvm/kvm_main.c:1007:
+static struct kvm_io_device *vcpu_find_pervcpu_dev(struct kvm_vcpu *vcpu,
+						gpa_t addr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dev"
#302: FILE: drivers/kvm/kvm_main.c:1025:
+	if (dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#318: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#323: FILE: drivers/kvm/lapic.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#350: FILE: drivers/kvm/lapic.c:28:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#355: FILE: drivers/kvm/lapic.c:33:
+#include <asm/atomic.h>

CHECK:CAMELCASE: Avoid CamelCase: <PRId64>
#359: FILE: drivers/kvm/lapic.c:37:
+#define PRId64 "d"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <PRIx64>
#360: FILE: drivers/kvm/lapic.c:38:
+#define PRIx64 "llx"

CHECK:CAMELCASE: Avoid CamelCase: <PRIu64>
#361: FILE: drivers/kvm/lapic.c:39:
+#define PRIu64 "u"

CHECK:CAMELCASE: Avoid CamelCase: <PRIo64>
#362: FILE: drivers/kvm/lapic.c:40:
+#define PRIo64 "o"

CHECK:BIT_MACRO: Prefer using the BIT macro
#372: FILE: drivers/kvm/lapic.c:50:
+#define LAPIC_MMIO_LENGTH		(1 << 12)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: No space is necessary after a cast
#383: FILE: drivers/kvm/lapic.c:61:
+	return *((u32 *) (apic->regs + reg_off));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#388: FILE: drivers/kvm/lapic.c:66:
+	*((u32 *) (apic->regs + reg_off)) = val;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#564: FILE: drivers/kvm/lapic.c:242:
+		if (((logical_id >> 4) == (mda >> 0x4))
+		    && (logical_id & mda & 0xf))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#568: FILE: drivers/kvm/lapic.c:246:
+		printk(KERN_WARNING "Bad DFR vcpu %d: %08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#583: FILE: drivers/kvm/lapic.c:261:
+	apic_debug("target %p, source %p, dest 0x%x, "
+		   "dest_mode 0x%x, short_hand 0x%x",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dest == 0xFF'
#591: FILE: drivers/kvm/lapic.c:269:
+			if ((dest == 0xFF) || (dest == kvm_apic_id(target)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dest == kvm_apic_id(target)'
#591: FILE: drivers/kvm/lapic.c:269:
+			if ((dest == 0xFF) || (dest == kvm_apic_id(target)))

CHECK:BRACES: Unbalanced braces around else statement
#593: FILE: drivers/kvm/lapic.c:271:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#609: FILE: drivers/kvm/lapic.c:287:
+		printk(KERN_WARNING "Bad dest shorthand value %x\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#639: FILE: drivers/kvm/lapic.c:317:
+		if (trig_mode) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#642: FILE: drivers/kvm/lapic.c:320:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#651: FILE: drivers/kvm/lapic.c:329:
+		printk(KERN_DEBUG "Ignoring delivery mode 3\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#655: FILE: drivers/kvm/lapic.c:333:
+		printk(KERN_DEBUG "Ignoring guest SMI\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#658: FILE: drivers/kvm/lapic.c:336:
+		printk(KERN_DEBUG "Ignoring guest NMI\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#662: FILE: drivers/kvm/lapic.c:340:
+		printk(KERN_DEBUG "Ignoring guest INIT\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#666: FILE: drivers/kvm/lapic.c:344:
+		printk(KERN_DEBUG "Ignoring guest STARTUP\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#670: FILE: drivers/kvm/lapic.c:348:
+		printk(KERN_ERR "TODO: unsupported delivery mode %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#685: FILE: drivers/kvm/lapic.c:363:
+		printk(KERN_DEBUG "vcpu not ready for apic_round_robin\n");

WARNING:SPLIT_STRING: quoted string split across lines
#726: FILE: drivers/kvm/lapic.c:404:
+	apic_debug("icr_high 0x%x, icr_low 0x%x, "
+		   "short_hand 0x%x, dest 0x%x, trig_mode 0x%x, level 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#727: FILE: drivers/kvm/lapic.c:405:
+		   "short_hand 0x%x, dest 0x%x, trig_mode 0x%x, level 0x%x, "
+		   "dest_mode 0x%x, delivery_mode 0x%x, vector 0x%x\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "target"
#748: FILE: drivers/kvm/lapic.c:426:
+		if (target != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "apic"
#760: FILE: drivers/kvm/lapic.c:438:
+	ASSERT(apic != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#762: FILE: drivers/kvm/lapic.c:440:
+	if (unlikely(ktime_to_ns(now) <=
[...]
+	} else
[...]

ERROR:SPACING: space prohibited after that open parenthesis '('
#765: FILE: drivers/kvm/lapic.c:443:
+		passed = ktime_add(( {

CHECK:BRACES: Unbalanced braces around else statement
#771: FILE: drivers/kvm/lapic.c:449:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#799: FILE: drivers/kvm/lapic.c:477:
+		printk(KERN_WARNING "Access APIC ARBPRI register "

WARNING:SPLIT_STRING: quoted string split across lines
#800: FILE: drivers/kvm/lapic.c:478:
+		printk(KERN_WARNING "Access APIC ARBPRI register "
+		       "which is for P6\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#824: FILE: drivers/kvm/lapic.c:502:
+		printk(KERN_ERR "KVM_APIC_READ: alignment error %lx %d",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#837: FILE: drivers/kvm/lapic.c:515:
+		printk(KERN_ERR "Local APIC read with len = %x, "

WARNING:SPLIT_STRING: quoted string split across lines
#838: FILE: drivers/kvm/lapic.c:516:
+		printk(KERN_ERR "Local APIC read with len = %x, "
+		       "should be 1,2, or 4 instead\n", len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: drivers/kvm/lapic.c:531:
+	apic_debug("timer divide count is 0x%x\n",
+				   apic->timer.divide_count);

WARNING:SPLIT_STRING: quoted string split across lines
#871: FILE: drivers/kvm/lapic.c:549:
+			   PRIx64 ", "
+			   "timer initial count 0x%x, period %lldns, "

WARNING:SPLIT_STRING: quoted string split across lines
#872: FILE: drivers/kvm/lapic.c:550:
+			   "timer initial count 0x%x, period %lldns, "
+			   "expire @ 0x%016" PRIx64 ".\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#872: FILE: drivers/kvm/lapic.c:550:
+			   "expire @ 0x%016" PRIx64 ".\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/kvm/lapic.c:555:
+			   ktime_to_ns(ktime_add_ns(now,
+					apic->timer.period)));

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#894: FILE: drivers/kvm/lapic.c:572:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#895: FILE: drivers/kvm/lapic.c:573:
+			printk(KERN_ERR "apic write: bad size=%d %lx\n",

CHECK:SPACING: No space is necessary after a cast
#900: FILE: drivers/kvm/lapic.c:578:
+	val = *(u32 *) data;

WARNING:SPLIT_STRING: quoted string split across lines
#905: FILE: drivers/kvm/lapic.c:583:
+		apic_debug("%s: offset 0x%x with length 0x%x, and value is "
+			   "0x%x\n", __FUNCTION__, offset, len, val);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#905: FILE: drivers/kvm/lapic.c:583:
+			   "0x%x\n", __FUNCTION__, offset, len, val);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#944: FILE: drivers/kvm/lapic.c:622:
+
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#980: FILE: drivers/kvm/lapic.c:658:
+			printk(KERN_ERR "KVM_WRITE:TDCR %x\n", val);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#991: FILE: drivers/kvm/lapic.c:669:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#998: FILE: drivers/kvm/lapic.c:676:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr >= apic->base_address'
#999: FILE: drivers/kvm/lapic.c:677:
+	if (apic_hw_enabled(apic) &&
+	    (addr >= apic->base_address) &&
+	    (addr < (apic->base_address + LAPIC_MMIO_LENGTH)))

CHECK:SPACING: No space is necessary after a cast
#1044: FILE: drivers/kvm/lapic.c:722:
+	tpr = (u64) apic_get_reg(apic, APIC_TASKPRI);

WARNING:SPLIT_STRING: quoted string split across lines
#1067: FILE: drivers/kvm/lapic.c:745:
+	apic_debug("apic base msr is 0x%016" PRIx64 ", and base address is "
+		   "0x%lx.\n", apic->apic_base, apic->base_address);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1069: FILE: drivers/kvm/lapic.c:747:
+
+}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1082: FILE: drivers/kvm/lapic.c:760:
+	apic_debug("%s\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "apic"
#1086: FILE: drivers/kvm/lapic.c:764:
+	ASSERT(apic != NULL);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#1117: FILE: drivers/kvm/lapic.c:795:
+	apic_debug(KERN_INFO "%s: vcpu=%p, id=%d, base_msr="

WARNING:SPLIT_STRING: quoted string split across lines
#1118: FILE: drivers/kvm/lapic.c:796:
+	apic_debug(KERN_INFO "%s: vcpu=%p, id=%d, base_msr="
+		   "0x%016" PRIx64 ", base_address=0x%0lx.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1118: FILE: drivers/kvm/lapic.c:796:
+		   "0x%016" PRIx64 ", base_address=0x%0lx.\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1148: FILE: drivers/kvm/lapic.c:826:
+			   __FUNCTION__);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1164: FILE: drivers/kvm/lapic.c:842:
+		apic->timer.dev.expires = ktime_add_ns(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vcpu"
#1191: FILE: drivers/kvm/lapic.c:869:
+	ASSERT(vcpu != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!apic->regs_page"
#1201: FILE: drivers/kvm/lapic.c:879:
+	if (apic->regs_page == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1202: FILE: drivers/kvm/lapic.c:880:
+		printk(KERN_ERR "malloc apic regs error for vcpu %x\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380301.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 43 warnings, 32 checks, 1207 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380301.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
