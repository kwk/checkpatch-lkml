WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#56: FILE: drivers/usb/ip/Kconfig:1:
+config USB_IP_COMMON
+	tristate "USB IP support (EXPERIMENTAL)"
+	depends on USB && EXPERIMENTAL
+	default N
+	---help---
+	  This enables pushing USB packets over IP to allow remote
+	  machines access to USB devices directly.  For more details,
+	  and links to the userspace utility programs to let this work
+	  properly, see http://usbip.naist.jp/
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called usbip_common_mod.
+
+	  If unsure, say N.
+++ b/drivers/usb/ip/Makefile
+++ b/drivers/usb/ip/Makefile

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/usb/ip/usbip_common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#96: FILE: drivers/usb/ip/usbip_common.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#97: FILE: drivers/usb/ip/usbip_common.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: drivers/usb/ip/usbip_common.c:41:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: drivers/usb/ip/usbip_common.c:46:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: drivers/usb/ip/usbip_common.c:48:
+static ssize_t show_flag(struct device *dev, struct device_attribute *attr,
+								char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: drivers/usb/ip/usbip_common.c:54:
+static ssize_t store_flag(struct device *dev, struct device_attribute *attr,
+		const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#139: FILE: drivers/usb/ip/usbip_common.c:58:
+	sscanf(buf, "%lx", &flag);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#139: FILE: drivers/usb/ip/usbip_common.c:58:
+	sscanf(buf, "%lx", &flag);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_flag' to 'usbip_debug_show' 'store_flag' to 'usbip_debug_store'
#143: FILE: drivers/usb/ip/usbip_common.c:62:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#144: FILE: drivers/usb/ip/usbip_common.c:63:
+DEVICE_ATTR(usbip_debug, (S_IRUGO | S_IWUSR), show_flag, store_flag);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#152: FILE: drivers/usb/ip/usbip_common.c:71:
+			if (i%24 == 0)
 			     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: drivers/usb/ip/usbip_common.c:72:
+				printk("   ");

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/usb/ip/usbip_common.c:73:
+			printk("%02x ", (unsigned char) buff[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#154: FILE: drivers/usb/ip/usbip_common.c:73:
+			printk("%02x ", (unsigned char) buff[i]);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#155: FILE: drivers/usb/ip/usbip_common.c:74:
+			if (i%4 == 3)
 			     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#156: FILE: drivers/usb/ip/usbip_common.c:75:
+				printk("| ");

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#157: FILE: drivers/usb/ip/usbip_common.c:76:
+			if (i%24 == 23)
 			     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: drivers/usb/ip/usbip_common.c:77:
+				printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: drivers/usb/ip/usbip_common.c:79:
+		printk("... (%d byte)\n", bufflen);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#165: FILE: drivers/usb/ip/usbip_common.c:84:
+		if (i%24 == 0)
 		     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#166: FILE: drivers/usb/ip/usbip_common.c:85:
+			printk("   ");

CHECK:SPACING: No space is necessary after a cast
#167: FILE: drivers/usb/ip/usbip_common.c:86:
+		printk("%02x ", (unsigned char) buff[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#167: FILE: drivers/usb/ip/usbip_common.c:86:
+		printk("%02x ", (unsigned char) buff[i]);

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#168: FILE: drivers/usb/ip/usbip_common.c:87:
+		if (i%4 == 3)
 		     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#169: FILE: drivers/usb/ip/usbip_common.c:88:
+			printk("| ");

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#170: FILE: drivers/usb/ip/usbip_common.c:89:
+		if (i%24 == 23)
 		     ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#171: FILE: drivers/usb/ip/usbip_common.c:90:
+			printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#173: FILE: drivers/usb/ip/usbip_common.c:92:
+	printk("\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#175: FILE: drivers/usb/ip/usbip_common.c:94:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#184: FILE: drivers/usb/ip/usbip_common.c:103:
+	printk("dev(%d) ", dev);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#185: FILE: drivers/usb/ip/usbip_common.c:104:
+	printk("ep(%d) ",  ep);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: drivers/usb/ip/usbip_common.c:105:
+	printk("%s ", dir ? "IN" : "OUT");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: drivers/usb/ip/usbip_common.c:109:
+		printk("%s ", "ISO");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#193: FILE: drivers/usb/ip/usbip_common.c:112:
+		printk("%s ", "INT");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#196: FILE: drivers/usb/ip/usbip_common.c:115:
+		printk("%s ", "CTL");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#199: FILE: drivers/usb/ip/usbip_common.c:118:
+		printk("%s ", "BLK");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#202: FILE: drivers/usb/ip/usbip_common.c:121:
+		printk("ERR");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#205: FILE: drivers/usb/ip/usbip_common.c:124:
+	printk("\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#207: FILE: drivers/usb/ip/usbip_common.c:126:
+
+}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#219: FILE: drivers/usb/ip/usbip_common.c:138:
+		printk(" SPD_HIGH");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: drivers/usb/ip/usbip_common.c:141:
+		printk(" SPD_FULL");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: drivers/usb/ip/usbip_common.c:144:
+		printk(" SPD_LOW");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#228: FILE: drivers/usb/ip/usbip_common.c:147:
+		printk(" SPD_UNKNOWN");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: drivers/usb/ip/usbip_common.c:150:
+		printk(" SPD_ERROR");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#234: FILE: drivers/usb/ip/usbip_common.c:153:
+	printk(" tt %p, ttport %d", udev->tt, udev->ttport);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: drivers/usb/ip/usbip_common.c:154:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: drivers/usb/ip/usbip_common.c:158:
+		printk(" %2u", i);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#240: FILE: drivers/usb/ip/usbip_common.c:159:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#244: FILE: drivers/usb/ip/usbip_common.c:163:
+		printk(" %2u", (udev->toggle[0] & (1 << i)) ? 1 : 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#245: FILE: drivers/usb/ip/usbip_common.c:164:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#249: FILE: drivers/usb/ip/usbip_common.c:168:
+		printk(" %2u", (udev->toggle[1] & (1 << i)) ? 1 : 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: drivers/usb/ip/usbip_common.c:169:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#252: FILE: drivers/usb/ip/usbip_common.c:171:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: drivers/usb/ip/usbip_common.c:175:
+			printk(" %2u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/usb/ip/usbip_common.c:176:
+			printk(" %2u",
+			     le16_to_cpu(udev->ep_in[i]->desc.wMaxPacketSize));

CHECK:CAMELCASE: Avoid CamelCase: <wMaxPacketSize>
#257: FILE: drivers/usb/ip/usbip_common.c:176:
+			     le16_to_cpu(udev->ep_in[i]->desc.wMaxPacketSize));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: drivers/usb/ip/usbip_common.c:178:
+	printk("\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: drivers/usb/ip/usbip_common.c:183:
+			printk(" %2u",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: drivers/usb/ip/usbip_common.c:184:
+			printk(" %2u",
+			     le16_to_cpu(udev->ep_out[i]->desc.wMaxPacketSize));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#267: FILE: drivers/usb/ip/usbip_common.c:186:
+	printk("\n");

WARNING:SPLIT_STRING: quoted string split across lines
#272: FILE: drivers/usb/ip/usbip_common.c:191:
+	dev_dbg(dev, "descriptor %p, config %p, actconfig %p, "
+		"rawdescriptors %p\n", &udev->descriptor, udev->config,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: drivers/usb/ip/usbip_common.c:205:
+		printk("DEVICE");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: drivers/usb/ip/usbip_common.c:208:
+		printk("INTERF");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: drivers/usb/ip/usbip_common.c:211:
+		printk("ENDPOI");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#295: FILE: drivers/usb/ip/usbip_common.c:214:
+		printk("OTHER ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: drivers/usb/ip/usbip_common.c:217:
+		printk("------");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#305: FILE: drivers/usb/ip/usbip_common.c:224:
+		printk("      %s : null pointer\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#305: FILE: drivers/usb/ip/usbip_common.c:224:
+		printk("      %s : null pointer\n", __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#309: FILE: drivers/usb/ip/usbip_common.c:228:
+	printk("       ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/usb/ip/usbip_common.c:229:
+	printk("bRequestType(%02X) ", cmd->bRequestType);

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#310: FILE: drivers/usb/ip/usbip_common.c:229:
+	printk("bRequestType(%02X) ", cmd->bRequestType);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: drivers/usb/ip/usbip_common.c:230:
+	printk("bRequest(%02X) " , cmd->bRequest);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#311: FILE: drivers/usb/ip/usbip_common.c:230:
+	printk("bRequest(%02X) " , cmd->bRequest);
 	                         ^

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#311: FILE: drivers/usb/ip/usbip_common.c:230:
+	printk("bRequest(%02X) " , cmd->bRequest);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#312: FILE: drivers/usb/ip/usbip_common.c:231:
+	printk("wValue(%04X) ", cmd->wValue);

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#312: FILE: drivers/usb/ip/usbip_common.c:231:
+	printk("wValue(%04X) ", cmd->wValue);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#313: FILE: drivers/usb/ip/usbip_common.c:232:
+	printk("wIndex(%04X) ", cmd->wIndex);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#313: FILE: drivers/usb/ip/usbip_common.c:232:
+	printk("wIndex(%04X) ", cmd->wIndex);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: drivers/usb/ip/usbip_common.c:233:
+	printk("wLength(%04X) ", cmd->wLength);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#314: FILE: drivers/usb/ip/usbip_common.c:233:
+	printk("wLength(%04X) ", cmd->wLength);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#316: FILE: drivers/usb/ip/usbip_common.c:235:
+	printk("\n       ");

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: drivers/usb/ip/usbip_common.c:237:
+	if ((cmd->bRequestType & USB_TYPE_MASK) == USB_TYPE_STANDARD) {
[...]
+	} else if ((cmd->bRequestType & USB_TYPE_MASK) == USB_TYPE_CLASS)
[...]
+	else if ((cmd->bRequestType & USB_TYPE_MASK) == USB_TYPE_VENDOR)
[...]
+	else if ((cmd->bRequestType & USB_TYPE_MASK) == USB_TYPE_RESERVED)
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#319: FILE: drivers/usb/ip/usbip_common.c:238:
+		printk("STANDARD ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: drivers/usb/ip/usbip_common.c:241:
+			printk("GET_STATUS");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#325: FILE: drivers/usb/ip/usbip_common.c:244:
+			printk("CLEAR_FEAT");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#328: FILE: drivers/usb/ip/usbip_common.c:247:
+			printk("SET_FEAT  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#331: FILE: drivers/usb/ip/usbip_common.c:250:
+			printk("SET_ADDRRS");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#334: FILE: drivers/usb/ip/usbip_common.c:253:
+			printk("GET_DESCRI");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#337: FILE: drivers/usb/ip/usbip_common.c:256:
+			printk("SET_DESCRI");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: drivers/usb/ip/usbip_common.c:259:
+			printk("GET_CONFIG");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#343: FILE: drivers/usb/ip/usbip_common.c:262:
+			printk("SET_CONFIG");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: drivers/usb/ip/usbip_common.c:265:
+			printk("GET_INTERF");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: drivers/usb/ip/usbip_common.c:268:
+			printk("SET_INTERF");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: drivers/usb/ip/usbip_common.c:271:
+			printk("SYNC_FRAME");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: drivers/usb/ip/usbip_common.c:274:
+			printk("REQ(%02X) ", cmd->bRequest);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#358: FILE: drivers/usb/ip/usbip_common.c:277:
+		printk(" ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#362: FILE: drivers/usb/ip/usbip_common.c:281:
+		printk("CLASS   ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#365: FILE: drivers/usb/ip/usbip_common.c:284:
+		printk("VENDOR  ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#368: FILE: drivers/usb/ip/usbip_common.c:287:
+		printk("RESERVED");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#370: FILE: drivers/usb/ip/usbip_common.c:289:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#378: FILE: drivers/usb/ip/usbip_common.c:297:
+		printk(KERN_DEBUG KBUILD_MODNAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#384: FILE: drivers/usb/ip/usbip_common.c:303:
+		printk(KERN_DEBUG KBUILD_MODNAME

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#406: FILE: drivers/usb/ip/usbip_common.c:325:
+	if (urb->setup_packet && usb_pipetype(urb->pipe) == PIPE_CONTROL)
+			usbip_dump_usb_ctrlrequest(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#407: FILE: drivers/usb/ip/usbip_common.c:326:
+			usbip_dump_usb_ctrlrequest(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: drivers/usb/ip/usbip_common.c:341:
+	udbg("BASE: cmd %u seq %u devid %u dir %u ep %u\n",
+			pdu->base.command,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: drivers/usb/ip/usbip_common.c:350:
+		udbg("CMD_SUBMIT: x_flags %u x_len %u sf %u #p %u iv %u\n",
+				pdu->u.cmd_submit.transfer_flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: drivers/usb/ip/usbip_common.c:361:
+		udbg("RET_SUBMIT: st %d al %u sf %d ec %d\n",
+				pdu->u.ret_submit.status,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#456: FILE: drivers/usb/ip/usbip_common.c:375:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ud->tcp_rx.thread"
#502: FILE: drivers/usb/ip/usbip_common.c:421:
+	if (ud->tcp_rx.thread != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ud->tcp_tx.thread"
#508: FILE: drivers/usb/ip/usbip_common.c:427:
+	if (ud->tcp_tx.thread != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/usb/ip/usbip_common.c:436:
+void usbip_task_init(struct usbip_task *ut, char *name,
+		void (*loop_ops)(struct usbip_task *))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: drivers/usb/ip/usbip_common.c:445:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#546: FILE: drivers/usb/ip/usbip_common.c:465:
+		printk(KERN_ERR "%s: invalid arg, sock %p buff %p size %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: drivers/usb/ip/usbip_common.c:470:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#555: FILE: drivers/usb/ip/usbip_common.c:474:
+				printk(KERN_DEBUG "%-10s:", current->comm);

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#557: FILE: drivers/usb/ip/usbip_common.c:476:
+				printk(KERN_DEBUG "interupt  :");
 				                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#557: FILE: drivers/usb/ip/usbip_common.c:476:
+				printk(KERN_DEBUG "interupt  :");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: drivers/usb/ip/usbip_common.c:478:
+			printk("%s: sending... , sock %p, buf %p, "

WARNING:SPLIT_STRING: quoted string split across lines
#560: FILE: drivers/usb/ip/usbip_common.c:479:
+			printk("%s: sending... , sock %p, buf %p, "
+			       "size %d, msg_flags %d\n", __func__,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#566: FILE: drivers/usb/ip/usbip_common.c:485:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: drivers/usb/ip/usbip_common.c:501:
+			result = kernel_recvmsg(sock, &msg, &iov, 1, size,
+								MSG_WAITALL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usbip_xmit', this function's name, in a string
#585: FILE: drivers/usb/ip/usbip_common.c:504:
+			udbg("usbip_xmit: %s sock %p buf %p size %u ret %d"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#586: FILE: drivers/usb/ip/usbip_common.c:505:
+			udbg("usbip_xmit: %s sock %p buf %p size %u ret %d"
+					" total %d\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: drivers/usb/ip/usbip_common.c:517:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#602: FILE: drivers/usb/ip/usbip_common.c:521:
+				printk(KERN_DEBUG "%-10s:", current->comm);

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#604: FILE: drivers/usb/ip/usbip_common.c:523:
+				printk(KERN_DEBUG "interupt  :");
 				                   ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#604: FILE: drivers/usb/ip/usbip_common.c:523:
+				printk(KERN_DEBUG "interupt  :");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#606: FILE: drivers/usb/ip/usbip_common.c:525:
+			printk("usbip_xmit: receiving....\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usbip_xmit', this function's name, in a string
#606: FILE: drivers/usb/ip/usbip_common.c:525:
+			printk("usbip_xmit: receiving....\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#608: FILE: drivers/usb/ip/usbip_common.c:527:
+			printk("usbip_xmit: received, osize %d ret %d size %d "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usbip_xmit', this function's name, in a string
#608: FILE: drivers/usb/ip/usbip_common.c:527:
+			printk("usbip_xmit: received, osize %d ret %d size %d "

WARNING:SPLIT_STRING: quoted string split across lines
#609: FILE: drivers/usb/ip/usbip_common.c:528:
+			printk("usbip_xmit: received, osize %d ret %d size %d "
+					"total %d\n", osize, result, size,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: drivers/usb/ip/usbip_common.c:533:
+			printk("usbip_xmit: send, total %d\n", total);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usbip_xmit', this function's name, in a string
#614: FILE: drivers/usb/ip/usbip_common.c:533:
+			printk("usbip_xmit: send, total %d\n", total);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#624: FILE: drivers/usb/ip/usbip_common.c:543:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#626: FILE: drivers/usb/ip/usbip_common.c:545:
+#if 0

CHECK:SPACING: No space is necessary after a cast
#636: FILE: drivers/usb/ip/usbip_common.c:555:
+			(char __user *) &val, sizeof(ret));

CHECK:SPACING: No space is necessary after a cast
#651: FILE: drivers/usb/ip/usbip_common.c:570:
+			(char __user *) &val, sizeof(ret));

CHECK:SPACING: No space is necessary after a cast
#666: FILE: drivers/usb/ip/usbip_common.c:585:
+			(char __user *) &val, sizeof(ret));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#686: FILE: drivers/usb/ip/usbip_common.c:605:
+		printk(KERN_ERR "%s: invalid sockfd\n", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#701: FILE: drivers/usb/ip/usbip_common.c:620:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#709: FILE: drivers/usb/ip/usbip_common.c:628:
+{
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: drivers/usb/ip/usbip_common.c:645:
+static void usbip_pack_cmd_submit(struct usbip_header *pdu, struct urb *urb,
+								int pack)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: drivers/usb/ip/usbip_common.c:673:
+static void usbip_pack_ret_submit(struct usbip_header *pdu, struct urb *urb,
+								int pack)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#775: FILE: drivers/usb/ip/usbip_common.c:694:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: drivers/usb/ip/usbip_common.c:696:
+void usbip_pack_pdu(struct usbip_header *pdu, struct urb *urb, int cmd,
+								int pack)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#794: FILE: drivers/usb/ip/usbip_common.c:713:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: drivers/usb/ip/usbip_common.c:732:
+static void correct_endian_cmd_submit(struct usbip_header_cmd_submit *pdu,
+								int send)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/usb/ip/usbip_common.c:752:
+static void correct_endian_ret_submit(struct usbip_header_ret_submit *pdu,
+								int send)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: drivers/usb/ip/usbip_common.c:768:
+static void correct_endian_cmd_unlink(struct usbip_header_cmd_unlink *pdu,
+								int send)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: drivers/usb/ip/usbip_common.c:777:
+static void correct_endian_ret_unlink(struct usbip_header_ret_unlink *pdu,
+								int send)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#899: FILE: drivers/usb/ip/usbip_common.c:818:
+static void usbip_iso_pakcet_correct_endian(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/usb/ip/usbip_common.c:837:
+static void usbip_pack_iso(struct usbip_iso_packet_descriptor *iso,
+		struct usb_iso_packet_descriptor *uiso, int pack)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#933: FILE: drivers/usb/ip/usbip_common.c:852:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: drivers/usb/ip/usbip_common.c:924:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1012: FILE: drivers/usb/ip/usbip_common.c:931:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1055: FILE: drivers/usb/ip/usbip_common.c:974:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#1068: FILE: drivers/usb/ip/usbip_common.c:987:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1070: FILE: drivers/usb/ip/usbip_common.c:989:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: drivers/usb/ip/usbip_common.c:991:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1082: FILE: drivers/usb/ip/usbip_common.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1096: FILE: drivers/usb/ip/usbip_common.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1097: FILE: drivers/usb/ip/usbip_common.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1104: FILE: drivers/usb/ip/usbip_common.h:23:
+
+

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1124: FILE: drivers/usb/ip/usbip_common.h:43:
+#define udbg(fmt, args...)						\
+	do {								\
+		printk(KERN_DEBUG "%-10s:(%s,%d) %s: " fmt,		\
+			(in_interrupt() ? "interrupt" : (current)->comm),\
+			__FILE__, __LINE__, __func__, ##args);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1126: FILE: drivers/usb/ip/usbip_common.h:45:
+		printk(KERN_DEBUG "%-10s:(%s,%d) %s: " fmt,		\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1137: FILE: drivers/usb/ip/usbip_common.h:56:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'flag' may be better as '(flag)' to avoid precedence issues
#1168: FILE: drivers/usb/ip/usbip_common.h:87:
+#define dbg_with_flag(flag, fmt, args...)		\
+	do {						\
+		if (flag & usbip_debug_flag)		\
+			udbg(fmt , ##args);		\
+	} while (0)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1171: FILE: drivers/usb/ip/usbip_common.h:90:
+			udbg(fmt , ##args);		\
 			         ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1175: FILE: drivers/usb/ip/usbip_common.h:94:
+	dbg_with_flag(usbip_debug_sysfs, fmt , ##args)
 	                                     ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1177: FILE: drivers/usb/ip/usbip_common.h:96:
+	dbg_with_flag(usbip_debug_xmit, fmt , ##args)
 	                                    ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1179: FILE: drivers/usb/ip/usbip_common.h:98:
+	dbg_with_flag(usbip_debug_urb, fmt , ##args)
 	                                   ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1181: FILE: drivers/usb/ip/usbip_common.h:100:
+	dbg_with_flag(usbip_debug_eh, fmt , ##args)
 	                                  ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1184: FILE: drivers/usb/ip/usbip_common.h:103:
+	dbg_with_flag(usbip_debug_vhci_rh, fmt , ##args)
 	                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1186: FILE: drivers/usb/ip/usbip_common.h:105:
+	dbg_with_flag(usbip_debug_vhci_hc, fmt , ##args)
 	                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1188: FILE: drivers/usb/ip/usbip_common.h:107:
+	dbg_with_flag(usbip_debug_vhci_rx, fmt , ##args)
 	                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1190: FILE: drivers/usb/ip/usbip_common.h:109:
+	dbg_with_flag(usbip_debug_vhci_tx, fmt , ##args)
 	                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1192: FILE: drivers/usb/ip/usbip_common.h:111:
+	dbg_with_flag(usbip_debug_vhci_sysfs, fmt , ##args)
 	                                          ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1195: FILE: drivers/usb/ip/usbip_common.h:114:
+	dbg_with_flag(usbip_debug_stub_cmp, fmt , ##args)
 	                                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1197: FILE: drivers/usb/ip/usbip_common.h:116:
+	dbg_with_flag(usbip_debug_stub_rx, fmt , ##args)
 	                                       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1199: FILE: drivers/usb/ip/usbip_common.h:118:
+	dbg_with_flag(usbip_debug_stub_tx, fmt , ##args)
 	                                       ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1201: FILE: drivers/usb/ip/usbip_common.h:120:
+
+

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1207: FILE: drivers/usb/ip/usbip_common.h:126:
+#define uerr(fmt, args...)						\
+	do {								\
+		printk(KERN_ERR "%-10s: ***ERROR*** (%s,%d) %s: " fmt,	\
+			(in_interrupt() ? "interrupt" : (current)->comm),\
+			__FILE__, __LINE__, __func__, ##args);	\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1209: FILE: drivers/usb/ip/usbip_common.h:128:
+		printk(KERN_ERR "%-10s: ***ERROR*** (%s,%d) %s: " fmt,	\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1219: FILE: drivers/usb/ip/usbip_common.h:138:
+#define uinfo(fmt, args...)					\
+	do {							\
+		printk(KERN_INFO "usbip: " fmt , ## args);	\
+	} while (0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1221: FILE: drivers/usb/ip/usbip_common.h:140:
+		printk(KERN_INFO "usbip: " fmt , ## args);	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1221: FILE: drivers/usb/ip/usbip_common.h:140:
+		printk(KERN_INFO "usbip: " fmt , ## args);	\
 		                               ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1224: FILE: drivers/usb/ip/usbip_common.h:143:
+
+

WARNING:TYPO_SPELLING: 'sequencial' may be misspelled - perhaps 'sequential'?
#1256: FILE: drivers/usb/ip/usbip_common.h:175:
+	 /* sequencial number which identifies requests.
 	    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1257: FILE: drivers/usb/ip/usbip_common.h:176:
+	  * incremented per connections */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1262: FILE: drivers/usb/ip/usbip_common.h:181:
+	 * this value is ((busnum << 16) | devnum) */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1266: FILE: drivers/usb/ip/usbip_common.h:185:
+#define USBIP_DIR_IN ^I1$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1269: FILE: drivers/usb/ip/usbip_common.h:188:
+} __attribute__ ((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1281: FILE: drivers/usb/ip/usbip_common.h:200:
+	 * or expected reading data size (in) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1291: FILE: drivers/usb/ip/usbip_common.h:210:
+	 * controller of a server side */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1296: FILE: drivers/usb/ip/usbip_common.h:215:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1307: FILE: drivers/usb/ip/usbip_common.h:226:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1314: FILE: drivers/usb/ip/usbip_common.h:233:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1316: FILE: drivers/usb/ip/usbip_common.h:235:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1322: FILE: drivers/usb/ip/usbip_common.h:241:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1324: FILE: drivers/usb/ip/usbip_common.h:243:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1331: FILE: drivers/usb/ip/usbip_common.h:250:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1333: FILE: drivers/usb/ip/usbip_common.h:252:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1346: FILE: drivers/usb/ip/usbip_common.h:265:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1348: FILE: drivers/usb/ip/usbip_common.h:267:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1350: FILE: drivers/usb/ip/usbip_common.h:269:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1353: FILE: drivers/usb/ip/usbip_common.h:272:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1354: FILE: drivers/usb/ip/usbip_common.h:273:
+int usbip_xmit(int, struct socket *, char *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#1354: FILE: drivers/usb/ip/usbip_common.h:273:
+int usbip_xmit(int, struct socket *, char *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1354: FILE: drivers/usb/ip/usbip_common.h:273:
+int usbip_xmit(int, struct socket *, char *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1354: FILE: drivers/usb/ip/usbip_common.h:273:
+int usbip_xmit(int, struct socket *, char *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1354: FILE: drivers/usb/ip/usbip_common.h:273:
+int usbip_xmit(int, struct socket *, char *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#1355: FILE: drivers/usb/ip/usbip_common.h:274:
+int usbip_sendmsg(struct socket *, struct msghdr *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#1355: FILE: drivers/usb/ip/usbip_common.h:274:
+int usbip_sendmsg(struct socket *, struct msghdr *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1355: FILE: drivers/usb/ip/usbip_common.h:274:
+int usbip_sendmsg(struct socket *, struct msghdr *, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1357: FILE: drivers/usb/ip/usbip_common.h:276:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1361: FILE: drivers/usb/ip/usbip_common.h:280:
+	struct usb_device *udev = interface_to_usbdev(interface);
+	return udev->bus->busnum;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1367: FILE: drivers/usb/ip/usbip_common.h:286:
+	struct usb_device *udev = interface_to_usbdev(interface);
+	return udev->devnum;

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#1372: FILE: drivers/usb/ip/usbip_common.h:291:
+	return interface->cur_altsetting->desc.bInterfaceNumber;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1375: FILE: drivers/usb/ip/usbip_common.h:294:
+#if 0

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#1377: FILE: drivers/usb/ip/usbip_common.h:296:
+int setquickack(struct socket *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#1379: FILE: drivers/usb/ip/usbip_common.h:298:
+void setreuse(struct socket *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1388: FILE: drivers/usb/ip/usbip_common.h:307:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct usbip_task *' should also have an identifier name
#1395: FILE: drivers/usb/ip/usbip_common.h:314:
+	void (*loop_ops)(struct usbip_task *);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1434: FILE: drivers/usb/ip/usbip_common.h:353:
+#define USBIP_EH_SHUTDOWN	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1435: FILE: drivers/usb/ip/usbip_common.h:354:
+#define USBIP_EH_BYE		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1436: FILE: drivers/usb/ip/usbip_common.h:355:
+#define USBIP_EH_RESET		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1437: FILE: drivers/usb/ip/usbip_common.h:356:
+#define USBIP_EH_UNUSABLE	(1 << 3)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct usbip_device *' should also have an identifier name
#1455: FILE: drivers/usb/ip/usbip_common.h:374:
+		void (*shutdown)(struct usbip_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct usbip_device *' should also have an identifier name
#1456: FILE: drivers/usb/ip/usbip_common.h:375:
+		void (*reset)(struct usbip_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct usbip_device *' should also have an identifier name
#1457: FILE: drivers/usb/ip/usbip_common.h:376:
+		void (*unusable)(struct usbip_device *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1461: FILE: drivers/usb/ip/usbip_common.h:380:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1462: FILE: drivers/usb/ip/usbip_common.h:381:
+void usbip_task_init(struct usbip_task *ut, char *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1463: FILE: drivers/usb/ip/usbip_common.h:382:
+void usbip_task_init(struct usbip_task *ut, char *,
+				void (*loop_ops)(struct usbip_task *));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: drivers/usb/ip/usbip_common.h:389:
+void usbip_pack_pdu(struct usbip_header *pdu, struct urb *urb, int cmd,
+								int pack);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1479: FILE: drivers/usb/ip/usbip_common.h:398:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1486: FILE: drivers/usb/ip/usbip_common.h:405:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1491: FILE: drivers/usb/ip/usbip_event.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1505: FILE: drivers/usb/ip/usbip_event.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1506: FILE: drivers/usb/ip/usbip_event.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1557: FILE: drivers/usb/ip/usbip_event.c:67:
+		printk(KERN_ERR "%s: unknown event\n", __func__);

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#1570: FILE: drivers/usb/ip/usbip_event.c:80:
+			dbg_eh("signal catched!\n");
 			               ^^^^^^^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#1620: FILE: drivers/usb/ip/usbip_event.c:130:
+	int happend = 0;
 	    ^^^^^^^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#1625: FILE: drivers/usb/ip/usbip_event.c:135:
+		happend = 1;
 		^^^^^^^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#1629: FILE: drivers/usb/ip/usbip_event.c:139:
+	return happend;
 	       ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 143 warnings, 83 checks, 1580 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234081.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
