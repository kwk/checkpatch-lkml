WARNING:BAD_SIGN_OFF: Unexpected content after email: 'Jan Engelhardt <jengelh@gmx.de>, May 01 2006', should be: 'Jan Engelhardt <jengelh@gmx.de> (, May 01 2006)'
#34: 
Signed-off-by: Jan Engelhardt <jengelh@gmx.de>, May 01 2006

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: security/Kconfig:84:
+config SECURITY_MULTIADM
+	tristate "MultiAdmin security module"
+	depends on SECURITY
+	select SECURITY_CAPABILITIES
+	---help---
+        The MultiAdmin security kernel module provides means to have multiple
+        "root" users with unique UIDs. This fixes collation order problems
+        which for example appear with NSCD, allows to have files with
+        determinable owner and allows to track the quota usage for every
+        user, since they now have a unique uid.
+
+        It also implements a "sub-admin", a partially restricted root user
+        (or enhanced normal user, depending on the way you see it), who has
+        full read-only access to most subsystems, and additional write rights
+        only to a limited subset, e.g. writing to files or killing processes
+        only of certain users.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: security/multiadm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: security/multiadm.c:30:
+    !defined(CONFIG_SECURITY_CAPABILITIES_MODULE)$

CHECK:CAMELCASE: Avoid CamelCase: <MultiAdmin>
#121: FILE: security/multiadm.c:32:
+		for MultiAdmin to compile successfully.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Supergid>
#127: FILE: security/multiadm.c:38:
+static gid_t Supergid         = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Subgid>
#128: FILE: security/multiadm.c:39:
+static gid_t Subgid           = -1;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#129: FILE: security/multiadm.c:40:
+static uid_t Superuid_start   = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_start>
#129: FILE: security/multiadm.c:40:
+static uid_t Superuid_start   = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#130: FILE: security/multiadm.c:41:
+static uid_t Superuid_end     = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Superuid_end>
#130: FILE: security/multiadm.c:41:
+static uid_t Superuid_end     = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_start>
#131: FILE: security/multiadm.c:42:
+static uid_t Subuid_start     = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Subuid_end>
#132: FILE: security/multiadm.c:43:
+static uid_t Subuid_end       = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_start>
#133: FILE: security/multiadm.c:44:
+static uid_t Wrtuid_start     = -1;

CHECK:CAMELCASE: Avoid CamelCase: <Wrtuid_end>
#134: FILE: security/multiadm.c:45:
+static uid_t Wrtuid_end       = -1;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#135: FILE: security/multiadm.c:46:
+static unsigned int Secondary = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Secondary>
#135: FILE: security/multiadm.c:46:
+static unsigned int Secondary = 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#137: FILE: security/multiadm.c:48:
+module_param(Supergid,       int, S_IRUSR | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#138: FILE: security/multiadm.c:49:
+module_param(Superuid_start, int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#139: FILE: security/multiadm.c:50:
+module_param(Superuid_end,   int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#140: FILE: security/multiadm.c:51:
+module_param(Subuid_start,   int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#141: FILE: security/multiadm.c:52:
+module_param(Subuid_end,     int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#142: FILE: security/multiadm.c:53:
+module_param(Subgid,         int, S_IRUSR | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#143: FILE: security/multiadm.c:54:
+module_param(Wrtuid_start,   int, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#144: FILE: security/multiadm.c:55:
+module_param(Wrtuid_end,     int, S_IRUGO | S_IWUSR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#160: FILE: security/multiadm.c:71:
+	printk(KERN_WARNING "Changed to superadm\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#162: FILE: security/multiadm.c:73:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#178: FILE: security/multiadm.c:89:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#190: FILE: security/multiadm.c:101:
+	bool r = __is_uid_superadm(u);
+	printk(KERN_WARNING "You are uid_superadm=%d\n", (int)r);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#190: FILE: security/multiadm.c:101:
+	printk(KERN_WARNING "You are uid_superadm=%d\n", (int)r);

ERROR:SPACING: space required before the open parenthesis '('
#243: FILE: security/multiadm.c:154:
+	if(as == -1 || ae == -1 || bs == -1 || be == -1)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#250: FILE: security/multiadm.c:161:
+	if(as == -1 || ae == -1 || bs == -1)

ERROR:SPACING: space required before the open parenthesis '('
#267: FILE: security/multiadm.c:178:
+	if(is_any_superadm(bp->e_uid, bp->e_gid)) {

ERROR:SPACING: space required before the open parenthesis '('
#270: FILE: security/multiadm.c:181:
+	} else if(is_any_superadm(current->uid, current->gid)) {

ERROR:SPACING: space required before the open parenthesis '('
#272: FILE: security/multiadm.c:183:
+	} else if(is_any_subadm(bp->e_uid, bp->e_gid)) {

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: security/multiadm.c:186:
+	} else if(is_any_subadm(current->uid, current->gid)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#295: FILE: security/multiadm.c:206:
+    struct nameidata *nd)
                       ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: security/multiadm.c:206:
+static int mt_inode_permission(struct inode *inode, int mask,
+    struct nameidata *nd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: security/multiadm.c:206:
+    struct nameidata *nd)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op"
#319: FILE: security/multiadm.c:230:
+		if (inode->i_op != NULL && inode->i_op->permission != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_op->permission"
#319: FILE: security/multiadm.c:230:
+		if (inode->i_op != NULL && inode->i_op->permission != NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#321: FILE: security/multiadm.c:232:
+			      mask & ~MAY_APPEND, nd);
 			                          ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: security/multiadm.c:235:
+			ret = generic_permission(inode,
+			      mask & ~MAY_APPEND, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: security/multiadm.c:245:
+static int mt_inode_setattr(struct dentry *dentry, struct vfsmount *vfs,
+    struct iattr *attr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: security/multiadm.c:245:
+    struct iattr *attr)$

WARNING:TYPO_SPELLING: 'belond' may be misspelled - perhaps 'belong'?
#346: FILE: security/multiadm.c:257:
+	 * does belond, _and_ will belong in case of ATTR_UID, to a WRT
 	        ^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: security/multiadm.c:275:
+	int req, grant;
+	if (!is_any_subadm(current->euid, current->egid))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#377: FILE: security/multiadm.c:288:
+	grant = (perm->mode | S_IRUGO) >> 3;

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: security/multiadm.c:289:
+	if(in_group_p(perm->gid) || in_group_p(perm->cgid))

ERROR:SPACING: space required before the open parenthesis '('
#380: FILE: security/multiadm.c:291:
+	if(req & ~grant & 0007)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msq"
#395: FILE: security/multiadm.c:306:
+	if (msq != NULL && msq->q_perm.uid != current->euid &&

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#428: FILE: security/multiadm.c:339:
+	switch(cmd) {
+		case Q_SYNC:
+		case Q_GETFMT:
+		case Q_GETINFO:
+		case Q_GETQUOTA:
+		case Q_XGETQUOTA:
+		case Q_XGETQSTAT:
+		case Q_XQUOTASYNC:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: security/multiadm.c:339:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sem"
#448: FILE: security/multiadm.c:359:
+	if (sem != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "shp"
#467: FILE: security/multiadm.c:378:
+	if (shp != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: security/multiadm.c:390:
+static int mt_task_kill(struct task_struct *task, struct siginfo *si,
+    int sig, u32 secid)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: security/multiadm.c:390:
+    int sig, u32 secid)$

ERROR:SPACING: space required before the open parenthesis '('
#485: FILE: security/multiadm.c:396:
+	if(is_uid_user(task->uid) || is_uid_user(task->suid))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "si"
#494: FILE: security/multiadm.c:405:
+	if (si != NULL && ((long)si == 1 || (long)si == 2 || !SI_FROMUSER(si)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: security/multiadm.c:417:
+static int mt_task_post_setuid(uid_t old_ruid, uid_t old_euid,
+    uid_t old_suid, int flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#506: FILE: security/multiadm.c:417:
+    uid_t old_suid, int flags)$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#513: FILE: security/multiadm.c:424:
+	switch (flags) {
+		case LSM_SETID_ID:
+		case LSM_SETID_RE:
+		case LSM_SETID_RES:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: security/multiadm.c:447:
+static int mt_task_post_setgid(gid_t old_rgid, gid_t old_egid,
+    gid_t old_sgid, unsigned int flags)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: security/multiadm.c:447:
+    gid_t old_sgid, unsigned int flags)$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#538: FILE: security/multiadm.c:449:
+	switch (flags) {
+		case LSM_SETID_ID:
+		case LSM_SETID_RE:
+		case LSM_SETID_RES:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#567: FILE: security/multiadm.c:478:
+	switch (flags) {
+		case LSM_SETID_ID:
[...]
+		case LSM_SETID_RE:
[...]
+		case LSM_SETID_RES:
[...]
+		case LSM_SETID_FS:
[...]
+		default:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: security/multiadm.c:521:
+static int mt_task_setscheduler(struct task_struct *task, int policy,
+    struct sched_param *param)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: security/multiadm.c:521:
+    struct sched_param *param)$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#663: FILE: security/multiadm.c:574:
+	if ((ret = register_security(&mt_secops)) != 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#664: FILE: security/multiadm.c:575:
+		if ((ret2 = mod_reg_security(BASENAME, &mt_secops)) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#665: FILE: security/multiadm.c:576:
+			printk(KERN_WARNING PREFIX "Could not register with "

WARNING:SPLIT_STRING: quoted string split across lines
#666: FILE: security/multiadm.c:577:
+			printk(KERN_WARNING PREFIX "Could not register with "
+			       "kernel: %d, %d\n", ret, ret2);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#673: FILE: security/multiadm.c:584:
+	if (range_intersect(Superuid_start, Superuid_end,
+	    Subuid_start, Subuid_end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#674: FILE: security/multiadm.c:585:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#676: FILE: security/multiadm.c:587:
+		       "Superadmin and Subadmin ranges intersect! "
+		       "Unpredictable behavior may result: some operations "

WARNING:SPLIT_STRING: quoted string split across lines
#677: FILE: security/multiadm.c:588:
+		       "Unpredictable behavior may result: some operations "
+		       "may classify you as a superadmin, others as a "

WARNING:SPLIT_STRING: quoted string split across lines
#678: FILE: security/multiadm.c:589:
+		       "may classify you as a superadmin, others as a "
+		       "subadmin. Security leak: subadmin could possibly "

WARNING:SPLIT_STRING: quoted string split across lines
#679: FILE: security/multiadm.c:590:
+		       "subadmin. Security leak: subadmin could possibly "
+		       "change into superadmin!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: security/multiadm.c:593:
+	if (range_intersect(Superuid_start, Superuid_end,
+	    Wrtuid_start, Wrtuid_end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#683: FILE: security/multiadm.c:594:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#685: FILE: security/multiadm.c:596:
+		       "Superadmin and write-enabled user range intersect! "
+		       "A subadmin could setuid() into a superadmin!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: security/multiadm.c:599:
+	if (range_intersect_wrt(Subuid_start, Subuid_end,
+	    Wrtuid_start, Wrtuid_end))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#689: FILE: security/multiadm.c:600:
+		printk(KERN_WARNING PREFIX

WARNING:SPLIT_STRING: quoted string split across lines
#691: FILE: security/multiadm.c:602:
+		       "Subadmin and write-enabled user range intersect! "
+		       "Subadmins are able to poke on other subadmins!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#693: FILE: security/multiadm.c:604:
+	printk(KERN_INFO "MultiAdmin loaded\n");

ERROR:SPACING: space required before the open parenthesis '('
#701: FILE: security/multiadm.c:612:
+	if(Secondary)

ERROR:SPACING: space required before the open parenthesis '('
#706: FILE: security/multiadm.c:617:
+	if(ret != 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#707: FILE: security/multiadm.c:618:
+		printk(KERN_WARNING PREFIX

WARNING:RETURN_VOID: void function return statements are not generally useful
#711: FILE: security/multiadm.c:622:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 42 warnings, 26 checks, 660 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
