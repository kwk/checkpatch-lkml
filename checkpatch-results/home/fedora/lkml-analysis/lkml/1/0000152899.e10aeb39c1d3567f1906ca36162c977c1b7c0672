WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#130: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#135: FILE: crypto/async_tx/async_pq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'yur' may be misspelled - perhaps 'your'?
#136: FILE: crypto/async_tx/async_pq.c:2:
+ *	Copyright(c) 2007 Yuri Tikhonov <yur@emcraft.com>
   	                                 ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#157: FILE: crypto/async_tx/async_pq.c:23:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: No space is necessary after a cast
#182: FILE: crypto/async_tx/async_pq.c:48:
+	return p == (void *) raid6_empty_zero_page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#214: FILE: crypto/async_tx/async_pq.c:80:
+	if (blocks[src_cnt+1])
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#215: FILE: crypto/async_tx/async_pq.c:81:
+		dma_dest[1] = dma_map_page(dma->dev, blocks[src_cnt+1],
 		                                                   ^

WARNING:TYPO_SPELLING: 'preceeding' may be misspelled - perhaps 'preceding'?
#264: FILE: crypto/async_tx/async_pq.c:130:
+		/* spin wait for the preceeding transactions to complete */
 		                     ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: crypto/async_tx/async_pq.c:159:
+do_sync_pq(struct page **blocks, unsigned char *scfs, unsigned int offset,
+	int src_cnt, size_t len, enum async_tx_flags flags,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#306: FILE: crypto/async_tx/async_pq.c:172:
+	if (blocks[src_cnt+1])
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#307: FILE: crypto/async_tx/async_pq.c:173:
+		q = (u8 *)(page_address(blocks[src_cnt+1]) + offset);
 		                                      ^

CHECK:SPACING: No space is necessary after a cast
#310: FILE: crypto/async_tx/async_pq.c:176:
+			ptrs[z] = (void *) blocks[z];

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#316: FILE: crypto/async_tx/async_pq.c:182:
+		wq = wp = ptrs[0][d];

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#373: FILE: crypto/async_tx/async_pq.c:239:
+		if (!blocks[src_cnt+1]) { /* only p requested, just xor */
 		                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: crypto/async_tx/async_pq.c:250:
+		do_sync_pq(blocks, scfs, offset, src_cnt, len, flags,
+			depend_tx, cb_fn, cb_param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: crypto/async_tx/async_pq.c:263:
+do_sync_gen_syndrome(struct page **blocks, unsigned int offset, int src_cnt,
+	size_t len, enum async_tx_flags flags,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#402: FILE: crypto/async_tx/async_pq.c:268:
+	void *tsrc[src_cnt+2];
 	                  ^

CHECK:SPACING: No space is necessary after a cast
#406: FILE: crypto/async_tx/async_pq.c:272:
+			tsrc[i] = (void *) blocks[i];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#450: FILE: crypto/async_tx/async_pq.c:316:
+	BUG_ON(src_cnt > 255 || (!blocks[src_cnt] && !blocks[src_cnt+1]));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#450: FILE: crypto/async_tx/async_pq.c:316:
+	BUG_ON(src_cnt > 255 || (!blocks[src_cnt] && !blocks[src_cnt+1]));
 	                                                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#471: FILE: crypto/async_tx/async_pq.c:337:
+		if (!blocks[src_cnt+1])
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#472: FILE: crypto/async_tx/async_pq.c:338:
+			blocks[src_cnt+1] = scribble;
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#490: FILE: crypto/async_tx/async_pq.c:356:
+	if (!blocks[src_cnt+1])
 	                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#496: FILE: crypto/async_tx/async_pq.c:362:
+			BUG_ON(is_raid6_zero_block(blocks[i]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#532: FILE: crypto/async_tx/async_pq.c:398:
+	BUG_ON(src_cnt < 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#623: FILE: crypto/async_tx/async_pq.c:489:
+	BUG_ON(src_cnt < 2);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#708: FILE: crypto/async_tx/async_pq.c:574:
+	printk(KERN_ERR "%s: cannot allocate spare!\n", __func__);

WARNING:TYPO_SPELLING: 'yur' may be misspelled - perhaps 'your'?
#722: FILE: crypto/async_tx/async_pq.c:588:
+MODULE_AUTHOR("Yuri Tikhonov <yur@emcraft.com>, Dan Williams <dan.j.williams@intel.com>");
                               ^^^

WARNING:MINMAX: min() should probably be min_t(int, src_cnt, dma->max_xor)
#734: FILE: crypto/async_tx/async_xor.c:68:
+		xor_src_cnt = min(src_cnt, (int)dma->max_xor);

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#830: FILE: include/linux/dmaengine.h:80:
+ *  acknowledges receipt, i.e. has has a chance to establish any dependency

CHECK:BIT_MACRO: Prefer using the BIT macro
#876: FILE: include/linux/dmaengine.h:265:
+	#define DMA_HAS_PQ_CONTINUE (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#884: FILE: include/linux/dmaengine.h:279:
+	struct dma_async_tx_descriptor *(*device_prep_dma_pq)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#891: FILE: include/linux/dmaengine.h:286:
+	struct dma_async_tx_descriptor *(*device_prep_dma_pqzero_sum)(

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152899.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 20 checks, 787 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152899.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
