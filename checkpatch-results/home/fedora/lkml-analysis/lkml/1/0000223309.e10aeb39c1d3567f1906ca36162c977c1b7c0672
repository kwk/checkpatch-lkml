CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#55: FILE: arch/x86/kvm/x86_emulate.c:50:
+#define DstAcc      (4<<1)      /* Destination Accumulator */
                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <DstAcc>
#55: FILE: arch/x86/kvm/x86_emulate.c:50:
+#define DstAcc      (4<<1)      /* Destination Accumulator */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#56: FILE: arch/x86/kvm/x86_emulate.c:51:
+#define DstMask     (7<<1)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <DstMask>
#56: FILE: arch/x86/kvm/x86_emulate.c:51:
+#define DstMask     (7<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#67: FILE: arch/x86/kvm/x86_emulate.c:53:
+#define SrcNone     (0<<4)	/* No source operand. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcNone>
#67: FILE: arch/x86/kvm/x86_emulate.c:53:
+#define SrcNone     (0<<4)	/* No source operand. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#68: FILE: arch/x86/kvm/x86_emulate.c:54:
+#define SrcImplicit (0<<4)	/* Source operand is implicit in the opcode. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcImplicit>
#68: FILE: arch/x86/kvm/x86_emulate.c:54:
+#define SrcImplicit (0<<4)	/* Source operand is implicit in the opcode. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#69: FILE: arch/x86/kvm/x86_emulate.c:55:
+#define SrcReg      (1<<4)	/* Register operand. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcReg>
#69: FILE: arch/x86/kvm/x86_emulate.c:55:
+#define SrcReg      (1<<4)	/* Register operand. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: arch/x86/kvm/x86_emulate.c:55:
+#define SrcReg      (1<<4)	/* Register operand. */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#70: FILE: arch/x86/kvm/x86_emulate.c:56:
+#define SrcMem      (2<<4)	/* Memory operand. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcMem>
#70: FILE: arch/x86/kvm/x86_emulate.c:56:
+#define SrcMem      (2<<4)	/* Memory operand. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: arch/x86/kvm/x86_emulate.c:57:
+#define SrcMem16    (3<<4)	/* Memory operand (16-bit). */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcMem16>
#71: FILE: arch/x86/kvm/x86_emulate.c:57:
+#define SrcMem16    (3<<4)	/* Memory operand (16-bit). */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#72: FILE: arch/x86/kvm/x86_emulate.c:58:
+#define SrcMem32    (4<<4)	/* Memory operand (32-bit). */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcMem32>
#72: FILE: arch/x86/kvm/x86_emulate.c:58:
+#define SrcMem32    (4<<4)	/* Memory operand (32-bit). */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#73: FILE: arch/x86/kvm/x86_emulate.c:59:
+#define SrcImm      (5<<4)	/* Immediate operand. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcImm>
#73: FILE: arch/x86/kvm/x86_emulate.c:59:
+#define SrcImm      (5<<4)	/* Immediate operand. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#74: FILE: arch/x86/kvm/x86_emulate.c:60:
+#define SrcImmByte  (6<<4)	/* 8-bit sign-extended immediate operand. */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcImmByte>
#74: FILE: arch/x86/kvm/x86_emulate.c:60:
+#define SrcImmByte  (6<<4)	/* 8-bit sign-extended immediate operand. */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#75: FILE: arch/x86/kvm/x86_emulate.c:61:
+#define SrcMask     (7<<4)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <SrcMask>
#75: FILE: arch/x86/kvm/x86_emulate.c:61:
+#define SrcMask     (7<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#78: FILE: arch/x86/kvm/x86_emulate.c:63:
+#define ModRM       (1<<7)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <ModRM>
#78: FILE: arch/x86/kvm/x86_emulate.c:63:
+#define ModRM       (1<<7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#78: FILE: arch/x86/kvm/x86_emulate.c:63:
+#define ModRM       (1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#85: FILE: arch/x86/kvm/x86_emulate.c:65:
+#define Mov         (1<<8)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Mov>
#85: FILE: arch/x86/kvm/x86_emulate.c:65:
+#define Mov         (1<<8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#85: FILE: arch/x86/kvm/x86_emulate.c:65:
+#define Mov         (1<<8)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#86: FILE: arch/x86/kvm/x86_emulate.c:66:
+#define BitOp       (1<<9)
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <BitOp>
#86: FILE: arch/x86/kvm/x86_emulate.c:66:
+#define BitOp       (1<<9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#86: FILE: arch/x86/kvm/x86_emulate.c:66:
+#define BitOp       (1<<9)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#87: FILE: arch/x86/kvm/x86_emulate.c:67:
+#define MemAbs      (1<<10)      /* Memory operand is absolute displacement */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <MemAbs>
#87: FILE: arch/x86/kvm/x86_emulate.c:67:
+#define MemAbs      (1<<10)      /* Memory operand is absolute displacement */

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: arch/x86/kvm/x86_emulate.c:67:
+#define MemAbs      (1<<10)      /* Memory operand is absolute displacement */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#88: FILE: arch/x86/kvm/x86_emulate.c:68:
+#define String      (1<<12)     /* String instruction (rep capable) */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <String>
#88: FILE: arch/x86/kvm/x86_emulate.c:68:
+#define String      (1<<12)     /* String instruction (rep capable) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#88: FILE: arch/x86/kvm/x86_emulate.c:68:
+#define String      (1<<12)     /* String instruction (rep capable) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#89: FILE: arch/x86/kvm/x86_emulate.c:69:
+#define Stack       (1<<13)     /* Stack instruction (push/pop) */
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Stack>
#89: FILE: arch/x86/kvm/x86_emulate.c:69:
+#define Stack       (1<<13)     /* Stack instruction (push/pop) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#89: FILE: arch/x86/kvm/x86_emulate.c:69:
+#define Stack       (1<<13)     /* Stack instruction (push/pop) */

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#101: FILE: arch/x86/kvm/x86_emulate.c:1068:
+		switch (c->op_bytes) {
+			case 1:
[...]
+			case 2:
[...]
+			case 4:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223309.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 0 warnings, 41 checks, 65 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223309.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
