WARNING:TYPO_SPELLING: 'superflous' may be misspelled - perhaps 'superfluous'?
#82: FILE: sound/oss/trident.c:75:
+ *      add a missing unlock_set_fmt, remove a superflous lock/unlock pair
                                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#225: FILE: sound/oss/trident.c:830:
+trident_load_channel_registers(struct trident_card *card, u32 * data,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'channel->num == ALI_SPDIF_IN_CHANNEL'
#252: FILE: sound/oss/trident.c:992:
+			if ((channel->num == ALI_SPDIF_IN_CHANNEL) ||
 			    (channel->num == ALI_PCM_IN_CHANNEL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'channel->num == ALI_PCM_IN_CHANNEL'
#252: FILE: sound/oss/trident.c:992:
+			if ((channel->num == ALI_SPDIF_IN_CHANNEL) ||
 			    (channel->num == ALI_PCM_IN_CHANNEL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'card->pci_id == PCI_DEVICE_ID_ALI_5451'
#269: FILE: sound/oss/trident.c:1066:
+	if ((card->pci_id == PCI_DEVICE_ID_ALI_5451) &&
 	    (channel->num == ALI_SPDIF_IN_CHANNEL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'channel->num == ALI_SPDIF_IN_CHANNEL'
#269: FILE: sound/oss/trident.c:1066:
+	if ((card->pci_id == PCI_DEVICE_ID_ALI_5451) &&
 	    (channel->num == ALI_SPDIF_IN_CHANNEL)) {

CHECK:SPACING: No space is necessary after a cast
#280: FILE: sound/oss/trident.c:1184:
+	     dmabuf->count < (signed) dmabuf->dmasize) &&

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#280: FILE: sound/oss/trident.c:1184:
+	     dmabuf->count < (signed) dmabuf->dmasize) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#289: FILE: sound/oss/trident.c:1264:
+	if (!(rawbuf = pci_alloc_consistent(pci_dev, PAGE_SIZE << order,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TYPO_SPELLING: 'manangement' may be misspelled - perhaps 'management'?
#352: FILE: sound/oss/trident.c:1535:
+/* update buffer manangement pointers, especially, */
                  ^^^^^^^^^^^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#386: FILE: sound/oss/trident.c:1611:
+							memset(state->other_states[0]->dmabuf.rawbuf + swptr,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#389: FILE: sound/oss/trident.c:1613:
+							memset(state->other_states[1]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#392: FILE: sound/oss/trident.c:1615:
+							memset(state->other_states[2]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#395: FILE: sound/oss/trident.c:1617:
+							memset(state->other_states[3]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#404: FILE: sound/oss/trident.c:1630:
+						memset(state->other_states[0]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#407: FILE: sound/oss/trident.c:1632:
+						memset(state->other_states[1]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#410: FILE: sound/oss/trident.c:1634:
+						memset(state->other_states[2]->dmabuf.rawbuf + swptr,

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#413: FILE: sound/oss/trident.c:1636:
+						memset(state->other_states[3]->dmabuf.rawbuf + swptr,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#422: FILE: sound/oss/trident.c:1668:
+				printk(KERN_WARNING "trident: spurious channel "

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#458: FILE: sound/oss/trident.c:1804:
+				printk(KERN_WARNING "cyber5050: spurious "

CHECK:SPACING: No space is necessary after a cast
#607: FILE: sound/oss/trident.c:2175:
+			if ((signed) dmabuf->dmasize >= dmabuf->count +

WARNING:UNSPECIFIED_INT: Prefer 'signed int' to bare use of 'signed'
#607: FILE: sound/oss/trident.c:2175:
+			if ((signed) dmabuf->dmasize >= dmabuf->count +

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val == 6'
#643: FILE: sound/oss/trident.c:2441:
+					if (!((file->f_mode & FMODE_WRITE) &&
 					      (val == 6)))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: sound/oss/trident.c:2507:
+		ret = copy_to_user(argp, &abinfo, sizeof (abinfo)) ?

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#661: FILE: sound/oss/trident.c:2527:
+		ret = copy_to_user(argp, &abinfo, sizeof (abinfo)) ?

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#679: FILE: sound/oss/trident.c:2556:
+				if (!dmabuf->ready &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#688: FILE: sound/oss/trident.c:2565:
+				if (!dmabuf->ready &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#697: FILE: sound/oss/trident.c:2592:
+		ret = copy_to_user(argp, &cinfo, sizeof (cinfo)) ?

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#706: FILE: sound/oss/trident.c:2615:
+		ret = copy_to_user(argp, &cinfo, sizeof (cinfo)) ?

CHECK:SPACING: No space is necessary after a cast
#778: FILE: sound/oss/trident.c:3023:
+			outl(((u32) (wcontrol & 0x1eff) | 0x00004000),

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#898: FILE: sound/oss/trident.c:3788:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#910: FILE: sound/oss/trident.c:3815:
+#if 0

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#1054: FILE: sound/oss/trident.c:3989:
+						if (copy_from_user(dmabuf_temp->rawbuf +

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "card->ac97_codec[i]"
#1084: FILE: sound/oss/trident.c:4080:
+			if (card->ac97_codec[i] != NULL &&

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'defered' may be misspelled - perhaps 'deferred'?
#1137: FILE: sound/oss/trident.c:4356:
+/* now, they are defered until "ACCESS" time (in prog_dmabuf called by */
                  ^^^^^^^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1139: FILE: sound/oss/trident.c:4358:
 static int __devinit

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1148: FILE: sound/oss/trident.c:4379:
+		printk(KERN_ERR "trident: architecture does not support"

WARNING:SPLIT_STRING: quoted string split across lines
#1149: FILE: sound/oss/trident.c:4380:
+		printk(KERN_ERR "trident: architecture does not support"
+		       " %s PCI busmaster DMA\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1159: FILE: sound/oss/trident.c:4425:
+	printk(KERN_INFO "trident: %s found at IO 0x%04lx, IRQ %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1179: FILE: sound/oss/trident.c:4485:
+		printk(KERN_ERR "trident: unable to allocate irq %d\n",

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1200: FILE: sound/oss/trident.c:4572:
 static void __devexit

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1207: FILE: sound/oss/trident.c:4637:
+	printk(KERN_INFO "Trident 4DWave/SiS 7018/ALi 5451,Tvia CyberPro "

WARNING:SPLIT_STRING: quoted string split across lines
#1208: FILE: sound/oss/trident.c:4638:
+	printk(KERN_INFO "Trident 4DWave/SiS 7018/ALi 5451,Tvia CyberPro "
+	       "5050 PCI Audio, version " DRIVER_VERSION ", " __TIME__ " "

ERROR:DATE_TIME: Use of the '__TIME__' macro makes the build non-deterministic
#1208: FILE: sound/oss/trident.c:4638:
+	       "5050 PCI Audio, version " DRIVER_VERSION ", " __TIME__ " "

It is generally desirable that building the same source code with
the same set of tools is reproducible, i.e. the output is always
exactly the same.

The kernel does *not* use the ``__DATE__`` and ``__TIME__`` macros,
and enables warnings if they are used as they can lead to
non-deterministic builds.

See: https://www.kernel.org/doc/html/latest/kbuild/reproducible-builds.html#timestamps

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 30 warnings, 9 checks, 1076 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
