WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git cpus4096-for-linus-3

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bus' - possible side-effects?
#481: FILE: arch/ia64/include/asm/topology.h:125:
+#define cpumask_of_pcibus(bus)	(pcibus_to_node(bus) == -1 ?		\
+				 cpu_all_mask :				\
+				 cpumask_from_node(pcibus_to_node(bus)))

WARNING:SPLIT_STRING: quoted string split across lines
#616: FILE: arch/ia64/sn/kernel/sn2/sn_hwperf.c:480:
+				seq_printf(s, "cpu %d %s%c local"
+					   " freq %luMHz, arch ia64",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#621: FILE: arch/ia64/sn/kernel/sn2/sn_hwperf.c:485:
+						   node_distance(

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bus' - possible side-effects?
#711: FILE: arch/powerpc/include/asm/topology.h:49:
+#define cpumask_of_pcibus(bus)	(pcibus_to_node(bus) == -1 ?		\
+				 cpu_all_mask :				\
+				 cpumask_of_node(pcibus_to_node(bus)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#814: FILE: arch/sparc/include/asm/topology_64.h:19:
 }
+#define cpumask_of_node(node) (&numa_cpumask_lookup_table[node])

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1115: FILE: arch/x86/include/asm/topology.h:91:
+extern const cpumask_t *cpumask_of_node(int node);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: arch/x86/include/asm/topology.h:234:
+extern const struct cpumask *cpu_coregroup_mask(int cpu);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1329: FILE: arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c:550:
+		if (!alloc_cpumask_var_node(

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1332: FILE: arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c:553:
+			GFP_KERNEL, cpu_to_node(i))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k7.c:314:
+	if (!alloc_cpumask_var(&acpi_processor_perf->shared_cpu_map,
+								GFP_KERNEL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1414: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.c:819:
+		printk(KERN_ERR PFX

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reboot_cpu < nr_cpu_ids'
#1541: FILE: arch/x86/kernel/reboot.c:504:
+	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&
 		cpu_online(reboot_cpu))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1542: FILE: arch/x86/kernel/reboot.c:505:
+	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&
 		cpu_online(reboot_cpu))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1598: FILE: arch/x86/kernel/setup_percpu.c:178:
+			pr_debug("per cpu data for cpu%d on node%d at %016lx\n",
+				cpu, node, __pa(ptr));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpumask_of_node', this function's name, in a string
#1612: FILE: arch/x86/kernel/setup_percpu.c:337:
+			"cpumask_of_node(%d): no node_to_cpumask_map!\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cpumask_of_node', this function's name, in a string
#1620: FILE: arch/x86/kernel/setup_percpu.c:344:
+			"cpumask_of_node(%d): node > nr_node_ids(%d)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1724: FILE: block/blk.h:103:
+	const struct cpumask *mask = cpu_coregroup_mask(cpu);
+	return cpumask_first(mask);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2101: FILE: drivers/base/cpu.c:136:
+	int n = snprintf(buf, PAGE_SIZE-2, "%d\n", NR_CPUS - 1);
 	                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2101: FILE: drivers/base/cpu.c:136:
+	int n = snprintf(buf, PAGE_SIZE-2, "%d\n", NR_CPUS - 1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2111: FILE: drivers/base/cpu.c:146:
+	int n = 0, len = PAGE_SIZE-2;
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2126: FILE: drivers/base/cpu.c:161:
+		if (nr_cpu_ids == total_cpus-1)
 		                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2130: FILE: drivers/base/cpu.c:165:
+						      nr_cpu_ids, total_cpus-1);
 						                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2250: FILE: fs/seq_file.c:472:
+int seq_bitmap(struct seq_file *m, const unsigned long *bits,
+				   unsigned int nr_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2293: FILE: include/asm-frv/bitops.h:351:
+	unsigned long bit;
+	asm("scan %1,gr0,%0" : "=r"(bit) : "r"(word));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2551: FILE: include/linux/bitops.h:147:
+extern unsigned long find_last_bit(const unsigned long *addr,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bitmap' - possible side-effects?
#2586: FILE: include/linux/cpumask.h:283:
+#define to_cpumask(bitmap)						\
+	((struct cpumask *)(1 ? (bitmap)				\
+			    : (void *)sizeof(__check_is_bitmap(bitmap))))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#2960: FILE: include/linux/rcuclassic.h:62:
+	DECLARE_BITMAP(cpumask, NR_CPUS); /* CPUs that need to switch for */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2976: FILE: include/linux/seq_file.h:54:
+int seq_bitmap(struct seq_file *m, const unsigned long *bits,
+				   unsigned int nr_bits);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3088: FILE: include/linux/tick.h:87:
+extern struct cpumask *tick_get_broadcast_mask(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3092: FILE: include/linux/tick.h:90:
+extern struct cpumask *tick_get_broadcast_oneshot_mask(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3110: FILE: init/main.c:374:
+	nr_cpu_ids = find_last_bit(cpumask_bits(cpu_possible_mask),NR_CPUS) + 1;
 	                                                          ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3110: FILE: init/main.c:374:
+	nr_cpu_ids = find_last_bit(cpumask_bits(cpu_possible_mask),NR_CPUS) + 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3136: FILE: kernel/compat.c:457:
+				    unsigned len, struct cpumask *new_mask)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3401: FILE: kernel/cpu.c:437:
+	if (!alloc_cpumask_var(&frozen_cpus, GFP_KERNEL|__GFP_ZERO))
 	                                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "frozen_cpus"
#3414: FILE: kernel/cpu.c:457:
+	if (frozen_cpus != NULL && cpumask_test_cpu(cpu, frozen_cpus))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#3434: FILE: kernel/cpu.c:495:
+static DECLARE_BITMAP(cpu_possible_bits, CONFIG_NR_CPUS) __read_mostly
+	= CPU_BITS_ALL;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu < 0'
#3616: FILE: kernel/kexec.c:1119:
+	if ((cpu < 0) || (cpu >= nr_cpu_ids))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu >= nr_cpu_ids'
#3616: FILE: kernel/kexec.c:1119:
+	if ((cpu < 0) || (cpu >= nr_cpu_ids))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prof_cpu_mask"
#3673: FILE: kernel/profile.c:394:
+		if (prof_cpu_mask != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prof_cpu_mask"
#3681: FILE: kernel/profile.c:401:
+		if (prof_cpu_mask != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prof_cpu_mask"
#3691: FILE: kernel/profile.c:440:
+	if (!user_mode(regs) && prof_cpu_mask != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3797: FILE: kernel/rcuclassic.c:113:
+		for_each_cpu_and(cpu,
+				  to_cpumask(rcp->cpumask), cpu_online_mask) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3819: FILE: kernel/rcuclassic.c:225:
+	if (cpumask_test_cpu(smp_processor_id(), to_cpumask(rcp->cpumask)) &&
+		delta >= 0) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3853: FILE: kernel/rcupreempt.c:167:
+static DECLARE_BITMAP(rcu_cpu_online_map, NR_CPUS) __read_mostly

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#3854: FILE: kernel/rcupreempt.c:168:
+static DECLARE_BITMAP(rcu_cpu_online_map, NR_CPUS) __read_mostly
+	= CPU_BITS_NONE;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3944: FILE: kernel/rcutorture.c:875:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4102: FILE: kernel/sched.c:7559:
+		cpumask_and(sched_domain_span(sd), cpu_map,
+						   cpu_coregroup_mask(i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4169: FILE: kernel/sched_rt.c:1387:
+		alloc_cpumask_var_node(&per_cpu(local_cpu_mask, i),
+					GFP_KERNEL, cpu_to_node(i));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4208: FILE: kernel/smp.c:226:
+	} else if ((unsigned)cpu < nr_cpu_ids && cpu_online(cpu)) {

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4624: FILE: kernel/time/tick-broadcast.c:32:
+static DECLARE_BITMAP(tick_broadcast_mask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4625: FILE: kernel/time/tick-broadcast.c:33:
+static DECLARE_BITMAP(tmpmask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4803: FILE: kernel/time/tick-broadcast.c:364:
+static DECLARE_BITMAP(tick_broadcast_oneshot_mask, NR_CPUS);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4926: FILE: kernel/time/tick-broadcast.c:550:
+		if (was_periodic && !cpumask_empty(to_cpumask(tmpmask))) {
[...]
 		} else
[...]

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#5153: FILE: kernel/trace/trace.c:92:
+static cpumask_var_t __read_mostly	tracing_buffer_mask;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5220: FILE: kernel/trace/trace.c:2708:
+		if (cpumask_test_cpu(cpu, tracing_cpumask) &&
+				!cpumask_test_cpu(cpu, tracing_cpumask_new)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5226: FILE: kernel/trace/trace.c:2712:
+		if (!cpumask_test_cpu(cpu, tracing_cpumask) &&
+				cpumask_test_cpu(cpu, tracing_cpumask_new)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5317: FILE: kernel/trace/trace.c:3850:
 
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#5575: FILE: lib/Kconfig:173:
+config DISABLE_OBSOLETE_CPUMASK_FUNCTIONS
+       bool "Disable obsolete cpumask functions" if DEBUG_PER_CPU_MAPS
+       depends on EXPERIMENTAL && BROKEN
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:LINE_SPACING: Missing a blank line after declarations
#5635: FILE: lib/cpumask.c:113:
+		unsigned int tail;
+		tail = BITS_TO_LONGS(NR_CPUS - nr_cpumask_bits) * sizeof(long);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5635: FILE: lib/cpumask.c:113:
+		tail = BITS_TO_LONGS(NR_CPUS - nr_cpumask_bits) * sizeof(long);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#5694: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5699: FILE: lib/find_last_bit.c:1:
+/* find_last_bit.c: fallback find next bit implementation

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5725: FILE: lib/find_last_bit.c:27:
+	if (size & (BITS_PER_LONG-1)) {
 	                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5727: FILE: lib/find_last_bit.c:29:
+					 - (size & (BITS_PER_LONG-1)))));
 					                         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5760: FILE: mm/pdflush.c:182:
+		printk(KERN_WARNING "pdflush failed to allocate cpumask\n");

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5825: FILE: mm/slub.c:3454:
+	DECLARE_BITMAP(cpus, NR_CPUS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5856: FILE: mm/slub.c:3643:
+		if (num_online_cpus() > 1 &&
+				!cpumask_empty(to_cpumask(l->cpus)) &&

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186767.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 24 warnings, 42 checks, 4845 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186767.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
