WARNING:MEMORY_BARRIER: memory barrier without comment
#72: FILE: include/asm-x86/system.h:240:
+#define rmb() alternative("lock; addl $0,0(%%esp)", "lfence", X86_FEATURE_XMM2)

WARNING:MEMORY_BARRIER: memory barrier without comment
#73: FILE: include/asm-x86/system.h:241:
+#define wmb() alternative("lock; addl $0,0(%%esp)", "sfence", X86_FEATURE_XMM)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#75: FILE: include/asm-x86/system.h:243:
+#define mb() ^Iasm volatile("mfence":::"memory")$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#75: FILE: include/asm-x86/system.h:243:
+#define mb() 	asm volatile("mfence":::"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#75: FILE: include/asm-x86/system.h:243:
+#define mb() 	asm volatile("mfence":::"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#76: FILE: include/asm-x86/system.h:244:
+#define rmb()	asm volatile("lfence":::"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#76: FILE: include/asm-x86/system.h:244:
+#define rmb()	asm volatile("lfence":::"memory")

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#77: FILE: include/asm-x86/system.h:245:
+#define wmb()	asm volatile("sfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#77: FILE: include/asm-x86/system.h:245:
+#define wmb()	asm volatile("sfence" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#135: FILE: include/asm-x86/system.h:303:
+#define smp_mb()	mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#137: FILE: include/asm-x86/system.h:305:
+# define smp_rmb()	rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#139: FILE: include/asm-x86/system.h:307:
+# define smp_rmb()	barrier()

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#142: FILE: include/asm-x86/system.h:310:
+# define smp_wmb() ^Iwmb()$

WARNING:MEMORY_BARRIER: memory barrier without comment
#142: FILE: include/asm-x86/system.h:310:
+# define smp_wmb() 	wmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#144: FILE: include/asm-x86/system.h:312:
+# define smp_wmb()	barrier()

CHECK:SPACING: No space is necessary after a cast
#147: FILE: include/asm-x86/system.h:315:
+#define set_mb(var, value) do { (void) xchg(&var, value); } while (0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#147: FILE: include/asm-x86/system.h:315:
+#define set_mb(var, value) do { (void) xchg(&var, value); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#147: FILE: include/asm-x86/system.h:315:
+#define set_mb(var, value) do { (void) xchg(&var, value); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:MEMORY_BARRIER: memory barrier without comment
#149: FILE: include/asm-x86/system.h:317:
+#define smp_mb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#150: FILE: include/asm-x86/system.h:318:
+#define smp_rmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#151: FILE: include/asm-x86/system.h:319:
+#define smp_wmb()	barrier()

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: include/asm-x86/system.h:324:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351050.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 16 warnings, 3 checks, 245 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351050.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
