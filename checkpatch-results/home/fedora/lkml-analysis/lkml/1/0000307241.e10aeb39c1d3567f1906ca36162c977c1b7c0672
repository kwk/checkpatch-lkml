CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#93: FILE: drivers/mmc/host/omap.c:152:
+	spinlock_t              slot_lock;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mmc"
#108: FILE: drivers/mmc/host/omap.c:167:
+	while (host->mmc != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->mmc"
#110: FILE: drivers/mmc/host/omap.c:169:
+		wait_event(host->slot_wq, host->mmc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->pdata->switch_slot"
#118: FILE: drivers/mmc/host/omap.c:177:
+		if (host->pdata->switch_slot != NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: drivers/mmc/host/omap.c:184:
+	 * start after writing the CMD register. Sigh. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#140: FILE: drivers/mmc/host/omap.c:199:
+	BUG_ON(slot == NULL || host->mmc == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slot"
#140: FILE: drivers/mmc/host/omap.c:199:
+	BUG_ON(slot == NULL || host->mmc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->mmc"
#140: FILE: drivers/mmc/host/omap.c:199:
+	BUG_ON(slot == NULL || host->mmc == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->slots[i]"
#149: FILE: drivers/mmc/host/omap.c:208:
+		if (host->slots[i] == NULL || host->slots[i]->mrq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->slots[i]->mrq"
#149: FILE: drivers/mmc/host/omap.c:208:
+		if (host->slots[i] == NULL || host->slots[i]->mrq == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: drivers/mmc/host/omap.c:213:
+		BUG_ON(new_slot == host->current_slot);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'mmc_omap_show_slot_name' to 'slot_name_show'
#178: FILE: drivers/mmc/host/omap.c:237:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#180: FILE: drivers/mmc/host/omap.c:239:
+static DEVICE_ATTR(slot_name, S_IRUGO, mmc_omap_show_slot_name, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: drivers/mmc/host/omap.c:855:
+	BUG_ON(host->mrq != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mrq"
#223: FILE: drivers/mmc/host/omap.c:855:
+	BUG_ON(host->mrq != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: drivers/mmc/host/omap.c:864:
+	BUG_ON(irqs_disabled());

CHECK:BRACES: braces {} should be used on all arms of this statement
#241: FILE: drivers/mmc/host/omap.c:874:
+	if (host->mmc != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mmc"
#241: FILE: drivers/mmc/host/omap.c:874:
+	if (host->mmc != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: drivers/mmc/host/omap.c:875:
+		BUG_ON(slot->mrq != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->mrq"
#242: FILE: drivers/mmc/host/omap.c:875:
+		BUG_ON(slot->mrq != NULL);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#246: FILE: drivers/mmc/host/omap.c:879:
+		return;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#246: FILE: drivers/mmc/host/omap.c:879:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->pdata->get_ro"
#294: FILE: drivers/mmc/host/omap.c:1009:
+	if (slot->pdata->get_ro != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mmc"
#313: FILE: drivers/mmc/host/omap.c:1027:
+	if (mmc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->pdata->name"
#354: FILE: drivers/mmc/host/omap.c:1068:
+	if (slot->pdata->name != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: drivers/mmc/host/omap.c:1070:
+		r = device_create_file(&mmc->class_dev,
+					&dev_attr_slot_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->pdata->get_ro"
#361: FILE: drivers/mmc/host/omap.c:1075:
+	if (slot->pdata->get_ro != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: drivers/mmc/host/omap.c:1077:
+		r = device_create_file(&mmc->class_dev,
+					&dev_attr_ro);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->pdata->name"
#378: FILE: drivers/mmc/host/omap.c:1092:
+	if (slot->pdata->name != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slot->pdata->get_ro"
#380: FILE: drivers/mmc/host/omap.c:1094:
+	if (slot->pdata->get_ro != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#397: FILE: drivers/mmc/host/omap.c:1109:
+	if (pdata == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host)...) over kzalloc(sizeof(struct mmc_omap_host)...)
#419: FILE: drivers/mmc/host/omap.c:1128:
+	host = kzalloc(sizeof(struct mmc_omap_host), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host"
#420: FILE: drivers/mmc/host/omap.c:1129:
+	if (host == NULL) {

CHECK:SPACING: No space is necessary after a cast
#449: FILE: drivers/mmc/host/omap.c:1155:
+	host->virt_base = (void __iomem *) IO_ADDRESS(host->phys_base);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdata->init"
#482: FILE: drivers/mmc/host/omap.c:1178:
+	if (pdata->init != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host"
#595: FILE: drivers/mmc/host/omap.c:1250:
+	if (host == NULL || host->suspended)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host"
#627: FILE: drivers/mmc/host/omap.c:1275:
+	if (host == NULL || !host->suspended)

WARNING:LINE_SPACING: Missing a blank line after declarations
#637: FILE: drivers/mmc/host/omap.c:1280:
+		struct mmc_omap_slot *slot;
+		slot = host->slots[i];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000307241.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 28 checks, 587 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000307241.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
