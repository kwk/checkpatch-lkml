WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
The container patches allows administrator to create arbitrary groups of tasks

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: kernel/sched.c:6367:
+static int sched_create_group(struct container_subsys *ss,
+				struct container *cont)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#230: FILE: kernel/sched.c:6389:
+	tg->lrq = kzalloc(sizeof(lrq) * num_possible_cpus(), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#233: FILE: kernel/sched.c:6392:
+	tg->se = kzalloc(sizeof(se) * num_possible_cpus(), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*lrq)...) over kmalloc_node(sizeof(struct lrq)...)
#240: FILE: kernel/sched.c:6399:
+		lrq = kmalloc_node(sizeof(struct lrq), GFP_KERNEL,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/sched.c:6400:
+		lrq = kmalloc_node(sizeof(struct lrq), GFP_KERNEL,
+							 cpu_to_node(i));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*se)...) over kmalloc_node(sizeof(struct sched_entity)...)
#245: FILE: kernel/sched.c:6404:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: kernel/sched.c:6405:
+		se = kmalloc_node(sizeof(struct sched_entity), GFP_KERNEL,
+							cpu_to_node(i));

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#279: FILE: kernel/sched.c:6438:
+	if (tg->lrq)
+		kfree(tg->lrq);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#281: FILE: kernel/sched.c:6440:
+	if (tg->se)
+		kfree(tg->se);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#283: FILE: kernel/sched.c:6442:
+	if (tg)
+		kfree(tg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#288: FILE: kernel/sched.c:6447:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: kernel/sched.c:6450:
+static void sched_destroy_group(struct container_subsys *ss,
+					struct container *cont)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#304: FILE: kernel/sched.c:6463:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: kernel/sched.c:6479:
+static void sched_move_task(struct container_subsys *ss, struct container *cont,
+			struct container *old_cont, struct task_struct *tsk)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#341: FILE: kernel/sched.c:6500:
+	if (on_rq)
+		 activate_task(rq, tsk, 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#350: FILE: kernel/sched.c:6509:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#413: FILE: kernel/sched_fair.c:576:
+static struct sched_entity * pick_next_entity(struct lrq *lrq, u64 now)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#468: FILE: include/linux/sched.h:868:
+	void (*set_curr_task) (struct rq *rq);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 9 checks, 370 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
