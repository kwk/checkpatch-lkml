WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'f1adad78dd2fc8edaa513e0bde92b4c64340245c', maybe rebased or not pulled?
#52: 
> commit f1adad78dd2fc8edaa513e0bde92b4c64340245c

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '5ce74abe788a26698876e66b9c9ce7e7acc25413', maybe rebased or not pulled?
#77: 
>    This reverts commit 5ce74abe788a26698876e66b9c9ce7e7acc25413 (and 

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '8a5bc075b8d8cf7a87b3f08fad2fba0f5d13295e', maybe rebased or not pulled?
#78: 
>    its dependent commit 8a5bc075b8d8cf7a87b3f08fad2fba0f5d13295e), 

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#250: FILE: include/linux/sched.h:532:
+#define is_rt_policy(p)		((p) == SCHED_RR || (p) == SCHED_FIFO)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#279: FILE: include/linux/sysctl.h:168:
+	KERN_SCHED_THROTTLE1=77,  /* int: throttling credit period 1 in secs */
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#280: FILE: include/linux/sysctl.h:169:
+	KERN_SCHED_THROTTLE2=78,  /* int: throttling credit period 2 in secs */
 	                    ^

CHECK:SPACING: No space is necessary after a cast
#294: FILE: kernel/sched.c:95:
+	((unsigned long long)(TIME) * ((unsigned long) (1000000000 / HZ)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'TIME' - possible side-effects?
#296: FILE: kernel/sched.c:97:
+#define NS64_TO_JIFFIES(TIME) \
+	((((unsigned long long)((TIME)) >> BITS_PER_LONG) * \
+	(1 + NS_TO_JIFFIES(~0UL))) + NS_TO_JIFFIES((unsigned long)(TIME)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#322: FILE: kernel/sched.c:186:
+#define INTERACTIVE_LIMIT_EXCEEDED(rq) \
+	((rq)->active->interactive_ticks + (rq)->expired->interactive_ticks > \
+		INTERACTIVE_LIMIT)

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#354: FILE: kernel/sched.c:218:
+int credit_c1 = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#388: FILE: kernel/sched.c:252:
+#define INFO_MASK(x)      ((1U << (x))-1)
                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#410: FILE: kernel/sched.c:274:
+#define set_last_slice(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_LTS_MASK) | (((n) << SLICE_LTS_SHIFT) & SLICE_LTS_MASK)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#419: FILE: kernel/sched.c:283:
+#define set_slice_avg(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | ((((n) / NS_SLEEP_AVG_PCNT) \
+	<< SLICE_AVG_SHIFT) & SLICE_AVG_MASK)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#424: FILE: kernel/sched.c:288:
+#define set_slice_avg_raw(p, n) ((p)->slice_info = (((p)->slice_info & \
+	~SLICE_AVG_MASK) | (((n) << SLICE_AVG_SHIFT) & SLICE_AVG_MASK)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#437: FILE: kernel/sched.c:301:
+#define cpu_this_slice(p) \
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \
+	(unsigned) last_slice(p)))

CHECK:SPACING: No space is necessary after a cast
#438: FILE: kernel/sched.c:302:
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#438: FILE: kernel/sched.c:302:
+	(100 * last_slice(p) / max((unsigned) time_this_slice(p), \

CHECK:SPACING: No space is necessary after a cast
#439: FILE: kernel/sched.c:303:
+	(unsigned) last_slice(p)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#439: FILE: kernel/sched.c:303:
+	(unsigned) last_slice(p)))

CHECK:SPACING: No space is necessary after a cast
#442: FILE: kernel/sched.c:306:
+	(100 * DEF_TIMESLICE / max((unsigned) (rq)->slice_avg, \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#442: FILE: kernel/sched.c:306:
+	(100 * DEF_TIMESLICE / max((unsigned) (rq)->slice_avg, \

CHECK:SPACING: No space is necessary after a cast
#443: FILE: kernel/sched.c:307:
+		(unsigned) DEF_TIMESLICE))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#443: FILE: kernel/sched.c:307:
+		(unsigned) DEF_TIMESLICE))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#446: FILE: kernel/sched.c:310:
+#define task_interactive(p) \
+	((p)->policy == SCHED_INTERACTIVE || task_is_interactive(p))

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: kernel/sched.c:1049:
+^I ^I/*$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#506: FILE: kernel/sched.c:1049:
+^I ^I/*$

CHECK:BRACES: Unbalanced braces around else statement
#656: FILE: kernel/sched.c:3367:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: kernel/sched.c:3417:
+		unsigned long run_time = p->sleep_avg - slice_avg(p);
+		run_time /= w;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#714: FILE: kernel/sched.c:3425:
+	if (task_is_interactive(p))
[...]
+	else if (INTERACTIVE_LIMIT_EXCEEDED(rq) &&
[...]
+	} else if (cpu < cpu_max(p) + PCNT_PER_DYNPRIO) {
[...]
+	} else  if (cpu >= cpu_max(p) + PCNT_PER_DYNPRIO) {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#717: FILE: kernel/sched.c:3428:
+	else if (INTERACTIVE_LIMIT_EXCEEDED(rq) &&
+			cpu_avg - cpu_avg_rq(rq) >= PCNT_PER_DYNPRIO) {

WARNING:TYPO_SPELLING: 'propogated' may be misspelled - perhaps 'propagated'?
#743: FILE: kernel/sched.c:3454:
+	 * propogated interactive task status.  Propogated status is
 	   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Propogated' may be misspelled - perhaps 'Propagated'?
#743: FILE: kernel/sched.c:3454:
+	 * propogated interactive task status.  Propogated status is
 	                                        ^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#802: FILE: kernel/sched.c:3516:
+		if (!TASK_INTERACTIVE(p) || expired_starving(rq) ||
[...]
 		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: kernel/sched.c:3517:
+		if (!TASK_INTERACTIVE(p) || expired_starving(rq) ||
+				credit_exhausted(p, C2)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: kernel/sched.c:3769:
+		if ((throttle && next_interactive && new_prio < next->prio) ||
+			(!next_interactive && new_prio > next->prio))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#968: FILE: kernel/sysctl.c:79:
+extern int credit_c1;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#969: FILE: kernel/sysctl.c:80:
+extern int credit_c2;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#970: FILE: kernel/sysctl.c:81:
+extern int credit_max;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#981: FILE: kernel/sysctl.c:213:
+ * kern_table.  We use these as one-element integer vectors.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#997: FILE: kernel/sysctl.c:628:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#1001: FILE: kernel/sysctl.c:632:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1008: FILE: kernel/sysctl.c:639:
+		.maxlen		= sizeof (int),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#1012: FILE: kernel/sysctl.c:643:
+		.extra1		= &zero,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447339.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 19 warnings, 20 checks, 743 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447339.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
