WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#27: FILE: fs/logfs/memtree.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#28: FILE: fs/logfs/memtree.c:2:
+ * fs/logfs/memtree.c	- Simple In-memory B+Tree

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#38: FILE: fs/logfs/memtree.c:12:
+ * excercise to understand how B+Trees work.  Turned out to be useful as well.
    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#100: FILE: fs/logfs/memtree.c:74:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#108: FILE: fs/logfs/memtree.c:82:
+	printk(KERN_DEBUG"%p ", node);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#108: FILE: fs/logfs/memtree.c:82:
+	printk(KERN_DEBUG"%p ", node);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#110: FILE: fs/logfs/memtree.c:84:
+		printk("(%llx,%p) ", node[i].key, node[i].node);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#111: FILE: fs/logfs/memtree.c:85:
+	printk("\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#115: FILE: fs/logfs/memtree.c:89:
+			__dump_tree(node[i].node, height-1);
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#120: FILE: fs/logfs/memtree.c:94:
+	printk(KERN_DEBUG"%p\n", head->null_ptr);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#120: FILE: fs/logfs/memtree.c:94:
+	printk(KERN_DEBUG"%p\n", head->null_ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: fs/logfs/memtree.c:166:
+static struct btree_node *find_level(struct btree_head *head, u64 key,
+		int level)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i == BTREE_NODES'
#202: FILE: fs/logfs/memtree.c:176:
+		if ((i == BTREE_NODES) || !node[i].key) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: fs/logfs/memtree.c:181:
+		BUG_ON(i < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: fs/logfs/memtree.c:184:
+	BUG_ON(!node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: fs/logfs/memtree.c:193:
+	BUG_ON(!node);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#223: FILE: fs/logfs/memtree.c:197:
+		node->key = head->node[BTREE_NODES-1].key;
 		                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: fs/logfs/memtree.c:206:
+static int btree_insert_level(struct btree_head *head, u64 key, void *ptr,
+		int level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: fs/logfs/memtree.c:211:
+	BUG_ON(!ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: fs/logfs/memtree.c:214:
+		BUG_ON(level != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#254: FILE: fs/logfs/memtree.c:228:
+	BUG_ON(node[pos].key == key);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#261: FILE: fs/logfs/memtree.c:235:
+		BUG_ON(!new);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#264: FILE: fs/logfs/memtree.c:238:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].key, new,
 		                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: fs/logfs/memtree.c:239:
+		err = btree_insert_level(head, node[BTREE_NODES/2 - 1].key, new,
+				level+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#265: FILE: fs/logfs/memtree.c:239:
+				level+1);
 				     ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#273: FILE: fs/logfs/memtree.c:247:
+			node[i].key = node[i + BTREE_NODES/2].key;
 			                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#274: FILE: fs/logfs/memtree.c:248:
+			node[i].node = node[i + BTREE_NODES/2].node;
 			                                   ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#275: FILE: fs/logfs/memtree.c:249:
+			node[i + BTREE_NODES/2].key = 0;
 			                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#276: FILE: fs/logfs/memtree.c:250:
+			node[i + BTREE_NODES/2].node = NULL;
 			                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#280: FILE: fs/logfs/memtree.c:254:
+	BUG_ON(fill >= BTREE_NODES);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#284: FILE: fs/logfs/memtree.c:258:
+		node[i].key = node[i-1].key;
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#285: FILE: fs/logfs/memtree.c:259:
+		node[i].node = node[i-1].node;
 		                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: fs/logfs/memtree.c:269:
+	BUG_ON(!ptr);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level == 1'
#314: FILE: fs/logfs/memtree.c:288:
+	if ((level == 1) && (node[pos].key != key))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'node[pos].key != key'
#314: FILE: fs/logfs/memtree.c:288:
+	if ((level == 1) && (node[pos].key != key))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#319: FILE: fs/logfs/memtree.c:293:
+	for (i = pos; i < fill-1; i++) {
 	                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#320: FILE: fs/logfs/memtree.c:294:
+		node[i].key = node[i+1].key;
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#321: FILE: fs/logfs/memtree.c:295:
+		node[i].node = node[i+1].node;
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#323: FILE: fs/logfs/memtree.c:297:
+	node[fill-1].key = 0;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#324: FILE: fs/logfs/memtree.c:298:
+	node[fill-1].node = NULL;
 	         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#326: FILE: fs/logfs/memtree.c:300:
+	if (fill-1 < BTREE_NODES/2) {
 	        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#326: FILE: fs/logfs/memtree.c:300:
+	if (fill-1 < BTREE_NODES/2) {
 	                        ^

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#333: FILE: fs/logfs/memtree.c:307:
+		 * As you can see, that code is left as an excercise to the
 		                                           ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#344: FILE: fs/logfs/memtree.c:318:
+	if (fill-1 == 0) {
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#345: FILE: fs/logfs/memtree.c:319:
+		btree_remove_level(head, key, level+1);
 		                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#374: FILE: fs/logfs/memtree.c:348:
+	BUG_ON(target == victim);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: fs/logfs/memtree.c:372:
+static void __btree_for_each(struct btree_node *node, long opaque,
+		void (*func)(void *elem, long opaque, u64 key),  int reap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: fs/logfs/memtree.c:380:
+			__btree_for_each(node[i].node, opaque, func, reap,
+					height-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#406: FILE: fs/logfs/memtree.c:380:
+					height-1);
 					      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: fs/logfs/memtree.c:389:
+void btree_visitor(struct btree_head *head, long opaque,
+		void (*func)(void *elem, long opaque, u64 key))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: fs/logfs/memtree.c:398:
+void btree_grim_visitor(struct btree_head *head, long opaque,
+		void (*func)(void *elem, long opaque, u64 key))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 32 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299549.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
