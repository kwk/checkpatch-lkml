WARNING:TYPO_SPELLING: 'Conexant' may be misspelled - perhaps 'Connexant'?
#15: 
Subject: [RFC] [PATCH 1/3] ASoC: Add support for Conexant CX20442-11 voice modem codec
                                                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Conexant' may be misspelled - perhaps 'Connexant'?
#38: 
This patch adds support for Conexant CX20442-11 voice modem codec, suitable
                            ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: sound/soc/codecs/cx20442.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: sound/soc/codecs/cx20442.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#162: FILE: sound/soc/codecs/cx20442.c:22:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: sound/soc/codecs/cx20442.c:99:
+static unsigned int cx20442_read_reg_cache(struct snd_soc_codec *codec,
+							unsigned int reg)

ERROR:SPACING: space required before the open parenthesis '('
#275: FILE: sound/soc/codecs/cx20442.c:135:
+	switch(value & ~(1 << CX20442_AGC)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#293: FILE: sound/soc/codecs/cx20442.c:153:
+}
+static int cx20442_pm_to_v253_vsp(u8 value)

ERROR:SPACING: space required before the open parenthesis '('
#295: FILE: sound/soc/codecs/cx20442.c:155:
+	switch(value & ~(1 << CX20442_AGC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: sound/soc/codecs/cx20442.c:165:
+static int cx20442_write(struct snd_soc_codec *codec, unsigned int reg,
+							unsigned int value)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#325: FILE: sound/soc/codecs/cx20442.c:185:
+	if (vsp < 0 )

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vls == V253_VLS_T'
#328: FILE: sound/soc/codecs/cx20442.c:188:
+	if ((vls == V253_VLS_T) ||
+			(vls == cx20442_pm_to_v253_vls(old))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'vls == cx20442_pm_to_v253_vls(old)'
#328: FILE: sound/soc/codecs/cx20442.c:188:
+	if ((vls == V253_VLS_T) ||
+			(vls == cx20442_pm_to_v253_vls(old))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#328: FILE: sound/soc/codecs/cx20442.c:188:
+	if ((vls == V253_VLS_T) ||
[...]
+	} else if (vsp == cx20442_pm_to_v253_vsp(old))
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#329: FILE: sound/soc/codecs/cx20442.c:189:
+	if ((vls == V253_VLS_T) ||
+			(vls == cx20442_pm_to_v253_vls(old))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: sound/soc/codecs/cx20442.c:197:
+		len = snprintf(buf, ARRAY_SIZE(buf),
+					"at+vls=%d;+vsp=%d\r", vls, vsp);

ERROR:SPACING: space required before the open parenthesis '('
#375: FILE: sound/soc/codecs/cx20442.c:235:
+	if(!cx20442_codec) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#419: FILE: sound/soc/codecs/cx20442.c:279:
+^I.probe = ^Icx20442_codec_probe,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: sound/soc/codecs/cx20442.c:280:
+^I.remove = ^Icx20442_codec_remove,$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cx20442)...) over kzalloc(sizeof(struct cx20442_priv)...)
#487: FILE: sound/soc/codecs/cx20442.c:347:
+	cx20442 = kzalloc(sizeof(struct cx20442_priv), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cx20442"
#488: FILE: sound/soc/codecs/cx20442.c:348:
+	if (cx20442 == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093971.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 6 warnings, 11 checks, 444 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093971.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
