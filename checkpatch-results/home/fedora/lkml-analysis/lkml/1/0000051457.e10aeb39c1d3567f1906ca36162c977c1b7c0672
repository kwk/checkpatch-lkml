CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: drivers/mfd/mc13783-core.c:18:
+#define MC13783_IRQSTAT0_ADCDONEI	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: drivers/mfd/mc13783-core.c:19:
+#define MC13783_IRQSTAT0_ADCBISDONEI	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: drivers/mfd/mc13783-core.c:20:
+#define MC13783_IRQSTAT0_TSI		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#118: FILE: drivers/mfd/mc13783-core.c:21:
+#define MC13783_IRQSTAT0_WHIGHI		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: drivers/mfd/mc13783-core.c:22:
+#define MC13783_IRQSTAT0_WLOWI		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#120: FILE: drivers/mfd/mc13783-core.c:23:
+#define MC13783_IRQSTAT0_CHGDETI	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#121: FILE: drivers/mfd/mc13783-core.c:24:
+#define MC13783_IRQSTAT0_CHGOVI		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: drivers/mfd/mc13783-core.c:25:
+#define MC13783_IRQSTAT0_CHGREVI	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#123: FILE: drivers/mfd/mc13783-core.c:26:
+#define MC13783_IRQSTAT0_CHGSHORTI	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#124: FILE: drivers/mfd/mc13783-core.c:27:
+#define MC13783_IRQSTAT0_CCCVI		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#125: FILE: drivers/mfd/mc13783-core.c:28:
+#define MC13783_IRQSTAT0_CHGCURRI	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#126: FILE: drivers/mfd/mc13783-core.c:29:
+#define MC13783_IRQSTAT0_BPONI		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/mfd/mc13783-core.c:30:
+#define MC13783_IRQSTAT0_LOBATLI	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: drivers/mfd/mc13783-core.c:31:
+#define MC13783_IRQSTAT0_LOBATHI	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: drivers/mfd/mc13783-core.c:32:
+#define MC13783_IRQSTAT0_UDPI		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: drivers/mfd/mc13783-core.c:33:
+#define MC13783_IRQSTAT0_USBI		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#131: FILE: drivers/mfd/mc13783-core.c:34:
+#define MC13783_IRQSTAT0_IDI		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/mfd/mc13783-core.c:35:
+#define MC13783_IRQSTAT0_SE1I		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: drivers/mfd/mc13783-core.c:36:
+#define MC13783_IRQSTAT0_CKDETI		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/mfd/mc13783-core.c:37:
+#define MC13783_IRQSTAT0_UDMI		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#159: FILE: drivers/mfd/mc13783-core.c:62:
+#define MC13783_IRQSTAT1_1HZI		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#160: FILE: drivers/mfd/mc13783-core.c:63:
+#define MC13783_IRQSTAT1_TODAI		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#161: FILE: drivers/mfd/mc13783-core.c:64:
+#define MC13783_IRQSTAT1_ONOFD1I	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#162: FILE: drivers/mfd/mc13783-core.c:65:
+#define MC13783_IRQSTAT1_ONOFD2I	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#163: FILE: drivers/mfd/mc13783-core.c:66:
+#define MC13783_IRQSTAT1_ONOFD3I	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#164: FILE: drivers/mfd/mc13783-core.c:67:
+#define MC13783_IRQSTAT1_SYSRSTI	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#165: FILE: drivers/mfd/mc13783-core.c:68:
+#define MC13783_IRQSTAT1_RTCRSTI	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#166: FILE: drivers/mfd/mc13783-core.c:69:
+#define MC13783_IRQSTAT1_PCI		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#167: FILE: drivers/mfd/mc13783-core.c:70:
+#define MC13783_IRQSTAT1_WARMI		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#168: FILE: drivers/mfd/mc13783-core.c:71:
+#define MC13783_IRQSTAT1_MEMHLDI	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: drivers/mfd/mc13783-core.c:72:
+#define MC13783_IRQSTAT1_PWRRDYI	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#170: FILE: drivers/mfd/mc13783-core.c:73:
+#define MC13783_IRQSTAT1_THWARNLI	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#171: FILE: drivers/mfd/mc13783-core.c:74:
+#define MC13783_IRQSTAT1_THWARNHI	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#172: FILE: drivers/mfd/mc13783-core.c:75:
+#define MC13783_IRQSTAT1_CLKI		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#173: FILE: drivers/mfd/mc13783-core.c:76:
+#define MC13783_IRQSTAT1_SEMAFI		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#174: FILE: drivers/mfd/mc13783-core.c:77:
+#define MC13783_IRQSTAT1_MC2BI		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#175: FILE: drivers/mfd/mc13783-core.c:78:
+#define MC13783_IRQSTAT1_HSDETI		(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#176: FILE: drivers/mfd/mc13783-core.c:79:
+#define MC13783_IRQSTAT1_HSLI		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#177: FILE: drivers/mfd/mc13783-core.c:80:
+#define MC13783_IRQSTAT1_ALSPTHI	(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: drivers/mfd/mc13783-core.c:81:
+#define MC13783_IRQSTAT1_AHSSHORTI	(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: drivers/mfd/mc13783-core.c:106:
+#define MC13783_ADC1_ADEN		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#204: FILE: drivers/mfd/mc13783-core.c:107:
+#define MC13783_ADC1_RAND		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#205: FILE: drivers/mfd/mc13783-core.c:108:
+#define MC13783_ADC1_ADSEL		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#206: FILE: drivers/mfd/mc13783-core.c:109:
+#define MC13783_ADC1_ASC		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#207: FILE: drivers/mfd/mc13783-core.c:110:
+#define MC13783_ADC1_ADTRIGIGN		(1 << 21)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#214: FILE: drivers/mfd/mc13783-core.c:117:
+		dev_dbg(&mc13783->spidev->dev, "wait for %s from %pf\n",
+				__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/mfd/mc13783-core.c:118:
+		dev_dbg(&mc13783->spidev->dev, "wait for %s from %pf\n",
+				__func__, __builtin_return_address(0));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#218: FILE: drivers/mfd/mc13783-core.c:121:
+	}
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/mfd/mc13783-core.c:123:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#231: FILE: drivers/mfd/mc13783-core.c:129:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: drivers/mfd/mc13783-core.c:130:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: drivers/mfd/mc13783-core.c:142:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: drivers/mfd/mc13783-core.c:161:
+	BUG_ON(!ret && m.status);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#307: FILE: drivers/mfd/mc13783-core.c:181:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: drivers/mfd/mc13783-core.c:201:
+	BUG_ON(!ret && m.status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: drivers/mfd/mc13783-core.c:211:
+int mc13783_reg_rmw(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: drivers/mfd/mc13783-core.c:216:
+	BUG_ON(val & ~mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: drivers/mfd/mc13783-core.c:273:
+int mc13783_irq_request_nounmask(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: drivers/mfd/mc13783-core.c:275:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: drivers/mfd/mc13783-core.c:276:
+	BUG_ON(!handler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/mfd/mc13783-core.c:292:
+int mc13783_irq_request(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: drivers/mfd/mc13783-core.c:314:
+	int ret;
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: drivers/mfd/mc13783-core.c:314:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/mfd/mc13783-core.c:317:
+	if (irq < 0 || irq >= MC13783_NUM_IRQ || !mc13783->irqhandler[irq] ||
+			mc13783->irqdata[irq] != dev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: drivers/mfd/mc13783-core.c:341:
+	BUG_ON(irq < 0 || irq >= MC13783_NUM_IRQ);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#553: FILE: drivers/mfd/mc13783-core.c:352:
+static int mc13783_irq_handle(struct mc13783 *mc13783,
+		unsigned int offstat, unsigned int offmask, int baseirq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/mfd/mc13783-core.c:378:
+			dev_err(&mc13783->spidev->dev,
+					"BUG: irq %u but no handler\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/mfd/mc13783-core.c:399:
+	ret = mc13783_irq_handle(mc13783, MC13783_IRQSTAT0,
+			MC13783_IRQMASK0, MC13783_IRQ_ADCDONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/mfd/mc13783-core.c:404:
+	ret = mc13783_irq_handle(mc13783, MC13783_IRQSTAT1,
+			MC13783_IRQMASK1, MC13783_IRQ_1HZ);

CHECK:BIT_MACRO: Prefer using the BIT macro
#639: FILE: drivers/mfd/mc13783-core.c:432:
+#define MC13783_ADC_WORKING (1 << 16)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#653: FILE: drivers/mfd/mc13783-core.c:444:
+	dev_dbg(&mc13783->spidev->dev, "%s\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/mfd/mc13783-core.c:491:
+	mc13783_irq_request(mc13783, MC13783_IRQ_ADCDONE,
+			mc13783_handler_adcdone, __func__, &adcdone_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#745: FILE: drivers/mfd/mc13783-core.c:511:
+			mc13783_reg_read(mc13783,
+					MC13783_REG_ADC_2, &sample[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: drivers/mfd/mc13783-core.c:522:
+static int mc13783_add_subdevice_pdata(struct mc13783 *mc13783,
+		const char *name, void *pdata, size_t pdata_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#797: FILE: drivers/mfd/mc13783-core.c:559:
+	dev_info(&mc13783->spidev->dev,
+			"MC13783 Rev %d.%d FinVer %x detected\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#860: FILE: drivers/mfd/mc13783-core.c:599:
+	ret = request_threaded_irq(spi->irq, NULL, mc13783_irq_thread,
+			IRQF_ONESHOT | IRQF_TRIGGER_HIGH, "mc13783", mc13783);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: drivers/mfd/mc13783-core.c:631:
+		mc13783_add_subdevice_pdata(mc13783, "mc13783-regulator",
+				&regulator_pdata, sizeof(regulator_pdata));

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#937: FILE: drivers/mfd/mc13783-core.c:645:
 static int __devexit mc13783_remove(struct spi_device *spi)

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1027: FILE: include/linux/mfd/mc13783-private.h:32:
+	struct mutex lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1185: FILE: include/linux/mfd/mc13783-private.h:210:
+static inline int mc13783_set_bits(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1188: FILE: include/linux/mfd/mc13783-private.h:213:
+	int ret;
+	mc13783_lock(mc13783);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1279: FILE: include/linux/mfd/mc13783.h:22:
+int mc13783_reg_rmw(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: include/linux/mfd/mc13783.h:25:
+int mc13783_irq_request(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1284: FILE: include/linux/mfd/mc13783.h:27:
+int mc13783_irq_request_nounmask(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1292: FILE: include/linux/mfd/mc13783.h:35:
+#define MC13783_ADC0_ADREFEN		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1293: FILE: include/linux/mfd/mc13783.h:36:
+#define MC13783_ADC0_ADREFMODE		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1294: FILE: include/linux/mfd/mc13783.h:37:
+#define MC13783_ADC0_TSMOD0		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1295: FILE: include/linux/mfd/mc13783.h:38:
+#define MC13783_ADC0_TSMOD1		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1296: FILE: include/linux/mfd/mc13783.h:39:
+#define MC13783_ADC0_TSMOD2		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1297: FILE: include/linux/mfd/mc13783.h:40:
+#define MC13783_ADC0_ADINC1		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1298: FILE: include/linux/mfd/mc13783.h:41:
+#define MC13783_ADC0_ADINC2		(1 << 17)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000051457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 75 checks, 1308 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000051457.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
