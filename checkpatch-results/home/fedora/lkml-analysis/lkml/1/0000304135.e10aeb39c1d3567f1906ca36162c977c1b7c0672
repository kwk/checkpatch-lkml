CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#37: 
        http://rtportal.upv.es/rtmalloc/
^

ERROR:BAD_SIGN_OFF: Unrecognized email address: 'Nitin Gupta <nitingupta910 at gmail dot com>'
#40: 
Signed-off-by: Nitin Gupta <nitingupta910 at gmail dot com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: mm/tlsf.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#104: FILE: mm/tlsf.c:19:
+ * ^I- Nitin Gupta (nitingupta910 at gmail dot com)$

WARNING:SPLIT_STRING: quoted string split across lines
#128: FILE: mm/tlsf.c:43:
+	seq_puts(tlsf, "# name         <init_size> <max_size> <grow_size>"
+			" <used_size> <total_size> <extra>");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: mm/tlsf.c:46:
+	seq_puts(tlsf, " <peak_used> <peak_total> <peak_extra>"
+		" <count_alloc> <count_free> <count_region_alloc>"

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: mm/tlsf.c:47:
+		" <count_alloc> <count_free> <count_region_alloc>"
+		" <count_region_free> <failed_alloc>");

WARNING:LINE_SPACING: Missing a blank line after declarations
#187: FILE: mm/tlsf.c:102:
+	size_t used, total;
+	if (v == SEQ_START_TOKEN) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: mm/tlsf.c:111:
+	seq_printf(tlsf, "%-16s %6zu %6zu %6zu %6zu %6zu %6zu",
+			pool->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: mm/tlsf.c:121:
+	seq_printf(tlsf, " %6zu %6zu %6zu %6zu %6zu %6zu %6zu %6zu",
+			K(pool->peak_used),

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#224: FILE: mm/tlsf.c:139:
+static struct seq_operations tlsfinfo_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: mm/tlsf.c:208:
+static inline struct bhdr *FIND_SUITABLE_BLOCK(struct pool *p, int *fl,
+						int *sl)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: mm/tlsf.c:230:
+static inline void EXTRACT_BLOCK_HDR(struct bhdr *b, struct pool *p, int fl,
+					int sl)

CHECK:BRACES: braces {} should be used on all arms of this statement
#318: FILE: mm/tlsf.c:233:
+	if (p->matrix[fl][sl])
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#320: FILE: mm/tlsf.c:235:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#322: FILE: mm/tlsf.c:237:
+		if(!p->sl_bitmap[fl])

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#323: FILE: mm/tlsf.c:238:
+			clear_bit (fl, (void *)&p->fl_bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: mm/tlsf.c:247:
+static inline void EXTRACT_BLOCK(struct bhdr *b, struct pool *p, int fl,
+					int sl)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#345: FILE: mm/tlsf.c:260:
+				clear_bit (fl, (void *)&p->fl_bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: mm/tlsf.c:284:
+static inline void ADD_REGION(void *region, size_t region_size,
+					struct pool *pool)

WARNING:TYPO_SPELLING: 'inital' may be misspelled - perhaps 'initial'?
#398: FILE: mm/tlsf.c:313:
+ * @init_size: inital pool size (in bytes)
                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: mm/tlsf.c:320:
+void *tlsf_create_memory_pool(const char *name,
+			get_memory get_mem,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#417: FILE: mm/tlsf.c:332:
+^Iif (max_size)^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#418: FILE: mm/tlsf.c:333:
+		BUG_ON(max_size < init_size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pool"
#421: FILE: mm/tlsf.c:336:
+	if (pool == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: mm/tlsf.c:345:
+	pr_info(T "pool: %p, init_size=%zu, max_size=%zu, grow_size=%zu\n",
+			pool, init_size, max_size, grow_size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!region"
#446: FILE: mm/tlsf.c:361:
+	if (region == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: mm/tlsf.c:396:
+	struct pool *pool = (struct pool *)mem_pool;
+	return pool->used_size;

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: mm/tlsf.c:412:
+	struct pool *pool = (struct pool *)mem_pool;
+	total = ROUNDUP_SIZE(sizeof(*pool))

WARNING:TYPO_SPELLING: 'destorying' may be misspelled - perhaps 'destroying'?
#510: FILE: mm/tlsf.c:425:
+ * destorying it.
    ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#512: FILE: mm/tlsf.c:427:
+void tlsf_destroy_memory_pool(void *mem_pool) $

WARNING:TYPO_SPELLING: 'destorying' may be misspelled - perhaps 'destroying'?
#516: FILE: mm/tlsf.c:431:
+	/* User is destorying without ever allocating from this pool */
 	           ^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#526: FILE: mm/tlsf.c:441:
+		pr_warning(T "memory leak in pool: %s (%p). "
+			"%zu bytes still in use.\n",

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#569: FILE: mm/tlsf.c:484:
+	if (!(b = FIND_SUITABLE_BLOCK(pool, &fl, &sl))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#587: FILE: mm/tlsf.c:502:
+		if ((region = pool->get_mem(pool->grow_size)) == NULL)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#599: FILE: mm/tlsf.c:514:
+	if (tmp_size >= sizeof(struct bhdr) ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#653: FILE: mm/tlsf.c:568:
+	if (unlikely(ptr == NULL))

CHECK:SPACING: No space is necessary after a cast
#656: FILE: mm/tlsf.c:571:
+	b = (struct bhdr *) ((char *) ptr - BHDR_OVERHEAD);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'b->prev_hdr == NULL'
#680: FILE: mm/tlsf.c:595:
+	if ((b->prev_hdr == NULL) && ((tmp_b->size & BLOCK_SIZE_MASK) == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b->prev_hdr"
#680: FILE: mm/tlsf.c:595:
+	if ((b->prev_hdr == NULL) && ((tmp_b->size & BLOCK_SIZE_MASK) == 0)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#687: FILE: mm/tlsf.c:602:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#717: FILE: mm/tlsf.c:632:
+	if ((ptr = tlsf_malloc(nelem * elem_size, mem_pool)) == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#730: FILE: mm/tlsf.c:645:
+	proc = create_proc_entry("tlsfinfo", S_IRUGO, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#746: FILE: mm/tlsf.c:661:
+	return;
+}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 19 warnings, 17 checks, 691 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
