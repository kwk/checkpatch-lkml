WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: kernel/async.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#75: FILE: kernel/async.c:2:
+ * kernel/async.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#120: FILE: kernel/async.c:47:
+#include <asm/uaccess.h>

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#281: FILE: kernel/async.c:208:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#302: FILE: kernel/async.c:229:
+asmlinkage __attribute__((weak)) long

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#330: FILE: kernel/async.c:257:
+fastcall __attribute__((weak)) long

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#398: FILE: kernel/async.c:325:
+	switch (atom->flags & SYSLET_STOP_MASK) {
+		case SYSLET_STOP_ON_NONZERO:
[...]
+		case SYSLET_STOP_ON_ZERO:
[...]
+		case SYSLET_STOP_ON_NEGATIVE:
[...]
+		case SYSLET_STOP_ON_NON_POSITIVE:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: kernel/async.c:390:
+	if (__get_user(completion_ring,
+				(u64 __user **)&ahu->completion_ring_ptr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: kernel/async.c:393:
+	if (__get_user(ring_size_bytes,
+			(unsigned long __user *)&ahu->ring_size_bytes))

WARNING:TYPO_SPELLING: 'Asynchron' may be misspelled - perhaps 'Asynchronous'?
#483: FILE: kernel/async.c:410:
+	 * Asynchron threads can complete in parallel so use the
 	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: kernel/async.c:414:
+	if (__get_user(kernel_ring_idx,
+			(unsigned long __user *)&ahu->kernel_ring_idx))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: kernel/async.c:711:
+	pid = create_async_thread(cachemiss_thread, (void *)ah,
+			   CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND |

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#821: FILE: kernel/async.c:748:
+		return ERR_PTR(-ENOSYS);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#901: FILE: kernel/async.c:828:
+		return -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#907: FILE: kernel/async.c:834:
+	if (get_user(kernel_ring_idx,
+			(unsigned long __user *)&ahu->kernel_ring_idx))

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: kernel/async.c:839:
+ ^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#912: FILE: kernel/async.c:839:
+ ^I */$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1000: FILE: kernel/async.c:927:
+	list_for_each_entry(at, &ah->ready_async_threads, entry) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1010: FILE: kernel/async.c:937:
+	list_for_each_entry(at, &ah->busy_async_threads, entry) {
+

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#1026: FILE: kernel/async.c:953:
+	WARN_ON(spin_is_locked(&ah->lock));

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 7 checks, 996 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000462244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
