WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch adds the core of the support for dynamically allocated pageflags.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: include/linux/dyn_pageflags.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#44: FILE: include/linux/dyn_pageflags.h:2:
+ * include/linux/dyn_pageflags.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#64: FILE: include/linux/dyn_pageflags.h:22:
+	spinlock_t struct_lock;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#67: FILE: include/linux/dyn_pageflags.h:25:
+#define DYN_PAGEFLAGS_INIT(name) { \
+	.list = LIST_HEAD_INIT(name.list), \
+	.struct_lock = __SPIN_LOCK_UNLOCKED(name.lock) \
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#72: FILE: include/linux/dyn_pageflags.h:30:
+#define DECLARE_DYN_PAGEFLAGS(name) \
+	struct dyn_pageflags name = DYN_PAGEFLAGS_INIT(name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#72: FILE: include/linux/dyn_pageflags.h:30:
+#define DECLARE_DYN_PAGEFLAGS(name) \
+	struct dyn_pageflags name = DYN_PAGEFLAGS_INIT(name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bitmap' - possible side-effects?
#75: FILE: include/linux/dyn_pageflags.h:33:
+#define BITMAP_FOR_EACH_SET(bitmap, counter) \
+	for (counter = get_next_bit_on(bitmap, max_pfn + 1); counter <= max_pfn; \
+		counter = get_next_bit_on(bitmap, counter))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'counter' - possible side-effects?
#75: FILE: include/linux/dyn_pageflags.h:33:
+#define BITMAP_FOR_EACH_SET(bitmap, counter) \
+	for (counter = get_next_bit_on(bitmap, max_pfn + 1); counter <= max_pfn; \
+		counter = get_next_bit_on(bitmap, counter))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/dyn_pageflags.h:37:
+extern void clear_dyn_pageflags(struct dyn_pageflags *pagemap);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/dyn_pageflags.h:38:
+extern int allocate_dyn_pageflags(struct dyn_pageflags *pagemap, int sparse);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/dyn_pageflags.h:39:
+extern void free_dyn_pageflags(struct dyn_pageflags *pagemap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/dyn_pageflags.h:40:
+extern unsigned long get_next_bit_on(struct dyn_pageflags *bitmap, unsigned long counter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: include/linux/dyn_pageflags.h:42:
+extern int test_dynpageflag(struct dyn_pageflags *bitmap, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/dyn_pageflags.h:48:
+extern void set_dynpageflag(struct dyn_pageflags *bitmap, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/dyn_pageflags.h:49:
+extern void clear_dynpageflag(struct dyn_pageflags *bitmap, struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/dyn_pageflags.h:50:
+extern void dump_pagemap(struct dyn_pageflags *pagemap);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#94: FILE: include/linux/dyn_pageflags.h:52:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/dyn_pageflags.h:59:
+extern void __init dyn_pageflags_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: include/linux/dyn_pageflags.h:60:
+extern void __init dyn_pageflags_use_kzalloc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/dyn_pageflags.h:63:
+extern void dyn_pageflags_hotplug(struct zone *zone);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: mm/dyn_pageflags.c:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#155: FILE: mm/dyn_pageflags.c:5:
+ * $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#165: FILE: mm/dyn_pageflags.c:15:
+ * ^Ipageflags->bitmap[node][zone_id][page_num][ul]$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#193: FILE: mm/dyn_pageflags.c:43:
+int test_dynpageflag(struct dyn_pageflags *bitmap, struct page *page);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#203: FILE: mm/dyn_pageflags.c:53:
+static int dyn_pageflags_debug = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#206: FILE: mm/dyn_pageflags.c:56:
+	do { if (dyn_pageflags_debug) printk(a, ##b); } while(0)

ERROR:SPACING: space required before the open parenthesis '('
#206: FILE: mm/dyn_pageflags.c:56:
+	do { if (dyn_pageflags_debug) printk(a, ##b); } while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#208: FILE: mm/dyn_pageflags.c:58:
+	do { if (dyn_pageflags_debug) dump_pagemap(bitmap); } while(0)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#212: FILE: mm/dyn_pageflags.c:62:
+#else $

CHECK:SPACING: No space is necessary after a cast
#229: FILE: mm/dyn_pageflags.c:79:
+#define PAGENUMBER(zone_offset) ((int) (zone_offset >> (PAGE_SHIFT + 3)))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#229: FILE: mm/dyn_pageflags.c:79:
+#define PAGENUMBER(zone_offset) ((int) (zone_offset >> (PAGE_SHIFT + 3)))

CHECK:SPACING: No space is necessary after a cast
#230: FILE: mm/dyn_pageflags.c:80:
+#define PAGEINDEX(zone_offset) ((int) ((zone_offset & UL_NUM_MASK) >> UL_SHIFT))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#230: FILE: mm/dyn_pageflags.c:80:
+#define PAGEINDEX(zone_offset) ((int) ((zone_offset & UL_NUM_MASK) >> UL_SHIFT))

CHECK:SPACING: No space is necessary after a cast
#231: FILE: mm/dyn_pageflags.c:81:
+#define PAGEBIT(zone_offset) ((int) (zone_offset & BIT_NUM_MASK))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'zone_offset' may be better as '(zone_offset)' to avoid precedence issues
#231: FILE: mm/dyn_pageflags.c:81:
+#define PAGEBIT(zone_offset) ((int) (zone_offset & BIT_NUM_MASK))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone_pfn' - possible side-effects?
#233: FILE: mm/dyn_pageflags.c:83:
+#define PAGE_UL_PTR(bitmap, node, zone_num, zone_pfn) \
+       ((bitmap[node][zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: mm/dyn_pageflags.c:84:
+       ((bitmap[node][zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#234: FILE: mm/dyn_pageflags.c:84:
+       ((bitmap[node][zone_num][PAGENUMBER(zone_pfn)])+PAGEINDEX(zone_pfn))
                                                       ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pageflags' - possible side-effects?
#243: FILE: mm/dyn_pageflags.c:93:
+#define GET_BIT_AND_UL(pageflags, page) \
+	struct zone *zone = page_zone(page); \
+	unsigned long pfn = page_to_pfn(page); \
+	unsigned long zone_pfn = pfn - zone->zone_start_pfn; \
+	int node = page_to_nid(page); \
+	int zone_num = zone_idx(zone); \
+	int pagenum = PAGENUMBER(zone_pfn) + 2; \
+	int page_offset = PAGEINDEX(zone_pfn); \
+	unsigned long **zone_array = ((pageflags)->bitmap && \
+		(pageflags)->bitmap[node] && \
+		(pageflags)->bitmap[node][zone_num]) ? \
+			(pageflags)->bitmap[node][zone_num] : NULL; \
+	unsigned long __maybe_unused *ul = (zone_array && \
+		(unsigned long) zone_array[0] <= pfn && \
+		(unsigned long) zone_array[1] >= (pagenum-2) && \
+		zone_array[pagenum]) ? zone_array[pagenum] + page_offset : \
+		  NULL; \
+	int bit __maybe_unused = PAGEBIT(zone_pfn);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#243: FILE: mm/dyn_pageflags.c:93:
+#define GET_BIT_AND_UL(pageflags, page) \
+	struct zone *zone = page_zone(page); \
+	unsigned long pfn = page_to_pfn(page); \
+	unsigned long zone_pfn = pfn - zone->zone_start_pfn; \
+	int node = page_to_nid(page); \
+	int zone_num = zone_idx(zone); \
+	int pagenum = PAGENUMBER(zone_pfn) + 2; \
+	int page_offset = PAGEINDEX(zone_pfn); \
+	unsigned long **zone_array = ((pageflags)->bitmap && \
+		(pageflags)->bitmap[node] && \
+		(pageflags)->bitmap[node][zone_num]) ? \
+			(pageflags)->bitmap[node][zone_num] : NULL; \
+	unsigned long __maybe_unused *ul = (zone_array && \
+		(unsigned long) zone_array[0] <= pfn && \
+		(unsigned long) zone_array[1] >= (pagenum-2) && \
+		zone_array[pagenum]) ? zone_array[pagenum] + page_offset : \
+		  NULL; \
+	int bit __maybe_unused = PAGEBIT(zone_pfn);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#243: FILE: mm/dyn_pageflags.c:93:
+#define GET_BIT_AND_UL(pageflags, page) \
+	struct zone *zone = page_zone(page); \
+	unsigned long pfn = page_to_pfn(page); \
+	unsigned long zone_pfn = pfn - zone->zone_start_pfn; \
+	int node = page_to_nid(page); \
+	int zone_num = zone_idx(zone); \
+	int pagenum = PAGENUMBER(zone_pfn) + 2; \
+	int page_offset = PAGEINDEX(zone_pfn); \
+	unsigned long **zone_array = ((pageflags)->bitmap && \
+		(pageflags)->bitmap[node] && \
+		(pageflags)->bitmap[node][zone_num]) ? \
+			(pageflags)->bitmap[node][zone_num] : NULL; \
+	unsigned long __maybe_unused *ul = (zone_array && \
+		(unsigned long) zone_array[0] <= pfn && \
+		(unsigned long) zone_array[1] >= (pagenum-2) && \
+		zone_array[pagenum]) ? zone_array[pagenum] + page_offset : \
+		  NULL; \
+	int bit __maybe_unused = PAGEBIT(zone_pfn);

CHECK:SPACING: No space is necessary after a cast
#256: FILE: mm/dyn_pageflags.c:106:
+		(unsigned long) zone_array[0] <= pfn && \

CHECK:SPACING: No space is necessary after a cast
#257: FILE: mm/dyn_pageflags.c:107:
+		(unsigned long) zone_array[1] >= (pagenum-2) && \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#257: FILE: mm/dyn_pageflags.c:107:
+		(unsigned long) zone_array[1] >= (pagenum-2) && \
 		                                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#262: FILE: mm/dyn_pageflags.c:112:
+#define for_each_online_pgdat_zone(pgdat, zone_nr) \
+	for_each_online_pgdat(pgdat) \
+		for (zone_nr = 0; zone_nr < MAX_NR_ZONES; zone_nr++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone_nr' - possible side-effects?
#262: FILE: mm/dyn_pageflags.c:112:
+#define for_each_online_pgdat_zone(pgdat, zone_nr) \
+	for_each_online_pgdat(pgdat) \
+		for (zone_nr = 0; zone_nr < MAX_NR_ZONES; zone_nr++)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#273: FILE: mm/dyn_pageflags.c:123:
+	int i=0;
 	     ^

ERROR:POINTER_LOCATION: "foo **** bar" should be "foo ****bar"
#275: FILE: mm/dyn_pageflags.c:125:
+	unsigned long **** bitmap = pagemap->bitmap;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#277: FILE: mm/dyn_pageflags.c:127:
+	printk(" --- Dump bitmap %p ---\n", pagemap);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: mm/dyn_pageflags.c:129:
+	printk("%p: Sparse flag = %d\n", &pagemap->sparse, pagemap->sparse);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#280: FILE: mm/dyn_pageflags.c:130:
+	printk("%p: Bitmap      = %p\n", &pagemap->bitmap, bitmap);

WARNING:LINE_SPACING: Missing a blank line after declarations
#287: FILE: mm/dyn_pageflags.c:137:
+		int node_id = pgdat->node_id, zone_nr;
+		printk("%p: Node %d => %p\n", &bitmap[node_id], node_id,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#287: FILE: mm/dyn_pageflags.c:137:
+		printk("%p: Node %d => %p\n", &bitmap[node_id], node_id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: mm/dyn_pageflags.c:138:
+		printk("%p: Node %d => %p\n", &bitmap[node_id], node_id,
+				bitmap[node_id]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#292: FILE: mm/dyn_pageflags.c:142:
+			printk("%p:   Zone %d => %p%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: mm/dyn_pageflags.c:143:
+			printk("%p:   Zone %d => %p%s\n",
+					&bitmap[node_id][zone_nr], zone_nr,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#300: FILE: mm/dyn_pageflags.c:150:
+			printk("%p:     Zone start pfn  = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/dyn_pageflags.c:151:
+			printk("%p:     Zone start pfn  = %p\n",
+					&bitmap[node_id][zone_nr][0],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#303: FILE: mm/dyn_pageflags.c:153:
+			printk("%p:     Number of pages = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/dyn_pageflags.c:154:
+			printk("%p:     Number of pages = %p\n",
+					&bitmap[node_id][zone_nr][1],

CHECK:SPACING: No space is necessary after a cast
#306: FILE: mm/dyn_pageflags.c:156:
+			for (i = 2; i < (unsigned long) bitmap[node_id][zone_nr][1] + 2; i++)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#307: FILE: mm/dyn_pageflags.c:157:
+				printk("%p:     Page %2d         = %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: mm/dyn_pageflags.c:158:
+				printk("%p:     Page %2d         = %p\n",
+					&bitmap[node_id][zone_nr][i],

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#314: FILE: mm/dyn_pageflags.c:164:
+	printk(" --- Dump of bitmap %p finishes\n", pagemap);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#326: FILE: mm/dyn_pageflags.c:176:
+	int i=0, zone_idx;
 	     ^

ERROR:POINTER_LOCATION: "foo **** bar" should be "foo ****bar"
#328: FILE: mm/dyn_pageflags.c:178:
+	unsigned long **** bitmap = pagemap->bitmap;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: mm/dyn_pageflags.c:185:
+		if (!populated_zone(zone) ||
+		   (!bitmap[node_id] || !bitmap[node_id][zone_idx]))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/dyn_pageflags.c:191:
+				memset((bitmap[node_id][zone_idx][i]), 0,
+						PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#376: FILE: mm/dyn_pageflags.c:226:
+		return (void *) get_zeroed_page(flags);

CHECK:SPACING: No space is necessary after a cast
#399: FILE: mm/dyn_pageflags.c:249:
+	dyn_allocator = (void *) normal_allocator;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: mm/dyn_pageflags.c:264:
+	printk("Error. Unable to allocate memory for dynamic pageflags.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#419: FILE: mm/dyn_pageflags.c:269:
+static int populate_bitmap_page(struct dyn_pageflags *pageflags,
+			unsigned long **page_ptr)

WARNING:SPLIT_STRING: quoted string split across lines
#437: FILE: mm/dyn_pageflags.c:287:
+		PR_DEBUG("Error. Unable to allocate memory for "
+			"dynamic pageflags page.");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: mm/dyn_pageflags.c:307:
+static int resize_zone_bitmap(struct dyn_pageflags *pagemap, struct zone *zone,
+		unsigned long old_pages, unsigned long new_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#467: FILE: mm/dyn_pageflags.c:317:
+		if (try_alloc_dyn_pageflag_part(new_pages + 2,
+					(void **) &new_ptr))

CHECK:SPACING: No space is necessary after a cast
#467: FILE: mm/dyn_pageflags.c:317:
+					(void **) &new_ptr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#472: FILE: mm/dyn_pageflags.c:322:
+			memcpy(new_ptr + 2 + copy_offset, old_ptr + 2,
+					sizeof(unsigned long) * to_copy);

CHECK:SPACING: No space is necessary after a cast
#474: FILE: mm/dyn_pageflags.c:324:
+		new_ptr[0] = (void *) zone->zone_start_pfn;

CHECK:SPACING: No space is necessary after a cast
#475: FILE: mm/dyn_pageflags.c:325:
+		new_ptr[1] = (void *) new_pages;

CHECK:SPACING: No space is necessary after a cast
#482: FILE: mm/dyn_pageflags.c:332:
+				free_page((unsigned long) old_ptr[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#486: FILE: mm/dyn_pageflags.c:336:
+			if (populate_bitmap_page(NULL,
+					(unsigned long **) &new_ptr[i]))

CHECK:SPACING: No space is necessary after a cast
#486: FILE: mm/dyn_pageflags.c:336:
+					(unsigned long **) &new_ptr[i]))

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#493: FILE: mm/dyn_pageflags.c:343:
+	if (old_ptr)
+		kfree(old_ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: mm/dyn_pageflags.c:361:
+int check_dyn_pageflag_zone(struct dyn_pageflags *pagemap, struct zone *zone,
+		int force_free_all)

CHECK:SPACING: No space is necessary after a cast
#517: FILE: mm/dyn_pageflags.c:367:
+	old_pages = old_ptr ? (unsigned long) old_ptr[1] : 0;

CHECK:SPACING: No space is necessary after a cast
#521: FILE: mm/dyn_pageflags.c:371:
+	    (!old_pages || (unsigned long) old_ptr[0] == zone->zone_start_pfn))

CHECK:SPACING: No space is necessary after a cast
#525: FILE: mm/dyn_pageflags.c:375:
+	    (unsigned long) old_ptr[0] != zone->zone_start_pfn)

CHECK:SPACING: No space is necessary after a cast
#526: FILE: mm/dyn_pageflags.c:376:
+		copy_offset = pages_for_span((unsigned long) old_ptr[0] -

ERROR:TRAILING_WHITESPACE: trailing whitespace
#568: FILE: mm/dyn_pageflags.c:418:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: mm/dyn_pageflags.c:421:
+		check_dyn_pageflag_zone(pagemap,
+				&pgdat->node_zones[zone_idx], 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#626: FILE: mm/dyn_pageflags.c:476:
+	if (!pagemap->bitmap && try_alloc_dyn_pageflag_part((1 << NODES_WIDTH),
+				(void **) &pagemap->bitmap)) {

CHECK:SPACING: No space is necessary after a cast
#626: FILE: mm/dyn_pageflags.c:476:
+				(void **) &pagemap->bitmap)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#634: FILE: mm/dyn_pageflags.c:484:
+		if (!pagemap->bitmap[node_id] &&
[...]
+				result = -ENOMEM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: mm/dyn_pageflags.c:486:
+		    try_alloc_dyn_pageflag_part(MAX_NR_ZONES,
+			(void **) &(pagemap->bitmap)[node_id])) {

CHECK:SPACING: No space is necessary after a cast
#636: FILE: mm/dyn_pageflags.c:486:
+			(void **) &(pagemap->bitmap)[node_id])) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around pagemap->bitmap
#636: FILE: mm/dyn_pageflags.c:486:
+			(void **) &(pagemap->bitmap)[node_id])) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#682: FILE: mm/dyn_pageflags.c:532:
+	if (!ul) {	/* Sparse, hotplugged or unprepared */
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#687: FILE: mm/dyn_pageflags.c:537:
+			printk(KERN_EMERG "Failed to allocate storage in a "

WARNING:SPLIT_STRING: quoted string split across lines
#688: FILE: mm/dyn_pageflags.c:538:
+			printk(KERN_EMERG "Failed to allocate storage in a "
+					"sparse bitmap.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#690: FILE: mm/dyn_pageflags.c:540:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#693: FILE: mm/dyn_pageflags.c:543:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: mm/dyn_pageflags.c:573:
+unsigned long get_next_bit_on(struct dyn_pageflags *pageflags,
+		unsigned long counter)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#745: FILE: mm/dyn_pageflags.c:595:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#751: FILE: mm/dyn_pageflags.c:601:
+			} while(!zone->spanned_pages);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#752: FILE: mm/dyn_pageflags.c:602:
+^I^I^I$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#761: FILE: mm/dyn_pageflags.c:611:
+			ul = pageflags->bitmap[node][zone_num][PAGENUMBER(zone_offset)+2];
 			                                                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#762: FILE: mm/dyn_pageflags.c:612:
+			if (ul)
[...]
+			else {
[...]

ERROR:SPACING: spaces required around that '+=' (ctx:VxW)
#763: FILE: mm/dyn_pageflags.c:613:
+				ul+= PAGEINDEX(zone_offset);
 				  ^

CHECK:BRACES: Unbalanced braces around else statement
#764: FILE: mm/dyn_pageflags.c:614:
+			else {

WARNING:SPLIT_STRING: quoted string split across lines
#766: FILE: mm/dyn_pageflags.c:616:
+				PR_DEBUG("Unallocated page. Skipping from zone"
+					" offset %lu to the start of the next "

WARNING:SPLIT_STRING: quoted string split across lines
#767: FILE: mm/dyn_pageflags.c:617:
+					" offset %lu to the start of the next "
+					"one.\n", zone_offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#769: FILE: mm/dyn_pageflags.c:619:
+				zone_offset = roundup(zone_offset + 1,
+						PAGE_SIZE << 3) - 1;

ERROR:SPACING: space required before the open parenthesis '('
#780: FILE: mm/dyn_pageflags.c:630:
+	} while(!ul || !test_bit(pagebit, ul));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#797: FILE: mm/dyn_pageflags.c:647:
+	printk("Dynpageflags testing...\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#799: FILE: mm/dyn_pageflags.c:649:
+	printk("Set page 1...");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#802: FILE: mm/dyn_pageflags.c:652:
+		printk("Ok.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#804: FILE: mm/dyn_pageflags.c:654:
+		printk("FAILED.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#806: FILE: mm/dyn_pageflags.c:656:
+	printk("Test memory hotplugging #1 ...");

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: mm/dyn_pageflags.c:659:
+		unsigned long orig_size;
+		GET_BIT_AND_UL(&test_map, test_page1);

CHECK:SPACING: No space is necessary after a cast
#810: FILE: mm/dyn_pageflags.c:660:
+		orig_size = (unsigned long) test_map.bitmap[node][zone_num][1];

CHECK:SPACING: No space is necessary after a cast
#817: FILE: mm/dyn_pageflags.c:667:
+		if ((unsigned long) test_map.bitmap[node][zone_num][pagenum + 2] &&

CHECK:SPACING: No space is necessary after a cast
#818: FILE: mm/dyn_pageflags.c:668:
+		    (unsigned long) test_map.bitmap[node][zone_num][pagenum + 2][0] == 2UL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#819: FILE: mm/dyn_pageflags.c:669:
+			printk("Ok.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#821: FILE: mm/dyn_pageflags.c:671:
+			printk("FAILED.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#824: FILE: mm/dyn_pageflags.c:674:
+	printk("Test memory hotplugging #2 ...");

WARNING:LINE_SPACING: Missing a blank line after declarations
#830: FILE: mm/dyn_pageflags.c:680:
+		unsigned long orig_size;
+		GET_BIT_AND_UL(&test_map, test_page1);

CHECK:SPACING: No space is necessary after a cast
#831: FILE: mm/dyn_pageflags.c:681:
+		orig_size = (unsigned long) test_map.bitmap[node][zone_num][1];

CHECK:SPACING: No space is necessary after a cast
#837: FILE: mm/dyn_pageflags.c:687:
+		    (unsigned long) test_map.bitmap[node][zone_num][1] ==

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: mm/dyn_pageflags.c:688:
+^I^I^I^I^I    ^Iorig_size + 2)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#838: FILE: mm/dyn_pageflags.c:688:
+^I^I^I^I^I    ^Iorig_size + 2)$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#839: FILE: mm/dyn_pageflags.c:689:
+			printk("Ok.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#841: FILE: mm/dyn_pageflags.c:691:
+			printk("FAILED ([%d][%d][%d]: %p && %lu == 2UL  && %p == %lu).\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: mm/dyn_pageflags.c:692:
+			printk("FAILED ([%d][%d][%d]: %p && %lu == 2UL  && %p == %lu).\n",
+					node, zone_num, pagenum,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#869: FILE: mm/dyn_pageflags.c:719:
+	printk("Dyn: %d iterations of setting & clearing all %lu flags took %lu jiffies.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: mm/dyn_pageflags.c:720:
+	printk("Dyn: %d iterations of setting & clearing all %lu flags took %lu jiffies.\n",
+			iterations, max_pfn, end - start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#883: FILE: mm/dyn_pageflags.c:733:
+	printk("Real flags: %d iterations of setting & clearing all %lu flags took %lu jiffies.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: mm/dyn_pageflags.c:734:
+	printk("Real flags: %d iterations of setting & clearing all %lu flags took %lu jiffies.\n",
+			iterations, max_pfn, end - start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#897: FILE: mm/dyn_pageflags.c:747:
+	printk("Dyn: %d iterations of setting & clearing all one flag took %lu jiffies.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: mm/dyn_pageflags.c:748:
+	printk("Dyn: %d iterations of setting & clearing all one flag took %lu jiffies.\n",
+			iterations, end - start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#909: FILE: mm/dyn_pageflags.c:759:
+	printk("Real pageflag: %d iterations of setting & clearing all one flag took %lu jiffies.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#910: FILE: mm/dyn_pageflags.c:760:
+	printk("Real pageflag: %d iterations of setting & clearing all one flag took %lu jiffies.\n",
+			iterations, end - start);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#919: FILE: mm/dyn_pageflags.c:769:
+	printk("Dynamic pageflags debugging enabled.\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#924: FILE: mm/dyn_pageflags.c:774:
+__setup("dyn_pageflags_debug", dyn_pageflags_debug_setup);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000401880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 47 warnings, 79 checks, 876 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000401880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
