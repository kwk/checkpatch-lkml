WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
		if (wait_event_interruptible(dev->readq, (__kfifo_len(dev->fifo) !=3D 0)))

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#114: FILE: include/linux/kfifo.h:40:
t gfp_mask,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/kfifo.h:44:
+extern int __kfifo_put_user(struct kfifo *fifo,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#123: FILE: include/linux/kfifo.h:49:
+extern int __kfifo_get_user(struct kfifo *fifo,  unsigned char __user *buf=
                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#123: FILE: include/linux/kfifo.h:49:
+extern int __kfifo_get_user(struct kfifo *fifo,  unsigned char __user *buf=

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: include/linux/kfifo.h:112:
+^I^I^I         unsigned int len)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#151: FILE: include/linux/kfifo.h:119:
+	ret =3D __kfifo_put_user(fifo, buffer, len);
 	    ^

WARNING:TYPO_SPELLING: 'an user' may be misspelled - perhaps 'a user'?
#167: FILE: include/linux/kfifo.h:158:
+ * kfifo_get_user - gets some data from the FIFO an user buffer
                                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#177: FILE: include/linux/kfifo.h:168:
+static inline int kfifo_get_user(struct kfifo *fifo,
+				     unsigned char __user *buffer, unsigned int len)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#184: FILE: include/linux/kfifo.h:175:
+	ret =3D __kfifo_get_user(fifo, buffer, len);
 	    ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#186: FILE: include/linux/kfifo.h:177:
+	if (fifo->in =3D=3D fifo->out)
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#186: FILE: include/linux/kfifo.h:177:
+	if (fifo->in =3D=3D fifo->out)
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#186: FILE: include/linux/kfifo.h:177:
+	if (fifo->in =3D=3D fifo->out)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: include/linux/kfifo.h:178:
+		fifo->in =3D fifo->out =3D 0;
 		         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: include/linux/kfifo.h:178:
+		fifo->in =3D fifo->out =3D 0;
 		                       ^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#207: FILE: kernel/kfifo.c:26:
+#include <asm/uaccess.h>

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#228: FILE: kernel/kfifo.c:166:
+int __kfifo_put_user(struct kfifo *fifo, const unsigned char __user *buffe=
                                                                           ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: kernel/kfifo.c:167:
+^I        unsigned int len)$

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#234: FILE: kernel/kfifo.c:171:
+	len =3D min(len, fifo->size - fifo->in + fifo->out);
 	    ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#241: FILE: kernel/kfifo.c:178:
+	smp_mb();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#244: FILE: kernel/kfifo.c:181:
+	l =3D min(len, fifo->size - (fifo->in & (fifo->size - 1)));
 	  ^

ERROR:SPACING: space required before the open parenthesis '('
#246: FILE: kernel/kfifo.c:183:
+	if(copy_from_user(fifo->buffer + (fifo->in & (fifo->size - 1)),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: kernel/kfifo.c:187:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#260: FILE: kernel/kfifo.c:197:
+	smp_wmb();

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#262: FILE: kernel/kfifo.c:199:
+	fifo->in +=3D len;
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: kernel/kfifo.c:267:
+int __kfifo_get_user(struct kfifo *fifo,
+			 unsigned char __user *buffer, unsigned int len)

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#298: FILE: kernel/kfifo.c:271:
+	len =3D min(len, fifo->in - fifo->out);
 	    ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#305: FILE: kernel/kfifo.c:278:
+	smp_rmb();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#308: FILE: kernel/kfifo.c:281:
+	l =3D min(len, fifo->size - (fifo->out & (fifo->size - 1)));
 	  ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#310: FILE: kernel/kfifo.c:283:
+	if (copy_to_user(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), l=
 	                                                                         ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#310: FILE: kernel/kfifo.c:283:
+	if (copy_to_user(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), l=

WARNING:MEMORY_BARRIER: memory barrier without comment
#323: FILE: kernel/kfifo.c:295:
+	smp_mb();

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#325: FILE: kernel/kfifo.c:297:
+	fifo->out +=3D len;
 	          ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#330: FILE: kernel/kfifo.c:302:
+EXPORT_SYMBOL(__kfifo_get_user);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 8 warnings, 5 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
