WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/11d1578f9454159c43499d1d8fe8a7d728c176a3

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#54: 
[a.p.zijlstra@chello.nl: cleanups and complete the enable/disable code]
              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#78: FILE: arch/x86/kernel/cpu/perf_counter.c:72:
+static const u64 p6_perfmon_event_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/x86/kernel/cpu/perf_counter.c:73:
+  [PERF_COUNT_HW_CPU_CYCLES]^I^I= 0x0079,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: arch/x86/kernel/cpu/perf_counter.c:74:
+  [PERF_COUNT_HW_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: arch/x86/kernel/cpu/perf_counter.c:75:
+  [PERF_COUNT_HW_CACHE_REFERENCES]^I= 0x0000,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: arch/x86/kernel/cpu/perf_counter.c:76:
+  [PERF_COUNT_HW_CACHE_MISSES]^I^I= 0x0000,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: arch/x86/kernel/cpu/perf_counter.c:77:
+  [PERF_COUNT_HW_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: arch/x86/kernel/cpu/perf_counter.c:78:
+  [PERF_COUNT_HW_BRANCH_MISSES]^I^I= 0x00c5,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: arch/x86/kernel/cpu/perf_counter.c:79:
+  [PERF_COUNT_HW_BUS_CYCLES]^I^I= 0x0062,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: arch/x86/kernel/cpu/perf_counter.c:105:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: arch/x86/kernel/cpu/perf_counter.c:1036:
+
+

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#369: FILE: arch/x86/kernel/cpu/perf_counter.c:1573:
+		pr_cont("unsupported p6 CPU model %d ",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 11)
#392: FILE: arch/x86/kernel/cpu/perf_counter.c:1596:
+	if (!cpu_has(&boot_cpu_data, X86_FEATURE_ARCH_PERFMON)) {
[...]
+	   if (boot_cpu_data.x86 == 6) {

WARNING:TABSTOP: Statements should start on a tabstop
#394: FILE: arch/x86/kernel/cpu/perf_counter.c:1598:
+	   if (boot_cpu_data.x86 == 6) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#394: FILE: arch/x86/kernel/cpu/perf_counter.c:1598:
+	   if (boot_cpu_data.x86 == 6) {
[...]
+	   } else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#396: FILE: arch/x86/kernel/cpu/perf_counter.c:1600:
+	   } else {

WARNING:TABSTOP: Statements should start on a tabstop
#398: FILE: arch/x86/kernel/cpu/perf_counter.c:1602:
+	   }

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#412: FILE: tools/perf/perf.h:4:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#414: FILE: tools/perf/perf.h:6:
+#define rmb()		asm volatile("lock; addl $0,0(%%esp)" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#414: FILE: tools/perf/perf.h:6:
+#define rmb()		asm volatile("lock; addl $0,0(%%esp)" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#415: FILE: tools/perf/perf.h:7:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#415: FILE: tools/perf/perf.h:7:
+#define cpu_relax()	asm volatile("rep; nop" ::: "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000097928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 17 warnings, 3 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000097928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
