CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#135: FILE: arch/x86/kernel/cpu/common.c:98:
 };
+static struct cpu_dev *this_cpu __cpuinitdata;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: arch/x86/kernel/cpu/common.c:410:
+	printk("KERNEL supported cpus:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#232: FILE: arch/x86/kernel/cpu/common.c:423:
+			printk("  %s %s\n", cpudev->c_vendor,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: arch/x86/kernel/cpu/common.c:424:
+			printk("  %s %s\n", cpudev->c_vendor,
+				cpudev->c_ident[j]);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#261: FILE: arch/x86/kernel/cpu/common_64.c:81:
 };
+static struct cpu_dev *this_cpu __cpuinitdata;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#340: FILE: arch/x86/kernel/cpu/common_64.c:308:
+	printk("KERNEL supported cpus:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#355: FILE: arch/x86/kernel/cpu/common_64.c:321:
+			printk("  %s %s\n", cpudev->c_vendor,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: arch/x86/kernel/cpu/common_64.c:322:
+			printk("  %s %s\n", cpudev->c_vendor,
+				cpudev->c_ident[j]);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cpu_devX' may be better as '(cpu_devX)' to avoid precedence issues
#376: FILE: arch/x86/kernel/cpu/cpu.h:27:
+#define cpu_dev_register(cpu_devX) \
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \
+	&cpu_devX;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#376: FILE: arch/x86/kernel/cpu/cpu.h:27:
+#define cpu_dev_register(cpu_devX) \
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \
+	&cpu_devX;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:CAMELCASE: Avoid CamelCase: <__cpu_dev_##cpu_devX>
#377: FILE: arch/x86/kernel/cpu/cpu.h:28:
+	static struct cpu_dev *__cpu_dev_##cpu_devX __used \

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".x86_cpu_dev.init") over __attribute__((__section__(".x86_cpu_dev.init")))
#378: FILE: arch/x86/kernel/cpu/cpu.h:29:
+	__attribute__((__section__(".x86_cpu_dev.init"))) = \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232347.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 6 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232347.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
