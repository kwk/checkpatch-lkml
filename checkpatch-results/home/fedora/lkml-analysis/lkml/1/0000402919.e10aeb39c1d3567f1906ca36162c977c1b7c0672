WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
allows the user to determine which tasks are members of a container by reading

WARNING:LINE_SPACING: Missing a blank line after declarations
#58: FILE: include/linux/container.h:151:
+	int task_count;
+	rcu_read_lock();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: kernel/container.c:713:
+static void get_first_subsys(const struct container *cont,
+			struct container_subsys_state **css, int *subsys_id)

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: kernel/container.c:717:
+	const struct container_subsys *test_ss;
+	BUG_ON(list_empty(&root->subsys_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#94: FILE: kernel/container.c:717:
+	BUG_ON(list_empty(&root->subsys_list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#99: FILE: kernel/container.c:722:
+		BUG_ON(!*css);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#131: FILE: kernel/container.c:754:
+			if (retval) {
+				return retval;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#143: FILE: kernel/container.c:766:
+	 * hierarchy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#149: FILE: kernel/container.c:772:
+			 * old to the new */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#158: FILE: kernel/container.c:781:
+		if (ss->attach) {
+			ss->attach(ss, cont, oldcont, tsk);
+		}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#177: FILE: kernel/container.c:800:
+	if (sscanf(pidbuf, "%d", &pid) != 1)
+		return -EIO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#190: FILE: kernel/container.c:813:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#190: FILE: kernel/container.c:813:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->suid'
#190: FILE: kernel/container.c:813:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#191: FILE: kernel/container.c:814:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#227: FILE: kernel/container.c:851:
+	if (buffer == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#284: FILE: kernel/container.c:1104:
+			count ++;
 			      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#386: FILE: kernel/container.c:1206:
+		pidarray = kmalloc(npids * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: kernel/container.c:1247:
+static int container_tasks_release(struct inode *unused_inode,
+					struct file *file)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402919.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 7 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402919.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
