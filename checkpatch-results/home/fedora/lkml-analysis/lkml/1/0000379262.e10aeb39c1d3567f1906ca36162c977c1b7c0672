WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/preempt.h:14:
+  extern void fastcall __add_preempt_count(int val, int exp);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/preempt.h:14:
+  extern void fastcall __add_preempt_count(int val, int exp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/preempt.h:15:
+  extern void fastcall __sub_preempt_count(int val, int exp);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/preempt.h:15:
+  extern void fastcall __sub_preempt_count(int val, int exp);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#93: FILE: include/linux/preempt.h:17:
+# define __add_preempt_count(val, exp)	do { preempt_count() += (val); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#94: FILE: include/linux/preempt.h:18:
+# define __sub_preempt_count(val, exp)	do { preempt_count() -= (val); } while (0)

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#99: FILE: include/linux/preempt.h:21:
+#define add_preempt_count(val) __add_preempt_count(val, 0);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#100: FILE: include/linux/preempt.h:22:
+#define sub_preempt_count(val) __sub_preempt_count(val, 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 2 checks, 82 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379262.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
