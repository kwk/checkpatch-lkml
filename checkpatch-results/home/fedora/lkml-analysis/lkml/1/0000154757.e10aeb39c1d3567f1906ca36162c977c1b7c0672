WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: arch/x86/kernel/cpu/intel.c:1:
+#include <linux/thread_info.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#58: FILE: arch/x86/kernel/cpu/intel.c:12:
+#include <asm/topology.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPLIT_STRING: quoted string split across lines
#142: FILE: arch/x86/kernel/cpu/intel.c:132:
+		pr_info("Pentium Pro with Errata#50 detected. "
+			"Taking evasive action.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 == 6'
#162: FILE: arch/x86/kernel/cpu/intel.c:184:
+	if ((c->x86 == 6) && (c->x86_model == 11) && (size == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model == 11'
#162: FILE: arch/x86/kernel/cpu/intel.c:184:
+	if ((c->x86 == 6) && (c->x86_model == 11) && (size == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == 0'
#162: FILE: arch/x86/kernel/cpu/intel.c:184:
+	if ((c->x86 == 6) && (c->x86_model == 11) && (size == 0))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#189: FILE: arch/x86/kernel/cpu/intel.c:210:
+			printk(KERN_NOTICE "Intel Pentium with F0 0F bug - "

WARNING:SPLIT_STRING: quoted string split across lines
#190: FILE: arch/x86/kernel/cpu/intel.c:211:
+			printk(KERN_NOTICE "Intel Pentium with F0 0F bug - "
+				"workaround enabled.\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#245: FILE: arch/x86/kernel/cpu/intel.c:280:
+	unsigned node;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 4 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
