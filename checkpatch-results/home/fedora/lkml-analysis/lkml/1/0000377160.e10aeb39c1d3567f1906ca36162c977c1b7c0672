WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
The marker activation functions sits in kernel/marker.c. A hash table is used

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#67: FILE: include/asm-generic/vmlinux.lds.h:15:
+	*(.data.init.refok)						\
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#79: FILE: include/asm-generic/vmlinux.lds.h:27:
+		*(__markers_strings)	/* Markers: strings */		\
 		^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/linux/marker.h:1:
+#ifndef _LINUX_MARKER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#128: FILE: include/linux/marker.h:41:
+} __attribute__((aligned(8)));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'format' - possible side-effects?
#139: FILE: include/linux/marker.h:52:
+#define __trace_mark(name, call_data, format, args...)			\
+	do {								\
+		static const char __mstrtab_name_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= #name;						\
+		static const char __mstrtab_format_##name[]		\
+		__attribute__((section("__markers_strings")))		\
+		= format;						\
+		static struct __mark_marker __mark_##name		\
+		__attribute__((section("__markers"))) =			\
+		{ __mstrtab_name_##name, __mstrtab_format_##name,	\
+		0, __mark_empty_function, NULL };			\
+		asm volatile ( "" : : "i" (&__mark_##name));		\
+		__mark_check_format(format, ## args);			\
+		if (unlikely(__mark_##name.state)) {			\
+			preempt_disable();				\
+			(*__mark_##name.call)				\
+				(&__mark_##name, call_data,		\
+				format, ## args);			\
+			preempt_enable();				\
+		}							\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers_strings") over __attribute__((section("__markers_strings")))
#142: FILE: include/linux/marker.h:55:
+		__attribute__((section("__markers_strings")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#143: FILE: include/linux/marker.h:56:
+		__attribute__((section("__markers_strings")))		\
+		= #name;						\

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers_strings") over __attribute__((section("__markers_strings")))
#145: FILE: include/linux/marker.h:58:
+		__attribute__((section("__markers_strings")))		\

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#146: FILE: include/linux/marker.h:59:
+		__attribute__((section("__markers_strings")))		\
+		= format;						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__markers") over __attribute__((section("__markers")))
#148: FILE: include/linux/marker.h:61:
+		__attribute__((section("__markers"))) =			\

ERROR:SPACING: space prohibited after that open parenthesis '('
#151: FILE: include/linux/marker.h:64:
+		asm volatile ( "" : : "i" (&__mark_##name));		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: include/linux/marker.h:75:
+extern void marker_update_probe_range(struct __mark_marker *begin,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: include/linux/marker.h:76:
+extern void marker_update_probe_range(struct __mark_marker *begin,
+	struct __mark_marker *end, struct module *probe_module, int *refcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: include/linux/marker.h:81:
+static inline void marker_update_probe_range(struct __mark_marker *begin,
+	struct __mark_marker *end, struct module *probe_module, int *refcount)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#191: FILE: include/linux/marker.h:104:
+static inline void __attribute__ ((format (printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/marker.h:113:
+extern int marker_probe_register(const char *name, const char *format,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: include/linux/marker.h:114:
+extern int marker_probe_register(const char *name, const char *format,
+				marker_probe_func *probe, void *pdata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/linux/marker.h:119:
+extern void *marker_probe_unregister(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#210: FILE: include/linux/marker.h:123:
+extern void *marker_probe_unregister_pdata(void *pdata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/marker.h:125:
+extern int marker_arm(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#213: FILE: include/linux/marker.h:126:
+extern int marker_disarm(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: include/linux/marker.h:133:
+extern void marker_iter_start(struct marker_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#221: FILE: include/linux/marker.h:134:
+extern void marker_iter_next(struct marker_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: include/linux/marker.h:135:
+extern void marker_iter_stop(struct marker_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#223: FILE: include/linux/marker.h:136:
+extern void marker_iter_reset(struct marker_iter *iter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/marker.h:137:
+extern void *marker_get_pdata(const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/marker.h:138:
+extern int marker_get_iter_range(struct __mark_marker **marker,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: include/linux/marker.h:139:
+extern int marker_get_iter_range(struct __mark_marker **marker,
+	struct __mark_marker *begin,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/module.h:481:
+extern void module_update_markers(struct module *probe_module, int *refcount);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/module.h:482:
+extern int module_get_iter_markers(struct marker_iter *iter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: include/linux/module.h:584:
+static inline void module_update_markers(struct module *probe_module,
+		int *refcount)

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: kernel/module.c:1989:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: kernel/module.c:1989:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: kernel/module.c:1989:
+ ^Imarkersstringsindex = find_sec(hdr, sechdrs, secstrings, "__markers_strings");$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: kernel/module.c:2043:
+		marker_update_probe_range(mod->markers,
+			mod->markers + mod->num_markers, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: kernel/module.c:2670:
+			marker_update_probe_range(mod->markers,
+				mod->markers + mod->num_markers,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: kernel/module.c:2696:
+			found = marker_get_iter_range(&iter->marker,
+				iter_mod->markers,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#385: FILE: kernel/marker.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#399: FILE: kernel/marker.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#400: FILE: kernel/marker.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#412: FILE: kernel/marker.c:28:
+extern struct __mark_marker __stop___markers[];

CHECK:BIT_MACRO: Prefer using the BIT macro
#435: FILE: kernel/marker.c:51:
+#define MARKER_TABLE_SIZE (1 << MARKER_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: kernel/marker.c:76:
+void __mark_empty_function(const struct __mark_marker *mdata,
+	void *private_data,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#477: FILE: kernel/marker.c:93:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: kernel/marker.c:106:
+static int add_marker(const char *name,
+	const char *format, marker_probe_func *probe, void *pdata)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#497: FILE: kernel/marker.c:113:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#501: FILE: kernel/marker.c:117:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#504: FILE: kernel/marker.c:120:
+			printk(KERN_NOTICE

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct marker_entry)...)
#514: FILE: kernel/marker.c:130:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: kernel/marker.c:131:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,
+			GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#519: FILE: kernel/marker.c:135:
+	if (format) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: kernel/marker.c:139:
+		trace_mark(core_marker_format, "name %s format %s",
+				e->name, e->format);

CHECK:BRACES: Unbalanced braces around else statement
#524: FILE: kernel/marker.c:140:
+	} else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#545: FILE: kernel/marker.c:161:
+	u32 hash = jhash(name, len-1, 0);
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#547: FILE: kernel/marker.c:163:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct marker_entry)...)
#571: FILE: kernel/marker.c:187:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#572: FILE: kernel/marker.c:188:
+	e = kmalloc(sizeof(struct marker_entry) + name_len + format_len,
+			GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#586: FILE: kernel/marker.c:202:
+	trace_mark(core_marker_format, "name %s format %s",
+			e->name, e->format);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: kernel/marker.c:210:
+static int set_marker(struct marker_entry **entry,
+			struct __mark_marker *elem)

WARNING:LINE_SPACING: Missing a blank line after declarations
#597: FILE: kernel/marker.c:213:
+	int ret;
+	WARN_ON(strcmp((*entry)->name, elem->name) != 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#601: FILE: kernel/marker.c:217:
+			printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: kernel/marker.c:219:
+				"Format mismatch for probe %s "
+				"(%s), marker (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#647: FILE: kernel/marker.c:263:
+void marker_update_probe_range(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: kernel/marker.c:303:
+	marker_update_probe_range(__start___markers,
+			__stop___markers, probe_module, &refcount);

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#691: FILE: kernel/marker.c:307:
+		synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: kernel/marker.c:324:
+int marker_probe_register(const char *name, const char *format,
+			marker_probe_func *probe, void *pdata)

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#720: FILE: kernel/marker.c:336:
+		synchronize_sched();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#824: FILE: kernel/marker.c:440:
+	struct marker_entry * entry;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#857: FILE: kernel/marker.c:473:
+	struct marker_entry * entry;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#901: FILE: kernel/marker.c:517:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#904: FILE: kernel/marker.c:520:
+	head = &marker_table[hash & ((1 << MARKER_HASH_BITS)-1)];
 	                                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#925: FILE: kernel/marker.c:541:
+int marker_get_iter_range(struct __mark_marker **marker,
+	struct __mark_marker *begin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: kernel/marker.c:566:
+		found = marker_get_iter_range(&iter->marker,
+				__start___markers, __stop___markers);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000377160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 17 warnings, 51 checks, 901 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000377160.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
