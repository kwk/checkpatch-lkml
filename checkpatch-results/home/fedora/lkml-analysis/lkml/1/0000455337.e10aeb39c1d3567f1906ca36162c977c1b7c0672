WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
A novel design which incorporates a foreground-background descending priority

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#176: 
and the allocation of slots is dependant on nice level. In the
                               ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#413: FILE: kernel/sched.c:89:
+#define SCHED_PRIO(p)		((p)+MAX_RT_PRIO)
                      		    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#532: FILE: kernel/sched.c:115:
+ * nice  19 1111111111111111111011111111111111111111
+  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#686: FILE: kernel/sched.c:691:
+	return SCHED_PRIO(find_first_zero_bit(

WARNING:LINE_SPACING: Missing a blank line after declarations
#693: FILE: kernel/sched.c:698:
+	DECLARE_BITMAP(tmp, PRIO_RANGE);
+	bitmap_or(tmp, p->bitmap, prio_matrix[USER_PRIO(p->static_prio)],

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#703: FILE: kernel/sched.c:708:
+	p->prio = p->normal_prio = first_prio_slot(p);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#738: FILE: kernel/sched.c:740:
+	if (p->rotation == rq->prio_rotation) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#739: FILE: kernel/sched.c:741:
+		if (p->array == array) {
[...]
+		} else if (p->array == rq->expired) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#746: FILE: kernel/sched.c:748:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#746: FILE: kernel/sched.c:748:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#748: FILE: kernel/sched.c:750:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#757: FILE: kernel/sched.c:759:
+	p->prio = p->normal_prio = queue_prio;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#841: FILE: kernel/sched.c:827:
+	slice = rr = p->quota;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#906: FILE: kernel/sched.c:908:
+		return MAX_RT_PRIO-1 - p->rt_priority;
 		                  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1126: FILE: kernel/sched.c:1398:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle && !rt_task((rq)->curr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rq' - possible side-effects?
#1128: FILE: kernel/sched.c:1400:
+#define rq_idle(rq)	((rq)->curr == (rq)->idle)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1136: FILE: kernel/sched.c:1408:
+	return ((p->array == task_rq(p)->active &&
+		TASK_PREEMPTS_CURR(p, curr)) || rq_idle(rq));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1550: FILE: kernel/sched.c:3351:
+			list_splice_tail_init(array->queue + rq->prio_level,
+					 new_queue->queue + new_prio_level);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: kernel/sched.c:3361:
+			list_splice_tail_init(array->queue + rq->prio_level,
+					 array->queue + new_prio_level);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1719: FILE: kernel/sched.c:3505:
+		BUG_ON(++expirations > 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1746: FILE: kernel/sched.c:3532:
+	if (next->rotation != rq->prio_rotation) {
[...]
+			task_new_array(next, rq);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1753: FILE: kernel/sched.c:3539:
+	} else if (!test_bit(USER_PRIO(idx), next->bitmap)) {
[...]
+			if (!entitled_slot(next->static_prio, idx))

CHECK:BRACES: braces {} should be used on all arms of this statement
#1826: FILE: kernel/sched.c:3628:
+	if (!rt_prio(idx))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1828: FILE: kernel/sched.c:3630:
+	else {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1887: FILE: kernel/sched.c:4087:
+	if ((queued = task_queued(p)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: Unbalanced braces around else statement
#1910: FILE: kernel/sched.c:4101:
+		} else

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1921: FILE: kernel/sched.c:4111:
+	int queued, old_prio,delta;
 	                    ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1932: FILE: kernel/sched.c:4132:
+	if ((queued = task_queued(p))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1970: FILE: kernel/sched.c:4268:
+	BUG_ON(task_queued(p));

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2001: FILE: kernel/sched.c:4363:
+	if ((queued = task_queued(p)))

CHECK:BRACES: Unbalanced braces around else statement
#2016: FILE: kernel/sched.c:4377:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2078: FILE: kernel/sched.c:5005:
+	idle->prio = idle->normal_prio = NICE_TO_PRIO(0);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2119: FILE: kernel/sched.c:7061:
+			bitmap_zero(prio_matrix[i] , PRIO_RANGE);
 			                           ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2155: FILE: kernel/sched.c:7105:
 		for (j = 0; j < 2; j++) {
+

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2198: FILE: kernel/sched.c:7190:
+		if ((queued = task_queued(p)))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455337.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 9 warnings, 21 checks, 1822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000455337.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
