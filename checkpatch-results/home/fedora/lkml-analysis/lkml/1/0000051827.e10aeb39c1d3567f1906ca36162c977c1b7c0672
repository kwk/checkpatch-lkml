WARNING:TYPO_SPELLING: 'pach' may be misspelled - perhaps 'patch'?
#45: 
This pach has been on my queue for a month. 
     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'coutner' may be misspelled - perhaps 'counter'?
#57: 
Anothter major percpu coutner is vm_stat[]. This patch implements
                      ^^^^^^^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#123: FILE: include/linux/percpu_counter.h:106:
+#define DEFINE_COUNTER_ARRAY(name, elements) \
+	struct {\
+		struct counter_array ca;\
+		long __counters[(elements)]; } name;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#128: FILE: include/linux/percpu_counter.h:111:
+#define DEFINE_COUNTER_ARRAY_NOSYNC(name, elements) \
+	struct {\
+		struct counter_array ca; } name;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#160: FILE: include/linux/percpu_counter.h:188:
+};
+#define DEFINE_COUNTER_ARRAY(name) \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#160: FILE: include/linux/percpu_counter.h:188:
+#define DEFINE_COUNTER_ARRAY(name) \
+	struct {\
+		struct counter_array ac;\
+		unsigned long counters[(elements)]; } name;\
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: include/linux/percpu_counter.h:194:
+static inline int counter_array_init(struct counter_array *ca,
+		int size, int nosync)

WARNING:TYPO_SPELLING: 'coutners' may be misspelled - perhaps 'counters'?
#249: FILE: lib/percpu_counter.c:169:
+ * notification. If you ofren alloc/free coutners, nosync is appreciated.
                                          ^^^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#278: FILE: lib/percpu_counter.c:198:
+}
+#undef MAINTAIN_LIST

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > batch'
#299: FILE: lib/percpu_counter.c:219:
+	if (!ca->v.nosync && ((count > batch) || (count < -batch))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#299: FILE: lib/percpu_counter.c:219:
+	if (!ca->v.nosync && ((count > batch) || (count < -batch))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#302: FILE: lib/percpu_counter.c:222:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: lib/percpu_counter.c:259:
+static int __cpuinit counter_array_hotcpu_callback(struct notifier_block *nb,
+		unsigned long action, void *hcpu)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000051827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 7 checks, 274 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000051827.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
