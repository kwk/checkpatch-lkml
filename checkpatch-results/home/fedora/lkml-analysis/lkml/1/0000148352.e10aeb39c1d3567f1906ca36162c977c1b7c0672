WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
> And a loop would reduce the performances (the tracing path must stay fast).

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#179: FILE: kernel/trace/trace_kprobe.c:38:
+	unsigned long (*func)(struct pt_regs *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#179: FILE: kernel/trace/trace_kprobe.c:38:
+	unsigned long (*func)(struct pt_regs *, void *);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#192: FILE: kernel/trace/trace_kprobe.c:51:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#197: FILE: kernel/trace/trace_kprobe.c:56:
+#define MAX_REG_NUM (sizeof(struct pt_regs)/sizeof(unsigned long))
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#210: FILE: kernel/trace/trace_kprobe.c:69:
+	unsigned long *addr = (unsigned long *)kernel_trap_sp(regs);
+	addr += (unsigned long)num;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#220: FILE: kernel/trace/trace_kprobe.c:79:
+	unsigned long retval;
+	if (probe_kernel_address(addr, retval))

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#225: FILE: kernel/trace/trace_kprobe.c:84:
+#if defined(__i386__)

WARNING:LINE_SPACING: Missing a blank line after declarations
#230: FILE: kernel/trace/trace_kprobe.c:89:
+	unsigned long n = (unsigned long)data;
+	if (n > REGPARMS) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#236: FILE: kernel/trace/trace_kprobe.c:95:
+		return fetch_stack(regs, (void *)(n - REGPARMS));
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#250: FILE: kernel/trace/trace_kprobe.c:109:
+	unsigned long n = (unsigned long)data;
+	if (n > REGPARMS) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#256: FILE: kernel/trace/trace_kprobe.c:115:
+		return fetch_stack(regs, (void *)(n - REGPARMS));
+	} else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: kernel/trace/trace_kprobe.c:145:
+
+

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#338: FILE: kernel/trace/trace_kprobe.c:353:
+			ret = strict_strtoul(tmp + 1, 10, &param);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#339: FILE: kernel/trace/trace_kprobe.c:354:
+			if (ret || param > PARAM_MAX_ARGS)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#341: FILE: kernel/trace/trace_kprobe.c:356:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#347: FILE: kernel/trace/trace_kprobe.c:362:
+			if (isdigit(tmp[1])) {
[...]
+			} else if (is_return && tmp[1] == 'v') {
[...]
+			} else if (is_return && tmp[1] == 'a') {
[...]
+			} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#348: FILE: kernel/trace/trace_kprobe.c:363:
+				ret = strict_strtoul(tmp + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#349: FILE: kernel/trace/trace_kprobe.c:364:
+				if (ret || param > PARAM_MAX_REGS)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#351: FILE: kernel/trace/trace_kprobe.c:366:
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#361: FILE: kernel/trace/trace_kprobe.c:376:
+			} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#365: FILE: kernel/trace/trace_kprobe.c:380:
+			ret = strict_strtoul(tmp + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#366: FILE: kernel/trace/trace_kprobe.c:381:
+			if (ret || param > PARAM_MAX_STACK)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#368: FILE: kernel/trace/trace_kprobe.c:383:
+			else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#374: FILE: kernel/trace/trace_kprobe.c:389:
+			ret = strict_strtoul(tmp + 1, 0, &param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: kernel/trace/trace_kprobe.c:455:
+		seq_printf(m, "%c %s%+ld",
 			probe_is_return(tp) ? 'r' : 'p',

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: kernel/trace/trace_kprobe.c:459:
+		seq_printf(m, "%c 0x%p",
 			probe_is_return(tp) ? 'r' : 'p',

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#422: FILE: kernel/trace/trace_kprobe.c:472:
+			seq_printf(m, " rv");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#424: FILE: kernel/trace/trace_kprobe.c:474:
+			seq_printf(m, " ra");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#426: FILE: kernel/trace/trace_kprobe.c:476:
+	seq_printf(m, "\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#444: FILE: kernel/trace/trace_kprobe.c:575:
 }
+static void kprobe_trace_printk_1(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#452: FILE: kernel/trace/trace_kprobe.c:583:
+}
+static void kprobe_trace_printk_2(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#461: FILE: kernel/trace/trace_kprobe.c:592:
+}
+static void kprobe_trace_printk_3(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#471: FILE: kernel/trace/trace_kprobe.c:602:
+}
+static void kprobe_trace_printk_4(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#482: FILE: kernel/trace/trace_kprobe.c:613:
+}
+static void kprobe_trace_printk_5(unsigned long ip, struct trace_probe *tp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#494: FILE: kernel/trace/trace_kprobe.c:625:
+}
+static void kprobe_trace_printk_6(unsigned long ip, struct trace_probe *tp,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 20 checks, 417 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000148352.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
