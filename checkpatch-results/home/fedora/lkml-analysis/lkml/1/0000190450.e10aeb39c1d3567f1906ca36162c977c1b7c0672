WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters/core

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#64: 
   counters wont waste generic event counters. For example, on Nehalem
            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wth' may be misspelled - perhaps 'with'?
#127: 
      x86: KPROBE_ENTRY should be paired wth KPROBE_END
                                         ^^^

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#178: 
      x86: signal: change type of paramter for sys_rt_sigreturn()
                                  ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#344: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#544: FILE: arch/x86/ia32/ia32_signal.c:200:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
 }

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#544: FILE: arch/x86/ia32/ia32_signal.c:200:
+#define COPY(x)			{		\
+	err |= __get_user(regs->x, &sc->x);	\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#555: FILE: arch/x86/ia32/ia32_signal.c:204:
+#define COPY_SEG_CPL3(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#555: FILE: arch/x86/ia32/ia32_signal.c:204:
+#define COPY_SEG_CPL3(seg)	{			\
+		unsigned short tmp;			\
+		err |= __get_user(tmp, &sc->seg);	\
+		regs->seg = tmp | 3;			\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#561: FILE: arch/x86/ia32/ia32_signal.c:210:
+#define RELOAD_SEG(seg)		{		\
+	unsigned int cur, pre;			\
+	err |= __get_user(pre, &sc->seg);	\
+	savesegment(seg, cur);			\
+	pre |= 3;				\
+	if (pre != cur)				\
+		loadsegment(seg, pre);		\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#561: FILE: arch/x86/ia32/ia32_signal.c:210:
+#define RELOAD_SEG(seg)		{		\
+	unsigned int cur, pre;			\
+	err |= __get_user(pre, &sc->seg);	\
+	savesegment(seg, cur);			\
+	pre |= 3;				\
+	if (pre != cur)				\
+		loadsegment(seg, pre);		\
+}

CHECK:SPACING: No space is necessary after a cast
#641: FILE: arch/x86/ia32/ia32_signal.c:408:
+			return (void __user *) -1L;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#704: FILE: arch/x86/include/asm/atomic_32.h:260:
+typedef struct {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#722: FILE: arch/x86/include/asm/atomic_32.h:278:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmpxchg8b', this function's name, in a string
#724: FILE: arch/x86/include/asm/atomic_32.h:280:
+		LOCK_PREFIX "cmpxchg8b (%[ptr])\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#962: FILE: arch/x86/include/asm/byteorder.h:11:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#983: FILE: arch/x86/include/asm/byteorder.h:29:
 }
+#define __arch_swab32 __arch_swab32

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#988: FILE: arch/x86/include/asm/byteorder.h:33:
+#ifdef __i386__

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1038: FILE: arch/x86/include/asm/byteorder.h:61:
+}
+#define __arch_swab64 __arch_swab64

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1087: FILE: arch/x86/include/asm/dwarf2.h:17:
+#define CFI_STARTPROC		.cfi_startproc

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1088: FILE: arch/x86/include/asm/dwarf2.h:18:
+#define CFI_ENDPROC		.cfi_endproc

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1089: FILE: arch/x86/include/asm/dwarf2.h:19:
+#define CFI_DEF_CFA		.cfi_def_cfa

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1090: FILE: arch/x86/include/asm/dwarf2.h:20:
+#define CFI_DEF_CFA_REGISTER	.cfi_def_cfa_register

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1091: FILE: arch/x86/include/asm/dwarf2.h:21:
+#define CFI_DEF_CFA_OFFSET	.cfi_def_cfa_offset

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1092: FILE: arch/x86/include/asm/dwarf2.h:22:
+#define CFI_ADJUST_CFA_OFFSET	.cfi_adjust_cfa_offset

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1093: FILE: arch/x86/include/asm/dwarf2.h:23:
+#define CFI_OFFSET		.cfi_offset

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1094: FILE: arch/x86/include/asm/dwarf2.h:24:
+#define CFI_REL_OFFSET		.cfi_rel_offset

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1095: FILE: arch/x86/include/asm/dwarf2.h:25:
+#define CFI_REGISTER		.cfi_register

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1096: FILE: arch/x86/include/asm/dwarf2.h:26:
+#define CFI_RESTORE		.cfi_restore

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1097: FILE: arch/x86/include/asm/dwarf2.h:27:
+#define CFI_REMEMBER_STATE	.cfi_remember_state

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1098: FILE: arch/x86/include/asm/dwarf2.h:28:
+#define CFI_RESTORE_STATE	.cfi_restore_state

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1099: FILE: arch/x86/include/asm/dwarf2.h:29:
+#define CFI_UNDEFINED		.cfi_undefined

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1103: FILE: arch/x86/include/asm/dwarf2.h:32:
+#define CFI_SIGNAL_FRAME	.cfi_signal_frame

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#1161: FILE: arch/x86/include/asm/dwarf2.h:77:
+	CFI_ADJUST_CFA_OFFSET -8
 	                      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1164: FILE: arch/x86/include/asm/dwarf2.h:80:
+	.macro movq_cfi reg offset=0
 	                          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1165: FILE: arch/x86/include/asm/dwarf2.h:81:
+	movq %\reg, \offset(%rsp)
 	     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1165: FILE: arch/x86/include/asm/dwarf2.h:81:
+	movq %\reg, \offset(%rsp)
 	                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#1170: FILE: arch/x86/include/asm/dwarf2.h:86:
+	movq \offset(%rsp), %\reg
 	             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#1170: FILE: arch/x86/include/asm/dwarf2.h:86:
+	movq \offset(%rsp), %\reg
 	                    ^

WARNING:TYPO_SPELLING: 'defenitions' may be misspelled - perhaps 'definitions'?
#1175: FILE: arch/x86/include/asm/dwarf2.h:91:
+	/* 32bit defenitions are missed yet */
 	         ^^^^^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#1197: FILE: arch/x86/include/asm/hardirq_32.h:26:
+#define inc_irq_stat(member)	(__get_cpu_var(irq_stat).member++)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1223: FILE: arch/x86/include/asm/hw_irq.h:33:
+extern void perf_counter_interrupt(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1235: FILE: arch/x86/include/asm/hw_irq.h:114:
+extern void (*__initconst interrupt[NR_VECTORS-FIRST_EXTERNAL_VECTOR])(void);
                                               ^

ERROR:INIT_ATTRIBUTE: Use of __initconst requires a separate use of const
#1235: FILE: arch/x86/include/asm/hw_irq.h:114:
+extern void (*__initconst interrupt[NR_VECTORS-FIRST_EXTERNAL_VECTOR])(void);

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_OWN_IRQ_REGS' is wrong - use Kconfig variables or standard guards instead
#1299: FILE: arch/x86/include/asm/irq_regs_32.h:12:
+#define ARCH_HAS_OWN_IRQ_REGS

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1333: FILE: arch/x86/include/asm/linkage.h:65:
+#define __set_entry_x86		.set ENTRY_X86_IN, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1334: FILE: arch/x86/include/asm/linkage.h:66:
+#define __unset_entry_x86	.set ENTRY_X86_IN, 1

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1335: FILE: arch/x86/include/asm/linkage.h:67:
+#define __set_kprobe_x86	.set KPROBE_X86_IN, 0

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1336: FILE: arch/x86/include/asm/linkage.h:68:
+#define __unset_kprobe_x86	.set KPROBE_X86_IN, 1

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1340: FILE: arch/x86/include/asm/linkage.h:72:
+#define __check_entry_x86	\
+	.ifdef ENTRY_X86_IN;	\
+	.ifeq ENTRY_X86_IN;	\
+	__macro_err_x86;	\
+	.abort;			\
+	.endif;			\
+	.endif

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1348: FILE: arch/x86/include/asm/linkage.h:80:
+#define __check_kprobe_x86	\
+	.ifdef KPROBE_X86_IN;	\
+	.ifeq KPROBE_X86_IN;	\
+	__macro_err_x86;	\
+	.abort;			\
+	.endif;			\
+	.endif

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1356: FILE: arch/x86/include/asm/linkage.h:88:
+#define __check_entry_kprobe_x86	\
+	__check_entry_x86;		\
+	__check_kprobe_x86

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1362: FILE: arch/x86/include/asm/linkage.h:94:
+#define ENTRY_X86(name)			\
+	__check_entry_kprobe_x86;	\
+	__set_entry_x86;		\
+	.globl name;			\
+	__ALIGN;			\
+	name:

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1362: FILE: arch/x86/include/asm/linkage.h:94:
+#define ENTRY_X86(name)			\
+	__check_entry_kprobe_x86;	\
+	__set_entry_x86;		\
+	.globl name;			\
+	__ALIGN;			\
+	name:

WARNING:INDENTED_LABEL: labels should not be indented
#1367: FILE: arch/x86/include/asm/linkage.h:99:
+	name:

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1369: FILE: arch/x86/include/asm/linkage.h:101:
+#define END_X86(name)			\
+	__unset_entry_x86;		\
+	__check_entry_kprobe_x86;	\
+	.size name, .-name

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1369: FILE: arch/x86/include/asm/linkage.h:101:
+#define END_X86(name)			\
+	__unset_entry_x86;		\
+	__check_entry_kprobe_x86;	\
+	.size name, .-name

ERROR:SPACING: space required before that '-' (ctx:VxV)
#1372: FILE: arch/x86/include/asm/linkage.h:104:
+	.size name, .-name
 	             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1374: FILE: arch/x86/include/asm/linkage.h:106:
+#define KPROBE_ENTRY_X86(name)		\
+	__check_entry_kprobe_x86;	\
+	__set_kprobe_x86;		\
+	.pushsection .kprobes.text, "ax"; \
+	.globl name;			\
+	__ALIGN;			\
+	name:

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1374: FILE: arch/x86/include/asm/linkage.h:106:
+#define KPROBE_ENTRY_X86(name)		\
+	__check_entry_kprobe_x86;	\
+	__set_kprobe_x86;		\
+	.pushsection .kprobes.text, "ax"; \
+	.globl name;			\
+	__ALIGN;			\
+	name:

WARNING:INDENTED_LABEL: labels should not be indented
#1380: FILE: arch/x86/include/asm/linkage.h:112:
+	name:

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1382: FILE: arch/x86/include/asm/linkage.h:114:
+#define KPROBE_END_X86(name)		\
+	__unset_kprobe_x86;		\
+	__check_entry_kprobe_x86;	\
+	.size name, .-name;		\
+	.popsection

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#1382: FILE: arch/x86/include/asm/linkage.h:114:
+#define KPROBE_END_X86(name)		\
+	__unset_kprobe_x86;		\
+	__check_entry_kprobe_x86;	\
+	.size name, .-name;		\
+	.popsection

ERROR:SPACING: space required before that '-' (ctx:VxV)
#1385: FILE: arch/x86/include/asm/linkage.h:117:
+	.size name, .-name;		\
 	             ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1418: FILE: arch/x86/include/asm/pda.h:33:
+	unsigned apic_perf_irqs;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1428: FILE: arch/x86/include/asm/perf_counter.h:1:
+#ifndef _ASM_X86_PERF_COUNTER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#1448: FILE: arch/x86/include/asm/perf_counter.h:21:
+#define ARCH_PERFMON_EVENTSEL0_ENABLE			  (1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1449: FILE: arch/x86/include/asm/perf_counter.h:22:
+#define ARCH_PERFMON_EVENTSEL_INT			  (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1450: FILE: arch/x86/include/asm/perf_counter.h:23:
+#define ARCH_PERFMON_EVENTSEL_OS			  (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1451: FILE: arch/x86/include/asm/perf_counter.h:24:
+#define ARCH_PERFMON_EVENTSEL_USR			  (1 << 16)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1460: FILE: arch/x86/include/asm/perf_counter.h:33:
+#define ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX ^I^I 0$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1488: FILE: arch/x86/include/asm/perf_counter.h:61:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1515: FILE: arch/x86/include/asm/perf_counter.h:88:
+extern void init_hw_perf_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1516: FILE: arch/x86/include/asm/perf_counter.h:89:
+extern void perf_counters_lapic_init(int nmi);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1552: FILE: arch/x86/include/asm/thread_info.h:107:
+#define _TIF_PERF_COUNTERS	(1 << TIF_PERF_COUNTERS)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1561: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1561: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1561: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1743: FILE: arch/x86/kernel/cpu/perf_counter.c:1:
+/*

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1786: FILE: arch/x86/kernel/cpu/perf_counter.c:44:
+static const int intel_perfmon_event_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1787: FILE: arch/x86/kernel/cpu/perf_counter.c:45:
+  [PERF_COUNT_CPU_CYCLES]^I^I= 0x003c,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1788: FILE: arch/x86/kernel/cpu/perf_counter.c:46:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1789: FILE: arch/x86/kernel/cpu/perf_counter.c:47:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x4f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1790: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x412e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1791: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1792: FILE: arch/x86/kernel/cpu/perf_counter.c:50:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1793: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+  [PERF_COUNT_BUS_CYCLES]^I^I= 0x013c,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1821: FILE: arch/x86/kernel/cpu/perf_counter.c:79:
+	if (atomic64_cmpxchg(&hwc->prev_count, prev_raw_count,
+					new_raw_count) != prev_raw_count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1943: FILE: arch/x86/kernel/cpu/perf_counter.c:201:
+__pmc_generic_disable(struct perf_counter *counter,
+			   struct hw_perf_counter *hwc, unsigned int idx)

WARNING:TYPO_SPELLING: 'reasoable' may be misspelled - perhaps 'reasonable'?
#1968: FILE: arch/x86/kernel/cpu/perf_counter.c:226:
+	 * If we are way outside a reasoable range then just skip forward:
 	                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1989: FILE: arch/x86/kernel/cpu/perf_counter.c:247:
+	err = checking_wrmsrl(hwc->counter_base + idx,
+			     (u64)(-left) & counter_value_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2018: FILE: arch/x86/kernel/cpu/perf_counter.c:276:
+__pmc_generic_enable(struct perf_counter *counter,
+			  struct hw_perf_counter *hwc, int idx)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2124: FILE: arch/x86/kernel/cpu/perf_counter.c:382:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2125: FILE: arch/x86/kernel/cpu/perf_counter.c:383:
+	printk(KERN_INFO "CPU#%d: ctrl:       %016llx\n", cpu, ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2126: FILE: arch/x86/kernel/cpu/perf_counter.c:384:
+	printk(KERN_INFO "CPU#%d: status:     %016llx\n", cpu, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2127: FILE: arch/x86/kernel/cpu/perf_counter.c:385:
+	printk(KERN_INFO "CPU#%d: overflow:   %016llx\n", cpu, overflow);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2128: FILE: arch/x86/kernel/cpu/perf_counter.c:386:
+	printk(KERN_INFO "CPU#%d: fixed:      %016llx\n", cpu, fixed);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2129: FILE: arch/x86/kernel/cpu/perf_counter.c:387:
+	printk(KERN_INFO "CPU#%d: used:       %016llx\n", cpu, *(u64 *)cpuc->used);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2137: FILE: arch/x86/kernel/cpu/perf_counter.c:395:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d ctrl:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2138: FILE: arch/x86/kernel/cpu/perf_counter.c:396:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d ctrl:  %016llx\n",
+			cpu, idx, pmc_ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2139: FILE: arch/x86/kernel/cpu/perf_counter.c:397:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d count: %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2140: FILE: arch/x86/kernel/cpu/perf_counter.c:398:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d count: %016llx\n",
+			cpu, idx, pmc_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2141: FILE: arch/x86/kernel/cpu/perf_counter.c:399:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d left:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2142: FILE: arch/x86/kernel/cpu/perf_counter.c:400:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d left:  %016llx\n",
+			cpu, idx, prev_left);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2147: FILE: arch/x86/kernel/cpu/perf_counter.c:405:
+		printk(KERN_INFO "CPU#%d: fixed-PMC%d count: %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2148: FILE: arch/x86/kernel/cpu/perf_counter.c:406:
+		printk(KERN_INFO "CPU#%d: fixed-PMC%d count: %016llx\n",
+			cpu, idx, pmc_count);

CHECK:SPACING: No space is necessary after a cast
#2183: FILE: arch/x86/kernel/cpu/perf_counter.c:441:
+		u64 *p = (u64 *) &irqdata->data[irqdata->len];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2215: FILE: arch/x86/kernel/cpu/perf_counter.c:473:
+	list_for_each_entry(counter, &group_leader->sibling_list, list_entry) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#2249: FILE: arch/x86/kernel/cpu/perf_counter.c:507:
+		clear_bit(bit, (unsigned long *) &status);

WARNING:TYPO_SPELLING: 'initate' may be misspelled - perhaps 'initiate'?
#2268: FILE: arch/x86/kernel/cpu/perf_counter.c:526:
+		 * wakeup_pending and initate a wakeup callback:
 		                      ^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#2288: FILE: arch/x86/kernel/cpu/perf_counter.c:546:
+	 * Restore - do not reenable when global enable is off:
 	                    ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2390: FILE: arch/x86/kernel/cpu/perf_counter.c:648:
+	printk(KERN_INFO "Intel Performance Monitoring support detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2392: FILE: arch/x86/kernel/cpu/perf_counter.c:650:
+	printk(KERN_INFO "... version:         %d\n", eax.split.version_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2393: FILE: arch/x86/kernel/cpu/perf_counter.c:651:
+	printk(KERN_INFO "... num counters:    %d\n", eax.split.num_counters);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#2397: FILE: arch/x86/kernel/cpu/perf_counter.c:655:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2398: FILE: arch/x86/kernel/cpu/perf_counter.c:656:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",
+			nr_counters_generic, X86_PMC_MAX_GENERIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2403: FILE: arch/x86/kernel/cpu/perf_counter.c:661:
+	printk(KERN_INFO "... bit width:       %d\n", eax.split.bit_width);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2405: FILE: arch/x86/kernel/cpu/perf_counter.c:663:
+	printk(KERN_INFO "... value mask:      %016Lx\n", counter_value_mask);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2405: FILE: arch/x86/kernel/cpu/perf_counter.c:663:
+	printk(KERN_INFO "... value mask:      %016Lx\n", counter_value_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2407: FILE: arch/x86/kernel/cpu/perf_counter.c:665:
+	printk(KERN_INFO "... mask length:     %d\n", eax.split.mask_length);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#2412: FILE: arch/x86/kernel/cpu/perf_counter.c:670:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2413: FILE: arch/x86/kernel/cpu/perf_counter.c:671:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",
+			nr_counters_fixed, X86_PMC_MAX_FIXED);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2415: FILE: arch/x86/kernel/cpu/perf_counter.c:673:
+	printk(KERN_INFO "... fixed counters:  %d\n", nr_counters_fixed);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2417: FILE: arch/x86/kernel/cpu/perf_counter.c:675:
+	perf_counter_mask |= ((1LL << nr_counters_fixed)-1) << X86_PMC_IDX_FIXED;
 	                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2419: FILE: arch/x86/kernel/cpu/perf_counter.c:677:
+	printk(KERN_INFO "... counter mask:    %016Lx\n", perf_counter_mask);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#2419: FILE: arch/x86/kernel/cpu/perf_counter.c:677:
+	printk(KERN_INFO "... counter mask:    %016Lx\n", perf_counter_mask);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#3959: FILE: arch/x86/kernel/entry_64.S:1029:
+.macro paranoidzeroentry_ist sym do_sym ist
                                         ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#3973: FILE: arch/x86/kernel/entry_64.S:1041:
+	subq $EXCEPTION_STKSZ, per_cpu__init_tss + TSS_ist + (\ist - 1) * 8(%rbp)
 	                                                       ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#3975: FILE: arch/x86/kernel/entry_64.S:1043:
+	addq $EXCEPTION_STKSZ, per_cpu__init_tss + TSS_ist + (\ist - 1) * 8(%rbp)
 	                                                       ^^^

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4769: FILE: arch/x86/kernel/irq.c:59:
+	seq_printf(p, "CNT: ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#4772: FILE: arch/x86/kernel/irq.c:62:
+	seq_printf(p, "  Performance counter interrupts\n");

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#4819: FILE: arch/x86/kernel/irq_64.c:38:
+		  "do_IRQ: %s near stack overflow (cur:%Lx,sp:%lx)\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4845: FILE: arch/x86/kernel/irqinit_32.c:132:
+			set_intr_gate(i, interrupt[i-FIRST_EXTERNAL_VECTOR]);
 			                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#5093: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG_CPL3(seg)	{			\
 		unsigned short tmp;			\
 		err |= __get_user(tmp, &sc->seg);	\
 		regs->seg = tmp | 3;			\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#5093: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG_CPL3(seg)	{			\
 		unsigned short tmp;			\
 		err |= __get_user(tmp, &sc->seg);	\
 		regs->seg = tmp | 3;			\

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5140: FILE: arch/x86/kernel/signal.c:113:
+	 * App's signal handler can save/restore other segments if needed. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#5309: FILE: arch/x86/kernel/signal.c:197:
+} __attribute__((packed)) retcode = {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#5320: FILE: arch/x86/kernel/signal.c:208:
+} __attribute__((packed)) rt_retcode = {

CHECK:BRACES: braces {} should be used on all arms of this statement
#5393: FILE: arch/x86/kernel/signal.c:421:
+	if (used_math()) {
[...]
+	} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5395: FILE: arch/x86/kernel/signal.c:423:
+		frame = (void __user *)round_down(

CHECK:BRACES: Unbalanced braces around else statement
#5400: FILE: arch/x86/kernel/signal.c:428:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5425: FILE: arch/x86/kernel/signal.c:453:
+	/* Set up to return from userspace.  If provided, use a stub
+	   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5425: FILE: arch/x86/kernel/signal.c:453:
+	   already in userspace.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5443: FILE: arch/x86/kernel/signal.c:471:
+	/* This also works for non SA_SIGINFO handlers because they expect the
+	   next argument after the signal number on the stack. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5443: FILE: arch/x86/kernel/signal.c:471:
+	   next argument after the signal number on the stack. */

CHECK:SPACING: No space is necessary after a cast
#5446: FILE: arch/x86/kernel/signal.c:474:
+	regs->ip = (unsigned long) ka->sa.sa_handler;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5451: FILE: arch/x86/kernel/signal.c:479:
+	/* Set up the CS register to run signal handlers in 64-bit mode,
+	   even if the handler happens to be interrupting 32-bit code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5451: FILE: arch/x86/kernel/signal.c:479:
+	   even if the handler happens to be interrupting 32-bit code. */

CHECK:SPACING: No space is necessary after a cast
#5548: FILE: arch/x86/kernel/signal.c:576:
+	regs = (struct pt_regs *) &__unused;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5554: FILE: arch/x86/kernel/signal.c:582:
+	if (__get_user(set.sig[0], &frame->sc.oldmask) || (_NSIG_WORDS > 1
+		&& __copy_from_user(&set.sig[1], &frame->extramask,

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#5569: FILE: arch/x86/kernel/signal.c:597:
+	if (show_unhandled_signals && printk_ratelimit()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#5570: FILE: arch/x86/kernel/signal.c:598:
+		printk("%s%s[%d] bad frame in sigreturn frame:"

WARNING:SPLIT_STRING: quoted string split across lines
#5571: FILE: arch/x86/kernel/signal.c:599:
+		printk("%s%s[%d] bad frame in sigreturn frame:"
+			"%p ip:%lx sp:%lx oeax:%lx",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#5576: FILE: arch/x86/kernel/signal.c:604:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#5576: FILE: arch/x86/kernel/signal.c:604:
+		printk(KERN_CONT "\n");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5668: FILE: arch/x86/kernel/signal.c:789:
+#define NR_restart_syscall	\
+	test_thread_flag(TIF_IA32) ? __NR_ia32_restart_syscall : __NR_restart_syscall

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_WARNING
#6269: FILE: arch/x86/kernel/time_64.c:83:
+		WARN(1, KERN_WARNING "Warning: AMD perfctrs busy ... "

WARNING:SPLIT_STRING: quoted string split across lines
#6270: FILE: arch/x86/kernel/time_64.c:84:
+		WARN(1, KERN_WARNING "Warning: AMD perfctrs busy ... "
+		     "cpu_khz value may be incorrect.\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#6322: FILE: arch/x86/lguest/boot.c:594:
+				      interrupt[vector-FIRST_EXTERNAL_VECTOR]);
 				                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#6451: FILE: include/linux/init_task.h:117:
+# define INIT_PERF_COUNTERS(tsk)					\
+	.perf_counter_ctx.counter_list =				\
+		LIST_HEAD_INIT(tsk.perf_counter_ctx.counter_list),	\
+	.perf_counter_ctx.lock =					\
+		__SPIN_LOCK_UNLOCKED(tsk.perf_counter_ctx.lock),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6479: FILE: include/linux/kernel_stat.h:69:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6483: FILE: include/linux/kernel_stat.h:73:
+extern void curr_rq_lock_irq_save(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6484: FILE: include/linux/kernel_stat.h:74:
+extern void curr_rq_unlock_irq_restore(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6485: FILE: include/linux/kernel_stat.h:75:
+extern unsigned long long __task_delta_exec(struct task_struct *tsk, int update);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6516: FILE: include/linux/perf_counter.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#6531: FILE: include/linux/perf_counter.h:16:
+#include <asm/atomic.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#6647: FILE: include/linux/perf_counter.h:132:
+	int (*enable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6648: FILE: include/linux/perf_counter.h:133:
+	void (*disable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#6649: FILE: include/linux/perf_counter.h:134:
+	void (*read)			(struct perf_counter *counter);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#6681: FILE: include/linux/perf_counter.h:166:
+	struct file			*filp;
 	           			 ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6740: FILE: include/linux/perf_counter.h:225:
+extern void perf_counter_task_sched_in(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6741: FILE: include/linux/perf_counter.h:226:
+extern void perf_counter_task_sched_out(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6742: FILE: include/linux/perf_counter.h:227:
+extern void perf_counter_task_tick(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6743: FILE: include/linux/perf_counter.h:228:
+extern void perf_counter_init_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6744: FILE: include/linux/perf_counter.h:229:
+extern void perf_counter_exit_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6745: FILE: include/linux/perf_counter.h:230:
+extern void perf_counter_notify(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6746: FILE: include/linux/perf_counter.h:231:
+extern void perf_counter_print_debug(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6747: FILE: include/linux/perf_counter.h:232:
+extern u64 hw_perf_save_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6748: FILE: include/linux/perf_counter.h:233:
+extern void hw_perf_restore(u64 ctrl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6749: FILE: include/linux/perf_counter.h:234:
+extern int perf_counter_task_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6750: FILE: include/linux/perf_counter.h:235:
+extern int perf_counter_task_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6826: FILE: include/linux/sched.h:2294:
+extern void task_oncpu_function_call(struct task_struct *p,

WARNING:SPACING: Unnecessary space before function pointer arguments
#6827: FILE: include/linux/sched.h:2295:
+				     void (*func) (void *info), void *info);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6829: FILE: include/linux/sched.h:2297:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6849: FILE: include/linux/syscalls.h:628:
 
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6850: FILE: include/linux/syscalls.h:629:
+asmlinkage int sys_perf_counter_open(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6966: FILE: kernel/perf_counter.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#7046: FILE: kernel/perf_counter.c:81:
+				 &counter->sibling_list, list_entry) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7110: FILE: kernel/perf_counter.c:145:
+
+

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#7127: FILE: kernel/perf_counter.c:162:
+		 * the removal is always sucessful.
 		                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#7253: FILE: kernel/perf_counter.c:288:
+		 * the install is always sucessful.
 		                         ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#7636: FILE: kernel/perf_counter.c:671:
+			(unsigned long) counter->usrdata);

CHECK:SPACING: No space is necessary after a cast
#7771: FILE: kernel/perf_counter.c:806:
+	return put_user(cntval, (u64 __user *) buf) ? -EFAULT : sizeof(cntval);

WARNING:MINMAX: min() should probably be min_t(size_t, count, usrdata->len)
#7780: FILE: kernel/perf_counter.c:815:
+	count = min(count, (size_t)usrdata->len);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8267: FILE: kernel/perf_counter.c:1302:
+	counter->filp = counter_file;
 	         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8304: FILE: kernel/perf_counter.c:1339:
+inherit_counter(struct perf_counter *parent_counter,
+	      struct task_struct *parent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8312: FILE: kernel/perf_counter.c:1347:
+	child_counter = perf_counter_alloc(&parent_counter->hw_event,
+					    parent_counter->cpu, NULL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8332: FILE: kernel/perf_counter.c:1367:
+	 * Get a reference to the parent filp - we will fput it
 	                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8334: FILE: kernel/perf_counter.c:1369:
+	 * we are in the parent and we know that the filp still
 	                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8410: FILE: kernel/perf_counter.c:1445:
+	fput(parent_counter->filp);
 	                     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8476: FILE: kernel/perf_counter.c:1511:
+		 * which has a filp for sure, which we use as the reference
 		               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8484: FILE: kernel/perf_counter.c:1519:
+		if (inherit_counter(parent_counter, parent,
+				  parent_ctx, child, child_ctx))

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#8515: FILE: kernel/perf_counter.c:1550:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#8516: FILE: kernel/perf_counter.c:1551:
+}
+static void perf_counter_exit_cpu(int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8530: FILE: kernel/perf_counter.c:1565:
+	switch (action) {
+

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after perf_cpu_nb
#8548: FILE: kernel/perf_counter.c:1583:
+static struct notifier_block __cpuinitdata perf_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#8576: FILE: kernel/perf_counter.c:1611:
+	err = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#8608: FILE: kernel/perf_counter.c:1643:
+	err = strict_strtoul(buf, 10, &val);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8621: FILE: kernel/perf_counter.c:1656:
+static SYSDEV_CLASS_ATTR(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8628: FILE: kernel/perf_counter.c:1663:
+static SYSDEV_CLASS_ATTR(

WARNING:SPACING: Unnecessary space before function pointer arguments
#8723: FILE: kernel/sched.c:2247:
+			      void (*func) (void *info), void *info)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 88 warnings, 91 checks, 7513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190450.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
