WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#96: FILE: arch/ia64/sn/kernel/io_acpi_init.c:129:
+		printk(KERN_ERR "%s: "

WARNING:SPLIT_STRING: quoted string split across lines
#97: FILE: arch/ia64/sn/kernel/io_acpi_init.c:130:
+		printk(KERN_ERR "%s: "
+		       "acpi_get_vendor_resource() failed (0x%x) for: ",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#98: FILE: arch/ia64/sn/kernel/io_acpi_init.c:131:
+		       __FUNCTION__, status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#100: FILE: arch/ia64/sn/kernel/io_acpi_init.c:133:
+		printk("\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#111: FILE: arch/ia64/sn/kernel/io_acpi_init.c:143:
+			__FUNCTION__, vendor->byte_length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: arch/ia64/sn/kernel/io_acpi_init.c:162:
+sn_extract_device_info(acpi_handle handle, struct pcidev_info **pcidev_info,
+		    struct sn_irq_info **sn_irq_info)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#154: FILE: arch/ia64/sn/kernel/io_acpi_init.c:180:
+		printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: arch/ia64/sn/kernel/io_acpi_init.c:182:
+^I^I        __FUNCTION__, status);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#156: FILE: arch/ia64/sn/kernel/io_acpi_init.c:182:
+		        __FUNCTION__, status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: arch/ia64/sn/kernel/io_acpi_init.c:184:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#166: FILE: arch/ia64/sn/kernel/io_acpi_init.c:192:
+		printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/ia64/sn/kernel/io_acpi_init.c:194:
+^I^I        __FUNCTION__, vendor->byte_length);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#168: FILE: arch/ia64/sn/kernel/io_acpi_init.c:194:
+		        __FUNCTION__, vendor->byte_length);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: arch/ia64/sn/kernel/io_acpi_init.c:196:
+		printk("\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pcidev_ptr)...) over kzalloc(sizeof(struct pcidev_info)...)
#175: FILE: arch/ia64/sn/kernel/io_acpi_init.c:201:
+	pcidev_ptr = kzalloc(sizeof(struct pcidev_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#177: FILE: arch/ia64/sn/kernel/io_acpi_init.c:203:
+	if (!pcidev_ptr)
+		panic("%s: Unable to alloc memory for pcidev_info", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#177: FILE: arch/ia64/sn/kernel/io_acpi_init.c:203:
+		panic("%s: Unable to alloc memory for pcidev_info", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*irq_info)...) over kzalloc(sizeof(struct sn_irq_info)...)
#184: FILE: arch/ia64/sn/kernel/io_acpi_init.c:210:
+	irq_info = kzalloc(sizeof(struct sn_irq_info), GFP_KERNEL);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#185: FILE: arch/ia64/sn/kernel/io_acpi_init.c:211:
+	if (!irq_info)
+		 panic("%s: Unable to alloc memory for sn_irq_info", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#186: FILE: arch/ia64/sn/kernel/io_acpi_init.c:212:
+	if (!irq_info)
+		 panic("%s: Unable to alloc memory for sn_irq_info", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#186: FILE: arch/ia64/sn/kernel/io_acpi_init.c:212:
+		 panic("%s: Unable to alloc memory for sn_irq_info", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#220: FILE: arch/ia64/sn/kernel/io_acpi_init.c:246:
+			printk(KERN_ERR "%s: acpi_get_parent() failed "

WARNING:SPLIT_STRING: quoted string split across lines
#221: FILE: arch/ia64/sn/kernel/io_acpi_init.c:247:
+			printk(KERN_ERR "%s: acpi_get_parent() failed "
+			       "(0x%x) for: ", __FUNCTION__, status);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#221: FILE: arch/ia64/sn/kernel/io_acpi_init.c:247:
+			       "(0x%x) for: ", __FUNCTION__, status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#223: FILE: arch/ia64/sn/kernel/io_acpi_init.c:249:
+			printk("\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#224: FILE: arch/ia64/sn/kernel/io_acpi_init.c:250:
+			panic("%s: Unable to find host devfn\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#231: FILE: arch/ia64/sn/kernel/io_acpi_init.c:257:
+		printk(KERN_ERR "%s: Unable to find root bus for: ",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#232: FILE: arch/ia64/sn/kernel/io_acpi_init.c:258:
+		       __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#234: FILE: arch/ia64/sn/kernel/io_acpi_init.c:260:
+		printk("\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: arch/ia64/sn/kernel/io_acpi_init.c:261:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#240: FILE: arch/ia64/sn/kernel/io_acpi_init.c:266:
+		printk(KERN_ERR "%s: Unable to get _ADR (0x%x) for: ",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#241: FILE: arch/ia64/sn/kernel/io_acpi_init.c:267:
+		       __FUNCTION__, status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#243: FILE: arch/ia64/sn/kernel/io_acpi_init.c:269:
+		printk("\n");

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#244: FILE: arch/ia64/sn/kernel/io_acpi_init.c:270:
+		panic("%s: Unable to find host devfn\n", __FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: arch/ia64/sn/kernel/io_acpi_init.c:274:
+       ^Ifunction = adr & 0xffff;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: arch/ia64/sn/kernel/io_acpi_init.c:274:
+       ^Ifunction = adr & 0xffff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: arch/ia64/sn/kernel/io_acpi_init.c:274:
+       ^Ifunction = adr & 0xffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#273: FILE: arch/ia64/sn/kernel/io_acpi_init.c:299:
+        status = acpi_evaluate_integer(handle, METHOD_NAME__ADR, NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#273: FILE: arch/ia64/sn/kernel/io_acpi_init.c:299:
+        status = acpi_evaluate_integer(handle, METHOD_NAME__ADR, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: arch/ia64/sn/kernel/io_acpi_init.c:300:
+                                       &adr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#274: FILE: arch/ia64/sn/kernel/io_acpi_init.c:300:
+                                       &adr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: arch/ia64/sn/kernel/io_acpi_init.c:301:
+        if (ACPI_SUCCESS(status)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: arch/ia64/sn/kernel/io_acpi_init.c:301:
+        if (ACPI_SUCCESS(status)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#284: FILE: arch/ia64/sn/kernel/io_acpi_init.c:306:
+^I^I       ^I^I__FUNCTION__, status);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#284: FILE: arch/ia64/sn/kernel/io_acpi_init.c:306:
+^I^I       ^I^I__FUNCTION__, status);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#284: FILE: arch/ia64/sn/kernel/io_acpi_init.c:306:
+		       		__FUNCTION__, status);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: arch/ia64/sn/kernel/io_acpi_init.c:308:
+			printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#292: FILE: arch/ia64/sn/kernel/io_acpi_init.c:314:
+			printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: arch/ia64/sn/kernel/io_acpi_init.c:316:
+^I^I       ^I^I__FUNCTION__);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: arch/ia64/sn/kernel/io_acpi_init.c:316:
+^I^I       ^I^I__FUNCTION__);$

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#294: FILE: arch/ia64/sn/kernel/io_acpi_init.c:316:
+		       		__FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: arch/ia64/sn/kernel/io_acpi_init.c:318:
+			printk("\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: arch/ia64/sn/kernel/io_acpi_init.c:322:
+                slot = (adr >> 16) & 0xffff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: arch/ia64/sn/kernel/io_acpi_init.c:322:
+                slot = (adr >> 16) & 0xffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: arch/ia64/sn/kernel/io_acpi_init.c:323:
+                function = adr & 0xffff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: arch/ia64/sn/kernel/io_acpi_init.c:323:
+                function = adr & 0xffff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/ia64/sn/kernel/io_acpi_init.c:324:
+                devfn = PCI_DEVFN(slot, function);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/ia64/sn/kernel/io_acpi_init.c:324:
+                devfn = PCI_DEVFN(slot, function);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: arch/ia64/sn/kernel/io_acpi_init.c:325:
+                if ((info->devfn == devfn) && (info->bus == bbn)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/ia64/sn/kernel/io_acpi_init.c:325:
+                if ((info->devfn == devfn) && (info->bus == bbn)) {$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->devfn == devfn'
#303: FILE: arch/ia64/sn/kernel/io_acpi_init.c:325:
+                if ((info->devfn == devfn) && (info->bus == bbn)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'info->bus == bbn'
#303: FILE: arch/ia64/sn/kernel/io_acpi_init.c:325:
+                if ((info->devfn == devfn) && (info->bus == bbn)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#331: FILE: arch/ia64/sn/kernel/io_acpi_init.c:350:
+        status = acpi_evaluate_integer(rootbus_handle, METHOD_NAME__SEG, NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: arch/ia64/sn/kernel/io_acpi_init.c:350:
+        status = acpi_evaluate_integer(rootbus_handle, METHOD_NAME__SEG, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: arch/ia64/sn/kernel/io_acpi_init.c:351:
+                                       &segment);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: arch/ia64/sn/kernel/io_acpi_init.c:351:
+                                       &segment);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: arch/ia64/sn/kernel/io_acpi_init.c:352:
+        if (ACPI_SUCCESS(status)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: arch/ia64/sn/kernel/io_acpi_init.c:352:
+        if (ACPI_SUCCESS(status)) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#335: FILE: arch/ia64/sn/kernel/io_acpi_init.c:354:
+			printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#337: FILE: arch/ia64/sn/kernel/io_acpi_init.c:356:
+			       __FUNCTION__, segment, pci_domain_nr(dev));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#339: FILE: arch/ia64/sn/kernel/io_acpi_init.c:358:
+			printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#343: FILE: arch/ia64/sn/kernel/io_acpi_init.c:362:
+		printk(KERN_ERR "%s: Unable to get __SEG from: ",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#344: FILE: arch/ia64/sn/kernel/io_acpi_init.c:363:
+		       __FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: arch/ia64/sn/kernel/io_acpi_init.c:365:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#363: FILE: arch/ia64/sn/kernel/io_acpi_init.c:382:
+		printk(KERN_ERR

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#365: FILE: arch/ia64/sn/kernel/io_acpi_init.c:384:
+		       __FUNCTION__, pci_name(dev));

CHECK:SPACING: No space is necessary after a cast
#375: FILE: arch/ia64/sn/kernel/io_acpi_init.c:394:
+			((unsigned long) pci_domain_nr(dev) << 40) |

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#402: FILE: arch/ia64/sn/kernel/io_acpi_init.c:420:
+		      __FUNCTION__, pci_name(dev));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#415: FILE: arch/ia64/sn/kernel/io_acpi_init.c:442:
+EXPORT_SYMBOL(sn_acpi_slot_fixup);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prom_bussoft_ptr"
#436: FILE: arch/ia64/sn/kernel/io_acpi_init.c:466:
+		if (prom_bussoft_ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#437: FILE: arch/ia64/sn/kernel/io_acpi_init.c:467:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#439: FILE: arch/ia64/sn/kernel/io_acpi_init.c:469:
+			       "%s: 0x%04x:0x%02x Unable to "
+			       "obtain prom_bussoft_ptr\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#440: FILE: arch/ia64/sn/kernel/io_acpi_init.c:470:
+			       __FUNCTION__, pci_domain_nr(bus), bus->number);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#580: FILE: arch/ia64/sn/kernel/io_common.c:447:
 void __devinit

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#592: FILE: arch/ia64/sn/kernel/io_common.c:477:
+		BUG_ON(header == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!header"
#592: FILE: arch/ia64/sn/kernel/io_common.c:477:
+		BUG_ON(header == NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#623: FILE: arch/ia64/sn/kernel/io_init.c:67:
+	struct ia64_sal_retval ret_stuff;
+	ret_stuff.status = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#627: FILE: arch/ia64/sn/kernel/io_init.c:71:
+			(u64) SN_SAL_IOIF_GET_PCIDEV_INFO,

CHECK:SPACING: No space is necessary after a cast
#628: FILE: arch/ia64/sn/kernel/io_init.c:72:
+			(u64) segment, (u64) bus_number, (u64) devfn,

CHECK:SPACING: No space is necessary after a cast
#629: FILE: arch/ia64/sn/kernel/io_init.c:73:
+			(u64) pci_dev,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pcidev_info)...) over kzalloc(sizeof(struct pcidev_info)...)
#659: FILE: arch/ia64/sn/kernel/io_init.c:210:
+	pcidev_info = kzalloc(sizeof(struct pcidev_info), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#661: FILE: arch/ia64/sn/kernel/io_init.c:212:
+	if (!pcidev_info)
+		panic("%s: Unable to alloc memory for pcidev_info", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#661: FILE: arch/ia64/sn/kernel/io_init.c:212:
+		panic("%s: Unable to alloc memory for pcidev_info", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sn_irq_info)...) over kzalloc(sizeof(struct sn_irq_info)...)
#663: FILE: arch/ia64/sn/kernel/io_init.c:214:
+	sn_irq_info = kzalloc(sizeof(struct sn_irq_info), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#665: FILE: arch/ia64/sn/kernel/io_init.c:216:
+	if (!sn_irq_info)
+		panic("%s: Unable to alloc memory for sn_irq_info", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#665: FILE: arch/ia64/sn/kernel/io_init.c:216:
+		panic("%s: Unable to alloc memory for sn_irq_info", __FUNCTION__);

CHECK:SPACING: No space is necessary after a cast
#668: FILE: arch/ia64/sn/kernel/io_init.c:219:
+	status = sal_get_pcidev_info((u64) pci_domain_nr(dev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: arch/ia64/sn/kernel/io_init.c:220:
+	status = sal_get_pcidev_info((u64) pci_domain_nr(dev),
+		(u64) dev->bus->number,

CHECK:SPACING: No space is necessary after a cast
#669: FILE: arch/ia64/sn/kernel/io_init.c:220:
+		(u64) dev->bus->number,

CHECK:SPACING: No space is necessary after a cast
#671: FILE: arch/ia64/sn/kernel/io_init.c:222:
+		(u64) __pa(pcidev_info),

CHECK:SPACING: No space is necessary after a cast
#672: FILE: arch/ia64/sn/kernel/io_init.c:223:
+		(u64) __pa(sn_irq_info));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: arch/ia64/sn/kernel/io_init.c:226:
+		BUG(); /* Cannot get platform pci device information */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#688: FILE: arch/ia64/sn/kernel/io_init.c:267:
+EXPORT_SYMBOL(sn_io_slot_fixup);

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: arch/ia64/sn/kernel/io_init.c:336:
+                sn_io_slot_fixup(pci_dev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/ia64/sn/kernel/io_init.c:336:
+                sn_io_slot_fixup(pci_dev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: arch/ia64/sn/pci/pcibr/pcibr_provider.c:24:
+                      char **ssdt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: arch/ia64/sn/pci/pcibr/pcibr_provider.c:24:
+                      char **ssdt)$

CHECK:SPACING: No space is necessary after a cast
#731: FILE: arch/ia64/sn/pci/pcibr/pcibr_provider.c:36:
+			busnum, (u64) device, (u64) resp, (u64)ia64_tpa(ssdt),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#772: FILE: include/asm-ia64/sn/pcidev.h:73:
+extern void sn_bus_fixup(struct pci_bus *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#772: FILE: include/asm-ia64/sn/pcidev.h:73:
+extern void sn_bus_fixup(struct pci_bus *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#773: FILE: include/asm-ia64/sn/pcidev.h:74:
+extern void sn_acpi_bus_fixup(struct pci_bus *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#773: FILE: include/asm-ia64/sn/pcidev.h:74:
+extern void sn_acpi_bus_fixup(struct pci_bus *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#774: FILE: include/asm-ia64/sn/pcidev.h:75:
+extern void sn_common_bus_fixup(struct pci_bus *, struct pcibus_bussoft *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#774: FILE: include/asm-ia64/sn/pcidev.h:75:
+extern void sn_common_bus_fixup(struct pci_bus *, struct pcibus_bussoft *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcibus_bussoft *' should also have an identifier name
#774: FILE: include/asm-ia64/sn/pcidev.h:75:
+extern void sn_common_bus_fixup(struct pci_bus *, struct pcibus_bussoft *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#779: FILE: include/asm-ia64/sn/pcidev.h:79:
+extern void sn_io_slot_fixup(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#779: FILE: include/asm-ia64/sn/pcidev.h:79:
+extern void sn_io_slot_fixup(struct pci_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#780: FILE: include/asm-ia64/sn/pcidev.h:80:
+extern void sn_acpi_slot_fixup(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#780: FILE: include/asm-ia64/sn/pcidev.h:80:
+extern void sn_acpi_slot_fixup(struct pci_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#781: FILE: include/asm-ia64/sn/pcidev.h:81:
+extern void sn_pci_fixup_slot(struct pci_dev *dev, struct pcidev_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pcidev_info *' should also have an identifier name
#781: FILE: include/asm-ia64/sn/pcidev.h:81:
+extern void sn_pci_fixup_slot(struct pci_dev *dev, struct pcidev_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sn_irq_info *' should also have an identifier name
#781: FILE: include/asm-ia64/sn/pcidev.h:81:
+extern void sn_pci_fixup_slot(struct pci_dev *dev, struct pcidev_info *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 80 warnings, 25 checks, 669 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000474094.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
