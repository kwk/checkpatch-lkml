WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#51: FILE: fs/Kconfig:1640:
+config NFS_V4_SECURITY_LABEL
+	bool "Provide Security Label support for NFSv4 client"
+	depends on NFS_V4 && SECURITY && EXPERIMENTAL
+	help
+	  Say Y here if you want label attribute support for NFS version 4.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#66: FILE: fs/Kconfig:1739:
+config NFSD_V4_SECURITY_LABEL
+	bool "Provide Security Label support for NFSv4 server"
+	depends on NFSD_V4 && SECURITY && EXPERIMENTAL
+	help
+	  If you would like to include support for label file attributes
+	  over NFSv4, say Y here.
+
+	  If unsure, say N.
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: fs/attr.c:28:
+^Iconst char *suffix = security_maclabel_getname() $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#114: FILE: fs/attr.c:38:
+		printk(KERN_ERR "%s() %s %d security_inode_setsecurity() %d\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#144: FILE: fs/attr.c:194:
+		char *key = (char *)security_maclabel_getname();
+		vfs_setxattr_locked(dentry, key,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/attr.c:195:
+		vfs_setxattr_locked(dentry, key,
+			attr->ia_label, attr->ia_label_len, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/nfs/dir.c:1247:
+			error = security_dentry_init_security(dentry,
+					attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#378: FILE: fs/nfs/dir.c:1260:
+	if (attr.ia_label != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#386: FILE: fs/nfs/dir.c:1268:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: fs/nfs/dir.c:1296:
+		status = security_dentry_init_security(dentry,
+				attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#413: FILE: fs/nfs/dir.c:1306:
+	if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#424: FILE: fs/nfs/dir.c:1317:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: fs/nfs/dir.c:1341:
+		error = security_dentry_init_security(dentry, attr.ia_mode,
+				&attr.ia_label, &attr.ia_label_len);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#452: FILE: fs/nfs/dir.c:1352:
+	if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#460: FILE: fs/nfs/dir.c:1360:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: fs/nfs/dir.c:1575:
+		error = security_dentry_init_security(dentry,
+				attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#492: FILE: fs/nfs/dir.c:1605:
+		if (attr.ia_label != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#503: FILE: fs/nfs/dir.c:1627:
+	if (attr.ia_label != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#639: FILE: fs/nfs/getroot.c:302:
+^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fattr->label != NULL'
#676: FILE: fs/nfs/inode.c:250:
+	if ((fattr->valid & NFS_ATTR_FATTR_V4) &&
+	    (fattr->bitmap[1] & FATTR4_WORD1_SECURITY_LABEL) &&
+	    (fattr->label != NULL) &&
+	    (inode->i_security != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_security != NULL'
#676: FILE: fs/nfs/inode.c:250:
+	if ((fattr->valid & NFS_ATTR_FATTR_V4) &&
+	    (fattr->bitmap[1] & FATTR4_WORD1_SECURITY_LABEL) &&
+	    (fattr->label != NULL) &&
+	    (inode->i_security != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fattr->label"
#678: FILE: fs/nfs/inode.c:252:
+	    (fattr->label != NULL) &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_security"
#679: FILE: fs/nfs/inode.c:253:
+	    (inode->i_security != NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#685: FILE: fs/nfs/inode.c:259:
+			printk(KERN_ERR

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#712: FILE: fs/nfs/inode.c:380:
+#define NFS_VALID_ATTRS (ATTR_MODE|ATTR_UID|ATTR_GID|ATTR_SIZE|ATTR_ATIME|ATTR_ATIME_SET|ATTR_MTIME|ATTR_MTIME_SET|ATTR_SECURITY_LABEL)
                                                                                                                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1015: FILE: fs/nfs/nfs4proc.c:1442:
+			int error;
+			error = security_dentry_init_security(dentry,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: fs/nfs/nfs4proc.c:1443:
+			error = security_dentry_init_security(dentry,
+					attr.ia_mode,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "attr.ia_label"
#1036: FILE: fs/nfs/nfs4proc.c:1460:
+	if (attr.ia_label != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1048: FILE: fs/nfs/nfs4proc.c:1537:
+		if (server->flags & NFS4_MOUNT_SECURITY_LABEL &&
+			res.attr_bitmask[1] & FATTR4_WORD1_SECURITY_LABEL) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1050: FILE: fs/nfs/nfs4proc.c:1539:
+		} else
[...]
+		server->attr_bitmask[1] &= ~FATTR4_WORD1_SECURITY_LABEL;

CHECK:BRACES: Unbalanced braces around else statement
#1050: FILE: fs/nfs/nfs4proc.c:1539:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1147: FILE: fs/nfs/nfs4proc.c:2093:
 	
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1325: FILE: fs/nfs/nfs4proc.c:2944:
+		err = nfs4_handle_exception(NFS_SERVER(inode),
+				_nfs4_get_security_label(inode, buf, buflen),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1332: FILE: fs/nfs/nfs4proc.c:2951:
+static int _nfs4_do_set_security_label(struct inode *inode,
+				      struct iattr *sattr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1356: FILE: fs/nfs/nfs4proc.c:2975:
+	if (nfs4_copy_delegation_stateid(&args.stateid, inode)) {
[...]
+	} else if (state != NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "state"
#1358: FILE: fs/nfs/nfs4proc.c:2977:
+	} else if (state != NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1361: FILE: fs/nfs/nfs4proc.c:2980:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "state"
#1365: FILE: fs/nfs/nfs4proc.c:2984:
+	if (status == 0 && state != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: fs/nfs/nfs4proc.c:2990:
+static int nfs4_do_set_security_label(struct inode *inode,
+				     struct iattr *sattr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1380: FILE: fs/nfs/nfs4proc.c:2999:
+		err = nfs4_handle_exception(NFS_SERVER(inode),
+			_nfs4_do_set_security_label(inode, sattr, fattr, state),

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#1415: FILE: fs/nfs/nfs4proc.c:3034:
+	if (ctx != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#1423: FILE: fs/nfs/nfs4proc.c:3042:
+	if (ctx != NULL)

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1566: FILE: fs/nfs/nfs4xdr.c:2968:
+static int decode_attr_security_label(struct xdr_stream *xdr, uint32_t *bitmap, char **ctx, u32 *ctxlen)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1568: FILE: fs/nfs/nfs4xdr.c:2970:
+	uint32_t len;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx"
#1579: FILE: fs/nfs/nfs4xdr.c:2981:
+			if (*ctx != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1581: FILE: fs/nfs/nfs4xdr.c:2983:
+					printk(KERN_ERR

CHECK:BRACES: Unbalanced braces around else statement
#1592: FILE: fs/nfs/nfs4xdr.c:2994:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1593: FILE: fs/nfs/nfs4xdr.c:2995:
+			printk(KERN_WARNING "%s: label too long (%u)!\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: fs/nfs/nfs4xdr.c:2996:
+			printk(KERN_WARNING "%s: label too long (%u)!\n",
+					__FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1594: FILE: fs/nfs/nfs4xdr.c:2996:
+					__FUNCTION__, len);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1607: FILE: fs/nfs/nfs4xdr.c:3234:
+	if ((status = decode_attr_security_label(xdr, bitmap,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <Opt_seclabel>
#1691: FILE: fs/nfs/super.c:78:
+	Opt_seclabel, Opt_noseclabel,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noseclabel>
#1691: FILE: fs/nfs/super.c:78:
+	Opt_seclabel, Opt_noseclabel,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nfss->nfs_client->rpc_ops->version == 4'
#1733: FILE: fs/nfs/super.c:497:
+	if ((nfss->nfs_client->rpc_ops->version == 4) &&
+	    (nfss->attr_bitmask[1] & FATTR4_WORD1_SECURITY_LABEL))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1735: FILE: fs/nfs/super.c:499:
+		seq_printf(m, ",security_label");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1747: FILE: fs/nfs/super.c:559:
+			seq_printf(m, ",security_label");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1857: FILE: fs/nfsd/nfs4xdr.c:1474:
+	BUG_ON(*buflen < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1920: FILE: fs/nfsd/nfs4xdr.c:1929:
+		status = nfsd4_encode_security_label(rqstp, dentry,
+				&p, &buflen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1942: FILE: fs/nfsd/vfs.c:1544:
+			char *key = (char *)security_maclabel_getname();
+			host_err = vfs_setxattr_locked(dnew, key,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1943: FILE: fs/nfsd/vfs.c:1545:
+			host_err = vfs_setxattr_locked(dnew, key,
+					iap->ia_label, iap->ia_label_len, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1962: FILE: fs/xattr.c:72:
+_vfs_setxattr(struct dentry *dentry, char *name, void *value,
+		size_t size, int flags, int lock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1997: FILE: fs/xattr.c:114:
+vfs_setxattr(struct dentry *dentry, char *name, void *value,
+		size_t size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2005: FILE: fs/xattr.c:122:
+vfs_setxattr_locked(struct dentry *dentry, char *name, void *value,
+			size_t size, int flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2057: FILE: include/linux/fs.h:1983:
+extern int inode_setsecurity(struct inode *inode, struct iattr *attr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BIT_MACRO: Prefer using the BIT macro
#2116: FILE: include/linux/nfs4.h:352:
+#define FATTR4_WORD1_SECURITY_LABEL	(1UL << 31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fattr->label"
#2145: FILE: include/linux/nfs_fs.h:352:
+	if (fattr->label == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2146: FILE: include/linux/nfs_fs.h:353:
+	if (fattr->label == NULL)
+		panic("Can't allocate security label.");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2152: FILE: include/linux/nfs_fs.h:359:
+static inline void _nfs_fattr_fini(struct nfs_fattr *fattr,
+		const char *file, int line, const char *func)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!label"
#2154: FILE: include/linux/nfs_fs.h:361:
+	if ((fattr)->label == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2156: FILE: include/linux/nfs_fs.h:363:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2163: FILE: include/linux/nfs_fs.h:370:
+			printk(KERN_WARNING

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2167: FILE: include/linux/nfs_fs.h:374:
+			printk(KERN_WARNING

CHECK:BIT_MACRO: Prefer using the BIT macro
#2193: FILE: include/linux/nfs_fs_sb.h:128:
+#define NFS_CAP_SECURITY_LABEL  (1U << 5)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2257: FILE: include/linux/nfsd/nfsd.h:313:
+ | FATTR4_WORD1_TIME_DELTA   ^I| FATTR4_WORD1_TIME_METADATA | FATTR4_WORD1_TIME_MODIFY     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2257: FILE: include/linux/nfsd/nfsd.h:313:
+ | FATTR4_WORD1_TIME_DELTA   ^I| FATTR4_WORD1_TIME_METADATA | FATTR4_WORD1_TIME_MODIFY     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2258: FILE: include/linux/nfsd/nfsd.h:314:
+ | FATTR4_WORD1_TIME_MODIFY_SET | FATTR4_WORD1_MOUNTED_ON_FILEID | FATTR4_WORD1_SECURITY_LABEL)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2267: FILE: include/linux/nfsd/nfsd.h:325:
+ | FATTR4_WORD1_TIME_ACCESS_SET | FATTR4_WORD1_TIME_METADATA | FATTR4_WORD1_TIME_MODIFY_SET \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2268: FILE: include/linux/nfsd/nfsd.h:326:
+ | FATTR4_WORD1_SECURITY_LABEL)$

WARNING:SPACING: Unnecessary space before function pointer arguments
#2280: FILE: include/linux/security.h:1267:
+	int (*dentry_init_security) (struct dentry *dentry, int mode,

WARNING:SPACING: Unnecessary space before function pointer arguments
#2289: FILE: include/linux/security.h:1399:
+	const char *(*maclabel_getname) (void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2314: FILE: include/linux/security.h:1829:
+static inline int security_dentry_init_security(struct dentry *dentry,
+						 int mode,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#2345: FILE: include/linux/xattr.h:53:
+int vfs_setxattr_locked(struct dentry *, char *, void *, size_t, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2345: FILE: include/linux/xattr.h:53:
+int vfs_setxattr_locked(struct dentry *, char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#2345: FILE: include/linux/xattr.h:53:
+int vfs_setxattr_locked(struct dentry *, char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#2345: FILE: include/linux/xattr.h:53:
+int vfs_setxattr_locked(struct dentry *, char *, void *, size_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2345: FILE: include/linux/xattr.h:53:
+int vfs_setxattr_locked(struct dentry *, char *, void *, size_t, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2358: FILE: security/dummy.c:272:
+static int dummy_dentry_init_security(struct dentry *dentry, int mode,
+				       void **ctx, u32 *ctxlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2403: FILE: security/security.c:329:
+int security_dentry_init_security(struct dentry *dentry,
+						 int mode,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2490: FILE: security/selinux/hooks.c:669:
+			printk(KERN_WARNING "%s: security_fs_use(%s) returned %d\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2491: FILE: security/selinux/hooks.c:670:
+			       __FUNCTION__, sb->s_type->name, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2528: FILE: security/selinux/hooks.c:912:
+			printk(KERN_WARNING "SELinux:  unknown mount option \"%s\"\n", p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2571: FILE: security/selinux/hooks.c:2403:
+			printk(KERN_WARNING "%s:  "

WARNING:SPLIT_STRING: quoted string split across lines
#2572: FILE: security/selinux/hooks.c:2404:
+			printk(KERN_WARNING "%s:  "
+			       "security_transition_sid failed, rc=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#2573: FILE: security/selinux/hooks.c:2405:
+			       __FUNCTION__, -rc);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2602: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2602: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2602: FILE: security/selinux/hooks.c:2762:
+ ^Iisec->sid = newsid;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2613: FILE: security/selinux/hooks.c:5226:
+      return XATTR_NAME_SELINUX;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2623: FILE: security/selinux/hooks.c:5318:
+^I.dentry_init_security = ^Iselinux_dentry_init_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2633: FILE: security/selinux/hooks.c:5418:
+^I.maclabel_getname =  ^I^Iselinux_maclabel_getname,$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2634: FILE: security/selinux/hooks.c:5419:
+        $

ERROR:CODE_INDENT: code indent should use tabs where possible
#2634: FILE: security/selinux/hooks.c:5419:
+        $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2634: FILE: security/selinux/hooks.c:5419:
+        $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 44 warnings, 61 checks, 2312 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000314242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
