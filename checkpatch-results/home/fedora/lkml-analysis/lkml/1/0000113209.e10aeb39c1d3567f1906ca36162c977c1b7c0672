CHECK:BIT_MACRO: Prefer using the BIT macro
#127: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:58:
+#define EHCA_SECTSIZE          (1UL << EHCA_SECTSHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:60:
+#define EHCA_HUGEPAGE_SIZE     (1UL << EHCA_HUGEPAGESHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:65:
+#define EHCA_MAP_ENTRIES (1 << EHCA_DIR_INDEX_SHIFT)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#149: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:80:
+};
+struct ehca_top_bmap {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#152: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:83:
+};
+struct ehca_bmap {

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1035:
+		u32 *rkey, /*OUT*/
+		int reg_busmap)

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1529:
+	unsigned long ret = idx;
+	ret |= dir << EHCA_DIR_INDEX_SHIFT;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entry' may be better as '(entry)' to avoid precedence issues
#271: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1534:
+#define ehca_bmap_valid(entry) \
+	((u64)entry != (u64)EHCA_INVAL_ADDR)

WARNING:LINE_SPACING: Missing a blank line after declarations
#284: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1547:
+	void *sectbase = ehca_calc_sectbase(top, dir, idx);
+	if ((unsigned long)sectbase & (pginfo->hwpage_size - 1)) {

WARNING:SPLIT_STRING: quoted string split across lines
#286: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1549:
+		ehca_err(&shca->ib_device, "reg_mr_section will probably fail:"
+					   "hwpage_size does not fit to "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#287: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1550:
+					   "hwpage_size does not fit to "
+					   "section start address");

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1556:
+		u64 rnum;
+		for (rnum = 0; (rnum < MAX_RPAGES) && (page < page_count);

WARNING:LINE_SPACING: Missing a blank line after declarations
#296: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1559:
+			void *pg = sectbase + ((page++) * pginfo->hwpage_size);
+			kpage[rnum] = virt_to_abs(pg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1563:
+		h_ret = hipz_h_register_rpage_mr(shca->ipz_hca_handle, mr,
+			ehca_encode_hwpage_size(pginfo->hwpage_size),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h_ret != H_SUCCESS'
#303: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1566:
+		if ((h_ret != H_SUCCESS) && (h_ret != H_PAGE_REGISTERED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h_ret != H_PAGE_REGISTERED'
#303: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1566:
+		if ((h_ret != H_SUCCESS) && (h_ret != H_PAGE_REGISTERED)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#324: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1587:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))
+				return hret;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#324: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1587:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#324: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1587:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#342: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1605:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))
+				return hret;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#342: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1605:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#342: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:1605:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == ehca_mr_len'
#388: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2214:
+	if ((size == ehca_mr_len) &&
+	    (iova_start == (void *)ehca_map_vaddr((void *)KERNELBASE))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ehca_bmap)...) over kmalloc(sizeof(struct ehca_bmap)...)
#463: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2387:
+		ehca_bmap = kmalloc(sizeof(struct ehca_bmap), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#474: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2398:
+		int ret;
+		top = ehca_calc_index(i, EHCA_TOP_INDEX_SHIFT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#518: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2442:
+		if (ehca_is_hugepage(pfn)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#527: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2451:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#562: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2486:
+		if ((hret != H_PAGE_REGISTERED) && (hret != H_SUCCESS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#562: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2486:
+		if ((hret != H_PAGE_REGISTERED) && (hret != H_SUCCESS))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#570: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2494:
+		return 0; /* Everything is fine */
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#570: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2494:
+	else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ehca_reg_bmap_mr_rpages', this function's name, in a string
#571: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2495:
+		ehca_err(&shca->ib_device, "ehca_reg_bmap_mr_rpages failed, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#572: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2496:
+		ehca_err(&shca->ib_device, "ehca_reg_bmap_mr_rpages failed, "
+				 "h_ret=%lli e_mr=%p top=%x lkey=%x "

WARNING:SPLIT_STRING: quoted string split across lines
#573: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2497:
+				 "h_ret=%lli e_mr=%p top=%x lkey=%x "
+				 "hca_hndl=%llx mr_hndl=%llx", hret, e_mr, top,

CHECK:BRACES: braces {} should be used on all arms of this statement
#602: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2526:
+	if (ehca_bmap_valid(entry)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#605: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2529:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#659: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2583:
+		u64 addr;
+		addr = ehca_map_vaddr(sg_virt(sg));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#728: FILE: drivers/infiniband/hw/ehca/ehca_mrmw.c:2652:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113209.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 23 checks, 685 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113209.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
