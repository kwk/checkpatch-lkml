WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#46: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: include/linux/memleak.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#52: FILE: include/linux/memleak.h:2:
+ * include/linux/memleak.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#67: FILE: include/linux/memleak.h:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: include/linux/memleak.h:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#76: FILE: include/linux/memleak.h:26:
+extern void memleak_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#77: FILE: include/linux/memleak.h:27:
+extern void memleak_alloc(const void *ptr, size_t size, int ref_count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#78: FILE: include/linux/memleak.h:28:
+extern void memleak_free(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/memleak.h:29:
+extern void memleak_padding(const void *ptr, unsigned long offset, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/memleak.h:30:
+extern void memleak_not_leak(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#81: FILE: include/linux/memleak.h:31:
+extern void memleak_ignore(const void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/memleak.h:32:
+extern void memleak_scan_area(const void *ptr, unsigned long offset, size_t length);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#146: FILE: mm/memleak.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#147: FILE: mm/memleak.c:2:
+ * mm/memleak.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#162: FILE: mm/memleak.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#163: FILE: mm/memleak.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#186: FILE: mm/memleak.c:41:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/thread_info.h> instead of <asm/thread_info.h>
#187: FILE: mm/memleak.c:42:
+#include <asm/thread_info.h>

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#188: FILE: mm/memleak.c:43:
+#include <asm/atomic.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: mm/memleak.c:164:
+		struct list_head *entry = pos;
+		list_add_tail(entry, &cache->free_list[cpu]);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: mm/memleak.c:209:
+	BUG_ON(page->free_nr[cpu] < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#377: FILE: mm/memleak.c:232:
+	BUG_ON(page->free_nr[cpu] > cache->objs_per_page);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#396: FILE: mm/memleak.c:251:
+	spinlock_t lock;

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: mm/memleak.c:343:
+	if (node) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: mm/memleak.c:349:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#531: FILE: mm/memleak.c:386:
+	BUG_ON(object->flags & OBJECT_ALLOCATED);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#608: FILE: mm/memleak.c:463:
+	 * prio search tree */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#653: FILE: mm/memleak.c:508:
+	BUG_ON(!(object->flags & OBJECT_ALLOCATED));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#750: FILE: mm/memleak.c:605:
+	pr_debug("%s(0x%p, %u, %d)\n", __FUNCTION__, ptr, size, ref_count);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#766: FILE: mm/memleak.c:621:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#782: FILE: mm/memleak.c:637:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#798: FILE: mm/memleak.c:653:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#814: FILE: mm/memleak.c:669:
+	pr_debug("%s(0x%p)\n", __FUNCTION__, ptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: mm/memleak.c:682:
+	BUG_ON(in_atomic());

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#827: FILE: mm/memleak.c:682:
+	BUG_ON(in_atomic());

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#855: FILE: mm/memleak.c:710:
+		 * pass a scanning threshold before being reported */

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#870: FILE: mm/memleak.c:725:
+		 * locks are enclosed by a mutex aquired in seq_open */
 		                                 ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#870: FILE: mm/memleak.c:725:
+		 * locks are enclosed by a mutex aquired in seq_open */

CHECK:BRACES: braces {} should be used on all arms of this statement
#880: FILE: mm/memleak.c:735:
+		if (color_gray(object)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#884: FILE: mm/memleak.c:739:
+		} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#939: FILE: mm/memleak.c:794:
+		 * 1 reference to any object at this point */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#992: FILE: mm/memleak.c:847:
+	 * because their use_count was increased */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1009: FILE: mm/memleak.c:864:
+	BUG_ON(!list_empty(&gray_list));

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1092: FILE: mm/memleak.c:947:
+	seq_printf(seq, "  backtrace:\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1106: FILE: mm/memleak.c:961:
+static struct seq_operations memleak_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1118: FILE: mm/memleak.c:973:
+static struct file_operations memleak_fops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1137: FILE: mm/memleak.c:992:
+	 * Scanning is only available later */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1148: FILE: mm/memleak.c:1003:
+	dentry = debugfs_create_file("memleak", S_IRUGO, NULL, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201788.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 32 warnings, 12 checks, 1094 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201788.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
