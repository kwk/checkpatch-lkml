WARNING:TYPO_SPELLING: 'useing' may be misspelled - perhaps 'using'?
#58: 
in principle be solvabel by useing the "setuids" mount option,
                            ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
> > Early this weak I sent a patch implementing posix acl permission checki=

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'fa0b9415cda17b31966542101bc4ceb0c97c87cb', maybe rebased or not pulled?
#147: 
> > commit fa0b9415cda17b31966542101bc4ceb0c97c87cb

WARNING:TYPO_SPELLING: 'permision' may be misspelled - perhaps 'permission'?
#151: 
> >     [CIFS] Adds support for permision checking vs. posix acl.
                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#254: 
nd it
^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#367: FILE: fs/cifs/cifsfs.c:52:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#374: FILE: fs/cifs/cifsfs.c:273:
 }
+static int cifs_check_acl(struct inode *inode, int mask)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#376: FILE: fs/cifs/cifsfs.c:275:
+	ssize_t rc =3D -EOPNOTSUPP;
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#376: FILE: fs/cifs/cifsfs.c:275:
+	ssize_t rc =3D -EOPNOTSUPP;
 	               ^

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#379: FILE: fs/cifs/cifsfs.c:278:
+	struct cifsTconInfo *pTcon;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#379: FILE: fs/cifs/cifsfs.c:278:
+	struct cifsTconInfo *pTcon;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#382: FILE: fs/cifs/cifsfs.c:281:
+	void *ea_value =3D NULL;
 	               ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#383: FILE: fs/cifs/cifsfs.c:282:
+	size_t buf_size =3D 0;
 	                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#387: FILE: fs/cifs/cifsfs.c:286:
+printk(KERN_NOTICE "cifs_check_acl: entering\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#387: FILE: fs/cifs/cifsfs.c:286:
+printk(KERN_NOTICE "cifs_check_acl: entering\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#389: FILE: fs/cifs/cifsfs.c:288:
+	sb =3D inode->i_sb;
 	   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#390: FILE: fs/cifs/cifsfs.c:289:
+	if (sb =3D=3D NULL) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#390: FILE: fs/cifs/cifsfs.c:289:
+	if (sb =3D=3D NULL) {
 	          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#390: FILE: fs/cifs/cifsfs.c:289:
+	if (sb =3D=3D NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#390: FILE: fs/cifs/cifsfs.c:289:
+	if (sb =3D=3D NULL) {
+		return -EIO;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#394: FILE: fs/cifs/cifsfs.c:293:
+	cifs_sb =3D CIFS_SB(sb);
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#395: FILE: fs/cifs/cifsfs.c:294:
+	pTcon =3D cifs_sb->tcon;
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#397: FILE: fs/cifs/cifsfs.c:296:
+	xid =3D GetXid();
 	    ^

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#397: FILE: fs/cifs/cifsfs.c:296:
+	xid =3D GetXid();

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#399: FILE: fs/cifs/cifsfs.c:298:
+	if (inode->i_dentry.next =3D=3D NULL) {
 	                         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#399: FILE: fs/cifs/cifsfs.c:298:
+	if (inode->i_dentry.next =3D=3D NULL) {
 	                            ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#399: FILE: fs/cifs/cifsfs.c:298:
+	if (inode->i_dentry.next =3D=3D NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <FreeXid>
#401: FILE: fs/cifs/cifsfs.c:300:
+		FreeXid(xid);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#405: FILE: fs/cifs/cifsfs.c:304:
+	dentry =3D list_first_entry(&(inode->i_dentry), struct dentry, d_alias);
 	       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_dentry
#405: FILE: fs/cifs/cifsfs.c:304:
+	dentry =3D list_first_entry(&(inode->i_dentry), struct dentry, d_alias);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#406: FILE: fs/cifs/cifsfs.c:305:
+	if (dentry =3D=3D NULL) {
 	           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#406: FILE: fs/cifs/cifsfs.c:305:
+	if (dentry =3D=3D NULL) {
 	              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#406: FILE: fs/cifs/cifsfs.c:305:
+	if (dentry =3D=3D NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#411: FILE: fs/cifs/cifsfs.c:310:
+printk(KERN_NOTICE "cifs_check_acl: got first dentry\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#411: FILE: fs/cifs/cifsfs.c:310:
+printk(KERN_NOTICE "cifs_check_acl: got first dentry\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#413: FILE: fs/cifs/cifsfs.c:312:
+	full_path =3D build_path_from_dentry(dentry);
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#414: FILE: fs/cifs/cifsfs.c:313:
+	if (full_path =3D=3D NULL) {
 	              ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#414: FILE: fs/cifs/cifsfs.c:313:
+	if (full_path =3D=3D NULL) {
 	                 ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: fs/cifs/cifsfs.c:313:
+	if (full_path =3D=3D NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#415: FILE: fs/cifs/cifsfs.c:314:
+		rc =3D -ENOMEM;
 		   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#415: FILE: fs/cifs/cifsfs.c:314:
+		rc =3D -ENOMEM;
 		       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#420: FILE: fs/cifs/cifsfs.c:319:
+printk(KERN_NOTICE "cifs_check_acl: got path '%s'\n", full_path);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#420: FILE: fs/cifs/cifsfs.c:319:
+printk(KERN_NOTICE "cifs_check_acl: got path '%s'\n", full_path);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#423: FILE: fs/cifs/cifsfs.c:322:
+		rc =3D -EOPNOTSUPP;
 		   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#423: FILE: fs/cifs/cifsfs.c:322:
+		rc =3D -EOPNOTSUPP;
 		       ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#427: FILE: fs/cifs/cifsfs.c:326:
+	ea_value =3D kmalloc(4096, GFP_KERNEL);
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#428: FILE: fs/cifs/cifsfs.c:327:
+	if (ea_value =3D=3D NULL) {
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#428: FILE: fs/cifs/cifsfs.c:327:
+	if (ea_value =3D=3D NULL) {
 	                ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#428: FILE: fs/cifs/cifsfs.c:327:
+	if (ea_value =3D=3D NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#429: FILE: fs/cifs/cifsfs.c:328:
+		rc =3D -ENOMEM;
 		   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#429: FILE: fs/cifs/cifsfs.c:328:
+		rc =3D -ENOMEM;
 		       ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#432: FILE: fs/cifs/cifsfs.c:331:
+	buf_size =3D (size_t)4096;

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#432: FILE: fs/cifs/cifsfs.c:331:
+	buf_size =3D (size_t)4096;
 	         ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#434: FILE: fs/cifs/cifsfs.c:333:
+printk(KERN_NOTICE "cifs_check_acl: allocated ea buffer (4096)\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#434: FILE: fs/cifs/cifsfs.c:333:
+printk(KERN_NOTICE "cifs_check_acl: allocated ea buffer (4096)\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#436: FILE: fs/cifs/cifsfs.c:335:
+	rc =3D CIFSSMBGetPosixACL(xid, pTcon, full_path, ea_value,
 	   ^

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBGetPosixACL>
#436: FILE: fs/cifs/cifsfs.c:335:
+	rc =3D CIFSSMBGetPosixACL(xid, pTcon, full_path, ea_value,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#440: FILE: fs/cifs/cifsfs.c:339:
+	if (rc =3D=3D -1) {
+printk(KERN_NOTICE "cifs_check_acl: error calling CIFSSMBGetPosixACL\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#440: FILE: fs/cifs/cifsfs.c:339:
+	if (rc =3D=3D -1) {
 	       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#440: FILE: fs/cifs/cifsfs.c:339:
+	if (rc =3D=3D -1) {
 	          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#440: FILE: fs/cifs/cifsfs.c:339:
+	if (rc =3D=3D -1) {
 	              ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#440: FILE: fs/cifs/cifsfs.c:339:
+	if (rc =3D=3D -1) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#441: FILE: fs/cifs/cifsfs.c:340:
+printk(KERN_NOTICE "cifs_check_acl: error calling CIFSSMBGetPosixACL\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#441: FILE: fs/cifs/cifsfs.c:340:
+printk(KERN_NOTICE "cifs_check_acl: error calling CIFSSMBGetPosixACL\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#445: FILE: fs/cifs/cifsfs.c:344:
+printk(KERN_NOTICE "cifs_check_ack: CIFSSMBGetPosixACL returned %d\n", rc);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#447: FILE: fs/cifs/cifsfs.c:346:
+	acl =3D posix_acl_from_xattr(ea_value, rc);
 	    ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#449: FILE: fs/cifs/cifsfs.c:348:
+	if (acl =3D=3D NULL) {
+printk(KERN_NOTICE "cifs_check_acl: error converting acl from ea buffer: N=

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#449: FILE: fs/cifs/cifsfs.c:348:
+	if (acl =3D=3D NULL) {
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#449: FILE: fs/cifs/cifsfs.c:348:
+	if (acl =3D=3D NULL) {
 	           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#449: FILE: fs/cifs/cifsfs.c:348:
+	if (acl =3D=3D NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#450: FILE: fs/cifs/cifsfs.c:349:
+printk(KERN_NOTICE "cifs_check_acl: error converting acl from ea buffer: N=

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#457: FILE: fs/cifs/cifsfs.c:355:
+printk(KERN_NOTICE "cifs_check_acl: error converting acl from ea buffer: I=
                                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#457: FILE: fs/cifs/cifsfs.c:355:
+printk(KERN_NOTICE "cifs_check_acl: error converting acl from ea buffer: I=
                                                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#457: FILE: fs/cifs/cifsfs.c:355:
+printk(KERN_NOTICE "cifs_check_acl: error converting acl from ea buffer: I=
                                                                           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#459: FILE: fs/cifs/cifsfs.c:356:
+		rc =3D PTR_ERR(acl);
 		   ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#463: FILE: fs/cifs/cifsfs.c:360:
+	rc =3D posix_acl_valid(acl);
 	   ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#464: FILE: fs/cifs/cifsfs.c:361:
+	if (rc !=3D 0) {
+printk(KERN_NOTICE "cifs_check_acl: acl is invalid\n");

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#464: FILE: fs/cifs/cifsfs.c:361:
+	if (rc !=3D 0) {
 	       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#465: FILE: fs/cifs/cifsfs.c:362:
+printk(KERN_NOTICE "cifs_check_acl: acl is invalid\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#465: FILE: fs/cifs/cifsfs.c:362:
+printk(KERN_NOTICE "cifs_check_acl: acl is invalid\n");

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#469: FILE: fs/cifs/cifsfs.c:366:
+	rc =3D posix_acl_permission(inode, acl, mask);
 	   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#472: FILE: fs/cifs/cifsfs.c:369:
+printk(KERN_NOTICE "cifs_check_acl: posix_acl_permission check gave: %d\n"=

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#472: FILE: fs/cifs/cifsfs.c:369:
+printk(KERN_NOTICE "cifs_check_acl: posix_acl_permission check gave: %d\n"=
                                                                           ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#472: FILE: fs/cifs/cifsfs.c:369:
+printk(KERN_NOTICE "cifs_check_acl: posix_acl_permission check gave: %d\n"=

ERROR:SPACING: spaces required around that '!=' (ctx:WxV)
#478: FILE: fs/cifs/cifsfs.c:374:
+	if (ea_value !=3D NULL) {
 	             ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#478: FILE: fs/cifs/cifsfs.c:374:
+	if (ea_value !=3D NULL) {
+		kfree(ea_value);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#482: FILE: fs/cifs/cifsfs.c:378:
+printk(KERN_NOTICE "cifs_check_acl: done, returning %d\n", rc);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cifs_check_acl', this function's name, in a string
#482: FILE: fs/cifs/cifsfs.c:378:
+printk(KERN_NOTICE "cifs_check_acl: done, returning %d\n", rc);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 47 errors, 29 warnings, 12 checks, 140 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
