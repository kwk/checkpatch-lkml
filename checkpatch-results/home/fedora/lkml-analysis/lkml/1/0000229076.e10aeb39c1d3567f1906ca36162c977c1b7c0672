CHECK:CAMELCASE: Avoid CamelCase: <__SetPageCgroup##uname>
#93: FILE: mm/memcontrol.c:189:
+static inline void __SetPageCgroup##uname(struct page_cgroup *pc)\

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageCgroup##uname>
#97: FILE: mm/memcontrol.c:193:
+static inline void __ClearPageCgroup##uname(struct page_cgroup *pc)	\

CHECK:CAMELCASE: Avoid CamelCase: <Cache>
#101: FILE: mm/memcontrol.c:197:
+TESTPCGFLAG(Cache, CACHE)

CHECK:CAMELCASE: Avoid CamelCase: <File>
#105: FILE: mm/memcontrol.c:201:
+TESTPCGFLAG(File, FILE)

CHECK:CAMELCASE: Avoid CamelCase: <Active>
#110: FILE: mm/memcontrol.c:206:
+TESTPCGFLAG(Active, ACTIVE)

CHECK:CAMELCASE: Avoid CamelCase: <Unevictable>
#115: FILE: mm/memcontrol.c:211:
+TESTPCGFLAG(Unevictable, UNEVICTABLE)

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultAnonFlag>
#119: FILE: mm/memcontrol.c:215:
+#define PcgDefaultAnonFlag	((1 << PCG_ACTIVE))

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultFileFlag>
#120: FILE: mm/memcontrol.c:216:
+#define PcgDefaultFileFlag	((1 << PCG_CACHE) | (1 << PCG_FILE))

CHECK:CAMELCASE: Avoid CamelCase: <PcgDefaultShmemFlag>
#121: FILE: mm/memcontrol.c:217:
+#define PcgDefaultShmemFlag	((1 << PCG_CACHE) | (1 << PCG_ACTIVE))

CHECK:BRACES: braces {} should be used on all arms of this statement
#149: FILE: mm/memcontrol.c:347:
+	if (PageCgroupUnevictable(pc))
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#172: FILE: mm/memcontrol.c:367:
+	if (PageCgroupUnevictable(pc))
[...]
 	else {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#255: FILE: mm/memcontrol.c:653:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#266: FILE: mm/memcontrol.c:762:
 	if ((ctype == MEM_CGROUP_CHARGE_TYPE_MAPPED)
+	    && ((PageCgroupCache(pc) || page_mapped(page))))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 12 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000229076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
