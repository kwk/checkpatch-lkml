CHECK:BRACES: Unbalanced braces around else statement
#108: FILE: fs/ocfs2/dlm/dlmdebug.c:296:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: fs/ocfs2/dlm/dlmdebug.c:406:
+	out = snprintf(buf, len, "LOCK:%d,%d,%d,%d,%d,%d:%lld,%d,%d,%d,%d,%d,"
+		       "%d,%d,%d,%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: braces {} should be used on all arms of this statement
#226: FILE: fs/ocfs2/dlm/dlmdebug.c:500:
+		if (!list_empty(&dlm->tracking_list)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: fs/ocfs2/dlm/dlmdebug.c:505:
+		} else

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#264: FILE: fs/ocfs2/dlm/dlmdebug.c:538:
+static struct seq_operations debug_lockres_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dl)...) over kzalloc(sizeof(struct debug_lockres)...)
#278: FILE: fs/ocfs2/dlm/dlmdebug.c:552:
+	dl = kzalloc(sizeof(struct debug_lockres), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#297: FILE: fs/ocfs2/dlm/dlmdebug.c:571:
+	seq = (struct seq_file *) file->private_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#323: FILE: fs/ocfs2/dlm/dlmdebug.c:597:
+static struct file_operations debug_lockres_fops = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#329: FILE: fs/ocfs2/dlm/dlmdebug.c:603:
+};
+/* end - debug lockres funcs */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#341: FILE: fs/ocfs2/dlm/dlmdebug.c:784:
+					    S_IFREG|S_IRUSR,
 					           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#341: FILE: fs/ocfs2/dlm/dlmdebug.c:784:
+					    S_IFREG|S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#357: FILE: fs/ocfs2/dlm/dlmdebug.c:806:
+		if (dc->debug_lockres_dentry)
+			debugfs_remove(dc->debug_lockres_dentry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 7 checks, 293 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
