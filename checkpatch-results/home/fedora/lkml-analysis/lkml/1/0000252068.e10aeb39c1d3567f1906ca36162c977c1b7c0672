WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
There's been a patch floating around for toshiba_acpi that exports an ad-hoc

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#35: 
patch everytime I upgraded my kernel, and today I see that mainline still lacks
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Particuarly' may be misspelled - perhaps 'Particularly'?
#47: 
with standardised interfaces. Particuarly, this applies to the handling of the
                              ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'Particuarly' may be misspelled - perhaps 'Particularly'?
#54: 
I've only been able to test on my Tecra M3. Particuarly helpful testing would be
                                            ^^^^^^^^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#139: FILE: drivers/acpi/toshiba_acpi.c:231:
+static acpi_status hci_write2(u32 reg, u32 in1, u32 in2, u32* result)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: drivers/acpi/toshiba_acpi.c:233:
+        u32 in[HCI_WORDS] = { HCI_SET, reg, in1, in2, 0, 0 };$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: drivers/acpi/toshiba_acpi.c:233:
+        u32 in[HCI_WORDS] = { HCI_SET, reg, in1, in2, 0, 0 };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: drivers/acpi/toshiba_acpi.c:234:
+        u32 out[HCI_WORDS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#142: FILE: drivers/acpi/toshiba_acpi.c:234:
+        u32 out[HCI_WORDS];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#143: FILE: drivers/acpi/toshiba_acpi.c:235:
+        acpi_status status = hci_raw(in, out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#143: FILE: drivers/acpi/toshiba_acpi.c:235:
+        acpi_status status = hci_raw(in, out);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: drivers/acpi/toshiba_acpi.c:236:
+        *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: drivers/acpi/toshiba_acpi.c:236:
+        *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: drivers/acpi/toshiba_acpi.c:237:
+        return status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: drivers/acpi/toshiba_acpi.c:237:
+        return status;$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#148: FILE: drivers/acpi/toshiba_acpi.c:240:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#148: FILE: drivers/acpi/toshiba_acpi.c:240:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#148: FILE: drivers/acpi/toshiba_acpi.c:240:
+static acpi_status hci_read2(u32 reg, u32* out1, u32* out2, u32* result)

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: drivers/acpi/toshiba_acpi.c:242:
+        u32 in[HCI_WORDS] = { HCI_GET, reg, *out1, *out2, 0, 0 };$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#150: FILE: drivers/acpi/toshiba_acpi.c:242:
+        u32 in[HCI_WORDS] = { HCI_GET, reg, *out1, *out2, 0, 0 };$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: drivers/acpi/toshiba_acpi.c:243:
+        u32 out[HCI_WORDS];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: drivers/acpi/toshiba_acpi.c:243:
+        u32 out[HCI_WORDS];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: drivers/acpi/toshiba_acpi.c:244:
+        acpi_status status = hci_raw(in, out);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: drivers/acpi/toshiba_acpi.c:244:
+        acpi_status status = hci_raw(in, out);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: drivers/acpi/toshiba_acpi.c:245:
+        *out1 = out[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: drivers/acpi/toshiba_acpi.c:245:
+        *out1 = out[2];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#154: FILE: drivers/acpi/toshiba_acpi.c:246:
+        *out2 = out[3];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#154: FILE: drivers/acpi/toshiba_acpi.c:246:
+        *out2 = out[3];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#155: FILE: drivers/acpi/toshiba_acpi.c:247:
+        *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: drivers/acpi/toshiba_acpi.c:247:
+        *result = (status == AE_OK) ? out[0] : HCI_FAILURE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: drivers/acpi/toshiba_acpi.c:248:
+        return status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: drivers/acpi/toshiba_acpi.c:248:
+        return status;$

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#167: FILE: drivers/acpi/toshiba_acpi.c:259:
+	struct mutex mutex;

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: drivers/acpi/toshiba_acpi.c:273:
+	u32 value, value2;
+	value = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#184: FILE: drivers/acpi/toshiba_acpi.c:276:
+	if (hci_result == HCI_SUCCESS) {
+		*present = (value & HCI_WIRELESS_BT_PRESENT) ? 1 : 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: drivers/acpi/toshiba_acpi.c:286:
+	u32 value, value2;
+	value = 0;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#218: FILE: drivers/acpi/toshiba_acpi.c:310:
+	if (result1 != HCI_SUCCESS || result2 != HCI_SUCCESS) {
+		return -EFAULT;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#237: FILE: drivers/acpi/toshiba_acpi.c:329:
+	if (hci_result != HCI_SUCCESS) {
+		return; /* Can't do anything useful */
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/acpi/toshiba_acpi.c:723:
+	toshiba_acpi.p_dev = platform_device_register_simple("toshiba_acpi",
+							      -1, NULL, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: drivers/acpi/toshiba_acpi.c:726:
+		printk(MY_ERR "unable to register platform device\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#303: FILE: drivers/acpi/toshiba_acpi.c:727:
+		toshiba_acpi.p_dev= NULL;
 		                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/acpi/toshiba_acpi.c:749:
+	toshiba_backlight_device = backlight_device_register("toshiba",
+						&toshiba_acpi.p_dev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: drivers/acpi/toshiba_acpi.c:765:
+		toshiba_acpi.rfk_dev = rfkill_allocate(&toshiba_acpi.p_dev->dev,
+							RFKILL_TYPE_BLUETOOTH);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#335: FILE: drivers/acpi/toshiba_acpi.c:767:
+			printk(MY_ERR "unable to allocate rfkill device\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: drivers/acpi/toshiba_acpi.c:782:
+			printk(MY_ERR "unable to register rfkill device\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#355: FILE: drivers/acpi/toshiba_acpi.c:787:
+		if (bt_get_on(&bt_on) == HCI_SUCCESS && bt_on) {
+			toshiba_acpi.rfk_dev->state = RFKILL_STATE_ON;
+		}

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#362: FILE: drivers/acpi/toshiba_acpi.c:794:
+			printk(MY_ERR "unable to allocate input device\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#378: FILE: drivers/acpi/toshiba_acpi.c:810:
+			printk(MY_ERR "unable to register input device\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 27 warnings, 4 checks, 305 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
