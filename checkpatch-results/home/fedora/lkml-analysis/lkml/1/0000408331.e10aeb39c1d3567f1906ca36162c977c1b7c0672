WARNING:TYPO_SPELLING: 'implemenation' may be misspelled - perhaps 'implementation'?
#60: 
Okay, so here's an implemenation.
                   ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#118: FILE: kernel/kexec.c:26:
+#include <linux/utsname.h> $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#128: FILE: kernel/kexec.c:39:
+unsigned int mkdfinfo_size = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: kernel/kexec.c:1170:
+^I$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#179: FILE: kernel/kexec.c:1179:
+#define SYMBOL(name) \
+	mkdfinfo_append_str("SYMBOL(%s)=%lx\n", #name, (unsigned long)&name)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#183: FILE: kernel/kexec.c:1183:
+#define OFFSET(name, field) \
+	mkdfinfo_append_str("OFFSET(%s.%s)=%d\n", #name, #field, &(((struct name *)0)->field))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#183: FILE: kernel/kexec.c:1183:
+#define OFFSET(name, field) \
+	mkdfinfo_append_str("OFFSET(%s.%s)=%d\n", #name, #field, &(((struct name *)0)->field))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#185: FILE: kernel/kexec.c:1185:
+#define LENGTH(name, field) \
+	mkdfinfo_append_str("LENGTH(%s.%s)=%d\n", #name, #field, sizeof(((struct name *)0)->field))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#185: FILE: kernel/kexec.c:1185:
+#define LENGTH(name, field) \
+	mkdfinfo_append_str("LENGTH(%s.%s)=%d\n", #name, #field, sizeof(((struct name *)0)->field))

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#190: FILE: kernel/kexec.c:1190:
+	extern char _stext;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: kernel/ksysfs.c:66:
+^Ireturn sprintf(page, "%lx %x\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: kernel/ksysfs.c:67:
+^I^I       __pa((unsigned long)(char *)&mkdfinfo_note), $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#273: FILE: kexec/crashdump-elf.c:37:
+	uint64_t mkdfinfo_addr, mkdfinfo_len;

ERROR:SPACING: space prohibited after that open parenthesis '('
#283: FILE: kexec/crashdump-elf.c:50:
+	if (get_kernel_mkdfinfo( &mkdfinfo_addr, &mkdfinfo_len) == 0) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#283: FILE: kexec/crashdump-elf.c:50:
+	if (get_kernel_mkdfinfo( &mkdfinfo_addr, &mkdfinfo_len) == 0) {
+		has_mkdfinfo = 1;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#300: FILE: kexec/crashdump-elf.c:160:
+		phdr->p_offset  = phdr->p_paddr = mkdfinfo_addr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#302: FILE: kexec/crashdump-elf.c:162:
+		phdr->p_filesz	= phdr->p_memsz	= mkdfinfo_len;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#323: FILE: kexec/crashdump.c:113:
+int get_kernel_mkdfinfo(uint64_t *addr, uint64_t *len)

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#344: FILE: kexec/crashdump.c:134:
+	count = sscanf(line, "%Lx %Lx", &temp, &temp2);

CHECK:SPACING: No space is necessary after a cast
#348: FILE: kexec/crashdump.c:138:
+	*addr = (uint64_t) temp;

CHECK:SPACING: No space is necessary after a cast
#349: FILE: kexec/crashdump.c:139:
+	*len = (uint64_t) temp2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#361: FILE: kexec/crashdump.h:5:
+extern int get_kernel_mkdfinfo(uint64_t *addr, uint64_t *len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#361: FILE: kexec/crashdump.h:5:
+extern int get_kernel_mkdfinfo(uint64_t *addr, uint64_t *len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 4 warnings, 13 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408331.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
