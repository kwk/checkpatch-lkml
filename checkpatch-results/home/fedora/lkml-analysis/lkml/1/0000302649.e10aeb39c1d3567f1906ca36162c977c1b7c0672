WARNING:TYPO_SPELLING: 'managable' may be misspelled - perhaps 'manageable'?
#29: 
[mszeredi@suse.cz] split big patch into managable chunks
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#59: FILE: fs/dcache.c:1750:
+static int prepend(char **buffer, int *buflen, const char *str,
+			  int namelen)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#85: FILE: fs/dcache.c:1783:
+	if (!IS_ROOT(dentry) && d_unhashed(dentry) &&
[...]
 			goto Elong;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#86: FILE: fs/dcache.c:1784:
+	if (!IS_ROOT(dentry) && d_unhashed(dentry) &&
+		(prepend(&end, &buflen, " (deleted)", 10) != 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#101: FILE: fs/dcache.c:1813:
+		if ((prepend(&end, &buflen, dentry->d_name.name,
+				dentry->d_name.len) != 0) ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#148: FILE: fs/dcache.c:1902:
+	if (!IS_ROOT(dentry) && d_unhashed(dentry) &&
[...]
+			goto Elong;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: fs/dcache.c:1903:
+	if (!IS_ROOT(dentry) && d_unhashed(dentry) &&
+		(prepend(&end, &buflen, "//deleted", 9) != 0))

CHECK:CAMELCASE: Avoid CamelCase: <Elong>
#150: FILE: fs/dcache.c:1904:
+			goto Elong;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#154: FILE: fs/dcache.c:1908:
+	retval = end-1;
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: fs/dcache.c:1913:
+		struct dentry *parent;
+		if (IS_ROOT(dentry))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/dcache.c:1920:
+		if ((prepend(&end, &buflen, dentry->d_name.name,
+				dentry->d_name.len) != 0) ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: fs/seq_file.c:349:
+		char c = *p++;
+		if (!c) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#214: FILE: fs/seq_file.c:355:
+			break;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#269: FILE: fs/seq_file.c:395:
+		char *p = dentry_path(dentry, s, m->size - m->count);
+		if (!IS_ERR(p)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#293: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#293: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#293: FILE: include/linux/dcache.h:305:
+extern char *dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#313: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#313: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#313: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302649.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 8 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000302649.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
