WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/ceph/super.c:1:
+#include <linux/backing-dev.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#72: FILE: fs/ceph/super.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#80: FILE: fs/ceph/super.c:35:
+	while (e != s && *(e-1) != '/')
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: fs/ceph/super.c:40:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#93: FILE: fs/ceph/super.c:48:
+	dout("put_super\n");
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:RETURN_VOID: void function return statements are not generally useful
#96: FILE: fs/ceph/super.c:51:
+	return;
+}

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#106: FILE: fs/ceph/super.c:61:
+	dout("statfs\n");
 	^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#119: FILE: fs/ceph/super.c:74:
+	buf->f_blocks = le64_to_cpu(st.kb) >> (CEPH_BLOCK_SHIFT-10);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#121: FILE: fs/ceph/super.c:76:
+		(CEPH_BLOCK_SHIFT-10);
 		                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#122: FILE: fs/ceph/super.c:77:
+	buf->f_bavail = le64_to_cpu(st.kb_avail) >> (CEPH_BLOCK_SHIFT-10);
 	                                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#137: FILE: fs/ceph/super.c:92:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#140: FILE: fs/ceph/super.c:95:
+	dout("sync_fs %d\n", wait);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#146: FILE: fs/ceph/super.c:101:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#189: FILE: fs/ceph/super.c:144:
+	struct ceph_inode_info *ci = foo;
+	inode_init_once(&ci->vfs_inode);

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#196: FILE: fs/ceph/super.c:151:
+					      0, (SLAB_RECLAIM_ACCOUNT|
 					                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ceph_inode_cachep"
#199: FILE: fs/ceph/super.c:154:
+	if (ceph_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#204: FILE: fs/ceph/super.c:159:
+					    0, (SLAB_RECLAIM_ACCOUNT|
 					                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ceph_cap_cachep"
#207: FILE: fs/ceph/super.c:162:
+	if (ceph_cap_cachep == NULL)

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#212: FILE: fs/ceph/super.c:167:
+					       0, (SLAB_RECLAIM_ACCOUNT|
 					                               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ceph_dentry_cachep"
#215: FILE: fs/ceph/super.c:170:
+	if (ceph_dentry_cachep == NULL)

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#220: FILE: fs/ceph/super.c:175:
+					     0, (SLAB_RECLAIM_ACCOUNT|
 					                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ceph_file_cachep"
#223: FILE: fs/ceph/super.c:178:
+	if (ceph_file_cachep == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: fs/ceph/super.c:200:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'down'
#247: FILE: fs/ceph/super.c:202:
+ * ceph_umount_begin - initiate forced umount.  Tear down down the

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#254: FILE: fs/ceph/super.c:209:
+	dout("ceph_umount_begin - starting forced umount\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_umount_begin', this function's name, in a string
#254: FILE: fs/ceph/super.c:209:
+	dout("ceph_umount_begin - starting forced umount\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:RETURN_VOID: void function return statements are not generally useful
#259: FILE: fs/ceph/super.c:214:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#272: FILE: fs/ceph/super.c:227:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#305: FILE: fs/ceph/super.c:260:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fsidmajor>
#310: FILE: fs/ceph/super.c:265:
+	Opt_fsidmajor,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_fsidminor>
#311: FILE: fs/ceph/super.c:266:
+	Opt_fsidminor,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_monport>
#312: FILE: fs/ceph/super.c:267:
+	Opt_monport,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#313: FILE: fs/ceph/super.c:268:
+	Opt_port,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wsize>
#314: FILE: fs/ceph/super.c:269:
+	Opt_wsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rsize>
#315: FILE: fs/ceph/super.c:270:
+	Opt_rsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_osdtimeout>
#316: FILE: fs/ceph/super.c:271:
+	Opt_osdtimeout,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mount_timeout>
#317: FILE: fs/ceph/super.c:272:
+	Opt_mount_timeout,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_caps_wanted_delay_min>
#318: FILE: fs/ceph/super.c:273:
+	Opt_caps_wanted_delay_min,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_caps_wanted_delay_max>
#319: FILE: fs/ceph/super.c:274:
+	Opt_caps_wanted_delay_max,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_readdir_max_entries>
#320: FILE: fs/ceph/super.c:275:
+	Opt_readdir_max_entries,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_snapdirname>
#322: FILE: fs/ceph/super.c:277:
+	Opt_snapdirname,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_secret>
#323: FILE: fs/ceph/super.c:278:
+	Opt_secret,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ip>
#325: FILE: fs/ceph/super.c:280:
+	Opt_ip,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noshare>
#326: FILE: fs/ceph/super.c:281:
+	Opt_noshare,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_dirstat>
#327: FILE: fs/ceph/super.c:282:
+	Opt_dirstat,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nodirstat>
#328: FILE: fs/ceph/super.c:283:
+	Opt_nodirstat,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rbytes>
#329: FILE: fs/ceph/super.c:284:
+	Opt_rbytes,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_norbytes>
#330: FILE: fs/ceph/super.c:285:
+	Opt_norbytes,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nocrc>
#331: FILE: fs/ceph/super.c:286:
+	Opt_nocrc,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noasyncreaddir>
#332: FILE: fs/ceph/super.c:287:
+	Opt_noasyncreaddir,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#362: FILE: fs/ceph/super.c:317:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#367: FILE: fs/ceph/super.c:322:
+#define ADDR_DELIM(c) ((!c) || (c == ':') || (c == ','))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'c' may be better as '(c)' to avoid precedence issues
#367: FILE: fs/ceph/super.c:322:
+#define ADDR_DELIM(c) ((!c) || (c == ':') || (c == ','))

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#376: FILE: fs/ceph/super.c:331:
+	dout("parse_ips on '%.*s'\n", (int)(end-c), c);
 	^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#376: FILE: fs/ceph/super.c:331:
+	dout("parse_ips on '%.*s'\n", (int)(end-c), c);
 	                                       ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ips', this function's name, in a string
#376: FILE: fs/ceph/super.c:331:
+	dout("parse_ips on '%.*s'\n", (int)(end-c), c);

CHECK:BRACES: braces {} should be used on all arms of this statement
#387: FILE: fs/ceph/super.c:342:
+		if (p < end && *p == ':') {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#398: FILE: fs/ceph/super.c:353:
+		} else

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#401: FILE: fs/ceph/super.c:356:
+		dout("parse_ips got %u.%u.%u.%u:%u\n",
 		^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ips', this function's name, in a string
#401: FILE: fs/ceph/super.c:356:
+		dout("parse_ips got %u.%u.%u.%u:%u\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_ips', this function's name, in a string
#419: FILE: fs/ceph/super.c:374:
+	pr_err("ceph parse_ips bad ip '%s'\n", c);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#435: FILE: fs/ceph/super.c:390:
+	dout("parse_mount_args dev_name '%s'\n", dev_name);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_mount_args', this function's name, in a string
#435: FILE: fs/ceph/super.c:390:
+	dout("parse_mount_args dev_name '%s'\n", dev_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#453: FILE: fs/ceph/super.c:408:
+	if (*path == NULL) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#467: FILE: fs/ceph/super.c:422:
+			       num_mon*sizeof(client->monc.monmap->mon_inst[0]),
 			              ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#488: FILE: fs/ceph/super.c:443:
+	dout("server path '%s'\n", *path);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#493: FILE: fs/ceph/super.c:448:
+		int token, intval, ret;
+		if (!*c)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#500: FILE: fs/ceph/super.c:455:
+
+		}

WARNING:SPLIT_STRING: quoted string split across lines
#505: FILE: fs/ceph/super.c:460:
+				pr_err("ceph bad mount option arg (not int) "
+				       "at '%s'\n", c);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#508: FILE: fs/ceph/super.c:463:
+			dout("got token %d intval %d\n", token, intval);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: fs/ceph/super.c:488:
+			args->snapdir_name = kstrndup(argstr[0].from,
+					      argstr[0].to-argstr[0].from,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#533: FILE: fs/ceph/super.c:488:
+					      argstr[0].to-argstr[0].from,
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#538: FILE: fs/ceph/super.c:493:
+						argstr[0].to-argstr[0].from,
 						            ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#589: FILE: fs/ceph/super.c:544:
+			BUG_ON(token);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#613: FILE: fs/ceph/super.c:568:
+	if (client == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->wb_wq"
#632: FILE: fs/ceph/super.c:587:
+	if (client->wb_wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->pg_inv_wq"
#635: FILE: fs/ceph/super.c:590:
+	if (client->pg_inv_wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->trunc_wq"
#638: FILE: fs/ceph/super.c:593:
+	if (client->trunc_wq == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#666: FILE: fs/ceph/super.c:621:
+	dout("destroy_client %p\n", client);
 	^^^^

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#683: FILE: fs/ceph/super.c:638:
+	if (client->wb_pagevec_pool)
+		mempool_destroy(client->wb_pagevec_pool);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#688: FILE: fs/ceph/super.c:643:
+	dout("destroy_client %p done\n", client);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#713: FILE: fs/ceph/super.c:668:
+	dout("open_root_inode opening '%s'\n", path);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#726: FILE: fs/ceph/super.c:681:
+		dout("open_root_inode success\n");
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->sb->s_root"
#728: FILE: fs/ceph/super.c:683:
+		    client->sb->s_root == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#733: FILE: fs/ceph/super.c:688:
+		dout("open_root_inode success, root dentry is %p\n", root);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#753: FILE: fs/ceph/super.c:708:
+	dout("mount start\n");
 	^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client->msgr"
#757: FILE: fs/ceph/super.c:712:
+	if (client->msgr == NULL) {

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#780: FILE: fs/ceph/super.c:735:
+		dout("mount waiting for mount\n");
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: fs/ceph/super.c:737:
+		err = wait_event_interruptible_timeout(client->mount_wq,
+			       client->mount_err || have_mon_map(client),

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#792: FILE: fs/ceph/super.c:747:
+	dout("mount opening root\n");
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#806: FILE: fs/ceph/super.c:761:
+		dout("mount opening base mountpoint\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#820: FILE: fs/ceph/super.c:775:
+	dout("mount success\n");
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#833: FILE: fs/ceph/super.c:788:
+	dout("set_super %p data %p\n", s, data);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#868: FILE: fs/ceph/super.c:823:
+	dout("ceph_compare_super %p\n", sb);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_compare_super', this function's name, in a string
#868: FILE: fs/ceph/super.c:823:
+	dout("ceph_compare_super %p\n", sb);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#871: FILE: fs/ceph/super.c:826:
+			dout("fsid doesn't match\n");
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#878: FILE: fs/ceph/super.c:833:
+			if (ceph_monmap_contains(other->monc.monmap,
+					 &new->monc.monmap->mon_inst[i].addr))

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#881: FILE: fs/ceph/super.c:836:
+			dout("mon ip not part of monmap\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#884: FILE: fs/ceph/super.c:839:
+		dout("mon ip matches existing sb %p\n", sb);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#887: FILE: fs/ceph/super.c:842:
+		dout("flags differ\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#928: FILE: fs/ceph/super.c:883:
+	dout("ceph_get_sb\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_get_sb', this function's name, in a string
#928: FILE: fs/ceph/super.c:883:
+	dout("ceph_get_sb\n");

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#950: FILE: fs/ceph/super.c:905:
+		dout("get_sb got existing client %p\n", client);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#952: FILE: fs/ceph/super.c:907:
+		dout("get_sb using new client %p\n", client);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: fs/ceph/super.c:912:
+		client->wb_pagevec_pool = mempool_create_kmalloc_pool(10,
+			      client->mount_args.wsize >> PAGE_CACHE_SHIFT);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#969: FILE: fs/ceph/super.c:924:
+	dout("root %p inode %p ino %llx.%llx\n", mnt->mnt_root,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#982: FILE: fs/ceph/super.c:937:
+	dout("ceph_get_sb fail %d\n", err);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_get_sb', this function's name, in a string
#982: FILE: fs/ceph/super.c:937:
+	dout("ceph_get_sb fail %d\n", err);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#989: FILE: fs/ceph/super.c:944:
+	dout("kill_sb %p\n", s);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#989: FILE: fs/ceph/super.c:944:
+	struct ceph_client *client = ceph_sb_to_client(s);
+	dout("kill_sb %p\n", s);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1045: FILE: fs/ceph/super.c:1000:
+	dout("exit_ceph\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exit_ceph', this function's name, in a string
#1045: FILE: fs/ceph/super.c:1000:
+	dout("exit_ceph\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 52 warnings, 61 checks, 1015 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
