WARNING:TYPO_SPELLING: 'extraced' may be misspelled - perhaps 'extracted'?
#57: 
The code has been extraced from Ingo's exec-shield patch
                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#73: FILE: arch/ia64/ia32/binfmt_elf32.c:229:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#73: FILE: arch/ia64/ia32/binfmt_elf32.c:229:
+elf32_map (struct file *filep, unsigned long addr, struct elf_phdr *eppnt, int prot, int type, unsigned long unused)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: arch/x86/kernel/sys_x86_64.c:153:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#115: FILE: arch/x86/kernel/sys_x86_64.c:155:
+arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: arch/x86/kernel/sys_x86_64.c:156:
+arch_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
+			  const unsigned long len, const unsigned long pgoff,

WARNING:TYPO_SPELLING: 'legact' may be misspelled - perhaps 'legacy'?
#130: FILE: arch/x86/kernel/sys_x86_64.c:170:
+	/* for MAP_32BIT mappings we force the legact mmap base */
 	                                       ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/x86/kernel/sys_x86_64.c:179:
+		if (TASK_SIZE - len >= addr &&
+				(!vma || addr + len <= vma->vm_start))

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: arch/x86/kernel/sys_x86_64.c:185:
+ ^I        mm->cached_hole_size = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: arch/x86/kernel/sys_x86_64.c:185:
+ ^I        mm->cached_hole_size = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: arch/x86/kernel/sys_x86_64.c:185:
+ ^I        mm->cached_hole_size = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: arch/x86/kernel/sys_x86_64.c:186:
+ ^I^Imm->free_area_cache = mm->mmap_base;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#146: FILE: arch/x86/kernel/sys_x86_64.c:186:
+ ^I^Imm->free_area_cache = mm->mmap_base;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/x86/kernel/sys_x86_64.c:186:
+ ^I^Imm->free_area_cache = mm->mmap_base;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: arch/x86/kernel/sys_x86_64.c:187:
+ ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#147: FILE: arch/x86/kernel/sys_x86_64.c:187:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/x86/kernel/sys_x86_64.c:187:
+ ^I}$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#154: FILE: arch/x86/kernel/sys_x86_64.c:194:
+		vma = find_vma(mm, addr-len);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#157: FILE: arch/x86/kernel/sys_x86_64.c:197:
+			return (mm->free_area_cache = addr-len);
 			                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: arch/x86/kernel/sys_x86_64.c:203:
+	addr = mm->mmap_base-len;
 	                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#172: FILE: arch/x86/kernel/sys_x86_64.c:212:
+		if (!vma || addr+len <= vma->vm_start)
 		                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#176: FILE: arch/x86/kernel/sys_x86_64.c:216:
+ ^I^I/* remember the largest hole we saw so far */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#176: FILE: arch/x86/kernel/sys_x86_64.c:216:
+ ^I^I/* remember the largest hole we saw so far */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: arch/x86/kernel/sys_x86_64.c:216:
+ ^I^I/* remember the largest hole we saw so far */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#177: FILE: arch/x86/kernel/sys_x86_64.c:217:
+ ^I^Iif (addr + mm->cached_hole_size < vma->vm_start)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#177: FILE: arch/x86/kernel/sys_x86_64.c:217:
+ ^I^Iif (addr + mm->cached_hole_size < vma->vm_start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: arch/x86/kernel/sys_x86_64.c:217:
+ ^I^Iif (addr + mm->cached_hole_size < vma->vm_start)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: arch/x86/kernel/sys_x86_64.c:218:
+ ^I^I        mm->cached_hole_size = vma->vm_start - addr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: arch/x86/kernel/sys_x86_64.c:218:
+ ^I^I        mm->cached_hole_size = vma->vm_start - addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: arch/x86/kernel/sys_x86_64.c:218:
+ ^I^I        mm->cached_hole_size = vma->vm_start - addr;$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#181: FILE: arch/x86/kernel/sys_x86_64.c:221:
+		addr = vma->vm_start-len;
 		                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: arch/x86/kernel/sys_x86_64.c:232:
+  ^Imm->free_area_cache = TASK_UNMAPPED_BASE;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#192: FILE: arch/x86/kernel/sys_x86_64.c:232:
+  ^Imm->free_area_cache = TASK_UNMAPPED_BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: arch/x86/kernel/sys_x86_64.c:232:
+  ^Imm->free_area_cache = TASK_UNMAPPED_BASE;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#193: FILE: arch/x86/kernel/sys_x86_64.c:233:
+	addr = arch_get_unmapped_area(filp, addr0, len, pgoff, flags);
 	                              ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#203: FILE: arch/x86/kernel/sys_x86_64.c:243:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#214: FILE: arch/x86/mm/mmap_64.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#238: FILE: arch/x86/mm/mmap_64.c:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#239: FILE: arch/x86/mm/mmap_64.c:26:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: arch/x86/mm/mmap_64.c:42:
+#define MIN_GAP (128*1024*1024)
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#257: FILE: arch/x86/mm/mmap_64.c:42:
+#define MIN_GAP (128*1024*1024)
                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#258: FILE: arch/x86/mm/mmap_64.c:43:
+#define MAX_GAP (TASK_SIZE/6*5)
                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#258: FILE: arch/x86/mm/mmap_64.c:43:
+#define MAX_GAP (TASK_SIZE/6*5)
                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#311: FILE: arch/x86/mm/mmap_64.c:88:
+		   (total user address space is 47bits) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: space required before the open parenthesis '('
#327: FILE: arch/x86/mm/mmap_64.c:101:
+	} else if(mmap_is_legacy()) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#338: FILE: arch/x86/mm/mmap_64.c:112:
+	if (current->flags & PF_RANDOMIZE) {
+		mm->mmap_base += ((long)rnd) << PAGE_SHIFT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#351: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned long);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#351: FILE: fs/binfmt_elf.c:48:
+static unsigned long elf_map (struct file *, unsigned long, struct elf_phdr *, int, int, unsigned long);

WARNING:LINE_SPACING: Missing a blank line after declarations
#367: FILE: fs/binfmt_elf.c:307:
+	unsigned long off = eppnt->p_offset - ELF_PAGEOFFSET(eppnt->p_vaddr);
+	addr = ELF_PAGESTART(addr);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#384: FILE: fs/binfmt_elf.c:317:
+	/*
+	* total_size is the size of the ELF (interpreter) image.

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: fs/binfmt_elf.c:324:
+	if (total_size) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#395: FILE: fs/binfmt_elf.c:328:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#395: FILE: fs/binfmt_elf.c:328:
+			do_munmap(current->mm, map_addr+size, total_size-size);
 			                                                ^

CHECK:BRACES: Unbalanced braces around else statement
#396: FILE: fs/binfmt_elf.c:329:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: fs/binfmt_elf.c:356:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#500: FILE: fs/binfmt_elf.c:877:
+	   the correct location in memory. */

ERROR:SPACING: space required after that ',' (ctx:VxV)
#517: FILE: fs/binfmt_elf.c:939:
+				elf_prot, elf_flags,0);
 				                   ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#531: FILE: fs/binfmt_elf.c:1019:
+			unsigned long uninitialized_var(interp_map_addr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'interp_map_addr' should also have an identifier name
#531: FILE: fs/binfmt_elf.c:1019:
+			unsigned long uninitialized_var(interp_map_addr);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 30 warnings, 18 checks, 461 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
