WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#35: 
hash table; If not found in the hash table, (first occurence), read in
                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#104: FILE: checkpoint/files.c:407:
+		return (struct file *) h;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#105: FILE: checkpoint/files.c:408:
+	fname = (char *) (h + 1);

CHECK:SPACING: No space is necessary after a cast
#150: FILE: checkpoint/files.c:453:
+	fmode_t new_mode = (__force fmode_t) file->f_mode;

CHECK:SPACING: No space is necessary after a cast
#151: FILE: checkpoint/files.c:454:
+	fmode_t saved_mode = (__force fmode_t) h->f_mode;

WARNING:SPACING: Unnecessary space before function pointer arguments
#212: FILE: checkpoint/files.c:515:
+	struct file * (*restore) (struct ckpt_ctx *ctx,

CHECK:SPACING: No space is necessary after a cast
#244: FILE: checkpoint/files.c:547:
+		return (struct file *) h;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: checkpoint/files.c:549:
+	ckpt_debug("flags %#x mode %#x type %d\n",
+		 h->f_flags, h->f_mode, h->f_type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#252: FILE: checkpoint/files.c:555:
+	BUG_ON(ops->file_type != h->f_type);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#264: FILE: checkpoint/files.c:567:
+	return (void *) do_restore_file(ctx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: checkpoint/files.c:588:
+	ckpt_debug("ref %d fd %d c.o.e %d\n",
+		 h->fd_objref, h->fd_descriptor, h->fd_close_on_exec);

CHECK:SPACING: No space is necessary after a cast
#331: FILE: checkpoint/files.c:634:
+		return (struct files_struct *) h;

CHECK:SPACING: No space is necessary after a cast
#369: FILE: checkpoint/files.c:672:
+	return (void *) do_restore_file_table(ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#456: FILE: include/linux/checkpoint.h:131:
+extern int restore_obj_file_table(struct ckpt_ctx *ctx, int files_objref);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/checkpoint.h:133:
+extern void *restore_file_table(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#463: FILE: include/linux/checkpoint.h:138:
+extern struct file *restore_open_fname(struct ckpt_ctx *ctx, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/checkpoint.h:141:
+extern void *restore_file(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/linux/checkpoint.h:145:
+extern int restore_file_common(struct ckpt_ctx *ctx, struct file *file,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 15 checks, 387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000093832.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
