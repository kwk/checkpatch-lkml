WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#170: FILE: drivers/mmc/host/atmel-mci.c:112:
+ * CMDRDY interupt must be disabled and @cmd_status updated with a
           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#177: FILE: drivers/mmc/host/atmel-mci.c:118:
+	spinlock_t		lock;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#329: FILE: drivers/mmc/host/atmel-mci.c:362:
+	node = debugfs_create_file("req", S_IRUSR, root, slot, &atmci_req_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: drivers/mmc/host/atmel-mci.c:417:
+	dev_vdbg(&slot->mmc->class_dev, "setting timeout to %u cycles\n",
 			dtocyc << dtomul_to_shift[dtomul]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: drivers/mmc/host/atmel-mci.c:475:
+	dev_vdbg(&host->pdev->dev,
 			"start command: ARGR=0x%08x CMDR=0x%08x\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#430: FILE: drivers/mmc/host/atmel-mci.c:512:
+	if (data->blocks * data->blksz < 12
+			|| (data->blocks * data->blksz) & 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: drivers/mmc/host/atmel-mci.c:526:
+static void atmci_start_request(struct atmel_mci *host,
+		struct atmel_mci_slot *slot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: drivers/mmc/host/atmel-mci.c:552:
+		dev_warn(&slot->mmc->class_dev, "WARNING: IMR=0x%08x\n",
+				iflags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/mmc/host/atmel-mci.c:568:
+		dev_vdbg(&slot->mmc->class_dev, "BLKR=0x%08x\n",
+			MCI_BCNT(data->blocks) | MCI_BLKLEN(data->blksz));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/mmc/host/atmel-mci.c:600:
+static void atmci_queue_request(struct atmel_mci *host,
+		struct atmel_mci_slot *slot, struct mmc_request *mrq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/mmc/host/atmel-mci.c:603:
+	dev_vdbg(&slot->mmc->class_dev, "queue request: state=%d\n",
+			host->state);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#633: FILE: drivers/mmc/host/atmel-mci.c:682:
+			if (host->slot[i] && host->slot[i]->clock
+					&& host->slot[i]->clock < clock_min)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#716: FILE: drivers/mmc/host/atmel-mci.c:754:
+	int			read_only = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#737: FILE: drivers/mmc/host/atmel-mci.c:768:
+	int			present = -ENOSYS;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#743: FILE: drivers/mmc/host/atmel-mci.c:774:
+		dev_dbg(&mmc->class_dev, "card is %spresent\n",
+				present ? "" : "not ");

WARNING:TYPO_SPELLING: 'transfering' may be misspelled - perhaps 'transferring'?
#769: FILE: drivers/mmc/host/atmel-mci.c:800:
+	 * busy transfering data.
 	        ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: drivers/mmc/host/atmel-mci.c:809:
+		slot = list_entry(host->queue.next,
+				struct atmel_mci_slot, queue_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: drivers/mmc/host/atmel-mci.c:812:
+		dev_vdbg(&host->pdev->dev, "list not empty: %s is next\n",
+				mmc_hostname(slot->mmc));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: drivers/mmc/host/atmel-mci.c:879:
+	dev_vdbg(&slot->mmc->class_dev, "detect change: %d (was %d)\n",
+			present, present_old);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#908: FILE: drivers/mmc/host/atmel-mci.c:917:
+					/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#924: FILE: drivers/mmc/host/atmel-mci.c:927:
+					/* fall through */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/mmc/host/atmel-mci.c:968:
+	dev_vdbg(&host->pdev->dev,
 		"tasklet: state %u pending/completed/mask %lx/%lx/%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: drivers/mmc/host/atmel-mci.c:1023:
+					dev_dbg(&host->pdev->dev,
 							"data timeout error\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: drivers/mmc/host/atmel-mci.c:1027:
+					dev_dbg(&host->pdev->dev,
 							"data CRC error\n");

WARNING:MEMORY_BARRIER: memory barrier without comment
#1067: FILE: drivers/mmc/host/atmel-mci.c:1124:
+			smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1079: FILE: drivers/mmc/host/atmel-mci.c:1140:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1088: FILE: drivers/mmc/host/atmel-mci.c:1195:
+			smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1100: FILE: drivers/mmc/host/atmel-mci.c:1211:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1112: FILE: drivers/mmc/host/atmel-mci.c:1220:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1136: FILE: drivers/mmc/host/atmel-mci.c:1244:
+			smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1144: FILE: drivers/mmc/host/atmel-mci.c:1252:
+			smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: drivers/mmc/host/atmel-mci.c:1284:
+static int __init atmci_init_slot(struct atmel_mci *host,
+		struct mci_slot_pdata *slot_data, unsigned int id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: drivers/mmc/host/atmel-mci.c:1342:
+		setup_timer(&slot->detect_timer, atmci_detect_change,
+				(unsigned long)slot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: drivers/mmc/host/atmel-mci.c:1345:
+		ret = request_irq(gpio_to_irq(slot->detect_pin),
+				atmci_detect_interrupt,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: drivers/mmc/host/atmel-mci.c:1363:
+static void __exit atmci_cleanup_slot(struct atmel_mci_slot *slot,
+		unsigned int id)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1264: FILE: drivers/mmc/host/atmel-mci.c:1368:
+	smp_wmb();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host)...) over kzalloc(sizeof(struct atmel_mci)...)
#1317: FILE: drivers/mmc/host/atmel-mci.c:1405:
+	host = kzalloc(sizeof(struct atmel_mci), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: drivers/mmc/host/atmel-mci.c:1444:
+		ret = atmci_init_slot(host, &pdata->slot[0],
+				MCI_SDCSEL_SLOT_A, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: drivers/mmc/host/atmel-mci.c:1450:
+		ret = atmci_init_slot(host, &pdata->slot[1],
+				MCI_SDCSEL_SLOT_B, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1421: FILE: drivers/mmc/host/atmel-mci.c:1459:
+	dev_info(&pdev->dev,
+			"Atmel MCI controller at 0x%08lx irq %d, %u slots\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220752.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 25 checks, 1387 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220752.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
