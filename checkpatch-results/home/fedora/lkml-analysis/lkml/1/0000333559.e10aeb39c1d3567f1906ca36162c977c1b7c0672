CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#92: FILE: fs/ext4/extents.c:371:
+ext4_ext_binsearch_idx(struct inode *inode,
+			struct ext4_ext_path *path, ext4_lblk_t block)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#109: FILE: fs/ext4/extents.c:430:
+ext4_ext_binsearch(struct inode *inode,
+		struct ext4_ext_path *path, ext4_lblk_t block)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/ext4/extents.c:500:
+ext4_ext_find_extent(struct inode *inode, ext4_lblk_t block,
+					struct ext4_ext_path *path)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#169: FILE: fs/ext4/extents.c:1061:
+static ext4_lblk_t ext4_ext_next_leaf_block(struct inode *inode,
 					struct ext4_ext_path *path)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: fs/ext4/extents.c:1445:
+ext4_ext_put_in_cache(struct inode *inode, ext4_lblk_t block,
 			__u32 len, ext4_fsblk_t start, int type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: fs/ext4/extents.c:1494:
+		BUG_ON(next == lblock);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: fs/ext4/extents.c:1507:
+ext4_ext_in_cache(struct inode *inode, ext4_lblk_t block,
 			struct ext4_extent *ex)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#399: FILE: fs/ext4/extents.c:1656:
+		printk(KERN_INFO "strange request: removal %u-%u from %u:%u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: fs/ext4/extents.c:1657:
+		printk(KERN_INFO "strange request: removal %u-%u from %u:%u\n",
 			from, to, le32_to_cpu(ex->ee_block), ee_len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#404: FILE: fs/ext4/extents.c:1659:
+		printk(KERN_INFO "strange request: removal(2) "

WARNING:SPLIT_STRING: quoted string split across lines
#405: FILE: fs/ext4/extents.c:1660:
+		printk(KERN_INFO "strange request: removal(2) "
+				"%u-%u from %u:%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#422: FILE: fs/ext4/extents.c:1674:
+	unsigned num;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: fs/ext4/extents.c:2003:
+static int ext4_ext_convert_to_initialized(handle_t *handle,
+						struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: fs/ext4/extents.c:2149:
+	ext_debug("blocks %lu/%lu requested for inode %u\n",
+			(unsigned long) iblock, max_blocks,

CHECK:SPACING: No space is necessary after a cast
#493: FILE: fs/ext4/extents.c:2149:
+			(unsigned long) iblock, max_blocks,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#494: FILE: fs/ext4/extents.c:2150:
+			(unsigned) inode->i_ino);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#494: FILE: fs/ext4/extents.c:2150:
+			(unsigned) inode->i_ino);

WARNING:SPLIT_STRING: quoted string split across lines
#532: FILE: fs/ext4/extents.c:2473:
 				   "ext4_ext_get_blocks returned 0! inode#%lu"
+				   ", block=%lu, max_blocks=%lu",

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#566: FILE: fs/ext4/inode.c:353:
+static Indirect *ext4_get_branch(struct inode *inode, int depth,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#577: FILE: fs/ext4/inode.c:451:
+static ext4_fsblk_t ext4_find_goal(struct inode *inode, ext4_lblk_t block,
 		Indirect chain[4], Indirect *partial)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: fs/ext4/inode.c:809:
+	depth = ext4_block_to_path(inode, iblock, offsets,
+					&blocks_to_boundary);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#646: FILE: fs/ext4/inode.c:1834:
+	unsigned blocksize, length, pos;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: fs/ext4/namei.c:170:
+static void dx_insert_block(struct dx_frame *frame,
+					u32 hash, ext4_lblk_t block);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#730: FILE: fs/ext4/namei.c:247:
+		printk("%x->%lu ", i? dx_get_hash(entries + i) :

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#730: FILE: fs/ext4/namei.c:247:
+		printk("%x->%lu ", i? dx_get_hash(entries + i) :
 		                    ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#741: FILE: fs/ext4/namei.c:302:
+		ext4_lblk_t hash  = i ? dx_get_hash(entries): 0;
 		                                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#759: FILE: fs/ext4/namei.c:574:
+	dxtrace(printk(KERN_INFO "In htree dirblock_to_tree: block %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: fs/ext4/namei.c:575:
+	dxtrace(printk(KERN_INFO "In htree dirblock_to_tree: block %lu\n",
+							(unsigned long)block));

WARNING:SPLIT_STRING: quoted string split across lines
#807: FILE: fs/ext4/namei.c:922:
 			ext4_error(sb, __FUNCTION__, "reading directory #%lu "
+				   "offset %lu", dir->i_ino,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#836: FILE: fs/ext4/namei.c:1229:
+	dxtrace(printk(KERN_INFO "Split block %lu at %x, %i/%i\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#837: FILE: fs/ext4/namei.c:1230:
+	dxtrace(printk(KERN_INFO "Split block %lu at %x, %i/%i\n",
+			(unsigned long)dx_get_block(frame->at),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#838: FILE: fs/ext4/namei.c:1231:
+					hash2, split, count-split));
 					                   ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#901: FILE: include/linux/ext4_fs.h:938:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#901: FILE: include/linux/ext4_fs.h:938:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t' should also have an identifier name
#901: FILE: include/linux/ext4_fs.h:938:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#901: FILE: include/linux/ext4_fs.h:938:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#901: FILE: include/linux/ext4_fs.h:938:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#902: FILE: include/linux/ext4_fs.h:939:
+struct buffer_head *ext4_getblk(handle_t *, struct inode *,
+						ext4_lblk_t, int, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#903: FILE: include/linux/ext4_fs.h:940:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#903: FILE: include/linux/ext4_fs.h:940:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t' should also have an identifier name
#903: FILE: include/linux/ext4_fs.h:940:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#903: FILE: include/linux/ext4_fs.h:940:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#903: FILE: include/linux/ext4_fs.h:940:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#904: FILE: include/linux/ext4_fs.h:941:
+struct buffer_head *ext4_bread(handle_t *, struct inode *,
+						ext4_lblk_t, int, int *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: include/linux/ext4_fs.h:1088:
+	int retval;
+	if (EXT4_I(inode)->i_flags & EXT4_EXTENTS_FL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#935: FILE: include/linux/ext4_fs.h:1090:
+		retval = ext4_ext_get_blocks(handle, inode,
+						(ext4_lblk_t)block, max_blocks,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#978: FILE: include/linux/ext4_fs_extents.h:222:
+extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#978: FILE: include/linux/ext4_fs_extents.h:222:
+extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ext4_lblk_t' should also have an identifier name
#978: FILE: include/linux/ext4_fs_extents.h:222:
+extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ext4_ext_path *' should also have an identifier name
#978: FILE: include/linux/ext4_fs_extents.h:222:
+extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: include/linux/ext4_fs_extents.h:223:
+extern struct ext4_ext_path *ext4_ext_find_extent(struct inode *, ext4_lblk_t,
+							struct ext4_ext_path *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333559.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 23 checks, 859 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333559.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
