WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
o Currently CFQ provides priority scaled time slices to processes. If a process

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#95: FILE: block/cfq-iosched.c:75:
+};
+#define CFQ_RB_ROOT	(struct cfq_service_tree) { RB_ROOT, NULL, 0, NULL}

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#95: FILE: block/cfq-iosched.c:75:
+#define CFQ_RB_ROOT	(struct cfq_service_tree) { RB_ROOT, NULL, 0, NULL}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#155: FILE: block/cfq-iosched.c:257:
+	BUG_ON(idx >= IO_IOPRIO_CLASSES);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#171: FILE: block/cfq-iosched.c:273:
+	return delta + (base_slice/CFQ_SLICE_SCALE * (cfqq->ioprio - 4));
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: block/cfq-iosched.c:279:
+	s64 delta = (s64)(vdisktime - min_vdisktime);
+	if (delta > 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: block/cfq-iosched.c:288:
+	s64 delta = (s64)(vdisktime - min_vdisktime);
+	if (delta < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: block/cfq-iosched.c:587:
+static void __enqueue_cfqq(struct cfq_service_tree *st, struct cfq_queue *cfqq,
+				 int add_front)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#388: FILE: block/cfq-iosched.c:595:
+	while (*node != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'key == cfqq_key(st, __cfqq)'
#409: FILE: block/cfq-iosched.c:599:
+		if (key < cfqq_key(st, __cfqq) ||
+			(add_front && (key == cfqq_key(st, __cfqq)))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: block/cfq-iosched.c:600:
+		if (key < cfqq_key(st, __cfqq) ||
+			(add_front && (key == cfqq_key(st, __cfqq)))) {

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#474: FILE: block/cfq-iosched.c:661:
+	 * we stick to CFQ theme of queue loosing its share if it does not
 	                                  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: block/cfq-iosched.c:681:
+static void cfq_service_tree_add(struct cfq_data *cfqd, struct cfq_queue *cfqq,
+				bool add_front, unsigned long service)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: block/cfq-iosched.c:775:
+static void cfq_resort_rr_list(struct cfq_data *cfqd, struct cfq_queue *cfqq,
+				unsigned long service)

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#628: FILE: block/cfq-iosched.c:1052:
+	if (!cfqq->slice_end || cfqq->slice_start == jiffies)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#759: FILE: block/cfq-iosched.c:1609:
+	BUG_ON(cfq_cfqq_on_rr(cfqq));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 8 checks, 763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052619.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
