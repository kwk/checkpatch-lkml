WARNING:TYPO_SPELLING: 'accesed' may be misspelled - perhaps 'accessed'?
#54: 
accesed and when the functions from f_op are executing.
^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'modifing' may be misspelled - perhaps 'modifying'?
#57: 
for modifing a file descriptor so that the underlying object
    ^^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#80: 
by waiting until f_use goes to 0.  Essentially the same as synchronize_srcu.

WARNING:REPEATED_WORD: Possible repeated word: 'after'
#86: 
- file_kill is moved immediate after after frelease in __fput to ensure

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: fs/file_table.c:260:
+static void __frelease(struct file *file, struct inode *inode,
+			const struct file_operations *f_op)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode->i_cdev"
#159: FILE: fs/file_table.c:270:
+	if (unlikely(S_ISCHR(inode->i_mode) && inode->i_cdev != NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: fs/file_table.c:339:
+int fops_substitute(struct file *file, const struct file_operations *f_op,
+			struct vm_operations_struct *vm_ops)

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#226: FILE: fs/file_table.c:339:
+			struct vm_operations_struct *vm_ops)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: fs/file_table.c:396:
+void inode_fops_substitute(struct inode *inode, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/file_table.c:397:
+void inode_fops_substitute(struct inode *inode, 
+	const struct file_operations *f_op,

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#285: FILE: fs/file_table.c:398:
+	struct vm_operations_struct *vm_ops)

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: fs/file_table.c:498:
+	int revoked = (file->f_mode & FMODE_REVOKED);
+	if (likely(!revoked))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#419: FILE: include/linux/fs.h:339:
+struct vm_operations_struct;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: include/linux/fs.h:892:
+extern int fops_read_lock(struct file *file);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: include/linux/fs.h:893:
+extern void fops_read_unlock(struct file *file, int idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: include/linux/fs.h:894:
+extern int fops_substitute(struct file *file, const struct file_operations *f_op,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: include/linux/fs.h:895:
+extern int fops_substitute(struct file *file, const struct file_operations *f_op,
+				struct vm_operations_struct *vm_ops);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#439: FILE: include/linux/fs.h:895:
+				struct vm_operations_struct *vm_ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#440: FILE: include/linux/fs.h:896:
+extern void inode_fops_substitute(struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: include/linux/fs.h:897:
+extern void inode_fops_substitute(struct inode *inode,
+	const struct file_operations *f_op, struct vm_operations_struct *vm_ops);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#450: FILE: include/linux/fs.h:1472:
+	int (*awaken_all_waiters)(struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#458: FILE: include/linux/fs.h:2137:
+extern void __file_add(struct file *f, struct list_head *list);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 11 checks, 321 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
