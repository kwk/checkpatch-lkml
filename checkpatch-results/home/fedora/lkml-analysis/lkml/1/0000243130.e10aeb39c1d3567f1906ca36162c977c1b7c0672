WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: ckpt/checkpoint.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#96: FILE: ckpt/checkpoint.c:38:
+	if (IS_ERR(fname) && PTR_ERR(fname) == -ENAMETOOLONG) {
+		 if (!(buf = (char *) __get_free_pages(GFP_KERNEL, 0)))

WARNING:TABSTOP: Statements should start on a tabstop
#97: FILE: ckpt/checkpoint.c:39:
+		 if (!(buf = (char *) __get_free_pages(GFP_KERNEL, 0)))

CHECK:SPACING: No space is necessary after a cast
#97: FILE: ckpt/checkpoint.c:39:
+		 if (!(buf = (char *) __get_free_pages(GFP_KERNEL, 0)))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (17, 25)
#97: FILE: ckpt/checkpoint.c:39:
+		 if (!(buf = (char *) __get_free_pages(GFP_KERNEL, 0)))
+			 return ERR_PTR(-ENOMEM);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#97: FILE: ckpt/checkpoint.c:39:
+		 if (!(buf = (char *) __get_free_pages(GFP_KERNEL, 0)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:TABSTOP: Statements should start on a tabstop
#98: FILE: ckpt/checkpoint.c:40:
+			 return ERR_PTR(-ENOMEM);

CHECK:SPACING: No space is necessary after a cast
#101: FILE: ckpt/checkpoint.c:43:
+			free_pages((unsigned long) buf, 0);

CHECK:SPACING: No space is necessary after a cast
#118: FILE: ckpt/checkpoint.c:60:
+		free_pages((unsigned long) buf, 0);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#131: FILE: ckpt/checkpoint.c:73:
+	if ((ret = cr_kwrite(ctx, h, sizeof(*h))) < 0)

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#167: FILE: ckpt/checkpoint.c:109:
+	hh->major = (LINUX_VERSION_CODE >> 16) & 0xff;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#168: FILE: ckpt/checkpoint.c:110:
+	hh->minor = (LINUX_VERSION_CODE >> 8) & 0xff;

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#169: FILE: ckpt/checkpoint.c:111:
+	hh->patch = (LINUX_VERSION_CODE) & 0xff;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#190: FILE: ckpt/checkpoint.c:132:
+	hh->cksum[0] = hh->cksum[1] = 1;	/* TBD ... */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPACING: space prohibited before semicolon
#238: FILE: ckpt/checkpoint.c:180:
+	int ret ;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#240: FILE: ckpt/checkpoint.c:182:
+	BUG_ON(t->state == TASK_DEAD);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#270: FILE: ckpt/ckpt.h:1:
+#ifndef _CKPT_CKPT_H_

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: ckpt/ckpt.h:49:
+extern void cr_put_fname(char *buf, char *fname, int n);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: ckpt/ckpt.h:50:
+extern char *cr_get_fname(struct path *path, struct path *root, char *buf, int *n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: ckpt/ckpt.h:52:
+extern int cr_uwrite(struct cr_ctx *ctx, void *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: ckpt/ckpt.h:53:
+extern int cr_kwrite(struct cr_ctx *ctx, void *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: ckpt/ckpt.h:54:
+extern int cr_uread(struct cr_ctx *ctx, void *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: ckpt/ckpt.h:55:
+extern int cr_kread(struct cr_ctx *ctx, void *buf, int count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: ckpt/ckpt.h:57:
+extern void *cr_hbuf_get(struct cr_ctx *ctx, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: ckpt/ckpt.h:58:
+extern void cr_hbuf_put(struct cr_ctx *ctx, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: ckpt/ckpt.h:62:
+extern int cr_write_obj(struct cr_ctx *ctx, struct cr_hdr *h, void *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: ckpt/ckpt.h:63:
+extern int cr_write_str(struct cr_ctx *ctx, char *str, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: ckpt/ckpt.h:64:
+extern int cr_write_mm(struct cr_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: ckpt/ckpt.h:66:
+extern int cr_read_obj(struct cr_ctx *ctx, struct cr_hdr *h, void *buf, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: ckpt/ckpt.h:67:
+extern int cr_read_obj_type(struct cr_ctx *ctx, void *buf, int n, int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: ckpt/ckpt.h:68:
+extern int cr_read_str(struct cr_ctx *ctx, void *str, int n);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: ckpt/ckpt.h:69:
+extern int cr_read_mm(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: ckpt/ckpt.h:71:
+extern int do_checkpoint(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: ckpt/ckpt.h:72:
+extern int do_restart(struct cr_ctx *ctx);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#344: FILE: ckpt/ckpt.h:75:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#346: FILE: ckpt/ckpt.h:77:
+	printk(KERN_ERR "cr@%s#%d: " str, __func__, __LINE__, ##args)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#356: FILE: ckpt/ckpt_hdr.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#424: FILE: ckpt/ckpt_hdr.h:69:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#434: FILE: ckpt/restart.c:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: ckpt/restart.c:34:
+	BUG_ON(ctx->hpos + n > CR_HBUF_TOTAL);

CHECK:SPACING: No space is necessary after a cast
#468: FILE: ckpt/restart.c:35:
+	ptr = (void *) (((char *) ctx->hbuf) + ctx->hpos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: ckpt/restart.c:47:
+	BUG_ON(ctx->hpos < n);

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#546: FILE: ckpt/restart.c:113:
+	    hh->major != ((LINUX_VERSION_CODE >> 16) & 0xff) ||

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#547: FILE: ckpt/restart.c:114:
+	    hh->minor != ((LINUX_VERSION_CODE >> 8) & 0xff) ||

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#548: FILE: ckpt/restart.c:115:
+	    hh->patch != ((LINUX_VERSION_CODE) & 0xff))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#627: FILE: ckpt/sys.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#656: FILE: ckpt/sys.c:30:
+ * are static in fs/read_write.c... should cleanup and remove later) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#675: FILE: ckpt/sys.c:49:
+		nwrite = vfs_write(file, (char __user *) buf, nleft, &pos);

WARNING:LINE_SPACING: Missing a blank line after declarations
#675: FILE: ckpt/sys.c:49:
+		loff_t pos = file_pos_read(file);
+		nwrite = vfs_write(file, (char __user *) buf, nleft, &pos);

CHECK:SPACING: No space is necessary after a cast
#707: FILE: ckpt/sys.c:81:
+		nread = vfs_read(file, (char __user *) buf, nleft, &pos);

WARNING:LINE_SPACING: Missing a blank line after declarations
#707: FILE: ckpt/sys.c:81:
+		loff_t pos = file_pos_read(file);
+		nread = vfs_read(file, (char __user *) buf, nleft, &pos);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#731: FILE: ckpt/sys.c:105:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#741: FILE: ckpt/sys.c:115:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#747: FILE: ckpt/sys.c:121:
+	free_pages((unsigned long) ctx->tbuf, CR_ORDER_TBUF);

CHECK:SPACING: No space is necessary after a cast
#748: FILE: ckpt/sys.c:122:
+	free_pages((unsigned long) ctx->hbuf, CR_ORDER_HBUF);

CHECK:SPACING: No space is necessary after a cast
#761: FILE: ckpt/sys.c:135:
+	ctx->tbuf = (void *) __get_free_pages(GFP_KERNEL, CR_ORDER_TBUF);

CHECK:SPACING: No space is necessary after a cast
#762: FILE: ckpt/sys.c:136:
+	ctx->hbuf = (void *) __get_free_pages(GFP_KERNEL, CR_ORDER_HBUF);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 24 warnings, 31 checks, 789 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
