WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: fs/ceph/ceph_ver.h:1:
+#ifndef __CEPH_VERSION_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#53: FILE: fs/ceph/ceph_ver.h:4:
+#define CEPH_GIT_VER 007313fe84470c04cd41eb91d87e758c7d00e771

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: fs/ceph/super.h:1:
+#ifndef _FS_CEPH_SUPER_H

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#85: FILE: fs/ceph/super.h:24:
+ * large volume sizes on 32-bit machines. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: fs/ceph/super.h:26:
+#define CEPH_BLOCK         (1 << CEPH_BLOCK_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:TYPO_SPELLING: 'wnat' may be misspelled - perhaps 'want'?
#92: FILE: fs/ceph/super.h:31:
+ * Delay telling the MDS we no longer wnat caps, in case we reopen
                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#105: FILE: fs/ceph/super.h:44:
+	BUG_ON(time_after(b, a));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#112: FILE: fs/ceph/super.h:51:
+#define CEPH_OPT_FSID             (1<<0)
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#112: FILE: fs/ceph/super.h:51:
+#define CEPH_OPT_FSID             (1<<0)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#113: FILE: fs/ceph/super.h:52:
+#define CEPH_OPT_NOSHARE          (1<<1) /* don't share client with other sbs */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#113: FILE: fs/ceph/super.h:52:
+#define CEPH_OPT_NOSHARE          (1<<1) /* don't share client with other sbs */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#114: FILE: fs/ceph/super.h:53:
+#define CEPH_OPT_MYIP             (1<<2) /* specified my ip */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: fs/ceph/super.h:53:
+#define CEPH_OPT_MYIP             (1<<2) /* specified my ip */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#115: FILE: fs/ceph/super.h:54:
+#define CEPH_OPT_UNSAFE_WRITEBACK (1<<3)
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: fs/ceph/super.h:54:
+#define CEPH_OPT_UNSAFE_WRITEBACK (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#116: FILE: fs/ceph/super.h:55:
+#define CEPH_OPT_DIRSTAT          (1<<4) /* funky `cat dirname` for stats */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: fs/ceph/super.h:55:
+#define CEPH_OPT_DIRSTAT          (1<<4) /* funky `cat dirname` for stats */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#117: FILE: fs/ceph/super.h:56:
+#define CEPH_OPT_RBYTES           (1<<5) /* dir st_bytes = rbytes */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#117: FILE: fs/ceph/super.h:56:
+#define CEPH_OPT_RBYTES           (1<<5) /* dir st_bytes = rbytes */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#118: FILE: fs/ceph/super.h:57:
+#define CEPH_OPT_NOCRC            (1<<6) /* no data crc on writes */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#118: FILE: fs/ceph/super.h:57:
+#define CEPH_OPT_NOCRC            (1<<6) /* no data crc on writes */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#119: FILE: fs/ceph/super.h:58:
+#define CEPH_OPT_NOASYNCREADDIR   (1<<7) /* no dcache readdir */
                                     ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#119: FILE: fs/ceph/super.h:58:
+#define CEPH_OPT_NOASYNCREADDIR   (1<<7) /* no dcache readdir */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#123: FILE: fs/ceph/super.h:62:
+#define ceph_set_opt(client, opt) \
+	(client)->mount_args.flags |= CEPH_OPT_##opt;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#123: FILE: fs/ceph/super.h:62:
+#define ceph_set_opt(client, opt) \
+	(client)->mount_args.flags |= CEPH_OPT_##opt;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#128: FILE: fs/ceph/super.h:67:
+#define CEPH_DEFAULT_READ_SIZE	(128*1024) /* readahead */
                               	    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#131: FILE: fs/ceph/super.h:70:
+#define CEPH_MSG_MAX_FRONT_LEN	(16*1024*1024)
                               	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#131: FILE: fs/ceph/super.h:70:
+#define CEPH_MSG_MAX_FRONT_LEN	(16*1024*1024)
                               	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#132: FILE: fs/ceph/super.h:71:
+#define CEPH_MSG_MAX_DATA_LEN	(16*1024*1024)
                              	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#132: FILE: fs/ceph/super.h:71:
+#define CEPH_MSG_MAX_DATA_LEN	(16*1024*1024)
                              	        ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_client *' should also have an identifier name
#161: FILE: fs/ceph/super.h:100:
+	ssize_t (*show)(struct ceph_client *, struct ceph_client_attr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_client_attr *' should also have an identifier name
#161: FILE: fs/ceph/super.h:100:
+	ssize_t (*show)(struct ceph_client *, struct ceph_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#161: FILE: fs/ceph/super.h:100:
+	ssize_t (*show)(struct ceph_client *, struct ceph_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_client *' should also have an identifier name
#163: FILE: fs/ceph/super.h:102:
+	ssize_t (*store)(struct ceph_client *, struct ceph_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_client_attr *' should also have an identifier name
#163: FILE: fs/ceph/super.h:102:
+	ssize_t (*store)(struct ceph_client *, struct ceph_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#163: FILE: fs/ceph/super.h:102:
+	ssize_t (*store)(struct ceph_client *, struct ceph_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#163: FILE: fs/ceph/super.h:102:
+	ssize_t (*store)(struct ceph_client *, struct ceph_client_attr *,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: fs/ceph/super.h:151:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#322: FILE: fs/ceph/super.h:261:
+	 * don't know.
+	*/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: fs/ceph/super.h:288:
+	unsigned i_ceph_flags;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#362: FILE: fs/ceph/super.h:301:
+	struct mutex i_fragtree_mutex;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#367: FILE: fs/ceph/super.h:306:
+	 * s_mutex. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#370: FILE: fs/ceph/super.h:309:
+	unsigned i_dirty_caps, i_flushing_caps;     /* mask of dirtied fields */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#378: FILE: fs/ceph/super.h:317:
+	unsigned i_cap_exporting_mseq;   /*  mds's. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#379: FILE: fs/ceph/super.h:318:
+	unsigned i_cap_exporting_issued;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#383: FILE: fs/ceph/super.h:322:
+	unsigned i_snap_caps;           /* cap bits for snapped files */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#401: FILE: fs/ceph/super.h:340:
+	u32 i_rdcache_gen;      /* we increment this each time we get RDCACHE.
+				   If it's non-zero, we _may_ have cached

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: fs/ceph/super.h:341:
+				   pages. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#427: FILE: fs/ceph/super.h:366:
+static inline void ceph_i_clear(struct inode *inode, unsigned mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#436: FILE: fs/ceph/super.h:375:
+static inline void ceph_i_set(struct inode *inode, unsigned mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#445: FILE: fs/ceph/super.h:384:
+static inline bool ceph_i_test(struct inode *inode, unsigned mask)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#456: FILE: fs/ceph/super.h:395:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: fs/ceph/super.h:406:
+		int c = frag_compare(f, frag->frag);
+		if (c < 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: fs/ceph/super.h:420:
+extern u32 ceph_choose_frag(struct ceph_inode_info *ci, u32 v,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: fs/ceph/super.h:421:
+extern u32 ceph_choose_frag(struct ceph_inode_info *ci, u32 v,
+			      struct ceph_inode_frag *pfrag,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#504: FILE: fs/ceph/super.h:443:
+static inline loff_t ceph_make_fpos(unsigned frag, unsigned off)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#504: FILE: fs/ceph/super.h:443:
+static inline loff_t ceph_make_fpos(unsigned frag, unsigned off)

WARNING:TYPO_SPELLING: 'leaset' may be misspelled - perhaps 'least'?
#512: FILE: fs/ceph/super.h:451:
+ * don't include snap in ino hash, at leaset for now.
                                       ^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#518: FILE: fs/ceph/super.h:457:
+	ino ^= vino.ino >> (sizeof(u64)-sizeof(ino_t)) * 8;
 	                               ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#538: FILE: fs/ceph/super.h:477:
+#define ceph_vinop(i) ceph_inode(i)->i_vino.ino, ceph_inode(i)->i_vino.snap

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#538: FILE: fs/ceph/super.h:477:
+#define ceph_vinop(i) ceph_inode(i)->i_vino.ino, ceph_inode(i)->i_vino.snap

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#544: FILE: fs/ceph/super.h:483:
+}
+static inline u64 ceph_snap(struct inode *inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#553: FILE: fs/ceph/super.h:492:
+	struct ceph_inode_info *ci = ceph_inode(inode);
+	return ci->i_vino.ino == pvino->ino &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#561: FILE: fs/ceph/super.h:500:
+	ino_t t = ceph_vino_to_ino(vino);
+	return ilookup5(sb, t, ceph_ino_compare, &vino);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#564: FILE: fs/ceph/super.h:503:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#573: FILE: fs/ceph/super.h:512:
+extern int __ceph_caps_issued(struct ceph_inode_info *ci, int *implemented);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#574: FILE: fs/ceph/super.h:513:
+extern int __ceph_caps_issued_mask(struct ceph_inode_info *ci, int mask, int t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#575: FILE: fs/ceph/super.h:514:
+extern int __ceph_caps_issued_other(struct ceph_inode_info *ci,

WARNING:LINE_SPACING: Missing a blank line after declarations
#581: FILE: fs/ceph/super.h:520:
+	int issued;
+	spin_lock(&ci->vfs_inode.i_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#591: FILE: fs/ceph/super.h:530:
+	int r;
+	spin_lock(&ci->vfs_inode.i_lock);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#601: FILE: fs/ceph/super.h:540:
+}
+extern int __ceph_mark_dirty_caps(struct ceph_inode_info *ci, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#601: FILE: fs/ceph/super.h:540:
+extern int __ceph_mark_dirty_caps(struct ceph_inode_info *ci, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#603: FILE: fs/ceph/super.h:542:
+extern int ceph_caps_revoking(struct ceph_inode_info *ci, int mask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#608: FILE: fs/ceph/super.h:547:
+	int used = 0;
+	if (ci->i_pin_ref)

WARNING:LINE_SPACING: Missing a blank line after declarations
#628: FILE: fs/ceph/super.h:567:
+	int mode;
+	for (mode = 0; mode < 4; mode++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#640: FILE: fs/ceph/super.h:579:
+	int w = __ceph_caps_file_wanted(ci) | __ceph_caps_used(ci);
+	if (w & CEPH_CAP_FILE_BUFFER)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: fs/ceph/super.h:585:
+extern int __ceph_caps_mds_wanted(struct ceph_inode_info *ci);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: fs/ceph/super.h:587:
+extern void ceph_caps_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: fs/ceph/super.h:588:
+extern void ceph_caps_finalize(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: fs/ceph/super.h:589:
+extern int ceph_reserve_caps(struct ceph_cap_reservation *ctx, int need);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: fs/ceph/super.h:590:
+extern int ceph_unreserve_caps(struct ceph_cap_reservation *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: fs/ceph/super.h:591:
+extern void ceph_reservation_status(int *total, int *avail, int *used,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#677: FILE: fs/ceph/super.h:616:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#690: FILE: fs/ceph/super.h:629:
+	unsigned offset;       /* offset of last chunk, adjusted for . and .. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#701: FILE: fs/ceph/super.h:640:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#726: FILE: fs/ceph/super.h:665:
+	/*
+	printk("get_snap_context %p %d -> %d\n", sc, atomic_read(&sc->nref),

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#739: FILE: fs/ceph/super.h:678:
+	/*
+	printk("put_snap_context %p %d -> %d\n", sc, atomic_read(&sc->nref),

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#779: FILE: fs/ceph/super.h:718:
+	spinlock_t inodes_with_caps_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#782: FILE: fs/ceph/super.h:721:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#790: FILE: fs/ceph/super.h:729:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#790: FILE: fs/ceph/super.h:729:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#790: FILE: fs/ceph/super.h:729:
+	return ((off+len+PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT) -
 	                                ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#794: FILE: fs/ceph/super.h:733:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: fs/ceph/super.h:738:
+extern void ceph_get_snap_realm(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#801: FILE: fs/ceph/super.h:740:
+extern void ceph_put_snap_realm(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#803: FILE: fs/ceph/super.h:742:
+extern int ceph_update_snap_trace(struct ceph_mds_client *m,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#805: FILE: fs/ceph/super.h:744:
+extern void ceph_handle_snap(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#807: FILE: fs/ceph/super.h:746:
+extern void ceph_queue_cap_snap(struct ceph_inode_info *ci,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#809: FILE: fs/ceph/super.h:748:
+extern int __ceph_finish_cap_snap(struct ceph_inode_info *ci,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#811: FILE: fs/ceph/super.h:750:
+extern void ceph_cleanup_empty_realms(struct ceph_mds_client *mdsc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#824: FILE: fs/ceph/super.h:763:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#826: FILE: fs/ceph/super.h:765:
+extern const char *ceph_msg_type_name(int type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#853: FILE: fs/ceph/super.h:792:
+extern struct inode *ceph_alloc_inode(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#854: FILE: fs/ceph/super.h:793:
+extern void ceph_destroy_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#856: FILE: fs/ceph/super.h:795:
+extern struct inode *ceph_get_inode(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#858: FILE: fs/ceph/super.h:797:
+extern struct inode *ceph_get_snapdir(struct inode *parent);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#859: FILE: fs/ceph/super.h:798:
+extern int ceph_fill_file_size(struct inode *inode, int issued,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#861: FILE: fs/ceph/super.h:800:
+extern void ceph_fill_file_time(struct inode *inode, int issued,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#864: FILE: fs/ceph/super.h:803:
+extern int ceph_fill_trace(struct super_block *sb,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#867: FILE: fs/ceph/super.h:806:
+extern int ceph_readdir_prepopulate(struct ceph_mds_request *req,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#870: FILE: fs/ceph/super.h:809:
+extern int ceph_inode_holds_cap(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#872: FILE: fs/ceph/super.h:811:
+extern int ceph_inode_set_size(struct inode *inode, loff_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#873: FILE: fs/ceph/super.h:812:
+extern void ceph_inode_writeback(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#874: FILE: fs/ceph/super.h:813:
+extern void ceph_vmtruncate_work(struct work_struct *work);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#875: FILE: fs/ceph/super.h:814:
+extern void __ceph_do_pending_vmtruncate(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#876: FILE: fs/ceph/super.h:815:
+extern void __ceph_queue_vmtruncate(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: fs/ceph/super.h:817:
+extern int ceph_do_getattr(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#879: FILE: fs/ceph/super.h:818:
+extern int ceph_permission(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#880: FILE: fs/ceph/super.h:819:
+extern int ceph_setattr(struct dentry *dentry, struct iattr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: fs/ceph/super.h:820:
+extern int ceph_getattr(struct vfsmount *mnt, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#883: FILE: fs/ceph/super.h:822:
+extern int ceph_setxattr(struct dentry *, const char *, const void *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#885: FILE: fs/ceph/super.h:824:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#885: FILE: fs/ceph/super.h:824:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#885: FILE: fs/ceph/super.h:824:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#885: FILE: fs/ceph/super.h:824:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#885: FILE: fs/ceph/super.h:824:
+extern ssize_t ceph_getxattr(struct dentry *, const char *, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#886: FILE: fs/ceph/super.h:825:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#886: FILE: fs/ceph/super.h:825:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#886: FILE: fs/ceph/super.h:825:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#886: FILE: fs/ceph/super.h:825:
+extern ssize_t ceph_listxattr(struct dentry *, char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#887: FILE: fs/ceph/super.h:826:
+extern int ceph_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#887: FILE: fs/ceph/super.h:826:
+extern int ceph_removexattr(struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#887: FILE: fs/ceph/super.h:826:
+extern int ceph_removexattr(struct dentry *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#888: FILE: fs/ceph/super.h:827:
+extern void __ceph_build_xattrs_blob(struct ceph_inode_info *ci,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: fs/ceph/super.h:828:
+extern void __ceph_build_xattrs_blob(struct ceph_inode_info *ci,
+				      void **xattrs_blob,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#893: FILE: fs/ceph/super.h:832:
+extern const char *ceph_cap_string(int c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#894: FILE: fs/ceph/super.h:833:
+extern void ceph_handle_caps(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#896: FILE: fs/ceph/super.h:835:
+extern int ceph_add_cap(struct inode *inode,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#898: FILE: fs/ceph/super.h:837:
+			int fmode, unsigned issued, unsigned wanted,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#898: FILE: fs/ceph/super.h:837:
+			int fmode, unsigned issued, unsigned wanted,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#899: FILE: fs/ceph/super.h:838:
+			unsigned cap, unsigned seq, u64 realmino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#899: FILE: fs/ceph/super.h:838:
+			unsigned cap, unsigned seq, u64 realmino,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#900: FILE: fs/ceph/super.h:839:
+			unsigned ttl_ms, unsigned long ttl_from, int flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#902: FILE: fs/ceph/super.h:841:
+extern void __ceph_remove_cap(struct ceph_cap *cap,

WARNING:LINE_SPACING: Missing a blank line after declarations
#907: FILE: fs/ceph/super.h:846:
+	struct inode *inode = &cap->ci->vfs_inode;
+	spin_lock(&inode->i_lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#912: FILE: fs/ceph/super.h:851:
+extern void ceph_queue_caps_release(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#913: FILE: fs/ceph/super.h:852:
+extern int ceph_write_inode(struct inode *inode, int unused);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#914: FILE: fs/ceph/super.h:853:
+extern void ceph_kick_flushing_caps(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#916: FILE: fs/ceph/super.h:855:
+extern int ceph_get_cap_mds(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#917: FILE: fs/ceph/super.h:856:
+extern void ceph_get_cap_refs(struct ceph_inode_info *ci, int caps);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#918: FILE: fs/ceph/super.h:857:
+extern void ceph_put_cap_refs(struct ceph_inode_info *ci, int had);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#919: FILE: fs/ceph/super.h:858:
+extern void ceph_put_wrbuffer_cap_refs(struct ceph_inode_info *ci, int nr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#921: FILE: fs/ceph/super.h:860:
+extern void __ceph_flush_snaps(struct ceph_inode_info *ci,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#923: FILE: fs/ceph/super.h:862:
+extern void ceph_check_caps(struct ceph_inode_info *ci, int flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: fs/ceph/super.h:864:
+extern void ceph_check_delayed_caps(struct ceph_mds_client *mdsc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: fs/ceph/super.h:867:
+extern int ceph_encode_inode_release(void **p, struct inode *inode,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#930: FILE: fs/ceph/super.h:869:
+extern int ceph_encode_dentry_release(void **p, struct dentry *dn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: fs/ceph/super.h:872:
+extern int ceph_get_caps(struct ceph_inode_info *ci, int need, int want,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#941: FILE: fs/ceph/super.h:880:
+}
+extern void ceph_put_fmode(struct ceph_inode_info *ci, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: fs/ceph/super.h:880:
+extern void ceph_put_fmode(struct ceph_inode_info *ci, int mode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: fs/ceph/super.h:884:
+extern int ceph_mmap(struct file *file, struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#950: FILE: fs/ceph/super.h:889:
+extern int ceph_open(struct inode *inode, struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: fs/ceph/super.h:890:
+extern struct dentry *ceph_lookup_open(struct inode *dir, struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#952: FILE: fs/ceph/super.h:891:
+				       struct nameidata *nd, int mode,
 				                         ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#954: FILE: fs/ceph/super.h:893:
+extern int ceph_release(struct inode *inode, struct file *filp);
                                                           ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#954: FILE: fs/ceph/super.h:893:
+extern int ceph_release(struct inode *inode, struct file *filp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#955: FILE: fs/ceph/super.h:894:
+extern void ceph_release_page_vector(struct page **pages, int num_pages);

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#960: FILE: fs/ceph/super.h:899:
+extern struct dentry_operations ceph_dentry_ops, ceph_snap_dentry_ops,

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#963: FILE: fs/ceph/super.h:902:
+extern int ceph_handle_notrace_create(struct inode *dir, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: fs/ceph/super.h:903:
+extern struct dentry *ceph_finish_lookup(struct ceph_mds_request *req,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#967: FILE: fs/ceph/super.h:906:
+extern void ceph_dentry_lru_add(struct dentry *dn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#968: FILE: fs/ceph/super.h:907:
+extern void ceph_dentry_lru_touch(struct dentry *dn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#969: FILE: fs/ceph/super.h:908:
+extern void ceph_dentry_lru_del(struct dentry *dn);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: fs/ceph/super.h:933:
+extern long ceph_ioctl(struct file *file, unsigned int cmd, unsigned long arg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1000: FILE: fs/ceph/super.h:939:
+extern int ceph_debugfs_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1001: FILE: fs/ceph/super.h:940:
+extern void ceph_debugfs_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1002: FILE: fs/ceph/super.h:941:
+extern int ceph_debugfs_client_init(struct ceph_client *client);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: fs/ceph/super.h:942:
+extern void ceph_debugfs_client_cleanup(struct ceph_client *client);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1020: FILE: fs/ceph/types.h:1:
+#ifndef _FS_CEPH_TYPES_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1039: FILE: fs/ceph/types.h:20:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1045: FILE: fs/ceph/types.h:26:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 64 warnings, 120 checks, 985 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000096130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
