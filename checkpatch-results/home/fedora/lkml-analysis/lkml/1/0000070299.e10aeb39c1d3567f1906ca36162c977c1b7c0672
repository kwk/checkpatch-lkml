WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
This patch adds the iBLOCK subsystem plugin for accessing struct block_device

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: drivers/target/target_core_iblock.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#85: FILE: drivers/target/target_core_iblock.c:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#86: FILE: drivers/target/target_core_iblock.c:26:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#112: FILE: drivers/target/target_core_iblock.c:52:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#113: FILE: drivers/target/target_core_iblock.c:53:
+#define DEBUG_IBLOCK(x...) printk(x)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#128: FILE: drivers/target/target_core_iblock.c:68:
+		printk(KERN_ERR "Unable to allocate memory for iblock_hba_t\n");

CHECK:SPACING: No space is necessary after a cast
#136: FILE: drivers/target/target_core_iblock.c:76:
+	hba->hba_ptr = (void *) ib_host;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#139: FILE: drivers/target/target_core_iblock.c:79:
+	printk(KERN_INFO "CORE_HBA[%d] - TCM iBlock HBA Driver %s on"

WARNING:SPLIT_STRING: quoted string split across lines
#140: FILE: drivers/target/target_core_iblock.c:80:
+	printk(KERN_INFO "CORE_HBA[%d] - TCM iBlock HBA Driver %s on"
+		" Generic Target Core Stack %s\n", hba->hba_id,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#143: FILE: drivers/target/target_core_iblock.c:83:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached iBlock HBA: %u to Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#144: FILE: drivers/target/target_core_iblock.c:84:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached iBlock HBA: %u to Generic"
+		" Target Core TCQ Depth: %d\n", hba->hba_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#159: FILE: drivers/target/target_core_iblock.c:99:
+		printk(KERN_ERR "hba->hba_ptr is NULL!\n");

CHECK:SPACING: No space is necessary after a cast
#162: FILE: drivers/target/target_core_iblock.c:102:
+	ib_host = (iblock_hba_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#164: FILE: drivers/target/target_core_iblock.c:104:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached iBlock HBA: %u from Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#165: FILE: drivers/target/target_core_iblock.c:105:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached iBlock HBA: %u from Generic"
+		" Target Core\n", hba->hba_id, ib_host->iblock_host_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#179: FILE: drivers/target/target_core_iblock.c:119:
+		printk(KERN_INFO "IBLOCK: Using previously claimed %p Major:"

WARNING:SPLIT_STRING: quoted string split across lines
#180: FILE: drivers/target/target_core_iblock.c:120:
+		printk(KERN_INFO "IBLOCK: Using previously claimed %p Major:"
+			"Minor" " - %d:%d\n", ib_dev->ibd_bd, ib_dev->ibd_major,

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#180: FILE: drivers/target/target_core_iblock.c:120:
+			"Minor" " - %d:%d\n", ib_dev->ibd_bd, ib_dev->ibd_major,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#183: FILE: drivers/target/target_core_iblock.c:123:
+		printk(KERN_INFO "IBLOCK: Claiming %p Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/target/target_core_iblock.c:124:
+		printk(KERN_INFO "IBLOCK: Claiming %p Major:Minor - %d:%d\n",
+			ib_dev, ib_dev->ibd_major, ib_dev->ibd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: drivers/target/target_core_iblock.c:127:
+		bd = linux_blockdevice_claim(ib_dev->ibd_major,
+			ib_dev->ibd_minor, (void *)ib_dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#204: FILE: drivers/target/target_core_iblock.c:144:
+		printk(KERN_INFO "IBLOCK: Calling blkdev_put() for Major:Minor"

WARNING:SPLIT_STRING: quoted string split across lines
#205: FILE: drivers/target/target_core_iblock.c:145:
+		printk(KERN_INFO "IBLOCK: Calling blkdev_put() for Major:Minor"
+			" - %d:%d\n", ib_dev->ibd_major, ib_dev->ibd_minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#208: FILE: drivers/target/target_core_iblock.c:148:
+		printk(KERN_INFO "IBLOCK: Releasing Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/target/target_core_iblock.c:149:
+		printk(KERN_INFO "IBLOCK: Releasing Major:Minor - %d:%d\n",
+			ib_dev->ibd_major, ib_dev->ibd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: drivers/target/target_core_iblock.c:151:
+		linux_blockdevice_release(ib_dev->ibd_major, ib_dev->ibd_minor,
+			(struct block_device *)ib_dev->ibd_bd);

CHECK:SPACING: No space is necessary after a cast
#233: FILE: drivers/target/target_core_iblock.c:173:
+	iblock_hba_t *ib_host = (iblock_hba_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#237: FILE: drivers/target/target_core_iblock.c:177:
+		printk(KERN_ERR "Unable to allocate iblock_dev_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#242: FILE: drivers/target/target_core_iblock.c:182:
+	printk(KERN_INFO  "IBLOCK: Allocated ib_dev for %s\n", name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#247: FILE: drivers/target/target_core_iblock.c:187:
+se_device_t *iblock_create_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#252: FILE: drivers/target/target_core_iblock.c:192:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) p;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#259: FILE: drivers/target/target_core_iblock.c:199:
+		printk(KERN_ERR "Unable to locate iblock_dev_t parameter\n");

WARNING:TYPO_SPELLING: 'descritpor' may be misspelled - perhaps 'descriptor'?
#263: FILE: drivers/target/target_core_iblock.c:203:
+	 * Check if we have an open file descritpor passed through configfs
 	                                 ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#272: FILE: drivers/target/target_core_iblock.c:212:
+		printk(KERN_INFO  "IBLOCK: Claiming struct block_device: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: drivers/target/target_core_iblock.c:213:
+		printk(KERN_INFO  "IBLOCK: Claiming struct block_device: %p\n",
+			 ib_dev->ibd_bd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: drivers/target/target_core_iblock.c:216:
+		bd = linux_blockdevice_claim(ib_dev->ibd_bd->bd_disk->major,
+				     ib_dev->ibd_bd->bd_disk->first_minor,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#279: FILE: drivers/target/target_core_iblock.c:219:
+			printk(KERN_INFO "IBLOCK: Unable to claim"

WARNING:SPLIT_STRING: quoted string split across lines
#280: FILE: drivers/target/target_core_iblock.c:220:
+			printk(KERN_INFO "IBLOCK: Unable to claim"
+					" struct block_device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#287: FILE: drivers/target/target_core_iblock.c:227:
+		printk(KERN_INFO  "IBLOCK: Claiming %p Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: drivers/target/target_core_iblock.c:228:
+		printk(KERN_INFO  "IBLOCK: Claiming %p Major:Minor - %d:%d\n",
+			ib_dev, ib_dev->ibd_major, ib_dev->ibd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: drivers/target/target_core_iblock.c:231:
+		bd = __linux_blockdevice_claim(ib_dev->ibd_major,
+				ib_dev->ibd_minor, ib_dev, &ret);

CHECK:BRACES: braces {} should be used on all arms of this statement
#292: FILE: drivers/target/target_core_iblock.c:232:
+		if ((bd)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#293: FILE: drivers/target/target_core_iblock.c:233:
+			if (ret == 1)
[...]
+			else if (ib_dev->ibd_force) {
[...]
+			} else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#297: FILE: drivers/target/target_core_iblock.c:237:
+				printk(KERN_INFO "IBLOCK: DF_READ_ONLY for"

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: drivers/target/target_core_iblock.c:238:
+				printk(KERN_INFO "IBLOCK: DF_READ_ONLY for"
+					" Major:Minor - %d:%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#301: FILE: drivers/target/target_core_iblock.c:241:
+				printk(KERN_INFO "WARNING: Unable to claim"

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: drivers/target/target_core_iblock.c:242:
+				printk(KERN_INFO "WARNING: Unable to claim"
+					" block device. Only use force=1 for"

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: drivers/target/target_core_iblock.c:243:
+					" block device. Only use force=1 for"
+					" READ-ONLY access.\n");

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: drivers/target/target_core_iblock.c:247:
+		} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#317: FILE: drivers/target/target_core_iblock.c:257:
+		printk(KERN_ERR "IBLOCK: Unable to create bioset()\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/target/target_core_iblock.c:259:
+		__iblock_release_phydevice(ib_dev,
+				(dev_flags == DF_READ_ONLY ? 1 : 0));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#322: FILE: drivers/target/target_core_iblock.c:262:
+	printk(KERN_INFO "IBLOCK: Created bio_set() for major/minor: %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: drivers/target/target_core_iblock.c:263:
+	printk(KERN_INFO "IBLOCK: Created bio_set() for major/minor: %d:%d\n",
+		ib_dev->ibd_major, ib_dev->ibd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#333: FILE: drivers/target/target_core_iblock.c:273:
+	dev = transport_add_device_to_core_hba(hba,
+			&iblock_template, se_dev, dev_flags, (void *)ib_dev);

CHECK:SPACING: No space is necessary after a cast
#356: FILE: drivers/target/target_core_iblock.c:296:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#359: FILE: drivers/target/target_core_iblock.c:299:
+	printk(KERN_INFO "CORE_iBLOCK[%u] - Activating Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#360: FILE: drivers/target/target_core_iblock.c:300:
+	printk(KERN_INFO "CORE_iBLOCK[%u] - Activating Device with TCQ: %d at"
+		" Major: %d Minor %d\n", ib_hba->iblock_host_id,

CHECK:SPACING: No space is necessary after a cast
#372: FILE: drivers/target/target_core_iblock.c:312:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#375: FILE: drivers/target/target_core_iblock.c:315:
+	printk(KERN_INFO "CORE_iBLOCK[%u] - Deactivating Device with TCQ: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#376: FILE: drivers/target/target_core_iblock.c:316:
+	printk(KERN_INFO "CORE_iBLOCK[%u] - Deactivating Device with TCQ: %d"
+		" at Major: %d Minor %d\n", ib_hba->iblock_host_id,

CHECK:SPACING: No space is necessary after a cast
#382: FILE: drivers/target/target_core_iblock.c:322:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) p;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: drivers/target/target_core_iblock.c:326:
+		DEBUG_IBLOCK("Calling bioset_free ib_dev->ibd_bio_set: %p\n",
+				ib_dev->ibd_bio_set);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#402: FILE: drivers/target/target_core_iblock.c:342:
+void *iblock_allocate_request(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#410: FILE: drivers/target/target_core_iblock.c:350:
+		printk(KERN_ERR "Unable to allocate memory for iblock_req_t\n");

CHECK:SPACING: No space is necessary after a cast
#414: FILE: drivers/target/target_core_iblock.c:354:
+	ib_req->ib_dev = (iblock_dev_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#422: FILE: drivers/target/target_core_iblock.c:362:
+	iblock_dev_t *ibd = (iblock_dev_t *) task->se_dev->dev_ptr;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#436: FILE: drivers/target/target_core_iblock.c:376:
+static unsigned long long iblock_emulate_read_cap_with_block_size(

CHECK:SPACING: No space is necessary after a cast
#516: FILE: drivers/target/target_core_iblock.c:456:
+	iblock_dev_t *ibd = (iblock_dev_t *) task->se_dev->dev_ptr;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#522: FILE: drivers/target/target_core_iblock.c:462:
+	blocks_long = iblock_emulate_read_cap_with_block_size(

CHECK:SPACING: No space is necessary after a cast
#534: FILE: drivers/target/target_core_iblock.c:474:
+	iblock_dev_t *ibd = (iblock_dev_t *) task->se_dev->dev_ptr;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#539: FILE: drivers/target/target_core_iblock.c:479:
+	blocks_long = iblock_emulate_read_cap_with_block_size(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#541: FILE: drivers/target/target_core_iblock.c:481:
+	return transport_generic_emulate_readcapacity_16(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: drivers/target/target_core_iblock.c:502:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				T_TASK(cmd)->t_task_cdb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: drivers/target/target_core_iblock.c:509:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				T_TASK(cmd)->t_task_cdb,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: drivers/target/target_core_iblock.c:517:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/target/target_core_iblock.c:518:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",
+				T_TASK(cmd)->t_task_cdb[1] & 0x1f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: drivers/target/target_core_iblock.c:527:
+		ret = transport_generic_emulate_request_sense(cmd,
+				T_TASK(cmd)->t_task_cdb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#607: FILE: drivers/target/target_core_iblock.c:547:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for iBlock\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: drivers/target/target_core_iblock.c:548:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for iBlock\n",
+				T_TASK(cmd)->t_task_cdb[0]);

WARNING:SPLIT_STRING: quoted string split across lines
#632: FILE: drivers/target/target_core_iblock.c:572:
+		DEBUG_IBLOCK("Calling submit_bio() task: %p bio: %p"
+			" bio->bi_sector: %llu\n", task, bio, bio->bi_sector);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#634: FILE: drivers/target/target_core_iblock.c:574:
+		submit_bio(

CHECK:SPACING: No space is necessary after a cast
#649: FILE: drivers/target/target_core_iblock.c:589:
+	iblock_req_t *req = (iblock_req_t *) task->transport_req;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/target/target_core_iblock.c:601:
+ssize_t iblock_set_configfs_dev_params(se_hba_t *hba,
+					       se_subsystem_dev_t *se_dev,

CHECK:SPACING: No space is necessary after a cast
#664: FILE: drivers/target/target_core_iblock.c:604:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#671: FILE: drivers/target/target_core_iblock.c:611:
+		printk(KERN_ERR "Unable to allocate memory for temporary"

WARNING:SPLIT_STRING: quoted string split across lines
#672: FILE: drivers/target/target_core_iblock.c:612:
+		printk(KERN_ERR "Unable to allocate memory for temporary"
+			" buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: drivers/target/target_core_iblock.c:631:
+			ret = snprintf(ib_dev->ibd_udev_path, SE_UDEV_PATH_LEN,
+				"%s", ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#692: FILE: drivers/target/target_core_iblock.c:632:
+			printk(KERN_INFO "IBLOCK: Referencing UDEV path: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: drivers/target/target_core_iblock.c:633:
+			printk(KERN_INFO "IBLOCK: Referencing UDEV path: %s\n",
+					ib_dev->ibd_udev_path);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#701: FILE: drivers/target/target_core_iblock.c:641:
+			ret = strict_strtoul(ptr, 0, &major);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#703: FILE: drivers/target/target_core_iblock.c:643:
+				printk(KERN_ERR "strict_strtoul() failed"

WARNING:SPLIT_STRING: quoted string split across lines
#704: FILE: drivers/target/target_core_iblock.c:644:
+				printk(KERN_ERR "strict_strtoul() failed"
+					" for major=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#708: FILE: drivers/target/target_core_iblock.c:648:
+			printk(KERN_INFO "IBLOCK: Referencing Major: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: drivers/target/target_core_iblock.c:649:
+			printk(KERN_INFO "IBLOCK: Referencing Major: %d\n",
+					ib_dev->ibd_major);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#717: FILE: drivers/target/target_core_iblock.c:657:
+			ret = strict_strtoul(ptr, 0, &minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#719: FILE: drivers/target/target_core_iblock.c:659:
+				printk(KERN_ERR "strict_strtoul() failed"

WARNING:SPLIT_STRING: quoted string split across lines
#720: FILE: drivers/target/target_core_iblock.c:660:
+				printk(KERN_ERR "strict_strtoul() failed"
+					" for minor=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#724: FILE: drivers/target/target_core_iblock.c:664:
+			printk(KERN_INFO "IBLOCK: Referencing Minor: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: drivers/target/target_core_iblock.c:665:
+			printk(KERN_INFO "IBLOCK: Referencing Minor: %d\n",
+					ib_dev->ibd_minor);

CHECK:BRACES: braces {} should be used on all arms of this statement
#731: FILE: drivers/target/target_core_iblock.c:671:
+		if ((ptr2)) {
[...]
+		} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#733: FILE: drivers/target/target_core_iblock.c:673:
+			ret = strict_strtoul(ptr, 0, &force);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#735: FILE: drivers/target/target_core_iblock.c:675:
+				printk(KERN_ERR "strict_strtoul() failed"

WARNING:SPLIT_STRING: quoted string split across lines
#736: FILE: drivers/target/target_core_iblock.c:676:
+				printk(KERN_ERR "strict_strtoul() failed"
+					" for force=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#740: FILE: drivers/target/target_core_iblock.c:680:
+			printk(KERN_INFO "IBLOCK: Set force=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: drivers/target/target_core_iblock.c:681:
+			printk(KERN_INFO "IBLOCK: Set force=%d\n",
+				ib_dev->ibd_force);

CHECK:BRACES: Unbalanced braces around else statement
#743: FILE: drivers/target/target_core_iblock.c:683:
+		} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#752: FILE: drivers/target/target_core_iblock.c:692:
+ssize_t iblock_check_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#756: FILE: drivers/target/target_core_iblock.c:696:
+	iblock_dev_t *ibd = (iblock_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#760: FILE: drivers/target/target_core_iblock.c:700:
+		printk(KERN_ERR "Missing iblock_major= and iblock_minor="

WARNING:SPLIT_STRING: quoted string split across lines
#761: FILE: drivers/target/target_core_iblock.c:701:
+		printk(KERN_ERR "Missing iblock_major= and iblock_minor="
+			" parameters\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#768: FILE: drivers/target/target_core_iblock.c:708:
+ssize_t iblock_show_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#773: FILE: drivers/target/target_core_iblock.c:713:
+	iblock_dev_t *ibd = (iblock_dev_t *) se_dev->se_dev_su_ptr;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#780: FILE: drivers/target/target_core_iblock.c:720:
+se_device_t *iblock_create_virtdevice_from_fd(

CHECK:SPACING: No space is necessary after a cast
#784: FILE: drivers/target/target_core_iblock.c:724:
+	iblock_dev_t *ibd = (iblock_dev_t *) se_dev->se_dev_su_ptr;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#786: FILE: drivers/target/target_core_iblock.c:726:
+	struct file *filp;
 	             ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#792: FILE: drivers/target/target_core_iblock.c:732:
+	ret = strict_strtoull(p, 0, (unsigned long long *)&fd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#794: FILE: drivers/target/target_core_iblock.c:734:
+		printk(KERN_ERR "strict_strtol() failed for fd\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#798: FILE: drivers/target/target_core_iblock.c:738:
+		printk(KERN_ERR "IBLOCK: Illegal value of file descriptor:"

WARNING:SPLIT_STRING: quoted string split across lines
#799: FILE: drivers/target/target_core_iblock.c:739:
+		printk(KERN_ERR "IBLOCK: Illegal value of file descriptor:"
+				" %llu\n", fd);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#802: FILE: drivers/target/target_core_iblock.c:742:
+	filp = fget(fd);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#803: FILE: drivers/target/target_core_iblock.c:743:
+	if (!(filp)) {
 	      ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#804: FILE: drivers/target/target_core_iblock.c:744:
+		printk(KERN_ERR "IBLOCK: Unable to fget() fd: %llu\n", fd);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: drivers/target/target_core_iblock.c:749:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct inode for"

WARNING:SPLIT_STRING: quoted string split across lines
#810: FILE: drivers/target/target_core_iblock.c:750:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct inode for"
+			" struct block_device fd\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#811: FILE: drivers/target/target_core_iblock.c:751:
+		fput(filp);
 		     ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#815: FILE: drivers/target/target_core_iblock.c:755:
+		printk(KERN_ERR "IBLOCK: S_ISBLK(inode->i_mode) failed for file"

WARNING:SPLIT_STRING: quoted string split across lines
#816: FILE: drivers/target/target_core_iblock.c:756:
+		printk(KERN_ERR "IBLOCK: S_ISBLK(inode->i_mode) failed for file"
+				" descriptor: %llu\n", fd);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#817: FILE: drivers/target/target_core_iblock.c:757:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#818: FILE: drivers/target/target_core_iblock.c:758:
+		fput(filp);
 		     ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#823: FILE: drivers/target/target_core_iblock.c:763:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct block_device"

WARNING:SPLIT_STRING: quoted string split across lines
#824: FILE: drivers/target/target_core_iblock.c:764:
+		printk(KERN_ERR "IBLOCK: Unable to locate struct block_device"
+				" from I_BDEV()\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#825: FILE: drivers/target/target_core_iblock.c:765:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#826: FILE: drivers/target/target_core_iblock.c:766:
+		fput(filp);
 		     ^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#835: FILE: drivers/target/target_core_iblock.c:775:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#836: FILE: drivers/target/target_core_iblock.c:776:
+	fput(filp);
 	     ^^^^

CHECK:SPACING: No space is necessary after a cast
#856: FILE: drivers/target/target_core_iblock.c:796:
+	iblock_dev_t *ibd = (iblock_dev_t *) dev->dev_ptr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#869: FILE: drivers/target/target_core_iblock.c:809:
+	if (ibd->ibd_flags & IBDF_HAS_UDEV_PATH) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#872: FILE: drivers/target/target_core_iblock.c:812:
+	} else

CHECK:SPACING: No space is necessary after a cast
#890: FILE: drivers/target/target_core_iblock.c:830:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) task->se_dev->dev_ptr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#896: FILE: drivers/target/target_core_iblock.c:836:
+static struct bio *iblock_get_bio(se_task_t *task,
+	iblock_req_t *ib_req,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#906: FILE: drivers/target/target_core_iblock.c:846:
+		printk(KERN_ERR "Unable to allocate memory for bio\n");

WARNING:SPLIT_STRING: quoted string split across lines
#912: FILE: drivers/target/target_core_iblock.c:852:
+	DEBUG_IBLOCK("Allocated bio: %p task_sg_num: %u using ibd_bio_set:"
+		" %p\n", bio, task->task_sg_num, ib_dev->ibd_bio_set);

CHECK:SPACING: No space is necessary after a cast
#916: FILE: drivers/target/target_core_iblock.c:856:
+	bio->bi_private = (void *) task;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: drivers/target/target_core_iblock.c:864:
+	DEBUG_IBLOCK("Set ib_req->ib_bio_cnt: %d\n",
+			atomic_read(&ib_req->ib_bio_cnt));

CHECK:SPACING: No space is necessary after a cast
#930: FILE: drivers/target/target_core_iblock.c:870:
+	iblock_dev_t *ib_dev = (iblock_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#931: FILE: drivers/target/target_core_iblock.c:871:
+	iblock_req_t *ib_req = (iblock_req_t *) task->transport_req;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#941: FILE: drivers/target/target_core_iblock.c:881:
+	bio = iblock_get_bio(task, ib_req, ib_dev, &ret,
+			task->task_lba, sg_num);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#946: FILE: drivers/target/target_core_iblock.c:886:
+	hbio = tbio = bio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#953: FILE: drivers/target/target_core_iblock.c:893:
+		DEBUG_IBLOCK("task: %p bio: %p Calling bio_add_page(): page:"
+			" %p len: %u offset: %u\n", task, bio, sg_page(&sg[i]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#957: FILE: drivers/target/target_core_iblock.c:897:
+		ret = bio_add_page(bio, sg_page(&sg[i]), sg[i].length,
+				sg[i].offset);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#959: FILE: drivers/target/target_core_iblock.c:899:
+		if (ret != sg[i].length) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: drivers/target/target_core_iblock.c:901:
+			DEBUG_IBLOCK("*** Set bio->bi_sector: %llu\n",
+					bio->bi_sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: drivers/target/target_core_iblock.c:903:
+			DEBUG_IBLOCK("** task->task_size: %u\n",
+					task->task_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/target/target_core_iblock.c:905:
+			DEBUG_IBLOCK("*** bio->bi_max_vecs: %u\n",
+					bio->bi_max_vecs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#967: FILE: drivers/target/target_core_iblock.c:907:
+			DEBUG_IBLOCK("*** bio->bi_vcnt: %u\n",
+					bio->bi_vcnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/target/target_core_iblock.c:910:
+			bio = iblock_get_bio(task, ib_req, ib_dev, &ret,
+					lba, sg_num);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#974: FILE: drivers/target/target_core_iblock.c:914:
+			tbio = tbio->bi_next = bio;

WARNING:SPLIT_STRING: quoted string split across lines
#976: FILE: drivers/target/target_core_iblock.c:916:
+			DEBUG_IBLOCK("-----------------> Added +1 bio: %p to"
+				" list, Going to again\n", bio);

WARNING:SPLIT_STRING: quoted string split across lines
#983: FILE: drivers/target/target_core_iblock.c:923:
+		DEBUG_IBLOCK("task: %p bio-add_page() passed!, decremented"
+			" sg_num to %u\n", task, sg_num);

WARNING:SPLIT_STRING: quoted string split across lines
#985: FILE: drivers/target/target_core_iblock.c:925:
+		DEBUG_IBLOCK("task: %p bio_add_page() passed!, increased lba"
+				" to %llu\n", task, lba);

WARNING:SPLIT_STRING: quoted string split across lines
#987: FILE: drivers/target/target_core_iblock.c:927:
+		DEBUG_IBLOCK("task: %p bio_add_page() passed!, bio->bi_vcnt:"
+				" %u\n", task, bio->bi_vcnt);

CHECK:SPACING: No space is necessary after a cast
#1043: FILE: drivers/target/target_core_iblock.c:983:
+	iblock_req_t *req = (iblock_req_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1050: FILE: drivers/target/target_core_iblock.c:990:
+	iblock_dev_t *ibd = (iblock_dev_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#1072: FILE: drivers/target/target_core_iblock.c:1012:
+	iblock_dev_t *ibd = (iblock_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1095: FILE: drivers/target/target_core_iblock.c:1035:
+		printk(KERN_ERR "test_bit(BIO_UPTODATE) failed for bio: %p,"

WARNING:SPLIT_STRING: quoted string split across lines
#1096: FILE: drivers/target/target_core_iblock.c:1036:
+		printk(KERN_ERR "test_bit(BIO_UPTODATE) failed for bio: %p,"
+			" err: %d\n", bio, err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: drivers/target/target_core_iblock.c:1041:
+	DEBUG_IBLOCK("done[%p] bio: %p task_lba: %llu bio_lba: %llu err=%d\n",
+		task, bio, task->task_lba, bio->bi_sector, err);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1125: FILE: include/target/target_core_iblock.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1146: FILE: include/target/target_core_iblock.h:22:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1147: FILE: include/target/target_core_iblock.h:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1151: FILE: include/target/target_core_iblock.h:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1166: FILE: include/target/target_core_iblock.h:42:
+extern int iblock_CDB_inquiry(se_task_t *, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1167: FILE: include/target/target_core_iblock.h:43:
+extern int iblock_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1167: FILE: include/target/target_core_iblock.h:43:
+extern int iblock_CDB_none(se_task_t *, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1167: FILE: include/target/target_core_iblock.h:43:
+extern int iblock_CDB_none(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1168: FILE: include/target/target_core_iblock.h:44:
+extern int iblock_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1168: FILE: include/target/target_core_iblock.h:44:
+extern int iblock_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1168: FILE: include/target/target_core_iblock.h:44:
+extern int iblock_CDB_read_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1169: FILE: include/target/target_core_iblock.h:45:
+extern int iblock_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1169: FILE: include/target/target_core_iblock.h:45:
+extern int iblock_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1169: FILE: include/target/target_core_iblock.h:45:
+extern int iblock_CDB_read_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1170: FILE: include/target/target_core_iblock.h:46:
+extern int iblock_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1170: FILE: include/target/target_core_iblock.h:46:
+extern int iblock_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1170: FILE: include/target/target_core_iblock.h:46:
+extern int iblock_CDB_write_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1171: FILE: include/target/target_core_iblock.h:47:
+extern int iblock_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1171: FILE: include/target/target_core_iblock.h:47:
+extern int iblock_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1171: FILE: include/target/target_core_iblock.h:47:
+extern int iblock_CDB_write_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1173: FILE: include/target/target_core_iblock.h:49:
+extern int iblock_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1173: FILE: include/target/target_core_iblock.h:49:
+extern int iblock_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1173: FILE: include/target/target_core_iblock.h:49:
+extern int iblock_attach_hba(se_hba_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1174: FILE: include/target/target_core_iblock.h:50:
+extern int iblock_detach_hba(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1174: FILE: include/target/target_core_iblock.h:50:
+extern int iblock_detach_hba(se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1175: FILE: include/target/target_core_iblock.h:51:
+extern int iblock_claim_phydevice(se_hba_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1175: FILE: include/target/target_core_iblock.h:51:
+extern int iblock_claim_phydevice(se_hba_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1175: FILE: include/target/target_core_iblock.h:51:
+extern int iblock_claim_phydevice(se_hba_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1176: FILE: include/target/target_core_iblock.h:52:
+extern int iblock_release_phydevice(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1176: FILE: include/target/target_core_iblock.h:52:
+extern int iblock_release_phydevice(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1177: FILE: include/target/target_core_iblock.h:53:
+extern void *iblock_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1177: FILE: include/target/target_core_iblock.h:53:
+extern void *iblock_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1177: FILE: include/target/target_core_iblock.h:53:
+extern void *iblock_allocate_virtdevice(se_hba_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1178: FILE: include/target/target_core_iblock.h:54:
+extern se_device_t *iblock_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1178: FILE: include/target/target_core_iblock.h:54:
+extern se_device_t *iblock_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1178: FILE: include/target/target_core_iblock.h:54:
+extern se_device_t *iblock_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1178: FILE: include/target/target_core_iblock.h:54:
+extern se_device_t *iblock_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: include/target/target_core_iblock.h:55:
+extern se_device_t *iblock_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,
+						void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1180: FILE: include/target/target_core_iblock.h:56:
+extern int iblock_activate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1180: FILE: include/target/target_core_iblock.h:56:
+extern int iblock_activate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1181: FILE: include/target/target_core_iblock.h:57:
+extern void iblock_deactivate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1181: FILE: include/target/target_core_iblock.h:57:
+extern void iblock_deactivate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1182: FILE: include/target/target_core_iblock.h:58:
+extern void iblock_free_device(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1182: FILE: include/target/target_core_iblock.h:58:
+extern void iblock_free_device(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1183: FILE: include/target/target_core_iblock.h:59:
+extern int iblock_transport_complete(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1183: FILE: include/target/target_core_iblock.h:59:
+extern int iblock_transport_complete(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1184: FILE: include/target/target_core_iblock.h:60:
+extern void *iblock_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1184: FILE: include/target/target_core_iblock.h:60:
+extern void *iblock_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1184: FILE: include/target/target_core_iblock.h:60:
+extern void *iblock_allocate_request(se_task_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1185: FILE: include/target/target_core_iblock.h:61:
+extern int iblock_do_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1185: FILE: include/target/target_core_iblock.h:61:
+extern int iblock_do_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1186: FILE: include/target/target_core_iblock.h:62:
+extern void iblock_free_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1186: FILE: include/target/target_core_iblock.h:62:
+extern void iblock_free_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1187: FILE: include/target/target_core_iblock.h:63:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1187: FILE: include/target/target_core_iblock.h:63:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1187: FILE: include/target/target_core_iblock.h:63:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1187: FILE: include/target/target_core_iblock.h:63:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#1187: FILE: include/target/target_core_iblock.h:63:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1188: FILE: include/target/target_core_iblock.h:64:
+extern ssize_t iblock_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						const char *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1189: FILE: include/target/target_core_iblock.h:65:
+extern ssize_t iblock_check_configfs_dev_params(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1189: FILE: include/target/target_core_iblock.h:65:
+extern ssize_t iblock_check_configfs_dev_params(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1189: FILE: include/target/target_core_iblock.h:65:
+extern ssize_t iblock_check_configfs_dev_params(se_hba_t *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1191: FILE: include/target/target_core_iblock.h:67:
+extern ssize_t iblock_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1191: FILE: include/target/target_core_iblock.h:67:
+extern ssize_t iblock_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1191: FILE: include/target/target_core_iblock.h:67:
+extern ssize_t iblock_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1191: FILE: include/target/target_core_iblock.h:67:
+extern ssize_t iblock_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1192: FILE: include/target/target_core_iblock.h:68:
+extern ssize_t iblock_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1193: FILE: include/target/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd(se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1193: FILE: include/target/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd(se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1193: FILE: include/target/target_core_iblock.h:69:
+extern se_device_t *iblock_create_virtdevice_from_fd(se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: include/target/target_core_iblock.h:70:
+extern se_device_t *iblock_create_virtdevice_from_fd(se_subsystem_dev_t *,
+						const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1195: FILE: include/target/target_core_iblock.h:71:
+extern void iblock_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1195: FILE: include/target/target_core_iblock.h:71:
+extern void iblock_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1195: FILE: include/target/target_core_iblock.h:71:
+extern void iblock_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1195: FILE: include/target/target_core_iblock.h:71:
+extern void iblock_get_plugin_info(void *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1196: FILE: include/target/target_core_iblock.h:72:
+extern void iblock_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1196: FILE: include/target/target_core_iblock.h:72:
+extern void iblock_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1196: FILE: include/target/target_core_iblock.h:72:
+extern void iblock_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1196: FILE: include/target/target_core_iblock.h:72:
+extern void iblock_get_hba_info(se_hba_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1197: FILE: include/target/target_core_iblock.h:73:
+extern void iblock_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1197: FILE: include/target/target_core_iblock.h:73:
+extern void iblock_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1197: FILE: include/target/target_core_iblock.h:73:
+extern void iblock_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1197: FILE: include/target/target_core_iblock.h:73:
+extern void iblock_get_dev_info(se_device_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1198: FILE: include/target/target_core_iblock.h:74:
+extern int iblock_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1198: FILE: include/target/target_core_iblock.h:74:
+extern int iblock_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1198: FILE: include/target/target_core_iblock.h:74:
+extern int iblock_check_lba(unsigned long long, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1199: FILE: include/target/target_core_iblock.h:75:
+extern int iblock_check_for_SG(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1199: FILE: include/target/target_core_iblock.h:75:
+extern int iblock_check_for_SG(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1200: FILE: include/target/target_core_iblock.h:76:
+extern unsigned char *iblock_get_cdb(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1200: FILE: include/target/target_core_iblock.h:76:
+extern unsigned char *iblock_get_cdb(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1201: FILE: include/target/target_core_iblock.h:77:
+extern u32 iblock_get_blocksize(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1201: FILE: include/target/target_core_iblock.h:77:
+extern u32 iblock_get_blocksize(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1202: FILE: include/target/target_core_iblock.h:78:
+extern u32 iblock_get_device_rev(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1202: FILE: include/target/target_core_iblock.h:78:
+extern u32 iblock_get_device_rev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1203: FILE: include/target/target_core_iblock.h:79:
+extern u32 iblock_get_device_type(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1203: FILE: include/target/target_core_iblock.h:79:
+extern u32 iblock_get_device_type(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: include/target/target_core_iblock.h:80:
+extern u32 iblock_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1204: FILE: include/target/target_core_iblock.h:80:
+extern u32 iblock_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1204: FILE: include/target/target_core_iblock.h:80:
+extern u32 iblock_get_dma_length(u32, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1205: FILE: include/target/target_core_iblock.h:81:
+extern u32 iblock_get_max_sectors(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1205: FILE: include/target/target_core_iblock.h:81:
+extern u32 iblock_get_max_sectors(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1206: FILE: include/target/target_core_iblock.h:82:
+extern u32 iblock_get_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1206: FILE: include/target/target_core_iblock.h:82:
+extern u32 iblock_get_queue_depth(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1207: FILE: include/target/target_core_iblock.h:83:
+extern u32 iblock_get_max_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1207: FILE: include/target/target_core_iblock.h:83:
+extern u32 iblock_get_max_queue_depth(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: include/target/target_core_iblock.h:84:
+extern void iblock_bio_done(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1208: FILE: include/target/target_core_iblock.h:84:
+extern void iblock_bio_done(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1208: FILE: include/target/target_core_iblock.h:84:
+extern void iblock_bio_done(struct bio *, int);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1211: FILE: include/target/target_core_iblock.h:87:
+typedef struct iblock_req_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1225: FILE: include/target/target_core_iblock.h:101:
+typedef struct iblock_dev_s {

WARNING:FUNCTION_ARGUMENTS: function definition argument 'iblock_dev_t *' should also have an identifier name
#1237: FILE: include/target/target_core_iblock.h:113:
+void __iblock_get_dev_info(iblock_dev_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1237: FILE: include/target/target_core_iblock.h:113:
+void __iblock_get_dev_info(iblock_dev_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1237: FILE: include/target/target_core_iblock.h:113:
+void __iblock_get_dev_info(iblock_dev_t *, char *, int *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1239: FILE: include/target/target_core_iblock.h:115:
+typedef struct iblock_hba_s {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070299.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 160 warnings, 119 checks, 1231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070299.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
