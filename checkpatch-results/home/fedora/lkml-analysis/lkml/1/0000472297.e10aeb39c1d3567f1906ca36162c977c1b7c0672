WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
   - unguaranteed monotonicity (very fast, vsyscall) -- "nomonotonic" option

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: arch/x86_64/kernel/time.c:975:
+		int p;
+		p = smp_processor_id();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#80: FILE: arch/x86_64/kernel/time.c:976:
+		printk(KERN_INFO "Initializing RDTSCP feature on cpu %d.\n", p);

CHECK:BRACES: braces {} should be used on all arms of this statement
#97: FILE: arch/x86_64/kernel/time.c:993:
+	if (!hpet_init()) {
[...]
+	} else
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#103: FILE: arch/x86_64/kernel/time.c:999:
+	} else
+	if (pmtmr_ioport) {

CHECK:BRACES: Unbalanced braces around else statement
#103: FILE: arch/x86_64/kernel/time.c:999:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#104: FILE: arch/x86_64/kernel/time.c:1000:
+	if (pmtmr_ioport) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#109: FILE: arch/x86_64/kernel/time.c:1005:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#116: FILE: arch/x86_64/kernel/time.c:1009:
+	if (hpet_use_timer)
[...]
-		timename = "HPET";
[...]

CHECK:BRACES: Unbalanced braces around else statement
#120: FILE: arch/x86_64/kernel/time.c:1011:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: arch/x86_64/kernel/time.c:1021:
+	vxtime.cpu[0].mt_last = vxtime.cpu[0].mt_base = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#137: FILE: arch/x86_64/kernel/time.c:1022:
+	vxtime.cpu[0].tsc_slope = vxtime.cpu[0].tsc_slope_avg = (((USEC_PER_SEC << 32) / vxtime.mt_q) << TSC_SLOPE_SCALE) / cpu_khz;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#137: FILE: arch/x86_64/kernel/time.c:1022:
+	vxtime.cpu[0].tsc_slope = vxtime.cpu[0].tsc_slope_avg = (((USEC_PER_SEC << 32) / vxtime.mt_q) << TSC_SLOPE_SCALE) / cpu_khz;

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#164: FILE: arch/x86_64/kernel/time.c:1074:
+	}
+	else if (cpu_has(&boot_cpu_data, X86_FEATURE_RDTSCP)) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#169: FILE: arch/x86_64/kernel/time.c:1079:
+		}
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#169: FILE: arch/x86_64/kernel/time.c:1079:
+		else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#174: FILE: arch/x86_64/kernel/time.c:1084:
+	}
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#174: FILE: arch/x86_64/kernel/time.c:1084:
+	else {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#183: FILE: arch/x86_64/kernel/time.c:1093:
+			}
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#183: FILE: arch/x86_64/kernel/time.c:1093:
+			else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#189: FILE: arch/x86_64/kernel/time.c:1099:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#189: FILE: arch/x86_64/kernel/time.c:1099:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: arch/x86_64/kernel/time.c:1099:
+ ^I}$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#194: FILE: arch/x86_64/kernel/time.c:1102:
+	printk(KERN_INFO "time.c: Using %s as master timer, %s for time caching; vsyscall %s.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#196: FILE: arch/x86_64/kernel/time.c:1104:
+	printk(KERN_INFO "time.c: Using %s as interrupt source.\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: arch/x86_64/kernel/time.c:1119:
+	u64 mt_now;
+	write_seqlock_irqsave(&xtime_lock, flags);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#233: FILE: arch/x86_64/kernel/time.c:1168:
+	write_seqlock_irqsave(&xtime_lock,flags);
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#235: FILE: arch/x86_64/kernel/time.c:1170:
+	/* reenable the Master Timer */
 	   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#238: FILE: arch/x86_64/kernel/time.c:1173:
+	/* reenable PIT if used as main timer interrupt source */
 	   ^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#258: FILE: arch/x86_64/kernel/time.c:1189:
+	vxtime.cpu[0].mt_last = vxtime.cpu[0].mt_base = get_master_timer64();

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#259: FILE: arch/x86_64/kernel/time.c:1190:
+	/* FIXME: what speed does the cpu really start at; I doubt cpu_khz is right at this point ??!!!

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#260: FILE: arch/x86_64/kernel/time.c:1191:
+	   And what speed do the non-boot cpus start at? Their timekeeping variables will probably be set wrong

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#260: FILE: arch/x86_64/kernel/time.c:1191:
+	/* FIXME: what speed does the cpu really start at; I doubt cpu_khz is right at this point ??!!!
+	   And what speed do the non-boot cpus start at? Their timekeeping variables will probably be set wrong

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#261: FILE: arch/x86_64/kernel/time.c:1192:
+	   by copying from CPU 0 in time_initialize_cpu(); Not a great deal, as they will be synced somehow,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: arch/x86_64/kernel/time.c:1193:
+	   but not exactly nice -JB */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#263: FILE: arch/x86_64/kernel/time.c:1194:
+	vxtime.cpu[0].tsc_slope = vxtime.cpu[0].tsc_slope_avg =

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: arch/x86_64/kernel/time.c:1198:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#282: FILE: arch/x86_64/kernel/time.c:1497:
+__setup("nomonotonic", nomonotonic_setup);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: include/linux/time.h:34:
+#define FSEC_PER_NSEC ^I1000000L$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472297.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 18 warnings, 14 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472297.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
