WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#36: FILE: security/apparmor/main.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#60: FILE: security/apparmor/main.c:25:
+static const char *capability_names[] = {

WARNING:TYPO_SPELLING: 'non-existant' may be misspelled - perhaps 'non-existent'?
#66: FILE: security/apparmor/main.c:31:
+ * Used when in complain mode, to emit Permitting messages for non-existant
                                                                ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'currenly' may be misspelled - perhaps 'currently'?
#131: FILE: security/apparmor/main.c:96:
+	/* FIXME: There currenly is no way to report which permissions
 	                ^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#164: FILE: security/apparmor/main.c:129:
+#define mangle_escape(c)						\
+	unlikely((unsigned char)(c) < ARRAY_SIZE(c_escape) &&		\
+		 c_escape[(unsigned char)c])

CHECK:BRACES: braces {} should be used on all arms of this statement
#177: FILE: security/apparmor/main.c:142:
+		if (mangle_escape(c)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#182: FILE: security/apparmor/main.c:147:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: security/apparmor/main.c:180:
+		char *buf = kmalloc(size, GFP_KERNEL);
+		if (!buf)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#286: FILE: security/apparmor/main.c:251:
+	if (IS_ERR(sa->name)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#296: FILE: security/apparmor/main.c:261:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: security/apparmor/main.c:270:
+		BUG_ON(check & AA_CHECK_MANGLE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: security/apparmor/main.c:440:
+		audit_log(current->audit_context, gfp_mask, AUDIT_APPARMOR,
+			"Internal error auditing event type %d (error %d)",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: security/apparmor/main.c:443:
+		AA_ERROR("Internal error auditing event type %d (error %d)\n",
+			sa->type, sa->error_code);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#498: FILE: security/apparmor/main.c:463:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: security/apparmor/main.c:478:
+		AA_ERROR("Unable to log event (%d) to audit subsys\n",
+			sa->type);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#537: FILE: security/apparmor/main.c:502:
+
+	}

ERROR:SPACING: space required before the open parenthesis '('
#545: FILE: security/apparmor/main.c:510:
+	switch(NOFLAGS(sa->type)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: security/apparmor/main.c:531:
+		audit_log_format(ab,
+			"attribute (%s%s%s%s%s%s%s) change to %s ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: security/apparmor/main.c:553:
+		audit_log_format(ab, "access to capability '%s' ",
+			capability_names[sa->capability]);

WARNING:TYPO_SPELLING: 'alread' may be misspelled - perhaps 'already'?
#760: FILE: security/apparmor/main.c:725:
+	/* test if cap has alread been logged */
 	                   ^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#765: FILE: security/apparmor/main.c:730:
+		return error;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#765: FILE: security/apparmor/main.c:730:
+	} else

WARNING:TYPO_SPELLING: 'occurance' may be misspelled - perhaps 'occurrence'?
#767: FILE: security/apparmor/main.c:732:
+		 * caps_logged is a cache to reduce the occurance of
 		                                        ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#841: FILE: security/apparmor/main.c:806:
+		BUG_ON(check & AA_CHECK_MANGLE);

CHECK:BRACES: braces {} should be used on all arms of this statement
#872: FILE: security/apparmor/main.c:837:
+	if (profile) {
[...]
+	} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#895: FILE: security/apparmor/main.c:860:
+					 "LOGPROF-HINT fork child=%d "
+					 "(%d profile %s active %s)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Unbalanced braces around else statement
#899: FILE: security/apparmor/main.c:864:
+	} else

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#915: FILE: security/apparmor/main.c:880:
+			 __FUNCTION__, new_profile->name);

WARNING:SPLIT_STRING: quoted string split across lines
#920: FILE: security/apparmor/main.c:885:
+			aa_audit_message(profile, GFP_KERNEL, "LOGPROF-HINT "
+					 "missing_mandatory_profile image '%s' "

WARNING:SPLIT_STRING: quoted string split across lines
#921: FILE: security/apparmor/main.c:886:
+					 "missing_mandatory_profile image '%s' "
+					 "(%d profile %s active %s)",

WARNING:SPLIT_STRING: quoted string split across lines
#927: FILE: security/apparmor/main.c:892:
+			aa_audit_message(profile, GFP_KERNEL, "REJECTING "
+					 "exec(2) of image '%s'. Profile "

WARNING:SPLIT_STRING: quoted string split across lines
#928: FILE: security/apparmor/main.c:893:
+					 "exec(2) of image '%s'. Profile "
+					 "mandatory and not found. "

WARNING:SPLIT_STRING: quoted string split across lines
#929: FILE: security/apparmor/main.c:894:
+					 "mandatory and not found. "
+					 "(%d profile %s active %s)",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#939: FILE: security/apparmor/main.c:904:
+			 __FUNCTION__,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#956: FILE: security/apparmor/main.c:921:
+	struct file *filp = bprm->file;
 	             ^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#960: FILE: security/apparmor/main.c:925:
+	AA_DEBUG("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#965: FILE: security/apparmor/main.c:930:
+		AA_ERROR("%s: Failed to get filename", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#983: FILE: security/apparmor/main.c:948:
+					 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#990: FILE: security/apparmor/main.c:955:
+					 __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#999: FILE: security/apparmor/main.c:964:
+					 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1009: FILE: security/apparmor/main.c:974:
+				AA_ERROR("Rejecting exec(2) of image '%s'. "
+					 "Unknown exec qualifier %x "

WARNING:SPLIT_STRING: quoted string split across lines
#1010: FILE: security/apparmor/main.c:975:
+					 "Unknown exec qualifier %x "
+					 "(%d profile %s active %s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1030: FILE: security/apparmor/main.c:995:
+			aa_audit_message(profile, GFP_KERNEL, "REJECTING "
+					 "exec(2) of image '%s'. Unable to "

WARNING:SPLIT_STRING: quoted string split across lines
#1031: FILE: security/apparmor/main.c:996:
+					 "exec(2) of image '%s'. Unable to "
+					 "determine exec qualifier. "

WARNING:SPLIT_STRING: quoted string split across lines
#1032: FILE: security/apparmor/main.c:997:
+					 "determine exec qualifier. "
+					 "(%d profile %s active %s)",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_profile"
#1040: FILE: security/apparmor/main.c:1005:
+		if (new_profile == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#1057: FILE: security/apparmor/main.c:1022:
+					 "REJECTING exec(2) of image '%s'. "
+					 "Unable to change profile, ptraced by "

WARNING:SPLIT_STRING: quoted string split across lines
#1058: FILE: security/apparmor/main.c:1023:
+					 "Unable to change profile, ptraced by "
+					 "%d. (%d profile %s active %s)",

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1082: FILE: security/apparmor/main.c:1047:
+		bprm->security = (void*)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1089: FILE: security/apparmor/main.c:1054:
+				 "LOGPROF-HINT changing_profile "
+				 "(%d profile %s active %s)",

WARNING:SPLIT_STRING: quoted string split across lines
#1179: FILE: security/apparmor/main.c:1144:
+					 "LOGPROF-HINT unknown_hat %s "
+					 "(%d profile %s active %s)",

WARNING:SPLIT_STRING: quoted string split across lines
#1184: FILE: security/apparmor/main.c:1149:
+			AA_DEBUG("%s: Unknown hatname '%s'. "
+				"Changing to NULL profile "

WARNING:SPLIT_STRING: quoted string split across lines
#1185: FILE: security/apparmor/main.c:1150:
+				"Changing to NULL profile "
+				"(%d profile %s active %s)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1186: FILE: security/apparmor/main.c:1151:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1227: FILE: security/apparmor/main.c:1192:
+		aa_audit_message(NULL, GFP_KERNEL, "change_hat %s, 0x%llx "
+				 "(pid %d)",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1256: FILE: security/apparmor/main.c:1221:
+				 __FUNCTION__,

WARNING:SPLIT_STRING: quoted string split across lines
#1285: FILE: security/apparmor/main.c:1250:
+			AA_ERROR("KILLING process %d "
+				 "Invalid change_hat() magic# 0x%llx "

WARNING:SPLIT_STRING: quoted string split across lines
#1286: FILE: security/apparmor/main.c:1251:
+				 "Invalid change_hat() magic# 0x%llx "
+				 "(hatname %s profile %s active %s)\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1296: FILE: security/apparmor/main.c:1261:
+			AA_ERROR("KILLING process %d "
+				 "Task was confined to current subprofile "

WARNING:SPLIT_STRING: quoted string split across lines
#1297: FILE: security/apparmor/main.c:1262:
+				 "Task was confined to current subprofile "
+				 "(profile %s active %s)\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1306: FILE: security/apparmor/main.c:1271:
+
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1353: FILE: security/apparmor/main.c:1318:
+	if (cxt) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1356: FILE: security/apparmor/main.c:1321:
+	} else

WARNING:TYPO_SPELLING: 'aquired' may be misspelled - perhaps 'acquired'?
#1370: FILE: security/apparmor/main.c:1335:
+ * profile are consistent once all locks are aquired.
                                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1426: FILE: security/apparmor/main.c:1391:
+		 * chance to emit its own set of cap messages */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 44 warnings, 19 checks, 1399 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
