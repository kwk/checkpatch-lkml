ERROR:TRAILING_WHITESPACE: trailing whitespace
#57: FILE: Documentation/kernel-parameters.txt:651:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __cpuinit should be placed after disable_amd_c1e
#97: FILE: arch/x86/kernel/setup_64.c:587:
+static int __cpuinit disable_amd_c1e = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#99: FILE: arch/x86/kernel/setup_64.c:589:
+static int __cpuinit force_amd_c1e(char *str) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#104: FILE: arch/x86/kernel/setup_64.c:594:
+__setup("force_amd_c1e", force_amd_c1e);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#126: FILE: arch/x86/kernel/setup_64.c:621:
+			printk(KERN_INFO "Disabling AMD C1E on CPU %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: arch/x86/kernel/setup_64.c:623:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#133: FILE: arch/x86/kernel/setup_64.c:628:
+^I^I^Iwrmsr(MSR_K8_ENABLE_C1E, lo & ~ENABLE_C1E_MASK, hi); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#134: FILE: arch/x86/kernel/setup_64.c:629:
+^I^I} else $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#134: FILE: arch/x86/kernel/setup_64.c:629:
+		} else 
[...]
+		if (lo & ENABLE_C1E_MASK) return 1;

CHECK:BRACES: Unbalanced braces around else statement
#134: FILE: arch/x86/kernel/setup_64.c:629:
+		} else 

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#136: FILE: arch/x86/kernel/setup_64.c:631:
+		if (lo & ENABLE_C1E_MASK) return 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347495.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 3 warnings, 2 checks, 79 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347495.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
