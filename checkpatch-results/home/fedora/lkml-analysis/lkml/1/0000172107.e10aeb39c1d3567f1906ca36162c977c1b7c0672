WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
User-mode Linux by this patch uses PTRACE_VM of the hosting operating system

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#56: FILE: arch/um/include/shared/kern_util.h:60:
+extern int syscall_trace(struct uml_pt_regs *regs, int entryexit);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: arch/um/kernel/process.c:373:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: arch/um/kernel/process.c:374:
+static int proc_read_sysptvm(char *buf, char **start, off_t offset, int size,int *eof, void *data)
                                                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#125: FILE: arch/um/kernel/process.c:376:
+	int sysptvm=(get_using_sysptvm() != 0);
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: arch/um/kernel/process.c:377:
+	int sysptvm=(get_using_sysptvm() != 0);
+	if (snprintf(buf, size, "%d\n", sysptvm) < size)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#139: FILE: arch/um/kernel/process.c:384:
+static int proc_write_sysptvm(struct file *file,const char __user *buf, unsigned long count,void *data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: arch/um/kernel/process.c:384:
+static int proc_write_sysptvm(struct file *file,const char __user *buf, unsigned long count,void *data)
                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: arch/um/kernel/process.c:384:
+static int proc_write_sysptvm(struct file *file,const char __user *buf, unsigned long count,void *data)
                                                                                            ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#163: FILE: arch/um/kernel/process.c:406:
+		if (ent == NULL)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#163: FILE: arch/um/kernel/process.c:406:
+		if (ent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#165: FILE: arch/um/kernel/process.c:408:
+			printk(KERN_WARNING "Failed to register /proc/sysptvm\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#174: FILE: arch/um/kernel/process.c:417:
+		if (ent == NULL)
+		{

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#174: FILE: arch/um/kernel/process.c:417:
+		if (ent == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#176: FILE: arch/um/kernel/process.c:419:
+			printk(KERN_WARNING "Failed to register /proc/sysemu\n");

ERROR:SPACING: spaces required around that '=' (ctx:VxO)
#200: FILE: arch/um/kernel/ptrace.c:69:
+		ret=-EIO;
 		   ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#200: FILE: arch/um/kernel/ptrace.c:69:
+		ret=-EIO;
 		    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: arch/um/kernel/ptrace.c:70:
+^I^Ibreak; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#269: FILE: arch/um/kernel/skas/syscall.c:22:
+	skip_call=syscall_trace(r, 0);
 	         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall >= NR_syscalls'
#283: FILE: arch/um/kernel/skas/syscall.c:35:
+		if ((syscall >= NR_syscalls) || (syscall < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall < 0'
#283: FILE: arch/um/kernel/skas/syscall.c:35:
+		if ((syscall >= NR_syscalls) || (syscall < 0))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#284: FILE: arch/um/kernel/skas/syscall.c:36:
+			result = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#285: FILE: arch/um/kernel/skas/syscall.c:37:
+		else result = EXECUTE_SYSCALL(syscall, regs);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#344: FILE: arch/um/os-Linux/start_up.c:202:
+static int force_sysptvm_disabled = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#346: FILE: arch/um/os-Linux/start_up.c:204:
+static int __init nosysptvm_cmd_param(char *str, int* add)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: arch/um/os-Linux/start_up.c:211:
+__uml_setup("nosysptvm", nosysptvm_cmd_param,
+		"nosysptvm\n"

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#359: FILE: arch/um/os-Linux/start_up.c:217:
+static int use_sysemu = 0;

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#361: FILE: arch/um/os-Linux/start_up.c:219:
+static int __init usesysemu_cmd_param(char *str, int* add)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: arch/um/os-Linux/start_up.c:226:
+__uml_setup("usesysemu", usesysemu_cmd_param,
+		"usesysemu\n"

ERROR:TRAILING_WHITESPACE: trailing whitespace
#379: FILE: arch/um/os-Linux/start_up.c:325:
+/* test thread code. This thread is started only to test $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#380: FILE: arch/um/os-Linux/start_up.c:326:
+ * which features are provided by the linux kernel */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#383: FILE: arch/um/os-Linux/start_up.c:329:
+	int *featurep=arg;
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#384: FILE: arch/um/os-Linux/start_up.c:330:
+	int p[2]={-1,-1};
 	        ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#384: FILE: arch/um/os-Linux/start_up.c:330:
+	int p[2]={-1,-1};
 	            ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#384: FILE: arch/um/os-Linux/start_up.c:330:
+	int p[2]={-1,-1};
 	             ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#385: FILE: arch/um/os-Linux/start_up.c:331:
+	pid_t pid=os_getpid();
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: arch/um/os-Linux/start_up.c:332:
+	pid_t pid=os_getpid();
+	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){

ERROR:SPACING: space required before the open brace '{'
#386: FILE: arch/um/os-Linux/start_up.c:332:
+	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#386: FILE: arch/um/os-Linux/start_up.c:332:
+	if(ptrace(PTRACE_TRACEME, 0, 0, 0) < 0){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#391: FILE: arch/um/os-Linux/start_up.c:337:
+	*featurep=0;
 	         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#394: FILE: arch/um/os-Linux/start_up.c:340:
+	 * PTRACE_SYSCALL_SKIPEXIT works */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#395: FILE: arch/um/os-Linux/start_up.c:341:
+	*featurep=PTRACE_SYSCALL_SKIPEXIT;
 	         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#397: FILE: arch/um/os-Linux/start_up.c:343:
+^I/* if after a PTRACE_SYSCALL_SKIPCALL p[0] is already <0 $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#398: FILE: arch/um/os-Linux/start_up.c:344:
+	 * pipe has been really skipped */

CHECK:BRACES: braces {} should be used on all arms of this statement
#399: FILE: arch/um/os-Linux/start_up.c:345:
+	if (p[0] < 0)
[...]
+	else { /* clean up everything */
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#400: FILE: arch/um/os-Linux/start_up.c:346:
+		*featurep=PTRACE_SYSCALL_SKIPCALL;
 		         ^

CHECK:BRACES: Unbalanced braces around else statement
#401: FILE: arch/um/os-Linux/start_up.c:347:
+	else { /* clean up everything */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#408: FILE: arch/um/os-Linux/start_up.c:354:
+/* kernel feature test: $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#410: FILE: arch/um/os-Linux/start_up.c:356:
+ *   -1 error $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#414: FILE: arch/um/os-Linux/start_up.c:360:
+ *   by the running kernel */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#415: FILE: arch/um/os-Linux/start_up.c:361:
+static int __init test_ptrace_sysptvm(void) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#418: FILE: arch/um/os-Linux/start_up.c:364:
+	static char stack[1024];
+	feature=0;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#418: FILE: arch/um/os-Linux/start_up.c:364:
+	feature=0;
 	       ^

ERROR:SPACING: space required before the open parenthesis '('
#420: FILE: arch/um/os-Linux/start_up.c:366:
+	if((pid = clone(sysptvm_child, &stack[1020], SIGCHLD | CLONE_VM, &feature)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#420: FILE: arch/um/os-Linux/start_up.c:366:
+	if((pid = clone(sysptvm_child, &stack[1020], SIGCHLD | CLONE_VM, &feature)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: space required before the open brace '{'
#422: FILE: arch/um/os-Linux/start_up.c:368:
+	if(waitpid(pid, &status, WUNTRACED) < 0){

ERROR:SPACING: space required before the open parenthesis '('
#422: FILE: arch/um/os-Linux/start_up.c:368:
+	if(waitpid(pid, &status, WUNTRACED) < 0){

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#427: FILE: arch/um/os-Linux/start_up.c:373:
+	rv=ptrace(PTRACE_SYSCALL, pid, 0, 0);
 	  ^

ERROR:SPACING: space required before the open parenthesis '('
#428: FILE: arch/um/os-Linux/start_up.c:374:
+	if(waitpid(pid, &status, WUNTRACED) < 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#431: FILE: arch/um/os-Linux/start_up.c:377:
+	rv=ptrace(PTRACE_SYSCALL, pid, PTRACE_SYSCALL_SKIPEXIT, 0);
 	  ^

ERROR:SPACING: space required before the open parenthesis '('
#435: FILE: arch/um/os-Linux/start_up.c:381:
+	if(waitpid(pid, &status, WUNTRACED) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#439: FILE: arch/um/os-Linux/start_up.c:385:
+	 * entry call for the system call "time" */

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#440: FILE: arch/um/os-Linux/start_up.c:386:
+	if (feature<PTRACE_SYSCALL_SKIPEXIT)
 	           ^

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#442: FILE: arch/um/os-Linux/start_up.c:388:
+	/* restart (time) and and try to skip the entire call */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#443: FILE: arch/um/os-Linux/start_up.c:389:
+	rv=ptrace(PTRACE_SYSCALL, pid, PTRACE_SYSCALL_SKIPCALL, 0);
 	  ^

ERROR:SPACING: space required before the open parenthesis '('
#444: FILE: arch/um/os-Linux/start_up.c:390:
+	if(waitpid(pid, &status, WUNTRACED) < 0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: arch/um/os-Linux/start_up.c:393:
+	ptrace(PTRACE_KILL,pid,0,0);
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: arch/um/os-Linux/start_up.c:393:
+	ptrace(PTRACE_KILL,pid,0,0);
 	                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#447: FILE: arch/um/os-Linux/start_up.c:393:
+	ptrace(PTRACE_KILL,pid,0,0);
 	                        ^

ERROR:SPACING: space required before the open parenthesis '('
#449: FILE: arch/um/os-Linux/start_up.c:395:
+	if(waitpid(pid, &status, WUNTRACED) < 0)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#456: FILE: arch/um/os-Linux/start_up.c:402:
+	int feature=test_ptrace_sysptvm();
 	           ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#459: FILE: arch/um/os-Linux/start_up.c:405:
+	if (feature==PTRACE_SYSCALL_SKIPCALL) {
 	           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: arch/um/os-Linux/start_up.c:405:
+	if (feature==PTRACE_SYSCALL_SKIPCALL) {
[...]
+	} else
[...]

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#460: FILE: arch/um/os-Linux/start_up.c:406:
+		sysptvm_supported=1;
 		                 ^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#466: FILE: arch/um/os-Linux/start_up.c:412:
+			return 1;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#470: FILE: arch/um/os-Linux/start_up.c:416:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: arch/um/os-Linux/start_up.c:458:
+^Iif (use_sysemu || !check_sysptvm()) $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000172107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 50 errors, 15 warnings, 12 checks, 399 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000172107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
