WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#18: 
Subject: [git patches] libata fixes and checkpatch cleanups

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#218: FILE: drivers/ata/ata_piix.c:1109:
+	while ((pdev = pci_get_device(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82454NX, pdev)) != NULL) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#326: FILE: drivers/ata/libata-core.c:716:
+		printk(KERN_INFO "ata: SEMB device ignored\n");

CHECK:BRACES: Unbalanced braces around else statement
#382: FILE: drivers/ata/libata-core.c:1982:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#402: FILE: drivers/ata/libata-core.c:2669:
+#define ENOUGH(v, unit)		(((v)-1)/(unit)+1)
                        		     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#402: FILE: drivers/ata/libata-core.c:2669:
+#define ENOUGH(v, unit)		(((v)-1)/(unit)+1)
                        		        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#402: FILE: drivers/ata/libata-core.c:2669:
+#define ENOUGH(v, unit)		(((v)-1)/(unit)+1)
                        		               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#403: FILE: drivers/ata/libata-core.c:2670:
+#define EZ(v, unit)		((v)?ENOUGH(v, unit):0)
                    		    ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#403: FILE: drivers/ata/libata-core.c:2670:
+#define EZ(v, unit)		((v)?ENOUGH(v, unit):0)
                    		                    ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#403: FILE: drivers/ata/libata-core.c:2670:
+#define EZ(v, unit)		((v)?ENOUGH(v, unit):0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ap->cbl == ATA_CBL_PATA40'
#501: FILE: drivers/ata/libata-core.c:4134:
+		if ((ap->cbl == ATA_CBL_PATA40) ||
+		    (ata_drive_40wire(dev->id) &&
+		    (ap->cbl == ATA_CBL_PATA_UNK ||
+		     ap->cbl == ATA_CBL_PATA80))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#506: FILE: drivers/ata/libata-core.c:4139:
+			ata_dev_printk(dev, KERN_WARNING,
 				 "limited to UDMA/33 due to 40-wire cable\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/ata/libata-scsi.c:57:
+static struct ata_device *__ata_scsi_find_dev(struct ata_port *ap,
 					const struct scsi_device *scsidev);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#647: FILE: drivers/ata/libata-scsi.c:231:
+					    block count in sector count field */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#656: FILE: drivers/ata/libata-scsi.c:255:
+				  sensebuf, (10*HZ), 5, 0);
 				               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: drivers/ata/libata-scsi.c:354:
+			if (sshdr.sense_key == 0 &&
+				sshdr.asc == 0 && sshdr.ascq == 0)

WARNING:SPACING: Unnecessary space before function pointer arguments
#740: FILE: drivers/ata/libata-scsi.c:1593:
+			unsigned int (*actor) (struct ata_scsi_args *args,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#839: FILE: drivers/ata/libata-scsi.c:2932:
+		else switch (scsicmd[2]) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#939: FILE: drivers/ata/libata-scsi.c:2986:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tmp8 == 0x4'
#962: FILE: drivers/ata/libata-scsi.c:2998:
+		if ((tmp8 == 0x4) && (!scsicmd[3]) && (!scsicmd[4]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!scsicmd[3]'
#962: FILE: drivers/ata/libata-scsi.c:2998:
+		if ((tmp8 == 0x4) && (!scsicmd[3]) && (!scsicmd[4]))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!scsicmd[4]'
#962: FILE: drivers/ata/libata-scsi.c:2998:
+		if ((tmp8 == 0x4) && (!scsicmd[3]) && (!scsicmd[4]))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1046: FILE: drivers/ata/pata_ns87415.c:189:
+	iowrite8((ioread8(mmio + ATA_DMA_CMD) | ATA_DMA_INTR | ATA_DMA_ERR),
 			mmio + ATA_DMA_CMD);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1067: FILE: drivers/ata/sata_mv.c:886:
+			printk("%08x ", readl(start + b));

CHECK:SPACING: No space is necessary after a cast
#1077: FILE: drivers/ata/sata_mv.c:902:
+			(void) pci_read_config_dword(pdev, b, &dw);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1078: FILE: drivers/ata/sata_mv.c:903:
+			printk("%08x ", dw);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: drivers/ata/sata_nv.c:701:
+	while (((status & NV_ADMA_STAT_LEGACY) ||
 	      !(status & NV_ADMA_STAT_IDLE)) && count < 20) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: drivers/ata/sata_nv.c:1058:
+	writeb(NV_INT_ALL << (ap->port_no * NV_INT_PORT_SHIFT),
 		ap->host->iomap[NV_MMIO_BAR] + NV_INT_STATUS_CK804);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: drivers/ata/sata_nv.c:1063:
+	writew(tmp & ~(NV_ADMA_CTL_AIEN | NV_ADMA_CTL_HOTPLUG_IEN),
 		mmio + NV_ADMA_CTL);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1363: FILE: drivers/ata/sata_nv.c:1064:
+	readw(mmio + NV_ADMA_CTL );	/* flush posted write */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1373: FILE: drivers/ata/sata_nv.c:1081:
+	writew(tmp | (NV_ADMA_CTL_AIEN | NV_ADMA_CTL_HOTPLUG_IEN),
 		mmio + NV_ADMA_CTL);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1375: FILE: drivers/ata/sata_nv.c:1082:
+	readw(mmio + NV_ADMA_CTL );	/* flush posted write */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1385: FILE: drivers/ata/sata_nv.c:1098:
+	writeb(NV_INT_ALL << (ap->port_no * NV_INT_PORT_SHIFT),
 		ap->host->iomap[NV_MMIO_BAR] + NV_INT_STATUS_CK804);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/linux/libata.h:819:
+extern void ata_noop_dev_select(struct ata_port *ap, unsigned int device);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1474: FILE: include/linux/libata.h:820:
+extern void ata_std_dev_select(struct ata_port *ap, unsigned int device);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1481: FILE: include/linux/libata.h:824:
+extern int ata_port_start(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: include/linux/libata.h:825:
+extern int ata_sff_port_start(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1483: FILE: include/linux/libata.h:826:
+extern irqreturn_t ata_interrupt(int irq, void *dev_instance);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1493: FILE: include/linux/libata.h:847:
+extern void ata_bmdma_setup(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1494: FILE: include/linux/libata.h:848:
+extern void ata_bmdma_start(struct ata_queued_cmd *qc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1503: FILE: include/linux/libata.h:923:
+extern int ata_pci_init_one(struct pci_dev *pdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1504: FILE: include/linux/libata.h:924:
+extern int ata_pci_init_one(struct pci_dev *pdev,
 			     const struct ata_port_info * const * ppi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1506: FILE: include/linux/libata.h:925:
+extern void ata_pci_remove_one(struct pci_dev *pdev);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366415.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 9 warnings, 32 checks, 1286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000366415.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
