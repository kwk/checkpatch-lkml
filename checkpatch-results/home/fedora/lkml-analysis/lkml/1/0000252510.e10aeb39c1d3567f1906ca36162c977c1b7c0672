WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
>>>> In the worst case today we can restore a checkpoint by replaying all of

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#94: 
#include <unistd.h>

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#95: 
#include <stdio.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
#include <sys/syscall.h>

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#include <errno.h>

WARNING:TYPO_SPELLING: 'embarassed' may be misspelled - perhaps 'embarrassed'?
#135: 
embarassed to send it out, but figure I should send it out before
^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: No space is necessary after a cast
#196: FILE: arch/x86/kernel/process_32.c:776:
+	filename = getname((char __user *) regs.bx);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#251: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#256: FILE: fs/binfmt_cr.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#273: FILE: fs/binfmt_cr.c:18:
+static int load_checkpoint(struct linux_binprm *bprm,struct pt_regs *regs)
                                                     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#285: FILE: fs/binfmt_cr.c:30:
+	printk(KERN_NOTICE "%s: checking version\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#291: FILE: fs/binfmt_cr.c:36:
+		printk(KERN_NOTICE "Serge: bump by 1\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#294: FILE: fs/binfmt_cr.c:39:
+	printk(KERN_NOTICE "%s: reading arg_start\n", __func__);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#295: FILE: fs/binfmt_cr.c:40:
+	retval = sscanf(cp, "%lu", &arg_start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#298: FILE: fs/binfmt_cr.c:43:
+	printk(KERN_NOTICE "%s: arg_start was %lu\n", __func__, arg_start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#299: FILE: fs/binfmt_cr.c:44:
+	printk(KERN_NOTICE "%s: moving cp to did_exec\n", __func__);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#300: FILE: fs/binfmt_cr.c:45:
+	while (*(++cp) != ' ' && (cp-bprm->buf < BINPRM_BUF_SIZE));
 	                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#300: FILE: fs/binfmt_cr.c:45:
+	while (*(++cp) != ' ' && (cp-bprm->buf < BINPRM_BUF_SIZE));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#302: FILE: fs/binfmt_cr.c:47:
+	if (cp-bprm->buf >= BINPRM_BUF_SIZE)
 	      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#304: FILE: fs/binfmt_cr.c:49:
+	printk(KERN_NOTICE "%s: reading did_exec (cp is %s)\n", __func__, cp);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#305: FILE: fs/binfmt_cr.c:50:
+	retval = sscanf(cp, "%hu", &did_exec);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#308: FILE: fs/binfmt_cr.c:53:
+	printk(KERN_NOTICE "%s: did_exec was %hu\n", __func__, did_exec);

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#308: FILE: fs/binfmt_cr.c:53:
+	printk(KERN_NOTICE "%s: did_exec was %hu\n", __func__, did_exec);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#309: FILE: fs/binfmt_cr.c:54:
+	printk(KERN_NOTICE "%s: moving cp to fname\n", __func__);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#310: FILE: fs/binfmt_cr.c:55:
+	while (*(++cp) != ' ' && (cp-bprm->buf < BINPRM_BUF_SIZE));
 	                            ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#310: FILE: fs/binfmt_cr.c:55:
+	while (*(++cp) != ' ' && (cp-bprm->buf < BINPRM_BUF_SIZE));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#312: FILE: fs/binfmt_cr.c:57:
+	if (cp-bprm->buf >= BINPRM_BUF_SIZE)
 	      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#317: FILE: fs/binfmt_cr.c:62:
+	printk(KERN_NOTICE "%s: opening fname: %s\n", __func__, cp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#322: FILE: fs/binfmt_cr.c:67:
+	printk(KERN_NOTICE "%s: calling prepare_binprm %s\n", __func__, cp);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#327: FILE: fs/binfmt_cr.c:72:
+	retval = search_binary_handler(bprm,regs);
 	                                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#328: FILE: fs/binfmt_cr.c:73:
+	if (retval >= 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#330: FILE: fs/binfmt_cr.c:75:
+		printk(KERN_NOTICE "%s: execve succeeded!\n", __func__);

CHECK:BRACES: Unbalanced braces around else statement
#333: FILE: fs/binfmt_cr.c:78:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#334: FILE: fs/binfmt_cr.c:79:
+		printk(KERN_NOTICE "%s: execve failed with %d.\n", __func__, retval);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: fs/checkpoint.c:1:
+#include <linux/module.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: fs/checkpoint.c:19:
+	struct file *f = current->mm->exe_file;
+	return dentry_path(f->f_dentry, buf, buflen);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: fs/checkpoint.c:37:
+int dump_checkpoint(struct file *file, struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#414: FILE: fs/checkpoint.c:53:
+	printk(KERN_NOTICE "%s: writing a dump file\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#417: FILE: fs/checkpoint.c:56:
+	printk(KERN_NOTICE "%s: wrote ckpt id\n", __func__);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#433: FILE: fs/checkpoint.c:72:
+	if (!checkpoint_write(file, sret, strlen(sret)+1))
 	                                              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#435: FILE: fs/checkpoint.c:74:
+	printk(KERN_NOTICE "%s: returning %d\n", __func__, retval);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#458: FILE: fs/exec.c:1795:
+int do_checkpoint(char *filename, struct pt_regs * regs)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#461: FILE: fs/exec.c:1798:
+	struct file * file;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#463: FILE: fs/exec.c:1800:
+	printk(KERN_NOTICE "%s: called (filename %s)\n", __func__, filename);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#464: FILE: fs/exec.c:1801:
+	file = filp_open(filename, O_CREAT|O_NOFOLLOW|O_WRONLY, 0600);
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#464: FILE: fs/exec.c:1801:
+	file = filp_open(filename, O_CREAT|O_NOFOLLOW|O_WRONLY, 0600);
 	                                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#467: FILE: fs/exec.c:1804:
+	printk(KERN_NOTICE "%s: create went ok\n", __func__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#507: FILE: include/linux/checkpoint.h:1:
+#define CKPT_ID "LX_CKPT"

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#511: FILE: include/linux/checkpoint.h:5:
+int dump_checkpoint(struct file *file, struct pt_regs * regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#520: FILE: include/linux/sched.h:1864:
+extern int do_checkpoint(char *, struct pt_regs *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#520: FILE: include/linux/sched.h:1864:
+extern int do_checkpoint(char *, struct pt_regs *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#520: FILE: include/linux/sched.h:1864:
+extern int do_checkpoint(char *, struct pt_regs *);

CHECK:CAMELCASE: Avoid CamelCase: <Free>
#604: FILE: cr.c:1922:
+			Free(ckpt_file);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#612: FILE: cr.c:1930:
+		else ITEM_SET(ckpt_file, char);

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#621: FILE: cr.c:1943:
+				t_d(npid = restart_first_proc(fd, ckpt_file ? ckpt_file : exe, sargv, la, senv, le, *pid));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#628: FILE: cr.c:1949:
+					t_d(npid = restart_proc(fd, nppid, ckpt_file ? ckpt_file : exe, sargv, la, senv, le, *pid));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252510.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 35 warnings, 12 checks, 359 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000252510.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
