WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#35: FILE: drivers/mtd/ubi/vmt.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#49: FILE: drivers/mtd/ubi/vmt.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#50: FILE: drivers/mtd/ubi/vmt.c:16:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#75: FILE: drivers/mtd/ubi/vmt.c:41:
+	__ATTR(reserved_ebs, S_IRUGO, vol_attribute_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#77: FILE: drivers/mtd/ubi/vmt.c:43:
+	__ATTR(type, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#79: FILE: drivers/mtd/ubi/vmt.c:45:
+	__ATTR(name, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#81: FILE: drivers/mtd/ubi/vmt.c:47:
+	__ATTR(corrupted, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#83: FILE: drivers/mtd/ubi/vmt.c:49:
+	__ATTR(alignment, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#85: FILE: drivers/mtd/ubi/vmt.c:51:
+	__ATTR(usable_eb_size, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#87: FILE: drivers/mtd/ubi/vmt.c:53:
+	__ATTR(data_bytes, S_IRUGO, vol_attribute_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#89: FILE: drivers/mtd/ubi/vmt.c:55:
+	__ATTR(upd_marker, S_IRUGO, vol_attribute_show, NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#115: FILE: drivers/mtd/ubi/vmt.c:81:
+	if (attr == &vol_reserved_ebs)
[...]
+	else if (attr == &vol_type) {
[...]
+	} else if (attr == &vol_name)
[...]
+	else if (attr == &vol_corrupted)
[...]
+	else if (attr == &vol_alignment)
[...]
+	else if (attr == &vol_usable_eb_size) {
[...]
+	} else if (attr == &vol_data_bytes)
[...]
+	else if (attr == &vol_upd_marker)
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#119: FILE: drivers/mtd/ubi/vmt.c:85:
+		const char *tp;
+		tp = vol->vol_type == UBI_DYNAMIC_VOLUME ? "dynamic" : "static";

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#134: FILE: drivers/mtd/ubi/vmt.c:100:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: drivers/mtd/ubi/vmt.c:109:
+	struct ubi_volume *vol = container_of(dev, struct ubi_volume, dev);
+	ubi_assert(vol->removed);

WARNING:TYPO_SPELLING: 'assigne' may be misspelled - perhaps 'assign'?
#213: FILE: drivers/mtd/ubi/vmt.c:179:
+ * %UBI_VOL_NUM_AUTO, this function automatically assigne ID to the new volume
                                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#222: FILE: drivers/mtd/ubi/vmt.c:188:
+	uint64_t bytes;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vol)...) over kzalloc(sizeof(struct ubi_volume)...)
#227: FILE: drivers/mtd/ubi/vmt.c:193:
+	vol = kzalloc(sizeof(struct ubi_volume), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:CODE_INDENT: code indent should use tabs where possible
#234: FILE: drivers/mtd/ubi/vmt.c:200:
+ ^I^I/* Find unused volume ID */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#234: FILE: drivers/mtd/ubi/vmt.c:200:
+ ^I^I/* Find unused volume ID */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#234: FILE: drivers/mtd/ubi/vmt.c:200:
+ ^I^I/* Find unused volume ID */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: drivers/mtd/ubi/vmt.c:236:
+        /* Calculate how many eraseblocks are requested */$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#306: FILE: drivers/mtd/ubi/vmt.c:272:
+	vol->eba_tbl = kmalloc(vol->reserved_pebs * sizeof(int), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#511: FILE: drivers/mtd/ubi/vmt.c:477:
+	new_mapping = kmalloc(reserved_pebs * sizeof(int), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'Returnes' may be misspelled - perhaps 'Returns'?
#598: FILE: drivers/mtd/ubi/vmt.c:564:
+ * structures. Returnes zero in case of success and a negative error code in
                ^^^^^^^^

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#816: FILE: drivers/mtd/ubi/vmt.c:782:
+	    name_len!= vol->name_len || strncmp(name, vol->name, name_len)) {
 	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: drivers/mtd/ubi/vmt.c:793:
+	BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 19 warnings, 3 checks, 811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
