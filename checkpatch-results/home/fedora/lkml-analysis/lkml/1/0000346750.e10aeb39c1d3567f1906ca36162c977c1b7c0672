ERROR:SPACING: space prohibited after that open parenthesis '('
#120: FILE: arch/x86/kernel/kprobes_32.c:573:
+	asm volatile (  ".global kretprobe_trampoline\n"

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#121: FILE: arch/x86/kernel/kprobes_32.c:574:
+			"kretprobe_trampoline: \n"

ERROR:SPACING: space prohibited after that open parenthesis '('
#208: FILE: arch/x86/kernel/kprobes_64.c:544:
+	asm volatile ( ".global kretprobe_trampoline\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#209: FILE: arch/x86/kernel/kprobes_64.c:545:
+			"kretprobe_trampoline: \n"

ERROR:SPACING: space prohibited after that open parenthesis '('
#242: FILE: arch/x86/kernel/kprobes_64.c:578:
+	asm volatile (  ".global kretprobe_trampoline\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#243: FILE: arch/x86/kernel/kprobes_64.c:579:
+			"kretprobe_trampoline: \n"

WARNING:BAD_SIGN_OFF: Duplicate signature
#296: 
Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Duplicate signature
#442: 
Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#465: FILE: arch/x86/kernel/kprobes_32.c:744:
+	if (next_rip) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->ip > copy_ip'
#484: FILE: arch/x86/kernel/kprobes_64.c:724:
+		if ((regs->ip > copy_ip) &&
+		    (regs->ip - copy_ip) + 5 < (MAX_INSN_SIZE + 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BAD_SIGN_OFF: Duplicate signature
#521: 
Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#532: FILE: arch/x86/kernel/kprobes_32.c:16:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#737: FILE: arch/x86/kernel/kprobes_64.c:16:
  * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:SPACING: space required before the open brace '{'
#807: FILE: arch/x86/kernel/kprobes_64.c:532:
+	if (p->ainsn.boostable == 1 && !p->post_handler){

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#884: FILE: arch/x86/kernel/kprobes_64.c:676:
+	return (void*)orig_ret_address;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BAD_SIGN_OFF: Duplicate signature
#1001: 
Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1023: FILE: arch/x86/kernel/kprobes_32.c:31:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1077: FILE: arch/x86/kernel/kprobes_64.c:29:
+#include <asm/cacheflush.h>

WARNING:BAD_SIGN_OFF: Duplicate signature
#1124: 
Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1160: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1165: FILE: arch/x86/kernel/kprobes.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1179: FILE: arch/x86/kernel/kprobes.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1180: FILE: arch/x86/kernel/kprobes.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1193: FILE: arch/x86/kernel/kprobes.c:29:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1195: FILE: arch/x86/kernel/kprobes.c:31:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1196: FILE: arch/x86/kernel/kprobes.c:32:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1207: FILE: arch/x86/kernel/kprobes.c:43:
+	{"__switch_to", }, /* This function switches only current task, but
+			      doesn't switch kernel stack.*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1207: FILE: arch/x86/kernel/kprobes.c:43:
+			      doesn't switch kernel stack.*/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1210: FILE: arch/x86/kernel/kprobes.c:46:
+};
+const int kretprobe_blacklist_size = ARRAY_SIZE(kretprobe_blacklist);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1212: FILE: arch/x86/kernel/kprobes.c:48:
+#define W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf)  \
                                                      ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'r' may be better as '(r)' to avoid precedence issues
#1212: FILE: arch/x86/kernel/kprobes.c:48:
+#define W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf)  \
+	(((b0##UL << 0x0)|(b1##UL << 0x1)|(b2##UL << 0x2)|(b3##UL << 0x3) |   \
+	  (b4##UL << 0x4)|(b5##UL << 0x5)|(b6##UL << 0x6)|(b7##UL << 0x7) |   \
+	  (b8##UL << 0x8)|(b9##UL << 0x9)|(ba##UL << 0xa)|(bb##UL << 0xb) |   \
+	  (bc##UL << 0xc)|(bd##UL << 0xd)|(be##UL << 0xe)|(bf##UL << 0xf))    \
+	 << (r % sizeof(unsigned long)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1213: FILE: arch/x86/kernel/kprobes.c:49:
+	(((b0##UL << 0x0)|(b1##UL << 0x1)|(b2##UL << 0x2)|(b3##UL << 0x3) |   \
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1213: FILE: arch/x86/kernel/kprobes.c:49:
+	(((b0##UL << 0x0)|(b1##UL << 0x1)|(b2##UL << 0x2)|(b3##UL << 0x3) |   \
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1213: FILE: arch/x86/kernel/kprobes.c:49:
+	(((b0##UL << 0x0)|(b1##UL << 0x1)|(b2##UL << 0x2)|(b3##UL << 0x3) |   \
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1214: FILE: arch/x86/kernel/kprobes.c:50:
+	  (b4##UL << 0x4)|(b5##UL << 0x5)|(b6##UL << 0x6)|(b7##UL << 0x7) |   \
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1214: FILE: arch/x86/kernel/kprobes.c:50:
+	  (b4##UL << 0x4)|(b5##UL << 0x5)|(b6##UL << 0x6)|(b7##UL << 0x7) |   \
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1214: FILE: arch/x86/kernel/kprobes.c:50:
+	  (b4##UL << 0x4)|(b5##UL << 0x5)|(b6##UL << 0x6)|(b7##UL << 0x7) |   \
 	                                                 ^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1215: FILE: arch/x86/kernel/kprobes.c:51:
+	  (b8##UL << 0x8)|(b9##UL << 0x9)|(ba##UL << 0xa)|(bb##UL << 0xb) |   \
 	                                   ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1215: FILE: arch/x86/kernel/kprobes.c:51:
+	  (b8##UL << 0x8)|(b9##UL << 0x9)|(ba##UL << 0xa)|(bb##UL << 0xb) |   \
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1215: FILE: arch/x86/kernel/kprobes.c:51:
+	  (b8##UL << 0x8)|(b9##UL << 0x9)|(ba##UL << 0xa)|(bb##UL << 0xb) |   \
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1215: FILE: arch/x86/kernel/kprobes.c:51:
+	  (b8##UL << 0x8)|(b9##UL << 0x9)|(ba##UL << 0xa)|(bb##UL << 0xb) |   \
 	                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1216: FILE: arch/x86/kernel/kprobes.c:52:
+	  (bc##UL << 0xc)|(bd##UL << 0xd)|(be##UL << 0xe)|(bf##UL << 0xf))    \
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1216: FILE: arch/x86/kernel/kprobes.c:52:
+	  (bc##UL << 0xc)|(bd##UL << 0xd)|(be##UL << 0xe)|(bf##UL << 0xf))    \
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1216: FILE: arch/x86/kernel/kprobes.c:52:
+	  (bc##UL << 0xc)|(bd##UL << 0xd)|(be##UL << 0xe)|(bf##UL << 0xf))    \
 	                                                 ^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1219: FILE: arch/x86/kernel/kprobes.c:55:
+#define R1(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1219: FILE: arch/x86/kernel/kprobes.c:55:
+#define R1(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1220: FILE: arch/x86/kernel/kprobes.c:56:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |
 	                                              ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1221: FILE: arch/x86/kernel/kprobes.c:57:
+#define R3(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1221: FILE: arch/x86/kernel/kprobes.c:57:
+#define R3(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1222: FILE: arch/x86/kernel/kprobes.c:58:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |
 	                                              ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1223: FILE: arch/x86/kernel/kprobes.c:59:
+#define R4(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1224: FILE: arch/x86/kernel/kprobes.c:60:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf),
 	                                              ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1225: FILE: arch/x86/kernel/kprobes.c:61:
+#define RF(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1226: FILE: arch/x86/kernel/kprobes.c:62:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf)
 	                                              ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1229: FILE: arch/x86/kernel/kprobes.c:65:
+#define R2(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1230: FILE: arch/x86/kernel/kprobes.c:66:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf),
 	                                              ^^

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1232: FILE: arch/x86/kernel/kprobes.c:68:
+#define R2(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
                                                       ^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1232: FILE: arch/x86/kernel/kprobes.c:68:
+#define R2(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) \
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |

WARNING:TYPO_SPELLING: 'ba' may be misspelled - perhaps 'by'?
#1233: FILE: arch/x86/kernel/kprobes.c:69:
+	 W(r, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf) |
 	                                              ^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1325: FILE: arch/x86/kernel/kprobes.c:161:
+	} __attribute__((packed)) *jop;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1352: FILE: arch/x86/kernel/kprobes.c:188:
+		if (0x63 < opcode && opcode < 0x67)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1360: FILE: arch/x86/kernel/kprobes.c:196:
+		return (0xc1 < opcode && opcode < 0xcc) || opcode == 0xcf;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1371: FILE: arch/x86/kernel/kprobes.c:207:
+		return (opcode == 0xf5 || (0xf7 < opcode && opcode < 0xfe));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1454: FILE: arch/x86/kernel/kprobes.c:290:
+		u8 modrm = *++insn;
+		if ((modrm & 0xc7) == 0x05) { /* %rip+disp32 addressing mode */

CHECK:SPACING: No space is necessary after a cast
#1456: FILE: arch/x86/kernel/kprobes.c:292:
+			return (s32 *) ++insn;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1469: FILE: arch/x86/kernel/kprobes.c:305:
+	if (can_boost(p->addr)) {
[...]
+	} else {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1476: FILE: arch/x86/kernel/kprobes.c:312:
+	s32 *ripdisp;
+	memcpy(p->ainsn.insn, p->addr, MAX_INSN_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1492: FILE: arch/x86/kernel/kprobes.c:328:
+		s64 disp = (u8 *) p->addr + *ripdisp - (u8 *) p->ainsn.insn;

CHECK:SPACING: No space is necessary after a cast
#1493: FILE: arch/x86/kernel/kprobes.c:329:
+		BUG_ON((s64) (s32) disp != disp); /* Sanity check.  */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1493: FILE: arch/x86/kernel/kprobes.c:329:
+		s64 disp = (u8 *) p->addr + *ripdisp - (u8 *) p->ainsn.insn;
+		BUG_ON((s64) (s32) disp != disp); /* Sanity check.  */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1493: FILE: arch/x86/kernel/kprobes.c:329:
+		BUG_ON((s64) (s32) disp != disp); /* Sanity check.  */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1538: FILE: arch/x86/kernel/kprobes.c:374:
+static void __kprobes set_current_kprobe(struct kprobe *p, struct pt_regs *regs,
+				struct kprobe_ctlblk *kcb)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1542: FILE: arch/x86/kernel/kprobes.c:378:
+	kcb->kprobe_saved_flags = kcb->kprobe_old_flags
+		= (regs->flags & (TF_MASK | IF_MASK));

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: No space is necessary after a cast
#1585: FILE: arch/x86/kernel/kprobes.c:421:
+	ri->ret_addr = (kprobe_opcode_t *) *sara;

CHECK:SPACING: No space is necessary after a cast
#1587: FILE: arch/x86/kernel/kprobes.c:423:
+	*sara = (unsigned long) &kretprobe_trampoline;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1615: FILE: arch/x86/kernel/kprobes.c:451:
+			if (kcb->kprobe_status == KPROBE_HIT_SS &&
+				*p->ainsn.insn == BREAKPOINT_INSTRUCTION) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1675: FILE: arch/x86/kernel/kprobes.c:511:
+			if (p->break_handler && p->break_handler(p, regs)) {
+				goto ss_probe;
+			}

ERROR:SPACING: space required before the open brace '{'
#1714: FILE: arch/x86/kernel/kprobes.c:550:
+	if (p->ainsn.boostable == 1 && !p->post_handler){

ERROR:SPACING: space prohibited after that open parenthesis '('
#1739: FILE: arch/x86/kernel/kprobes.c:575:
+	asm volatile ( ".global kretprobe_trampoline\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1740: FILE: arch/x86/kernel/kprobes.c:576:
+			"kretprobe_trampoline: \n"

ERROR:SPACING: space prohibited after that open parenthesis '('
#1773: FILE: arch/x86/kernel/kprobes.c:609:
+	asm volatile (  ".global kretprobe_trampoline\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1774: FILE: arch/x86/kernel/kprobes.c:610:
+			"kretprobe_trampoline: \n"

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#1792: FILE: arch/x86/kernel/kprobes.c:628:
+	unsigned long trampoline_address =(unsigned long)&kretprobe_trampoline;
 	                                 ^

WARNING:REPEATED_WORD: Possible repeated word: 'return'
#1807: FILE: arch/x86/kernel/kprobes.c:643:
+	 * have a return probe installed on them, and/or more then one return
+	 * return probe was registered for a target function.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1858: FILE: arch/x86/kernel/kprobes.c:694:
+	return (void*)orig_ret_address;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: arch/x86/kernel/kprobes.c:730:
+static void __kprobes resume_execution(struct kprobe *p,
+		struct pt_regs *regs, struct kprobe_ctlblk *kcb)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->ip > copy_ip'
#1979: FILE: arch/x86/kernel/kprobes.c:815:
+		if ((regs->ip > copy_ip) &&
+		    (regs->ip - copy_ip) + 5 < (MAX_INSN_SIZE + 1)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1997: FILE: arch/x86/kernel/kprobes.c:833:
+	if (next_rip) {
[...]
+	} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'kcb->kprobe_status != KPROBE_REENTER'
#2018: FILE: arch/x86/kernel/kprobes.c:854:
+	if ((kcb->kprobe_status != KPROBE_REENTER) && cur->post_handler) {

ERROR:SPACING: space required before the open parenthesis '('
#2055: FILE: arch/x86/kernel/kprobes.c:891:
+	switch(kcb->kprobe_status) {

WARNING:TYPO_SPELLING: 'accouting' may be misspelled - perhaps 'accounting'?
#2077: FILE: arch/x86/kernel/kprobes.c:913:
+		 * we can also use npre/npostfault count for accouting
 		                                             ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2175: FILE: arch/x86/kernel/kprobes.c:1011:
+	memcpy(kcb->jprobes_stack, (kprobe_opcode_t *)addr,
+			MIN_STACK_SIZE(addr));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2186: FILE: arch/x86/kernel/kprobes.c:1022:
+	asm volatile ("       xchgl   %%ebx,%%esp     \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2187: FILE: arch/x86/kernel/kprobes.c:1023:
+		      "       int3			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2188: FILE: arch/x86/kernel/kprobes.c:1024:
+		      "       .globl jprobe_return_end	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2189: FILE: arch/x86/kernel/kprobes.c:1025:
+		      "       jprobe_return_end:	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2190: FILE: arch/x86/kernel/kprobes.c:1026:
+		      "       nop			\n"::"b"

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2191: FILE: arch/x86/kernel/kprobes.c:1027:
+		      (kcb->jprobe_saved_sp):"memory");
 		                            ^

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2193: FILE: arch/x86/kernel/kprobes.c:1029:
+	asm volatile ("       xchg   %%rbx,%%rsp     \n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2194: FILE: arch/x86/kernel/kprobes.c:1030:
+		      "       int3			\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2195: FILE: arch/x86/kernel/kprobes.c:1031:
+		      "       .globl jprobe_return_end	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2196: FILE: arch/x86/kernel/kprobes.c:1032:
+		      "       jprobe_return_end:	\n"

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#2197: FILE: arch/x86/kernel/kprobes.c:1033:
+		      "       nop			\n"::"b"

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2198: FILE: arch/x86/kernel/kprobes.c:1034:
+		      (kcb->jprobe_saved_sp):"memory");
 		                            ^

CHECK:SPACING: No space is necessary after a cast
#2205: FILE: arch/x86/kernel/kprobes.c:1041:
+	u8 *addr = (u8 *) (regs->ip - 1);

CHECK:SPACING: No space is necessary after a cast
#2209: FILE: arch/x86/kernel/kprobes.c:1045:
+	if ((addr > (u8 *) jprobe_return) && (addr < (u8 *) jprobe_return_end)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2213: FILE: arch/x86/kernel/kprobes.c:1049:
+			    container_of(kcb->jprobe_saved_sp,
+					    struct pt_regs, sp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2214: FILE: arch/x86/kernel/kprobes.c:1050:
+			printk("current sp %p does not match saved sp %p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2216: FILE: arch/x86/kernel/kprobes.c:1052:
+			printk("Saved registers for jprobe %p\n", jp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2218: FILE: arch/x86/kernel/kprobes.c:1054:
+			printk("Current registers\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2220: FILE: arch/x86/kernel/kprobes.c:1056:
+			BUG();

CHECK:SPACING: No space is necessary after a cast
#2223: FILE: arch/x86/kernel/kprobes.c:1059:
+		memcpy((kprobe_opcode_t *) stack_addr, kcb->jprobes_stack,

CHECK:SPACING: No space is necessary after a cast
#2233: FILE: arch/x86/kernel/kprobes.c:1069:
+	.addr = (kprobe_opcode_t *) &kretprobe_trampoline,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 56 warnings, 39 checks, 2004 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000346750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
