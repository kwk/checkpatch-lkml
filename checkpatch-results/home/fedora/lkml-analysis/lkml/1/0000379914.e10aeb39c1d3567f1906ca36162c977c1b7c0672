WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
Cache (unmapped) pages.  There is now a common limit and accounting for both. 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/memcontrol.h:33:
+extern int mem_cgroup_charge(struct page *page, struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#80: FILE: include/linux/memcontrol.h:34:
+extern void mem_cgroup_uncharge(struct page_cgroup *pc);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#132: FILE: mm/filemap.c:446:
 	if (error == 0) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#145: FILE: mm/filemap.c:460:
+		} else

WARNING:TYPO_SPELLING: 'atleast' may be misspelled - perhaps 'at least'?
#184: FILE: mm/memcontrol.c:58:
+ * lock. We need to ensure that page->page_cgroup is atleast two
                                                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#187: FILE: mm/memcontrol.c:61:
+#define PAGE_CGROUP_LOCK_BIT ^I0x0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#188: FILE: mm/memcontrol.c:62:
+#define PAGE_CGROUP_LOCK ^I^I(1 << PAGE_CGROUP_LOCK_BIT)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: mm/memcontrol.c:62:
+#define PAGE_CGROUP_LOCK 		(1 << PAGE_CGROUP_LOCK_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#236: FILE: mm/memcontrol.c:133:
+void __always_inline lock_page_cgroup(struct page *page)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#242: FILE: mm/memcontrol.c:139:
+void __always_inline unlock_page_cgroup(struct page *page)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pc)...) over kzalloc(sizeof(struct page_cgroup)...)
#277: FILE: mm/memcontrol.c:174:
+	pc = kzalloc(sizeof(struct page_cgroup), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pc"
#278: FILE: mm/memcontrol.c:175:
+	if (pc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#431: FILE: mm/memory.c:1674:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#586: FILE: mm/rmap.c:554:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#634: FILE: mm/swap_state.c:83:
 	if (!error) {
+

CHECK:BRACES: Unbalanced braces around else statement
#647: FILE: mm/swap_state.c:97:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: mm/swapfile.c:511:
+static int unuse_pte(struct vm_area_struct *vma, pte_t *pte,
 		unsigned long addr, swp_entry_t entry, struct page *page)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#794: FILE: mm/swapfile.c:641:
+		if (vma->anon_vma && (ret = unuse_vma(vma, entry, page)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379914.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 4 warnings, 12 checks, 659 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379914.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
