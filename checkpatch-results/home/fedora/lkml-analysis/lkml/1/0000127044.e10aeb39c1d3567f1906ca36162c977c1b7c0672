WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
[Patch 2/4]: The pte fault handler detects, via a new "untouched bit" inside

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#57: FILE: mm/memory.c:2840:
struct vm_area_struct *vma,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: mm/memory.c:2847:
+       *result = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: mm/memory.c:2848:
+       return alloc_pages_node((int)node, GFP_HIGHUSER_MOVABLE |$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: mm/memory.c:2856:
+ * If the migration failed, we leave the page on the original node. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#77: FILE: mm/memory.c:2858:
+static inline void migrate_page_to_current_node(struct page* page) $

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#77: FILE: mm/memory.c:2858:
+static inline void migrate_page_to_current_node(struct page* page) 

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: mm/memory.c:2860:
+       unsigned long source = page_to_nid(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: mm/memory.c:2861:
+       unsigned long dest = numa_node_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: mm/memory.c:2862:
+       nodemask_t task_nodes;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: mm/memory.c:2863:
+       LIST_HEAD(pagelist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: mm/memory.c:2865:
+       if (dest == source)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#84: FILE: mm/memory.c:2865:
+       if (dest == source)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: mm/memory.c:2866:
+               return;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: mm/memory.c:2866:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: mm/memory.c:2868:
+       task_nodes = cpuset_mems_allowed(current);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: mm/memory.c:2869:
+       if (!node_isset(dest, task_nodes)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#88: FILE: mm/memory.c:2869:
+       if (!node_isset(dest, task_nodes)) {
+               count_vm_event(AONT_INVALID_NODEMASK);

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: mm/memory.c:2870:
+               count_vm_event(AONT_INVALID_NODEMASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: mm/memory.c:2870:
+               count_vm_event(AONT_INVALID_NODEMASK);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: mm/memory.c:2871:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: mm/memory.c:2871:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: mm/memory.c:2872:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: mm/memory.c:2874:
+       if (!PageLRU(page))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#93: FILE: mm/memory.c:2874:
+       if (!PageLRU(page))
+               lru_add_drain();

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: mm/memory.c:2875:
+               lru_add_drain();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: mm/memory.c:2875:
+               lru_add_drain();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: mm/memory.c:2877:
+       if (isolate_lru_page(page) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#96: FILE: mm/memory.c:2877:
+       if (isolate_lru_page(page) != 0) {
+               count_vm_event(AONT_ISOLATE_BUSY);

CHECK:BRACES: braces {} should be used on all arms of this statement
#96: FILE: mm/memory.c:2877:
+       if (isolate_lru_page(page) != 0) {
[...]
+       } else list_add_tail(&page->lru, &pagelist);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: mm/memory.c:2878:
+               count_vm_event(AONT_ISOLATE_BUSY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: mm/memory.c:2878:
+               count_vm_event(AONT_ISOLATE_BUSY);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: mm/memory.c:2879:
+               migrate_prep();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: mm/memory.c:2879:
+               migrate_prep();$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: mm/memory.c:2880:
+               if (isolate_lru_page(page) != 0) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: mm/memory.c:2880:
+               if (isolate_lru_page(page) != 0) $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: mm/memory.c:2880:
+               if (isolate_lru_page(page) != 0) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#99: FILE: mm/memory.c:2880:
+               if (isolate_lru_page(page) != 0) 
+                       count_vm_event(AONT_ISOLATE_FAILED);

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: mm/memory.c:2881:
+                       count_vm_event(AONT_ISOLATE_FAILED);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: mm/memory.c:2881:
+                       count_vm_event(AONT_ISOLATE_FAILED);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: mm/memory.c:2882:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: mm/memory.c:2882:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#101: FILE: mm/memory.c:2882:
+               else
+                       list_add_tail(&page->lru, &pagelist);

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: mm/memory.c:2883:
+                       list_add_tail(&page->lru, &pagelist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: mm/memory.c:2883:
+                       list_add_tail(&page->lru, &pagelist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: mm/memory.c:2884:
+       } else list_add_tail(&page->lru, &pagelist);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#103: FILE: mm/memory.c:2884:
+       } else list_add_tail(&page->lru, &pagelist);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: mm/memory.c:2886:
+       if (likely(!list_empty(&pagelist))) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#105: FILE: mm/memory.c:2886:
+       if (likely(!list_empty(&pagelist))) {
+               if (migrate_pages(&pagelist, new_single_page, dest) != 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: mm/memory.c:2887:
+               if (migrate_pages(&pagelist, new_single_page, dest) != 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: mm/memory.c:2887:
+               if (migrate_pages(&pagelist, new_single_page, dest) != 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#106: FILE: mm/memory.c:2887:
+               if (migrate_pages(&pagelist, new_single_page, dest) != 0)
+                       count_vm_event(AONT_MIGRATION_FAILED);

ERROR:CODE_INDENT: code indent should use tabs where possible
#107: FILE: mm/memory.c:2888:
+                       count_vm_event(AONT_MIGRATION_FAILED);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: mm/memory.c:2888:
+                       count_vm_event(AONT_MIGRATION_FAILED);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: mm/memory.c:2889:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: mm/memory.c:2940:
+       if (vma_migratable(vma)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#133: FILE: mm/memory.c:2940:
+       if (vma_migratable(vma)) {
+               struct page* page = vm_normal_page(vma, address, entry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: mm/memory.c:2941:
+               struct page* page = vm_normal_page(vma, address, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: mm/memory.c:2941:
+               struct page* page = vm_normal_page(vma, address, entry);$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#134: FILE: mm/memory.c:2941:
+               struct page* page = vm_normal_page(vma, address, entry);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: mm/memory.c:2942:
+               if (page && !PageReserved(page) $

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: mm/memory.c:2942:
+               if (page && !PageReserved(page) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: mm/memory.c:2942:
+               struct page* page = vm_normal_page(vma, address, entry);
+               if (page && !PageReserved(page) 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: mm/memory.c:2942:
+               if (page && !PageReserved(page) $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#135: FILE: mm/memory.c:2942:
+               if (page && !PageReserved(page) 
[...]
+                       __clear_page_locked(page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: mm/memory.c:2943:
+                 && TestClearPageUntouched(page)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#136: FILE: mm/memory.c:2943:
+               if (page && !PageReserved(page) 
+                 && TestClearPageUntouched(page)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: mm/memory.c:2943:
+                 && TestClearPageUntouched(page)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: mm/memory.c:2944:
+                       __clear_page_locked(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: mm/memory.c:2944:
+                       __clear_page_locked(page);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: mm/memory.c:2946:
+                       /* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: mm/memory.c:2946:
+                       /* $

ERROR:CODE_INDENT: code indent should use tabs where possible
#140: FILE: mm/memory.c:2947:
+                        * NOTE! Cache and TLB cache are already flushed in$

ERROR:CODE_INDENT: code indent should use tabs where possible
#141: FILE: mm/memory.c:2948:
+                        * the system call madvise$

ERROR:CODE_INDENT: code indent should use tabs where possible
#142: FILE: mm/memory.c:2949:
+                        */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: mm/memory.c:2951:
+                       arch_enter_lazy_mmu_mode();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: mm/memory.c:2951:
+                       arch_enter_lazy_mmu_mode();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: mm/memory.c:2953:
+                       /* restore original access permissions */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: mm/memory.c:2954:
+                       entry = ptep_modify_prot_start(mm, address, pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: mm/memory.c:2954:
+                       entry = ptep_modify_prot_start(mm, address, pte);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#148: FILE: mm/memory.c:2955:
+                       entry = pte_modify(entry, vma->vm_page_prot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: mm/memory.c:2955:
+                       entry = pte_modify(entry, vma->vm_page_prot);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: mm/memory.c:2956:
+                       ptep_modify_prot_commit(mm, address, pte, entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: mm/memory.c:2956:
+                       ptep_modify_prot_commit(mm, address, pte, entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: mm/memory.c:2958:
+                       arch_leave_lazy_mmu_mode();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#151: FILE: mm/memory.c:2958:
+                       arch_leave_lazy_mmu_mode();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: mm/memory.c:2959:
+                       pte_unmap_unlock(pte, ptl);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#152: FILE: mm/memory.c:2959:
+                       pte_unmap_unlock(pte, ptl);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#153: FILE: mm/memory.c:2960:
+                       mmu_notifier_invalidate_page(mm,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: mm/memory.c:2960:
+                       mmu_notifier_invalidate_page(mm,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: mm/memory.c:2961:
+                       mmu_notifier_invalidate_page(mm,
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: mm/memory.c:2962:
+                       /* migrate page */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: mm/memory.c:2963:
+                       migrate_page_to_current_node(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: mm/memory.c:2963:
+                       migrate_page_to_current_node(page);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#159: FILE: mm/memory.c:2965:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: mm/memory.c:2965:
+                       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#160: FILE: mm/memory.c:2966:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: mm/memory.c:2966:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: mm/memory.c:2967:
+       }$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000127044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 41 errors, 55 warnings, 3 checks, 115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000127044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
