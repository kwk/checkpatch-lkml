WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: arch/x86/boot/compressed/misc_64.c:272:
+       outb(14, vidport);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: arch/x86/boot/compressed/misc_64.c:273:
+       outb(0xff & (pos >> 9), vidport+1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#68: FILE: arch/x86/boot/compressed/misc_64.c:273:
+       outb(0xff & (pos >> 9), vidport+1);
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: arch/x86/boot/compressed/misc_64.c:274:
+       outb(15, vidport);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#70: FILE: arch/x86/boot/compressed/misc_64.c:275:
+       outb(0xff & (pos >> 1), vidport+1);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#70: FILE: arch/x86/boot/compressed/misc_64.c:275:
+       outb(0xff & (pos >> 1), vidport+1);
                                       ^

ERROR:MODIFIED_INCLUDE_ASM: do not modify files in include/asm, change architecture specific files in include/asm-<architecture>
#77: +++ linux-2.6/include/asm/io_64.h

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: include/asm/io_64.h:27:
+/* the following delays are really conservative, at least for modern $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#114: FILE: include/asm/io_64.h:27:
machines */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#138: FILE: include/asm/io_64.h:40:
+#define __OUT2(s, s1, s2) \
+  __asm__ __volatile__ ("out" #s " %" s1 "0,%" s2 "1" : : "a" (value), 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#139: FILE: include/asm/io_64.h:41:
+  __asm__ __volatile__ ("out" #s " %" s1 "0,%" s2 "1" : : "a" (value), $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: include/asm/io_64.h:41:
+  __asm__ __volatile__ ("out" #s " %" s1 "0,%" s2 "1" : : "a" (value), $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#143: FILE: include/asm/io_64.h:44:
+#define __OUT(s, s1, x) \
+__OUT1(s, x) __OUT2(s, s1, "w") } \
+ __OUT1(s##_p, x) __OUT2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); } \

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#143: FILE: include/asm/io_64.h:44:
+#define __OUT(s, s1, x) \
+__OUT1(s, x) __OUT2(s, s1, "w") } \
+ __OUT1(s##_p, x) __OUT2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); } \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#143: FILE: include/asm/io_64.h:44:
+#define __OUT(s, s1, x) \
+__OUT1(s, x) __OUT2(s, s1, "w") } \
+ __OUT1(s##_p, x) __OUT2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); } \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#143: FILE: include/asm/io_64.h:44:
+#define __OUT(s, s1, x) \
+__OUT1(s, x) __OUT2(s, s1, "w") } \
+ __OUT1(s##_p, x) __OUT2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); } \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: include/asm/io_64.h:46:
+ __OUT1(s##_p, x) __OUT2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); } \$

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#153: FILE: include/asm/io_64.h:52:
+__asm__ __volatile__ ("in" #s " %" s2 "1,%" s1 "0" : "=a" (_v) : "Nd" 
                                                                   ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: include/asm/io_64.h:52:
+__asm__ __volatile__ ("in" #s " %" s2 "1,%" s1 "0" : "=a" (_v) : "Nd" $

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#160: FILE: include/asm/io_64.h:54:
+#define __IN(s, s1) \
+__IN1(s) __IN2(s, s1, "w") return _v; } \
+ __IN1(s##_p) __IN2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); return _v; } \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#160: FILE: include/asm/io_64.h:54:
+#define __IN(s, s1) \
+__IN1(s) __IN2(s, s1, "w") return _v; } \
+ __IN1(s##_p) __IN2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); return _v; } \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#160: FILE: include/asm/io_64.h:54:
+#define __IN(s, s1) \
+__IN1(s) __IN2(s, s1, "w") return _v; } \
+ __IN1(s##_p) __IN2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); return _v; } \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: include/asm/io_64.h:56:
+ __IN1(s##_p) __IN2(s, s1, "w") udelay(_IOPORT_PAUSE_DELAY); return _v; } \$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347288.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 8 warnings, 7 checks, 99 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347288.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
