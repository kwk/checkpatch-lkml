WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: include/linux/processtrace.h:1:
+#ifndef PROCESSTRACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#96: FILE: include/linux/processtrace.h:16:
+                        int notify;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: include/linux/processtrace.h:16:
+                        int notify;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: include/linux/processtrace.h:22:
+                        /* Selected fields from linux_binprm */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: include/linux/processtrace.h:23:
+                        int argc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: include/linux/processtrace.h:23:
+                        int argc;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: include/linux/processtrace.h:24:
+                        /* We need to copy the file name, because by$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: include/linux/processtrace.h:25:
+                           the time we format the trace record for$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#105: FILE: include/linux/processtrace.h:25:
+                        /* We need to copy the file name, because by
+                           the time we format the trace record for

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: include/linux/processtrace.h:26:
+                           display, the task may be gone. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: include/linux/processtrace.h:26:
+                           display, the task may be gone. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: include/linux/processtrace.h:28:
+                        char filename[PROCESS_TRACE_FILENAME_LENGTH];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: include/linux/processtrace.h:28:
+                        char filename[PROCESS_TRACE_FILENAME_LENGTH];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/linux/processtrace.h:48:
+extern void enable_process_trace(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/linux/processtrace.h:49:
+extern void disable_process_trace(void);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#140: FILE: kernel/trace/Kconfig:189:
+config PROCESS_TRACER
+	bool "Trace process events via utrace"
+	select TRACING
+	select UTRACE
+	help
+	  This tracer records process events that may be hooked by utrace:
+	  thread lifecycle, system calls, signals, and job control.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#191: FILE: kernel/trace/trace.h:224:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: kernel/trace/trace_process.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#239: FILE: kernel/trace/trace_process.c:31:
+/* A process must be a direct child of given pid in order to be
+   followed. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#239: FILE: kernel/trace/trace_process.c:31:
+   followed. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: kernel/trace/trace_process.c:36:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#251: FILE: kernel/trace/trace_process.c:43:
+	pr_debug("in %s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#257: FILE: kernel/trace/trace_process.c:49:
+	pr_debug("in %s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#266: FILE: kernel/trace/trace_process.c:58:
+	pr_debug("in %s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#274: FILE: kernel/trace/trace_process.c:66:
+	pr_debug("in %s\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: kernel/trace/trace_process.c:71:
+static void __trace_processtrace(struct trace_array *tr,
+				struct trace_array_cpu *data,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#308: FILE: kernel/trace/trace_process.c:100:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#313: FILE: kernel/trace/trace_process.c:105:
+	pr_debug("in %s\n", __func__);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#321: FILE: kernel/trace/trace_process.c:113:
+static ssize_t process_read(struct trace_iterator *iter, struct file *filp,
                                                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: kernel/trace/trace_process.c:114:
+static ssize_t process_read(struct trace_iterator *iter, struct file *filp,
+				char __user *ubuf, size_t cnt, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: kernel/trace/trace_process.c:118:
+	struct trace_seq *s = &iter->seq;
+	ret = trace_seq_to_user(s, ubuf, cnt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: kernel/trace/trace_process.c:126:
+        struct process_trace_entry *pte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: kernel/trace/trace_process.c:126:
+        struct process_trace_entry *pte;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: kernel/trace/trace_process.c:130:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: kernel/trace/trace_process.c:130:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: kernel/trace/trace_process.c:133:
+        pte = &field->event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: kernel/trace/trace_process.c:133:
+        pte = &field->event;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: kernel/trace/trace_process.c:146:
+                                       pte->trace_exec.filename,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: kernel/trace/trace_process.c:146:
+		ret = trace_seq_printf(s, "exec '%s' (args %d)\n",
+                                       pte->trace_exec.filename,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: kernel/trace/trace_process.c:146:
+                                       pte->trace_exec.filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: kernel/trace/trace_process.c:147:
+                                       pte->trace_exec.argc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: kernel/trace/trace_process.c:147:
+                                       pte->trace_exec.argc);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: kernel/trace/trace_process.c:156:
+                                       pte->trace_jctl.notify);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: kernel/trace/trace_process.c:156:
+                                       pte->trace_jctl.notify);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: kernel/trace/trace_process.c:165:
+                syscall = syscall_nr_to_meta (pte->trace_syscall_entry.callno);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: kernel/trace/trace_process.c:165:
+                syscall = syscall_nr_to_meta (pte->trace_syscall_entry.callno);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#373: FILE: kernel/trace/trace_process.c:165:
+                syscall = syscall_nr_to_meta (pte->trace_syscall_entry.callno);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: kernel/trace/trace_process.c:166:
+                if (!syscall) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: kernel/trace/trace_process.c:166:
+                if (!syscall) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: kernel/trace/trace_process.c:167:
+                        /* Metadata is incomplete.  Simply hex dump. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: kernel/trace/trace_process.c:168:
+                        ret = trace_seq_printf(s, "syscall %ld [0x%lx 0x%lx"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: kernel/trace/trace_process.c:168:
+                        ret = trace_seq_printf(s, "syscall %ld [0x%lx 0x%lx"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: kernel/trace/trace_process.c:169:
+                                               " 0x%lx 0x%lx 0x%lx 0x%lx]\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: kernel/trace/trace_process.c:169:
+                                               " 0x%lx 0x%lx 0x%lx 0x%lx]\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#377: FILE: kernel/trace/trace_process.c:169:
+                        ret = trace_seq_printf(s, "syscall %ld [0x%lx 0x%lx"
+                                               " 0x%lx 0x%lx 0x%lx 0x%lx]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: kernel/trace/trace_process.c:170:
+                                               pte->trace_syscall_entry.callno,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: kernel/trace/trace_process.c:170:
+                                               pte->trace_syscall_entry.callno,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#379: FILE: kernel/trace/trace_process.c:171:
+                                               pte->trace_syscall_entry.args[0],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: kernel/trace/trace_process.c:171:
+                                               pte->trace_syscall_entry.args[0],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: kernel/trace/trace_process.c:172:
+                                               pte->trace_syscall_entry.args[1],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: kernel/trace/trace_process.c:172:
+                                               pte->trace_syscall_entry.args[1],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: kernel/trace/trace_process.c:173:
+                                               pte->trace_syscall_entry.args[2],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: kernel/trace/trace_process.c:173:
+                                               pte->trace_syscall_entry.args[2],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: kernel/trace/trace_process.c:174:
+                                               pte->trace_syscall_entry.args[3],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: kernel/trace/trace_process.c:174:
+                                               pte->trace_syscall_entry.args[3],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: kernel/trace/trace_process.c:175:
+                                               pte->trace_syscall_entry.args[4],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: kernel/trace/trace_process.c:175:
+                                               pte->trace_syscall_entry.args[4],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: kernel/trace/trace_process.c:176:
+                                               pte->trace_syscall_entry.args[5]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: kernel/trace/trace_process.c:176:
+                                               pte->trace_syscall_entry.args[5]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: kernel/trace/trace_process.c:177:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: kernel/trace/trace_process.c:177:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: kernel/trace/trace_process.c:178:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: kernel/trace/trace_process.c:178:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#387: FILE: kernel/trace/trace_process.c:179:
+                ret = trace_seq_printf(s, "%s(", syscall->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: kernel/trace/trace_process.c:179:
+                ret = trace_seq_printf(s, "%s(", syscall->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: kernel/trace/trace_process.c:180:
+                if (!ret)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: kernel/trace/trace_process.c:180:
+                if (!ret)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: kernel/trace/trace_process.c:181:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: kernel/trace/trace_process.c:181:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: kernel/trace/trace_process.c:182:
+                for (i = 0; i < syscall->nb_args; i++) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: kernel/trace/trace_process.c:182:
+                for (i = 0; i < syscall->nb_args; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: kernel/trace/trace_process.c:183:
+                        ret = trace_seq_printf(s, "%s: 0x%lx%s", syscall->args[i],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: kernel/trace/trace_process.c:183:
+                        ret = trace_seq_printf(s, "%s: 0x%lx%s", syscall->args[i],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: kernel/trace/trace_process.c:184:
+                                               pte->trace_syscall_entry.args[i],$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: kernel/trace/trace_process.c:184:
+                                               pte->trace_syscall_entry.args[i],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: kernel/trace/trace_process.c:185:
+                                               i == syscall->nb_args - 1 ? ")\n" : ", ");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: kernel/trace/trace_process.c:185:
+                                               i == syscall->nb_args - 1 ? ")\n" : ", ");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: kernel/trace/trace_process.c:186:
+                        if (!ret)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: kernel/trace/trace_process.c:186:
+                        if (!ret)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#395: FILE: kernel/trace/trace_process.c:187:
+                                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: kernel/trace/trace_process.c:187:
+                                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: kernel/trace/trace_process.c:188:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: kernel/trace/trace_process.c:188:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: kernel/trace/trace_process.c:191:
+                /* utrace doesn't preserve the syscall number. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: kernel/trace/trace_process.c:192:
+                ret = trace_seq_printf(s, "syscall rc %ld error %ld\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: kernel/trace/trace_process.c:192:
+                ret = trace_seq_printf(s, "syscall rc %ld error %ld\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: kernel/trace/trace_process.c:193:
+                                       pte->trace_syscall_exit.rc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: kernel/trace/trace_process.c:193:
+                                       pte->trace_syscall_exit.rc,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: kernel/trace/trace_process.c:194:
+                                       pte->trace_syscall_exit.error);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: kernel/trace/trace_process.c:194:
+                                       pte->trace_syscall_exit.error);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: kernel/trace/trace_process.c:195:
+                break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: kernel/trace/trace_process.c:195:
+                break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: kernel/trace/trace_process.c:201:
+        if (!ret)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: kernel/trace/trace_process.c:201:
+        if (!ret)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: kernel/trace/trace_process.c:202:
+        ^Ireturn TRACE_TYPE_PARTIAL_LINE;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: kernel/trace/trace_process.c:202:
+        ^Ireturn TRACE_TYPE_PARTIAL_LINE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: kernel/trace/trace_process.c:202:
+        ^Ireturn TRACE_TYPE_PARTIAL_LINE;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#414: FILE: kernel/trace/trace_process.c:206:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: kernel/trace/trace_process.c:228:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#441: FILE: kernel/trace/trace_process.c:233:
+/* Should tracing apply to given task?	Compare against filter
+   values. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#441: FILE: kernel/trace/trace_process.c:233:
+   values. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#445: FILE: kernel/trace/trace_process.c:237:
+	if (trace_taskcomm_filter[0]
+	    && strncmp(trace_taskcomm_filter, tsk->comm, TASK_COMM_LEN))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#449: FILE: kernel/trace/trace_process.c:241:
+	if (trace_taskuid_filter != (u32)-1
+	    && trace_taskuid_filter != task_uid(tsk))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#455: FILE: kernel/trace/trace_process.c:247:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#462: FILE: kernel/trace/trace_process.c:254:
+	pr_debug("in %s\n", __func__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: kernel/trace/trace_process.c:255:
+        tracing_record_cmdline (tsk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: kernel/trace/trace_process.c:255:
+        tracing_record_cmdline (tsk);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#463: FILE: kernel/trace/trace_process.c:255:
+        tracing_record_cmdline (tsk);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'engine == NULL'
#468: FILE: kernel/trace/trace_process.c:260:
+	if (IS_ERR(engine) || (engine == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!engine"
#468: FILE: kernel/trace/trace_process.c:260:
+	if (IS_ERR(engine) || (engine == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#482: FILE: kernel/trace/trace_process.c:274:
+		/* Penalizing events are individually controlled, so that
+		   utrace doesn't even take the monitored threads off their

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#483: FILE: kernel/trace/trace_process.c:275:
+		   fast paths, nor bother call our callbacks. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: kernel/trace/trace_process.c:293:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: kernel/trace/trace_process.c:302:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_CLONE;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: kernel/trace/trace_process.c:313:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: kernel/trace/trace_process.c:315:
+                              struct utrace_engine *engine,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: kernel/trace/trace_process.c:315:
+                              struct utrace_engine *engine,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: kernel/trace/trace_process.c:316:
+                              struct task_struct *task,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: kernel/trace/trace_process.c:316:
+                              struct task_struct *task,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#525: FILE: kernel/trace/trace_process.c:317:
+                              int type, int notify)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: kernel/trace/trace_process.c:317:
+                              int type, int notify)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#527: FILE: kernel/trace/trace_process.c:319:
+        struct process_trace_entry ent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: kernel/trace/trace_process.c:319:
+        struct process_trace_entry ent;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: kernel/trace/trace_process.c:320:
+        ent.opcode = _UTRACE_EVENT_JCTL;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: kernel/trace/trace_process.c:320:
+        struct process_trace_entry ent;
+        ent.opcode = _UTRACE_EVENT_JCTL;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: kernel/trace/trace_process.c:320:
+        ent.opcode = _UTRACE_EVENT_JCTL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#529: FILE: kernel/trace/trace_process.c:321:
+        ent.trace_jctl.type = type;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: kernel/trace/trace_process.c:321:
+        ent.trace_jctl.type = type;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#530: FILE: kernel/trace/trace_process.c:322:
+        ent.trace_jctl.notify = notify;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: kernel/trace/trace_process.c:322:
+        ent.trace_jctl.notify = notify;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: kernel/trace/trace_process.c:323:
+        process_trace(&ent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: kernel/trace/trace_process.c:323:
+        process_trace(&ent);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#536: FILE: kernel/trace/trace_process.c:328:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#544: FILE: kernel/trace/trace_process.c:336:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_SYSCALL_ENTRY;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#554: FILE: kernel/trace/trace_process.c:346:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: kernel/trace/trace_process.c:348:
+u32 process_trace_report_syscall_exit(enum utrace_resume_action action,
+				   struct utrace_engine *engine,

WARNING:LINE_SPACING: Missing a blank line after declarations
#562: FILE: kernel/trace/trace_process.c:354:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_SYSCALL_EXIT;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#572: FILE: kernel/trace/trace_process.c:364:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#582: FILE: kernel/trace/trace_process.c:374:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_EXEC;

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: kernel/trace/trace_process.c:375:
+                ent.trace_exec.argc = bprm->argc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: kernel/trace/trace_process.c:375:
+                ent.trace_exec.argc = bprm->argc;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#584: FILE: kernel/trace/trace_process.c:376:
+                strlcpy (ent.trace_exec.filename, bprm->filename, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: kernel/trace/trace_process.c:376:
+                strlcpy (ent.trace_exec.filename, bprm->filename, $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: kernel/trace/trace_process.c:376:
+                strlcpy (ent.trace_exec.filename, bprm->filename, $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#584: FILE: kernel/trace/trace_process.c:376:
+                strlcpy (ent.trace_exec.filename, bprm->filename, 

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#584: FILE: kernel/trace/trace_process.c:376:
+                strlcpy (ent.trace_exec.filename, bprm->filename, 

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: kernel/trace/trace_process.c:377:
+                         sizeof(ent.trace_exec.filename));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: kernel/trace/trace_process.c:377:
+                         sizeof(ent.trace_exec.filename));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: kernel/trace/trace_process.c:381:
+        tracing_record_cmdline (task);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: kernel/trace/trace_process.c:381:
+        tracing_record_cmdline (task);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#589: FILE: kernel/trace/trace_process.c:381:
+        tracing_record_cmdline (task);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#596: FILE: kernel/trace/trace_process.c:388:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#607: FILE: kernel/trace/trace_process.c:399:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_SIGNAL;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#619: FILE: kernel/trace/trace_process.c:411:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: kernel/trace/trace_process.c:419:
+		struct process_trace_entry ent;
+		ent.opcode = _UTRACE_EVENT_EXIT;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#637: FILE: kernel/trace/trace_process.c:429:
+
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void enable_process_trace() should probably be void enable_process_trace(void)
#638: FILE: kernel/trace/trace_process.c:430:
+void enable_process_trace()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#642: FILE: kernel/trace/trace_process.c:434:
+	pr_debug("in %s\n", __func__);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void disable_process_trace() should probably be void disable_process_trace(void)
#660: FILE: kernel/trace/trace_process.c:452:
+void disable_process_trace()

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#666: FILE: kernel/trace/trace_process.c:458:
+	pr_debug("in %s\n", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#670: FILE: kernel/trace/trace_process.c:462:
+		/* Find matching engine, if any.  Returns -ENOENT for
+		   unattached threads. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#670: FILE: kernel/trace/trace_process.c:462:
+		   unattached threads. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!engine"
#677: FILE: kernel/trace/trace_process.c:469:
+		} else if (engine == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#703: FILE: kernel/trace/trace_process.c:495:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#714: FILE: kernel/trace/trace_process.c:506:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#718: FILE: kernel/trace/trace_process.c:510:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#720: FILE: kernel/trace/trace_process.c:512:
+trace_taskcomm_filter_read(struct file *filp, char __user *ubuf,
                                         ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#727: FILE: kernel/trace/trace_process.c:519:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#729: FILE: kernel/trace/trace_process.c:521:
+trace_taskcomm_filter_write(struct file *filp, const char __user *ubuf,
                                          ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#750: FILE: kernel/trace/trace_process.c:542:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: kernel/trace/trace_process.c:549:
+
+

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#772: FILE: kernel/trace/trace_process.c:564:
+	"#  echo NNN > process_trace_uid_filter # -1: unrestricted \n"

CHECK:LINE_SPACING: Please don't use multiple blank lines
#790: FILE: kernel/trace/trace_process.c:582:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#798: FILE: kernel/trace/trace_process.c:590:
+        arch_init_ftrace_syscalls ();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: kernel/trace/trace_process.c:590:
+        arch_init_ftrace_syscalls ();$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#798: FILE: kernel/trace/trace_process.c:590:
+        arch_init_ftrace_syscalls ();

WARNING:SPLIT_STRING: quoted string split across lines
#804: FILE: kernel/trace/trace_process.c:596:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_README' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#811: FILE: kernel/trace/trace_process.c:603:
+		pr_warning("Could not create debugfs "
+			   "'process_follow_pid' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: kernel/trace/trace_process.c:612:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_taskcomm_filter' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#826: FILE: kernel/trace/trace_process.c:618:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_uid_filter' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#833: FILE: kernel/trace/trace_process.c:625:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_lifecycle' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#839: FILE: kernel/trace/trace_process.c:631:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_syscalls' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#845: FILE: kernel/trace/trace_process.c:637:
+		pr_warning("Could not create debugfs "
+			   "'process_trace_signals' entry\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000143998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 61 errors, 101 warnings, 32 checks, 746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000143998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
