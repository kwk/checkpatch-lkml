WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
state, the branch skips the whole block (if the block consists in a function

WARNING:TYPO_SPELLING: 'seldomly' may be misspelled - perhaps 'seldom'?
#32: 
It can be used to compile code in the kernel that is seldomly meant to be
                                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'functionnality' may be misspelled - perhaps 'functionality'?
#38: 
immediate to remove a data cache hit. When the immediate() functionnality is
                                                           ^^^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'caracteristic' may be misspelled - perhaps 'characteristic'?
#57: 
!0 variable caracteristic, it is recommended to only use these variables as a
            ^^^^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#75: FILE: include/linux/immediate.h:1:
+#ifndef _LINUX_IMMEDIATE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#92: FILE: include/linux/immediate.h:18:
+typedef struct { int value; } immediate_t;

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: include/linux/immediate.h:25:
+ ^I^I * immediate value within the load immediate instruction).$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#99: FILE: include/linux/immediate.h:25:
+ ^I^I * immediate value within the load immediate instruction).$

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: include/linux/immediate.h:41:
+#define IF_OPTIMIZED		(1 << 0) /* Use optimized immediate */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#116: FILE: include/linux/immediate.h:42:
+#define IF_LOCKDEP		(1 << 1) /* Can trigger lockdep at patch site */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#147: FILE: include/linux/immediate.h:73:
+#define immediate_generic(flags, var)					\
+	({								\
+		static const struct __immediate __immediate_info	\
+			__attribute__((section("__immediate"))) =	\
+			{ &(var), NULL, (flags) & ~IF_OPTIMIZED } ;	\
+		asm volatile ( "" : : "i" (&__immediate_info));		\
+		((var).value);						\
+	})

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__immediate") over __attribute__((section("__immediate")))
#150: FILE: include/linux/immediate.h:76:
+			__attribute__((section("__immediate"))) =	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#152: FILE: include/linux/immediate.h:78:
+		asm volatile ( "" : : "i" (&__immediate_info));		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: include/linux/immediate.h:82:
+extern void immediate_arm(immediate_t *var);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: include/linux/immediate.h:83:
+extern void immediate_disarm(immediate_t *var);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: include/linux/immediate.h:84:
+extern int immediate_list(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#159: FILE: include/linux/immediate.h:85:
+extern void module_immediate_setup(struct module *mod);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: include/linux/immediate.h:86:
+extern void __immediate_update(immediate_t *var, int value);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#176: FILE: include/linux/immediate.h:102:
+}
+static inline void module_immediate_setup(struct module *mod) { }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#267: FILE: kernel/module.c:69:
+DEFINE_MUTEX(module_mutex);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#341: FILE: kernel/immediate.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#355: FILE: kernel/immediate.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#356: FILE: kernel/immediate.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#363: FILE: kernel/immediate.c:23:
+extern const struct __immediate __stop___immediate[];

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#374: FILE: kernel/immediate.c:34:
+static void _immediate_update_range(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: kernel/immediate.c:60:
+	_immediate_update_range(mod->immediates,
+		mod->immediates+mod->num_immediates);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#400: FILE: kernel/immediate.c:60:
+		mod->immediates+mod->num_immediates);
 		               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: kernel/immediate.c:69:
+static int _immediate_list_range(const struct __immediate *begin,
+	const struct __immediate *end)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#415: FILE: kernel/immediate.c:75:
+		printk("variable %p \n", iter->var);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#415: FILE: kernel/immediate.c:75:
+		printk("variable %p \n", iter->var);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#417: FILE: kernel/immediate.c:77:
+			printk("  enable %u optimized\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: kernel/immediate.c:78:
+			printk("  enable %u optimized\n",
+				IMMEDIATE_OPTIMIZED_ENABLE(iter->enable));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#420: FILE: kernel/immediate.c:80:
+			printk("  enable %u generic\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: kernel/immediate.c:81:
+			printk("  enable %u generic\n",
+				immediate_query(iter->var));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#436: FILE: kernel/immediate.c:96:
+		_immediate_update_range(mod->immediates,
+			mod->immediates+mod->num_immediates);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#436: FILE: kernel/immediate.c:96:
+			mod->immediates+mod->num_immediates);
 			               ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#448: FILE: kernel/immediate.c:108:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#497: FILE: kernel/immediate.c:157:
+	printk("Listing module immediate values\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#501: FILE: kernel/immediate.c:161:
+			printk("Listing immediate values for module %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: kernel/immediate.c:162:
+			printk("Listing immediate values for module %s\n",
+				mod->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#504: FILE: kernel/immediate.c:164:
+				mod->immediates+mod->num_immediates);
 				               ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#530: FILE: kernel/immediate.c:190:
+	printk("Listing kernel immediate values\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000417618.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 17 warnings, 21 checks, 428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000417618.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
