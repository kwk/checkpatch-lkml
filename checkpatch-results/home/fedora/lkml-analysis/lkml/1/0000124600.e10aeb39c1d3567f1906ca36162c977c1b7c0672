WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
This patch modifies the ptrace code to use the new wrapper routines around the 

WARNING:PATCH_PREFIX: patch prefix 'arch' exists, appears to be a -p0 patch

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#97: FILE: x86/kernel/ptrace.c:457:
+static int decode_dr7(unsigned long dr7, int bpnum, unsigned *len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: x86/kernel/ptrace.c:458:
+static int decode_dr7(unsigned long dr7, int bpnum, unsigned *len,
+		unsigned *type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#98: FILE: x86/kernel/ptrace.c:458:
+		unsigned *type)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->thread
#120: FILE: x86/kernel/ptrace.c:469:
+	struct thread_struct *thread = &(current->thread);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->thread
#152: FILE: x86/kernel/ptrace.c:492:
+	struct thread_struct *thread = &(tsk->thread);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#156: FILE: x86/kernel/ptrace.c:496:
+	unsigned len, type;

CHECK:BRACES: braces {} should be used on all arms of this statement
#189: FILE: x86/kernel/ptrace.c:524:
+		if (!bp) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*bp)...) over kzalloc(sizeof(struct hw_breakpoint)...)
#191: FILE: x86/kernel/ptrace.c:526:
+			bp = kzalloc(sizeof(struct hw_breakpoint), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: x86/kernel/ptrace.c:538:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->thread
#274: FILE: x86/kernel/ptrace.c:563:
+	struct thread_struct *thread = &(tsk->thread);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->thread
#291: FILE: x86/kernel/ptrace.c:580:
+	struct thread_struct *thread = &(tsk->thread);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: x86/kernel/ptrace.c:594:
+			if (arch_check_va_in_userspace(val,
+					thread->hbp[n]->info.len) == 0) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124600.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 9 checks, 269 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000124600.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
