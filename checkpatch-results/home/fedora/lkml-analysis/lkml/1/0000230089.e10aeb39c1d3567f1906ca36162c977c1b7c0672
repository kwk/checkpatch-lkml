WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: drivers/input/lirc/Kconfig:21:
+config LIRC_ATIUSB
+	tristate "ATI RF USB Receiver support"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the ATI USB RF remote receiver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: drivers/input/lirc/lirc_atiusb.c:1:
+/* lirc_atiusb - USB remote support for LIRC

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: drivers/input/lirc/lirc_atiusb.c:33:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: drivers/input/lirc/lirc_atiusb.c:34:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#162: FILE: drivers/input/lirc/lirc_atiusb.c:87:
+			printk(KERN_DEBUG fmt, ## args);	\

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#170: FILE: drivers/input/lirc/lirc_atiusb.c:95:
+ * It is used for static arrays. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#176: FILE: drivers/input/lirc/lirc_atiusb.c:101:
+static int emit_updown;		/* send seperate press/release codes (rw2) */
                        		        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: drivers/input/lirc/lirc_atiusb.c:173:
+	 * same manufacterer */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: drivers/input/lirc/lirc_atiusb.c:180:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#294: FILE: drivers/input/lirc/lirc_atiusb.c:219:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#331: FILE: drivers/input/lirc/lirc_atiusb.c:256:
+ * the given list_head reference within, pointed at by link. */

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#332: FILE: drivers/input/lirc/lirc_atiusb.c:257:
+#define get_iep_from_link(link) \
+		list_entry((link), struct in_endpt, iep_list_link);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#334: FILE: drivers/input/lirc/lirc_atiusb.c:259:
+#define get_irctl_from_link(link) \
+		list_entry((link), struct irctl, remote_list_link);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#352: FILE: drivers/input/lirc/lirc_atiusb.c:277:
+	memcpy(buf+1, data, LO(cmd));
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#354: FILE: drivers/input/lirc/lirc_atiusb.c:279:
+	memcpy(oep->buf, buf, LO(cmd)+1);
 	                             ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#368: FILE: drivers/input/lirc/lirc_atiusb.c:293:
+	while (timeout && (oep->urb->status == -EINPROGRESS)
+	       && !(oep->send_flags & SEND_FLAG_COMPLETE)) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#370: FILE: drivers/input/lirc/lirc_atiusb.c:295:
+		rmb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: drivers/input/lirc/lirc_atiusb.c:315:
+	printk(DRIVER_NAME "[%d]: usb remote disconnected\n", devnum);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#394: FILE: drivers/input/lirc/lirc_atiusb.c:319:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#403: FILE: drivers/input/lirc/lirc_atiusb.c:328:
+		printk(DRIVER_NAME "[?]: set_use_inc called with no context\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_use_inc', this function's name, in a string
#403: FILE: drivers/input/lirc/lirc_atiusb.c:328:
+		printk(DRIVER_NAME "[?]: set_use_inc called with no context\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#422: FILE: drivers/input/lirc/lirc_atiusb.c:347:
+				ir->devnum, iep->ep->bEndpointAddress, iep);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#425: FILE: drivers/input/lirc/lirc_atiusb.c:350:
+				printk(DRIVER_NAME "[%d]: open result = %d "

WARNING:SPLIT_STRING: quoted string split across lines
#426: FILE: drivers/input/lirc/lirc_atiusb.c:351:
+				printk(DRIVER_NAME "[%d]: open result = %d "
+				       "error submitting urb\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: drivers/input/lirc/lirc_atiusb.c:371:
+		printk(DRIVER_NAME "[?]: set_use_dec called with no context\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'set_use_dec', this function's name, in a string
#446: FILE: drivers/input/lirc/lirc_atiusb.c:371:
+		printk(DRIVER_NAME "[?]: set_use_dec called with no context\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#475: FILE: drivers/input/lirc/lirc_atiusb.c:400:
+		snprintf(codes+i*3, 4, "%02x ", buf[i] & 0xFF);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#475: FILE: drivers/input/lirc/lirc_atiusb.c:400:
+		snprintf(codes+i*3, 4, "%02x ", buf[i] & 0xFF);
 		                ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#476: FILE: drivers/input/lirc/lirc_atiusb.c:401:
+	printk(DRIVER_NAME "[%d]: data received %s (ep=0x%x length=%d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: drivers/input/lirc/lirc_atiusb.c:402:
+	printk(DRIVER_NAME "[%d]: data received %s (ep=0x%x length=%d)\n",
+		iep->ir->devnum, codes, iep->ep->bEndpointAddress, len);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#491: FILE: drivers/input/lirc/lirc_atiusb.c:416:
+	chan = ((iep->buf[len-1]>>4) & 0x0F);
 	                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#491: FILE: drivers/input/lirc/lirc_atiusb.c:416:
+	chan = ((iep->buf[len-1]>>4) & 0x0F);
 	                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#495: FILE: drivers/input/lirc/lirc_atiusb.c:420:
+		iep->buf[len-1] &= 0x0F;
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#496: FILE: drivers/input/lirc/lirc_atiusb.c:421:
+		iep->buf[len-3] -= (chan<<4);
 		            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#496: FILE: drivers/input/lirc/lirc_atiusb.c:421:
+		iep->buf[len-3] -= (chan<<4);
 		                        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#499: FILE: drivers/input/lirc/lirc_atiusb.c:424:
+	if (!((1U<<chan) & mask)) {
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#501: FILE: drivers/input/lirc/lirc_atiusb.c:426:
+			ir->devnum, chan+1);
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#504: FILE: drivers/input/lirc/lirc_atiusb.c:429:
+	dprintk(DRIVER_NAME "[%d]: accept channel %d\n", ir->devnum, chan+1);
 	                                                                 ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#510: FILE: drivers/input/lirc/lirc_atiusb.c:435:
+		if (memcmp(iep->old, iep->buf, len) == 0) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#511: FILE: drivers/input/lirc/lirc_atiusb.c:436:
+			if (iep->old_jiffies + repeat_jiffies > jiffies)

CHECK:BRACES: Unbalanced braces around else statement
#513: FILE: drivers/input/lirc/lirc_atiusb.c:438:
+		} else

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#523: FILE: drivers/input/lirc/lirc_atiusb.c:448:
+ * prior version, this function was seperated out to clarify the sanitization
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#529: FILE: drivers/input/lirc/lirc_atiusb.c:454:
+ *    auxilliary mode state, which is set by the mode buttons Aux1 through
       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#541: FILE: drivers/input/lirc/lirc_atiusb.c:466:
+ *    handle this we need a seperate parameter, like rw2modes, with the
                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#607: FILE: drivers/input/lirc/lirc_atiusb.c:532:
+			"[%d]: Huh?  Abnormal length (%d) buffer recieved.\n",
 			                                         ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#622: FILE: drivers/input/lirc/lirc_atiusb.c:547:
+		 * mode-set (aux) keys */

WARNING:SPLIT_STRING: quoted string split across lines
#637: FILE: drivers/input/lirc/lirc_atiusb.c:562:
+					"[%d]: ignore dummy code 0x%x "
+					"(ep=0x%x)\n", ir->devnum,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 33)
#647: FILE: drivers/input/lirc/lirc_atiusb.c:572:
+			else if (emit_updown == 1) /* normalize keycode */
+				 buf[2] = RW2_PRESSRELEASE_KEYCODE;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#661: FILE: drivers/input/lirc/lirc_atiusb.c:586:
+		if (mdeadzone > (x*x+y*y)) {
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#661: FILE: drivers/input/lirc/lirc_atiusb.c:586:
+		if (mdeadzone > (x*x+y*y)) {
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#661: FILE: drivers/input/lirc/lirc_atiusb.c:586:
+		if (mdeadzone > (x*x+y*y)) {
 		                      ^

WARNING:TYPO_SPELLING: 'coordintes' may be misspelled - perhaps 'coordinates'?
#680: FILE: drivers/input/lirc/lirc_atiusb.c:605:
+		/* convert coordintes(angle) into compass direction */
 		           ^^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#681: FILE: drivers/input/lirc/lirc_atiusb.c:606:
+		if (x == 0)
[...]
+		else if (y == 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#685: FILE: drivers/input/lirc/lirc_atiusb.c:610:
+		else {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#686: FILE: drivers/input/lirc/lirc_atiusb.c:611:
+			if (abs(1000*y/x) > mgradient)
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#686: FILE: drivers/input/lirc/lirc_atiusb.c:611:
+			if (abs(1000*y/x) > mgradient)
 			              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#688: FILE: drivers/input/lirc/lirc_atiusb.c:613:
+			if (abs(1000*x/y) > mgradient)
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#688: FILE: drivers/input/lirc/lirc_atiusb.c:613:
+			if (abs(1000*x/y) > mgradient)
 			              ^

WARNING:SPLIT_STRING: quoted string split across lines
#710: FILE: drivers/input/lirc/lirc_atiusb.c:635:
+		dprintk(DRIVER_NAME ": We got %d instead of %d bytes from xbox "
+			"ir.. ?\n", len, clen);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#716: FILE: drivers/input/lirc/lirc_atiusb.c:641:
+		if (iep->old_jiffies + repeat_jiffies > jiffies)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#720: FILE: drivers/input/lirc/lirc_atiusb.c:645:
+		 * the last two bytes are.. some kind of clock? */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#750: FILE: drivers/input/lirc/lirc_atiusb.c:675:
+	switch (urb->status) {
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#806: FILE: drivers/input/lirc/lirc_atiusb.c:731:
+	wmb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#807: FILE: drivers/input/lirc/lirc_atiusb.c:732:
+	if (waitqueue_active(&oep->wait))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: drivers/input/lirc/lirc_atiusb.c:736:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#823: FILE: drivers/input/lirc/lirc_atiusb.c:748:
+	struct irctl *ir;
+	dprintk(DRIVER_NAME ": free_in_endpt(%p, %d)\n", iep, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_in_endpt', this function's name, in a string
#823: FILE: drivers/input/lirc/lirc_atiusb.c:748:
+	dprintk(DRIVER_NAME ": free_in_endpt(%p, %d)\n", iep, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_in_endpt', this function's name, in a string
#829: FILE: drivers/input/lirc/lirc_atiusb.c:754:
+		dprintk(DRIVER_NAME ": free_in_endpt: WARNING! null ir\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_in_endpt', this function's name, in a string
#837: FILE: drivers/input/lirc/lirc_atiusb.c:762:
+		dprintk(DRIVER_NAME "[%d]: free_in_endpt removing ep=0x%0x "

WARNING:SPLIT_STRING: quoted string split across lines
#838: FILE: drivers/input/lirc/lirc_atiusb.c:763:
+		dprintk(DRIVER_NAME "[%d]: free_in_endpt removing ep=0x%0x "
+			"from list\n", ir->devnum, iep->ep->bEndpointAddress);

CHECK:BRACES: Unbalanced braces around else statement
#844: FILE: drivers/input/lirc/lirc_atiusb.c:769:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_in_endpt', this function's name, in a string
#845: FILE: drivers/input/lirc/lirc_atiusb.c:770:
+			dprintk(DRIVER_NAME "[%d]: free_in_endpt null urb!\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#873: FILE: drivers/input/lirc/lirc_atiusb.c:798:
+ *	len -= (len % CODE_LENGTH); */

WARNING:SPLIT_STRING: quoted string split across lines
#877: FILE: drivers/input/lirc/lirc_atiusb.c:802:
+	dprintk(DRIVER_NAME "[%d]: acceptable inbound endpoint (0x%x) found "
+		"(maxp=%d len=%d)\n", ir->devnum, addr, maxp, len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#904: FILE: drivers/input/lirc/lirc_atiusb.c:829:
+		printk(DRIVER_NAME "[%d]: ep=0x%x out of memory (code=%d)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#917: FILE: drivers/input/lirc/lirc_atiusb.c:842:
+	struct irctl *ir;
+	dprintk(DRIVER_NAME ": free_out_endpt(%p, %d)\n", oep, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_out_endpt', this function's name, in a string
#917: FILE: drivers/input/lirc/lirc_atiusb.c:842:
+	dprintk(DRIVER_NAME ": free_out_endpt(%p, %d)\n", oep, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_out_endpt', this function's name, in a string
#925: FILE: drivers/input/lirc/lirc_atiusb.c:850:
+		dprintk(DRIVER_NAME ": free_out_endpt: WARNING! null ir\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_out_endpt', this function's name, in a string
#937: FILE: drivers/input/lirc/lirc_atiusb.c:862:
+			dprintk(DRIVER_NAME "[%d]: free_out_endpt: null urb!\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#962: FILE: drivers/input/lirc/lirc_atiusb.c:887:
+	if (!oep)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#964: FILE: drivers/input/lirc/lirc_atiusb.c:889:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#972: FILE: drivers/input/lirc/lirc_atiusb.c:897:
+		if (!oep->buf)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#974: FILE: drivers/input/lirc/lirc_atiusb.c:899:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#982: FILE: drivers/input/lirc/lirc_atiusb.c:907:
+		printk(DRIVER_NAME "[%d]: ep=0x%x out of memory (code=%d)\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#993: FILE: drivers/input/lirc/lirc_atiusb.c:918:
+	struct in_endpt *in;
+	dprintk(DRIVER_NAME ": free_irctl(%p, %d)\n", ir, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_irctl', this function's name, in a string
#993: FILE: drivers/input/lirc/lirc_atiusb.c:918:
+	dprintk(DRIVER_NAME ": free_irctl(%p, %d)\n", ir, mem_failure);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_irctl', this function's name, in a string
#1013: FILE: drivers/input/lirc/lirc_atiusb.c:938:
+			dprintk(DRIVER_NAME "[%d]: free_irctl: removing "

WARNING:SPLIT_STRING: quoted string split across lines
#1014: FILE: drivers/input/lirc/lirc_atiusb.c:939:
+			dprintk(DRIVER_NAME "[%d]: free_irctl: removing "
+				"remote from list\n", ir->devnum);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_irctl', this function's name, in a string
#1016: FILE: drivers/input/lirc/lirc_atiusb.c:941:
+			dprintk(DRIVER_NAME "[%d]: free_irctl: refcount at %d,"

WARNING:SPLIT_STRING: quoted string split across lines
#1017: FILE: drivers/input/lirc/lirc_atiusb.c:942:
+			dprintk(DRIVER_NAME "[%d]: free_irctl: refcount at %d,"
+				"aborting free_irctl\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_irctl', this function's name, in a string
#1017: FILE: drivers/input/lirc/lirc_atiusb.c:942:
+				"aborting free_irctl\n",

CHECK:BRACES: Unbalanced braces around else statement
#1034: FILE: drivers/input/lirc/lirc_atiusb.c:959:
+		} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1035: FILE: drivers/input/lirc/lirc_atiusb.c:960:
+			printk(DRIVER_NAME "[%d]: ir->p is a null pointer!\n",

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#1055: FILE: drivers/input/lirc/lirc_atiusb.c:980:
+	switch (cpu_to_le16(dev->descriptor.idVendor)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1082: FILE: drivers/input/lirc/lirc_atiusb.c:1007:
+	 * is not yet setup */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1086: FILE: drivers/input/lirc/lirc_atiusb.c:1011:
+	 * of the number of drivers registered. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around plugin->rbuf
#1099: FILE: drivers/input/lirc/lirc_atiusb.c:1024:
+	plugin->rbuf = kmalloc(sizeof(*(plugin->rbuf)), GFP_KERNEL);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1131: FILE: drivers/input/lirc/lirc_atiusb.c:1056:
+		printk(DRIVER_NAME "[%d]: out of memory (code=%d)\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1138: FILE: drivers/input/lirc/lirc_atiusb.c:1063:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1167: FILE: drivers/input/lirc/lirc_atiusb.c:1092:
+ * Wonder) send the appropriate initialization packets. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1172: FILE: drivers/input/lirc/lirc_atiusb.c:1097:
+		struct out_endpt *oep = ir->out_init;
+		dprintk(DRIVER_NAME "[%d]: usb_remote_probe: initializing "

WARNING:SPLIT_STRING: quoted string split across lines
#1173: FILE: drivers/input/lirc/lirc_atiusb.c:1098:
+		dprintk(DRIVER_NAME "[%d]: usb_remote_probe: initializing "
+			"outbound ep\n", ir->devnum);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: drivers/input/lirc/lirc_atiusb.c:1100:
+		usb_fill_int_urb(oep->urb, ir->usbdev,
+			usb_sndintpipe(ir->usbdev, oep->ep->bEndpointAddress),

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#1177: FILE: drivers/input/lirc/lirc_atiusb.c:1102:
+			oep, oep->ep->bInterval);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1188: FILE: drivers/input/lirc/lirc_atiusb.c:1113:
+	char buf[63], name[128] = "";
+	if (dev->descriptor.iManufacturer

CHECK:CAMELCASE: Avoid CamelCase: <iManufacturer>
#1188: FILE: drivers/input/lirc/lirc_atiusb.c:1113:
+	if (dev->descriptor.iManufacturer

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1189: FILE: drivers/input/lirc/lirc_atiusb.c:1114:
+	if (dev->descriptor.iManufacturer
+	    && usb_string(dev, dev->descriptor.iManufacturer, buf, 63) > 0)

CHECK:CAMELCASE: Avoid CamelCase: <iProduct>
#1191: FILE: drivers/input/lirc/lirc_atiusb.c:1116:
+	if (dev->descriptor.iProduct

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1192: FILE: drivers/input/lirc/lirc_atiusb.c:1117:
+	if (dev->descriptor.iProduct
+	    && usb_string(dev, dev->descriptor.iProduct, buf, 63) > 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1194: FILE: drivers/input/lirc/lirc_atiusb.c:1119:
+	printk(DRIVER_NAME "[%d]: %s on usb%d:%d\n", dev->devnum, name,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1198: FILE: drivers/input/lirc/lirc_atiusb.c:1123:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: drivers/input/lirc/lirc_atiusb.c:1125:
+static int usb_remote_probe(struct usb_interface *intf,
+				const struct usb_device_id *id)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usb_remote_probe', this function's name, in a string
#1209: FILE: drivers/input/lirc/lirc_atiusb.c:1134:
+	dprintk(DRIVER_NAME "[%d]: usb_remote_probe: dev:%p, intf:%p, id:%p)\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1225: FILE: drivers/input/lirc/lirc_atiusb.c:1150:
+	 * of type interrupt transfer */

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#1226: FILE: drivers/input/lirc/lirc_atiusb.c:1151:
+	for (i = 0; i < idesc->desc.bNumEndpoints; ++i) {

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#1232: FILE: drivers/input/lirc/lirc_atiusb.c:1157:
+		     ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) ==

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1234: FILE: drivers/input/lirc/lirc_atiusb.c:1159:
+		      USB_ENDPOINT_XFER_INT)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: drivers/input/lirc/lirc_atiusb.c:1163:
+				usb_fill_int_urb(iep->urb, dev,
+					usb_rcvintpipe(dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: drivers/input/lirc/lirc_atiusb.c:1164:
+					usb_rcvintpipe(dev,
+						iep->ep->bEndpointAddress),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ir->out_init == NULL'
#1244: FILE: drivers/input/lirc/lirc_atiusb.c:1169:
+		if (((ep->bEndpointAddress & USB_ENDPOINT_DIR_MASK) ==
+		     USB_DIR_OUT) &&
+		     ((ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK) ==
+		      USB_ENDPOINT_XFER_INT) &&
+		      (ir->out_init == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ir->out_init"
#1248: FILE: drivers/input/lirc/lirc_atiusb.c:1173:
+		      (ir->out_init == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1252: FILE: drivers/input/lirc/lirc_atiusb.c:1177:
+		printk(DRIVER_NAME "[%d]: inbound endpoint not found\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#1279: FILE: drivers/input/lirc/lirc_atiusb.c:1204:
+	struct irctl *ir = usb_get_intfdata(intf);
+	usb_set_intfdata(intf, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1309: FILE: drivers/input/lirc/lirc_atiusb.c:1234:
+	printk(KERN_INFO "\n" DRIVER_NAME ": " DRIVER_DESC " "

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1311: FILE: drivers/input/lirc/lirc_atiusb.c:1236:
+	printk(DRIVER_NAME ": " DRIVER_AUTHOR "\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1318: FILE: drivers/input/lirc/lirc_atiusb.c:1243:
+	repeat_jiffies = repeat*HZ/100;
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1318: FILE: drivers/input/lirc/lirc_atiusb.c:1243:
+	repeat_jiffies = repeat*HZ/100;
 	                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1322: FILE: drivers/input/lirc/lirc_atiusb.c:1247:
+		printk(DRIVER_NAME ": usb register failed, result = %d\n", i);

WARNING:SPLIT_STRING: quoted string split across lines
#1381: FILE: drivers/input/lirc/lirc_atiusb.c:1306:
+MODULE_PARM_DESC(emit_updown, "emit press/release codes (rw2): 0:don't "
+		 "(default), 1:emit 2 codes only, 2:code for each button");

WARNING:SPLIT_STRING: quoted string split across lines
#1385: FILE: drivers/input/lirc/lirc_atiusb.c:1310:
+MODULE_PARM_DESC(emit_modekeys, "emit keycodes for aux1-aux4, pc, and mouse "
+		 "(rw2): 0:don't (default), 1:emit translated codes: one for "

WARNING:SPLIT_STRING: quoted string split across lines
#1386: FILE: drivers/input/lirc/lirc_atiusb.c:1311:
+		 "(rw2): 0:don't (default), 1:emit translated codes: one for "
+		 "mode switch, one for same mode, 2:raw codes");

WARNING:SPLIT_STRING: quoted string split across lines
#1390: FILE: drivers/input/lirc/lirc_atiusb.c:1315:
+MODULE_PARM_DESC(mgradient, "rw2 mouse: 1000*gradient from E to NE (default: "
+		 "500 => .5 => ~27 degrees)");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230089.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 75 warnings, 57 checks, 1341 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230089.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
