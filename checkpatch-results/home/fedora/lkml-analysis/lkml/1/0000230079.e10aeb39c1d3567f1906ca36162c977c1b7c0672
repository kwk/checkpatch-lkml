WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: drivers/input/lirc/Kconfig:71:
+config LIRC_SASEM
+	tristate "Sasem USB IR Remote"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the Sasem OnAir Remocon-V or Dign HV5 HTPC IR/VFD Module
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: drivers/input/lirc/lirc_sasem.c:1:
+/* lirc_sasem.c - USB remote support for LIRC

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#132: FILE: drivers/input/lirc/lirc_sasem.c:51:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: drivers/input/lirc/lirc_sasem.c:52:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#138: FILE: drivers/input/lirc/lirc_sasem.c:57:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#152: FILE: drivers/input/lirc/lirc_sasem.c:71:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#178: FILE: drivers/input/lirc/lirc_sasem.c:97:
+static int sasem_probe(struct usb_interface *interface,
+			const struct usb_device_id *id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: drivers/input/lirc/lirc_sasem.c:105:
+static int vfd_ioctl(struct inode *inode, struct file *file,
+				unsigned cmd, unsigned long arg);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#186: FILE: drivers/input/lirc/lirc_sasem.c:105:
+				unsigned cmd, unsigned long arg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/input/lirc/lirc_sasem.c:108:
+static ssize_t vfd_write(struct file *file, const char *buf,
+				size_t n_bytes, loff_t *pos);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#205: FILE: drivers/input/lirc/lirc_sasem.c:124:
+struct sasem_context {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#239: FILE: drivers/input/lirc/lirc_sasem.c:158:
+static struct file_operations vfd_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#240: FILE: drivers/input/lirc/lirc_sasem.c:159:
+static struct file_operations vfd_fops = {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#275: FILE: drivers/input/lirc/lirc_sasem.c:194:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/input/lirc/lirc_sasem.c:227:
+		err("%s: unable to deregister from lirc (%d)",
+			__func__, retval);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#312: FILE: drivers/input/lirc/lirc_sasem.c:231:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: drivers/input/lirc/lirc_sasem.c:259:
+		err("%s: no context found for minor %d",
+					__func__, subminor);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#368: FILE: drivers/input/lirc/lirc_sasem.c:287:
+		     unsigned cmd, unsigned long arg)

CHECK:SPACING: No space is necessary after a cast
#372: FILE: drivers/input/lirc/lirc_sasem.c:291:
+	context = (struct sasem_context *) file->private_data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#408: FILE: drivers/input/lirc/lirc_sasem.c:327:
+	context = (struct sasem_context *) file->private_data;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#424: FILE: drivers/input/lirc/lirc_sasem.c:343:
+		if (!context->dev_present && !context->ir_isopen) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#427: FILE: drivers/input/lirc/lirc_sasem.c:346:
+			 * deleted by ir_close. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: drivers/input/lirc/lirc_sasem.c:367:
+	pipe = usb_sndintpipe(context->dev,
+			context->tx_endpoint->bEndpointAddress);

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#448: FILE: drivers/input/lirc/lirc_sasem.c:367:
+			context->tx_endpoint->bEndpointAddress);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#449: FILE: drivers/input/lirc/lirc_sasem.c:368:
+	interval = context->tx_endpoint->bInterval;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/input/lirc/lirc_sasem.c:371:
+	usb_fill_int_urb(context->tx_urb, context->dev, pipe,
+		context->usb_tx_buf, sizeof(context->usb_tx_buf),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#458: FILE: drivers/input/lirc/lirc_sasem.c:377:
+	atomic_set(&(context->tx.busy), 1);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#462: FILE: drivers/input/lirc/lirc_sasem.c:381:
+		atomic_set(&(context->tx.busy), 0);

WARNING:TYPO_SPELLING: 'tranmission' may be misspelled - perhaps 'transmission'?
#465: FILE: drivers/input/lirc/lirc_sasem.c:384:
+		/* Wait for tranmission to complete (or abort) */
 		            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: drivers/input/lirc/lirc_sasem.c:403:
+static ssize_t vfd_write(struct file *file, const char *buf,
+				size_t n_bytes, loff_t *pos)

CHECK:SPACING: No space is necessary after a cast
#490: FILE: drivers/input/lirc/lirc_sasem.c:409:
+	context = (struct sasem_context *) file->private_data;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#520: FILE: drivers/input/lirc/lirc_sasem.c:439:
+	 *       will clear the VFD */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#559: FILE: drivers/input/lirc/lirc_sasem.c:478:
+		if (retval != SUCCESS) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/input/lirc/lirc_sasem.c:480:
+			err("%s: send packet failed for packet #%d",
+					__func__, i);

CHECK:SPACING: No space is necessary after a cast
#581: FILE: drivers/input/lirc/lirc_sasem.c:500:
+	context = (struct sasem_context *) urb->context;

WARNING:RETURN_VOID: void function return statements are not generally useful
#592: FILE: drivers/input/lirc/lirc_sasem.c:511:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#605: FILE: drivers/input/lirc/lirc_sasem.c:524:
+	context = (struct sasem_context *) data;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#616: FILE: drivers/input/lirc/lirc_sasem.c:535:
+	usb_fill_int_urb(context->rx_urb, context->dev,
+		usb_rcvintpipe(context->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: drivers/input/lirc/lirc_sasem.c:536:
+		usb_rcvintpipe(context->dev,
+				context->rx_endpoint->bEndpointAddress),

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ir_open', this function's name, in a string
#624: FILE: drivers/input/lirc/lirc_sasem.c:543:
+		err("%s: usb_submit_urb failed for ir_open (%d)",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: Unbalanced braces around else statement
#626: FILE: drivers/input/lirc/lirc_sasem.c:545:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#658: FILE: drivers/input/lirc/lirc_sasem.c:577:
+	if (!context->dev_present) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#667: FILE: drivers/input/lirc/lirc_sasem.c:586:
+		if (!context->vfd_isopen) {
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#677: FILE: drivers/input/lirc/lirc_sasem.c:596:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#698: FILE: drivers/input/lirc/lirc_sasem.c:617:
+	int i;
+	for (i = 0; i < 8; ++i)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#699: FILE: drivers/input/lirc/lirc_sasem.c:618:
+		printk(KERN_INFO "%02x ", buf[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#700: FILE: drivers/input/lirc/lirc_sasem.c:619:
+	printk(KERN_INFO "\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#704: FILE: drivers/input/lirc/lirc_sasem.c:623:
+	 * if it arrives too late.  Otherwise we could repeat the wrong code. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#713: FILE: drivers/input/lirc/lirc_sasem.c:632:
+		 * the old code to LIRC */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: drivers/input/lirc/lirc_sasem.c:637:
+		 *   press but it is long enough for a genuine repeat */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ms < 250'
#719: FILE: drivers/input/lirc/lirc_sasem.c:638:
+		if ((ms < 250) && (context->codesaved != 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'context->codesaved != 0'
#719: FILE: drivers/input/lirc/lirc_sasem.c:638:
+		if ((ms < 250) && (context->codesaved != 0)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#728: FILE: drivers/input/lirc/lirc_sasem.c:647:
+		 * just for safety reasons */

CHECK:SPACING: No space is necessary after a cast
#747: FILE: drivers/input/lirc/lirc_sasem.c:666:
+	context = (struct sasem_context *) urb->context;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#752: FILE: drivers/input/lirc/lirc_sasem.c:671:
+	switch (urb->status) {
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#753: FILE: drivers/input/lirc/lirc_sasem.c:672:
+^Icase -ENOENT: ^I^I/* usbcore unlink successful! */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: drivers/input/lirc/lirc_sasem.c:682:
+		warn("%s: status (%d): ignored",
+			 __func__, urb->status);

WARNING:RETURN_VOID: void function return statements are not generally useful
#769: FILE: drivers/input/lirc/lirc_sasem.c:688:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#771: FILE: drivers/input/lirc/lirc_sasem.c:690:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: drivers/input/lirc/lirc_sasem.c:696:
+static int sasem_probe(struct usb_interface *interface,
+			const struct usb_device_id *id)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#798: FILE: drivers/input/lirc/lirc_sasem.c:717:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#801: FILE: drivers/input/lirc/lirc_sasem.c:720:
+	num_endpoints = iface_desc->desc.bNumEndpoints;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#805: FILE: drivers/input/lirc/lirc_sasem.c:724:
+^I * ^Ifirst input endpoint = IR endpoint$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#806: FILE: drivers/input/lirc/lirc_sasem.c:725:
+^I * ^Ifirst output endpoint = VFD endpoint$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#813: FILE: drivers/input/lirc/lirc_sasem.c:732:
+	for (i = 0; i < num_endpoints && !(ir_ep_found && vfd_ep_found); ++i) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#817: FILE: drivers/input/lirc/lirc_sasem.c:736:
+		int ep_type;
+		ep = &iface_desc->endpoint [i].desc;

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#819: FILE: drivers/input/lirc/lirc_sasem.c:738:
+		ep_type = ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#822: FILE: drivers/input/lirc/lirc_sasem.c:741:
+		if (!ir_ep_found &&
+			ep_dir == USB_DIR_IN &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#824: FILE: drivers/input/lirc/lirc_sasem.c:743:
+			ep_type == USB_ENDPOINT_XFER_INT) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#833: FILE: drivers/input/lirc/lirc_sasem.c:752:
+			ep_type == USB_ENDPOINT_XFER_INT) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#843: FILE: drivers/input/lirc/lirc_sasem.c:762:
+	if (!ir_ep_found) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#853: FILE: drivers/input/lirc/lirc_sasem.c:772:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*context)...) over kmalloc(sizeof(struct sasem_context)...)
#857: FILE: drivers/input/lirc/lirc_sasem.c:776:
+	context = kmalloc(sizeof(struct sasem_context), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*plugin)...) over kmalloc(sizeof(struct lirc_plugin)...)
#863: FILE: drivers/input/lirc/lirc_sasem.c:782:
+	plugin = kmalloc(sizeof(struct lirc_plugin), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rbuf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#869: FILE: drivers/input/lirc/lirc_sasem.c:788:
+	rbuf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

CHECK:BRACES: Unbalanced braces around else statement
#921: FILE: drivers/input/lirc/lirc_sasem.c:840:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: drivers/input/lirc/lirc_sasem.c:842:
+		info("%s: Registered Sasem plugin (minor:%d)",
+			__func__, lirc_minor);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#928: FILE: drivers/input/lirc/lirc_sasem.c:847:
+	switch (alloc_status) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#965: FILE: drivers/input/lirc/lirc_sasem.c:884:
+	if (vfd_ep_found) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#971: FILE: drivers/input/lirc/lirc_sasem.c:890:
+			info("%s: could not get a minor number for VFD",
+				__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#975: FILE: drivers/input/lirc/lirc_sasem.c:894:
+	info("%s: Sasem device on usb<%d:%d> initialized",
+			__func__, dev->bus->busnum, dev->devnum);

WARNING:TYPO_SPELLING: 'disonnect' may be misspelled - perhaps 'disconnect'?
#983: FILE: drivers/input/lirc/lirc_sasem.c:902:
+ * Callback function for USB core API: disonnect
                                        ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1005: FILE: drivers/input/lirc/lirc_sasem.c:924:
+	if (atomic_read(&context->tx.busy)) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1046: FILE: drivers/input/lirc/lirc_sasem.c:965:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 26 warnings, 58 checks, 989 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
