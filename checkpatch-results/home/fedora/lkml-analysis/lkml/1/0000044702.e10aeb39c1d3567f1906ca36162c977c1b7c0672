WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
This is a RTC driver patch support for NUC910 and NUC920 processors of Winbind/Nuvoton NUC900 ARM series.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: drivers/rtc/Kconfig:576:
+config RTC_DRV_NUC900
+	tristate "NUC910/NUC920 RTC driver"
+	depends on RTC_CLASS && ARCH_W90X900
+	help
+	  If you say yes here you get support for the RTC subsystem of the
+	  NUC910/NUC920 used in embedded systems.
 
 comment "on-CPU RTC drivers"
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/rtc/rtc-nuc900.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'LEAPYEAR' may be misspelled - perhaps 'LEAP YEAR'?
#125: FILE: drivers/rtc/rtc-nuc900.c:43:
+#define LEAPYEAR		0x0001
         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#134: FILE: drivers/rtc/rtc-nuc900.c:52:
+	spinlock_t		lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#168: FILE: drivers/rtc/rtc-nuc900.c:86:
+	unsigned int i;
+	__raw_writel(INIRRESET, nuc900_rtc->rtc_reg + REG_RTC_INIR);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: drivers/rtc/rtc-nuc900.c:99:
+static void nuc900_rtc_decodetime(unsigned int timereg,
+				unsigned int calreg, struct rtc_time *tm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: drivers/rtc/rtc-nuc900.c:111:
+static void nuc900_rtc_encodetime(struct rtc_time *settm,
+						struct rtc_time *gettm)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: drivers/rtc/rtc-nuc900.c:123:
+static int nuc900_rtc_ioctl(struct device *dev, unsigned int cmd,
+		unsigned long arg)

WARNING:TYPO_SPELLING: 'LEAPYEAR' may be misspelled - perhaps 'LEAP YEAR'?
#265: FILE: drivers/rtc/rtc-nuc900.c:183:
+	leap_yr = __raw_readl(rtc->rtc_reg + REG_RTC_LIR) & LEAPYEAR;
 	                                                    ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_mon > 12'
#267: FILE: drivers/rtc/rtc-nuc900.c:185:
+	if ((gettm.tm_mon > 12) || (gettm.tm_mday == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_mday == 0'
#267: FILE: drivers/rtc/rtc-nuc900.c:185:
+	if ((gettm.tm_mon > 12) || (gettm.tm_mday == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_mon == 2'
#269: FILE: drivers/rtc/rtc-nuc900.c:187:
+	if (gettm.tm_mday > (days_in_mo[gettm.tm_mon] +
+					((gettm.tm_mon == 2) && leap_yr)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_hour >= 24'
#272: FILE: drivers/rtc/rtc-nuc900.c:190:
+	if ((gettm.tm_hour >= 24) || (gettm.tm_min >= 60) ||
+						(gettm.tm_sec >= 60))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_min >= 60'
#272: FILE: drivers/rtc/rtc-nuc900.c:190:
+	if ((gettm.tm_hour >= 24) || (gettm.tm_min >= 60) ||
+						(gettm.tm_sec >= 60))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'gettm.tm_sec >= 60'
#272: FILE: drivers/rtc/rtc-nuc900.c:190:
+	if ((gettm.tm_hour >= 24) || (gettm.tm_min >= 60) ||
+						(gettm.tm_sec >= 60))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: drivers/rtc/rtc-nuc900.c:191:
+	if ((gettm.tm_hour >= 24) || (gettm.tm_min >= 60) ||
+						(gettm.tm_sec >= 60))

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#315: FILE: drivers/rtc/rtc-nuc900.c:233:
+		__raw_writel(__raw_readl(rtc->rtc_reg + REG_RTC_RIER)|
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct rtc_class_ops should normally be const
#322: FILE: drivers/rtc/rtc-nuc900.c:240:
+static struct rtc_class_ops nuc900_rtc_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#330: FILE: drivers/rtc/rtc-nuc900.c:248:
+static int __devinit nuc900_rtc_probe(struct platform_device *pdev)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nuc900_rtc)...) over kzalloc(sizeof(struct nuc900_rtc)...)
#336: FILE: drivers/rtc/rtc-nuc900.c:254:
+	nuc900_rtc = kzalloc(sizeof(struct nuc900_rtc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: drivers/rtc/rtc-nuc900.c:286:
+	nuc900_rtc->rtcdev = rtc_device_register(pdev->name, &pdev->dev,
+						&nuc900_rtc_ops, THIS_MODULE);

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#385: FILE: drivers/rtc/rtc-nuc900.c:303:
+static int __devexit nuc900_rtc_remove(struct platform_device *pdev)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000044702.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 14 checks, 363 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000044702.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
