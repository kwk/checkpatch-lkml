WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
APB timers. There are four timers available to the kernel via SFI MTMR table.

WARNING:TYPO_SPELLING: 'deivces' may be misspelled - perhaps 'devices'?
#45: 
for per CPU clockevent deivces, one for clocksource, one by the watchdog
                       ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#112: FILE: arch/x86/include/asm/apb_timer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#154: FILE: arch/x86/include/asm/apb_timer.h:43:
+#define APBTMR_CONTROL_ENABLE  (1<<0)
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#154: FILE: arch/x86/include/asm/apb_timer.h:43:
+#define APBTMR_CONTROL_ENABLE  (1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#155: FILE: arch/x86/include/asm/apb_timer.h:44:
+#define APBTMR_CONTROL_MODE_PERIODIC   (1<<1) /*1: periodic 0:free running */
                                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#155: FILE: arch/x86/include/asm/apb_timer.h:44:
+#define APBTMR_CONTROL_MODE_PERIODIC   (1<<1) /*1: periodic 0:free running */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#156: FILE: arch/x86/include/asm/apb_timer.h:45:
+#define APBTMR_CONTROL_INT     (1<<2)
                                  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#156: FILE: arch/x86/include/asm/apb_timer.h:45:
+#define APBTMR_CONTROL_INT     (1<<2)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#161: FILE: arch/x86/include/asm/apb_timer.h:50:
+#define APBT_DEFAULT_BASE      (LNW_SCU_ADDR+LNW_EXT_TIMER_OFFSET)
                                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#173: FILE: arch/x86/include/asm/apb_timer.h:62:
+extern int apbt_enable(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#176: FILE: arch/x86/include/asm/apb_timer.h:65:
+extern unsigned long apbt_quick_calibrate(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: arch/x86/include/asm/apb_timer.h:66:
+extern int arch_setup_apbt_irqs(int irq, int trigger, int mask, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: arch/x86/include/asm/apb_timer.h:67:
+extern void apbt_setup_secondary_clock(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#179: FILE: arch/x86/include/asm/apb_timer.h:68:
+void apbt_prepare_count(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#180: FILE: arch/x86/include/asm/apb_timer.h:69:
+void apbt_countup(unsigned long *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: arch/x86/include/asm/fixmap.h:121:
+       FIX_APB_TIMER,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: arch/x86/include/asm/mach_timer.h:25:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#223: FILE: arch/x86/include/asm/mach_timer.h:25:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {
+               apbt_prepare_count(CALIBRATE_TIME_MSEC);

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: arch/x86/include/asm/mach_timer.h:26:
+               apbt_prepare_count(CALIBRATE_TIME_MSEC);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: arch/x86/include/asm/mach_timer.h:26:
+               apbt_prepare_count(CALIBRATE_TIME_MSEC);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: arch/x86/include/asm/mach_timer.h:27:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: arch/x86/include/asm/mach_timer.h:27:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: arch/x86/include/asm/mach_timer.h:28:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: arch/x86/include/asm/mach_timer.h:30:
+       if (platform_has(X86_PLATFORM_FEATURE_8254))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#228: FILE: arch/x86/include/asm/mach_timer.h:30:
+       if (platform_has(X86_PLATFORM_FEATURE_8254))
+               outb((inb(0x61) & ~0x02) | 0x01, 0x61);

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: arch/x86/include/asm/mach_timer.h:31:
+               outb((inb(0x61) & ~0x02) | 0x01, 0x61);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: arch/x86/include/asm/mach_timer.h:31:
+               outb((inb(0x61) & ~0x02) | 0x01, 0x61);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: arch/x86/include/asm/mach_timer.h:50:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#237: FILE: arch/x86/include/asm/mach_timer.h:50:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {
+               apbt_countup(count_p);

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: arch/x86/include/asm/mach_timer.h:51:
+               apbt_countup(count_p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: arch/x86/include/asm/mach_timer.h:51:
+               apbt_countup(count_p);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#239: FILE: arch/x86/include/asm/mach_timer.h:52:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#239: FILE: arch/x86/include/asm/mach_timer.h:52:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: arch/x86/include/asm/mach_timer.h:53:
+       }$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#285: FILE: arch/x86/kernel/apb_timer.c:1:
+/*

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#328: FILE: arch/x86/kernel/apb_timer.c:44:
+#      define apbt_dbg(fmt, args...) \
+       do { printk(KERN_DEBUG "apbt:" fmt, ## args); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: arch/x86/kernel/apb_timer.c:45:
+       do { printk(KERN_DEBUG "apbt:" fmt, ## args); } while (0)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#329: FILE: arch/x86/kernel/apb_timer.c:45:
+       do { printk(KERN_DEBUG "apbt:" fmt, ## args); } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt' - possible side-effects?
#334: FILE: arch/x86/kernel/apb_timer.c:50:
+#define EVT_TO_APBT_DEV(evt) container_of(evt, struct apbt_dev, evt)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#347: FILE: arch/x86/kernel/apb_timer.c:63:
+static uint64_t apbt_freq;

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: arch/x86/kernel/apb_timer.c:66:
+                         struct clock_event_device *evt);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: arch/x86/kernel/apb_timer.c:66:
+static void apb_timer_set_mode(enum clock_event_mode mode,
+                         struct clock_event_device *evt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: arch/x86/kernel/apb_timer.c:66:
+                         struct clock_event_device *evt);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: arch/x86/kernel/apb_timer.c:68:
+                          struct clock_event_device *evt);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: arch/x86/kernel/apb_timer.c:68:
+static int apb_timer_next_event(unsigned long delta,
+                          struct clock_event_device *evt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#352: FILE: arch/x86/kernel/apb_timer.c:68:
+                          struct clock_event_device *evt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: arch/x86/kernel/apb_timer.c:71:
+       struct clock_event_device       evt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: arch/x86/kernel/apb_timer.c:72:
+       unsigned int num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: arch/x86/kernel/apb_timer.c:73:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: arch/x86/kernel/apb_timer.c:74:
+       unsigned int irq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: arch/x86/kernel/apb_timer.c:75:
+       unsigned int tick;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: arch/x86/kernel/apb_timer.c:76:
+       unsigned int count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: arch/x86/kernel/apb_timer.c:77:
+       unsigned int flags;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: arch/x86/kernel/apb_timer.c:78:
+       char name[10];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: arch/x86/kernel/apb_timer.c:90:
+       unsigned long data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: arch/x86/kernel/apb_timer.c:91:
+       unsigned long data;
+       data = readl(apbt_virt_address + a);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: arch/x86/kernel/apb_timer.c:91:
+       data = readl(apbt_virt_address + a);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: arch/x86/kernel/apb_timer.c:92:
+       return data;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#378: FILE: arch/x86/kernel/apb_timer.c:94:
+}
+static inline void apbt_writel_reg(unsigned long d, unsigned long a)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: arch/x86/kernel/apb_timer.c:96:
+       writel(d, apbt_virt_address + a);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: arch/x86/kernel/apb_timer.c:101:
+       unsigned long data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: arch/x86/kernel/apb_timer.c:102:
+       unsigned long data;
+       data = readl(apbt_virt_address + a + n * APBTMRS_REG_SIZE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: arch/x86/kernel/apb_timer.c:102:
+       data = readl(apbt_virt_address + a + n * APBTMRS_REG_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: arch/x86/kernel/apb_timer.c:103:
+       return data;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#389: FILE: arch/x86/kernel/apb_timer.c:105:
+}
+static inline void apbt_writel(int n, unsigned long d, unsigned long a)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: arch/x86/kernel/apb_timer.c:107:
+       writel(d, apbt_virt_address + a + n * APBTMRS_REG_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: arch/x86/kernel/apb_timer.c:115:
+       static int early_mapped;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: arch/x86/kernel/apb_timer.c:116:
+       struct sfi_mtimer_entry *mtmr;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: arch/x86/kernel/apb_timer.c:117:
+       struct sfi_mtimer_entry *mtmr;
+       if (early_mapped)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: arch/x86/kernel/apb_timer.c:117:
+       if (early_mapped)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#401: FILE: arch/x86/kernel/apb_timer.c:117:
+       if (early_mapped)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: arch/x86/kernel/apb_timer.c:118:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: arch/x86/kernel/apb_timer.c:118:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: arch/x86/kernel/apb_timer.c:119:
+       mtmr = sfi_get_mtmr(APBT_CLOCKEVENT0_NUM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: arch/x86/kernel/apb_timer.c:120:
+       if (mtmr == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#404: FILE: arch/x86/kernel/apb_timer.c:120:
+       if (mtmr == NULL) {
+               printk(KERN_ERR "Failed to get MTMR from SFI\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mtmr"
#404: FILE: arch/x86/kernel/apb_timer.c:120:
+       if (mtmr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: arch/x86/kernel/apb_timer.c:121:
+               printk(KERN_ERR "Failed to get MTMR from SFI\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: arch/x86/kernel/apb_timer.c:121:
+               printk(KERN_ERR "Failed to get MTMR from SFI\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#405: FILE: arch/x86/kernel/apb_timer.c:121:
+               printk(KERN_ERR "Failed to get MTMR from SFI\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: arch/x86/kernel/apb_timer.c:122:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: arch/x86/kernel/apb_timer.c:122:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: arch/x86/kernel/apb_timer.c:123:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: arch/x86/kernel/apb_timer.c:124:
+       if (!apbt_address)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#408: FILE: arch/x86/kernel/apb_timer.c:124:
+       if (!apbt_address)
+               apbt_address = mtmr->phy_addr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: arch/x86/kernel/apb_timer.c:125:
+               apbt_address = mtmr->phy_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: arch/x86/kernel/apb_timer.c:125:
+               apbt_address = mtmr->phy_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: arch/x86/kernel/apb_timer.c:127:
+       set_fixmap_nocache(FIX_APB_TIMER, apbt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: arch/x86/kernel/apb_timer.c:129:
+       apbt_virt_address = (unsigned char __iomem *)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: arch/x86/kernel/apb_timer.c:130:
+                       __fix_to_virt(FIX_APB_TIMER) + LNW_EXT_TIMER_PGOFFSET;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: arch/x86/kernel/apb_timer.c:130:
+                       __fix_to_virt(FIX_APB_TIMER) + LNW_EXT_TIMER_PGOFFSET;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: arch/x86/kernel/apb_timer.c:131:
+       if (apbt_virt_address)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#415: FILE: arch/x86/kernel/apb_timer.c:131:
+       if (apbt_virt_address)
+               apbt_dbg("Fix mapped APBT at %p (%lu)\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: arch/x86/kernel/apb_timer.c:132:
+               apbt_dbg("Fix mapped APBT at %p (%lu)\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: arch/x86/kernel/apb_timer.c:132:
+               apbt_dbg("Fix mapped APBT at %p (%lu)\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: arch/x86/kernel/apb_timer.c:133:
+                       apbt_virt_address, apbt_address);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: arch/x86/kernel/apb_timer.c:133:
+               apbt_dbg("Fix mapped APBT at %p (%lu)\n",
+                       apbt_virt_address, apbt_address);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: arch/x86/kernel/apb_timer.c:133:
+                       apbt_virt_address, apbt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#418: FILE: arch/x86/kernel/apb_timer.c:134:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#418: FILE: arch/x86/kernel/apb_timer.c:134:
+       else
+               printk(KERN_INFO "Failed to map fix apbt\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#419: FILE: arch/x86/kernel/apb_timer.c:135:
+               printk(KERN_INFO "Failed to map fix apbt\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: arch/x86/kernel/apb_timer.c:135:
+               printk(KERN_INFO "Failed to map fix apbt\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#419: FILE: arch/x86/kernel/apb_timer.c:135:
+               printk(KERN_INFO "Failed to map fix apbt\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: arch/x86/kernel/apb_timer.c:136:
+       early_mapped = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: arch/x86/kernel/apb_timer.c:137:
+       apbt_freq = mtmr->freq / USEC_PER_SEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/x86/kernel/apb_timer.c:138:
+       sfi_free_mtmr(mtmr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/x86/kernel/apb_timer.c:139:
+       return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/x86/kernel/apb_timer.c:144:
+       struct sfi_mtimer_entry *mtmr;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#429: FILE: arch/x86/kernel/apb_timer.c:145:
+       struct sfi_mtimer_entry *mtmr;
+       mtmr = sfi_get_mtmr(APBT_CLOCKEVENT0_NUM);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: arch/x86/kernel/apb_timer.c:145:
+       mtmr = sfi_get_mtmr(APBT_CLOCKEVENT0_NUM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: arch/x86/kernel/apb_timer.c:146:
+       if (mtmr == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#430: FILE: arch/x86/kernel/apb_timer.c:146:
+       if (mtmr == NULL) {
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mtmr"
#430: FILE: arch/x86/kernel/apb_timer.c:146:
+       if (mtmr == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: arch/x86/kernel/apb_timer.c:147:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: arch/x86/kernel/apb_timer.c:147:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#431: FILE: arch/x86/kernel/apb_timer.c:147:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: arch/x86/kernel/apb_timer.c:148:
+                       APBT_CLOCKEVENT0_NUM);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: arch/x86/kernel/apb_timer.c:148:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",
+                       APBT_CLOCKEVENT0_NUM);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: arch/x86/kernel/apb_timer.c:148:
+                       APBT_CLOCKEVENT0_NUM);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: arch/x86/kernel/apb_timer.c:149:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: arch/x86/kernel/apb_timer.c:149:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: arch/x86/kernel/apb_timer.c:150:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/x86/kernel/apb_timer.c:151:
+       apbt_address = (unsigned long)mtmr->phy_addr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: arch/x86/kernel/apb_timer.c:152:
+       if (!apbt_address) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#436: FILE: arch/x86/kernel/apb_timer.c:152:
+       if (!apbt_address) {
+               printk(KERN_WARNING "No timer base from SFI, use default\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: arch/x86/kernel/apb_timer.c:153:
+               printk(KERN_WARNING "No timer base from SFI, use default\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: arch/x86/kernel/apb_timer.c:153:
+               printk(KERN_WARNING "No timer base from SFI, use default\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#437: FILE: arch/x86/kernel/apb_timer.c:153:
+               printk(KERN_WARNING "No timer base from SFI, use default\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: arch/x86/kernel/apb_timer.c:154:
+               apbt_address = APBT_DEFAULT_BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: arch/x86/kernel/apb_timer.c:154:
+               apbt_address = APBT_DEFAULT_BASE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: arch/x86/kernel/apb_timer.c:155:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: arch/x86/kernel/apb_timer.c:156:
+       apbt_virt_address = ioremap_nocache(apbt_address, APBT_MMAP_SIZE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: arch/x86/kernel/apb_timer.c:157:
+       if (apbt_virt_address) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#441: FILE: arch/x86/kernel/apb_timer.c:157:
+       if (apbt_virt_address) {
+               apbt_dbg("Mapped APBT physical addr %p at virtual addr %p\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#442: FILE: arch/x86/kernel/apb_timer.c:158:
+               apbt_dbg("Mapped APBT physical addr %p at virtual addr %p\n",\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: arch/x86/kernel/apb_timer.c:158:
+               apbt_dbg("Mapped APBT physical addr %p at virtual addr %p\n",\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#442: FILE: arch/x86/kernel/apb_timer.c:158:
+               apbt_dbg("Mapped APBT physical addr %p at virtual addr %p\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: arch/x86/kernel/apb_timer.c:159:
+                       (void *)apbt_address, (void *)apbt_virt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: arch/x86/kernel/apb_timer.c:159:
+                       (void *)apbt_address, (void *)apbt_virt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: arch/x86/kernel/apb_timer.c:160:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#444: FILE: arch/x86/kernel/apb_timer.c:160:
+       } else {
+               apbt_dbg("Failed mapping APBT phy address at %p\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: arch/x86/kernel/apb_timer.c:161:
+               apbt_dbg("Failed mapping APBT phy address at %p\n",\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: arch/x86/kernel/apb_timer.c:161:
+               apbt_dbg("Failed mapping APBT phy address at %p\n",\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#445: FILE: arch/x86/kernel/apb_timer.c:161:
+               apbt_dbg("Failed mapping APBT phy address at %p\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: arch/x86/kernel/apb_timer.c:162:
+                       (void *)apbt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: arch/x86/kernel/apb_timer.c:162:
+                       (void *)apbt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/x86/kernel/apb_timer.c:163:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: arch/x86/kernel/apb_timer.c:164:
+       apbt_freq = mtmr->freq / USEC_PER_SEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/x86/kernel/apb_timer.c:165:
+       sfi_free_mtmr(mtmr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: arch/x86/kernel/apb_timer.c:167:
+       mtmr = sfi_get_mtmr(APBT_CLOCKSOURCE_NUM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: arch/x86/kernel/apb_timer.c:168:
+       if (mtmr == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#452: FILE: arch/x86/kernel/apb_timer.c:168:
+       if (mtmr == NULL) {
+               printk(KERN_ERR "Failed to get APBT clocksource\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mtmr"
#452: FILE: arch/x86/kernel/apb_timer.c:168:
+       if (mtmr == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: arch/x86/kernel/apb_timer.c:169:
+               printk(KERN_ERR "Failed to get APBT clocksource\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: arch/x86/kernel/apb_timer.c:169:
+               printk(KERN_ERR "Failed to get APBT clocksource\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#453: FILE: arch/x86/kernel/apb_timer.c:169:
+               printk(KERN_ERR "Failed to get APBT clocksource\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: arch/x86/kernel/apb_timer.c:170:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: arch/x86/kernel/apb_timer.c:170:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: arch/x86/kernel/apb_timer.c:171:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: arch/x86/kernel/apb_timer.c:173:
+       phy_cs_timer_id = (unsigned int)(mtmr->phy_addr & 0xff)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: arch/x86/kernel/apb_timer.c:174:
+                       / APBTMRS_REG_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: arch/x86/kernel/apb_timer.c:174:
+                       / APBTMRS_REG_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: arch/x86/kernel/apb_timer.c:175:
+       apbt_dbg("Use timer %d for clocksource\n", phy_cs_timer_id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: arch/x86/kernel/apb_timer.c:180:
+       iounmap(apbt_virt_address);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/x86/kernel/apb_timer.c:181:
+       apbt_virt_address = NULL;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#467: FILE: arch/x86/kernel/apb_timer.c:183:
+}
+/*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: arch/x86/kernel/apb_timer.c:188:
+       return apbt_virt_address ? 1 : 0;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: arch/x86/kernel/apb_timer.c:190:
+}
+/*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/x86/kernel/apb_timer.c:195:
+       return is_apbt_capable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: arch/x86/kernel/apb_timer.c:201:
+       return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: arch/x86/kernel/apb_timer.c:208:
+       .name           = "apbt0",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#493: FILE: arch/x86/kernel/apb_timer.c:209:
+       .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: arch/x86/kernel/apb_timer.c:210:
+       .set_mode       = apb_timer_set_mode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: arch/x86/kernel/apb_timer.c:211:
+       .event_handler  = apbt_event_handler,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: arch/x86/kernel/apb_timer.c:212:
+       .set_next_event = apb_timer_next_event,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: arch/x86/kernel/apb_timer.c:213:
+       .shift          = APBT_SHIFT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: arch/x86/kernel/apb_timer.c:214:
+       .irq            = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: arch/x86/kernel/apb_timer.c:215:
+       .rating         = APBT_CLOCKEVENT_RATING,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: arch/x86/kernel/apb_timer.c:223:
+       disable_apbt_percpu = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#508: FILE: arch/x86/kernel/apb_timer.c:224:
+       return 0;$

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#510: FILE: arch/x86/kernel/apb_timer.c:226:
+__setup("no_percpu_apbt", setup_no_percpu_apbt);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/x86/kernel/apb_timer.c:234:
+       unsigned long ctrl = apbt_readl(n, APBTMR_0_CONTROL);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#519: FILE: arch/x86/kernel/apb_timer.c:235:
+       unsigned long ctrl = apbt_readl(n, APBTMR_0_CONTROL);
+       ctrl &= ~APBTMR_CONTROL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: arch/x86/kernel/apb_timer.c:235:
+       ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/x86/kernel/apb_timer.c:236:
+       apbt_writel(n, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: arch/x86/kernel/apb_timer.c:237:
+       apbt_writel(n, ~0, APBTMR_0_LOAD_COUNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: arch/x86/kernel/apb_timer.c:238:
+       ctrl |= (APBTMR_CONTROL_ENABLE | APBTMR_CONTROL_MODE_PERIODIC);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#523: FILE: arch/x86/kernel/apb_timer.c:239:
+       apbt_writel(n, ctrl, APBTMR_0_CONTROL);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#525: FILE: arch/x86/kernel/apb_timer.c:241:
+}
+#ifdef CONFIG_SMP

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: arch/x86/kernel/apb_timer.c:244:
+       struct apbt_dev *dev = (struct apbt_dev *)data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: arch/x86/kernel/apb_timer.c:245:
+       struct clock_event_device *aevt = &dev->evt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: arch/x86/kernel/apb_timer.c:247:
+       if (!aevt->event_handler) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#531: FILE: arch/x86/kernel/apb_timer.c:247:
+       if (!aevt->event_handler) {
+               printk(KERN_INFO "Spurious APBT timer interrupt on %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#532: FILE: arch/x86/kernel/apb_timer.c:248:
+               printk(KERN_INFO "Spurious APBT timer interrupt on %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/x86/kernel/apb_timer.c:248:
+               printk(KERN_INFO "Spurious APBT timer interrupt on %d\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#532: FILE: arch/x86/kernel/apb_timer.c:248:
+               printk(KERN_INFO "Spurious APBT timer interrupt on %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#533: FILE: arch/x86/kernel/apb_timer.c:249:
+                               dev->num);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: arch/x86/kernel/apb_timer.c:249:
+               printk(KERN_INFO "Spurious APBT timer interrupt on %d\n",
+                               dev->num);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: arch/x86/kernel/apb_timer.c:249:
+                               dev->num);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#534: FILE: arch/x86/kernel/apb_timer.c:250:
+               return IRQ_HANDLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: arch/x86/kernel/apb_timer.c:250:
+               return IRQ_HANDLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: arch/x86/kernel/apb_timer.c:251:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: arch/x86/kernel/apb_timer.c:252:
+       aevt->event_handler(aevt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: arch/x86/kernel/apb_timer.c:253:
+       return IRQ_HANDLED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: arch/x86/kernel/apb_timer.c:259:
+       apbt_start_counter(phy_cs_timer_id);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#545: FILE: arch/x86/kernel/apb_timer.c:261:
+}
+/* Setup IRQ routing via IOAPIC */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: arch/x86/kernel/apb_timer.c:266:
+       if (adev->irq == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#550: FILE: arch/x86/kernel/apb_timer.c:266:
+       if (adev->irq == 0)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#551: FILE: arch/x86/kernel/apb_timer.c:267:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#551: FILE: arch/x86/kernel/apb_timer.c:267:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/x86/kernel/apb_timer.c:268:
+       disable_irq(adev->irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: arch/x86/kernel/apb_timer.c:269:
+       irq_set_affinity(adev->irq, cpumask_of(adev->cpu));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/x86/kernel/apb_timer.c:270:
+       enable_irq(adev->irq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/x86/kernel/apb_timer.c:273:
+       arch_setup_apbt_irqs(adev->irq, 0, 0, adev->cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: arch/x86/kernel/apb_timer.c:274:
+       if (request_irq(adev->irq, apbt_interrupt_handler,$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#558: FILE: arch/x86/kernel/apb_timer.c:274:
+       if (request_irq(adev->irq, apbt_interrupt_handler,
[...]
+               printk(KERN_ERR "Failed request IRQ for APBT %d\n", adev->num);

ERROR:CODE_INDENT: code indent should use tabs where possible
#559: FILE: arch/x86/kernel/apb_timer.c:275:
+                       IRQF_DISABLED|IRQF_NOBALANCING, adev->name, adev)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/x86/kernel/apb_timer.c:275:
+                       IRQF_DISABLED|IRQF_NOBALANCING, adev->name, adev)) {$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#559: FILE: arch/x86/kernel/apb_timer.c:275:
+                       IRQF_DISABLED|IRQF_NOBALANCING, adev->name, adev)) {
                                     ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: arch/x86/kernel/apb_timer.c:276:
+               printk(KERN_ERR "Failed request IRQ for APBT %d\n", adev->num);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: arch/x86/kernel/apb_timer.c:276:
+               printk(KERN_ERR "Failed request IRQ for APBT %d\n", adev->num);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#560: FILE: arch/x86/kernel/apb_timer.c:276:
+               printk(KERN_ERR "Failed request IRQ for APBT %d\n", adev->num);

ERROR:CODE_INDENT: code indent should use tabs where possible
#561: FILE: arch/x86/kernel/apb_timer.c:277:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: arch/x86/kernel/apb_timer.c:277:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/x86/kernel/apb_timer.c:278:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: arch/x86/kernel/apb_timer.c:284:
+       unsigned long ctrl = apbt_readl(n, APBTMR_0_CONTROL);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: arch/x86/kernel/apb_timer.c:285:
+       unsigned long ctrl = apbt_readl(n, APBTMR_0_CONTROL);
+       ctrl &= ~APBTMR_CONTROL_INT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/x86/kernel/apb_timer.c:285:
+       ctrl &= ~APBTMR_CONTROL_INT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/x86/kernel/apb_timer.c:286:
+       apbt_writel(n, ctrl, APBTMR_0_CONTROL);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#572: FILE: arch/x86/kernel/apb_timer.c:288:
+}
+static int apbt_clockevent_register(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#574: FILE: arch/x86/kernel/apb_timer.c:290:
+       struct sfi_mtimer_entry *mtmr;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#575: FILE: arch/x86/kernel/apb_timer.c:291:
+       struct sfi_mtimer_entry *mtmr;
+       mtmr = sfi_get_mtmr(APBT_CLOCKEVENT0_NUM);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: arch/x86/kernel/apb_timer.c:291:
+       mtmr = sfi_get_mtmr(APBT_CLOCKEVENT0_NUM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/x86/kernel/apb_timer.c:292:
+       if (mtmr == NULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#576: FILE: arch/x86/kernel/apb_timer.c:292:
+       if (mtmr == NULL) {
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mtmr"
#576: FILE: arch/x86/kernel/apb_timer.c:292:
+       if (mtmr == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/x86/kernel/apb_timer.c:293:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/x86/kernel/apb_timer.c:293:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: arch/x86/kernel/apb_timer.c:293:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/x86/kernel/apb_timer.c:294:
+                       APBT_CLOCKEVENT0_NUM);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: arch/x86/kernel/apb_timer.c:294:
+               printk(KERN_ERR "Failed to get MTMR %d from SFI\n",
+                       APBT_CLOCKEVENT0_NUM);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/x86/kernel/apb_timer.c:294:
+                       APBT_CLOCKEVENT0_NUM);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: arch/x86/kernel/apb_timer.c:295:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: arch/x86/kernel/apb_timer.c:295:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: arch/x86/kernel/apb_timer.c:296:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: arch/x86/kernel/apb_timer.c:298:
+       apbt_enable_int(APBT_CLOCKEVENT0_NUM);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: arch/x86/kernel/apb_timer.c:300:
+        * We need to calculate the scaled math multiplication factor for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: arch/x86/kernel/apb_timer.c:301:
+        * nanosecond to apbt tick conversion.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#586: FILE: arch/x86/kernel/apb_timer.c:302:
+        * mult = (nsec/cycle)*2^APBT_SHIFT$

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: arch/x86/kernel/apb_timer.c:303:
+        */$

CHECK:SPACING: No space is necessary after a cast
#588: FILE: arch/x86/kernel/apb_timer.c:304:
+       apbt_clockevent.mult = div_sc((unsigned long) mtmr->freq

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/x86/kernel/apb_timer.c:304:
+       apbt_clockevent.mult = div_sc((unsigned long) mtmr->freq$

ERROR:CODE_INDENT: code indent should use tabs where possible
#589: FILE: arch/x86/kernel/apb_timer.c:305:
+                       , NSEC_PER_SEC, APBT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: arch/x86/kernel/apb_timer.c:305:
+                       , NSEC_PER_SEC, APBT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: arch/x86/kernel/apb_timer.c:308:
+       apbt_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: arch/x86/kernel/apb_timer.c:309:
+                                                          &apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: arch/x86/kernel/apb_timer.c:309:
+                                                          &apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/x86/kernel/apb_timer.c:310:
+       apbt_clockevent.min_delta_ns = clockevent_delta2ns($

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#594: FILE: arch/x86/kernel/apb_timer.c:310:
+       apbt_clockevent.min_delta_ns = clockevent_delta2ns(

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: arch/x86/kernel/apb_timer.c:311:
+                                               APBT_MIN_DELTA_USEC*apbt_freq,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: arch/x86/kernel/apb_timer.c:311:
+                                               APBT_MIN_DELTA_USEC*apbt_freq,$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#595: FILE: arch/x86/kernel/apb_timer.c:311:
+                                               APBT_MIN_DELTA_USEC*apbt_freq,
                                                                   ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: arch/x86/kernel/apb_timer.c:312:
+                                               &apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: arch/x86/kernel/apb_timer.c:312:
+                                               &apbt_clockevent);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: arch/x86/kernel/apb_timer.c:314:
+        * Start apbt with the boot cpu mask and make it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: arch/x86/kernel/apb_timer.c:315:
+        * global after the IO_APIC has been initialized.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: arch/x86/kernel/apb_timer.c:316:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/x86/kernel/apb_timer.c:317:
+       apbt_clockevent.cpumask = cpumask_of(smp_processor_id());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/x86/kernel/apb_timer.c:318:
+       if (disable_apbt_percpu)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#602: FILE: arch/x86/kernel/apb_timer.c:318:
+       if (disable_apbt_percpu)
+               apbt_clockevent.rating = APBT_CLOCKEVENT_RATING - 100;

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: arch/x86/kernel/apb_timer.c:319:
+               apbt_clockevent.rating = APBT_CLOCKEVENT_RATING - 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: arch/x86/kernel/apb_timer.c:319:
+               apbt_clockevent.rating = APBT_CLOCKEVENT_RATING - 100;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/x86/kernel/apb_timer.c:321:
+       clockevents_register_device(&apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/x86/kernel/apb_timer.c:322:
+       global_clock_event = &apbt_clockevent;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/x86/kernel/apb_timer.c:323:
+       printk(KERN_DEBUG "%s clockevent registered as global\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#607: FILE: arch/x86/kernel/apb_timer.c:323:
+       printk(KERN_DEBUG "%s clockevent registered as global\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: arch/x86/kernel/apb_timer.c:324:
+               global_clock_event->name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: arch/x86/kernel/apb_timer.c:324:
+       printk(KERN_DEBUG "%s clockevent registered as global\n",
+               global_clock_event->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: arch/x86/kernel/apb_timer.c:324:
+               global_clock_event->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/x86/kernel/apb_timer.c:325:
+       sfi_free_mtmr(mtmr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: arch/x86/kernel/apb_timer.c:326:
+       return 0;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#612: FILE: arch/x86/kernel/apb_timer.c:328:
+}
+#ifdef CONFIG_SMP

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: arch/x86/kernel/apb_timer.c:332:
+       struct apbt_dev *adev;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: arch/x86/kernel/apb_timer.c:333:
+       struct clock_event_device *aevt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/x86/kernel/apb_timer.c:334:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/x86/kernel/apb_timer.c:336:
+       cpu = smp_processor_id();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: arch/x86/kernel/apb_timer.c:337:
+       if (cpu == boot_cpu_id)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#621: FILE: arch/x86/kernel/apb_timer.c:337:
+       if (cpu == boot_cpu_id)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: arch/x86/kernel/apb_timer.c:338:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/x86/kernel/apb_timer.c:338:
+               return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: arch/x86/kernel/apb_timer.c:341:
+        * We need to calculate the scaled math multiplication factor for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: arch/x86/kernel/apb_timer.c:342:
+        * nanosecond to apbt tick conversion.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: arch/x86/kernel/apb_timer.c:343:
+        * mult = (nsec/cycle)*2^APBT_SHIFT$

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: arch/x86/kernel/apb_timer.c:344:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: arch/x86/kernel/apb_timer.c:345:
+       printk(KERN_INFO "Init per CPU clockevent %d\n", cpu);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#629: FILE: arch/x86/kernel/apb_timer.c:345:
+       printk(KERN_INFO "Init per CPU clockevent %d\n", cpu);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: arch/x86/kernel/apb_timer.c:346:
+       adev = per_cpu(cpu_apbt_dev, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: arch/x86/kernel/apb_timer.c:347:
+       aevt = &adev->evt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: arch/x86/kernel/apb_timer.c:348:
+       aevt->name = adev->name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: arch/x86/kernel/apb_timer.c:349:
+       aevt->shift = APBT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: arch/x86/kernel/apb_timer.c:350:
+       aevt->set_mode  = apb_timer_set_mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: arch/x86/kernel/apb_timer.c:351:
+       aevt->event_handler = apbt_event_handler;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/x86/kernel/apb_timer.c:352:
+       aevt->set_next_event = apb_timer_next_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: arch/x86/kernel/apb_timer.c:353:
+       aevt->mult = div_sc((unsigned long)apbt_freq * USEC_PER_SEC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#638: FILE: arch/x86/kernel/apb_timer.c:354:
+                               NSEC_PER_SEC, APBT_SHIFT);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: arch/x86/kernel/apb_timer.c:354:
+       aevt->mult = div_sc((unsigned long)apbt_freq * USEC_PER_SEC,
+                               NSEC_PER_SEC, APBT_SHIFT);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/x86/kernel/apb_timer.c:354:
+                               NSEC_PER_SEC, APBT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/x86/kernel/apb_timer.c:356:
+       aevt->max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#641: FILE: arch/x86/kernel/apb_timer.c:357:
+                          &apbt_clockevent);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: arch/x86/kernel/apb_timer.c:357:
+       aevt->max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,
+                          &apbt_clockevent);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: arch/x86/kernel/apb_timer.c:357:
+                          &apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/x86/kernel/apb_timer.c:359:
+       aevt->min_delta_ns = clockevent_delta2ns(APBT_MIN_DELTA_USEC*apbt_freq,$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#643: FILE: arch/x86/kernel/apb_timer.c:359:
+       aevt->min_delta_ns = clockevent_delta2ns(APBT_MIN_DELTA_USEC*apbt_freq,
                                                                    ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#644: FILE: arch/x86/kernel/apb_timer.c:360:
+                                               &apbt_clockevent);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: arch/x86/kernel/apb_timer.c:360:
+       aevt->min_delta_ns = clockevent_delta2ns(APBT_MIN_DELTA_USEC*apbt_freq,
+                                               &apbt_clockevent);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/x86/kernel/apb_timer.c:360:
+                                               &apbt_clockevent);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/x86/kernel/apb_timer.c:361:
+       aevt->cpumask = cpumask_of(smp_processor_id());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/x86/kernel/apb_timer.c:362:
+       aevt->irq = adev->irq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/x86/kernel/apb_timer.c:363:
+       aevt->features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_PERIODIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#648: FILE: arch/x86/kernel/apb_timer.c:364:
+       aevt->rating = APBT_CLOCKEVENT_RATING;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: arch/x86/kernel/apb_timer.c:365:
+       printk(KERN_INFO "Registering CPU %d clockevent device %s\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#649: FILE: arch/x86/kernel/apb_timer.c:365:
+       printk(KERN_INFO "Registering CPU %d clockevent device %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#650: FILE: arch/x86/kernel/apb_timer.c:366:
+               cpu, aevt->name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: arch/x86/kernel/apb_timer.c:366:
+       printk(KERN_INFO "Registering CPU %d clockevent device %s\n",
+               cpu, aevt->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: arch/x86/kernel/apb_timer.c:366:
+               cpu, aevt->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/x86/kernel/apb_timer.c:367:
+       clockevents_register_device(aevt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: arch/x86/kernel/apb_timer.c:368:
+       apbt_setup_irq(adev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: arch/x86/kernel/apb_timer.c:369:
+       apbt_enable_int(cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: arch/x86/kernel/apb_timer.c:370:
+       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: arch/x86/kernel/apb_timer.c:375:
+               unsigned long action, void *hcpu)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#659: FILE: arch/x86/kernel/apb_timer.c:375:
+static int apbt_cpuhp_notify(struct notifier_block *n,
+               unsigned long action, void *hcpu)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: arch/x86/kernel/apb_timer.c:375:
+               unsigned long action, void *hcpu)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: arch/x86/kernel/apb_timer.c:377:
+       unsigned long cpu = (unsigned long)hcpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: arch/x86/kernel/apb_timer.c:378:
+       struct apbt_dev *adev = per_cpu(cpu_apbt_dev, cpu);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#663: FILE: arch/x86/kernel/apb_timer.c:379:
+       struct apbt_dev *adev = per_cpu(cpu_apbt_dev, cpu);
+       switch (action & 0xf) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: arch/x86/kernel/apb_timer.c:379:
+       switch (action & 0xf) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/x86/kernel/apb_timer.c:380:
+       case CPU_DEAD:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#665: FILE: arch/x86/kernel/apb_timer.c:381:
+               if (adev) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: arch/x86/kernel/apb_timer.c:381:
+               if (adev) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#665: FILE: arch/x86/kernel/apb_timer.c:381:
+               if (adev) {
+                       apbt_dbg("APBT clockevent for cpu %lu offline\n", cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#666: FILE: arch/x86/kernel/apb_timer.c:382:
+                       apbt_dbg("APBT clockevent for cpu %lu offline\n", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: arch/x86/kernel/apb_timer.c:382:
+                       apbt_dbg("APBT clockevent for cpu %lu offline\n", cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: arch/x86/kernel/apb_timer.c:383:
+                       free_irq(adev->irq, adev);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: arch/x86/kernel/apb_timer.c:383:
+                       free_irq(adev->irq, adev);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: arch/x86/kernel/apb_timer.c:384:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: arch/x86/kernel/apb_timer.c:384:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: arch/x86/kernel/apb_timer.c:385:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: arch/x86/kernel/apb_timer.c:385:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: arch/x86/kernel/apb_timer.c:386:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/x86/kernel/apb_timer.c:387:
+       return NOTIFY_OK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: arch/x86/kernel/apb_timer.c:392:
+       if (disable_apbt_percpu)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#676: FILE: arch/x86/kernel/apb_timer.c:392:
+       if (disable_apbt_percpu)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#677: FILE: arch/x86/kernel/apb_timer.c:393:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/x86/kernel/apb_timer.c:393:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: arch/x86/kernel/apb_timer.c:395:
+       hotcpu_notifier(apbt_cpuhp_notify, -20);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#680: FILE: arch/x86/kernel/apb_timer.c:396:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: arch/x86/kernel/apb_timer.c:402:
+       if (!disable_apbt_percpu)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#686: FILE: arch/x86/kernel/apb_timer.c:402:
+       if (!disable_apbt_percpu)
+               apbt_clockevent_late_register();

ERROR:CODE_INDENT: code indent should use tabs where possible
#687: FILE: arch/x86/kernel/apb_timer.c:403:
+               apbt_clockevent_late_register();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: arch/x86/kernel/apb_timer.c:403:
+               apbt_clockevent_late_register();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: arch/x86/kernel/apb_timer.c:404:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#688: FILE: arch/x86/kernel/apb_timer.c:404:
+       else
+               setup_secondary_clock();

ERROR:CODE_INDENT: code indent should use tabs where possible
#689: FILE: arch/x86/kernel/apb_timer.c:405:
+               setup_secondary_clock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: arch/x86/kernel/apb_timer.c:405:
+               setup_secondary_clock();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#695: FILE: arch/x86/kernel/apb_timer.c:411:
+                         struct clock_event_device *evt)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: arch/x86/kernel/apb_timer.c:411:
+static void apb_timer_set_mode(enum clock_event_mode mode,
+                         struct clock_event_device *evt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: arch/x86/kernel/apb_timer.c:411:
+                         struct clock_event_device *evt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: arch/x86/kernel/apb_timer.c:413:
+       unsigned long ctrl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: arch/x86/kernel/apb_timer.c:414:
+       uint64_t delta;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#698: FILE: arch/x86/kernel/apb_timer.c:414:
+       uint64_t delta;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: arch/x86/kernel/apb_timer.c:415:
+       int timer_num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: arch/x86/kernel/apb_timer.c:417:
+       struct apbt_dev *adev = EVT_TO_APBT_DEV(evt);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#702: FILE: arch/x86/kernel/apb_timer.c:418:
+       struct apbt_dev *adev = EVT_TO_APBT_DEV(evt);
+       timer_num = adev->num;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: arch/x86/kernel/apb_timer.c:418:
+       timer_num = adev->num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: arch/x86/kernel/apb_timer.c:420:
+       timer_num = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: arch/x86/kernel/apb_timer.c:422:
+       if ((timer_num < 0) || (timer_num > sfi_mtimer_num)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#706: FILE: arch/x86/kernel/apb_timer.c:422:
+       if ((timer_num < 0) || (timer_num > sfi_mtimer_num)) {
+               printk(KERN_ERR "apbt: set mode for invalid timer %d\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_num < 0'
#706: FILE: arch/x86/kernel/apb_timer.c:422:
+       if ((timer_num < 0) || (timer_num > sfi_mtimer_num)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'timer_num > sfi_mtimer_num'
#706: FILE: arch/x86/kernel/apb_timer.c:422:
+       if ((timer_num < 0) || (timer_num > sfi_mtimer_num)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#707: FILE: arch/x86/kernel/apb_timer.c:423:
+               printk(KERN_ERR "apbt: set mode for invalid timer %d\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/x86/kernel/apb_timer.c:423:
+               printk(KERN_ERR "apbt: set mode for invalid timer %d\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#707: FILE: arch/x86/kernel/apb_timer.c:423:
+               printk(KERN_ERR "apbt: set mode for invalid timer %d\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: arch/x86/kernel/apb_timer.c:424:
+                               timer_num);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: arch/x86/kernel/apb_timer.c:424:
+               printk(KERN_ERR "apbt: set mode for invalid timer %d\n",
+                               timer_num);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: arch/x86/kernel/apb_timer.c:424:
+                               timer_num);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: arch/x86/kernel/apb_timer.c:425:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: arch/x86/kernel/apb_timer.c:425:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: arch/x86/kernel/apb_timer.c:426:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/x86/kernel/apb_timer.c:427:
+       apbt_dbg("%s CPU %d timer %d mode=%d\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: arch/x86/kernel/apb_timer.c:428:
+               __func__, first_cpu(*evt->cpumask), timer_num, mode);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: arch/x86/kernel/apb_timer.c:428:
+       apbt_dbg("%s CPU %d timer %d mode=%d\n",
+               __func__, first_cpu(*evt->cpumask), timer_num, mode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: arch/x86/kernel/apb_timer.c:428:
+               __func__, first_cpu(*evt->cpumask), timer_num, mode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: arch/x86/kernel/apb_timer.c:429:
+       switch (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/x86/kernel/apb_timer.c:430:
+       case CLOCK_EVT_MODE_PERIODIC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#715: FILE: arch/x86/kernel/apb_timer.c:431:
+               delta = ((uint64_t)(NSEC_PER_SEC/HZ)) * apbt_clockevent.mult;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: arch/x86/kernel/apb_timer.c:431:
+               delta = ((uint64_t)(NSEC_PER_SEC/HZ)) * apbt_clockevent.mult;$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: arch/x86/kernel/apb_timer.c:431:
+               delta = ((uint64_t)(NSEC_PER_SEC/HZ)) * apbt_clockevent.mult;
                                                ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#716: FILE: arch/x86/kernel/apb_timer.c:432:
+               delta >>= apbt_clockevent.shift;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/x86/kernel/apb_timer.c:432:
+               delta >>= apbt_clockevent.shift;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: arch/x86/kernel/apb_timer.c:433:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/x86/kernel/apb_timer.c:433:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#718: FILE: arch/x86/kernel/apb_timer.c:434:
+               ctrl |= APBTMR_CONTROL_MODE_PERIODIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/x86/kernel/apb_timer.c:434:
+               ctrl |= APBTMR_CONTROL_MODE_PERIODIC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#719: FILE: arch/x86/kernel/apb_timer.c:435:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: arch/x86/kernel/apb_timer.c:435:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: arch/x86/kernel/apb_timer.c:436:
+               /* DW APB p. 46, have to disable timer before load counter,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: arch/x86/kernel/apb_timer.c:437:
+                * may cause sync problem.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#722: FILE: arch/x86/kernel/apb_timer.c:438:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#723: FILE: arch/x86/kernel/apb_timer.c:439:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: arch/x86/kernel/apb_timer.c:439:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#724: FILE: arch/x86/kernel/apb_timer.c:440:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: arch/x86/kernel/apb_timer.c:440:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: arch/x86/kernel/apb_timer.c:441:
+               udelay(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: arch/x86/kernel/apb_timer.c:441:
+               udelay(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: arch/x86/kernel/apb_timer.c:442:
+               apbt_dbg("Setting clock period %d for HZ %d\n", (int)delta, HZ);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: arch/x86/kernel/apb_timer.c:442:
+               apbt_dbg("Setting clock period %d for HZ %d\n", (int)delta, HZ);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: arch/x86/kernel/apb_timer.c:443:
+               apbt_writel(timer_num, delta, APBTMR_0_LOAD_COUNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: arch/x86/kernel/apb_timer.c:443:
+               apbt_writel(timer_num, delta, APBTMR_0_LOAD_COUNT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: arch/x86/kernel/apb_timer.c:444:
+               ctrl |= APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: arch/x86/kernel/apb_timer.c:444:
+               ctrl |= APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: arch/x86/kernel/apb_timer.c:445:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/x86/kernel/apb_timer.c:445:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: arch/x86/kernel/apb_timer.c:446:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/x86/kernel/apb_timer.c:446:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: arch/x86/kernel/apb_timer.c:448:
+       case CLOCK_EVT_MODE_ONESHOT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#733: FILE: arch/x86/kernel/apb_timer.c:449:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: arch/x86/kernel/apb_timer.c:449:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#734: FILE: arch/x86/kernel/apb_timer.c:450:
+               /* set free running mode, this mode will let timer reload max$

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: arch/x86/kernel/apb_timer.c:451:
+                * timeout which will give time (3min on 25MHz clock) to rearm$

ERROR:CODE_INDENT: code indent should use tabs where possible
#736: FILE: arch/x86/kernel/apb_timer.c:452:
+                * the next event, therefore emulate the one-shot mode.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#737: FILE: arch/x86/kernel/apb_timer.c:453:
+                */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#738: FILE: arch/x86/kernel/apb_timer.c:454:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: arch/x86/kernel/apb_timer.c:454:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#739: FILE: arch/x86/kernel/apb_timer.c:455:
+               ctrl &= ~APBTMR_CONTROL_MODE_PERIODIC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: arch/x86/kernel/apb_timer.c:455:
+               ctrl &= ~APBTMR_CONTROL_MODE_PERIODIC;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#740: FILE: arch/x86/kernel/apb_timer.c:456:
+               ctrl &= ~APBTMR_CONTROL_INT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: arch/x86/kernel/apb_timer.c:456:
+               ctrl &= ~APBTMR_CONTROL_INT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#741: FILE: arch/x86/kernel/apb_timer.c:457:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#741: FILE: arch/x86/kernel/apb_timer.c:457:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#742: FILE: arch/x86/kernel/apb_timer.c:458:
+               /* write again to set free running mode */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#743: FILE: arch/x86/kernel/apb_timer.c:459:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/x86/kernel/apb_timer.c:459:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#745: FILE: arch/x86/kernel/apb_timer.c:461:
+               /* DW APB p. 46, load counter with all 1s before starting free$

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: arch/x86/kernel/apb_timer.c:462:
+                * running mode.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: arch/x86/kernel/apb_timer.c:463:
+               */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#747: FILE: arch/x86/kernel/apb_timer.c:463:
+                * running mode.
+               */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#748: FILE: arch/x86/kernel/apb_timer.c:464:
+               apbt_writel(timer_num, ~0, APBTMR_0_LOAD_COUNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: arch/x86/kernel/apb_timer.c:464:
+               apbt_writel(timer_num, ~0, APBTMR_0_LOAD_COUNT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#749: FILE: arch/x86/kernel/apb_timer.c:465:
+               ctrl |= APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: arch/x86/kernel/apb_timer.c:465:
+               ctrl |= APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#750: FILE: arch/x86/kernel/apb_timer.c:466:
+               /* Caution: this is slightly different than OS writers guide,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: arch/x86/kernel/apb_timer.c:467:
+                * where new load count is loaded before enalbing timer.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#752: FILE: arch/x86/kernel/apb_timer.c:468:
+               */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#752: FILE: arch/x86/kernel/apb_timer.c:468:
+                * where new load count is loaded before enalbing timer.
+               */

ERROR:CODE_INDENT: code indent should use tabs where possible
#753: FILE: arch/x86/kernel/apb_timer.c:469:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: arch/x86/kernel/apb_timer.c:469:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#754: FILE: arch/x86/kernel/apb_timer.c:470:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: arch/x86/kernel/apb_timer.c:470:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: arch/x86/kernel/apb_timer.c:472:
+       case CLOCK_EVT_MODE_UNUSED:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: arch/x86/kernel/apb_timer.c:473:
+       case CLOCK_EVT_MODE_SHUTDOWN:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#758: FILE: arch/x86/kernel/apb_timer.c:474:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: arch/x86/kernel/apb_timer.c:474:
+               ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#759: FILE: arch/x86/kernel/apb_timer.c:475:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: arch/x86/kernel/apb_timer.c:475:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#760: FILE: arch/x86/kernel/apb_timer.c:476:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: arch/x86/kernel/apb_timer.c:476:
+               apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: arch/x86/kernel/apb_timer.c:477:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: arch/x86/kernel/apb_timer.c:477:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: arch/x86/kernel/apb_timer.c:479:
+       case CLOCK_EVT_MODE_RESUME:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: arch/x86/kernel/apb_timer.c:480:
+               apbt_enable_int(timer_num);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: arch/x86/kernel/apb_timer.c:480:
+               apbt_enable_int(timer_num);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: arch/x86/kernel/apb_timer.c:481:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: arch/x86/kernel/apb_timer.c:481:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: arch/x86/kernel/apb_timer.c:482:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: arch/x86/kernel/apb_timer.c:486:
+                          struct clock_event_device *evt)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: arch/x86/kernel/apb_timer.c:486:
+static int apb_timer_next_event(unsigned long delta,
+                          struct clock_event_device *evt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: arch/x86/kernel/apb_timer.c:486:
+                          struct clock_event_device *evt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: arch/x86/kernel/apb_timer.c:488:
+       unsigned long ctrl, current_cnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: arch/x86/kernel/apb_timer.c:489:
+       unsigned int retry = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: arch/x86/kernel/apb_timer.c:490:
+       int timer_num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: arch/x86/kernel/apb_timer.c:492:
+       struct apbt_dev *adev = EVT_TO_APBT_DEV(evt);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#777: FILE: arch/x86/kernel/apb_timer.c:493:
+       struct apbt_dev *adev = EVT_TO_APBT_DEV(evt);
+       timer_num = adev->num;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: arch/x86/kernel/apb_timer.c:493:
+       timer_num = adev->num;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: arch/x86/kernel/apb_timer.c:495:
+       timer_num = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: arch/x86/kernel/apb_timer.c:499:
+       ctrl = apbt_readl(timer_num, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: arch/x86/kernel/apb_timer.c:500:
+       ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: arch/x86/kernel/apb_timer.c:501:
+       apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#787: FILE: arch/x86/kernel/apb_timer.c:503:
+       apbt_writel(timer_num, delta, APBTMR_0_LOAD_COUNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#788: FILE: arch/x86/kernel/apb_timer.c:504:
+       ctrl |= APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: arch/x86/kernel/apb_timer.c:505:
+       apbt_writel(timer_num, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: arch/x86/kernel/apb_timer.c:506:
+       udelay(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: arch/x86/kernel/apb_timer.c:507:
+       current_cnt = apbt_readl(timer_num, APBTMR_0_CURRENT_VALUE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: arch/x86/kernel/apb_timer.c:508:
+       if (current_cnt < delta)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#792: FILE: arch/x86/kernel/apb_timer.c:508:
+       if (current_cnt < delta)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#793: FILE: arch/x86/kernel/apb_timer.c:509:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: arch/x86/kernel/apb_timer.c:509:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: arch/x86/kernel/apb_timer.c:510:
+       else if (retry++ < 5)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#794: FILE: arch/x86/kernel/apb_timer.c:510:
+       else if (retry++ < 5)
+               goto retry;

ERROR:CODE_INDENT: code indent should use tabs where possible
#795: FILE: arch/x86/kernel/apb_timer.c:511:
+               goto retry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#795: FILE: arch/x86/kernel/apb_timer.c:511:
+               goto retry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: arch/x86/kernel/apb_timer.c:512:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#796: FILE: arch/x86/kernel/apb_timer.c:512:
+       else
+               return -ETIME;

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: arch/x86/kernel/apb_timer.c:513:
+               return -ETIME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: arch/x86/kernel/apb_timer.c:513:
+               return -ETIME;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#805: FILE: arch/x86/kernel/apb_timer.c:521:
+       return (cycle_t)~apbt_readl(phy_cs_timer_id,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#806: FILE: arch/x86/kernel/apb_timer.c:522:
+                               APBTMR_0_CURRENT_VALUE);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: arch/x86/kernel/apb_timer.c:522:
+       return (cycle_t)~apbt_readl(phy_cs_timer_id,
+                               APBTMR_0_CURRENT_VALUE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: arch/x86/kernel/apb_timer.c:522:
+                               APBTMR_0_CURRENT_VALUE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: arch/x86/kernel/apb_timer.c:526:
+       .name           = "apbt",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#811: FILE: arch/x86/kernel/apb_timer.c:527:
+       .rating         = APBT_CLOCKSOURCE_RATING,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#812: FILE: arch/x86/kernel/apb_timer.c:528:
+       .read           = apbt_read_clocksource,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#813: FILE: arch/x86/kernel/apb_timer.c:529:
+       .mask           = APBT_MASK,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#814: FILE: arch/x86/kernel/apb_timer.c:530:
+       .shift          = APBT_SHIFT,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#815: FILE: arch/x86/kernel/apb_timer.c:531:
+       .flags          = CLOCK_SOURCE_IS_CONTINUOUS,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: arch/x86/kernel/apb_timer.c:532:
+       .resume         = apbt_restart_clocksource,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#821: FILE: arch/x86/kernel/apb_timer.c:537:
+       u64 start, now;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#822: FILE: arch/x86/kernel/apb_timer.c:538:
+       cycle_t t1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#825: FILE: arch/x86/kernel/apb_timer.c:541:
+       apbt_start_counter(phy_cs_timer_id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#828: FILE: arch/x86/kernel/apb_timer.c:544:
+       t1 = apbt_read_clocksource(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: arch/x86/kernel/apb_timer.c:545:
+       rdtscll(start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#832: FILE: arch/x86/kernel/apb_timer.c:548:
+        * We don't know the TSC frequency yet, but waiting for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#833: FILE: arch/x86/kernel/apb_timer.c:549:
+        * 200000 TSC cycles is safe:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#834: FILE: arch/x86/kernel/apb_timer.c:550:
+        * 4 GHz == 50us$

ERROR:CODE_INDENT: code indent should use tabs where possible
#835: FILE: arch/x86/kernel/apb_timer.c:551:
+        * 1 GHz == 200us$

ERROR:CODE_INDENT: code indent should use tabs where possible
#836: FILE: arch/x86/kernel/apb_timer.c:552:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: arch/x86/kernel/apb_timer.c:553:
+       do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#837: FILE: arch/x86/kernel/apb_timer.c:553:
+       do {
+               rep_nop();

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: arch/x86/kernel/apb_timer.c:554:
+               rep_nop();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: arch/x86/kernel/apb_timer.c:554:
+               rep_nop();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: arch/x86/kernel/apb_timer.c:555:
+               rdtscll(now);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: arch/x86/kernel/apb_timer.c:555:
+               rdtscll(now);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: arch/x86/kernel/apb_timer.c:556:
+       } while ((now - start) < 200000UL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: arch/x86/kernel/apb_timer.c:558:
+       if (t1 == apbt_read_clocksource(&clocksource_apbt)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#842: FILE: arch/x86/kernel/apb_timer.c:558:
+       if (t1 == apbt_read_clocksource(&clocksource_apbt)) {
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#843: FILE: arch/x86/kernel/apb_timer.c:559:
+               printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: arch/x86/kernel/apb_timer.c:559:
+               printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#843: FILE: arch/x86/kernel/apb_timer.c:559:
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#844: FILE: arch/x86/kernel/apb_timer.c:560:
+                      "APBT counter not counting. APBT disabled\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#844: FILE: arch/x86/kernel/apb_timer.c:560:
+                      "APBT counter not counting. APBT disabled\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: arch/x86/kernel/apb_timer.c:561:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: arch/x86/kernel/apb_timer.c:561:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: arch/x86/kernel/apb_timer.c:562:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#849: FILE: arch/x86/kernel/apb_timer.c:565:
+        * convert that to ns/clock cycle$

ERROR:CODE_INDENT: code indent should use tabs where possible
#850: FILE: arch/x86/kernel/apb_timer.c:566:
+        * mult = (ns/c) * 2^APBT_SHIFT$

ERROR:CODE_INDENT: code indent should use tabs where possible
#851: FILE: arch/x86/kernel/apb_timer.c:567:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: arch/x86/kernel/apb_timer.c:568:
+       clocksource_apbt.mult = div_sc(MSEC_PER_SEC,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: arch/x86/kernel/apb_timer.c:569:
+               (unsigned long) apbt_freq, APBT_SHIFT);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: arch/x86/kernel/apb_timer.c:569:
+       clocksource_apbt.mult = div_sc(MSEC_PER_SEC,
+               (unsigned long) apbt_freq, APBT_SHIFT);

CHECK:SPACING: No space is necessary after a cast
#853: FILE: arch/x86/kernel/apb_timer.c:569:
+               (unsigned long) apbt_freq, APBT_SHIFT);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: arch/x86/kernel/apb_timer.c:569:
+               (unsigned long) apbt_freq, APBT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: arch/x86/kernel/apb_timer.c:570:
+       clocksource_register(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: arch/x86/kernel/apb_timer.c:572:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: arch/x86/kernel/apb_timer.c:582:
+       int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: arch/x86/kernel/apb_timer.c:583:
+       struct sfi_mtimer_entry *p_mtmr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: arch/x86/kernel/apb_timer.c:584:
+       unsigned int percpu_timer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: arch/x86/kernel/apb_timer.c:586:
+       if (apb_timer_block_enabled)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#870: FILE: arch/x86/kernel/apb_timer.c:586:
+       if (apb_timer_block_enabled)
+               return 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#871: FILE: arch/x86/kernel/apb_timer.c:587:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: arch/x86/kernel/apb_timer.c:587:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: arch/x86/kernel/apb_timer.c:588:
+       apbt_set_mapping();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: arch/x86/kernel/apb_timer.c:589:
+       if (apbt_virt_address) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#873: FILE: arch/x86/kernel/apb_timer.c:589:
+       if (apbt_virt_address) {
+               apbt_dbg("Found APBT version 0x%lx\n",\

CHECK:BRACES: braces {} should be used on all arms of this statement
#873: FILE: arch/x86/kernel/apb_timer.c:589:
+       if (apbt_virt_address) {
[...]
+       } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: arch/x86/kernel/apb_timer.c:590:
+               apbt_dbg("Found APBT version 0x%lx\n",\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: arch/x86/kernel/apb_timer.c:590:
+               apbt_dbg("Found APBT version 0x%lx\n",\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#874: FILE: arch/x86/kernel/apb_timer.c:590:
+               apbt_dbg("Found APBT version 0x%lx\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#875: FILE: arch/x86/kernel/apb_timer.c:591:
+                        apbt_readl_reg(APBTMRS_COMP_VERSION));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: arch/x86/kernel/apb_timer.c:591:
+                        apbt_readl_reg(APBTMRS_COMP_VERSION));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: arch/x86/kernel/apb_timer.c:592:
+       } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#876: FILE: arch/x86/kernel/apb_timer.c:592:
+       } else
+               goto out_noapbt;

CHECK:BRACES: Unbalanced braces around else statement
#876: FILE: arch/x86/kernel/apb_timer.c:592:
+       } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: arch/x86/kernel/apb_timer.c:593:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: arch/x86/kernel/apb_timer.c:593:
+               goto out_noapbt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#879: FILE: arch/x86/kernel/apb_timer.c:595:
+        * Read the frequency and check for a sane value, for ESL model$

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: arch/x86/kernel/apb_timer.c:596:
+        * we extend the possible clock range to allow time scaling.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: arch/x86/kernel/apb_timer.c:597:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: arch/x86/kernel/apb_timer.c:599:
+       if (apbt_freq < APBT_MIN_FREQ || apbt_freq > APBT_MAX_FREQ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#883: FILE: arch/x86/kernel/apb_timer.c:599:
+       if (apbt_freq < APBT_MIN_FREQ || apbt_freq > APBT_MAX_FREQ) {
+               apbt_dbg("APBT has invalid freq 0x%llx\n", apbt_freq);

ERROR:CODE_INDENT: code indent should use tabs where possible
#884: FILE: arch/x86/kernel/apb_timer.c:600:
+               apbt_dbg("APBT has invalid freq 0x%llx\n", apbt_freq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: arch/x86/kernel/apb_timer.c:600:
+               apbt_dbg("APBT has invalid freq 0x%llx\n", apbt_freq);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#885: FILE: arch/x86/kernel/apb_timer.c:601:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: arch/x86/kernel/apb_timer.c:601:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: arch/x86/kernel/apb_timer.c:602:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: arch/x86/kernel/apb_timer.c:603:
+       if (apbt_clocksource_register()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#887: FILE: arch/x86/kernel/apb_timer.c:603:
+       if (apbt_clocksource_register()) {
+               apbt_dbg("APBT has failed to register clocksource\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#888: FILE: arch/x86/kernel/apb_timer.c:604:
+               apbt_dbg("APBT has failed to register clocksource\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: arch/x86/kernel/apb_timer.c:604:
+               apbt_dbg("APBT has failed to register clocksource\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: arch/x86/kernel/apb_timer.c:605:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: arch/x86/kernel/apb_timer.c:605:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: arch/x86/kernel/apb_timer.c:606:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: arch/x86/kernel/apb_timer.c:607:
+       if (!apbt_clockevent_register())$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#891: FILE: arch/x86/kernel/apb_timer.c:607:
+       if (!apbt_clockevent_register())
+               apb_timer_block_enabled = 1;

CHECK:BRACES: braces {} should be used on all arms of this statement
#891: FILE: arch/x86/kernel/apb_timer.c:607:
+       if (!apbt_clockevent_register())
[...]
+       else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: arch/x86/kernel/apb_timer.c:608:
+               apb_timer_block_enabled = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: arch/x86/kernel/apb_timer.c:608:
+               apb_timer_block_enabled = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: arch/x86/kernel/apb_timer.c:609:
+       else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#893: FILE: arch/x86/kernel/apb_timer.c:609:
+       else {
+               apbt_dbg("APBT has failed to register clockevent\n");

CHECK:BRACES: Unbalanced braces around else statement
#893: FILE: arch/x86/kernel/apb_timer.c:609:
+       else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: arch/x86/kernel/apb_timer.c:610:
+               apbt_dbg("APBT has failed to register clockevent\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: arch/x86/kernel/apb_timer.c:610:
+               apbt_dbg("APBT has failed to register clockevent\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: arch/x86/kernel/apb_timer.c:611:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: arch/x86/kernel/apb_timer.c:611:
+               goto out_noapbt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: arch/x86/kernel/apb_timer.c:612:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#899: FILE: arch/x86/kernel/apb_timer.c:615:
+       if (disable_apbt_percpu) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#899: FILE: arch/x86/kernel/apb_timer.c:615:
+       if (disable_apbt_percpu) {
+               printk(KERN_INFO "apbt: disabled per cpu timer\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: arch/x86/kernel/apb_timer.c:616:
+               printk(KERN_INFO "apbt: disabled per cpu timer\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: arch/x86/kernel/apb_timer.c:616:
+               printk(KERN_INFO "apbt: disabled per cpu timer\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#900: FILE: arch/x86/kernel/apb_timer.c:616:
+               printk(KERN_INFO "apbt: disabled per cpu timer\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: arch/x86/kernel/apb_timer.c:617:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: arch/x86/kernel/apb_timer.c:617:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: arch/x86/kernel/apb_timer.c:618:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: arch/x86/kernel/apb_timer.c:619:
+       apbt_dbg("%s: %d CPUs online\n", __func__, num_online_cpus());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: arch/x86/kernel/apb_timer.c:620:
+       if (num_possible_cpus() <= 2 &&$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#904: FILE: arch/x86/kernel/apb_timer.c:620:
+       if (num_possible_cpus() <= 2 &&
[...]
+               percpu_timer = 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: arch/x86/kernel/apb_timer.c:621:
+           num_possible_cpus() <= sfi_mtimer_num) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: arch/x86/kernel/apb_timer.c:621:
+           num_possible_cpus() <= sfi_mtimer_num) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: arch/x86/kernel/apb_timer.c:622:
+               percpu_timer = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: arch/x86/kernel/apb_timer.c:622:
+               percpu_timer = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: arch/x86/kernel/apb_timer.c:623:
+               apbt_num_timers_used = num_possible_cpus();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: arch/x86/kernel/apb_timer.c:623:
+               apbt_num_timers_used = num_possible_cpus();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: arch/x86/kernel/apb_timer.c:624:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#908: FILE: arch/x86/kernel/apb_timer.c:624:
+       } else {
+               percpu_timer = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: arch/x86/kernel/apb_timer.c:625:
+               percpu_timer = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: arch/x86/kernel/apb_timer.c:625:
+               percpu_timer = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: arch/x86/kernel/apb_timer.c:626:
+               apbt_num_timers_used = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/x86/kernel/apb_timer.c:626:
+               apbt_num_timers_used = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#911: FILE: arch/x86/kernel/apb_timer.c:627:
+               per_cpu(cpu_apbt_dev, 0) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: arch/x86/kernel/apb_timer.c:627:
+               per_cpu(cpu_apbt_dev, 0) = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#912: FILE: arch/x86/kernel/apb_timer.c:628:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: arch/x86/kernel/apb_timer.c:629:
+       apbt_dbg("%s: %d APB timers used\n", __func__, apbt_num_timers_used);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#916: FILE: arch/x86/kernel/apb_timer.c:632:
+       apbt_devs = kzalloc(sizeof(struct apbt_dev) * apbt_num_timers_used,$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*apbt_devs)...) over kzalloc(sizeof(struct apbt_dev)...)
#916: FILE: arch/x86/kernel/apb_timer.c:632:
+       apbt_devs = kzalloc(sizeof(struct apbt_dev) * apbt_num_timers_used,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#916: FILE: arch/x86/kernel/apb_timer.c:632:
+       apbt_devs = kzalloc(sizeof(struct apbt_dev) * apbt_num_timers_used,
+                               GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#917: FILE: arch/x86/kernel/apb_timer.c:633:
+                               GFP_KERNEL);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#917: FILE: arch/x86/kernel/apb_timer.c:633:
+       apbt_devs = kzalloc(sizeof(struct apbt_dev) * apbt_num_timers_used,
+                               GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#917: FILE: arch/x86/kernel/apb_timer.c:633:
+                               GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#918: FILE: arch/x86/kernel/apb_timer.c:634:
+       if (!apbt_devs) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#918: FILE: arch/x86/kernel/apb_timer.c:634:
+       if (!apbt_devs) {
+               printk(KERN_ERR "Failed to allocate APB timer devices\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#919: FILE: arch/x86/kernel/apb_timer.c:635:
+               printk(KERN_ERR "Failed to allocate APB timer devices\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: arch/x86/kernel/apb_timer.c:635:
+               printk(KERN_ERR "Failed to allocate APB timer devices\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#919: FILE: arch/x86/kernel/apb_timer.c:635:
+               printk(KERN_ERR "Failed to allocate APB timer devices\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#919: FILE: arch/x86/kernel/apb_timer.c:635:
+       if (!apbt_devs) {
+               printk(KERN_ERR "Failed to allocate APB timer devices\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#920: FILE: arch/x86/kernel/apb_timer.c:636:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: arch/x86/kernel/apb_timer.c:636:
+               return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: arch/x86/kernel/apb_timer.c:637:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: arch/x86/kernel/apb_timer.c:638:
+       for (i = 0; i < apbt_num_timers_used; i++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#922: FILE: arch/x86/kernel/apb_timer.c:638:
+       for (i = 0; i < apbt_num_timers_used; i++) {
+               per_cpu(cpu_apbt_dev, i) = &apbt_devs[i];

ERROR:CODE_INDENT: code indent should use tabs where possible
#923: FILE: arch/x86/kernel/apb_timer.c:639:
+               per_cpu(cpu_apbt_dev, i) = &apbt_devs[i];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: arch/x86/kernel/apb_timer.c:639:
+               per_cpu(cpu_apbt_dev, i) = &apbt_devs[i];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#924: FILE: arch/x86/kernel/apb_timer.c:640:
+               apbt_devs[i].num = i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#924: FILE: arch/x86/kernel/apb_timer.c:640:
+               apbt_devs[i].num = i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: arch/x86/kernel/apb_timer.c:641:
+               apbt_devs[i].cpu = i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: arch/x86/kernel/apb_timer.c:641:
+               apbt_devs[i].cpu = i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#926: FILE: arch/x86/kernel/apb_timer.c:642:
+               p_mtmr = sfi_get_mtmr(i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: arch/x86/kernel/apb_timer.c:642:
+               p_mtmr = sfi_get_mtmr(i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#927: FILE: arch/x86/kernel/apb_timer.c:643:
+               if (p_mtmr) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#927: FILE: arch/x86/kernel/apb_timer.c:643:
+               if (p_mtmr) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#927: FILE: arch/x86/kernel/apb_timer.c:643:
+               if (p_mtmr) {
+                       apbt_devs[i].tick = p_mtmr->freq;

CHECK:BRACES: braces {} should be used on all arms of this statement
#927: FILE: arch/x86/kernel/apb_timer.c:643:
+               if (p_mtmr) {
[...]
+               } else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: arch/x86/kernel/apb_timer.c:644:
+                       apbt_devs[i].tick = p_mtmr->freq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: arch/x86/kernel/apb_timer.c:644:
+                       apbt_devs[i].tick = p_mtmr->freq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#929: FILE: arch/x86/kernel/apb_timer.c:645:
+                       apbt_devs[i].irq = p_mtmr->irq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#929: FILE: arch/x86/kernel/apb_timer.c:645:
+                       apbt_devs[i].irq = p_mtmr->irq;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#930: FILE: arch/x86/kernel/apb_timer.c:646:
+               } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: arch/x86/kernel/apb_timer.c:646:
+               } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#930: FILE: arch/x86/kernel/apb_timer.c:646:
+               } else
+                       printk(KERN_ERR "Failed to get timer for cpu %d\n", i);

CHECK:BRACES: Unbalanced braces around else statement
#930: FILE: arch/x86/kernel/apb_timer.c:646:
+               } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: arch/x86/kernel/apb_timer.c:647:
+                       printk(KERN_ERR "Failed to get timer for cpu %d\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: arch/x86/kernel/apb_timer.c:647:
+                       printk(KERN_ERR "Failed to get timer for cpu %d\n", i);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#931: FILE: arch/x86/kernel/apb_timer.c:647:
+                       printk(KERN_ERR "Failed to get timer for cpu %d\n", i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#932: FILE: arch/x86/kernel/apb_timer.c:648:
+               apbt_devs[i].count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: arch/x86/kernel/apb_timer.c:648:
+               apbt_devs[i].count = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: arch/x86/kernel/apb_timer.c:649:
+               sprintf(apbt_devs[i].name, "apbt%d", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: arch/x86/kernel/apb_timer.c:649:
+               sprintf(apbt_devs[i].name, "apbt%d", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: arch/x86/kernel/apb_timer.c:650:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: arch/x86/kernel/apb_timer.c:653:
+       p_mtmr = sfi_get_mtmr(sfi_mtimer_num);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#938: FILE: arch/x86/kernel/apb_timer.c:654:
+       if (p_mtmr)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#938: FILE: arch/x86/kernel/apb_timer.c:654:
+       if (p_mtmr)
+               arch_setup_apbt_irqs(p_mtmr->irq, 0, 0, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#939: FILE: arch/x86/kernel/apb_timer.c:655:
+               arch_setup_apbt_irqs(p_mtmr->irq, 0, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: arch/x86/kernel/apb_timer.c:655:
+               arch_setup_apbt_irqs(p_mtmr->irq, 0, 0, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: arch/x86/kernel/apb_timer.c:656:
+       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#940: FILE: arch/x86/kernel/apb_timer.c:656:
+       else
+               printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: arch/x86/kernel/apb_timer.c:657:
+               printk(KERN_ERR$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: arch/x86/kernel/apb_timer.c:657:
+               printk(KERN_ERR$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#941: FILE: arch/x86/kernel/apb_timer.c:657:
+               printk(KERN_ERR

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: arch/x86/kernel/apb_timer.c:658:
+               "apbt: failed to setup watchdog timer %d IRQ routing\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: arch/x86/kernel/apb_timer.c:658:
+               "apbt: failed to setup watchdog timer %d IRQ routing\n", i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: arch/x86/kernel/apb_timer.c:659:
+       sfi_free_mtmr(p_mtmr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#946: FILE: arch/x86/kernel/apb_timer.c:662:
+       return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: arch/x86/kernel/apb_timer.c:665:
+       printk(KERN_DEBUG "failed to enable APB timer\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#949: FILE: arch/x86/kernel/apb_timer.c:665:
+       printk(KERN_DEBUG "failed to enable APB timer\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: arch/x86/kernel/apb_timer.c:666:
+       apbt_clear_mapping();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: arch/x86/kernel/apb_timer.c:667:
+       apb_timer_block_enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: arch/x86/kernel/apb_timer.c:668:
+       return -ENODEV;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#957: FILE: arch/x86/kernel/apb_timer.c:673:
+       if (is_apbt_capable()) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#957: FILE: arch/x86/kernel/apb_timer.c:673:
+       if (is_apbt_capable()) {
+               unsigned long ctrl =  apbt_readl(n, APBTMR_0_CONTROL);

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: arch/x86/kernel/apb_timer.c:674:
+               unsigned long ctrl =  apbt_readl(n, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: arch/x86/kernel/apb_timer.c:674:
+               unsigned long ctrl =  apbt_readl(n, APBTMR_0_CONTROL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#959: FILE: arch/x86/kernel/apb_timer.c:675:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#959: FILE: arch/x86/kernel/apb_timer.c:675:
+               unsigned long ctrl =  apbt_readl(n, APBTMR_0_CONTROL);
+               ctrl &= ~APBTMR_CONTROL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#959: FILE: arch/x86/kernel/apb_timer.c:675:
+               ctrl &= ~APBTMR_CONTROL_ENABLE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#960: FILE: arch/x86/kernel/apb_timer.c:676:
+               apbt_writel(n, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#960: FILE: arch/x86/kernel/apb_timer.c:676:
+               apbt_writel(n, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#961: FILE: arch/x86/kernel/apb_timer.c:677:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: arch/x86/kernel/apb_timer.c:687:
+       unsigned long ctrl, loadcount;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#972: FILE: arch/x86/kernel/apb_timer.c:688:
+       unsigned long ctrl, loadcount;
+       apbt_set_mapping_early();

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: arch/x86/kernel/apb_timer.c:688:
+       apbt_set_mapping_early();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: arch/x86/kernel/apb_timer.c:689:
+       if (apbt_virt_address) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#973: FILE: arch/x86/kernel/apb_timer.c:689:
+       if (apbt_virt_address) {
+               apbt_dbg("Found APBT version 0x%lx\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#974: FILE: arch/x86/kernel/apb_timer.c:690:
+               apbt_dbg("Found APBT version 0x%lx\n",\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: arch/x86/kernel/apb_timer.c:690:
+               apbt_dbg("Found APBT version 0x%lx\n",\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#974: FILE: arch/x86/kernel/apb_timer.c:690:
+               apbt_dbg("Found APBT version 0x%lx\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#975: FILE: arch/x86/kernel/apb_timer.c:691:
+                        apbt_readl_reg(APBTMRS_COMP_VERSION));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#975: FILE: arch/x86/kernel/apb_timer.c:691:
+                        apbt_readl_reg(APBTMRS_COMP_VERSION));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#976: FILE: arch/x86/kernel/apb_timer.c:692:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: arch/x86/kernel/apb_timer.c:693:
+       loadcount = (unsigned long)apbt_freq * msec / MSEC_PER_SEC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: arch/x86/kernel/apb_timer.c:694:
+       apbt_dbg(KERN_INFO "%s prepare count up %lu for %d msec\n",\$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#978: FILE: arch/x86/kernel/apb_timer.c:694:
+       apbt_dbg(KERN_INFO "%s prepare count up %lu for %d msec\n",\

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#978: FILE: arch/x86/kernel/apb_timer.c:694:
+       apbt_dbg(KERN_INFO "%s prepare count up %lu for %d msec\n",\

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: arch/x86/kernel/apb_timer.c:695:
+                       __func__, loadcount, msec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: arch/x86/kernel/apb_timer.c:695:
+                       __func__, loadcount, msec);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: arch/x86/kernel/apb_timer.c:696:
+       ctrl = apbt_readl(phy_cs_timer_id, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: arch/x86/kernel/apb_timer.c:697:
+       ctrl &= ~APBTMR_CONTROL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: arch/x86/kernel/apb_timer.c:698:
+       apbt_writel(phy_cs_timer_id, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: arch/x86/kernel/apb_timer.c:699:
+       apbt_writel(phy_cs_timer_id, loadcount, APBTMR_0_LOAD_COUNT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: arch/x86/kernel/apb_timer.c:701:
+       ctrl |= (APBTMR_CONTROL_ENABLE | APBTMR_CONTROL_MODE_PERIODIC |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#986: FILE: arch/x86/kernel/apb_timer.c:702:
+               APBTMR_CONTROL_INT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: arch/x86/kernel/apb_timer.c:702:
+               APBTMR_CONTROL_INT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: arch/x86/kernel/apb_timer.c:703:
+       apbt_writel(phy_cs_timer_id, ctrl, APBTMR_0_CONTROL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: arch/x86/kernel/apb_timer.c:708:
+       unsigned long raw_int_status = 0, count = 0, now = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: arch/x86/kernel/apb_timer.c:710:
+        * calibration period.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: arch/x86/kernel/apb_timer.c:711:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: arch/x86/kernel/apb_timer.c:712:
+       while (!(raw_int_status & 0x2)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#996: FILE: arch/x86/kernel/apb_timer.c:712:
+       while (!(raw_int_status & 0x2)) {
+               count++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: arch/x86/kernel/apb_timer.c:713:
+               count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: arch/x86/kernel/apb_timer.c:713:
+               count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#998: FILE: arch/x86/kernel/apb_timer.c:714:
+               raw_int_status = apbt_readl_reg(APBTMRS_RAW_INT_STATUS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: arch/x86/kernel/apb_timer.c:714:
+               raw_int_status = apbt_readl_reg(APBTMRS_RAW_INT_STATUS);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#999: FILE: arch/x86/kernel/apb_timer.c:715:
+               now = apbt_readl(phy_cs_timer_id, APBTMR_0_CURRENT_VALUE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: arch/x86/kernel/apb_timer.c:715:
+               now = apbt_readl(phy_cs_timer_id, APBTMR_0_CURRENT_VALUE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1000: FILE: arch/x86/kernel/apb_timer.c:716:
+               /* can not exceed 30 ms at max freq */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: arch/x86/kernel/apb_timer.c:717:
+               if (count > APBT_MAX_FREQ * 30000) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: arch/x86/kernel/apb_timer.c:717:
+               if (count > APBT_MAX_FREQ * 30000) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1001: FILE: arch/x86/kernel/apb_timer.c:717:
+               if (count > APBT_MAX_FREQ * 30000) {
+                       printk(KERN_ERR "APBT countup err, limit exceeded\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1002: FILE: arch/x86/kernel/apb_timer.c:718:
+                       printk(KERN_ERR "APBT countup err, limit exceeded\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: arch/x86/kernel/apb_timer.c:718:
+                       printk(KERN_ERR "APBT countup err, limit exceeded\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1002: FILE: arch/x86/kernel/apb_timer.c:718:
+                       printk(KERN_ERR "APBT countup err, limit exceeded\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: arch/x86/kernel/apb_timer.c:719:
+                       *count_p = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: arch/x86/kernel/apb_timer.c:719:
+                       *count_p = -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1004: FILE: arch/x86/kernel/apb_timer.c:720:
+                       return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: arch/x86/kernel/apb_timer.c:720:
+                       return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: arch/x86/kernel/apb_timer.c:721:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: arch/x86/kernel/apb_timer.c:721:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: arch/x86/kernel/apb_timer.c:722:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: arch/x86/kernel/apb_timer.c:723:
+       *count_p = count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: arch/x86/kernel/apb_timer.c:724:
+       apbt_dbg(KERN_INFO "raw int status 0x%lx, now 0x%lx, count 0x%lx\n",$

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_INFO
#1008: FILE: arch/x86/kernel/apb_timer.c:724:
+       apbt_dbg(KERN_INFO "raw int status 0x%lx, now 0x%lx, count 0x%lx\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1009: FILE: arch/x86/kernel/apb_timer.c:725:
+               raw_int_status, now, count);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: arch/x86/kernel/apb_timer.c:725:
+       apbt_dbg(KERN_INFO "raw int status 0x%lx, now 0x%lx, count 0x%lx\n",
+               raw_int_status, now, count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1009: FILE: arch/x86/kernel/apb_timer.c:725:
+               raw_int_status, now, count);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1011: FILE: arch/x86/kernel/apb_timer.c:727:
+}
+/* called before apb_timer_enable, use early map */

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - unsigned long apbt_quick_calibrate() should probably be unsigned long apbt_quick_calibrate(void)
#1012: FILE: arch/x86/kernel/apb_timer.c:728:
+unsigned long apbt_quick_calibrate()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: arch/x86/kernel/apb_timer.c:730:
+       int i, scale;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: arch/x86/kernel/apb_timer.c:731:
+       u64 old, new;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: arch/x86/kernel/apb_timer.c:732:
+       cycle_t t1, t2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: arch/x86/kernel/apb_timer.c:733:
+       unsigned long khz = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: arch/x86/kernel/apb_timer.c:734:
+       u32 freq, loop, shift;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: arch/x86/kernel/apb_timer.c:736:
+       freq = sfi_mtimer_array[0].freq;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1022: FILE: arch/x86/kernel/apb_timer.c:738:
+       apbt_set_mapping_early();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1023: FILE: arch/x86/kernel/apb_timer.c:739:
+       apbt_start_counter(phy_cs_timer_id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: arch/x86/kernel/apb_timer.c:742:
+       old = apbt_read_clocksource(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: arch/x86/kernel/apb_timer.c:743:
+       i = 10000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: arch/x86/kernel/apb_timer.c:744:
+       while (--i) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1028: FILE: arch/x86/kernel/apb_timer.c:744:
+       while (--i) {
+               if (old != apbt_read_clocksource(&clocksource_apbt))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1029: FILE: arch/x86/kernel/apb_timer.c:745:
+               if (old != apbt_read_clocksource(&clocksource_apbt))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: arch/x86/kernel/apb_timer.c:745:
+               if (old != apbt_read_clocksource(&clocksource_apbt))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1029: FILE: arch/x86/kernel/apb_timer.c:745:
+               if (old != apbt_read_clocksource(&clocksource_apbt))
+                       break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1030: FILE: arch/x86/kernel/apb_timer.c:746:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: arch/x86/kernel/apb_timer.c:746:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: arch/x86/kernel/apb_timer.c:747:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: arch/x86/kernel/apb_timer.c:748:
+       if (!i)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1032: FILE: arch/x86/kernel/apb_timer.c:748:
+       if (!i)
+               goto failed;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1033: FILE: arch/x86/kernel/apb_timer.c:749:
+               goto failed;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1033: FILE: arch/x86/kernel/apb_timer.c:749:
+               goto failed;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: arch/x86/kernel/apb_timer.c:752:
+       loop = (freq / 1000) << 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: arch/x86/kernel/apb_timer.c:755:
+       apbt_start_counter(phy_cs_timer_id);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: arch/x86/kernel/apb_timer.c:756:
+       t1 = __native_read_tsc();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1042: FILE: arch/x86/kernel/apb_timer.c:758:
+       old = apbt_read_clocksource(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: arch/x86/kernel/apb_timer.c:759:
+       old += loop;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: arch/x86/kernel/apb_timer.c:760:
+       do {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1044: FILE: arch/x86/kernel/apb_timer.c:760:
+       do {
+               new = apbt_read_clocksource(&clocksource_apbt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1045: FILE: arch/x86/kernel/apb_timer.c:761:
+               new = apbt_read_clocksource(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: arch/x86/kernel/apb_timer.c:761:
+               new = apbt_read_clocksource(&clocksource_apbt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: arch/x86/kernel/apb_timer.c:762:
+       } while (new < old);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: arch/x86/kernel/apb_timer.c:764:
+       t2 = __native_read_tsc();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1050: FILE: arch/x86/kernel/apb_timer.c:766:
+       shift = 5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1051: FILE: arch/x86/kernel/apb_timer.c:767:
+       if (unlikely(loop >> shift == 0)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1051: FILE: arch/x86/kernel/apb_timer.c:767:
+       if (unlikely(loop >> shift == 0)) {
+               printk(KERN_INFO

ERROR:CODE_INDENT: code indent should use tabs where possible
#1052: FILE: arch/x86/kernel/apb_timer.c:768:
+               printk(KERN_INFO$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1052: FILE: arch/x86/kernel/apb_timer.c:768:
+               printk(KERN_INFO$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1052: FILE: arch/x86/kernel/apb_timer.c:768:
+               printk(KERN_INFO

ERROR:CODE_INDENT: code indent should use tabs where possible
#1053: FILE: arch/x86/kernel/apb_timer.c:769:
+               "APBT TSC calibration failed, not enough resolution\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: arch/x86/kernel/apb_timer.c:769:
+               "APBT TSC calibration failed, not enough resolution\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1054: FILE: arch/x86/kernel/apb_timer.c:770:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: arch/x86/kernel/apb_timer.c:770:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: arch/x86/kernel/apb_timer.c:771:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: arch/x86/kernel/apb_timer.c:772:
+       scale = (int)div_u64((t2 - t1), loop >> shift);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: arch/x86/kernel/apb_timer.c:773:
+       khz = (scale * (freq / 1000)) >> shift;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: arch/x86/kernel/apb_timer.c:774:
+       printk(KERN_INFO "TSC freq calculated by APB timer is %lu khz\n", khz);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1058: FILE: arch/x86/kernel/apb_timer.c:774:
+       printk(KERN_INFO "TSC freq calculated by APB timer is %lu khz\n", khz);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1059: FILE: arch/x86/kernel/apb_timer.c:775:
+       return khz;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1061: FILE: arch/x86/kernel/apb_timer.c:777:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: arch/x86/kernel/time_32.c:83:
+       if (timer_ack && platform_has(X86_PLATFORM_FEATURE_8259)) {$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1092: FILE: arch/x86/kernel/time_32.c:124:
+}
+#ifndef CONFIG_PARAVIRT

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: arch/x86/kernel/time_32.c:127:
+       if (platform_has(X86_PLATFORM_FEATURE_HPET))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1095: FILE: arch/x86/kernel/time_32.c:127:
+       if (platform_has(X86_PLATFORM_FEATURE_HPET))
+               hpet_time_init();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1095: FILE: arch/x86/kernel/time_32.c:127:
+       if (platform_has(X86_PLATFORM_FEATURE_HPET))
[...]
+       else if (platform_has(X86_PLATFORM_FEATURE_APBT)) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#1096: FILE: arch/x86/kernel/time_32.c:128:
+               hpet_time_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: arch/x86/kernel/time_32.c:128:
+               hpet_time_init();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: arch/x86/kernel/time_32.c:129:
+       else if (platform_has(X86_PLATFORM_FEATURE_APBT)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1097: FILE: arch/x86/kernel/time_32.c:129:
+       else if (platform_has(X86_PLATFORM_FEATURE_APBT)) {
+               apbt_enable();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1098: FILE: arch/x86/kernel/time_32.c:130:
+               apbt_enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: arch/x86/kernel/time_32.c:130:
+               apbt_enable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: arch/x86/kernel/time_32.c:131:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1099: FILE: arch/x86/kernel/time_32.c:131:
+       } else {
[...]
+               BUG();

ERROR:CODE_INDENT: code indent should use tabs where possible
#1100: FILE: arch/x86/kernel/time_32.c:132:
+               /* should not get here, at least one timer should be found */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1101: FILE: arch/x86/kernel/time_32.c:133:
+               BUG();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: arch/x86/kernel/time_32.c:133:
+               BUG();$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1101: FILE: arch/x86/kernel/time_32.c:133:
+               BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: arch/x86/kernel/time_32.c:134:
+       }$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1105: FILE: arch/x86/kernel/time_32.c:137:
 }
+static inline void (*choose_time_init(void))(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: arch/x86/kernel/time_32.c:139:
+       return native_time_init;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1133: FILE: arch/x86/kernel/tsc.c:401:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1133: FILE: arch/x86/kernel/tsc.c:401:
+       if (platform_has(X86_PLATFORM_FEATURE_APBT)) {
+               local_irq_save(flags);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1134: FILE: arch/x86/kernel/tsc.c:402:
+               local_irq_save(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1134: FILE: arch/x86/kernel/tsc.c:402:
+               local_irq_save(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1135: FILE: arch/x86/kernel/tsc.c:403:
+               fast_calibrate = apbt_quick_calibrate();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1135: FILE: arch/x86/kernel/tsc.c:403:
+               fast_calibrate = apbt_quick_calibrate();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1136: FILE: arch/x86/kernel/tsc.c:404:
+               local_irq_restore(flags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1136: FILE: arch/x86/kernel/tsc.c:404:
+               local_irq_restore(flags);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1137: FILE: arch/x86/kernel/tsc.c:405:
+               if (fast_calibrate)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1137: FILE: arch/x86/kernel/tsc.c:405:
+               if (fast_calibrate)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#1137: FILE: arch/x86/kernel/tsc.c:405:
+               if (fast_calibrate)
+                       return fast_calibrate;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1138: FILE: arch/x86/kernel/tsc.c:406:
+                       return fast_calibrate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1138: FILE: arch/x86/kernel/tsc.c:406:
+                       return fast_calibrate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1139: FILE: arch/x86/kernel/tsc.c:407:
+       }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1144: FILE: arch/x86/kernel/tsc.c:666:
        if ((val == CPUFREQ_PRECHANGE  && freq->old < freq->new) ||
[...]
+               *lpj = cpufreq_scale(loops_per_jiffy_ref, ref_freq, freq->new);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: arch/x86/kernel/tsc.c:669:
+               *lpj = cpufreq_scale(loops_per_jiffy_ref, ref_freq, freq->new);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1148: FILE: arch/x86/kernel/tsc.c:669:
+               *lpj = cpufreq_scale(loops_per_jiffy_ref, ref_freq, freq->new);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 211 errors, 573 warnings, 67 checks, 1029 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000104376.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
