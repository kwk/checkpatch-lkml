WARNING:TYPO_SPELLING: 'dosn't' may be misspelled - perhaps 'doesn't'?
#67: 
dosn't exist) and the pathname contains '^' it *redirects* the lookup to 
^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'compresion' may be misspelled - perhaps 'compression'?
#74: 
extraction/compresion/semi-mounting/semi-umounting/whatsoever...
           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'againts' may be misspelled - perhaps 'against'?
#101: 
The patch is againts 2.6.20.1 and works with 2.6.21.1 too.
             ^^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#102: 
There are two minor failed hunks for 2.6.22-rc2 which I hadn't time to correct.

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: fs/open.c:419:
+	int res;
+	read_lock(&current->fs->lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: fs/open.c:426:
+void set_fs_shdwpwd(struct fs_struct *fs,
+			struct vfsmount *mnt, struct dentry *dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: fs/open.c:431:
+	BUG_ON(dentry != NULL && mnt == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry"
#194: FILE: fs/open.c:431:
+	BUG_ON(dentry != NULL && mnt == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mnt"
#194: FILE: fs/open.c:431:
+	BUG_ON(dentry != NULL && mnt == NULL);

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#218: FILE: fs/open.c:454:
+	int error = PTR_ERR(tmp);;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#226: FILE: fs/open.c:460:
+			| LOOKUP_CHDIR, &nd);
 			                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#238: FILE: fs/open.c:471:
+	if (!(nd.flags & LOOKUP_INSHDW)) {
 	      ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#238: FILE: fs/open.c:471:
+	if (!(nd.flags & LOOKUP_INSHDW)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: fs/open.c:473:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/open.c:475:
+		set_fs_shdwpwd(current->fs, nd.mnt, nd.dentry);
 		                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/open.c:475:
+		set_fs_shdwpwd(current->fs, nd.mnt, nd.dentry);
 		                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#246: FILE: fs/open.c:479:
+	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#246: FILE: fs/open.c:479:
+	set_fs_pwd(current->fs, nd.mnt, nd.dentry);
 	                                ^^

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: fs/open.c:522:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#287: FILE: fs/namei.c:1:
+ /*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#303: FILE: fs/namei.c:518:
+static inline int use_shadow(struct fs_struct *fs, struct nameidata *nd)
                                                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#309: FILE: fs/namei.c:524:
+static inline struct dentry *fs_root(struct fs_struct *fs, struct nameidata *nd)
                                                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#312: FILE: fs/namei.c:527:
+	return (use_shadow(fs, nd)) ? fs->shdwroot : fs->root;
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#316: FILE: fs/namei.c:531:
+			struct nameidata *nd)
 			                  ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/namei.c:531:
+static inline struct vfsmount *fs_rootmnt(struct fs_struct *fs,
+			struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: fs/namei.c:534:
+	return (use_shadow(fs, nd)) ? fs->shdwrootmnt : fs->rootmnt;
 	                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#331: FILE: fs/namei.c:554:
+	nd->mnt = mntget(fs_rootmnt(fs, nd));
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#332: FILE: fs/namei.c:555:
+	nd->dentry = dget(fs_root(fs, nd));
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#344: FILE: fs/namei.c:753:
+		if (nd->dentry == fs_root(fs, nd) &&
 		                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#345: FILE: fs/namei.c:754:
+		    nd->mnt == fs_rootmnt(fs, nd)) {
 		                              ^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c == nd->find_char'
#353: FILE: fs/namei.c:864:
+			if (unlikely((nd->flags & LOOKUP_FINDCHAR) &&
+					(c == nd->find_char))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: fs/namei.c:865:
+			if (unlikely((nd->flags & LOOKUP_FINDCHAR) &&
+					(c == nd->find_char))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: fs/namei.c:1129:
+static int fastcall path_lookup_norm(int dfd, const char *name,
 				unsigned int flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#390: FILE: fs/namei.c:1202:
+static void set_fileshdw(struct file *filp, struct vfsmount *mnt,
                                       ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: fs/namei.c:1203:
+static void set_fileshdw(struct file *filp, struct vfsmount *mnt,
+			struct dentry *dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: fs/namei.c:1208:
+	BUG_ON(dentry != NULL && mnt == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry"
#396: FILE: fs/namei.c:1208:
+	BUG_ON(dentry != NULL && mnt == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mnt"
#396: FILE: fs/namei.c:1208:
+	BUG_ON(dentry != NULL && mnt == NULL);

WARNING:TYPO_SPELLING: 'permisson' may be misspelled - perhaps 'permission'?
#417: FILE: fs/namei.c:1229:
+ * Also check whether it's a directory and we have permisson.
                                                    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#420: FILE: fs/namei.c:1232:
+static int validate_shdwfile(struct file *filp)
                                           ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#422: FILE: fs/namei.c:1234:
+	struct nameidata nd;
 	                 ^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#426: FILE: fs/namei.c:1238:
+	buf = (char*)__get_free_page(GFP_KERNEL);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#436: FILE: fs/namei.c:1248:
+	BUG_ON(*name != '/');

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#438: FILE: fs/namei.c:1250:
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 				                                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: fs/namei.c:1250:
+	res = path_lookup_shdw(AT_FDCWD, name,
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#438: FILE: fs/namei.c:1250:
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 				             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#442: FILE: fs/namei.c:1254:
+	res = permission(nd.dentry->d_inode, MAY_EXEC, NULL);
 	                 ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#447: FILE: fs/namei.c:1259:
+	set_fileshdw(filp, nd.mnt, nd.dentry);
 	             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#447: FILE: fs/namei.c:1259:
+	set_fileshdw(filp, nd.mnt, nd.dentry);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#447: FILE: fs/namei.c:1259:
+	set_fileshdw(filp, nd.mnt, nd.dentry);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#448: FILE: fs/namei.c:1260:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#455: FILE: fs/namei.c:1267:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#460: FILE: fs/namei.c:1272:
+	set_fileshdw(filp, ERR_PTR(-EINVAL), NULL);
 	             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: fs/namei.c:1281:
+int get_file_shdwdir(struct file *file, struct dentry **dentry,
+		    struct vfsmount **mnt)

CHECK:BRACES: Unbalanced braces around else statement
#482: FILE: fs/namei.c:1294:
+		} else

WARNING:TYPO_SPELLING: 'permisson' may be misspelled - perhaps 'permission'?
#499: FILE: fs/namei.c:1311:
+ * Also check whether it's a directory and we have permisson.
                                                    ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#506: FILE: fs/namei.c:1318:
+	struct nameidata nd;
 	                 ^^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#511: FILE: fs/namei.c:1323:
+	buf = (char*)__get_free_page(GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: fs/namei.c:1332:
+	BUG_ON(*name != '/');

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#523: FILE: fs/namei.c:1335:
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 				                                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#523: FILE: fs/namei.c:1335:
+	res = path_lookup_shdw(AT_FDCWD, name,
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#523: FILE: fs/namei.c:1335:
+				LOOKUP_FOLLOW|LOOKUP_DIRECTORY, &nd);
 				             ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#527: FILE: fs/namei.c:1339:
+	res = permission(nd.dentry->d_inode, MAY_EXEC, NULL);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#532: FILE: fs/namei.c:1344:
+	set_fs_shdwpwd(current->fs, nd.mnt, nd.dentry);
 	                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#532: FILE: fs/namei.c:1344:
+	set_fs_shdwpwd(current->fs, nd.mnt, nd.dentry);
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#533: FILE: fs/namei.c:1345:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#542: FILE: fs/namei.c:1354:
+	path_release(&nd);
 	              ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#567: FILE: fs/namei.c:1379:
+			 * in validate_shdwpwd()) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#589: FILE: fs/namei.c:1401:
+			unsigned int flags, struct nameidata *nd)
 			                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: fs/namei.c:1401:
+int fastcall path_lookup_shdw(int dfd, const char *name,
+			unsigned int flags, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#633: FILE: fs/namei.c:1445:
+	retval = link_path_walk(name, nd);
 	                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#636: FILE: fs/namei.c:1448:
+		if (unlikely(!audit_dummy_context() && nd && nd->dentry &&
 		                                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: fs/namei.c:1449:
+		if (unlikely(!audit_dummy_context() && nd && nd->dentry &&
+				nd->dentry->d_inode))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#653: FILE: fs/namei.c:1465:
+ * Returns 0 and nd will be valid on success; Retuns error, otherwise.
                  ^^

WARNING:TYPO_SPELLING: 'Retuns' may be misspelled - perhaps 'Returns'?
#653: FILE: fs/namei.c:1465:
+ * Returns 0 and nd will be valid on success; Retuns error, otherwise.
                                               ^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#656: FILE: fs/namei.c:1468:
+				unsigned int flags, struct nameidata *nd)
 				                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: fs/namei.c:1468:
+static int fastcall do_path_lookup(int dfd, const char *name,
+				unsigned int flags, struct nameidata *nd)

CHECK:BRACES: Unbalanced braces around else statement
#669: FILE: fs/namei.c:1481:
+		} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#675: FILE: fs/namei.c:1487:
+	retval = path_lookup_norm(dfd, name, flags, nd);
 	                                            ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#684: FILE: fs/namei.c:1496:
+	if (unlikely(retval && !(nd->flags & (LOOKUP_NOSHDW|LOOKUP_INSHDW))
 	                                                   ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#685: FILE: fs/namei.c:1497:
+	if (unlikely(retval && !(nd->flags & (LOOKUP_NOSHDW|LOOKUP_INSHDW))
+	    && !((nd->flags & LOOKUP_FINDCHAR)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#686: FILE: fs/namei.c:1498:
+	    && !((nd->flags & LOOKUP_FINDCHAR)
+	    && !(nd->flags & LOOKUP_CHARFOUND))))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#687: FILE: fs/namei.c:1499:
+		retval = path_lookup_shdw(dfd, name, flags, nd);
 		                                            ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: fs/namei.c:1531:
+	else if (!(nd->flags & LOOKUP_NOSHDW) &&
+			S_ISDIR(nd->dentry->d_inode->i_mode)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#716: FILE: fs/namei.c:3095:
 
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#731: FILE: fs/namei.c:3110:
+		if (!tsk)
[...]
+		else if (!ptrace_may_attach(tsk)) {
[...]

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#769: FILE: fs/namei.c:3148:
+		ret = put_user((char)ret, (char __user*)data);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#787: FILE: fs/namei.c:3166:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#789: FILE: fs/namei.c:3168:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                                               ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#789: FILE: fs/namei.c:3168:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#789: FILE: fs/namei.c:3168:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#793: FILE: fs/namei.c:3172:
+	error = vfs_permission(&nd, MAY_EXEC);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#797: FILE: fs/namei.c:3176:
+	set_fs_shdwpwd(fs, nd.mnt, nd.dentry);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#797: FILE: fs/namei.c:3176:
+	set_fs_shdwpwd(fs, nd.mnt, nd.dentry);
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#800: FILE: fs/namei.c:3179:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#814: FILE: fs/namei.c:3193:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#819: FILE: fs/namei.c:3198:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                                               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/namei.c:3198:
+		error = __user_walk(pathname,
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#819: FILE: fs/namei.c:3198:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#819: FILE: fs/namei.c:3198:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#823: FILE: fs/namei.c:3202:
+		error = vfs_permission(&nd, MAY_EXEC);
 		                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#828: FILE: fs/namei.c:3207:
+		nd.dentry = NULL;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#829: FILE: fs/namei.c:3208:
+		nd.mnt = NULL;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#835: FILE: fs/namei.c:3214:
+	fs->shdwroot = dget(nd.dentry);
 	                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#836: FILE: fs/namei.c:3215:
+	fs->shdwrootmnt = mntget(nd.mnt);
 	                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#837: FILE: fs/namei.c:3216:
+	if (!nd.dentry)
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#846: FILE: fs/namei.c:3225:
+	path_release(&nd);
 	              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#859: FILE: fs/namei.c:3238:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#860: FILE: fs/namei.c:3239:
+	struct file *filp = __fget(tsk->files, fd);
 	             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#863: FILE: fs/namei.c:3242:
+	if (!filp)
 	     ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#868: FILE: fs/namei.c:3247:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                                               ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#868: FILE: fs/namei.c:3247:
+		error = __user_walk(pathname,
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#868: FILE: fs/namei.c:3247:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#868: FILE: fs/namei.c:3247:
+			LOOKUP_FOLLOW|LOOKUP_DIRECTORY|LOOKUP_NOSHDW, &nd);
 			                              ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#872: FILE: fs/namei.c:3251:
+		error = vfs_permission(&nd, MAY_EXEC);
 		                        ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#874: FILE: fs/namei.c:3253:
+			set_fileshdw(filp, nd.mnt, nd.dentry);
 			             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#874: FILE: fs/namei.c:3253:
+			set_fileshdw(filp, nd.mnt, nd.dentry);
 			                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#874: FILE: fs/namei.c:3253:
+			set_fileshdw(filp, nd.mnt, nd.dentry);
 			                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#875: FILE: fs/namei.c:3254:
+			path_release(&nd);
 			              ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#879: FILE: fs/namei.c:3258:
+		set_fileshdw(filp, NULL, NULL);
 		             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#882: FILE: fs/namei.c:3261:
+	fput(filp);
 	     ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#904: FILE: fs/namei.c:3283:
+		if (path)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#906: FILE: fs/namei.c:3285:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1016: FILE: fs/exec.c:859:
+	else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1170: FILE: include/linux/fs.h:753:
+	/* | f_shdw   | f_shdwmnt   | result
+	   +----------+-------------+------------

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1174: FILE: include/linux/fs.h:757:
+	   | !NULL    | !NULL       | valid */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1190: FILE: include/linux/fs_struct.h:17:
+	/* | shdwroot | shdwrootmnt | result
+	   +----------+-------------+------------

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1199: FILE: include/linux/fs_struct.h:26:
+	   | !NULL    | !NULL       | valid */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1210: FILE: include/linux/fs_struct.h:37:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1218: FILE: include/linux/fs_struct.h:50:
+extern void set_fs_shdwpwd(struct fs_struct *fs,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1241: FILE: include/linux/namei.h:62:
+ * set LOOKUP_CHARFOUND in nameidata.flags if found */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1242: FILE: include/linux/namei.h:63:
+#define LOOKUP_FINDCHAR		(1<<16)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1242: FILE: include/linux/namei.h:63:
+#define LOOKUP_FINDCHAR		(1<<16)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1243: FILE: include/linux/namei.h:64:
+#define LOOKUP_CHARFOUND	(1<<17)
                         	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1243: FILE: include/linux/namei.h:64:
+#define LOOKUP_CHARFOUND	(1<<17)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1245: FILE: include/linux/namei.h:66:
+#define LOOKUP_INSHDW		(1<<18)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1245: FILE: include/linux/namei.h:66:
+#define LOOKUP_INSHDW		(1<<18)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1255: FILE: include/linux/namei.h:83:
+extern int FASTCALL(path_lookup_shdw(int dfd, const char *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1256: FILE: include/linux/namei.h:84:
+			unsigned int flags, struct nameidata *nd));
 			                                      ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1256: FILE: include/linux/namei.h:84:
+extern int FASTCALL(path_lookup_shdw(int dfd, const char *name,
+			unsigned int flags, struct nameidata *nd));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1265: FILE: include/linux/namei.h:91:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1265: FILE: include/linux/namei.h:91:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#1265: FILE: include/linux/namei.h:91:
+extern int __user_path_lookup_open(const char __user *, unsigned lookup_flags,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1266: FILE: include/linux/namei.h:92:
+				   struct nameidata *nd, int open_flags);
 				                     ^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1267: FILE: include/linux/namei.h:93:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1267: FILE: include/linux/namei.h:93:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#1267: FILE: include/linux/namei.h:93:
+extern int path_lookup_open(int dfd, const char *name, unsigned lookup_flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1276: FILE: include/linux/namei.h:108:
+extern int get_file_shdwdir(struct file *file, struct dentry **dentry,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1288: FILE: include/linux/file.h:71:
+extern struct file * FASTCALL(__fget(struct files_struct *files,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1288: FILE: include/linux/file.h:71:
+extern struct file * FASTCALL(__fget(struct files_struct *files,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1289: FILE: include/linux/file.h:72:
+extern struct file * FASTCALL(__fget(struct files_struct *files,
+				unsigned int fd));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 92 warnings, 55 checks, 1173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427685.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
