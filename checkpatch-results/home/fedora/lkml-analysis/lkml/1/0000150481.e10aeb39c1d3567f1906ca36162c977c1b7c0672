WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#25: 
This patch adds support for MMC/SD controller driver for DaVinci family SoC.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: arch/arm/mach-davinci/include/mach/mmc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#80: FILE: arch/arm/mach-davinci/include/mach/mmc.h:23:
+};
+void davinci_setup_mmc(int module, struct davinci_mmc_config *config);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#91: FILE: drivers/mmc/host/Kconfig:174:
+config MMC_DAVINCI
+        tristate "TI DAVINCI Multimedia Card Interface support"
+        depends on ARCH_DAVINCI
+        help
+          This selects the TI DAVINCI Multimedia card Interface.
+          If you have an DAVINCI board with a Multimedia Card slot,
+          say Y or M here.  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: drivers/mmc/host/davinci_mmc.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#138: FILE: drivers/mmc/host/davinci_mmc.c:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#139: FILE: drivers/mmc/host/davinci_mmc.c:20:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:BIT_MACRO: Prefer using the BIT macro
#191: FILE: drivers/mmc/host/davinci_mmc.c:72:
+#define MMCCTL_DATRST         (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#192: FILE: drivers/mmc/host/davinci_mmc.c:73:
+#define MMCCTL_CMDRST         (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#193: FILE: drivers/mmc/host/davinci_mmc.c:74:
+#define MMCCTL_WIDTH_4_BIT    (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#195: FILE: drivers/mmc/host/davinci_mmc.c:76:
+#define MMCCTL_DATEG_RISING   (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#199: FILE: drivers/mmc/host/davinci_mmc.c:80:
+#define MMCCTL_PERMDR_BE      (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#201: FILE: drivers/mmc/host/davinci_mmc.c:82:
+#define MMCCTL_PERMDX_BE      (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#204: FILE: drivers/mmc/host/davinci_mmc.c:85:
+#define MMCCLK_CLKEN          (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#222: FILE: drivers/mmc/host/davinci_mmc.c:103:
+#define MMCST1_BUSY           (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#226: FILE: drivers/mmc/host/davinci_mmc.c:107:
+#define MMCCMD_PPLEN          (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#227: FILE: drivers/mmc/host/davinci_mmc.c:108:
+#define MMCCMD_BSYEXP         (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#230: FILE: drivers/mmc/host/davinci_mmc.c:111:
+#define MMCCMD_RSPFMT_R1456   (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#233: FILE: drivers/mmc/host/davinci_mmc.c:114:
+#define MMCCMD_DTRW           (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#234: FILE: drivers/mmc/host/davinci_mmc.c:115:
+#define MMCCMD_STRMTP         (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#235: FILE: drivers/mmc/host/davinci_mmc.c:116:
+#define MMCCMD_WDATX          (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#236: FILE: drivers/mmc/host/davinci_mmc.c:117:
+#define MMCCMD_INITCK         (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#237: FILE: drivers/mmc/host/davinci_mmc.c:118:
+#define MMCCMD_DCLR           (1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#238: FILE: drivers/mmc/host/davinci_mmc.c:119:
+#define MMCCMD_DMATRIG        (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#241: FILE: drivers/mmc/host/davinci_mmc.c:122:
+#define MMCFIFOCTL_FIFORST    (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#242: FILE: drivers/mmc/host/davinci_mmc.c:123:
+#define MMCFIFOCTL_FIFODIR_WR (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#244: FILE: drivers/mmc/host/davinci_mmc.c:125:
+#define MMCFIFOCTL_FIFOLEV    (1 << 2) /* 0 = 128 bits, 1 = 256 bits */

CHECK:BIT_MACRO: Prefer using the BIT macro
#246: FILE: drivers/mmc/host/davinci_mmc.c:127:
+#define MMCFIFOCTL_ACCWD_3    (1 << 3) /* access width of 3 bytes    */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: drivers/mmc/host/davinci_mmc.c:131:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#266: FILE: drivers/mmc/host/davinci_mmc.c:147:
+static unsigned rw_threshold = 32;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#267: FILE: drivers/mmc/host/davinci_mmc.c:148:
+module_param(rw_threshold, uint, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: drivers/mmc/host/davinci_mmc.c:150:
+MODULE_PARM_DESC(rw_threshold,
+		"Read/Write threshold, can be 16/32. Default = 32");

WARNING:MISPLACED_INIT: __initdata should be placed after use_dma
#271: FILE: drivers/mmc/host/davinci_mmc.c:152:
+static unsigned __initdata use_dma = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#310: FILE: drivers/mmc/host/davinci_mmc.c:191:
+	unsigned		n_link;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#318: FILE: drivers/mmc/host/davinci_mmc.c:199:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: drivers/mmc/host/davinci_mmc.c:213:
+static void davinci_fifo_data_trans(struct mmc_davinci_host *host,
+					unsigned int n)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: drivers/mmc/host/davinci_mmc.c:220:
+		BUG_ON(host->sg_idx == host->sg_len);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/mmc/host/davinci_mmc.c:257:
+static void mmc_davinci_start_command(struct mmc_davinci_host *host,
+		struct mmc_command *cmd)

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#410: FILE: drivers/mmc/host/davinci_mmc.c:291:
+		/* FALLTHROUGH */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->data_dir == DAVINCI_MMC_DATADIR_WRITE'
#474: FILE: drivers/mmc/host/davinci_mmc.c:355:
+	if (!host->do_dma && (host->data_dir == DAVINCI_MMC_DATADIR_WRITE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#502: FILE: drivers/mmc/host/davinci_mmc.c:383:
+static void mmc_davinci_dma_cb(unsigned channel, u16 ch_status, void *data)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#504: FILE: drivers/mmc/host/davinci_mmc.c:385:
+	if (DMA_COMPLETE != ch_status) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#512: FILE: drivers/mmc/host/davinci_mmc.c:393:
+		dev_warn(mmc_dev(host->mmc), "DMA %s error\n",
+			(host->data->flags & MMC_DATA_WRITE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/mmc/host/davinci_mmc.c:402:
+static void __init mmc_davinci_dma_setup(struct mmc_davinci_host *host,
+		bool tx, struct edmacc_param *template)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#523: FILE: drivers/mmc/host/davinci_mmc.c:404:
+	unsigned	sync_dev;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/mmc/host/davinci_mmc.c:465:
+static void mmc_davinci_send_dma_request(struct mmc_davinci_host *host,
+		struct mmc_data *data)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#588: FILE: drivers/mmc/host/davinci_mmc.c:469:
+	unsigned		link;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#590: FILE: drivers/mmc/host/davinci_mmc.c:471:
+	unsigned		sg_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#591: FILE: drivers/mmc/host/davinci_mmc.c:472:
+	unsigned		bytes_left = host->bytes_left;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#592: FILE: drivers/mmc/host/davinci_mmc.c:473:
+	const unsigned		shift = (rw_threshold == 32) ? 5 : 4;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#611: FILE: drivers/mmc/host/davinci_mmc.c:492:
+		unsigned	count = sg_dma_len(sg);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: drivers/mmc/host/davinci_mmc.c:515:
+static int mmc_davinci_start_dma_transfer(struct mmc_davinci_host *host,
+		struct mmc_data *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/mmc/host/davinci_mmc.c:521:
+	host->sg_len = dma_map_sg(mmc_dev(host->mmc), data->sg, data->sg_len,
+				((data->flags & MMC_DATA_WRITE)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#648: FILE: drivers/mmc/host/davinci_mmc.c:529:
+			dma_unmap_sg(mmc_dev(host->mmc),
+					data->sg, data->sg_len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#665: FILE: drivers/mmc/host/davinci_mmc.c:546:
+	unsigned	i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: drivers/mmc/host/davinci_mmc.c:564:
+	r = edma_alloc_channel(host->txdma, mmc_davinci_dma_cb, host,
+			EVENTQ_DEFAULT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/mmc/host/davinci_mmc.c:567:
+		dev_warn(mmc_dev(host->mmc), "alloc %s channel err %d\n",
+				"tx", r);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: drivers/mmc/host/davinci_mmc.c:574:
+	r = edma_alloc_channel(host->rxdma, mmc_davinci_dma_cb, host,
+			EVENTQ_DEFAULT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: drivers/mmc/host/davinci_mmc.c:577:
+		dev_warn(mmc_dev(host->mmc), "alloc %s channel err %d\n",
+				"rx", r);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#733: FILE: drivers/mmc/host/davinci_mmc.c:614:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: drivers/mmc/host/davinci_mmc.c:644:
+		writel(fifo_lev | MMCFIFOCTL_FIFODIR_WR | MMCFIFOCTL_FIFORST,
+			host->base + DAVINCI_MMCFIFOCTL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/mmc/host/davinci_mmc.c:646:
+		writel(fifo_lev | MMCFIFOCTL_FIFODIR_WR,
+			host->base + DAVINCI_MMCFIFOCTL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: drivers/mmc/host/davinci_mmc.c:652:
+		writel(fifo_lev | MMCFIFOCTL_FIFODIR_RD | MMCFIFOCTL_FIFORST,
+			host->base + DAVINCI_MMCFIFOCTL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: drivers/mmc/host/davinci_mmc.c:654:
+		writel(fifo_lev | MMCFIFOCTL_FIFODIR_RD,
+			host->base + DAVINCI_MMCFIFOCTL);

WARNING:TYPO_SPELLING: 'should't' may be misspelled - perhaps 'shouldn't'?
#786: FILE: drivers/mmc/host/davinci_mmc.c:667:
+	 * used.  The occasional fallback to PIO should't hurt.
 	                                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#789: FILE: drivers/mmc/host/davinci_mmc.c:670:
+	if (host->use_dma && (host->bytes_left & (rw_threshold - 1)) == 0
+			&& mmc_davinci_start_dma_transfer(host, data) == 0) {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#816: FILE: drivers/mmc/host/davinci_mmc.c:697:
+		dev_err(mmc_dev(host->mmc), "still BUSY? bad ... \n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#828: FILE: drivers/mmc/host/davinci_mmc.c:709:
+static unsigned int calculate_freq_for_card(struct mmc_davinci_host *host,
+	unsigned int mmc_req_freq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#861: FILE: drivers/mmc/host/davinci_mmc.c:742:
+		writel(readl(host->base + DAVINCI_MMCCTL) | MMCCTL_WIDTH_4_BIT,
+			host->base + DAVINCI_MMCCTL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: drivers/mmc/host/davinci_mmc.c:746:
+		writel(readl(host->base + DAVINCI_MMCCTL) & ~MMCCTL_WIDTH_4_BIT,
+			host->base + DAVINCI_MMCCTL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#870: FILE: drivers/mmc/host/davinci_mmc.c:751:
+		u32 temp;
+		open_drain_freq = ((unsigned int)cpu_arm_clk

WARNING:LINE_SPACING: Missing a blank line after declarations
#877: FILE: drivers/mmc/host/davinci_mmc.c:758:
+		u32 temp;
+		mmc_push_pull_freq = calculate_freq_for_card(host, ios->clock);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#882: FILE: drivers/mmc/host/davinci_mmc.c:763:
+		udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#890: FILE: drivers/mmc/host/davinci_mmc.c:771:
+		udelay(10);

CHECK:BRACES: braces {} should be used on all arms of this statement
#933: FILE: drivers/mmc/host/davinci_mmc.c:814:
+	if (!data->stop || (host->cmd && host->cmd->error)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#936: FILE: drivers/mmc/host/davinci_mmc.c:817:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#958: FILE: drivers/mmc/host/davinci_mmc.c:839:
+	if (host->data == NULL || cmd->error) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#978: FILE: drivers/mmc/host/davinci_mmc.c:859:
+	writel(temp | MMCCTL_CMDRST | MMCCTL_DATRST,
+		host->base + DAVINCI_MMCCTL);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#981: FILE: drivers/mmc/host/davinci_mmc.c:862:
+	udelay(10);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->cmd"
#993: FILE: drivers/mmc/host/davinci_mmc.c:874:
+	if (host->cmd == NULL && host->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#993: FILE: drivers/mmc/host/davinci_mmc.c:874:
+	if (host->cmd == NULL && host->data == NULL) {

WARNING:TYPO_SPELLING: 'unbouned' may be misspelled - perhaps 'unbounded'?
#1009: FILE: drivers/mmc/host/davinci_mmc.c:890:
+	 * by read. So, it is not unbouned loop even in the case of
 	                          ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#1022: FILE: drivers/mmc/host/davinci_mmc.c:903:
+		if (data != NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->do_dma == 0'
#1023: FILE: drivers/mmc/host/davinci_mmc.c:904:
+			if ((host->do_dma == 0) && (host->bytes_left > 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->bytes_left > 0'
#1023: FILE: drivers/mmc/host/davinci_mmc.c:904:
+			if ((host->do_dma == 0) && (host->bytes_left > 0)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: drivers/mmc/host/davinci_mmc.c:914:
+			dev_err(mmc_dev(host->mmc),
+					"DATDNE with no host->data\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1080: FILE: drivers/mmc/host/davinci_mmc.c:961:
+			if (data) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1083: FILE: drivers/mmc/host/davinci_mmc.c:964:
+			} else

CHECK:SPACING: No space is necessary after a cast
#1101: FILE: drivers/mmc/host/davinci_mmc.c:982:
+		end_command = (int) host->cmd;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1117: FILE: drivers/mmc/host/davinci_mmc.c:998:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1127: FILE: drivers/mmc/host/davinci_mmc.c:1008:
+		return -ENOSYS;

WARNING:TYPO_SPELLING: 'diabled' may be misspelled - perhaps 'disabled'?
#1142: FILE: drivers/mmc/host/davinci_mmc.c:1023:
+	/* DAT line portion is diabled and in reset state */
 	                       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: drivers/mmc/host/davinci_mmc.c:1025:
+	writel(readl(host->base + DAVINCI_MMCCTL) | MMCCTL_DATRST,
+		host->base + DAVINCI_MMCCTL);

WARNING:TYPO_SPELLING: 'diabled' may be misspelled - perhaps 'disabled'?
#1146: FILE: drivers/mmc/host/davinci_mmc.c:1027:
+	/* CMD line portion is diabled and in reset state */
 	                       ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1148: FILE: drivers/mmc/host/davinci_mmc.c:1029:
+	writel(readl(host->base + DAVINCI_MMCCTL) | MMCCTL_CMDRST,
+		host->base + DAVINCI_MMCCTL);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1150: FILE: drivers/mmc/host/davinci_mmc.c:1031:
+	udelay(10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: drivers/mmc/host/davinci_mmc.c:1040:
+	writel(readl(host->base + DAVINCI_MMCCTL) & ~MMCCTL_DATRST,
+		host->base + DAVINCI_MMCCTL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/mmc/host/davinci_mmc.c:1042:
+	writel(readl(host->base + DAVINCI_MMCCTL) & ~MMCCTL_CMDRST,
+		host->base + DAVINCI_MMCCTL);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1163: FILE: drivers/mmc/host/davinci_mmc.c:1044:
+	udelay(10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: drivers/mmc/host/davinci_mmc.c:1159:
+	dev_info(mmc_dev(host->mmc), "Using %s, %d-bit mode\n",
+		host->use_dma ? "DMA" : "PIO",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 29 warnings, 70 checks, 1303 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
