CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#84: FILE: arch/arm/mm/fault-armv.c:115:
+	vma_prio_tree_foreach(mpnt, shared, &iter,
+				&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: arch/arm/mm/flush.c:163:
+	vma_prio_tree_foreach(mpnt, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/parisc/kernel/cache.c:369:
+	vma_prio_tree_foreach(mpnt, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: arch/x86/mm/hugetlbpage.c:78:
+	vma_prio_tree_foreach(svma, shared, &iter,
+					&mapping->i_mmap, idx, idx) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/hugetlbfs/inode.c:404:
+	vma_prio_tree_foreach(vma, shared, &iter, root,
+						pgoff, ULONG_MAX) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#170: FILE: include/linux/mm.h:1096:
+void vma_prio_tree_add(union vma_prio_tree_node *node,
+	union vma_prio_tree_node *old);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#171: FILE: include/linux/mm.h:1097:
+void vma_prio_tree_insert(union vma_prio_tree_node *, struct prio_tree_root *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#171: FILE: include/linux/mm.h:1097:
+void vma_prio_tree_insert(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#172: FILE: include/linux/mm.h:1098:
+void vma_prio_tree_remove(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct prio_tree_root *' should also have an identifier name
#172: FILE: include/linux/mm.h:1098:
+void vma_prio_tree_remove(union vma_prio_tree_node *, struct prio_tree_root *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union vma_prio_tree_node *' should also have an identifier name
#173: FILE: include/linux/mm.h:1099:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: include/linux/mm.h:1100:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *,
 	struct prio_tree_iter *iter);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#185: FILE: include/linux/mm.h:1108:
+#define vma_prio_tree_next_entry(vma, iter, field)	({		\
+	union vma_prio_tree_node *__t;					\
+	__t = vma_prio_tree_next(&(vma)->field, iter);			\
+	__t ? prio_tree_entry(__t, struct vm_area_struct, field) : NULL;\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#185: FILE: include/linux/mm.h:1108:
+#define vma_prio_tree_next_entry(vma, iter, field)	({		\
+	union vma_prio_tree_node *__t;					\
+	__t = vma_prio_tree_next(&(vma)->field, iter);			\
+	__t ? prio_tree_entry(__t, struct vm_area_struct, field) : NULL;\
+})

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#191: FILE: include/linux/mm.h:1114:
+#define vma_prio_tree_foreach(vma, field, iter, root, begin, end)	\
+	prio_tree_iter_init(iter, root, begin, end);			\
+	for (vma = vma_prio_tree_first_entry(iter, field); vma ;	\
+		(vma = vma_prio_tree_next_entry(vma, iter, field)))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vma' - possible side-effects?
#191: FILE: include/linux/mm.h:1114:
+#define vma_prio_tree_foreach(vma, field, iter, root, begin, end)	\
+	prio_tree_iter_init(iter, root, begin, end);			\
+	for (vma = vma_prio_tree_first_entry(iter, field); vma ;	\
+		(vma = vma_prio_tree_next_entry(vma, iter, field)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#191: FILE: include/linux/mm.h:1114:
+#define vma_prio_tree_foreach(vma, field, iter, root, begin, end)	\
+	prio_tree_iter_init(iter, root, begin, end);			\
+	for (vma = vma_prio_tree_first_entry(iter, field); vma ;	\
+		(vma = vma_prio_tree_next_entry(vma, iter, field)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iter' - possible side-effects?
#191: FILE: include/linux/mm.h:1114:
+#define vma_prio_tree_foreach(vma, field, iter, root, begin, end)	\
+	prio_tree_iter_init(iter, root, begin, end);			\
+	for (vma = vma_prio_tree_first_entry(iter, field); vma ;	\
+		(vma = vma_prio_tree_next_entry(vma, iter, field)))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#331: FILE: lib/prio_tree.c:63:
+		struct vm_area_struct *vma = prio_tree_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/filemap_xip.c:187:
+	vma_prio_tree_foreach(vma, shared, &iter, &mapping->i_mmap,
+							pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: mm/hugetlb.c:2249:
+	vma_prio_tree_foreach(iter_vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: mm/ksm.c:1572:
+		vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: mm/ksm.c:1626:
+		vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: mm/ksm.c:1679:
+		vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#457: FILE: mm/memory-failure.c:392:
+		vma_prio_tree_foreach(vma, anon, &iter,
+						&av->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: mm/memory-failure.c:433:
+		vma_prio_tree_foreach(vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#482: FILE: mm/memory.c:2318:
+	vma_prio_tree_foreach(vma, shared, &iter, &mapping->i_mmap,
+								0, ULONG_MAX)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: mm/memory.c:2380:
+	vma_prio_tree_foreach(vma, shared, &iter, root,
 			details->first_index, details->last_index) {

CHECK:SPACING: No space is necessary after a cast
#554: FILE: mm/mmap.c:2383:
+	if (!test_bit(0, (unsigned long *) &anon_vma->head.prio_tree_node)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#583: FILE: mm/mmap.c:2488:
+	if (test_bit(0, (unsigned long *) &anon_vma->head.prio_tree_node)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: mm/nommu.c:1945:
+	vma_prio_tree_foreach(vma, shared, &iter,
+				&inode->i_mapping->i_mmap, low, high) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: mm/nommu.c:1961:
+	vma_prio_tree_foreach(vma, shared, &iter,
+				&inode->i_mapping->i_mmap, 0, ULONG_MAX) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: mm/prio_tree.c:81:
+	if (!old->vm_set.parent)
[...]
+	else if (old->vm_set.head)
[...]
 	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: mm/prio_tree.c:85:
+		list_add_tail(&node->vm_set.list,
+				&old->vm_set.head->vm_set.list);

CHECK:SPACING: No space is necessary after a cast
#709: FILE: mm/prio_tree.c:102:
+	if (ptr != (struct prio_tree_node *) &node->prio_tree_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: mm/prio_tree.c:104:
+		old = prio_tree_entry(ptr, union vma_prio_tree_node,
+				prio_tree_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#743: FILE: mm/prio_tree.c:121:
+		BUG_ON(target->vm_set.head->vm_set.head != target);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#746: FILE: mm/prio_tree.c:124:
+			if (!list_empty(&head->vm_set.list)) {
[...]
 			} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#747: FILE: mm/prio_tree.c:125:
+				new_head = prio_tree_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: mm/prio_tree.c:133:
+			raw_prio_tree_replace(root, &target->prio_tree_node,
+					&head->prio_tree_node);

CHECK:BRACES: braces {} should be used on all arms of this statement
#775: FILE: mm/prio_tree.c:140:
+			if (!list_empty(&target->vm_set.list)) {
[...]
 			} else
[...]

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#776: FILE: mm/prio_tree.c:141:
+				new_head = prio_tree_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: mm/prio_tree.c:159:
+union vma_prio_tree_node *vma_prio_tree_next(union vma_prio_tree_node *node,
 					struct prio_tree_iter *iter)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: mm/prio_tree.c:171:
+			next = prio_tree_entry(ptr, union vma_prio_tree_node,
+						prio_tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: mm/prio_tree.c:186:
+		next = list_entry(node->vm_set.list.next,
+				union vma_prio_tree_node, vm_set.list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: mm/prio_tree.c:196:
+		next = prio_tree_entry(ptr, union vma_prio_tree_node,
+					prio_tree_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#933: FILE: mm/rmap.c:410:
+	vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: mm/rmap.c:479:
+	vma_prio_tree_foreach(vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: mm/rmap.c:588:
+	vma_prio_tree_foreach(vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: mm/rmap.c:1042:
+	vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: mm/rmap.c:1084:
+	vma_prio_tree_foreach(vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1005: FILE: mm/rmap.c:1252:
+	vma_prio_tree_foreach(vma, anon, &iter,
+					&anon_vma->head, pgoff, pgoff) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: mm/rmap.c:1277:
+	vma_prio_tree_foreach(vma, shared, &iter,
+					&mapping->i_mmap, pgoff, pgoff) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 46 checks, 799 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
