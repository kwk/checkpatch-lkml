CHECK:CAMELCASE: Avoid CamelCase: <serverName>
#78: FILE: fs/cifs/cifs_debug.c:138:
+					   "displayed\n\t", i, ses->serverName);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#78: FILE: fs/cifs/cifs_debug.c:138:
+				seq_printf(m, "\n%d) entry for %s not fully "
+					   "displayed\n\t", i, ses->serverName);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#84: FILE: fs/cifs/cifs_debug.c:142:
+				    "\n%d) Name: %s  Domain: %s Uses: %d OS:"
+				    " %s\n\tNOS: %s\tCapability: 0x%x\n\tSMB"

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#96: FILE: fs/cifs/cifs_debug.c:162:
+				tcon = list_entry(tmp3, struct cifsTconInfo,

CHECK:CAMELCASE: Avoid CamelCase: <fsDevInfo>
#99: FILE: fs/cifs/cifs_debug.c:165:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceType>
#99: FILE: fs/cifs/cifs_debug.c:165:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <treeName>
#101: FILE: fs/cifs/cifs_debug.c:167:
+					   tcon->treeName, tcon->refcount);

CHECK:CAMELCASE: Avoid CamelCase: <nativeFileSystem>
#102: FILE: fs/cifs/cifs_debug.c:168:
+				if (tcon->nativeFileSystem) {

WARNING:SPLIT_STRING: quoted string split across lines
#107: FILE: fs/cifs/cifs_debug.c:173:
+				seq_printf(m, "DevInfo: 0x%x Attributes: 0x%x"
+					"\nPathComponentMax: %d Status: 0x%lx",

CHECK:CAMELCASE: Avoid CamelCase: <DeviceCharacteristics>
#108: FILE: fs/cifs/cifs_debug.c:174:
+					le32_to_cpu(tcon->fsDevInfo.DeviceCharacteristics),

CHECK:CAMELCASE: Avoid CamelCase: <fsAttrInfo>
#109: FILE: fs/cifs/cifs_debug.c:175:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#109: FILE: fs/cifs/cifs_debug.c:175:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <MaxPathNameComponentLength>
#110: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsAttrInfo.MaxPathNameComponentLength),

CHECK:CAMELCASE: Avoid CamelCase: <tidStatus>
#111: FILE: fs/cifs/cifs_debug.c:177:
+					tcon->tidStatus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: fs/cifs/cifs_debug.c:195:
+				mid_entry = list_entry(tmp3, struct mid_q_entry,
 					qhead);

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#186: FILE: fs/cifs/cifs_debug.c:235:
+	struct cifsSesInfo *ses;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: fs/cifs/cifs_debug.c:334:
+				seq_printf(m, "\nSMBs: %d Oplock Breaks: %d",
+					atomic_read(&tcon->num_smbs_sent),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: fs/cifs/cifs_debug.c:337:
+				seq_printf(m, "\nReads:  %d Bytes: %lld",
+					atomic_read(&tcon->num_reads),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: fs/cifs/cifs_debug.c:340:
+				seq_printf(m, "\nWrites: %d Bytes: %lld",
+					atomic_read(&tcon->num_writes),

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: fs/cifs/cifs_debug.c:343:
+				seq_printf(m, "\nLocks: %d HardLinks: %d "
+					      "Symlinks: %d",

WARNING:SPLIT_STRING: quoted string split across lines
#336: FILE: fs/cifs/cifs_debug.c:348:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#336: FILE: fs/cifs/cifs_debug.c:348:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: fs/cifs/cifs_debug.c:353:
+				seq_printf(m, "\nMkdirs: %d Rmdirs: %d",
+					atomic_read(&tcon->num_mkdirs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/cifs/cifs_debug.c:356:
+				seq_printf(m, "\nRenames: %d T2 Renames %d",
+					atomic_read(&tcon->num_renames),

WARNING:SPLIT_STRING: quoted string split across lines
#347: FILE: fs/cifs/cifs_debug.c:359:
+				seq_printf(m, "\nFindFirst: %d FNext %d "
+					      "FClose %d",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses == NULL'
#461: FILE: fs/cifs/cifssmb.c:753:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->server == NULL'
#461: FILE: fs/cifs/cifssmb.c:753:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses"
#461: FILE: fs/cifs/cifssmb.c:753:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses->server"
#461: FILE: fs/cifs/cifssmb.c:753:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#481: FILE: fs/cifs/cifssmb.c:766:
+	   closed on server already e.g. due to tcp session crashing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#557: FILE: fs/cifs/connect.c:1491:
+	xid = GetXid();

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBTDis>
#558: FILE: fs/cifs/connect.c:1492:
+	CIFSSMBTDis(xid, tcon);

CHECK:CAMELCASE: Avoid CamelCase: <_FreeXid>
#559: FILE: fs/cifs/connect.c:1493:
+	_FreeXid(xid);

CHECK:CAMELCASE: Avoid CamelCase: <DeleteTconOplockQEntries>
#561: FILE: fs/cifs/connect.c:1495:
+	DeleteTconOplockQEntries(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <tconInfoFree>
#562: FILE: fs/cifs/connect.c:1496:
+	tconInfoFree(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <pSesInfo>
#573: FILE: fs/cifs/connect.c:2257:
+		tcon = cifs_find_tcon(pSesInfo, volume_info.UNC);

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#699: FILE: fs/cifs/misc.c:491:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#699: FILE: fs/cifs/misc.c:491:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <Tid>
#716: FILE: fs/cifs/misc.c:551:
+			if (tcon->tid != buf->Tid)

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#722: FILE: fs/cifs/misc.c:555:
+			list_for_each(tmp2, &tcon->openFileList) {

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#723: FILE: fs/cifs/misc.c:556:
+				netfile = list_entry(tmp2, struct cifsFileInfo,

CHECK:CAMELCASE: Avoid CamelCase: <pSMB>
#746: FILE: fs/cifs/misc.c:558:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <Fid>
#746: FILE: fs/cifs/misc.c:558:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#750: FILE: fs/cifs/misc.c:562:
+				cFYI(1, ("file id match, oplock break"));

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#751: FILE: fs/cifs/misc.c:563:
+				pCifsInode = CIFS_I(netfile->pInode);

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#752: FILE: fs/cifs/misc.c:564:
+				pCifsInode->clientCanCacheAll = false;

CHECK:CAMELCASE: Avoid CamelCase: <OplockLevel>
#753: FILE: fs/cifs/misc.c:565:
+				if (pSMB->OplockLevel == 0)

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#754: FILE: fs/cifs/misc.c:566:
+					pCifsInode->clientCanCacheRead = false;

CHECK:CAMELCASE: Avoid CamelCase: <oplockPending>
#755: FILE: fs/cifs/misc.c:567:
+				pCifsInode->oplockPending = true;

CHECK:CAMELCASE: Avoid CamelCase: <AllocOplockQEntry>
#756: FILE: fs/cifs/misc.c:568:
+				AllocOplockQEntry(netfile->pInode,

CHECK:CAMELCASE: Avoid CamelCase: <oplockThread>
#759: FILE: fs/cifs/misc.c:571:
+				if (oplockThread)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 43 checks, 683 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000206572.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
