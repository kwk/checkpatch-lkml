WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
>  arch/x86/include/asm/percpu.h |  100 ++++++++++++++++++++++++++++++++++++------

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#96: FILE: arch/x86/include/asm/percpu.h:110:
+#define percpu_add_op(var, val)						\
+do {									\
+	typedef typeof(var) pao_T__;					\
+	const int pao_ID__ = (__builtin_constant_p(val) &&		\
+			      ((val) == 1 || (val) == -1)) ? (val) : 0;	\
+	if (0) {							\
+		pao_T__ pao_tmp__;					\
+		pao_tmp__ = (val);					\
+	}								\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		if (pao_ID__ == 1)					\
+			asm("incb "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decb "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addb %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "qi" ((pao_T__)(val)));			\
+		break;							\
+	case 2:								\
+		if (pao_ID__ == 1)					\
+			asm("incw "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decw "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addw %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "ri" ((pao_T__)(val)));			\
+		break;							\
+	case 4:								\
+		if (pao_ID__ == 1)					\
+			asm("incl "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decl "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addl %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "ri" ((pao_T__)(val)));			\
+		break;							\
+	case 8:								\
+		if (pao_ID__ == 1)					\
+			asm("incq "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decq "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addq %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "re" ((pao_T__)(val)));			\
+		break;							\
+	default: __bad_percpu_size();					\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#96: FILE: arch/x86/include/asm/percpu.h:110:
+#define percpu_add_op(var, val)						\
+do {									\
+	typedef typeof(var) pao_T__;					\
+	const int pao_ID__ = (__builtin_constant_p(val) &&		\
+			      ((val) == 1 || (val) == -1)) ? (val) : 0;	\
+	if (0) {							\
+		pao_T__ pao_tmp__;					\
+		pao_tmp__ = (val);					\
+	}								\
+	switch (sizeof(var)) {						\
+	case 1:								\
+		if (pao_ID__ == 1)					\
+			asm("incb "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decb "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addb %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "qi" ((pao_T__)(val)));			\
+		break;							\
+	case 2:								\
+		if (pao_ID__ == 1)					\
+			asm("incw "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decw "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addw %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "ri" ((pao_T__)(val)));			\
+		break;							\
+	case 4:								\
+		if (pao_ID__ == 1)					\
+			asm("incl "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decl "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addl %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "ri" ((pao_T__)(val)));			\
+		break;							\
+	case 8:								\
+		if (pao_ID__ == 1)					\
+			asm("incq "__percpu_arg(0) : "+m" (var));	\
+		else if (pao_ID__ == -1)				\
+			asm("decq "__percpu_arg(0) : "+m" (var));	\
+		else							\
+			asm("addq %1, "__percpu_arg(0)			\
+			    : "+m" (var)				\
+			    : "re" ((pao_T__)(val)));			\
+		break;							\
+	default: __bad_percpu_size();					\
+	}								\
+} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#98: FILE: arch/x86/include/asm/percpu.h:112:
+	typedef typeof(var) pao_T__;					\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#108: FILE: arch/x86/include/asm/percpu.h:122:
+			asm("incb "__percpu_arg(0) : "+m" (var));	\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#110: FILE: arch/x86/include/asm/percpu.h:124:
+			asm("decb "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#112: FILE: arch/x86/include/asm/percpu.h:126:
+			asm("addb %1, "__percpu_arg(0)			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#118: FILE: arch/x86/include/asm/percpu.h:132:
+			asm("incw "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#120: FILE: arch/x86/include/asm/percpu.h:134:
+			asm("decw "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#122: FILE: arch/x86/include/asm/percpu.h:136:
+			asm("addw %1, "__percpu_arg(0)			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#128: FILE: arch/x86/include/asm/percpu.h:142:
+			asm("incl "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#130: FILE: arch/x86/include/asm/percpu.h:144:
+			asm("decl "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#132: FILE: arch/x86/include/asm/percpu.h:146:
+			asm("addl %1, "__percpu_arg(0)			\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#138: FILE: arch/x86/include/asm/percpu.h:152:
+			asm("incq "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#140: FILE: arch/x86/include/asm/percpu.h:154:
+			asm("decq "__percpu_arg(0) : "+m" (var));	\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#142: FILE: arch/x86/include/asm/percpu.h:156:
+			asm("addq %1, "__percpu_arg(0)			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#146: FILE: arch/x86/include/asm/percpu.h:160:
+	default: __bad_percpu_size();					\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 14 checks, 132 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000027705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
