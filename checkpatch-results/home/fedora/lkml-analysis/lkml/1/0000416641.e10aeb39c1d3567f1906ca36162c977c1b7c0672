WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: include/linux/lzo.h:1:
+#ifndef __LZO_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#75: FILE: include/linux/lzo.h:20:
+#define lzo1x_worst_compress(x) (x + (x / 64) + 16 + 3)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#75: FILE: include/linux/lzo.h:20:
+#define lzo1x_worst_compress(x) (x + (x / 64) + 16 + 3)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: include/linux/lzo.h:24:
+int lzo1x_1_compress(const unsigned char *src, size_t src_len,
+			unsigned char *dst, size_t *dst_len, void *wrkmem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/lzo.h:28:
+int lzo1x_decompress_safe(const unsigned char *src, size_t src_len,
+			unsigned char *dst, size_t *dst_len);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#145: FILE: lib/lzo/lzo1x_compress.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: lib/lzo/lzo1x_compress.c:22:
+_lzo1x_1_do_compress(const unsigned char *in, size_t in_len,
+		unsigned char *out, size_t *out_len, void *wrkmem)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#210: FILE: lib/lzo/lzo1x_compress.c:66:
+			if (likely(m_pos[2] == ip[2]))
+					goto match;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#247: FILE: lib/lzo/lzo1x_compress.c:103:
+		if (m_pos[3] != *ip++ || m_pos[4] != *ip++
+				|| m_pos[5] != *ip++ || m_pos[6] != *ip++

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#248: FILE: lib/lzo/lzo1x_compress.c:104:
+				|| m_pos[5] != *ip++ || m_pos[6] != *ip++
+				|| m_pos[7] != *ip++ || m_pos[8] != *ip++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: lib/lzo/lzo1x_compress.c:177:
+int lzo1x_1_compress(const unsigned char *in, size_t in_len, unsigned char *out,
+			size_t *out_len, void *wrkmem)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#367: FILE: lib/lzo/lzo1x_compress.c:223:
+EXPORT_SYMBOL_GPL(lzo1x_1_compress);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#377: FILE: lib/lzo/lzo1x_decompress.c:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip_end' may be better as '(ip_end)' to avoid precedence issues
#397: FILE: lib/lzo/lzo1x_decompress.c:21:
+#define HAVE_IP(x, ip_end, ip) ((size_t)(ip_end - ip) < (x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ip' may be better as '(ip)' to avoid precedence issues
#397: FILE: lib/lzo/lzo1x_decompress.c:21:
+#define HAVE_IP(x, ip_end, ip) ((size_t)(ip_end - ip) < (x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op_end' may be better as '(op_end)' to avoid precedence issues
#398: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_OP(x, op_end, op) ((size_t)(op_end - op) < (x))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#398: FILE: lib/lzo/lzo1x_decompress.c:22:
+#define HAVE_OP(x, op_end, op) ((size_t)(op_end - op) < (x))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'm_pos' - possible side-effects?
#399: FILE: lib/lzo/lzo1x_decompress.c:23:
+#define HAVE_LB(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm_pos' may be better as '(m_pos)' to avoid precedence issues
#399: FILE: lib/lzo/lzo1x_decompress.c:23:
+#define HAVE_LB(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'out' may be better as '(out)' to avoid precedence issues
#399: FILE: lib/lzo/lzo1x_decompress.c:23:
+#define HAVE_LB(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#399: FILE: lib/lzo/lzo1x_decompress.c:23:
+#define HAVE_LB(m_pos, out, op) (m_pos < out || m_pos >= op)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#405: FILE: lib/lzo/lzo1x_decompress.c:29:
+int lzo1x_decompress_safe(const unsigned char *in, size_t in_len,
+			unsigned char *out, size_t *out_len)

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#511: FILE: lib/lzo/lzo1x_decompress.c:135:
+						if (HAVE_IP(1, ip_end, ip))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#517: FILE: lib/lzo/lzo1x_decompress.c:141:
+				m_pos -= le16_to_cpu(get_unaligned(

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#531: FILE: lib/lzo/lzo1x_decompress.c:155:
+						if (HAVE_IP(1, ip_end, ip))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#536: FILE: lib/lzo/lzo1x_decompress.c:160:
+				m_pos -= le16_to_cpu(get_unaligned(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#626: FILE: lib/lzo/lzo1x_decompress.c:250:
+EXPORT_SYMBOL_GPL(lzo1x_decompress_safe);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#636: FILE: lib/lzo/lzodefs.h:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#676: FILE: lib/lzo/lzodefs.h:41:
+#define DX2(p, s1, s2)	(((((size_t)((p)[2]) << (s2)) ^ (p)[1]) \
+							<< (s1)) ^ (p)[0])

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#678: FILE: lib/lzo/lzodefs.h:43:
+#define DX3(p, s1, s2, s3)	((DX2((p)+1, s2, s3) << (s1)) ^ (p)[0])
                           	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#678: FILE: lib/lzo/lzodefs.h:43:
+#define DX3(p, s1, s2, s3)	((DX2((p)+1, s2, s3) << (s1)) ^ (p)[0])

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 22 checks, 593 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416641.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
