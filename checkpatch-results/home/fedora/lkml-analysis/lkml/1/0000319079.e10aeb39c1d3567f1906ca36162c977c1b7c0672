WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#191: FILE: fs/libfs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#192: FILE: fs/libfs/super.c:2:
+ *	fs/libfs/super.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#205: FILE: fs/libfs/super.c:15:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#212: FILE: fs/libfs/super.c:22:
+	struct vfsmount *mnt = NULL;
+	spin_lock(&pin_fs_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#233: FILE: fs/libfs/super.c:43:
+	struct vfsmount *mnt;
+	spin_lock(&pin_fs_lock);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#274: FILE: fs/libfs/super.c:84:
+	inode->i_uid = inode->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#276: FILE: fs/libfs/super.c:86:
+	inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#282: FILE: fs/libfs/super.c:92:
+		iput(inode);
 		^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#291: FILE: fs/libfs/super.c:101:
+			printk(KERN_WARNING "%s: %s passed in a files array"

WARNING:SPLIT_STRING: quoted string split across lines
#292: FILE: fs/libfs/super.c:102:
+			printk(KERN_WARNING "%s: %s passed in a files array"
+				"with an index of 1!\n", __func__,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#292: FILE: fs/libfs/super.c:102:
+			printk(KERN_WARNING "%s: %s passed in a files array"
+				"with an index of 1!\n", __func__,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#302: FILE: fs/libfs/super.c:112:
+		inode->i_uid = inode->i_gid = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: fs/libfs/super.c:114:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: fs/libfs/super.c:144:
+static int simple_get_sb(struct file_system_type *fs_type,
+			int flags, const char *dev_name,

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#345: FILE: fs/libfs/super.c:155:
+	type->fstype.kill_sb = kill_litter_super,
+
+	retval = register_filesystem(&type->fstype);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#375: FILE: fs/libfs/inode.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#376: FILE: fs/libfs/inode.c:2:
+ *	fs/libfs/inode.c

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#389: FILE: fs/libfs/inode.c:15:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: fs/libfs/inode.c:24:
+static ssize_t simple_read_file(struct file *file, char __user *buf,
+				 size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: fs/libfs/inode.c:30:
+static ssize_t simple_write_file(struct file *file, const char __user *buf,
+				   size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#424: FILE: fs/libfs/inode.c:50:
+static void *simple_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#426: FILE: fs/libfs/inode.c:52:
+	nd_set_link(nd, dentry->d_inode->i_private);
 	            ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#444: FILE: fs/libfs/inode.c:70:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#460: FILE: fs/libfs/inode.c:86:
+			 * (for "." entry) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: fs/libfs/inode.c:96:
+static int simple_mknod(struct inode *dir, struct dentry *dentry,
+			 int mode, dev_t dev)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#491: FILE: fs/libfs/inode.c:117:
+	mode = (mode & (S_IRWXUGO | S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: fs/libfs/inode.c:144:
+static int simple_create_by_name(const char *name, mode_t mode,
+				  struct dentry *parent,

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: fs/libfs/inode.c:152:
+	if (!IS_ERR(*dentry)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#539: FILE: fs/libfs/inode.c:165:
+	} else

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#551: FILE: fs/libfs/inode.c:177:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'createing' may be misspelled - perhaps 'creating'?
#560: FILE: fs/libfs/inode.c:186:
+ * wide range of flexibility in createing a file, or a directory (if you
                                 ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: fs/libfs/inode.c:199:
+struct dentry *simple_create_file(const char *name, mode_t mode,
+				   struct dentry *parent, void *data,

WARNING:LINE_SPACING: Missing a blank line after declarations
#596: FILE: fs/libfs/inode.c:222:
+		struct simple_fs_type *type = to_simple_fs(parent);
+		dentry = NULL;

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#617: FILE: fs/libfs/inode.c:243:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#633: FILE: fs/libfs/inode.c:259:
+				   S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#643: FILE: fs/libfs/inode.c:269:
+ *          should be a directory dentry if set.  If this paramater is NULL,
                                                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#662: FILE: fs/libfs/inode.c:288:
+struct dentry *simple_create_symlink(const char *name, struct dentry *parent,
+				      const char *target)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#671: FILE: fs/libfs/inode.c:297:
+	result = simple_create_file(name, S_IFLNK | S_IRWXUGO, parent, link,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: fs/libfs/inode.c:298:
+	result = simple_create_file(name, S_IFLNK | S_IRWXUGO, parent, link,
+				     NULL);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#715: FILE: fs/libfs/inode.c:341:
+				/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: fs/libfs/inode.c:376:
+struct dentry *simple_rename_named(struct dentry *old_dir,
+		struct dentry *old_dentry, struct dentry *new_dir,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: fs/libfs/inode.c:399:
+	error = simple_rename(old_dir->d_inode, old_dentry, new_dir->d_inode,
+		dentry);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: fs/libfs/inode.c:406:
+	fsnotify_move(old_dir->d_inode, new_dir->d_inode, old_name,
+		old_dentry->d_name.name, S_ISDIR(old_dentry->d_inode->i_mode),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#794: FILE: fs/libfs/inode.c:420:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#813: FILE: include/linux/libfs.h:16:
+#define DEFINE_SIMPLE_FS(_type, _name, _files, _magic)	\
+struct simple_fs_type _type = {		\
+	.fstype = {			\
+		.owner = THIS_MODULE,	\
+		.name  = (_name),	\
+	},				\
+	.files = (_files),		\
+	.magic = (_magic),		\
+};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#823: FILE: include/linux/libfs.h:26:
+extern struct dentry *simple_register_filesystem(struct simple_fs_type *type);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#824: FILE: include/linux/libfs.h:27:
+extern void simple_unregister_filesystem(struct simple_fs_type *type);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#847: FILE: include/linux/libfs.h:58:
+int simple_open(struct inode *, struct file *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#847: FILE: include/linux/libfs.h:58:
+int simple_open(struct inode *, struct file *);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#854: FILE: include/linux/libfs.h:65:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#881: FILE: include/linux/fs.h:1962:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#881: FILE: include/linux/fs.h:1962:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#881: FILE: include/linux/fs.h:1962:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct tree_descr *' should also have an identifier name
#881: FILE: include/linux/fs.h:1962:
+extern int simple_fill_super(struct super_block *, int, const struct tree_descr *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 31 warnings, 23 checks, 811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000319079.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
