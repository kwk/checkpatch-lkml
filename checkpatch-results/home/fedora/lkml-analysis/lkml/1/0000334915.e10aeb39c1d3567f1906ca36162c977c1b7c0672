WARNING:TYPO_SPELLING: 'refered' may be misspelled - perhaps 'referred'?
#75: 
built-in without the problem refered in my former email.
                             ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#84: 
the current modinfo support is for external modules only, it provided module

WARNING:TYPO_SPELLING: 'verion' may be misspelled - perhaps 'version'?
#85: 
information under /sys/module/<XYZ>/, such as verion, ...;
                                              ^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#144: FILE: include/linux/moduleparam.h:30:
+};
+#define __MODULE_INFO(tag, name, info)					  \

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/moduleparam.h:32:
+  __attribute_used__^I^I^I^I^I^I^I  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: include/linux/moduleparam.h:33:
+  __attribute__((section(".modinfo"), unused)) =^I^I^I  \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".modinfo") over __attribute__((section(".modinfo")))
#147: FILE: include/linux/moduleparam.h:33:
+  __attribute__((section(".modinfo"), unused)) =			  \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: include/linux/moduleparam.h:34:
+  { KBUILD_MODNAME, __stringify(tag), info }$

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#162: FILE: kernel/module.c:2608:
*probe_module, int *refcount)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: kernel/module.c:2627:
+static ssize_t modinfo_attr_show(struct module_attribute *mattr,
+		struct module *mod, char *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: kernel/module.c:2630:
+	const struct kernel_modinfo *km = to_modinfo_attr(mattr)->modinfo;
+	return snprintf(buf, PAGE_SIZE, "%s\n", km->info);

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#190: FILE: kernel/module.c:2636:
+	return (strlen(name) == 4 && !strncmp(name, "parm", 4)) ||
 	                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: kernel/module.c:2641:
+static __init void modinfo_sysfs_setup(struct module_kobject *mk,
+		  const struct kernel_modinfo km_begin[],

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: kernel/module.c:2673:
+		const struct kernel_modinfo *km = &km_begin[i];
+		if (!modinfo_skip(km_begin[i].tag)) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#231: FILE: kernel/module.c:2677:
+			pattr->mattr.attr.mode = S_IRUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/module.c:2687:
+static void __init kernel_modinfo_sysfs_setup(const char *modname,
+		const struct kernel_modinfo km_begin[],

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: kernel/module.c:2696:
+	if (mkobj)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#252: FILE: kernel/module.c:2698:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mk)...) over kzalloc(sizeof(struct module_kobject)...)
#253: FILE: kernel/module.c:2699:
+		mk = kzalloc(sizeof(struct module_kobject), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: kernel/module.c:2706:
+			printk(KERN_ERR "Module '%s' failed to be added to"

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: kernel/module.c:2707:
+			printk(KERN_ERR "Module '%s' failed to be added to"
+					" sysfs, error number %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#263: FILE: kernel/module.c:2709:
+			printk(KERN_ERR	"The system will be unstable now.\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#270: FILE: kernel/module.c:2716:
+	if (mkobj) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: kernel/module.c:2719:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: kernel/module.c:2740:
+				kernel_modinfo_sysfs_setup(modname,
+						km_begin,

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#310: FILE: kernel/module.c:2756:
+__initcall(builtin_modinfo_sysfs_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334915.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 10 checks, 196 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000334915.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
