WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#117: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#121: FILE: include/linux/cpu_pisch_drv.h:1:
+#ifndef _LINUX_CPU_PISCH_DRV_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#124: FILE: include/linux/cpu_pisch_drv.h:4:
+ * include/linux/cpu_pisch_drv.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfs_rq *' should also have an identifier name
#145: FILE: include/linux/cpu_pisch_drv.h:25:
+	s64 (*entity_key)(struct cfs_rq *, struct sched_entity *s);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#147: FILE: include/linux/cpu_pisch_drv.h:27:
+	void (*rq_tick)(struct rq* rq);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#149: FILE: include/linux/cpu_pisch_drv.h:29:
+	void (*update_curr)(struct cfs_rq *cfs_rq, struct sched_entity *curr, unsigned long delta_exec);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: include/linux/cpu_pisch_drv.h:40:
+	printk("CPU_PISCH: Running with \"%s\" CPU scheduler.\n", cpu_pisch_drvp->name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#163: FILE: include/linux/cpu_pisch_drv.h:43:
+extern int cpu_pisch_drv_sysfs_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#244: FILE: kernel/Kconfig.cpu_pisch:4:
+config CPU_PISCH
+	bool "Support multiple CPU schedulers"
+	default y
+	---help---
+	  Say y here if you wish to be able to make a boot time selection
+	  of which CPU scheduler to use.  The CPU scheduler to be used may
+	  then be selected with the boot parameter "cpu_pisch=".  In the
+          absence of such a command line parameter, the scheduler selected
+          at "Default CPU scheduler" will be used.
+
+	  The choice of which schedulers should be compiled into the
+	  kernel (and be available for boot time selection) can be made
+	  be enabling "Select which CPU schedulers to build in".
+
+	  If you say n here the single scheduler to be built into the
+	  kernel may be selected at "Default CPU scheduler".
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#261: FILE: kernel/Kconfig.cpu_pisch:21:
+config CPU_PISCH_CHOOSE_BUILTINS
+	bool "Select which CPU schedulers to build in" if CPU_PISCH
+	default n
+	---help---
+	  Say y here if you want to be able to select which CPU schedulers
+	  are built into the kernel (for selection at boot time).
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#268: FILE: kernel/Kconfig.cpu_pisch:28:
+config CPU_PISCH_CFS_FAIR
+	bool "'Completely Fair Scheduler' CPU scheduler" if CPU_PISCH_CHOOSE_BUILTINS
+	depends on CPU_PISCH
+	default CPU_PISCH
+	---help---
+	  This is the standard CPU scheduler which purports to model an
+	  "ideal, precise multi-tasking CPU".
+	  To boot this CPU scheduler, if it is not the default, use the
+	  boot parameter "cpu_pisch=cfs_fair".
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#278: FILE: kernel/Kconfig.cpu_pisch:38:
+choice
+	prompt "Default CPU scheduler"
+	depends on CPU_PISCH
+	---help---
+	  This option allows you to choose which CPU scheduler shall be
+	  booted by default at startup if you have enabled CPU_PISCH,
+	  or it will select the only scheduler to be built in otherwise.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#286: FILE: kernel/Kconfig.cpu_pisch:46:
+config CPU_PISCH_DEFAULT_CFS_FAIR
+	bool "CFS Fair CPU scheduler"
+	select CPU_PISCH_CFS_FAIR
+	---help---
+	  This is the default CPU scheduler which is an O(1) model of an
+	  "ideal, precise multi-tasking CPU"..
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#301: FILE: kernel/cpu_pisch_drv.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#302: FILE: kernel/cpu_pisch_drv.c:2:
+ *  kernel/cpu_pisch_drv.c

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#345: FILE: kernel/cpu_pisch_drv.c:45:
+	printk("CPU_PISCH: Unknown scheduler: \"%s\"\n", str);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#350: FILE: kernel/cpu_pisch_drv.c:50:
+__setup ("cpu_pisch=", cpu_pisch_drv_setup);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: kernel/cpu_pisch_drv.c:68:
+store_cpu_pisch_name(struct kobject *kobj, struct kobj_attribute *attr,
+			 const char *buf, size_t count)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#380: FILE: kernel/cpu_pisch_drv.c:80:
+			printk("CPU_PISCH: ERROR(%d): \"%s\"\n", retval, cpu_pisch_drvp->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#381: FILE: kernel/cpu_pisch_drv.c:81:
+		printk("CPU_PISCH: Set scheduler: \"%s\"\n", cpu_pisch_drvp->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#385: FILE: kernel/cpu_pisch_drv.c:85:
+	printk("CPU_PISCH: Unknown scheduler: \"%s\"\n", buf);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#391: FILE: kernel/cpu_pisch_drv.c:91:
+	__ATTR(name, S_IRUGO | S_IWUSR, show_cpu_pisch_name, store_cpu_pisch_name);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_pisch_drvp->attrs != NULL'
#411: FILE: kernel/cpu_pisch_drv.c:111:
+	if (!retval && (cpu_pisch_drvp->attrs != NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cpu_pisch_drvp->attrs"
#411: FILE: kernel/cpu_pisch_drv.c:111:
+	if (!retval && (cpu_pisch_drvp->attrs != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#426: FILE: kernel/cpu_pisch_pvt.h:1:
+#ifndef _LINUX_CPU_PISCH_PVT_H

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#429: FILE: kernel/cpu_pisch_pvt.h:4:
+ * kernel/cpu_pisch_pvt.h

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#442: FILE: kernel/cpu_pisch_pvt.h:17:
+show_cpu_pisch_ ## aname(struct kobject *kobj, struct kobj_attribute* attr, char *buf) \

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#449: FILE: kernel/cpu_pisch_pvt.h:24:
+store_cpu_pisch_ ## aname(struct kobject *kobj, struct kobj_attribute* attr, \

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: kernel/cpu_pisch_pvt.h:28:
+ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: kernel/cpu_pisch_pvt.h:30:
+ \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: kernel/cpu_pisch_pvt.h:32:
+ \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'aname' - possible side-effects?
#461: FILE: kernel/cpu_pisch_pvt.h:36:
+#define CPU_PISCH_SYSFS_DEFINE_UNSIGNED_RW(aname, vname, convert_out, convert_in) \
+__CPU_PISCH_SYSFS_SHOW_UNSIGNED(aname, vname, convert_out) \
+__CPU_PISCH_SYSFS_STORE_UNSIGNED(aname, vname, convert_in) \
+static struct kobj_attribute cpu_pisch_sysfs_ ## aname = \
+	__ATTR(aname, (S_IRUGO | S_IWUSR), show_cpu_pisch_ ## aname, store_cpu_pisch_ ## aname)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vname' - possible side-effects?
#461: FILE: kernel/cpu_pisch_pvt.h:36:
+#define CPU_PISCH_SYSFS_DEFINE_UNSIGNED_RW(aname, vname, convert_out, convert_in) \
+__CPU_PISCH_SYSFS_SHOW_UNSIGNED(aname, vname, convert_out) \
+__CPU_PISCH_SYSFS_STORE_UNSIGNED(aname, vname, convert_in) \
+static struct kobj_attribute cpu_pisch_sysfs_ ## aname = \
+	__ATTR(aname, (S_IRUGO | S_IWUSR), show_cpu_pisch_ ## aname, store_cpu_pisch_ ## aname)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#465: FILE: kernel/cpu_pisch_pvt.h:40:
+	__ATTR(aname, (S_IRUGO | S_IWUSR), show_cpu_pisch_ ## aname, store_cpu_pisch_ ## aname)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'aname' - possible side-effects?
#467: FILE: kernel/cpu_pisch_pvt.h:42:
+#define CPU_PISCH_SYSFS_DEFINE_UNSIGNED_RO(aname, vname, convert_out) \
+__CPU_PISCH_SYSFS_SHOW_UNSIGNED(aname, vname, convert_out) \
+static struct kobj_attribute cpu_pisch_sysfs_ ## aname = \
+	__ATTR(aname, S_IRUGO, show_cpu_pisch_ ## aname, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#470: FILE: kernel/cpu_pisch_pvt.h:45:
+	__ATTR(aname, S_IRUGO, show_cpu_pisch_ ## aname, NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: kernel/sched_fair.c:285:
+static inline int cfs_fair_entity_before(struct sched_entity *a,
+				struct sched_entity *b)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: kernel/sched_fair.c:517:
+cfs_fair_update_curr(struct cfs_rq *cfs_rq, struct sched_entity *curr,
+	      unsigned long delta_exec)

WARNING:BAD_SIGN_OFF: Duplicate signature
#764: 
Signed-off-by: Peter Williams <pwil3058@bigpond.net.au>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#786: FILE: kernel/Kconfig.cpu_pisch:38:
+config CPU_PISCH_SPBRR
+	bool "'Simple Priority Based Round Robin' CPU scheduler" if CPU_PISCH_CHOOSE_BUILTINS
+	depends on CPU_PISCH
+	default CPU_PISCH
+	---help---
+	  This is a simple priority based CPU scheduler where "nice"
+	  determines priority and tasks with the same priority round
+	  robin with each other with fixed time slices.
+	  To boot this CPU scheduler, if it is not the default, use the
+	  boot parameter "cpu_pisch=spbrr".
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#804: FILE: kernel/Kconfig.cpu_pisch:64:
+config CPU_PISCH_DEFAULT_SPBRR
+	bool "Simple Priority Based Round Robin CPU scheduler"
+	select CPU_PISCH_SPBRR
+	---help---
+	  This is a simple priority based CPU scheduler where "nice"
+	  determines priority and tasks with the same priority round
+	  robin with each other with fixed time slices.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#842: FILE: kernel/cpu_pisch_spbrr.c:1:
+/*

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#912: FILE: kernel/cpu_pisch_spbrr.c:71:
+void spbrr_rq_tick(struct rq* rq)

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#918: FILE: kernel/cpu_pisch_spbrr.c:77:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#918: FILE: kernel/cpu_pisch_spbrr.c:77:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: kernel/cpu_pisch_spbrr.c:98:
+spbrr_update_curr(struct cfs_rq *cfs_rq, struct sched_entity *curr,
+	      unsigned long delta_exec)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 30 warnings, 11 checks, 825 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056326.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
