WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#71: FILE: arch/x86/kernel/kgdb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#72: FILE: arch/x86/kernel/kgdb.c:2:
+ * arch/x86/kernel/kgdb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#115: FILE: arch/x86/kernel/kgdb.c:45:
+/* Likewise, the vector number here (since GDB only gets the signal
+   number through the usual means, and that's not very specific).  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#115: FILE: arch/x86/kernel/kgdb.c:45:
+   number through the usual means, and that's not very specific).  */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#252: FILE: arch/x86/kernel/kgdb.c:182:
+	unsigned enabled;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#253: FILE: arch/x86/kernel/kgdb.c:183:
+	unsigned type;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#254: FILE: arch/x86/kernel/kgdb.c:184:
+	unsigned len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#334: FILE: arch/x86/kernel/kgdb.c:264:
+	unsigned type;

CHECK:CAMELCASE: Avoid CamelCase: <newPC>
#394: FILE: arch/x86/kernel/kgdb.c:324:
+	int newPC;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#400: FILE: arch/x86/kernel/kgdb.c:330:
+		/* try to read optional parameter, pc unchanged if no parm */
 		                                                      ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#418: FILE: arch/x86/kernel/kgdb.c:348:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#461: FILE: arch/x86/kernel/kgdb.c:391:
+		if (rsp >= init_tss[cpu].ist[i] &&
 		                         ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#462: FILE: arch/x86/kernel/kgdb.c:392:
+		    rsp <= init_tss[cpu].ist[i] + EXCEPTION_STKSZ) {
 		                         ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#463: FILE: arch/x86/kernel/kgdb.c:393:
+			regs = (void *) init_tss[cpu].ist[i] + EXCEPTION_STKSZ;
 			                              ^^^

CHECK:SPACING: No space is necessary after a cast
#463: FILE: arch/x86/kernel/kgdb.c:393:
+			regs = (void *) init_tss[cpu].ist[i] + EXCEPTION_STKSZ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#470: FILE: arch/x86/kernel/kgdb.c:400:
+void kgdb_shadowinfo(struct pt_regs *regs, char *buffer, unsigned threadid)

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#472: FILE: arch/x86/kernel/kgdb.c:402:
+	static char intr_desc[] = "Stack at interrupt entrypoint";

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#473: FILE: arch/x86/kernel/kgdb.c:403:
+	static char exc_desc[] = "Stack at exception entrypoint";

WARNING:LINE_SPACING: Missing a blank line after declarations
#476: FILE: arch/x86/kernel/kgdb.c:406:
+	int cpu = raw_smp_processor_id();
+	stregs = in_interrupt_stack(regs->rsp, cpu);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#477: FILE: arch/x86/kernel/kgdb.c:407:
+	if (stregs)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#479: FILE: arch/x86/kernel/kgdb.c:409:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#492: FILE: arch/x86/kernel/kgdb.c:422:
+	if (stregs)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#494: FILE: arch/x86/kernel/kgdb.c:424:
+		return current;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#494: FILE: arch/x86/kernel/kgdb.c:424:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#509: FILE: arch/x86/kernel/kgdb.c:439:
+	if (stregs)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#511: FILE: arch/x86/kernel/kgdb.c:441:
+		return stregs;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#511: FILE: arch/x86/kernel/kgdb.c:441:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: arch/x86/kernel/kgdb.c:452:
+static inline int single_step_cont(struct pt_regs *regs,
+			struct die_args *args)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#527: FILE: arch/x86/kernel/kgdb.c:457:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space,"

WARNING:SPLIT_STRING: quoted string split across lines
#528: FILE: arch/x86/kernel/kgdb.c:458:
+	printk(KERN_ERR "KGDB: trap/step from kernel to user space,"
+			" resuming...\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#569: FILE: arch/x86/kernel/kgdb.c:499:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:CONST_STRUCT: struct kgdb_arch should normally be const
#621: FILE: arch/x86/kernel/kgdb.c:551:
+struct kgdb_arch arch_kgdb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335480.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 10 checks, 577 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000335480.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
