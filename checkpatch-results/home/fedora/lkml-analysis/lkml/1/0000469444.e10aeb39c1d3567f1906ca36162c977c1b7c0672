WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: arch/i386/lguest/core.c:1:
+/* World's simplest hypervisor, to test paravirt_ops and show

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#80: FILE: arch/i386/lguest/core.c:2:
+ * unbelievers that virtualization is the future.  Plus, it's fun! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#92: FILE: arch/i386/lguest/core.c:14:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#93: FILE: arch/i386/lguest/core.c:15:
+#include <asm/uaccess.h>

WARNING:MISPLACED_INIT: __initdata should be placed after hypervisor_blob[]
#101: FILE: arch/i386/lguest/core.c:23:
+static char __initdata hypervisor_blob[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#117: FILE: arch/i386/lguest/core.c:39:
+DEFINE_MUTEX(lguest_lock);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#143: FILE: arch/i386/lguest/core.c:65:
+	hype_pages = alloc_pages(GFP_KERNEL|__GFP_ZERO, HYPERVISOR_MAP_ORDER);
 	                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: arch/i386/lguest/core.c:73:
+		printk("lguest: could not map hypervisor pages high\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: arch/i386/lguest/core.c:82:
+		printk("lguest: map_vm_area failed: %i\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#175: FILE: arch/i386/lguest/core.c:97:
+	printk("lguest: mapped hypervisor at %p\n", hypervisor_vma->addr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#243: FILE: arch/i386/lguest/core.c:165:
+	unsigned int i;
+	for (i = 0; i < MAX_LGUEST_GUESTS; i++)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#261: FILE: arch/i386/lguest/core.c:183:
+	if (!lguest_address_ok(lg, addr)
+	    || get_user(val, (u32 __user *)addr) != 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#269: FILE: arch/i386/lguest/core.c:191:
+	if (!lguest_address_ok(lg, addr)
+	    || put_user(val, (u32 __user *)addr) != 0)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#273: FILE: arch/i386/lguest/core.c:195:
+void lhread(struct lguest *lg, void *b, u32 addr, unsigned bytes)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#275: FILE: arch/i386/lguest/core.c:197:
+	if (addr + bytes < addr || !lguest_address_ok(lg, addr+bytes)
 	                                                      ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#276: FILE: arch/i386/lguest/core.c:198:
+	if (addr + bytes < addr || !lguest_address_ok(lg, addr+bytes)
+	    || copy_from_user(b, (void __user *)addr, bytes) != 0) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#283: FILE: arch/i386/lguest/core.c:205:
+void lhwrite(struct lguest *lg, u32 addr, const void *b, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#286: FILE: arch/i386/lguest/core.c:208:
+	if (addr + bytes < addr
+	    || !lguest_address_ok(lg, addr+bytes)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#286: FILE: arch/i386/lguest/core.c:208:
+	    || !lguest_address_ok(lg, addr+bytes)
 	                                  ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#287: FILE: arch/i386/lguest/core.c:209:
+	    || !lguest_address_ok(lg, addr+bytes)
+	    || copy_to_user((void __user *)addr, b, bytes) != 0)

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#294: FILE: arch/i386/lguest/core.c:216:
+	struct Xgt_desc_struct idt;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#296: FILE: arch/i386/lguest/core.c:218:
+	asm("sidt %0":"=m" (idt));
 	             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: arch/i386/lguest/core.c:231:
+	u32 eip;
+	get_user(eip, &lg->lguest_data->gs_gpf_eip);

WARNING:LINE_SPACING: Missing a blank line after declarations
#319: FILE: arch/i386/lguest/core.c:241:
+	u32 cr0;
+	if (guest_ts) {

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#320: FILE: arch/i386/lguest/core.c:242:
+		asm("movl %%cr0,%0":"=r" (cr0));
 		                   ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#322: FILE: arch/i386/lguest/core.c:244:
+			asm("movl %0,%%cr0": :"r" (cr0|8));
 			                   ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#322: FILE: arch/i386/lguest/core.c:244:
+			asm("movl %0,%%cr0": :"r" (cr0|8));
 			                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#322: FILE: arch/i386/lguest/core.c:244:
+			asm("movl %0,%%cr0": :"r" (cr0|8));
 			                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#373: FILE: arch/i386/lguest/core.c:295:
+			unsigned int i;
+			for (i = 0; i < ARRAY_SIZE(lg->tls_limits); i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#374: FILE: arch/i386/lguest/core.c:296:
+				lg->state->gdt_table[GDT_ENTRY_TLS_MIN+i].a
 				                                      ^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '|=' should be on the previous line
#375: FILE: arch/i386/lguest/core.c:297:
+				lg->state->gdt_table[GDT_ENTRY_TLS_MIN+i].a
+					|= lg->tls_limits[i];

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#382: FILE: arch/i386/lguest/core.c:304:
+		asm("sidt %0":"=m"(lg->state->host.idt));
 		             ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#392: FILE: arch/i386/lguest/core.c:314:
+			asm("movl %%cr2,%0" :"=r" (cr2));
 			                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#404: FILE: arch/i386/lguest/core.c:326:
+				if (usermode(regs) && new_gfp_eip(lg,regs))
 				                                    ^

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: arch/i386/lguest/core.c:342:
+			kill_guest(lg, "unhandled page fault at %#x"
+				   " (eip=%#x, errcode=%#x)",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: arch/i386/lguest/core.c:347:
+^I^I^Iif (!lg->ts) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#432: FILE: arch/i386/lguest/core.c:354:
+		case 32 ... 255: /* Real interrupt, fall thru */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#439: FILE: arch/i386/lguest/core.c:361:
+		kill_guest(lg,"unhandled trap %i at %#x (err=%i)",
 		             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#446: FILE: arch/i386/lguest/core.c:368:
+	put_user(lg->pending_addr, (unsigned long *)user+1);
 	                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#447: FILE: arch/i386/lguest/core.c:369:
+	return sizeof(unsigned long)*2;
 	                            ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'elem' may be better as '(elem)' to avoid precedence issues
#450: FILE: arch/i386/lguest/core.c:372:
+#define STRUCT_LGUEST_ELEM_SIZE(elem) sizeof(((struct lguest_state *)0)->elem)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: arch/i386/lguest/core.c:381:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#459: FILE: arch/i386/lguest/core.c:381:
+ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#515: FILE: arch/i386/lguest/hypercalls.c:1:
+/*  Actual hypercalls, which allow guests to actually do something.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#516: FILE: arch/i386/lguest/hypercalls.c:2:
+/*  Actual hypercalls, which allow guests to actually do something.
+    Copyright (C) 2006 Rusty Russell IBM Corporation

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#529: FILE: arch/i386/lguest/hypercalls.c:15:
+    along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#530: FILE: arch/i386/lguest/hypercalls.c:16:
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#538: FILE: arch/i386/lguest/hypercalls.c:24:
+#include <asm/pgtable.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: arch/i386/lguest/hypercalls.c:53:
+		char msg[128];
+		lhread(lg, msg, regs->edx, sizeof(msg));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#568: FILE: arch/i386/lguest/hypercalls.c:54:
+		msg[sizeof(msg)-1] = '\0';
 		               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: arch/i386/lguest/hypercalls.c:81:
+		u32 now = jiffies;
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#595: FILE: arch/i386/lguest/hypercalls.c:81:
+		mb();

WARNING:LINE_SPACING: Missing a blank line after declarations
#611: FILE: arch/i386/lguest/hypercalls.c:97:
+		struct timeval tv;
+		do_gettimeofday(&tv);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#631: FILE: arch/i386/lguest/hypercalls.c:117:
+		guest_load_tls(lg, (struct desc_struct __user*)regs->edx);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'hypercall', this function's name, in a string
#679: FILE: arch/i386/lguest/hypercalls.c:165:
+			kill_guest(lg, "hypercall %i before LGUEST_INIT",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#687: FILE: arch/i386/lguest/hypercalls.c:173:
+		if (!lguest_address_ok(lg, (long)lg->lguest_data)
+		    || !lguest_address_ok(lg, (long)(lg->lguest_data+1))){

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#687: FILE: arch/i386/lguest/hypercalls.c:173:
+		    || !lguest_address_ok(lg, (long)(lg->lguest_data+1))){
 		                                                    ^

ERROR:SPACING: space required before the open brace '{'
#687: FILE: arch/i386/lguest/hypercalls.c:173:
+		    || !lguest_address_ok(lg, (long)(lg->lguest_data+1))){

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#694: FILE: arch/i386/lguest/hypercalls.c:180:
+		put_user(4U*1024*1024, &lg->lguest_data->reserve_mem);
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#694: FILE: arch/i386/lguest/hypercalls.c:180:
+		put_user(4U*1024*1024, &lg->lguest_data->reserve_mem);
 		                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#708: FILE: arch/i386/lguest/hypervisor.S:1:
+/* This code sits at 0xFFFF1000 to do the low-level guest<->host switch.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#813: FILE: arch/i386/lguest/hypervisor.S:106:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#860: FILE: arch/i386/lguest/hypervisor.S:153:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#867: FILE: arch/i386/lguest/hypervisor.S:160:
+default_idt_entries:^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#882: FILE: arch/i386/lguest/interrupts_and_traps.c:1:
+#include <linux/uaccess.h>

ERROR:SPACING: space required one side of that '--' (ctx:VxV)
#887: FILE: arch/i386/lguest/interrupts_and_traps.c:6:
+	lhwrite_u32(lg, (u32)--(*gstack), val);
 	                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#900: FILE: arch/i386/lguest/interrupts_and_traps.c:19:
+	if ((regs->ss&0x3) != GUEST_DPL) {
 	             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#911: FILE: arch/i386/lguest/interrupts_and_traps.c:30:
+	/* We use IF bit in eflags to indicate whether irqs were disabled
+	   (it's always 0, since irqs are enabled when guest is running). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#911: FILE: arch/i386/lguest/interrupts_and_traps.c:30:
+	   (it's always 0, since irqs are enabled when guest is running). */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#926: FILE: arch/i386/lguest/interrupts_and_traps.c:45:
+	regs->cs = (__KERNEL_CS|GUEST_DPL);
 	                       ^

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#947: FILE: arch/i386/lguest/interrupts_and_traps.c:66:
+	if (lg->timer_on && jiffies != lg->last_timer)

WARNING:LINE_SPACING: Missing a blank line after declarations
#966: FILE: arch/i386/lguest/interrupts_and_traps.c:85:
+		u32 irq_enabled;
+		get_user(irq_enabled, &lg->lguest_data->irq_enabled);

WARNING:LINE_SPACING: Missing a blank line after declarations
#992: FILE: arch/i386/lguest/interrupts_and_traps.c:111:
+		char file[128];
+		lhread(lg, &l, eip+sizeof(insn), sizeof(l));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#992: FILE: arch/i386/lguest/interrupts_and_traps.c:111:
+		lhread(lg, &l, eip+sizeof(insn), sizeof(l));
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#993: FILE: arch/i386/lguest/interrupts_and_traps.c:112:
+		lhread(lg, &f, eip+sizeof(insn)+sizeof(l), sizeof(f));
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#993: FILE: arch/i386/lguest/interrupts_and_traps.c:112:
+		lhread(lg, &f, eip+sizeof(insn)+sizeof(l), sizeof(f));
 		                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#995: FILE: arch/i386/lguest/interrupts_and_traps.c:114:
+		file[sizeof(file)-1] = 0;
 		                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1022: FILE: arch/i386/lguest/interrupts_and_traps.c:141:
+static u8 tramp[] $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1024: FILE: arch/i386/lguest/interrupts_and_traps.c:143:
+    0x36, 0xc7, 0x05, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: arch/i386/lguest/interrupts_and_traps.c:145:
+    0xe9, 0x55, 0x55, 0x55, 0x55 /* jmp dstaddr */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1028: FILE: arch/i386/lguest/interrupts_and_traps.c:147:
+};
+#define TRAMP_MOVL_TARGET_OFF 7

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1035: FILE: arch/i386/lguest/interrupts_and_traps.c:154:
+	off = sizeof(tramp)*i;
 	                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1043: FILE: arch/i386/lguest/interrupts_and_traps.c:162:
+	addr = dstaddr - ((-4*1024*1024) + off + sizeof(tramp));
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1043: FILE: arch/i386/lguest/interrupts_and_traps.c:162:
+	addr = dstaddr - ((-4*1024*1024) + off + sizeof(tramp));
 	                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1045: FILE: arch/i386/lguest/interrupts_and_traps.c:164:
+	return (-4*1024*1024) + off;
 	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1045: FILE: arch/i386/lguest/interrupts_and_traps.c:164:
+	return (-4*1024*1024) + off;
 	               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1049: FILE: arch/i386/lguest/interrupts_and_traps.c:168:
+/* We bounce through the trap page, for two reasons: firstly, we need
+   the interrupt destination always mapped, to avoid double faults,

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1071: FILE: arch/i386/lguest/interrupts_and_traps.c:190:
+	taddr = setup_trampoline(lg, i, (desc->a&0xFFFF)|(desc->b&0xFFFF0000));
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1071: FILE: arch/i386/lguest/interrupts_and_traps.c:190:
+	taddr = setup_trampoline(lg, i, (desc->a&0xFFFF)|(desc->b&0xFFFF0000));
 	                                                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1071: FILE: arch/i386/lguest/interrupts_and_traps.c:190:
+	taddr = setup_trampoline(lg, i, (desc->a&0xFFFF)|(desc->b&0xFFFF0000));
 	                                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1073: FILE: arch/i386/lguest/interrupts_and_traps.c:192:
+	lg->state->idt_table[i].a = (((__KERNEL_CS|GUEST_DPL)<<16)
 	                                          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1073: FILE: arch/i386/lguest/interrupts_and_traps.c:192:
+	lg->state->idt_table[i].a = (((__KERNEL_CS|GUEST_DPL)<<16)
 	                                                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1075: FILE: arch/i386/lguest/interrupts_and_traps.c:194:
+	lg->state->idt_table[i].b = (desc->b&0xEF00)|(taddr&0xFFFF0000);
 	                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1075: FILE: arch/i386/lguest/interrupts_and_traps.c:194:
+	lg->state->idt_table[i].b = (desc->b&0xEF00)|(taddr&0xFFFF0000);
 	                                            ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1075: FILE: arch/i386/lguest/interrupts_and_traps.c:194:
+	lg->state->idt_table[i].b = (desc->b&0xEF00)|(taddr&0xFFFF0000);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1109: FILE: arch/i386/lguest/interrupts_and_traps.c:228:
+		copy_trap(lg, &lg->interrupt[i-FIRST_EXTERNAL_VECTOR], &d);
 		                              ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1116: FILE: arch/i386/lguest/io.c:1:
+/* Simple I/O model for guests, based on shared memory.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1130: FILE: arch/i386/lguest/io.c:15:
+ *  along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1131: FILE: arch/i386/lguest/io.c:16:
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA$

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1168: FILE: arch/i386/lguest/io.c:53:
+	return jhash2((u32*)&key->both.word,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1169: FILE: arch/i386/lguest/io.c:54:
+		      (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
 		                             ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1169: FILE: arch/i386/lguest/io.c:54:
+		      (sizeof(key->both.word)+sizeof(key->both.ptr))/4,
 		                                                    ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1177: FILE: arch/i386/lguest/io.c:62:
+	BUG_ON(!mutex_is_locked(&lguest_lock));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1186: FILE: arch/i386/lguest/io.c:71:
+	return (a->both.word == b->both.word
+		&& a->both.ptr == b->both.ptr

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1187: FILE: arch/i386/lguest/io.c:72:
+		&& a->both.ptr == b->both.ptr
+		&& a->both.offset == b->both.offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1224: FILE: arch/i386/lguest/io.c:109:
+	if (interrupt == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1226: FILE: arch/i386/lguest/io.c:111:
+	else {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1244: FILE: arch/i386/lguest/io.c:129:
+ ^Iup_read(&current->mm->mmap_sem);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1244: FILE: arch/i386/lguest/io.c:129:
+ ^Iup_read(&current->mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1244: FILE: arch/i386/lguest/io.c:129:
+ ^Iup_read(&current->mm->mmap_sem);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1251: FILE: arch/i386/lguest/io.c:136:
+			void *buf, u32 addr, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1254: FILE: arch/i386/lguest/io.c:139:
+	if (addr + bytes < addr
+	    || !lguest_address_ok(lg, addr+bytes)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1254: FILE: arch/i386/lguest/io.c:139:
+	    || !lguest_address_ok(lg, addr+bytes)
 	                                  ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1255: FILE: arch/i386/lguest/io.c:140:
+	    || !lguest_address_ok(lg, addr+bytes)
+	    || access_process_vm(lg->tsk, addr, buf, bytes, 0) != bytes) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1265: FILE: arch/i386/lguest/io.c:150:
+			 const void *buf, unsigned bytes)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1268: FILE: arch/i386/lguest/io.c:153:
+	if (addr + bytes < addr
+	    || !lguest_address_ok(lg, addr+bytes)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1268: FILE: arch/i386/lguest/io.c:153:
+	    || !lguest_address_ok(lg, addr+bytes)
 	                                  ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1269: FILE: arch/i386/lguest/io.c:154:
+	    || !lguest_address_ok(lg, addr+bytes)
+	    || (access_process_vm(lg->tsk, addr, (void *)buf, bytes, 1)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1285: FILE: arch/i386/lguest/io.c:170:
+	si = di = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1286: FILE: arch/i386/lguest/io.c:171:
+	srcoff = dstoff = 0;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1288: FILE: arch/i386/lguest/io.c:173:
+	while (si < LGUEST_MAX_DMA_SECTIONS && src->len[si]
+	       && di < LGUEST_MAX_DMA_SECTIONS && dst->len[di]) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1295: FILE: arch/i386/lguest/io.c:180:
+		/* FIXME: This is not completely portable, since
+		   archs do different things for copy_to_user_page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1295: FILE: arch/i386/lguest/io.c:180:
+		   archs do different things for copy_to_user_page. */

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1296: FILE: arch/i386/lguest/io.c:181:
+		if (copy_from_user(maddr + (dst->addr[di] + dstoff)%PAGE_SIZE,
 		                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1339: FILE: arch/i386/lguest/io.c:224:
+				   dst->addr[i], 1, 1, 1, pages+i, NULL)
 				                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1383: FILE: arch/i386/lguest/io.c:268:
+	 * is all under the lguest_lock. */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1403: FILE: arch/i386/lguest/io.c:288:
+			    udma+offsetof(struct lguest_dma, used_len), ret);
 			        ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1415: FILE: arch/i386/lguest/io.c:300:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1415: FILE: arch/i386/lguest/io.c:300:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1415: FILE: arch/i386/lguest/io.c:300:
+ ^Iup_read(&dstlg->mm->mmap_sem);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1442: FILE: arch/i386/lguest/io.c:327:
+		struct lguest_dma_info *i, *n;
+		list_for_each_entry_safe(i, n, &dma_hash[hash(&key)], list) {

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#1455: FILE: arch/i386/lguest/io.c:340:
+			yield();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1477: FILE: arch/i386/lguest/io.c:362:
+	BUG_ON(!mutex_is_locked(&lguest_lock));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1504: FILE: arch/i386/lguest/io.c:389:
+			unsigned int j;
+			for (j = 0; j < i->num_dmas; j++) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1533: FILE: arch/i386/lguest/lguest_user.c:1:
+/* Userspace control of the guest, via /dev/lguest. */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1549: FILE: arch/i386/lguest/lguest_user.c:17:
+	guest->gdt.size = GDT_ENTRIES*8-1;
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1549: FILE: arch/i386/lguest/lguest_user.c:17:
+	guest->gdt.size = GDT_ENTRIES*8-1;
 	                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1562: FILE: arch/i386/lguest/lguest_user.c:30:
+		guest->idt_table[i].a = (LGUEST_CS<<16) | (def[i]&0x0000FFFF);
 		                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1562: FILE: arch/i386/lguest/lguest_user.c:30:
+		guest->idt_table[i].a = (LGUEST_CS<<16) | (def[i]&0x0000FFFF);
 		                                                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1563: FILE: arch/i386/lguest/lguest_user.c:31:
+		guest->idt_table[i].b = (def[i]&0xFFFF0000) | flags;
 		                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1568: FILE: arch/i386/lguest/lguest_user.c:36:
+	guest->tss.esp0 = (unsigned long)(guest+1);
 	                                       ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1574: FILE: arch/i386/lguest/lguest_user.c:42:
+	regs->eax = regs->ebx = regs->ecx = regs->edx = regs->esp = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1578: FILE: arch/i386/lguest/lguest_user.c:46:
+	regs->gs = regs->fs = 0;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1579: FILE: arch/i386/lguest/lguest_user.c:47:
+	regs->ds = regs->es = __KERNEL_DS|GUEST_DPL;
 	                                 ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1579: FILE: arch/i386/lguest/lguest_user.c:47:
+	regs->ds = regs->es = __KERNEL_DS|GUEST_DPL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1580: FILE: arch/i386/lguest/lguest_user.c:48:
+	regs->trapnum = regs->errcode = 0;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1582: FILE: arch/i386/lguest/lguest_user.c:50:
+	regs->cs = __KERNEL_CS|GUEST_DPL;
 	                      ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1583: FILE: arch/i386/lguest/lguest_user.c:51:
+^Iregs->eflags = 0x202; ^I/* Interrupts enabled. */$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1584: FILE: arch/i386/lguest/lguest_user.c:52:
+	regs->ss = __KERNEL_DS|GUEST_DPL;
 	                      ^

ERROR:POINTER_LOCATION: "foo*bar" should be "foo *bar"
#1622: FILE: arch/i386/lguest/lguest_user.c:90:
+static ssize_t read(struct file *file, char __user *user, size_t size,loff_t*o)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1622: FILE: arch/i386/lguest/lguest_user.c:90:
+static ssize_t read(struct file *file, char __user *user, size_t size,loff_t*o)
                                                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1635: FILE: arch/i386/lguest/lguest_user.c:103:
+		len = min(size, strlen(lg->dead)+1);
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1684: FILE: arch/i386/lguest/lguest_user.c:152:
+	lg->state = setup_guest_state(i, lg->pgdirs[lg->pgdidx].pgdir,args[2]);
 	                                                             ^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1754: FILE: arch/i386/lguest/lguest_user.c:222:
+static struct file_operations lguest_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1760: FILE: arch/i386/lguest/lguest_user.c:228:
+};
+static struct miscdevice lguest_dev = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1779: FILE: arch/i386/lguest/page_tables.c:1:
+/* Shadow page table operations.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1781: FILE: arch/i386/lguest/page_tables.c:3:
+ * GPL v2 and any later version */

CHECK:BIT_MACRO: Prefer using the BIT macro
#1791: FILE: arch/i386/lguest/page_tables.c:13:
+#define PTES_PER_PAGE (1 << PTES_PER_PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1797: FILE: arch/i386/lguest/page_tables.c:19:
+static unsigned vaddr_to_pgd(unsigned long vaddr)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1810: FILE: arch/i386/lguest/page_tables.c:32:
+^I} $

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1816: FILE: arch/i386/lguest/page_tables.c:38:
+	u32 *page = __va(top&PAGE_MASK);
 	                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1817: FILE: arch/i386/lguest/page_tables.c:39:
+	u32 *page = __va(top&PAGE_MASK);
+	BUG_ON(!(top & _PAGE_PRESENT));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1817: FILE: arch/i386/lguest/page_tables.c:39:
+	BUG_ON(!(top & _PAGE_PRESENT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1825: FILE: arch/i386/lguest/page_tables.c:47:
+	unsigned int index = vaddr >> (PAGE_SHIFT + PTES_PER_PAGE_SHIFT);
+	return lg->pgdirs[lg->pgdidx].cr3 + index * sizeof(u32);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1830: FILE: arch/i386/lguest/page_tables.c:52:
+	u32 gpage = (gtop&PAGE_MASK);
 	                 ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1831: FILE: arch/i386/lguest/page_tables.c:53:
+	u32 gpage = (gtop&PAGE_MASK);
+	BUG_ON(!(gtop & _PAGE_PRESENT));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1831: FILE: arch/i386/lguest/page_tables.c:53:
+	BUG_ON(!(gtop & _PAGE_PRESENT));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1858: FILE: arch/i386/lguest/page_tables.c:80:
+	if ((entry & (_PAGE_PWT|_PAGE_PSE))
 	                       ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1859: FILE: arch/i386/lguest/page_tables.c:81:
+	if ((entry & (_PAGE_PWT|_PAGE_PSE))
+	    || (entry >> PAGE_SHIFT) >= lg->pfn_limit)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1870: FILE: arch/i386/lguest/page_tables.c:92:
+		kill_guest(lg, "failed to get page %u", entry>>PAGE_SHIFT);
 		                                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1873: FILE: arch/i386/lguest/page_tables.c:95:
+	return ((pfn << PAGE_SHIFT) | (entry & (PAGE_SIZE-1)));
 	                                                 ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1877: FILE: arch/i386/lguest/page_tables.c:99:
+/* FIXME: We hold reference to pages, which prevents them from being
+   swapped.  It'd be nice to have a callback when Linux wants to swap out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1877: FILE: arch/i386/lguest/page_tables.c:99:
+   swapped.  It'd be nice to have a callback when Linux wants to swap out. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1880: FILE: arch/i386/lguest/page_tables.c:102:
+ * Return NULL or the pte page. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1881: FILE: arch/i386/lguest/page_tables.c:103:
+static int page_in(struct lguest *lg, u32 vaddr, unsigned flags)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1893: FILE: arch/i386/lguest/page_tables.c:115:
+	if (!(*top & _PAGE_PRESENT)) {
[...]
+	} else
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1902: FILE: arch/i386/lguest/page_tables.c:124:
+		*top = (__pa(ptepage) | (val & (PAGE_SIZE-1)));
 		                                         ^

CHECK:BRACES: Unbalanced braces around else statement
#1903: FILE: arch/i386/lguest/page_tables.c:125:
+	} else

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1910: FILE: arch/i386/lguest/page_tables.c:132:
+	if (!(val&_PAGE_PRESENT) || ((flags&_PAGE_DIRTY) && !(val&_PAGE_RW)))
 	         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1910: FILE: arch/i386/lguest/page_tables.c:132:
+	if (!(val&_PAGE_PRESENT) || ((flags&_PAGE_DIRTY) && !(val&_PAGE_RW)))
 	                                   ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#1910: FILE: arch/i386/lguest/page_tables.c:132:
+	if (!(val&_PAGE_PRESENT) || ((flags&_PAGE_DIRTY) && !(val&_PAGE_RW)))
 	                                                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1920: FILE: arch/i386/lguest/page_tables.c:142:
+	 * write will fault so we can set dirty bit in guest. */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1933: FILE: arch/i386/lguest/page_tables.c:155:
+	return page_in(lg, vaddr, (write ? _PAGE_DIRTY : 0)|_PAGE_ACCESSED);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1942: FILE: arch/i386/lguest/page_tables.c:164:
+		if (!demand_page(lg, stack - i*PAGE_SIZE, 1))
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1949: FILE: arch/i386/lguest/page_tables.c:171:
+	unsigned int i;
+	for (i = 0; i < ARRAY_SIZE(lg->pgdirs); i++)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1959: FILE: arch/i386/lguest/page_tables.c:181:
+		u32 *ptepage = __va(*pgd & ~(PAGE_SIZE-1));
 		                                      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1960: FILE: arch/i386/lguest/page_tables.c:182:
+		u32 *ptepage = __va(*pgd & ~(PAGE_SIZE-1));
+		for (i = 0; i < PTES_PER_PAGE; i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1970: FILE: arch/i386/lguest/page_tables.c:192:
+	unsigned int i;
+	for (i = 0; i < vaddr_to_pgd(lg->page_offset); i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2028: FILE: arch/i386/lguest/page_tables.c:250:
+	u32 *top = toplev(lg, idx, vaddr);
+	if (*top & _PAGE_PRESENT) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2030: FILE: arch/i386/lguest/page_tables.c:252:
+		u32 *pte = pteof(lg, *top, vaddr);
+		release_pte(*pte);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2031: FILE: arch/i386/lguest/page_tables.c:253:
+		if (val & (_PAGE_DIRTY | _PAGE_ACCESSED)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2034: FILE: arch/i386/lguest/page_tables.c:256:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#2045: FILE: arch/i386/lguest/page_tables.c:267:
+		unsigned int i;
+		for (i = 0; i < ARRAY_SIZE(lg->pgdirs); i++)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2050: FILE: arch/i386/lguest/page_tables.c:272:
+		int pgdir = find_pgdir(lg, cr3);
+		if (pgdir != ARRAY_SIZE(lg->pgdirs))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2074: FILE: arch/i386/lguest/page_tables.c:296:
+	lg->pgdirs[lg->pgdidx].pgdir = (u32*)get_zeroed_page(GFP_KERNEL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2093: FILE: arch/i386/lguest/page_tables.c:315:
+^I$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2094: FILE: arch/i386/lguest/page_tables.c:316:
+	hypervisor_pte_page(cpu)[0] = (__pa(lg->trap_page)|_PAGE_PRESENT);
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#2098: FILE: arch/i386/lguest/page_tables.c:320:
+		(__pa(hypervisor_pte_page(cpu))| _PAGE_KERNEL);
 		                               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2104: FILE: arch/i386/lguest/page_tables.c:326:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2130: FILE: arch/i386/lguest/page_tables.c:352:
+^I^Ipte[i+1] = ((page_to_pfn(&hype_pages[i]) << PAGE_SHIFT) $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2130: FILE: arch/i386/lguest/page_tables.c:352:
+		pte[i+1] = ((page_to_pfn(&hype_pages[i]) << PAGE_SHIFT) 
 		     ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2157: FILE: arch/i386/lguest/segments.c:1:
+#include "lg.h"

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#2161: FILE: arch/i386/lguest/segments.c:5:
+struct decoded_gdt_entry
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2182: FILE: arch/i386/lguest/segments.c:26:
+^Ide.base = ((en->a >> 16) | ((en->b & 0xff) << 16) $

WARNING:LINE_SPACING: Missing a blank line after declarations
#2182: FILE: arch/i386/lguest/segments.c:26:
+	struct decoded_gdt_entry de;
+	de.base = ((en->a >> 16) | ((en->b & 0xff) << 16) 

WARNING:LINE_SPACING: Missing a blank line after declarations
#2192: FILE: arch/i386/lguest/segments.c:36:
+	struct desc_struct en;
+	en.a = ((de->limit & 0xFFFF) | (de->base << 16));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2193: FILE: arch/i386/lguest/segments.c:37:
+^Ien.b = (((de->base >> 16) & 0xFF) $

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2232: FILE: arch/i386/lguest/segments.c:76:
+		if (i == GDT_ENTRY_TSS
+		    || i == GDT_ENTRY_LGUEST_CS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2233: FILE: arch/i386/lguest/segments.c:77:
+		    || i == GDT_ENTRY_LGUEST_CS
+		    || i == GDT_ENTRY_LGUEST_DS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2234: FILE: arch/i386/lguest/segments.c:78:
+		    || i == GDT_ENTRY_LGUEST_DS
+		    || i == GDT_ENTRY_DOUBLEFAULT_TSS)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2257: FILE: arch/i386/lguest/segments.c:101:
+		if (!length
+		    || base + length < base

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2258: FILE: arch/i386/lguest/segments.c:102:
+		    || base + length < base
+		    || base + length > HYPE_ADDR) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2278: FILE: arch/i386/lguest/segments.c:122:
+	dec.limit = sizeof(*tss)-1;
 	                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2297: FILE: arch/i386/lguest/segments.c:141:
+^Iif (!fixup_gdt_table(lg->state->gdt_table, num, $

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2312: FILE: arch/i386/lguest/segments.c:156:
+	lhread(lg, tls, (u32)gtls, sizeof(*tls)*GDT_ENTRY_TLS_ENTRIES);
 	                                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2320: FILE: arch/i386/lguest/segments.c:164:
+		/* We truncate to one byte/page (depending on G bit) to neuter
+		   it, so ensure it's more than 1 page below trap page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2320: FILE: arch/i386/lguest/segments.c:164:
+		   it, so ensure it's more than 1 page below trap page. */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469444.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 33 errors, 75 warnings, 109 checks, 2221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469444.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
