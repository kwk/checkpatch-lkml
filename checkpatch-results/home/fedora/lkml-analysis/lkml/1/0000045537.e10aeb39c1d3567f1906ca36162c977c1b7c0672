CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: drivers/char/nozomi.c:689:
+			kfifo_alloc(&dc->port[i].fifo_ul,
+				FIFO_BUFFER_SIZE_UL, GFP_ATOMIC, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: drivers/char/sonypi.c:1317:
+	error = kfifo_alloc(&sonypi_device.fifo, SONYPI_BUF_SIZE, GFP_KERNEL,
 					 &sonypi_device.fifo_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: drivers/char/sonypi.c:1397:
+		error = kfifo_alloc(&sonypi_device.input_fifo, SONYPI_BUF_SIZE,
+				GFP_KERNEL, &sonypi_device.input_fifo_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:48:
+static int __cxio_init_resource_fifo(struct kfifo *fifo,
 				   spinlock_t *fifo_lock,

CHECK:SPACING: No space is necessary after a cast
#360: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:62:
+		__kfifo_put(fifo, (unsigned char *) &entry, sizeof(u32));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:75:
+			__kfifo_put(fifo,
 				(unsigned char *) &rarray[idx],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:82:
+			__kfifo_put(fifo,
 				(unsigned char *) &rarray[i],

CHECK:SPACING: No space is necessary after a cast
#383: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:86:
+			__kfifo_put(fifo, (unsigned char *) &i, sizeof(u32));

CHECK:SPACING: No space is necessary after a cast
#387: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:89:
+		kfifo_get(fifo, (unsigned char *) &entry, sizeof(u32));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:93:
+static int cxio_init_resource_fifo(struct kfifo *fifo, spinlock_t * fifo_lock,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:101:
+static int cxio_init_resource_fifo_random(struct kfifo *fifo,
 				   spinlock_t * fifo_lock,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: drivers/infiniband/hw/cxgb3/cxio_resource.c:116:
+	if (kfifo_alloc(&rdev_p->rscp->qpid_fifo, T3_MAX_NUM_QP * sizeof(u32),
 					      GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/media/video/meye.c:1750:
+	if (kfifo_alloc(&meye.grabq, sizeof(int) * MEYE_MAX_BUFNBRS, GFP_KERNEL,
+				 &meye.grabq_lock)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#649: FILE: drivers/media/video/meye.c:1756:
+	if (kfifo_alloc(&meye.doneq, sizeof(int) * MEYE_MAX_BUFNBRS, GFP_KERNEL,
+				 &meye.doneq_lock)) {

CHECK:SPACING: No space is necessary after a cast
#753: FILE: drivers/net/wireless/libertas/main.c:857:
+			__kfifo_get(&priv->event_fifo, (unsigned char *) &event,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: drivers/net/wireless/libertas/main.c:858:
+			__kfifo_get(&priv->event_fifo, (unsigned char *) &event,
 				sizeof(event));

CHECK:SPACING: No space is necessary after a cast
#785: FILE: drivers/net/wireless/libertas/main.c:1582:
+	__kfifo_put(&priv->event_fifo, (unsigned char *) &event, sizeof(u32));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#810: FILE: drivers/platform/x86/fujitsu-laptop.c:828:
+	error = kfifo_alloc(&fujitsu_hotkey->fifo, RINGBUFFERSIZE * sizeof(int),
+			GFP_KERNEL, &fujitsu_hotkey->fifo_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: drivers/platform/x86/sony-laptop.c:390:
+	 kfifo_alloc(&sony_laptop_input.fifo, SONY_LAPTOP_BUF_SIZE, GFP_KERNEL,
 			    &sony_laptop_input.fifo_lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: drivers/platform/x86/sony-laptop.c:2323:
+	 kfifo_alloc(&sonypi_compat.fifo, SONY_LAPTOP_BUF_SIZE, GFP_KERNEL,
 					 &sonypi_compat.fifo_lock);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1022: FILE: drivers/scsi/libiscsi.c:434:
+	__kfifo_put(&session->cmdpool.queue, (void*)&task, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1022: FILE: drivers/scsi/libiscsi.c:434:
+	__kfifo_put(&session->cmdpool.queue, (void*)&task, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1054: FILE: drivers/scsi/libiscsi.c:2255:
+	kfifo_init(&q->queue, (void*)q->pool, max * sizeof(void*), NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1054: FILE: drivers/scsi/libiscsi.c:2255:
+	kfifo_init(&q->queue, (void*)q->pool, max * sizeof(void*), NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1063: FILE: drivers/scsi/libiscsi.c:2263:
+		__kfifo_put(&q->queue, (void*)&q->pool[i], sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1063: FILE: drivers/scsi/libiscsi.c:2263:
+		__kfifo_put(&q->queue, (void*)&q->pool[i], sizeof(void*));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1081: FILE: drivers/scsi/libiscsi.c:2613:
+	if (!__kfifo_get(&session->cmdpool.queue,
                          (void*)&conn->login_task,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1089: FILE: drivers/scsi/libiscsi.c:2632:
+	__kfifo_put(&session->cmdpool.queue, (void*)&conn->login_task,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1098: FILE: drivers/scsi/libiscsi.c:2695:
+	__kfifo_put(&session->cmdpool.queue, (void*)&conn->login_task,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1111: FILE: drivers/scsi/libiscsi_tcp.c:448:
+	while (__kfifo_get(&tcp_task->r2tqueue, (void*)&r2t, sizeof(void*))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1111: FILE: drivers/scsi/libiscsi_tcp.c:448:
+	while (__kfifo_get(&tcp_task->r2tqueue, (void*)&r2t, sizeof(void*))) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1112: FILE: drivers/scsi/libiscsi_tcp.c:449:
+		__kfifo_put(&tcp_task->r2tpool.queue, (void*)&r2t,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1120: FILE: drivers/scsi/libiscsi_tcp.c:456:
+		__kfifo_put(&tcp_task->r2tpool.queue, (void*)&r2t,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1129: FILE: drivers/scsi/libiscsi_tcp.c:544:
+	rc = __kfifo_get(&tcp_task->r2tpool.queue, (void*)&r2t, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1129: FILE: drivers/scsi/libiscsi_tcp.c:544:
+	rc = __kfifo_get(&tcp_task->r2tpool.queue, (void*)&r2t, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1138: FILE: drivers/scsi/libiscsi_tcp.c:557:
+		__kfifo_put(&tcp_task->r2tpool.queue, (void*)&r2t,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1147: FILE: drivers/scsi/libiscsi_tcp.c:573:
+		__kfifo_put(&tcp_task->r2tpool.queue, (void*)&r2t,

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1156: FILE: drivers/scsi/libiscsi_tcp.c:583:
+	__kfifo_put(&tcp_task->r2tqueue, (void*)&r2t, sizeof(void*));

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1156: FILE: drivers/scsi/libiscsi_tcp.c:583:
+	__kfifo_put(&tcp_task->r2tqueue, (void*)&r2t, sizeof(void*));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: drivers/scsi/libiscsi_tcp.c:954:
+	BUG_ON(__kfifo_len(&tcp_task->r2tqueue));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1195: FILE: drivers/scsi/libiscsi_tcp.c:1131:
+		if (kfifo_alloc(&tcp_task->r2tqueue,
+		      session->max_r2t * 4 * sizeof(void*), GFP_KERNEL, NULL)) {

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1195: FILE: drivers/scsi/libiscsi_tcp.c:1131:
+		      session->max_r2t * 4 * sizeof(void*), GFP_KERNEL, NULL)) {

CHECK:SPACING: No space is necessary after a cast
#1228: FILE: drivers/scsi/libsrp.c:61:
+	kfifo_init(&q->queue, (void *) q->pool, max * sizeof(void *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: drivers/scsi/libsrp.c:62:
+	kfifo_init(&q->queue, (void *) q->pool, max * sizeof(void *),
+			      &q->lock);

CHECK:SPACING: No space is necessary after a cast
#1233: FILE: drivers/scsi/libsrp.c:65:
+		__kfifo_put(&q->queue, (void *) &iue, sizeof(void *));

CHECK:SPACING: No space is necessary after a cast
#1242: FILE: drivers/scsi/libsrp.c:168:
+	kfifo_get(&target->iu_queue.queue, (void *) &iue, sizeof(void *));

CHECK:SPACING: No space is necessary after a cast
#1251: FILE: drivers/scsi/libsrp.c:180:
+	kfifo_put(&iue->target->iu_queue.queue, (void *) &iue, sizeof(void *));

WARNING:TYPO_SPELLING: 'overun' may be misspelled - perhaps 'overrun'?
#1267: FILE: drivers/usb/host/fhci.h:428:
+	struct kfifo dummy_packets_Q;/* dummy packets for the CRC overun */
 	                                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1434: FILE: drivers/usb/serial/usb-serial.c:970:
+		if (kfifo_alloc(&port->write_fifo, PAGE_SIZE, GFP_KERNEL,
+			&port->lock))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: include/linux/kfifo.h:36:
+extern void kfifo_init(struct kfifo *fifo, unsigned char *buffer,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: include/linux/kfifo.h:37:
+extern void kfifo_init(struct kfifo *fifo, unsigned char *buffer,
+			unsigned int size, spinlock_t *lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1460: FILE: include/linux/kfifo.h:38:
+extern __must_check int kfifo_alloc(struct kfifo *fifo, unsigned int size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1461: FILE: include/linux/kfifo.h:39:
+extern __must_check int kfifo_alloc(struct kfifo *fifo, unsigned int size,
+			gfp_t gfp_mask, spinlock_t *lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1526: FILE: kernel/kfifo.c:31:
+static void _kfifo_init(struct kfifo *fifo, unsigned char *buffer,
+		unsigned int size, spinlock_t *lock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1550: FILE: kernel/kfifo.c:49:
+void kfifo_init(struct kfifo *fifo, unsigned char *buffer, unsigned int size,
+			spinlock_t *lock)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1588: FILE: kernel/kfifo.c:72:
+int kfifo_alloc(struct kfifo *fifo, unsigned int size, gfp_t gfp_mask,
+			spinlock_t *lock)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 2 warnings, 34 checks, 1432 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
