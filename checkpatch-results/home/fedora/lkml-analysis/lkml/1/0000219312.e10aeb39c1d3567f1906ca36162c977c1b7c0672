WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#73: 
only map one block at a time, you will just end up with an "extent" for each

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: fs/ext2/ext2.h:136:
+extern int ext2_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'blk' may be better as '(blk)' to avoid precedence issues
#198: FILE: fs/ioctl.c:229:
+#define blk_to_logical(inode, blk) (blk << (inode)->i_blkbits)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'offset' may be better as '(offset)' to avoid precedence issues
#199: FILE: fs/ioctl.c:230:
+#define logical_to_blk(inode, offset) (offset >> (inode)->i_blkbits);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#199: FILE: fs/ioctl.c:230:
+#define logical_to_blk(inode, offset) (offset >> (inode)->i_blkbits);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#225: FILE: fs/ioctl.c:256:
+	if ((ret = fiemap_check_flags(fieinfo, FIEMAP_FLAG_SYNC)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: fs/ioctl.c:286:
+				flags = FIEMAP_EXTENT_MERGED|FIEMAP_EXTENT_LAST;
 				                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: include/linux/ext3_fs.h:840:
+extern int ext3_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: include/linux/fs.h:2001:
+extern int generic_block_fiemap(struct inode *inode,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219312.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 6 checks, 206 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000219312.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
