CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: include/linux/rcupdate.h:256:
+extern void init_rcu_boost_late(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: include/linux/rcupdate.h:257:
+extern void __rcu_preempt_boost(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#115: FILE: include/linux/rcupdate.h:267:
+}
+static inline void rcu_preempt_boost(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#160: FILE: include/linux/sched.h:550:
+#define set_rcu_prio(p, prio) /* cpp to avoid #include hell */ \
+	do { \
+		(p)->rcu_prio = (prio); \
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#164: FILE: include/linux/sched.h:554:
+#define get_rcu_prio(p) (p)->rcu_prio  /* cpp to avoid #include hell */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#169: FILE: include/linux/sched.h:559:
+}
+static inline int get_rcu_prio(struct task_struct *p)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#238: FILE: kernel/Kconfig.preempt:94:
+config PREEMPT_RCU_BOOST
+	bool "Enable priority boosting of RCU read-side critical sections"
+	depends on PREEMPT_RCU
+	default n
 	help
+	  This option permits priority boosting of RCU read-side critical
+	  This option permits priority boosting of RCU read-side critical
+	  This option permits priority boosting of RCU read-side critical
+	  sections that have been preempted in order to prevent indefinite
+	  delay of grace periods in face of runaway non-realtime processes.
 
 	  Say N if you are unsure.
 	  Say N if you are unsure.

Kconfig symbols should have a help text which fully describes
it.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#266: FILE: kernel/rcupreempt.c:62:
+#define ORDERED_WRT_IRQ(x) (*(volatile typeof(x) *)&(x))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#301: FILE: kernel/rcupreempt.c:121:
+};
+#define RCU_BOOST_ELEMENTS 4

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#316: FILE: kernel/rcupreempt.c:136:
+	if (oldstate >= RCU_BOOST_IDLE && oldstate <= RCU_BOOSTED) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '+=' should be on the previous line
#408: FILE: kernel/rcupreempt.c:228:
+					sum.rbs_stats[event][state]
+					    += per_cpu(rcu_boost_dat,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#415: FILE: kernel/rcupreempt.c:235:
+	printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#417: FILE: kernel/rcupreempt.c:237:
+	       "rcu_boost_dat: idx=%d "
+	       "b=%lu ul=%lu ub=%lu boost: a=%lu b=%lu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#427: FILE: kernel/rcupreempt.c:247:
+		printk(KERN_INFO "rcu_boost_dat %s %s\n",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#442: FILE: kernel/rcupreempt.c:262:
+}
+static inline void rcu_boost_dat_stat_boost(struct rcu_boost_dat *rbdp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#446: FILE: kernel/rcupreempt.c:266:
+}
+static inline void rcu_boost_dat_stat_unlock(struct rcu_boost_dat *rbdp,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#450: FILE: kernel/rcupreempt.c:270:
+}
+static void rcu_boost_dat_stat_print(void)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#588: FILE: kernel/rcupreempt.c:408:
+	while (!list_empty(&list)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#644: FILE: kernel/rcupreempt.c:464:
+	do {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#649: FILE: kernel/rcupreempt.c:469:
+		for_each_possible_cpu(cpu) {
+

WARNING:TYPO_SPELLING: 'unstalled' may be misspelled - perhaps 'installed'?
#669: FILE: kernel/rcupreempt.c:489:
+		 * Sleep to allow any unstalled RCU read-side critical
 		                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#691: FILE: kernel/rcupreempt.c:511:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#694: FILE: kernel/rcupreempt.c:514:
+	printk(KERN_INFO "Starting RCU priority booster\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rbdp"
#715: FILE: kernel/rcupreempt.c:535:
+	if (rbdp == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#717: FILE: kernel/rcupreempt.c:537:
+		printk(KERN_INFO

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#731: FILE: kernel/rcupreempt.c:551:
+	if (current->rcub_state != RCU_BOOST_IDLE) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#792: FILE: kernel/rcupreempt.c:612:
+{
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#990: FILE: kernel/rcupreempt.c:1180:
 void __devinit rcu_online_cpu_rt(int cpu)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382568.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 16 checks, 1017 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382568.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
