ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#81: FILE: fs/unionfs/commonfops.c:587:
+	if ((err = unionfs_file_revalidate(file, 1)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: fs/unionfs/commonfops.c:590:
+	BUG_ON(file->f_dentry->d_inode != inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#207: FILE: fs/unionfs/file.c:54:
+	if ((err = unionfs_file_revalidate(file, 0)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#246: FILE: fs/unionfs/file.c:70:
 }
+static ssize_t unionfs_write(struct file * file, const char __user * buf,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: fs/unionfs/file.c:70:
+static ssize_t unionfs_write(struct file * file, const char __user * buf,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#246: FILE: fs/unionfs/file.c:70:
+static ssize_t unionfs_write(struct file * file, const char __user * buf,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#263: FILE: fs/unionfs/file.c:77:
+	if ((err = unionfs_file_revalidate(file, 1)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#351: FILE: fs/unionfs/file.c:106:
+	if ((err = unionfs_file_revalidate(file, willwrite)))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: fs/unionfs/file.c:122:
+		printk("unionfs: branch %d file system does not support "

WARNING:SPLIT_STRING: quoted string split across lines
#372: FILE: fs/unionfs/file.c:123:
+		printk("unionfs: branch %d file system does not support "
+		       "writeable mmap\n", fbstart(file));

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#376: FILE: fs/unionfs/file.c:127:
+			printk("unionfs: generic_file_mmap failed %d\n", err);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#416: FILE: fs/unionfs/inode.c:1026:
+				printk("unionfs_setattr: vmtruncate failed\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unionfs_setattr', this function's name, in a string
#416: FILE: fs/unionfs/inode.c:1026:
+				printk("unionfs_setattr: vmtruncate failed\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#441: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#446: FILE: fs/unionfs/mmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#526: FILE: fs/unionfs/mmap.c:81:
+	BUG_ON(!lower_inode->i_mapping->a_ops->writepage);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#540: FILE: fs/unionfs/mmap.c:95:
+	lower_inode->i_mtime = lower_inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!UNIONFS_F"
#572: FILE: fs/unionfs/mmap.c:127:
+	if (UNIONFS_F(file) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#586: FILE: fs/unionfs/mmap.c:141:
+				     (filler_t *) lower_inode->i_mapping->

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lower_inode->i_mapping->a_ops->readpage'
#587: FILE: fs/unionfs/mmap.c:142:
+				     (filler_t *) lower_inode->i_mapping->
+				     a_ops->readpage, (void *)lower_file);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#652: FILE: fs/unionfs/mmap.c:207:
+	if ((err = unionfs_file_revalidate(file, 0)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#673: FILE: fs/unionfs/mmap.c:228:
+int unionfs_prepare_write(struct file *file, struct page *page, unsigned from,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#674: FILE: fs/unionfs/mmap.c:229:
+			  unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#687: FILE: fs/unionfs/mmap.c:242:
+int unionfs_commit_write(struct file *file, struct page *page, unsigned from,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#688: FILE: fs/unionfs/mmap.c:243:
+			 unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#694: FILE: fs/unionfs/mmap.c:249:
+	unsigned bytes = to - from;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#698: FILE: fs/unionfs/mmap.c:253:
+	BUG_ON(file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#698: FILE: fs/unionfs/mmap.c:253:
+	BUG_ON(file == NULL);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#702: FILE: fs/unionfs/mmap.c:257:
+	if ((err = unionfs_file_revalidate(file, 1)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UNIONFS_F"
#708: FILE: fs/unionfs/mmap.c:263:
+	if (UNIONFS_F(file) != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#712: FILE: fs/unionfs/mmap.c:267:
+	BUG_ON(lower_file == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lower_file"
#712: FILE: fs/unionfs/mmap.c:267:
+	BUG_ON(lower_file == NULL);

CHECK:SPACING: No space is necessary after a cast
#736: FILE: fs/unionfs/mmap.c:291:
+	pos = ((loff_t) page->index << PAGE_CACHE_SHIFT) + to;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#744: FILE: fs/unionfs/mmap.c:299:
+	lower_inode->i_mtime = lower_inode->i_ctime = CURRENT_TIME;

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#787: FILE: fs/unionfs/mmap.c:342:
+struct address_space_operations unionfs_aops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#803: FILE: fs/unionfs/super.c:29:
+	extern struct address_space_operations unionfs_aops;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#803: FILE: fs/unionfs/super.c:29:
+	extern struct address_space_operations unionfs_aops;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416955.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 20 warnings, 9 checks, 744 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000416955.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
