WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
> > > - recvmsg not supporting MSG_TRUNC is rather weird and really ought to be

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kiocb *' should also have an identifier name
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct socket *' should also have an identifier name
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct msghdr *' should also have an identifier name
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#315: FILE: net/rxrpc/ar-internal.h:585:
+extern int rxrpc_recvmsg(struct kiocb *, struct socket *, struct msghdr *,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#323: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#328: FILE: net/rxrpc/ar-recvmsg.c:1:
+/* RxRPC recvmsg() implementation

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#346: FILE: net/rxrpc/ar-recvmsg.c:19:
+/*
+ * removal a call's user ID from the socket tree to make the user ID available

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#368: FILE: net/rxrpc/ar-recvmsg.c:41:
+/*
+ * receive a message from an RxRPC socket

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#397: FILE: net/rxrpc/ar-recvmsg.c:70:
+		 * calls */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INDENTED_LABEL: labels should not be indented
#433: FILE: net/rxrpc/ar-recvmsg.c:106:
+	peek_next_packet:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "call"
#436: FILE: net/rxrpc/ar-recvmsg.c:109:
+		ASSERT(call != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: net/rxrpc/ar-recvmsg.c:120:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: net/rxrpc/ar-recvmsg.c:216:
+					BUG();

CHECK:SPACING: No space is necessary after a cast
#561: FILE: net/rxrpc/ar-recvmsg.c:234:
+			if (skb == (struct sk_buff *) &rx->sk.sk_receive_queue)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#568: FILE: net/rxrpc/ar-recvmsg.c:241:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#584: FILE: net/rxrpc/ar-recvmsg.c:257:
+	 * final ACKs */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#595: FILE: net/rxrpc/ar-recvmsg.c:268:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: net/rxrpc/ar-recvmsg.c:282:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: net/rxrpc/ar-recvmsg.c:305:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#647: FILE: net/rxrpc/ar-recvmsg.c:320:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#689: FILE: net/rxrpc/ar-recvmsg.c:362:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453431.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 4 checks, 598 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000453431.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
