CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#95: FILE: fs/9p/9p.h:34:
+#define P9_DEBUG_ERROR		(1<<0)
                       		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#95: FILE: fs/9p/9p.h:34:
+#define P9_DEBUG_ERROR		(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#96: FILE: fs/9p/9p.h:35:
+#define P9_DEBUG_9P	        (1<<2)
                    	          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#96: FILE: fs/9p/9p.h:35:
+#define P9_DEBUG_9P	        (1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#97: FILE: fs/9p/9p.h:36:
+#define P9_DEBUG_VFS	        (1<<3)
                     	          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: fs/9p/9p.h:36:
+#define P9_DEBUG_VFS	        (1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#98: FILE: fs/9p/9p.h:37:
+#define P9_DEBUG_CONV		(1<<4)
                      		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#98: FILE: fs/9p/9p.h:37:
+#define P9_DEBUG_CONV		(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#99: FILE: fs/9p/9p.h:38:
+#define P9_DEBUG_MUX		(1<<5)
                     		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#99: FILE: fs/9p/9p.h:38:
+#define P9_DEBUG_MUX		(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#100: FILE: fs/9p/9p.h:39:
+#define P9_DEBUG_TRANS		(1<<6)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#100: FILE: fs/9p/9p.h:39:
+#define P9_DEBUG_TRANS		(1<<6)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#101: FILE: fs/9p/9p.h:40:
+#define P9_DEBUG_SLABS^I      ^I(1<<7)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#101: FILE: fs/9p/9p.h:40:
+#define P9_DEBUG_SLABS	      	(1<<7)
                       	      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#101: FILE: fs/9p/9p.h:40:
+#define P9_DEBUG_SLABS	      	(1<<7)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#102: FILE: fs/9p/9p.h:41:
+#define P9_DEBUG_FCALL		(1<<8)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#102: FILE: fs/9p/9p.h:41:
+#define P9_DEBUG_FCALL		(1<<8)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#106: FILE: fs/9p/9p.h:45:
+#define P9_DPRINTK(level, format, arg...) \
+do {  \
+	if((p9_debug_level & level)==level) \
+		printk(KERN_NOTICE "-- %s (%d): " \
+		format , __FUNCTION__, current->pid , ## arg); \
+} while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#106: FILE: fs/9p/9p.h:45:
+#define P9_DPRINTK(level, format, arg...) \
+do {  \
+	if((p9_debug_level & level)==level) \
+		printk(KERN_NOTICE "-- %s (%d): " \
+		format , __FUNCTION__, current->pid , ## arg); \
+} while(0)

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#108: FILE: fs/9p/9p.h:47:
+	if((p9_debug_level & level)==level) \
 	                           ^

ERROR:SPACING: space required before the open parenthesis '('
#108: FILE: fs/9p/9p.h:47:
+	if((p9_debug_level & level)==level) \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#109: FILE: fs/9p/9p.h:48:
+		printk(KERN_NOTICE "-- %s (%d): " \

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#110: FILE: fs/9p/9p.h:49:
+		format , __FUNCTION__, current->pid , ## arg); \
 		       ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#110: FILE: fs/9p/9p.h:49:
+		format , __FUNCTION__, current->pid , ## arg); \
 		                                    ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#110: FILE: fs/9p/9p.h:49:
+		format , __FUNCTION__, current->pid , ## arg); \

ERROR:SPACING: space required before the open parenthesis '('
#111: FILE: fs/9p/9p.h:50:
+} while(0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#113: FILE: fs/9p/9p.h:52:
+#define PRINT_FCALL_ERROR(s, fcall) P9_DPRINTK(P9_DEBUG_ERROR, "%s:

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#114: FILE: fs/9p/9p.h:52:
%.*s\n", s, \

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#116: FILE: fs/9p/9p.h:54:
+	fcall?fcall->params.rerror.error.str:"");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#125: FILE: fs/9p/9p.h:63:
+	printk(level "9p: %s (%d): " \

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#125: FILE: fs/9p/9p.h:63:
+	printk(level "9p: %s (%d): " \
 	                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#125: FILE: fs/9p/9p.h:63:
+	printk(level "9p: %s (%d): " \
 	                  ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#125: FILE: fs/9p/9p.h:63:
+	printk(level "9p: %s (%d): " \
 	                      ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#125: FILE: fs/9p/9p.h:63:
+	printk(level "9p: %s (%d): " \
 	                         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: fs/9p/9p.h:64:
+        ^Iformat , __FUNCTION__, current->pid , ## arg); \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: fs/9p/9p.h:64:
+        ^Iformat , __FUNCTION__, current->pid , ## arg); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: fs/9p/9p.h:64:
+        ^Iformat , __FUNCTION__, current->pid , ## arg); \$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#129: FILE: fs/9p/9p.h:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: fs/9p/9p.h:184:
+   The is similar to p9_stat, but the strings don't point to$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/9p/9p.h:382:
+int p9_deserialize_stat(void *buf, u32 buflen, struct p9_stat *stat,
+	int dotu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: fs/9p/9p.h:387:
+struct p9_fcall *p9_create_tattach(u32 fid, u32 afid, char *uname,
+	char *aname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#637: FILE: fs/9p/9p.h:391:
+struct p9_fcall *p9_create_twalk(u32 fid, u32 newfid, u16 nwname,
+	char **wnames);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: fs/9p/9p.h:394:
+struct p9_fcall *p9_create_tcreate(u32 fid, char *name, u32 perm, u8 mode,
+	char *extension, int dotu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: fs/9p/9p.h:397:
+struct p9_fcall *p9_create_twrite(u32 fid, u64 offset, u32 count,
+	const char *data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#645: FILE: fs/9p/9p.h:399:
+struct p9_fcall *p9_create_twrite_u(u32 fid, u64 offset, u32 count,
+	const char __user *data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: fs/9p/9p.h:404:
+struct p9_fcall *p9_create_twstat(u32 fid, struct p9_wstat *wstat,
+	int dotu);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_idpool *' should also have an identifier name
#656: FILE: fs/9p/9p.h:410:
+void p9_idpool_destroy(struct p9_idpool *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#675: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#680: FILE: fs/9p/conn.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#700: FILE: fs/9p/conn.h:21:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: fs/9p/conn.h:44:
+struct p9_conn *p9_conn_create(struct p9_transport *trans, int msize,
+	unsigned char *dotu);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_conn *' should also have an identifier name
#724: FILE: fs/9p/conn.h:45:
+void p9_conn_destroy(struct p9_conn *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#726: FILE: fs/9p/conn.h:47:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: fs/9p/conn.h:49:
+int p9_conn_rpcnb(struct p9_conn *m, struct p9_fcall *tc,
+	p9_conn_req_callback cb, void *a);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: fs/9p/conv.c:60:
+			P9_EPRINTK(KERN_ERR, "buffer overflow: want %d has %d\n",
 				len, (int)(buf->ep - buf->p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: fs/9p/conv.c:297:
+p9_deserialize_stat(void *buf, u32 buflen, struct p9_stat *stat,
+		int dotu)

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#897: FILE: fs/9p/conv.c:325:
+p9_deserialize_fcall(void *buf, u32 buflen, struct p9_fcall *rcall,
                                                              ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: fs/9p/conv.c:326:
+p9_deserialize_fcall(void *buf, u32 buflen, struct p9_fcall *rcall,
+		       int dotu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: fs/9p/conv.c:340:
+	P9_DPRINTK(P9_DEBUG_CONV, "size %d id %d tag %d\n", rcall->size, rcall->id,
 		rcall->tag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: fs/9p/conv.c:361:
+			P9_EPRINTK(KERN_ERR, "Rwalk with more than %d qids: %d\n",
+				P9_MAXWELEM, rcall->params.rwalk.nwqid);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1000: FILE: fs/9p/conv.c:410:
+static inline void p9_put_int8(struct cbuf *bufp, u8 val, u8 * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1007: FILE: fs/9p/conv.c:416:
+static inline void p9_put_int16(struct cbuf *bufp, u16 val, u16 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1014: FILE: fs/9p/conv.c:422:
+static inline void p9_put_int32(struct cbuf *bufp, u32 val, u32 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1021: FILE: fs/9p/conv.c:428:
+static inline void p9_put_int64(struct cbuf *bufp, u64 val, u64 * p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1040: FILE: fs/9p/conv.c:454:
+p9_put_data(struct cbuf *bufp, const char *data, int count,
+		   unsigned char **pdata)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1048: FILE: fs/9p/conv.c:462:
+p9_put_user_data(struct cbuf *bufp, const char __user * data, int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1049: FILE: fs/9p/conv.c:463:
+p9_put_user_data(struct cbuf *bufp, const char __user * data, int count,
 		   unsigned char **pdata)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: fs/9p/conv.c:471:
+p9_put_wstat(struct cbuf *bufp, struct p9_wstat *wstat,
+	       struct p9_stat *stat, int statsz, int dotu)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#1115: FILE: fs/9p/conv.c:503:
+	fc = kmalloc(sizeof(struct p9_fcall) + size, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1263: FILE: fs/9p/conv.c:620:
+struct p9_fcall *p9_create_twalk(u32 fid, u32 newfid, u16 nwname,
 				     char **wnames)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: fs/9p/conv.c:682:
+struct p9_fcall *p9_create_tcreate(u32 fid, char *name, u32 perm, u8 mode,
+	char *extension, int dotu)

WARNING:INDENTED_LABEL: labels should not be indented
#1403: FILE: fs/9p/conv.c:735:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1409: FILE: fs/9p/conv.c:741:
+struct p9_fcall *p9_create_twrite(u32 fid, u64 offset, u32 count,
+				      const char *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: fs/9p/conv.c:772:
+struct p9_fcall *p9_create_twrite_u(u32 fid, u64 offset, u32 count,
 				      const char __user * data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: fs/9p/conv.c:872:
+struct p9_fcall *p9_create_twstat(u32 fid, struct p9_wstat *wstat,
+				      int dotu)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1791: FILE: fs/9p/error.c:85:
+	{"Function not implemented", ENOSYS},

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2167: FILE: fs/9p/fcall.c:81:
+	struct p9_fcall* tc;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2171: FILE: fs/9p/fcall.c:84:
+	P9_DPRINTK(P9_DEBUG_9P, "uname '%s' aname '%s' fid %d afid %d\n", uname,
 		aname, fid, afid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2189: FILE: fs/9p/fcall.c:97:
+static void v9fs_t_clunk_cb(void *a, struct p9_fcall *tc,
+	struct p9_fcall *rc, int err)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2382: FILE: fs/9p/fcall.c:337:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d name '%s' perm %x mode %d\n",
 		fid, name, perm, mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2386: FILE: fs/9p/fcall.c:340:
+	tc = p9_create_tcreate(fid, name, perm, mode, extension,
 		v9ses->extended);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#2407: FILE: fs/9p/fcall.c:368:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,

Prefixing 0x with decimal output is defective and should be corrected.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2408: FILE: fs/9p/fcall.c:369:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,
 		(long long unsigned) offset, count);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#2431: FILE: fs/9p/fcall.c:405:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2432: FILE: fs/9p/fcall.c:406:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset 0x%llux count 0x%x\n", fid,
 		(long long unsigned) offset, count);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2549: FILE: fs/9p/fcprint.c:106:
+	n += p9_printqid(buf+n, buflen-n, &st->qid);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2549: FILE: fs/9p/fcprint.c:106:
+	n += p9_printqid(buf+n, buflen-n, &st->qid);
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2552: FILE: fs/9p/fcprint.c:108:
+	n += p9_printperm(buf+n, buflen-n, st->mode);
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2552: FILE: fs/9p/fcprint.c:108:
+	n += p9_printperm(buf+n, buflen-n, st->mode);
 	                               ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#2575: FILE: fs/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2575: FILE: fs/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2575: FILE: fs/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2619: FILE: fs/9p/fcprint.c:182:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rauth.qid);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2619: FILE: fs/9p/fcprint.c:182:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rauth.qid);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2636: FILE: fs/9p/fcprint.c:195:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rattach.qid);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2636: FILE: fs/9p/fcprint.c:195:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rattach.qid);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2676: FILE: fs/9p/fcprint.c:231:
+			ret += p9_printqid(buf+ret, buflen-ret,
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2676: FILE: fs/9p/fcprint.c:231:
+			ret += p9_printqid(buf+ret, buflen-ret,
 			                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2691: FILE: fs/9p/fcprint.c:243:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.ropen.qid);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2691: FILE: fs/9p/fcprint.c:243:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.ropen.qid);
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2704: FILE: fs/9p/fcprint.c:254:
+		ret += p9_printperm(buf+ret, buflen-ret, fc->params.tcreate.perm);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2704: FILE: fs/9p/fcprint.c:254:
+		ret += p9_printperm(buf+ret, buflen-ret, fc->params.tcreate.perm);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2713: FILE: fs/9p/fcprint.c:261:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.rcreate.qid);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2713: FILE: fs/9p/fcprint.c:261:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.rcreate.qid);
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2734: FILE: fs/9p/fcprint.c:278:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.rread.data,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2734: FILE: fs/9p/fcprint.c:278:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.rread.data,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2746: FILE: fs/9p/fcprint.c:288:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.twrite.data,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2746: FILE: fs/9p/fcprint.c:288:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.twrite.data,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2788: FILE: fs/9p/fcprint.c:322:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.rstat.stat,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2788: FILE: fs/9p/fcprint.c:322:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.rstat.stat,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2797: FILE: fs/9p/fcprint.c:329:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.twstat.stat,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2797: FILE: fs/9p/fcprint.c:329:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.twstat.stat,
 		                                   ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2820: FILE: fs/9p/fcprint.c:353:
+EXPORT_SYMBOL(p9_printfcall);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2843: FILE: fs/9p/fid.c:45:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d (%p) dentry %s (%p)\n", fid->fid, fid,
 		dentry->d_iname, dentry);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#2981: FILE: fs/9p/mux.c:60:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3007: FILE: fs/9p/mux.c:80:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3030: FILE: fs/9p/mux.c:104:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3041: FILE: fs/9p/mux.c:111:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                                      ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3041: FILE: fs/9p/mux.c:111:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3042: FILE: fs/9p/mux.c:112:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
 			  poll_table * p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3137: FILE: fs/9p/mux.c:173:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p muxnum %d procnum %d\n", m, p9_mux_num,
+		p9_mux_poll_task_num);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p9_mux_poll_tasks[i].task"
#3143: FILE: fs/9p/mux.c:179:
+			if (p9_mux_poll_tasks[i].task == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3147: FILE: fs/9p/mux.c:183:
+				pproc = kthread_create(p9_poll_proc, vpt,
 						   "v9fs-poll");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3256: FILE: fs/9p/mux.c:272:
+struct p9_conn *p9_conn_create(struct p9_transport *trans, int msize,
 				    unsigned char *extended)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct p9_conn)...)
#3265: FILE: fs/9p/mux.c:278:
+	m = kmalloc(sizeof(struct p9_conn), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3338: FILE: fs/9p/mux.c:342:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p prev %p next %p\n", m,
 		m->mux_list.prev, m->mux_list.next);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3346: FILE: fs/9p/mux.c:348:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p waiting for empty request queue\n",
 			m);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3350: FILE: fs/9p/mux.c:351:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p request queue empty: %d\n", m,
 			list_empty(&m->req_list));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3369: FILE: fs/9p/mux.c:366:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3369: FILE: fs/9p/mux.c:366:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3370: FILE: fs/9p/mux.c:367:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
 	      poll_table * p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3506: FILE: fs/9p/mux.c:484:
+		req = list_entry(m->unsent_req_list.next, struct p9_req,
 			       req_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3577: FILE: fs/9p/mux.c:558:
+		P9_DPRINTK(P9_DEBUG_ERROR, "fcall mismatch: expected %d, got %d\n",
 			req->tcall->id + 1, req->rcall->id);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3597: FILE: fs/9p/mux.c:572:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3620: FILE: fs/9p/mux.c:591:
+		m->rbuf = (char *)m->rcall + sizeof(struct p9_fcall);
 		                     ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3637: FILE: fs/9p/mux.c:611:
+			P9_DPRINTK(P9_DEBUG_ERROR,
 				"requested packet size too big: %d\n", n);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3647: FILE: fs/9p/mux.c:620:
+		    p9_deserialize_fcall(m->rbuf, n, m->rcall, *m->extended);
 		                                        ^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3654: FILE: fs/9p/mux.c:626:
+		if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 		                   ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3658: FILE: fs/9p/mux.c:629:
+			p9_printfcall(buf, sizeof(buf), m->rcall,
 			                                   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3659: FILE: fs/9p/mux.c:630:
+			p9_printfcall(buf, sizeof(buf), m->rcall,
 				*m->extended);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3668: FILE: fs/9p/mux.c:638:
+			m->rcall = kmalloc(sizeof(struct p9_fcall) + m->msize,
 			   ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m->rcall)...) over kmalloc(sizeof(struct p9_fcall)...)
#3668: FILE: fs/9p/mux.c:638:
+			m->rcall = kmalloc(sizeof(struct p9_fcall) + m->msize,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3676: FILE: fs/9p/mux.c:645:
+			m->rbuf = (char *)m->rcall + sizeof(struct p9_fcall);
 			                     ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3686: FILE: fs/9p/mux.c:655:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p fcall id %d tag %d\n", m, rcall->id,
 			rcall->tag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3697: FILE: fs/9p/mux.c:684:
+				P9_DPRINTK(P9_DEBUG_ERROR,
 					"unexpected response mux %p id %d tag %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3734: FILE: fs/9p/mux.c:724:
+static struct p9_req *p9_send_request(struct p9_conn *m,
+					  struct p9_fcall *tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3743: FILE: fs/9p/mux.c:731:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p task %p tcall %p id %d\n", m, current,
 		tc, tc->id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct p9_req)...)
#3748: FILE: fs/9p/mux.c:735:
+	req = kmalloc(sizeof(struct p9_req), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#3768: FILE: fs/9p/mux.c:750:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3813: FILE: fs/9p/mux.c:797:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p tc %p rc %p err %d oldtag %d\n", m,
 		freq->tcall, freq->rcall, freq->err,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3896: FILE: fs/9p/mux.c:896:
+p9_conn_rpc(struct p9_conn *m, struct p9_fcall *tc,
+	     struct p9_fcall **rc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3956: FILE: fs/9p/mux.c:972:
+int p9_conn_rpcnb(struct p9_conn *m, struct p9_fcall *tc,
+		   p9_conn_req_callback cb, void *a)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4114: FILE: fs/9p/trans_fd.c:54:
+static unsigned int p9_fd_poll(struct p9_transport *trans,
+	struct poll_table_struct *pt);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#4125: FILE: fs/9p/trans_fd.c:65:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4150: FILE: fs/9p/trans_fd.c:90:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_tcp: problem connecting socket to %s\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#4178: FILE: fs/9p/trans_fd.c:118:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4189: FILE: fs/9p/trans_fd.c:129:
+		P9_EPRINTK(KERN_ERR, "p9_trans_unix: address too long: %s\n",
+			addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4201: FILE: fs/9p/trans_fd.c:141:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_unix: problem connecting socket: %s: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4227: FILE: fs/9p/trans_fd.c:167:
+		printk(KERN_ERR "v9fs: Insufficient options for proto=fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#4231: FILE: fs/9p/trans_fd.c:171:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'p9_socket_open', this function's name, in a string
#4259: FILE: fs/9p/trans_fd.c:199:
+		P9_EPRINTK(KERN_ERR, "p9_socket_open: failed to map fd\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'p9_socket_open', this function's name, in a string
#4265: FILE: fs/9p/trans_fd.c:205:
+		P9_EPRINTK(KERN_ERR, "p9_socket_open: failed to open fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ts)...) over kmalloc(sizeof(struct p9_trans_fd)...)
#4277: FILE: fs/9p/trans_fd.c:217:
+	struct p9_trans_fd *ts = kmalloc(sizeof(struct p9_trans_fd),

CHECK:CAMELCASE: Avoid CamelCase: <Connected>
#4294: FILE: fs/9p/trans_fd.c:234:
+	trans->status = Connected;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: Unnecessary space before function pointer arguments
#4567: FILE: fs/9p/transport.h:39:
+	int (*write) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_transport *' should also have an identifier name
#4567: FILE: fs/9p/transport.h:39:
+	int (*write) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4567: FILE: fs/9p/transport.h:39:
+	int (*write) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4567: FILE: fs/9p/transport.h:39:
+	int (*write) (struct p9_transport *, void *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4568: FILE: fs/9p/transport.h:40:
+	int (*read) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_transport *' should also have an identifier name
#4568: FILE: fs/9p/transport.h:40:
+	int (*read) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4568: FILE: fs/9p/transport.h:40:
+	int (*read) (struct p9_transport *, void *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4568: FILE: fs/9p/transport.h:40:
+	int (*read) (struct p9_transport *, void *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4569: FILE: fs/9p/transport.h:41:
+	void (*close) (struct p9_transport *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_transport *' should also have an identifier name
#4569: FILE: fs/9p/transport.h:41:
+	void (*close) (struct p9_transport *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_transport *' should also have an identifier name
#4570: FILE: fs/9p/transport.h:42:
+	unsigned int (*poll)(struct p9_transport *, struct poll_table_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct poll_table_struct *' should also have an identifier name
#4570: FILE: fs/9p/transport.h:42:
+	unsigned int (*poll)(struct p9_transport *, struct poll_table_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4587: FILE: fs/9p/util.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4608: FILE: fs/9p/util.c:22:
+ *  51 Franklin Street, Fifth Floor$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct p9_idpool)...)
#4630: FILE: fs/9p/util.c:44:
+	p = kmalloc(sizeof(struct p9_idpool), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "idr_find"
#4709: FILE: fs/9p/util.c:123:
+	return idr_find(&p->pool, id) != NULL;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#4733: FILE: fs/9p/v9fs.c:39:
+unsigned int p9_debug_level = 0;	/* feature-rific global debug level  */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4744: FILE: fs/9p/v9fs.c:124:
+				P9_DPRINTK(P9_DEBUG_ERROR,
 					"integer field, but no integer?\n");

CHECK:CAMELCASE: Avoid CamelCase: <SessCleanUp>
#4847: FILE: fs/9p/v9fs.c:238:
+		goto SessCleanUp;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4893: FILE: fs/9p/v9fs.c:271:
+	v9ses->conn = p9_conn_create(v9ses->transport, v9ses->maxdata + P9_IOHDRSZ,
 		&v9ses->extended);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5005: FILE: fs/9p/v9fs.c:393:
+extern int p9_mux_global_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#5006: FILE: fs/9p/v9fs.c:394:
+extern void p9_mux_global_exit(void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5023: FILE: fs/9p/v9fs.c:409:
+		printk(KERN_WARNING "9p: starting mux failed\n");

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5091: FILE: fs/9p/v9fs.h:81:
+		   char *version, struct p9_fcall **rcall);
 		                                    ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5094: FILE: fs/9p/v9fs.h:84:
+		  u32 fid, u32 afid, struct p9_fcall **rcall);
 		                                       ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5099: FILE: fs/9p/v9fs.h:89:
+		struct p9_fcall **rcall);
 		                  ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5102: FILE: fs/9p/v9fs.h:92:
+		 struct p9_wstat *wstat, struct p9_fcall **rcall);
 		                                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5105: FILE: fs/9p/v9fs.h:95:
+		char *name, struct p9_fcall **rcall);
 		                              ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5108: FILE: fs/9p/v9fs.h:98:
+		struct p9_fcall **rcall);
 		                  ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5111: FILE: fs/9p/v9fs.h:101:
+		  struct p9_fcall **rcall);
 		                    ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5114: FILE: fs/9p/v9fs.h:104:
+	u32 perm, u8 mode, char *extension, struct p9_fcall **rcall);
 	                                                      ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5114: FILE: fs/9p/v9fs.h:104:
+int v9fs_t_create(struct v9fs_session_info *v9ses, u32 fid, char *name,
+	u32 perm, u8 mode, char *extension, struct p9_fcall **rcall);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5117: FILE: fs/9p/v9fs.h:107:
+		u64 offset, u32 count, struct p9_fcall **rcall);
 		                                         ^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5120: FILE: fs/9p/v9fs.h:110:
+		 u32 count, const char __user * data,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5121: FILE: fs/9p/v9fs.h:111:
+		 struct p9_fcall **rcall);
 		                   ^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct p9_stat *' should also have an identifier name
#5137: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_stat *, struct inode *, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#5137: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_stat *, struct inode *, struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#5137: FILE: fs/9p/v9fs_vfs.h:49:
+void v9fs_stat2inode(struct p9_stat *, struct inode *, struct super_block *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5228: FILE: fs/9p/vfs_dentry.c:100:
+				P9_DPRINTK(P9_DEBUG_ERROR, "clunk failed: %d name %s\n",
 					err, dentry->d_iname);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5293: FILE: fs/9p/vfs_dir.c:93:
+			s = p9_deserialize_stat(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5300: FILE: fs/9p/vfs_dir.c:99:
+				P9_DPRINTK(P9_DEBUG_ERROR,
 					"error while deserializing stat\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5309: FILE: fs/9p/vfs_dir.c:126:
+			v9ses->maxdata-P9_IOHDRSZ, &fcall);
 			              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5313: FILE: fs/9p/vfs_dir.c:129:
+			P9_DPRINTK(P9_DEBUG_ERROR, "error while reading: %d: %p\n",
 				ret, fcall);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5323: FILE: fs/9p/vfs_dir.c:138:
+			s = p9_deserialize_stat(fcall->params.rread.data + i,
 				n - i, &stat, v9ses->extended);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5328: FILE: fs/9p/vfs_dir.c:142:
+				P9_DPRINTK(P9_DEBUG_ERROR,
 					"error while deserializing stat\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5337: FILE: fs/9p/vfs_dir.c:183:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode, filp,
 	                                    ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5337: FILE: fs/9p/vfs_dir.c:183:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode, filp,
 	                                                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5338: FILE: fs/9p/vfs_dir.c:184:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode, filp,
 		fid->fid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5346: FILE: fs/9p/vfs_dir.c:191:
+		P9_DPRINTK(P9_DEBUG_VFS, "fidopen: %d v9f->fid: %d\n", fid->fidopen,
 			fid->fid);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#5380: FILE: fs/9p/vfs_file.c:60:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p file: %p \n", inode, file);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5399: FILE: fs/9p/vfs_file.c:112:
+	P9_DPRINTK(P9_DEBUG_VFS, "filp: %p lock: %p\n", filp, fl);
 	                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5399: FILE: fs/9p/vfs_file.c:112:
+	P9_DPRINTK(P9_DEBUG_VFS, "filp: %p lock: %p\n", filp, fl);
 	                                                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5448: FILE: fs/9p/vfs_file.c:212:
+	P9_DPRINTK(P9_DEBUG_VFS, "data %p count %d offset %x\n", data, (int)count,
 		(int)*offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5460: FILE: fs/9p/vfs_file.c:234:
+			P9_EPRINTK(KERN_ERR,
 				"short write: v9fs_t_write returned %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5633: FILE: fs/9p/vfs_inode.c:243:
+			P9_DPRINTK(P9_DEBUG_ERROR, "BAD mode 0x%x S_IFMT 0x%x\n",
 				mode, mode & S_IFMT);

ERROR:SPACING: space prohibited after that '&&' (ctx:WxW)
#5667: FILE: fs/9p/vfs_inode.c:270:
+		if (fcall && fcall->id == P9_RWALK)
 		          ^

ERROR:SPACING: space prohibited after that '&&' (ctx:WxW)
#5709: FILE: fs/9p/vfs_inode.c:325:
+		if (fcall && fcall->id == P9_RWALK)
 		          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5744: FILE: fs/9p/vfs_inode.c:411:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p dentry: %p rmdir: %d\n", dir, file,
 		rmdir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5754: FILE: fs/9p/vfs_inode.c:423:
+		P9_DPRINTK(P9_DEBUG_ERROR, "inode #%lu, no fid!\n",
 			file_inode->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5804: FILE: fs/9p/vfs_inode.c:629:
+	P9_DPRINTK(P9_DEBUG_VFS, "dir: %p dentry: (%s) %p nameidata: %p\n",
 		dir, dentry->d_name.name, dentry, nameidata);

ERROR:SPACING: space prohibited after that '&&' (ctx:WxW)
#5826: FILE: fs/9p/vfs_inode.c:653:
+		if (fcall && fcall->id == P9_RWALK)
 		          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5836: FILE: fs/9p/vfs_inode.c:661:
+			P9_DPRINTK(P9_DEBUG_VFS,
 				"Return negative dentry %p count %d\n",

WARNING:TYPO_SPELLING: 'failes' may be misspelled - perhaps 'fails'?
#5860: FILE: fs/9p/vfs_inode.c:681:
+		P9_EPRINTK(KERN_WARNING, "inode alloc failes, returns %ld\n",
 		                                      ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5861: FILE: fs/9p/vfs_inode.c:682:
+		P9_EPRINTK(KERN_WARNING, "inode alloc failes, returns %ld\n",
 			PTR_ERR(inode));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5910: FILE: fs/9p/vfs_inode.c:801:
+		P9_DPRINTK(P9_DEBUG_ERROR, "no fid for old file #%lu\n",
 			old_inode->i_ino);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5959: FILE: fs/9p/vfs_inode.c:928:
+v9fs_stat2inode(struct p9_stat *stat, struct inode *inode,
 	struct super_block *sb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5968: FILE: fs/9p/vfs_inode.c:969:
+			P9_DPRINTK(P9_DEBUG_ERROR, "Unknown special type %c (%.*s)\n",
 				type, stat->extension.len, stat->extension.str);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6029: FILE: fs/9p/vfs_inode.c:1052:
+	P9_DPRINTK(P9_DEBUG_ERROR, "%s -> %.*s (%s)\n", dentry->d_name.name,
 		fcall->params.rstat.stat.extension.str, buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6046: FILE: fs/9p/vfs_inode.c:1092:
+			P9_DPRINTK(P9_DEBUG_ERROR, "problem copying to user: %d\n",
 				ret);

CHECK:SPACING: No space is necessary after a cast
#6085: FILE: fs/9p/vfs_inode.c:1171:
+		perm, P9_OREAD, (char *) extension, &fid, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6095: FILE: fs/9p/vfs_inode.c:1226:
+	P9_DPRINTK(P9_DEBUG_VFS, " %lu,%s,%s\n", dir->i_ino, dentry->d_name.name,
 		symname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6105: FILE: fs/9p/vfs_inode.c:1253:
+	P9_DPRINTK(P9_DEBUG_VFS, " %lu,%s,%s\n", dir->i_ino, dentry->d_name.name,
 		old_dentry->d_name.name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6125: FILE: fs/9p/vfs_inode.c:1290:
+	P9_DPRINTK(P9_DEBUG_VFS, " %lu,%s mode: %x MAJOR: %u MINOR: %u\n", dir->i_ino,
 		dentry->d_name.name, mode, MAJOR(rdev), MINOR(rdev));

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#6160: FILE: fs/9p/vfs_super.c:120:
+	P9_DPRINTK(P9_DEBUG_VFS, " \n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 28 errors, 66 warnings, 144 checks, 5423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
