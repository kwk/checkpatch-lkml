WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#65: 
# echo 1 > /debug/tracing/ftrace_profile_enable

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#69: 
# echo 0 > /debug/tracing/ftrace_profile_enable

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#73: 
# cat /debug/tracing/ftrace_profile | head

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#91: 
# cat /debug/tracing/ftrace_profile | sort -brn | head -20

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: kernel/trace/trace_oprofile.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#144: FILE: kernel/trace/trace_oprofile.c:19:
+#define FTRACE_PROFILE_HASHSIZE	(1<<FTRACE_PROFILE_HASHBITS)
                                	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#144: FILE: kernel/trace/trace_oprofile.c:19:
+#define FTRACE_PROFILE_HASHSIZE	(1<<FTRACE_PROFILE_HASHBITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftrace_node_list)...) over kzalloc(sizeof(struct ftrace_node)...)
#173: FILE: kernel/trace/trace_oprofile.c:48:
+	ftrace_node_list = kzalloc(sizeof(struct ftrace_node) *

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#173: FILE: kernel/trace/trace_oprofile.c:48:
+	ftrace_node_list = kzalloc(sizeof(struct ftrace_node) *
+				   ftrace_hash_size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#197: FILE: kernel/trace/trace_oprofile.c:72:
+	ftrace_node_list = ftrace_free_node = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:INDENTED_LABEL: labels should not be indented
#273: FILE: kernel/trace/trace_oprofile.c:148:
+	unlock:

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#296: FILE: kernel/trace/trace_oprofile.c:171:
+static struct ftrace_ops trace_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#345: FILE: kernel/trace/trace_oprofile.c:220:
+	return seq_printf(m, "%p\n", (void*)addr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#357: FILE: kernel/trace/trace_oprofile.c:232:
+		seq_printf(m, "  COUNT       FUNCTION\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#372: FILE: kernel/trace/trace_oprofile.c:247:
+static struct seq_operations ftrace_profile_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: kernel/trace/trace_oprofile.c:261:
+		struct seq_file *m = file->private_data;
+		m->private = (void *)-1;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#392: FILE: kernel/trace/trace_oprofile.c:267:
+static struct file_operations ftrace_profile_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#399: FILE: kernel/trace/trace_oprofile.c:274:
+ftrace_profile_enable_read(struct file *filp, char __user *ubuf,
                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#410: FILE: kernel/trace/trace_oprofile.c:285:
+ftrace_profile_enable_write(struct file *filp, const char __user *ubuf,
                                          ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#428: FILE: kernel/trace/trace_oprofile.c:303:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#453: FILE: kernel/trace/trace_oprofile.c:328:
+static struct file_operations ftrace_profile_enable_fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#459: FILE: kernel/trace/trace_oprofile.c:334:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#482: FILE: kernel/trace/trace_oprofile.c:357:
+
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#495: FILE: kernel/trace/Kconfig:159:
+config FUNCTION_PROFILER
+	bool "Trace function profiler"
+	depends on HAVE_FUNCTION_TRACER
+	depends on DEBUG_KERNEL
+	select FUNCTION_TRACER
+	help
+	  This special tracer that makes a histogram of all the functions
+	  that it encounters.
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212164.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 6 checks, 385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212164.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
