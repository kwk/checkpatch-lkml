WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: include/asm-x86/div64.h:1:
+#ifndef _ASM_X86_DIV64_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: include/asm-x86/div64.h:20:
+#define do_div(n,base) ({ \
                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#119: FILE: include/asm-x86/div64.h:20:
+#define do_div(n,base) ({ \
+	unsigned long __upper, __low, __high, __mod, __base; \
+	__base = (base); \
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
+	__upper = __high; \
+	if (__high) { \
+		__upper = __high % (__base); \
+		__high = __high / (__base); \
+	} \
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (__base), "0" (__low), "1" (__upper)); \
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
+	__mod; \
+})

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#122: FILE: include/asm-x86/div64.h:23:
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 	      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#122: FILE: include/asm-x86/div64.h:23:
+	asm("":"=a" (__low), "=d" (__high):"A" (n)); \
 	                                  ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#128: FILE: include/asm-x86/div64.h:29:
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (__base), "0" (__low), "1" (__upper)); \
 	             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#128: FILE: include/asm-x86/div64.h:29:
+	asm("divl %2":"=a" (__low), "=d" (__mod):"rm" (__base), "0" (__low), "1" (__upper)); \
 	                                        ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#129: FILE: include/asm-x86/div64.h:30:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	      ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#129: FILE: include/asm-x86/div64.h:30:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#129: FILE: include/asm-x86/div64.h:30:
+	asm("":"=A" (n):"a" (__low),"d" (__high)); \
 	                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/asm-x86/div64.h:40:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                            ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/asm-x86/div64.h:40:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/asm-x86/div64.h:40:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                                                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#139: FILE: include/asm-x86/div64.h:40:
+#define div_long_long_rem(a,b,c) div_ll_X_l_rem(a,b,c)
                                                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: include/asm-x86/div64.h:46:
+      __asm__("divl %2":"=a"(dum2), "=d"(*rem)$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#145: FILE: include/asm-x86/div64.h:46:
+      __asm__("divl %2":"=a"(dum2), "=d"(*rem)
                        ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/asm-x86/div64.h:47:
+      :^I"rm"(div), "A"(divs));$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#150: FILE: include/asm-x86/div64.h:51:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#152: FILE: include/asm-x86/div64.h:53:
+extern uint64_t div64_64(uint64_t dividend, uint64_t divisor);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/asm-x86/div64.h:53:
+extern uint64_t div64_64(uint64_t dividend, uint64_t divisor);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367666.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 3 warnings, 11 checks, 62 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000367666.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
