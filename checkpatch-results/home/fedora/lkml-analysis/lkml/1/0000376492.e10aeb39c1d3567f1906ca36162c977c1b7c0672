WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
> On Thu, 20 Sep 2007 12:52:57 -0700 Dave Hansen <haveblue@us.ibm.com> wrote:

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: fs/buffer.c:1178:
+	struct i_mnt_pair pair;
+	pair.inode = bh->b_page->mapping->host;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: fs/ext3/super.c:1807:
+		int jlret;
+		jlret = ext3_load_journal(sb, es, journal_devnum);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#263: FILE: fs/fs-writeback.c:90:
+	for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#265: FILE: fs/fs-writeback.c:92:
+		struct vfsmount *mnt = current->can_write_via_mnt[i];
+		if (!mnt)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: fs/inode.c:1155:
+^I^I        struct i_mnt_pair pair; $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: fs/inode.c:1155:
+^I^I        struct i_mnt_pair pair; $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: fs/inode.c:1156:
+^I^I        pair.inode = inode;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#314: FILE: fs/inode.c:1156:
+		        struct i_mnt_pair pair; 
+		        pair.inode = inode;

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: fs/inode.c:1157:
+^I^I        pair.mnt = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: fs/inode.c:1158:
+^I^I        allow_writes_via_mnt_to(&pair);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#318: FILE: fs/inode.c:1160:
+^I^I        disallow_writes_via_mnt_to(NULL, inode, sb);$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#376: FILE: fs/namei.c:1670:
+^I^I^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#381: FILE: fs/namei.c:1675:
+^I^I^Ierror = mnt_want_write(nd->mnt);^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#384: FILE: fs/namei.c:1678:
+^I^I^Imnt_drop_write(nd->mnt);^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: fs/namespace.c:196:
+	struct list_head *p;
+	spin_lock(&sb->s_writable_inodes_lock);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#419: FILE: fs/namespace.c:198:
+^I^Istruct i_mnt_pair *pair = $

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#428: FILE: fs/namespace.c:207:
+}
+void allow_writes_via_mnt_to(struct i_mnt_pair *pair)

WARNING:LINE_SPACING: Missing a blank line after declarations
#431: FILE: fs/namespace.c:210:
+	struct super_block *sb = pair->inode->i_sb;
+	spin_lock(&sb->s_writable_inodes_lock);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#435: FILE: fs/namespace.c:214:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: fs/namespace.c:221:
+struct i_mnt_pair *disallow_writes_via_mnt_to(struct vfsmount *mnt,
+		struct inode *inode, struct super_block *sb)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#464: FILE: fs/namespace.c:243:
+}
+int __mnt_want_write(struct vfsmount *mnt, int atomic_or_peristent, struct inode *inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: fs/namespace.c:248:
+	struct i_mnt_pair *pair = kmalloc(sizeof(*pair), GFP_KERNEL);
+	if (!pair)

WARNING:LINE_SPACING: Missing a blank line after declarations
#480: FILE: fs/namespace.c:261:
+		int i;
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#480: FILE: fs/namespace.c:261:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 		      ^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#481: FILE: fs/namespace.c:262:
+			if (i >= 1 && printk_ratelimit()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#482: FILE: fs/namespace.c:263:
+				printk("%s() saw can_write_via_mnt[%d]: %p\n", __func__, i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: fs/namespace.c:264:
+				printk("%s() saw can_write_via_mnt[%d]: %p\n", __func__, i,
+						current->can_write_via_mnt[i]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: fs/namespace.c:275:
+		struct super_block *sb = inode->i_sb;
+		pair->mnt = mnt;

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#503: FILE: fs/namespace.c:284:
+	if (pair)
+		kfree(pair);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#508: FILE: fs/namespace.c:289:
 }
+int mnt_want_write(struct vfsmount *mnt)

WARNING:LINE_SPACING: Missing a blank line after declarations
#511: FILE: fs/namespace.c:292:
+	int ret;
+	ret = __mnt_want_write(mnt, MNT_WRITE_ATOMIC, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: fs/namespace.c:365:
+		int i;
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#542: FILE: fs/namespace.c:365:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 		      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#549: FILE: fs/namespace.c:372:
+			printk("i: %d len: %d mnt: %p\n", i, CAN_WRITE_VIA_LEN, mnt);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#550: FILE: fs/namespace.c:373:
+			for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 			      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#553: FILE: fs/namespace.c:376:
+				printk("current->can_write_via_mnt[%d]: %p\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: fs/namespace.c:377:
+				printk("current->can_write_via_mnt[%d]: %p\n", i,
+						current->can_write_via_mnt[i]);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#562: FILE: fs/namespace.c:385:
+		if (pair)
+			kfree(pair);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#571: FILE: fs/namespace.c:406:
 }
+void mnt_drop_write(struct vfsmount *mnt)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#628: FILE: include/linux/fs.h:1045:
+	spinlock_t s_writable_inodes_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#642: FILE: include/linux/mount.h:89:
+extern int mnt_want_persistent_write(struct vfsmount *mnt, struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#643: FILE: include/linux/mount.h:90:
+extern void mnt_drop_persistent_write(struct vfsmount *mnt, struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: include/linux/mount.h:95:
+extern void check_write_ability_to_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/mount.h:96:
+extern void check_sb_for_writable_inode(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#650: FILE: include/linux/mount.h:97:
+extern void check_sb_for_writable_inode(struct super_block *sb,
+					 struct inode *inode);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#652: FILE: include/linux/mount.h:99:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#658: FILE: include/linux/mount.h:105:
+};
+extern void allow_writes_via_mnt_to(struct i_mnt_pair *pair);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/mount.h:105:
+extern void allow_writes_via_mnt_to(struct i_mnt_pair *pair);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/mount.h:106:
+extern struct i_mnt_pair *disallow_writes_via_mnt_to(struct vfsmount *mnt,

WARNING:LINE_SPACING: Missing a blank line after declarations
#687: FILE: kernel/fork.c:118:
+		int bad = 0;
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#687: FILE: kernel/fork.c:118:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: kernel/fork.c:120:
+			struct vfsmount *mnt = tsk->can_write_via_mnt[i];
+			if (!mnt)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#691: FILE: kernel/fork.c:122:
+			printk("task '%s' exited with mnt[%d]:%p present\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: kernel/fork.c:123:
+			printk("task '%s' exited with mnt[%d]:%p present\n",
+					tsk->comm, i, mnt);

WARNING:LINE_SPACING: Missing a blank line after declarations
#707: FILE: kernel/fork.c:200:
+		int i;
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#707: FILE: kernel/fork.c:200:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 		      ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#707: FILE: kernel/fork.c:200:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
+			tsk->can_write_via_mnt[i] = NULL;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#720: FILE: kernel/fork.c:228:
+		int i;
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#720: FILE: kernel/fork.c:228:
+		for (i=0; i < CAN_WRITE_VIA_LEN; i++) {
 		      ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: kernel/fork.c:230:
+			struct vfsmount *mnt = tsk->can_write_via_mnt[i];
+			if (!mnt)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: kernel/fork.c:232:
+			printk("task later %d mnt[%d]:%p present\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#725: FILE: kernel/fork.c:233:
+			printk("task later %d mnt[%d]:%p present\n",
+				tsk->pid, i, mnt);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 26 warnings, 20 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000376492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
