WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
   string, calls one of several functions submitted through a struct args_ops.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#138: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#148: FILE: Documentation/kprint.txt:6:
+   * Backwards compatibility with printk(), syslog(), etc. There is no way the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#149: FILE: Documentation/kprint.txt:7:
+whole kernel can be converted to a new interface in one go. printk() is used $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#150: FILE: Documentation/kprint.txt:8:
+all over the kernel, in many different ways, including calls from assembly, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#153: FILE: Documentation/kprint.txt:11:
+   * Extensibility. Features like eliminating messages below a given threshold $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#154: FILE: Documentation/kprint.txt:12:
+or recording the location (i.e. source file/line) of a message [1] should be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#161: FILE: Documentation/kprint.txt:19:
+  This header defines the primary (i.e. lowest-level) interface to kprint that $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#168: FILE: Documentation/kprint.txt:26:
+  This function is the equivalent of the old printk(), except that it does not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#169: FILE: Documentation/kprint.txt:27:
+take a log-level parameter, but emits messages using the default log-level. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#170: FILE: Documentation/kprint.txt:28:
+string must be a single line of information (i.e. it must not contain any $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#171: FILE: Documentation/kprint.txt:29:
+newlines). kprint() is implemented as a macro, and must not be called from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#176: FILE: Documentation/kprint.txt:34:
+  To support the different log-levels, there exists one kprint_*() function for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#177: FILE: Documentation/kprint.txt:35:
+each log-level, for example kprint_info(). This contrasts with the printk() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#178: FILE: Documentation/kprint.txt:36:
+interface, but allows the log-level argument to be passed as an argument $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#179: FILE: Documentation/kprint.txt:37:
+(instead of prepending it to the message string) and omitted if the default $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: Documentation/kprint.txt:40:
+  The string must be a single line of information. Calling $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#183: FILE: Documentation/kprint.txt:41:
+kprint_emerg("Oops.") is equivalent to calling printk(KERN_EMERG "Oops.\n"). $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#184: FILE: Documentation/kprint.txt:42:
+These functions are implemented as macros, and must not be called from $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#198: FILE: Documentation/kprint.txt:56:
+  The individual log-levels can be enabled/disabled in the kernel configuration $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#199: FILE: Documentation/kprint.txt:57:
+and subsequently removed from the kernel (by the compiler) entirely. It is not $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#200: FILE: Documentation/kprint.txt:58:
+an option to filter out messages that are simply above a certain log-level, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#201: FILE: Documentation/kprint.txt:59:
+although it could be more convenient; controlling each log-level is the more $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#206: FILE: Documentation/kprint.txt:64:
+  It turns out that many messages share a similar purpose. It would be useful $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#207: FILE: Documentation/kprint.txt:65:
+to classify these by a different scheme than severity [6]. Therefore, an $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#216: FILE: Documentation/kprint.txt:74:
+  Each message will be assigned the appropriate log-level for the message class $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#224: FILE: Documentation/kprint.txt:82:
+  In order to print several related lines as one chunk, the emitter should $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#225: FILE: Documentation/kprint.txt:83:
+first allocate an object of the type struct kprint_block. This struct is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#226: FILE: Documentation/kprint.txt:84:
+initialized with the function kprint_block_init() which takes as arguments a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#227: FILE: Documentation/kprint.txt:85:
+pointer to an object of the type struct kprint_block followed by the log-level $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: Documentation/kprint.txt:86:
+number. The emitter may then make as many or as few calls to kprint_block() $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#229: FILE: Documentation/kprint.txt:87:
+that is desired. A final call to kprint_block_flush() appends the messages to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#230: FILE: Documentation/kprint.txt:88:
+the kernel message log in a single, atomic operation. After it has been $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: Documentation/kprint.txt:89:
+flushed, the struct is not usable again (unless it is re-initialized). If for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: Documentation/kprint.txt:90:
+any reason the struct should be de-initialized without writing it to the log, a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#248: FILE: Documentation/kprint.txt:106:
+  Many parts of the kernel already prefix their log messages with a subsystem $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#249: FILE: Documentation/kprint.txt:107:
+and/or driver tag to identify the source of a particular message. With the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: Documentation/kprint.txt:108:
+kprint interface, these tags are redundant. Instead, the macros SUBSYSTEM and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: Documentation/kprint.txt:109:
+KBUILD_MODNAME are used and recorded along with each log message. Therefore, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: Documentation/kprint.txt:110:
+each source file should define the macro SUBSYSTEM before any of the kprint $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: Documentation/kprint.txt:111:
+functions are used. If this macro is not defined, the recorded subsystem will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: Documentation/kprint.txt:116:
+  It may happen that certain parts of the kernel might wish to emit messages to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#259: FILE: Documentation/kprint.txt:117:
+the log (and console, if any) in an early part of the boot procedure, for $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#260: FILE: Documentation/kprint.txt:118:
+example before the main memory allocation routines have been set up properly. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: Documentation/kprint.txt:119:
+For this purpose, a function kprint_early() exists. This "early" is a minimal $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#262: FILE: Documentation/kprint.txt:120:
+way for the kernel to log its functions, and may as such not include all the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#263: FILE: Documentation/kprint.txt:121:
+features of the full kprint system. When the kernel is beyond the critical $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#264: FILE: Documentation/kprint.txt:122:
+"early" point, the messages (if any) in the "early" log may be moved into the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: Documentation/kprint.txt:123:
+main logging store and kprint_early() must not be used again. kprint_early() is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#268: FILE: Documentation/kprint.txt:126:
+  To allow non-early calls from assembly, a function kprint_asm() exists. This $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#269: FILE: Documentation/kprint.txt:127:
+function takes a log-level number followed by a string literal and a variable $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: Documentation/kprint.txt:132:
+  The legacy printk() function is replaced by a backwards-compatible interface $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: Documentation/kprint.txt:133:
+but different implementation. In short, printk should parse messages, remove $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: Documentation/kprint.txt:134:
+(and convert) initial log-level tokens, remove any newlines (splitting the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#279: FILE: Documentation/kprint.txt:137:
+  Because printk() itself remains a function with the same specification, all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: Documentation/kprint.txt:138:
+printing/logging mechanisms based on it, such as dev_printk(), sdev_printk(), $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: Documentation/kprint.txt:139:
+and ata_dev_printk() will remain functional. Alternatively, the macros could be $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#287: FILE: Documentation/kprint.txt:145:
+  The kprint "light" interface provides a simpler interface that covers the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: Documentation/kprint.txt:146:
+most frequent usage patterns. It should be noted that this interface is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#289: FILE: Documentation/kprint.txt:147:
+preferred over the primary interface as it encourages the use of a smaller set $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#292: FILE: Documentation/kprint.txt:150:
+  The interface consists primarily of the three macros, err(), warn(), and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#295: FILE: Documentation/kprint.txt:153:
+  This header is optional and must not be included by other header files. The $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: Documentation/kprint.txt:154:
+names defined by this header are already used by different parts of the kernel, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#297: FILE: Documentation/kprint.txt:155:
+but in different ways. With an optional header, new code (or code converted to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: Documentation/kprint.txt:156:
+the kprint API) can explicitly request these definitions while leaving old $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#304: FILE: Documentation/kprint.txt:162:
+  Most of the kprint entry-points (especially kprint() and its log-level $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: Documentation/kprint.txt:163:
+variations) are implemented as macros in order to be able to transparently pass $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#306: FILE: Documentation/kprint.txt:164:
+extra information into the main kprint machinery. This makes the interface $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#307: FILE: Documentation/kprint.txt:165:
+abstract, because we can change the behaviour (through the configuration and by $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: Documentation/kprint.txt:166:
+adding extensions) without changing the calling code. As an example, prepending $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#309: FILE: Documentation/kprint.txt:167:
+the current file and line (the __FILE__ and __LINE__ macros) to the message can $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#310: FILE: Documentation/kprint.txt:168:
+be done in such a way that it can be discarded at run-time, or recorded along $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#311: FILE: Documentation/kprint.txt:169:
+with (but separate from) the messages. This allows the compiler to completely $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: Documentation/kprint.txt:172:
+  With such a modular interface, message attributes (for example the current $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#315: FILE: Documentation/kprint.txt:173:
+time) and arguments can also be recorded separately from the actual format $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#316: FILE: Documentation/kprint.txt:174:
+string, instead of written already formatted to a ring buffer of characters. $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#317: FILE: Documentation/kprint.txt:175:
+Parameters would be formatted to their own strings (regardless of the original $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#346: FILE: Documentation/kprint.txt:204:
+  This can be a great help, for example in (user-space) localisation of kernel $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: Documentation/kprint.txt:205:
+messages [4], since the "static" message (ie. format string) can be translated $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#348: FILE: Documentation/kprint.txt:206:
+separately and the arguments re-attached at run-time, possibly in a different $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#349: FILE: Documentation/kprint.txt:207:
+order. A new kernel-/user-space interface would be needed to retrieve the $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#350: FILE: Documentation/kprint.txt:208:
+messages in this format, though the syslog() and /proc/kmsg interfaces will $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#351: FILE: Documentation/kprint.txt:209:
+retain backwards compatibility by formatting messages as they are requested $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#354: FILE: Documentation/kprint.txt:212:
+  This does not mean that user-space is obliged provide any form of $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#355: FILE: Documentation/kprint.txt:213:
+lookup-/translation tables in order to read the kernel log; the kernel simply $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#356: FILE: Documentation/kprint.txt:214:
+hands over the format string used to format a particular message in addition to $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#357: FILE: Documentation/kprint.txt:215:
+the full log message, and this format string may be used to easily look up $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: Documentation/kprint.txt:220:
+  This scheme is obviously much more complex than the printk() is today. But at $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#363: FILE: Documentation/kprint.txt:221:
+the same time, it is also much more powerful, extensible, and clearly/cleanly $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#366: FILE: Documentation/kprint.txt:224:
+  The kernel can still used a fixed-size ring-buffer for storing the kernel $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: arch/i386/kernel/traps.c:201:
+	printk("%s", data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: arch/um/include/user.h:22:
+extern int printk_asm(const char *fmt, ...)

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#408: FILE: arch/um/include/user.h:26:
+extern void panic(const char *fmt, ...)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#423: FILE: crypto/tcrypt.c:877:
+		printk("algorithm %s %s\n", *name, crypto_has_alg(*name, 0, 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: drivers/char/mem.c:893:
+		printk("%s", tmp);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: drivers/char/mem.c:897:
+		 * string length. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#458: FILE: drivers/ide/ide-lib.c:450:
+			printk("%s", (err & ABRT_ERR)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#472: FILE: drivers/md/md.c:65:
+#define dprintk(x...)		\
+	if(DEBUG) {		\
+		 printk(x);	\
+	}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#473: FILE: drivers/md/md.c:66:
+	if(DEBUG) {		\
+		 printk(x);	\

ERROR:SPACING: space required before the open parenthesis '('
#473: FILE: drivers/md/md.c:66:
+	if(DEBUG) {		\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#474: FILE: drivers/md/md.c:67:
+		 printk(x);	\

ERROR:SPACING: space required before the open parenthesis '('
#491: FILE: drivers/media/dvb/frontends/tda10021.c:354:
+		if(sync & 2) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#492: FILE: drivers/media/dvb/frontends/tda10021.c:355:
+			printk("DVB: TDA10021(%d): AFC (%d) %dHz\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: drivers/media/dvb/frontends/tda10021.c:356:
+			printk("DVB: TDA10021(%d): AFC (%d) %dHz\n",
+				state->frontend.dvb->num, afc,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: drivers/media/dvb/frontends/tda10021.c:359:
+			printk("DVB: TDA10021(%d): [AFC (%d) %dHz]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: drivers/media/dvb/frontends/tda10021.c:360:
+			printk("DVB: TDA10021(%d): [AFC (%d) %dHz]\n",
+				state->frontend.dvb->num, afc,

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#498: FILE: drivers/media/dvb/frontends/tda10021.c:361:
+			       -((s32)p->u.qam.symbol_rate * afc) >> 10);;

ERROR:SPACING: space required before the open parenthesis '('
#515: FILE: drivers/media/dvb/frontends/tda10023.c:417:
+		if(sync & 2) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#516: FILE: drivers/media/dvb/frontends/tda10023.c:418:
+			printk("DVB: TDA10023(%d): AFC (%d) %dHz\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: drivers/media/dvb/frontends/tda10023.c:419:
+			printk("DVB: TDA10023(%d): AFC (%d) %dHz\n",
+				state->frontend.dvb->num, afc,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: drivers/media/dvb/frontends/tda10023.c:422:
+			printk("DVB: TDA10023(%d): [AFC (%d) %dHz]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/media/dvb/frontends/tda10023.c:423:
+			printk("DVB: TDA10023(%d): [AFC (%d) %dHz]\n",
+				state->frontend.dvb->num, afc,

ERROR:SPACING: space required before the open parenthesis '('
#537: FILE: drivers/media/dvb/frontends/ves1820.c:322:
+		if(sync & 2) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#538: FILE: drivers/media/dvb/frontends/ves1820.c:323:
+			printk("ves1820: AFC (%d) %dHz\n", afc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/media/dvb/frontends/ves1820.c:324:
+			printk("ves1820: AFC (%d) %dHz\n", afc,
+				-((s32) p->u.qam.symbol_rate * afc) >> 10);

CHECK:SPACING: No space is necessary after a cast
#539: FILE: drivers/media/dvb/frontends/ves1820.c:324:
+				-((s32) p->u.qam.symbol_rate * afc) >> 10);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#541: FILE: drivers/media/dvb/frontends/ves1820.c:326:
+			printk("ves1820: [AFC (%d) %dHz]\n", afc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: drivers/media/dvb/frontends/ves1820.c:327:
+			printk("ves1820: [AFC (%d) %dHz]\n", afc,
+				-((s32) p->u.qam.symbol_rate * afc) >> 10);

CHECK:SPACING: No space is necessary after a cast
#542: FILE: drivers/media/dvb/frontends/ves1820.c:327:
+				-((s32) p->u.qam.symbol_rate * afc) >> 10);

ERROR:SPACING: space required before the open parenthesis '('
#558: FILE: drivers/media/video/em28xx/em28xx-core.c:152:
+		if(ret < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#559: FILE: drivers/media/video/em28xx/em28xx-core.c:153:
+			printk(" failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#561: FILE: drivers/media/video/em28xx/em28xx-core.c:155:
+			printk("%02x values: ", ret);

ERROR:SPACING: space required before the open parenthesis '('
#573: FILE: drivers/media/video/em28xx/em28xx-core.c:185:
+		if(ret < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#574: FILE: drivers/media/video/em28xx/em28xx-core.c:186:
+			printk(" failed!\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#576: FILE: drivers/media/video/em28xx/em28xx-core.c:188:
+			printk("%02x\n", val);

ERROR:SPACING: space required before the open parenthesis '('
#592: FILE: drivers/media/video/usbvideo/usbvideo.h:27:
+		if(!(expr)) {						\

ERROR:SPACING: space required before the open parenthesis '('
#595: FILE: drivers/media/video/usbvideo/usbvideo.h:30:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#611: FILE: drivers/net/e100.c:186:
+		if(NETIF_MSG_##nlevel & nic->msg_enable) {		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#612: FILE: drivers/net/e100.c:187:
+			printk(KERN_##klevel PFX "%s: %s: " fmt,	\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#614: FILE: drivers/net/e100.c:189:
+				__FUNCTION__ , ## args);		\
 				             ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#614: FILE: drivers/net/e100.c:189:
+				__FUNCTION__ , ## args);		\

ERROR:SPACING: space required before the open parenthesis '('
#616: FILE: drivers/net/e100.c:191:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#634: FILE: drivers/net/e1000/e1000.h:95:
+		if(NETIF_MSG_##nlevel & adapter->msg_enable) {		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#635: FILE: drivers/net/e1000/e1000.h:96:
+			printk(KERN_##klevel PFX "%s: %s: " fmt,	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#636: FILE: drivers/net/e1000/e1000.h:97:
+				adapter->netdev->name, __FUNCTION__,	\

ERROR:SPACING: space required before the open parenthesis '('
#639: FILE: drivers/net/e1000/e1000.h:100:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#652: FILE: drivers/net/irda/ma600.c:47:
+	#define IRDA_DEBUG(n, args...)			\
+		do {					\
+			printk(KERN_DEBUG args);	\
+		} while(0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#654: FILE: drivers/net/irda/ma600.c:49:
+			printk(KERN_DEBUG args);	\

ERROR:SPACING: space required before the open parenthesis '('
#655: FILE: drivers/net/irda/ma600.c:50:
+		} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#673: FILE: drivers/net/ixgb/ixgb.h:87:
+		if(NETIF_MSG_##nlevel & adapter->msg_enable) {		\

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: drivers/net/ixgb/ixgb.h:88:
+			printk(KERN_##klevel PFX "%s: %s: " fmt,	\

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#675: FILE: drivers/net/ixgb/ixgb.h:89:
+			adapter->netdev->name, __FUNCTION__, ## args);	\

ERROR:SPACING: space required before the open parenthesis '('
#677: FILE: drivers/net/ixgb/ixgb.h:91:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#699: FILE: drivers/net/lib8390.c:453:
+		if(ei_local->irqlock) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#700: FILE: drivers/net/lib8390.c:454:
+			printk("%s: Interrupted while interrupts are masked! "

ERROR:TRAILING_WHITESPACE: trailing whitespace
#701: FILE: drivers/net/lib8390.c:455:
+^I^I^I^I"isr=%#2x imr=%#2x.\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#701: FILE: drivers/net/lib8390.c:455:
+			printk("%s: Interrupted while interrupts are masked! "
+				"isr=%#2x imr=%#2x.\n", 

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#705: FILE: drivers/net/lib8390.c:459:
+			printk("%s: Reentering the interrupt handler! "

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: drivers/net/lib8390.c:460:
+			printk("%s: Reentering the interrupt handler! "
+				"isr=%#2x imr=%#2x.\n",

ERROR:SPACING: space required before the open parenthesis '('
#724: FILE: drivers/net/pcmcia/axnet_cs.c:1216:
+		if(ei_local->irqlock) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#725: FILE: drivers/net/pcmcia/axnet_cs.c:1217:
+			printk("%s: Interrupted while interrupts are masked! "

WARNING:SPLIT_STRING: quoted string split across lines
#726: FILE: drivers/net/pcmcia/axnet_cs.c:1218:
+			printk("%s: Interrupted while interrupts are masked! "
+				" isr=%#2x imr=%#2x.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#730: FILE: drivers/net/pcmcia/axnet_cs.c:1222:
+			printk("%s: Reentering the interrupt handler! "

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: drivers/net/pcmcia/axnet_cs.c:1223:
+			printk("%s: Reentering the interrupt handler! "
+				"isr=%#2x imr=%#2x.\n",

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: drivers/pcmcia/rsrc_nonstatic.c:251:
+    if(any)$

ERROR:SPACING: space required before the open parenthesis '('
#747: FILE: drivers/pcmcia/rsrc_nonstatic.c:251:
+    if(any)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#748: FILE: drivers/pcmcia/rsrc_nonstatic.c:252:
+	printk("\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#749: FILE: drivers/pcmcia/rsrc_nonstatic.c:253:
+    else$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#750: FILE: drivers/pcmcia/rsrc_nonstatic.c:254:
+	printk(" clean.\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#759: FILE: drivers/pcmcia/rsrc_nonstatic.c:402:
+    if(bad)$

ERROR:SPACING: space required before the open parenthesis '('
#759: FILE: drivers/pcmcia/rsrc_nonstatic.c:402:
+    if(bad)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#760: FILE: drivers/pcmcia/rsrc_nonstatic.c:403:
+	printk("\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: drivers/pcmcia/rsrc_nonstatic.c:404:
+    else$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#762: FILE: drivers/pcmcia/rsrc_nonstatic.c:405:
+	printk(" clean.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#775: FILE: drivers/scsi/advansys.c:7420:
+		printk(s);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#788: FILE: include/asm-generic/pgtable-nopmd.h:31:
+#define pmd_ERROR(pmd)			\
+	do {				\
+		pud_ERROR((pmd).pud);	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#791: FILE: include/asm-generic/pgtable-nopmd.h:34:
+	} while(0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#804: FILE: include/asm-generic/pgtable-nopud.h:29:
+#define pud_ERROR(pud)			\
+	do {				\
+		pgd_ERROR((pud).pgd);	\
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#807: FILE: include/asm-generic/pgtable-nopud.h:32:
+	} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#817: FILE: include/linux/args.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#838: FILE: include/linux/args.h:22:
+extern void args_printf(void *data, const struct args_ops *ops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#839: FILE: include/linux/args.h:23:
+extern void args_printf(void *data, const struct args_ops *ops,
+	const char *fmt, ...)

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: include/linux/args.h:24:
+	const char *fmt, ...)
+	__attribute__ ((format (printf, 3, 4)));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#840: FILE: include/linux/args.h:24:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#841: FILE: include/linux/args.h:25:
+extern void args_vprintf(void *data, const struct args_ops *ops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: include/linux/args.h:26:
+extern void args_vprintf(void *data, const struct args_ops *ops,
+	const char *fmt, va_list args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#843: FILE: include/linux/args.h:27:
+	const char *fmt, va_list args)
+	__attribute__ ((format (printf, 3, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#843: FILE: include/linux/args.h:27:
+	__attribute__ ((format (printf, 3, 0)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#863: FILE: include/linux/kernel.h:159:
+asmlinkage int printk_asm(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#883: FILE: include/linux/kernel.h:177:
+#define printk(fmt, ...)						\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#883: FILE: include/linux/kernel.h:177:
+#define printk(fmt, ...)						\
+	do {								\
+		if(fmt[0] == '<' && fmt[1] >= '0' &&			\
+			fmt[1] <= '9' && fmt[2] == '>')			\
+		{							\
+			kprint_wrapper(fmt[1] - '0', KPRINT_NO_CLASS,	\
+				fmt, ## __VA_ARGS__);			\
+		} else {						\
+			kprint(fmt, ## __VA_ARGS__);			\
+		}							\
+	} while(0)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#885: FILE: include/linux/kernel.h:179:
+		if(fmt[0] == '<' && fmt[1] >= '0' &&			\
+			fmt[1] <= '9' && fmt[2] == '>')			\
+		{							\

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#885: FILE: include/linux/kernel.h:179:
+		if(fmt[0] == '<' && fmt[1] >= '0' &&			\

ERROR:SPACING: space required before the open parenthesis '('
#893: FILE: include/linux/kernel.h:187:
+	} while(0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#903: FILE: include/linux/kprint-light.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#934: FILE: include/linux/kprint.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1003: FILE: include/linux/kprint.h:70:
+ * enabled, these symbols will never be referenced. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1009: FILE: include/linux/kprint.h:76:
+ * function parameters, etc. at compile time. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1055: FILE: include/linux/kprint.h:122:
+void kprint_function(

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1057: FILE: include/linux/kprint.h:124:
+	KPRINT_CLASS(enum kprint_class class,)
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1058: FILE: include/linux/kprint.h:125:
+	KPRINT_TIMESTAMP(unsigned long long clock,)
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1059: FILE: include/linux/kprint.h:126:
+	KPRINT_LOCATION(const char *file,)
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1060: FILE: include/linux/kprint.h:127:
+	KPRINT_LOCATION(unsigned int line,)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1061: FILE: include/linux/kprint.h:128:
+	KPRINT_LOCATION(const char *function,)
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1062: FILE: include/linux/kprint.h:129:
+	KPRINT_TAGS(const char *subsystem,)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1063: FILE: include/linux/kprint.h:130:
+	KPRINT_TAGS(const char *module,)
 	                              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1067: FILE: include/linux/kprint.h:134:
+ * message should be filtered out. */

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1068: FILE: include/linux/kprint.h:135:
+#define KPRINT_FILTER(level)						\
+	   (CONFIG_KPRINT_FILTER_EMERG && (level) == KPRINT_EMERG)	\
+	|| (CONFIG_KPRINT_FILTER_ALERT && (level) == KPRINT_ALERT)	\
+	|| (CONFIG_KPRINT_FILTER_CRIT && (level) == KPRINT_CRIT)	\
+	|| (CONFIG_KPRINT_FILTER_ERROR && (level) == KPRINT_ERROR)	\
+	|| (CONFIG_KPRINT_FILTER_WARNING && (level) == KPRINT_WARNING)	\
+	|| (CONFIG_KPRINT_FILTER_NOTICE && (level) == KPRINT_NOTICE)	\
+	|| (CONFIG_KPRINT_FILTER_INFO && (level) == KPRINT_INFO)	\
+	|| (CONFIG_KPRINT_FILTER_DEBUG  && (level) == KPRINT_DEBUG)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#1068: FILE: include/linux/kprint.h:135:
+#define KPRINT_FILTER(level)						\
+	   (CONFIG_KPRINT_FILTER_EMERG && (level) == KPRINT_EMERG)	\
+	|| (CONFIG_KPRINT_FILTER_ALERT && (level) == KPRINT_ALERT)	\
+	|| (CONFIG_KPRINT_FILTER_CRIT && (level) == KPRINT_CRIT)	\
+	|| (CONFIG_KPRINT_FILTER_ERROR && (level) == KPRINT_ERROR)	\
+	|| (CONFIG_KPRINT_FILTER_WARNING && (level) == KPRINT_WARNING)	\
+	|| (CONFIG_KPRINT_FILTER_NOTICE && (level) == KPRINT_NOTICE)	\
+	|| (CONFIG_KPRINT_FILTER_INFO && (level) == KPRINT_INFO)	\
+	|| (CONFIG_KPRINT_FILTER_DEBUG  && (level) == KPRINT_DEBUG)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1070: FILE: include/linux/kprint.h:137:
+	   (CONFIG_KPRINT_FILTER_EMERG && (level) == KPRINT_EMERG)	\
+	|| (CONFIG_KPRINT_FILTER_ALERT && (level) == KPRINT_ALERT)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1071: FILE: include/linux/kprint.h:138:
+	|| (CONFIG_KPRINT_FILTER_ALERT && (level) == KPRINT_ALERT)	\
+	|| (CONFIG_KPRINT_FILTER_CRIT && (level) == KPRINT_CRIT)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1072: FILE: include/linux/kprint.h:139:
+	|| (CONFIG_KPRINT_FILTER_CRIT && (level) == KPRINT_CRIT)	\
+	|| (CONFIG_KPRINT_FILTER_ERROR && (level) == KPRINT_ERROR)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1073: FILE: include/linux/kprint.h:140:
+	|| (CONFIG_KPRINT_FILTER_ERROR && (level) == KPRINT_ERROR)	\
+	|| (CONFIG_KPRINT_FILTER_WARNING && (level) == KPRINT_WARNING)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1074: FILE: include/linux/kprint.h:141:
+	|| (CONFIG_KPRINT_FILTER_WARNING && (level) == KPRINT_WARNING)	\
+	|| (CONFIG_KPRINT_FILTER_NOTICE && (level) == KPRINT_NOTICE)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1075: FILE: include/linux/kprint.h:142:
+	|| (CONFIG_KPRINT_FILTER_NOTICE && (level) == KPRINT_NOTICE)	\
+	|| (CONFIG_KPRINT_FILTER_INFO && (level) == KPRINT_INFO)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1076: FILE: include/linux/kprint.h:143:
+	|| (CONFIG_KPRINT_FILTER_INFO && (level) == KPRINT_INFO)	\
+	|| (CONFIG_KPRINT_FILTER_DEBUG  && (level) == KPRINT_DEBUG)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1078: FILE: include/linux/kprint.h:145:
+#define kprint_wrapper(level, class, fmt, ...)			\
+	if (!(KPRINT_FILTER(level))) {				\
+		kprint_function(				\
+			level,					\
+			KPRINT_CLASS(class,)			\
+			KPRINT_TIMESTAMP(kprint_clock(),)	\
+			KPRINT_LOCATION(__FILE__,)		\
+			KPRINT_LOCATION(__LINE__,)		\
+			KPRINT_LOCATION(__FUNCTION__,)		\
+			KPRINT_TAGS(KPRINT_SUBSYSTEM,)		\
+			KPRINT_TAGS(KPRINT_DRIVER,)		\
+			fmt, ## __VA_ARGS__);		\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#1078: FILE: include/linux/kprint.h:145:
+#define kprint_wrapper(level, class, fmt, ...)			\
+	if (!(KPRINT_FILTER(level))) {				\
+		kprint_function(				\
+			level,					\
+			KPRINT_CLASS(class,)			\
+			KPRINT_TIMESTAMP(kprint_clock(),)	\
+			KPRINT_LOCATION(__FILE__,)		\
+			KPRINT_LOCATION(__LINE__,)		\
+			KPRINT_LOCATION(__FUNCTION__,)		\
+			KPRINT_TAGS(KPRINT_SUBSYSTEM,)		\
+			KPRINT_TAGS(KPRINT_DRIVER,)		\
+			fmt, ## __VA_ARGS__);		\
+	}

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1082: FILE: include/linux/kprint.h:149:
+			KPRINT_CLASS(class,)			\
 			                  ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1083: FILE: include/linux/kprint.h:150:
+			KPRINT_TIMESTAMP(kprint_clock(),)	\
 			                               ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1084: FILE: include/linux/kprint.h:151:
+			KPRINT_LOCATION(__FILE__,)		\
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1085: FILE: include/linux/kprint.h:152:
+			KPRINT_LOCATION(__LINE__,)		\
 			                        ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1086: FILE: include/linux/kprint.h:153:
+			KPRINT_LOCATION(__FUNCTION__,)		\
 			                            ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1086: FILE: include/linux/kprint.h:153:
+			KPRINT_LOCATION(__FUNCTION__,)		\

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1087: FILE: include/linux/kprint.h:154:
+			KPRINT_TAGS(KPRINT_SUBSYSTEM,)		\
 			                            ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1088: FILE: include/linux/kprint.h:155:
+			KPRINT_TAGS(KPRINT_DRIVER,)		\
 			                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: include/linux/kprint.h:187:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1141: FILE: include/linux/ringbuffer.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1166: FILE: include/linux/ringbuffer.h:26:
+unsigned int ringbuffer_write(struct ringbuffer *rb,
+	const char *data, unsigned int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: include/linux/ringbuffer.h:28:
+unsigned int ringbuffer_read(struct ringbuffer *rb,
+	char  *data, unsigned int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: include/linux/ringbuffer.h:30:
+unsigned int ringbuffer_write_user(struct ringbuffer *rb,
+	const char __user *data, unsigned int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: include/linux/ringbuffer.h:32:
+unsigned int ringbuffer_read_user(struct ringbuffer *rb,
+	char __user *data, unsigned int size);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 25)
#1185: FILE: include/net/sctp/sctp.h:292:
+		if(sctp_debug_flag) { \
+			 printk(KERN_DEBUG whatever); \

ERROR:SPACING: space required before the open parenthesis '('
#1185: FILE: include/net/sctp/sctp.h:292:
+		if(sctp_debug_flag) { \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1186: FILE: include/net/sctp/sctp.h:293:
+			 printk(KERN_DEBUG whatever); \

ERROR:SPACING: space required before the open parenthesis '('
#1188: FILE: include/net/sctp/sctp.h:295:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1205: FILE: include/scsi/scsi_device.h:161:
+		if((scmd)->request->rq_disk) {				\

ERROR:SPACING: space required before the open parenthesis '('
#1213: FILE: include/scsi/scsi_device.h:169:
+	} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#1230: FILE: include/scsi/sd.h:66:
+		if((sdsk)->disk) {					\

ERROR:SPACING: space required before the open parenthesis '('
#1237: FILE: include/scsi/sd.h:73:
+	} while(0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1262: FILE: init/do_mounts_initrd.c:101:
+		printk("%s\n", error ? "failed" : "okay");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1289: FILE: kernel/Kconfig.kprint:18:
+config KPRINT_TIMESTAMP
+	bool "Timestamps"
+	default y
+	help
+	  Along with each log entry, record when the message was emitted.
+
+	  It is safe to say N here.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1326: FILE: kernel/Kconfig.kprint:55:
+config KPRINT_FILTER_EMERG
+	bool "Filter EMERG messages"
+	default n
+	help
+	  This option removes all EMERG (emergency) messages from the kernel.
+
+	  This is probably not something you want, so say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1334: FILE: kernel/Kconfig.kprint:63:
+config KPRINT_FILTER_ALERT
+	bool "Filter ALERT messages"
+	default n
+	help
+	  This option removes all ALERT messages from the kernel.
+
+	  This is probably not something you want, so say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1342: FILE: kernel/Kconfig.kprint:71:
+config KPRINT_FILTER_CRIT
+	bool "Filter CRIT messages"
+	default n
+	help
+	  This option removes all CRIT (critical) messages from the kernel.
+
+	  This is probably not something you want, so say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1350: FILE: kernel/Kconfig.kprint:79:
+config KPRINT_FILTER_ERROR
+	bool "Filter ERROR messages"
+	default n
+	help
+	  This option removes all ERROR messages from the kernel.
+
+	  This is probably not something you want, so say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1358: FILE: kernel/Kconfig.kprint:87:
+config KPRINT_FILTER_WARNING
+	bool "Filter WARNING messages"
+	default n
+	help
+	  This option removes all WARNING messages from the kernel.
+
+	  This is probably not something you want, so say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1366: FILE: kernel/Kconfig.kprint:95:
+config KPRINT_FILTER_NOTICE
+	bool "Filter NOTICE messages"
+	default n
+	help
+	  This option removes all NOTICE messages from the kernel.
+
+	  This is probably not something you want, though it will probably
+	  reduce the size of the kernel. If unsure, say N.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1375: FILE: kernel/Kconfig.kprint:104:
+config KPRINT_FILTER_INFO
+	bool "Filter INFO messages"
+	default n
+	help
+	  This option removes all INFO messages from the kernel.
+
+	  This is probably not something you want, though it will probably
+	  reduce the size of the kernel. If unsure, say N.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1416: FILE: kernel/kprint.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1421: FILE: kernel/kprint.c:6:
+#include <asm/uaccess.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1436: FILE: kernel/kprint.c:21:
+ * single space. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1440: FILE: kernel/kprint.c:25:
+	 * space before the actual parameter text. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1446: FILE: kernel/kprint.c:31:
+	 * it is. */

ERROR:SPACING: space required before the open parenthesis '('
#1455: FILE: kernel/kprint.c:40:
+	if(e->buf < e->end)

ERROR:SPACING: space required before the open parenthesis '('
#1479: FILE: kernel/kprint.c:64:
+	if(e->first_param)

ERROR:SPACING: space required before the open parenthesis '('
#1499: FILE: kernel/kprint.c:84:
+	if(!isprint(c)) {

ERROR:SPACING: space required before the open parenthesis '('
#1508: FILE: kernel/kprint.c:93:
+	if(c == '\"' || c == '\\')

ERROR:SPACING: space required before the open parenthesis '('
#1552: FILE: kernel/kprint.c:137:
+	if(e->empty_param) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1579: FILE: kernel/kprint.c:164:
+ * order for the ring-buffer to work (safely). */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1594: FILE: kernel/kprint.c:179:
+ * with. It is also protected by log_spinlock. */

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1595: FILE: kernel/kprint.c:180:
+static int log_contains_data = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1599: FILE: kernel/kprint.c:184:
+ * stores the arguments. Phew. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1600: FILE: kernel/kprint.c:185:
+void kprint_function(

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1602: FILE: kernel/kprint.c:187:
+	KPRINT_CLASS(enum kprint_class class,)
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1603: FILE: kernel/kprint.c:188:
+	KPRINT_TIMESTAMP(unsigned long long clock,)
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1604: FILE: kernel/kprint.c:189:
+	KPRINT_LOCATION(const char *file,)
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1605: FILE: kernel/kprint.c:190:
+	KPRINT_LOCATION(unsigned int line,)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1606: FILE: kernel/kprint.c:191:
+	KPRINT_LOCATION(const char *function,)
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1607: FILE: kernel/kprint.c:192:
+	KPRINT_TAGS(const char *subsystem,)
 	                                 ^

ERROR:SPACING: space required after that ',' (ctx:VxB)
#1608: FILE: kernel/kprint.c:193:
+	KPRINT_TAGS(const char *module,)
 	                              ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1623: FILE: kernel/kprint.c:208:
+	if(format[0] == '<' && format[1] >= '0'
+		&& format[1] <= '9' && format[2] == '>')
+	{

ERROR:SPACING: space required before the open parenthesis '('
#1623: FILE: kernel/kprint.c:208:
+	if(format[0] == '<' && format[1] >= '0'

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1624: FILE: kernel/kprint.c:209:
+	if(format[0] == '<' && format[1] >= '0'
+		&& format[1] <= '9' && format[2] == '>')

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1637: FILE: kernel/kprint.c:222:
+	KPRINT_LOCATION(args_printf(&esc, &print_args,
+		" %s %d %s", file, line, function));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1639: FILE: kernel/kprint.c:224:
+	KPRINT_TAGS(args_printf(&esc, &print_args,
+		" %s %s", subsystem, module));

ERROR:SPACING: space required before the open parenthesis '('
#1656: FILE: kernel/kprint.c:241:
+	if(printed_len > sizeof(s))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1669: FILE: kernel/kprint.c:254:
+	 * printing to the console and storing the plain-text version. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1675: FILE: kernel/kprint.c:260:
+EXPORT_SYMBOL(kprint_function);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1678: FILE: kernel/kprint.c:263:
+ * linux/kprint.h. */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1684: FILE: kernel/kprint.c:269:
+EXPORT_SYMBOL(kprint_clock);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1687: FILE: kernel/kprint.c:272:
+ * printing, in order. */

ERROR:SPACING: space required before the open parenthesis '('
#1709: FILE: kernel/kprint.c:294:
+	switch(type) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1719: FILE: kernel/kprint.c:304:
+		 * unpredictable. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1721: FILE: kernel/kprint.c:306:
+		ret = wait_event_interruptible(log_waitqueue,
+			log_contains_data);

ERROR:SPACING: space required before the open parenthesis '('
#1722: FILE: kernel/kprint.c:307:
+		if(ret)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1731: FILE: kernel/kprint.c:316:
+		 * might be waiting, in case there's more data. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1744: FILE: kernel/kprint.c:329:
+		 * condition they'll wake up on is false. */

CHECK:SPACING: No space is necessary after a cast
#1754: FILE: kernel/kprint.c:339:
+		ret = min((int) sizeof(kprint_columns), len);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1769: FILE: kernel/printk.c:315:
+extern int do_syslog_kprint(int type, char __user *buf, int len);

ERROR:SPACING: space required before the open parenthesis '('
#1773: FILE: kernel/printk.c:319:
+	if(type & 0x10)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1817: FILE: lib/ringbuffer.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1822: FILE: lib/ringbuffer.c:6:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1847: FILE: lib/ringbuffer.c:31:
+unsigned int ringbuffer_fill_count(struct ringbuffer *rb) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1852: FILE: lib/ringbuffer.c:36:
+ * that were NOT written). */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1854: FILE: lib/ringbuffer.c:38:
+unsigned int ringbuffer_write(struct ringbuffer *rb,
+	const char *data, unsigned int size)

ERROR:SPACING: space required before the open parenthesis '('
#1861: FILE: lib/ringbuffer.c:45:
+		if(rb->fill_count == rb->size || !size)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1865: FILE: lib/ringbuffer.c:49:
+		 * Stop at the read pointer or end of the buffer. */

ERROR:SPACING: space required before the open parenthesis '('
#1866: FILE: lib/ringbuffer.c:50:
+		if(rb->wr >= rb->rd)

ERROR:SPACING: space required before the open parenthesis '('
#1872: FILE: lib/ringbuffer.c:56:
+		if(can_write > size)

ERROR:SPACING: space required before the open parenthesis '('
#1881: FILE: lib/ringbuffer.c:65:
+	} while(--n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: lib/ringbuffer.c:71:
+unsigned int ringbuffer_read(struct ringbuffer *rb,
+	char *data, unsigned int size)

ERROR:SPACING: space required before the open parenthesis '('
#1894: FILE: lib/ringbuffer.c:78:
+		if(rb->fill_count == 0 || !size)

ERROR:SPACING: space required before the open parenthesis '('
#1897: FILE: lib/ringbuffer.c:81:
+		if(rb->rd >= rb->wr)

ERROR:SPACING: space required before the open parenthesis '('
#1902: FILE: lib/ringbuffer.c:86:
+		if(can_read > size)

ERROR:SPACING: space required before the open parenthesis '('
#1910: FILE: lib/ringbuffer.c:94:
+	} while(--n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1916: FILE: lib/ringbuffer.c:100:
+unsigned int ringbuffer_write_user(struct ringbuffer *rb,
+	const char __user *data, unsigned int size)

ERROR:SPACING: space required before the open parenthesis '('
#1923: FILE: lib/ringbuffer.c:107:
+		if(rb->fill_count == rb->size || !size)

ERROR:SPACING: space required before the open parenthesis '('
#1926: FILE: lib/ringbuffer.c:110:
+		if(rb->wr >= rb->rd)

ERROR:SPACING: space required before the open parenthesis '('
#1931: FILE: lib/ringbuffer.c:115:
+		if(can_write > size)

ERROR:SPACING: space required before the open parenthesis '('
#1939: FILE: lib/ringbuffer.c:123:
+	} while(--n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1945: FILE: lib/ringbuffer.c:129:
+unsigned int ringbuffer_read_user(struct ringbuffer *rb,
+	char __user *data, unsigned int size)

ERROR:SPACING: space required before the open parenthesis '('
#1952: FILE: lib/ringbuffer.c:136:
+		if(rb->fill_count == 0 || !size)

ERROR:SPACING: space required before the open parenthesis '('
#1955: FILE: lib/ringbuffer.c:139:
+		if(rb->rd >= rb->wr)

ERROR:SPACING: space required before the open parenthesis '('
#1960: FILE: lib/ringbuffer.c:144:
+		if(can_read > size)

ERROR:SPACING: space required before the open parenthesis '('
#1968: FILE: lib/ringbuffer.c:152:
+	} while(--n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1990: FILE: lib/vsprintf.c:361:
+static void args_number(void *data, const struct args_ops *ops,
+	unsigned long long num, int base, int size, int precision, int type)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1992: FILE: lib/vsprintf.c:363:
+	char sign,tmp[66];
 	         ^

CHECK:SPACING: No space is necessary after a cast
#2007: FILE: lib/vsprintf.c:378:
+		if ((signed long long) num < 0) {

CHECK:SPACING: No space is necessary after a cast
#2009: FILE: lib/vsprintf.c:380:
+			num = - (signed long long) num;

ERROR:SPACING: space prohibited after that '-' (ctx:WxW)
#2009: FILE: lib/vsprintf.c:380:
+			num = - (signed long long) num;
 			      ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2030: FILE: lib/vsprintf.c:401:
+	/* Generic code, for any base:
+	else do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2037: FILE: lib/vsprintf.c:408:
+		int shift = 3;
+		if (base == 16) shift = 4;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2037: FILE: lib/vsprintf.c:408:
+		if (base == 16) shift = 4;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2051: FILE: lib/vsprintf.c:422:
+	if (!(type & (ZEROPAD+LEFT))) {
 	                     ^

ERROR:SPACING: space required before the open parenthesis '('
#2052: FILE: lib/vsprintf.c:423:
+		while(--size >= 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2069: FILE: lib/vsprintf.c:440:
+		char c = (type & ZEROPAD) ? '0' : ' ';
+		while (--size >= 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2104: FILE: lib/vsprintf.c:729:
+void args_vprintf(void *data, const struct args_ops *ops,
+	const char *fmt, va_list args)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2116: FILE: lib/vsprintf.c:741:
+	int precision;		/* min. # of digits for integers; max
+				   number of chars for from string */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2116: FILE: lib/vsprintf.c:741:
+				   number of chars for from string */

WARNING:INDENTED_LABEL: labels should not be indented
#2134: FILE: lib/vsprintf.c:759:
+		repeat:

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2136: FILE: lib/vsprintf.c:761:
+			switch (*fmt) {
+				case '-': flags |= LEFT; goto repeat;
+				case '+': flags |= PLUS; goto repeat;
+				case ' ': flags |= SPACE; goto repeat;
+				case '#': flags |= SPECIAL; goto repeat;
+				case '0': flags |= ZEROPAD; goto repeat;

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2137: FILE: lib/vsprintf.c:762:
+				case '-': flags |= LEFT; goto repeat;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2138: FILE: lib/vsprintf.c:763:
+				case '+': flags |= PLUS; goto repeat;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2139: FILE: lib/vsprintf.c:764:
+				case ' ': flags |= SPACE; goto repeat;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2140: FILE: lib/vsprintf.c:765:
+				case '#': flags |= SPECIAL; goto repeat;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2141: FILE: lib/vsprintf.c:766:
+				case '0': flags |= ZEROPAD; goto repeat;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2146: FILE: lib/vsprintf.c:771:
+		if (isdigit(*fmt))
[...]
+		else if (*fmt == '*') {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2161: FILE: lib/vsprintf.c:786:
+^I^I^I++fmt;^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2162: FILE: lib/vsprintf.c:787:
+			if (isdigit(*fmt))
[...]
+			else if (*fmt == '*') {
[...]

ERROR:SPACING: spaces required around that '==' (ctx:WxV)
#2176: FILE: lib/vsprintf.c:801:
+		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 		         ^

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#2188: FILE: lib/vsprintf.c:813:
+		switch (*fmt) {
+			case 'c':
[...]
+			case 's':
[...]
+			case 'p':
[...]
+			case 'n':
[...]
+			case '%':
[...]
+			case 'o':
[...]
+			case 'X':
[...]
+			case 'x':
[...]
+			case 'd':
+			case 'i':
[...]
+			case 'u':
[...]
+			default:

CHECK:SPACING: No space is necessary after a cast
#2194: FILE: lib/vsprintf.c:819:
+				c = (unsigned char) va_arg(args, int);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2223: FILE: lib/vsprintf.c:848:
+					field_width = 2*sizeof(void *);
 					               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2227: FILE: lib/vsprintf.c:852:
+				args_number(data, ops,
+					(unsigned long) va_arg(args, void *),

CHECK:SPACING: No space is necessary after a cast
#2227: FILE: lib/vsprintf.c:852:
+					(unsigned long) va_arg(args, void *),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2232: FILE: lib/vsprintf.c:857:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2272: FILE: lib/vsprintf.c:897:
+		if (qualifier == 'L')
[...]
+		else if (qualifier == 'l') {
[...]
+		} else if (qualifier == 'Z' || qualifier == 'z') {
[...]
+		} else if (qualifier == 't') {
[...]
+		} else if (qualifier == 'h') {
[...]
+		} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#2277: FILE: lib/vsprintf.c:902:
+				num = (signed long) num;

CHECK:SPACING: No space is necessary after a cast
#2283: FILE: lib/vsprintf.c:908:
+			num = (unsigned short) va_arg(args, int);

CHECK:SPACING: No space is necessary after a cast
#2285: FILE: lib/vsprintf.c:910:
+				num = (signed short) num;

CHECK:SPACING: No space is necessary after a cast
#2289: FILE: lib/vsprintf.c:914:
+				num = (signed int) num;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2292: FILE: lib/vsprintf.c:917:
+		args_number(data, ops,
+			num, base, field_width, precision, flags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2299: FILE: lib/vsprintf.c:924:
+EXPORT_SYMBOL(args_vprintf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2319: FILE: lib/vsprintf.c:987:
+EXPORT_SYMBOL(args_printf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2334: FILE: net/tipc/dbg.c:291:
+		printk("%s", crs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 187 errors, 101 warnings, 58 checks, 1984 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000373242.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
