CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/ext4/balloc.c:1997:
+ext4_fsblk_t ext4_new_meta_blocks(handle_t *handle, struct inode *inode,
+		ext4_fsblk_t goal, unsigned long *count, int *errp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: fs/ext4/balloc.c:2000:
+	ext4_fsblk_t ret;
+	ret = do_blk_alloc(handle, inode, 0, goal,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/ext4/balloc.c:2001:
+	ret = do_blk_alloc(handle, inode, 0, goal,
+				count, errp, EXT4_META_BLOCK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/ext4/balloc.c:2024:
+ext4_fsblk_t ext4_new_meta_block(handle_t *handle, struct inode *inode,
+		ext4_fsblk_t goal, int *errp)

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: fs/ext4/balloc.c:2027:
+	unsigned long count = 1;
+	return ext4_new_meta_blocks(handle, inode, goal, &count, errp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: fs/ext4/dir.c:133:
+		err = ext4_get_blocks_wrap(NULL, inode, blk, 1, &map_bh,
+						0, 0, 0);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: fs/ext4/ext4_extents.h:215:
+extern int ext4_ext_calc_metadata_amount(struct inode *inode, int blocks);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#268: FILE: fs/ext4/ext4_i.h:172:
+	spinlock_t i_block_reservation_lock;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#295: FILE: fs/ext4/extents.c:266:
+	num = leafs = (newextents + lcap - 1) / lcap;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#390: FILE: fs/ext4/inode.c:1423:
 }
+/*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: fs/ext4/inode.c:1456:
+       struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: fs/ext4/inode.c:1457:
+       unsigned long md_needed, mdblocks, total = 0;$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#434: FILE: fs/ext4/inode.c:1467:
+	BUG_ON(mdblocks < EXT4_I(inode)->i_reserved_meta_blocks);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: fs/ext4/inode.c:1498:
+	BUG_ON(mdb > EXT4_I(inode)->i_reserved_meta_blocks);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#477: FILE: fs/ext4/inode.c:1510:
+	BUG_ON(used + to_free > EXT4_I(inode)->i_reserved_data_blocks);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: fs/ext4/inode.c:1513:
+	BUG_ON(mdb > EXT4_I(inode)->i_reserved_meta_blocks);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: fs/ext4/inode.c:1520:
+static void ext4_da_page_release_reservation(struct page *page,
+						unsigned long offset)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'offset <= curr_off'
#498: FILE: fs/ext4/inode.c:1531:
+		if ((offset <= curr_off) && (buffer_delay(bh))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ret == 0'
#518: FILE: fs/ext4/inode.c:1558:
+	if ((ret == 0) && !buffer_delay(bh_result)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#537: FILE: fs/ext4/inode.c:1579:
 }
+#define		EXT4_DELALLOC_RSVED	1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: fs/ext4/mballoc.c:2967:
+		percpu_counter_sub(&sbi->s_freeblocks_counter,
+					ac->ac_b_ex.fe_len);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ei->i_block_reservation_lock
#673: FILE: fs/ext4/super.c:581:
+	spin_lock_init(&(ei->i_block_reservation_lock));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258604.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 14 checks, 507 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258604.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
