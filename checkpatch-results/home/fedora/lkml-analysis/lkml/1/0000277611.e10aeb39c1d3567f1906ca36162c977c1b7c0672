WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/vdir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/vdir.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/vdir.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:LINE_SPACING: Missing a blank line after declarations
#74: FILE: fs/aufs/vdir.c:32:
+		const int mask = sizeof(ino_t) - 1;
+		if (sz & mask) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#80: FILE: fs/aufs/vdir.c:38:
+	AuDebugOn(sz % sizeof(ino_t));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LINE_SPACING: Missing a blank line after declarations
#112: FILE: fs/aufs/vdir.c:70:
+	int i;
+	for (i = 0; i < AuSize_NHASH; i++)

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#112: FILE: fs/aufs/vdir.c:70:
+	for (i = 0; i < AuSize_NHASH; i++)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#138: FILE: fs/aufs/vdir.c:96:
+	AuTraceEnter();

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: fs/aufs/vdir.c:101:
+		struct hlist_head *h;
+		h = dst->heads + i;

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#179: FILE: fs/aufs/vdir.c:137:
+	LKTRTrace("limit %d\n", limit);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#242: FILE: fs/aufs/vdir.c:200:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#321: FILE: fs/aufs/vdir.c:279:
+	AuTraceErrPtr(vdir);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#388: FILE: fs/aufs/vdir.c:346:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#403: FILE: fs/aufs/vdir.c:361:
+	AuDebugOn(room->p < p.p || deblk_end.p <= room->p
+		  || !is_deblk_end(room, &deblk_end));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#460: FILE: fs/aufs/vdir.c:418:
+#if 0 /* reserved for future use */

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: fs/aufs/vdir.c:420:
+		struct inode *h_inode;
+		xinoe.h_gen = AuXino_INVALID_HGEN;

CHECK:CAMELCASE: Avoid CamelCase: <AuXino_INVALID_HGEN>
#462: FILE: fs/aufs/vdir.c:420:
+		xinoe.h_gen = AuXino_INVALID_HGEN;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#469: FILE: fs/aufs/vdir.c:427:
+			iput(h_inode);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuFillVdir_CALLED>
#495: FILE: fs/aufs/vdir.c:453:
+#define AuFillVdir_CALLED	1

CHECK:CAMELCASE: Avoid CamelCase: <AuFillVdir_SHWH>
#496: FILE: fs/aufs/vdir.c:454:
+#define AuFillVdir_SHWH		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#496: FILE: fs/aufs/vdir.c:454:
+#define AuFillVdir_SHWH		(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuFillVdir_##name>
#497: FILE: fs/aufs/vdir.c:455:
+#define au_ftest_fillvdir(flags, name)	((flags) & AuFillVdir_##name)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: fs/aufs/vdir.c:465:
+^Istruct au_vdir ^I*vdir;$

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#524: FILE: fs/aufs/vdir.c:482:
+	LKTRTrace("%.*s, namelen %d, i%Lu, dt%u\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#533: FILE: fs/aufs/vdir.c:491:
+	if (namelen <= AUFS_WH_PFX_LEN
+	    || memcmp(name, AUFS_WH_PFX, AUFS_WH_PFX_LEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#536: FILE: fs/aufs/vdir.c:494:
+			if (test_known(arg->delist + bindex, name, namelen)
+			    || au_nhash_test_known_wh(arg->whlist + bindex,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#588: FILE: fs/aufs/vdir.c:546:
+	o = p = __getname();

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#707: FILE: fs/aufs/vdir.c:665:
+	LKTRTrace("%.*s, may %d\n", AuDLNPair(dentry), may_read);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustWriteLock>
#708: FILE: fs/aufs/vdir.c:666:
+	FiMustWriteLock(file);

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#710: FILE: fs/aufs/vdir.c:668:
+	IMustLock(inode);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustWriteLock>
#711: FILE: fs/aufs/vdir.c:669:
+	IiMustWriteLock(inode);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#730: FILE: fs/aufs/vdir.c:688:
+	} else if (may_read
+		   && (inode->i_version != vdir->vd_version

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#731: FILE: fs/aufs/vdir.c:689:
+		   && (inode->i_version != vdir->vd_version
+		       || time_after(jiffies, vdir->vd_jiffy + expire))) {

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#732: FILE: fs/aufs/vdir.c:690:
+		LKTRTrace("iver %Lu, vdver %lu, exp %lu\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#747: FILE: fs/aufs/vdir.c:705:
+	if (!err) {
[...]
+	} else if (allocated)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#773: FILE: fs/aufs/vdir.c:731:
+		au_vdir_deblk_t **p;
+		p = au_kzrealloc(tgt->vd_deblk, sizeof(*p) * tgt->vd_nblk,

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_DEBLK>
#782: FILE: fs/aufs/vdir.c:740:
+	memcpy(tgt->vd_deblk[0], src->vd_deblk[0], AuSize_DEBLK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: fs/aufs/vdir.c:759:
+	BUG_ON(rerr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#814: FILE: fs/aufs/vdir.c:772:
+	LKTRTrace("%.*s, pos %Ld\n", AuDLNPair(dentry), file->f_pos);

CHECK:BRACES: braces {} should be used on all arms of this statement
#826: FILE: fs/aufs/vdir.c:784:
+	if (!vdir_cache) {
[...]
+	} else if (!file->f_pos && vdir_cache->vd_version != file->f_version) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#836: FILE: fs/aufs/vdir.c:794:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#840: FILE: fs/aufs/vdir.c:798:
+	if (!err) {
[...]
+	} else if (allocated)
[...]

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#873: FILE: fs/aufs/vdir.c:831:
+	LKTRTrace("%.*s, pos %Ld\n", AuDLNPair(dentry), file->f_pos);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#879: FILE: fs/aufs/vdir.c:837:
+	LKTRTrace("offset %Ld\n", offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#902: FILE: fs/aufs/vdir.c:860:
+			int l;
+			l = calc_size(p.de->de_str.len);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#929: FILE: fs/aufs/vdir.c:887:
+	LKTRTrace("%.*s, pos %Ld\n", AuDLNPair(dentry), file->f_pos);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#938: FILE: fs/aufs/vdir.c:896:
+		deblk_end.deblk
+			= vdir_cache->vd_deblk[vdir_cache->vd_last.i] + 1;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#941: FILE: fs/aufs/vdir.c:899:
+			LKTRTrace("%.*s, off%Ld, i%lu, dt%d\n",

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#960: FILE: fs/aufs/vdir.c:918:
+			vdir_cache->vd_last.p.deblk
+				= vdir_cache->vd_deblk[vdir_cache->vd_last.i];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 19 warnings, 29 checks, 928 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
