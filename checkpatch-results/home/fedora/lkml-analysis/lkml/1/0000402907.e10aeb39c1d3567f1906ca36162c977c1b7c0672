WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
notify_on_release - configures/reports whether the container subsystem should

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: include/linux/container.h:80:
+extern void __css_put(struct container_subsys_state *css);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#118: FILE: kernel/container.c:92:
+	 * NUL-terminated string */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#130: FILE: kernel/container.c:124:
+	 * but no longer (only if CONT_NOTIFY_ON_RELEASE is set) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#162: FILE: kernel/container.c:166:
+ * release_list_lock */

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: kernel/container.c:253:
+		struct container *cont = cg->subsys[i]->container;
+		if (atomic_dec_and_test(&cont->count) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: kernel/container.c:596:
+		 * agent */

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#311: FILE: kernel/container.c:834:
+	if (opts.release_agent)
+		kfree(opts.release_agent);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#330: FILE: kernel/container.c:935:
+		if (opts.release_agent)
+			kfree(opts.release_agent);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#372: FILE: kernel/container.c:1316:
+		if (simple_strtoul(buffer, NULL, 10) != 0)

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#381: FILE: kernel/container.c:1325:
+		if (nbytes && (buffer[nbytes-1] == '\n')) {
 		                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: kernel/container.c:1325:
+		if (nbytes && (buffer[nbytes-1] == '\n')) {
+			buffer[nbytes-1] = 0;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#382: FILE: kernel/container.c:1326:
+			buffer[nbytes-1] = 0;
 			             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#388: FILE: kernel/container.c:1332:
+			 * string */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#414: FILE: kernel/container.c:1391:
+	if (!(page = (char *)__get_free_page(GFP_KERNEL)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#424: FILE: kernel/container.c:1401:
+		size_t n;
+		mutex_lock(&container_mutex);

CHECK:SPACING: No space is necessary after a cast
#428: FILE: kernel/container.c:1405:
+		n = min(n, (size_t) PAGE_SIZE);

WARNING:MINMAX: min() should probably be min_t(size_t, n, PAGE_SIZE)
#428: FILE: kernel/container.c:1405:
+		n = min(n, (size_t) PAGE_SIZE);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#515: FILE: kernel/container.c:1896:
+		if ((err = container_add_file(cont, NULL, &cft_release_agent)) < 0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#544: FILE: kernel/container.c:2028:
+	 * list isn't RCU-safe */

WARNING:LINE_SPACING: Missing a blank line after declarations
#546: FILE: kernel/container.c:2030:
+	int i;
+	for (i = 0; i < CONTAINER_SUBSYS_COUNT; i++) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#558: FILE: kernel/container.c:2042:
+		 * release agent to be called anyway. */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#559: FILE: kernel/container.c:2043:
+		if (css && atomic_read(&css->refcnt)) {
+			return 1;
+		}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#673: FILE: kernel/container.c:2624:
+	 * structure alive */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#675: FILE: kernel/container.c:2626:
+	if (container_is_releasable(cont) && !atomic_read(&cont->count)
+	    && list_empty(&cont->children) && !container_has_css_refs(cont)) {

WARNING:TYPO_SPELLING: 'removeable' may be misspelled - perhaps 'removable'?
#676: FILE: kernel/container.c:2627:
+		/* Container is currently removeable. If it's not
 		                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#678: FILE: kernel/container.c:2629:
+		 * it now */

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: kernel/container.c:2631:
+		int need_schedule_work = 0;
+		spin_lock(&release_list_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#695: FILE: kernel/container.c:2646:
+	struct container *cont = css->container;
+	rcu_read_lock();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#730: FILE: kernel/container.c:2681:
+	BUG_ON(work != &release_agent_work);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#767: FILE: kernel/container.c:2718:
+		 * be a slow process */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 24 warnings, 5 checks, 675 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000402907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
