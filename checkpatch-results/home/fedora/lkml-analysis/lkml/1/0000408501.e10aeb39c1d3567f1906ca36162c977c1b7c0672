WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#28: 
CDL formated DASDs are now detected correctly even if no VOL1 label is
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#57: FILE: fs/partitions/ibm.c:68:
+	if (info == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*geo)...) over kmalloc(sizeof(struct hd_geometry)...)
#60: FILE: fs/partitions/ibm.c:70:
+	geo = kmalloc(sizeof(struct hd_geometry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!geo"
#61: FILE: fs/partitions/ibm.c:71:
+	if (geo == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!label"
#65: FILE: fs/partitions/ibm.c:74:
+	if (label == NULL)

WARNING:TYPO_SPELLING: 'unformated' may be misspelled - perhaps 'unformatted'?
#78: FILE: fs/partitions/ibm.c:102:
+	 * Three different formats: LDL, CDL and unformated disk
 	                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'unformated' may be misspelled - perhaps 'unformatted'?
#82: FILE: fs/partitions/ibm.c:106:
+	 * unformated disks we do not have to care about
 	   ^^^^^^^^^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#100: FILE: fs/partitions/ibm.c:114:
+				printk("CMS1/%8s(MDSK):", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#107: FILE: fs/partitions/ibm.c:121:
+				printk("CMS1/%8s:", name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#117: FILE: fs/partitions/ibm.c:130:
+				printk ("LNX1/%8s:", name);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#117: FILE: fs/partitions/ibm.c:130:
+				printk ("LNX1/%8s:", name);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#119: FILE: fs/partitions/ibm.c:132:
+				printk("(nonl)");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#127: FILE: fs/partitions/ibm.c:137:
+				      size-offset*(blocksize >> 9));
 				          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#127: FILE: fs/partitions/ibm.c:137:
+				      size-offset*(blocksize >> 9));
 				                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#190: FILE: fs/partitions/ibm.c:150:
+			printk("VOL1/%8s:", name);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#197: FILE: fs/partitions/ibm.c:157:
+			data = read_dev_sector(bdev, blk * (blocksize/512),
 			                                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data"
#199: FILE: fs/partitions/ibm.c:159:
+			while (data != NULL) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#208: FILE: fs/partitions/ibm.c:168:
+				if (f1.DS1FMTID == _ascebc['4']
+				    || f1.DS1FMTID == _ascebc['5']

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#209: FILE: fs/partitions/ibm.c:169:
+				    || f1.DS1FMTID == _ascebc['5']
+				    || f1.DS1FMTID == _ascebc['7']) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#212: FILE: fs/partitions/ibm.c:172:
+							       (blocksize/512),
 							                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#233: FILE: fs/partitions/ibm.c:193:
+						       blk * (blocksize/512),
 						                       ^

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: fs/partitions/ibm.c:200:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#241: FILE: fs/partitions/ibm.c:201:
+			printk(KERN_WARNING "Warning, expected Label VOL1 not "

WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#242: FILE: fs/partitions/ibm.c:202:
+			       "found, treating as CDL formated Disk");
 			                               ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#242: FILE: fs/partitions/ibm.c:202:
+			printk(KERN_WARNING "Warning, expected Label VOL1 not "
+			       "found, treating as CDL formated Disk");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 13 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
