WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: fs/ceph/addr.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'absense' may be misspelled - perhaps 'absence'?
#82: FILE: fs/ceph/addr.c:26:
+ * count dirty pages on the inode.  In the absense of snapshots,
                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: fs/ceph/addr.c:51:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#124: FILE: fs/ceph/addr.c:68:
+		dout("%p set_page_dirty %p idx %lu -- already dirty\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#146: FILE: fs/ceph/addr.c:90:
+	dout("%p set_page_dirty %p idx %lu head %d/%d -> %d/%d "
 	^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#147: FILE: fs/ceph/addr.c:91:
+	dout("%p set_page_dirty %p idx %lu head %d/%d -> %d/%d "
+	     "snapc %p seq %lld (%d snaps)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#149: FILE: fs/ceph/addr.c:93:
+	     ci->i_wrbuffer_ref-1, ci->i_wrbuffer_ref_head-1,
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#149: FILE: fs/ceph/addr.c:93:
+	     ci->i_wrbuffer_ref-1, ci->i_wrbuffer_ref_head-1,
 	                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: fs/ceph/addr.c:106:
+			__inc_bdi_stat(mapping->backing_dev_info,
+					BDI_RECLAIMABLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: fs/ceph/addr.c:110:
+		radix_tree_tag_set(&mapping->page_tree,
+				page_index(page), PAGECACHE_TAG_DIRTY);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#175: FILE: fs/ceph/addr.c:119:
+		dout("ANON set_page_dirty %p (raced truncate?)\n", page);
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: fs/ceph/addr.c:131:
+	BUG_ON(!PageDirty(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: fs/ceph/addr.c:146:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: fs/ceph/addr.c:147:
+	BUG_ON(!page->private);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: fs/ceph/addr.c:148:
+	BUG_ON(!PagePrivate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#205: FILE: fs/ceph/addr.c:149:
+	BUG_ON(!page->mapping);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#221: FILE: fs/ceph/addr.c:165:
+		dout("%p invalidatepage %p idx %lu full dirty page %lu\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#228: FILE: fs/ceph/addr.c:172:
+		dout("%p invalidatepage %p idx %lu partial dirty page\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#237: FILE: fs/ceph/addr.c:181:
+	dout("%p releasepage %p idx %lu\n", inode, page, page->index);
 	^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: fs/ceph/addr.c:181:
+	struct inode *inode = page->mapping ? page->mapping->host : NULL;
+	dout("%p releasepage %p idx %lu\n", inode, page, page->index);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#247: FILE: fs/ceph/addr.c:191:
+static int readpage_nounlock(struct file *filp, struct page *page)
                                           ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#255: FILE: fs/ceph/addr.c:199:
+	dout("readpage inode %p file %p page %p index %lu\n",
 	^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#256: FILE: fs/ceph/addr.c:200:
+	     inode, filp, page, page->index);
 	            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#276: FILE: fs/ceph/addr.c:220:
+static int ceph_readpage(struct file *filp, struct page *page)
                                       ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#278: FILE: fs/ceph/addr.c:222:
+	int r = readpage_nounlock(filp, page);
 	                          ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: fs/ceph/addr.c:223:
+	int r = readpage_nounlock(filp, page);
+	unlock_page(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#287: FILE: fs/ceph/addr.c:231:
+					   unsigned *nr_pages)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#294: FILE: fs/ceph/addr.c:238:
+	pages = kmalloc(sizeof(*pages) * *nr_pages, GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#298: FILE: fs/ceph/addr.c:242:
+	BUG_ON(list_empty(page_list));

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#302: FILE: fs/ceph/addr.c:246:
+			dout("readpages page %d %p\n", contig_pages, page);
 			^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#319: FILE: fs/ceph/addr.c:263:
+			  struct list_head *page_list, unsigned nr_pages)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#330: FILE: fs/ceph/addr.c:274:
+	dout("readpages %p file %p nr_pages %d\n",
 	^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#349: FILE: fs/ceph/addr.c:293:
+	/* set uptodate and add to lru in pagevec-sized chunks */
 	       ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#361: FILE: fs/ceph/addr.c:305:
+			int s = rc < 0 ? 0 : rc;
+			zero_user_segment(page, s, PAGE_CACHE_SIZE);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#366: FILE: fs/ceph/addr.c:310:
+			dout("readpages %p add_to_page_cache failed %p\n",
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#370: FILE: fs/ceph/addr.c:314:
+		dout("readpages %p adding %p idx %lu\n", inode, page,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#400: FILE: fs/ceph/addr.c:344:
+		dout(" cap_snap %p snapc %p has %d dirty pages\n", capsnap,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#411: FILE: fs/ceph/addr.c:355:
+		dout(" head snapc %p has %d dirty pages\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#446: FILE: fs/ceph/addr.c:390:
+	dout("writepage %p idx %lu\n", page, page->index);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#449: FILE: fs/ceph/addr.c:393:
+		dout("writepage %p - no mapping\n", page);
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!snapc"
#458: FILE: fs/ceph/addr.c:402:
+	if (snapc == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#459: FILE: fs/ceph/addr.c:403:
+		dout("writepage %p page %p not dirty?\n", inode, page);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#463: FILE: fs/ceph/addr.c:407:
+		dout("writepage %p page %p snapc %p not writeable - noop\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#478: FILE: fs/ceph/addr.c:422:
+	dout("writepage %p page %p index %lu on %llu~%u\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#489: FILE: fs/ceph/addr.c:433:
+		dout("writepage setting page/mapping error %d %p\n", err, page);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#495: FILE: fs/ceph/addr.c:439:
+		dout("writepage cleaned page %p\n", page);
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: fs/ceph/addr.c:454:
+	int err = writepage_nounlock(page, wbc);
+	unlock_page(page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#514: FILE: fs/ceph/addr.c:458:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#532: FILE: fs/ceph/addr.c:476:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#546: FILE: fs/ceph/addr.c:490:
+	unsigned wrote;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#571: FILE: fs/ceph/addr.c:515:
+	dout("writepages_finish %p rc %d bytes %llu wrote %d (pages)\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'writepages_finish', this function's name, in a string
#571: FILE: fs/ceph/addr.c:515:
+	dout("writepages_finish %p rc %d bytes %llu wrote %d (pages)\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#577: FILE: fs/ceph/addr.c:521:
+		BUG_ON(!page);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#581: FILE: fs/ceph/addr.c:525:
+			dout("inode %p skipping page %p\n", inode, page);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#587: FILE: fs/ceph/addr.c:531:
+		dout("unlocking %d %p\n", i, page);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#591: FILE: fs/ceph/addr.c:535:
+	dout("%p wrote+cleaned %d pages\n", inode, wrote);
 	^^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#611: FILE: fs/ceph/addr.c:555:
+	req->r_pages = kmalloc(sizeof(struct page *) * req->r_num_pages,
+			       GFP_NOFS);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#638: FILE: fs/ceph/addr.c:582:
+	unsigned wsize = 1 << inode->i_blkbits;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#651: FILE: fs/ceph/addr.c:595:
+	dout("writepages_start %p dosync=%d (pdflush=%d mode=%s)\n",
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#671: FILE: fs/ceph/addr.c:615:
+		dout(" writepages congested\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#680: FILE: fs/ceph/addr.c:624:
+		dout(" cyclic, start at %lu\n", start);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#687: FILE: fs/ceph/addr.c:631:
+		dout(" not cyclic, %lu to %lu\n", start, end);
 		^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#697: FILE: fs/ceph/addr.c:641:
+		/* hmm, why does writepages get called when there
+		   is no dirty data? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#697: FILE: fs/ceph/addr.c:641:
+		   is no dirty data? */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#698: FILE: fs/ceph/addr.c:642:
+		dout(" no snap context with dirty data?\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#701: FILE: fs/ceph/addr.c:645:
+	dout(" oldest snapc is %p seq %lld (%d snaps)\n",
 	^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#705: FILE: fs/ceph/addr.c:649:
+		 * start of the original file range. */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#706: FILE: fs/ceph/addr.c:650:
+		dout("  snapc differs from last pass, restarting at %lu\n",
 		^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#713: FILE: fs/ceph/addr.c:657:
+		unsigned i;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#736: FILE: fs/ceph/addr.c:680:
+		dout("pagevec_lookup_tag got %d\n", pvec_pages);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#741: FILE: fs/ceph/addr.c:685:
+			dout("? %p idx %lu\n", page, page->index);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#750: FILE: fs/ceph/addr.c:694:
+				dout("!dirty or !mapping %p\n", page);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#755: FILE: fs/ceph/addr.c:699:
+				dout("end of range %p\n", page);
 				^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'page->index != next'
#760: FILE: fs/ceph/addr.c:704:
+			if (next && (page->index != next)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#761: FILE: fs/ceph/addr.c:705:
+				dout("not consecutive %p\n", page);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#766: FILE: fs/ceph/addr.c:710:
+				dout("waiting on writeback %p\n", page);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#772: FILE: fs/ceph/addr.c:716:
+				dout("%p page eof %llu\n", page, snap_size ?
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#779: FILE: fs/ceph/addr.c:723:
+				dout("%p under writeback\n", page);
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#786: FILE: fs/ceph/addr.c:730:
+				dout("page snapc %p != oldest %p\n",
 				^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#795: FILE: fs/ceph/addr.c:739:
+				dout("%p !clear_page_dirty_for_io\n", page);
 				^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: fs/ceph/addr.c:750:
+				req = ceph_osdc_new_request(&client->osdc,
+					    &ci->i_layout,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#827: FILE: fs/ceph/addr.c:771:
+			dout("%p will write page %p idx %lu\n",
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#840: FILE: fs/ceph/addr.c:784:
+			int j;
+			BUG_ON(!locked_pages || first < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#840: FILE: fs/ceph/addr.c:784:
+			BUG_ON(!locked_pages || first < 0);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#844: FILE: fs/ceph/addr.c:788:
+				dout("reached end pvec, trying for more\n");
 				^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#850: FILE: fs/ceph/addr.c:794:
+			 * will need to release them below. */

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#852: FILE: fs/ceph/addr.c:796:
+				dout(" pvec leftover page %p\n",
 				^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#854: FILE: fs/ceph/addr.c:798:
+				pvec.pages[j-i+first] = pvec.pages[j];
 				            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#854: FILE: fs/ceph/addr.c:798:
+				pvec.pages[j-i+first] = pvec.pages[j];
 				              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#856: FILE: fs/ceph/addr.c:800:
+			pvec.nr -= i-first;
 			            ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#863: FILE: fs/ceph/addr.c:807:
+		dout("writepages got %d pages at %llu~%llu\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#884: FILE: fs/ceph/addr.c:828:
+		dout("pagevec_release on %d pages (%p)\n", (int)pvec.nr,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#894: FILE: fs/ceph/addr.c:838:
+		dout("writepages looping back to beginning of file\n");
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#909: FILE: fs/ceph/addr.c:853:
+	dout("writepages done, rc = %d\n", rc);
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#914: FILE: fs/ceph/addr.c:858:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#923: FILE: fs/ceph/addr.c:867:
+	struct ceph_snap_context *oldest = get_oldest_context(inode, NULL);
+	return !oldest || snapc->seq <= oldest->seq;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#931: FILE: fs/ceph/addr.c:875:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#931: FILE: fs/ceph/addr.c:875:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#953: FILE: fs/ceph/addr.c:897:
+	dout("write_begin file %p inode %p page %p %d~%d\n", file,
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#961: FILE: fs/ceph/addr.c:905:
+	BUG_ON(!ci->i_snap_realm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#963: FILE: fs/ceph/addr.c:907:
+	BUG_ON(!ci->i_snap_realm->cached_context);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#974: FILE: fs/ceph/addr.c:918:
+			dout(" page %p snapc %p not current or oldest\n",
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: fs/ceph/addr.c:929:
+			wait_event_interruptible(ci->i_cap_wq,
+			       context_is_writeable_or_written(inode, snapc));

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#991: FILE: fs/ceph/addr.c:935:
+		dout(" page %p snapc %p not current, but oldest\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1002: FILE: fs/ceph/addr.c:946:
+		dout(" page %p already uptodate\n", page);
 		^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1002: FILE: fs/ceph/addr.c:946:
+		dout(" page %p already uptodate\n", page);
 		                       ^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1020: FILE: fs/ceph/addr.c:964:
+	    (pos_in_page == 0 && (pos+len) >= i_size &&
 	                             ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1022: FILE: fs/ceph/addr.c:966:
+		dout(" zeroing %p 0 - %d and %d - %d\n",
 		^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1050: FILE: fs/ceph/addr.c:994:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1050: FILE: fs/ceph/addr.c:994:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1055: FILE: fs/ceph/addr.c:999:
+	unsigned from = pos & (PAGE_CACHE_SIZE - 1);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1058: FILE: fs/ceph/addr.c:1002:
+	dout("write_end file %p inode %p page %p %d~%d (%d)\n", file,
 	^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1063: FILE: fs/ceph/addr.c:1007:
+		zero_user_segment(page, from+copied, len);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1067: FILE: fs/ceph/addr.c:1011:
+	if (pos+copied > inode->i_size)
 	       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1068: FILE: fs/ceph/addr.c:1012:
+		check_cap = ceph_inode_set_size(inode, pos+copied);
 		                                          ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1111: FILE: fs/ceph/addr.c:1055:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1136: FILE: fs/ceph/addr.c:1080:
+	dout("page_mkwrite %p %llu~%llu page %p idx %lu\n", inode,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#1154: FILE: fs/ceph/addr.c:1098:
+	dout("page_mkwrite %p %llu~%llu = %d\n", inode, off, len, ret);
 	^^^^

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#1158: FILE: fs/ceph/addr.c:1102:
+static struct vm_operations_struct ceph_vmops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068929.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 100 warnings, 20 checks, 1117 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068929.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
