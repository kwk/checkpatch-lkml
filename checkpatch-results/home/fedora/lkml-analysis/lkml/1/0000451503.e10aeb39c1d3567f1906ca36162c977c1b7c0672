CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#61: FILE: include/linux/time.h:122:
+extern void update_wall_time(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: kernel/time/timekeeping.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#82: FILE: kernel/time/timekeeping.c:2:
+ *  linux/kernel/time/timekeeping.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: kernel/time/timekeeping.c:21:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#106: FILE: kernel/time/timekeeping.c:26:
+__attribute__((weak)) __cacheline_aligned_in_smp DEFINE_SEQLOCK(xtime_lock);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#108: FILE: kernel/time/timekeeping.c:28:
+EXPORT_SYMBOL(xtime_lock);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: kernel/time/timekeeping.c:30:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#111: FILE: kernel/time/timekeeping.c:31:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: kernel/time/timekeeping.c:32:
+ * The current time $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: kernel/time/timekeeping.c:33:
+ * wall_to_monotonic is what we need to add to xtime (or xtime corrected $

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#119: FILE: kernel/time/timekeeping.c:39:
+struct timespec xtime __attribute__ ((aligned (16)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#119: FILE: kernel/time/timekeeping.c:39:
+struct timespec xtime __attribute__ ((aligned (16)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#120: FILE: kernel/time/timekeeping.c:40:
+struct timespec wall_to_monotonic __attribute__ ((aligned (16)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(16) over __attribute__((aligned(16)))
#120: FILE: kernel/time/timekeeping.c:40:
+struct timespec wall_to_monotonic __attribute__ ((aligned (16)));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#122: FILE: kernel/time/timekeeping.c:42:
+EXPORT_SYMBOL(xtime);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: kernel/time/timekeeping.c:44:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: kernel/time/timekeeping.c:47:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#187: FILE: kernel/time/timekeeping.c:107:
+EXPORT_SYMBOL(getnstimeofday);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#201: FILE: kernel/time/timekeeping.c:121:
+	tv->tv_usec = now.tv_nsec/1000;
 	                         ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#204: FILE: kernel/time/timekeeping.c:124:
+EXPORT_SYMBOL(do_gettimeofday);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#243: FILE: kernel/time/timekeeping.c:163:
+EXPORT_SYMBOL(do_settimeofday);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#274: FILE: kernel/time/timekeeping.c:194:
+	printk(KERN_INFO "Time: %s clocksource has been installed.\n",

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#308: FILE: kernel/time/timekeeping.c:228:
+unsigned long __attribute__((weak)) read_persistent_clock(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: kernel/time/timekeeping.c:252:
+	set_normalized_timespec(&wall_to_monotonic,
+		-xtime.tv_sec, -xtime.tv_nsec);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'now > timekeeping_suspend_time'
#357: FILE: kernel/time/timekeeping.c:277:
+	if (now && (now > timekeeping_suspend_time)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: kernel/time/timekeeping.c:328:
+	int error = sysdev_class_register(&timekeeping_sysclass);
+	if (!error)

WARNING:TYPO_SPELLING: 'adusted' may be misspelled - perhaps 'adjusted'?
#432: FILE: kernel/time/timekeeping.c:352:
+	 * here.  This is tuned so that an error of about 1 msec is adusted
 	                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#477: FILE: kernel/time/timekeeping.c:397:
+	if (error > interval) {
[...]
+	} else if (error < -interval) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#485: FILE: kernel/time/timekeeping.c:405:
+		if (likely(error >= -interval)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#489: FILE: kernel/time/timekeeping.c:409:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: kernel/time/timekeeping.c:411:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451503.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 17 warnings, 12 checks, 964 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000451503.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
