CHECK:CAMELCASE: Avoid CamelCase: <Packet>
#87: FILE: drivers/staging/hv/NetVsc.c:96:
+	struct hv_netvsc_packet	*Packet

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LONG_LINE_STRING: line length of 134 exceeds 100 columns
#97: FILE: drivers/staging/hv/NetVsc.c:242:
+	DPRINT_DBG(NETVSC, "sizeof(struct hv_netvsc_packet)=%zd, sizeof(NVSP_MESSAGE)=%zd, sizeof(VMTRANSFER_PAGE_PACKET_HEADER)=%zd",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#98: FILE: drivers/staging/hv/NetVsc.c:243:
+		sizeof(struct hv_netvsc_packet), sizeof(NVSP_MESSAGE), sizeof(VMTRANSFER_PAGE_PACKET_HEADER));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: drivers/staging/hv/NetVsc.c:243:
+	DPRINT_DBG(NETVSC, "sizeof(struct hv_netvsc_packet)=%zd, sizeof(NVSP_MESSAGE)=%zd, sizeof(VMTRANSFER_PAGE_PACKET_HEADER)=%zd",
+		sizeof(struct hv_netvsc_packet), sizeof(NVSP_MESSAGE), sizeof(VMTRANSFER_PAGE_PACKET_HEADER));

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#116: FILE: drivers/staging/hv/NetVsc.c:831:
+		packet = kzalloc(sizeof(struct hv_netvsc_packet) + (NETVSC_RECEIVE_SG_COUNT* sizeof(PAGE_BUFFER)), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxW)
#116: FILE: drivers/staging/hv/NetVsc.c:831:
+		packet = kzalloc(sizeof(struct hv_netvsc_packet) + (NETVSC_RECEIVE_SG_COUNT* sizeof(PAGE_BUFFER)), GFP_KERNEL);
 		                                                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*packet)...) over kzalloc(sizeof(struct hv_netvsc_packet)...)
#116: FILE: drivers/staging/hv/NetVsc.c:831:
+		packet = kzalloc(sizeof(struct hv_netvsc_packet) + (NETVSC_RECEIVE_SG_COUNT* sizeof(PAGE_BUFFER)), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <ListEntry>
#125: FILE: drivers/staging/hv/NetVsc.c:888:
+			packet = CONTAINING_RECORD(entry, struct hv_netvsc_packet, ListEntry);

CHECK:CAMELCASE: Avoid CamelCase: <netvscPacket>
#134: FILE: drivers/staging/hv/NetVsc.c:918:
+	struct hv_netvsc_packet *netvscPacket;

CHECK:CAMELCASE: Avoid CamelCase: <nvscPacket>
#152: FILE: drivers/staging/hv/NetVsc.c:1002:
+	struct hv_netvsc_packet *nvscPacket;

CHECK:CAMELCASE: Avoid CamelCase: <TransactionId>
#161: FILE: drivers/staging/hv/NetVsc.c:1029:
+		nvscPacket = (struct hv_netvsc_packet *)(unsigned long)Packet->TransactionId;

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#179: FILE: drivers/staging/hv/NetVsc.c:1121:
+	struct hv_netvsc_packet *netvscPacket=NULL;
 	                                     ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#215: FILE: drivers/staging/hv/NetVsc.c:1360:
+	struct hv_netvsc_packet *packet = (struct hv_netvsc_packet*)Context;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Context>
#215: FILE: drivers/staging/hv/NetVsc.c:1360:
+	struct hv_netvsc_packet *packet = (struct hv_netvsc_packet*)Context;

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#386: FILE: drivers/staging/hv/netvsc_drv.c:431:
+	packet = kzalloc(sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) + net_drv_obj->RequestExtSize, GFP_ATOMIC);

CHECK:CAMELCASE: Avoid CamelCase: <RequestExtSize>
#386: FILE: drivers/staging/hv/netvsc_drv.c:431:
+	packet = kzalloc(sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) + net_drv_obj->RequestExtSize, GFP_ATOMIC);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*packet)...) over kzalloc(sizeof(struct hv_netvsc_packet)...)
#386: FILE: drivers/staging/hv/netvsc_drv.c:431:
+	packet = kzalloc(sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) + net_drv_obj->RequestExtSize, GFP_ATOMIC);

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#395: FILE: drivers/staging/hv/netvsc_drv.c:438:
+	packet->Extension = (void*)(unsigned long)packet + sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) ;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#395: FILE: drivers/staging/hv/netvsc_drv.c:438:
+	packet->Extension = (void*)(unsigned long)packet + sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) ;

WARNING:SPACING: space prohibited before semicolon
#395: FILE: drivers/staging/hv/netvsc_drv.c:438:
+	packet->Extension = (void*)(unsigned long)packet + sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) ;

CHECK:CAMELCASE: Avoid CamelCase: <Extension>
#395: FILE: drivers/staging/hv/netvsc_drv.c:438:
+	packet->Extension = (void*)(unsigned long)packet + sizeof(struct hv_netvsc_packet) + (num_frags * sizeof(PAGE_BUFFER)) ;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 6 warnings, 12 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000091085.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
