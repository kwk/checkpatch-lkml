WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#145: FILE: fs/sysfs/dir.c:245:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: fs/sysfs/dir.c:318:
+	if (sd->s_type & SYSFS_KOBJ_ATTR) {
[...]
+	} else if (sd->s_type & SYSFS_KOBJ_BIN_ATTR) {
[...]
+	} else if (sd->s_type & SYSFS_KOBJ_LINK)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: fs/sysfs/dir.c:323:
+		struct bin_attribute *bin_attr = sd->s_elem.bin_attr.bin_attr;
+		inode->i_size = bin_attr->size;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#288: FILE: fs/sysfs/inode.c:144:
+	if (sd->s_iattr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#294: FILE: fs/sysfs/inode.c:150:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: fs/sysfs/inode.c:166:
+struct inode * sysfs_new_inode(struct sysfs_dirent *sd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: fs/sysfs/inode.c:189:
+	BUG_ON(!dentry || dentry->d_inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: fs/sysfs/inode.c:193:
+		struct inode *p_inode = dentry->d_parent->d_inode;
+		p_inode->i_mtime = p_inode->i_ctime = CURRENT_TIME;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#369: FILE: fs/sysfs/inode.c:193:
+		p_inode->i_mtime = p_inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#384: FILE: fs/sysfs/mount.c:30:
+	.s_mode		= S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#427: FILE: fs/sysfs/sysfs.h:60:
+extern void sysfs_init_inode(struct sysfs_dirent *sd, struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: fs/sysfs/sysfs.h:61:
+extern struct inode * sysfs_new_inode(struct sysfs_dirent *sd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: fs/sysfs/sysfs.h:61:
+extern struct inode * sysfs_new_inode(struct sysfs_dirent *sd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: fs/sysfs/sysfs.h:62:
+extern void sysfs_instantiate(struct dentry *dentry, struct inode *inode);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 7 checks, 349 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000425750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
