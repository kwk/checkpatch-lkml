WARNING:TYPO_SPELLING: 'technics' may be misspelled - perhaps 'techniques'?
#42: 
provides a set of general mount options, borrowing technics used
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#93: 
accomodate changes in the operating environment or even the time
^^^^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#193: FILE: Documentation/Smack.txt:6:
+Smack is the the Simplified Mandatory Access Control Kernel.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#347: FILE: security/smack/Makefile:9:
+EXTRA_CFLAGS += -Inet/netlabel

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#352: FILE: security/smack/smack_access.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#418: FILE: security/smack/smack_access.c:67:
+extern struct smk_list_entry *smack_list;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#484: FILE: security/smack/smack_access.c:133:
+	for (sp = smack_list; sp != NULL; sp = sp->smk_next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#522: FILE: security/smack/smack_access.c:171:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#550: FILE: security/smack/smack_access.c:199:
+		if (found)
[...]
+		else if (i >= len || string[i] > '~' || string[i] <= ' ') {
[...]
+		else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#556: FILE: security/smack/smack_access.c:205:
+		}
+		else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#565: FILE: security/smack/smack_access.c:214:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#569: FILE: security/smack/smack_access.c:218:
+	if (skp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*skp)...) over kzalloc(sizeof(struct smack_known)...)
#570: FILE: security/smack/smack_access.c:219:
+		skp = kzalloc(sizeof(struct smack_known), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#571: FILE: security/smack/smack_access.c:220:
+		if (skp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#599: FILE: security/smack/smack_access.c:248:
+	if (skp == NULL)

WARNING:TYPO_SPELLING: 'appropraite' may be misspelled - perhaps 'appropriate'?
#608: FILE: security/smack/smack_access.c:257:
+ * Returns a pointer to the appropraite Smack label if there is one,
                             ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#615: FILE: security/smack/smack_access.c:264:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#630: FILE: security/smack/smack_access.c:279:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#657: FILE: security/smack/smack_access.c:306:
+	for (kp = smack_known; final == NULL && kp != NULL; kp = kp->smk_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kp"
#657: FILE: security/smack/smack_access.c:306:
+	for (kp = smack_known; final == NULL && kp != NULL; kp = kp->smk_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->smk_cipso"
#658: FILE: security/smack/smack_access.c:307:
+		if (kp->smk_cipso == NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#664: FILE: security/smack/smack_access.c:313:
+		    memcmp(kp->smk_cipso->smk_catset,catset,SMK_LABELLEN) == 0)
 		                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#664: FILE: security/smack/smack_access.c:313:
+		    memcmp(kp->smk_cipso->smk_catset,catset,SMK_LABELLEN) == 0)
 		                                           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#669: FILE: security/smack/smack_access.c:318:
+	if (final == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#673: FILE: security/smack/smack_access.c:322:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#684: FILE: security/smack/smack_access.c:333:
+        struct smack_known *kp;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: security/smack/smack_access.c:333:
+        struct smack_known *kp;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kp"
#686: FILE: security/smack/smack_access.c:335:
+	for (kp = smack_known; kp != NULL; kp = kp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp"
#691: FILE: security/smack/smack_access.c:340:
+	if (kp == NULL || kp->smk_cipso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->smk_cipso"
#691: FILE: security/smack/smack_access.c:340:
+	if (kp == NULL || kp->smk_cipso == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#693: FILE: security/smack/smack_access.c:342:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#701: FILE: security/smack/smackfs.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#705: FILE: security/smack/smackfs.c:5:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#709: FILE: security/smack/smackfs.c:9:
+ * ^ICasey Schaufler <casey@schaufler-ca.com>$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#710: FILE: security/smack/smackfs.c:10:
+ * $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#712: FILE: security/smack/smackfs.c:12:
+ * $

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#733: FILE: security/smack/smackfs.c:33:
+extern struct smack_known smack_known_floor;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#734: FILE: security/smack/smackfs.c:34:
+extern struct smack_known smack_known_star;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#735: FILE: security/smack/smackfs.c:35:
+extern struct smack_known *smack_known;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: security/smack/smackfs.c:78:
+ * 'ssssssss oooooooo mmmm\n\0' $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#784: FILE: security/smack/smackfs.c:84:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#791: FILE: security/smack/smackfs.c:91:
+static ssize_t smk_read_load(struct file *filp, char __user *buf,
                                           ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#800: FILE: security/smack/smackfs.c:100:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#806: FILE: security/smack/smackfs.c:106:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#809: FILE: security/smack/smackfs.c:109:
+	for (cp = result; slp != NULL; slp = slp->smk_next) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#814: FILE: security/smack/smackfs.c:114:
+^I^Iif (srp->smk_access != 0) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#830: FILE: security/smack/smackfs.c:130:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#852: FILE: security/smack/smackfs.c:152:
+	for (sp = smack_list; sp != NULL; sp = sp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#859: FILE: security/smack/smackfs.c:159:
+	if (sp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*newp)...) over kzalloc(sizeof(struct smk_list_entry)...)
#860: FILE: security/smack/smackfs.c:160:
+		newp = kzalloc(sizeof(struct smk_list_entry), GFP_KERNEL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#870: FILE: security/smack/smackfs.c:170:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#872: FILE: security/smack/smackfs.c:172:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#875: FILE: security/smack/smackfs.c:175:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#893: FILE: security/smack/smackfs.c:193:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#909: FILE: security/smack/smackfs.c:209:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#919: FILE: security/smack/smackfs.c:219:
+	for (cp = data - 1; cp != NULL; cp = strchr(cp + 1, '\n')) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#924: FILE: security/smack/smackfs.c:224:
+			printk("%s:%d bad scan\n", __func__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule.smk_subject"
#928: FILE: security/smack/smackfs.c:228:
+		if (rule.smk_subject == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule.smk_object"
#931: FILE: security/smack/smackfs.c:231:
+		if (rule.smk_object == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strpbrk"
#934: FILE: security/smack/smackfs.c:234:
+		if (strpbrk(modestr, "rR") != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strpbrk"
#936: FILE: security/smack/smackfs.c:236:
+		if (strpbrk(modestr, "wW") != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strpbrk"
#938: FILE: security/smack/smackfs.c:238:
+		if (strpbrk(modestr, "xX") != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strpbrk"
#940: FILE: security/smack/smackfs.c:240:
+		if (strpbrk(modestr, "aA") != NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#943: FILE: security/smack/smackfs.c:243:
+		printk("%s:%d rule %s %s 0x%x\n", __func__, __LINE__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: security/smack/smackfs.c:244:
+		printk("%s:%d rule %s %s 0x%x\n", __func__, __LINE__,
+			(char *)rule.smk_subject, (char *)rule.smk_object,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*doip)...) over kmalloc(sizeof(struct cipso_v4_doi)...)
#986: FILE: security/smack/smackfs.c:286:
+	doip = kmalloc(sizeof(struct cipso_v4_doi), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doip"
#987: FILE: security/smack/smackfs.c:287:
+	if (doip == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#988: FILE: security/smack/smackfs.c:288:
+	if (doip == NULL)
+		panic("smack:  Failed to initialize cipso DOI.\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ndmp)...) over kmalloc(sizeof(struct netlbl_dom_map)...)
#991: FILE: security/smack/smackfs.c:291:
+	ndmp = kmalloc(sizeof(struct netlbl_dom_map), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ndmp"
#992: FILE: security/smack/smackfs.c:292:
+	if (ndmp == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#993: FILE: security/smack/smackfs.c:293:
+	if (ndmp == NULL)
+		panic("smack:  Failed to initialize cipso ndmp.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1003: FILE: security/smack/smackfs.c:303:
+		printk("%s:%d add doi rc = %d\n", __func__, __LINE__, rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1011: FILE: security/smack/smackfs.c:311:
+		printk("%s:%d remove rc = %d\n", __func__, __LINE__, rc);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1015: FILE: security/smack/smackfs.c:315:
+		printk("%s:%d add rc = %d\n", __func__, __LINE__, rc);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1020: FILE: security/smack/smackfs.c:320:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1029: FILE: security/smack/smackfs.c:329:
+static ssize_t smk_read_cipso(struct file *filp, char __user *buf,
                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#1048: FILE: security/smack/smackfs.c:348:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#1052: FILE: security/smack/smackfs.c:352:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp->smk_cipso"
#1053: FILE: security/smack/smackfs.c:353:
+		if (skp->smk_cipso == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1076: FILE: security/smack/smackfs.c:376:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1084: FILE: security/smack/smackfs.c:384:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1121: FILE: security/smack/smackfs.c:421:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "eolp"
#1133: FILE: security/smack/smackfs.c:433:
+		eolp != NULL && rc >= 0;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1135: FILE: security/smack/smackfs.c:435:
+		linep = eolp + 1, eolp = strchr(linep, '\n')) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#1142: FILE: security/smack/smackfs.c:442:
+		if (skp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1147: FILE: security/smack/smackfs.c:447:
+		if (cp == NULL)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1150: FILE: security/smack/smackfs.c:450:
+		i = sscanf(cp, "%d", &maplevel);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1155: FILE: security/smack/smackfs.c:455:
+		if (cp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1157: FILE: security/smack/smackfs.c:457:
+			if (cp == NULL)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1161: FILE: security/smack/smackfs.c:461:
+				i = sscanf(cp, "%d", &cat);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1171: FILE: security/smack/smackfs.c:471:
+				if (cp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1173: FILE: security/smack/smackfs.c:473:
+			} while (cp != NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1179: FILE: security/smack/smackfs.c:479:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1180: FILE: security/smack/smackfs.c:480:
+		if (skp->smk_cipso == NULL) {
[...]
+		} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp->smk_cipso"
#1180: FILE: security/smack/smackfs.c:480:
+		if (skp->smk_cipso == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*scp)...) over kzalloc(sizeof(struct smack_cipso)...)
#1181: FILE: security/smack/smackfs.c:481:
+			scp = kzalloc(sizeof(struct smack_cipso), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#1182: FILE: security/smack/smackfs.c:482:
+			if (scp == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#1186: FILE: security/smack/smackfs.c:486:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp->smk_cipso"
#1190: FILE: security/smack/smackfs.c:490:
+		if (skp->smk_cipso == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "scp"
#1204: FILE: security/smack/smackfs.c:504:
+		if (scp != NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1205: FILE: security/smack/smackfs.c:505:
+			printk(KERN_WARNING "%s: CIPSO collision for \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: security/smack/smackfs.c:506:
+			printk(KERN_WARNING "%s: CIPSO collision for \"%s\"\n",
+				__func__, skp->smk_known);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1227: FILE: security/smack/smackfs.c:527:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1234: FILE: security/smack/smackfs.c:534:
+static ssize_t smk_read_doi(struct file *filp, char __user *buf,
                                          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1235: FILE: security/smack/smackfs.c:535:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1235: FILE: security/smack/smackfs.c:535:
+static ssize_t smk_read_doi(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1251: FILE: security/smack/smackfs.c:551:
+ * @filp: file pointer, not actually used
     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1259: FILE: security/smack/smackfs.c:559:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1259: FILE: security/smack/smackfs.c:559:
+static ssize_t smk_write_doi(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1273: FILE: security/smack/smackfs.c:573:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1288: FILE: security/smack/smackfs.c:588:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1295: FILE: security/smack/smackfs.c:595:
+static ssize_t smk_read_direct(struct file *filp, char __user *buf,
                                             ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1296: FILE: security/smack/smackfs.c:596:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1296: FILE: security/smack/smackfs.c:596:
+static ssize_t smk_read_direct(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1312: FILE: security/smack/smackfs.c:612:
+ * @filp: file pointer, not actually used
     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1320: FILE: security/smack/smackfs.c:620:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1320: FILE: security/smack/smackfs.c:620:
+static ssize_t smk_write_direct(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1334: FILE: security/smack/smackfs.c:634:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1349: FILE: security/smack/smackfs.c:649:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1356: FILE: security/smack/smackfs.c:656:
+static ssize_t smk_read_ambient(struct file *filp, char __user *buf,
                                              ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1357: FILE: security/smack/smackfs.c:657:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1357: FILE: security/smack/smackfs.c:657:
+static ssize_t smk_read_ambient(struct file *filp, char __user *buf,
+			        size_t count, loff_t *ppos)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1368: FILE: security/smack/smackfs.c:668:
+	rc = simple_read_from_buffer(buf,count,ppos,smack_net_ambient,asize);
 	                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1368: FILE: security/smack/smackfs.c:668:
+	rc = simple_read_from_buffer(buf,count,ppos,smack_net_ambient,asize);
 	                                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1368: FILE: security/smack/smackfs.c:668:
+	rc = simple_read_from_buffer(buf,count,ppos,smack_net_ambient,asize);
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1368: FILE: security/smack/smackfs.c:668:
+	rc = simple_read_from_buffer(buf,count,ppos,smack_net_ambient,asize);
 	                                                             ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1375: FILE: security/smack/smackfs.c:675:
+ * @filp: file pointer, not actually used
     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: security/smack/smackfs.c:683:
+^I^I^I         size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1383: FILE: security/smack/smackfs.c:683:
+static ssize_t smk_write_ambient(struct file *file, const char __user *buf,
+			         size_t count, loff_t *ppos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smack"
#1398: FILE: security/smack/smackfs.c:698:
+	if (smack == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1434: FILE: security/smack/smackfs.c:734:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1441: FILE: security/smack/smackfs.c:741:
+static ssize_t smk_read_nltype(struct file *filp, char __user *buf,
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1469: FILE: security/smack/smackfs.c:769:
+ * @filp: file pointer, not actually used
     ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1477: FILE: security/smack/smackfs.c:777:
+^I^I^I        size_t count, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1477: FILE: security/smack/smackfs.c:777:
+static ssize_t smk_write_nltype(struct file *file, const char __user *buf,
+			        size_t count, loff_t *ppos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1494: FILE: security/smack/smackfs.c:794:
+	if (cp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1497: FILE: security/smack/smackfs.c:797:
+	if (cp != NULL)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1530: FILE: security/smack/smackfs.c:830:
+static struct super_block *smk_sb = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1531: FILE: security/smack/smackfs.c:831:
+static struct smk_link *smk_links = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1532: FILE: security/smack/smackfs.c:832:
+static int smk_links_count = 0;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1537: FILE: security/smack/smackfs.c:837:
+ * @nd: name entry
     ^^

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#1547: FILE: security/smack/smackfs.c:847:
+ * directory for each label in use to accomodate the value
                                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1553: FILE: security/smack/smackfs.c:853:
+static void *smackfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1560: FILE: security/smack/smackfs.c:860:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1564: FILE: security/smack/smackfs.c:864:
+	if (slp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1565: FILE: security/smack/smackfs.c:865:
+		printk("%s:%d failed\n", __func__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1569: FILE: security/smack/smackfs.c:869:
+	if (cp == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1574: FILE: security/smack/smackfs.c:874:
+	nd_set_link(nd, cp);
 	            ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1601: FILE: security/smack/smackfs.c:901:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1605: FILE: security/smack/smackfs.c:905:
+	if (slp == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1606: FILE: security/smack/smackfs.c:906:
+		printk("%s:%d failed\n", __func__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#1611: FILE: security/smack/smackfs.c:911:
+	if (cp == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1629: FILE: security/smack/smackfs.c:929:
+ * @nd: name entry
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1634: FILE: security/smack/smackfs.c:934:
+static void smackfs_put_link(struct dentry *dentry, struct nameidata *nd, void *ptr)
                                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1636: FILE: security/smack/smackfs.c:936:
+	kfree(nd_get_link(nd));
 	                  ^^

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1639: FILE: security/smack/smackfs.c:939:
+static struct inode_operations smackfs_symlink_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1659: FILE: security/smack/smackfs.c:959:
+	for (slp = smk_links; slp != NULL; slp = slp->sl_next) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*slp)...) over kzalloc(sizeof(struct smk_link)...)
#1666: FILE: security/smack/smackfs.c:966:
+	slp = kzalloc(sizeof(struct smk_link), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!slp"
#1667: FILE: security/smack/smackfs.c:967:
+	if (slp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#1671: FILE: security/smack/smackfs.c:971:
+	if (dentry == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1672: FILE: security/smack/smackfs.c:972:
+		printk("%s:%d link dentry failed\n", __func__, __LINE__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#1677: FILE: security/smack/smackfs.c:977:
+	if (inode == NULL) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1678: FILE: security/smack/smackfs.c:978:
+		printk("%s:%d link inode failed\n", __func__, __LINE__);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1682: FILE: security/smack/smackfs.c:982:
+	inode->i_mode = S_IFLNK | S_IRWXUGO;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#1701: FILE: security/smack/smackfs.c:1001:
+	return;
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1705: FILE: security/smack/smackfs.c:1005:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1712: FILE: security/smack/smackfs.c:1012:
+static ssize_t smk_read_links(struct file *filp, char __user *buf,
                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1713: FILE: security/smack/smackfs.c:1013:
+static ssize_t smk_read_links(struct file *filp, char __user *buf,
+			     size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1719: FILE: security/smack/smackfs.c:1019:
+^I$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1720: FILE: security/smack/smackfs.c:1020:
+	
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!result"
#1722: FILE: security/smack/smackfs.c:1022:
+	if (result == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "slp"
#1726: FILE: security/smack/smackfs.c:1026:
+	for (slp = smk_links, cp = result; slp != NULL; slp = slp->sl_next)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1729: FILE: security/smack/smackfs.c:1029:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1729: FILE: security/smack/smackfs.c:1029:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1729: FILE: security/smack/smackfs.c:1029:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1729: FILE: security/smack/smackfs.c:1029:
+	bytes = simple_read_from_buffer(buf,count,ppos,result,strlen(result));
 	                                                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1730: FILE: security/smack/smackfs.c:1030:
+^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1738: FILE: security/smack/smackfs.c:1038:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1748: FILE: security/smack/smackfs.c:1048:
+static ssize_t smk_write_links(struct file *file, const char __user *buf,
+			      size_t count, loff_t *ppos)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1768: FILE: security/smack/smackfs.c:1068:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1778: FILE: security/smack/smackfs.c:1078:
+	for (cp = data - 1; cp != NULL; cp = strchr(cp + 1, '\n')) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1782: FILE: security/smack/smackfs.c:1082:
+			printk("%s:%d bad scan\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1783: FILE: security/smack/smackfs.c:1083:
+			printk("%s:%d bad scan\n",
+				__func__, __LINE__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1787: FILE: security/smack/smackfs.c:1087:
+		printk("%s:%d add %s -> %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1788: FILE: security/smack/smackfs.c:1088:
+		printk("%s:%d add %s -> %s\n",
+			__func__, __LINE__, name, target);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1811: FILE: security/smack/smackfs.c:1111:
+static int smk_fill_super(struct super_block *sb, void * data, int silent)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1817: FILE: security/smack/smackfs.c:1117:
+		[SMK_LOAD]	= {"load", &smk_load_ops, S_IRUGO|S_IWUSR},
 		          	                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1817: FILE: security/smack/smackfs.c:1117:
+		[SMK_LOAD]	= {"load", &smk_load_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1818: FILE: security/smack/smackfs.c:1118:
+		[SMK_LINKS]	= {"links", &smk_links_ops, S_IRUGO|S_IWUSR},
 		           	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1818: FILE: security/smack/smackfs.c:1118:
+		[SMK_LINKS]	= {"links", &smk_links_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1819: FILE: security/smack/smackfs.c:1119:
+		[SMK_CIPSO]	= {"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},
 		           	                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1819: FILE: security/smack/smackfs.c:1119:
+		[SMK_CIPSO]	= {"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1820: FILE: security/smack/smackfs.c:1120:
+		[SMK_DOI]	= {"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},
 		         	                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1820: FILE: security/smack/smackfs.c:1120:
+		[SMK_DOI]	= {"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1821: FILE: security/smack/smackfs.c:1121:
+		[SMK_DIRECT]	= {"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},
 		            	                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1821: FILE: security/smack/smackfs.c:1121:
+		[SMK_DIRECT]	= {"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1822: FILE: security/smack/smackfs.c:1122:
+		[SMK_AMBIENT]	= {"ambient", &smk_ambient_ops,S_IRUGO|S_IWUSR},
 		             	                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1822: FILE: security/smack/smackfs.c:1122:
+		[SMK_AMBIENT]	= {"ambient", &smk_ambient_ops,S_IRUGO|S_IWUSR},
 		             	                                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1822: FILE: security/smack/smackfs.c:1122:
+		[SMK_AMBIENT]	= {"ambient", &smk_ambient_ops,S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1823: FILE: security/smack/smackfs.c:1123:
+		[SMK_NLTYPE]	= {"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},
 		            	                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1823: FILE: security/smack/smackfs.c:1123:
+		[SMK_NLTYPE]	= {"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1834: FILE: security/smack/smackfs.c:1134:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1835: FILE: security/smack/smackfs.c:1135:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",
+			__func__, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1892: FILE: security/smack/smackfs.c:1192:
+			printk(KERN_ERR "smackfs:  could not mount!\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1901: FILE: security/smack/smackfs.c:1201:
+__initcall(init_smk_fs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1906: FILE: security/smack/smack.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1932: FILE: security/smack/smack.h:27:
+#define SMK_LABELLEN	(SMK_MAXLEN+1)
                     	           ^

WARNING:TYPO_SPELLING: 'chuncks' may be misspelled - perhaps 'chunks'?
#1988: FILE: security/smack/smack.h:83:
+ * not necessary to keep allocating tiny chuncks of memory
                                          ^^^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2012: FILE: security/smack/smack.h:107:
+	spinlock_t		smk_cipsolock;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2030: FILE: security/smack/smack.h:125:
+#define XATTR_NAME_SMACK	XATTR_SECURITY_PREFIX XATTR_SMACK_SUFFIX

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2075: FILE: security/smack/smack.h:170:
+struct inode_smack *new_inode_smack(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2080: FILE: security/smack/smack.h:175:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2080: FILE: security/smack/smack.h:175:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2080: FILE: security/smack/smack.h:175:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2081: FILE: security/smack/smack.h:176:
+int smk_curacc(char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2081: FILE: security/smack/smack.h:176:
+int smk_curacc(char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2082: FILE: security/smack/smack.h:177:
+int smack_to_cipso(const char *, struct smack_cipso *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct smack_cipso *' should also have an identifier name
#2082: FILE: security/smack/smack.h:177:
+int smack_to_cipso(const char *, struct smack_cipso *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2083: FILE: security/smack/smack.h:178:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2083: FILE: security/smack/smack.h:178:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2083: FILE: security/smack/smack.h:178:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const u32' should also have an identifier name
#2084: FILE: security/smack/smack.h:179:
+char *smack_from_secid(const u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2085: FILE: security/smack/smack.h:180:
+char *smk_import(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2085: FILE: security/smack/smack.h:180:
+char *smk_import(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2086: FILE: security/smack/smack.h:181:
+struct smack_known *smk_import_entry(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2086: FILE: security/smack/smack.h:181:
+struct smack_known *smk_import_entry(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2087: FILE: security/smack/smack.h:182:
+u32 smack_to_secid(const char *);

WARNING:TYPO_SPELLING: 'Stricly' may be misspelled - perhaps 'Strictly'?
#2090: FILE: security/smack/smack.h:185:
+ * Stricly for CIPSO level manipulation.
    ^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2095: FILE: security/smack/smack.h:190:
+        char *cp = (char *)catsetp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2095: FILE: security/smack/smack.h:190:
+        char *cp = (char *)catsetp;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2097: FILE: security/smack/smack.h:192:
+        if (cat > SMK_LABELLEN * 8)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2097: FILE: security/smack/smack.h:192:
+        if (cat > SMK_LABELLEN * 8)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2098: FILE: security/smack/smack.h:193:
+                return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2098: FILE: security/smack/smack.h:193:
+                return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2100: FILE: security/smack/smack.h:195:
+        cp[(cat - 1) / 8] |= 0x80 >> ((cat - 1) % 8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2100: FILE: security/smack/smack.h:195:
+        cp[(cat - 1) / 8] |= 0x80 >> ((cat - 1) % 8);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2109: FILE: security/smack/smack.h:204:
+	struct inode_smack *sip = isp->i_security;
+	return sip->smk_inode;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2117: FILE: security/smack/smack_lsm.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2158: FILE: security/smack/smack_lsm.c:42:
+extern struct smack_known smack_known_unset;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2159: FILE: security/smack/smack_lsm.c:43:
+extern struct smack_known smack_known_huh;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2160: FILE: security/smack/smack_lsm.c:44:
+extern struct smack_known smack_known_hat;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2161: FILE: security/smack/smack_lsm.c:45:
+extern struct smack_known smack_known_star;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2162: FILE: security/smack/smack_lsm.c:46:
+extern struct smack_known smack_known_floor;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2163: FILE: security/smack/smack_lsm.c:47:
+extern struct smack_known smack_known_invalid;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2168: FILE: security/smack/smack_lsm.c:52:
+extern char *smack_net_ambient;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2169: FILE: security/smack/smack_lsm.c:53:
+extern int smack_net_nltype;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2170: FILE: security/smack/smack_lsm.c:54:
+extern int smack_cipso_direct;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip->i_op->getxattr"
#2185: FILE: security/smack/smack_lsm.c:69:
+	if (ip->i_op->getxattr == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isp)...) over kzalloc(sizeof(struct inode_smack)...)
#2205: FILE: security/smack/smack_lsm.c:89:
+	isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#2206: FILE: security/smack/smack_lsm.c:90:
+	if (isp == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#2265: FILE: security/smack/smack_lsm.c:149:
+	 if (sp != smack_known_floor.smk_known)

WARNING:TYPO_SPELLING: 'immutible' may be misspelled - perhaps 'immutable'?
#2276: FILE: security/smack/smack_lsm.c:160:
+ * points to an immutible list. No alloc required.
                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'immutible' may be misspelled - perhaps 'immutable'?
#2293: FILE: security/smack/smack_lsm.c:177:
+ * points to an immutible list. The blobs never go away.
                 ^^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbsp)...) over kzalloc(sizeof(struct superblock_smack)...)
#2427: FILE: security/smack/smack_lsm.c:311:
+	sbsp = kzalloc(sizeof(struct superblock_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbsp"
#2429: FILE: security/smack/smack_lsm.c:313:
+	if (sbsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otheropts"
#2477: FILE: security/smack/smack_lsm.c:361:
+	if (otheropts == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2480: FILE: security/smack/smack_lsm.c:364:
+	for (cp = orig, commap = orig; commap != NULL; cp = commap + 1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2493: FILE: security/smack/smack_lsm.c:377:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#2525: FILE: security/smack/smack_lsm.c:409:
+	if (sp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#2532: FILE: security/smack/smack_lsm.c:416:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op"
#2537: FILE: security/smack/smack_lsm.c:421:
+	for (op = data; op != NULL; op = commap) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2539: FILE: security/smack/smack_lsm.c:423:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2545: FILE: security/smack/smack_lsm.c:429:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2550: FILE: security/smack/smack_lsm.c:434:
+			if (nsp != NULL)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2552: FILE: security/smack/smack_lsm.c:436:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2552: FILE: security/smack/smack_lsm.c:436:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                   ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#2552: FILE: security/smack/smack_lsm.c:436:
+		} else if (strncmp(op,SMK_FSDEFAULT,strlen(SMK_FSDEFAULT))==0) {
 		                                                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2555: FILE: security/smack/smack_lsm.c:439:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2560: FILE: security/smack/smack_lsm.c:444:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#2569: FILE: security/smack/smack_lsm.c:453:
+	if (isp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry"
#2588: FILE: security/smack/smack_lsm.c:472:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb"
#2588: FILE: security/smack/smack_lsm.c:472:
+	if (dentry == NULL || dentry->d_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dentry->d_sb->s_security"
#2589: FILE: security/smack/smack_lsm.c:473:
+	    dentry->d_sb->s_security == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2600: FILE: security/smack/smack_lsm.c:484:
+ * @nd: mount point
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2608: FILE: security/smack/smack_lsm.c:492:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
                                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2613: FILE: security/smack/smack_lsm.c:497:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||
 	    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd"
#2613: FILE: security/smack/smack_lsm.c:497:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt"
#2613: FILE: security/smack/smack_lsm.c:497:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb"
#2613: FILE: security/smack/smack_lsm.c:497:
+	if (nd == NULL || nd->mnt == NULL || nd->mnt->mnt_sb == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nd->mnt->mnt_sb->s_security"
#2614: FILE: security/smack/smack_lsm.c:498:
+	    nd->mnt->mnt_sb->s_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#2652: FILE: security/smack/smack_lsm.c:536:
+	if (inode->i_security == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2680: FILE: security/smack/smack_lsm.c:564:
+^I^I^I             char **name, void **value, size_t *len)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2680: FILE: security/smack/smack_lsm.c:564:
+static int smack_inode_init_security(struct inode *inode, struct inode *dir,
+			             char **name, void **value, size_t *len)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#2686: FILE: security/smack/smack_lsm.c:570:
+		if (*name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#2692: FILE: security/smack/smack_lsm.c:576:
+		if (*value == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2798: FILE: security/smack/smack_lsm.c:682:
+ * @nd: unused
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2803: FILE: security/smack/smack_lsm.c:687:
+				  struct nameidata *nd)
 				                    ^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#2852: FILE: security/smack/smack_lsm.c:736:
+^I^I^I        void *value, size_t size, int flags)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2852: FILE: security/smack/smack_lsm.c:736:
+static int smack_inode_setxattr(struct dentry *dentry, char *name,
+			        void *value, size_t size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2857: FILE: security/smack/smack_lsm.c:741:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2900: FILE: security/smack/smack_lsm.c:784:
+	if (nsp != NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#2906: FILE: security/smack/smack_lsm.c:790:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2945: FILE: security/smack/smack_lsm.c:829:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#2965: FILE: security/smack/smack_lsm.c:849:
+static int smack_inode_getsecurity(const struct inode *inode, const char *name, void *buffer, size_t size, int err)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#2974: FILE: security/smack/smack_lsm.c:858:
+	if (size < SMK_LABELLEN || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bsp"
#2974: FILE: security/smack/smack_lsm.c:858:
+	if (size < SMK_LABELLEN || name == NULL || bsp == NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#2975: FILE: security/smack/smack_lsm.c:859:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#2975: FILE: security/smack/smack_lsm.c:859:
+	    inode == NULL || inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#2992: FILE: security/smack/smack_lsm.c:876:
+	if (sock == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3001: FILE: security/smack/smack_lsm.c:885:
+	if (strcmp(name, XATTR_SMACK_PACKET) == 0) {
[...]
+	else if (strcmp(name, XATTR_SMACK_IPIN) == 0)
[...]
+	else if (strcmp(name, XATTR_SMACK_IPOUT) == 0)
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3006: FILE: security/smack/smack_lsm.c:890:
+	}
+	else if (strcmp(name, XATTR_SMACK_IPIN) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#3037: FILE: security/smack/smack_lsm.c:921:
+	if (value == NULL || size > SMK_LABELLEN)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#3041: FILE: security/smack/smack_lsm.c:925:
+	if (sp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#3057: FILE: security/smack/smack_lsm.c:941:
+	if (sock == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3062: FILE: security/smack/smack_lsm.c:946:
+	if (strcmp(name, XATTR_SMACK_PACKET) == 0) {
[...]
+	else if (strcmp(name, XATTR_SMACK_IPIN) == 0)
[...]
+	else if (strcmp(name, XATTR_SMACK_IPOUT) == 0)
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#3066: FILE: security/smack/smack_lsm.c:950:
+	}
+	else if (strcmp(name, XATTR_SMACK_IPIN) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buffer"
#3088: FILE: security/smack/smack_lsm.c:972:
+	if (buffer != NULL && len <= buffer_size) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3102: FILE: security/smack/smack_lsm.c:986:
+static void smack_d_instantiate (struct dentry *opt_dentry, struct inode *inode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#3112: FILE: security/smack/smack_lsm.c:996:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#3115: FILE: security/smack/smack_lsm.c:999:
+	if (inode->i_security == NULL)

WARNING:TYPO_SPELLING: 'embarassing' may be misspelled - perhaps 'embarrassing'?
#3146: FILE: security/smack/smack_lsm.c:1030:
+		 * Casey says that it's a little embarassing
 		                                 ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_op->getxattr"
#3203: FILE: security/smack/smack_lsm.c:1087:
+		if (inode->i_op->getxattr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt_dentry"
#3208: FILE: security/smack/smack_lsm.c:1092:
+		if (opt_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#3210: FILE: security/smack/smack_lsm.c:1094:
+			if (dp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#3214: FILE: security/smack/smack_lsm.c:1098:
+			if (dp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fetched"
#3219: FILE: security/smack/smack_lsm.c:1103:
+		if (fetched != NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3221: FILE: security/smack/smack_lsm.c:1105:
+^I^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#3226: FILE: security/smack/smack_lsm.c:1110:
+	if (final == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#3236: FILE: security/smack/smack_lsm.c:1120:
+	return;
+}

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3381: FILE: security/smack/smack_lsm.c:1265:
+	file = (struct file *)((long)fown - offsetof(struct file,f_owner));
 	                                                        ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ssp)...) over kzalloc(sizeof(struct socket_smack)...)
#3429: FILE: security/smack/smack_lsm.c:1313:
+	ssp = kzalloc(sizeof(struct socket_smack), priority);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3430: FILE: security/smack/smack_lsm.c:1314:
+	if (ssp == NULL)

WARNING:TYPO_SPELLING: 'Appologies' may be misspelled - perhaps 'Apologies'?
#3494: FILE: security/smack/smack_lsm.c:1378:
+ * Appologies to the TSIG group in general and GW in particular.
    ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3563: FILE: security/smack/smack_lsm.c:1447:
+ * $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#3573: FILE: security/smack/smack_lsm.c:1457:
+	if (isp == NULL) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#3728: FILE: security/smack/smack_lsm.c:1612:
+	if (flags & S_IRUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#3730: FILE: security/smack/smack_lsm.c:1614:
+	if (flags & S_IWUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#3732: FILE: security/smack/smack_lsm.c:1616:
+	if (flags & S_IXUGO)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#3769: FILE: security/smack/smack_lsm.c:1653:
+	if (shp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3814: FILE: security/smack/smack_lsm.c:1698:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3833: FILE: security/smack/smack_lsm.c:1717:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#3836: FILE: security/smack/smack_lsm.c:1720:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3874: FILE: security/smack/smack_lsm.c:1758:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#3889: FILE: security/smack/smack_lsm.c:1773:
+	if (sma == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3934: FILE: security/smack/smack_lsm.c:1818:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3953: FILE: security/smack/smack_lsm.c:1837:
+	if (ssp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#3956: FILE: security/smack/smack_lsm.c:1840:
+	switch(cmd) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3996: FILE: security/smack/smack_lsm.c:1880:
+static int smack_sem_semop(struct sem_array *sma, struct sembuf *sops, unsigned nsops, int alter)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#4000: FILE: security/smack/smack_lsm.c:1884:
+	if (ssp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#4041: FILE: security/smack/smack_lsm.c:1925:
+	if (msq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#4059: FILE: security/smack/smack_lsm.c:1943:
+	if (msp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#4078: FILE: security/smack/smack_lsm.c:1962:
+	if (msp == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#4081: FILE: security/smack/smack_lsm.c:1965:
+	switch(cmd) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#4117: FILE: security/smack/smack_lsm.c:2001:
+	if (msp == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4135: FILE: security/smack/smack_lsm.c:2019:
+static int smack_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
+			struct task_struct *target, long type, int mode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msp"
#4139: FILE: security/smack/smack_lsm.c:2023:
+	if (msp == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#4171: FILE: security/smack/smack_lsm.c:2055:
+	struct inode_smack *isp = inode->i_security;
+	isp->smk_inode = p->security;

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#4194: FILE: security/smack/smack_lsm.c:2078:
+	 * This breaks the strict subjet/object access
 	                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4200: FILE: security/smack/smack_lsm.c:2084:
+	if (__capable(current, CAP_MAC_OVERRIDE) ||
+		__capable(p, CAP_MAC_OVERRIDE))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4202: FILE: security/smack/smack_lsm.c:2086:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#4225: FILE: security/smack/smack_lsm.c:2109:
+	if (cp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#4260: FILE: security/smack/smack_lsm.c:2144:
+	if (value == NULL || size == 0 || size >= SMK_LABELLEN)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newsmack"
#4267: FILE: security/smack/smack_lsm.c:2151:
+	if (newsmack == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4338: FILE: security/smack/smack_lsm.c:2222:
+			pcat = netlbl_secattr_catmap_walk(sap->mls_cat, pcat+1);
 			                                                    ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#4356: FILE: security/smack/smack_lsm.c:2240:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4367: FILE: security/smack/smack_lsm.c:2251:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#4439: FILE: security/smack/smack_lsm.c:2323:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#4439: FILE: security/smack/smack_lsm.c:2323:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->sk"
#4439: FILE: security/smack/smack_lsm.c:2323:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4480: FILE: security/smack/smack_lsm.c:2364:
+^I$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#4481: FILE: security/smack/smack_lsm.c:2365:
+	if (skb == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#4546: FILE: security/smack/smack_lsm.c:2430:
+^I^I^I        struct task_struct *context, key_perm_t perm)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4546: FILE: security/smack/smack_lsm.c:2430:
+static int smack_key_permission(key_ref_t key_ref,
+			        struct task_struct *context, key_perm_t perm)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp"
#4551: FILE: security/smack/smack_lsm.c:2435:
+	if (keyp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp->security"
#4557: FILE: security/smack/smack_lsm.c:2441:
+	if (keyp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!context->security"
#4562: FILE: security/smack/smack_lsm.c:2446:
+	if (context->security == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4570: FILE: security/smack/smack_lsm.c:2454:
+^I.ptrace = ^I^I^Ismack_ptrace,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4571: FILE: security/smack/smack_lsm.c:2455:
+^I.capget = ^I^I^Icap_capget,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4572: FILE: security/smack/smack_lsm.c:2456:
+^I.capset_check = ^I^Icap_capset_check,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4573: FILE: security/smack/smack_lsm.c:2457:
+^I.capset_set = ^I^I^Icap_capset_set,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4574: FILE: security/smack/smack_lsm.c:2458:
+^I.capable = ^I^I^Icap_capable,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4579: FILE: security/smack/smack_lsm.c:2463:
+^I.syslog = ^I^I^Ismack_syslog,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4580: FILE: security/smack/smack_lsm.c:2464:
+^I.settime = ^I^I^Icap_settime,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4581: FILE: security/smack/smack_lsm.c:2465:
+^I.vm_enough_memory = ^I^Icap_vm_enough_memory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4585: FILE: security/smack/smack_lsm.c:2469:
+^I.bprm_apply_creds = ^I^Icap_bprm_apply_creds,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4587: FILE: security/smack/smack_lsm.c:2471:
+^I.bprm_set_security = ^I^Icap_bprm_set_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4589: FILE: security/smack/smack_lsm.c:2473:
+^I.bprm_secureexec = ^I^Icap_bprm_secureexec,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4591: FILE: security/smack/smack_lsm.c:2475:
+^I.sb_alloc_security = ^I^Ismack_sb_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4592: FILE: security/smack/smack_lsm.c:2476:
+^I.sb_free_security = ^I^Ismack_sb_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4593: FILE: security/smack/smack_lsm.c:2477:
+^I.sb_copy_data = ^I^Ismack_sb_copy_data,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4594: FILE: security/smack/smack_lsm.c:2478:
+^I.sb_kern_mount = ^I^Ismack_sb_kern_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4595: FILE: security/smack/smack_lsm.c:2479:
+^I.sb_statfs = ^I^I^Ismack_sb_statfs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4596: FILE: security/smack/smack_lsm.c:2480:
+^I.sb_mount = ^I^I^Ismack_sb_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4598: FILE: security/smack/smack_lsm.c:2482:
+^I.sb_umount = ^I^I^Ismack_sb_umount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4607: FILE: security/smack/smack_lsm.c:2491:
+^I.inode_alloc_security = ^Ismack_inode_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4608: FILE: security/smack/smack_lsm.c:2492:
+^I.inode_free_security = ^I^Ismack_inode_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4609: FILE: security/smack/smack_lsm.c:2493:
+^I.inode_init_security = ^I^Ismack_inode_init_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4610: FILE: security/smack/smack_lsm.c:2494:
+^I.inode_create = ^I^Ismack_inode_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4611: FILE: security/smack/smack_lsm.c:2495:
+^I.inode_link = ^I^I^Ismack_inode_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4612: FILE: security/smack/smack_lsm.c:2496:
+^I.inode_unlink = ^I^Ismack_inode_unlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4613: FILE: security/smack/smack_lsm.c:2497:
+^I.inode_symlink = ^I^Ismack_inode_symlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4614: FILE: security/smack/smack_lsm.c:2498:
+^I.inode_mkdir = ^I^I^Ismack_inode_mkdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4615: FILE: security/smack/smack_lsm.c:2499:
+^I.inode_rmdir = ^I^I^Ismack_inode_rmdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4616: FILE: security/smack/smack_lsm.c:2500:
+^I.inode_mknod = ^I^I^Ismack_inode_mknod,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4617: FILE: security/smack/smack_lsm.c:2501:
+^I.inode_rename = ^I^Ismack_inode_rename,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4618: FILE: security/smack/smack_lsm.c:2502:
+^I.inode_readlink = ^I^Ismack_inode_readlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4619: FILE: security/smack/smack_lsm.c:2503:
+^I.inode_follow_link = ^I^Ismack_inode_follow_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4620: FILE: security/smack/smack_lsm.c:2504:
+^I.inode_permission = ^I^Ismack_inode_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4621: FILE: security/smack/smack_lsm.c:2505:
+^I.inode_setattr = ^I^Ismack_inode_setattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4622: FILE: security/smack/smack_lsm.c:2506:
+^I.inode_getattr = ^I^Ismack_inode_getattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4624: FILE: security/smack/smack_lsm.c:2508:
+^I.inode_setxattr = ^I^Ismack_inode_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4625: FILE: security/smack/smack_lsm.c:2509:
+^I.inode_post_setxattr = ^I^Ismack_inode_post_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4626: FILE: security/smack/smack_lsm.c:2510:
+^I.inode_getxattr = ^I^Ismack_inode_getxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4627: FILE: security/smack/smack_lsm.c:2511:
+^I.inode_listxattr = ^I^Ismack_inode_listxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4628: FILE: security/smack/smack_lsm.c:2512:
+^I.inode_removexattr = ^I^Ismack_inode_removexattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4630: FILE: security/smack/smack_lsm.c:2514:
+^I.inode_getsecurity = ^I^Ismack_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4631: FILE: security/smack/smack_lsm.c:2515:
+^I.inode_setsecurity = ^I^Ismack_inode_setsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4632: FILE: security/smack/smack_lsm.c:2516:
+^I.inode_listsecurity = ^I^Ismack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4634: FILE: security/smack/smack_lsm.c:2518:
+^I.file_permission = ^I^Ismack_file_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4635: FILE: security/smack/smack_lsm.c:2519:
+^I.file_alloc_security = ^I^Ismack_file_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4636: FILE: security/smack/smack_lsm.c:2520:
+^I.file_free_security = ^I^Ismack_file_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4637: FILE: security/smack/smack_lsm.c:2521:
+^I.file_ioctl = ^I^I^Ismack_file_ioctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4640: FILE: security/smack/smack_lsm.c:2524:
+^I.file_lock = ^I^I^Ismack_file_lock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4641: FILE: security/smack/smack_lsm.c:2525:
+^I.file_fcntl = ^I^I^Ismack_file_fcntl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4642: FILE: security/smack/smack_lsm.c:2526:
+^I.file_set_fowner = ^I^Ismack_file_set_fowner,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4643: FILE: security/smack/smack_lsm.c:2527:
+^I.file_send_sigiotask = ^I^Ismack_file_send_sigiotask,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4644: FILE: security/smack/smack_lsm.c:2528:
+^I.file_receive = ^I^Ismack_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4647: FILE: security/smack/smack_lsm.c:2531:
+^I.task_alloc_security = ^I^Ismack_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4648: FILE: security/smack/smack_lsm.c:2532:
+^I.task_free_security = ^I^Ismack_task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4652: FILE: security/smack/smack_lsm.c:2536:
+^I.task_setpgid = ^I^Ismack_task_setpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4653: FILE: security/smack/smack_lsm.c:2537:
+^I.task_getpgid = ^I^Ismack_task_getpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4654: FILE: security/smack/smack_lsm.c:2538:
+^I.task_getsid = ^I^I^Ismack_task_getsid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4655: FILE: security/smack/smack_lsm.c:2539:
+^I.task_getsecid = ^I^Ismack_task_getsecid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4657: FILE: security/smack/smack_lsm.c:2541:
+^I.task_setnice = ^I^Ismack_task_setnice,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4658: FILE: security/smack/smack_lsm.c:2542:
+^I.task_setioprio = ^I^Ismack_task_setioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4659: FILE: security/smack/smack_lsm.c:2543:
+^I.task_getioprio = ^I^Ismack_task_getioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4661: FILE: security/smack/smack_lsm.c:2545:
+^I.task_setscheduler = ^I^Ismack_task_setscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4662: FILE: security/smack/smack_lsm.c:2546:
+^I.task_getscheduler = ^I^Ismack_task_getscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4663: FILE: security/smack/smack_lsm.c:2547:
+^I.task_movememory = ^I^Ismack_task_movememory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4664: FILE: security/smack/smack_lsm.c:2548:
+^I.task_kill = ^I^I^Ismack_task_kill,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4665: FILE: security/smack/smack_lsm.c:2549:
+^I.task_wait = ^I^I^Ismack_task_wait,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4668: FILE: security/smack/smack_lsm.c:2552:
+^I.task_to_inode = ^I^Ismack_task_to_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4670: FILE: security/smack/smack_lsm.c:2554:
+^I.ipc_permission = ^I^Ismack_ipc_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4672: FILE: security/smack/smack_lsm.c:2556:
+^I.msg_msg_alloc_security = ^Ismack_msg_msg_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4673: FILE: security/smack/smack_lsm.c:2557:
+^I.msg_msg_free_security = ^Ismack_msg_msg_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4675: FILE: security/smack/smack_lsm.c:2559:
+^I.msg_queue_alloc_security = ^Ismack_msg_queue_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4676: FILE: security/smack/smack_lsm.c:2560:
+^I.msg_queue_free_security = ^Ismack_msg_queue_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4677: FILE: security/smack/smack_lsm.c:2561:
+^I.msg_queue_associate = ^I^Ismack_msg_queue_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4678: FILE: security/smack/smack_lsm.c:2562:
+^I.msg_queue_msgctl = ^I^Ismack_msg_queue_msgctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4679: FILE: security/smack/smack_lsm.c:2563:
+^I.msg_queue_msgsnd = ^I^Ismack_msg_queue_msgsnd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4680: FILE: security/smack/smack_lsm.c:2564:
+^I.msg_queue_msgrcv = ^I^Ismack_msg_queue_msgrcv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4682: FILE: security/smack/smack_lsm.c:2566:
+^I.shm_alloc_security = ^I^Ismack_shm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4683: FILE: security/smack/smack_lsm.c:2567:
+^I.shm_free_security = ^I^Ismack_shm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4684: FILE: security/smack/smack_lsm.c:2568:
+^I.shm_associate = ^I^Ismack_shm_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4685: FILE: security/smack/smack_lsm.c:2569:
+^I.shm_shmctl = ^I^I^Ismack_shm_shmctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4686: FILE: security/smack/smack_lsm.c:2570:
+^I.shm_shmat = ^I^I^Ismack_shm_shmat,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4688: FILE: security/smack/smack_lsm.c:2572:
+^I.sem_alloc_security = ^I^Ismack_sem_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4689: FILE: security/smack/smack_lsm.c:2573:
+^I.sem_free_security = ^I^Ismack_sem_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4690: FILE: security/smack/smack_lsm.c:2574:
+^I.sem_associate = ^I^Ismack_sem_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4691: FILE: security/smack/smack_lsm.c:2575:
+^I.sem_semctl = ^I^I^Ismack_sem_semctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4692: FILE: security/smack/smack_lsm.c:2576:
+^I.sem_semop = ^I^I^Ismack_sem_semop,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4695: FILE: security/smack/smack_lsm.c:2579:
+^I.netlink_recv = ^I^Icap_netlink_recv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4700: FILE: security/smack/smack_lsm.c:2584:
+^I.d_instantiate = ^I^Ismack_d_instantiate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4702: FILE: security/smack/smack_lsm.c:2586:
+^I.getprocattr = ^I^I^Ismack_getprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4703: FILE: security/smack/smack_lsm.c:2587:
+^I.setprocattr = ^I^I^Ismack_setprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4707: FILE: security/smack/smack_lsm.c:2591:
+^I.unix_stream_connect = ^I^Ismack_unix_stream_connect,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4708: FILE: security/smack/smack_lsm.c:2592:
+^I.unix_may_send = ^I^Ismack_unix_may_send,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4710: FILE: security/smack/smack_lsm.c:2594:
+^I/* .socket_create ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4711: FILE: security/smack/smack_lsm.c:2595:
+^I.socket_post_create = ^I^Ismack_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4712: FILE: security/smack/smack_lsm.c:2596:
+^I/* .socket_bind ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4713: FILE: security/smack/smack_lsm.c:2597:
+^I/* .socket_connect ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4714: FILE: security/smack/smack_lsm.c:2598:
+^I/* .socket_listen ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4715: FILE: security/smack/smack_lsm.c:2599:
+^I/* .socket_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4716: FILE: security/smack/smack_lsm.c:2600:
+^I/* .socket_post_accept ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4717: FILE: security/smack/smack_lsm.c:2601:
+^I/* .socket_sendmsg ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4724: FILE: security/smack/smack_lsm.c:2608:
+^I.socket_sock_rcv_skb = ^I^Ismack_socket_sock_rcv_skb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4727: FILE: security/smack/smack_lsm.c:2611:
+^I.sk_alloc_security = ^I^Ismack_sk_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4728: FILE: security/smack/smack_lsm.c:2612:
+^I.sk_free_security = ^I^Ismack_sk_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4729: FILE: security/smack/smack_lsm.c:2613:
+^I/* .sk_clone_security ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4730: FILE: security/smack/smack_lsm.c:2614:
+^I/* .sk_getsecid ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4731: FILE: security/smack/smack_lsm.c:2615:
+^I.sock_graft = ^I^I^Ismack_sock_graft,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4732: FILE: security/smack/smack_lsm.c:2616:
+^I.inet_conn_request = ^I^Ismack_inet_conn_request,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4736: FILE: security/smack/smack_lsm.c:2620:
+^I/* .req_classify_flow ^I^INo hook required */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4750: FILE: security/smack/smack_lsm.c:2634:
+^I.key_alloc = ^I^I^Ismack_key_alloc,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4751: FILE: security/smack/smack_lsm.c:2635:
+^I.key_free = ^I^I^Ismack_key_free,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4752: FILE: security/smack/smack_lsm.c:2636:
+^I.key_permission = ^I^Ismack_key_permission,$

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#4757: FILE: security/smack/smack_lsm.c:2641:
+DEFINE_MUTEX(smack_list_lock);

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#4758: FILE: security/smack/smack_lsm.c:2642:
+DEFINE_MUTEX(smack_known_lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4767: FILE: security/smack/smack_lsm.c:2651:
+	printk(KERN_INFO "Smack:  Initializing.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#4775: FILE: security/smack/smack_lsm.c:2659:
+ ^I * Initialize locks$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4775: FILE: security/smack/smack_lsm.c:2659:
+ ^I * Initialize locks$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4776: FILE: security/smack/smack_lsm.c:2660:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4776: FILE: security/smack/smack_lsm.c:2660:
+ ^I */$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4787: FILE: security/smack/smack_lsm.c:2671:
+^I/* $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 60 errors, 244 warnings, 180 checks, 4581 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375009.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
