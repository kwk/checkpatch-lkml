WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
> > + * Procedures for creating, accessing and interpreting the device tree.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#73: FILE: arch/arm/Kconfig:918:
+config OF
+        bool "Support for device tree"
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#76: FILE: arch/arm/Kconfig:921:
+config PROC_DEVICETREE
+        bool "Support for device tree in /proc"
+        depends on PROC_FS && OF
+        help
+          This option adds a device-tree directory under /proc which contains
+          an image of the device tree that the kernel copies from Open
+          Firmware or other boot firmware. If unsure, say Y here.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: arch/arm/include/asm/prom.h:1:
+#ifndef _ARM_PROM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#125: FILE: arch/arm/include/asm/prom.h:33:
+						 * content */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#134: FILE: arch/arm/include/asm/prom.h:42:
+ * The dt struct contains the device tree structure, full pathes and
                                                           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: arch/arm/include/asm/prom.h:69:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:REPEATED_WORD: Possible repeated word: 'kref'
#188: FILE: arch/arm/include/asm/prom.h:96:
+	struct  kref kref;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: arch/arm/include/asm/prom.h:113:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: arch/arm/include/asm/prom.h:117:
+static inline void set_node_proc_entry(struct device_node *dn,
+					struct proc_dir_entry *de)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#214: FILE: arch/arm/include/asm/prom.h:122:
+extern struct device_node *of_node_get(struct device_node *node);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#215: FILE: arch/arm/include/asm/prom.h:123:
+extern void of_node_put(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#218: FILE: arch/arm/include/asm/prom.h:126:
+extern void unflatten_device_tree(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#227: FILE: arch/arm/include/asm/prom.h:135:
+#define _ALIGN_UP(addr, size)	(((addr) + ((size) - 1)) & (~((size) - 1)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#279: FILE: arch/arm/kernel/prom.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#317: FILE: arch/arm/kernel/prom.c:39:
+#define DBG(fmt...) printk(KERN_ERR fmt)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#324: FILE: arch/arm/kernel/prom.c:46:
+extern struct device_node *allnodes;	/* temporary while merging */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#326: FILE: arch/arm/kernel/prom.c:48:
+extern rwlock_t devtree_lock;	/* temporary while merging */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#365: FILE: arch/arm/kernel/prom.c:87:
+		printk("Weird tag at start of node: %x\n", tag);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#370: FILE: arch/arm/kernel/prom.c:92:
+	l = allocl = strlen(pathp) + 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#397: FILE: arch/arm/kernel/prom.c:119:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#403: FILE: arch/arm/kernel/prom.c:125:
+		if (new_format) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: arch/arm/kernel/prom.c:127:
+                                dad && dad->parent ? dad->full_name : "",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: arch/arm/kernel/prom.c:127:
+                                dad && dad->parent ? dad->full_name : "",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: arch/arm/kernel/prom.c:128:
+                                pathp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: arch/arm/kernel/prom.c:128:
+                                pathp);$

CHECK:BRACES: Unbalanced braces around else statement
#413: FILE: arch/arm/kernel/prom.c:135:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dad"
#418: FILE: arch/arm/kernel/prom.c:140:
+		if (dad != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pname"
#448: FILE: arch/arm/kernel/prom.c:170:
+		if (pname == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#449: FILE: arch/arm/kernel/prom.c:171:
+			printk(KERN_INFO "Can't find property name in list!\n");

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#496: FILE: arch/arm/kernel/prom.c:218:
+			strlcpy(pp->value, ps, sz);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: arch/arm/kernel/prom.c:220:
+			DBG("fixed up name for %s -> %s\n", pathp,
+				(char *)pp->value);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#516: FILE: arch/arm/kernel/prom.c:238:
+		printk(KERN_INFO "Weird tag at end of node: %x\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#536: FILE: arch/arm/kernel/prom.c:258:
+	DBG(" -> unflatten_device_tree()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: arch/arm/kernel/prom.c:271:
+	mem = __alloc_bootmem(size + sizeof(u32),
+			__alignof__(struct device_node), 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#560: FILE: arch/arm/kernel/prom.c:282:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: arch/arm/kernel/prom.c:283:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",
+			*((u32 *)start));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#563: FILE: arch/arm/kernel/prom.c:285:
+		printk(KERN_WARNING "End of tree marker overwritten: %08x\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!of_chosen"
#569: FILE: arch/arm/kernel/prom.c:291:
+	if (of_chosen == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#572: FILE: arch/arm/kernel/prom.c:294:
+	DBG(" <- unflatten_device_tree()\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#623: FILE: arch/arm/kernel/prom.c:345:
+		printk(KERN_WARNING "WARNING: Bad of_node_put() on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: arch/arm/kernel/prom.c:346:
+		printk(KERN_WARNING "WARNING: Bad of_node_put() on %s\n",
+			node->full_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#635: FILE: arch/arm/kernel/prom.c:357:
+		struct property *next = prop->next;
+		kfree(prop->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: arch/arm/kernel/prom.c:390:
+    if (tag->u.flat_dev_tree.size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/arm/kernel/prom.c:393:
+    have_of = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: arch/arm/kernel/prom.c:394:
+    printk(KERN_INFO$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#672: FILE: arch/arm/kernel/prom.c:394:
+    printk(KERN_INFO

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/arm/kernel/prom.c:399:
+    return 0;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 29 warnings, 18 checks, 604 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
