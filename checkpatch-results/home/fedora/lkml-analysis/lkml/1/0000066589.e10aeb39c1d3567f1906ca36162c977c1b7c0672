CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#78: FILE: block/cfq-iosched.c:30:
+static int cfq_target_latency = HZ * 3/10; /* 300 ms */
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#100: FILE: block/cfq-iosched.c:76:
+	unsigned count;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#103: FILE: block/cfq-iosched.c:78:
 };
+#define CFQ_RB_ROOT	(struct cfq_rb_root) { RB_ROOT, NULL, 0, }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: block/cfq-iosched.c:78:
+#define CFQ_RB_ROOT	(struct cfq_rb_root) { RB_ROOT, NULL, 0, }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#170: FILE: block/cfq-iosched.c:218:
+static struct cfq_rb_root * service_tree_for(enum wl_prio_t prio, enum wl_type_t type,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#170: FILE: block/cfq-iosched.c:218:
+static struct cfq_rb_root * service_tree_for(enum wl_prio_t prio, enum wl_type_t type,
+							  struct cfq_data *cfqd) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: block/cfq-iosched.c:219:
+static struct cfq_rb_root * service_tree_for(enum wl_prio_t prio, enum wl_type_t type,
+							  struct cfq_data *cfqd) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cfqq' - possible side-effects?
#184: FILE: block/cfq-iosched.c:269:
+#define CFQQ_SEEKY(cfqq) (!cfqq->cic || CIC_SEEKY(cfqq->cic))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cfqq' may be better as '(cfqq)' to avoid precedence issues
#184: FILE: block/cfq-iosched.c:269:
+#define CFQQ_SEEKY(cfqq) (!cfqq->cic || CIC_SEEKY(cfqq->cic))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#186: FILE: block/cfq-iosched.c:271:
+static inline int cfq_busy_queues_wl(enum wl_prio_t wl, struct cfq_data *cfqd) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#187: FILE: block/cfq-iosched.c:272:
+	return wl==IDLE_WL? cfqd->service_tree_idle.count :
 	         ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#187: FILE: block/cfq-iosched.c:272:
+	return wl==IDLE_WL? cfqd->service_tree_idle.count :
 	                  ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#210: FILE: block/cfq-iosched.c:356:
+	unsigned min_q, max_q;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#211: FILE: block/cfq-iosched.c:357:
+	unsigned mult  = cfqd->cfq_hist_divisor - 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#212: FILE: block/cfq-iosched.c:358:
+	unsigned round = cfqd->cfq_hist_divisor / 2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#213: FILE: block/cfq-iosched.c:359:
+	unsigned busy  = cfq_busy_queues_wl(rt, cfqd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: block/cfq-iosched.c:360:
+	unsigned busy  = cfq_busy_queues_wl(rt, cfqd);
+	min_q = min(cfqd->busy_queues_avg[rt], busy);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#225: FILE: block/cfq-iosched.c:370:
+	unsigned process_thr = cfqd->cfq_target_latency / cfqd->cfq_slice[1];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#226: FILE: block/cfq-iosched.c:371:
+	unsigned iq = cfq_get_interested_queues(cfqd, cfq_class_rt(cfqq));

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: block/cfq-iosched.c:372:
+	unsigned slice = cfq_prio_to_slice(cfqd, cfqq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#230: FILE: block/cfq-iosched.c:375:
+		unsigned low_slice = 2 * slice * cfqd->cfq_slice_idle

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#357: FILE: block/cfq-iosched.c:1013:
+	struct cfq_rb_root *service_tree = service_tree_for(cfqd->serving_prio, cfqd->serving_type, cfqd);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#398: FILE: block/cfq-iosched.c:1179:
+	sl = min_t(unsigned, cfqd->cfq_slice_idle, cfqq->slice_end - jiffies);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#414: FILE: block/cfq-iosched.c:1203:
+	if (!time_before(jiffies, rq->start_time + cfqd->cfq_target_latency / 2) && rq_data_dir(rq)==READ) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#414: FILE: block/cfq-iosched.c:1203:
+	if (!time_before(jiffies, rq->start_time + cfqd->cfq_target_latency / 2) && rq_data_dir(rq)==READ) {
 	                                                                                           ^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#416: FILE: block/cfq-iosched.c:1205:
+					    (jiffies - rq->start_time) / (cfqd->cfq_target_latency / 2));

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#426: FILE: block/cfq-iosched.c:1254:
+enum wl_type_t cfq_choose_sync_async(struct cfq_data *cfqd, enum wl_prio_t prio) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#428: FILE: block/cfq-iosched.c:1256:
+	struct cfq_queue *id, *ni;
+	ni = cfq_rb_first(service_tree_for(prio, SYNC_NOIDLE_WL, cfqd));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#432: FILE: block/cfq-iosched.c:1260:
+	if (!ni) return SYNC_WL;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#444: FILE: block/cfq-iosched.c:1304:
+^Iif (timer_pending(&cfqd->idle_slice_timer) || $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#456: FILE: block/cfq-iosched.c:1315:
+		if (cfq_busy_queues_wl(RT_WL, cfqd))
[...]
+		else if (cfq_busy_queues_wl(BE_WL, cfqd))
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#460: FILE: block/cfq-iosched.c:1319:
+		else {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#467: FILE: block/cfq-iosched.c:1326:
+			int counts[]={
 			            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#472: FILE: block/cfq-iosched.c:1331:
+			int nonzero_counts= !!counts[0] + !!counts[1] + !!counts[2];
 			                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nonzero_counts == 1'
#474: FILE: block/cfq-iosched.c:1333:
+			if (previous_prio != cfqd->serving_prio || (nonzero_counts == 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#475: FILE: block/cfq-iosched.c:1334:
+				cfqd->serving_type = counts[1] ? SYNC_NOIDLE_WL : counts[2] ? SYNC_WL : ASYNC_WL;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#479: FILE: block/cfq-iosched.c:1338:
+				if (!counts[cfqd->serving_type] || time_after(jiffies, cfqd->workload_expires)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#479: FILE: block/cfq-iosched.c:1338:
+				if (!counts[cfqd->serving_type] || time_after(jiffies, cfqd->workload_expires)) {
[...]
+				} else
[...]

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#481: FILE: block/cfq-iosched.c:1340:
+					    cfqd->async_starved++ > cfqd->cfq_async_penalty * (1 + cfqd->reads_delayed))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#483: FILE: block/cfq-iosched.c:1342:
+^I^I^I^I^Ielse $

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#484: FILE: block/cfq-iosched.c:1343:
+						cfqd->serving_type = cfq_choose_sync_async(cfqd, cfqd->serving_prio);

CHECK:BRACES: Unbalanced braces around else statement
#485: FILE: block/cfq-iosched.c:1344:
+				} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#490: FILE: block/cfq-iosched.c:1349:
+				unsigned slice = cfqd->cfq_target_latency;

WARNING:LINE_SPACING: Missing a blank line after declarations
#491: FILE: block/cfq-iosched.c:1350:
+				unsigned slice = cfqd->cfq_target_latency;
+				slice = slice * counts[cfqd->serving_type] /

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#492: FILE: block/cfq-iosched.c:1351:
+					max_t(unsigned, cfqd->busy_queues_avg[cfqd->serving_prio],

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#493: FILE: block/cfq-iosched.c:1352:
+					      counts[SYNC_WL] + counts[SYNC_NOIDLE_WL] + counts[ASYNC_WL]);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#494: FILE: block/cfq-iosched.c:1353:
+^I^I^I^I^I    $

ERROR:SPACING: space required after that ',' (ctx:VxV)
#514: FILE: block/cfq-iosched.c:1392:
+	int i,j;
 	     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: block/cfq-iosched.c:1393:
+	int i,j;
+	for (i = 0; i < 2; ++i)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#555: FILE: block/cfq-iosched.c:2166:
+	if (cfqd->serving_type == SYNC_NOIDLE_WL
+	    && new_cfqq->service_tree == cfqq->service_tree)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#579: FILE: block/cfq-iosched.c:2596:
+	int i,j;
 	     ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 24 warnings, 11 checks, 536 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
