CHECK:SPACING: No space is necessary after a cast
#135: FILE: checkpoint/namespace.c:114:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#181: FILE: checkpoint/objhash.c:178:
+	get_cred((struct cred *) ptr);

CHECK:SPACING: No space is necessary after a cast
#187: FILE: checkpoint/objhash.c:184:
+	put_cred((struct cred *) ptr);

CHECK:SPACING: No space is necessary after a cast
#193: FILE: checkpoint/objhash.c:190:
+	(void) get_uid(u);

CHECK:SPACING: No space is necessary after a cast
#199: FILE: checkpoint/objhash.c:196:
+	free_uid((struct user_struct *) ptr);

CHECK:SPACING: No space is necessary after a cast
#204: FILE: checkpoint/objhash.c:201:
+	get_user_ns((struct user_namespace *) ptr);

CHECK:SPACING: No space is necessary after a cast
#210: FILE: checkpoint/objhash.c:207:
+	put_user_ns((struct user_namespace *) ptr);

CHECK:SPACING: No space is necessary after a cast
#215: FILE: checkpoint/objhash.c:212:
+	get_group_info((struct group_info *) ptr);

CHECK:SPACING: No space is necessary after a cast
#221: FILE: checkpoint/objhash.c:218:
+	put_group_info((struct group_info *) ptr);

CHECK:SPACING: No space is necessary after a cast
#293: FILE: checkpoint/process.c:147:
+	rcred = (struct cred *) get_cred(t->real_cred);

CHECK:SPACING: No space is necessary after a cast
#294: FILE: checkpoint/process.c:148:
+	ecred = (struct cred *) get_cred(t->cred);

CHECK:SPACING: No space is necessary after a cast
#316: FILE: checkpoint/process.c:170:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#404: FILE: checkpoint/process.c:551:
+	 * ref here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#416: FILE: checkpoint/process.c:563:
+	ctx->realcred = ctx->ecred = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#443: FILE: include/linux/capability.h:572:
+extern int apply_securebits(unsigned securebits, struct cred *new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: include/linux/capability.h:572:
+extern int apply_securebits(unsigned securebits, struct cred *new);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: include/linux/capability.h:574:
+extern int restore_capabilities(struct ckpt_capabilities *h, struct cred *new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/capability.h:575:
+extern void checkpoint_capabilities(struct ckpt_capabilities *h, struct cred *cred);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/checkpoint.h:197:
+extern int checkpoint_groupinfo(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/linux/checkpoint.h:198:
+extern int checkpoint_user(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#471: FILE: include/linux/checkpoint.h:199:
+extern int checkpoint_cred(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#472: FILE: include/linux/checkpoint.h:200:
+extern void *restore_groupinfo(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: include/linux/checkpoint.h:201:
+extern void *restore_user(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: include/linux/checkpoint.h:202:
+extern void *restore_cred(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/checkpoint.h:204:
+extern int checkpoint_userns(struct ckpt_ctx *ctx, void *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: include/linux/checkpoint.h:205:
+extern void *restore_userns(struct ckpt_ctx *ctx);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#515: FILE: include/linux/checkpoint_hdr.h:198:
+	/* would audit want to track the checkpointed ids,
+	   or (more likely) who actually restarted? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#515: FILE: include/linux/checkpoint_hdr.h:198:
+	   or (more likely) who actually restarted? */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#537: FILE: include/linux/checkpoint_hdr.h:225:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#546: FILE: include/linux/checkpoint_hdr.h:234:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#555: FILE: include/linux/checkpoint_hdr.h:243:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#565: FILE: include/linux/checkpoint_hdr.h:253:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#575: FILE: include/linux/checkpoint_hdr.h:263:
+} __attribute__((aligned(8)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: kernel/cred.c:716:
+	groupinfo_ref = checkpoint_obj(ctx, cred->group_info,
+					CKPT_OBJ_GROUPINFO);

CHECK:SPACING: No space is necessary after a cast
#651: FILE: kernel/cred.c:742:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

CHECK:SPACING: No space is necessary after a cast
#659: FILE: kernel/cred.c:750:
+	return do_checkpoint_cred(ctx, (struct cred *) ptr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#681: FILE: kernel/cred.c:772:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#684: FILE: kernel/cred.c:775:
+	 * so we must have been privileged to abuse it... */

CHECK:SPACING: No space is necessary after a cast
#734: FILE: kernel/cred.c:825:
+	return (void *) do_restore_cred(ctx);

CHECK:SPACING: No space is necessary after a cast
#770: FILE: kernel/groups.c:306:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#784: FILE: kernel/groups.c:320:
+#define MAX_GROUPINFO_SIZE (sizeof(*h)+NGROUPS_MAX*sizeof(gid_t))
                                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#784: FILE: kernel/groups.c:320:
+#define MAX_GROUPINFO_SIZE (sizeof(*h)+NGROUPS_MAX*sizeof(gid_t))
                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#800: FILE: kernel/groups.c:336:
+		if (h->groups[i-1] >= h->groups[i])
 		               ^

CHECK:SPACING: No space is necessary after a cast
#818: FILE: kernel/groups.c:354:
+	return (void *) do_restore_groupinfo(ctx);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#877: FILE: kernel/user.c:551:
+	size = UNSAVED_STRIDE*sizeof(struct user_struct *);
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#890: FILE: kernel/user.c:564:
+			size = step*UNSAVED_STRIDE*sizeof(struct user_struct *);
 			           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#890: FILE: kernel/user.c:564:
+			size = step*UNSAVED_STRIDE*sizeof(struct user_struct *);
 			                          ^

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#891: FILE: kernel/user.c:565:
+			unsaved_creators = krealloc(unsaved_creators, size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#892: FILE: kernel/user.c:566:
+			unsaved_creators = krealloc(unsaved_creators, size,
+							GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#899: FILE: kernel/user.c:573:
+	for (i = unsaved_ns_nr-1; i >= 0; i--) {
 	                      ^

CHECK:SPACING: No space is necessary after a cast
#922: FILE: kernel/user.c:596:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

CHECK:SPACING: No space is necessary after a cast
#930: FILE: kernel/user.c:604:
+	return do_checkpoint_user(ctx, (struct user_struct *) ptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#954: FILE: kernel/user.c:628:
+	if (current_uid() == uid ||
+		current_euid() == uid ||

CHECK:SPACING: No space is necessary after a cast
#991: FILE: kernel/user.c:665:
+	return (void *) do_restore_user(ctx);

CHECK:SPACING: No space is necessary after a cast
#1040: FILE: kernel/user_namespace.c:136:
+	ret = ckpt_write_obj(ctx, (struct ckpt_hdr *) h);

CHECK:SPACING: No space is necessary after a cast
#1048: FILE: kernel/user_namespace.c:144:
+	return do_checkpoint_userns(ctx, (struct user_namespace *) ptr);

CHECK:SPACING: No space is necessary after a cast
#1096: FILE: kernel/user_namespace.c:192:
+	return (void *) do_restore_userns(ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 46 checks, 912 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068234.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
