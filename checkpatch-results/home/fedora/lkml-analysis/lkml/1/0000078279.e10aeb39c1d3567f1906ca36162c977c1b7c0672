WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#148: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#153: FILE: crypto/async_tx/async_pq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'yur' may be misspelled - perhaps 'your'?
#154: FILE: crypto/async_tx/async_pq.c:2:
+ * Copyright(c) 2007 Yuri Tikhonov <yur@emcraft.com>
                                     ^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#168: FILE: crypto/async_tx/async_pq.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: No space is necessary after a cast
#187: FILE: crypto/async_tx/async_pq.c:35:
+	return p == (void *) raid6_empty_zero_page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#196: FILE: crypto/async_tx/async_pq.c:44:
+#define P(b, d) (b[d-2])
                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#196: FILE: crypto/async_tx/async_pq.c:44:
+#define P(b, d) (b[d-2])

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#197: FILE: crypto/async_tx/async_pq.c:45:
+#define Q(b, d) (b[d-1])
                     ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd' may be better as '(d)' to avoid precedence issues
#197: FILE: crypto/async_tx/async_pq.c:45:
+#define Q(b, d) (b[d-1])

CHECK:SPACING: No space is necessary after a cast
#309: FILE: crypto/async_tx/async_pq.c:157:
+		srcs = (void **) blocks;

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: crypto/async_tx/async_pq.c:160:
+		if (is_raid6_zero_block(blocks[i])) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: crypto/async_tx/async_pq.c:161:
+			BUG_ON(i > disks - 3); /* P or Q can't be zero */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Unbalanced braces around else statement
#315: FILE: crypto/async_tx/async_pq.c:163:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: crypto/async_tx/async_pq.c:202:
+	BUG_ON(disks > 255 || !(P(blocks, disks) || Q(blocks, disks)));

CHECK:SPACING: No space is necessary after a cast
#359: FILE: crypto/async_tx/async_pq.c:207:
+		dma_src = (dma_addr_t *) blocks;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#379: FILE: crypto/async_tx/async_pq.c:227:
+		BUG_ON(len + offset > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#383: FILE: crypto/async_tx/async_pq.c:231:
+		BUG_ON(len + offset > PAGE_SIZE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#419: FILE: crypto/async_tx/async_pq.c:267:
+	BUG_ON(disks < 4);

CHECK:SPACING: No space is necessary after a cast
#424: FILE: crypto/async_tx/async_pq.c:272:
+		dma_src = (dma_addr_t *) blocks;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#428: FILE: crypto/async_tx/async_pq.c:276:
+		dma_addr_t *pq = &dma_src[disks-2];
 		                               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: crypto/async_tx/async_pq.c:287:
+				BUG_ON(is_raid6_zero_block(blocks[i]));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#459: FILE: crypto/async_tx/async_pq.c:307:
+		return tx;
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: crypto/async_tx/async_pq.c:322:
+		BUG_ON(!spare || !scribble);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#487: FILE: crypto/async_tx/async_pq.c:335:
+			tx = async_xor(spare, blocks, offset, disks-2, len, submit);
 			                                           ^

WARNING:MINMAX: min() should probably be min_t(int, src_cnt, dma->max_xor)
#550: FILE: crypto/async_tx/async_xor.c:65:
+		xor_src_cnt = min(src_cnt, (int)dma->max_xor);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#562: FILE: drivers/dma/dmaengine.c:649:
+	BUG_ON(dma_has_cap(DMA_PQ, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: drivers/dma/dmaengine.c:650:
+	BUG_ON(dma_has_cap(DMA_PQ, device->cap_mask) &&
+		!device->device_prep_dma_pq);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: drivers/dma/dmaengine.c:651:
+	BUG_ON(dma_has_cap(DMA_PQ_VAL, device->cap_mask) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: drivers/dma/dmaengine.c:652:
+	BUG_ON(dma_has_cap(DMA_PQ_VAL, device->cap_mask) &&
+		!device->device_prep_dma_pq_val);

WARNING:REPEATED_WORD: Possible repeated word: 'has'
#626: FILE: include/linux/dmaengine.h:77:
+ *  acknowledges receipt, i.e. has has a chance to establish any dependency

CHECK:BIT_MACRO: Prefer using the BIT macro
#671: FILE: include/linux/dmaengine.h:264:
+	#define DMA_HAS_PQ_CONTINUE (1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#679: FILE: include/linux/dmaengine.h:281:
+	struct dma_async_tx_descriptor *(*device_prep_dma_pq)(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#683: FILE: include/linux/dmaengine.h:285:
+	struct dma_async_tx_descriptor *(*device_prep_dma_pq_val)(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#745: FILE: include/linux/dmaengine.h:358:
+	BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 17 checks, 595 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078279.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
