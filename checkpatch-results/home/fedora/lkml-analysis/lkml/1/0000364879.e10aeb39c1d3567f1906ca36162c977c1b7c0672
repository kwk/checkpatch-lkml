WARNING:TYPO_SPELLING: 'unecessary' may be misspelled - perhaps 'unnecessary'?
#52: 
experience unecessary overhead/latencies regardless as they
           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: braces {} should be used on all arms of this statement
#127: FILE: kernel/sched.c:5375:
+	if (p->sched_class->set_cpus_allowed)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: kernel/sched.c:5377:
+	else {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#145: FILE: kernel/sched_rt.c:53:
 }
+#ifdef CONFIG_SMP

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rq->rt.rt_nr_running < 2'
#159: FILE: kernel/sched_rt.c:67:
+	if ((rq->rt.rt_nr_running < 2) || !rq->rt.rt_nr_migratory)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: kernel/sched_rt.c:685:
+	BUG_ON(!rt_task(p));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight != p->nr_cpus_allowed'
#213: FILE: kernel/sched_rt.c:691:
+	if (p->se.on_rq && (weight != p->nr_cpus_allowed)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->nr_cpus_allowed <= 1'
#216: FILE: kernel/sched_rt.c:694:
+		if ((p->nr_cpus_allowed <= 1) && (weight > 1))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'weight > 1'
#216: FILE: kernel/sched_rt.c:694:
+		if ((p->nr_cpus_allowed <= 1) && (weight > 1))

ERROR:SPACING: space required before the open parenthesis '('
#218: FILE: kernel/sched_rt.c:696:
+		else if((p->nr_cpus_allowed > 1) && (weight <= 1))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364879.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 7 checks, 134 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364879.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
