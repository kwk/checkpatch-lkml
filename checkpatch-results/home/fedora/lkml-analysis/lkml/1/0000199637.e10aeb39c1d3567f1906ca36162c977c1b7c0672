WARNING:TYPO_SPELLING: 'implementes' may be misspelled - perhaps 'implements'?
#32: 
Attached patch (also attached test application) implementes
                                                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nuber' may be misspelled - perhaps 'number'?
#58: 
where size is nuber of attached bytes for given attribute.
              ^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#72: 
2008-11-25 22:29:47.8477 pid: 1850, tid: 1850, name: /tmp/, wd: 1, mask: 303, attributes: pid: 1, tid: 1, io: 1, name: 1.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/inotify.c:303:
+void inotify_inode_queue_event(struct inode *inode, struct inotify_details *det,
+		struct inode *n_inode)

WARNING:SPACING: Unnecessary space before function pointer name
#241: FILE: fs/inotify_user.c:123:
+	int			(* callback)(struct inotify_device *dev,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#241: FILE: fs/inotify_user.c:123:
+	int			(* callback)(struct inotify_device *dev,
 	   			 ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#247: FILE: fs/inotify_user.c:129:
+struct inotify_kernel_attribute
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: fs/inotify_user.c:206:
+static int inotify_kernel_fill_attributes(struct inotify_device *dev,
+		struct inotify_kernel_event *ev, struct inotify_details *det)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#300: FILE: fs/inotify_user.c:244:
+static struct inotify_kernel_event * kernel_event(struct inotify_device *dev,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: fs/inotify_user.c:245:
+static struct inotify_kernel_event * kernel_event(struct inotify_device *dev,
+		s32 wd, struct inotify_details *det)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/inotify_user.c:336:
+static void inotify_dev_queue_event(struct inotify_watch *w, u32 wd,
+		struct inotify_details *det, struct inode *ignored)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: fs/inotify_user.c:356:
+	if (last && last->event.mask == det->mask &&
+		    last->event.wd == wd &&

CHECK:BRACES: braces {} should be used on all arms of this statement
#402: FILE: fs/inotify_user.c:371:
+	if (unlikely(dev->event_count == dev->max_events)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#406: FILE: fs/inotify_user.c:375:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: fs/inotify_user.c:489:
+static int inotify_copy_user_attributes(struct inotify_kernel_event *ev,
+		void __user *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: fs/inotify_user.c:495:
+	list_for_each_entry_safe(attr, tmp, &ev->attribute_list,
+			attribute_entry) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#441: FILE: fs/inotify_user.c:498:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: fs/inotify_user.c:620:
+	list_for_each_entry_safe(attr, tmp, &dev->callback_list,
+			callback_entry) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/inotify_user.c:648:
+static int inotify_create_attr(struct inotify_kernel_event *ev,
+		unsigned int id, void *data, unsigned int size)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*attr)...) over kmalloc(sizeof(struct inotify_kernel_attribute)...)
#517: FILE: fs/inotify_user.c:652:
+	attr = kmalloc(sizeof(struct inotify_kernel_attribute) + size,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: fs/inotify_user.c:653:
+	attr = kmalloc(sizeof(struct inotify_kernel_attribute) + size,
+			GFP_NOFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: fs/inotify_user.c:684:
+static int inotify_add_io_details_attr(struct inotify_device *dev,
+				struct inotify_kernel_event *ev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: fs/inotify_user.c:700:
+static int inotify_add_name_attr(struct inotify_device *dev,
+				struct inotify_kernel_event *ev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: fs/inotify_user.c:715:
+static int inotify_attach_attribute_callback(struct inotify_device *dev,
+		unsigned int a)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#586: FILE: fs/inotify_user.c:721:
+	for (i=0; i<ARRAY_SIZE(inotify_supported_attrs); ++i) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#586: FILE: fs/inotify_user.c:721:
+	for (i=0; i<ARRAY_SIZE(inotify_supported_attrs); ++i) {
 	           ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: fs/inotify_user.c:723:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: fs/inotify_user.c:731:
+		list_for_each_entry(attr, &dev->callback_list,
+				callback_entry) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct inotify_attribute_callback)...)
#607: FILE: fs/inotify_user.c:742:
+			new = kmalloc(sizeof(struct inotify_attribute_callback),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#608: FILE: fs/inotify_user.c:743:
+			new = kmalloc(sizeof(struct inotify_attribute_callback),
+					GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#639: FILE: fs/inotify_user.c:774:
+		ret = get_user(attr, (unsigned int __user *) p);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#683: FILE: fs/nfsd/vfs.c:1010:
+		fsnotify_modify(file->f_path.dentry, offset-cnt, cnt);
 		                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#728: FILE: include/linux/fsnotify.h:48:
+	INOTIFY_DETAILS(det, IN_MOVED_FROM|isdir, inotify_get_cookie(), old_name);
 	                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#741: FILE: include/linux/fsnotify.h:60:
+	det.mask = IN_MOVED_TO|isdir;
 	                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#765: FILE: include/linux/fsnotify.h:84:
+	INOTIFY_DETAILS(det, IN_DELETE|isdir, 0, dentry->d_name.name);
 	                              ^

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#964: FILE: include/linux/inotify.h:74:
+struct inotify_attribute
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#985: FILE: include/linux/inotify.h:95:
+struct inotify_io_details
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#996: FILE: include/linux/inotify.h:126:
+struct inotify_details
+{

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#1006: FILE: include/linux/inotify.h:134:
+	void (*handle_event)(struct inotify_watch *, u32,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1006: FILE: include/linux/inotify.h:134:
+	void (*handle_event)(struct inotify_watch *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_details *' should also have an identifier name
#1006: FILE: include/linux/inotify.h:134:
+	void (*handle_event)(struct inotify_watch *, u32,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1006: FILE: include/linux/inotify.h:134:
+	void (*handle_event)(struct inotify_watch *, u32,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1007: FILE: include/linux/inotify.h:135:
+	void (*handle_event)(struct inotify_watch *, u32,
+		struct inotify_details *, struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1019: FILE: include/linux/inotify.h:145:
+extern void inotify_inode_queue_event(struct inode *, struct inotify_details *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1019: FILE: include/linux/inotify.h:145:
+extern void inotify_inode_queue_event(struct inode *, struct inotify_details *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_details *' should also have an identifier name
#1019: FILE: include/linux/inotify.h:145:
+extern void inotify_inode_queue_event(struct inode *, struct inotify_details *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1019: FILE: include/linux/inotify.h:145:
+extern void inotify_inode_queue_event(struct inode *, struct inotify_details *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1021: FILE: include/linux/inotify.h:147:
+extern void inotify_dentry_parent_queue_event(struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#1021: FILE: include/linux/inotify.h:147:
+extern void inotify_dentry_parent_queue_event(struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_details *' should also have an identifier name
#1021: FILE: include/linux/inotify.h:147:
+extern void inotify_dentry_parent_queue_event(struct dentry *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1022: FILE: include/linux/inotify.h:148:
+extern void inotify_dentry_parent_queue_event(struct dentry *,
+		struct inotify_details *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199637.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 13 warnings, 28 checks, 850 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000199637.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
