CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: arch/s390/include/asm/qdio.h:376:
+extern int qdio_initialize(struct qdio_initialize *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qdio_initialize *' should also have an identifier name
#57: FILE: arch/s390/include/asm/qdio.h:376:
+extern int qdio_initialize(struct qdio_initialize *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: arch/s390/include/asm/qdio.h:377:
+extern int qdio_allocate(struct qdio_initialize *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qdio_initialize *' should also have an identifier name
#58: FILE: arch/s390/include/asm/qdio.h:377:
+extern int qdio_allocate(struct qdio_initialize *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#59: FILE: arch/s390/include/asm/qdio.h:378:
+extern int qdio_establish(struct qdio_initialize *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qdio_initialize *' should also have an identifier name
#59: FILE: arch/s390/include/asm/qdio.h:378:
+extern int qdio_establish(struct qdio_initialize *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: arch/s390/include/asm/qdio.h:381:
+extern int do_QDIO(struct ccw_device *cdev, unsigned int callflags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: arch/s390/include/asm/qdio.h:383:
+extern int qdio_cleanup(struct ccw_device*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device*' should also have an identifier name
#68: FILE: arch/s390/include/asm/qdio.h:383:
+extern int qdio_cleanup(struct ccw_device*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#68: FILE: arch/s390/include/asm/qdio.h:383:
+extern int qdio_cleanup(struct ccw_device*, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: arch/s390/include/asm/qdio.h:384:
+extern int qdio_shutdown(struct ccw_device*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ccw_device*' should also have an identifier name
#69: FILE: arch/s390/include/asm/qdio.h:384:
+extern int qdio_shutdown(struct ccw_device*, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#69: FILE: arch/s390/include/asm/qdio.h:384:
+extern int qdio_shutdown(struct ccw_device*, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#72: FILE: arch/s390/include/asm/qdio.h:386:
+extern int qdio_get_ssqd_desc(struct ccw_device *dev, struct qdio_ssqd_desc*);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qdio_ssqd_desc*' should also have an identifier name
#72: FILE: arch/s390/include/asm/qdio.h:386:
+extern int qdio_get_ssqd_desc(struct ccw_device *dev, struct qdio_ssqd_desc*);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_ptr"
#148: FILE: drivers/s390/cio/qdio_setup.c:258:
+	if (irq_ptr != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "irq_ptr"
#177: FILE: drivers/s390/cio/qdio_setup.c:283:
+	if (irq_ptr != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: drivers/s390/cio/qdio_setup.c:286:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ssqd)...) over kmalloc(sizeof(struct qdio_ssqd_desc)...)
#217: FILE: drivers/s390/net/qeth_core_main.c:3795:
+	ssqd = kmalloc(sizeof(struct qdio_ssqd_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 11 checks, 156 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
