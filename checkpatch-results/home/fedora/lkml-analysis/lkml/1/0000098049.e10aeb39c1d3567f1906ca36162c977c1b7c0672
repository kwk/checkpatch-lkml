WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-fixes-for-linus

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: arch/x86/include/asm/atomic_32.h:271:
+extern u64 atomic64_cmpxchg(atomic64_t *ptr, u64 old_val, u64 new_val);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: arch/x86/include/asm/atomic_32.h:281:
+extern u64 atomic64_xchg(atomic64_t *ptr, u64 new_val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: arch/x86/include/asm/atomic_32.h:290:
+extern void atomic64_set(atomic64_t *ptr, u64 new_val);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#362: FILE: arch/x86/include/asm/atomic_32.h:309:
+	asm volatile(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: arch/x86/include/asm/atomic_32.h:320:
+extern u64 atomic64_read(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: arch/x86/include/asm/atomic_32.h:329:
+extern u64 atomic64_add_return(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#414: FILE: arch/x86/include/asm/atomic_32.h:334:
+extern u64 atomic64_sub_return(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#415: FILE: arch/x86/include/asm/atomic_32.h:335:
+extern u64 atomic64_inc_return(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#416: FILE: arch/x86/include/asm/atomic_32.h:336:
+extern u64 atomic64_dec_return(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: arch/x86/include/asm/atomic_32.h:345:
+extern void atomic64_add(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#440: FILE: arch/x86/include/asm/atomic_32.h:354:
+extern void atomic64_sub(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#455: FILE: arch/x86/include/asm/atomic_32.h:365:
+extern int atomic64_sub_and_test(u64 delta, atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: arch/x86/include/asm/atomic_32.h:373:
+extern void atomic64_inc(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#479: FILE: arch/x86/include/asm/atomic_32.h:381:
+extern void atomic64_dec(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: arch/x86/include/asm/atomic_32.h:391:
+extern int atomic64_dec_and_test(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#503: FILE: arch/x86/include/asm/atomic_32.h:401:
+extern int atomic64_inc_and_test(atomic64_t *ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#518: FILE: arch/x86/include/asm/atomic_32.h:412:
+extern int atomic64_add_negative(u64 delta, atomic64_t *ptr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#679: FILE: arch/x86/kernel/dumpstack_64.c:22:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#694: FILE: arch/x86/kernel/dumpstack_64.c:40:
+static unsigned long *in_exception_stack(unsigned cpu, unsigned long stack,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: arch/x86/kernel/dumpstack_64.c:41:
+static unsigned long *in_exception_stack(unsigned cpu, unsigned long stack,
+					unsigned *usedp, char **idp)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#695: FILE: arch/x86/kernel/dumpstack_64.c:41:
+					unsigned *usedp, char **idp)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#738: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#743: FILE: arch/x86/lib/atomic64_32.c:1:
+#include <linux/compiler.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#747: FILE: arch/x86/lib/atomic64_32.c:5:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#749: FILE: arch/x86/lib/atomic64_32.c:7:
+#include <asm/atomic.h>

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#756: FILE: arch/x86/lib/atomic64_32.c:14:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmpxchg8b', this function's name, in a string
#757: FILE: arch/x86/lib/atomic64_32.c:15:
+		LOCK_PREFIX "cmpxchg8b %1\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#814: FILE: arch/x86/lib/atomic64_32.c:72:
+/**
+EXPORT_SYMBOL(atomic64_read);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE_STRING: line length of 102 exceeds 100 columns
#1216: FILE: tools/perf/builtin-annotate.c:1288:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s|grep -v %s",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1216: FILE: tools/perf/builtin-annotate.c:1288:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s|grep -v %s",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: tools/perf/builtin-annotate.c:1289:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s|grep -v %s",
+			(u64)start, (u64)end, filename, filename);

WARNING:STATIC_CONST_CHAR_ARRAY: static char array declaration should probably be static const char
#1350: FILE: tools/perf/builtin-report.c:62:
+static char		callchain_default_opt[] = "fractal,0.5";

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1455: FILE: tools/perf/builtin-report.c:816:
+}
+static size_t

CHECK:BRACES: braces {} should be used on all arms of this statement
#1469: FILE: tools/perf/builtin-report.c:830:
+		if (!count && i == depth - 1) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1474: FILE: tools/perf/builtin-report.c:835:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1487: FILE: tools/perf/builtin-report.c:848:
+callchain__fprintf_graph(FILE *fp, struct callchain_node *self,
+			u64 total_samples, int depth, int depth_mask)

WARNING:TYPO_SPELLING: 'seperator' may be misspelled - perhaps 'separator'?
#1516: FILE: tools/perf/builtin-report.c:877:
+		 * But we keep the older depth mask for the line seperator
 		                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1612: FILE: tools/perf/builtin-report.c:971:
+		ret = percent_color_fprintf(fp, "   %6.2f%%",
 				(self->count * 100.0) / total_samples);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1624: FILE: tools/perf/builtin-report.c:1053:
+resolve_callchain(struct thread *thread, struct map *map __used,
+		    struct ip_callchain *chain, struct hist_entry *entry)

WARNING:SPLIT_STRING: quoted string split across lines
#1856: FILE: tools/perf/builtin-report.c:1703:
+			fprintf(stderr, "selected --sort parent, but no"
+					" callchain data. Did you call"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1857: FILE: tools/perf/builtin-report.c:1704:
+					" callchain data. Did you call"
+					" perf record without -g?\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1862: FILE: tools/perf/builtin-report.c:1709:
+			fprintf(stderr, "selected -c but no callchain data."
+					" Did you call perf record without"

WARNING:SPLIT_STRING: quoted string split across lines
#1863: FILE: tools/perf/builtin-report.c:1710:
+					" Did you call perf record without"
+					" -g?\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1953: FILE: tools/perf/builtin-report.c:1895:
+	OPT_CALLBACK_DEFAULT('c', "callchain", NULL, "output_type,min_percent",
+		     "Display callchains using output_type and min percent threshold. "

WARNING:SPLIT_STRING: quoted string split across lines
#1954: FILE: tools/perf/builtin-report.c:1896:
+		     "Display callchains using output_type and min percent threshold. "
+		     "Default: flat,0", &parse_callchain_opt, callchain_default_opt),

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1976: FILE: tools/perf/builtin-stat.c:67:
+static unsigned int		nr_cpus				=  0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'counter' - possible side-effects?
#1984: FILE: tools/perf/builtin-stat.c:99:
+#define MATCH_EVENT(t, c, counter)			\
+	(attrs[counter].type == PERF_TYPE_##t &&	\
+	 attrs[counter].config == PERF_COUNT_##c)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#2141: FILE: tools/perf/builtin-top.c:69:
+static char			*vmlinux			=  NULL;

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#2194: FILE: tools/perf/builtin-top.c:281:
+static const char *skip_symbols[] = {

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#2327: FILE: tools/perf/perf.h:55:
+#define __used		__attribute__((__unused__))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'parent' may be better as '(parent)' to avoid precedence issues
#2375: FILE: tools/perf/util/callchain.c:19:
+#define chain_for_each_child(child, parent)	\
+	list_for_each_entry(child, &parent->children, brothers)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2583: FILE: tools/perf/util/callchain.c:214:
+	new->cumul_hit = new->hit = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#2685: FILE: tools/perf/util/callchain.c:297:
+		if (cnode->sym && syms[i]) {
[...]
+		} else if (cnode->ip != chain->ips[i])
[...]

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2776: FILE: tools/perf/util/callchain.h:33:
+^Ienum chain_mode ^Imode;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2849: FILE: tools/perf/util/color.c:254:
+	if (percent >= MIN_RED)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2851: FILE: tools/perf/util/color.c:256:
+	else {

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2929: FILE: tools/perf/util/config.c:476:
+static int store_aux(const char* key, const char* value, void *cb __used)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#2929: FILE: tools/perf/util/config.c:476:
+static int store_aux(const char* key, const char* value, void *cb __used)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3117: FILE: tools/perf/util/include/asm/system.h:1:
+/* Empty */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3124: FILE: tools/perf/util/include/linux/kernel.h:1:
+#ifndef PERF_LINUX_KERNEL_H_

CHECK:SPACING: No space is necessary after a cast
#3128: FILE: tools/perf/util/include/linux/kernel.h:5:
+#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'MEMBER' may be better as '(MEMBER)' to avoid precedence issues
#3128: FILE: tools/perf/util/include/linux/kernel.h:5:
+#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#3139: FILE: tools/perf/util/include/linux/kernel.h:16:
+#define container_of(ptr, type, member) ({			\
+	const typeof(((type *)0)->member) * __mptr = (ptr);	\
+	(type *)((char *)__mptr - offsetof(type, member)); })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#3139: FILE: tools/perf/util/include/linux/kernel.h:16:
+#define container_of(ptr, type, member) ({			\
+	const typeof(((type *)0)->member) * __mptr = (ptr);	\
+	(type *)((char *)__mptr - offsetof(type, member)); })

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3151: FILE: tools/perf/util/include/linux/list.h:1:
+#include "../../../../include/linux/list.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3175: FILE: tools/perf/util/include/linux/module.h:1:
+#ifndef PERF_LINUX_MODULE_H

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#3178: FILE: tools/perf/util/include/linux/module.h:4:
+#define EXPORT_SYMBOL(name)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3187: FILE: tools/perf/util/include/linux/poison.h:1:
+#include "../../../../include/linux/poison.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3194: FILE: tools/perf/util/include/linux/prefetch.h:1:
+#ifndef PERF_LINUX_PREFETCH_H

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#3197: FILE: tools/perf/util/include/linux/prefetch.h:4:
+static inline void prefetch(void *a __attribute__((unused))) { }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3206: FILE: tools/perf/util/include/linux/rbtree.h:1:
+#include "../../../../include/linux/rbtree.h"

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3822: FILE: tools/perf/util/module.c:1:
+#include "util.h"

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#3852: FILE: tools/perf/util/module.c:31:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3892: FILE: tools/perf/util/module.c:71:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#3910: FILE: tools/perf/util/module.c:89:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#3921: FILE: tools/perf/util/module.c:100:
+		if (hash < s->hash)
[...]
+		else if (hash > s->hash)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3925: FILE: tools/perf/util/module.c:104:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3928: FILE: tools/perf/util/module.c:107:
+				return s;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3946: FILE: tools/perf/util/module.c:125:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3947: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3947: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3947: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3947: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3947: FILE: tools/perf/util/module.c:126:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3948: FILE: tools/perf/util/module.c:127:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
 		                               ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3949: FILE: tools/perf/util/module.c:128:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
+		ret += sec_dso__fprintf_section(pos, fp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#3994: FILE: tools/perf/util/module.c:173:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#4034: FILE: tools/perf/util/module.c:213:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#4052: FILE: tools/perf/util/module.c:231:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4063: FILE: tools/perf/util/module.c:242:
+		if (hash < m->hash)
[...]
+		else if (hash > m->hash)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4067: FILE: tools/perf/util/module.c:246:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4070: FILE: tools/perf/util/module.c:249:
+				return m;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4085: FILE: tools/perf/util/module.c:264:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4090: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4090: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4090: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4090: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#4091: FILE: tools/perf/util/module.c:270:
+		struct module *pos = rb_entry(nd, struct module, rb_node);
 		                              ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir_path"
#4146: FILE: tools/perf/util/module.c:325:
+	if (dir_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#4154: FILE: tools/perf/util/module.c:333:
+	if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#4167: FILE: tools/perf/util/module.c:346:
+		if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#4173: FILE: tools/perf/util/module.c:352:
+		if (file == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#4247: FILE: tools/perf/util/module.c:426:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#4256: FILE: tools/perf/util/module.c:435:
+	if (file == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4291: FILE: tools/perf/util/module.c:470:
+			if (*(name+len) == '-')
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4292: FILE: tools/perf/util/module.c:471:
+				*(name+len) = '_';
 				      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4337: FILE: tools/perf/util/module.h:1:
+#ifndef _PERF_MODULE_

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sec_dso *' should also have an identifier name
#4356: FILE: tools/perf/util/module.h:20:
+	struct section    *(*find_section)(struct sec_dso *, const char *name);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mod_dso *' should also have an identifier name
#4372: FILE: tools/perf/util/module.h:36:
+	struct module    *(*find_module)(struct mod_dso *, const char *name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4447: FILE: tools/perf/util/parse-events.c:226:
+			cache_op = parse_aliases(&s, hw_cache_op,
+						PERF_COUNT_HW_CACHE_OP_MAX);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4457: FILE: tools/perf/util/parse-events.c:236:
+			cache_result = parse_aliases(&s, hw_cache_result,
+						PERF_COUNT_HW_CACHE_RESULT_MAX);

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#4772: FILE: tools/perf/util/parse-options.h:96:
+#define OPT_BIT(s, l, v, h, b)      { .type = OPTION_BIT, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (b) }

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#4773: FILE: tools/perf/util/parse-options.h:97:
+#define OPT_BOOLEAN(s, l, v, h)     { .type = OPTION_BOOLEAN, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#4774: FILE: tools/perf/util/parse-options.h:98:
+#define OPT_SET_INT(s, l, v, h, i)  { .type = OPTION_SET_INT, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (i) }

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#4775: FILE: tools/perf/util/parse-options.h:99:
+#define OPT_SET_PTR(s, l, v, h, p)  { .type = OPTION_SET_PTR, .short_name = (s), .long_name = (l), .value = (v), .help = (h), .defval = (p) }

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#4776: FILE: tools/perf/util/parse-options.h:100:
+#define OPT_INTEGER(s, l, v, h)     { .type = OPTION_INTEGER, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#4777: FILE: tools/perf/util/parse-options.h:101:
+#define OPT_LONG(s, l, v, h)        { .type = OPTION_LONG, .short_name = (s), .long_name = (l), .value = (v), .help = (h) }

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#4778: FILE: tools/perf/util/parse-options.h:102:
+#define OPT_STRING(s, l, v, a, h)   { .type = OPTION_STRING,  .short_name = (s), .long_name = (l), .value = (v), (a), .help = (h) }

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#4782: FILE: tools/perf/util/parse-options.h:104:
+	{ .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), .argh = "time", .help = (h), .callback = parse_opt_approxidate_cb }

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#4785: FILE: tools/perf/util/parse-options.h:106:
+	{ .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), (a), .help = (h), .callback = (f) }

WARNING:LONG_LINE: line length of 180 exceeds 100 columns
#4787: FILE: tools/perf/util/parse-options.h:108:
+	{ .type = OPTION_CALLBACK, .short_name = (s), .long_name = (l), .value = (v), (a), .help = (h), .callback = (f), .defval = (intptr_t)d, .flags = PARSE_OPT_LASTARG_DEFAULT }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#4827: FILE: tools/perf/util/quote.c:199:
+#define EMIT(c)							\
+	do {							\
+		if (sb) strbuf_addch(sb, (c));			\
+		if (fp) fputc((c), fp);				\
+		count++;					\
 	} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4829: FILE: tools/perf/util/quote.c:201:
+		if (sb) strbuf_addch(sb, (c));			\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4830: FILE: tools/perf/util/quote.c:202:
+		if (fp) fputc((c), fp);				\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#4840: FILE: tools/perf/util/quote.c:206:
+#define EMITBUF(s, l)						\
+	do {							\
+		int __ret;					\
+		if (sb) strbuf_add(sb, (s), (l));		\
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\
+		count += (l);					\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#4840: FILE: tools/perf/util/quote.c:206:
+#define EMITBUF(s, l)						\
+	do {							\
+		int __ret;					\
+		if (sb) strbuf_add(sb, (s), (l));		\
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\
+		count += (l);					\
 	} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4843: FILE: tools/perf/util/quote.c:209:
+		if (sb) strbuf_add(sb, (s), (l));		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4844: FILE: tools/perf/util/quote.c:210:
+		if (fp) __ret = fwrite((s), (l), 1, fp);	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4882: FILE: tools/perf/util/quote.h:56:
+extern void write_name_quotedpfx(const char *pfx, ssize_t pfxlen,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'FILE *' should also have an identifier name
#4882: FILE: tools/perf/util/quote.h:56:
+extern void write_name_quotedpfx(const char *pfx, ssize_t pfxlen,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5520: FILE: tools/perf/util/strbuf.h:53:
+extern void strbuf_init(struct strbuf *buf, ssize_t hint);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#5529: FILE: tools/perf/util/strbuf.h:64:
+static inline ssize_t strbuf_avail(const struct strbuf *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5540: FILE: tools/perf/util/strbuf.h:125:
+extern ssize_t strbuf_read(struct strbuf *, int fd, ssize_t hint);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct strbuf *' should also have an identifier name
#5540: FILE: tools/perf/util/strbuf.h:125:
+extern ssize_t strbuf_read(struct strbuf *, int fd, ssize_t hint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5541: FILE: tools/perf/util/strbuf.h:126:
+extern int strbuf_read_file(struct strbuf *sb, const char *path, ssize_t hint);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5542: FILE: tools/perf/util/strbuf.h:127:
+extern int strbuf_readlink(struct strbuf *sb, const char *path, ssize_t hint);

CHECK:BRACES: Unbalanced braces around else statement
#5599: FILE: tools/perf/util/symbol.c:196:
+		else {

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#5619: FILE: tools/perf/util/symbol.c:317:
+static inline int elf_sym__is_label(const GElf_Sym *sym)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#5627: FILE: tools/perf/util/symbol.c:325:
+static inline const char *elf_sec__name(const GElf_Shdr *shdr,

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#5628: FILE: tools/perf/util/symbol.c:326:
+					const Elf_Data *secstrs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5634: FILE: tools/perf/util/symbol.c:332:
+static inline int elf_sec__is_text(const GElf_Shdr *shdr,
+					const Elf_Data *secstrs)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#5636: FILE: tools/perf/util/symbol.c:334:
+	return strstr(elf_sec__name(shdr, secstrs), "text") != NULL;

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Scn>
#5659: FILE: tools/perf/util/symbol.c:488:
+	Elf_Scn *sec, *sec_dynsym, *sec_strndx;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec_strndx"
#5668: FILE: tools/perf/util/symbol.c:548:
+	if (sec_strndx == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symstrs"
#5672: FILE: tools/perf/util/symbol.c:552:
+	if (symstrs == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5683: FILE: tools/perf/util/symbol.c:560:
+				elf_section_by_name(elf, &ehdr, &shdr,
+						     ".gnu.prelink_undo",

CHECK:BRACES: braces {} should be used on all arms of this statement
#5719: FILE: tools/perf/util/symbol.c:594:
+			if (section)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5721: FILE: tools/perf/util/symbol.c:596:
+			else {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dso__load_sym', this function's name, in a string
#5722: FILE: tools/perf/util/symbol.c:597:
+				fprintf(stderr, "dso__load_sym() module %s lookup of %s failed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5762: FILE: tools/perf/util/symbol.c:677:
+static int dso__load_module(struct dso *self, struct mod_dso *mods, const char *name,
+			     symbol_filter_t filter, int verbose)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mod"
#5767: FILE: tools/perf/util/symbol.c:682:
+	if (mod == NULL || !mod->active)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5818: FILE: tools/perf/util/symbol.c:733:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5820: FILE: tools/perf/util/symbol.c:735:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5820: FILE: tools/perf/util/symbol.c:735:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5820: FILE: tools/perf/util/symbol.c:735:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5820: FILE: tools/perf/util/symbol.c:735:
+	for (nd = rb_last(&self->syms); nd; nd = rb_prev(nd)) {
 	                                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#5821: FILE: tools/perf/util/symbol.c:736:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 67 warnings, 82 checks, 4148 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098049.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
