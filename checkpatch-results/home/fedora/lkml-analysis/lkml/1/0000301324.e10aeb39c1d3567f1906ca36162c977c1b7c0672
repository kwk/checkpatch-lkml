WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/clklib.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACING: Unnecessary space before function pointer arguments
#86: FILE: include/linux/clklib.h:29:
+	int (*set_mode) (struct clk *clk, bool enable);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#87: FILE: include/linux/clklib.h:30:
+	unsigned long (*get_rate) (struct clk *clk);

WARNING:SPACING: Unnecessary space before function pointer arguments
#88: FILE: include/linux/clklib.h:31:
+	int (*set_rate)  (struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#88: FILE: include/linux/clklib.h:31:
+	int (*set_rate)  (struct clk *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#88: FILE: include/linux/clklib.h:31:
+	int (*set_rate)  (struct clk *, unsigned long);

WARNING:SPACING: Unnecessary space before function pointer arguments
#89: FILE: include/linux/clklib.h:32:
+	long (*round_rate) (struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clk *' should also have an identifier name
#89: FILE: include/linux/clklib.h:32:
+	long (*round_rate) (struct clk *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#89: FILE: include/linux/clklib.h:32:
+	long (*round_rate) (struct clk *, unsigned long);

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: include/linux/clklib.h:60:
+	int i;
+	for (i = num - 1; i >= 0;  i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#117: FILE: include/linux/clklib.h:60:
+	for (i = num - 1; i >= 0;  i++) {
+		clk_unregister(clks[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: include/linux/clklib.h:69:
+	int ret;
+	for (i = 0; i < num; i++) {

ERROR:SPACING: space required one side of that '--' (ctx:WxW)
#137: FILE: include/linux/clklib.h:80:
+	for (i -- ; i >= 0; i--) {
 	       ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#137: FILE: include/linux/clklib.h:80:
+	for (i -- ; i >= 0; i--) {
+		clk_unregister(clks[i]);
+	}

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#166: FILE: include/linux/clklib.h:109:
+			.name= _function,		\
 			     ^

CHECK:SPACING: No space is necessary after a cast
#171: FILE: include/linux/clklib.h:114:
+#define FUNC_TO_CLK(func)	&(&(struct clk_function) func)->clk

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#171: FILE: include/linux/clklib.h:114:
+#define FUNC_TO_CLK(func)	&(&(struct clk_function) func)->clk

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#173: FILE: include/linux/clklib.h:116:
+static void __maybe_unused clk_free_functions(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#179: FILE: include/linux/clklib.h:122:
+	for (i = num - 1; i >= 0; i--) {
+		clk_unregister(&funcs[i].clk);
+	}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#184: FILE: include/linux/clklib.h:127:
+static int __must_check __maybe_unused clk_alloc_functions(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#195: FILE: include/linux/clklib.h:138:
+			printk(KERN_ERR "Error allocating %s.%s function.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: include/linux/clklib.h:139:
+			printk(KERN_ERR "Error allocating %s.%s function.\n",
+					funcs[i].parent,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#243: FILE: kernel/clklib.c:1:
+#include <linux/kernel.h>

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#360: FILE: kernel/clklib.c:118:
+	struct clk* parent;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#371: FILE: kernel/clklib.c:129:
+
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#414: FILE: kernel/clklib.c:172:
+	if (clk->users++ != 0) {
+		return 0;
+	}

CHECK:BRACES: braces {} should be used on all arms of this statement
#454: FILE: kernel/clklib.c:212:
+		if (clk->ops && clk->ops->get_rate) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#457: FILE: kernel/clklib.c:215:
+			break;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#457: FILE: kernel/clklib.c:215:
+		} else

WARNING:BRACES: braces {} are not necessary for single statement blocks
#561: FILE: kernel/clklib.c:319:
+	if (rc) {
+		kfree(clk);
+	}

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000301324.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 20 warnings, 7 checks, 495 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000301324.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
