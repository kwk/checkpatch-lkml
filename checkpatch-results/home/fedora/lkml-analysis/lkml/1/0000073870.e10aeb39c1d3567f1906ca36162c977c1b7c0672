WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#383: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#388: FILE: include/linux/logging.h:1:
+#ifndef _LINUX_LOGGING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#467: FILE: include/linux/logging.h:80:
+	__attribute__ ((format (printf, 1, 0)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#468: FILE: include/linux/logging.h:81:
+asmlinkage int printk(const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#469: FILE: include/linux/logging.h:82:
+	__attribute__ ((format (printf, 1, 2))) __cold;

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#472: FILE: include/linux/logging.h:85:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#472: FILE: include/linux/logging.h:85:
+extern int printk_ratelimit(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: include/linux/logging.h:86:
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#485: FILE: include/linux/logging.h:98:
+		printk(fmt, ##__VA_ARGS__);	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#494: FILE: include/linux/logging.h:107:
+	__attribute__ ((format (printf, 1, 0)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#496: FILE: include/linux/logging.h:109:
+static inline int printk(const char *s, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#497: FILE: include/linux/logging.h:110:
+	__attribute__ ((format (printf, 1, 2)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: include/linux/logging.h:111:
+static inline int __cold printk(const char *s, ...) { return 0; }

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#499: FILE: include/linux/logging.h:112:
+static inline int printk_ratelimit(void) { return 0; }

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#507: FILE: include/linux/logging.h:120:
+#define printk_once(fmt, ...) printk(fmt, ##__VA_ARGS__)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: include/linux/logging.h:128:
+extern int printk_needs_cpu(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#516: FILE: include/linux/logging.h:129:
+extern void printk_tick(void);

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#518: FILE: include/linux/logging.h:131:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#518: FILE: include/linux/logging.h:131:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#521: FILE: include/linux/logging.h:134:
+extern const char *print_tainted(void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#528: FILE: include/linux/logging.h:141:
+	printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#530: FILE: include/linux/logging.h:143:
+	printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#532: FILE: include/linux/logging.h:145:
+	printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#534: FILE: include/linux/logging.h:147:
+	printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#536: FILE: include/linux/logging.h:149:
+	printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#538: FILE: include/linux/logging.h:151:
+	printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#540: FILE: include/linux/logging.h:153:
+	printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#541: FILE: include/linux/logging.h:154:
+#define pr_cont(fmt, ...)				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#542: FILE: include/linux/logging.h:155:
+	printk(KERN_CONT fmt, ##__VA_ARGS__)

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#542: FILE: include/linux/logging.h:155:
+	printk(KERN_CONT fmt, ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#547: FILE: include/linux/logging.h:160:
+	printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#550: FILE: include/linux/logging.h:163:
+	({ if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); 0; })

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#556: FILE: include/linux/logging.h:169:
+	printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#559: FILE: include/linux/logging.h:172:
+#define pr_debug(fmt, ...)				\
+	do { dynamic_pr_debug(fmt, ##__VA_ARGS__); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#563: FILE: include/linux/logging.h:176:
+	({ if (0) printk(KERN_DEBUG pr_fmt(fmt), ##__VA_ARGS__); 0; })

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#598: FILE: include/linux/logging.h:211:
+extern void tracing_start(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/linux/logging.h:212:
+extern void tracing_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#600: FILE: include/linux/logging.h:213:
+extern void ftrace_off_permanent(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#605: FILE: include/linux/logging.h:218:
+static inline void __attribute__ ((format (printf, 1, 2)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#609: FILE: include/linux/logging.h:222:
+}
+#define __trace_printk_check_format(fmt, args...)			\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#632: FILE: include/linux/logging.h:245:
+#define trace_printk(fmt, args...)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#632: FILE: include/linux/logging.h:245:
+#define trace_printk(fmt, args...)					\
+do {									\
+	__trace_printk_check_format(fmt, ##args);			\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__trace_bprintk(_THIS_IP_, trace_printk_fmt, ##args);	\
+	} else								\
+		__trace_printk(_THIS_IP_, fmt, ##args);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#637: FILE: include/linux/logging.h:250:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#647: FILE: include/linux/logging.h:260:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#651: FILE: include/linux/logging.h:264:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#658: FILE: include/linux/logging.h:271:
+#define ftrace_vprintk(fmt, vargs)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#658: FILE: include/linux/logging.h:271:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vargs' - possible side-effects?
#658: FILE: include/linux/logging.h:271:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#662: FILE: include/linux/logging.h:275:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#676: FILE: include/linux/logging.h:289:
+extern void ftrace_dump(void);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#681: FILE: include/linux/logging.h:294:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#681: FILE: include/linux/logging.h:294:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#687: FILE: include/linux/logging.h:300:
+trace_printk(const char *fmt, ...)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#691: FILE: include/linux/logging.h:304:
+}
+static inline int

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#692: FILE: include/linux/logging.h:305:
+ftrace_vprintk(const char *fmt, va_list ap)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#696: FILE: include/linux/logging.h:309:
+}
+static inline void ftrace_dump(void) { }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 41 warnings, 15 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
