CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: arch/x86/kernel/process_32.c:638:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#137: FILE: arch/x86/kernel/ptrace_32.c:612:
data);

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: No space is necessary after a cast
#155: FILE: arch/x86/kernel/ptrace_32.c:630:
+			 (struct ptrace_bts_record __user *) addr);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#180: FILE: include/asm-x86/ptrace-abi.h:81:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#183: FILE: include/asm-x86/ptrace-abi.h:83:
+/* Allocate new bts buffer (free old one, if exists) of size DATA bts
+   parameter ADDR is ignored.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#187: FILE: include/asm-x86/ptrace-abi.h:87:
+   ENOMEM...out of memory */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#191: FILE: include/asm-x86/ptrace-abi.h:91:
+/* Return the size of the bts buffer in number of bts records,
+   if successful; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#192: FILE: include/asm-x86/ptrace-abi.h:92:
+   ENXIO....ptrace bts not initialized or no buffer allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#196: FILE: include/asm-x86/ptrace-abi.h:96:
+/* Return the index of the next bts record to be written,
+   if successful; -1, otherwise.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#199: FILE: include/asm-x86/ptrace-abi.h:98:
+   ENXIO....ptrace bts not initialized or no buffer allocated */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#204: FILE: include/asm-x86/ptrace-abi.h:102:
+/* Read the DATA'th bts record into a ptrace_bts_record buffer provided
+   Return 0, if successful; -1, otherwise

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#206: FILE: include/asm-x86/ptrace-abi.h:104:
+   EINVAL...invalid index */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: include/asm-x86/ptrace-abi.h:108:
+/* Configure last branch trace; the configuration is given as a
+   PTRACE_BTS_O_* options in DATA; parameter ADDR is ignored. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: include/asm-x86/ptrace-abi.h:108:
+   PTRACE_BTS_O_* options in DATA; parameter ADDR is ignored. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#233: FILE: include/asm-x86/ptrace.h:7:
 
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#257: FILE: include/asm-x86/ptrace.h:31:
+		/* PTRACE_BTS_TASK_ARRIVES or
+		   PTRACE_BTS_TASK_DEPARTS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#257: FILE: include/asm-x86/ptrace.h:31:
+		   PTRACE_BTS_TASK_DEPARTS */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: include/asm-x86/ptrace.h:43:
+extern __cpuinit void ptrace_bts_init_intel(struct cpuinfo_x86 *c);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/asm-x86/ptrace.h:44:
+extern void ptrace_bts_task_arrives(struct task_struct *tsk);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/asm-x86/ptrace.h:45:
+extern void ptrace_bts_task_departs(struct task_struct *tsk);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: arch/x86/kernel/ptrace_bts.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#306: FILE: arch/x86/kernel/ptrace_bts.c:15:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#313: FILE: arch/x86/kernel/ptrace_bts.c:22:
+
+

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#327: FILE: arch/x86/kernel/ptrace_bts.c:36:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: arch/x86/kernel/ptrace_bts.c:40:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: arch/x86/kernel/ptrace_bts.c:52:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: arch/x86/kernel/ptrace_bts.c:65:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#377: FILE: arch/x86/kernel/ptrace_bts.c:86:
+#ifdef __i386__

WARNING:LINE_SPACING: Missing a blank line after declarations
#381: FILE: arch/x86/kernel/ptrace_bts.c:90:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#393: FILE: arch/x86/kernel/ptrace_bts.c:102:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: arch/x86/kernel/ptrace_bts.c:115:
+	unsigned long long debugctl_msr = 0;
+	rdmsrl(MSR_IA32_DEBUGCTLMSR, debugctl_msr);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#432: FILE: arch/x86/kernel/ptrace_bts.c:141:
+#ifdef __i386__

WARNING:LINE_SPACING: Missing a blank line after declarations
#472: FILE: arch/x86/kernel/ptrace_bts.c:181:
+		int err = ptrace_bts_allocate_ds(child);
+		if (err < 0)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#487: FILE: arch/x86/kernel/ptrace_bts.c:196:
+#ifdef __i386__

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#542: FILE: arch/x86/kernel/ptrace_bts.c:250:
+ * Return -Eerrno, if an error occured
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#554: FILE: arch/x86/kernel/ptrace_bts.c:262:
+#ifdef __i386__

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#582: FILE: arch/x86/kernel/ptrace_bts.c:289:
+ * Returns -Eerrno, if an error occured.
                                 ^^^^^^^

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#594: FILE: arch/x86/kernel/ptrace_bts.c:301:
+#ifdef __i386__

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#647: FILE: arch/x86/kernel/ptrace_bts.c:352:
+#ifdef __i386__

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#653: FILE: arch/x86/kernel/ptrace_bts.c:357:
+	struct ptrace_bts_ds_32 *ds = (

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#683: FILE: arch/x86/kernel/ptrace_bts.c:386:
+					     struct ptrace_bts_record
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#724: FILE: arch/x86/kernel/ptrace_bts.c:426:
+	if (ptrace_bts_get_buffer_size(child) <= 0)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#732: FILE: arch/x86/kernel/ptrace_bts.c:434:
+#ifdef __i386__

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#735: FILE: arch/x86/kernel/ptrace_bts.c:436:
+static int ptrace_bts_write_record_32(struct task_struct *child,
*in)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#762: FILE: arch/x86/kernel/ptrace_bts.c:463:
+			(struct ptrace_bts_32 *)&record;;

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#815: FILE: arch/x86/kernel/ptrace_bts.c:514:
+			(struct ptrace_bts_64_noflags *)&record;;

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#941: FILE: arch/x86/kernel/ptrace_bts.c:640:
+#ifdef __i386__

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#985: FILE: arch/x86/kernel/ptrace_bts.c:684:
+#ifdef __i386__

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#1001: FILE: arch/x86/kernel/ptrace_bts.c:700:
+#ifdef __i386__

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1025: FILE: include/asm-x86/ptrace_bts.h:1:
+/*

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1103: FILE: include/asm-x86/ptrace_bts.h:78:
+	u32 : 4;
 	    ^

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1105: FILE: include/asm-x86/ptrace_bts.h:80:
+	u32 : 27;
 	    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1106: FILE: include/asm-x86/ptrace_bts.h:81:
+} __attribute__((packed, aligned(4)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#1106: FILE: include/asm-x86/ptrace_bts.h:81:
+} __attribute__((packed, aligned(4)));

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1112: FILE: include/asm-x86/ptrace_bts.h:87:
+	u64 : 64;
 	    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1120: FILE: include/asm-x86/ptrace_bts.h:95:
+#define PTRACE_BTS_ESCAPE_ADDRESS (__u64)(0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1129: FILE: include/asm-x86/ptrace_bts.h:103:
+} __attribute__((packed, aligned(4)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((aligned(4)))
#1129: FILE: include/asm-x86/ptrace_bts.h:103:
+} __attribute__((packed, aligned(4)));

ERROR:SPACING: space prohibited before that ':' (ctx:WxW)
#1137: FILE: include/asm-x86/ptrace_bts.h:110:
+	u64 : 64;
 	    ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1138: FILE: include/asm-x86/ptrace_bts.h:111:
+} __attribute__((packed, aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1138: FILE: include/asm-x86/ptrace_bts.h:111:
+} __attribute__((packed, aligned(8)));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1152: FILE: include/asm-x86/ptrace_bts.h:123:
+	int (*allocate_ds)(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1153: FILE: include/asm-x86/ptrace_bts.h:124:
+	int (*allocate_bts)(struct task_struct *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#1153: FILE: include/asm-x86/ptrace_bts.h:124:
+	int (*allocate_bts)(struct task_struct *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1154: FILE: include/asm-x86/ptrace_bts.h:125:
+	int (*get_buffer_size)(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1155: FILE: include/asm-x86/ptrace_bts.h:126:
+	int (*get_index)(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1156: FILE: include/asm-x86/ptrace_bts.h:127:
+	int (*read_record)(struct task_struct *, long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#1156: FILE: include/asm-x86/ptrace_bts.h:127:
+	int (*read_record)(struct task_struct *, long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ptrace_bts_record __user *' should also have an identifier name
#1156: FILE: include/asm-x86/ptrace_bts.h:127:
+	int (*read_record)(struct task_struct *, long,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1158: FILE: include/asm-x86/ptrace_bts.h:129:
+	int (*write_record)(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct ptrace_bts_record*' should also have an identifier name
#1158: FILE: include/asm-x86/ptrace_bts.h:129:
+	int (*write_record)(struct task_struct *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1162: FILE: include/asm-x86/ptrace_bts.h:133:
+extern int ptrace_bts_allocate_bts(struct task_struct *child,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1164: FILE: include/asm-x86/ptrace_bts.h:135:
+extern int ptrace_bts_get_buffer_size(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1165: FILE: include/asm-x86/ptrace_bts.h:136:
+extern int ptrace_bts_get_index(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1166: FILE: include/asm-x86/ptrace_bts.h:137:
+extern int ptrace_bts_read_record(struct task_struct *child,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1169: FILE: include/asm-x86/ptrace_bts.h:140:
+extern void ptrace_bts_config(struct task_struct *child,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1171: FILE: include/asm-x86/ptrace_bts.h:142:
+extern unsigned long ptrace_bts_status(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1172: FILE: include/asm-x86/ptrace_bts.h:143:
+extern void ptrace_bts_task_detached(struct task_struct *tsk);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1209: FILE: include/asm-x86/thread_info_32.h:142:
+#define TIF_BTS_TRACE           24      /* record branches for this
+#define TIF_BTS_TRACE_TS        25      /* record scheduling event

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1218: FILE: include/asm-x86/thread_info_32.h:157:
+#define _TIF_BTS_TRACE		(1<<TIF_BTS_TRACE)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1218: FILE: include/asm-x86/thread_info_32.h:157:
+#define _TIF_BTS_TRACE		(1<<TIF_BTS_TRACE)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1219: FILE: include/asm-x86/thread_info_32.h:158:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1219: FILE: include/asm-x86/thread_info_32.h:158:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1230: FILE: include/asm-x86/thread_info_32.h:169:
+  (_TIF_IO_BITMAP | _TIF_NOTSC | _TIF_DEBUG | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1231: FILE: include/asm-x86/thread_info_32.h:170:
+   _TIF_BTS_TRACE | _TIF_BTS_TRACE_TS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1233: FILE: include/asm-x86/thread_info_32.h:172:
+  (_TIF_IO_BITMAP | _TIF_NOTSC | _TIF_BTS_TRACE | _TIF_BTS_TRACE_TS)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1248: FILE: include/asm-x86/processor_32.h:357:
+ *               goes into MSR_IA32_DS_AREA */

CHECK:SPACING: No space is necessary after a cast
#1351: FILE: arch/x86/kernel/ptrace_64.c:575:
+			 (struct ptrace_bts_record __user *) addr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1377: FILE: include/asm-x86/processor_64.h:227:
+ *               goes into MSR_IA32_DS_AREA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1394: FILE: include/asm-x86/thread_info_64.h:127:
+#define TIF_BTS_TRACE           24      /* record branches for this
+#define TIF_BTS_TRACE_TS        25      /* record scheduling event

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1403: FILE: include/asm-x86/thread_info_64.h:144:
+#define _TIF_BTS_TRACE		(1<<TIF_BTS_TRACE)
                       		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1403: FILE: include/asm-x86/thread_info_64.h:144:
+#define _TIF_BTS_TRACE		(1<<TIF_BTS_TRACE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1404: FILE: include/asm-x86/thread_info_64.h:145:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1404: FILE: include/asm-x86/thread_info_64.h:145:
+#define _TIF_BTS_TRACE_TS	(1<<TIF_BTS_TRACE_TS)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1414: FILE: include/asm-x86/thread_info_64.h:155:
+  (_TIF_DEBUG|_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1414: FILE: include/asm-x86/thread_info_64.h:155:
+  (_TIF_DEBUG|_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)
              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1414: FILE: include/asm-x86/thread_info_64.h:155:
+  (_TIF_DEBUG|_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)
                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1414: FILE: include/asm-x86/thread_info_64.h:155:
+  (_TIF_DEBUG|_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)
                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1416: FILE: include/asm-x86/thread_info_64.h:157:
+  (_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1416: FILE: include/asm-x86/thread_info_64.h:157:
+  (_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)
                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1416: FILE: include/asm-x86/thread_info_64.h:157:
+  (_TIF_IO_BITMAP|_TIF_BTS_TRACE|_TIF_BTS_TRACE_TS)
                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1463: FILE: arch/x86/kernel/setup_64.c:799:
 
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 50 warnings, 45 checks, 1260 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
