CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: fs/hostfs/hostfs.h:81:
+extern int do_mknod(const char *file, int mode, unsigned int major,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#105: FILE: fs/hostfs/hostfs_kern.c:58:
+	if (ptr != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ptr"
#116: FILE: fs/hostfs/hostfs_kern.c:66:
+		if (ptr != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#139: FILE: fs/hostfs/hostfs_kern.c:107:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#177: FILE: fs/hostfs/hostfs_kern.c:167:
+		if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!end"
#197: FILE: fs/hostfs/hostfs_kern.c:183:
+	if (end == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!resolved"
#205: FILE: fs/hostfs/hostfs_kern.c:190:
+	if (resolved == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#225: FILE: fs/hostfs/hostfs_kern.c:220:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hi"
#260: FILE: fs/hostfs/hostfs_kern.c:271:
+	if (hi == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#293: FILE: fs/hostfs/hostfs_kern.c:329:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#298: FILE: fs/hostfs/hostfs_kern.c:333:
+	if (dir == NULL)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#306: FILE: fs/hostfs/hostfs_kern.c:339:
+		if (error) break;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#342: FILE: fs/hostfs/hostfs_kern.c:373:
+	if (name == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#386: FILE: fs/hostfs/hostfs_kern.c:526:
+	if (dentry) {
[...]
 		kfree(name);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#389: FILE: fs/hostfs/hostfs_kern.c:528:
+		if (name == NULL)

WARNING:TYPO_SPELLING: 'Reencode' may be misspelled - perhaps 'Re-encode'?
#393: FILE: fs/hostfs/hostfs_kern.c:531:
+		/* Reencode maj and min with the kernel encoding.*/
 		   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#409: FILE: fs/hostfs/hostfs_kern.c:544:
+	if (type == OS_TYPE_DIR) inode->i_fop = &hostfs_dir_fops;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#422: FILE: fs/hostfs/hostfs_kern.c:570:
+		  struct nameidata *nd)
 		                    ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#431: FILE: fs/hostfs/hostfs_kern.c:578:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#442: FILE: fs/hostfs/hostfs_kern.c:587:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#465: FILE: fs/hostfs/hostfs_kern.c:622:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#476: FILE: fs/hostfs/hostfs_kern.c:631:
+	if (name == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#482: FILE: fs/hostfs/hostfs_kern.c:636:
+	if (err == -ENOENT) {
[...]
-	else if(err)
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#487: FILE: fs/hostfs/hostfs_kern.c:640:
 	}
+	else if (err)

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#496: FILE: fs/hostfs/hostfs_kern.c:659:
+	if (file == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#505: FILE: fs/hostfs/hostfs_kern.c:673:
+	if ((from_name = inode_dentry_name(ino, from)) == NULL)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to_name"
#509: FILE: fs/hostfs/hostfs_kern.c:676:
+	if (to_name == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#518: FILE: fs/hostfs/hostfs_kern.c:691:
+	if ((file = inode_dentry_name(ino, dentry)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#530: FILE: fs/hostfs/hostfs_kern.c:706:
+	if ((file = inode_dentry_name(ino, dentry)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#539: FILE: fs/hostfs/hostfs_kern.c:718:
+	if ((file = inode_dentry_name(ino, dentry)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#548: FILE: fs/hostfs/hostfs_kern.c:730:
+	if ((file = inode_dentry_name(ino, dentry)) == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#557: FILE: fs/hostfs/hostfs_kern.c:744:
+	if (inode == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#568: FILE: fs/hostfs/hostfs_kern.c:753:
+	if (name == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#589: FILE: fs/hostfs/hostfs_kern.c:783:
+	if ((from_name = inode_dentry_name(from_ino, from)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#592: FILE: fs/hostfs/hostfs_kern.c:785:
+	if ((to_name = inode_dentry_name(to_ino, to)) == NULL) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#656: FILE: fs/hostfs/hostfs_kern.c:862:
+	if (attr->ia_valid & ATTR_ATIME_SET) {
 		attrs.ia_valid |= HOSTFS_ATTR_ATIME_SET;
 	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#660: FILE: fs/hostfs/hostfs_kern.c:865:
+	if (attr->ia_valid & ATTR_MTIME_SET) {
 		attrs.ia_valid |= HOSTFS_ATTR_MTIME_SET;
 	}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#665: FILE: fs/hostfs/hostfs_kern.c:869:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#679: FILE: fs/hostfs/hostfs_kern.c:913:
+	if (name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host_root_path"
#696: FILE: fs/hostfs/hostfs_kern.c:952:
+	if (host_root_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!root_inode"
#703: FILE: fs/hostfs/hostfs_kern.c:958:
+	if (root_inode == NULL)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#715: FILE: fs/hostfs/hostfs_kern.c:967:
+	 * Avoid that in the error path, iput(root_inode) frees again
 	                                 ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_root"
#723: FILE: fs/hostfs/hostfs_kern.c:974:
+	if (sb->s_root == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "inode_out"
#782: FILE: fs/hostfs/hostfs_user.c:37:
+	if (inode_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mode_out"
#784: FILE: fs/hostfs/hostfs_user.c:39:
+	if (mode_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nlink_out"
#786: FILE: fs/hostfs/hostfs_user.c:41:
+	if (nlink_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "uid_out"
#788: FILE: fs/hostfs/hostfs_user.c:43:
+	if (uid_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gid_out"
#790: FILE: fs/hostfs/hostfs_user.c:45:
+	if (gid_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "size_out"
#792: FILE: fs/hostfs/hostfs_user.c:47:
+	if (size_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "atime_out"
#794: FILE: fs/hostfs/hostfs_user.c:49:
+	if (atime_out != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mtime_out"
#799: FILE: fs/hostfs/hostfs_user.c:53:
+	if (mtime_out != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctime_out"
#804: FILE: fs/hostfs/hostfs_user.c:57:
+	if (ctime_out != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "blksize_out"
#810: FILE: fs/hostfs/hostfs_user.c:61:
+	if (blksize_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "blocks_out"
#812: FILE: fs/hostfs/hostfs_user.c:63:
+	if (blocks_out != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "maj"
#831: FILE: fs/hostfs/hostfs_user.c:78:
+	if (maj != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "min"
#834: FILE: fs/hostfs/hostfs_user.c:80:
+	if (min != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#905: FILE: fs/hostfs/hostfs_user.c:139:
+	if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#914: FILE: fs/hostfs/hostfs_user.c:152:
+	if (ent == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 43 checks, 966 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389585.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
