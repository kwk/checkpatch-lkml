ERROR:SPACING: space required after that ';' (ctx:VxV)
#103: FILE: arch/x86/include/asm/system.h:189:
+#define get_user_gs(regs)	(u16)({unsigned long v; savesegment(gs, v); v;})
                          	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: arch/x86/include/asm/system.h:189:
+#define get_user_gs(regs)	(u16)({unsigned long v; savesegment(gs, v); v;})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#187: FILE: arch/x86/kernel/signal.c:53:
+#define COPY(x)			do {			\
+	get_user_ex(regs->x, &sc->x);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#187: FILE: arch/x86/kernel/signal.c:53:
+#define COPY(x)			do {			\
+	get_user_ex(regs->x, &sc->x);			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#187: FILE: arch/x86/kernel/signal.c:53:
+#define COPY(x)			do {			\
+	get_user_ex(regs->x, &sc->x);			\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#196: FILE: arch/x86/kernel/signal.c:57:
+#define GET_SEG(seg)		({			\
+	unsigned short tmp;				\
+	get_user_ex(tmp, &sc->seg);			\
+	tmp;						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#207: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG(seg)		do {			\
+	regs->seg = GET_SEG(seg);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#207: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG(seg)		do {			\
+	regs->seg = GET_SEG(seg);			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#207: FILE: arch/x86/kernel/signal.c:63:
+#define COPY_SEG(seg)		do {			\
+	regs->seg = GET_SEG(seg);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'seg' - possible side-effects?
#216: FILE: arch/x86/kernel/signal.c:67:
+#define COPY_SEG_CPL3(seg)	do {			\
+	regs->seg = GET_SEG(seg) | 3;			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'seg' may be better as '(seg)' to avoid precedence issues
#216: FILE: arch/x86/kernel/signal.c:67:
+#define COPY_SEG_CPL3(seg)	do {			\
+	regs->seg = GET_SEG(seg) | 3;			\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#216: FILE: arch/x86/kernel/signal.c:67:
+#define COPY_SEG_CPL3(seg)	do {			\
+	regs->seg = GET_SEG(seg) | 3;			\
+} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169676.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 7 checks, 182 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169676.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
