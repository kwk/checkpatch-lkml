WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
module entry and exit functions and the debugging stuff used by these patches.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#144: FILE: fs/fscache/fsc-internal.h:1:
+/* Internal definitions for FS-Cache

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#176: FILE: fs/fscache/fsc-internal.h:33:
+extern unsigned fscache_defer_lookup;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#177: FILE: fs/fscache/fsc-internal.h:34:
+extern unsigned fscache_defer_create;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#178: FILE: fs/fscache/fsc-internal.h:35:
+extern unsigned fscache_debug;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#186: FILE: fs/fscache/fsc-internal.h:43:
+	printk(KERN_DEBUG "[%-6.6s] "FMT"\n", current->comm, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#186: FILE: fs/fscache/fsc-internal.h:43:
+	printk(KERN_DEBUG "[%-6.6s] "FMT"\n", current->comm, ##__VA_ARGS__)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#189: FILE: fs/fscache/fsc-internal.h:46:
+static inline __attribute__((format(printf, 1, 2)))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#194: FILE: fs/fscache/fsc-internal.h:51:
+#define kenter(FMT, ...) dbgprintk("==> %s("FMT")", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#195: FILE: fs/fscache/fsc-internal.h:52:
+#define kleave(FMT, ...) dbgprintk("<== %s()"FMT"", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#225: FILE: fs/fscache/fsc-internal.h:82:
+#define _enter(FMT, ...) _dbprintk("==> %s("FMT")", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#226: FILE: fs/fscache/fsc-internal.h:83:
+#define _leave(FMT, ...) _dbprintk("<== %s()"FMT"", __func__, ##__VA_ARGS__)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#259: FILE: fs/fscache/fsc-internal.h:116:
+#if 1 /* defined(__KDEBUGALL) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#264: FILE: fs/fscache/fsc-internal.h:121:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#265: FILE: fs/fscache/fsc-internal.h:122:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#266: FILE: fs/fscache/fsc-internal.h:123:
+		BUG();							\

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#270: FILE: fs/fscache/fsc-internal.h:127:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#270: FILE: fs/fscache/fsc-internal.h:127:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#272: FILE: fs/fscache/fsc-internal.h:129:
+	if (unlikely(!((X) OP (Y)))) {					\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#273: FILE: fs/fscache/fsc-internal.h:130:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#274: FILE: fs/fscache/fsc-internal.h:131:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#275: FILE: fs/fscache/fsc-internal.h:132:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#277: FILE: fs/fscache/fsc-internal.h:134:
+		BUG();							\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#284: FILE: fs/fscache/fsc-internal.h:141:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#285: FILE: fs/fscache/fsc-internal.h:142:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#286: FILE: fs/fscache/fsc-internal.h:143:
+		BUG();							\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#290: FILE: fs/fscache/fsc-internal.h:147:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#290: FILE: fs/fscache/fsc-internal.h:147:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#292: FILE: fs/fscache/fsc-internal.h:149:
+	if (unlikely((C) && !((X) OP (Y)))) {				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#293: FILE: fs/fscache/fsc-internal.h:150:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#294: FILE: fs/fscache/fsc-internal.h:151:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#295: FILE: fs/fscache/fsc-internal.h:152:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: fs/fscache/fsc-internal.h:154:
+		BUG();							\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#326: FILE: fs/fscache/fsc-main.c:1:
+/* General filesystem local caching manager

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#349: FILE: fs/fscache/fsc-main.c:24:
+unsigned fscache_defer_lookup = 1;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#351: FILE: fs/fscache/fsc-main.c:26:
+		   S_IWUSR | S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#355: FILE: fs/fscache/fsc-main.c:30:
+unsigned fscache_defer_create = 1;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#357: FILE: fs/fscache/fsc-main.c:32:
+		   S_IWUSR | S_IRUGO);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#361: FILE: fs/fscache/fsc-main.c:36:
+unsigned fscache_debug;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#363: FILE: fs/fscache/fsc-main.c:38:
+		   S_IWUSR | S_IRUGO);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#380: FILE: fs/fscache/fsc-main.c:55:
+	printk(KERN_NOTICE "FS-Cache: Loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#397: FILE: fs/fscache/fsc-main.c:72:
+	printk(KERN_NOTICE "FS-Cache: Unloaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201687.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 34 warnings, 9 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201687.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
