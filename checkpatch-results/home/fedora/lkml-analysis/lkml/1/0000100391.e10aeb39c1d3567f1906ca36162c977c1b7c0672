WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:1:
+/*****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#84: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:2:
+/*****************************************************************************
+* Copyright 2009 Broadcom Corporation.  All rights reserved.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#102: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:20:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:21:
+       CAP_NOT_PRESENT = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:22:
+       CAP_PRESENT$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#107: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:25:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:26:
+       CAP_VPM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:27:
+       CAP_ETH_PHY,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#110: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:28:
+       CAP_ETH_GMII,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#111: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:29:
+       CAP_ETH_SGMII,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#112: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:30:
+       CAP_USB,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:31:
+       CAP_TSC,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:32:
+       CAP_EHSS,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:33:
+       CAP_SDIO,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:34:
+       CAP_UARTB,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:35:
+       CAP_KEYPAD,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:36:
+       CAP_CLCD,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#119: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:37:
+       CAP_GE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:38:
+       CAP_LEDM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:39:
+       CAP_BBL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:40:
+       CAP_VDEC,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:41:
+       CAP_PIF,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:42:
+       CAP_APM,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:43:
+       CAP_SPU,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:44:
+       CAP_PKA,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:45:
+       CAP_RNG,$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#130: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:48:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:49:
+       CAP_LCD_WVGA = 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:50:
+       CAP_LCD_VGA = 0x1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:51:
+       CAP_LCD_WQVGA = 0x2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:52:
+       CAP_LCD_QVGA = 0x3$

CHECK:CAMELCASE: Avoid CamelCase: <cap_isPresent>
#140: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:58:
+static inline CAP_RC_T cap_isPresent(CAP_CAPABILITY_T capability, int index);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <cap_getMaxArmSpeedHz>
#141: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:59:
+static inline uint32_t cap_getMaxArmSpeedHz(void);

CHECK:CAMELCASE: Avoid CamelCase: <cap_getMaxVpmSpeedHz>
#142: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:60:
+static inline uint32_t cap_getMaxVpmSpeedHz(void);

CHECK:CAMELCASE: Avoid CamelCase: <cap_getMaxLcdRes>
#143: FILE: arch/arm/mach-bcmring/include/mach/csp/cap.h:61:
+static inline CAP_LCD_RES_T cap_getMaxLcdRes(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#153: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:2:
+/*****************************************************************************
+* Copyright 2009 Broadcom Corporation.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <capConfig0>
#214: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:63:
+#define capConfig0 0

CHECK:CAMELCASE: Avoid CamelCase: <capConfig1>
#215: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:64:
+#define capConfig1 CAP_CONFIG1_CLCD_RES_WVGA

CHECK:CAMELCASE: Avoid CamelCase: <capConfig2>
#216: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:65:
+#define capConfig2 0

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#224: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:73:
+#define capConfig0 (CAP_CONFIG0_USB1_DIS | CAP_CONFIG0_EHSS1_DIS | CAP_CONFIG0_SDIO1_DIS | CAP_CONFIG0_GE_DIS | CAP_CONFIG0_BBL_DIS | CAP_CONFIG0_VDEC_DIS)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 327 exceeds 100 columns
#229: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:78:
+#define capConfig0 (CAP_CONFIG0_ETH_GMII0_DIS | CAP_CONFIG0_ETH_GMII1_DIS | CAP_CONFIG0_USB0_DIS | CAP_CONFIG0_USB1_DIS | CAP_CONFIG0_TSC_DIS | CAP_CONFIG0_EHSS1_DIS | CAP_CONFIG0_SDIO0_DIS | CAP_CONFIG0_SDIO1_DIS | CAP_CONFIG0_UARTB_DIS | CAP_CONFIG0_CLCD_DIS | CAP_CONFIG0_GE_DIS | CAP_CONFIG0_BBL_DIS | CAP_CONFIG0_VDEC_DIS)

WARNING:LONG_LINE: line length of 225 exceeds 100 columns
#234: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:83:
+#define capConfig0 (CAP_CONFIG0_USB1_DIS | CAP_CONFIG0_TSC_DIS | CAP_CONFIG0_EHSS1_DIS | CAP_CONFIG0_SDIO0_DIS | CAP_CONFIG0_SDIO1_DIS | CAP_CONFIG0_UARTB_DIS | CAP_CONFIG0_GE_DIS | CAP_CONFIG0_BBL_DIS | CAP_CONFIG0_VDEC_DIS)

WARNING:LONG_LINE: line length of 182 exceeds 100 columns
#239: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:88:
+#define capConfig0 (CAP_CONFIG0_ETH_PHY0_DIS | CAP_CONFIG0_ETH_GMII0_DIS | CAP_CONFIG0_ETH_GMII1_DIS | CAP_CONFIG0_ETH_SGMII0_DIS | CAP_CONFIG0_ETH_SGMII1_DIS | CAP_CONFIG0_CLCD_DIS)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#249: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:98:
+#elif ((CFG_GLOBAL_CHIP == BCM11109) || (CFG_GLOBAL_CHIP == BCM11170) || (CFG_GLOBAL_CHIP == BCM11110))

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#257: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:106:
+#if ((CFG_GLOBAL_CHIP == BCM11107) || (CFG_GLOBAL_CHIP == BCM11211) || (CFG_GLOBAL_CHIP == FPGA11107))

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#259: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:108:
+#elif ((CFG_GLOBAL_CHIP == BCM11109) || (CFG_GLOBAL_CHIP == BCM11170) || (CFG_GLOBAL_CHIP == BCM11110))

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#269: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:118:
+/****************************************************************************
+*  cap_isPresent -

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#282: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:131:
+       CAP_RC_T returnVal = CAP_NOT_PRESENT;$

CHECK:CAMELCASE: Avoid CamelCase: <returnVal>
#282: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:131:
+       CAP_RC_T returnVal = CAP_NOT_PRESENT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#284: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:133:
+       switch (capability) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:134:
+       case CAP_VPM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:135:
+               {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:135:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:136:
+                       if (!(capConfig0 & CAP_CONFIG0_VPM_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:136:
+                       if (!(capConfig0 & CAP_CONFIG0_VPM_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:136:
+                       if (!(capConfig0 & CAP_CONFIG0_VPM_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#287: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:136:
+                       if (!(capConfig0 & CAP_CONFIG0_VPM_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:137:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:137:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#289: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:138:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#289: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:138:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#290: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:139:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#290: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:139:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#291: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:140:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:140:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#293: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:142:
+       case CAP_ETH_PHY:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:143:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:143:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#295: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:144:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#295: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:144:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#295: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:144:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#295: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:144:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY0_DIS))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:145:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#296: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:145:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:145:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#297: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:146:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:146:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:147:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:147:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#299: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:148:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:148:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#299: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:148:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#299: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:148:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#300: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:149:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#300: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:149:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:149:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_PHY1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#301: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:150:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:150:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#302: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:151:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:151:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#303: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:152:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#303: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:152:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#304: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:153:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#304: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:153:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#306: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:155:
+       case CAP_ETH_GMII:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#307: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:156:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#307: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:156:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#308: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:157:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#308: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:157:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#308: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:157:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#308: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:157:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII0_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#309: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:158:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#309: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:158:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#309: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:158:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:159:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#310: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:159:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#311: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:160:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#311: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:160:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:161:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:161:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:161:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#312: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:161:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#313: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:162:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:162:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#313: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:162:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_GMII1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#314: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:163:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#314: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:163:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:164:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#315: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:164:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:165:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#316: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:165:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:166:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:166:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:168:
+       case CAP_ETH_SGMII:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:169:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:169:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:170:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:170:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:170:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#321: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:170:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII0_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:171:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#322: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:171:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#322: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:171:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:172:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#323: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:172:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:173:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#324: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:173:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:174:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:174:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#325: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:174:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#325: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:174:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:175:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#326: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:175:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:175:
+                           && (!(capConfig0 & CAP_CONFIG0_ETH_SGMII1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:176:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:176:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:177:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:177:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:178:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:178:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:179:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:179:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:181:
+       case CAP_USB:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#333: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:182:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:182:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#334: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:183:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:183:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#334: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:183:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#334: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:183:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_USB0_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#335: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:184:
+                           && (!(capConfig0 & CAP_CONFIG0_USB0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#335: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:184:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_USB0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:184:
+                           && (!(capConfig0 & CAP_CONFIG0_USB0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#336: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:185:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:185:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:186:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#337: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:186:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:187:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#338: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:187:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#338: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:187:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#338: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:187:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_USB1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:188:
+                           && (!(capConfig0 & CAP_CONFIG0_USB1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#339: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:188:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_USB1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:188:
+                           && (!(capConfig0 & CAP_CONFIG0_USB1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:189:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#340: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:189:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:190:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#341: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:190:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#342: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:191:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#342: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:191:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#343: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:192:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:192:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:194:
+       case CAP_TSC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#346: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:195:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:195:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:196:
+                       if (!(capConfig0 & CAP_CONFIG0_TSC_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:196:
+                       if (!(capConfig0 & CAP_CONFIG0_TSC_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#347: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:196:
+                       if (!(capConfig0 & CAP_CONFIG0_TSC_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#347: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:196:
+                       if (!(capConfig0 & CAP_CONFIG0_TSC_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#348: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:197:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#348: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:197:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#349: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:198:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#349: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:198:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:199:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#350: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:199:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:200:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:200:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#353: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:202:
+       case CAP_EHSS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:203:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:203:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:204:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:204:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#355: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:204:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#355: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:204:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS0_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:205:
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#356: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:205:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:205:
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#357: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:206:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:206:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#358: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:207:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:207:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:208:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:208:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#359: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:208:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#359: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:208:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:209:
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#360: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:209:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:209:
+                           && (!(capConfig0 & CAP_CONFIG0_EHSS1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:210:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:210:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:211:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:211:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:212:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:212:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#364: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:213:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:213:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#366: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:215:
+       case CAP_SDIO:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:216:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:216:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:217:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:217:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#368: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:217:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#368: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:217:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO0_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#369: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:218:
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO0_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#369: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:218:
+                       if ((index == 0)
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO0_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:218:
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO0_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:219:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:219:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:220:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:220:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:221:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:221:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#372: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:221:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#372: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:221:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO1_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:222:
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO1_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#373: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:222:
+                       if ((index == 1)
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO1_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:222:
+                           && (!(capConfig0 & CAP_CONFIG0_SDIO1_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:223:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:223:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:224:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:224:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#376: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:225:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:225:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#377: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:226:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:226:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:228:
+       case CAP_UARTB:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#380: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:229:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:229:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#381: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:230:
+                       if (!(capConfig0 & CAP_CONFIG0_UARTB_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:230:
+                       if (!(capConfig0 & CAP_CONFIG0_UARTB_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#381: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:230:
+                       if (!(capConfig0 & CAP_CONFIG0_UARTB_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:230:
+                       if (!(capConfig0 & CAP_CONFIG0_UARTB_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#382: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:231:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:231:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#383: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:232:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:232:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#384: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:233:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:233:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#385: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:234:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:234:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:236:
+       case CAP_KEYPAD:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#388: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:237:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#388: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:237:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:238:
+                       if (!(capConfig0 & CAP_CONFIG0_KEYPAD_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#389: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:238:
+                       if (!(capConfig0 & CAP_CONFIG0_KEYPAD_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#389: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:238:
+                       if (!(capConfig0 & CAP_CONFIG0_KEYPAD_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#389: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:238:
+                       if (!(capConfig0 & CAP_CONFIG0_KEYPAD_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:239:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#390: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:239:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:240:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:240:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#392: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:241:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#392: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:241:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#393: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:242:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:242:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#395: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:244:
+       case CAP_CLCD:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#396: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:245:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#396: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:245:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#397: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:246:
+                       if (!(capConfig0 & CAP_CONFIG0_CLCD_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#397: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:246:
+                       if (!(capConfig0 & CAP_CONFIG0_CLCD_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#397: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:246:
+                       if (!(capConfig0 & CAP_CONFIG0_CLCD_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#397: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:246:
+                       if (!(capConfig0 & CAP_CONFIG0_CLCD_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#398: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:247:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#398: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:247:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#399: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:248:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:248:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:249:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:249:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:250:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:250:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#403: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:252:
+       case CAP_GE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:253:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#404: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:253:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#405: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:254:
+                       if (!(capConfig0 & CAP_CONFIG0_GE_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:254:
+                       if (!(capConfig0 & CAP_CONFIG0_GE_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#405: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:254:
+                       if (!(capConfig0 & CAP_CONFIG0_GE_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#405: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:254:
+                       if (!(capConfig0 & CAP_CONFIG0_GE_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#406: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:255:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:255:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#407: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:256:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:256:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#408: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:257:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:257:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:258:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:258:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:260:
+       case CAP_LEDM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:261:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:261:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:262:
+                       if (!(capConfig0 & CAP_CONFIG0_LEDM_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#413: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:262:
+                       if (!(capConfig0 & CAP_CONFIG0_LEDM_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#413: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:262:
+                       if (!(capConfig0 & CAP_CONFIG0_LEDM_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#413: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:262:
+                       if (!(capConfig0 & CAP_CONFIG0_LEDM_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#414: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:263:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#414: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:263:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:264:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:264:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#416: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:265:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#416: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:265:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#417: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:266:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#417: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:266:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#419: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:268:
+       case CAP_BBL:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:269:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:269:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#421: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:270:
+                       if (!(capConfig0 & CAP_CONFIG0_BBL_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:270:
+                       if (!(capConfig0 & CAP_CONFIG0_BBL_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#421: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:270:
+                       if (!(capConfig0 & CAP_CONFIG0_BBL_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#421: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:270:
+                       if (!(capConfig0 & CAP_CONFIG0_BBL_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:271:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:271:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:272:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:272:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:273:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:273:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:274:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:274:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#427: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:276:
+       case CAP_VDEC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#428: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:277:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:277:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#429: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:278:
+                       if (!(capConfig0 & CAP_CONFIG0_VDEC_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#429: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:278:
+                       if (!(capConfig0 & CAP_CONFIG0_VDEC_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#429: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:278:
+                       if (!(capConfig0 & CAP_CONFIG0_VDEC_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#429: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:278:
+                       if (!(capConfig0 & CAP_CONFIG0_VDEC_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#430: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:279:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#430: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:279:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:280:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#431: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:280:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:281:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:281:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:282:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:282:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:284:
+       case CAP_PIF:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:285:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#436: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:285:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#437: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:286:
+                       if (!(capConfig0 & CAP_CONFIG0_PIF_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#437: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:286:
+                       if (!(capConfig0 & CAP_CONFIG0_PIF_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#437: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:286:
+                       if (!(capConfig0 & CAP_CONFIG0_PIF_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#437: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:286:
+                       if (!(capConfig0 & CAP_CONFIG0_PIF_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:287:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#438: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:287:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:288:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#439: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:288:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:289:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:289:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:290:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:290:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:292:
+       case CAP_APM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:293:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:293:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:294:
+                       if ((index == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:294:
+                       if ((index == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#445: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:294:
+                       if ((index == 0)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 0'
#445: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:294:
+                       if ((index == 0)
+                           && (!(capConfig1 & CAP_CONFIG1_APMA_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#446: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:295:
+                           && (!(capConfig1 & CAP_CONFIG1_APMA_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#446: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:295:
+                       if ((index == 0)
+                           && (!(capConfig1 & CAP_CONFIG1_APMA_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:295:
+                           && (!(capConfig1 & CAP_CONFIG1_APMA_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#447: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:296:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:296:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:297:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:297:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:298:
+                       if ((index == 1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:298:
+                       if ((index == 1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#449: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:298:
+                       if ((index == 1)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 1'
#449: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:298:
+                       if ((index == 1)
+                           && (!(capConfig1 & CAP_CONFIG1_APMB_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:299:
+                           && (!(capConfig1 & CAP_CONFIG1_APMB_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#450: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:299:
+                       if ((index == 1)
+                           && (!(capConfig1 & CAP_CONFIG1_APMB_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:299:
+                           && (!(capConfig1 & CAP_CONFIG1_APMB_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#451: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:300:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:300:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:301:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:301:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#453: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:302:
+                       if ((index == 2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:302:
+                       if ((index == 2)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#453: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:302:
+                       if ((index == 2)
[...]
+                               returnVal = CAP_PRESENT;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == 2'
#453: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:302:
+                       if ((index == 2)
+                           && (!(capConfig1 & CAP_CONFIG1_APMC_DIS))) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#454: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:303:
+                           && (!(capConfig1 & CAP_CONFIG1_APMC_DIS))) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#454: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:303:
+                       if ((index == 2)
+                           && (!(capConfig1 & CAP_CONFIG1_APMC_DIS))) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#454: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:303:
+                           && (!(capConfig1 & CAP_CONFIG1_APMC_DIS))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#455: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:304:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:304:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#456: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:305:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:305:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:306:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:306:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:307:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:307:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:309:
+       case CAP_SPU:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:310:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#461: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:310:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:311:
+                       if (!(capConfig2 & CAP_CONFIG2_SPU_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:311:
+                       if (!(capConfig2 & CAP_CONFIG2_SPU_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#462: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:311:
+                       if (!(capConfig2 & CAP_CONFIG2_SPU_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#462: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:311:
+                       if (!(capConfig2 & CAP_CONFIG2_SPU_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#463: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:312:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:312:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#464: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:313:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#464: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:313:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:314:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#465: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:314:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:315:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#466: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:315:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:317:
+       case CAP_PKA:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#469: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:318:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:318:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#470: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:319:
+                       if (!(capConfig2 & CAP_CONFIG2_PKA_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:319:
+                       if (!(capConfig2 & CAP_CONFIG2_PKA_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#470: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:319:
+                       if (!(capConfig2 & CAP_CONFIG2_PKA_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#470: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:319:
+                       if (!(capConfig2 & CAP_CONFIG2_PKA_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#471: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:320:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:320:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#472: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:321:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:321:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#473: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:322:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:322:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#474: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:323:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:323:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:325:
+       case CAP_RNG:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:326:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:326:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#478: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:327:
+                       if (!(capConfig2 & CAP_CONFIG2_RNG_DIS)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#478: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:327:
+                       if (!(capConfig2 & CAP_CONFIG2_RNG_DIS)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#478: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:327:
+                       if (!(capConfig2 & CAP_CONFIG2_RNG_DIS)) {
+                               returnVal = CAP_PRESENT;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#478: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:327:
+                       if (!(capConfig2 & CAP_CONFIG2_RNG_DIS)) {
+                               returnVal = CAP_PRESENT;
+                       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#479: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:328:
+                               returnVal = CAP_PRESENT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:328:
+                               returnVal = CAP_PRESENT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:329:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:329:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:330:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:330:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:331:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:331:
+               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:334:
+               {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:334:
+               {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:335:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:335:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:336:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:336:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:337:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:338:
+       return returnVal;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#493: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:342:
+/****************************************************************************
+*  cap_getMaxArmSpeedHz -

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#507: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:356:
+       return 500000000;$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#508: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:357:
+#elif ((CFG_GLOBAL_CHIP == BCM11109) || (CFG_GLOBAL_CHIP == BCM11170) || (CFG_GLOBAL_CHIP == BCM11110))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:358:
+       return 300000000;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:360:
+       return 666666666;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#518: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:367:
+/****************************************************************************
+*  cap_getMaxVpmSpeedHz -

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#531: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:380:
+#if ((CFG_GLOBAL_CHIP == BCM11107) || (CFG_GLOBAL_CHIP == BCM11211) || (CFG_GLOBAL_CHIP == FPGA11107))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:381:
+       return 333333333;$

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#533: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:382:
+#elif ((CFG_GLOBAL_CHIP == BCM11109) || (CFG_GLOBAL_CHIP == BCM11170) || (CFG_GLOBAL_CHIP == BCM11110))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#534: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:383:
+       return 200000000;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#541: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:390:
+/****************************************************************************
+*  cap_getMaxLcdRes -

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:404:
+       return (CAP_LCD_RES_T)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:405:
+               ((capConfig1 & CAP_CONFIG1_CLCD_RES_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:405:
+               ((capConfig1 & CAP_CONFIG1_CLCD_RES_MASK) >>$

ERROR:CODE_INDENT: code indent should use tabs where possible
#557: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:406:
+                CAP_CONFIG1_CLCD_RES_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/arm/mach-bcmring/include/mach/csp/cap_inline.h:406:
+                CAP_CONFIG1_CLCD_RES_SHIFT);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#567: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#568: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_DDR_HW_PHASE_ALIGN>
#594: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:28:
+#define chipcHw_DDR_HW_PHASE_ALIGN    0

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_ALIGN>
#595: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:29:
+#define chipcHw_VPM_HW_PHASE_ALIGN    0

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_freq>
#597: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:31:
+typedef uint32_t chipcHw_freq;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#597: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:31:
+typedef uint32_t chipcHw_freq;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#600: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:34:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:35:
+       chipcHw_CLOCK_DDR,      /* DDR PHY Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_DDR>
#601: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:35:
+       chipcHw_CLOCK_DDR,      /* DDR PHY Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:36:
+       chipcHw_CLOCK_ARM,      /* ARM Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_ARM>
#602: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:36:
+       chipcHw_CLOCK_ARM,      /* ARM Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:37:
+       chipcHw_CLOCK_ESW,      /* Ethernet Switch Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_ESW>
#603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:37:
+       chipcHw_CLOCK_ESW,      /* Ethernet Switch Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:38:
+       chipcHw_CLOCK_VPM,      /* VPM Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_VPM>
#604: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:38:
+       chipcHw_CLOCK_VPM,      /* VPM Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:39:
+       chipcHw_CLOCK_ESW125,   /* Ethernet MII Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_ESW125>
#605: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:39:
+       chipcHw_CLOCK_ESW125,   /* Ethernet MII Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:40:
+       chipcHw_CLOCK_UART,     /* UART Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_UART>
#606: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:40:
+       chipcHw_CLOCK_UART,     /* UART Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:41:
+       chipcHw_CLOCK_SDIO0,    /* SDIO 0 Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_SDIO0>
#607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:41:
+       chipcHw_CLOCK_SDIO0,    /* SDIO 0 Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:42:
+       chipcHw_CLOCK_SDIO1,    /* SDIO 1 Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_SDIO1>
#608: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:42:
+       chipcHw_CLOCK_SDIO1,    /* SDIO 1 Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:43:
+       chipcHw_CLOCK_SPI,      /* SPI Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_SPI>
#609: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:43:
+       chipcHw_CLOCK_SPI,      /* SPI Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:44:
+       chipcHw_CLOCK_ETM,      /* ARM ETM Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_ETM>
#610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:44:
+       chipcHw_CLOCK_ETM,      /* ARM ETM Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:46:
+       chipcHw_CLOCK_BUS,      /* BUS Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_BUS>
#612: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:46:
+       chipcHw_CLOCK_BUS,      /* BUS Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:47:
+       chipcHw_CLOCK_OTP,      /* OTP Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_OTP>
#613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:47:
+       chipcHw_CLOCK_OTP,      /* OTP Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:48:
+       chipcHw_CLOCK_I2C,      /* I2C Host Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_I2C>
#614: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:48:
+       chipcHw_CLOCK_I2C,      /* I2C Host Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:49:
+       chipcHw_CLOCK_I2S0,     /* I2S 0 Host Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_I2S0>
#615: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:49:
+       chipcHw_CLOCK_I2S0,     /* I2S 0 Host Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:50:
+       chipcHw_CLOCK_RTBUS,    /* DDR PHY Configuration Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_RTBUS>
#616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:50:
+       chipcHw_CLOCK_RTBUS,    /* DDR PHY Configuration Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:51:
+       chipcHw_CLOCK_APM100,   /* APM100 Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_APM100>
#617: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:51:
+       chipcHw_CLOCK_APM100,   /* APM100 Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:52:
+       chipcHw_CLOCK_TSC,      /* Touch screen Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_TSC>
#618: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:52:
+       chipcHw_CLOCK_TSC,      /* Touch screen Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:53:
+       chipcHw_CLOCK_LED,      /* LED Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_LED>
#619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:53:
+       chipcHw_CLOCK_LED,      /* LED Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:55:
+       chipcHw_CLOCK_USB,      /* USB Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_USB>
#621: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:55:
+       chipcHw_CLOCK_USB,      /* USB Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:56:
+       chipcHw_CLOCK_LCD,      /* LCD CLock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_LCD>
#622: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:56:
+       chipcHw_CLOCK_LCD,      /* LCD CLock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:57:
+       chipcHw_CLOCK_APM,      /* APM Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_APM>
#623: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:57:
+       chipcHw_CLOCK_APM,      /* APM Clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:59:
+       chipcHw_CLOCK_I2S1,     /* I2S 1 Host Clock */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_I2S1>
#625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:59:
+       chipcHw_CLOCK_I2S1,     /* I2S 1 Host Clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_CLOCK_e>
#626: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:60:
+} chipcHw_CLOCK_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#629: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:63:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:64:
+       chipcHw_BOOT_DEVICE_UART = chipcHw_STRAPS_BOOT_DEVICE_UART,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_UART>
#630: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:64:
+       chipcHw_BOOT_DEVICE_UART = chipcHw_STRAPS_BOOT_DEVICE_UART,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_UART>
#630: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:64:
+       chipcHw_BOOT_DEVICE_UART = chipcHw_STRAPS_BOOT_DEVICE_UART,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:65:
+       chipcHw_BOOT_DEVICE_SERIAL_FLASH =$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_SERIAL_FLASH>
#631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:65:
+       chipcHw_BOOT_DEVICE_SERIAL_FLASH =

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:66:
+           chipcHw_STRAPS_BOOT_DEVICE_SERIAL_FLASH,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:66:
+           chipcHw_STRAPS_BOOT_DEVICE_SERIAL_FLASH,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_SERIAL_FLASH>
#632: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:66:
+           chipcHw_STRAPS_BOOT_DEVICE_SERIAL_FLASH,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:67:
+       chipcHw_BOOT_DEVICE_NOR_FLASH_16 =$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_NOR_FLASH_16>
#633: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:67:
+       chipcHw_BOOT_DEVICE_NOR_FLASH_16 =

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:68:
+           chipcHw_STRAPS_BOOT_DEVICE_NOR_FLASH_16,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:68:
+           chipcHw_STRAPS_BOOT_DEVICE_NOR_FLASH_16,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_NOR_FLASH_16>
#634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:68:
+           chipcHw_STRAPS_BOOT_DEVICE_NOR_FLASH_16,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:69:
+       chipcHw_BOOT_DEVICE_NAND_FLASH_8 =$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_NAND_FLASH_8>
#635: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:69:
+       chipcHw_BOOT_DEVICE_NAND_FLASH_8 =

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:70:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_8,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:70:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_8,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_8>
#636: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:70:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_8,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#637: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:71:
+       chipcHw_BOOT_DEVICE_NAND_FLASH_16 =$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_NAND_FLASH_16>
#637: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:71:
+       chipcHw_BOOT_DEVICE_NAND_FLASH_16 =

ERROR:CODE_INDENT: code indent should use tabs where possible
#638: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:72:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_16$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:72:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_16$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_16>
#638: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:72:
+           chipcHw_STRAPS_BOOT_DEVICE_NAND_FLASH_16

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_DEVICE_e>
#639: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:73:
+} chipcHw_BOOT_DEVICE_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#642: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:76:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:77:
+       chipcHw_BOOT_MODE_NORMAL = chipcHw_STRAPS_BOOT_MODE_NORMAL,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_MODE_NORMAL>
#643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:77:
+       chipcHw_BOOT_MODE_NORMAL = chipcHw_STRAPS_BOOT_MODE_NORMAL,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_MODE_NORMAL>
#643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:77:
+       chipcHw_BOOT_MODE_NORMAL = chipcHw_STRAPS_BOOT_MODE_NORMAL,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#644: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:78:
+       chipcHw_BOOT_MODE_DBG_SW = chipcHw_STRAPS_BOOT_MODE_DBG_SW,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_MODE_DBG_SW>
#644: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:78:
+       chipcHw_BOOT_MODE_DBG_SW = chipcHw_STRAPS_BOOT_MODE_DBG_SW,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_MODE_DBG_SW>
#644: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:78:
+       chipcHw_BOOT_MODE_DBG_SW = chipcHw_STRAPS_BOOT_MODE_DBG_SW,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:79:
+       chipcHw_BOOT_MODE_DBG_BOOT = chipcHw_STRAPS_BOOT_MODE_DBG_BOOT,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_MODE_DBG_BOOT>
#645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:79:
+       chipcHw_BOOT_MODE_DBG_BOOT = chipcHw_STRAPS_BOOT_MODE_DBG_BOOT,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_MODE_DBG_BOOT>
#645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:79:
+       chipcHw_BOOT_MODE_DBG_BOOT = chipcHw_STRAPS_BOOT_MODE_DBG_BOOT,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:80:
+       chipcHw_BOOT_MODE_NORMAL_QUIET = chipcHw_STRAPS_BOOT_MODE_NORMAL_QUIET$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_MODE_NORMAL_QUIET>
#646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:80:
+       chipcHw_BOOT_MODE_NORMAL_QUIET = chipcHw_STRAPS_BOOT_MODE_NORMAL_QUIET

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_MODE_NORMAL_QUIET>
#646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:80:
+       chipcHw_BOOT_MODE_NORMAL_QUIET = chipcHw_STRAPS_BOOT_MODE_NORMAL_QUIET

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BOOT_MODE_e>
#647: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:81:
+} chipcHw_BOOT_MODE_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#650: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:84:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:85:
+       chipcHw_NAND_PAGESIZE_512 = chipcHw_STRAPS_NAND_PAGESIZE_512,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_NAND_PAGESIZE_512>
#651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:85:
+       chipcHw_NAND_PAGESIZE_512 = chipcHw_STRAPS_NAND_PAGESIZE_512,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_PAGESIZE_512>
#651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:85:
+       chipcHw_NAND_PAGESIZE_512 = chipcHw_STRAPS_NAND_PAGESIZE_512,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:86:
+       chipcHw_NAND_PAGESIZE_2048 = chipcHw_STRAPS_NAND_PAGESIZE_2048,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_NAND_PAGESIZE_2048>
#652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:86:
+       chipcHw_NAND_PAGESIZE_2048 = chipcHw_STRAPS_NAND_PAGESIZE_2048,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_PAGESIZE_2048>
#652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:86:
+       chipcHw_NAND_PAGESIZE_2048 = chipcHw_STRAPS_NAND_PAGESIZE_2048,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:87:
+       chipcHw_NAND_PAGESIZE_4096 = chipcHw_STRAPS_NAND_PAGESIZE_4096,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_NAND_PAGESIZE_4096>
#653: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:87:
+       chipcHw_NAND_PAGESIZE_4096 = chipcHw_STRAPS_NAND_PAGESIZE_4096,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_PAGESIZE_4096>
#653: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:87:
+       chipcHw_NAND_PAGESIZE_4096 = chipcHw_STRAPS_NAND_PAGESIZE_4096,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:88:
+       chipcHw_NAND_PAGESIZE_EXT = chipcHw_STRAPS_NAND_PAGESIZE_EXT$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_NAND_PAGESIZE_EXT>
#654: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:88:
+       chipcHw_NAND_PAGESIZE_EXT = chipcHw_STRAPS_NAND_PAGESIZE_EXT

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_PAGESIZE_EXT>
#654: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:88:
+       chipcHw_NAND_PAGESIZE_EXT = chipcHw_STRAPS_NAND_PAGESIZE_EXT

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_NAND_PAGESIZE_e>
#655: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:89:
+} chipcHw_NAND_PAGESIZE_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#658: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:92:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:93:
+       chipcHw_GPIO_FUNCTION_KEYPAD = chipcHw_REG_GPIO_MUX_KEYPAD,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_KEYPAD>
#659: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:93:
+       chipcHw_GPIO_FUNCTION_KEYPAD = chipcHw_REG_GPIO_MUX_KEYPAD,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_KEYPAD>
#659: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:93:
+       chipcHw_GPIO_FUNCTION_KEYPAD = chipcHw_REG_GPIO_MUX_KEYPAD,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:94:
+       chipcHw_GPIO_FUNCTION_I2CH = chipcHw_REG_GPIO_MUX_I2CH,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_I2CH>
#660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:94:
+       chipcHw_GPIO_FUNCTION_I2CH = chipcHw_REG_GPIO_MUX_I2CH,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_I2CH>
#660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:94:
+       chipcHw_GPIO_FUNCTION_I2CH = chipcHw_REG_GPIO_MUX_I2CH,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:95:
+       chipcHw_GPIO_FUNCTION_SPI = chipcHw_REG_GPIO_MUX_SPI,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_SPI>
#661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:95:
+       chipcHw_GPIO_FUNCTION_SPI = chipcHw_REG_GPIO_MUX_SPI,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_SPI>
#661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:95:
+       chipcHw_GPIO_FUNCTION_SPI = chipcHw_REG_GPIO_MUX_SPI,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:96:
+       chipcHw_GPIO_FUNCTION_UART = chipcHw_REG_GPIO_MUX_UART,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_UART>
#662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:96:
+       chipcHw_GPIO_FUNCTION_UART = chipcHw_REG_GPIO_MUX_UART,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_UART>
#662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:96:
+       chipcHw_GPIO_FUNCTION_UART = chipcHw_REG_GPIO_MUX_UART,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:97:
+       chipcHw_GPIO_FUNCTION_LEDMTXP = chipcHw_REG_GPIO_MUX_LEDMTXP,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_LEDMTXP>
#663: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:97:
+       chipcHw_GPIO_FUNCTION_LEDMTXP = chipcHw_REG_GPIO_MUX_LEDMTXP,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_LEDMTXP>
#663: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:97:
+       chipcHw_GPIO_FUNCTION_LEDMTXP = chipcHw_REG_GPIO_MUX_LEDMTXP,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:98:
+       chipcHw_GPIO_FUNCTION_LEDMTXS = chipcHw_REG_GPIO_MUX_LEDMTXS,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_LEDMTXS>
#664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:98:
+       chipcHw_GPIO_FUNCTION_LEDMTXS = chipcHw_REG_GPIO_MUX_LEDMTXS,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_LEDMTXS>
#664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:98:
+       chipcHw_GPIO_FUNCTION_LEDMTXS = chipcHw_REG_GPIO_MUX_LEDMTXS,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:99:
+       chipcHw_GPIO_FUNCTION_SDIO0 = chipcHw_REG_GPIO_MUX_SDIO0,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_SDIO0>
#665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:99:
+       chipcHw_GPIO_FUNCTION_SDIO0 = chipcHw_REG_GPIO_MUX_SDIO0,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_SDIO0>
#665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:99:
+       chipcHw_GPIO_FUNCTION_SDIO0 = chipcHw_REG_GPIO_MUX_SDIO0,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:100:
+       chipcHw_GPIO_FUNCTION_SDIO1 = chipcHw_REG_GPIO_MUX_SDIO1,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_SDIO1>
#666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:100:
+       chipcHw_GPIO_FUNCTION_SDIO1 = chipcHw_REG_GPIO_MUX_SDIO1,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_SDIO1>
#666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:100:
+       chipcHw_GPIO_FUNCTION_SDIO1 = chipcHw_REG_GPIO_MUX_SDIO1,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:101:
+       chipcHw_GPIO_FUNCTION_PCM = chipcHw_REG_GPIO_MUX_PCM,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_PCM>
#667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:101:
+       chipcHw_GPIO_FUNCTION_PCM = chipcHw_REG_GPIO_MUX_PCM,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_PCM>
#667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:101:
+       chipcHw_GPIO_FUNCTION_PCM = chipcHw_REG_GPIO_MUX_PCM,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:102:
+       chipcHw_GPIO_FUNCTION_I2S = chipcHw_REG_GPIO_MUX_I2S,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_I2S>
#668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:102:
+       chipcHw_GPIO_FUNCTION_I2S = chipcHw_REG_GPIO_MUX_I2S,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_I2S>
#668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:102:
+       chipcHw_GPIO_FUNCTION_I2S = chipcHw_REG_GPIO_MUX_I2S,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:103:
+       chipcHw_GPIO_FUNCTION_ETM = chipcHw_REG_GPIO_MUX_ETM,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_ETM>
#669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:103:
+       chipcHw_GPIO_FUNCTION_ETM = chipcHw_REG_GPIO_MUX_ETM,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_ETM>
#669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:103:
+       chipcHw_GPIO_FUNCTION_ETM = chipcHw_REG_GPIO_MUX_ETM,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:104:
+       chipcHw_GPIO_FUNCTION_DEBUG = chipcHw_REG_GPIO_MUX_DEBUG,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_DEBUG>
#670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:104:
+       chipcHw_GPIO_FUNCTION_DEBUG = chipcHw_REG_GPIO_MUX_DEBUG,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_DEBUG>
#670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:104:
+       chipcHw_GPIO_FUNCTION_DEBUG = chipcHw_REG_GPIO_MUX_DEBUG,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:105:
+       chipcHw_GPIO_FUNCTION_MISC = chipcHw_REG_GPIO_MUX_MISC,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_MISC>
#671: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:105:
+       chipcHw_GPIO_FUNCTION_MISC = chipcHw_REG_GPIO_MUX_MISC,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_MISC>
#671: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:105:
+       chipcHw_GPIO_FUNCTION_MISC = chipcHw_REG_GPIO_MUX_MISC,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:106:
+       chipcHw_GPIO_FUNCTION_GPIO = chipcHw_REG_GPIO_MUX_GPIO$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_GPIO>
#672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:106:
+       chipcHw_GPIO_FUNCTION_GPIO = chipcHw_REG_GPIO_MUX_GPIO

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_GPIO>
#672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:106:
+       chipcHw_GPIO_FUNCTION_GPIO = chipcHw_REG_GPIO_MUX_GPIO

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_FUNCTION_e>
#673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:107:
+} chipcHw_GPIO_FUNCTION_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#676: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:110:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:111:
+       chipcHw_PIN_SLEW_RATE_HIGH = chipcHw_REG_SLEW_RATE_HIGH,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_SLEW_RATE_HIGH>
#677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:111:
+       chipcHw_PIN_SLEW_RATE_HIGH = chipcHw_REG_SLEW_RATE_HIGH,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SLEW_RATE_HIGH>
#677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:111:
+       chipcHw_PIN_SLEW_RATE_HIGH = chipcHw_REG_SLEW_RATE_HIGH,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:112:
+       chipcHw_PIN_SLEW_RATE_NORMAL = chipcHw_REG_SLEW_RATE_NORMAL$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_SLEW_RATE_NORMAL>
#678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:112:
+       chipcHw_PIN_SLEW_RATE_NORMAL = chipcHw_REG_SLEW_RATE_NORMAL

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SLEW_RATE_NORMAL>
#678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:112:
+       chipcHw_PIN_SLEW_RATE_NORMAL = chipcHw_REG_SLEW_RATE_NORMAL

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_SLEW_RATE_e>
#679: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:113:
+} chipcHw_PIN_SLEW_RATE_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#682: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:116:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:117:
+       chipcHw_PIN_CURRENT_STRENGTH_2mA = chipcHw_REG_CURRENT_STRENGTH_2mA,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_2mA>
#683: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:117:
+       chipcHw_PIN_CURRENT_STRENGTH_2mA = chipcHw_REG_CURRENT_STRENGTH_2mA,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_2mA>
#683: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:117:
+       chipcHw_PIN_CURRENT_STRENGTH_2mA = chipcHw_REG_CURRENT_STRENGTH_2mA,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:118:
+       chipcHw_PIN_CURRENT_STRENGTH_4mA = chipcHw_REG_CURRENT_STRENGTH_4mA,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_4mA>
#684: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:118:
+       chipcHw_PIN_CURRENT_STRENGTH_4mA = chipcHw_REG_CURRENT_STRENGTH_4mA,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_4mA>
#684: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:118:
+       chipcHw_PIN_CURRENT_STRENGTH_4mA = chipcHw_REG_CURRENT_STRENGTH_4mA,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:119:
+       chipcHw_PIN_CURRENT_STRENGTH_6mA = chipcHw_REG_CURRENT_STRENGTH_6mA,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_6mA>
#685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:119:
+       chipcHw_PIN_CURRENT_STRENGTH_6mA = chipcHw_REG_CURRENT_STRENGTH_6mA,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_6mA>
#685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:119:
+       chipcHw_PIN_CURRENT_STRENGTH_6mA = chipcHw_REG_CURRENT_STRENGTH_6mA,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:120:
+       chipcHw_PIN_CURRENT_STRENGTH_8mA = chipcHw_REG_CURRENT_STRENGTH_8mA,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_8mA>
#686: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:120:
+       chipcHw_PIN_CURRENT_STRENGTH_8mA = chipcHw_REG_CURRENT_STRENGTH_8mA,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_8mA>
#686: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:120:
+       chipcHw_PIN_CURRENT_STRENGTH_8mA = chipcHw_REG_CURRENT_STRENGTH_8mA,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:121:
+       chipcHw_PIN_CURRENT_STRENGTH_10mA = chipcHw_REG_CURRENT_STRENGTH_10mA,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_10mA>
#687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:121:
+       chipcHw_PIN_CURRENT_STRENGTH_10mA = chipcHw_REG_CURRENT_STRENGTH_10mA,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_10mA>
#687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:121:
+       chipcHw_PIN_CURRENT_STRENGTH_10mA = chipcHw_REG_CURRENT_STRENGTH_10mA,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:122:
+       chipcHw_PIN_CURRENT_STRENGTH_12mA = chipcHw_REG_CURRENT_STRENGTH_12mA$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_12mA>
#688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:122:
+       chipcHw_PIN_CURRENT_STRENGTH_12mA = chipcHw_REG_CURRENT_STRENGTH_12mA

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_STRENGTH_12mA>
#688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:122:
+       chipcHw_PIN_CURRENT_STRENGTH_12mA = chipcHw_REG_CURRENT_STRENGTH_12mA

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CURRENT_STRENGTH_e>
#689: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:123:
+} chipcHw_PIN_CURRENT_STRENGTH_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#692: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:126:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:127:
+       chipcHw_PIN_PULL_NONE = chipcHw_REG_PULL_NONE,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_PULL_NONE>
#693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:127:
+       chipcHw_PIN_PULL_NONE = chipcHw_REG_PULL_NONE,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULL_NONE>
#693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:127:
+       chipcHw_PIN_PULL_NONE = chipcHw_REG_PULL_NONE,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:128:
+       chipcHw_PIN_PULL_UP = chipcHw_REG_PULL_UP,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_PULL_UP>
#694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:128:
+       chipcHw_PIN_PULL_UP = chipcHw_REG_PULL_UP,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULL_UP>
#694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:128:
+       chipcHw_PIN_PULL_UP = chipcHw_REG_PULL_UP,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:129:
+       chipcHw_PIN_PULL_DOWN = chipcHw_REG_PULL_DOWN$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_PULL_DOWN>
#695: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:129:
+       chipcHw_PIN_PULL_DOWN = chipcHw_REG_PULL_DOWN

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULL_DOWN>
#695: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:129:
+       chipcHw_PIN_PULL_DOWN = chipcHw_REG_PULL_DOWN

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_PULL_e>
#696: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:130:
+} chipcHw_PIN_PULL_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#699: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:133:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:134:
+       chipcHw_PIN_INPUTTYPE_CMOS = chipcHw_REG_INPUTTYPE_CMOS,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_INPUTTYPE_CMOS>
#700: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:134:
+       chipcHw_PIN_INPUTTYPE_CMOS = chipcHw_REG_INPUTTYPE_CMOS,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_INPUTTYPE_CMOS>
#700: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:134:
+       chipcHw_PIN_INPUTTYPE_CMOS = chipcHw_REG_INPUTTYPE_CMOS,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:135:
+       chipcHw_PIN_INPUTTYPE_ST = chipcHw_REG_INPUTTYPE_ST$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_INPUTTYPE_ST>
#701: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:135:
+       chipcHw_PIN_INPUTTYPE_ST = chipcHw_REG_INPUTTYPE_ST

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_INPUTTYPE_ST>
#701: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:135:
+       chipcHw_PIN_INPUTTYPE_ST = chipcHw_REG_INPUTTYPE_ST

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_INPUTTYPE_e>
#702: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:136:
+} chipcHw_PIN_INPUTTYPE_e;

WARNING:TYPO_SPELLING: 'Disalow' may be misspelled - perhaps 'Disallow'?
#704: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:138:
+/* Allow/Disalow the support of spread spectrum  */
          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#705: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:139:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:140:
+       chipcHw_SPREAD_SPECTRUM_DISALLOW,       /* Spread spectrum support is not allowed */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_SPREAD_SPECTRUM_DISALLOW>
#706: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:140:
+       chipcHw_SPREAD_SPECTRUM_DISALLOW,       /* Spread spectrum support is not allowed */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:141:
+       chipcHw_SPREAD_SPECTRUM_ALLOW   /* Spread spectrum support is allowed */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_SPREAD_SPECTRUM_ALLOW>
#707: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:141:
+       chipcHw_SPREAD_SPECTRUM_ALLOW   /* Spread spectrum support is allowed */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_SPREAD_SPECTRUM_e>
#708: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:142:
+} chipcHw_SPREAD_SPECTRUM_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#710: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:144:
+typedef struct {

WARNING:TYPO_SPELLING: 'Disalow' may be misspelled - perhaps 'Disallow'?
#711: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:145:
+       chipcHw_SPREAD_SPECTRUM_e ssSupport;    /* Allow/Disalow to support spread spectrum.
                                                         ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:145:
+       chipcHw_SPREAD_SPECTRUM_e ssSupport;    /* Allow/Disalow to support spread spectrum.$

CHECK:CAMELCASE: Avoid CamelCase: <ssSupport>
#711: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:145:
+       chipcHw_SPREAD_SPECTRUM_e ssSupport;    /* Allow/Disalow to support spread spectrum.

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:146:
+                                                  If supported, call chipcHw_enableSpreadSpectrum ()$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#712: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:146:
+       chipcHw_SPREAD_SPECTRUM_e ssSupport;    /* Allow/Disalow to support spread spectrum.
+                                                  If supported, call chipcHw_enableSpreadSpectrum ()

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#713: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:147:
+                                                  to activate the spread spectrum with desired spread. */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:147:
+                                                  to activate the spread spectrum with desired spread. */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#713: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:147:
+                                                  to activate the spread spectrum with desired spread. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:148:
+       uint32_t pllVcoFreqHz;  /* PLL VCO frequency in Hz */$

CHECK:CAMELCASE: Avoid CamelCase: <pllVcoFreqHz>
#714: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:148:
+       uint32_t pllVcoFreqHz;  /* PLL VCO frequency in Hz */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#714: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:148:
+       uint32_t pllVcoFreqHz;  /* PLL VCO frequency in Hz */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:149:
+       uint32_t pll2VcoFreqHz; /* PLL2 VCO frequency in Hz */$

CHECK:CAMELCASE: Avoid CamelCase: <pll2VcoFreqHz>
#715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:149:
+       uint32_t pll2VcoFreqHz; /* PLL2 VCO frequency in Hz */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:149:
+       uint32_t pll2VcoFreqHz; /* PLL2 VCO frequency in Hz */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:150:
+       uint32_t busClockFreqHz;        /* Bus clock frequency in Hz */$

CHECK:CAMELCASE: Avoid CamelCase: <busClockFreqHz>
#716: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:150:
+       uint32_t busClockFreqHz;        /* Bus clock frequency in Hz */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#716: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:150:
+       uint32_t busClockFreqHz;        /* Bus clock frequency in Hz */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:151:
+       uint32_t armBusRatio;   /* ARM clock : Bus clock */$

CHECK:CAMELCASE: Avoid CamelCase: <armBusRatio>
#717: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:151:
+       uint32_t armBusRatio;   /* ARM clock : Bus clock */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#717: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:151:
+       uint32_t armBusRatio;   /* ARM clock : Bus clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:152:
+       uint32_t vpmBusRatio;   /* VPM clock : Bus clock */$

CHECK:CAMELCASE: Avoid CamelCase: <vpmBusRatio>
#718: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:152:
+       uint32_t vpmBusRatio;   /* VPM clock : Bus clock */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#718: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:152:
+       uint32_t vpmBusRatio;   /* VPM clock : Bus clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:153:
+       uint32_t ddrBusRatio;   /* DDR clock : Bus clock */$

CHECK:CAMELCASE: Avoid CamelCase: <ddrBusRatio>
#719: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:153:
+       uint32_t ddrBusRatio;   /* DDR clock : Bus clock */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#719: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:153:
+       uint32_t ddrBusRatio;   /* DDR clock : Bus clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_INIT_PARAM_t>
#720: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:154:
+} chipcHw_INIT_PARAM_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#723: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:157:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:158:
+       chipcHw_REV_NUMBER_A0 = chipcHw_REG_REV_A0,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REV_NUMBER_A0>
#724: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:158:
+       chipcHw_REV_NUMBER_A0 = chipcHw_REG_REV_A0,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_REV_A0>
#724: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:158:
+       chipcHw_REV_NUMBER_A0 = chipcHw_REG_REV_A0,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:159:
+       chipcHw_REV_NUMBER_B0 = chipcHw_REG_REV_B0$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REV_NUMBER_B0>
#725: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:159:
+       chipcHw_REV_NUMBER_B0 = chipcHw_REG_REV_B0

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_REV_B0>
#725: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:159:
+       chipcHw_REV_NUMBER_B0 = chipcHw_REG_REV_B0

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REV_NUMBER_e>
#726: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:160:
+} chipcHw_REV_NUMBER_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#728: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:162:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:163:
+       chipcHw_VPM_HW_PHASE_INTR_DISABLE = chipcHw_REG_VPM_INTR_DISABLE,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_INTR_DISABLE>
#729: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:163:
+       chipcHw_VPM_HW_PHASE_INTR_DISABLE = chipcHw_REG_VPM_INTR_DISABLE,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_DISABLE>
#729: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:163:
+       chipcHw_VPM_HW_PHASE_INTR_DISABLE = chipcHw_REG_VPM_INTR_DISABLE,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:164:
+       chipcHw_VPM_HW_PHASE_INTR_FAST = chipcHw_REG_VPM_INTR_FAST,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_INTR_FAST>
#730: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:164:
+       chipcHw_VPM_HW_PHASE_INTR_FAST = chipcHw_REG_VPM_INTR_FAST,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_FAST>
#730: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:164:
+       chipcHw_VPM_HW_PHASE_INTR_FAST = chipcHw_REG_VPM_INTR_FAST,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:165:
+       chipcHw_VPM_HW_PHASE_INTR_MEDIUM = chipcHw_REG_VPM_INTR_MEDIUM,$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_INTR_MEDIUM>
#731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:165:
+       chipcHw_VPM_HW_PHASE_INTR_MEDIUM = chipcHw_REG_VPM_INTR_MEDIUM,

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_MEDIUM>
#731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:165:
+       chipcHw_VPM_HW_PHASE_INTR_MEDIUM = chipcHw_REG_VPM_INTR_MEDIUM,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:166:
+       chipcHw_VPM_HW_PHASE_INTR_SLOW = chipcHw_REG_VPM_INTR_SLOW$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_INTR_SLOW>
#732: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:166:
+       chipcHw_VPM_HW_PHASE_INTR_SLOW = chipcHw_REG_VPM_INTR_SLOW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_SLOW>
#732: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:166:
+       chipcHw_VPM_HW_PHASE_INTR_SLOW = chipcHw_REG_VPM_INTR_SLOW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_INTR_e>
#733: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:167:
+} chipcHw_VPM_HW_PHASE_INTR_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#735: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:169:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:170:
+       chipcHw_DDR_HW_PHASE_MARGIN_STRICT,     /*  Strict margin for DDR phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_DDR_HW_PHASE_MARGIN_STRICT>
#736: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:170:
+       chipcHw_DDR_HW_PHASE_MARGIN_STRICT,     /*  Strict margin for DDR phase align condition */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:171:
+       chipcHw_DDR_HW_PHASE_MARGIN_MEDIUM,     /*  Medium margin for DDR phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_DDR_HW_PHASE_MARGIN_MEDIUM>
#737: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:171:
+       chipcHw_DDR_HW_PHASE_MARGIN_MEDIUM,     /*  Medium margin for DDR phase align condition */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:172:
+       chipcHw_DDR_HW_PHASE_MARGIN_WIDE        /*  Wider margin for DDR phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_DDR_HW_PHASE_MARGIN_WIDE>
#738: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:172:
+       chipcHw_DDR_HW_PHASE_MARGIN_WIDE        /*  Wider margin for DDR phase align condition */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_DDR_HW_PHASE_MARGIN_e>
#739: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:173:
+} chipcHw_DDR_HW_PHASE_MARGIN_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#741: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:175:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:176:
+       chipcHw_VPM_HW_PHASE_MARGIN_STRICT,     /*  Strict margin for VPM phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_MARGIN_STRICT>
#742: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:176:
+       chipcHw_VPM_HW_PHASE_MARGIN_STRICT,     /*  Strict margin for VPM phase align condition */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:177:
+       chipcHw_VPM_HW_PHASE_MARGIN_MEDIUM,     /*  Medium margin for VPM phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_MARGIN_MEDIUM>
#743: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:177:
+       chipcHw_VPM_HW_PHASE_MARGIN_MEDIUM,     /*  Medium margin for VPM phase align condition */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:178:
+       chipcHw_VPM_HW_PHASE_MARGIN_WIDE        /*  Wider margin for VPM phase align condition */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_MARGIN_WIDE>
#744: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:178:
+       chipcHw_VPM_HW_PHASE_MARGIN_WIDE        /*  Wider margin for VPM phase align condition */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_VPM_HW_PHASE_MARGIN_e>
#745: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:179:
+} chipcHw_VPM_HW_PHASE_MARGIN_e;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_XTAL_FREQ_Hz>
#747: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:181:
+#define chipcHw_XTAL_FREQ_Hz                    25000000       /* Reference clock frequency in Hz */

WARNING:TYPO_SPELLING: 'Programable' may be misspelled - perhaps 'Programmable'?
#749: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:183:
+/* Programable pin defines */
    ^^^^^^^^^^^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:184:
+#define chipcHw_PIN_GPIO(n)                     ((((n) >= 0) && ((n) < (chipcHw_GPIO_COUNT))) ? (n) : 0xFFFFFFFF)

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_GPIO>
#750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:184:
+#define chipcHw_PIN_GPIO(n)                     ((((n) >= 0) && ((n) < (chipcHw_GPIO_COUNT))) ? (n) : 0xFFFFFFFF)

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_GPIO_COUNT>
#750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:184:
+#define chipcHw_PIN_GPIO(n)                     ((((n) >= 0) && ((n) < (chipcHw_GPIO_COUNT))) ? (n) : 0xFFFFFFFF)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:184:
+#define chipcHw_PIN_GPIO(n)                     ((((n) >= 0) && ((n) < (chipcHw_GPIO_COUNT))) ? (n) : 0xFFFFFFFF)

ERROR:CODE_INDENT: code indent should use tabs where possible
#751: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:185:
+                                                                            /* GPIO pin 0 - 60 */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_UARTTXD>
#752: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:186:
+#define chipcHw_PIN_UARTTXD                     (chipcHw_GPIO_COUNT + 0)       /* UART Transmit */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_A>
#753: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:187:
+#define chipcHw_PIN_NVI_A                       (chipcHw_GPIO_COUNT + 1)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_D>
#754: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:188:
+#define chipcHw_PIN_NVI_D                       (chipcHw_GPIO_COUNT + 2)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_OEB>
#755: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:189:
+#define chipcHw_PIN_NVI_OEB                     (chipcHw_GPIO_COUNT + 3)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_WEB>
#756: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:190:
+#define chipcHw_PIN_NVI_WEB                     (chipcHw_GPIO_COUNT + 4)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_CS>
#757: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:191:
+#define chipcHw_PIN_NVI_CS                      (chipcHw_GPIO_COUNT + 5)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_NAND_CSB>
#758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:192:
+#define chipcHw_PIN_NVI_NAND_CSB                (chipcHw_GPIO_COUNT + 6)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_FLASHWP>
#759: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:193:
+#define chipcHw_PIN_NVI_FLASHWP                 (chipcHw_GPIO_COUNT + 7)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_NVI_NAND_RDYB>
#760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:194:
+#define chipcHw_PIN_NVI_NAND_RDYB               (chipcHw_GPIO_COUNT + 8)       /* NVI Interface */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_DATA_0_17>
#761: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:195:
+#define chipcHw_PIN_CL_DATA_0_17                (chipcHw_GPIO_COUNT + 9)       /* LCD Data 0 - 17 */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:196:
+#define chipcHw_PIN_CL_DATA_18_20               (chipcHw_GPIO_COUNT + 10)      /* LCD Data 18 - 20 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_DATA_18_20>
#762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:196:
+#define chipcHw_PIN_CL_DATA_18_20               (chipcHw_GPIO_COUNT + 10)      /* LCD Data 18 - 20 */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:197:
+#define chipcHw_PIN_CL_DATA_21_23               (chipcHw_GPIO_COUNT + 11)      /* LCD Data 21 - 23 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_DATA_21_23>
#763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:197:
+#define chipcHw_PIN_CL_DATA_21_23               (chipcHw_GPIO_COUNT + 11)      /* LCD Data 21 - 23 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_POWER>
#764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:198:
+#define chipcHw_PIN_CL_POWER                    (chipcHw_GPIO_COUNT + 12)      /* LCD Power */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_ACK>
#765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:199:
+#define chipcHw_PIN_CL_ACK                      (chipcHw_GPIO_COUNT + 13)      /* LCD Ack */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_FP>
#766: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:200:
+#define chipcHw_PIN_CL_FP                       (chipcHw_GPIO_COUNT + 14)      /* LCD FP */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_CL_LP>
#767: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:201:
+#define chipcHw_PIN_CL_LP                       (chipcHw_GPIO_COUNT + 15)      /* LCD LP */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_PIN_UARTRXD>
#768: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:202:
+#define chipcHw_PIN_UARTRXD                     (chipcHw_GPIO_COUNT + 16)      /* UART Receive */

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#775: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:209:
+/**
+*  @brief  Initializes the clock module

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#779: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:213:
+void chipcHw_Init(chipcHw_INIT_PARAM_t *initParam      /*  [ IN ] Misc chip initialization parameter */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_Init>
#779: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:213:
+void chipcHw_Init(chipcHw_INIT_PARAM_t *initParam      /*  [ IN ] Misc chip initialization parameter */

CHECK:CAMELCASE: Avoid CamelCase: <initParam>
#779: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:213:
+void chipcHw_Init(chipcHw_INIT_PARAM_t *initParam      /*  [ IN ] Misc chip initialization parameter */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:214:
+    ) __attribute__ ((section(".aramtext")));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#780: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:214:
+    ) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#784: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:218:
+/**
+*  @brief  Enables the PLL1

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll1Enable>
#790: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:224:
+void chipcHw_pll1Enable(uint32_t vcoFreqHz,    /*  [ IN ] VCO frequency in Hz */

CHECK:CAMELCASE: Avoid CamelCase: <vcoFreqHz>
#790: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:224:
+void chipcHw_pll1Enable(uint32_t vcoFreqHz,    /*  [ IN ] VCO frequency in Hz */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#790: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:224:
+void chipcHw_pll1Enable(uint32_t vcoFreqHz,    /*  [ IN ] VCO frequency in Hz */

ERROR:CODE_INDENT: code indent should use tabs where possible
#791: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:225:
+                       chipcHw_SPREAD_SPECTRUM_e ssSupport     /*  [ IN ] SS status */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:225:
+                       chipcHw_SPREAD_SPECTRUM_e ssSupport     /*  [ IN ] SS status */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:226:
+    ) __attribute__ ((section(".aramtext")));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:226:
+    ) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#796: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:230:
+/**
+*  @brief  Enables the PLL2

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll2Enable>
#802: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:236:
+void chipcHw_pll2Enable(uint32_t vcoFreqHz     /*  [ IN ] VCO frequency in Hz */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:237:
+    ) __attribute__ ((section(".aramtext")));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#803: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:237:
+    ) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:241:
+/**
+*  @brief  Disable the PLL1

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll1Disable>
#811: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:245:
+static inline void chipcHw_pll1Disable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#815: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:249:
+/**
+*  @brief  Disable the PLL2

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll2Disable>
#819: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:253:
+static inline void chipcHw_pll2Disable(void);

WARNING:TYPO_SPELLING: 'fequency' may be misspelled - perhaps 'frequency'?
#823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:257:
+*  @brief   Set clock fequency for miscellaneous configurable clocks
                       ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:257:
+/**
+*  @brief   Set clock fequency for miscellaneous configurable clocks

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getClockFrequency>
#831: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:265:
+chipcHw_freq chipcHw_getClockFrequency(chipcHw_CLOCK_e clock   /*  [ IN ] Configurable clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#832: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:266:
+    ) __attribute__ ((section(".aramtext")));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#832: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:266:
+    ) __attribute__ ((section(".aramtext")));

WARNING:TYPO_SPELLING: 'fequency' may be misspelled - perhaps 'frequency'?
#836: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:270:
+*  @brief   Set clock fequency for miscellaneous configurable clocks
                       ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#836: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:270:
+/**
+*  @brief   Set clock fequency for miscellaneous configurable clocks

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setClockFrequency>
#844: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:278:
+chipcHw_freq chipcHw_setClockFrequency(chipcHw_CLOCK_e clock,  /*  [ IN ] Configurable clock */

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:279:
+                                      uint32_t freq    /*  [ IN ] Clock frequency in Hz */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:279:
+                                      uint32_t freq    /*  [ IN ] Clock frequency in Hz */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:280:
+    ) __attribute__ ((section(".aramtext")));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".aramtext") over __attribute__((section(".aramtext")))
#846: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:280:
+    ) __attribute__ ((section(".aramtext")));

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#850: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:284:
+/**
+*  @brief   Set VPM clock in sync with BUS clock

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmPhaseAlign>
#858: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:292:
+int chipcHw_vpmPhaseAlign(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#862: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:296:
+/**
+*  @brief   Enables core a clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#868: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:302:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#871: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:305:
+static inline void chipcHw_setClockEnable(chipcHw_CLOCK_e clock        /*  [ IN ] Configurable clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setClockEnable>
#871: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:305:
+static inline void chipcHw_setClockEnable(chipcHw_CLOCK_e clock        /*  [ IN ] Configurable clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:306:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#876: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:310:
+/**
+*  @brief   Disabled a core clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:316:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#885: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:319:
+static inline void chipcHw_setClockDisable(chipcHw_CLOCK_e clock       /*  [ IN ] Configurable clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setClockDisable>
#885: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:319:
+static inline void chipcHw_setClockDisable(chipcHw_CLOCK_e clock       /*  [ IN ] Configurable clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:320:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#890: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:324:
+/**
+*  @brief   Enables bypass clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#894: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:328:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#897: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:331:
+static inline void chipcHw_bypassClockEnable(chipcHw_CLOCK_e clock     /*  [ IN ] Configurable clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_bypassClockEnable>
#897: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:331:
+static inline void chipcHw_bypassClockEnable(chipcHw_CLOCK_e clock     /*  [ IN ] Configurable clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:332:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#902: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:336:
+/**
+*  @brief   Disabled bypass clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#906: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:340:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#909: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:343:
+static inline void chipcHw_bypassClockDisable(chipcHw_CLOCK_e clock    /*  [ IN ] Configurable clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_bypassClockDisable>
#909: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:343:
+static inline void chipcHw_bypassClockDisable(chipcHw_CLOCK_e clock    /*  [ IN ] Configurable clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:344:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#914: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:348:
+/**
+*  @brief   Get Numeric Chip ID

WARNING:TYPO_SPELLING: 'revison' may be misspelled - perhaps 'revision'?
#916: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:350:
+*  This function returns Chip ID that includes the revison number
                                                    ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getChipId>
#922: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:356:
+static inline uint32_t chipcHw_getChipId(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#926: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:360:
+/**
+*  @brief   Get Chip Product ID

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getChipProductId>
#933: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:367:
+static inline uint32_t chipcHw_getChipProductId(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#937: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:371:
+/**
+*  @brief   Get revision number

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getChipRevisionNumber>
#944: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:378:
+static inline chipcHw_REV_NUMBER_e chipcHw_getChipRevisionNumber(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#948: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:382:
+/**
+*  @brief   Enables bus interface clock

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#957: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:391:
+static inline void chipcHw_busInterfaceClockEnable(uint32_t mask       /*  [ IN ] Bit map of type  chipcHw_REG_BUS_CLOCK_XXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_busInterfaceClockEnable>
#957: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:391:
+static inline void chipcHw_busInterfaceClockEnable(uint32_t mask       /*  [ IN ] Bit map of type  chipcHw_REG_BUS_CLOCK_XXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#958: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:392:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#962: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:396:
+/**
+*  @brief   Disables bus interface clock

WARNING:LONG_LINE_COMMENT: line length of 129 exceeds 100 columns
#971: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:405:
+static inline void chipcHw_busInterfaceClockDisable(uint32_t mask      /*  [ IN ] Bit map of type  chipcHw_REG_BUS_CLOCK_XXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_busInterfaceClockDisable>
#971: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:405:
+static inline void chipcHw_busInterfaceClockDisable(uint32_t mask      /*  [ IN ] Bit map of type  chipcHw_REG_BUS_CLOCK_XXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:406:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#976: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:410:
+/**
+*  @brief   Enables various audio channels

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#985: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:419:
+static inline void chipcHw_audioChannelEnable(uint32_t mask    /*  [ IN ] Bit map of type  chipcHw_REG_AUDIO_CHANNEL_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_audioChannelEnable>
#985: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:419:
+static inline void chipcHw_audioChannelEnable(uint32_t mask    /*  [ IN ] Bit map of type  chipcHw_REG_AUDIO_CHANNEL_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:420:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#990: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:424:
+/**
+*  @brief   Disables various audio channels

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#999: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:433:
+static inline void chipcHw_audioChannelDisable(uint32_t mask   /*  [ IN ] Bit map of type  chipcHw_REG_AUDIO_CHANNEL_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_audioChannelDisable>
#999: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:433:
+static inline void chipcHw_audioChannelDisable(uint32_t mask   /*  [ IN ] Bit map of type  chipcHw_REG_AUDIO_CHANNEL_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1000: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:434:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1004: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:438:
+/**
+*  @brief    Soft resets devices

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#1013: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:447:
+static inline void chipcHw_softReset(uint64_t mask     /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_softReset>
#1013: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:447:
+static inline void chipcHw_softReset(uint64_t mask     /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1014: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:448:
+    );$

WARNING:LONG_LINE_COMMENT: line length of 122 exceeds 100 columns
#1016: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:450:
+static inline void chipcHw_softResetDisable(uint64_t mask      /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_softResetDisable>
#1016: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:450:
+static inline void chipcHw_softResetDisable(uint64_t mask      /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:451:
+    );$

WARNING:LONG_LINE_COMMENT: line length of 122 exceeds 100 columns
#1019: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:453:
+static inline void chipcHw_softResetEnable(uint64_t mask       /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_softResetEnable>
#1019: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:453:
+static inline void chipcHw_softResetEnable(uint64_t mask       /*  [ IN ] Bit map of type chipcHw_REG_SOFT_RESET_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:454:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1024: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:458:
+/**
+*  @brief    Configures misc CHIP functionality

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#1033: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:467:
+static inline void chipcHw_miscControl(uint32_t mask   /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_miscControl>
#1033: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:467:
+static inline void chipcHw_miscControl(uint32_t mask   /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1034: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:468:
+    );$

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:470:
+static inline void chipcHw_miscControlDisable(uint32_t mask    /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_miscControlDisable>
#1036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:470:
+static inline void chipcHw_miscControlDisable(uint32_t mask    /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:471:
+    );$

WARNING:LONG_LINE_COMMENT: line length of 121 exceeds 100 columns
#1039: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:473:
+static inline void chipcHw_miscControlEnable(uint32_t mask     /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_miscControlEnable>
#1039: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:473:
+static inline void chipcHw_miscControlEnable(uint32_t mask     /*  [ IN ] Bit map of type chipcHw_REG_MISC_CTRL_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:474:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:478:
+/**
+*  @brief    Set OTP options

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1053: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:487:
+static inline void chipcHw_setOTPOption(uint64_t mask  /*  [ IN ] Bit map of type chipcHw_REG_OTP_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setOTPOption>
#1053: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:487:
+static inline void chipcHw_setOTPOption(uint64_t mask  /*  [ IN ] Bit map of type chipcHw_REG_OTP_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:488:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1058: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:492:
+/**
+*  @brief    Get sticky bits

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getStickyBits>
#1064: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:498:
+static inline uint32_t chipcHw_getStickyBits(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1068: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:502:
+/**
+*  @brief    Set sticky bits

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#1075: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:509:
+static inline void chipcHw_setStickyBits(uint32_t mask /*  [ IN ] Bit map of type chipcHw_REG_STICKY_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setStickyBits>
#1075: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:509:
+static inline void chipcHw_setStickyBits(uint32_t mask /*  [ IN ] Bit map of type chipcHw_REG_STICKY_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:510:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1080: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:514:
+/**
+*  @brief    Clear sticky bits

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#1087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:521:
+static inline void chipcHw_clearStickyBits(uint32_t mask       /*  [ IN ] Bit map of type chipcHw_REG_STICKY_XXXXXX */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_clearStickyBits>
#1087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:521:
+static inline void chipcHw_clearStickyBits(uint32_t mask       /*  [ IN ] Bit map of type chipcHw_REG_STICKY_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:522:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:526:
+/**
+*  @brief    Get software override strap options

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getSoftStraps>
#1100: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:534:
+static inline uint32_t chipcHw_getSoftStraps(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1104: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:538:
+/**
+*  @brief    Set software override strap options

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setSoftStraps>
#1112: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:546:
+static inline void chipcHw_setSoftStraps(uint32_t strapOptions);

CHECK:CAMELCASE: Avoid CamelCase: <strapOptions>
#1112: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:546:
+static inline void chipcHw_setSoftStraps(uint32_t strapOptions);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1116: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:550:
+/**
+*  @brief    Get pin strap options

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getPinStraps>
#1124: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:558:
+static inline uint32_t chipcHw_getPinStraps(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1128: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:562:
+/**
+*  @brief    Get valid pin strap options

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getValidStraps>
#1136: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:570:
+static inline uint32_t chipcHw_getValidStraps(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1140: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:574:
+/**
+*  @brief    Initialize valid pin strap options

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_initValidStraps>
#1149: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:583:
+static inline void chipcHw_initValidStraps(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1153: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:587:
+/**
+*  @brief   Get status (enabled/disabled) of bus interface clock

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getBusInterfaceClockStatus>
#1161: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:595:
+static inline uint32_t chipcHw_getBusInterfaceClockStatus(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1165: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:599:
+/**
+*  @brief   Get boot device

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getBootDevice>
#1173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:607:
+static inline chipcHw_BOOT_DEVICE_e chipcHw_getBootDevice(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1177: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:611:
+/**
+*  @brief   Get boot mode

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getBootMode>
#1185: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:619:
+static inline chipcHw_BOOT_MODE_e chipcHw_getBootMode(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1189: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:623:
+/**
+*  @brief   Get NAND flash page size

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getNandPageSize>
#1197: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:631:
+static inline chipcHw_NAND_PAGESIZE_e chipcHw_getNandPageSize(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1201: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:635:
+/**
+*  @brief   Get NAND flash address cycle configuration

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getNandExtraCycle>
#1209: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:643:
+static inline int chipcHw_getNandExtraCycle(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1213: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:647:
+/**
+*  @brief   Activates PIF interface

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_activatePifInterface>
#1233: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:667:
+static inline void chipcHw_activatePifInterface(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1237: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:671:
+/**
+*  @brief   Activates LCD interface

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_activateLcdInterface>
#1253: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:687:
+static inline void chipcHw_activateLcdInterface(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1257: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:691:
+/**
+*  @brief   Deactivates PIF/LCD interface

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_deactivatePifLcdInterface>
#1266: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:700:
+static inline void chipcHw_deactivatePifLcdInterface(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1270: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:704:
+/**
+*  @brief   Get to know the configuration of GPIO pin

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getGpioPinFunction>
#1274: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:708:
+static inline chipcHw_GPIO_FUNCTION_e chipcHw_getGpioPinFunction(int pin       /* GPIO Pin number */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1275: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:709:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1279: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:713:
+/**
+*  @brief   Configure GPIO pin function

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setGpioPinFunction>
#1283: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:717:
+static inline void chipcHw_setGpioPinFunction(int pin, /* GPIO Pin number */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#1284: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:718:
+                                             chipcHw_GPIO_FUNCTION_e func      /* Configuration function */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1284: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:718:
+                                             chipcHw_GPIO_FUNCTION_e func      /* Configuration function */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1284: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:718:
+                                             chipcHw_GPIO_FUNCTION_e func      /* Configuration function */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:719:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1289: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:723:
+/**
+*  @brief   Set Pin slew rate

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setPinSlewRate>
#1295: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:729:
+static inline void chipcHw_setPinSlewRate(uint32_t pin,        /* Pin of type chipcHw_PIN_XXXXX */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1295: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:729:
+static inline void chipcHw_setPinSlewRate(uint32_t pin,        /* Pin of type chipcHw_PIN_XXXXX */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1296: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:730:
+                                         chipcHw_PIN_SLEW_RATE_e slewRate      /* Pin slew rate */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1296: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:730:
+                                         chipcHw_PIN_SLEW_RATE_e slewRate      /* Pin slew rate */$

CHECK:CAMELCASE: Avoid CamelCase: <slewRate>
#1296: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:730:
+                                         chipcHw_PIN_SLEW_RATE_e slewRate      /* Pin slew rate */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1297: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:731:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1301: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:735:
+/**
+*  @brief   Set Pin output drive current

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setPinOutputCurrent>
#1309: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:743:
+static inline void chipcHw_setPinOutputCurrent(uint32_t pin,   /* Pin of type chipcHw_PIN_XXXXX */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1309: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:743:
+static inline void chipcHw_setPinOutputCurrent(uint32_t pin,   /* Pin of type chipcHw_PIN_XXXXX */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#1310: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:744:
+                                              chipcHw_PIN_CURRENT_STRENGTH_e curr      /* Pin current rating */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1310: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:744:
+                                              chipcHw_PIN_CURRENT_STRENGTH_e curr      /* Pin current rating */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1310: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:744:
+                                              chipcHw_PIN_CURRENT_STRENGTH_e curr      /* Pin current rating */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1311: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:745:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1315: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:749:
+/**
+*  @brief   Set Pin pullup register

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setPinPullup>
#1321: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:755:
+static inline void chipcHw_setPinPullup(uint32_t pin,  /* Pin of type chipcHw_PIN_XXXXX */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1321: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:755:
+static inline void chipcHw_setPinPullup(uint32_t pin,  /* Pin of type chipcHw_PIN_XXXXX */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1322: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:756:
+                                       chipcHw_PIN_PULL_e pullup       /* Pullup register settings */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1322: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:756:
+                                       chipcHw_PIN_PULL_e pullup       /* Pullup register settings */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1322: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:756:
+                                       chipcHw_PIN_PULL_e pullup       /* Pullup register settings */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:757:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1327: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:761:
+/**
+*  @brief   Set Pin input type

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setPinInputType>
#1333: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:767:
+static inline void chipcHw_setPinInputType(uint32_t pin,       /* Pin of type chipcHw_PIN_XXXXX */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1333: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:767:
+static inline void chipcHw_setPinInputType(uint32_t pin,       /* Pin of type chipcHw_PIN_XXXXX */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1334: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:768:
+                                          chipcHw_PIN_INPUTTYPE_e inputType    /* Pin input type */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1334: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:768:
+                                          chipcHw_PIN_INPUTTYPE_e inputType    /* Pin input type */$

CHECK:CAMELCASE: Avoid CamelCase: <inputType>
#1334: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:768:
+                                          chipcHw_PIN_INPUTTYPE_e inputType    /* Pin input type */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1335: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:769:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1339: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:773:
+/**
+*  @brief   Retrieves a string representation of the mux setting for a pin.

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getGpioPinFunctionStr>
#1345: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:779:
+const char *chipcHw_getGpioPinFunctionStr(int pin);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_reset>
#1351: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:785:
+void chipcHw_reset(uint32_t mask);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_clockReconfig>
#1357: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:791:
+void chipcHw_clockReconfig(uint32_t busHz, uint32_t armRatio, uint32_t vpmRatio,

CHECK:CAMELCASE: Avoid CamelCase: <armRatio>
#1357: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:791:
+void chipcHw_clockReconfig(uint32_t busHz, uint32_t armRatio, uint32_t vpmRatio,

CHECK:CAMELCASE: Avoid CamelCase: <vpmRatio>
#1357: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:791:
+void chipcHw_clockReconfig(uint32_t busHz, uint32_t armRatio, uint32_t vpmRatio,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1357: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:791:
+void chipcHw_clockReconfig(uint32_t busHz, uint32_t armRatio, uint32_t vpmRatio,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1358: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:792:
+                          uint32_t ddrRatio);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1358: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:792:
+void chipcHw_clockReconfig(uint32_t busHz, uint32_t armRatio, uint32_t vpmRatio,
+                          uint32_t ddrRatio);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1358: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:792:
+                          uint32_t ddrRatio);$

CHECK:CAMELCASE: Avoid CamelCase: <ddrRatio>
#1358: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:792:
+                          uint32_t ddrRatio);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1362: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:796:
+/**
+*  @brief   Enable Spread Spectrum

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_enableSpreadSpectrum>
#1367: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:801:
+static inline void chipcHw_enableSpreadSpectrum(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1371: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:805:
+/**
+*  @brief   Disable Spread Spectrum

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_disableSpreadSpectrum>
#1375: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:809:
+static inline void chipcHw_disableSpreadSpectrum(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_isSoftwareStrapsEnable>
#1384: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:818:
+static inline int chipcHw_isSoftwareStrapsEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_softwareStrapsEnable>
#1390: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:824:
+static inline void chipcHw_softwareStrapsEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_softwareStrapsDisable>
#1396: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:830:
+static inline void chipcHw_softwareStrapsDisable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pllTestEnable>
#1402: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:836:
+static inline void chipcHw_pllTestEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll2TestEnable>
#1408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:842:
+static inline void chipcHw_pll2TestEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pllTestDisable>
#1414: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:848:
+static inline void chipcHw_pllTestDisable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll2TestDisable>
#1420: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:854:
+static inline void chipcHw_pll2TestDisable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_isPllTestEnable>
#1426: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:860:
+static inline int chipcHw_isPllTestEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_isPll2TestEnable>
#1432: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:866:
+static inline int chipcHw_isPll2TestEnable(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pllTestSelect>
#1438: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:872:
+static inline void chipcHw_pllTestSelect(uint32_t val);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_pll2TestSelect>
#1444: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:878:
+static inline void chipcHw_pll2TestSelect(uint32_t val);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getPllTestSelected>
#1450: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:884:
+static inline uint8_t chipcHw_getPllTestSelected(void);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getPll2TestSelected>
#1456: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:890:
+static inline uint8_t chipcHw_getPll2TestSelected(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1460: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:894:
+/**
+*  @brief   Enables DDR SW phase alignment interrupt

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrPhaseAlignInterruptEnable>
#1463: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:897:
+static inline void chipcHw_ddrPhaseAlignInterruptEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1467: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:901:
+/**
+*  @brief   Disables DDR SW phase alignment interrupt

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrPhaseAlignInterruptDisable>
#1470: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:904:
+static inline void chipcHw_ddrPhaseAlignInterruptDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1474: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:908:
+/**
+*  @brief   Set VPM SW phase alignment interrupt mode

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmPhaseAlignInterruptMode>
#1481: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:915:
+chipcHw_vpmPhaseAlignInterruptMode(chipcHw_VPM_HW_PHASE_INTR_e mode);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1485: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:919:
+/**
+*  @brief   Enable DDR phase alignment in software

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrSwPhaseAlignEnable>
#1489: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:923:
+static inline void chipcHw_ddrSwPhaseAlignEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1493: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:927:
+/**
+*  @brief   Disable DDR phase alignment in software

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrSwPhaseAlignDisable>
#1497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:931:
+static inline void chipcHw_ddrSwPhaseAlignDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1501: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:935:
+/**
+*  @brief   Enable DDR phase alignment in hardware

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignEnable>
#1505: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:939:
+static inline void chipcHw_ddrHwPhaseAlignEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1509: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:943:
+/**
+*  @brief   Disable DDR phase alignment in hardware

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignDisable>
#1513: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:947:
+static inline void chipcHw_ddrHwPhaseAlignDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1517: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:951:
+/**
+*  @brief   Enable VPM phase alignment in software

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmSwPhaseAlignEnable>
#1521: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:955:
+static inline void chipcHw_vpmSwPhaseAlignEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1525: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:959:
+/**
+*  @brief   Disable VPM phase alignment in software

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmSwPhaseAlignDisable>
#1529: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:963:
+static inline void chipcHw_vpmSwPhaseAlignDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1533: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:967:
+/**
+*  @brief   Enable VPM phase alignment in hardware

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignEnable>
#1537: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:971:
+static inline void chipcHw_vpmHwPhaseAlignEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1541: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:975:
+/**
+*  @brief   Disable VPM phase alignment in hardware

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignDisable>
#1545: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:979:
+static inline void chipcHw_vpmHwPhaseAlignDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1549: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:983:
+/**
+*  @brief   Set DDR phase alignment margin in hardware

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#1553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:987:
+static inline void chipcHw_setDdrHwPhaseAlignMargin(chipcHw_DDR_HW_PHASE_MARGIN_e margin       /* Margin alinging DDR  phase */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setDdrHwPhaseAlignMargin>
#1553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:987:
+static inline void chipcHw_setDdrHwPhaseAlignMargin(chipcHw_DDR_HW_PHASE_MARGIN_e margin       /* Margin alinging DDR  phase */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1554: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:988:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1558: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:992:
+/**
+*  @brief   Set VPM phase alignment margin in hardware

WARNING:LONG_LINE_COMMENT: line length of 127 exceeds 100 columns
#1562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:996:
+static inline void chipcHw_setVpmHwPhaseAlignMargin(chipcHw_VPM_HW_PHASE_MARGIN_e margin       /* Margin alinging VPM  phase */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setVpmHwPhaseAlignMargin>
#1562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:996:
+static inline void chipcHw_setVpmHwPhaseAlignMargin(chipcHw_VPM_HW_PHASE_MARGIN_e margin       /* Margin alinging VPM  phase */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1563: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:997:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1567: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1001:
+/**
+*  @brief   Checks DDR phase aligned status done by HW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_isDdrHwPhaseAligned>
#1573: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1007:
+static inline uint32_t chipcHw_isDdrHwPhaseAligned(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1577: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1011:
+/**
+*  @brief   Checks VPM phase aligned status done by HW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_isVpmHwPhaseAligned>
#1583: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1017:
+static inline uint32_t chipcHw_isVpmHwPhaseAligned(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1587: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1021:
+/**
+*  @brief   Get DDR phase aligned status done by HW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getDdrHwPhaseAlignStatus>
#1591: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1025:
+static inline uint32_t chipcHw_getDdrHwPhaseAlignStatus(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1595: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1029:
+/**
+*  @brief   Get VPM phase aligned status done by HW

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getVpmHwPhaseAlignStatus>
#1599: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1033:
+static inline uint32_t chipcHw_getVpmHwPhaseAlignStatus(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1037:
+/**
+*  @brief   Get DDR phase control value

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getDdrPhaseControl>
#1607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1041:
+static inline uint32_t chipcHw_getDdrPhaseControl(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1611: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1045:
+/**
+*  @brief   Get VPM phase control value

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_getVpmPhaseControl>
#1615: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1049:
+static inline uint32_t chipcHw_getVpmPhaseControl(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1053:
+/**
+*  @brief   DDR phase alignment timeout count

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignTimeout>
#1625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1059:
+static inline void chipcHw_ddrHwPhaseAlignTimeout(uint32_t busCycle    /* Timeout in bus cycle */

CHECK:CAMELCASE: Avoid CamelCase: <busCycle>
#1625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1059:
+static inline void chipcHw_ddrHwPhaseAlignTimeout(uint32_t busCycle    /* Timeout in bus cycle */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1626: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1060:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1630: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1064:
+/**
+*  @brief   VPM phase alignment timeout count

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignTimeout>
#1636: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1070:
+static inline void chipcHw_vpmHwPhaseAlignTimeout(uint32_t busCycle    /* Timeout in bus cycle */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1637: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1071:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1641: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1075:
+/**
+*  @brief   DDR phase alignment timeout interrupt enable

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignTimeoutInterruptEnable>
#1645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1079:
+static inline void chipcHw_ddrHwPhaseAlignTimeoutInterruptEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1649: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1083:
+/**
+*  @brief   VPM phase alignment timeout interrupt enable

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignTimeoutInterruptEnable>
#1653: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1087:
+static inline void chipcHw_vpmHwPhaseAlignTimeoutInterruptEnable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1657: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1091:
+/**
+*  @brief   DDR phase alignment timeout interrupt disable

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignTimeoutInterruptDisable>
#1661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1095:
+static inline void chipcHw_ddrHwPhaseAlignTimeoutInterruptDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1099:
+/**
+*  @brief   VPM phase alignment timeout interrupt disable

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignTimeoutInterruptDisable>
#1669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1103:
+static inline void chipcHw_vpmHwPhaseAlignTimeoutInterruptDisable(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1107:
+/**
+*  @brief   Clear DDR phase alignment timeout interrupt

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_ddrHwPhaseAlignTimeoutInterruptClear>
#1677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1111:
+static inline void chipcHw_ddrHwPhaseAlignTimeoutInterruptClear(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1681: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1115:
+/**
+*  @brief   Clear VPM phase alignment timeout interrupt

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_vpmHwPhaseAlignTimeoutInterruptClear>
#1685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_def.h:1119:
+static inline void chipcHw_vpmHwPhaseAlignTimeoutInterruptClear(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1696: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1697: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1721: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:26:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1722: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:27:
+       chipcHw_OPTYPE_BYPASS,  /* Bypass operation */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_OPTYPE_BYPASS>
#1722: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:27:
+       chipcHw_OPTYPE_BYPASS,  /* Bypass operation */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1723: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:28:
+       chipcHw_OPTYPE_OUTPUT   /* Output operation */$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_OPTYPE_OUTPUT>
#1723: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:28:
+       chipcHw_OPTYPE_OUTPUT   /* Output operation */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_OPTYPE_e>
#1724: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:29:
+} chipcHw_OPTYPE_e;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setClock>
#1730: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:35:
+static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:36:
+                                   chipcHw_OPTYPE_e type, int mode);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:36:
+static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
+                                   chipcHw_OPTYPE_e type, int mode);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:36:
+                                   chipcHw_OPTYPE_e type, int mode);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1735: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:40:
+/**
+*  @brief   Get Numeric Chip ID

WARNING:TYPO_SPELLING: 'revison' may be misspelled - perhaps 'revision'?
#1737: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:42:
+*  This function returns Chip ID that includes the revison number
                                                    ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1745: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:50:
+       return pChipcHw->ChipId;$

CHECK:CAMELCASE: Avoid CamelCase: <pChipcHw>
#1745: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:50:
+       return pChipcHw->ChipId;

CHECK:CAMELCASE: Avoid CamelCase: <ChipId>
#1745: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:50:
+       return pChipcHw->ChipId;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:55:
+/**
+*  @brief   Enable Spread Spectrum

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1757: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:62:
+       if ((pChipcHw->$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1757: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:62:
+       if ((pChipcHw->
[...]
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCfg =

ERROR:CODE_INDENT: code indent should use tabs where possible
#1758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:63:
+            PLLPreDivider & chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK) !=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:63:
+            PLLPreDivider & chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK) !=$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PLLPreDivider'
#1758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:63:
+       if ((pChipcHw->
+            PLLPreDivider & chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK) !=

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:CAMELCASE: Avoid CamelCase: <PLLPreDivider>
#1758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:63:
+            PLLPreDivider & chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK) !=

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK>
#1758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:63:
+            PLLPreDivider & chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASK) !=

ERROR:CODE_INDENT: code indent should use tabs where possible
#1759: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:64:
+           chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_INTEGER) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1759: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:64:
+           chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_INTEGER) {$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_INTEGER>
#1759: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:64:
+           chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_INTEGER) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:65:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCfg =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:65:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCfg =$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REGP>
#1760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:65:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCfg =

CHECK:CAMELCASE: Avoid CamelCase: <ssCfg>
#1760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:65:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCfg =

ERROR:CODE_INDENT: code indent should use tabs where possible
#1761: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:66:
+                   (0xFFFF << ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_SHIFT) |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1761: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:66:
+                   (0xFFFF << ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_SHIFT) |$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_SHIFT>
#1761: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:66:
+                   (0xFFFF << ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_SHIFT) |

ERROR:CODE_INDENT: code indent should use tabs where possible
#1762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:67:
+                   (ddrcReg_PHY_ADDR_SS_CFG_MIN_CYCLE_PER_TICK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:67:
+                   (ddrcReg_PHY_ADDR_SS_CFG_MIN_CYCLE_PER_TICK <<$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CFG_MIN_CYCLE_PER_TICK>
#1762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:67:
+                   (ddrcReg_PHY_ADDR_SS_CFG_MIN_CYCLE_PER_TICK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#1763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:68:
+                    ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:68:
+                    ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_SHIFT);$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_SHIFT>
#1763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:68:
+                    ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_SHIFT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:69:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCtl |=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:69:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCtl |=$

CHECK:CAMELCASE: Avoid CamelCase: <ssCtl>
#1764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:69:
+               ddrcReg_PHY_ADDR_CTL_REGP->ssCtl |=

ERROR:CODE_INDENT: code indent should use tabs where possible
#1765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:70:
+                   ddrcReg_PHY_ADDR_SS_CTRL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:70:
+                   ddrcReg_PHY_ADDR_SS_CTRL_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CTRL_ENABLE>
#1765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:70:
+                   ddrcReg_PHY_ADDR_SS_CTRL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1766: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:71:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1771: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:76:
+/**
+*  @brief   Disable Spread Spectrum

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1777: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:82:
+       ddrcReg_PHY_ADDR_CTL_REGP->ssCtl &= ~ddrcReg_PHY_ADDR_SS_CTRL_ENABLE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1782: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:87:
+/**
+*  @brief   Get Chip Product ID

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1791: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:96:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:97:
+                ChipId & chipcHw_REG_CHIPID_BASE_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:97:
+                ChipId & chipcHw_REG_CHIPID_BASE_MASK) >>$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->ChipId'
#1792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:97:
+       return (pChipcHw->
+                ChipId & chipcHw_REG_CHIPID_BASE_MASK) >>

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CHIPID_BASE_MASK>
#1792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:97:
+                ChipId & chipcHw_REG_CHIPID_BASE_MASK) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#1793: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:98:
+               chipcHw_REG_CHIPID_BASE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1793: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:98:
+               chipcHw_REG_CHIPID_BASE_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CHIPID_BASE_SHIFT>
#1793: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:98:
+               chipcHw_REG_CHIPID_BASE_SHIFT;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1798: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:103:
+/**
+*  @brief   Get revision number

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:112:
+       return pChipcHw->ChipId & chipcHw_REG_CHIPID_REV_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CHIPID_REV_MASK>
#1807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:112:
+       return pChipcHw->ChipId & chipcHw_REG_CHIPID_REV_MASK;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1812: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:117:
+/**
+*  @brief   Enables bus interface clock

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:128:
+       reg32_modify_or(&pChipcHw->BusIntfClock, mask);$

CHECK:CAMELCASE: Avoid CamelCase: <BusIntfClock>
#1823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:128:
+       reg32_modify_or(&pChipcHw->BusIntfClock, mask);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1828: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:133:
+/**
+*  @brief   Disables bus interface clock

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1839: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:144:
+       reg32_modify_and(&pChipcHw->BusIntfClock, ~mask);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1844: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:149:
+/**
+*  @brief   Get status (enabled/disabled) of bus interface clock

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1854: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:159:
+       return pChipcHw->BusIntfClock;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1859: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:164:
+/**
+*  @brief   Enables various audio channels

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1870: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:175:
+       reg32_modify_or(&pChipcHw->AudioEnable, mask);$

CHECK:CAMELCASE: Avoid CamelCase: <AudioEnable>
#1870: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:175:
+       reg32_modify_or(&pChipcHw->AudioEnable, mask);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1875: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:180:
+/**
+*  @brief   Disables various audio channels

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1886: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:191:
+       reg32_modify_and(&pChipcHw->AudioEnable, ~mask);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1891: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:196:
+/**
+*  @brief    Soft resets devices

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1902: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:207:
+       chipcHw_softResetEnable(mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1903: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:208:
+       chipcHw_softResetDisable(mask);$

CHECK:SPACING: No space is necessary after a cast
#1908: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:213:
+       uint32_t ctrl1 = (uint32_t) mask;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1908: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:213:
+       uint32_t ctrl1 = (uint32_t) mask;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1908: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:213:
+       uint32_t ctrl1 = (uint32_t) mask;

CHECK:SPACING: No space is necessary after a cast
#1909: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:214:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1909: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:214:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1909: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:214:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1912: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:217:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1913: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:218:
+       pChipcHw->SoftReset1 ^= ctrl1;$

CHECK:CAMELCASE: Avoid CamelCase: <SoftReset1>
#1913: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:218:
+       pChipcHw->SoftReset1 ^= ctrl1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1914: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:219:
+       pChipcHw->SoftReset2 ^= (ctrl2 & (~chipcHw_REG_SOFT_RESET_UNHOLD_MASK));$

CHECK:CAMELCASE: Avoid CamelCase: <SoftReset2>
#1914: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:219:
+       pChipcHw->SoftReset2 ^= (ctrl2 & (~chipcHw_REG_SOFT_RESET_UNHOLD_MASK));

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_UNHOLD_MASK>
#1914: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:219:
+       pChipcHw->SoftReset2 ^= (ctrl2 & (~chipcHw_REG_SOFT_RESET_UNHOLD_MASK));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1915: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:220:
+       REG_LOCAL_IRQ_RESTORE;$

CHECK:SPACING: No space is necessary after a cast
#1920: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:225:
+       uint32_t ctrl1 = (uint32_t) mask;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1920: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:225:
+       uint32_t ctrl1 = (uint32_t) mask;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1920: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:225:
+       uint32_t ctrl1 = (uint32_t) mask;

CHECK:SPACING: No space is necessary after a cast
#1921: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:226:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1921: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:226:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1921: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:226:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1922: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:227:
+       uint32_t unhold = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1922: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:227:
+       uint32_t unhold = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1924: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:229:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1925: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:230:
+       pChipcHw->SoftReset1 |= ctrl1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1927: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:232:
+       pChipcHw->SoftReset2 |= (ctrl2 & (~chipcHw_REG_SOFT_RESET_UNHOLD_MASK));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1930: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:235:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1930: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:235:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD) {
+               unhold = chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD>
#1930: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:235:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1930: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:235:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD) {
+               unhold = chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:236:
+               unhold = chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:236:
+               unhold = chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD>
#1931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:236:
+               unhold = chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1932: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:237:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1934: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:239:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_UNHOLD) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1934: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:239:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_UNHOLD) {
+               unhold |= chipcHw_REG_SOFT_RESET_VPM_HOLD;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM_UNHOLD>
#1934: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:239:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_UNHOLD) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1934: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:239:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_VPM_UNHOLD) {
+               unhold |= chipcHw_REG_SOFT_RESET_VPM_HOLD;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1935: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:240:
+               unhold |= chipcHw_REG_SOFT_RESET_VPM_HOLD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1935: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:240:
+               unhold |= chipcHw_REG_SOFT_RESET_VPM_HOLD;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM_HOLD>
#1935: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:240:
+               unhold |= chipcHw_REG_SOFT_RESET_VPM_HOLD;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1936: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:241:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1938: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:243:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_ARM_UNHOLD) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1938: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:243:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_ARM_UNHOLD) {
+               unhold |= chipcHw_REG_SOFT_RESET_ARM_HOLD;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ARM_UNHOLD>
#1938: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:243:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_ARM_UNHOLD) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1938: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:243:
+       if (ctrl2 & chipcHw_REG_SOFT_RESET_ARM_UNHOLD) {
+               unhold |= chipcHw_REG_SOFT_RESET_ARM_HOLD;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#1939: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:244:
+               unhold |= chipcHw_REG_SOFT_RESET_ARM_HOLD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1939: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:244:
+               unhold |= chipcHw_REG_SOFT_RESET_ARM_HOLD;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ARM_HOLD>
#1939: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:244:
+               unhold |= chipcHw_REG_SOFT_RESET_ARM_HOLD;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1940: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:245:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1942: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:247:
+       if (unhold) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1942: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:247:
+       if (unhold) {
[...]
+               pChipcHw->SoftReset1 &= ~unhold;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1943: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:248:
+               /* Make sure unhold request is effective */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1944: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:249:
+               pChipcHw->SoftReset1 &= ~unhold;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1944: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:249:
+               pChipcHw->SoftReset1 &= ~unhold;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1945: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:250:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1946: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:251:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1951: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:256:
+/**
+*  @brief    Configures misc CHIP functionality

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1962: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:267:
+       reg32_write(&pChipcHw->MiscCtrl, mask);$

CHECK:CAMELCASE: Avoid CamelCase: <MiscCtrl>
#1962: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:267:
+       reg32_write(&pChipcHw->MiscCtrl, mask);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1967: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:272:
+       reg32_modify_and(&pChipcHw->MiscCtrl, ~mask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1972: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:277:
+       reg32_modify_or(&pChipcHw->MiscCtrl, mask);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1977: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:282:
+/**
+*  @brief    Set OTP options

CHECK:SPACING: No space is necessary after a cast
#1988: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:293:
+       uint32_t ctrl1 = (uint32_t) mask;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1988: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:293:
+       uint32_t ctrl1 = (uint32_t) mask;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1988: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:293:
+       uint32_t ctrl1 = (uint32_t) mask;

CHECK:SPACING: No space is necessary after a cast
#1989: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:294:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1989: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:294:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1989: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:294:
+       uint32_t ctrl2 = (uint32_t) (mask >> 32);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1991: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:296:
+       reg32_modify_or(&pChipcHw->SoftOTP1, ctrl1);$

CHECK:CAMELCASE: Avoid CamelCase: <SoftOTP1>
#1991: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:296:
+       reg32_modify_or(&pChipcHw->SoftOTP1, ctrl1);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1992: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:297:
+       reg32_modify_or(&pChipcHw->SoftOTP2, ctrl2);$

CHECK:CAMELCASE: Avoid CamelCase: <SoftOTP2>
#1992: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:297:
+       reg32_modify_or(&pChipcHw->SoftOTP2, ctrl2);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1997: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:302:
+/**
+*  @brief    Get sticky bits

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2005: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:310:
+       return pChipcHw->Sticky;$

CHECK:CAMELCASE: Avoid CamelCase: <Sticky>
#2005: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:310:
+       return pChipcHw->Sticky;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2010: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:315:
+/**
+*  @brief    Set sticky bits

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2019: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:324:
+       uint32_t bits = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2019: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:324:
+       uint32_t bits = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2021: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:326:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2022: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:327:
+       if (mask & chipcHw_REG_STICKY_POR_BROM) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2022: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:327:
+       if (mask & chipcHw_REG_STICKY_POR_BROM) {
+               bits |= chipcHw_REG_STICKY_POR_BROM;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_POR_BROM>
#2022: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:327:
+       if (mask & chipcHw_REG_STICKY_POR_BROM) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2023: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:328:
+               bits |= chipcHw_REG_STICKY_POR_BROM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2023: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:328:
+               bits |= chipcHw_REG_STICKY_POR_BROM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2024: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:329:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2024: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:329:
+       } else {
+               uint32_t sticky;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2025: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:330:
+               uint32_t sticky;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2025: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:330:
+               uint32_t sticky;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2025: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:330:
+               uint32_t sticky;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2026: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:331:
+               sticky = pChipcHw->Sticky;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2026: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:331:
+               uint32_t sticky;
+               sticky = pChipcHw->Sticky;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2026: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:331:
+               sticky = pChipcHw->Sticky;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2028: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:333:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2028: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:333:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2028: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:333:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)
[...]
+                       bits |= chipcHw_REG_STICKY_BOOT_DONE;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_BOOT_DONE>
#2028: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:333:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2029: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:334:
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2029: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:334:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2029: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:334:
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2030: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:335:
+                       bits |= chipcHw_REG_STICKY_BOOT_DONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2030: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:335:
+                       bits |= chipcHw_REG_STICKY_BOOT_DONE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2031: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:336:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2031: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:336:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2032: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:337:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2032: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:337:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2032: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:337:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_GENERAL_1>
#2032: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:337:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2033: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:338:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2033: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:338:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2033: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:338:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2034: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:339:
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2034: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:339:
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2035: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:340:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2035: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:340:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:341:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:341:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:341:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_GENERAL_2>
#2036: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:341:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2037: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:342:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2037: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:342:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2037: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:342:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2038: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:343:
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2038: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:343:
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2039: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:344:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2039: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:344:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2040: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:345:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2040: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:345:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2040: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:345:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_GENERAL_3>
#2040: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:345:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2041: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:346:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2041: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:346:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2041: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:346:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2042: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:347:
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2042: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:347:
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2043: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:348:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2043: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:348:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:349:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:349:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:349:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_GENERAL_4>
#2044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:349:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2045: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:350:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2045: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:350:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2045: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:350:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2046: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:351:
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2046: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:351:
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2047: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:352:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2047: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:352:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2048: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:353:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2048: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:353:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2048: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:353:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_GENERAL_5>
#2048: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:353:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2049: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:354:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5) == 0) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2049: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:354:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5) == 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2049: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:354:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5) == 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2050: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:355:
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2050: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:355:
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2051: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:356:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2051: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:356:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2052: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:357:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2053: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:358:
+       pChipcHw->Sticky = bits;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2054: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:359:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2059: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:364:
+/**
+*  @brief    Clear sticky bits

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2068: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:373:
+       uint32_t bits = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2068: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:373:
+       uint32_t bits = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2070: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:375:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2071: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:376:
+       if (mask &$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2071: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:376:
+       if (mask &
[...]
+               uint32_t sticky = pChipcHw->Sticky;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2072: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:377:
+           (chipcHw_REG_STICKY_BOOT_DONE | chipcHw_REG_STICKY_GENERAL_1 |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2072: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:377:
+           (chipcHw_REG_STICKY_BOOT_DONE | chipcHw_REG_STICKY_GENERAL_1 |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2073: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:378:
+            chipcHw_REG_STICKY_GENERAL_2 | chipcHw_REG_STICKY_GENERAL_3 |$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2073: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:378:
+            chipcHw_REG_STICKY_GENERAL_2 | chipcHw_REG_STICKY_GENERAL_3 |$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2074: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:379:
+            chipcHw_REG_STICKY_GENERAL_4 | chipcHw_REG_STICKY_GENERAL_5)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2074: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:379:
+            chipcHw_REG_STICKY_GENERAL_4 | chipcHw_REG_STICKY_GENERAL_5)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2075: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:380:
+               uint32_t sticky = pChipcHw->Sticky;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2075: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:380:
+               uint32_t sticky = pChipcHw->Sticky;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2075: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:380:
+               uint32_t sticky = pChipcHw->Sticky;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2077: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:382:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2077: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:382:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2077: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:382:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)
[...]
+                       bits = chipcHw_REG_STICKY_BOOT_DONE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2078: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:383:
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2078: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:383:
+               if ((mask & chipcHw_REG_STICKY_BOOT_DONE)
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2078: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:383:
+                   && (sticky & chipcHw_REG_STICKY_BOOT_DONE)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2079: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:384:
+                       bits = chipcHw_REG_STICKY_BOOT_DONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2079: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:384:
+                       bits = chipcHw_REG_STICKY_BOOT_DONE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2080: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:385:
+                       mask &= ~chipcHw_REG_STICKY_BOOT_DONE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2080: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:385:
+                       mask &= ~chipcHw_REG_STICKY_BOOT_DONE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2081: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:386:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2081: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:386:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2082: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:387:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2082: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:387:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2082: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:387:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2083: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:388:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2083: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:388:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_1)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2083: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:388:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_1)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2084: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:389:
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2084: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:389:
+                       bits |= chipcHw_REG_STICKY_GENERAL_1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2085: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:390:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2085: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:390:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2086: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:391:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2086: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:391:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:392:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:392:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:392:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:393:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:393:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_2)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:393:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_2)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2089: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:394:
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2089: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:394:
+                       bits |= chipcHw_REG_STICKY_GENERAL_2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2090: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:395:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2090: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:395:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2091: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:396:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2091: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:396:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:397:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:397:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:397:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2093: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:398:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2093: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:398:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_3)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2093: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:398:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_3)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2094: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:399:
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2094: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:399:
+                       bits |= chipcHw_REG_STICKY_GENERAL_3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2095: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:400:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2095: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:400:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_3;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2096: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:401:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2096: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:401:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2097: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:402:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2097: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:402:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2097: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:402:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2098: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:403:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2098: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:403:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_4)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2098: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:403:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_4)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2099: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:404:
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2099: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:404:
+                       bits |= chipcHw_REG_STICKY_GENERAL_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2100: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:405:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2100: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:405:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2101: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:406:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2101: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:406:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2102: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:407:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2102: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:407:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2102: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:407:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)
[...]
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2103: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:408:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5)) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2103: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:408:
+               if ((mask & chipcHw_REG_STICKY_GENERAL_5)
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2103: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:408:
+                   && (sticky & chipcHw_REG_STICKY_GENERAL_5)) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2104: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:409:
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2104: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:409:
+                       bits |= chipcHw_REG_STICKY_GENERAL_5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2105: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:410:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_5;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2105: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:410:
+                       mask &= ~chipcHw_REG_STICKY_GENERAL_5;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2106: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:411:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2106: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:411:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2107: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:412:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2108: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:413:
+       pChipcHw->Sticky = bits | mask;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2109: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:414:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2114: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:419:
+/**
+*  @brief    Get software strap value

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2124: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:429:
+       return pChipcHw->SoftStraps;$

CHECK:CAMELCASE: Avoid CamelCase: <SoftStraps>
#2124: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:429:
+       return pChipcHw->SoftStraps;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2129: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:434:
+/**
+*  @brief    Set software override strap options

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2139: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:444:
+       reg32_write(&pChipcHw->SoftStraps, strapOptions);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2144: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:449:
+/**
+*  @brief   Get Pin Strap Options

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2154: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:459:
+       return pChipcHw->PinStraps;$

CHECK:CAMELCASE: Avoid CamelCase: <PinStraps>
#2154: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:459:
+       return pChipcHw->PinStraps;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2159: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:464:
+/**
+*  @brief   Get Valid Strap Options

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2169: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:474:
+       uint32_t softStraps;$

CHECK:CAMELCASE: Avoid CamelCase: <softStraps>
#2169: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:474:
+       uint32_t softStraps;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2169: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:474:
+       uint32_t softStraps;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2172: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:477:
+        ** Always return the SoftStraps - bootROM calls chipcHw_initValidStraps$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:478:
+        ** which copies HW straps to soft straps if there is no override$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2174: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:479:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2175: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:480:
+       softStraps = chipcHw_getSoftStraps();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2177: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:482:
+       return softStraps;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2182: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:487:
+/**
+*  @brief    Initialize valid pin strap options

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2193: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:498:
+       uint32_t softStraps;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2193: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:498:
+       uint32_t softStraps;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2195: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:500:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2196: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:501:
+       softStraps = chipcHw_getSoftStraps();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2198: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:503:
+       if ((softStraps & chipcHw_STRAPS_SOFT_OVERRIDE) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2198: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:503:
+       if ((softStraps & chipcHw_STRAPS_SOFT_OVERRIDE) == 0) {
[...]
+               chipcHw_setSoftStraps(chipcHw_getPinStraps());

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_SOFT_OVERRIDE>
#2198: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:503:
+       if ((softStraps & chipcHw_STRAPS_SOFT_OVERRIDE) == 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2199: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:504:
+               /* Copy HW straps to software straps */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2200: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:505:
+               chipcHw_setSoftStraps(chipcHw_getPinStraps());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2200: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:505:
+               chipcHw_setSoftStraps(chipcHw_getPinStraps());$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2201: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:506:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2202: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:507:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2207: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:512:
+/**
+*  @brief   Get boot device

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2217: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:522:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_BOOT_DEVICE_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_DEVICE_MASK>
#2217: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:522:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_BOOT_DEVICE_MASK;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2222: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:527:
+/**
+*  @brief   Get boot mode

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2232: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:537:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_BOOT_MODE_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_MODE_MASK>
#2232: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:537:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_BOOT_MODE_MASK;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2237: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:542:
+/**
+*  @brief   Get NAND flash page size

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2247: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:552:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_PAGESIZE_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_PAGESIZE_MASK>
#2247: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:552:
+       return chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_PAGESIZE_MASK;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2252: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:557:
+/**
+*  @brief   Get NAND flash address cycle configuration

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2262: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:567:
+       if (chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_EXTRA_CYCLE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2262: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:567:
+       if (chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_EXTRA_CYCLE) {
+               return 1;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_NAND_EXTRA_CYCLE>
#2262: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:567:
+       if (chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_EXTRA_CYCLE) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2262: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:567:
+       if (chipcHw_getValidStraps() & chipcHw_STRAPS_NAND_EXTRA_CYCLE) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#2263: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:568:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2263: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:568:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2264: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:569:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2264: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:569:
+       } else {
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2265: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:570:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2265: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:570:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2266: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:571:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2271: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:576:
+/**
+*  @brief   Activates PIF interface

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2293: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:598:
+       reg32_write(&pChipcHw->LcdPifMode, chipcHw_REG_PIF_PIN_ENABLE);$

CHECK:CAMELCASE: Avoid CamelCase: <LcdPifMode>
#2293: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:598:
+       reg32_write(&pChipcHw->LcdPifMode, chipcHw_REG_PIF_PIN_ENABLE);

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PIF_PIN_ENABLE>
#2293: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:598:
+       reg32_write(&pChipcHw->LcdPifMode, chipcHw_REG_PIF_PIN_ENABLE);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2298: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:603:
+/**
+*  @brief   Activates LCD interface

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2316: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:621:
+       reg32_write(&pChipcHw->LcdPifMode, chipcHw_REG_LCD_PIN_ENABLE);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_LCD_PIN_ENABLE>
#2316: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:621:
+       reg32_write(&pChipcHw->LcdPifMode, chipcHw_REG_LCD_PIN_ENABLE);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2321: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:626:
+/**
+*  @brief   Deactivates PIF/LCD interface

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2332: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:637:
+       reg32_write(&pChipcHw->LcdPifMode, 0);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2337: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:642:
+/**
+*  @brief   Select GE2

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_selectGE2>
#2343: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:648:
+static inline void chipcHw_selectGE2(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2345: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:650:
+       reg32_modify_and(&pChipcHw->MiscCtrl, ~chipcHw_REG_MISC_CTRL_GE_SEL);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_GE_SEL>
#2345: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:650:
+       reg32_modify_and(&pChipcHw->MiscCtrl, ~chipcHw_REG_MISC_CTRL_GE_SEL);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2350: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:655:
+/**
+*  @brief   Select GE3

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_selectGE3>
#2356: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:661:
+static inline void chipcHw_selectGE3(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2358: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:663:
+       reg32_modify_or(&pChipcHw->MiscCtrl, chipcHw_REG_MISC_CTRL_GE_SEL);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2363: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:668:
+/**
+*  @brief   Get to know the configuration of GPIO pin

CHECK:SPACING: No space is necessary after a cast
#2369: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:674:
+       return (*((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) &

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2369: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:674:
+       return (*((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) &$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX>
#2369: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:674:
+       return (*((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) &

ERROR:CODE_INDENT: code indent should use tabs where possible
#2370: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:675:
+               (chipcHw_REG_GPIO_MUX_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2370: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:675:
+               (chipcHw_REG_GPIO_MUX_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_MASK>
#2370: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:675:
+               (chipcHw_REG_GPIO_MUX_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#2371: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:676:
+                chipcHw_REG_GPIO_MUX_POSITION(pin))) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2371: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:676:
+                chipcHw_REG_GPIO_MUX_POSITION(pin))) >>$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_GPIO_MUX_POSITION>
#2371: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:676:
+                chipcHw_REG_GPIO_MUX_POSITION(pin))) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#2372: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:677:
+           chipcHw_REG_GPIO_MUX_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2372: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:677:
+           chipcHw_REG_GPIO_MUX_POSITION(pin);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2377: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:682:
+/**
+*  @brief   Configure GPIO pin function

ERROR:CODE_INDENT: code indent should use tabs where possible
#2382: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:687:
+                                             chipcHw_GPIO_FUNCTION_e func)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2382: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:687:
+static inline void chipcHw_setGpioPinFunction(int pin,
+                                             chipcHw_GPIO_FUNCTION_e func)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2382: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:687:
+                                             chipcHw_GPIO_FUNCTION_e func)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2384: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:689:
+       REG_LOCAL_IRQ_SAVE;$

CHECK:SPACING: No space is necessary after a cast
#2385: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:690:
+       *((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) &=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2385: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:690:
+       *((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) &=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2386: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:691:
+           ~(chipcHw_REG_GPIO_MUX_MASK << chipcHw_REG_GPIO_MUX_POSITION(pin));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2386: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:691:
+           ~(chipcHw_REG_GPIO_MUX_MASK << chipcHw_REG_GPIO_MUX_POSITION(pin));$

CHECK:SPACING: No space is necessary after a cast
#2387: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:692:
+       *((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) |=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2387: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:692:
+       *((uint32_t *) chipcHw_REG_GPIO_MUX(pin)) |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2388: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:693:
+           func << chipcHw_REG_GPIO_MUX_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2388: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:693:
+           func << chipcHw_REG_GPIO_MUX_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2389: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:694:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2394: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:699:
+/**
+*  @brief   Set Pin slew rate

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2400: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:705:
+static inline void chipcHw_setPinSlewRate(uint32_t pin,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2401: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:706:
+                                         chipcHw_PIN_SLEW_RATE_e slewRate)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2401: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:706:
+static inline void chipcHw_setPinSlewRate(uint32_t pin,
+                                         chipcHw_PIN_SLEW_RATE_e slewRate)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2401: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:706:
+                                         chipcHw_PIN_SLEW_RATE_e slewRate)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2403: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:708:
+       REG_LOCAL_IRQ_SAVE;$

CHECK:SPACING: No space is necessary after a cast
#2404: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:709:
+       *((uint32_t *) chipcHw_REG_SLEW_RATE(pin)) &=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2404: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:709:
+       *((uint32_t *) chipcHw_REG_SLEW_RATE(pin)) &=$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SLEW_RATE>
#2404: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:709:
+       *((uint32_t *) chipcHw_REG_SLEW_RATE(pin)) &=

ERROR:CODE_INDENT: code indent should use tabs where possible
#2405: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:710:
+           ~(chipcHw_REG_SLEW_RATE_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2405: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:710:
+           ~(chipcHw_REG_SLEW_RATE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SLEW_RATE_MASK>
#2405: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:710:
+           ~(chipcHw_REG_SLEW_RATE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#2406: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:711:
+             chipcHw_REG_SLEW_RATE_POSITION(pin));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2406: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:711:
+             chipcHw_REG_SLEW_RATE_POSITION(pin));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SLEW_RATE_POSITION>
#2406: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:711:
+             chipcHw_REG_SLEW_RATE_POSITION(pin));

CHECK:SPACING: No space is necessary after a cast
#2407: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:712:
+       *((uint32_t *) chipcHw_REG_SLEW_RATE(pin)) |=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2407: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:712:
+       *((uint32_t *) chipcHw_REG_SLEW_RATE(pin)) |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:713:
+           (uint32_t) slewRate << chipcHw_REG_SLEW_RATE_POSITION(pin);$

CHECK:SPACING: No space is necessary after a cast
#2408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:713:
+           (uint32_t) slewRate << chipcHw_REG_SLEW_RATE_POSITION(pin);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:713:
+           (uint32_t) slewRate << chipcHw_REG_SLEW_RATE_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2409: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:714:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2414: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:719:
+/**
+*  @brief   Set Pin output drive current

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2422: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:727:
+static inline void chipcHw_setPinOutputCurrent(uint32_t pin,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2423: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:728:
+                                              chipcHw_PIN_CURRENT_STRENGTH_e$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2423: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:728:
+static inline void chipcHw_setPinOutputCurrent(uint32_t pin,
+                                              chipcHw_PIN_CURRENT_STRENGTH_e

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2423: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:728:
+                                              chipcHw_PIN_CURRENT_STRENGTH_e$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2424: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:729:
+                                              curr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2424: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:729:
+                                              curr)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2426: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:731:
+       REG_LOCAL_IRQ_SAVE;$

CHECK:SPACING: No space is necessary after a cast
#2427: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:732:
+       *((uint32_t *) chipcHw_REG_CURRENT(pin)) &=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2427: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:732:
+       *((uint32_t *) chipcHw_REG_CURRENT(pin)) &=$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT>
#2427: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:732:
+       *((uint32_t *) chipcHw_REG_CURRENT(pin)) &=

ERROR:CODE_INDENT: code indent should use tabs where possible
#2428: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:733:
+           ~(chipcHw_REG_CURRENT_MASK << chipcHw_REG_CURRENT_POSITION(pin));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2428: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:733:
+           ~(chipcHw_REG_CURRENT_MASK << chipcHw_REG_CURRENT_POSITION(pin));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_MASK>
#2428: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:733:
+           ~(chipcHw_REG_CURRENT_MASK << chipcHw_REG_CURRENT_POSITION(pin));

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_CURRENT_POSITION>
#2428: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:733:
+           ~(chipcHw_REG_CURRENT_MASK << chipcHw_REG_CURRENT_POSITION(pin));

CHECK:SPACING: No space is necessary after a cast
#2429: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:734:
+       *((uint32_t *) chipcHw_REG_CURRENT(pin)) |=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2429: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:734:
+       *((uint32_t *) chipcHw_REG_CURRENT(pin)) |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2430: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:735:
+           (uint32_t) curr << chipcHw_REG_CURRENT_POSITION(pin);$

CHECK:SPACING: No space is necessary after a cast
#2430: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:735:
+           (uint32_t) curr << chipcHw_REG_CURRENT_POSITION(pin);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2430: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:735:
+           (uint32_t) curr << chipcHw_REG_CURRENT_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2431: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:736:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2436: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:741:
+/**
+*  @brief   Set Pin pullup register

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2442: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:747:
+static inline void chipcHw_setPinPullup(uint32_t pin, chipcHw_PIN_PULL_e pullup)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2444: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:749:
+       REG_LOCAL_IRQ_SAVE;$

CHECK:SPACING: No space is necessary after a cast
#2445: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:750:
+       *((uint32_t *) chipcHw_REG_PULLUP(pin)) &=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2445: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:750:
+       *((uint32_t *) chipcHw_REG_PULLUP(pin)) &=$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULLUP>
#2445: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:750:
+       *((uint32_t *) chipcHw_REG_PULLUP(pin)) &=

ERROR:CODE_INDENT: code indent should use tabs where possible
#2446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:751:
+           ~(chipcHw_REG_PULLUP_MASK << chipcHw_REG_PULLUP_POSITION(pin));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:751:
+           ~(chipcHw_REG_PULLUP_MASK << chipcHw_REG_PULLUP_POSITION(pin));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULLUP_MASK>
#2446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:751:
+           ~(chipcHw_REG_PULLUP_MASK << chipcHw_REG_PULLUP_POSITION(pin));

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PULLUP_POSITION>
#2446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:751:
+           ~(chipcHw_REG_PULLUP_MASK << chipcHw_REG_PULLUP_POSITION(pin));

CHECK:SPACING: No space is necessary after a cast
#2447: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:752:
+       *((uint32_t *) chipcHw_REG_PULLUP(pin)) |=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2447: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:752:
+       *((uint32_t *) chipcHw_REG_PULLUP(pin)) |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2448: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:753:
+           (uint32_t) pullup << chipcHw_REG_PULLUP_POSITION(pin);$

CHECK:SPACING: No space is necessary after a cast
#2448: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:753:
+           (uint32_t) pullup << chipcHw_REG_PULLUP_POSITION(pin);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2448: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:753:
+           (uint32_t) pullup << chipcHw_REG_PULLUP_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2449: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:754:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2454: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:759:
+/**
+*  @brief   Set Pin input type

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2460: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:765:
+static inline void chipcHw_setPinInputType(uint32_t pin,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:766:
+                                          chipcHw_PIN_INPUTTYPE_e inputType)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:766:
+static inline void chipcHw_setPinInputType(uint32_t pin,
+                                          chipcHw_PIN_INPUTTYPE_e inputType)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:766:
+                                          chipcHw_PIN_INPUTTYPE_e inputType)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2463: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:768:
+       REG_LOCAL_IRQ_SAVE;$

CHECK:SPACING: No space is necessary after a cast
#2464: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:769:
+       *((uint32_t *) chipcHw_REG_INPUTTYPE(pin)) &=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2464: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:769:
+       *((uint32_t *) chipcHw_REG_INPUTTYPE(pin)) &=$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_INPUTTYPE>
#2464: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:769:
+       *((uint32_t *) chipcHw_REG_INPUTTYPE(pin)) &=

ERROR:CODE_INDENT: code indent should use tabs where possible
#2465: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:770:
+           ~(chipcHw_REG_INPUTTYPE_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2465: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:770:
+           ~(chipcHw_REG_INPUTTYPE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_INPUTTYPE_MASK>
#2465: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:770:
+           ~(chipcHw_REG_INPUTTYPE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#2466: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:771:
+             chipcHw_REG_INPUTTYPE_POSITION(pin));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2466: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:771:
+             chipcHw_REG_INPUTTYPE_POSITION(pin));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_INPUTTYPE_POSITION>
#2466: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:771:
+             chipcHw_REG_INPUTTYPE_POSITION(pin));

CHECK:SPACING: No space is necessary after a cast
#2467: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:772:
+       *((uint32_t *) chipcHw_REG_INPUTTYPE(pin)) |=

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2467: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:772:
+       *((uint32_t *) chipcHw_REG_INPUTTYPE(pin)) |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2468: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:773:
+           (uint32_t) inputType << chipcHw_REG_INPUTTYPE_POSITION(pin);$

CHECK:SPACING: No space is necessary after a cast
#2468: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:773:
+           (uint32_t) inputType << chipcHw_REG_INPUTTYPE_POSITION(pin);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2468: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:773:
+           (uint32_t) inputType << chipcHw_REG_INPUTTYPE_POSITION(pin);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2469: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:774:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2474: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:779:
+/**
+*  @brief   Power up the USB PHY

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_powerUpUsbPhy>
#2480: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:785:
+static inline void chipcHw_powerUpUsbPhy(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2482: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:787:
+       reg32_modify_and(&pChipcHw->MiscCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:788:
+                        chipcHw_REG_MISC_CTRL_USB_POWERON);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:788:
+                        chipcHw_REG_MISC_CTRL_USB_POWERON);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_USB_POWERON>
#2483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:788:
+                        chipcHw_REG_MISC_CTRL_USB_POWERON);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2488: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:793:
+/**
+*  @brief   Power down the USB PHY

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_powerDownUsbPhy>
#2494: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:799:
+static inline void chipcHw_powerDownUsbPhy(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2496: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:801:
+       reg32_modify_or(&pChipcHw->MiscCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:802:
+                       chipcHw_REG_MISC_CTRL_USB_POWEROFF);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:802:
+                       chipcHw_REG_MISC_CTRL_USB_POWEROFF);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_USB_POWEROFF>
#2497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:802:
+                       chipcHw_REG_MISC_CTRL_USB_POWEROFF);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2502: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:807:
+/**
+*  @brief   Set the 2nd USB as host

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setUsbHost>
#2508: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:813:
+static inline void chipcHw_setUsbHost(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2510: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:815:
+       reg32_modify_or(&pChipcHw->MiscCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2511: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:816:
+                       chipcHw_REG_MISC_CTRL_USB_MODE_HOST);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2511: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:816:
+                       chipcHw_REG_MISC_CTRL_USB_MODE_HOST);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_USB_MODE_HOST>
#2511: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:816:
+                       chipcHw_REG_MISC_CTRL_USB_MODE_HOST);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2516: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:821:
+/**
+*  @brief   Set the 2nd USB as device

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_setUsbDevice>
#2522: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:827:
+static inline void chipcHw_setUsbDevice(void)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2524: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:829:
+       reg32_modify_and(&pChipcHw->MiscCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2525: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:830:
+                        chipcHw_REG_MISC_CTRL_USB_MODE_DEVICE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2525: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:830:
+                        chipcHw_REG_MISC_CTRL_USB_MODE_DEVICE);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_USB_MODE_DEVICE>
#2525: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:830:
+                        chipcHw_REG_MISC_CTRL_USB_MODE_DEVICE);

WARNING:TYPO_SPELLING: 'funtion' may be misspelled - perhaps 'function'?
#2530: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:835:
+*  @brief   Lower layer funtion to enable/disable a clock of a certain device
                         ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2530: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:835:
+/**
+*  @brief   Lower layer funtion to enable/disable a clock of a certain device

ERROR:CODE_INDENT: code indent should use tabs where possible
#2537: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:842:
+                                   chipcHw_OPTYPE_e type, int mode)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2537: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:842:
+static inline void chipcHw_setClock(chipcHw_CLOCK_e clock,
+                                   chipcHw_OPTYPE_e type, int mode)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2537: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:842:
+                                   chipcHw_OPTYPE_e type, int mode)$

CHECK:SPACING: No space is necessary after a cast
#2539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:844:
+       volatile uint32_t *pPLLReg = (uint32_t *) 0x0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:844:
+       volatile uint32_t *pPLLReg = (uint32_t *) 0x0;$

CHECK:CAMELCASE: Avoid CamelCase: <pPLLReg>
#2539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:844:
+       volatile uint32_t *pPLLReg = (uint32_t *) 0x0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:844:
+       volatile uint32_t *pPLLReg = (uint32_t *) 0x0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:844:
+       volatile uint32_t *pPLLReg = (uint32_t *) 0x0;

CHECK:SPACING: No space is necessary after a cast
#2540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:845:
+       volatile uint32_t *pClockCtrl = (uint32_t *) 0x0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:845:
+       volatile uint32_t *pClockCtrl = (uint32_t *) 0x0;$

CHECK:CAMELCASE: Avoid CamelCase: <pClockCtrl>
#2540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:845:
+       volatile uint32_t *pClockCtrl = (uint32_t *) 0x0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:845:
+       volatile uint32_t *pClockCtrl = (uint32_t *) 0x0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:845:
+       volatile uint32_t *pClockCtrl = (uint32_t *) 0x0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2542: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:847:
+       switch (clock) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2543: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:848:
+       case chipcHw_CLOCK_DDR:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2544: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:849:
+               pPLLReg = &pChipcHw->DDRClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2544: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:849:
+               pPLLReg = &pChipcHw->DDRClock;$

CHECK:CAMELCASE: Avoid CamelCase: <DDRClock>
#2544: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:849:
+               pPLLReg = &pChipcHw->DDRClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2545: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:850:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2545: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:850:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2546: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:851:
+       case chipcHw_CLOCK_ARM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2547: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:852:
+               pPLLReg = &pChipcHw->ARMClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2547: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:852:
+               pPLLReg = &pChipcHw->ARMClock;$

CHECK:CAMELCASE: Avoid CamelCase: <ARMClock>
#2547: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:852:
+               pPLLReg = &pChipcHw->ARMClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2548: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:853:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2548: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:853:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2549: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:854:
+       case chipcHw_CLOCK_ESW:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2550: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:855:
+               pPLLReg = &pChipcHw->ESWClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2550: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:855:
+               pPLLReg = &pChipcHw->ESWClock;$

CHECK:CAMELCASE: Avoid CamelCase: <ESWClock>
#2550: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:855:
+               pPLLReg = &pChipcHw->ESWClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2551: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:856:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2551: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:856:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2552: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:857:
+       case chipcHw_CLOCK_VPM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:858:
+               pPLLReg = &pChipcHw->VPMClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:858:
+               pPLLReg = &pChipcHw->VPMClock;$

CHECK:CAMELCASE: Avoid CamelCase: <VPMClock>
#2553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:858:
+               pPLLReg = &pChipcHw->VPMClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2554: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:859:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2554: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:859:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2555: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:860:
+       case chipcHw_CLOCK_ESW125:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2556: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:861:
+               pPLLReg = &pChipcHw->ESW125Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2556: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:861:
+               pPLLReg = &pChipcHw->ESW125Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <ESW125Clock>
#2556: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:861:
+               pPLLReg = &pChipcHw->ESW125Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2557: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:862:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2557: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:862:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2558: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:863:
+       case chipcHw_CLOCK_UART:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2559: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:864:
+               pPLLReg = &pChipcHw->UARTClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2559: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:864:
+               pPLLReg = &pChipcHw->UARTClock;$

CHECK:CAMELCASE: Avoid CamelCase: <UARTClock>
#2559: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:864:
+               pPLLReg = &pChipcHw->UARTClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2560: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:865:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2560: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:865:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2561: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:866:
+       case chipcHw_CLOCK_SDIO0:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:867:
+               pPLLReg = &pChipcHw->SDIO0Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:867:
+               pPLLReg = &pChipcHw->SDIO0Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <SDIO0Clock>
#2562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:867:
+               pPLLReg = &pChipcHw->SDIO0Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2563: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:868:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2563: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:868:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2564: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:869:
+       case chipcHw_CLOCK_SDIO1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2565: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:870:
+               pPLLReg = &pChipcHw->SDIO1Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2565: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:870:
+               pPLLReg = &pChipcHw->SDIO1Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <SDIO1Clock>
#2565: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:870:
+               pPLLReg = &pChipcHw->SDIO1Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2566: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:871:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2566: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:871:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2567: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:872:
+       case chipcHw_CLOCK_SPI:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2568: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:873:
+               pPLLReg = &pChipcHw->SPIClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2568: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:873:
+               pPLLReg = &pChipcHw->SPIClock;$

CHECK:CAMELCASE: Avoid CamelCase: <SPIClock>
#2568: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:873:
+               pPLLReg = &pChipcHw->SPIClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2569: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:874:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2569: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:874:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2570: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:875:
+       case chipcHw_CLOCK_ETM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2571: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:876:
+               pPLLReg = &pChipcHw->ETMClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2571: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:876:
+               pPLLReg = &pChipcHw->ETMClock;$

CHECK:CAMELCASE: Avoid CamelCase: <ETMClock>
#2571: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:876:
+               pPLLReg = &pChipcHw->ETMClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2572: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:877:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2572: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:877:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2573: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:878:
+       case chipcHw_CLOCK_USB:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2574: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:879:
+               pPLLReg = &pChipcHw->USBClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2574: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:879:
+               pPLLReg = &pChipcHw->USBClock;$

CHECK:CAMELCASE: Avoid CamelCase: <USBClock>
#2574: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:879:
+               pPLLReg = &pChipcHw->USBClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2575: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:880:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2575: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:880:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2575: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:880:
+               if (type == chipcHw_OPTYPE_OUTPUT) {
+                       if (mode) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2576: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:881:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2576: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:881:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2576: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:881:
+                       if (mode) {
+                               reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2577: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:882:
+                               reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2577: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:882:
+                               reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2578: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:883:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2578: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:883:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_POWER_DOWN>
#2578: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:883:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2579: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:884:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2579: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:884:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2579: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:884:
+                       } else {
+                               reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2580: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:885:
+                               reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2580: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:885:
+                               reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2581: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:886:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2581: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:886:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2582: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:887:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2582: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:887:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2583: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:888:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2583: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:888:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2584: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:889:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2584: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:889:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2585: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:890:
+       case chipcHw_CLOCK_LCD:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2586: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:891:
+               pPLLReg = &pChipcHw->LCDClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2586: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:891:
+               pPLLReg = &pChipcHw->LCDClock;$

CHECK:CAMELCASE: Avoid CamelCase: <LCDClock>
#2586: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:891:
+               pPLLReg = &pChipcHw->LCDClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2587: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:892:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2587: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:892:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2587: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:892:
+               if (type == chipcHw_OPTYPE_OUTPUT) {
+                       if (mode) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2588: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:893:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2588: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:893:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2588: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:893:
+                       if (mode) {
+                               reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2589: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:894:
+                               reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2589: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:894:
+                               reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:895:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:895:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2591: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:896:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2591: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:896:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2591: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:896:
+                       } else {
+                               reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2592: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:897:
+                               reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2592: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:897:
+                               reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2593: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:898:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2593: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:898:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2594: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:899:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2594: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:899:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2595: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:900:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2595: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:900:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2596: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:901:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2596: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:901:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2597: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:902:
+       case chipcHw_CLOCK_APM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2598: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:903:
+               pPLLReg = &pChipcHw->APMClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2598: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:903:
+               pPLLReg = &pChipcHw->APMClock;$

CHECK:CAMELCASE: Avoid CamelCase: <APMClock>
#2598: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:903:
+               pPLLReg = &pChipcHw->APMClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2599: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:904:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2599: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:904:
+               if (type == chipcHw_OPTYPE_OUTPUT) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#2599: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:904:
+               if (type == chipcHw_OPTYPE_OUTPUT) {
+                       if (mode) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2600: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:905:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2600: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:905:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2600: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:905:
+                       if (mode) {
+                               reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2601: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:906:
+                               reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2601: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:906:
+                               reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2602: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:907:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2602: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:907:
+                                                ~chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:908:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:908:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2603: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:908:
+                       } else {
+                               reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2604: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:909:
+                               reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2604: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:909:
+                               reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2605: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:910:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2605: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:910:
+                                               chipcHw_REG_PLL_CLOCK_POWER_DOWN);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2606: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:911:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2606: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:911:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:912:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:912:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2608: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:913:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2608: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:913:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2609: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:914:
+       case chipcHw_CLOCK_BUS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:915:
+               pClockCtrl = &pChipcHw->ACLKClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:915:
+               pClockCtrl = &pChipcHw->ACLKClock;$

CHECK:CAMELCASE: Avoid CamelCase: <ACLKClock>
#2610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:915:
+               pClockCtrl = &pChipcHw->ACLKClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2611: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:916:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2611: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:916:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2612: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:917:
+       case chipcHw_CLOCK_OTP:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:918:
+               pClockCtrl = &pChipcHw->OTPClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:918:
+               pClockCtrl = &pChipcHw->OTPClock;$

CHECK:CAMELCASE: Avoid CamelCase: <OTPClock>
#2613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:918:
+               pClockCtrl = &pChipcHw->OTPClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2614: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:919:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2614: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:919:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2615: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:920:
+       case chipcHw_CLOCK_I2C:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:921:
+               pClockCtrl = &pChipcHw->I2CClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:921:
+               pClockCtrl = &pChipcHw->I2CClock;$

CHECK:CAMELCASE: Avoid CamelCase: <I2CClock>
#2616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:921:
+               pClockCtrl = &pChipcHw->I2CClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2617: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:922:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2617: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:922:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2618: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:923:
+       case chipcHw_CLOCK_I2S0:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:924:
+               pClockCtrl = &pChipcHw->I2S0Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:924:
+               pClockCtrl = &pChipcHw->I2S0Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <I2S0Clock>
#2619: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:924:
+               pClockCtrl = &pChipcHw->I2S0Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2620: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:925:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2620: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:925:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2621: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:926:
+       case chipcHw_CLOCK_RTBUS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2622: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:927:
+               pClockCtrl = &pChipcHw->RTBUSClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2622: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:927:
+               pClockCtrl = &pChipcHw->RTBUSClock;$

CHECK:CAMELCASE: Avoid CamelCase: <RTBUSClock>
#2622: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:927:
+               pClockCtrl = &pChipcHw->RTBUSClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2623: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:928:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2623: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:928:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2624: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:929:
+       case chipcHw_CLOCK_APM100:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:930:
+               pClockCtrl = &pChipcHw->APM100Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:930:
+               pClockCtrl = &pChipcHw->APM100Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <APM100Clock>
#2625: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:930:
+               pClockCtrl = &pChipcHw->APM100Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2626: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:931:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2626: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:931:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2627: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:932:
+       case chipcHw_CLOCK_TSC:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2628: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:933:
+               pClockCtrl = &pChipcHw->TSCClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2628: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:933:
+               pClockCtrl = &pChipcHw->TSCClock;$

CHECK:CAMELCASE: Avoid CamelCase: <TSCClock>
#2628: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:933:
+               pClockCtrl = &pChipcHw->TSCClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2629: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:934:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2629: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:934:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2630: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:935:
+       case chipcHw_CLOCK_LED:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:936:
+               pClockCtrl = &pChipcHw->LEDClock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:936:
+               pClockCtrl = &pChipcHw->LEDClock;$

CHECK:CAMELCASE: Avoid CamelCase: <LEDClock>
#2631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:936:
+               pClockCtrl = &pChipcHw->LEDClock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2632: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:937:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2632: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:937:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2633: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:938:
+       case chipcHw_CLOCK_I2S1:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:939:
+               pClockCtrl = &pChipcHw->I2S1Clock;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:939:
+               pClockCtrl = &pChipcHw->I2S1Clock;$

CHECK:CAMELCASE: Avoid CamelCase: <I2S1Clock>
#2634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:939:
+               pClockCtrl = &pChipcHw->I2S1Clock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2635: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:940:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2635: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:940:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2636: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:941:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2638: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:943:
+       if (pPLLReg) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2638: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:943:
+       if (pPLLReg) {
+               switch (type) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2639: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:944:
+               switch (type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2639: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:944:
+               switch (type) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2640: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:945:
+               case chipcHw_OPTYPE_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2640: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:945:
+               case chipcHw_OPTYPE_OUTPUT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2641: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:946:
+                       /* PLL clock output enable/disable */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2642: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:947:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2642: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:947:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2642: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:947:
+                       if (mode) {
+                               if (clock == chipcHw_CLOCK_DDR) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:948:
+                               if (clock == chipcHw_CLOCK_DDR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:948:
+                               if (clock == chipcHw_CLOCK_DDR) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#2643: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:948:
+                               if (clock == chipcHw_CLOCK_DDR) {
[...]
+                                       reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2644: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:949:
+                                       /* DDR clock enable is inverted */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:950:
+                                       reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2645: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:950:
+                                       reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:951:
+                                                        ~chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:951:
+                                                        ~chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE>
#2646: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:951:
+                                                        ~chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2647: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:952:
+                               } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2647: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:952:
+                               } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#2647: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:952:
+                               } else {
+                                       reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2648: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:953:
+                                       reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2648: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:953:
+                                       reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2649: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:954:
+                                                       chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2649: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:954:
+                                                       chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2650: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:955:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2650: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:955:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:956:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:956:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2651: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:956:
+                       } else {
+                               if (clock == chipcHw_CLOCK_DDR) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:957:
+                               if (clock == chipcHw_CLOCK_DDR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:957:
+                               if (clock == chipcHw_CLOCK_DDR) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#2652: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:957:
+                               if (clock == chipcHw_CLOCK_DDR) {
[...]
+                                       reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2653: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:958:
+                                       /* DDR clock disable is inverted */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2654: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:959:
+                                       reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2654: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:959:
+                                       reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2655: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:960:
+                                                       chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2655: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:960:
+                                                       chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2656: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:961:
+                               } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2656: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:961:
+                               } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#2656: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:961:
+                               } else {
+                                       reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2657: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:962:
+                                       reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2657: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:962:
+                                       reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2658: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:963:
+                                                        ~chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2658: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:963:
+                                                        ~chipcHw_REG_PLL_CLOCK_OUTPUT_ENABLE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2659: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:964:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2659: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:964:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:965:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:965:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:966:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:966:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:967:
+               case chipcHw_OPTYPE_BYPASS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:967:
+               case chipcHw_OPTYPE_BYPASS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2663: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:968:
+                       /* PLL clock bypass enable/disable */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:969:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:969:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2664: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:969:
+                       if (mode) {
+                               reg32_modify_or(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:970:
+                               reg32_modify_or(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:970:
+                               reg32_modify_or(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:971:
+                                               chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:971:
+                                               chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_BYPASS_SELECT>
#2666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:971:
+                                               chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:972:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:972:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:972:
+                       } else {
+                               reg32_modify_and(pPLLReg,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:973:
+                               reg32_modify_and(pPLLReg,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:973:
+                               reg32_modify_and(pPLLReg,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:974:
+                                                ~chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:974:
+                                                ~chipcHw_REG_PLL_CLOCK_BYPASS_SELECT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:975:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:975:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2671: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:976:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2671: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:976:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:977:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:977:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:978:
+       } else if (pClockCtrl) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:978:
+       } else if (pClockCtrl) {
+               switch (type) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#2674: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:979:
+               switch (type) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2674: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:979:
+               switch (type) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2675: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:980:
+               case chipcHw_OPTYPE_OUTPUT:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2675: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:980:
+               case chipcHw_OPTYPE_OUTPUT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2676: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:981:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2676: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:981:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2676: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:981:
+                       if (mode) {
+                               reg32_modify_or(pClockCtrl,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:982:
+                               reg32_modify_or(pClockCtrl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2677: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:982:
+                               reg32_modify_or(pClockCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:983:
+                                               chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:983:
+                                               chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE>
#2678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:983:
+                                               chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2679: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:984:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2679: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:984:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2679: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:984:
+                       } else {
+                               reg32_modify_and(pClockCtrl,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2680: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:985:
+                               reg32_modify_and(pClockCtrl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2680: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:985:
+                               reg32_modify_and(pClockCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2681: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:986:
+                                                ~chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2681: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:986:
+                                                ~chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2682: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:987:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2682: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:987:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2683: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:988:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2683: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:988:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2684: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:989:
+               case chipcHw_OPTYPE_BYPASS:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2684: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:989:
+               case chipcHw_OPTYPE_BYPASS:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:990:
+                       if (mode) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:990:
+                       if (mode) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:990:
+                       if (mode) {
+                               reg32_modify_or(pClockCtrl,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2686: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:991:
+                               reg32_modify_or(pClockCtrl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2686: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:991:
+                               reg32_modify_or(pClockCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:992:
+                                               chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:992:
+                                               chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DIV_CLOCK_BYPASS_SELECT>
#2687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:992:
+                                               chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);

ERROR:CODE_INDENT: code indent should use tabs where possible
#2688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:993:
+                       } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:993:
+                       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#2688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:993:
+                       } else {
+                               reg32_modify_and(pClockCtrl,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2689: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:994:
+                               reg32_modify_and(pClockCtrl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2689: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:994:
+                               reg32_modify_and(pClockCtrl,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2690: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:995:
+                                                ~chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2690: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:995:
+                                                ~chipcHw_REG_DIV_CLOCK_BYPASS_SELECT);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2691: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:996:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2691: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:996:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2692: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:997:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2692: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:997:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:998:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:998:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:999:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2699: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1004:
+/**
+*  @brief   Disables a core clock of a certain device

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2708: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1013:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2710: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1015:
+       chipcHw_setClock(clock, chipcHw_OPTYPE_OUTPUT, 0);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1020:
+/**
+*  @brief   Enable a core clock of a certain device

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2724: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1029:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2726: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1031:
+       chipcHw_setClock(clock, chipcHw_OPTYPE_OUTPUT, 1);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1036:
+/**
+*  @brief   Enables bypass clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#2735: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1040:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2741: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1046:
+       chipcHw_setClock(clock, chipcHw_OPTYPE_BYPASS, 1);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2746: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1051:
+/**
+*  @brief   Disabled bypass clock of a certain device

WARNING:TYPO_SPELLING: 'Doesnot' may be misspelled - perhaps 'Doesn't'?
#2750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1055:
+*  @note    Doesnot affect the bus interface clock
             ^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2756: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1061:
+       chipcHw_setClock(clock, chipcHw_OPTYPE_BYPASS, 0);$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1063:
+
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2769: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1074:
+       return pChipcHw->SoftStraps & 0x00000001;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2778: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1083:
+       reg32_modify_or(&pChipcHw->SoftStraps, 0x00000001);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2787: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1092:
+       reg32_modify_and(&pChipcHw->SoftStraps, (~0x00000001));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2796: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1101:
+       reg32_modify_or(&pChipcHw->PLLConfig,$

CHECK:CAMELCASE: Avoid CamelCase: <PLLConfig>
#2796: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1101:
+       reg32_modify_or(&pChipcHw->PLLConfig,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2797: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1102:
+                       chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2797: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1102:
+                       chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_TEST_ENABLE>
#2797: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1102:
+                       chipcHw_REG_PLL_CONFIG_TEST_ENABLE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2806: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1111:
+       reg32_modify_or(&pChipcHw->PLLConfig2,$

CHECK:CAMELCASE: Avoid CamelCase: <PLLConfig2>
#2806: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1111:
+       reg32_modify_or(&pChipcHw->PLLConfig2,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1112:
+                       chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1112:
+                       chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2816: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1121:
+       reg32_modify_and(&pChipcHw->PLLConfig,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2817: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1122:
+                        ~chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2817: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1122:
+                        ~chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2826: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1131:
+       reg32_modify_and(&pChipcHw->PLLConfig2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2827: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1132:
+                        ~chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2827: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1132:
+                        ~chipcHw_REG_PLL_CONFIG_TEST_ENABLE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2836: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1141:
+       return pChipcHw->PLLConfig & chipcHw_REG_PLL_CONFIG_TEST_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2845: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1150:
+       return pChipcHw->PLLConfig2 & chipcHw_REG_PLL_CONFIG_TEST_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2854: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1159:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2855: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1160:
+       pChipcHw->PLLConfig &= ~chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK>
#2855: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1160:
+       pChipcHw->PLLConfig &= ~chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2856: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1161:
+       pChipcHw->PLLConfig |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2857: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1162:
+           (val) << chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2857: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1162:
+           (val) << chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT>
#2857: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1162:
+           (val) << chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2858: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1163:
+       REG_LOCAL_IRQ_RESTORE;$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2867: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1172:
+{
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2868: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1173:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2869: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1174:
+       pChipcHw->PLLConfig2 &= ~chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2870: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1175:
+       pChipcHw->PLLConfig2 |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2871: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1176:
+           (val) << chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2871: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1176:
+           (val) << chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2872: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1177:
+       REG_LOCAL_IRQ_RESTORE;$

CHECK:SPACING: No space is necessary after a cast
#2881: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1186:
+       return (uint8_t) ((pChipcHw->

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2881: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1186:
+       return (uint8_t) ((pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1187:
+                          PLLConfig & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1187:
+                          PLLConfig & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PLLConfig'
#2882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1187:
+       return (uint8_t) ((pChipcHw->
+                          PLLConfig & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2883: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1188:
+                         >> chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2883: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1188:
+                         >> chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT);$

CHECK:SPACING: No space is necessary after a cast
#2892: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1197:
+       return (uint8_t) ((pChipcHw->

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2892: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1197:
+       return (uint8_t) ((pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2893: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1198:
+                          PLLConfig2 & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2893: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1198:
+                          PLLConfig2 & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PLLConfig2'
#2893: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1198:
+       return (uint8_t) ((pChipcHw->
+                          PLLConfig2 & chipcHw_REG_PLL_CONFIG_TEST_SELECT_MASK)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2894: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1199:
+                         >> chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2894: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1199:
+                         >> chipcHw_REG_PLL_CONFIG_TEST_SELECT_SHIFT);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2899: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1204:
+/**
+*  @brief  Disable the PLL1

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2905: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1210:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2906: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1211:
+       pChipcHw->PLLConfig |= chipcHw_REG_PLL_CONFIG_POWER_DOWN;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_POWER_DOWN>
#2906: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1211:
+       pChipcHw->PLLConfig |= chipcHw_REG_PLL_CONFIG_POWER_DOWN;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2907: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1212:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2912: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1217:
+/**
+*  @brief  Disable the PLL2

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2918: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1223:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2919: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1224:
+       pChipcHw->PLLConfig2 |= chipcHw_REG_PLL_CONFIG_POWER_DOWN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2920: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1225:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2925: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1230:
+/**
+*  @brief   Enables DDR SW phase alignment interrupt

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2930: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1235:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1236:
+       pChipcHw->Spare1 |= chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <Spare1>
#2931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1236:
+       pChipcHw->Spare1 |= chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE>
#2931: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1236:
+       pChipcHw->Spare1 |= chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2932: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1237:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2937: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1242:
+/**
+*  @brief   Disables DDR SW phase alignment interrupt

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2942: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1247:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2943: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1248:
+       pChipcHw->Spare1 &= ~chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2944: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1249:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2949: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1254:
+/**
+*  @brief   Set VPM SW phase alignment interrupt mode

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2957: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1262:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2958: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1263:
+       if (mode == chipcHw_VPM_HW_PHASE_INTR_DISABLE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2958: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1263:
+       if (mode == chipcHw_VPM_HW_PHASE_INTR_DISABLE) {
+               pChipcHw->Spare1 &= ~chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#2958: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1263:
+       if (mode == chipcHw_VPM_HW_PHASE_INTR_DISABLE) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#2959: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1264:
+               pChipcHw->Spare1 &= ~chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2959: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1264:
+               pChipcHw->Spare1 &= ~chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE>
#2959: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1264:
+               pChipcHw->Spare1 &= ~chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2960: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1265:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#2960: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1265:
+       } else {
+               pChipcHw->Spare1 |= chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#2961: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1266:
+               pChipcHw->Spare1 |= chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2961: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1266:
+               pChipcHw->Spare1 |= chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2962: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1267:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2963: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1268:
+       pChipcHw->VPMPhaseCtrl2 =$

CHECK:CAMELCASE: Avoid CamelCase: <VPMPhaseCtrl2>
#2963: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1268:
+       pChipcHw->VPMPhaseCtrl2 =

ERROR:CODE_INDENT: code indent should use tabs where possible
#2964: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1269:
+           (pChipcHw->$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2964: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1269:
+           (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2965: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1270:
+            VPMPhaseCtrl2 & ~(chipcHw_REG_VPM_INTR_SELECT_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2965: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1270:
+            VPMPhaseCtrl2 & ~(chipcHw_REG_VPM_INTR_SELECT_MASK <<$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->VPMPhaseCtrl2'
#2965: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1270:
+           (pChipcHw->
+            VPMPhaseCtrl2 & ~(chipcHw_REG_VPM_INTR_SELECT_MASK <<

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_SELECT_MASK>
#2965: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1270:
+            VPMPhaseCtrl2 & ~(chipcHw_REG_VPM_INTR_SELECT_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#2966: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1271:
+                              chipcHw_REG_VPM_INTR_SELECT_SHIFT)) | mode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2966: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1271:
+                              chipcHw_REG_VPM_INTR_SELECT_SHIFT)) | mode;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_SELECT_SHIFT>
#2966: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1271:
+                              chipcHw_REG_VPM_INTR_SELECT_SHIFT)) | mode;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2967: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1272:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2972: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1277:
+/**
+*  @brief   Enable DDR phase alignment in software

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2978: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1283:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2979: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1284:
+       pChipcHw->DDRPhaseCtrl1 |= chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <DDRPhaseCtrl1>
#2979: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1284:
+       pChipcHw->DDRPhaseCtrl1 |= chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE>
#2979: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1284:
+       pChipcHw->DDRPhaseCtrl1 |= chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2980: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1285:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2985: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1290:
+/**
+*  @brief   Disable DDR phase alignment in software

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2991: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1296:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2992: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1297:
+       pChipcHw->DDRPhaseCtrl1 &= ~chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2993: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1298:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2998: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1303:
+/**
+*  @brief   Enable DDR phase alignment in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3004: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1309:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3005: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1310:
+       pChipcHw->DDRPhaseCtrl1 |= chipcHw_REG_DDR_HW_PHASE_CTRL_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_HW_PHASE_CTRL_ENABLE>
#3005: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1310:
+       pChipcHw->DDRPhaseCtrl1 |= chipcHw_REG_DDR_HW_PHASE_CTRL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3006: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1311:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3011: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1316:
+/**
+*  @brief   Disable DDR phase alignment in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3017: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1322:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3018: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1323:
+       pChipcHw->DDRPhaseCtrl1 &= ~chipcHw_REG_DDR_HW_PHASE_CTRL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3019: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1324:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3024: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1329:
+/**
+*  @brief   Enable VPM phase alignment in software

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3030: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1335:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3031: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1336:
+       pChipcHw->VPMPhaseCtrl1 |= chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <VPMPhaseCtrl1>
#3031: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1336:
+       pChipcHw->VPMPhaseCtrl1 |= chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE>
#3031: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1336:
+       pChipcHw->VPMPhaseCtrl1 |= chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3032: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1337:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3037: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1342:
+/**
+*  @brief   Disable VPM phase alignment in software

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3043: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1348:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3044: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1349:
+       pChipcHw->VPMPhaseCtrl1 &= ~chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3045: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1350:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3050: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1355:
+/**
+*  @brief   Enable VPM phase alignment in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3056: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1361:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3057: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1362:
+       pChipcHw->VPMPhaseCtrl1 |= chipcHw_REG_VPM_HW_PHASE_CTRL_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_HW_PHASE_CTRL_ENABLE>
#3057: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1362:
+       pChipcHw->VPMPhaseCtrl1 |= chipcHw_REG_VPM_HW_PHASE_CTRL_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3058: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1363:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3063: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1368:
+/**
+*  @brief   Disable VPM phase alignment in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3069: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1374:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3070: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1375:
+       pChipcHw->VPMPhaseCtrl1 &= ~chipcHw_REG_VPM_HW_PHASE_CTRL_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3071: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1376:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3076: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1381:
+/**
+*  @brief   Set DDR phase alignment margin in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3083: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1388:
+       uint32_t ge = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3083: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1388:
+       uint32_t ge = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3084: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1389:
+       uint32_t le = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3084: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1389:
+       uint32_t le = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3086: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1391:
+       switch (margin) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3087: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1392:
+       case chipcHw_DDR_HW_PHASE_MARGIN_STRICT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1393:
+               ge = 0x0F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3088: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1393:
+               ge = 0x0F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3089: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1394:
+               le = 0x0F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3089: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1394:
+               le = 0x0F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3090: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1395:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3090: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1395:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3091: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1396:
+       case chipcHw_DDR_HW_PHASE_MARGIN_MEDIUM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1397:
+               ge = 0x03;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3092: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1397:
+               ge = 0x03;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3093: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1398:
+               le = 0x3F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3093: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1398:
+               le = 0x3F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3094: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1399:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3094: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1399:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3095: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1400:
+       case chipcHw_DDR_HW_PHASE_MARGIN_WIDE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3096: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1401:
+               ge = 0x01;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3096: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1401:
+               ge = 0x01;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3097: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1402:
+               le = 0x7F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3097: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1402:
+               le = 0x7F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3098: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1403:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3098: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1403:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3099: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1404:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3101: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1406:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3102: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1407:
+               REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3102: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1407:
+               REG_LOCAL_IRQ_SAVE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3104: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1409:
+               pChipcHw->DDRPhaseCtrl1 &=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3104: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1409:
+               pChipcHw->DDRPhaseCtrl1 &=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3105: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1410:
+                   ~((chipcHw_REG_DDR_PHASE_VALUE_GE_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3105: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1410:
+                   ~((chipcHw_REG_DDR_PHASE_VALUE_GE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_VALUE_GE_MASK>
#3105: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1410:
+                   ~((chipcHw_REG_DDR_PHASE_VALUE_GE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3106: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1411:
+                      chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3106: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1411:
+                      chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT>
#3106: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1411:
+                      chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3107: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1412:
+                     || (chipcHw_REG_DDR_PHASE_VALUE_LE_MASK <<$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3107: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1412:
+                      chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)
+                     || (chipcHw_REG_DDR_PHASE_VALUE_LE_MASK <<

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3107: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1412:
+                     || (chipcHw_REG_DDR_PHASE_VALUE_LE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_VALUE_LE_MASK>
#3107: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1412:
+                     || (chipcHw_REG_DDR_PHASE_VALUE_LE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3108: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1413:
+                         chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3108: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1413:
+                         chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT>
#3108: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1413:
+                         chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));

ERROR:CODE_INDENT: code indent should use tabs where possible
#3110: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1415:
+               pChipcHw->DDRPhaseCtrl1 |=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3110: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1415:
+               pChipcHw->DDRPhaseCtrl1 |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3111: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1416:
+                   ((ge << chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3111: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1416:
+                   ((ge << chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3112: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1417:
+                    || (le << chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3112: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1417:
+                   ((ge << chipcHw_REG_DDR_PHASE_VALUE_GE_SHIFT)
+                    || (le << chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3112: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1417:
+                    || (le << chipcHw_REG_DDR_PHASE_VALUE_LE_SHIFT));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3114: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1419:
+               REG_LOCAL_IRQ_RESTORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3114: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1419:
+               REG_LOCAL_IRQ_RESTORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3115: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1420:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3120: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1425:
+/**
+*  @brief   Set VPM phase alignment margin in hardware

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3127: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1432:
+       uint32_t ge = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3127: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1432:
+       uint32_t ge = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3128: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1433:
+       uint32_t le = 0;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3128: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1433:
+       uint32_t le = 0;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3130: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1435:
+       switch (margin) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3131: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1436:
+       case chipcHw_VPM_HW_PHASE_MARGIN_STRICT:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3132: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1437:
+               ge = 0x0F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3132: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1437:
+               ge = 0x0F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3133: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1438:
+               le = 0x0F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3133: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1438:
+               le = 0x0F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3134: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1439:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3134: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1439:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3135: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1440:
+       case chipcHw_VPM_HW_PHASE_MARGIN_MEDIUM:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3136: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1441:
+               ge = 0x03;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3136: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1441:
+               ge = 0x03;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3137: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1442:
+               le = 0x3F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3137: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1442:
+               le = 0x3F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3138: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1443:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3138: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1443:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3139: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1444:
+       case chipcHw_VPM_HW_PHASE_MARGIN_WIDE:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3140: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1445:
+               ge = 0x01;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3140: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1445:
+               ge = 0x01;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3141: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1446:
+               le = 0x7F;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3141: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1446:
+               le = 0x7F;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3142: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1447:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3142: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1447:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3143: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1448:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3145: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1450:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3146: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1451:
+               REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3146: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1451:
+               REG_LOCAL_IRQ_SAVE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3148: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1453:
+               pChipcHw->VPMPhaseCtrl1 &=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3148: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1453:
+               pChipcHw->VPMPhaseCtrl1 &=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3149: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1454:
+                   ~((chipcHw_REG_VPM_PHASE_VALUE_GE_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3149: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1454:
+                   ~((chipcHw_REG_VPM_PHASE_VALUE_GE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_VALUE_GE_MASK>
#3149: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1454:
+                   ~((chipcHw_REG_VPM_PHASE_VALUE_GE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3150: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1455:
+                      chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3150: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1455:
+                      chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT>
#3150: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1455:
+                      chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3151: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1456:
+                     || (chipcHw_REG_VPM_PHASE_VALUE_LE_MASK <<$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3151: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1456:
+                      chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)
+                     || (chipcHw_REG_VPM_PHASE_VALUE_LE_MASK <<

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3151: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1456:
+                     || (chipcHw_REG_VPM_PHASE_VALUE_LE_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_VALUE_LE_MASK>
#3151: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1456:
+                     || (chipcHw_REG_VPM_PHASE_VALUE_LE_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3152: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1457:
+                         chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3152: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1457:
+                         chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT>
#3152: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1457:
+                         chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));

ERROR:CODE_INDENT: code indent should use tabs where possible
#3154: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1459:
+               pChipcHw->VPMPhaseCtrl1 |=$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3154: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1459:
+               pChipcHw->VPMPhaseCtrl1 |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3155: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1460:
+                   ((ge << chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3155: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1460:
+                   ((ge << chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3156: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1461:
+                    || (le << chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3156: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1461:
+                   ((ge << chipcHw_REG_VPM_PHASE_VALUE_GE_SHIFT)
+                    || (le << chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3156: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1461:
+                    || (le << chipcHw_REG_VPM_PHASE_VALUE_LE_SHIFT));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3158: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1463:
+               REG_LOCAL_IRQ_RESTORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3158: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1463:
+               REG_LOCAL_IRQ_RESTORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3159: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1464:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3164: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1469:
+/**
+*  @brief   Checks DDR phase aligned status done by HW

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3172: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1477:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1478:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_ALIGNED) ? 1 : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1478:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_ALIGNED) ? 1 : 0;$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1478:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_ALIGNED) ? 1 : 0;

CHECK:CAMELCASE: Avoid CamelCase: <PhaseAlignStatus>
#3173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1478:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_ALIGNED) ? 1 : 0;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_ALIGNED>
#3173: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1478:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_ALIGNED) ? 1 : 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3178: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1483:
+/**
+*  @brief   Checks VPM phase aligned status done by HW

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3186: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1491:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3187: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1492:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_ALIGNED) ? 1 : 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3187: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1492:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_ALIGNED) ? 1 : 0;$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3187: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1492:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_ALIGNED) ? 1 : 0;

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_ALIGNED>
#3187: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1492:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_ALIGNED) ? 1 : 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3192: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1497:
+/**
+*  @brief   Get DDR phase aligned status done by HW

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3198: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1503:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3199: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1504:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_STATUS_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3199: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1504:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_STATUS_MASK) >>$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3199: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1504:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_STATUS_MASK) >>

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_STATUS_MASK>
#3199: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1504:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_STATUS_MASK) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#3200: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1505:
+           chipcHw_REG_DDR_PHASE_STATUS_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3200: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1505:
+           chipcHw_REG_DDR_PHASE_STATUS_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_STATUS_SHIFT>
#3200: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1505:
+           chipcHw_REG_DDR_PHASE_STATUS_SHIFT;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3205: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1510:
+/**
+*  @brief   Get VPM phase aligned status done by HW

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3211: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1516:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3212: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1517:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_STATUS_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3212: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1517:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_STATUS_MASK) >>$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3212: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1517:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_STATUS_MASK) >>

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_STATUS_MASK>
#3212: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1517:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_STATUS_MASK) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#3213: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1518:
+           chipcHw_REG_VPM_PHASE_STATUS_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3213: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1518:
+           chipcHw_REG_VPM_PHASE_STATUS_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_STATUS_SHIFT>
#3213: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1518:
+           chipcHw_REG_VPM_PHASE_STATUS_SHIFT;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3218: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1523:
+/**
+*  @brief   Get DDR phase control value

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3224: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1529:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3225: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1530:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_CTRL_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3225: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1530:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_CTRL_MASK) >>$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3225: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1530:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_CTRL_MASK) >>

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_CTRL_MASK>
#3225: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1530:
+               PhaseAlignStatus & chipcHw_REG_DDR_PHASE_CTRL_MASK) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#3226: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1531:
+           chipcHw_REG_DDR_PHASE_CTRL_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3226: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1531:
+           chipcHw_REG_DDR_PHASE_CTRL_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_CTRL_SHIFT>
#3226: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1531:
+           chipcHw_REG_DDR_PHASE_CTRL_SHIFT;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3231: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1536:
+/**
+*  @brief   Get VPM phase control value

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3237: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1542:
+       return (pChipcHw->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3238: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1543:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_CTRL_MASK) >>$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3238: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1543:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_CTRL_MASK) >>$

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'pChipcHw->PhaseAlignStatus'
#3238: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1543:
+       return (pChipcHw->
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_CTRL_MASK) >>

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_CTRL_MASK>
#3238: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1543:
+               PhaseAlignStatus & chipcHw_REG_VPM_PHASE_CTRL_MASK) >>

ERROR:CODE_INDENT: code indent should use tabs where possible
#3239: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1544:
+           chipcHw_REG_VPM_PHASE_CTRL_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3239: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1544:
+           chipcHw_REG_VPM_PHASE_CTRL_SHIFT;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_CTRL_SHIFT>
#3239: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1544:
+           chipcHw_REG_VPM_PHASE_CTRL_SHIFT;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3244: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1549:
+/**
+*  @brief   DDR phase alignment timeout count

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3252: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1557:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3253: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1558:
+       pChipcHw->DDRPhaseCtrl2 &=$

CHECK:CAMELCASE: Avoid CamelCase: <DDRPhaseCtrl2>
#3253: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1558:
+       pChipcHw->DDRPhaseCtrl2 &=

ERROR:CODE_INDENT: code indent should use tabs where possible
#3254: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1559:
+           ~(chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3254: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1559:
+           ~(chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK>
#3254: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1559:
+           ~(chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3255: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1560:
+             chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3255: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1560:
+             chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT>
#3255: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1560:
+             chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3256: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1561:
+       pChipcHw->DDRPhaseCtrl2 |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3257: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1562:
+           (busCycle & chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK) <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3257: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1562:
+           (busCycle & chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK) <<$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3258: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1563:
+           chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3258: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1563:
+           chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3259: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1564:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3264: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1569:
+/**
+*  @brief   VPM phase alignment timeout count

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3272: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1577:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3273: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1578:
+       pChipcHw->VPMPhaseCtrl2 &=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3274: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1579:
+           ~(chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3274: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1579:
+           ~(chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK <<$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK>
#3274: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1579:
+           ~(chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK <<

ERROR:CODE_INDENT: code indent should use tabs where possible
#3275: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1580:
+             chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3275: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1580:
+             chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT);$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT>
#3275: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1580:
+             chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3276: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1581:
+       pChipcHw->VPMPhaseCtrl2 |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3277: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1582:
+           (busCycle & chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK) <<$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3277: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1582:
+           (busCycle & chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK) <<$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3278: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1583:
+           chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3278: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1583:
+           chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3279: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1584:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3284: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1589:
+/**
+*  @brief   Clear DDR phase alignment timeout interrupt

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3290: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1595:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3292: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1597:
+       pChipcHw->DDRPhaseCtrl2 |= chipcHw_REG_DDR_INTR_SERVICED;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_INTR_SERVICED>
#3292: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1597:
+       pChipcHw->DDRPhaseCtrl2 |= chipcHw_REG_DDR_INTR_SERVICED;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3293: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1598:
+       pChipcHw->DDRPhaseCtrl2 &= ~chipcHw_REG_DDR_INTR_SERVICED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3294: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1599:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3299: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1604:
+/**
+*  @brief   Clear VPM phase alignment timeout interrupt

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3305: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1610:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3307: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1612:
+       pChipcHw->VPMPhaseCtrl2 |= chipcHw_REG_VPM_INTR_SERVICED;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_INTR_SERVICED>
#3307: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1612:
+       pChipcHw->VPMPhaseCtrl2 |= chipcHw_REG_VPM_INTR_SERVICED;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3308: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1613:
+       pChipcHw->VPMPhaseCtrl2 &= ~chipcHw_REG_VPM_INTR_SERVICED;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3309: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1614:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3314: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1619:
+/**
+*  @brief   DDR phase alignment timeout interrupt enable

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3320: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1625:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3321: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1626:
+       chipcHw_ddrHwPhaseAlignTimeoutInterruptClear(); /* Recommended */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3323: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1628:
+       pChipcHw->DDRPhaseCtrl2 |= chipcHw_REG_DDR_TIMEOUT_INTR_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_TIMEOUT_INTR_ENABLE>
#3323: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1628:
+       pChipcHw->DDRPhaseCtrl2 |= chipcHw_REG_DDR_TIMEOUT_INTR_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3324: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1629:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3329: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1634:
+/**
+*  @brief   VPM phase alignment timeout interrupt enable

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3335: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1640:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3336: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1641:
+       chipcHw_vpmHwPhaseAlignTimeoutInterruptClear(); /* Recommended */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3338: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1643:
+       pChipcHw->VPMPhaseCtrl2 |= chipcHw_REG_VPM_TIMEOUT_INTR_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_TIMEOUT_INTR_ENABLE>
#3338: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1643:
+       pChipcHw->VPMPhaseCtrl2 |= chipcHw_REG_VPM_TIMEOUT_INTR_ENABLE;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3339: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1644:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3344: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1649:
+/**
+*  @brief   DDR phase alignment timeout interrupt disable

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3350: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1655:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3351: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1656:
+       pChipcHw->DDRPhaseCtrl2 &= ~chipcHw_REG_DDR_TIMEOUT_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3352: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1657:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3357: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1662:
+/**
+*  @brief   VPM phase alignment timeout interrupt disable

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3363: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1668:
+       REG_LOCAL_IRQ_SAVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3364: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1669:
+       pChipcHw->VPMPhaseCtrl2 &= ~chipcHw_REG_VPM_TIMEOUT_INTR_ENABLE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3365: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_inline.h:1670:
+       REG_LOCAL_IRQ_RESTORE;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3375: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3376: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:2:
+/*****************************************************************************
+* Copyright 2004 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3391: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:17:
+/**
+*  @file    chipcHw_reg.h

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_BASE_ADDRESS>
#3404: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:30:
+#define chipcHw_BASE_ADDRESS    MM_IO_BASE_CHIPC

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3406: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:32:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3407: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:33:
+       uint32_t ChipId;        /* Chip ID */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3407: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:33:
+       uint32_t ChipId;        /* Chip ID */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:34:
+       uint32_t DDRClock;      /* PLL1 Channel 1 for DDR clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3408: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:34:
+       uint32_t DDRClock;      /* PLL1 Channel 1 for DDR clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3409: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:35:
+       uint32_t ARMClock;      /* PLL1 Channel 2 for ARM clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3409: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:35:
+       uint32_t ARMClock;      /* PLL1 Channel 2 for ARM clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3410: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:36:
+       uint32_t ESWClock;      /* PLL1 Channel 3 for ESW system clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3410: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:36:
+       uint32_t ESWClock;      /* PLL1 Channel 3 for ESW system clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3411: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:37:
+       uint32_t VPMClock;      /* PLL1 Channel 4 for VPM clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3411: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:37:
+       uint32_t VPMClock;      /* PLL1 Channel 4 for VPM clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3412: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:38:
+       uint32_t ESW125Clock;   /* PLL1 Channel 5 for ESW 125MHz clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3412: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:38:
+       uint32_t ESW125Clock;   /* PLL1 Channel 5 for ESW 125MHz clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3413: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:39:
+       uint32_t UARTClock;     /* PLL1 Channel 6 for UART clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3413: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:39:
+       uint32_t UARTClock;     /* PLL1 Channel 6 for UART clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3414: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:40:
+       uint32_t SDIO0Clock;    /* PLL1 Channel 7 for SDIO 0 clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3414: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:40:
+       uint32_t SDIO0Clock;    /* PLL1 Channel 7 for SDIO 0 clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3415: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:41:
+       uint32_t SDIO1Clock;    /* PLL1 Channel 8 for SDIO 1 clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3415: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:41:
+       uint32_t SDIO1Clock;    /* PLL1 Channel 8 for SDIO 1 clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3416: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:42:
+       uint32_t SPIClock;      /* PLL1 Channel 9 for SPI master Clock  */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3416: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:42:
+       uint32_t SPIClock;      /* PLL1 Channel 9 for SPI master Clock  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3417: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:43:
+       uint32_t ETMClock;      /* PLL1 Channel 10 for ARM ETM Clock  */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3417: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:43:
+       uint32_t ETMClock;      /* PLL1 Channel 10 for ARM ETM Clock  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3419: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:45:
+       uint32_t ACLKClock;     /* ACLK Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3419: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:45:
+       uint32_t ACLKClock;     /* ACLK Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3420: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:46:
+       uint32_t OTPClock;      /* OTP Clock  (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3420: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:46:
+       uint32_t OTPClock;      /* OTP Clock  (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3421: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:47:
+       uint32_t I2CClock;      /* I2C Clock (CK_13m) (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3421: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:47:
+       uint32_t I2CClock;      /* I2C Clock (CK_13m) (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3422: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:48:
+       uint32_t I2S0Clock;     /* I2S0 Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3422: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:48:
+       uint32_t I2S0Clock;     /* I2S0 Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3423: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:49:
+       uint32_t RTBUSClock;    /* RTBUS (DDR PHY Config.) Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3423: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:49:
+       uint32_t RTBUSClock;    /* RTBUS (DDR PHY Config.) Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3424: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:50:
+       uint32_t pad1;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3424: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:50:
+       uint32_t pad1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3425: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:51:
+       uint32_t APM100Clock;   /* APM 100MHz CLK Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3425: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:51:
+       uint32_t APM100Clock;   /* APM 100MHz CLK Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3426: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:52:
+       uint32_t TSCClock;      /* TSC Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3426: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:52:
+       uint32_t TSCClock;      /* TSC Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3427: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:53:
+       uint32_t LEDClock;      /* LED Clock (Divider) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3427: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:53:
+       uint32_t LEDClock;      /* LED Clock (Divider) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3429: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:55:
+       uint32_t USBClock;      /* PLL2 Channel 1 for USB clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3429: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:55:
+       uint32_t USBClock;      /* PLL2 Channel 1 for USB clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3430: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:56:
+       uint32_t LCDClock;      /* PLL2 Channel 2 for LCD clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3430: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:56:
+       uint32_t LCDClock;      /* PLL2 Channel 2 for LCD clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3431: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:57:
+       uint32_t APMClock;      /* PLL2 Channel 3 for APM 200 MHz clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3431: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:57:
+       uint32_t APMClock;      /* PLL2 Channel 3 for APM 200 MHz clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3433: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:59:
+       uint32_t BusIntfClock;  /* Bus interface clock */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3433: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:59:
+       uint32_t BusIntfClock;  /* Bus interface clock */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3435: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:61:
+       uint32_t PLLStatus;     /* PLL status register (PLL1) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLStatus>
#3435: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:61:
+       uint32_t PLLStatus;     /* PLL status register (PLL1) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3435: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:61:
+       uint32_t PLLStatus;     /* PLL status register (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3436: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:62:
+       uint32_t PLLConfig;     /* PLL configuration register  (PLL1) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3436: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:62:
+       uint32_t PLLConfig;     /* PLL configuration register  (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3437: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:63:
+       uint32_t PLLPreDivider; /* PLL pre-divider control register (PLL1) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3437: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:63:
+       uint32_t PLLPreDivider; /* PLL pre-divider control register (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3438: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:64:
+       uint32_t PLLDivider;    /* PLL divider control register (PLL1) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLDivider>
#3438: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:64:
+       uint32_t PLLDivider;    /* PLL divider control register (PLL1) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3438: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:64:
+       uint32_t PLLDivider;    /* PLL divider control register (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3439: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:65:
+       uint32_t PLLControl1;   /* PLL analog control register #1 (PLL1) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLControl1>
#3439: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:65:
+       uint32_t PLLControl1;   /* PLL analog control register #1 (PLL1) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3439: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:65:
+       uint32_t PLLControl1;   /* PLL analog control register #1 (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3440: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:66:
+       uint32_t PLLControl2;   /* PLL analog control register #2 (PLL1) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLControl2>
#3440: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:66:
+       uint32_t PLLControl2;   /* PLL analog control register #2 (PLL1) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3440: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:66:
+       uint32_t PLLControl2;   /* PLL analog control register #2 (PLL1) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3442: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:68:
+       uint32_t I2S1Clock;     /* I2S1 Clock  */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3442: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:68:
+       uint32_t I2S1Clock;     /* I2S1 Clock  */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3443: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:69:
+       uint32_t AudioEnable;   /* Enable/ disable audio channel */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3443: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:69:
+       uint32_t AudioEnable;   /* Enable/ disable audio channel */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3444: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:70:
+       uint32_t SoftReset1;    /* Reset blocks */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3444: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:70:
+       uint32_t SoftReset1;    /* Reset blocks */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3445: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:71:
+       uint32_t SoftReset2;    /* Reset blocks */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3445: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:71:
+       uint32_t SoftReset2;    /* Reset blocks */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:72:
+       uint32_t Spare1;        /* Phase align interrupts */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3446: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:72:
+       uint32_t Spare1;        /* Phase align interrupts */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3447: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:73:
+       uint32_t Sticky;        /* Sticky bits */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3447: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:73:
+       uint32_t Sticky;        /* Sticky bits */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3448: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:74:
+       uint32_t MiscCtrl;      /* Misc. control */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3448: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:74:
+       uint32_t MiscCtrl;      /* Misc. control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3449: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:75:
+       uint32_t pad3[3];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3449: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:75:
+       uint32_t pad3[3];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3451: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:77:
+       uint32_t PLLStatus2;    /* PLL status register (PLL2) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLStatus2>
#3451: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:77:
+       uint32_t PLLStatus2;    /* PLL status register (PLL2) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3451: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:77:
+       uint32_t PLLStatus2;    /* PLL status register (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3452: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:78:
+       uint32_t PLLConfig2;    /* PLL configuration register  (PLL2) */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3452: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:78:
+       uint32_t PLLConfig2;    /* PLL configuration register  (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3453: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:79:
+       uint32_t PLLPreDivider2;        /* PLL pre-divider control register (PLL2) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLPreDivider2>
#3453: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:79:
+       uint32_t PLLPreDivider2;        /* PLL pre-divider control register (PLL2) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3453: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:79:
+       uint32_t PLLPreDivider2;        /* PLL pre-divider control register (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3454: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:80:
+       uint32_t PLLDivider2;   /* PLL divider control register (PLL2) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLDivider2>
#3454: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:80:
+       uint32_t PLLDivider2;   /* PLL divider control register (PLL2) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3454: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:80:
+       uint32_t PLLDivider2;   /* PLL divider control register (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3455: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:81:
+       uint32_t PLLControl12;  /* PLL analog control register #1 (PLL2) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLControl12>
#3455: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:81:
+       uint32_t PLLControl12;  /* PLL analog control register #1 (PLL2) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3455: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:81:
+       uint32_t PLLControl12;  /* PLL analog control register #1 (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3456: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:82:
+       uint32_t PLLControl22;  /* PLL analog control register #2 (PLL2) */$

CHECK:CAMELCASE: Avoid CamelCase: <PLLControl22>
#3456: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:82:
+       uint32_t PLLControl22;  /* PLL analog control register #2 (PLL2) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3456: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:82:
+       uint32_t PLLControl22;  /* PLL analog control register #2 (PLL2) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3458: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:84:
+       uint32_t DDRPhaseCtrl1; /* DDR Clock Phase Alignment control1 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3458: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:84:
+       uint32_t DDRPhaseCtrl1; /* DDR Clock Phase Alignment control1 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3459: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:85:
+       uint32_t VPMPhaseCtrl1; /* VPM Clock Phase Alignment control1 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3459: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:85:
+       uint32_t VPMPhaseCtrl1; /* VPM Clock Phase Alignment control1 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3460: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:86:
+       uint32_t PhaseAlignStatus;      /* DDR/VPM Clock Phase Alignment Status */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3460: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:86:
+       uint32_t PhaseAlignStatus;      /* DDR/VPM Clock Phase Alignment Status */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:87:
+       uint32_t PhaseCtrlStatus;       /* DDR/VPM Clock HW DDR/VPM ph_ctrl and load_ch Status */$

CHECK:CAMELCASE: Avoid CamelCase: <PhaseCtrlStatus>
#3461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:87:
+       uint32_t PhaseCtrlStatus;       /* DDR/VPM Clock HW DDR/VPM ph_ctrl and load_ch Status */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3461: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:87:
+       uint32_t PhaseCtrlStatus;       /* DDR/VPM Clock HW DDR/VPM ph_ctrl and load_ch Status */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3462: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:88:
+       uint32_t DDRPhaseCtrl2; /* DDR Clock Phase Alignment control2 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3462: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:88:
+       uint32_t DDRPhaseCtrl2; /* DDR Clock Phase Alignment control2 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3463: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:89:
+       uint32_t VPMPhaseCtrl2; /* VPM Clock Phase Alignment control2 */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3463: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:89:
+       uint32_t VPMPhaseCtrl2; /* VPM Clock Phase Alignment control2 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3464: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:90:
+       uint32_t pad4[9];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3464: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:90:
+       uint32_t pad4[9];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3466: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:92:
+       uint32_t SoftOTP1;      /* Software OTP control */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3466: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:92:
+       uint32_t SoftOTP1;      /* Software OTP control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3467: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:93:
+       uint32_t SoftOTP2;      /* Software OTP control */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3467: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:93:
+       uint32_t SoftOTP2;      /* Software OTP control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3468: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:94:
+       uint32_t SoftStraps;    /* Software strap */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3468: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:94:
+       uint32_t SoftStraps;    /* Software strap */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3469: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:95:
+       uint32_t PinStraps;     /* Pin Straps */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3469: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:95:
+       uint32_t PinStraps;     /* Pin Straps */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3470: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:96:
+       uint32_t DiffOscCtrl;   /* Diff oscillator control */$

CHECK:CAMELCASE: Avoid CamelCase: <DiffOscCtrl>
#3470: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:96:
+       uint32_t DiffOscCtrl;   /* Diff oscillator control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3470: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:96:
+       uint32_t DiffOscCtrl;   /* Diff oscillator control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3471: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:97:
+       uint32_t DiagsCtrl;     /* Diagnostic control */$

CHECK:CAMELCASE: Avoid CamelCase: <DiagsCtrl>
#3471: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:97:
+       uint32_t DiagsCtrl;     /* Diagnostic control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3471: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:97:
+       uint32_t DiagsCtrl;     /* Diagnostic control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3472: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:98:
+       uint32_t DiagsOutputCtrl;       /* Diagnostic output enable */$

CHECK:CAMELCASE: Avoid CamelCase: <DiagsOutputCtrl>
#3472: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:98:
+       uint32_t DiagsOutputCtrl;       /* Diagnostic output enable */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3472: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:98:
+       uint32_t DiagsOutputCtrl;       /* Diagnostic output enable */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3473: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:99:
+       uint32_t DiagsReadBackCtrl;     /* Diagnostic read back control */$

CHECK:CAMELCASE: Avoid CamelCase: <DiagsReadBackCtrl>
#3473: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:99:
+       uint32_t DiagsReadBackCtrl;     /* Diagnostic read back control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3473: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:99:
+       uint32_t DiagsReadBackCtrl;     /* Diagnostic read back control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3475: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:101:
+       uint32_t LcdPifMode;    /* LCD/PIF Pin Sharing MUX Mode */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3475: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:101:
+       uint32_t LcdPifMode;    /* LCD/PIF Pin Sharing MUX Mode */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3477: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:103:
+       uint32_t GpioMux_0_7;   /* Pin Sharing MUX0 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_0_7>
#3477: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:103:
+       uint32_t GpioMux_0_7;   /* Pin Sharing MUX0 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3477: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:103:
+       uint32_t GpioMux_0_7;   /* Pin Sharing MUX0 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3478: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:104:
+       uint32_t GpioMux_8_15;  /* Pin Sharing MUX1 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_8_15>
#3478: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:104:
+       uint32_t GpioMux_8_15;  /* Pin Sharing MUX1 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3478: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:104:
+       uint32_t GpioMux_8_15;  /* Pin Sharing MUX1 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3479: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:105:
+       uint32_t GpioMux_16_23; /* Pin Sharing MUX2 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_16_23>
#3479: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:105:
+       uint32_t GpioMux_16_23; /* Pin Sharing MUX2 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3479: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:105:
+       uint32_t GpioMux_16_23; /* Pin Sharing MUX2 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3480: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:106:
+       uint32_t GpioMux_24_31; /* Pin Sharing MUX3 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_24_31>
#3480: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:106:
+       uint32_t GpioMux_24_31; /* Pin Sharing MUX3 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3480: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:106:
+       uint32_t GpioMux_24_31; /* Pin Sharing MUX3 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3481: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:107:
+       uint32_t GpioMux_32_39; /* Pin Sharing MUX4 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_32_39>
#3481: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:107:
+       uint32_t GpioMux_32_39; /* Pin Sharing MUX4 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3481: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:107:
+       uint32_t GpioMux_32_39; /* Pin Sharing MUX4 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3482: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:108:
+       uint32_t GpioMux_40_47; /* Pin Sharing MUX5 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_40_47>
#3482: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:108:
+       uint32_t GpioMux_40_47; /* Pin Sharing MUX5 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3482: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:108:
+       uint32_t GpioMux_40_47; /* Pin Sharing MUX5 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:109:
+       uint32_t GpioMux_48_55; /* Pin Sharing MUX6 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_48_55>
#3483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:109:
+       uint32_t GpioMux_48_55; /* Pin Sharing MUX6 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3483: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:109:
+       uint32_t GpioMux_48_55; /* Pin Sharing MUX6 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3484: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:110:
+       uint32_t GpioMux_56_63; /* Pin Sharing MUX7 Control */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioMux_56_63>
#3484: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:110:
+       uint32_t GpioMux_56_63; /* Pin Sharing MUX7 Control */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3484: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:110:
+       uint32_t GpioMux_56_63; /* Pin Sharing MUX7 Control */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3486: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:112:
+       uint32_t GpioSR_0_7;    /* Slew rate for GPIO 0 - 7 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_0_7>
#3486: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:112:
+       uint32_t GpioSR_0_7;    /* Slew rate for GPIO 0 - 7 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3486: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:112:
+       uint32_t GpioSR_0_7;    /* Slew rate for GPIO 0 - 7 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3487: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:113:
+       uint32_t GpioSR_8_15;   /* Slew rate for GPIO 8 - 15 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_8_15>
#3487: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:113:
+       uint32_t GpioSR_8_15;   /* Slew rate for GPIO 8 - 15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3487: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:113:
+       uint32_t GpioSR_8_15;   /* Slew rate for GPIO 8 - 15 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3488: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:114:
+       uint32_t GpioSR_16_23;  /* Slew rate for GPIO 16 - 23 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_16_23>
#3488: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:114:
+       uint32_t GpioSR_16_23;  /* Slew rate for GPIO 16 - 23 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3488: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:114:
+       uint32_t GpioSR_16_23;  /* Slew rate for GPIO 16 - 23 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3489: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:115:
+       uint32_t GpioSR_24_31;  /* Slew rate for GPIO 24 - 31 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_24_31>
#3489: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:115:
+       uint32_t GpioSR_24_31;  /* Slew rate for GPIO 24 - 31 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3489: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:115:
+       uint32_t GpioSR_24_31;  /* Slew rate for GPIO 24 - 31 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3490: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:116:
+       uint32_t GpioSR_32_39;  /* Slew rate for GPIO 32 - 39 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_32_39>
#3490: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:116:
+       uint32_t GpioSR_32_39;  /* Slew rate for GPIO 32 - 39 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3490: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:116:
+       uint32_t GpioSR_32_39;  /* Slew rate for GPIO 32 - 39 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3491: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:117:
+       uint32_t GpioSR_40_47;  /* Slew rate for GPIO 40 - 47 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_40_47>
#3491: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:117:
+       uint32_t GpioSR_40_47;  /* Slew rate for GPIO 40 - 47 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3491: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:117:
+       uint32_t GpioSR_40_47;  /* Slew rate for GPIO 40 - 47 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3492: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:118:
+       uint32_t GpioSR_48_55;  /* Slew rate for GPIO 48 - 55 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_48_55>
#3492: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:118:
+       uint32_t GpioSR_48_55;  /* Slew rate for GPIO 48 - 55 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3492: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:118:
+       uint32_t GpioSR_48_55;  /* Slew rate for GPIO 48 - 55 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3493: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:119:
+       uint32_t GpioSR_56_63;  /* Slew rate for GPIO 56 - 63 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioSR_56_63>
#3493: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:119:
+       uint32_t GpioSR_56_63;  /* Slew rate for GPIO 56 - 63 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3493: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:119:
+       uint32_t GpioSR_56_63;  /* Slew rate for GPIO 56 - 63 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3494: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:120:
+       uint32_t MiscSR_0_7;    /* Slew rate for MISC 0 - 7 */$

CHECK:CAMELCASE: Avoid CamelCase: <MiscSR_0_7>
#3494: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:120:
+       uint32_t MiscSR_0_7;    /* Slew rate for MISC 0 - 7 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3494: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:120:
+       uint32_t MiscSR_0_7;    /* Slew rate for MISC 0 - 7 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3495: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:121:
+       uint32_t MiscSR_8_15;   /* Slew rate for MISC 8 - 15 */$

CHECK:CAMELCASE: Avoid CamelCase: <MiscSR_8_15>
#3495: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:121:
+       uint32_t MiscSR_8_15;   /* Slew rate for MISC 8 - 15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3495: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:121:
+       uint32_t MiscSR_8_15;   /* Slew rate for MISC 8 - 15 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:123:
+       uint32_t GpioPull_0_15; /* Pull up registers for GPIO 0 - 15 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioPull_0_15>
#3497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:123:
+       uint32_t GpioPull_0_15; /* Pull up registers for GPIO 0 - 15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3497: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:123:
+       uint32_t GpioPull_0_15; /* Pull up registers for GPIO 0 - 15 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3498: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:124:
+       uint32_t GpioPull_16_31;        /* Pull up registers for GPIO 16 - 31 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioPull_16_31>
#3498: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:124:
+       uint32_t GpioPull_16_31;        /* Pull up registers for GPIO 16 - 31 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3498: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:124:
+       uint32_t GpioPull_16_31;        /* Pull up registers for GPIO 16 - 31 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3499: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:125:
+       uint32_t GpioPull_32_47;        /* Pull up registers for GPIO 32 - 47 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioPull_32_47>
#3499: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:125:
+       uint32_t GpioPull_32_47;        /* Pull up registers for GPIO 32 - 47 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3499: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:125:
+       uint32_t GpioPull_32_47;        /* Pull up registers for GPIO 32 - 47 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3500: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:126:
+       uint32_t GpioPull_48_63;        /* Pull up registers for GPIO 48 - 63 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioPull_48_63>
#3500: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:126:
+       uint32_t GpioPull_48_63;        /* Pull up registers for GPIO 48 - 63 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3500: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:126:
+       uint32_t GpioPull_48_63;        /* Pull up registers for GPIO 48 - 63 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3501: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:127:
+       uint32_t MiscPull_0_15; /* Pull up registers for MISC 0 - 15 */$

CHECK:CAMELCASE: Avoid CamelCase: <MiscPull_0_15>
#3501: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:127:
+       uint32_t MiscPull_0_15; /* Pull up registers for MISC 0 - 15 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3501: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:127:
+       uint32_t MiscPull_0_15; /* Pull up registers for MISC 0 - 15 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3503: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:129:
+       uint32_t GpioInput_0_31;        /* Input type for GPIO 0 - 31 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioInput_0_31>
#3503: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:129:
+       uint32_t GpioInput_0_31;        /* Input type for GPIO 0 - 31 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3503: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:129:
+       uint32_t GpioInput_0_31;        /* Input type for GPIO 0 - 31 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3504: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:130:
+       uint32_t GpioInput_32_63;       /* Input type for GPIO 32 - 63 */$

CHECK:CAMELCASE: Avoid CamelCase: <GpioInput_32_63>
#3504: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:130:
+       uint32_t GpioInput_32_63;       /* Input type for GPIO 32 - 63 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3504: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:130:
+       uint32_t GpioInput_32_63;       /* Input type for GPIO 32 - 63 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3505: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:131:
+       uint32_t MiscInput_0_15;        /* Input type for MISC 0 - 16 */$

CHECK:CAMELCASE: Avoid CamelCase: <MiscInput_0_15>
#3505: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:131:
+       uint32_t MiscInput_0_15;        /* Input type for MISC 0 - 16 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3505: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:131:
+       uint32_t MiscInput_0_15;        /* Input type for MISC 0 - 16 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_t>
#3506: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:132:
+} chipcHw_REG_t;

CHECK:SPACING: No space is necessary after a cast
#3508: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:134:
+#define pChipcHw  ((volatile chipcHw_REG_t *) chipcHw_BASE_ADDRESS)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3508: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:134:
+#define pChipcHw  ((volatile chipcHw_REG_t *) chipcHw_BASE_ADDRESS)

CHECK:SPACING: No space is necessary after a cast
#3509: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:135:
+#define pChipcPhysical  ((volatile chipcHw_REG_t *) MM_ADDR_IO_CHIPC)

CHECK:CAMELCASE: Avoid CamelCase: <pChipcPhysical>
#3509: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:135:
+#define pChipcPhysical  ((volatile chipcHw_REG_t *) MM_ADDR_IO_CHIPC)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3509: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:135:
+#define pChipcPhysical  ((volatile chipcHw_REG_t *) MM_ADDR_IO_CHIPC)

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#3517: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:143:
+#define chipcHw_REG_PLL_STATUS_CONTROL_ENABLE           0x80000000     /* Allow controlling PLL registers */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_STATUS_CONTROL_ENABLE>
#3517: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:143:
+#define chipcHw_REG_PLL_STATUS_CONTROL_ENABLE           0x80000000     /* Allow controlling PLL registers */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_STATUS_LOCKED>
#3518: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:144:
+#define chipcHw_REG_PLL_STATUS_LOCKED                   0x00000001     /* PLL is settled */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_D_RESET>
#3519: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:145:
+#define chipcHw_REG_PLL_CONFIG_D_RESET                  0x00000008     /* Digital reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_A_RESET>
#3520: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:146:
+#define chipcHw_REG_PLL_CONFIG_A_RESET                  0x00000004     /* Analog reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_BYPASS_ENABLE>
#3521: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:147:
+#define chipcHw_REG_PLL_CONFIG_BYPASS_ENABLE            0x00000020     /* Bypass enable */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_OUTPUT_ENABLE>
#3522: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:148:
+#define chipcHw_REG_PLL_CONFIG_OUTPUT_ENABLE            0x00000010     /* Output enable */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3524: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:150:
+#define chipcHw_REG_PLL_CONFIG_VCO_SPLIT_FREQ           1600000000     /* 1.6GHz VCO split frequency */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_VCO_SPLIT_FREQ>
#3524: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:150:
+#define chipcHw_REG_PLL_CONFIG_VCO_SPLIT_FREQ           1600000000     /* 1.6GHz VCO split frequency */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_VCO_800_1600>
#3525: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:151:
+#define chipcHw_REG_PLL_CONFIG_VCO_800_1600             0x00000000     /* VCO range 800-1600 MHz */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CONFIG_VCO_1601_3200>
#3526: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:152:
+#define chipcHw_REG_PLL_CONFIG_VCO_1601_3200            0x00000080     /* VCO range 1601-3200 MHz */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_PHASE_COMP>
#3531: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:157:
+#define chipcHw_REG_PLL_CLOCK_PHASE_COMP                0x00800000     /* Phase comparator output */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_TO_BUS_RATIO_MASK>
#3532: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:158:
+#define chipcHw_REG_PLL_CLOCK_TO_BUS_RATIO_MASK         0x00300000     /* Clock to bus ratio mask */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_TO_BUS_RATIO_SHIFT>
#3533: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:159:
+#define chipcHw_REG_PLL_CLOCK_TO_BUS_RATIO_SHIFT        20     /* Number of bits to be shifted */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_SOURCE_GPIO>
#3535: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:161:
+#define chipcHw_REG_PLL_CLOCK_SOURCE_GPIO               0x00040000     /* Use GPIO as source */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3538: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:164:
+#define chipcHw_REG_PLL_CLOCK_PHASE_UPDATE_ENABLE       0x00008000     /* Clock phase update enable */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_PHASE_UPDATE_ENABLE>
#3538: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:164:
+#define chipcHw_REG_PLL_CLOCK_PHASE_UPDATE_ENABLE       0x00008000     /* Clock phase update enable */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_PHASE_CONTROL_SHIFT>
#3539: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:165:
+#define chipcHw_REG_PLL_CLOCK_PHASE_CONTROL_SHIFT       8      /* Number of bits to be shifted */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_PHASE_CONTROL_MASK>
#3540: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:166:
+#define chipcHw_REG_PLL_CLOCK_PHASE_CONTROL_MASK        0x00003F00     /* Phase control mask */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_CLOCK_MDIV_MASK>
#3541: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:167:
+#define chipcHw_REG_PLL_CLOCK_MDIV_MASK                 0x000000FF     /* Clock post divider mask

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3542: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:168:
+#define chipcHw_REG_PLL_CLOCK_MDIV_MASK                 0x000000FF     /* Clock post divider mask
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#3543: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:169:
+                                                                          00000000 = divide-by-256$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3544: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:170:
+                                                                          00000001 = divide-by-1$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3545: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:171:
+                                                                          00000010 = divide-by-2$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3546: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:172:
+                                                                          00000011 = divide-by-3$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3547: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:173:
+                                                                          00000100 = divide-by-4$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3548: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:174:
+                                                                          00000101 = divide-by-5$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3549: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:175:
+                                                                          00000110 = divide-by-6$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3550: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:176:
+                                                                          .$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3551: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:177:
+                                                                          .$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3552: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:178:
+                                                                          11111011 = divide-by-251$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3553: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:179:
+                                                                          11111100 = divide-by-252$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3554: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:180:
+                                                                          11111101 = divide-by-253$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3555: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:181:
+                                                                          11111110 = divide-by-254$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3556: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:182:
+                                                                        */$

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3558: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:184:
+#define chipcHw_REG_DIV_CLOCK_SOURCE_OTHER              0x00040000     /* NON-PLL clock source select */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DIV_CLOCK_SOURCE_OTHER>
#3558: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:184:
+#define chipcHw_REG_DIV_CLOCK_SOURCE_OTHER              0x00040000     /* NON-PLL clock source select */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3559: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:185:
+#define chipcHw_REG_DIV_CLOCK_BYPASS_SELECT             0x00020000     /* NON-PLL clock bypass enable */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3560: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:186:
+#define chipcHw_REG_DIV_CLOCK_OUTPUT_ENABLE             0x00010000     /* NON-PLL clock output enable */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#3561: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:187:
+#define chipcHw_REG_DIV_CLOCK_DIV_MASK                  0x000000FF     /* NON-PLL clock post-divide mask */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DIV_CLOCK_DIV_MASK>
#3561: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:187:
+#define chipcHw_REG_DIV_CLOCK_DIV_MASK                  0x000000FF     /* NON-PLL clock post-divide mask */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#3562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:188:
+#define chipcHw_REG_DIV_CLOCK_DIV_256                   0x00000000     /* NON-PLL clock post-divide by 256 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DIV_CLOCK_DIV_256>
#3562: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:188:
+#define chipcHw_REG_DIV_CLOCK_DIV_256                   0x00000000     /* NON-PLL clock post-divide by 256 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_P1_SHIFT>
#3564: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:190:
+#define chipcHw_REG_PLL_PREDIVIDER_P1_SHIFT             0

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_P2_SHIFT>
#3565: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:191:
+#define chipcHw_REG_PLL_PREDIVIDER_P2_SHIFT             4

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_SHIFT>
#3566: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:192:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_SHIFT           8

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MASK>
#3567: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:193:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MASK            0x0001FF00

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_POWER_DOWN>
#3568: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:194:
+#define chipcHw_REG_PLL_PREDIVIDER_POWER_DOWN           0x02000000

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#3571: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:197:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_UNIT  0x00100000     /* MASH Sigma-Delta Modulator Unit Mode */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_UNIT>
#3571: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:197:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_UNIT  0x00100000     /* MASH Sigma-Delta Modulator Unit Mode */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#3572: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:198:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_UNIT   0x00200000     /* MFB Sigma-Delta Modulator Unit Mode */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_UNIT>
#3572: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:198:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_UNIT   0x00200000     /* MFB Sigma-Delta Modulator Unit Mode */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#3573: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:199:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_1_8   0x00300000     /* MASH Sigma-Delta Modulator 1/8 Mode */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_1_8>
#3573: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:199:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MASH_1_8   0x00300000     /* MASH Sigma-Delta Modulator 1/8 Mode */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#3574: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:200:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_1_8    0x00400000     /* MFB Sigma-Delta Modulator 1/8 Mode */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_1_8>
#3574: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:200:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_MODE_MFB_1_8    0x00400000     /* MFB Sigma-Delta Modulator 1/8 Mode */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_NDIV_i>
#3576: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:202:
+#define chipcHw_REG_PLL_PREDIVIDER_NDIV_i(vco)          ((vco) / chipcHw_XTAL_FREQ_Hz)

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_P1>
#3577: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:203:
+#define chipcHw_REG_PLL_PREDIVIDER_P1                   1

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_PREDIVIDER_P2>
#3578: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:204:
+#define chipcHw_REG_PLL_PREDIVIDER_P2                   1

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_DIVIDER_M1DIV>
#3580: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:206:
+#define chipcHw_REG_PLL_DIVIDER_M1DIV                   0x03000000

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_DIVIDER_FRAC>
#3581: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:207:
+#define chipcHw_REG_PLL_DIVIDER_FRAC                    0x00FFFFFF     /* Fractional divider */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#3583: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:209:
+#define chipcHw_REG_PLL_DIVIDER_NDIV_f_SS               (0x00FFFFFF)   /* To attain spread with max frequency */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_DIVIDER_NDIV_f_SS>
#3583: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:209:
+#define chipcHw_REG_PLL_DIVIDER_NDIV_f_SS               (0x00FFFFFF)   /* To attain spread with max frequency */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3585: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:211:
+#define chipcHw_REG_PLL_DIVIDER_NDIV_f                  0      /* ndiv_frac = chipcHw_REG_PLL_DIVIDER_NDIV_f /

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_DIVIDER_NDIV_f>
#3585: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:211:
+#define chipcHw_REG_PLL_DIVIDER_NDIV_f                  0      /* ndiv_frac = chipcHw_REG_PLL_DIVIDER_NDIV_f /

ERROR:CODE_INDENT: code indent should use tabs where possible
#3586: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:212:
+                                                                  chipcHw_REG_PLL_DIVIDER_FRAC$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3586: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:212:
+#define chipcHw_REG_PLL_DIVIDER_NDIV_f                  0      /* ndiv_frac = chipcHw_REG_PLL_DIVIDER_NDIV_f /
+                                                                  chipcHw_REG_PLL_DIVIDER_FRAC

ERROR:CODE_INDENT: code indent should use tabs where possible
#3587: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:213:
+                                                                  = 0, when SS is disable$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3588: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:214:
+                                                                */$

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#3590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:216:
+#define chipcHw_REG_PLL_DIVIDER_MDIV(vco, Hz)           ((chipcHw_divide((vco), (Hz)) > 255) ? 0 : chipcHw_divide((vco), (Hz)))

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_PLL_DIVIDER_MDIV>
#3590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:216:
+#define chipcHw_REG_PLL_DIVIDER_MDIV(vco, Hz)           ((chipcHw_divide((vco), (Hz)) > 255) ? 0 : chipcHw_divide((vco), (Hz)))

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_divide>
#3590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:216:
+#define chipcHw_REG_PLL_DIVIDER_MDIV(vco, Hz)           ((chipcHw_divide((vco), (Hz)) > 255) ? 0 : chipcHw_divide((vco), (Hz)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vco' - possible side-effects?
#3590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:216:
+#define chipcHw_REG_PLL_DIVIDER_MDIV(vco, Hz)           ((chipcHw_divide((vco), (Hz)) > 255) ? 0 : chipcHw_divide((vco), (Hz)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Hz' - possible side-effects?
#3590: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:216:
+#define chipcHw_REG_PLL_DIVIDER_MDIV(vco, Hz)           ((chipcHw_divide((vco), (Hz)) > 255) ? 0 : chipcHw_divide((vco), (Hz)))

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_ACLKClock_CLK_DIV_MASK>
#3592: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:218:
+#define chipcHw_REG_ACLKClock_CLK_DIV_MASK              0x3

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_OPTION_BROM>
#3605: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:231:
+#define chipcHw_STRAPS_BOOT_OPTION_BROM                 0x00000000     /* Boot from Boot ROM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_OPTION_ARAM>
#3606: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:232:
+#define chipcHw_STRAPS_BOOT_OPTION_ARAM                 0x00000020     /* Boot from ARAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_BOOT_OPTION_NOR>
#3607: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:233:
+#define chipcHw_STRAPS_BOOT_OPTION_NOR                  0x00000030     /* Boot from NOR flash */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3610: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:236:
+#define chipcHw_STRAPS_NAND_PAGESIZE_512                0x00000000     /* NAND FLASH page size of 512 bytes */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#3611: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:237:
+#define chipcHw_STRAPS_NAND_PAGESIZE_2048               0x00000040     /* NAND FLASH page size of 2048 bytes */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#3612: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:238:
+#define chipcHw_STRAPS_NAND_PAGESIZE_4096               0x00000080     /* NAND FLASH page size of 4096 bytes */

WARNING:TYPO_SPELLING: 'extened' may be misspelled - perhaps 'extended'?
#3613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:239:
+#define chipcHw_STRAPS_NAND_PAGESIZE_EXT                0x000000C0     /* NAND FLASH page of extened size */
                                                                                              ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#3613: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:239:
+#define chipcHw_STRAPS_NAND_PAGESIZE_EXT                0x000000C0     /* NAND FLASH page of extened size */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#3616: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:242:
+#define chipcHw_STRAPS_NAND_EXTRA_CYCLE                 0x00000400     /* NAND FLASH address cycle configuration */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_REBOOT_TO_UART>
#3617: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:243:
+#define chipcHw_STRAPS_REBOOT_TO_UART                   0x00000800     /* Reboot to UART on error */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3623: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:249:
+#define chipcHw_STRAPS_BOOT_MODE_NORMAL_QUIET           0x00000300     /* Normal Boot (Quiet BootRom) */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_I2CS>
#3627: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:253:
+#define chipcHw_STRAPS_I2CS                             0x02000000     /* I2C Slave  */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_STRAPS_SPIS>
#3628: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:254:
+#define chipcHw_STRAPS_SPIS                             0x01000000     /* SPI Slave  */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SW_STRAPS>
#3631: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:257:
+#define chipcHw_REG_SW_STRAPS                           ((pChipcHw->PinStraps & 0x0000FC00) >> 10)

WARNING:LONG_LINE_COMMENT: line length of 131 exceeds 100 columns
#3634: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:260:
+#define chipcHw_REG_LCD_PIN_ENABLE                      0x00000001     /* LCD Controller is used and the pins have LCD functions */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#3635: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:261:
+#define chipcHw_REG_PIF_PIN_ENABLE                      0x00000002     /* LCD pins are used to perform PIF functions  */

WARNING:TYPO_SPELLING: 'thorugh' may be misspelled - perhaps 'through'?
#3637: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:263:
+#define chipcHw_GPIO_COUNT                              61     /* Number of GPIO pin accessible thorugh CHIPC */
                                                                                                 ^^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#3637: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:263:
+#define chipcHw_GPIO_COUNT                              61     /* Number of GPIO pin accessible thorugh CHIPC */

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#3660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:286:
+                                                       /* Pins beyond 42 are defined by skipping 8 bits within the register */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3660: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:286:
+                                                       /* Pins beyond 42 are defined by skipping 8 bits within the register */$

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#3661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:287:
+#define chipcHw_REG_SLEW_RATE(pin)                      (((pin) > 42) ? (&pChipcHw->GpioSR_0_7 + (((pin) + 2) >> 3)) : (&pChipcHw->GpioSR_0_7 + ((pin) >> 3)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3661: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:287:
+#define chipcHw_REG_SLEW_RATE(pin)                      (((pin) > 42) ? (&pChipcHw->GpioSR_0_7 + (((pin) + 2) >> 3)) : (&pChipcHw->GpioSR_0_7 + ((pin) >> 3)))

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#3662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:288:
+#define chipcHw_REG_SLEW_RATE_POSITION(pin)             (((pin) > 42) ? ((((pin) + 2) & 0x00000007) << 2) : (((pin) & 0x00000007) << 2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3662: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:288:
+#define chipcHw_REG_SLEW_RATE_POSITION(pin)             (((pin) > 42) ? ((((pin) + 2) & 0x00000007) << 2) : (((pin) & 0x00000007) << 2))

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3665: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:291:
+#define chipcHw_REG_CURRENT_STRENGTH_2mA                0x00000001     /* Current driving strength 2 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3666: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:292:
+#define chipcHw_REG_CURRENT_STRENGTH_4mA                0x00000002     /* Current driving strength 4 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3667: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:293:
+#define chipcHw_REG_CURRENT_STRENGTH_6mA                0x00000004     /* Current driving strength 6 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3668: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:294:
+#define chipcHw_REG_CURRENT_STRENGTH_8mA                0x00000005     /* Current driving strength 8 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#3669: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:295:
+#define chipcHw_REG_CURRENT_STRENGTH_10mA               0x00000006     /* Current driving strength 10 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#3670: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:296:
+#define chipcHw_REG_CURRENT_STRENGTH_12mA               0x00000007     /* Current driving strength 12 milli ampere */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:298:
+                                                       /* Pins beyond 42 are defined by skipping 8 bits */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3672: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:298:
+                                                       /* Pins beyond 42 are defined by skipping 8 bits */$

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#3673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:299:
+#define chipcHw_REG_CURRENT(pin)                        (((pin) > 42) ? (&pChipcHw->GpioSR_0_7 + (((pin) + 2) >> 3)) : (&pChipcHw->GpioSR_0_7 + ((pin) >> 3)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3673: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:299:
+#define chipcHw_REG_CURRENT(pin)                        (((pin) > 42) ? (&pChipcHw->GpioSR_0_7 + (((pin) + 2) >> 3)) : (&pChipcHw->GpioSR_0_7 + ((pin) >> 3)))

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#3674: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:300:
+#define chipcHw_REG_CURRENT_POSITION(pin)               (((pin) > 42) ? ((((pin) + 2) & 0x00000007) << 2) : (((pin) & 0x00000007) << 2))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3674: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:300:
+#define chipcHw_REG_CURRENT_POSITION(pin)               (((pin) > 42) ? ((((pin) + 2) & 0x00000007) << 2) : (((pin) & 0x00000007) << 2))

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3678: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:304:
+#define chipcHw_REG_PULL_DOWN                           0x00000002     /* Pull down register enable */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3680: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:306:
+                                                       /* Pins beyond 42 are defined by skipping 4 bits */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3680: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:306:
+                                                       /* Pins beyond 42 are defined by skipping 4 bits */$

WARNING:LONG_LINE: line length of 164 exceeds 100 columns
#3681: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:307:
+#define chipcHw_REG_PULLUP(pin)                         (((pin) > 42) ? (&pChipcHw->GpioPull_0_15 + (((pin) + 2) >> 4)) : (&pChipcHw->GpioPull_0_15 + ((pin) >> 4)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3681: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:307:
+#define chipcHw_REG_PULLUP(pin)                         (((pin) > 42) ? (&pChipcHw->GpioPull_0_15 + (((pin) + 2) >> 4)) : (&pChipcHw->GpioPull_0_15 + ((pin) >> 4)))

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#3682: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:308:
+#define chipcHw_REG_PULLUP_POSITION(pin)                (((pin) > 42) ? ((((pin) + 2) & 0x0000000F) << 1) : (((pin) & 0x0000000F) << 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3682: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:308:
+#define chipcHw_REG_PULLUP_POSITION(pin)                (((pin) > 42) ? ((((pin) + 2) & 0x0000000F) << 1) : (((pin) & 0x0000000F) << 1))

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3685: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:311:
+#define chipcHw_REG_INPUTTYPE_ST                        0x00000001     /* High speed Schmitt Trigger */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:313:
+                                                       /* Pins beyond 42 are defined by skipping 2 bits */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3687: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:313:
+                                                       /* Pins beyond 42 are defined by skipping 2 bits */$

WARNING:LONG_LINE: line length of 166 exceeds 100 columns
#3688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:314:
+#define chipcHw_REG_INPUTTYPE(pin)                      (((pin) > 42) ? (&pChipcHw->GpioInput_0_31 + (((pin) + 2) >> 5)) : (&pChipcHw->GpioInput_0_31 + ((pin) >> 5)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3688: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:314:
+#define chipcHw_REG_INPUTTYPE(pin)                      (((pin) > 42) ? (&pChipcHw->GpioInput_0_31 + (((pin) + 2) >> 5)) : (&pChipcHw->GpioInput_0_31 + ((pin) >> 5)))

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#3689: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:315:
+#define chipcHw_REG_INPUTTYPE_POSITION(pin)             (((pin) > 42) ? ((((pin) + 2) & 0x0000001F)) : (((pin) & 0x0000001F)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pin' - possible side-effects?
#3689: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:315:
+#define chipcHw_REG_INPUTTYPE_POSITION(pin)             (((pin) > 42) ? ((((pin) + 2) & 0x0000001F)) : (((pin) & 0x0000001F)))

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3692: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:318:
+#define chipcHw_REG_BUS_CLOCK_ARM                       0x00000001     /* Bus interface clock for ARM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_ARM>
#3692: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:318:
+#define chipcHw_REG_BUS_CLOCK_ARM                       0x00000001     /* Bus interface clock for ARM */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:319:
+#define chipcHw_REG_BUS_CLOCK_VDEC                      0x00000002     /* Bus interface clock for VDEC */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_VDEC>
#3693: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:319:
+#define chipcHw_REG_BUS_CLOCK_VDEC                      0x00000002     /* Bus interface clock for VDEC */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:320:
+#define chipcHw_REG_BUS_CLOCK_ARAM                      0x00000004     /* Bus interface clock for ARAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_ARAM>
#3694: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:320:
+#define chipcHw_REG_BUS_CLOCK_ARAM                      0x00000004     /* Bus interface clock for ARAM */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3695: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:321:
+#define chipcHw_REG_BUS_CLOCK_HPM                       0x00000008     /* Bus interface clock for HPM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_HPM>
#3695: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:321:
+#define chipcHw_REG_BUS_CLOCK_HPM                       0x00000008     /* Bus interface clock for HPM */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3696: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:322:
+#define chipcHw_REG_BUS_CLOCK_DDRC                      0x00000010     /* Bus interface clock for DDRC */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_DDRC>
#3696: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:322:
+#define chipcHw_REG_BUS_CLOCK_DDRC                      0x00000010     /* Bus interface clock for DDRC */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3697: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:323:
+#define chipcHw_REG_BUS_CLOCK_DMAC0                     0x00000020     /* Bus interface clock for DMAC0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_DMAC0>
#3697: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:323:
+#define chipcHw_REG_BUS_CLOCK_DMAC0                     0x00000020     /* Bus interface clock for DMAC0 */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3698: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:324:
+#define chipcHw_REG_BUS_CLOCK_DMAC1                     0x00000040     /* Bus interface clock for DMAC1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_DMAC1>
#3698: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:324:
+#define chipcHw_REG_BUS_CLOCK_DMAC1                     0x00000040     /* Bus interface clock for DMAC1 */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3699: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:325:
+#define chipcHw_REG_BUS_CLOCK_NVI                       0x00000080     /* Bus interface clock for NVI */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_NVI>
#3699: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:325:
+#define chipcHw_REG_BUS_CLOCK_NVI                       0x00000080     /* Bus interface clock for NVI */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3700: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:326:
+#define chipcHw_REG_BUS_CLOCK_ESW                       0x00000100     /* Bus interface clock for ESW */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_ESW>
#3700: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:326:
+#define chipcHw_REG_BUS_CLOCK_ESW                       0x00000100     /* Bus interface clock for ESW */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3701: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:327:
+#define chipcHw_REG_BUS_CLOCK_GE                        0x00000200     /* Bus interface clock for GE */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_GE>
#3701: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:327:
+#define chipcHw_REG_BUS_CLOCK_GE                        0x00000200     /* Bus interface clock for GE */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3702: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:328:
+#define chipcHw_REG_BUS_CLOCK_I2CH                      0x00000400     /* Bus interface clock for I2CH */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_I2CH>
#3702: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:328:
+#define chipcHw_REG_BUS_CLOCK_I2CH                      0x00000400     /* Bus interface clock for I2CH */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3703: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:329:
+#define chipcHw_REG_BUS_CLOCK_I2S0                      0x00000800     /* Bus interface clock for I2S0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_I2S0>
#3703: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:329:
+#define chipcHw_REG_BUS_CLOCK_I2S0                      0x00000800     /* Bus interface clock for I2S0 */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3704: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:330:
+#define chipcHw_REG_BUS_CLOCK_I2S1                      0x00001000     /* Bus interface clock for I2S1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_I2S1>
#3704: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:330:
+#define chipcHw_REG_BUS_CLOCK_I2S1                      0x00001000     /* Bus interface clock for I2S1 */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3705: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:331:
+#define chipcHw_REG_BUS_CLOCK_VRAM                      0x00002000     /* Bus interface clock for VRAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_VRAM>
#3705: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:331:
+#define chipcHw_REG_BUS_CLOCK_VRAM                      0x00002000     /* Bus interface clock for VRAM */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3706: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:332:
+#define chipcHw_REG_BUS_CLOCK_CLCD                      0x00004000     /* Bus interface clock for CLCD */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_CLCD>
#3706: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:332:
+#define chipcHw_REG_BUS_CLOCK_CLCD                      0x00004000     /* Bus interface clock for CLCD */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3707: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:333:
+#define chipcHw_REG_BUS_CLOCK_LDK                       0x00008000     /* Bus interface clock for LDK */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_LDK>
#3707: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:333:
+#define chipcHw_REG_BUS_CLOCK_LDK                       0x00008000     /* Bus interface clock for LDK */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3708: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:334:
+#define chipcHw_REG_BUS_CLOCK_LED                       0x00010000     /* Bus interface clock for LED */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_LED>
#3708: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:334:
+#define chipcHw_REG_BUS_CLOCK_LED                       0x00010000     /* Bus interface clock for LED */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3709: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:335:
+#define chipcHw_REG_BUS_CLOCK_OTP                       0x00020000     /* Bus interface clock for OTP */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_OTP>
#3709: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:335:
+#define chipcHw_REG_BUS_CLOCK_OTP                       0x00020000     /* Bus interface clock for OTP */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3710: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:336:
+#define chipcHw_REG_BUS_CLOCK_PIF                       0x00040000     /* Bus interface clock for PIF */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_PIF>
#3710: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:336:
+#define chipcHw_REG_BUS_CLOCK_PIF                       0x00040000     /* Bus interface clock for PIF */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3711: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:337:
+#define chipcHw_REG_BUS_CLOCK_SPU                       0x00080000     /* Bus interface clock for SPU */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_SPU>
#3711: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:337:
+#define chipcHw_REG_BUS_CLOCK_SPU                       0x00080000     /* Bus interface clock for SPU */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3712: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:338:
+#define chipcHw_REG_BUS_CLOCK_SDIO0                     0x00100000     /* Bus interface clock for SDIO0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_SDIO0>
#3712: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:338:
+#define chipcHw_REG_BUS_CLOCK_SDIO0                     0x00100000     /* Bus interface clock for SDIO0 */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3713: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:339:
+#define chipcHw_REG_BUS_CLOCK_SDIO1                     0x00200000     /* Bus interface clock for SDIO1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_SDIO1>
#3713: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:339:
+#define chipcHw_REG_BUS_CLOCK_SDIO1                     0x00200000     /* Bus interface clock for SDIO1 */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3714: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:340:
+#define chipcHw_REG_BUS_CLOCK_SPIH                      0x00400000     /* Bus interface clock for SPIH */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_SPIH>
#3714: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:340:
+#define chipcHw_REG_BUS_CLOCK_SPIH                      0x00400000     /* Bus interface clock for SPIH */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:341:
+#define chipcHw_REG_BUS_CLOCK_SPIS                      0x00800000     /* Bus interface clock for SPIS */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_SPIS>
#3715: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:341:
+#define chipcHw_REG_BUS_CLOCK_SPIS                      0x00800000     /* Bus interface clock for SPIS */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3716: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:342:
+#define chipcHw_REG_BUS_CLOCK_UART0                     0x01000000     /* Bus interface clock for UART0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_UART0>
#3716: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:342:
+#define chipcHw_REG_BUS_CLOCK_UART0                     0x01000000     /* Bus interface clock for UART0 */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3717: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:343:
+#define chipcHw_REG_BUS_CLOCK_UART1                     0x02000000     /* Bus interface clock for UART1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_UART1>
#3717: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:343:
+#define chipcHw_REG_BUS_CLOCK_UART1                     0x02000000     /* Bus interface clock for UART1 */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#3718: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:344:
+#define chipcHw_REG_BUS_CLOCK_BBL                       0x04000000     /* Bus interface clock for BBL */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_BBL>
#3718: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:344:
+#define chipcHw_REG_BUS_CLOCK_BBL                       0x04000000     /* Bus interface clock for BBL */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3719: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:345:
+#define chipcHw_REG_BUS_CLOCK_I2CS                      0x08000000     /* Bus interface clock for I2CS */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_I2CS>
#3719: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:345:
+#define chipcHw_REG_BUS_CLOCK_I2CS                      0x08000000     /* Bus interface clock for I2CS */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#3720: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:346:
+#define chipcHw_REG_BUS_CLOCK_USBH                      0x10000000     /* Bus interface clock for USB Host */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_USBH>
#3720: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:346:
+#define chipcHw_REG_BUS_CLOCK_USBH                      0x10000000     /* Bus interface clock for USB Host */

WARNING:LONG_LINE_COMMENT: line length of 111 exceeds 100 columns
#3721: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:347:
+#define chipcHw_REG_BUS_CLOCK_USBD                      0x20000000     /* Bus interface clock for USB Device */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_USBD>
#3721: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:347:
+#define chipcHw_REG_BUS_CLOCK_USBD                      0x20000000     /* Bus interface clock for USB Device */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#3722: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:348:
+#define chipcHw_REG_BUS_CLOCK_BROM                      0x40000000     /* Bus interface clock for Boot ROM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_BROM>
#3722: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:348:
+#define chipcHw_REG_BUS_CLOCK_BROM                      0x40000000     /* Bus interface clock for Boot ROM */

WARNING:LONG_LINE_COMMENT: line length of 113 exceeds 100 columns
#3723: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:349:
+#define chipcHw_REG_BUS_CLOCK_TSC                       0x80000000     /* Bus interface clock for Touch screen */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_BUS_CLOCK_TSC>
#3723: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:349:
+#define chipcHw_REG_BUS_CLOCK_TSC                       0x80000000     /* Bus interface clock for Touch screen */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3726: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:352:
+#define chipcHw_REG_SOFT_RESET_VPM_GLOBAL_HOLD          0x0000000080000000ULL  /* Reset Global VPM and hold */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3727: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:353:
+#define chipcHw_REG_SOFT_RESET_VPM_HOLD                 0x0000000040000000ULL  /* Reset VPM and hold */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3728: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:354:
+#define chipcHw_REG_SOFT_RESET_VPM_GLOBAL               0x0000000020000000ULL  /* Reset Global VPM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM_GLOBAL>
#3728: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:354:
+#define chipcHw_REG_SOFT_RESET_VPM_GLOBAL               0x0000000020000000ULL  /* Reset Global VPM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VPM>
#3729: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:355:
+#define chipcHw_REG_SOFT_RESET_VPM                      0x0000000010000000ULL  /* Reset VPM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_KEYPAD>
#3730: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:356:
+#define chipcHw_REG_SOFT_RESET_KEYPAD                   0x0000000008000000ULL  /* Reset Key pad */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_LED>
#3731: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:357:
+#define chipcHw_REG_SOFT_RESET_LED                      0x0000000004000000ULL  /* Reset LED */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_SPU>
#3732: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:358:
+#define chipcHw_REG_SOFT_RESET_SPU                      0x0000000002000000ULL  /* Reset SPU */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_RNG>
#3733: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:359:
+#define chipcHw_REG_SOFT_RESET_RNG                      0x0000000001000000ULL  /* Reset RNG */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_PKA>
#3734: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:360:
+#define chipcHw_REG_SOFT_RESET_PKA                      0x0000000000800000ULL  /* Reset PKA */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_LCD>
#3735: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:361:
+#define chipcHw_REG_SOFT_RESET_LCD                      0x0000000000400000ULL  /* Reset LCD */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_PIF>
#3736: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:362:
+#define chipcHw_REG_SOFT_RESET_PIF                      0x0000000000200000ULL  /* Reset PIF */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_I2CS>
#3737: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:363:
+#define chipcHw_REG_SOFT_RESET_I2CS                     0x0000000000100000ULL  /* Reset I2C Slave */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_I2CH>
#3738: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:364:
+#define chipcHw_REG_SOFT_RESET_I2CH                     0x0000000000080000ULL  /* Reset I2C Host */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_SDIO1>
#3739: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:365:
+#define chipcHw_REG_SOFT_RESET_SDIO1                    0x0000000000040000ULL  /* Reset SDIO 1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_SDIO0>
#3740: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:366:
+#define chipcHw_REG_SOFT_RESET_SDIO0                    0x0000000000020000ULL  /* Reset SDIO 0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_BBL>
#3741: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:367:
+#define chipcHw_REG_SOFT_RESET_BBL                      0x0000000000010000ULL  /* Reset BBL */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_I2S1>
#3742: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:368:
+#define chipcHw_REG_SOFT_RESET_I2S1                     0x0000000000008000ULL  /* Reset I2S1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_I2S0>
#3743: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:369:
+#define chipcHw_REG_SOFT_RESET_I2S0                     0x0000000000004000ULL  /* Reset I2S0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_SPIS>
#3744: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:370:
+#define chipcHw_REG_SOFT_RESET_SPIS                     0x0000000000002000ULL  /* Reset SPI Slave */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_SPIH>
#3745: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:371:
+#define chipcHw_REG_SOFT_RESET_SPIH                     0x0000000000001000ULL  /* Reset SPI Host */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3746: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:372:
+#define chipcHw_REG_SOFT_RESET_GPIO1                    0x0000000000000800ULL  /* Reset GPIO block 1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_GPIO1>
#3746: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:372:
+#define chipcHw_REG_SOFT_RESET_GPIO1                    0x0000000000000800ULL  /* Reset GPIO block 1 */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3747: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:373:
+#define chipcHw_REG_SOFT_RESET_GPIO0                    0x0000000000000400ULL  /* Reset GPIO block 0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_GPIO0>
#3747: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:373:
+#define chipcHw_REG_SOFT_RESET_GPIO0                    0x0000000000000400ULL  /* Reset GPIO block 0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_UART1>
#3748: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:374:
+#define chipcHw_REG_SOFT_RESET_UART1                    0x0000000000000200ULL  /* Reset UART 1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_UART0>
#3749: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:375:
+#define chipcHw_REG_SOFT_RESET_UART0                    0x0000000000000100ULL  /* Reset UART 0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_NVI>
#3750: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:376:
+#define chipcHw_REG_SOFT_RESET_NVI                      0x0000000000000080ULL  /* Reset NVI */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_WDOG>
#3751: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:377:
+#define chipcHw_REG_SOFT_RESET_WDOG                     0x0000000000000040ULL  /* Reset Watch dog */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_TMR>
#3752: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:378:
+#define chipcHw_REG_SOFT_RESET_TMR                      0x0000000000000020ULL  /* Reset Timer */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ETM>
#3753: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:379:
+#define chipcHw_REG_SOFT_RESET_ETM                      0x0000000000000010ULL  /* Reset ETM */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3754: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:380:
+#define chipcHw_REG_SOFT_RESET_ARM_HOLD                 0x0000000000000008ULL  /* Reset ARM and HOLD */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ARM>
#3755: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:381:
+#define chipcHw_REG_SOFT_RESET_ARM                      0x0000000000000004ULL  /* Reset ARM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_CHIP_WARM>
#3756: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:382:
+#define chipcHw_REG_SOFT_RESET_CHIP_WARM                0x0000000000000002ULL  /* Chip warm reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_CHIP_SOFT>
#3757: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:383:
+#define chipcHw_REG_SOFT_RESET_CHIP_SOFT                0x0000000000000001ULL  /* Chip soft reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_VDEC>
#3758: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:384:
+#define chipcHw_REG_SOFT_RESET_VDEC                     0x0000100000000000ULL  /* Video decoder */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_GE>
#3759: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:385:
+#define chipcHw_REG_SOFT_RESET_GE                       0x0000080000000000ULL  /* Graphics engine */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_OTP>
#3760: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:386:
+#define chipcHw_REG_SOFT_RESET_OTP                      0x0000040000000000ULL  /* Reset OTP */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_USB2>
#3761: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:387:
+#define chipcHw_REG_SOFT_RESET_USB2                     0x0000020000000000ULL  /* Reset USB2 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_USB1>
#3762: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:388:
+#define chipcHw_REG_SOFT_RESET_USB1                     0x0000010000000000ULL  /* Reset USB 1 */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:389:
+#define chipcHw_REG_SOFT_RESET_USB                      0x0000008000000000ULL  /* Reset USB 1 and USB2 soft reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_USB>
#3763: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:389:
+#define chipcHw_REG_SOFT_RESET_USB                      0x0000008000000000ULL  /* Reset USB 1 and USB2 soft reset */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:390:
+#define chipcHw_REG_SOFT_RESET_ESW                      0x0000004000000000ULL  /* Reset Ethernet switch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ESW>
#3764: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:390:
+#define chipcHw_REG_SOFT_RESET_ESW                      0x0000004000000000ULL  /* Reset Ethernet switch */

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#3765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:391:
+#define chipcHw_REG_SOFT_RESET_ESWCLK                   0x0000002000000000ULL  /* Reset Ethernet switch clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_ESWCLK>
#3765: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:391:
+#define chipcHw_REG_SOFT_RESET_ESWCLK                   0x0000002000000000ULL  /* Reset Ethernet switch clock */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3766: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:392:
+#define chipcHw_REG_SOFT_RESET_DDRPHY                   0x0000001000000000ULL  /* Reset DDR Physical */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_DDRPHY>
#3766: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:392:
+#define chipcHw_REG_SOFT_RESET_DDRPHY                   0x0000001000000000ULL  /* Reset DDR Physical */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3767: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:393:
+#define chipcHw_REG_SOFT_RESET_DDR                      0x0000000800000000ULL  /* Reset DDR Controller */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_DDR>
#3767: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:393:
+#define chipcHw_REG_SOFT_RESET_DDR                      0x0000000800000000ULL  /* Reset DDR Controller */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3768: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:394:
+#define chipcHw_REG_SOFT_RESET_TSC                      0x0000000400000000ULL  /* Reset Touch screen */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_TSC>
#3768: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:394:
+#define chipcHw_REG_SOFT_RESET_TSC                      0x0000000400000000ULL  /* Reset Touch screen */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3769: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:395:
+#define chipcHw_REG_SOFT_RESET_PCM                      0x0000000200000000ULL  /* Reset PCM device */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_PCM>
#3769: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:395:
+#define chipcHw_REG_SOFT_RESET_PCM                      0x0000000200000000ULL  /* Reset PCM device */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3770: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:396:
+#define chipcHw_REG_SOFT_RESET_APM                      0x0000200100000000ULL  /* Reset APM device */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SOFT_RESET_APM>
#3770: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:396:
+#define chipcHw_REG_SOFT_RESET_APM                      0x0000200100000000ULL  /* Reset APM device */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3772: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:398:
+#define chipcHw_REG_SOFT_RESET_VPM_GLOBAL_UNHOLD        0x8000000000000000ULL  /* Unhold Global VPM */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3774: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:400:
+#define chipcHw_REG_SOFT_RESET_ARM_UNHOLD               0x2000000000000000ULL  /* Unhold ARM reset  */

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#3775: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:401:
+#define chipcHw_REG_SOFT_RESET_UNHOLD_MASK              0xF000000000000000ULL  /* Mask to handle unhold request */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3778: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:404:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_ALL            0x00000001     /* Enable all audio channel */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_ALL>
#3778: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:404:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_ALL            0x00000001     /* Enable all audio channel */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_A>
#3779: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:405:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_A              0x00000002     /* Enable channel A */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_B>
#3780: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:406:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_B              0x00000004     /* Enable channel B */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_C>
#3781: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:407:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_C              0x00000008     /* Enable channel C */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_NTP_CLOCK>
#3782: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:408:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_NTP_CLOCK      0x00000010     /* Enable NTP clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_PCM0_CLOCK>
#3783: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:409:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_PCM0_CLOCK     0x00000020     /* Enable PCM0 clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_PCM1_CLOCK>
#3784: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:410:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_PCM1_CLOCK     0x00000040     /* Enable PCM1 clock */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_AUDIO_CHANNEL_ENABLE_APM_CLOCK>
#3785: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:411:
+#define chipcHw_REG_AUDIO_CHANNEL_ENABLE_APM_CLOCK      0x00000080     /* Enable APM clock */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3789: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:415:
+#define chipcHw_REG_MISC_CTRL_I2S1_CLOCK_ONCHIP         0x00000000     /* Use on chip clock for I2S1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_I2S1_CLOCK_ONCHIP>
#3789: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:415:
+#define chipcHw_REG_MISC_CTRL_I2S1_CLOCK_ONCHIP         0x00000000     /* Use on chip clock for I2S1 */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#3790: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:416:
+#define chipcHw_REG_MISC_CTRL_I2S1_CLOCK_GPIO           0x00020000     /* Use external clock via GPIO pin 26 for I2S1 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_I2S1_CLOCK_GPIO>
#3790: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:416:
+#define chipcHw_REG_MISC_CTRL_I2S1_CLOCK_GPIO           0x00020000     /* Use external clock via GPIO pin 26 for I2S1 */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3791: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:417:
+#define chipcHw_REG_MISC_CTRL_I2S0_CLOCK_ONCHIP         0x00000000     /* Use on chip clock for I2S0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_I2S0_CLOCK_ONCHIP>
#3791: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:417:
+#define chipcHw_REG_MISC_CTRL_I2S0_CLOCK_ONCHIP         0x00000000     /* Use on chip clock for I2S0 */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#3792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:418:
+#define chipcHw_REG_MISC_CTRL_I2S0_CLOCK_GPIO           0x00010000     /* Use external clock via GPIO pin 45 for I2S0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_I2S0_CLOCK_GPIO>
#3792: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:418:
+#define chipcHw_REG_MISC_CTRL_I2S0_CLOCK_GPIO           0x00010000     /* Use external clock via GPIO pin 45 for I2S0 */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_ARM_CP15_DISABLE>
#3793: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:419:
+#define chipcHw_REG_MISC_CTRL_ARM_CP15_DISABLE          0x00008000     /* Disable ARM CP15 bit */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_RTC_DISABLE>
#3794: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:420:
+#define chipcHw_REG_MISC_CTRL_RTC_DISABLE               0x00000008     /* Disable RTC registers */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3795: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:421:
+#define chipcHw_REG_MISC_CTRL_BBRAM_DISABLE             0x00000004     /* Disable Battery Backed RAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_MISC_CTRL_BBRAM_DISABLE>
#3795: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:421:
+#define chipcHw_REG_MISC_CTRL_BBRAM_DISABLE             0x00000004     /* Disable Battery Backed RAM */

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#3802: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:428:
+#define chipcHw_REG_OTP_SECURITY_OFF                    0x0000020000000000ULL  /* Security support is OFF */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_SECURITY_OFF>
#3802: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:428:
+#define chipcHw_REG_OTP_SECURITY_OFF                    0x0000020000000000ULL  /* Security support is OFF */

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#3803: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:429:
+#define chipcHw_REG_OTP_SPU_SLOW                        0x0000010000000000ULL  /* Limited SPU throughput */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_SPU_SLOW>
#3803: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:429:
+#define chipcHw_REG_OTP_SPU_SLOW                        0x0000010000000000ULL  /* Limited SPU throughput */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3804: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:430:
+#define chipcHw_REG_OTP_LCD_SPEED                       0x0000000600000000ULL  /* Set VPM speed one */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_LCD_SPEED>
#3804: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:430:
+#define chipcHw_REG_OTP_LCD_SPEED                       0x0000000600000000ULL  /* Set VPM speed one */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3805: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:431:
+#define chipcHw_REG_OTP_VPM_SPEED_1                     0x0000000100000000ULL  /* Set VPM speed one */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_VPM_SPEED_1>
#3805: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:431:
+#define chipcHw_REG_OTP_VPM_SPEED_1                     0x0000000100000000ULL  /* Set VPM speed one */

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#3806: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:432:
+#define chipcHw_REG_OTP_VPM_SPEED_0                     0x0000000080000000ULL  /* Set VPM speed zero */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_VPM_SPEED_0>
#3806: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:432:
+#define chipcHw_REG_OTP_VPM_SPEED_0                     0x0000000080000000ULL  /* Set VPM speed zero */

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#3807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:433:
+#define chipcHw_REG_OTP_AXI_SPEED                       0x0000000060000000ULL  /* Set maximum AXI bus speed */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_AXI_SPEED>
#3807: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:433:
+#define chipcHw_REG_OTP_AXI_SPEED                       0x0000000060000000ULL  /* Set maximum AXI bus speed */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_APM_DISABLE>
#3808: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:434:
+#define chipcHw_REG_OTP_APM_DISABLE                     0x000000001F000000ULL  /* Disable APM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_PIF_DISABLE>
#3809: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:435:
+#define chipcHw_REG_OTP_PIF_DISABLE                     0x0000000000200000ULL  /* Disable PIF */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3810: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:436:
+#define chipcHw_REG_OTP_VDEC_DISABLE                    0x0000000000100000ULL  /* Disable Video decoder */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_VDEC_DISABLE>
#3810: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:436:
+#define chipcHw_REG_OTP_VDEC_DISABLE                    0x0000000000100000ULL  /* Disable Video decoder */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3811: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:437:
+#define chipcHw_REG_OTP_BBL_DISABLE                     0x0000000000080000ULL  /* Disable RTC and BBRAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_BBL_DISABLE>
#3811: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:437:
+#define chipcHw_REG_OTP_BBL_DISABLE                     0x0000000000080000ULL  /* Disable RTC and BBRAM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_LED_DISABLE>
#3812: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:438:
+#define chipcHw_REG_OTP_LED_DISABLE                     0x0000000000040000ULL  /* Disable LED */

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#3813: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:439:
+#define chipcHw_REG_OTP_GE_DISABLE                      0x0000000000020000ULL  /* Disable Graphics Engine */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_GE_DISABLE>
#3813: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:439:
+#define chipcHw_REG_OTP_GE_DISABLE                      0x0000000000020000ULL  /* Disable Graphics Engine */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_LCD_DISABLE>
#3814: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:440:
+#define chipcHw_REG_OTP_LCD_DISABLE                     0x0000000000010000ULL  /* Disable LCD */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_KEYPAD_DISABLE>
#3815: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:441:
+#define chipcHw_REG_OTP_KEYPAD_DISABLE                  0x0000000000008000ULL  /* Disable keypad */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_UART_DISABLE>
#3816: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:442:
+#define chipcHw_REG_OTP_UART_DISABLE                    0x0000000000004000ULL  /* Disable UART */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3817: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:443:
+#define chipcHw_REG_OTP_SDIOH_DISABLE                   0x0000000000003000ULL  /* Disable SDIO host */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_SDIOH_DISABLE>
#3817: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:443:
+#define chipcHw_REG_OTP_SDIOH_DISABLE                   0x0000000000003000ULL  /* Disable SDIO host */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_HSS_DISABLE>
#3818: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:444:
+#define chipcHw_REG_OTP_HSS_DISABLE                     0x0000000000000C00ULL  /* Disable HSS */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3819: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:445:
+#define chipcHw_REG_OTP_TSC_DISABLE                     0x0000000000000200ULL  /* Disable touch screen */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_TSC_DISABLE>
#3819: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:445:
+#define chipcHw_REG_OTP_TSC_DISABLE                     0x0000000000000200ULL  /* Disable touch screen */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_USB_DISABLE>
#3820: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:446:
+#define chipcHw_REG_OTP_USB_DISABLE                     0x0000000000000180ULL  /* Disable USB */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_SGMII_DISABLE>
#3821: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:447:
+#define chipcHw_REG_OTP_SGMII_DISABLE                   0x0000000000000060ULL  /* Disable SGMII */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#3822: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:448:
+#define chipcHw_REG_OTP_ETH_DISABLE                     0x0000000000000018ULL  /* Disable gigabit ethernet */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_ETH_DISABLE>
#3822: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:448:
+#define chipcHw_REG_OTP_ETH_DISABLE                     0x0000000000000018ULL  /* Disable gigabit ethernet */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:449:
+#define chipcHw_REG_OTP_ETH_PHY_DISABLE                 0x0000000000000006ULL  /* Disable ethernet PHY */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_ETH_PHY_DISABLE>
#3823: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:449:
+#define chipcHw_REG_OTP_ETH_PHY_DISABLE                 0x0000000000000006ULL  /* Disable ethernet PHY */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_OTP_VPM_DISABLE>
#3824: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:450:
+#define chipcHw_REG_OTP_VPM_DISABLE                     0x0000000000000001ULL  /* Disable VPM */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_SOFT_RESET>
#3828: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:454:
+#define chipcHw_REG_STICKY_SOFT_RESET                   0x00000002     /* ARM soft reset */

WARNING:LONG_LINE_COMMENT: line length of 157 exceeds 100 columns
#3834: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:460:
+#define chipcHw_REG_STICKY_POR_BROM                     0x00000080     /* Special sticky bit for security - set in BROM to avoid other modes being entered */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_ARM_RESET>
#3835: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:461:
+#define chipcHw_REG_STICKY_ARM_RESET                    0x00000100     /* ARM reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_CHIP_SOFT_RESET>
#3836: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:462:
+#define chipcHw_REG_STICKY_CHIP_SOFT_RESET              0x00000200     /* Chip soft reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_CHIP_WARM_RESET>
#3837: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:463:
+#define chipcHw_REG_STICKY_CHIP_WARM_RESET              0x00000400     /* Chip warm reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_WDOG_RESET>
#3838: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:464:
+#define chipcHw_REG_STICKY_WDOG_RESET                   0x00000800     /* Watchdog reset */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_STICKY_OTP_RESET>
#3839: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:465:
+#define chipcHw_REG_STICKY_OTP_RESET                    0x00001000     /* OTP reset */

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#3841: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:467:
+                                                       /* HW phase alignment defines *//* Spare1 register definitions */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3841: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:467:
+                                                       /* HW phase alignment defines *//* Spare1 register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#3842: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:468:
+#define chipcHw_REG_SPARE1_DDR_PHASE_INTR_ENABLE        0x80000000     /* Enable DDR phase align panic interrupt */

WARNING:LONG_LINE_COMMENT: line length of 115 exceeds 100 columns
#3843: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:469:
+#define chipcHw_REG_SPARE1_VPM_PHASE_INTR_ENABLE        0x40000000     /* Enable VPM phase align panic interrupt */

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#3844: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:470:
+#define chipcHw_REG_SPARE1_VPM_BUS_ACCESS_ENABLE        0x00000002     /* Enable access to VPM using system BUS */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SPARE1_VPM_BUS_ACCESS_ENABLE>
#3844: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:470:
+#define chipcHw_REG_SPARE1_VPM_BUS_ACCESS_ENABLE        0x00000002     /* Enable access to VPM using system BUS */

WARNING:LONG_LINE_COMMENT: line length of 114 exceeds 100 columns
#3845: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:471:
+#define chipcHw_REG_SPARE1_DDR_BUS_ACCESS_ENABLE        0x00000001     /* Enable access to DDR using system BUS */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_SPARE1_DDR_BUS_ACCESS_ENABLE>
#3845: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:471:
+#define chipcHw_REG_SPARE1_DDR_BUS_ACCESS_ENABLE        0x00000001     /* Enable access to DDR using system BUS */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3846: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:472:
+                                                       /* DDRPhaseCtrl1 register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3847: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:473:
+#define chipcHw_REG_DDR_SW_PHASE_CTRL_ENABLE            0x80000000     /* Enable DDR SW phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3848: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:474:
+#define chipcHw_REG_DDR_HW_PHASE_CTRL_ENABLE            0x40000000     /* Enable DDR HW phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3849: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:475:
+#define chipcHw_REG_DDR_PHASE_VALUE_GE_MASK             0x0000007F     /* DDR lower threshold for phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3851: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:477:
+#define chipcHw_REG_DDR_PHASE_VALUE_LE_MASK             0x0000007F     /* DDR upper threshold for phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 126 exceeds 100 columns
#3853: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:479:
+#define chipcHw_REG_DDR_PHASE_ALIGN_WAIT_CYCLE_MASK     0x0000FFFF     /* BUS Cycle to wait to run next DDR phase alignment */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_ALIGN_WAIT_CYCLE_MASK>
#3853: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:479:
+#define chipcHw_REG_DDR_PHASE_ALIGN_WAIT_CYCLE_MASK     0x0000FFFF     /* BUS Cycle to wait to run next DDR phase alignment */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_PHASE_ALIGN_WAIT_CYCLE_SHIFT>
#3854: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:480:
+#define chipcHw_REG_DDR_PHASE_ALIGN_WAIT_CYCLE_SHIFT    0

ERROR:CODE_INDENT: code indent should use tabs where possible
#3855: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:481:
+                                                       /* VPMPhaseCtrl1 register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3856: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:482:
+#define chipcHw_REG_VPM_SW_PHASE_CTRL_ENABLE            0x80000000     /* Enable VPM SW phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3857: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:483:
+#define chipcHw_REG_VPM_HW_PHASE_CTRL_ENABLE            0x40000000     /* Enable VPM HW phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3858: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:484:
+#define chipcHw_REG_VPM_PHASE_VALUE_GE_MASK             0x0000007F     /* VPM lower threshold for phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3860: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:486:
+#define chipcHw_REG_VPM_PHASE_VALUE_LE_MASK             0x0000007F     /* VPM upper threshold for phase alignment */

WARNING:LONG_LINE_COMMENT: line length of 130 exceeds 100 columns
#3862: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:488:
+#define chipcHw_REG_VPM_PHASE_ALIGN_WAIT_CYCLE_MASK     0x0000FFFF     /* BUS Cycle to wait to complete the VPM phase alignment */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_ALIGN_WAIT_CYCLE_MASK>
#3862: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:488:
+#define chipcHw_REG_VPM_PHASE_ALIGN_WAIT_CYCLE_MASK     0x0000FFFF     /* BUS Cycle to wait to complete the VPM phase alignment */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_PHASE_ALIGN_WAIT_CYCLE_SHIFT>
#3863: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:489:
+#define chipcHw_REG_VPM_PHASE_ALIGN_WAIT_CYCLE_SHIFT    0

ERROR:CODE_INDENT: code indent should use tabs where possible
#3864: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:490:
+                                                       /* PhaseAlignStatus register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3865: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:491:
+#define chipcHw_REG_DDR_TIMEOUT_INTR_STATUS             0x80000000     /* DDR time out interrupt status */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_TIMEOUT_INTR_STATUS>
#3865: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:491:
+#define chipcHw_REG_DDR_TIMEOUT_INTR_STATUS             0x80000000     /* DDR time out interrupt status */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3868: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:494:
+#define chipcHw_REG_DDR_PHASE_ALIGNED                   0x00800000     /* DDR Phase aligned status */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_LOAD>
#3869: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:495:
+#define chipcHw_REG_DDR_LOAD                            0x00400000     /* Load DDR phase status */

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#3872: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:498:
+#define chipcHw_REG_VPM_TIMEOUT_INTR_STATUS             0x80000000     /* VPM time out interrupt status */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_TIMEOUT_INTR_STATUS>
#3872: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:498:
+#define chipcHw_REG_VPM_TIMEOUT_INTR_STATUS             0x80000000     /* VPM time out interrupt status */

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#3875: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:501:
+#define chipcHw_REG_VPM_PHASE_ALIGNED                   0x00000080     /* VPM Phase aligned status */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_LOAD>
#3876: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:502:
+#define chipcHw_REG_VPM_LOAD                            0x00000040     /* Load VPM phase status */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3879: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:505:
+                                                       /* DDRPhaseCtrl2 register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3880: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:506:
+#define chipcHw_REG_DDR_INTR_SERVICED                   0x02000000     /* Acknowledge that interrupt was serviced */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3881: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:507:
+#define chipcHw_REG_DDR_TIMEOUT_INTR_ENABLE             0x01000000     /* Enable time out interrupt */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:508:
+#define chipcHw_REG_DDR_LOAD_COUNT_PHASE_CTRL_MASK      0x0000000F     /* Wait before toggling load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_LOAD_COUNT_PHASE_CTRL_MASK>
#3882: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:508:
+#define chipcHw_REG_DDR_LOAD_COUNT_PHASE_CTRL_MASK      0x0000000F     /* Wait before toggling load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_LOAD_COUNT_PHASE_CTRL_SHIFT>
#3883: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:509:
+#define chipcHw_REG_DDR_LOAD_COUNT_PHASE_CTRL_SHIFT     20

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#3884: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:510:
+#define chipcHw_REG_DDR_TOTAL_LOAD_COUNT_CTRL_MASK      0x0000000F     /* Total wait to settle ph_ctrl and load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_TOTAL_LOAD_COUNT_CTRL_MASK>
#3884: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:510:
+#define chipcHw_REG_DDR_TOTAL_LOAD_COUNT_CTRL_MASK      0x0000000F     /* Total wait to settle ph_ctrl and load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_DDR_TOTAL_LOAD_COUNT_CTRL_SHIFT>
#3885: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:511:
+#define chipcHw_REG_DDR_TOTAL_LOAD_COUNT_CTRL_SHIFT     16

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#3886: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:512:
+#define chipcHw_REG_DDR_PHASE_TIMEOUT_COUNT_MASK        0x0000FFFF     /* Time out value for DDR HW phase alignment */

ERROR:CODE_INDENT: code indent should use tabs where possible
#3888: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:514:
+                                                       /* VPMPhaseCtrl2 register definitions */$

WARNING:LONG_LINE_COMMENT: line length of 116 exceeds 100 columns
#3895: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:521:
+#define chipcHw_REG_VPM_INTR_SERVICED                   0x02000000     /* Acknowledge that interrupt was serviced */

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#3896: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:522:
+#define chipcHw_REG_VPM_TIMEOUT_INTR_ENABLE             0x01000000     /* Enable time out interrupt */

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#3897: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:523:
+#define chipcHw_REG_VPM_LOAD_COUNT_PHASE_CTRL_MASK      0x0000000F     /* Wait before toggling load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_LOAD_COUNT_PHASE_CTRL_MASK>
#3897: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:523:
+#define chipcHw_REG_VPM_LOAD_COUNT_PHASE_CTRL_MASK      0x0000000F     /* Wait before toggling load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_LOAD_COUNT_PHASE_CTRL_SHIFT>
#3898: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:524:
+#define chipcHw_REG_VPM_LOAD_COUNT_PHASE_CTRL_SHIFT     20

WARNING:LONG_LINE_COMMENT: line length of 123 exceeds 100 columns
#3899: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:525:
+#define chipcHw_REG_VPM_TOTAL_LOAD_COUNT_CTRL_MASK      0x0000000F     /* Total wait cycle to settle ph_ctrl and load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_TOTAL_LOAD_COUNT_CTRL_MASK>
#3899: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:525:
+#define chipcHw_REG_VPM_TOTAL_LOAD_COUNT_CTRL_MASK      0x0000000F     /* Total wait cycle to settle ph_ctrl and load_ch */

CHECK:CAMELCASE: Avoid CamelCase: <chipcHw_REG_VPM_TOTAL_LOAD_COUNT_CTRL_SHIFT>
#3900: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:526:
+#define chipcHw_REG_VPM_TOTAL_LOAD_COUNT_CTRL_SHIFT     16

WARNING:LONG_LINE_COMMENT: line length of 118 exceeds 100 columns
#3901: FILE: arch/arm/mach-bcmring/include/mach/csp/chipcHw_reg.h:527:
+#define chipcHw_REG_VPM_PHASE_TIMEOUT_COUNT_MASK        0x0000FFFF     /* Time out value for VPM HW phase alignment */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3911: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3912: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#3927: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:17:
+/**
+*  @file    ddrcReg.h

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3960: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:50:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3960: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:50:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#3961: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:51:
+               uint32_t memcStatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3961: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:51:
+               uint32_t memcStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <memcStatus>
#3961: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:51:
+               uint32_t memcStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3961: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:51:
+               uint32_t memcStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3962: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:52:
+               uint32_t memcCmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3962: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:52:
+               uint32_t memcCmd;$

CHECK:CAMELCASE: Avoid CamelCase: <memcCmd>
#3962: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:52:
+               uint32_t memcCmd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3962: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:52:
+               uint32_t memcCmd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3963: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:53:
+               uint32_t directCmd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3963: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:53:
+               uint32_t directCmd;$

CHECK:CAMELCASE: Avoid CamelCase: <directCmd>
#3963: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:53:
+               uint32_t directCmd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3963: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:53:
+               uint32_t directCmd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3964: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:54:
+               uint32_t memoryCfg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3964: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:54:
+               uint32_t memoryCfg;$

CHECK:CAMELCASE: Avoid CamelCase: <memoryCfg>
#3964: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:54:
+               uint32_t memoryCfg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3964: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:54:
+               uint32_t memoryCfg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3965: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:55:
+               uint32_t refreshPrd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3965: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:55:
+               uint32_t refreshPrd;$

CHECK:CAMELCASE: Avoid CamelCase: <refreshPrd>
#3965: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:55:
+               uint32_t refreshPrd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3965: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:55:
+               uint32_t refreshPrd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3966: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:56:
+               uint32_t casLatency;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3966: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:56:
+               uint32_t casLatency;$

CHECK:CAMELCASE: Avoid CamelCase: <casLatency>
#3966: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:56:
+               uint32_t casLatency;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3966: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:56:
+               uint32_t casLatency;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3967: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:57:
+               uint32_t writeLatency;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3967: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:57:
+               uint32_t writeLatency;$

CHECK:CAMELCASE: Avoid CamelCase: <writeLatency>
#3967: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:57:
+               uint32_t writeLatency;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3967: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:57:
+               uint32_t writeLatency;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3968: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:58:
+               uint32_t tMrd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3968: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:58:
+               uint32_t tMrd;$

CHECK:CAMELCASE: Avoid CamelCase: <tMrd>
#3968: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:58:
+               uint32_t tMrd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3968: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:58:
+               uint32_t tMrd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3969: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:59:
+               uint32_t tRas;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3969: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:59:
+               uint32_t tRas;$

CHECK:CAMELCASE: Avoid CamelCase: <tRas>
#3969: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:59:
+               uint32_t tRas;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3969: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:59:
+               uint32_t tRas;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3970: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:60:
+               uint32_t tRc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3970: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:60:
+               uint32_t tRc;$

CHECK:CAMELCASE: Avoid CamelCase: <tRc>
#3970: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:60:
+               uint32_t tRc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3970: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:60:
+               uint32_t tRc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3971: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:61:
+               uint32_t tRcd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3971: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:61:
+               uint32_t tRcd;$

CHECK:CAMELCASE: Avoid CamelCase: <tRcd>
#3971: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:61:
+               uint32_t tRcd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3971: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:61:
+               uint32_t tRcd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3972: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:62:
+               uint32_t tRfc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3972: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:62:
+               uint32_t tRfc;$

CHECK:CAMELCASE: Avoid CamelCase: <tRfc>
#3972: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:62:
+               uint32_t tRfc;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3972: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:62:
+               uint32_t tRfc;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3973: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:63:
+               uint32_t tRp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3973: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:63:
+               uint32_t tRp;$

CHECK:CAMELCASE: Avoid CamelCase: <tRp>
#3973: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:63:
+               uint32_t tRp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3973: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:63:
+               uint32_t tRp;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3974: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:64:
+               uint32_t tRrd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3974: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:64:
+               uint32_t tRrd;$

CHECK:CAMELCASE: Avoid CamelCase: <tRrd>
#3974: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:64:
+               uint32_t tRrd;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3974: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:64:
+               uint32_t tRrd;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3975: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:65:
+               uint32_t tWr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3975: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:65:
+               uint32_t tWr;$

CHECK:CAMELCASE: Avoid CamelCase: <tWr>
#3975: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:65:
+               uint32_t tWr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3975: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:65:
+               uint32_t tWr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3976: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:66:
+               uint32_t tWtr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3976: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:66:
+               uint32_t tWtr;$

CHECK:CAMELCASE: Avoid CamelCase: <tWtr>
#3976: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:66:
+               uint32_t tWtr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3976: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:66:
+               uint32_t tWtr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3977: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:67:
+               uint32_t tXp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3977: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:67:
+               uint32_t tXp;$

CHECK:CAMELCASE: Avoid CamelCase: <tXp>
#3977: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:67:
+               uint32_t tXp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3977: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:67:
+               uint32_t tXp;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3978: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:68:
+               uint32_t tXsr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3978: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:68:
+               uint32_t tXsr;$

CHECK:CAMELCASE: Avoid CamelCase: <tXsr>
#3978: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:68:
+               uint32_t tXsr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3978: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:68:
+               uint32_t tXsr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3979: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:69:
+               uint32_t tEsr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3979: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:69:
+               uint32_t tEsr;$

CHECK:CAMELCASE: Avoid CamelCase: <tEsr>
#3979: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:69:
+               uint32_t tEsr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3979: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:69:
+               uint32_t tEsr;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3980: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:70:
+               uint32_t memoryCfg2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3980: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:70:
+               uint32_t memoryCfg2;$

CHECK:CAMELCASE: Avoid CamelCase: <memoryCfg2>
#3980: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:70:
+               uint32_t memoryCfg2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3980: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:70:
+               uint32_t memoryCfg2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3981: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:71:
+               uint32_t memoryCfg3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3981: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:71:
+               uint32_t memoryCfg3;$

CHECK:CAMELCASE: Avoid CamelCase: <memoryCfg3>
#3981: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:71:
+               uint32_t memoryCfg3;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3981: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:71:
+               uint32_t memoryCfg3;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3982: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:72:
+               uint32_t tFaw;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3982: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:72:
+               uint32_t tFaw;$

CHECK:CAMELCASE: Avoid CamelCase: <tFaw>
#3982: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:72:
+               uint32_t tFaw;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3982: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:72:
+               uint32_t tFaw;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3983: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:73:
+       } ddrcReg_CTLR_MEMC_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_REG_t>
#3983: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:73:
+       } ddrcReg_CTLR_MEMC_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_REG_OFFSET>
#3985: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:75:
+#define ddrcReg_CTLR_MEMC_REG_OFFSET                    0x0000

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#3986: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:76:
+#define ddrcReg_CTLR_MEMC_REGP                          ((volatile ddrcReg_CTLR_MEMC_REG_t *)  (MM_IO_BASE_DDRC + ddrcReg_CTLR_MEMC_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#3986: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:76:
+#define ddrcReg_CTLR_MEMC_REGP                          ((volatile ddrcReg_CTLR_MEMC_REG_t *)  (MM_IO_BASE_DDRC + ddrcReg_CTLR_MEMC_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_REGP>
#3986: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:76:
+#define ddrcReg_CTLR_MEMC_REGP                          ((volatile ddrcReg_CTLR_MEMC_REG_t *)  (MM_IO_BASE_DDRC + ddrcReg_CTLR_MEMC_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3986: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:76:
+#define ddrcReg_CTLR_MEMC_REGP                          ((volatile ddrcReg_CTLR_MEMC_REG_t *)  (MM_IO_BASE_DDRC + ddrcReg_CTLR_MEMC_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_BANKS_MASK>
#3990: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:80:
+#define ddrcReg_CTLR_MEMC_STATUS_BANKS_MASK             (0x3 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_BANKS_4>
#3991: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:81:
+#define ddrcReg_CTLR_MEMC_STATUS_BANKS_4                (0x0 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_BANKS_8>
#3992: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:82:
+#define ddrcReg_CTLR_MEMC_STATUS_BANKS_8                (0x3 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_MONITORS_MASK>
#3994: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:84:
+#define ddrcReg_CTLR_MEMC_STATUS_MONITORS_MASK          (0x3 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_MONITORS_0>
#3995: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:85:
+#define ddrcReg_CTLR_MEMC_STATUS_MONITORS_0             (0x0 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_MONITORS_1>
#3996: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:86:
+#define ddrcReg_CTLR_MEMC_STATUS_MONITORS_1             (0x1 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_MONITORS_2>
#3997: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:87:
+#define ddrcReg_CTLR_MEMC_STATUS_MONITORS_2             (0x2 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_MONITORS_4>
#3998: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:88:
+#define ddrcReg_CTLR_MEMC_STATUS_MONITORS_4             (0x3 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_CHIPS_MASK>
#4000: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:90:
+#define ddrcReg_CTLR_MEMC_STATUS_CHIPS_MASK             (0x3 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_CHIPS_1>
#4001: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:91:
+#define ddrcReg_CTLR_MEMC_STATUS_CHIPS_1                (0x0 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_CHIPS_2>
#4002: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:92:
+#define ddrcReg_CTLR_MEMC_STATUS_CHIPS_2                (0x1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_CHIPS_3>
#4003: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:93:
+#define ddrcReg_CTLR_MEMC_STATUS_CHIPS_3                (0x2 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_CHIPS_4>
#4004: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:94:
+#define ddrcReg_CTLR_MEMC_STATUS_CHIPS_4                (0x3 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_TYPE_MASK>
#4006: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:96:
+#define ddrcReg_CTLR_MEMC_STATUS_TYPE_MASK              (0x7 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_TYPE_DDR2>
#4007: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:97:
+#define ddrcReg_CTLR_MEMC_STATUS_TYPE_DDR2              (0x5 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_WIDTH_MASK>
#4009: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:99:
+#define ddrcReg_CTLR_MEMC_STATUS_WIDTH_MASK             (0x3 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_WIDTH_16>
#4010: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:100:
+#define ddrcReg_CTLR_MEMC_STATUS_WIDTH_16               (0x0 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_WIDTH_32>
#4011: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:101:
+#define ddrcReg_CTLR_MEMC_STATUS_WIDTH_32               (0x1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_WIDTH_64>
#4012: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:102:
+#define ddrcReg_CTLR_MEMC_STATUS_WIDTH_64               (0x2 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_WIDTH_128>
#4013: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:103:
+#define ddrcReg_CTLR_MEMC_STATUS_WIDTH_128              (0x3 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_STATE_MASK>
#4015: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:105:
+#define ddrcReg_CTLR_MEMC_STATUS_STATE_MASK             (0x3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_STATE_CONFIG>
#4016: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:106:
+#define ddrcReg_CTLR_MEMC_STATUS_STATE_CONFIG           (0x0 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_STATE_READY>
#4017: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:107:
+#define ddrcReg_CTLR_MEMC_STATUS_STATE_READY            (0x1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_STATE_PAUSED>
#4018: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:108:
+#define ddrcReg_CTLR_MEMC_STATUS_STATE_PAUSED           (0x2 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_STATUS_STATE_LOWPWR>
#4019: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:109:
+#define ddrcReg_CTLR_MEMC_STATUS_STATE_LOWPWR           (0x3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_MASK>
#4023: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:113:
+#define ddrcReg_CTLR_MEMC_CMD_MASK                      (0x7 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_GO>
#4024: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:114:
+#define ddrcReg_CTLR_MEMC_CMD_GO                        (0x0 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_SLEEP>
#4025: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:115:
+#define ddrcReg_CTLR_MEMC_CMD_SLEEP                     (0x1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_WAKEUP>
#4026: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:116:
+#define ddrcReg_CTLR_MEMC_CMD_WAKEUP                    (0x2 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_PAUSE>
#4027: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:117:
+#define ddrcReg_CTLR_MEMC_CMD_PAUSE                     (0x3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_CONFIGURE>
#4028: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:118:
+#define ddrcReg_CTLR_MEMC_CMD_CONFIGURE                 (0x4 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMC_CMD_ACTIVE_PAUSE>
#4029: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:119:
+#define ddrcReg_CTLR_MEMC_CMD_ACTIVE_PAUSE              (0x7 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_CHIP_SHIFT>
#4033: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:123:
+#define ddrcReg_CTLR_DIRECT_CMD_CHIP_SHIFT              20

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_CHIP_MASK>
#4034: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:124:
+#define ddrcReg_CTLR_DIRECT_CMD_CHIP_MASK               (0x3 << ddrcReg_CTLR_DIRECT_CMD_CHIP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_TYPE_PRECHARGEALL>
#4036: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:126:
+#define ddrcReg_CTLR_DIRECT_CMD_TYPE_PRECHARGEALL       (0x0 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_TYPE_AUTOREFRESH>
#4037: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:127:
+#define ddrcReg_CTLR_DIRECT_CMD_TYPE_AUTOREFRESH        (0x1 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_TYPE_MODEREG>
#4038: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:128:
+#define ddrcReg_CTLR_DIRECT_CMD_TYPE_MODEREG            (0x2 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_TYPE_NOP>
#4039: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:129:
+#define ddrcReg_CTLR_DIRECT_CMD_TYPE_NOP                (0x3 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_BANK_SHIFT>
#4041: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:131:
+#define ddrcReg_CTLR_DIRECT_CMD_BANK_SHIFT              16

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_BANK_MASK>
#4042: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:132:
+#define ddrcReg_CTLR_DIRECT_CMD_BANK_MASK               (0x3 << ddrcReg_CTLR_DIRECT_CMD_BANK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_ADDR_SHIFT>
#4044: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:134:
+#define ddrcReg_CTLR_DIRECT_CMD_ADDR_SHIFT              0

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4045: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:135:
+#define ddrcReg_CTLR_DIRECT_CMD_ADDR_MASK               (0x1ffff << ddrcReg_CTLR_DIRECT_CMD_ADDR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_DIRECT_CMD_ADDR_MASK>
#4045: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:135:
+#define ddrcReg_CTLR_DIRECT_CMD_ADDR_MASK               (0x1ffff << ddrcReg_CTLR_DIRECT_CMD_ADDR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_MASK>
#4049: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:139:
+#define ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_MASK           (0x3 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_1>
#4050: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:140:
+#define ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_1              (0x0 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_2>
#4051: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:141:
+#define ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_2              (0x1 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_3>
#4052: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:142:
+#define ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_3              (0x2 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_4>
#4053: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:143:
+#define ddrcReg_CTLR_MEMORY_CFG_CHIP_CNT_4              (0x3 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_MASK>
#4055: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:145:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_MASK           (0x7 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_3_0>
#4056: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:146:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_3_0            (0x0 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_4_1>
#4057: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:147:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_4_1            (0x1 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_5_2>
#4058: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:148:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_5_2            (0x2 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_6_3>
#4059: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:149:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_6_3            (0x3 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_7_4>
#4060: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:150:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_7_4            (0x4 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_8_5>
#4061: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:151:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_8_5            (0x5 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_9_6>
#4062: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:152:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_9_6            (0x6 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_10_7>
#4063: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:153:
+#define ddrcReg_CTLR_MEMORY_CFG_QOS_ARID_10_7           (0x7 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_MASK>
#4065: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:155:
+#define ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_MASK          (0x7 << 15)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_4>
#4066: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:156:
+#define ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_4             (0x2 << 15)

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#4067: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:157:
+#define ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_8             (0x3 << 15)    /* @note Not supported in PL341 */

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_8>
#4067: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:157:
+#define ddrcReg_CTLR_MEMORY_CFG_BURST_LEN_8             (0x3 << 15)    /* @note Not supported in PL341 */

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_ENABLE>
#4069: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:159:
+#define ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_ENABLE          (0x1 << 13)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_SHIFT>
#4071: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:161:
+#define ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_SHIFT    7

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4072: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:162:
+#define ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_MASK     (0x3f << ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_MASK>
#4072: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:162:
+#define ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_MASK     (0x3f << ddrcReg_CTLR_MEMORY_CFG_PWRDOWN_CYCLES_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_MASK>
#4074: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:164:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_MASK       (0x7 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_11>
#4075: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:165:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_11         (0x0 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_12>
#4076: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:166:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_12         (0x1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_13>
#4077: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:167:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_13         (0x2 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_14>
#4078: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:168:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_14         (0x3 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_15>
#4079: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:169:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_15         (0x4 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_16>
#4080: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:170:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_ROW_BITS_16         (0x5 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_MASK>
#4082: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:172:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_MASK       (0x7 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_9>
#4083: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:173:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_9          (0x1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_10>
#4084: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:174:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_10         (0x2 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_11>
#4085: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:175:
+#define ddrcReg_CTLR_MEMORY_CFG_AXI_COL_BITS_11         (0x3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_REFRESH_PRD_SHIFT>
#4089: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:179:
+#define ddrcReg_CTLR_REFRESH_PRD_SHIFT                  0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_REFRESH_PRD_MASK>
#4090: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:180:
+#define ddrcReg_CTLR_REFRESH_PRD_MASK                   (0x7fff << ddrcReg_CTLR_REFRESH_PRD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CAS_LATENCY_SHIFT>
#4094: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:184:
+#define ddrcReg_CTLR_CAS_LATENCY_SHIFT                  1

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CAS_LATENCY_MASK>
#4095: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:185:
+#define ddrcReg_CTLR_CAS_LATENCY_MASK                   (0x7 << ddrcReg_CTLR_CAS_LATENCY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_WRITE_LATENCY_SHIFT>
#4099: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:189:
+#define ddrcReg_CTLR_WRITE_LATENCY_SHIFT                0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_WRITE_LATENCY_MASK>
#4100: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:190:
+#define ddrcReg_CTLR_WRITE_LATENCY_MASK                 (0x7 << ddrcReg_CTLR_WRITE_LATENCY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_MRD_SHIFT>
#4104: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:194:
+#define ddrcReg_CTLR_T_MRD_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_MRD_MASK>
#4105: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:195:
+#define ddrcReg_CTLR_T_MRD_MASK                         (0x7f << ddrcReg_CTLR_T_MRD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RAS_SHIFT>
#4109: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:199:
+#define ddrcReg_CTLR_T_RAS_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RAS_MASK>
#4110: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:200:
+#define ddrcReg_CTLR_T_RAS_MASK                         (0x1f << ddrcReg_CTLR_T_RAS_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RC_SHIFT>
#4114: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:204:
+#define ddrcReg_CTLR_T_RC_SHIFT                         0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RC_MASK>
#4115: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:205:
+#define ddrcReg_CTLR_T_RC_MASK                          (0x1f << ddrcReg_CTLR_T_RC_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_SHIFT>
#4119: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:209:
+#define ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_SHIFT         8

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#4120: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:210:
+#define ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_MASK          (0x7 << ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_MASK>
#4120: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:210:
+#define ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_MASK          (0x7 << ddrcReg_CTLR_T_RCD_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RCD_SHIFT>
#4122: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:212:
+#define ddrcReg_CTLR_T_RCD_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RCD_MASK>
#4123: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:213:
+#define ddrcReg_CTLR_T_RCD_MASK                         (0x7 << ddrcReg_CTLR_T_RCD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_SHIFT>
#4127: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:217:
+#define ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_SHIFT         8

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#4128: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:218:
+#define ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_MASK          (0x7f << ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_MASK>
#4128: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:218:
+#define ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_MASK          (0x7f << ddrcReg_CTLR_T_RFC_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RFC_SHIFT>
#4130: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:220:
+#define ddrcReg_CTLR_T_RFC_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RFC_MASK>
#4131: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:221:
+#define ddrcReg_CTLR_T_RFC_MASK                         (0x7f << ddrcReg_CTLR_T_RFC_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_SHIFT>
#4135: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:225:
+#define ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_SHIFT          8

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4136: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:226:
+#define ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_MASK           (0x7 << ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_MASK>
#4136: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:226:
+#define ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_MASK           (0x7 << ddrcReg_CTLR_T_RP_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RP_SHIFT>
#4138: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:228:
+#define ddrcReg_CTLR_T_RP_SHIFT                         0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RP_MASK>
#4139: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:229:
+#define ddrcReg_CTLR_T_RP_MASK                          (0xf << ddrcReg_CTLR_T_RP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RRD_SHIFT>
#4143: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:233:
+#define ddrcReg_CTLR_T_RRD_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_RRD_MASK>
#4144: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:234:
+#define ddrcReg_CTLR_T_RRD_MASK                         (0xf << ddrcReg_CTLR_T_RRD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_WR_SHIFT>
#4148: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:238:
+#define ddrcReg_CTLR_T_WR_SHIFT                         0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_WR_MASK>
#4149: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:239:
+#define ddrcReg_CTLR_T_WR_MASK                          (0x7 << ddrcReg_CTLR_T_WR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_WTR_SHIFT>
#4153: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:243:
+#define ddrcReg_CTLR_T_WTR_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_WTR_MASK>
#4154: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:244:
+#define ddrcReg_CTLR_T_WTR_MASK                         (0x7 << ddrcReg_CTLR_T_WTR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_XP_SHIFT>
#4158: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:248:
+#define ddrcReg_CTLR_T_XP_SHIFT                         0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_XP_MASK>
#4159: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:249:
+#define ddrcReg_CTLR_T_XP_MASK                          (0xff << ddrcReg_CTLR_T_XP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_XSR_SHIFT>
#4163: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:253:
+#define ddrcReg_CTLR_T_XSR_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_XSR_MASK>
#4164: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:254:
+#define ddrcReg_CTLR_T_XSR_MASK                         (0xff << ddrcReg_CTLR_T_XSR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_ESR_SHIFT>
#4168: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:258:
+#define ddrcReg_CTLR_T_ESR_SHIFT                        0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_ESR_MASK>
#4169: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:259:
+#define ddrcReg_CTLR_T_ESR_MASK                         (0xff << ddrcReg_CTLR_T_ESR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_WIDTH_MASK>
#4173: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:263:
+#define ddrcReg_CTLR_MEMORY_CFG2_WIDTH_MASK             (0x3 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_WIDTH_16BITS>
#4174: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:264:
+#define ddrcReg_CTLR_MEMORY_CFG2_WIDTH_16BITS           (0 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_WIDTH_32BITS>
#4175: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:265:
+#define ddrcReg_CTLR_MEMORY_CFG2_WIDTH_32BITS           (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4175: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:265:
+#define ddrcReg_CTLR_MEMORY_CFG2_WIDTH_32BITS           (1 << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_WIDTH_64BITS>
#4176: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:266:
+#define ddrcReg_CTLR_MEMORY_CFG2_WIDTH_64BITS           (2 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_MASK>
#4178: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:268:
+#define ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_MASK     (0x3 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_2>
#4179: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:269:
+#define ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_2        (0 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_3>
#4180: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:270:
+#define ddrcReg_CTLR_MEMORY_CFG2_AXI_BANK_BITS_3        (3 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CKE_INIT_STATE_LOW>
#4182: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:272:
+#define ddrcReg_CTLR_MEMORY_CFG2_CKE_INIT_STATE_LOW     (0 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CKE_INIT_STATE_HIGH>
#4183: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:273:
+#define ddrcReg_CTLR_MEMORY_CFG2_CKE_INIT_STATE_HIGH    (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4183: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:273:
+#define ddrcReg_CTLR_MEMORY_CFG2_CKE_INIT_STATE_HIGH    (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_DQM_INIT_STATE_LOW>
#4185: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:275:
+#define ddrcReg_CTLR_MEMORY_CFG2_DQM_INIT_STATE_LOW     (0 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_DQM_INIT_STATE_HIGH>
#4186: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:276:
+#define ddrcReg_CTLR_MEMORY_CFG2_DQM_INIT_STATE_HIGH    (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4186: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:276:
+#define ddrcReg_CTLR_MEMORY_CFG2_DQM_INIT_STATE_HIGH    (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CLK_MASK>
#4188: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:278:
+#define ddrcReg_CTLR_MEMORY_CFG2_CLK_MASK               (0x3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CLK_ASYNC>
#4189: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:279:
+#define ddrcReg_CTLR_MEMORY_CFG2_CLK_ASYNC              (0 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CLK_SYNC_A_LE_M>
#4190: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:280:
+#define ddrcReg_CTLR_MEMORY_CFG2_CLK_SYNC_A_LE_M        (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4190: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:280:
+#define ddrcReg_CTLR_MEMORY_CFG2_CLK_SYNC_A_LE_M        (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG2_CLK_SYNC_A_GT_M>
#4191: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:281:
+#define ddrcReg_CTLR_MEMORY_CFG2_CLK_SYNC_A_GT_M        (3 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_SHIFT>
#4195: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:285:
+#define ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_SHIFT       0

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4196: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:286:
+#define ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_MASK        (0x7 << ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_MASK>
#4196: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:286:
+#define ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_MASK        (0x7 << ddrcReg_CTLR_MEMORY_CFG3_REFRESH_TO_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_SHIFT>
#4200: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:290:
+#define ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_SHIFT         8

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#4201: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:291:
+#define ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_MASK          (0x1f << ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_MASK>
#4201: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:291:
+#define ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_MASK          (0x1f << ddrcReg_CTLR_T_FAW_SCHEDULE_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_FAW_PERIOD_SHIFT>
#4203: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:293:
+#define ddrcReg_CTLR_T_FAW_PERIOD_SHIFT                 0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_T_FAW_PERIOD_MASK>
#4204: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:294:
+#define ddrcReg_CTLR_T_FAW_PERIOD_MASK                  (0x1f << ddrcReg_CTLR_T_FAW_PERIOD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CNT>
#4212: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:302:
+#define ddrcReg_CTLR_QOS_CNT                            16

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_MAX>
#4213: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:303:
+#define ddrcReg_CTLR_QOS_MAX                            (ddrcReg_CTLR_QOS_CNT - 1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4215: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:305:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4215: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:305:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4216: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:306:
+               uint32_t cfg[ddrcReg_CTLR_QOS_CNT];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4216: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:306:
+               uint32_t cfg[ddrcReg_CTLR_QOS_CNT];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4216: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:306:
+               uint32_t cfg[ddrcReg_CTLR_QOS_CNT];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4217: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:307:
+       } ddrcReg_CTLR_QOS_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_REG_t>
#4217: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:307:
+       } ddrcReg_CTLR_QOS_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_REG_OFFSET>
#4219: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:309:
+#define ddrcReg_CTLR_QOS_REG_OFFSET                     0x100

WARNING:LONG_LINE: line length of 141 exceeds 100 columns
#4220: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:310:
+#define ddrcReg_CTLR_QOS_REGP                           ((volatile ddrcReg_CTLR_QOS_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_QOS_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4220: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:310:
+#define ddrcReg_CTLR_QOS_REGP                           ((volatile ddrcReg_CTLR_QOS_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_QOS_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_REGP>
#4220: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:310:
+#define ddrcReg_CTLR_QOS_REGP                           ((volatile ddrcReg_CTLR_QOS_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_QOS_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4220: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:310:
+#define ddrcReg_CTLR_QOS_REGP                           ((volatile ddrcReg_CTLR_QOS_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_QOS_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CFG_MAX_SHIFT>
#4224: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:314:
+#define ddrcReg_CTLR_QOS_CFG_MAX_SHIFT                  2

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CFG_MAX_MASK>
#4225: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:315:
+#define ddrcReg_CTLR_QOS_CFG_MAX_MASK                   (0xff << ddrcReg_CTLR_QOS_CFG_MAX_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CFG_MIN_SHIFT>
#4227: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:317:
+#define ddrcReg_CTLR_QOS_CFG_MIN_SHIFT                  1

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CFG_MIN_MASK>
#4228: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:318:
+#define ddrcReg_CTLR_QOS_CFG_MIN_MASK                   (1 << ddrcReg_CTLR_QOS_CFG_MIN_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4228: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:318:
+#define ddrcReg_CTLR_QOS_CFG_MIN_MASK                   (1 << ddrcReg_CTLR_QOS_CFG_MIN_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_QOS_CFG_ENABLE>
#4230: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:320:
+#define ddrcReg_CTLR_QOS_CFG_ENABLE                     (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4230: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:320:
+#define ddrcReg_CTLR_QOS_CFG_ENABLE                     (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CNT>
#4238: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:328:
+#define ddrcReg_CTLR_CHIP_CNT                           4

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_MAX>
#4239: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:329:
+#define ddrcReg_CTLR_CHIP_MAX                           (ddrcReg_CTLR_CHIP_CNT - 1)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4241: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:331:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4241: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:331:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4242: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:332:
+               uint32_t cfg[ddrcReg_CTLR_CHIP_CNT];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4242: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:332:
+               uint32_t cfg[ddrcReg_CTLR_CHIP_CNT];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4242: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:332:
+               uint32_t cfg[ddrcReg_CTLR_CHIP_CNT];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4243: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:333:
+       } ddrcReg_CTLR_CHIP_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_REG_t>
#4243: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:333:
+       } ddrcReg_CTLR_CHIP_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_REG_OFFSET>
#4245: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:335:
+#define ddrcReg_CTLR_CHIP_REG_OFFSET                    0x200

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#4246: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:336:
+#define ddrcReg_CTLR_CHIP_REGP                          ((volatile ddrcReg_CTLR_CHIP_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_CHIP_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4246: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:336:
+#define ddrcReg_CTLR_CHIP_REGP                          ((volatile ddrcReg_CTLR_CHIP_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_CHIP_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_REGP>
#4246: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:336:
+#define ddrcReg_CTLR_CHIP_REGP                          ((volatile ddrcReg_CTLR_CHIP_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_CHIP_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4246: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:336:
+#define ddrcReg_CTLR_CHIP_REGP                          ((volatile ddrcReg_CTLR_CHIP_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_CHIP_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_MEM_ORG_MASK>
#4250: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:340:
+#define ddrcReg_CTLR_CHIP_CFG_MEM_ORG_MASK              (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4250: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:340:
+#define ddrcReg_CTLR_CHIP_CFG_MEM_ORG_MASK              (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_MEM_ORG_ROW_BANK_COL>
#4251: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:341:
+#define ddrcReg_CTLR_CHIP_CFG_MEM_ORG_ROW_BANK_COL      (0 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_MEM_ORG_BANK_ROW_COL>
#4252: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:342:
+#define ddrcReg_CTLR_CHIP_CFG_MEM_ORG_BANK_ROW_COL      (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4252: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:342:
+#define ddrcReg_CTLR_CHIP_CFG_MEM_ORG_BANK_ROW_COL      (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_SHIFT>
#4254: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:344:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_SHIFT      8

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4255: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:345:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_MASK       (0xff << ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_MASK>
#4255: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:345:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_MASK       (0xff << ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MATCH_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_SHIFT>
#4257: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:347:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_SHIFT       0

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4258: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:348:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_MASK        (0xff << ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_MASK>
#4258: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:348:
+#define ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_MASK        (0xff << ddrcReg_CTLR_CHIP_CFG_AXI_ADDR_MASK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_CNT>
#4266: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:356:
+#define ddrcReg_CTLR_USER_OUTPUT_CNT                    2

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4268: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:358:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4268: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:358:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4269: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:359:
+               uint32_t input;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4269: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:359:
+               uint32_t input;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4269: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:359:
+               uint32_t input;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4270: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:360:
+               uint32_t output[ddrcReg_CTLR_USER_OUTPUT_CNT];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4270: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:360:
+               uint32_t output[ddrcReg_CTLR_USER_OUTPUT_CNT];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4270: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:360:
+               uint32_t output[ddrcReg_CTLR_USER_OUTPUT_CNT];

ERROR:CODE_INDENT: code indent should use tabs where possible
#4271: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:361:
+               uint32_t feature;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4271: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:361:
+               uint32_t feature;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4271: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:361:
+               uint32_t feature;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4272: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:362:
+       } ddrcReg_CTLR_USER_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_REG_t>
#4272: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:362:
+       } ddrcReg_CTLR_USER_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_REG_OFFSET>
#4274: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:364:
+#define ddrcReg_CTLR_USER_REG_OFFSET                    0x300

WARNING:LONG_LINE: line length of 143 exceeds 100 columns
#4275: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:365:
+#define ddrcReg_CTLR_USER_REGP                          ((volatile ddrcReg_CTLR_USER_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_USER_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4275: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:365:
+#define ddrcReg_CTLR_USER_REGP                          ((volatile ddrcReg_CTLR_USER_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_USER_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_REGP>
#4275: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:365:
+#define ddrcReg_CTLR_USER_REGP                          ((volatile ddrcReg_CTLR_USER_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_USER_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4275: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:365:
+#define ddrcReg_CTLR_USER_REGP                          ((volatile ddrcReg_CTLR_USER_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_USER_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_INPUT_STATUS_SHIFT>
#4279: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:369:
+#define ddrcReg_CTLR_USER_INPUT_STATUS_SHIFT            0

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4280: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:370:
+#define ddrcReg_CTLR_USER_INPUT_STATUS_MASK             (0xff << ddrcReg_CTLR_USER_INPUT_STATUS_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_INPUT_STATUS_MASK>
#4280: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:370:
+#define ddrcReg_CTLR_USER_INPUT_STATUS_MASK             (0xff << ddrcReg_CTLR_USER_INPUT_STATUS_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_CFG_SHIFT>
#4284: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:374:
+#define ddrcReg_CTLR_USER_OUTPUT_CFG_SHIFT              0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_CFG_MASK>
#4285: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:375:
+#define ddrcReg_CTLR_USER_OUTPUT_CFG_MASK               (0xff << ddrcReg_CTLR_USER_OUTPUT_CFG_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT>
#4287: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:377:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT      1

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#4288: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:378:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_MASK       (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_MASK>
#4288: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:378:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_MASK       (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4288: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:378:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_MASK       (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#4289: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:379:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_BP134      (0 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_BP134>
#4289: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:379:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_BP134      (0 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#4290: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:380:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301      (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301>
#4290: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:380:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301      (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4290: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:380:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301      (1 << ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4291: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:381:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_REGISTERED ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_REGISTERED>
#4291: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:381:
+#define ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_REGISTERED ddrcReg_CTLR_USER_OUTPUT_0_CFG_SYNC_BRIDGE_PL301

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_FEATURE_WRITE_BLOCK_DISABLE>
#4295: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:385:
+#define ddrcReg_CTLR_FEATURE_WRITE_BLOCK_DISABLE        (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4295: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:385:
+#define ddrcReg_CTLR_FEATURE_WRITE_BLOCK_DISABLE        (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_FEATURE_EARLY_BURST_RSP_DISABLE>
#4296: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:386:
+#define ddrcReg_CTLR_FEATURE_EARLY_BURST_RSP_DISABLE    (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4296: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:386:
+#define ddrcReg_CTLR_FEATURE_EARLY_BURST_RSP_DISABLE    (1 << 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4308: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:398:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4308: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:398:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4309: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:399:
+               uint32_t revision;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4309: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:399:
+               uint32_t revision;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4309: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:399:
+               uint32_t revision;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4310: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:400:
+               uint32_t pmCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4310: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:400:
+               uint32_t pmCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <pmCtl>
#4310: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:400:
+               uint32_t pmCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4310: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:400:
+               uint32_t pmCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4311: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:401:
+                REG32_RSVD(0x0008, 0x0010);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4311: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:401:
+                REG32_RSVD(0x0008, 0x0010);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4312: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:402:
+               uint32_t pllStatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4312: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:402:
+               uint32_t pllStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <pllStatus>
#4312: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:402:
+               uint32_t pllStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4312: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:402:
+               uint32_t pllStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4313: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:403:
+               uint32_t pllCfg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4313: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:403:
+               uint32_t pllCfg;$

CHECK:CAMELCASE: Avoid CamelCase: <pllCfg>
#4313: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:403:
+               uint32_t pllCfg;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4313: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:403:
+               uint32_t pllCfg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4314: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:404:
+               uint32_t pllPreDiv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4314: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:404:
+               uint32_t pllPreDiv;$

CHECK:CAMELCASE: Avoid CamelCase: <pllPreDiv>
#4314: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:404:
+               uint32_t pllPreDiv;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4314: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:404:
+               uint32_t pllPreDiv;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4315: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:405:
+               uint32_t pllDiv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4315: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:405:
+               uint32_t pllDiv;$

CHECK:CAMELCASE: Avoid CamelCase: <pllDiv>
#4315: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:405:
+               uint32_t pllDiv;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4315: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:405:
+               uint32_t pllDiv;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4316: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:406:
+               uint32_t pllCtl1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4316: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:406:
+               uint32_t pllCtl1;$

CHECK:CAMELCASE: Avoid CamelCase: <pllCtl1>
#4316: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:406:
+               uint32_t pllCtl1;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4316: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:406:
+               uint32_t pllCtl1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4317: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:407:
+               uint32_t pllCtl2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4317: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:407:
+               uint32_t pllCtl2;$

CHECK:CAMELCASE: Avoid CamelCase: <pllCtl2>
#4317: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:407:
+               uint32_t pllCtl2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4317: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:407:
+               uint32_t pllCtl2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4318: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:408:
+               uint32_t ssCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4318: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:408:
+               uint32_t ssCtl;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4318: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:408:
+               uint32_t ssCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4319: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:409:
+               uint32_t ssCfg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4319: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:409:
+               uint32_t ssCfg;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4319: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:409:
+               uint32_t ssCfg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4320: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:410:
+               uint32_t vdlStatic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4320: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:410:
+               uint32_t vdlStatic;$

CHECK:CAMELCASE: Avoid CamelCase: <vdlStatic>
#4320: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:410:
+               uint32_t vdlStatic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4320: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:410:
+               uint32_t vdlStatic;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4321: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:411:
+               uint32_t vdlDynamic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4321: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:411:
+               uint32_t vdlDynamic;$

CHECK:CAMELCASE: Avoid CamelCase: <vdlDynamic>
#4321: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:411:
+               uint32_t vdlDynamic;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4321: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:411:
+               uint32_t vdlDynamic;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4322: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:412:
+               uint32_t padIdle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4322: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:412:
+               uint32_t padIdle;$

CHECK:CAMELCASE: Avoid CamelCase: <padIdle>
#4322: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:412:
+               uint32_t padIdle;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4322: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:412:
+               uint32_t padIdle;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4323: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:413:
+               uint32_t pvtComp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4323: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:413:
+               uint32_t pvtComp;$

CHECK:CAMELCASE: Avoid CamelCase: <pvtComp>
#4323: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:413:
+               uint32_t pvtComp;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4323: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:413:
+               uint32_t pvtComp;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4324: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:414:
+               uint32_t padDrive;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4324: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:414:
+               uint32_t padDrive;$

CHECK:CAMELCASE: Avoid CamelCase: <padDrive>
#4324: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:414:
+               uint32_t padDrive;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4324: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:414:
+               uint32_t padDrive;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4325: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:415:
+               uint32_t clkRgltrCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4325: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:415:
+               uint32_t clkRgltrCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <clkRgltrCtl>
#4325: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:415:
+               uint32_t clkRgltrCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4325: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:415:
+               uint32_t clkRgltrCtl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4326: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:416:
+       } ddrcReg_PHY_ADDR_CTL_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REG_t>
#4326: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:416:
+       } ddrcReg_PHY_ADDR_CTL_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REG_OFFSET>
#4328: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:418:
+#define ddrcReg_PHY_ADDR_CTL_REG_OFFSET                 0x0400

WARNING:LONG_LINE: line length of 149 exceeds 100 columns
#4329: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:419:
+#define ddrcReg_PHY_ADDR_CTL_REGP                       ((volatile ddrcReg_PHY_ADDR_CTL_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_ADDR_CTL_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4329: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:419:
+#define ddrcReg_PHY_ADDR_CTL_REGP                       ((volatile ddrcReg_PHY_ADDR_CTL_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_ADDR_CTL_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4329: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:419:
+#define ddrcReg_PHY_ADDR_CTL_REGP                       ((volatile ddrcReg_PHY_ADDR_CTL_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_ADDR_CTL_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_MASK>
#4334: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:424:
+#define ddrcReg_PHY_ADDR_SS_CFG_CYCLE_PER_TICK_MASK     0xFFFF0000

WARNING:LONG_LINE_COMMENT: line length of 120 exceeds 100 columns
#4336: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:426:
+#define ddrcReg_PHY_ADDR_SS_CFG_MIN_CYCLE_PER_TICK      10     /* Higher the value, lower the SS modulation frequency */

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_MASK>
#4337: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:427:
+#define ddrcReg_PHY_ADDR_SS_CFG_NDIV_AMPLITUDE_MASK     0x0000FFFF

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_SHIFT>
#4342: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:432:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_SHIFT       8

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4343: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:433:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_MASK        (0xff << ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_MASK>
#4343: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:433:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_MASK        (0xff << ddrcReg_PHY_ADDR_CTL_REVISION_MAJOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_SHIFT>
#4345: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:435:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_SHIFT       0

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4346: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:436:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_MASK        (0xff << ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_MASK>
#4346: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:436:
+#define ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_MASK        (0xff << ddrcReg_PHY_ADDR_CTL_REVISION_MINOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_CLK_PM_CTL_DDR_CLK_DISABLE>
#4350: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:440:
+#define ddrcReg_PHY_ADDR_CTL_CLK_PM_CTL_DDR_CLK_DISABLE (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4350: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:440:
+#define ddrcReg_PHY_ADDR_CTL_CLK_PM_CTL_DDR_CLK_DISABLE (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_STATUS_LOCKED>
#4354: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:444:
+#define ddrcReg_PHY_ADDR_CTL_PLL_STATUS_LOCKED          (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4354: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:444:
+#define ddrcReg_PHY_ADDR_CTL_PLL_STATUS_LOCKED          (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_DIV2_CLK_RESET>
#4358: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:448:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_DIV2_CLK_RESET     (1 << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4358: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:448:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_DIV2_CLK_RESET     (1 << 31)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_SHIFT>
#4360: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:450:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_SHIFT     17

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4361: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:451:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_MASK      (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_MASK>
#4361: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:451:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_MASK      (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_SEL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_ENABLE>
#4363: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:453:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_ENABLE        (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4363: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:453:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_TEST_ENABLE        (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_SHIFT>
#4365: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:455:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_SHIFT     12

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4366: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:456:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_MASK>
#4366: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:456:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PLL_CFG_BGAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_VCO_RNG>
#4368: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:458:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_VCO_RNG            (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4368: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:458:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_VCO_RNG            (1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_CH1_PWRDWN>
#4369: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:459:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_CH1_PWRDWN         (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4369: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:459:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_CH1_PWRDWN         (1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_BYPASS_ENABLE>
#4370: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:460:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_BYPASS_ENABLE      (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4370: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:460:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_BYPASS_ENABLE      (1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_CLKOUT_ENABLE>
#4371: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:461:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_CLKOUT_ENABLE      (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4371: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:461:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_CLKOUT_ENABLE      (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_D_RESET>
#4372: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:462:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_D_RESET            (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4372: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:462:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_D_RESET            (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_A_RESET>
#4373: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:463:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_A_RESET            (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4373: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:463:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_A_RESET            (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CFG_PWRDWN>
#4374: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:464:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_PWRDWN             (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4374: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:464:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CFG_PWRDWN             (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_DITHER_MFB>
#4378: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:468:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_DITHER_MFB     (1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4378: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:468:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_DITHER_MFB     (1 << 26)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_PWRDWN>
#4379: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:469:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_PWRDWN         (1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4379: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:469:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_PWRDWN         (1 << 25)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_SHIFT>
#4381: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:471:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_SHIFT     20

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4382: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:472:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_MASK>
#4382: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:472:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_MODE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_SHIFT>
#4384: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:474:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_SHIFT      8

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4385: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:475:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_MASK       (0x1ff << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_MASK>
#4385: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:475:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_MASK       (0x1ff << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_SHIFT>
#4387: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:477:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_SHIFT       4

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4388: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:478:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_MASK>
#4388: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:478:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P2_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_SHIFT>
#4390: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:480:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_SHIFT       0

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4391: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:481:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_MASK>
#4391: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:481:
+#define ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PLL_PRE_DIV_P1_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_SHIFT>
#4395: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:485:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_SHIFT           24

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4396: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:486:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_MASK            (0xff << ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_MASK>
#4396: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:486:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_MASK            (0xff << ddrcReg_PHY_ADDR_CTL_PLL_DIV_M1_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_SHIFT>
#4398: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:488:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_SHIFT         0

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4399: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:489:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_MASK          (0xffffff << ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_MASK>
#4399: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:489:
+#define ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_MASK          (0xffffff << ddrcReg_PHY_ADDR_CTL_PLL_DIV_FRAC_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_SHIFT>
#4403: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:493:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_SHIFT       30

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4404: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:494:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_MASK        (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_MASK>
#4404: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:494:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_MASK        (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_TESTA_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_SHIFT>
#4406: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:496:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_SHIFT     27

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4407: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:497:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_MASK>
#4407: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:497:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XS_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_SHIFT>
#4409: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:499:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_SHIFT     24

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4410: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:500:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_MASK>
#4410: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:500:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_MASK      (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_KVCO_XF_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_SHIFT>
#4412: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:502:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_SHIFT      22

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4413: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:503:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_MASK>
#4413: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:503:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LPF_BW_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LF_ORDER>
#4415: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:505:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_LF_ORDER          (0x1 << 21)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_SHIFT>
#4417: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:507:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_SHIFT          19

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4418: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:508:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_MASK>
#4418: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:508:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CN_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_SHIFT>
#4420: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:510:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_SHIFT          17

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4421: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:511:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_MASK>
#4421: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:511:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RN_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_SHIFT>
#4423: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:513:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_SHIFT          15

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4424: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:514:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_MASK>
#4424: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:514:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_SHIFT>
#4426: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:516:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_SHIFT          13

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4427: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:517:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_MASK>
#4427: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:517:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_MASK           (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_CZ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_SHIFT>
#4429: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:519:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_SHIFT          10

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4430: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:520:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_MASK           (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_MASK>
#4430: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:520:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_MASK           (0x7 << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_RZ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_SHIFT>
#4432: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:522:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_SHIFT        5

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4433: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:523:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_MASK         (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_MASK>
#4433: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:523:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_MASK         (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICPX_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_SHIFT>
#4435: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:525:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_SHIFT     0

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4436: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:526:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_MASK      (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_MASK>
#4436: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:526:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_MASK      (0x1f << ddrcReg_PHY_ADDR_CTL_PLL_CTL1_ICP_OFF_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_SHIFT>
#4439: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:529:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_SHIFT    4

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4440: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:530:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_MASK     (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_MASK>
#4440: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:530:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_MASK     (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL2_PTAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_SHIFT>
#4442: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:532:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_SHIFT    2

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4443: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:533:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_MASK     (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_MASK>
#4443: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:533:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_MASK     (0x3 << ddrcReg_PHY_ADDR_CTL_PLL_CTL2_CTAP_ADJ_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_LOWCUR_ENABLE>
#4445: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:535:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_LOWCUR_ENABLE     (0x1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_CTL2_BIASIN_ENABLE>
#4446: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:536:
+#define ddrcReg_PHY_ADDR_CTL_PLL_CTL2_BIASIN_ENABLE     (0x1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_SS_EN_ENABLE>
#4450: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:540:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_EN_ENABLE           (0x1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_SHIFT>
#4454: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:544:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_SHIFT  16

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#4455: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:545:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_MASK   (0xffff << ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_MASK>
#4455: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:545:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_MASK   (0xffff << ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_CYC_PER_TICK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_SHIFT>
#4457: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:547:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_SHIFT      0

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#4458: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:548:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_MASK       (0xffff << ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_MASK>
#4458: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:548:
+#define ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_MASK       (0xffff << ddrcReg_PHY_ADDR_CTL_PLL_SS_CFG_NDIV_AMP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FORCE>
#4462: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:552:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FORCE           (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4462: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:552:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FORCE           (1 << 20)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_ENABLE>
#4463: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:553:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_ENABLE          (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4463: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:553:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_ENABLE          (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_SHIFT>
#4465: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:555:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_SHIFT      12

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#4466: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:556:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_MASK>
#4466: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:556:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_SHIFT>
#4468: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:558:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_SHIFT      8

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#4469: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:559:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_MASK>
#4469: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:559:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_MASK       (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_SHIFT>
#4471: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:561:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_SHIFT      0

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#4472: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:562:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_MASK       (0x3f << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_MASK>
#4472: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:562:
+#define ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_MASK       (0x3f << ddrcReg_PHY_ADDR_CTL_VDL_STATIC_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_ENABLE>
#4476: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:566:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_ENABLE         (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4476: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:566:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_ENABLE         (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_SHIFT>
#4478: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:568:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_SHIFT     12

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#4479: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:569:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_MASK      (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_MASK>
#4479: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:569:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_MASK      (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_SHIFT>
#4481: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:571:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_SHIFT     8

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#4482: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:572:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_MASK      (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_MASK>
#4482: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:572:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_MASK      (0x3 << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_SHIFT>
#4484: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:574:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_SHIFT     0

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#4485: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:575:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_MASK      (0x3f << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_MASK>
#4485: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:575:
+#define ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_MASK      (0x3f << ddrcReg_PHY_ADDR_CTL_VDL_DYNAMIC_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_ENABLE>
#4489: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:579:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_ENABLE            (1u << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4489: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:579:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_ENABLE            (1u << 31)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_RXENB_DISABLE>
#4490: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:580:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_RXENB_DISABLE     (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4490: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:580:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_RXENB_DISABLE     (1 << 8)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_IDDQ_DISABLE>
#4491: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:581:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_IDDQ_DISABLE  (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4491: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:581:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_IDDQ_DISABLE  (1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_REB_DISABLE>
#4492: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:582:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_REB_DISABLE   (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4492: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:582:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_REB_DISABLE   (1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_OEB_DISABLE>
#4493: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:583:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_OEB_DISABLE   (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4493: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:583:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CTL_OEB_DISABLE   (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_IDDQ_DISABLE>
#4494: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:584:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_IDDQ_DISABLE  (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4494: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:584:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_IDDQ_DISABLE  (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_REB_DISABLE>
#4495: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:585:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_REB_DISABLE   (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4495: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:585:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_REB_DISABLE   (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_OEB_DISABLE>
#4496: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:586:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_OEB_DISABLE   (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4496: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:586:
+#define ddrcReg_PHY_ADDR_CTL_PAD_IDLE_CKE_OEB_DISABLE   (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_DONE>
#4500: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:590:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_DONE           (1 << 30)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4500: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:590:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_DONE           (1 << 30)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_DONE>
#4501: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:591:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_DONE           (1 << 29)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4501: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:591:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_DONE           (1 << 29)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_DONE>
#4502: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:592:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_DONE       (1 << 28)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4502: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:592:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_DONE       (1 << 28)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_AUTO_ENABLE>
#4503: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:593:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_AUTO_ENABLE    (1 << 27)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4503: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:593:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_AUTO_ENABLE    (1 << 27)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_ENABLE>
#4504: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:594:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_ENABLE     (1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4504: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:594:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_SAMPLE_ENABLE     (1 << 26)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_OVR_ENABLE>
#4505: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:595:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_OVR_ENABLE   (1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4505: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:595:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_OVR_ENABLE   (1 << 25)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_OVR_ENABLE>
#4506: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:596:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_OVR_ENABLE     (1 << 24)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4506: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:596:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_OVR_ENABLE     (1 << 24)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_SHIFT>
#4508: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:598:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_SHIFT          20

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4509: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:599:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_MASK           (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_MASK>
#4509: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:599:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_MASK           (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_SHIFT>
#4511: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:601:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_SHIFT          16

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#4512: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:602:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_MASK           (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_MASK>
#4512: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:602:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_MASK           (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_SHIFT>
#4514: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:604:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_SHIFT     12

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4515: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:605:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_MASK>
#4515: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:605:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_SHIFT>
#4517: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:607:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_SHIFT     8

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4518: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:608:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_MASK>
#4518: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:608:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_MASK      (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_ADDR_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_SHIFT>
#4520: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:610:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_SHIFT       4

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4521: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:611:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_MASK>
#4521: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:611:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_PD_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_SHIFT>
#4523: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:613:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_SHIFT       0

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4524: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:614:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_MASK>
#4524: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:614:
+#define ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_MASK        (0xf << ddrcReg_PHY_ADDR_CTL_PVT_COMP_DQ_ND_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_RT60B>
#4528: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:618:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_RT60B            (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4528: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:618:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_RT60B            (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SEL_SSTL18>
#4529: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:619:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SEL_SSTL18       (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4529: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:619:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SEL_SSTL18       (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELTXDRV_CI>
#4530: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:620:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELTXDRV_CI      (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4530: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:620:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELTXDRV_CI      (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELRXDRV>
#4531: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:621:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELRXDRV         (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4531: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:621:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SELRXDRV         (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SLEW>
#4532: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:622:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SLEW             (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4532: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:622:
+#define ddrcReg_PHY_ADDR_CTL_PAD_DRIVE_SLEW             (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_HALF>
#4536: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:626:
+#define ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_HALF     (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4536: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:626:
+#define ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_HALF     (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_OFF>
#4537: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:627:
+#define ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_OFF      (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4537: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:627:
+#define ddrcReg_PHY_ADDR_CTL_CLK_RGLTR_CTL_PWR_OFF      (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_CNT>
#4545: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:635:
+#define ddrcReg_PHY_BYTE_LANE_CNT                       2

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_MAX>
#4546: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:636:
+#define ddrcReg_PHY_BYTE_LANE_MAX                       (ddrcReg_CTLR_BYTE_LANE_CNT - 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_BYTE_LANE_CNT>
#4546: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:636:
+#define ddrcReg_PHY_BYTE_LANE_MAX                       (ddrcReg_CTLR_BYTE_LANE_CNT - 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT>
#4548: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:638:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT               8

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4550: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:640:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4550: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:640:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4551: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:641:
+               uint32_t revision;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4551: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:641:
+               uint32_t revision;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4551: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:641:
+               uint32_t revision;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4552: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:642:
+               uint32_t vdlCalibrate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4552: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:642:
+               uint32_t vdlCalibrate;$

CHECK:CAMELCASE: Avoid CamelCase: <vdlCalibrate>
#4552: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:642:
+               uint32_t vdlCalibrate;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4552: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:642:
+               uint32_t vdlCalibrate;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4553: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:643:
+               uint32_t vdlStatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4553: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:643:
+               uint32_t vdlStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <vdlStatus>
#4553: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:643:
+               uint32_t vdlStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4553: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:643:
+               uint32_t vdlStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4554: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:644:
+                REG32_RSVD(0x000c, 0x0010);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4554: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:644:
+                REG32_RSVD(0x000c, 0x0010);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#4555: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:645:
+               uint32_t vdlOverride[ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4555: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:645:
+               uint32_t vdlOverride[ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT];$

CHECK:CAMELCASE: Avoid CamelCase: <vdlOverride>
#4555: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:645:
+               uint32_t vdlOverride[ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4555: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:645:
+               uint32_t vdlOverride[ddrcReg_PHY_BYTE_LANE_VDL_OVR_CNT];

ERROR:CODE_INDENT: code indent should use tabs where possible
#4556: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:646:
+               uint32_t readCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4556: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:646:
+               uint32_t readCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <readCtl>
#4556: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:646:
+               uint32_t readCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4556: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:646:
+               uint32_t readCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4557: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:647:
+               uint32_t readStatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4557: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:647:
+               uint32_t readStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <readStatus>
#4557: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:647:
+               uint32_t readStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4557: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:647:
+               uint32_t readStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4558: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:648:
+               uint32_t readClear;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4558: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:648:
+               uint32_t readClear;$

CHECK:CAMELCASE: Avoid CamelCase: <readClear>
#4558: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:648:
+               uint32_t readClear;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4558: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:648:
+               uint32_t readClear;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4559: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:649:
+               uint32_t padIdleCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4559: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:649:
+               uint32_t padIdleCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <padIdleCtl>
#4559: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:649:
+               uint32_t padIdleCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4559: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:649:
+               uint32_t padIdleCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4560: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:650:
+               uint32_t padDriveCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4560: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:650:
+               uint32_t padDriveCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <padDriveCtl>
#4560: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:650:
+               uint32_t padDriveCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4560: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:650:
+               uint32_t padDriveCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4561: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:651:
+               uint32_t padClkCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4561: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:651:
+               uint32_t padClkCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <padClkCtl>
#4561: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:651:
+               uint32_t padClkCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4561: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:651:
+               uint32_t padClkCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4562: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:652:
+               uint32_t writeCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4562: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:652:
+               uint32_t writeCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <writeCtl>
#4562: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:652:
+               uint32_t writeCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4562: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:652:
+               uint32_t writeCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4563: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:653:
+               uint32_t clkRegCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4563: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:653:
+               uint32_t clkRegCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <clkRegCtl>
#4563: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:653:
+               uint32_t clkRegCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4563: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:653:
+               uint32_t clkRegCtl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4564: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:654:
+       } ddrcReg_PHY_BYTE_LANE_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_REG_t>
#4564: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:654:
+       } ddrcReg_PHY_BYTE_LANE_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET>
#4567: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:657:
+#define ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET              0x0500

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET>
#4568: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:658:
+#define ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET              0x0600

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#4570: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:660:
+#define ddrcReg_PHY_BYTE_LANE_1_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4570: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:660:
+#define ddrcReg_PHY_BYTE_LANE_1_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_1_REGP>
#4570: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:660:
+#define ddrcReg_PHY_BYTE_LANE_1_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4570: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:660:
+#define ddrcReg_PHY_BYTE_LANE_1_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_1_REG_OFFSET))

WARNING:LONG_LINE: line length of 153 exceeds 100 columns
#4571: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:661:
+#define ddrcReg_PHY_BYTE_LANE_2_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4571: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:661:
+#define ddrcReg_PHY_BYTE_LANE_2_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_2_REGP>
#4571: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:661:
+#define ddrcReg_PHY_BYTE_LANE_2_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4571: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:661:
+#define ddrcReg_PHY_BYTE_LANE_2_REGP                    ((volatile ddrcReg_PHY_BYTE_LANE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_PHY_BYTE_LANE_2_REG_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_SHIFT>
#4575: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:665:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_SHIFT      8

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4576: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:666:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_MASK       (0xff << ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_MASK>
#4576: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:666:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_MASK       (0xff << ddrcReg_PHY_BYTE_LANE_REVISION_MAJOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_SHIFT>
#4578: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:668:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_SHIFT      0

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4579: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:669:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_MASK       (0xff << ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_MASK>
#4579: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:669:
+#define ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_MASK       (0xff << ddrcReg_PHY_BYTE_LANE_REVISION_MINOR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_CLK_2CYCLE>
#4583: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:673:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_CLK_2CYCLE      (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4583: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:673:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_CLK_2CYCLE      (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_CLK_1CYCLE>
#4584: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:674:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_CLK_1CYCLE      (0 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_TEST>
#4586: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:676:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_TEST            (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4586: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:676:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_TEST            (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ALWAYS>
#4587: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:677:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ALWAYS          (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4587: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:677:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ALWAYS          (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ONCE>
#4588: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:678:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ONCE            (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4588: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:678:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_ONCE            (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_CALIB_FAST>
#4589: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:679:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_FAST            (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4589: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:679:
+#define ddrcReg_PHY_BYTE_LANE_VDL_CALIB_FAST            (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_SHIFT>
#4598: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:688:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_SHIFT     8

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4599: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:689:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_MASK      (0x3f << ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_MASK>
#4599: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:689:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_MASK      (0x3f << ddrcReg_PHY_BYTE_LANE_VDL_STATUS_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_SHIFT>
#4601: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:691:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_SHIFT    4

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#4602: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:692:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_MASK     (0x3ff << ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_MASK>
#4602: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:692:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_MASK     (0x3ff << ddrcReg_PHY_BYTE_LANE_VDL_STATUS_TOTAL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_LOCK>
#4604: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:694:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_LOCK           (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4604: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:694:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_LOCK           (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_STATUS_IDLE>
#4605: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:695:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_IDLE           (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4605: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:695:
+#define ddrcReg_PHY_BYTE_LANE_VDL_STATUS_IDLE           (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_ENABLE>
#4609: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:699:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_ENABLE            (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4609: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:699:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_ENABLE            (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_SHIFT>
#4611: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:701:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_SHIFT        12

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#4612: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:702:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_MASK         (0x3 << ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_MASK>
#4612: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:702:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_MASK         (0x3 << ddrcReg_PHY_BYTE_LANE_VDL_OVR_FALL_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_SHIFT>
#4614: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:704:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_SHIFT        8

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#4615: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:705:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_MASK         (0x3 << ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_MASK>
#4615: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:705:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_MASK         (0x3 << ddrcReg_PHY_BYTE_LANE_VDL_OVR_RISE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_SHIFT>
#4617: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:707:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_SHIFT        0

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4618: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:708:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_MASK         (0x3f << ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_MASK>
#4618: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:708:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_MASK         (0x3f << ddrcReg_PHY_BYTE_LANE_VDL_OVR_STEP_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_DQS_P>
#4620: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:710:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_DQS_P     0

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_DQS_N>
#4621: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:711:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_DQS_N     1

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_EN>
#4622: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:712:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_READ_EN        2

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_WRITE_DQ_DQM>
#4623: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:713:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_STATIC_WRITE_DQ_DQM   3

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_DQS_P>
#4624: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:714:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_DQS_P    4

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_DQS_N>
#4625: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:715:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_DQS_N    5

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_EN>
#4626: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:716:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_READ_EN       6

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_WRITE_DQ_DQM>
#4627: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:717:
+#define ddrcReg_PHY_BYTE_LANE_VDL_OVR_IDX_DYNAMIC_WRITE_DQ_DQM  7

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_SHIFT>
#4631: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:721:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_SHIFT      8

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4632: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:722:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_MASK       (0x3 << ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_MASK>
#4632: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:722:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_MASK       (0x3 << ddrcReg_PHY_BYTE_LANE_READ_CTL_DELAY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ENABLE>
#4634: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:724:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ENABLE    (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4634: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:724:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ENABLE    (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ADJUST>
#4635: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:725:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ADJUST    (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4635: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:725:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_DQ_ODT_ADJUST    (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ENABLE>
#4636: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:726:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ENABLE    (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4636: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:726:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ENABLE    (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ADJUST>
#4637: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:727:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ADJUST    (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4637: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:727:
+#define ddrcReg_PHY_BYTE_LANE_READ_CTL_RD_ODT_ADJUST    (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_SHIFT>
#4641: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:731:
+#define ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_SHIFT   0

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4642: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:732:
+#define ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_MASK    (0xf << ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_MASK>
#4642: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:732:
+#define ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_MASK    (0xf << ddrcReg_PHY_BYTE_LANE_READ_STATUS_ERROR_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_READ_CLEAR_STATUS>
#4646: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:736:
+#define ddrcReg_PHY_BYTE_LANE_READ_CLEAR_STATUS         (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4646: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:736:
+#define ddrcReg_PHY_BYTE_LANE_READ_CLEAR_STATUS         (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_ENABLE>
#4650: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:740:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_ENABLE                   (1u << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4650: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:740:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_ENABLE                   (1u << 31)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_RXENB_DISABLE>
#4651: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:741:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_RXENB_DISABLE         (1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4651: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:741:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_RXENB_DISABLE         (1 << 19)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_IDDQ_DISABLE>
#4652: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:742:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_IDDQ_DISABLE          (1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4652: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:742:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_IDDQ_DISABLE          (1 << 18)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_REB_DISABLE>
#4653: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:743:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_REB_DISABLE           (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4653: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:743:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_REB_DISABLE           (1 << 17)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_OEB_DISABLE>
#4654: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:744:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_OEB_DISABLE           (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4654: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:744:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DM_OEB_DISABLE           (1 << 16)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_RXENB_DISABLE>
#4655: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:745:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_RXENB_DISABLE         (1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4655: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:745:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_RXENB_DISABLE         (1 << 15)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_IDDQ_DISABLE>
#4656: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:746:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_IDDQ_DISABLE          (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4656: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:746:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_IDDQ_DISABLE          (1 << 14)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_REB_DISABLE>
#4657: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:747:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_REB_DISABLE           (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4657: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:747:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_REB_DISABLE           (1 << 13)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_OEB_DISABLE>
#4658: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:748:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_OEB_DISABLE           (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4658: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:748:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQ_OEB_DISABLE           (1 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_RXENB_DISABLE>
#4659: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:749:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_RXENB_DISABLE   (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4659: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:749:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_RXENB_DISABLE   (1 << 11)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_IDDQ_DISABLE>
#4660: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:750:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_IDDQ_DISABLE    (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4660: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:750:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_IDDQ_DISABLE    (1 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_REB_DISABLE>
#4661: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:751:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_REB_DISABLE     (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4661: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:751:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_REB_DISABLE     (1 << 9)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_OEB_DISABLE>
#4662: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:752:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_OEB_DISABLE     (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4662: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:752:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_READ_ENB_OEB_DISABLE     (1 << 8)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_RXENB_DISABLE>
#4663: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:753:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_RXENB_DISABLE        (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4663: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:753:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_RXENB_DISABLE        (1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_IDDQ_DISABLE>
#4664: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:754:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_IDDQ_DISABLE         (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4664: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:754:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_IDDQ_DISABLE         (1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_REB_DISABLE>
#4665: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:755:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_REB_DISABLE          (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4665: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:755:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_REB_DISABLE          (1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_OEB_DISABLE>
#4666: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:756:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_OEB_DISABLE          (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4666: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:756:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_DQS_OEB_DISABLE          (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_RXENB_DISABLE>
#4667: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:757:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_RXENB_DISABLE        (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4667: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:757:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_RXENB_DISABLE        (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_IDDQ_DISABLE>
#4668: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:758:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_IDDQ_DISABLE         (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4668: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:758:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_IDDQ_DISABLE         (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_REB_DISABLE>
#4669: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:759:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_REB_DISABLE          (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4669: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:759:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_REB_DISABLE          (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_OEB_DISABLE>
#4670: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:760:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_OEB_DISABLE          (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4670: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:760:
+#define ddrcReg_PHY_BYTE_LANE_PAD_IDLE_CTL_CLK_OEB_DISABLE          (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B_DDR_READ_ENB>
#4674: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:764:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B_DDR_READ_ENB      (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4674: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:764:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B_DDR_READ_ENB      (1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B>
#4675: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:765:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B                   (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4675: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:765:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_RT60B                   (1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SEL_SSTL18>
#4676: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:766:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SEL_SSTL18              (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4676: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:766:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SEL_SSTL18              (1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELTXDRV_CI>
#4677: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:767:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELTXDRV_CI             (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4677: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:767:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELTXDRV_CI             (1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELRXDRV>
#4678: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:768:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELRXDRV                (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4678: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:768:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SELRXDRV                (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SLEW>
#4679: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:769:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SLEW                    (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4679: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:769:
+#define ddrcReg_PHY_BYTE_LANE_PAD_DRIVE_CTL_SLEW                    (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_PAD_CLK_CTL_DISABLE>
#4683: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:773:
+#define ddrcReg_PHY_BYTE_LANE_PAD_CLK_CTL_DISABLE                   (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4683: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:773:
+#define ddrcReg_PHY_BYTE_LANE_PAD_CLK_CTL_DISABLE                   (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_WRITE_CTL_PREAMBLE_DDR3>
#4687: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:777:
+#define ddrcReg_PHY_BYTE_LANE_WRITE_CTL_PREAMBLE_DDR3               (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4687: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:777:
+#define ddrcReg_PHY_BYTE_LANE_WRITE_CTL_PREAMBLE_DDR3               (1 << 0)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_HALF>
#4691: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:781:
+#define ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_HALF                  (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4691: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:781:
+#define ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_HALF                  (1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_OFF>
#4692: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:782:
+#define ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_OFF                   (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4692: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:782:
+#define ddrcReg_PHY_BYTE_LANE_CLK_REG_CTL_PWR_OFF                   (1 << 0)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4698: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:788:
+       typedef struct {$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4698: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:788:
+       typedef struct {

ERROR:CODE_INDENT: code indent should use tabs where possible
#4699: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:789:
+               uint32_t cfg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4699: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:789:
+               uint32_t cfg;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4699: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:789:
+               uint32_t cfg;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4700: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:790:
+               uint32_t actMonCnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4700: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:790:
+               uint32_t actMonCnt;$

CHECK:CAMELCASE: Avoid CamelCase: <actMonCnt>
#4700: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:790:
+               uint32_t actMonCnt;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4700: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:790:
+               uint32_t actMonCnt;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4701: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:791:
+               uint32_t ctl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4701: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:791:
+               uint32_t ctl;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4701: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:791:
+               uint32_t ctl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4702: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:792:
+               uint32_t lbistCtl;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4702: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:792:
+               uint32_t lbistCtl;$

CHECK:CAMELCASE: Avoid CamelCase: <lbistCtl>
#4702: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:792:
+               uint32_t lbistCtl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4702: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:792:
+               uint32_t lbistCtl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4703: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:793:
+               uint32_t lbistSeed;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4703: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:793:
+               uint32_t lbistSeed;$

CHECK:CAMELCASE: Avoid CamelCase: <lbistSeed>
#4703: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:793:
+               uint32_t lbistSeed;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4703: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:793:
+               uint32_t lbistSeed;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4704: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:794:
+               uint32_t lbistStatus;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4704: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:794:
+               uint32_t lbistStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <lbistStatus>
#4704: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:794:
+               uint32_t lbistStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4704: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:794:
+               uint32_t lbistStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4705: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:795:
+               uint32_t tieOff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4705: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:795:
+               uint32_t tieOff;$

CHECK:CAMELCASE: Avoid CamelCase: <tieOff>
#4705: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:795:
+               uint32_t tieOff;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4705: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:795:
+               uint32_t tieOff;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4706: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:796:
+               uint32_t actMonClear;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4706: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:796:
+               uint32_t actMonClear;$

CHECK:CAMELCASE: Avoid CamelCase: <actMonClear>
#4706: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:796:
+               uint32_t actMonClear;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4706: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:796:
+               uint32_t actMonClear;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4707: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:797:
+               uint32_t status;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4707: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:797:
+               uint32_t status;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4707: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:797:
+               uint32_t status;

ERROR:CODE_INDENT: code indent should use tabs where possible
#4708: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:798:
+               uint32_t user;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4708: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:798:
+               uint32_t user;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4708: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:798:
+               uint32_t user;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4709: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:799:
+       } ddrcReg_CTLR_PHY_GLUE_REG_t;$

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_REG_t>
#4709: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:799:
+       } ddrcReg_CTLR_PHY_GLUE_REG_t;

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_OFFSET>
#4711: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:801:
+#define ddrcReg_CTLR_PHY_GLUE_OFFSET                            0x0700

WARNING:LONG_LINE: line length of 155 exceeds 100 columns
#4712: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:802:
+#define ddrcReg_CTLR_PHY_GLUE_REGP                              ((volatile ddrcReg_CTLR_PHY_GLUE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_PHY_GLUE_OFFSET))

CHECK:SPACING: No space is necessary after a cast
#4712: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:802:
+#define ddrcReg_CTLR_PHY_GLUE_REGP                              ((volatile ddrcReg_CTLR_PHY_GLUE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_PHY_GLUE_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_REGP>
#4712: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:802:
+#define ddrcReg_CTLR_PHY_GLUE_REGP                              ((volatile ddrcReg_CTLR_PHY_GLUE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_PHY_GLUE_OFFSET))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4712: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:802:
+#define ddrcReg_CTLR_PHY_GLUE_REGP                              ((volatile ddrcReg_CTLR_PHY_GLUE_REG_t *) (MM_IO_BASE_DDRC + ddrcReg_CTLR_PHY_GLUE_OFFSET))

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT>
#4717: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:807:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT                     18

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#4718: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:808:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_MASK                      (0x3 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_MASK>
#4718: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:808:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_MASK                      (0x3 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4719: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:809:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_OFF                       (0 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_OFF>
#4719: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:809:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_OFF                       (0 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4720: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:810:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_TIGHT                  (1 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_TIGHT>
#4720: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:810:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_TIGHT                  (1 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4720: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:810:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_TIGHT                  (1 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4721: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:811:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_MEDIUM                 (2 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_MEDIUM>
#4721: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:811:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_MEDIUM                 (2 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4722: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:812:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_LOOSE                  (3 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_LOOSE>
#4722: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:812:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_INT_ON_LOOSE                  (3 << ddrcReg_CTLR_PHY_GLUE_CFG_INT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT>
#4724: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:814:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT              17

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#4725: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:815:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_MASK               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_MASK>
#4725: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:815:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_MASK               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4725: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:815:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_MASK               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#4726: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:816:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_DIFFERENTIAL       (0 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_DIFFERENTIAL>
#4726: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:816:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_DIFFERENTIAL       (0 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#4727: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:817:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_CMOS               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_CMOS>
#4727: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:817:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_CMOS               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4727: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:817:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_CMOS               (1 << ddrcReg_CTLR_PHY_GLUE_CFG_PLL_REFCLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT>
#4729: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:819:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT            16

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#4730: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:820:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_MASK             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_MASK>
#4730: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:820:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_MASK             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4730: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:820:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_MASK             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#4731: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:821:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_DEEP             (0 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_DEEP>
#4731: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:821:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_DEEP             (0 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#4732: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:822:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW          (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW>
#4732: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:822:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW          (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4732: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:822:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW          (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHIFT)

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#4733: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:823:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_HW_FIXED_ALIGNMENT_DISABLED   ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_HW_FIXED_ALIGNMENT_DISABLED>
#4733: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:823:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_HW_FIXED_ALIGNMENT_DISABLED   ddrcReg_CTLR_PHY_GLUE_CFG_DIV2CLK_TREE_SHALLOW

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT>
#4735: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:825:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT             15

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#4736: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:826:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_MASK              (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_MASK>
#4736: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:826:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_MASK              (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4736: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:826:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_MASK              (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#4737: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:827:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_BP134             (0 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_BP134>
#4737: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:827:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_BP134             (0 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#4738: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:828:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301>
#4738: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:828:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4738: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:828:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301             (1 << ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_SHIFT)

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4739: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:829:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_REGISTERED        ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_REGISTERED>
#4739: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:829:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_REGISTERED        ddrcReg_CTLR_PHY_GLUE_CFG_SYNC_BRIDGE_PL301

WARNING:LONG_LINE_COMMENT: line length of 107 exceeds 100 columns
#4741: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:831:
+/* Software control of PHY VDL updates from control register settings. Bit 13 enables the use of Bit 14. */

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#4742: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:832:
+/* If software control is not enabled, then updates occur when a refresh command is issued by the hardware */

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_LOAD>
#4744: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:834:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_LOAD    (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4744: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:834:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_LOAD    (1 << 14)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_ENABLE>
#4745: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:835:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_ENABLE  (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4745: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:835:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_VDL_UPDATE_SW_CTL_ENABLE  (1 << 13)

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#4747: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:837:
+/* Use these to bypass a pipeline stage. By default the ADDR is off but the BYTE LANE in / out are on. */

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PHY_ADDR_CTL_IN_BYPASS_PIPELINE_STAGE>
#4748: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:838:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_ADDR_CTL_IN_BYPASS_PIPELINE_STAGE (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4748: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:838:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_ADDR_CTL_IN_BYPASS_PIPELINE_STAGE (1 << 12)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_IN_BYPASS_PIPELINE_STAGE>
#4749: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:839:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_IN_BYPASS_PIPELINE_STAGE (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4749: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:839:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_IN_BYPASS_PIPELINE_STAGE (1 << 11)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_OUT_BYPASS_PIPELINE_STAGE>
#4750: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:840:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_OUT_BYPASS_PIPELINE_STAGE (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4750: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:840:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_PHY_BYTE_LANE_OUT_BYPASS_PIPELINE_STAGE (1 << 10)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT>
#4753: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:843:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT                  9

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4754: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:844:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_MASK                   (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_MASK>
#4754: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:844:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_MASK                   (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4754: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:844:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_MASK                   (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4755: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:845:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_1                      (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_1>
#4755: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:845:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_1                      (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#4756: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:846:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_2                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_2>
#4756: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:846:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_2                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4756: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:846:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_2                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CS_CNT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT>
#4758: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:848:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT                     8

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4759: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:849:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_ASYNC                     (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CLK_ASYNC>
#4759: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:849:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_ASYNC                     (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT)

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#4760: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:850:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SYNC                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SYNC>
#4760: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:850:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SYNC                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4760: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:850:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SYNC                      (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CLK_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT>
#4762: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:852:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT                7

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#4763: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:853:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_LOW                  (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_LOW>
#4763: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:853:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_LOW                  (0 << ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#4764: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:854:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_HIGH>
#4764: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:854:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4764: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:854:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_CKE_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT>
#4766: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:856:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT                6

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#4767: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:857:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_LOW                  (0 << ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_LOW>
#4767: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:857:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_LOW                  (0 << ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT)

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#4768: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:858:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_HIGH>
#4768: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:858:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4768: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:858:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_HIGH                 (1 << ddrcReg_CTLR_PHY_GLUE_CFG_DQM_INIT_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_SHIFT>
#4770: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:860:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_SHIFT             0

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#4771: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:861:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_MASK              (0x7 << ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_MASK>
#4771: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:861:
+#define ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_MASK              (0x7 << ddrcReg_CTLR_PHY_GLUE_CFG_CAS_LATENCY_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_SHIFT>
#4774: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:864:
+#define ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_SHIFT                0

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#4775: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:865:
+#define ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_MASK                 (0x7f << ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_SHIFT)

CHECK:CAMELCASE: Avoid CamelCase: <ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_MASK>
#4775: FILE: arch/arm/mach-bcmring/include/mach/csp/ddrcReg.h:865:
+#define ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_MASK                 (0x7f << ddrcReg_CTLR_PHY_GLUE_STATUS_PHASE_SHIFT)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4789: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4790: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4803: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:15:
+
+

WARNING:TYPO_SPELLING: 'Vaules' may be misspelled - perhaps 'Values'?
#4822: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:34:
+/*      HW_CFG_SDRAM_CHIP_SELECT_CNT    1    Default 1, Vaules [1..2] */
                                                         ^^^^^^

WARNING:TYPO_SPELLING: 'Vaules' may be misspelled - perhaps 'Values'?
#4824: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:36:
+/*      HW_CFG_SDRAM_WIDTH_BITS         16   Default 16, Vaules [8,16] */
                                                          ^^^^^^

WARNING:LONG_LINE_COMMENT: line length of 139 exceeds 100 columns
#4825: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:37:
+/*      HW_CFG_SDRAM_ADDR_BRC                Default undefined and Row-Bank-Col (RBC) addressing used. Define to use Bank-Row-Col (BRC). */

WARNING:LONG_LINE_COMMENT: line length of 137 exceeds 100 columns
#4826: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:38:
+/*      HW_CFG_SDRAM_CLK_ASYNC               Default undefined and DDR clock is synchronous with AXI BUS clock. Define for ASYNC mode. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4859: FILE: arch/arm/mach-bcmring/include/mach/csp/hw_cfg.h:71:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4868: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4869: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4884: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:17:
+/**
+*  @file    secHw_def.h

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_CHIP_CONTROL>
#4899: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:32:
+#define secHw_BLK_MASK_CHIP_CONTROL     0x00000001

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_KEY_SCAN>
#4900: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:33:
+#define secHw_BLK_MASK_KEY_SCAN         0x00000002

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_TOUCH_SCREEN>
#4901: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:34:
+#define secHw_BLK_MASK_TOUCH_SCREEN     0x00000004

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_UART0>
#4902: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:35:
+#define secHw_BLK_MASK_UART0            0x00000008

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_UART1>
#4903: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:36:
+#define secHw_BLK_MASK_UART1            0x00000010

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_WATCHDOG>
#4904: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:37:
+#define secHw_BLK_MASK_WATCHDOG         0x00000020

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_SPUM>
#4905: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:38:
+#define secHw_BLK_MASK_SPUM             0x00000040

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_DDR2>
#4906: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:39:
+#define secHw_BLK_MASK_DDR2             0x00000080

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_EXT_MEM>
#4907: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:40:
+#define secHw_BLK_MASK_EXT_MEM          0x00000100

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_ESW>
#4908: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:41:
+#define secHw_BLK_MASK_ESW              0x00000200

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_SPU>
#4909: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:42:
+#define secHw_BLK_MASK_SPU              0x00010000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_PKA>
#4910: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:43:
+#define secHw_BLK_MASK_PKA              0x00020000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_RNG>
#4911: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:44:
+#define secHw_BLK_MASK_RNG              0x00040000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_RTC>
#4912: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:45:
+#define secHw_BLK_MASK_RTC              0x00080000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_OTP>
#4913: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:46:
+#define secHw_BLK_MASK_OTP              0x00100000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_BOOT>
#4914: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:47:
+#define secHw_BLK_MASK_BOOT             0x00200000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_MPU>
#4915: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:48:
+#define secHw_BLK_MASK_MPU              0x00400000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_TZCTRL>
#4916: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:49:
+#define secHw_BLK_MASK_TZCTRL           0x00800000

CHECK:CAMELCASE: Avoid CamelCase: <secHw_BLK_MASK_INTR>
#4917: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:50:
+#define secHw_BLK_MASK_INTR             0x01000000

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4920: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:53:
+typedef struct {

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#4921: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:54:
+       volatile uint32_t status;       /* read only - reflects status of writes of 2 write registers */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4921: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:54:
+       volatile uint32_t status;       /* read only - reflects status of writes of 2 write registers */$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4921: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:54:
+       volatile uint32_t status;       /* read only - reflects status of writes of 2 write registers */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4921: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:54:
+       volatile uint32_t status;       /* read only - reflects status of writes of 2 write registers */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4922: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:55:
+       volatile uint32_t setUnsecure;  /* write only. reads back as 0 */$

CHECK:CAMELCASE: Avoid CamelCase: <setUnsecure>
#4922: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:55:
+       volatile uint32_t setUnsecure;  /* write only. reads back as 0 */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4922: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:55:
+       volatile uint32_t setUnsecure;  /* write only. reads back as 0 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4922: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:55:
+       volatile uint32_t setUnsecure;  /* write only. reads back as 0 */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4923: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:56:
+       volatile uint32_t setSecure;    /* write only. reads back as 0 */$

CHECK:CAMELCASE: Avoid CamelCase: <setSecure>
#4923: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:56:
+       volatile uint32_t setSecure;    /* write only. reads back as 0 */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4923: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:56:
+       volatile uint32_t setSecure;    /* write only. reads back as 0 */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4923: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:56:
+       volatile uint32_t setSecure;    /* write only. reads back as 0 */

CHECK:CAMELCASE: Avoid CamelCase: <secHw_TZREG_t>
#4924: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:57:
+} secHw_TZREG_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4929: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:62:
+typedef enum {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4930: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:63:
+       secHw_IDX_LS = 0,$

CHECK:CAMELCASE: Avoid CamelCase: <secHw_IDX_LS>
#4930: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:63:
+       secHw_IDX_LS = 0,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4931: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:64:
+       secHw_IDX_MS = 1,$

CHECK:CAMELCASE: Avoid CamelCase: <secHw_IDX_MS>
#4931: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:64:
+       secHw_IDX_MS = 1,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4932: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:65:
+       secHw_IDX_NUM$

CHECK:CAMELCASE: Avoid CamelCase: <secHw_IDX_NUM>
#4932: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:65:
+       secHw_IDX_NUM

CHECK:CAMELCASE: Avoid CamelCase: <secHw_IDX_e>
#4933: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:66:
+} secHw_IDX_e;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4935: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:68:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4936: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:69:
+       volatile secHw_TZREG_t reg[secHw_IDX_NUM];$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#4936: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:69:
+       volatile secHw_TZREG_t reg[secHw_IDX_NUM];

CHECK:CAMELCASE: Avoid CamelCase: <secHw_REGS_t>
#4937: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:70:
+} secHw_REGS_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4941: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:74:
+/**
+*  @brief  Configures a device as a secure device

CHECK:CAMELCASE: Avoid CamelCase: <secHw_setSecure>
#4945: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:78:
+static inline void secHw_setSecure(uint32_t mask       /*  mask of type secHw_BLK_MASK_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4946: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:79:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4950: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:83:
+/**
+*  @brief  Configures a device as a non-secure device

CHECK:CAMELCASE: Avoid CamelCase: <secHw_setUnsecure>
#4954: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:87:
+static inline void secHw_setUnsecure(uint32_t mask     /*  mask of type secHw_BLK_MASK_XXXXXX */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4955: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:88:
+    );$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4959: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:92:
+/**
+*  @brief  Get the trustzone status for all components. 1 = non-secure, 0 = secure

CHECK:CAMELCASE: Avoid CamelCase: <secHw_getStatus>
#4963: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_def.h:96:
+static inline uint32_t secHw_getStatus(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4974: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4975: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4990: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:17:
+/**
+*  @file    secHw_inline.h

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5004: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:31:
+/**
+*  @brief  Configures a device as a secure device

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5009: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:36:
+    ) {$

CHECK:SPACING: No space is necessary after a cast
#5010: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:37:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5010: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:37:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5012: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:39:
+       if (mask & 0x0000FFFF) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5012: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:39:
+       if (mask & 0x0000FFFF) {
+               regp->reg[secHw_IDX_LS].setSecure = mask & 0x0000FFFF;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5012: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:39:
+       if (mask & 0x0000FFFF) {
+               regp->reg[secHw_IDX_LS].setSecure = mask & 0x0000FFFF;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5013: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:40:
+               regp->reg[secHw_IDX_LS].setSecure = mask & 0x0000FFFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5013: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:40:
+               regp->reg[secHw_IDX_LS].setSecure = mask & 0x0000FFFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5014: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:41:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5016: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:43:
+       if (mask & 0xFFFF0000) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5016: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:43:
+       if (mask & 0xFFFF0000) {
+               regp->reg[secHw_IDX_MS].setSecure = mask >> 16;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5016: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:43:
+       if (mask & 0xFFFF0000) {
+               regp->reg[secHw_IDX_MS].setSecure = mask >> 16;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5017: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:44:
+               regp->reg[secHw_IDX_MS].setSecure = mask >> 16;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5017: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:44:
+               regp->reg[secHw_IDX_MS].setSecure = mask >> 16;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5018: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:45:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5023: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:50:
+/**
+*  @brief  Configures a device as a non-secure device

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5028: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:55:
+    ) {$

CHECK:SPACING: No space is necessary after a cast
#5029: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:56:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5029: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:56:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5031: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:58:
+       if (mask & 0x0000FFFF) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5031: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:58:
+       if (mask & 0x0000FFFF) {
+               regp->reg[secHw_IDX_LS].setUnsecure = mask & 0x0000FFFF;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5031: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:58:
+       if (mask & 0x0000FFFF) {
+               regp->reg[secHw_IDX_LS].setUnsecure = mask & 0x0000FFFF;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5032: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:59:
+               regp->reg[secHw_IDX_LS].setUnsecure = mask & 0x0000FFFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5032: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:59:
+               regp->reg[secHw_IDX_LS].setUnsecure = mask & 0x0000FFFF;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5033: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:60:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5034: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:61:
+       if (mask & 0xFFFF0000) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5034: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:61:
+       if (mask & 0xFFFF0000) {
+               regp->reg[secHw_IDX_MS].setUnsecure = mask >> 16;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5034: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:61:
+       if (mask & 0xFFFF0000) {
+               regp->reg[secHw_IDX_MS].setUnsecure = mask >> 16;
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5035: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:62:
+               regp->reg[secHw_IDX_MS].setUnsecure = mask >> 16;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5035: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:62:
+               regp->reg[secHw_IDX_MS].setUnsecure = mask >> 16;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5036: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:63:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5041: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:68:
+/**
+*  @brief  Get the trustzone status for all components. 1 = non-secure, 0 = secure

CHECK:SPACING: No space is necessary after a cast
#5047: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:74:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5047: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:74:
+       secHw_REGS_t *regp = (secHw_REGS_t *) MM_IO_BASE_TZPC;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5049: FILE: arch/arm/mach-bcmring/include/mach/csp/secHw_inline.h:76:
+       return (regp->reg[1].status << 16) + regp->reg[0].status;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5059: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5060: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DEV_MIN>
#5089: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:31:
+#define uartHw_DEV_MIN          0

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DEV_MAX>
#5090: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:32:
+#define uartHw_DEV_MAX          1

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DEV_CNT>
#5091: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:33:
+#define uartHw_DEV_CNT          (uartHw_DEV_MAX - uartHw_DEV_MIN + 1)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5097: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:39:
+/*****************************************************************************
+* CTS signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5099: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:41:
+static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsFlowCtrlDisable>
#5099: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:41:
+static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartNum>
#5099: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:41:
+static inline void uartHw_CtsFlowCtrlDisable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5101: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:43:
+       uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_HW_FLOWCTRL_CTS;$

CHECK:CAMELCASE: Avoid CamelCase: <uartRegP>
#5101: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:43:
+       uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_HW_FLOWCTRL_CTS;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5104: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:46:
+static inline void uartHw_CtsFlowCtrlEnable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsFlowCtrlEnable>
#5104: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:46:
+static inline void uartHw_CtsFlowCtrlEnable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5106: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:48:
+       uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_HW_FLOWCTRL_CTS;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5109: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:51:
+static inline int uartHw_CtsStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_CtsStateGet>
#5109: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:51:
+static inline int uartHw_CtsStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5111: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:53:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5112: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:54:
+               flag & UARTHW_REG_FLAG_CTS ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5112: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:54:
+               flag & UARTHW_REG_FLAG_CTS ? uartHw_STATE_ACTIVE :$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_STATE_ACTIVE>
#5112: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:54:
+               flag & UARTHW_REG_FLAG_CTS ? uartHw_STATE_ACTIVE :

ERROR:CODE_INDENT: code indent should use tabs where possible
#5113: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:55:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5113: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:55:
+               uartHw_STATE_INACTIVE;$

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_STATE_INACTIVE>
#5113: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:55:
+               uartHw_STATE_INACTIVE;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5117: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:59:
+/*****************************************************************************
+* DCD signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5119: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:61:
+static inline int uartHw_DcdStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DcdStateGet>
#5119: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:61:
+static inline int uartHw_DcdStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5121: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:63:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5122: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:64:
+               flag & UARTHW_REG_FLAG_DCD ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5122: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:64:
+               flag & UARTHW_REG_FLAG_DCD ? uartHw_STATE_ACTIVE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5123: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:65:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5123: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:65:
+               uartHw_STATE_INACTIVE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5127: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:69:
+/*****************************************************************************
+* DSR signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5129: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:71:
+static inline int uartHw_DsrStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DsrStateGet>
#5129: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:71:
+static inline int uartHw_DsrStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5131: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:73:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5132: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:74:
+               flag & UARTHW_REG_FLAG_DSR ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5132: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:74:
+               flag & UARTHW_REG_FLAG_DSR ? uartHw_STATE_ACTIVE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5133: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:75:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5133: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:75:
+               uartHw_STATE_INACTIVE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5137: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:79:
+/*****************************************************************************
+* DTR signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5139: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:81:
+static inline int uartHw_DtrStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DtrStateGet>
#5139: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:81:
+static inline int uartHw_DtrStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5141: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:83:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5142: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:84:
+               ctrl & UARTHW_REG_CTRL_DTR_ACTIVE ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5142: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:84:
+               ctrl & UARTHW_REG_CTRL_DTR_ACTIVE ? uartHw_STATE_ACTIVE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5143: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:85:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5143: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:85:
+               uartHw_STATE_INACTIVE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5146: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:88:
+static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5146: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:88:
+static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_DtrStateSet>
#5146: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:88:
+static inline void uartHw_DtrStateSet(unsigned uartNum, unsigned state)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5148: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:90:
+       if (state == uartHw_STATE_ACTIVE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5148: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:90:
+       if (state == uartHw_STATE_ACTIVE) {
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_DTR_ACTIVE;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#5148: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:90:
+       if (state == uartHw_STATE_ACTIVE) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#5149: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:91:
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_DTR_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5149: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:91:
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_DTR_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5150: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:92:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5150: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:92:
+       } else {
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_DTR_ACTIVE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5151: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:93:
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_DTR_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5151: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:93:
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_DTR_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5152: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:94:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5156: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:98:
+/*****************************************************************************
+* Loopback mode routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5158: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:100:
+static inline void uartHw_LoopbackDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_LoopbackDisable>
#5158: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:100:
+static inline void uartHw_LoopbackDisable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5160: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:102:
+       uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_LOOPBK_ENABLE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5163: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:105:
+static inline void uartHw_LoopbackEnable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_LoopbackEnable>
#5163: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:105:
+static inline void uartHw_LoopbackEnable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5165: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:107:
+       uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_LOOPBK_ENABLE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5169: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:111:
+/*****************************************************************************
+* RI signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5171: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:113:
+static inline int uartHw_RiStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RiStateGet>
#5171: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:113:
+static inline int uartHw_RiStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5173: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:115:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5174: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:116:
+               flag & UARTHW_REG_FLAG_RI ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5174: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:116:
+               flag & UARTHW_REG_FLAG_RI ? uartHw_STATE_ACTIVE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5175: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:117:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5175: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:117:
+               uartHw_STATE_INACTIVE;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5179: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:121:
+/*****************************************************************************
+* RTS signal routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5181: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:123:
+static inline void uartHw_RtsFlowCtrlDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsFlowCtrlDisable>
#5181: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:123:
+static inline void uartHw_RtsFlowCtrlDisable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5183: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:125:
+       uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_HW_FLOWCTRL_RTS;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5186: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:128:
+static inline void uartHw_RtsFlowCtrlEnable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsFlowCtrlEnable>
#5186: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:128:
+static inline void uartHw_RtsFlowCtrlEnable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5188: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:130:
+       uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_HW_FLOWCTRL_RTS;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5191: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:133:
+static inline int uartHw_RtsStateGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsStateGet>
#5191: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:133:
+static inline int uartHw_RtsStateGet(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5193: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:135:
+       return uartRegP(uartNum)->$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5194: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:136:
+               ctrl & UARTHW_REG_CTRL_RTS_ACTIVE ? uartHw_STATE_ACTIVE :$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5194: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:136:
+               ctrl & UARTHW_REG_CTRL_RTS_ACTIVE ? uartHw_STATE_ACTIVE :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5195: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:137:
+               uartHw_STATE_INACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5195: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:137:
+               uartHw_STATE_INACTIVE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5198: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:140:
+static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5198: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:140:
+static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RtsStateSet>
#5198: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:140:
+static inline void uartHw_RtsStateSet(unsigned uartNum, unsigned state)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5200: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:142:
+       if (state == uartHw_STATE_ACTIVE) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5200: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:142:
+       if (state == uartHw_STATE_ACTIVE) {
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_RTS_ACTIVE;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#5200: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:142:
+       if (state == uartHw_STATE_ACTIVE) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#5201: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:143:
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_RTS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5201: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:143:
+               uartRegP(uartNum)->ctrl |= UARTHW_REG_CTRL_RTS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5202: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:144:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5202: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:144:
+       } else {
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_RTS_ACTIVE;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5203: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:145:
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_RTS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5203: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:145:
+               uartRegP(uartNum)->ctrl &= ~UARTHW_REG_CTRL_RTS_ACTIVE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5204: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:146:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5208: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:150:
+/*****************************************************************************
+* UART Rx FIFO DMA routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5210: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:152:
+static inline void uartHw_RxFifoDmaDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaDisable>
#5210: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:152:
+static inline void uartHw_RxFifoDmaDisable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5212: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:154:
+       uartRegP(uartNum)->dmaCtrl &= ~UARTHW_REG_DMA_CTRL_RX_ENABLE;$

CHECK:CAMELCASE: Avoid CamelCase: <dmaCtrl>
#5212: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:154:
+       uartRegP(uartNum)->dmaCtrl &= ~UARTHW_REG_DMA_CTRL_RX_ENABLE;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5215: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:157:
+static inline void uartHw_RxFifoDmaEnable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaEnable>
#5215: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:157:
+static inline void uartHw_RxFifoDmaEnable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5217: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:159:
+       uartRegP(uartNum)->dmaCtrl |= UARTHW_REG_DMA_CTRL_RX_ENABLE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5220: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:162:
+static inline uint32_t uartHw_RxFifoDmaAddrGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoDmaAddrGet>
#5220: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:162:
+static inline uint32_t uartHw_RxFifoDmaAddrGet(unsigned uartNum)

CHECK:SPACING: No space is necessary after a cast
#5223: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:165:
+       return (uint32_t) &uartRegP(uartNum)->fifo;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5223: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:165:
+       return (uint32_t) &uartRegP(uartNum)->fifo;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5227: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:169:
+/*****************************************************************************
+* See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5229: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:171:
+static inline int uartHw_RxFifoFull(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoFull>
#5229: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:171:
+static inline int uartHw_RxFifoFull(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5231: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:173:
+       return uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_FULL;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5236: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:178:
+/**
+*  @brief   Test if byte available to read from Fifo

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoReady>
#5246: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:188:
+static inline int uartHw_RxFifoReady(unsigned uartNum  /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5247: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:189:
+    ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5248: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:190:
+       if (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5248: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:190:
+       if (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {
+               return 0;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#5248: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:190:
+       if (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {
[...]
+       } else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#5249: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:191:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5249: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:191:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5250: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:192:
+       } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#5250: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:192:
+       } else {
+               return 1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5251: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:193:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5251: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:193:
+               return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5252: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:194:
+       }$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5257: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:199:
+/**
+*  @brief   Read Rx data from specified UART

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoGet>
#5267: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:209:
+static inline int uartHw_RxFifoGet(unsigned uartNum    /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5268: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:210:
+    ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5269: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:211:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#5269: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:211:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {
[...]
+       }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5269: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:211:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_RX_EMPTY) {
+               /* wait until rx fifo not empty */
+       }

ERROR:CODE_INDENT: code indent should use tabs where possible
#5270: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:212:
+               /* wait until rx fifo not empty */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5271: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:213:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5272: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:214:
+       return uartRegP(uartNum)->fifo & UARTHW_REG_FIFO_DATA_MASK;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5276: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:218:
+/*****************************************************************************
+* See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5278: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:220:
+static inline void uartHw_RxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5278: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:220:
+static inline void uartHw_RxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_RxFifoThresholdSet>
#5278: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:220:
+static inline void uartHw_RxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

CHECK:CAMELCASE: Avoid CamelCase: <byteCnt>
#5278: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:220:
+static inline void uartHw_RxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5280: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:222:
+       uint32_t level;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5280: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:222:
+       uint32_t level;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5282: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:224:
+       switch (byteCnt) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5283: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:225:
+       case 4:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5284: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:226:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5284: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:226:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5285: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:227:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5285: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:227:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5286: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:228:
+       case 8:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5287: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:229:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5287: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:229:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5288: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:230:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5288: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:230:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5289: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:231:
+       case 16:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5290: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:232:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5290: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:232:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5291: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:233:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5291: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:233:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5292: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:234:
+       case 24:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5293: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:235:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_3_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5293: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:235:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_3_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5294: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:236:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5294: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:236:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5295: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:237:
+       case 28:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5296: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:238:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_7_8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5296: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:238:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_7_8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5297: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:239:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5297: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:239:
+               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5300: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:242:
+               //* @todo Maybe return an -errno to handle this situation. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5301: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:243:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5301: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:243:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5302: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:244:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5304: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:246:
+       uartRegP(uartNum)->intrFifoLevel &= ~UARTHW_REG_INTR_FIFO_LEVEL_RX_MASK;$

CHECK:CAMELCASE: Avoid CamelCase: <intrFifoLevel>
#5304: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:246:
+       uartRegP(uartNum)->intrFifoLevel &= ~UARTHW_REG_INTR_FIFO_LEVEL_RX_MASK;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5305: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:247:
+       uartRegP(uartNum)->intrFifoLevel |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5306: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:248:
+           ((level << UARTHW_REG_INTR_FIFO_LEVEL_RX_SHIFT) &$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5306: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:248:
+           ((level << UARTHW_REG_INTR_FIFO_LEVEL_RX_SHIFT) &$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5307: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:249:
+            UARTHW_REG_INTR_FIFO_LEVEL_RX_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5307: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:249:
+            UARTHW_REG_INTR_FIFO_LEVEL_RX_MASK);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5311: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:253:
+/*****************************************************************************
+* UART Rx FIFO DMA routines. See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5313: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:255:
+static inline void uartHw_TxFifoDmaDisable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaDisable>
#5313: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:255:
+static inline void uartHw_TxFifoDmaDisable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5315: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:257:
+       uartRegP(uartNum)->dmaCtrl &= ~UARTHW_REG_DMA_CTRL_TX_ENABLE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5318: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:260:
+static inline void uartHw_TxFifoDmaEnable(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaEnable>
#5318: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:260:
+static inline void uartHw_TxFifoDmaEnable(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5320: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:262:
+       uartRegP(uartNum)->dmaCtrl |= UARTHW_REG_DMA_CTRL_TX_ENABLE;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5323: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:265:
+static inline uint32_t uartHw_TxFifoDmaAddrGet(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoDmaAddrGet>
#5323: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:265:
+static inline uint32_t uartHw_TxFifoDmaAddrGet(unsigned uartNum)

CHECK:SPACING: No space is necessary after a cast
#5326: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:268:
+       return (uint32_t) &uartRegP(uartNum)->fifo;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5326: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:268:
+       return (uint32_t) &uartRegP(uartNum)->fifo;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5330: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:272:
+/*****************************************************************************
+* See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5332: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:274:
+static inline int uartHw_TxFifoEmpty(unsigned uartNum)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoEmpty>
#5332: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:274:
+static inline int uartHw_TxFifoEmpty(unsigned uartNum)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5334: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:276:
+       return uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_EMPTY;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5339: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:281:
+/**
+*  @brief   Write Tx data to specified UART

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5349: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:291:
+static inline int uartHw_TxFifoPut(unsigned uartNum,   /* [IN]  uart number (0 .. max) */

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoPut>
#5349: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:291:
+static inline int uartHw_TxFifoPut(unsigned uartNum,   /* [IN]  uart number (0 .. max) */

ERROR:CODE_INDENT: code indent should use tabs where possible
#5350: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:292:
+                                  unsigned value       /* [IN]  output value */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5350: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:292:
+                                  unsigned value       /* [IN]  output value */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5351: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:293:
+    ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5352: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:294:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_FULL) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#5352: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:294:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_FULL) {
+       }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5352: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:294:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_FULL) {
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5353: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:295:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5355: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:297:
+       uartRegP(uartNum)->fifo = value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5356: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:298:
+       return 0;$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5360: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:302:
+/*****************************************************************************
+* See uartHw.h for API documentation

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5362: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:304:
+static inline void uartHw_TxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5362: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:304:
+static inline void uartHw_TxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxFifoThresholdSet>
#5362: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:304:
+static inline void uartHw_TxFifoThresholdSet(unsigned uartNum, unsigned byteCnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5364: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:306:
+       uint32_t level;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5364: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:306:
+       uint32_t level;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5366: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:308:
+       switch (byteCnt) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5367: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:309:
+       case 4:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5368: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:310:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5368: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:310:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5369: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:311:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5369: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:311:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5370: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:312:
+       case 8:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5371: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:313:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5371: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:313:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5372: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:314:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5372: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:314:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5373: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:315:
+       case 16:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5374: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:316:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5374: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:316:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_1_2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5375: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:317:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5375: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:317:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5376: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:318:
+       case 24:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5377: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:319:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_3_4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5377: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:319:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_3_4;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5378: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:320:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5378: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:320:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5379: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:321:
+       case 28:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5380: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:322:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_7_8;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5380: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:322:
+               level = UARTHW_REG_INTR_FIFO_LEVEL_7_8;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5381: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:323:
+               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5381: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:323:
+               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5384: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:326:
+               //* @todo Maybe return an -errno to handle this situation. */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5385: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:327:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5385: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:327:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5386: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:328:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5388: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:330:
+       uartRegP(uartNum)->intrFifoLevel &= ~UARTHW_REG_INTR_FIFO_LEVEL_TX_MASK;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5389: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:331:
+       uartRegP(uartNum)->intrFifoLevel |=$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5390: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:332:
+           ((level << UARTHW_REG_INTR_FIFO_LEVEL_TX_SHIFT) &$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5390: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:332:
+           ((level << UARTHW_REG_INTR_FIFO_LEVEL_TX_SHIFT) &$

ERROR:CODE_INDENT: code indent should use tabs where possible
#5391: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:333:
+            UARTHW_REG_INTR_FIFO_LEVEL_TX_MASK);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5391: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:333:
+            UARTHW_REG_INTR_FIFO_LEVEL_TX_MASK);$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5396: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:338:
+/**
+*  @brief   Wait util specified UART has finished Tx

CHECK:CAMELCASE: Avoid CamelCase: <uartHw_TxWaitIdle>
#5406: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:348:
+static inline int uartHw_TxWaitIdle(unsigned uartNum   /* [IN]  uart number (0 .. max) */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5407: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:349:
+    ) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5409: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:351:
+       while ((uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_EMPTY) == 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#5409: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:351:
+       while ((uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_EMPTY) == 0) {
+       }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5409: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:351:
+       while ((uartRegP(uartNum)->flag & UARTHW_REG_FLAG_TX_EMPTY) == 0) {
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5410: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:352:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5413: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:355:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_BUSY) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 7)
#5413: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:355:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_BUSY) {
+       }

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5413: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:355:
+       while (uartRegP(uartNum)->flag & UARTHW_REG_FLAG_BUSY) {
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5414: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:356:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5416: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_inline.h:358:
+       return 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5426: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:1:
+/*****************************************************************************

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5427: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:2:
+/*****************************************************************************
+* Copyright 2003 - 2008 Broadcom Corporation.  All rights reserved.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#5442: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:17:
+/**
+*  @file    xxx.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#5466: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:41:
+#define UARTHW_REG_FIFO_ERR_OVERRUN           (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5467: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:42:
+#define UARTHW_REG_FIFO_ERR_BREAK             (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5468: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:43:
+#define UARTHW_REG_FIFO_ERR_PARITY            (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5469: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:44:
+#define UARTHW_REG_FIFO_ERR_FRAME             (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5473: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:48:
+#define UARTHW_REG_RX_STATUS_ERR_OVERRUN      (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5474: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:49:
+#define UARTHW_REG_RX_STATUS_ERR_BREAK        (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5475: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:50:
+#define UARTHW_REG_RX_STATUS_ERR_PARITY       (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5476: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:51:
+#define UARTHW_REG_RX_STATUS_ERR_FRAME        (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5484: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:59:
+#define UARTHW_REG_FLAG_RI                    (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5485: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:60:
+#define UARTHW_REG_FLAG_TX_EMPTY              (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5486: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:61:
+#define UARTHW_REG_FLAG_RX_FULL               (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5487: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:62:
+#define UARTHW_REG_FLAG_TX_FULL               (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5488: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:63:
+#define UARTHW_REG_FLAG_RX_EMPTY              (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5489: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:64:
+#define UARTHW_REG_FLAG_BUSY                  (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5490: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:65:
+#define UARTHW_REG_FLAG_DCD                   (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5491: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:66:
+#define UARTHW_REG_FLAG_DSR                   (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5492: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:67:
+#define UARTHW_REG_FLAG_CTS                   (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5505: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:80:
+#define UARTHW_REG_LINECTRL_PARITY_STICK      (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5511: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:86:
+#define UARTHW_REG_LINECTRL_FIFO_ENABLE       (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5512: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:87:
+#define UARTHW_REG_LINECTRL_STOP_BITS_2       (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5514: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:89:
+#define UARTHW_REG_LINECTRL_PARITY_EVEN       (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5515: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:90:
+#define UARTHW_REG_LINECTRL_PARITY_ENABLE     (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5517: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:92:
+#define UARTHW_REG_LINECTRL_BREAK_ENABLE      (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5520: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:95:
+#define UARTHW_REG_CTRL_HW_FLOWCTRL_CTS       (1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5521: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:96:
+#define UARTHW_REG_CTRL_HW_FLOWCTRL_RTS       (1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5522: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:97:
+#define UARTHW_REG_CTRL_OUT2_ACTIVE           (1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5523: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:98:
+#define UARTHW_REG_CTRL_OUT1_ACTIVE           (1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5524: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:99:
+#define UARTHW_REG_CTRL_RTS_ACTIVE            (1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5525: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:100:
+#define UARTHW_REG_CTRL_DTR_ACTIVE            (1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5526: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:101:
+#define UARTHW_REG_CTRL_RX_ENABLE             (1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5527: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:102:
+#define UARTHW_REG_CTRL_TX_ENABLE             (1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5528: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:103:
+#define UARTHW_REG_CTRL_LOOPBK_ENABLE         (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5529: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:104:
+#define UARTHW_REG_CTRL_SIR_LOWPWR            (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5530: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:105:
+#define UARTHW_REG_CTRL_SIR_ENABLE            (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5531: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:106:
+#define UARTHW_REG_CTRL_UART_ENABLE           (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5556: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:131:
+#define UARTHW_REG_DMA_CTRL_RX_ON_ERROR       (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5557: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:132:
+#define UARTHW_REG_DMA_CTRL_TX_ENABLE         (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5558: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:133:
+#define UARTHW_REG_DMA_CTRL_RX_ENABLE         (1 << 0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5560: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:135:
+typedef struct {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5561: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:136:
+       uint32_t fifo;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5561: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:136:
+       uint32_t fifo;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5562: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:137:
+       uint32_t rxStatus;$

CHECK:CAMELCASE: Avoid CamelCase: <rxStatus>
#5562: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:137:
+       uint32_t rxStatus;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5562: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:137:
+       uint32_t rxStatus;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5564: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:139:
+        REG32_RSVD(0x0008, 0x0018);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5564: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:139:
+        REG32_RSVD(0x0008, 0x0018);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5566: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:141:
+       uint32_t flag;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5566: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:141:
+       uint32_t flag;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5568: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:143:
+        REG32_RSVD(0x001c, 0x0020);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5568: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:143:
+        REG32_RSVD(0x001c, 0x0020);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5570: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:145:
+       uint32_t irdaLowPwr;$

CHECK:CAMELCASE: Avoid CamelCase: <irdaLowPwr>
#5570: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:145:
+       uint32_t irdaLowPwr;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5570: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:145:
+       uint32_t irdaLowPwr;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5571: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:146:
+       uint32_t baudInteger;$

CHECK:CAMELCASE: Avoid CamelCase: <baudInteger>
#5571: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:146:
+       uint32_t baudInteger;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5571: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:146:
+       uint32_t baudInteger;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5572: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:147:
+       uint32_t baudFraction;$

CHECK:CAMELCASE: Avoid CamelCase: <baudFraction>
#5572: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:147:
+       uint32_t baudFraction;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5572: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:147:
+       uint32_t baudFraction;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5573: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:148:
+       uint32_t lineCtrl;$

CHECK:CAMELCASE: Avoid CamelCase: <lineCtrl>
#5573: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:148:
+       uint32_t lineCtrl;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5573: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:148:
+       uint32_t lineCtrl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5574: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:149:
+       uint32_t ctrl;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5574: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:149:
+       uint32_t ctrl;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5575: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:150:
+       uint32_t intrFifoLevel;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5575: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:150:
+       uint32_t intrFifoLevel;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5576: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:151:
+       uint32_t intrCtrlMask;$

CHECK:CAMELCASE: Avoid CamelCase: <intrCtrlMask>
#5576: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:151:
+       uint32_t intrCtrlMask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5576: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:151:
+       uint32_t intrCtrlMask;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5577: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:152:
+       uint32_t intrStatusRaw;$

CHECK:CAMELCASE: Avoid CamelCase: <intrStatusRaw>
#5577: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:152:
+       uint32_t intrStatusRaw;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5577: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:152:
+       uint32_t intrStatusRaw;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5578: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:153:
+       uint32_t intrStatusMask;$

CHECK:CAMELCASE: Avoid CamelCase: <intrStatusMask>
#5578: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:153:
+       uint32_t intrStatusMask;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5578: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:153:
+       uint32_t intrStatusMask;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5579: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:154:
+       uint32_t intrClear;$

CHECK:CAMELCASE: Avoid CamelCase: <intrClear>
#5579: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:154:
+       uint32_t intrClear;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5579: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:154:
+       uint32_t intrClear;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5580: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:155:
+       uint32_t dmaCtrl;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5580: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:155:
+       uint32_t dmaCtrl;

ERROR:CODE_INDENT: code indent should use tabs where possible
#5582: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:157:
+        REG32_RSVD(0x004c, 0x0100);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5582: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:157:
+        REG32_RSVD(0x004c, 0x0100);$

WARNING:LONG_LINE_COMMENT: line length of 110 exceeds 100 columns
#5584: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:159:
+       /* Although a dmaFifo is defined and accessible, it is not part of the PL011 IP nor is it necessary. */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5586: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:161:
+       uint32_t dmaFifo;$

CHECK:CAMELCASE: Avoid CamelCase: <dmaFifo>
#5586: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:161:
+       uint32_t dmaFifo;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5586: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:161:
+       uint32_t dmaFifo;

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#5589: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:164:
+#define  uartRegP(x) (x ? ((volatile UARTHW_REG_t *)MM_IO_BASE_UARTB) : ((volatile UARTHW_REG_t *)MM_IO_BASE_UARTA))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#5589: FILE: arch/arm/mach-bcmring/include/mach/csp/uartHw_reg.h:164:
+#define  uartRegP(x) (x ? ((volatile UARTHW_REG_t *)MM_IO_BASE_UARTB) : ((volatile UARTHW_REG_t *)MM_IO_BASE_UARTA))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 633 errors, 1940 warnings, 1666 checks, 5452 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000100391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
