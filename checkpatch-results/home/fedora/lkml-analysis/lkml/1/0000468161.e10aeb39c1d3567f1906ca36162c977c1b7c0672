WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#45: 
it must be clean, uptodate, not under writeback, and not have an elevated
                  ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
down yesterday from storms on the weekend. It is *very* unoptimised, especially

WARNING:REPEATED_WORD: Possible repeated word: 'far'
#101: 
- Must optimise radix-tree manipulations far far better, and handle failures

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: mm/filemap.c:592:
+	pcache_desc_cachep = kmem_cache_create("pcache_desc",
+					sizeof(struct pcache_desc),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#210: FILE: mm/filemap.c:622:
+		BUG_ON(!page);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#212: FILE: mm/filemap.c:624:
+			BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#213: FILE: mm/filemap.c:625:
+			BUG_ON(!PageUptodate(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: mm/filemap.c:626:
+			BUG_ON(page_mapped(page));

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#222: FILE: mm/filemap.c:634:
+static int __replicate_pcache(struct page *page, struct address_space *mapping, unsigned long offset)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:MEMORY_BARRIER: memory barrier without comment
#240: FILE: mm/filemap.c:652:
+	smp_rmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: mm/filemap.c:666:
+		if (radix_tree_tag_get(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: mm/filemap.c:682:
+	BUG_ON(radix_tree_delete(&mapping->page_tree, offset) != page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: mm/filemap.c:683:
+	BUG_ON(radix_tree_insert(&mapping->page_tree, offset, pcd));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#273: FILE: mm/filemap.c:685:
+	radix_tree_tag_set(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: mm/filemap.c:703:
+	if (unlikely(!radix_tree_tag_get(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: mm/filemap.c:709:
+	BUG_ON(!pcd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#300: FILE: mm/filemap.c:712:
+	BUG_ON(PageDirty(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: mm/filemap.c:713:
+	BUG_ON(!PageUptodate(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: mm/filemap.c:716:
+	radix_tree_tag_clear(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: mm/filemap.c:717:
+	BUG_ON(!radix_tree_delete(&mapping->page_tree, offset));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#306: FILE: mm/filemap.c:718:
+	BUG_ON(radix_tree_insert(&mapping->page_tree, offset, page));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#309: FILE: mm/filemap.c:721:
+	unmap_mapping_range(mapping, (loff_t)offset<<PAGE_CACHE_SHIFT,
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: mm/filemap.c:722:
+	unmap_mapping_range(mapping, (loff_t)offset<<PAGE_CACHE_SHIFT,
+					PAGE_CACHE_SIZE, 0);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#314: FILE: mm/filemap.c:726:
+static void __insert_replicated_page(struct page *page, struct address_space *mapping, unsigned long offset, int nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: mm/filemap.c:731:
+	if (unlikely(!radix_tree_tag_get(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#325: FILE: mm/filemap.c:737:
+	BUG_ON(!pcd);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: mm/filemap.c:744:
+	BUG_ON(radix_tree_insert(&pcd->page_tree, nid, page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: mm/filemap.c:752:
+void __remove_replicated_page(struct pcache_desc *pcd, struct page *page,
+			struct address_space *mapping, unsigned long offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#344: FILE: mm/filemap.c:756:
+	BUG_ON(node_isset(nid, pcd->nodes_present));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#345: FILE: mm/filemap.c:757:
+	BUG_ON(radix_tree_delete(&pcd->page_tree, nid) != page);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#358: FILE: mm/filemap.c:770:
+struct page * find_get_page_readonly(struct address_space *mapping, unsigned long offset)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: mm/filemap.c:777:
+	if (radix_tree_tag_get(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: mm/filemap.c:790:
+			repl_page = alloc_pages_node(nid,
+					mapping_gfp_mask(mapping), 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: mm/filemap.c:805:
+		BUG_ON(!page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#417: FILE: mm/filemap.c:834:
+	if (radix_tree_tag_get(&mapping->page_tree, offset,
+					PAGECACHE_TAG_REPLICATED)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: mm/filemap.c:923:
+void __unreplicate_pcache_range(struct address_space *mapping, pgoff_t index,
+			unsigned int nr_pages, struct page **pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: mm/filemap.c:930:
+	ret = radix_tree_gang_lookup_tag(&mapping->page_tree,
+				(void **)pages, index, nr_pages,

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: mm/filemap.c:935:
+			struct pcache_desc *pcd = (struct pcache_desc *)pages[i];
+			pages[i] = (struct page *)pcd->master->index;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: mm/internal.h:40:
+extern void __unreplicate_pcache(struct address_space *mapping, unsigned long offset);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: mm/internal.h:41:
+extern void __remove_replicated_page(struct pcache_desc *pcd, struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: mm/internal.h:42:
+extern void __remove_replicated_page(struct pcache_desc *pcd, struct page *page,
+			struct address_space *mapping, unsigned long offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#706: FILE: mm/vmscan.c:435:
+	if (radix_tree_tag_get(&mapping->page_tree, page->index, PAGECACHE_TAG_REPLICATED)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: mm/vmscan.c:437:
+		struct pcache_desc *pcd;
+		pcd = radix_tree_lookup(&mapping->page_tree, page->index);

CHECK:BRACES: braces {} should be used on all arms of this statement
#709: FILE: mm/vmscan.c:438:
+		if (page == pcd->master) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#712: FILE: mm/vmscan.c:441:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#714: FILE: mm/vmscan.c:443:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#727: FILE: include/linux/mm.h:986:
+extern void filemap_init(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468161.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 24 warnings, 22 checks, 584 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468161.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
