ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#30: 
--- a/debug/mdb-list.h	1969-12-31 17:00:00.000000000 -0700

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#33: FILE: debug/mdb-list.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#35: FILE: debug/mdb-list.h:3:
+/***************************************************************************
+*

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#72: FILE: debug/mdb-list.h:40:
+typedef struct _ACCELERATOR

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#73: FILE: debug/mdb-list.h:41:
+typedef struct _ACCELERATOR
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: debug/mdb-list.h:42:
+    struct _ACCELERATOR *accelNext;$

CHECK:CAMELCASE: Avoid CamelCase: <accelNext>
#74: FILE: debug/mdb-list.h:42:
+    struct _ACCELERATOR *accelNext;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#75: FILE: debug/mdb-list.h:43:
+    struct _ACCELERATOR *accelPrior;$

CHECK:CAMELCASE: Avoid CamelCase: <accelPrior>
#75: FILE: debug/mdb-list.h:43:
+    struct _ACCELERATOR *accelPrior;

WARNING:LINE_SPACING: Missing a blank line after declarations
#76: FILE: debug/mdb-list.h:44:
+    struct _ACCELERATOR *accelPrior;
+    ULONG (*accelRoutine)(ULONG key, void *p, struct _ACCELERATOR *parser);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#76: FILE: debug/mdb-list.h:44:
+    ULONG (*accelRoutine)(ULONG key, void *p, struct _ACCELERATOR *parser);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#76: FILE: debug/mdb-list.h:44:
+    ULONG (*accelRoutine)(ULONG key, void *p, struct _ACCELERATOR *parser);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <accelRoutine>
#76: FILE: debug/mdb-list.h:44:
+    ULONG (*accelRoutine)(ULONG key, void *p, struct _ACCELERATOR *parser);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: debug/mdb-list.h:45:
+    ULONG (*accelRoutineHelp)(ULONG key, struct _ACCELERATOR *parser);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#77: FILE: debug/mdb-list.h:45:
+    ULONG (*accelRoutineHelp)(ULONG key, struct _ACCELERATOR *parser);

CHECK:CAMELCASE: Avoid CamelCase: <accelRoutineHelp>
#77: FILE: debug/mdb-list.h:45:
+    ULONG (*accelRoutineHelp)(ULONG key, struct _ACCELERATOR *parser);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: debug/mdb-list.h:46:
+    ULONG accelFlags;$

CHECK:CAMELCASE: Avoid CamelCase: <accelFlags>
#78: FILE: debug/mdb-list.h:46:
+    ULONG accelFlags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: debug/mdb-list.h:47:
+    ULONG key;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: debug/mdb-list.h:48:
+    ULONG supervisorCommand;$

CHECK:CAMELCASE: Avoid CamelCase: <supervisorCommand>
#80: FILE: debug/mdb-list.h:48:
+    ULONG supervisorCommand;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: debug/mdb-list.h:49:
+    BYTE *shortHelp;$

CHECK:CAMELCASE: Avoid CamelCase: <shortHelp>
#81: FILE: debug/mdb-list.h:49:
+    BYTE *shortHelp;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#84: FILE: debug/mdb-list.h:52:
+typedef struct _ALT_DEBUGGER

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#85: FILE: debug/mdb-list.h:53:
+typedef struct _ALT_DEBUGGER
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: debug/mdb-list.h:54:
+    struct _ALT_DEBUGGER *altDebugNext;$

CHECK:CAMELCASE: Avoid CamelCase: <altDebugNext>
#86: FILE: debug/mdb-list.h:54:
+    struct _ALT_DEBUGGER *altDebugNext;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: debug/mdb-list.h:55:
+    struct _ALT_DEBUGGER *altDebugPrior;$

CHECK:CAMELCASE: Avoid CamelCase: <altDebugPrior>
#87: FILE: debug/mdb-list.h:55:
+    struct _ALT_DEBUGGER *altDebugPrior;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: debug/mdb-list.h:56:
+    int (*AlternateDebugger)(int reason, int error, void *frame);$

CHECK:CAMELCASE: Avoid CamelCase: <AlternateDebugger>
#88: FILE: debug/mdb-list.h:56:
+    int (*AlternateDebugger)(int reason, int error, void *frame);

CHECK:CAMELCASE: Avoid CamelCase: <AlternateDebuggerRoutine>
#91: FILE: debug/mdb-list.h:59:
+extern int AlternateDebuggerRoutine(int reason, int error, void *frame);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: debug/mdb-list.h:59:
+extern int AlternateDebuggerRoutine(int reason, int error, void *frame);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:CAMELCASE: Avoid CamelCase: <AddAlternateDebugger>
#92: FILE: debug/mdb-list.h:60:
+extern ULONG AddAlternateDebugger(ALT_DEBUGGER *Debugger);

CHECK:CAMELCASE: Avoid CamelCase: <Debugger>
#92: FILE: debug/mdb-list.h:60:
+extern ULONG AddAlternateDebugger(ALT_DEBUGGER *Debugger);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: debug/mdb-list.h:60:
+extern ULONG AddAlternateDebugger(ALT_DEBUGGER *Debugger);

CHECK:CAMELCASE: Avoid CamelCase: <RemoveAlternateDebugger>
#93: FILE: debug/mdb-list.h:61:
+extern ULONG RemoveAlternateDebugger(ALT_DEBUGGER *Debugger);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#93: FILE: debug/mdb-list.h:61:
+extern ULONG RemoveAlternateDebugger(ALT_DEBUGGER *Debugger);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#95: FILE: debug/mdb-list.h:63:
+typedef struct _DEBUGGER_PARSER {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#96: FILE: debug/mdb-list.h:64:
+    struct _DEBUGGER_PARSER *debugNext;$

CHECK:CAMELCASE: Avoid CamelCase: <debugNext>
#96: FILE: debug/mdb-list.h:64:
+    struct _DEBUGGER_PARSER *debugNext;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: debug/mdb-list.h:65:
+    struct _DEBUGGER_PARSER *debugPrior;$

CHECK:CAMELCASE: Avoid CamelCase: <debugPrior>
#97: FILE: debug/mdb-list.h:65:
+    struct _DEBUGGER_PARSER *debugPrior;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: debug/mdb-list.h:66:
+    ULONG (*DebugCommandParser)(BYTE *commandLine,$

CHECK:CAMELCASE: Avoid CamelCase: <DebugCommandParser>
#98: FILE: debug/mdb-list.h:66:
+    ULONG (*DebugCommandParser)(BYTE *commandLine,

CHECK:CAMELCASE: Avoid CamelCase: <commandLine>
#98: FILE: debug/mdb-list.h:66:
+    ULONG (*DebugCommandParser)(BYTE *commandLine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: debug/mdb-list.h:67:
+    ULONG (*DebugCommandParser)(BYTE *commandLine,
+			       StackFrame *stackFrame, ULONG Exception,

CHECK:CAMELCASE: Avoid CamelCase: <StackFrame>
#99: FILE: debug/mdb-list.h:67:
+			       StackFrame *stackFrame, ULONG Exception,

CHECK:CAMELCASE: Avoid CamelCase: <stackFrame>
#99: FILE: debug/mdb-list.h:67:
+			       StackFrame *stackFrame, ULONG Exception,

CHECK:CAMELCASE: Avoid CamelCase: <Exception>
#99: FILE: debug/mdb-list.h:67:
+			       StackFrame *stackFrame, ULONG Exception,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: debug/mdb-list.h:69:
+    ULONG (*DebugCommandParserHelp)(BYTE *commandLine,$

CHECK:CAMELCASE: Avoid CamelCase: <DebugCommandParserHelp>
#101: FILE: debug/mdb-list.h:69:
+    ULONG (*DebugCommandParserHelp)(BYTE *commandLine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#102: FILE: debug/mdb-list.h:70:
+    ULONG (*DebugCommandParserHelp)(BYTE *commandLine,
+				   struct _DEBUGGER_PARSER *parser);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: debug/mdb-list.h:71:
+    ULONG parserFlags;$

CHECK:CAMELCASE: Avoid CamelCase: <parserFlags>
#103: FILE: debug/mdb-list.h:71:
+    ULONG parserFlags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: debug/mdb-list.h:72:
+    BYTE *debugCommandName;$

CHECK:CAMELCASE: Avoid CamelCase: <debugCommandName>
#104: FILE: debug/mdb-list.h:72:
+    BYTE *debugCommandName;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: debug/mdb-list.h:73:
+    ULONG debugCommandNameLength;$

CHECK:CAMELCASE: Avoid CamelCase: <debugCommandNameLength>
#105: FILE: debug/mdb-list.h:73:
+    ULONG debugCommandNameLength;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: debug/mdb-list.h:74:
+    ULONG supervisorCommand;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: debug/mdb-list.h:75:
+    BYTE *shortHelp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: debug/mdb-list.h:76:
+    ULONG controlTransfer;$

CHECK:CAMELCASE: Avoid CamelCase: <controlTransfer>
#108: FILE: debug/mdb-list.h:76:
+    ULONG controlTransfer;

CHECK:CAMELCASE: Avoid CamelCase: <DebuggerParserRoutine>
#111: FILE: debug/mdb-list.h:79:
+extern ULONG DebuggerParserRoutine(BYTE *command, BYTE *commandLine,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: debug/mdb-list.h:79:
+extern ULONG DebuggerParserRoutine(BYTE *command, BYTE *commandLine,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: debug/mdb-list.h:80:
+extern ULONG DebuggerParserRoutine(BYTE *command, BYTE *commandLine,
+			   StackFrame *stackFrame, ULONG Exception);

CHECK:CAMELCASE: Avoid CamelCase: <DebuggerParserHelpRoutine>
#113: FILE: debug/mdb-list.h:81:
+extern ULONG DebuggerParserHelpRoutine(BYTE *command, BYTE *commandLine);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: debug/mdb-list.h:81:
+extern ULONG DebuggerParserHelpRoutine(BYTE *command, BYTE *commandLine);

CHECK:CAMELCASE: Avoid CamelCase: <AddDebuggerCommandParser>
#114: FILE: debug/mdb-list.h:82:
+extern ULONG AddDebuggerCommandParser(DEBUGGER_PARSER *parser);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: debug/mdb-list.h:82:
+extern ULONG AddDebuggerCommandParser(DEBUGGER_PARSER *parser);

CHECK:CAMELCASE: Avoid CamelCase: <RemoveDebuggerCommandParser>
#115: FILE: debug/mdb-list.h:83:
+extern ULONG RemoveDebuggerCommandParser(DEBUGGER_PARSER *parser);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: debug/mdb-list.h:83:
+extern ULONG RemoveDebuggerCommandParser(DEBUGGER_PARSER *parser);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 29 warnings, 40 checks, 86 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000245247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
