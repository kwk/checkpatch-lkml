WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/vfsub.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#115: FILE: fs/aufs/vfsub.c:73:
+	IMustLock(parent->d_inode);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#127: FILE: fs/aufs/vfsub.c:85:
+struct dentry *vfsub_lookup_hash(struct nameidata *nd)
                                                    ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#135: FILE: fs/aufs/vfsub.c:93:
+	path.dentry = lookup_hash(nd);
 	                          ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#186: FILE: fs/aufs/vfsub.c:144:
+	if (au_test_fs_null_nd(dir->i_sb))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#188: FILE: fs/aufs/vfsub.c:146:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#578: FILE: fs/aufs/vfsub.c:536:
+	if (!do_sio)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#580: FILE: fs/aufs/vfsub.c:538:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#612: FILE: fs/aufs/vfsub.c:570:
+	if (!do_sio)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#614: FILE: fs/aufs/vfsub.c:572:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#652: FILE: fs/aufs/vfsub.c:610:
+	AuTraceErr(*a->errp);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#699: FILE: fs/aufs/vfsub.c:657:
+	const int stop_sillyrename = (au_test_nfs(d->d_sb)
+				      && atomic_read(&d->d_count) == 1);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#729: FILE: fs/aufs/vfsub.c:687:
+		iput(h_inode);
 		^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#747: FILE: fs/aufs/vfsub.c:705:
+	if (!force)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#749: FILE: fs/aufs/vfsub.c:707:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#765: FILE: fs/aufs/vfsub.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_Begin>
#795: FILE: fs/aufs/vfsub.h:31:
+	AuLsc_I_Begin = I_MUTEX_QUOTA, /* 4 */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#796: FILE: fs/aufs/vfsub.h:32:
+	AuLsc_I_PARENT,		/* lower inode, parent first */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT2>
#797: FILE: fs/aufs/vfsub.h:33:
+	AuLsc_I_PARENT2,	/* copyup dirs */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#798: FILE: fs/aufs/vfsub.h:34:
+	AuLsc_I_CHILD,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD2>
#799: FILE: fs/aufs/vfsub.h:35:
+	AuLsc_I_CHILD2,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_End>
#800: FILE: fs/aufs/vfsub.h:36:
+	AuLsc_I_End

CHECK:CAMELCASE: Avoid CamelCase: <MtxMustLock>
#804: FILE: fs/aufs/vfsub.h:40:
+#define MtxMustLock(mtx)	AuDebugOn(!mutex_is_locked(mtx))

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#804: FILE: fs/aufs/vfsub.h:40:
+#define MtxMustLock(mtx)	AuDebugOn(!mutex_is_locked(mtx))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#822: FILE: fs/aufs/vfsub.h:58:
+struct dentry *vfsub_lookup_hash(struct nameidata *nd);
                                                    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#848: FILE: fs/aufs/vfsub.h:84:
+ssize_t vfsub_read_k(struct file *file, void *kbuf, size_t count,
+			loff_t *ppos);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 20 checks, 853 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000157662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
