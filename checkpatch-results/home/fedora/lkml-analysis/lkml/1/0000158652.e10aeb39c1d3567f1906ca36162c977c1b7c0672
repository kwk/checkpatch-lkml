WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#91: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: kernel/trace/trace_event_types.h:1:
+#undef TRACE_SYSTEM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#104: FILE: kernel/trace/trace_event_types.h:9:
+TRACE_EVENT_FORMAT(function, TRACE_FN, ftrace_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#104: FILE: kernel/trace/trace_event_types.h:9:
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#113: FILE: kernel/trace/trace_event_types.h:18:
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#122: FILE: kernel/trace/trace_event_types.h:27:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#130: FILE: kernel/trace/trace_event_types.h:35:
+TRACE_EVENT_FORMAT(wakeup, TRACE_WAKE, ctx_switch_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#130: FILE: kernel/trace/trace_event_types.h:35:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: kernel/trace/trace_event_types.h:48:
+TRACE_EVENT_FORMAT(context_switch, TRACE_CTX, ctx_switch_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#143: FILE: kernel/trace/trace_event_types.h:48:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: kernel/trace/trace_event_types.h:61:
+TRACE_EVENT_FORMAT(special, TRACE_SPECIAL, special_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#156: FILE: kernel/trace/trace_event_types.h:61:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: kernel/trace/trace_event_types.h:76:
+TRACE_EVENT_FORMAT(kernel_stack, TRACE_STACK, stack_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#171: FILE: kernel/trace/trace_event_types.h:76:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: kernel/trace/trace_event_types.h:91:
+TRACE_EVENT_FORMAT(user_stack, TRACE_USER_STACK, userstack_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#186: FILE: kernel/trace/trace_event_types.h:91:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: kernel/trace/trace_event_types.h:106:
+TRACE_EVENT_FORMAT(print, TRACE_PRINT, print_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#201: FILE: kernel/trace/trace_event_types.h:106:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: kernel/trace/trace_event_types.h:115:
+TRACE_EVENT_FORMAT(branch, TRACE_BRANCH, trace_branch, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#210: FILE: kernel/trace/trace_event_types.h:115:
+	TRACE_STRUCT(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#212: FILE: kernel/trace/trace_event_types.h:117:
+		TRACE_FIELD_SPECIAL(char func[TRACE_FUNC_SIZE+1], func, func)
 		                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#213: FILE: kernel/trace/trace_event_types.h:118:
+		TRACE_FIELD_SPECIAL(char file[TRACE_FUNC_SIZE+1], file, file)
 		                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: kernel/trace/trace_event_types.h:125:
+TRACE_EVENT_FORMAT(hw_branch, TRACE_HW_BRANCHES, hw_branch_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#220: FILE: kernel/trace/trace_event_types.h:125:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: kernel/trace/trace_event_types.h:133:
+TRACE_EVENT_FORMAT(power, TRACE_POWER, trace_power, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#228: FILE: kernel/trace/trace_event_types.h:133:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: kernel/trace/trace_event_types.h:143:
+TRACE_EVENT_FORMAT(kmem_alloc, TRACE_KMEM_ALLOC, kmemtrace_alloc_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#238: FILE: kernel/trace/trace_event_types.h:143:
+	TRACE_STRUCT(

WARNING:SPLIT_STRING: quoted string split across lines
#248: FILE: kernel/trace/trace_event_types.h:153:
+	TPRAWFMT("type:%u call_site:%lx ptr:%p req:%lu alloc:%lu"
+		 " flags:%x node:%d")

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: kernel/trace/trace_event_types.h:157:
+TRACE_EVENT_FORMAT(kmem_free, TRACE_KMEM_FREE, kmemtrace_free_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#252: FILE: kernel/trace/trace_event_types.h:157:
+	TRACE_STRUCT(

WARNING:SPLIT_STRING: quoted string split across lines
#279: FILE: kernel/trace/trace_events.c:664:
+			pr_warning("Could not create debugfs "
+				   "'%s/enable' entry\n", call->name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#290: FILE: kernel/trace/trace_export.c:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#310: FILE: kernel/trace/trace_export.c:21:
+#define TRACE_FIELD_ZERO_CHAR(item)				\
+	ret = trace_seq_printf(s, "\tfield: char " #item ";\t"	\
+			       "offset:%lu;\tsize:0;\n",	\
+			       offsetof(typeof(field), item));	\
+	if (!ret)						\
+		return 0;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#310: FILE: kernel/trace/trace_export.c:21:
+#define TRACE_FIELD_ZERO_CHAR(item)				\
+	ret = trace_seq_printf(s, "\tfield: char " #item ";\t"	\
+			       "offset:%lu;\tsize:0;\n",	\
+			       offsetof(typeof(field), item));	\
+	if (!ret)						\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#310: FILE: kernel/trace/trace_export.c:21:
+#define TRACE_FIELD_ZERO_CHAR(item)				\
+	ret = trace_seq_printf(s, "\tfield: char " #item ";\t"	\
+			       "offset:%lu;\tsize:0;\n",	\
+			       offsetof(typeof(field), item));	\
+	if (!ret)						\
+		return 0;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#317: FILE: kernel/trace/trace_export.c:28:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#342: FILE: kernel/trace/trace_export.c:53:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#342: FILE: kernel/trace/trace_export.c:53:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#342: FILE: kernel/trace/trace_export.c:53:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#346: FILE: kernel/trace/trace_export.c:57:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#346: FILE: kernel/trace/trace_export.c:57:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#346: FILE: kernel/trace/trace_export.c:57:
+#define TRACE_FIELD(type, item, assign)\
+	entry->item = assign;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#356: FILE: kernel/trace/trace_export.c:67:
+#define TRACE_FIELD_SPECIAL(type_item, item, cmd) \
+	cmd;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#363: FILE: kernel/trace/trace_export.c:74:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#364: FILE: kernel/trace/trace_export.c:75:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: kernel/trace/trace_export.c:76:
+^I.name ^I^I^I= #call,^I^I^I^I\$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#370: FILE: kernel/trace/trace_export.c:81:
+}
+#include "trace_event_types.h"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 13 warnings, 32 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
