WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
 (aka s390x, mainframe) architecture. It uses the mainframe's virtualization

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#33: 
instruction SIE to run virtual machines with up to 64 virtual CPUs each.
            ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'SIE' may be misspelled - perhaps 'SIZE'?
#42: 
                            context via SIE, and switches world before and after                            that
                                        ^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#104: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#119: FILE: arch/s390/kvm/Makefile:11:
+EXTRA_CFLAGS += -Ivirt/kvm -Iarch/s390/kvm

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#129: FILE: arch/s390/kvm/gaccess.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#146: FILE: arch/s390/kvm/gaccess.h:18:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: No space is necessary after a cast
#161: FILE: arch/s390/kvm/gaccess.h:33:
+		return (void __user __force *) ERR_PTR(-EFAULT);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#165: FILE: arch/s390/kvm/gaccess.h:37:
+	return (void __user *) guestaddr;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#173: FILE: arch/s390/kvm/gaccess.h:45:
+	BUG_ON(guestaddr & 7);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#175: FILE: arch/s390/kvm/gaccess.h:47:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#176: FILE: arch/s390/kvm/gaccess.h:48:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/s390/kvm/gaccess.h:50:
+	return get_user(*result, (u64 __user *) uptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#186: FILE: arch/s390/kvm/gaccess.h:58:
+	BUG_ON(guestaddr & 3);

CHECK:SPACING: No space is necessary after a cast
#188: FILE: arch/s390/kvm/gaccess.h:60:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#189: FILE: arch/s390/kvm/gaccess.h:61:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#191: FILE: arch/s390/kvm/gaccess.h:63:
+	return get_user(*result, (u32 __user *) uptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#199: FILE: arch/s390/kvm/gaccess.h:71:
+	BUG_ON(guestaddr & 1);

CHECK:SPACING: No space is necessary after a cast
#204: FILE: arch/s390/kvm/gaccess.h:76:
+	return get_user(*result, (u16 __user *) uptr);

CHECK:SPACING: No space is necessary after a cast
#212: FILE: arch/s390/kvm/gaccess.h:84:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#213: FILE: arch/s390/kvm/gaccess.h:85:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#215: FILE: arch/s390/kvm/gaccess.h:87:
+	return get_user(*result, (u8 __user *) uptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#223: FILE: arch/s390/kvm/gaccess.h:95:
+	BUG_ON(guestaddr & 7);

CHECK:SPACING: No space is necessary after a cast
#225: FILE: arch/s390/kvm/gaccess.h:97:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#226: FILE: arch/s390/kvm/gaccess.h:98:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#228: FILE: arch/s390/kvm/gaccess.h:100:
+	return put_user(value, (u64 __user *) uptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: arch/s390/kvm/gaccess.h:108:
+	BUG_ON(guestaddr & 3);

CHECK:SPACING: No space is necessary after a cast
#238: FILE: arch/s390/kvm/gaccess.h:110:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#239: FILE: arch/s390/kvm/gaccess.h:111:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#241: FILE: arch/s390/kvm/gaccess.h:113:
+	return put_user(value, (u32 __user *) uptr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#249: FILE: arch/s390/kvm/gaccess.h:121:
+	BUG_ON(guestaddr & 1);

CHECK:SPACING: No space is necessary after a cast
#251: FILE: arch/s390/kvm/gaccess.h:123:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#252: FILE: arch/s390/kvm/gaccess.h:124:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#254: FILE: arch/s390/kvm/gaccess.h:126:
+	return put_user(value, (u16 __user *) uptr);

CHECK:SPACING: No space is necessary after a cast
#262: FILE: arch/s390/kvm/gaccess.h:134:
+	if (IS_ERR((void __force *) uptr))

CHECK:SPACING: No space is necessary after a cast
#263: FILE: arch/s390/kvm/gaccess.h:135:
+		return PTR_ERR((void __force *) uptr);

CHECK:SPACING: No space is necessary after a cast
#265: FILE: arch/s390/kvm/gaccess.h:137:
+	return put_user(value, (u8 __user *) uptr);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#268: FILE: arch/s390/kvm/gaccess.h:140:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'guestdest < prefix'
#294: FILE: arch/s390/kvm/gaccess.h:166:
+	if ((guestdest < prefix) && (guestdest + n > prefix))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#298: FILE: arch/s390/kvm/gaccess.h:170:
+	if ((guestdest < prefix + 2 * PAGE_SIZE)
+	    && (guestdest + n > prefix + 2 * PAGE_SIZE))

CHECK:SPACING: No space is necessary after a cast
#314: FILE: arch/s390/kvm/gaccess.h:186:
+	return copy_to_user((void __user *) guestdest, from, n);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'guestsrc < prefix'
#344: FILE: arch/s390/kvm/gaccess.h:216:
+	if ((guestsrc < prefix) && (guestsrc + n > prefix))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#348: FILE: arch/s390/kvm/gaccess.h:220:
+	if ((guestsrc < prefix + 2 * PAGE_SIZE)
+	    && (guestsrc + n > prefix + 2 * PAGE_SIZE))

CHECK:SPACING: No space is necessary after a cast
#364: FILE: arch/s390/kvm/gaccess.h:236:
+	return copy_from_user(to, (void __user *) guestsrc, n);

CHECK:SPACING: No space is necessary after a cast
#383: FILE: arch/s390/kvm/gaccess.h:255:
+	return copy_to_user((void __user *) guestdest, from, n);

CHECK:SPACING: No space is necessary after a cast
#400: FILE: arch/s390/kvm/gaccess.h:272:
+	return copy_from_user(to, (void __user *) guestsrc, n);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#409: FILE: arch/s390/kvm/kvm-s390.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#432: FILE: arch/s390/kvm/kvm-s390.c:24:
+#include <asm/pgtable.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#436: FILE: arch/s390/kvm/kvm-s390.c:28:
+#define VCPU_STAT(x) offsetof(struct kvm_vcpu, stat.x), KVM_STAT_VCPU

CHECK:LINE_SPACING: Please don't use multiple blank lines
#443: FILE: arch/s390/kvm/kvm-s390.c:35:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#481: FILE: arch/s390/kvm/kvm-s390.c:73:
+long kvm_arch_dev_ioctl(struct file *filp,
                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#504: FILE: arch/s390/kvm/kvm-s390.c:96:
+long kvm_arch_vm_ioctl(struct file *filp,
                                     ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*kvm)...) over kzalloc(sizeof(struct kvm)...)
#530: FILE: arch/s390/kvm/kvm-s390.c:122:
+	kvm = kzalloc(sizeof(struct kvm), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#534: FILE: arch/s390/kvm/kvm-s390.c:126:
+	kvm->arch.sca = (struct sca_block *) get_zeroed_page(GFP_KERNEL);

WARNING:TYPO_SPELLING: 'does'nt' may be misspelled - perhaps 'doesn't'?
#574: FILE: arch/s390/kvm/kvm-s390.c:166:
+	/* kvm common code refers to this, but does'nt call it */
 	                                       ^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: arch/s390/kvm/kvm-s390.c:167:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: arch/s390/kvm/kvm-s390.c:180:
+		atomic_set_mask(CPUSTAT_STOP_INT,
+			&vcpu->arch.sie_block->cpuflags);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vcpu)...) over kzalloc(sizeof(struct kvm_vcpu)...)
#631: FILE: arch/s390/kvm/kvm-s390.c:223:
+	struct kvm_vcpu *vcpu = kzalloc(sizeof(struct kvm_vcpu), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#637: FILE: arch/s390/kvm/kvm-s390.c:229:
+	vcpu->arch.sie_block = (struct sie_block *) get_zeroed_page(GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: arch/s390/kvm/kvm-s390.c:235:
+	BUG_ON(!kvm->arch.sca);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#644: FILE: arch/s390/kvm/kvm-s390.c:236:
+	BUG_ON(kvm->arch.sca->cpu[id].sda);

CHECK:SPACING: No space is necessary after a cast
#645: FILE: arch/s390/kvm/kvm-s390.c:237:
+	kvm->arch.sca->cpu[id].sda = (__u64) vcpu->arch.sie_block;

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#652: FILE: arch/s390/kvm/kvm-s390.c:244:
+	VM_EVENT(kvm, 3, "create cpu %d at %p, sie block at %p", id, vcpu,
 	                                       ^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: arch/s390/kvm/kvm-s390.c:267:
+	BUG();

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#777: FILE: arch/s390/kvm/kvm-s390.c:369:
+	VCPU_EVENT(vcpu, 6, "entering sie flags %x",
 	                              ^^^

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#780: FILE: arch/s390/kvm/kvm-s390.c:372:
+	VCPU_EVENT(vcpu, 6, "exit sie icptcode %d",
 	                          ^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#831: FILE: arch/s390/kvm/kvm-s390.c:423:
+	if (addr == KVM_S390_STORE_STATUS_NOADDR) {
[...]
+	} else if (addr == KVM_S390_STORE_STATUS_PREFIXED) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#841: FILE: arch/s390/kvm/kvm-s390.c:433:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#898: FILE: arch/s390/kvm/kvm-s390.c:490:
+long kvm_arch_vcpu_ioctl(struct file *filp,
                                       ^^^^

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#916: FILE: arch/s390/kvm/kvm-s390.c:508:
+	default:
+		;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: arch/s390/kvm/kvm-s390.c:516:
+int kvm_arch_set_memory_region(struct kvm *kvm,
+				struct kvm_userspace_memory_region *mem,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#929: FILE: arch/s390/kvm/kvm-s390.c:521:
+	/* A few sanity checks. We can have exactly one memory slot which has
+	   to start at guest virtual zero and which has to be located at a

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: arch/s390/kvm/kvm-s390.c:525:
+	   doing this call at any time */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#951: FILE: arch/s390/kvm/kvm-s390.c:543:
+	/* FIXME: we do want to interrupt running CPUs and update their memory
+	   configuration now to avoid race conditions. But hey, changing the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#953: FILE: arch/s390/kvm/kvm-s390.c:545:
+	   programming practice. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#981: FILE: arch/s390/kvm/kvm-s390.h:1:
+/*

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd_kvm' may be better as '(d_kvm)' to avoid precedence issues
#996: FILE: arch/s390/kvm/kvm-s390.h:16:
+#define VM_EVENT(d_kvm, d_loglevel, d_string, d_args...)\
+do { \
+	debug_sprintf_event(d_kvm->arch.dbf, d_loglevel, d_string "\n", \
+	  d_args); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#996: FILE: arch/s390/kvm/kvm-s390.h:16:
+#define VM_EVENT(d_kvm, d_loglevel, d_string, d_args...)\
+do { \
+	debug_sprintf_event(d_kvm->arch.dbf, d_loglevel, d_string "\n", \
+	  d_args); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd_vcpu' - possible side-effects?
#1002: FILE: arch/s390/kvm/kvm-s390.h:22:
+#define VCPU_EVENT(d_vcpu, d_loglevel, d_string, d_args...)\
+do { \
+	debug_sprintf_event(d_vcpu->kvm->arch.dbf, d_loglevel, \
+	  "%02d[%016lx-%016lx]: " d_string "\n", d_vcpu->vcpu_id, \
+	  d_vcpu->arch.sie_block->gpsw.mask, d_vcpu->arch.sie_block->gpsw.addr,\
+	  d_args); \
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'd_vcpu' may be better as '(d_vcpu)' to avoid precedence issues
#1002: FILE: arch/s390/kvm/kvm-s390.h:22:
+#define VCPU_EVENT(d_vcpu, d_loglevel, d_string, d_args...)\
+do { \
+	debug_sprintf_event(d_vcpu->kvm->arch.dbf, d_loglevel, \
+	  "%02d[%016lx-%016lx]: " d_string "\n", d_vcpu->vcpu_id, \
+	  d_vcpu->arch.sie_block->gpsw.mask, d_vcpu->arch.sie_block->gpsw.addr,\
+	  d_args); \
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1002: FILE: arch/s390/kvm/kvm-s390.h:22:
+#define VCPU_EVENT(d_vcpu, d_loglevel, d_string, d_args...)\
+do { \
+	debug_sprintf_event(d_vcpu->kvm->arch.dbf, d_loglevel, \
+	  "%02d[%016lx-%016lx]: " d_string "\n", d_vcpu->vcpu_id, \
+	  d_vcpu->arch.sie_block->gpsw.mask, d_vcpu->arch.sie_block->gpsw.addr,\
+	  d_args); \
+} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1016: FILE: arch/s390/kvm/sie64a.S:1:
+/*

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#1017: FILE: arch/s390/kvm/sie64a.S:2:
+ * sie64a.S - low level sie call
                         ^^^

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#1036: FILE: arch/s390/kvm/sie64a.S:21:
+ * %r2 pointer to sie control block
                   ^^^

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#1043: FILE: arch/s390/kvm/sie64a.S:28:
+	lgr	%r14,%r2		# pointer to sie control block
 	   	        		             ^^^

WARNING:TYPO_SPELLING: 'sie' may be misspelled - perhaps 'size'?
#1046: FILE: arch/s390/kvm/sie64a.S:31:
+	sie	0(%r14)
 	^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1132: FILE: include/asm-s390/kvm_host.h:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1144: FILE: include/asm-s390/kvm_host.h:13:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1163: FILE: include/asm-s390/kvm_host.h:32:
+} __attribute__((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1165: FILE: include/asm-s390/kvm_host.h:34:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1172: FILE: include/asm-s390/kvm_host.h:41:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1231: FILE: include/asm-s390/kvm_host.h:100:
+} __attribute__((packed));

WARNING:SPACING: missing space after struct definition
#1250: FILE: include/asm-s390/kvm_host.h:119:
+struct kvm_arch{

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1257: FILE: include/asm-s390/kvm_host.h:126:
+extern int sie64a(struct sie_block *, __u64 *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sie_block *' should also have an identifier name
#1257: FILE: include/asm-s390/kvm_host.h:126:
+extern int sie64a(struct sie_block *, __u64 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64 *' should also have an identifier name
#1257: FILE: include/asm-s390/kvm_host.h:126:
+extern int sie64a(struct sie_block *, __u64 *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1265: FILE: include/asm-s390/kvm_para.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 45 warnings, 51 checks, 1187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
