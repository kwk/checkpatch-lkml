ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#276: FILE: drivers/ide/ide-disk.c:1079:
+	case HDIO_GET_ADDRESS:	 getfunc = get_lba_addressing;	goto read_val;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#277: FILE: drivers/ide/ide-disk.c:1080:
+	case HDIO_GET_MULTCOUNT: getfunc = get_multcount;	goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#278: FILE: drivers/ide/ide-disk.c:1081:
+	case HDIO_GET_NOWERR:	 getfunc = get_nowerr;		goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#279: FILE: drivers/ide/ide-disk.c:1082:
+	case HDIO_GET_WCACHE:	 getfunc = get_wcache;		goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#280: FILE: drivers/ide/ide-disk.c:1083:
+	case HDIO_GET_ACOUSTIC:	 getfunc = get_acoustic;	goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#285: FILE: drivers/ide/ide-disk.c:1087:
+	case HDIO_SET_WCACHE:	 setfunc = set_wcache;		goto set_val;

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: drivers/ide/ide-floppy.c:1022:
+	idefloppy_floppy_t *floppy = drive->driver_data;
+	floppy->ticks = arg;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#681: FILE: drivers/ide/ide-proc.c:282:
+		if (*g && d && *d) {
[...]
+		} else if (d && *d) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#688: FILE: drivers/ide/ide-proc.c:289:
+		} else

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#800: FILE: drivers/ide/ide-tape.c:2411:
+#define ide_tape_devset_get(name, field) \
+static int get_##name(ide_drive_t *drive) \
+{ \
+	idetape_tape_t *tape = drive->driver_data; \
+	return tape->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#807: FILE: drivers/ide/ide-tape.c:2418:
+#define ide_tape_devset_set(name, field) \
+static int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	idetape_tape_t *tape = drive->driver_data; \
+	tape->field = arg; \
+	return 0; \
+}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#815: FILE: drivers/ide/ide-tape.c:2426:
+#define ide_tape_devset_rw(_name, _min, _max, _field, _mulf, _divf) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+__IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name, _mulf, _divf)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#815: FILE: drivers/ide/ide-tape.c:2426:
+#define ide_tape_devset_rw(_name, _min, _max, _field, _mulf, _divf) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+__IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name, _mulf, _divf)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#815: FILE: drivers/ide/ide-tape.c:2426:
+#define ide_tape_devset_rw(_name, _min, _max, _field, _mulf, _divf) \
+ide_tape_devset_get(_name, _field) \
+ide_tape_devset_set(_name, _field) \
+__IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name, _mulf, _divf)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#820: FILE: drivers/ide/ide-tape.c:2431:
+#define ide_tape_devset_r(_name, _min, _max, _field, _mulf, _divf) \
+ide_tape_devset_get(_name, _field) \
+__IDE_DEVSET(_name, S_READ, _min, _max, get_##_name, NULL, _mulf, _divf)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#820: FILE: drivers/ide/ide-tape.c:2431:
+#define ide_tape_devset_r(_name, _min, _max, _field, _mulf, _divf) \
+ide_tape_devset_get(_name, _field) \
+__IDE_DEVSET(_name, S_READ, _min, _max, get_##_name, NULL, _mulf, _divf)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#922: FILE: drivers/ide/ide.c:569:
+	case HDIO_GET_32BIT:	    getfunc = get_io_32bit;	 goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#923: FILE: drivers/ide/ide.c:570:
+	case HDIO_GET_KEEPSETTINGS: getfunc = get_ksettings;	 goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#924: FILE: drivers/ide/ide.c:571:
+	case HDIO_GET_UNMASKINTR:   getfunc = get_unmaskirq;	 goto read_val;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#925: FILE: drivers/ide/ide.c:572:
+	case HDIO_GET_DMA:	    getfunc = get_using_dma;	 goto read_val;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#961: FILE: drivers/scsi/ide-scsi.c:431:
+#define ide_scsi_devset_get(name, field) \
+static int get_##name(ide_drive_t *drive) \
+{ \
+	idescsi_scsi_t *scsi = drive_to_idescsi(drive); \
+	return scsi->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#968: FILE: drivers/scsi/ide-scsi.c:438:
+#define ide_scsi_devset_set(name, field) \
+static int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	idescsi_scsi_t *scsi = drive_to_idescsi(drive); \
+	scsi->field = arg; \
+	return 0; \
+}

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#976: FILE: drivers/scsi/ide-scsi.c:446:
+#define ide_scsi_devset_rw(_name, _min, _max, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#976: FILE: drivers/scsi/ide-scsi.c:446:
+#define ide_scsi_devset_rw(_name, _min, _max, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#976: FILE: drivers/scsi/ide-scsi.c:446:
+#define ide_scsi_devset_rw(_name, _min, _max, _field) \
+ide_scsi_devset_get(_name, _field); \
+ide_scsi_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1091: FILE: include/linux/ide.h:699:
+int get_io_32bit(ide_drive_t *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1093: FILE: include/linux/ide.h:701:
+int get_ksettings(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1096: FILE: include/linux/ide.h:704:
+int get_unmaskirq(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1098: FILE: include/linux/ide.h:706:
+int get_using_dma(ide_drive_t *);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#1101: FILE: include/linux/ide.h:709:
+#define ide_devset_get(name, field) \
+int get_##name(ide_drive_t *drive) \
+{ \
+	return drive->field; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#1107: FILE: include/linux/ide.h:715:
+#define ide_devset_set(name, field) \
+int set_##name(ide_drive_t *drive, int arg) \
+{ \
+	drive->field = arg; \
+	return 0; \
+}

CHECK:BIT_MACRO: Prefer using the BIT macro
#1128: FILE: include/linux/ide.h:786:
+#define S_READ		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1129: FILE: include/linux/ide.h:787:
+#define S_WRITE		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1131: FILE: include/linux/ide.h:789:
+#define S_NOLOCK	(1 << 2)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1151: FILE: include/linux/ide.h:795:
+	int		(*get)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1152: FILE: include/linux/ide.h:796:
+	int		(*set)(ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1152: FILE: include/linux/ide.h:796:
+	int		(*set)(ide_drive_t *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1153: FILE: include/linux/ide.h:797:
+	int		(*mulf)(ide_drive_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#1154: FILE: include/linux/ide.h:798:
+	int		(*divf)(ide_drive_t *);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1182: FILE: include/linux/ide.h:825:
+#define ide_devset_rw(_name, _min, _max, _field) \
+static ide_devset_get(_name, _field); \
+static ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1182: FILE: include/linux/ide.h:825:
+#define ide_devset_rw(_name, _min, _max, _field) \
+static ide_devset_get(_name, _field); \
+static ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_field' - possible side-effects?
#1182: FILE: include/linux/ide.h:825:
+#define ide_devset_rw(_name, _min, _max, _field) \
+static ide_devset_get(_name, _field); \
+static ide_devset_set(_name, _field); \
+IDE_DEVSET(_name, S_RW, _min, _max, get_##_name, set_##_name)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1187: FILE: include/linux/ide.h:830:
+#define ide_devset_r(_name, _min, _max, _field) \
+ide_devset_get(_name, _field) \
+IDE_DEVSET(_name, S_READ, _min, _max, get_##_name, NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#1187: FILE: include/linux/ide.h:830:
+#define ide_devset_r(_name, _min, _max, _field) \
+ide_devset_get(_name, _field) \
+IDE_DEVSET(_name, S_READ, _min, _max, get_##_name, NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 10 warnings, 19 checks, 1047 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000249021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
