WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#58: FILE: drivers/input/lirc/Kconfig:57:
+config LIRC_IT87
+	tristate "ITE IT87XX CIR Port Receiver"
+	default n
+	depends on LIRC_DEV
+	help
+	  Driver for the ITE IT87xx IR Receiver
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: drivers/input/lirc/lirc_it87.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#102: FILE: drivers/input/lirc/lirc_it87.c:17:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#103: FILE: drivers/input/lirc/lirc_it87.c:18:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#118: FILE: drivers/input/lirc/lirc_it87.c:33:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#123: FILE: drivers/input/lirc/lirc_it87.c:38:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#174: FILE: drivers/input/lirc/lirc_it87.c:89:
+#define IT87_TIMEOUT	(HZ*5/100)
                     	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#174: FILE: drivers/input/lirc/lirc_it87.c:89:
+#define IT87_TIMEOUT	(HZ*5/100)
                     	     ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#181: FILE: drivers/input/lirc/lirc_it87.c:96:
+			printk(KERN_DEBUG LIRC_DRIVER_NAME ": "	\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#236: FILE: drivers/input/lirc/lirc_it87.c:151:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#250: FILE: drivers/input/lirc/lirc_it87.c:165:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: drivers/input/lirc/lirc_it87.c:171:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#265: FILE: drivers/input/lirc/lirc_it87.c:180:
+
+

CHECK:SPACING: No space is necessary after a cast
#282: FILE: drivers/input/lirc/lirc_it87.c:197:
+		if (copy_to_user((void *) buf + n, (void *) (rx_buf + rx_head),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#295: FILE: drivers/input/lirc/lirc_it87.c:210:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#323: FILE: drivers/input/lirc/lirc_it87.c:238:
+
+

CHECK:SPACING: No space is necessary after a cast
#345: FILE: drivers/input/lirc/lirc_it87.c:260:
+		retval = put_user(value, (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#350: FILE: drivers/input/lirc/lirc_it87.c:265:
+		retval = get_user(value, (unsigned long *) arg);

CHECK:SPACING: No space is necessary after a cast
#354: FILE: drivers/input/lirc/lirc_it87.c:269:
+		retval = get_user(ivalue, (unsigned int *) arg);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#382: FILE: drivers/input/lirc/lirc_it87.c:297:
+			retval = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#385: FILE: drivers/input/lirc/lirc_it87.c:300:
+			retval = -ENOSYS;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#400: FILE: drivers/input/lirc/lirc_it87.c:315:
+	/* statistically pulses are ~TIME_CONST/2 too long: we could
+	   maybe make this more exactly but this is good enough */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#400: FILE: drivers/input/lirc/lirc_it87.c:315:
+	   maybe make this more exactly but this is good enough */

CHECK:BRACES: braces {} should be used on all arms of this statement
#401: FILE: drivers/input/lirc/lirc_it87.c:316:
+	if (flag) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#408: FILE: drivers/input/lirc/lirc_it87.c:323:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#420: FILE: drivers/input/lirc/lirc_it87.c:335:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#421: FILE: drivers/input/lirc/lirc_it87.c:336:
+static struct file_operations lirc_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: drivers/input/lirc/lirc_it87.c:347:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#440: FILE: drivers/input/lirc/lirc_it87.c:355:
+       .name^I^I= LIRC_DRIVER_NAME,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/input/lirc/lirc_it87.c:356:
+       .minor^I^I= -1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#442: FILE: drivers/input/lirc/lirc_it87.c:357:
+       .code_length^I= 1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: drivers/input/lirc/lirc_it87.c:358:
+       .sample_rate^I= 0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: drivers/input/lirc/lirc_it87.c:359:
+       .data^I^I= NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: drivers/input/lirc/lirc_it87.c:360:
+       .add_to_buf^I= NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: drivers/input/lirc/lirc_it87.c:361:
+       .get_queue^I= NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: drivers/input/lirc/lirc_it87.c:362:
+       .set_use_inc^I= set_use_inc,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: drivers/input/lirc/lirc_it87.c:363:
+       .set_use_dec^I= set_use_dec,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: drivers/input/lirc/lirc_it87.c:364:
+       .fops^I^I= &lirc_fops,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: drivers/input/lirc/lirc_it87.c:365:
+       .dev^I^I= NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: drivers/input/lirc/lirc_it87.c:366:
+       .owner^I^I= THIS_MODULE,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#454: FILE: drivers/input/lirc/lirc_it87.c:369:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#461: FILE: drivers/input/lirc/lirc_it87.c:376:
+		printk(KERN_ERR LIRC_DRIVER_NAME ": init_chrdev() failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'init_chrdev', this function's name, in a string
#461: FILE: drivers/input/lirc/lirc_it87.c:376:
+		printk(KERN_ERR LIRC_DRIVER_NAME ": init_chrdev() failed.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#467: FILE: drivers/input/lirc/lirc_it87.c:382:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#474: FILE: drivers/input/lirc/lirc_it87.c:389:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#484: FILE: drivers/input/lirc/lirc_it87.c:399:
+		deltv = deltv*1000000 + tv2->tv_usec - tv1->tv_usec;
 		             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#497: FILE: drivers/input/lirc/lirc_it87.c:412:
+		/* We have timed out.
+		   Disable the RX mechanism.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#510: FILE: drivers/input/lirc/lirc_it87.c:425:
+		     io+IT87_CIR_TCR1);
 		       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#514: FILE: drivers/input/lirc/lirc_it87.c:429:
+		/* if last received signal was a pulse, but receiving
+		   stopped within the 9 bit frame, we need to finish

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#517: FILE: drivers/input/lirc/lirc_it87.c:432:
+		   two sequences next time. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#550: FILE: drivers/input/lirc/lirc_it87.c:465:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#576: FILE: drivers/input/lirc/lirc_it87.c:491:
+					 * sequence detection */

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#586: FILE: drivers/input/lirc/lirc_it87.c:501:
+						if (lastbit == 0) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/input/lirc/lirc_it87.c:503:
+							add_read_queue(0,
+								acc_space *

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#594: FILE: drivers/input/lirc/lirc_it87.c:509:
+						if (lastbit == 1) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: drivers/input/lirc/lirc_it87.c:511:
+							add_read_queue(1,
+								acc_pulse *

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#619: FILE: drivers/input/lirc/lirc_it87.c:534:
+				/* if nothing came in last 2 cycles,
+				   it was gap */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#619: FILE: drivers/input/lirc/lirc_it87.c:534:
+				   it was gap */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#639: FILE: drivers/input/lirc/lirc_it87.c:554:
+					/* deltintrtv > 2*TIME_CONST,
+					   remember ? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#639: FILE: drivers/input/lirc/lirc_it87.c:554:
+					   remember ? */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#642: FILE: drivers/input/lirc/lirc_it87.c:557:
+						       deltv-TIME_CONST);
 						            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#645: FILE: drivers/input/lirc/lirc_it87.c:560:
+					if (last_tv.tv_usec >= TIME_CONST)
[...]
+					else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#647: FILE: drivers/input/lirc/lirc_it87.c:562:
+					else {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#656: FILE: drivers/input/lirc/lirc_it87.c:571:
+					 * sequence detection */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#684: FILE: drivers/input/lirc/lirc_it87.c:599:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#699: FILE: drivers/input/lirc/lirc_it87.c:614:
+		long i = 0;
+		for (i = 0; i < count_bits; i++) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#725: FILE: drivers/input/lirc/lirc_it87.c:640:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#727: FILE: drivers/input/lirc/lirc_it87.c:642:
+/*
+maybe: exchange space and pulse because

CHECK:LINE_SPACING: Please don't use multiple blank lines
#731: FILE: drivers/input/lirc/lirc_it87.c:646:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#742: FILE: drivers/input/lirc/lirc_it87.c:657:
+
+

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void init_send() should probably be void init_send(void)
#743: FILE: drivers/input/lirc/lirc_it87.c:658:
+static void init_send()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#757: FILE: drivers/input/lirc/lirc_it87.c:672:
+
+

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#770: FILE: drivers/input/lirc/lirc_it87.c:685:
+	/* then reenable receiver */
 	        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#778: FILE: drivers/input/lirc/lirc_it87.c:693:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#788: FILE: drivers/input/lirc/lirc_it87.c:703:
+	outb(IT87_CIR_BAUDRATE_DIVISOR % 0x100, io+IT87_CIR_BDLR);
 	                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#789: FILE: drivers/input/lirc/lirc_it87.c:704:
+	outb(IT87_CIR_BAUDRATE_DIVISOR / 0x100, io+IT87_CIR_BDHR);
 	                                          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#808: FILE: drivers/input/lirc/lirc_it87.c:723:
+		/* TX: it87_freq (36kHz),
+		   'reserved' sensitivity setting (0x00) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#808: FILE: drivers/input/lirc/lirc_it87.c:723:
+		   'reserved' sensitivity setting (0x00) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#820: FILE: drivers/input/lirc/lirc_it87.c:735:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#833: FILE: drivers/input/lirc/lirc_it87.c:748:
+	outb(IT87_CIR_TCR1_FIFOCLR, io+IT87_CIR_TCR1);
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#835: FILE: drivers/input/lirc/lirc_it87.c:750:
+	outb(IT87_CIR_IER_RESET, io+IT87_CIR_IER);
 	                           ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#840: FILE: drivers/input/lirc/lirc_it87.c:755:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#847: FILE: drivers/input/lirc/lirc_it87.c:762:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#854: FILE: drivers/input/lirc/lirc_it87.c:769:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'it87_chipid != 0x12'
#881: FILE: drivers/input/lirc/lirc_it87.c:796:
+	if ((it87_chipid != 0x12) && (it87_chipid != 0x05)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'it87_chipid != 0x05'
#881: FILE: drivers/input/lirc/lirc_it87.c:796:
+	if ((it87_chipid != 0x12) && (it87_chipid != 0x05)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#882: FILE: drivers/input/lirc/lirc_it87.c:797:
+		printk(KERN_INFO LIRC_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#887: FILE: drivers/input/lirc/lirc_it87.c:802:
+	printk(KERN_INFO LIRC_DRIVER_NAME

CHECK:BRACES: braces {} should be used on all arms of this statement
#900: FILE: drivers/input/lirc/lirc_it87.c:815:
+	if (it87_io == 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#903: FILE: drivers/input/lirc/lirc_it87.c:818:
+		printk(KERN_INFO LIRC_DRIVER_NAME

CHECK:BRACES: Unbalanced braces around else statement
#908: FILE: drivers/input/lirc/lirc_it87.c:823:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#912: FILE: drivers/input/lirc/lirc_it87.c:827:
+	if (digimatrix || it87_irq == 0) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#915: FILE: drivers/input/lirc/lirc_it87.c:830:
+		printk(KERN_INFO LIRC_DRIVER_NAME

CHECK:BRACES: Unbalanced braces around else statement
#919: FILE: drivers/input/lirc/lirc_it87.c:834:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#924: FILE: drivers/input/lirc/lirc_it87.c:839:
+	outb(IT87_CIR_IER_RESET, io+IT87_CIR_IER);
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#929: FILE: drivers/input/lirc/lirc_it87.c:844:
+	     IT87_CIR_TCR1_TXENDF, io+IT87_CIR_TCR1);
 	                             ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!request_region"
#933: FILE: drivers/input/lirc/lirc_it87.c:848:
+	if (request_region(io, 8, LIRC_DRIVER_NAME) == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#934: FILE: drivers/input/lirc/lirc_it87.c:849:
+		printk(KERN_ERR LIRC_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#950: FILE: drivers/input/lirc/lirc_it87.c:865:
+		printk(KERN_ERR LIRC_DRIVER_NAME

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#957: FILE: drivers/input/lirc/lirc_it87.c:872:
+	printk(KERN_INFO LIRC_DRIVER_NAME

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: drivers/input/lirc/lirc_it87.c:882:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#971: FILE: drivers/input/lirc/lirc_it87.c:886:
+/*
+	unsigned char init_bytes[4] = IT87_INIT;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#991: FILE: drivers/input/lirc/lirc_it87.c:906:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1001: FILE: drivers/input/lirc/lirc_it87.c:916:
+	printk(KERN_INFO LIRC_DRIVER_NAME ": Installed.\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1005: FILE: drivers/input/lirc/lirc_it87.c:920:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1023: FILE: drivers/input/lirc/lirc_it87.c:938:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1029: FILE: drivers/input/lirc/lirc_it87.c:944:
+	printk(KERN_INFO LIRC_DRIVER_NAME ": Uninstalled.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1059: FILE: drivers/input/lirc/lirc_it87.c:974:
+MODULE_PARM_DESC(digimatrix,
+	"Asus Digimatrix it87 compat. enable/disable (1/0), default: 1");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1062: FILE: drivers/input/lirc/lirc_it87.c:977:
+MODULE_PARM_DESC(digimatrix,
+	"Asus Digimatrix it87 compat. enable/disable (1/0), default: 0");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: drivers/input/lirc/lirc_it87.c:980:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1069: FILE: drivers/input/lirc/lirc_it87.c:984:
+MODULE_PARM_DESC(it87_freq,
+    "Carrier demodulator frequency (kHz), (default: 36)");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: drivers/input/lirc/lirc_it87.c:984:
+    "Carrier demodulator frequency (kHz), (default: 36)");$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: drivers/input/lirc/lirc_it87.c:987:
+MODULE_PARM_DESC(it87_freq,
+    "Carrier demodulator frequency (kHz), (default: 38)");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: drivers/input/lirc/lirc_it87.c:987:
+    "Carrier demodulator frequency (kHz), (default: 38)");$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1077: FILE: drivers/input/lirc/lirc_it87.c:992:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1091: FILE: drivers/input/lirc/lirc_it87.h:1:
+/* lirc_it87.h */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1097: FILE: drivers/input/lirc/lirc_it87.h:7:
+/* based on the following documentation from ITE:
+   a) IT8712F Preliminary CIR Programming Guide V0.1

WARNING:TYPO_SPELLING: 'Specifiction' may be misspelled - perhaps 'Specification'?
#1098: FILE: drivers/input/lirc/lirc_it87.h:8:
+   b) IT8705F Simple LPC I/O Preliminary Specifiction V0.3
                                          ^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1109: FILE: drivers/input/lirc/lirc_it87.h:19:
+/*
+#define IT87_ADRPORT      0x4e

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 57 warnings, 61 checks, 1135 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
