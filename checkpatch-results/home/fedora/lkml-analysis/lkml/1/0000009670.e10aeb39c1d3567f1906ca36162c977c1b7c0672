WARNING:TYPO_SPELLING: 'necessery' may be misspelled - perhaps 'necessary'?
#34: 
Let's divide vmtruncate in two parts. One which perform necessery
                                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'necessery' may be misspelled - perhaps 'necessary'?
#36: 
caller is responsible for necessery checks before calling
                          ^^^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/attr.c:108:
+void __inode_setattr(struct inode * inode, struct iattr * attr)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#56: FILE: fs/attr.c:108:
+void __inode_setattr(struct inode * inode, struct iattr * attr)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#75: FILE: fs/attr.c:138:
 
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/attr.c:141:
+int inode_setattr(struct inode * inode, struct iattr * attr)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#78: FILE: fs/attr.c:141:
+int inode_setattr(struct inode * inode, struct iattr * attr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#81: FILE: fs/attr.c:144:
+	int error;
+	if (attr->ia_valid & ATTR_SIZE &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#82: FILE: fs/attr.c:145:
+	if (attr->ia_valid & ATTR_SIZE &&
+		attr->ia_size != i_size_read(inode)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/fs.h:2376:
+extern void __inode_setattr(struct inode *, struct iattr *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#99: FILE: include/linux/fs.h:2376:
+extern void __inode_setattr(struct inode *, struct iattr *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iattr *' should also have an identifier name
#99: FILE: include/linux/fs.h:2376:
+extern void __inode_setattr(struct inode *, struct iattr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/mm.h:811:
+extern void __vmtruncate(struct inode *inode, loff_t offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#159: FILE: mm/truncate.c:574:
+	int error = inode_newsize_ok(inode, offset);
+	if (error)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009670.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 6 warnings, 4 checks, 96 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000009670.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
