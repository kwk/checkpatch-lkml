WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#50: FILE: drivers/isdn/hardware/mISDN/Kconfig:75:
+config MISDN_NETJET
+	tristate "Support for NETJet cards"
+	depends on MISDN
+	depends on PCI
+	select MISDN_IPAC
+	select ISDN_HDLC
+	help
+	  Enable support for Traverse Technologies NETJet PCI cards.
+
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/isdn/hardware/mISDN/netjet.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#97: FILE: drivers/isdn/hardware/mISDN/netjet.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#98: FILE: drivers/isdn/hardware/mISDN/netjet.c:19:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:CAMELCASE: Avoid CamelCase: <Cards>
#177: FILE: drivers/isdn/hardware/mISDN/netjet.c:98:
+static LIST_HEAD(Cards);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#209: FILE: drivers/isdn/hardware/mISDN/netjet.c:130:
+module_param_call(debug, set_debug, param_get_uint, &debug, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#219: FILE: drivers/isdn/hardware/mISDN/netjet.c:140:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <ReadISAC_nj>
#221: FILE: drivers/isdn/hardware/mISDN/netjet.c:142:
+ReadISAC_nj(void *p, u8 offset)

CHECK:CAMELCASE: Avoid CamelCase: <WriteISAC_nj>
#234: FILE: drivers/isdn/hardware/mISDN/netjet.c:155:
+WriteISAC_nj(void *p, u8 offset, u8 value)

CHECK:CAMELCASE: Avoid CamelCase: <ReadFiFoISAC_nj>
#245: FILE: drivers/isdn/hardware/mISDN/netjet.c:166:
+ReadFiFoISAC_nj(void *p, u8 offset, u8 *data, int size)

CHECK:CAMELCASE: Avoid CamelCase: <WriteFiFoISAC_nj>
#255: FILE: drivers/isdn/hardware/mISDN/netjet.c:176:
+WriteFiFoISAC_nj(void *p, u8 offset, u8 *data, int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/isdn/hardware/mISDN/netjet.c:192:
+	pr_debug("%s: B%1d fill %02x len %d idx %d/%d\n", card->name,
+		bc->bch.nr, fill, cnt, idx, card->send.idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: drivers/isdn/hardware/mISDN/netjet.c:214:
+	pr_debug("%s: B%1d protocol %x-->%x\n", card->name,
+		bc->bch.nr, bc->bch.state, protocol);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'card->bc[0].bch.state == ISDN_P_NONE'
#301: FILE: drivers/isdn/hardware/mISDN/netjet.c:222:
+		if ((card->bc[0].bch.state == ISDN_P_NONE) &&
+		    (card->bc[1].bch.state == ISDN_P_NONE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'card->bc[1].bch.state == ISDN_P_NONE'
#301: FILE: drivers/isdn/hardware/mISDN/netjet.c:222:
+		if ((card->bc[0].bch.state == ISDN_P_NONE) &&
+		    (card->bc[1].bch.state == ISDN_P_NONE)) {

CHECK:CAMELCASE: Avoid CamelCase: <Flags>
#307: FILE: drivers/isdn/hardware/mISDN/netjet.c:228:
+		test_and_clear_bit(FLG_HDLC, &bc->bch.Flags);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#317: FILE: drivers/isdn/hardware/mISDN/netjet.c:238:
+		bc->free = card->send.size/2;
 		                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#331: FILE: drivers/isdn/hardware/mISDN/netjet.c:252:
+		bc->free = card->send.size/2;
 		                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/isdn/hardware/mISDN/netjet.c:274:
+	pr_debug("%s: %s ctrl %x irq  %02x/%02x idx %d/%d\n",
+		card->name, __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: drivers/isdn/hardware/mISDN/netjet.c:312:
+	card->dma_p = pci_alloc_consistent(card->pdev, NJ_DMA_SIZE,
+			&card->dma);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#403: FILE: drivers/isdn/hardware/mISDN/netjet.c:324:
+		if (!card->bc[i].hsbuf) {
+			pr_info("%s: no B%d send buffer\n", card->name, i + 1);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#408: FILE: drivers/isdn/hardware/mISDN/netjet.c:329:
+		if (!card->bc[i].hrbuf) {
+			pr_info("%s: no B%d recv buffer\n", card->name, i + 1);

WARNING:SPLIT_STRING: quoted string split across lines
#424: FILE: drivers/isdn/hardware/mISDN/netjet.c:345:
+		pr_notice("%s: send buffer phy %#x - %#x - %#x  virt %p"
+			" size %zu u32\n", card->name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#442: FILE: drivers/isdn/hardware/mISDN/netjet.c:363:
+		pr_notice("%s: recv buffer phy %#x - %#x - %#x  virt %p"
+			" size %zu u32\n", card->name,

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#469: FILE: drivers/isdn/hardware/mISDN/netjet.c:390:
+		if (!bc->bch.rx_skb) {
+			pr_info("%s: B%1d receive out of memory\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#475: FILE: drivers/isdn/hardware/mISDN/netjet.c:396:
+	if (test_bit(FLG_TRANSPARENT, &bc->bch.Flags)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: drivers/isdn/hardware/mISDN/netjet.c:399:
+			pr_debug("%s: B%1d overrun %d\n", card->name,
+				bc->bch.nr, bc->bch.rx_skb->len + cnt);

CHECK:BRACES: Unbalanced braces around else statement
#483: FILE: drivers/isdn/hardware/mISDN/netjet.c:404:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#496: FILE: drivers/isdn/hardware/mISDN/netjet.c:417:
+	if (test_bit(FLG_HDLC, &bc->bch.Flags)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#498: FILE: drivers/isdn/hardware/mISDN/netjet.c:419:
+		stat = isdnhdlc_decode(&bc->hrecv, pn, cnt, &i,
+			bc->bch.rx_skb->data, bc->bch.maxlen);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: drivers/isdn/hardware/mISDN/netjet.c:420:
+^I^Iif (stat > 0) /* valid frame received */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#510: FILE: drivers/isdn/hardware/mISDN/netjet.c:431:
+	} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: drivers/isdn/hardware/mISDN/netjet.c:432:
+^I^Istat = cnt;^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: drivers/isdn/hardware/mISDN/netjet.c:437:
+			snprintf(card->log, LOG_SIZE, "B%1d-recv %s %d ",
+				bc->bch.nr, card->name, stat);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: drivers/isdn/hardware/mISDN/netjet.c:439:
+			print_hex_dump_bytes(card->log, DUMP_PREFIX_OFFSET,
+				p, stat);

CHECK:CAMELCASE: Avoid CamelCase: <recv_Bchannel>
#520: FILE: drivers/isdn/hardware/mISDN/netjet.c:441:
+		recv_Bchannel(&bc->bch, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: drivers/isdn/hardware/mISDN/netjet.c:448:
+			bc->bch.rx_skb = mI_alloc_skb(bc->bch.maxlen,
+				GFP_ATOMIC);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#529: FILE: drivers/isdn/hardware/mISDN/netjet.c:450:
+			if (!bc->bch.rx_skb) {
+				pr_info("%s: B%1d receive out of memory\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#578: FILE: drivers/isdn/hardware/mISDN/netjet.c:499:
+	pr_debug("%s: %s B%1d free %d idx %d/%d\n", card->name,
+		__func__, bc->bch.nr, bc->free, bc->idx, card->send.idx);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/isdn/hardware/mISDN/netjet.c:515:
+	pr_debug("%s: %s B%1d %d state %x idx %d/%d\n", card->name,
+		__func__, bc->bch.nr, bc->free, bc->txstate,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/isdn/hardware/mISDN/netjet.c:520:
+	count = isdnhdlc_encode(&bc->hsend, NULL, 0, &i,
+			bc->hsbuf, bc->free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: drivers/isdn/hardware/mISDN/netjet.c:522:
+	pr_debug("%s: B%1d hdlc encoded %d flags\n", card->name,
+			bc->bch.nr, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#615: FILE: drivers/isdn/hardware/mISDN/netjet.c:536:
+		snprintf(card->log, LOG_SIZE, "B%1d-send %s %d ",
+			bc->bch.nr, card->name, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: drivers/isdn/hardware/mISDN/netjet.c:555:
+	pr_debug("%s: %s B%1d %d/%d/%d/%d state %x idx %d/%d\n", card->name,
+		__func__, bc->bch.nr, count, bc->free, bc->bch.tx_idx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: drivers/isdn/hardware/mISDN/netjet.c:562:
+		count = isdnhdlc_encode(&bc->hsend, p, count, &i,
+			bc->hsbuf, bc->free);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: drivers/isdn/hardware/mISDN/netjet.c:564:
+		pr_debug("%s: B%1d hdlc encoded %d in %d\n", card->name,
+			bc->bch.nr, i, count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: drivers/isdn/hardware/mISDN/netjet.c:585:
+		snprintf(card->log, LOG_SIZE, "B%1d-send %s %d ",
+			bc->bch.nr, card->name, count);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: drivers/isdn/hardware/mISDN/netjet.c:592:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#675: FILE: drivers/isdn/hardware/mISDN/netjet.c:596:
+	if (bc->bch.tx_skb && bc->bch.tx_idx < bc->bch.tx_skb->len)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#677: FILE: drivers/isdn/hardware/mISDN/netjet.c:598:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <confirm_Bsend>
#681: FILE: drivers/isdn/hardware/mISDN/netjet.c:602:
+				confirm_Bsend(&bc->bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: drivers/isdn/hardware/mISDN/netjet.c:634:
+		pr_debug("%s: B%1d TX no data free %d idx %d/%d\n", card->name,
+			bc->bch.nr, bc->free, bc->idx, card->send.idx);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#732: FILE: drivers/isdn/hardware/mISDN/netjet.c:653:
+		return;
+	} else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's0val == 0'
#751: FILE: drivers/isdn/hardware/mISDN/netjet.c:672:
+	if ((s1val & NJ_ISACIRQ) && (s0val == 0)) {

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_irq>
#761: FILE: drivers/isdn/hardware/mISDN/netjet.c:682:
+			mISDNisac_irq(&card->isac, val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: drivers/isdn/hardware/mISDN/netjet.c:707:
+	pr_debug("%s: DMA Status %02x/%02x/%02x %d/%d\n", card->name,
+		s1val, s0val, card->last_is0,

CHECK:CAMELCASE: Avoid CamelCase: <mISDNchannel>
#805: FILE: drivers/isdn/hardware/mISDN/netjet.c:726:
+nj_l2l1B(struct mISDNchannel *ch, struct sk_buff *skb)

CHECK:CAMELCASE: Avoid CamelCase: <mISDNhead>
#811: FILE: drivers/isdn/hardware/mISDN/netjet.c:732:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_HEAD_P>
#811: FILE: drivers/isdn/hardware/mISDN/netjet.c:732:
+	struct mISDNhead *hh = mISDN_HEAD_P(skb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#819: FILE: drivers/isdn/hardware/mISDN/netjet.c:740:
+		if (ret > 0) { /* direct TX */
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#826: FILE: drivers/isdn/hardware/mISDN/netjet.c:747:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#838: FILE: drivers/isdn/hardware/mISDN/netjet.c:759:
+			_queue_data(ch, PH_ACTIVATE_IND, MISDN_ID_ANY, 0,
+				NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_clear_bchannel>
#842: FILE: drivers/isdn/hardware/mISDN/netjet.c:763:
+		mISDN_clear_bchannel(bch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: drivers/isdn/hardware/mISDN/netjet.c:767:
+		_queue_data(ch, PH_DEACTIVATE_IND, MISDN_ID_ANY, 0,
+			NULL, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_ctrl_req>
#856: FILE: drivers/isdn/hardware/mISDN/netjet.c:777:
+channel_bctrl(struct tiger_ch *bc, struct mISDN_ctrl_req *cq)

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_freebchannel>
#890: FILE: drivers/isdn/hardware/mISDN/netjet.c:811:
+			mISDN_freebchannel(bch);

CHECK:CAMELCASE: Avoid CamelCase: <mISDNdevice>
#959: FILE: drivers/isdn/hardware/mISDN/netjet.c:880:
+	struct mISDNdevice	*dev = container_of(ch, struct mISDNdevice, D);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: drivers/isdn/hardware/mISDN/netjet.c:901:
+		pr_debug("%s: dev(%d) close from %p\n", card->name, dch->dev.id,
+			__builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#988: FILE: drivers/isdn/hardware/mISDN/netjet.c:909:
+		pr_debug("%s: %s unknown command %x\n",
+			card->name, __func__, cmd);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1027: FILE: drivers/isdn/hardware/mISDN/netjet.c:948:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_unregister_device>
#1047: FILE: drivers/isdn/hardware/mISDN/netjet.c:968:
+		mISDN_unregister_device(&card->isac.dch.dev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1048: FILE: drivers/isdn/hardware/mISDN/netjet.c:969:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1056: FILE: drivers/isdn/hardware/mISDN/netjet.c:977:
+		pci_free_consistent(card->pdev, NJ_DMA_SIZE,
+			card->dma_p, card->dma);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1066: FILE: drivers/isdn/hardware/mISDN/netjet.c:987:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1083: FILE: drivers/isdn/hardware/mISDN/netjet.c:1004:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1084: FILE: drivers/isdn/hardware/mISDN/netjet.c:1005:
+static int __devinit

CHECK:CAMELCASE: Avoid CamelCase: <mISDNisac_init>
#1099: FILE: drivers/isdn/hardware/mISDN/netjet.c:1020:
+	mISDNisac_init(&card->isac, card);

CHECK:CAMELCASE: Avoid CamelCase: <Bprotocols>
#1101: FILE: drivers/isdn/hardware/mISDN/netjet.c:1022:
+	card->isac.dch.dev.Bprotocols = (1 << (ISDN_P_B_RAW & ISDN_P_B_MASK)) |

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_initbchannel>
#1107: FILE: drivers/isdn/hardware/mISDN/netjet.c:1028:
+		mISDN_initbchannel(&card->bc[i].bch, MAX_DATA_MEM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: drivers/isdn/hardware/mISDN/netjet.c:1034:
+		list_add(&card->bc[i].bch.ch.list,
+			&card->isac.dch.dev.bchannels);

CHECK:CAMELCASE: Avoid CamelCase: <mISDN_register_device>
#1119: FILE: drivers/isdn/hardware/mISDN/netjet.c:1040:
+	err = mISDN_register_device(&card->isac.dch.dev, &card->pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: drivers/isdn/hardware/mISDN/netjet.c:1041:
+	err = mISDN_register_device(&card->isac.dch.dev, &card->pdev->dev,
+		card->name);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1134: FILE: drivers/isdn/hardware/mISDN/netjet.c:1055:
+static int __devinit

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*card)...) over kzalloc(sizeof(struct tiger_hw)...)
#1153: FILE: drivers/isdn/hardware/mISDN/netjet.c:1074:
+	card = kzalloc(sizeof(struct tiger_hw), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1155: FILE: drivers/isdn/hardware/mISDN/netjet.c:1076:
+	if (!card) {
+		pr_info("No kmem for Netjet\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1167: FILE: drivers/isdn/hardware/mISDN/netjet.c:1088:
+	printk(KERN_INFO "nj_probe(mISDN): found adapter at %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nj_probe', this function's name, in a string
#1167: FILE: drivers/isdn/hardware/mISDN/netjet.c:1088:
+	printk(KERN_INFO "nj_probe(mISDN): found adapter at %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1168: FILE: drivers/isdn/hardware/mISDN/netjet.c:1089:
+	printk(KERN_INFO "nj_probe(mISDN): found adapter at %s\n",
+		pci_name(pdev));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1192: FILE: drivers/isdn/hardware/mISDN/netjet.c:1113:
+
+

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1193: FILE: drivers/isdn/hardware/mISDN/netjet.c:1114:
+static void __devexit nj_remove(struct pci_dev *pdev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1205: FILE: drivers/isdn/hardware/mISDN/netjet.c:1126:
+ * known other cards which not work with this driver - see probe function */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1206: FILE: drivers/isdn/hardware/mISDN/netjet.c:1127:
+static struct pci_device_id nj_pci_ids[] __devinitdata = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1242: FILE: drivers/isdn/hardware/mISDN/netjet.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1261: FILE: drivers/isdn/hardware/mISDN/netjet.h:20:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1262: FILE: drivers/isdn/hardware/mISDN/netjet.h:21:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092586.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 20 warnings, 69 checks, 1236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092586.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
