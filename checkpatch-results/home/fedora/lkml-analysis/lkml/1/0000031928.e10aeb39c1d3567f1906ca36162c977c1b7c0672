WARNING:TYPO_SPELLING: 'determinated' may be misspelled - perhaps 'determined'?
#61: 
the size of the fifo can be determinated with sizeof. This kind of fifo
                            ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
#include "kfifo.h"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#83: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#88: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#90: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#98: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#103: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#105: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#139: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#147: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#151: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#162: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#167: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#169: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#197: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#199: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#202: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#204: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#206: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#216: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#221: 
#endif

WARNING:NEW_TYPEDEFS: do not add new typedefs
#323: FILE: include/linux/kfifo.h:52:
+typedef	unsigned int	__KFIFO_STREAM[0];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#324: FILE: include/linux/kfifo.h:53:
+typedef	unsigned char	__KFIFO_REC_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#325: FILE: include/linux/kfifo.h:54:
+typedef	unsigned short	__KFIFO_REC_2;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptrtype' - possible side-effects?
#327: FILE: include/linux/kfifo.h:56:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptrtype' may be better as '(ptrtype)' to avoid precedence issues
#327: FILE: include/linux/kfifo.h:56:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#327: FILE: include/linux/kfifo.h:56:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#334: FILE: include/linux/kfifo.h:63:
+		ptrtype *	ptr; \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#335: FILE: include/linux/kfifo.h:64:
+		const ptrtype *	ptr_const; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#338: FILE: include/linux/kfifo.h:67:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#338: FILE: include/linux/kfifo.h:67:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#351: FILE: include/linux/kfifo.h:80:
+	type *		data; \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#361: FILE: include/linux/kfifo.h:89:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_STREAM' should also have an identifier name
#361: FILE: include/linux/kfifo.h:89:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#361: FILE: include/linux/kfifo.h:89:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#402: FILE: include/linux/kfifo.h:100:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_1' should also have an identifier name
#402: FILE: include/linux/kfifo.h:100:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#402: FILE: include/linux/kfifo.h:100:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#403: FILE: include/linux/kfifo.h:101:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_2' should also have an identifier name
#403: FILE: include/linux/kfifo.h:101:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#403: FILE: include/linux/kfifo.h:101:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#422: FILE: include/linux/kfifo.h:109:
+#define DECLARE_KFIFO_PTR(fifo, type) \
+	STRUCT_KFIFO_PTR(type) fifo

CHECK:SPACING: No space is necessary after a cast
#423: FILE: include/linux/kfifo.h:110:
+	STRUCT_KFIFO_PTR(type) fifo

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#440: FILE: include/linux/kfifo.h:117:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			} \
+		} \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fifo' may be better as '(fifo)' to avoid precedence issues
#450: FILE: include/linux/kfifo.h:127:
+#define	__is_kfifo_ptr(fifo) \
+	(offsetof(typeof(*fifo), data) == offsetof(struct kfifo, data))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#463: FILE: include/linux/kfifo.h:134:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#463: FILE: include/linux/kfifo.h:134:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#479: FILE: include/linux/kfifo.h:143:
+#define DECLARE_KFIFO(fifo, type, size) \
+	STRUCT_KFIFO(type, size) fifo

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#493: FILE: include/linux/kfifo.h:154:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#493: FILE: include/linux/kfifo.h:154:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

ERROR:CODE_INDENT: code indent should use tabs where possible
#540: FILE: include/linux/kfifo.h:181:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#540: FILE: include/linux/kfifo.h:181:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: include/linux/kfifo.h:181:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: include/linux/kfifo.h:182:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#541: FILE: include/linux/kfifo.h:182:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: include/linux/kfifo.h:182:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(__tmps->data)
#541: FILE: include/linux/kfifo.h:182:
+ 			sizeof(__tmps->data) / sizeof(__tmps->data[0]); \

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#553: FILE: include/linux/kfifo.h:189:
+#define kfifo_reset(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->in = __tmp->out = 0; \
+})

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#556: FILE: include/linux/kfifo.h:192:
+	__tmp->in = __tmp->out = 0; \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#585: FILE: include/linux/kfifo.h:199:
+#define kfifo_reset_out(fifo)	\
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->out = __tmp->in; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: include/linux/kfifo.h:249:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#691: FILE: include/linux/kfifo.h:249:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: include/linux/kfifo.h:249:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#717: FILE: include/linux/kfifo.h:257:
+#define	kfifo_skip(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_skip_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, __recsize); \
+	else \
+		__tmp->out++; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#757: FILE: include/linux/kfifo.h:280:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#757: FILE: include/linux/kfifo.h:280:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: include/linux/kfifo.h:280:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#773: FILE: include/linux/kfifo.h:294:
+ * The numer of elements will be rounded-up to a power of 2.
        ^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#791: FILE: include/linux/kfifo.h:302:
+ ^Iif (0) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#791: FILE: include/linux/kfifo.h:302:
+ ^Iif (0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#791: FILE: include/linux/kfifo.h:302:
+ ^Iif (0) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#820: FILE: include/linux/kfifo.h:323:
+ ^Iif (0) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#820: FILE: include/linux/kfifo.h:323:
+ ^Iif (0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#820: FILE: include/linux/kfifo.h:323:
+ ^Iif (0) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#857: FILE: include/linux/kfifo.h:344:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#857: FILE: include/linux/kfifo.h:344:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: include/linux/kfifo.h:344:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#859: FILE: include/linux/kfifo.h:346:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#860: FILE: include/linux/kfifo.h:347:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#860: FILE: include/linux/kfifo.h:347:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#860: FILE: include/linux/kfifo.h:347:
+ ^I^I__dummy = (typeof(__val))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#866: FILE: include/linux/kfifo.h:353:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#866: FILE: include/linux/kfifo.h:353:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: include/linux/kfifo.h:353:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: include/linux/kfifo.h:354:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#867: FILE: include/linux/kfifo.h:354:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#867: FILE: include/linux/kfifo.h:354:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#868: FILE: include/linux/kfifo.h:355:
+ ^I^I^I__ret = 0; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#868: FILE: include/linux/kfifo.h:355:
+ ^I^I^I__ret = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: include/linux/kfifo.h:355:
+ ^I^I^I__ret = 0; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#869: FILE: include/linux/kfifo.h:356:
+ ^I^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#869: FILE: include/linux/kfifo.h:356:
+ ^I^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#869: FILE: include/linux/kfifo.h:356:
+ ^I^Ielse { \$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#871: FILE: include/linux/kfifo.h:358:
+				*(typeof(&__tmp->data[0]))__val; \
 				         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#872: FILE: include/linux/kfifo.h:359:
+			smp_wmb(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#875: FILE: include/linux/kfifo.h:362:
+ ^I^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#875: FILE: include/linux/kfifo.h:362:
+ ^I^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: include/linux/kfifo.h:362:
+ ^I^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#876: FILE: include/linux/kfifo.h:363:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#876: FILE: include/linux/kfifo.h:363:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#876: FILE: include/linux/kfifo.h:363:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#925: FILE: include/linux/kfifo.h:383:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#925: FILE: include/linux/kfifo.h:383:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#925: FILE: include/linux/kfifo.h:383:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#927: FILE: include/linux/kfifo.h:385:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: include/linux/kfifo.h:386:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#928: FILE: include/linux/kfifo.h:386:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: include/linux/kfifo.h:386:
+ ^I^I__dummy = (typeof(__val))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: include/linux/kfifo.h:392:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#934: FILE: include/linux/kfifo.h:392:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: include/linux/kfifo.h:392:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#935: FILE: include/linux/kfifo.h:393:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#935: FILE: include/linux/kfifo.h:393:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#935: FILE: include/linux/kfifo.h:393:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#936: FILE: include/linux/kfifo.h:394:
+ ^I^I^I__ret = 0; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#936: FILE: include/linux/kfifo.h:394:
+ ^I^I^I__ret = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#936: FILE: include/linux/kfifo.h:394:
+ ^I^I^I__ret = 0; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#937: FILE: include/linux/kfifo.h:395:
+ ^I^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#937: FILE: include/linux/kfifo.h:395:
+ ^I^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: include/linux/kfifo.h:395:
+ ^I^Ielse { \$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#938: FILE: include/linux/kfifo.h:396:
+			*(typeof(&__tmp->data[0]))__val = \
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#939: FILE: include/linux/kfifo.h:397:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#939: FILE: include/linux/kfifo.h:397:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#939: FILE: include/linux/kfifo.h:397:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:MEMORY_BARRIER: memory barrier without comment
#940: FILE: include/linux/kfifo.h:398:
+			smp_wmb(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#943: FILE: include/linux/kfifo.h:401:
+ ^I^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: include/linux/kfifo.h:401:
+ ^I^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: include/linux/kfifo.h:401:
+ ^I^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: include/linux/kfifo.h:402:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#944: FILE: include/linux/kfifo.h:402:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: include/linux/kfifo.h:402:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#987: FILE: include/linux/kfifo.h:426:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#987: FILE: include/linux/kfifo.h:426:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: include/linux/kfifo.h:426:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#989: FILE: include/linux/kfifo.h:428:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: include/linux/kfifo.h:429:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#990: FILE: include/linux/kfifo.h:429:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: include/linux/kfifo.h:429:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: include/linux/kfifo.h:434:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#995: FILE: include/linux/kfifo.h:434:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: include/linux/kfifo.h:434:
+ ^Ielse { \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1038: FILE: include/linux/kfifo.h:455:
+#define	kfifo_in_locked(fifo, buf, n, lock) \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_in(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1086: FILE: include/linux/kfifo.h:486:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1086: FILE: include/linux/kfifo.h:486:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1086: FILE: include/linux/kfifo.h:486:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1088: FILE: include/linux/kfifo.h:488:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1089: FILE: include/linux/kfifo.h:489:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1089: FILE: include/linux/kfifo.h:489:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: include/linux/kfifo.h:489:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1095: FILE: include/linux/kfifo.h:495:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1095: FILE: include/linux/kfifo.h:495:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: include/linux/kfifo.h:495:
+ ^Ielse { \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1149: FILE: include/linux/kfifo.h:519:
+#define	kfifo_out_locked(fifo, buf, n, lock) \
+__kfifo_check( \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_out(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+}) \
+)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1197: FILE: include/linux/kfifo.h:548:
+ ^Iconst void __user * __from = (from); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1197: FILE: include/linux/kfifo.h:548:
+ ^Iconst void __user * __from = (from); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1197: FILE: include/linux/kfifo.h:548:
+ ^Iconst void __user * __from = (from); \$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1197: FILE: include/linux/kfifo.h:548:
+ 	const void __user * __from = (from); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1202: FILE: include/linux/kfifo.h:553:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1202: FILE: include/linux/kfifo.h:553:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1202: FILE: include/linux/kfifo.h:553:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: include/linux/kfifo.h:557:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: include/linux/kfifo.h:557:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1206: FILE: include/linux/kfifo.h:557:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1213: FILE: include/linux/kfifo.h:564:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1213: FILE: include/linux/kfifo.h:564:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: include/linux/kfifo.h:564:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1238: FILE: include/linux/kfifo.h:585:
+ ^Ivoid __user * __to = (to); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1238: FILE: include/linux/kfifo.h:585:
+ ^Ivoid __user * __to = (to); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1238: FILE: include/linux/kfifo.h:585:
+ ^Ivoid __user * __to = (to); \$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1238: FILE: include/linux/kfifo.h:585:
+ 	void __user * __to = (to); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1243: FILE: include/linux/kfifo.h:590:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1243: FILE: include/linux/kfifo.h:590:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1243: FILE: include/linux/kfifo.h:590:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1247: FILE: include/linux/kfifo.h:594:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1247: FILE: include/linux/kfifo.h:594:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: include/linux/kfifo.h:594:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1254: FILE: include/linux/kfifo.h:601:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1254: FILE: include/linux/kfifo.h:601:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1254: FILE: include/linux/kfifo.h:601:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1276: FILE: include/linux/kfifo.h:623:
+ ^Iint __nents = (nents); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1276: FILE: include/linux/kfifo.h:623:
+ ^Iint __nents = (nents); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1276: FILE: include/linux/kfifo.h:623:
+ ^Iint __nents = (nents); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1277: FILE: include/linux/kfifo.h:624:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1277: FILE: include/linux/kfifo.h:624:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: include/linux/kfifo.h:624:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1280: FILE: include/linux/kfifo.h:627:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1280: FILE: include/linux/kfifo.h:627:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1280: FILE: include/linux/kfifo.h:627:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1285: FILE: include/linux/kfifo.h:632:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1285: FILE: include/linux/kfifo.h:632:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1285: FILE: include/linux/kfifo.h:632:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1294: FILE: include/linux/kfifo.h:641:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1294: FILE: include/linux/kfifo.h:641:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1294: FILE: include/linux/kfifo.h:641:
+ ^I} \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1320: FILE: include/linux/kfifo.h:655:
+#define kfifo_dma_in_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+ 	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_in_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->in += __len / sizeof(__tmp->data[0]); \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1323: FILE: include/linux/kfifo.h:658:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1323: FILE: include/linux/kfifo.h:658:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1323: FILE: include/linux/kfifo.h:658:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1350: FILE: include/linux/kfifo.h:685:
+ ^Iint __nents = (nents); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1350: FILE: include/linux/kfifo.h:685:
+ ^Iint __nents = (nents); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1350: FILE: include/linux/kfifo.h:685:
+ ^Iint __nents = (nents); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1351: FILE: include/linux/kfifo.h:686:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1351: FILE: include/linux/kfifo.h:686:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1351: FILE: include/linux/kfifo.h:686:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1354: FILE: include/linux/kfifo.h:689:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1354: FILE: include/linux/kfifo.h:689:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1354: FILE: include/linux/kfifo.h:689:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1359: FILE: include/linux/kfifo.h:694:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1359: FILE: include/linux/kfifo.h:694:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1359: FILE: include/linux/kfifo.h:694:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: include/linux/kfifo.h:703:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1368: FILE: include/linux/kfifo.h:703:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: include/linux/kfifo.h:703:
+ ^I} \$

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#1376: FILE: include/linux/kfifo.h:709:
+ * @len: number of bytes transferd.
                          ^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1385: FILE: include/linux/kfifo.h:717:
+#define kfifo_dma_out_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+ 	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_out_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->out += __len / sizeof(__tmp->data[0]); \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: include/linux/kfifo.h:720:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1388: FILE: include/linux/kfifo.h:720:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1388: FILE: include/linux/kfifo.h:720:
+ ^Iunsigned int __len = (len); \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1401: FILE: include/linux/kfifo.h:729:
+extern int __kfifo_alloc(void *fifo, unsigned int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: include/linux/kfifo.h:730:
+extern int __kfifo_alloc(void *fifo, unsigned int size,
+	size_t esize, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1414: FILE: include/linux/kfifo.h:733:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1415: FILE: include/linux/kfifo.h:734:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,
+	size_t esize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1432: FILE: include/linux/kfifo.h:736:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1433: FILE: include/linux/kfifo.h:737:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, const void *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1445: FILE: include/linux/kfifo.h:740:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1446: FILE: include/linux/kfifo.h:741:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1450: FILE: include/linux/kfifo.h:743:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1451: FILE: include/linux/kfifo.h:744:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1454: FILE: include/linux/kfifo.h:747:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1455: FILE: include/linux/kfifo.h:748:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1456: FILE: include/linux/kfifo.h:749:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, void *buf, unsigned int len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1458: FILE: include/linux/kfifo.h:751:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: include/linux/kfifo.h:751:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1459: FILE: include/linux/kfifo.h:752:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1461: FILE: include/linux/kfifo.h:754:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1461: FILE: include/linux/kfifo.h:754:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: include/linux/kfifo.h:755:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1464: FILE: include/linux/kfifo.h:757:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1465: FILE: include/linux/kfifo.h:758:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1466: FILE: include/linux/kfifo.h:759:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size,  size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: include/linux/kfifo.h:762:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: include/linux/kfifo.h:763:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/linux/kfifo.h:766:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1474: FILE: include/linux/kfifo.h:767:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1477: FILE: include/linux/kfifo.h:770:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1478: FILE: include/linux/kfifo.h:771:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1479: FILE: include/linux/kfifo.h:772:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: include/linux/kfifo.h:775:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1483: FILE: include/linux/kfifo.h:776:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1486: FILE: include/linux/kfifo.h:779:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1487: FILE: include/linux/kfifo.h:780:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1490: FILE: include/linux/kfifo.h:783:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1491: FILE: include/linux/kfifo.h:784:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: include/linux/kfifo.h:785:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1495: FILE: include/linux/kfifo.h:788:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1496: FILE: include/linux/kfifo.h:789:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1499: FILE: include/linux/kfifo.h:792:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1500: FILE: include/linux/kfifo.h:793:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1503: FILE: include/linux/kfifo.h:796:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1504: FILE: include/linux/kfifo.h:797:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: include/linux/kfifo.h:798:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1507: FILE: include/linux/kfifo.h:800:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1508: FILE: include/linux/kfifo.h:801:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1509: FILE: include/linux/kfifo.h:802:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1512: FILE: include/linux/kfifo.h:805:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1513: FILE: include/linux/kfifo.h:806:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1516: FILE: include/linux/kfifo.h:809:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1517: FILE: include/linux/kfifo.h:810:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1520: FILE: include/linux/kfifo.h:813:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1521: FILE: include/linux/kfifo.h:814:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1522: FILE: include/linux/kfifo.h:815:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1524: FILE: include/linux/kfifo.h:817:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1525: FILE: include/linux/kfifo.h:818:
+extern unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1526: FILE: include/linux/kfifo.h:819:
+extern unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#1567: FILE: kernel/kfifo.c:34:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#1567: FILE: kernel/kfifo.c:34:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1578: FILE: kernel/kfifo.c:37:
+int __kfifo_alloc(void *fifo, unsigned int size,
+		size_t esize, gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1610: FILE: kernel/kfifo.c:49:
+	BUG_ON(size <= 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1612: FILE: kernel/kfifo.c:51:
+	proxy->in = proxy->out = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1656: FILE: kernel/kfifo.c:70:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1661: FILE: kernel/kfifo.c:75:
+	proxy->in = proxy->out = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1670: FILE: kernel/kfifo.c:81:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, const void *buf,

WARNING:MEMORY_BARRIER: memory barrier without comment
#1700: FILE: kernel/kfifo.c:100:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1709: FILE: kernel/kfifo.c:107:
+unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1738: FILE: kernel/kfifo.c:125:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1747: FILE: kernel/kfifo.c:132:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size,  size_t esize,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1771: FILE: kernel/kfifo.c:150:
+	if (unlikely(ret))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1773: FILE: kernel/kfifo.c:152:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1784: FILE: kernel/kfifo.c:159:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1791: FILE: kernel/kfifo.c:166:
+unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize, void __user *to,

CHECK:BRACES: Unbalanced braces around else statement
#1812: FILE: kernel/kfifo.c:186:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1821: FILE: kernel/kfifo.c:193:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1828: FILE: kernel/kfifo.c:200:
+static unsigned int setup_sgl(void *data, unsigned int size,
+	struct scatterlist *sgl, int nents, unsigned int len, unsigned int off)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1834: FILE: kernel/kfifo.c:206:
+		if (nents > 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1840: FILE: kernel/kfifo.c:212:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1852: FILE: kernel/kfifo.c:222:
+unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1865: FILE: kernel/kfifo.c:229:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1887: FILE: kernel/kfifo.c:244:
+unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1894: FILE: kernel/kfifo.c:251:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: kernel/kfifo.c:268:
+unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+		unsigned int size, const void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1937: FILE: kernel/kfifo.c:286:
+	smp_wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1959: FILE: kernel/kfifo.c:292:
+unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1960: FILE: kernel/kfifo.c:293:
+unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 
+		unsigned int size, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1981: FILE: kernel/kfifo.c:311:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1991: FILE: kernel/kfifo.c:318:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2014: FILE: kernel/kfifo.c:340:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2024: FILE: kernel/kfifo.c:347:
+unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, void __user *to,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2046: FILE: kernel/kfifo.c:364:
+^Iif (unlikely(ret)) $

WARNING:MEMORY_BARRIER: memory barrier without comment
#2050: FILE: kernel/kfifo.c:368:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2071: FILE: kernel/kfifo.c:375:
+unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2081: FILE: kernel/kfifo.c:382:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2101: FILE: kernel/kfifo.c:397:
+unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2109: FILE: kernel/kfifo.c:404:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2127: FILE: kernel/kfifo.c:419:
+	((data)[(out) & ((size) -1)])
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2133: FILE: kernel/kfifo.c:425:
+static unsigned int __kfifo_peek_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, size_t recsize)

WARNING:TYPO_SPELLING: 'storeing' may be misspelled - perhaps 'storing'?
#2165: FILE: kernel/kfifo.c:443:
+ * __kfifo_poke_n internal helper function for storeing the length of
                                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2171: FILE: kernel/kfifo.c:447:
+static void __kfifo_poke_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, unsigned int n, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2180: FILE: kernel/kfifo.c:456:
+unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2190: FILE: kernel/kfifo.c:463:
+unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2211: FILE: kernel/kfifo.c:484:
+	smp_wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2220: FILE: kernel/kfifo.c:490:
+unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2221: FILE: kernel/kfifo.c:491:
+unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2244: FILE: kernel/kfifo.c:513:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2255: FILE: kernel/kfifo.c:520:
+unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2288: FILE: kernel/kfifo.c:546:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2310: FILE: kernel/kfifo.c:553:
+unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2334: FILE: kernel/kfifo.c:574:
+^Iif (unlikely(ret)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2338: FILE: kernel/kfifo.c:578:
+^Iif (unlikely(ret)) $

WARNING:MEMORY_BARRIER: memory barrier without comment
#2341: FILE: kernel/kfifo.c:581:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2349: FILE: kernel/kfifo.c:588:
+unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2356: FILE: kernel/kfifo.c:595:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#2358: FILE: kernel/kfifo.c:597:
+	switch(recsize) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2382: FILE: kernel/kfifo.c:618:
+void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2392: FILE: kernel/kfifo.c:625:
+unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2402: FILE: kernel/kfifo.c:632:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#2404: FILE: kernel/kfifo.c:634:
+	switch(recsize) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2428: FILE: kernel/kfifo.c:656:
+void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 74 errors, 166 warnings, 102 checks, 2150 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031928.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
