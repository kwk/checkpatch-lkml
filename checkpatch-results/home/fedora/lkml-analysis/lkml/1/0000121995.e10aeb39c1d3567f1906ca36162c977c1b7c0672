CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: include/linux/kstate-image.h:334:
+#define KSTATE_FD_FLAGS_CLOEXEC		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#217: FILE: kernel/kstate/kstate-file.c:276:
+			pr_err("files_struct %p has external references %lu:%u\n", files, obj->o_count, cnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#224: FILE: kernel/kstate/kstate-file.c:283:
+static int dump_fd(struct kstate_context *ctx, struct files_struct *files, int fd, struct file *file)

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#281: FILE: kernel/kstate/kstate-file.c:340:
+	pr_debug("dump files_struct %p: ref {%llu, %u}, rv %d\n", files, (unsigned long long)obj->o_ref.pos, obj->o_ref.id, rv);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#374: FILE: kernel/kstate/kstate-file.c:433:
+	pr_debug("restore files_struct %p: ref {%llu, %u}, rv %d\n", files, (unsigned long long)ref->pos, ref->id,  rv);

CHECK:BRACES: braces {} should be used on all arms of this statement
#433: FILE: kernel/kstate/kstate-task.c:370:
+		if (hdr.obj_type == KSTATE_OBJ_FD) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#437: FILE: kernel/kstate/kstate-task.c:374:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#451: FILE: kernel/kstate/kstate-task.c:388:
+	if (!tmp) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#457: FILE: kernel/kstate/kstate-task.c:394:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000121995.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 5 checks, 384 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000121995.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
