WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#70: FILE: drivers/serial/Kconfig:1287:
+config SERIAL_SC26XX
+	tristate "SC2681/SC2692 serial port support"
+	depends on SNI_RM
+	select SERIAL_CORE
+	help
+	  This is a driver for the onboard serial ports of 
+	  older RM400 machines.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#75: FILE: drivers/serial/Kconfig:1292:
+^I  This is a driver for the onboard serial ports of $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: drivers/serial/Kconfig:1295:
+config SERIAL_SC26XX_CONSOLE
+	bool "Console on SC2681/SC2692 serial port"
+	depends on SERIAL_SC26XX
+	select SERIAL_CORE_CONSOLE
+	help
+	  Support for Console on SC2681/SC2692 serial ports.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#96: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: drivers/serial/sc26xx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#170: FILE: drivers/serial/sc26xx.c:70:
+#define SR_BREAK    (1 << 7)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#171: FILE: drivers/serial/sc26xx.c:71:
+#define SR_FRAME    (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#172: FILE: drivers/serial/sc26xx.c:72:
+#define SR_PARITY   (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#173: FILE: drivers/serial/sc26xx.c:73:
+#define SR_OVERRUN  (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#174: FILE: drivers/serial/sc26xx.c:74:
+#define SR_TXRDY    (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#175: FILE: drivers/serial/sc26xx.c:75:
+#define SR_RXRDY    (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#177: FILE: drivers/serial/sc26xx.c:77:
+#define CR_RES_MR   (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#182: FILE: drivers/serial/sc26xx.c:82:
+#define CR_DIS_TX   (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: drivers/serial/sc26xx.c:83:
+#define CR_ENA_TX   (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: drivers/serial/sc26xx.c:84:
+#define CR_DIS_RX   (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#185: FILE: drivers/serial/sc26xx.c:85:
+#define CR_ENA_RX   (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: drivers/serial/sc26xx.c:88:
+#define ISR_RXRDYB  (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: drivers/serial/sc26xx.c:89:
+#define ISR_TXRDYB  (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#190: FILE: drivers/serial/sc26xx.c:90:
+#define ISR_RXRDYA  (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#191: FILE: drivers/serial/sc26xx.c:91:
+#define ISR_TXRDYA  (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#194: FILE: drivers/serial/sc26xx.c:94:
+#define IMR_RXRDY   (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#195: FILE: drivers/serial/sc26xx.c:95:
+#define IMR_TXRDY   (1 << 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "port->info"
#243: FILE: drivers/serial/sc26xx.c:143:
+	if (port->info != NULL)		/* Unopened serial console */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#257: FILE: drivers/serial/sc26xx.c:157:
+			if (status & SR_BREAK) {
[...]
+			} else if (status & SR_PARITY)
[...]
+			else if (status & SR_FRAME)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#324: FILE: drivers/serial/sc26xx.c:224:
+	if (isr & ISR_TXRDYA)
+	    transmit_chars(&up->port[0]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#326: FILE: drivers/serial/sc26xx.c:226:
+	if (isr & ISR_RXRDYA)
+	    tty = receive_chars(&up->port[0]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#337: FILE: drivers/serial/sc26xx.c:237:
+	if (isr & ISR_TXRDYB)
+	    transmit_chars(&up->port[1]);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#339: FILE: drivers/serial/sc26xx.c:239:
+	if (isr & ISR_RXRDYB)
+	    tty = receive_chars(&up->port[1]);

WARNING:RETURN_VOID: void function return statements are not generally useful
#414: FILE: drivers/serial/sc26xx.c:314:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#481: FILE: drivers/serial/sc26xx.c:381:
+static void sc26xx_set_termios(struct uart_port *port, struct ktermios *termios,
+			      struct ktermios *old)

CHECK:BRACES: braces {} should be used on all arms of this statement
#530: FILE: drivers/serial/sc26xx.c:430:
+	if (cflag & PARENB) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#533: FILE: drivers/serial/sc26xx.c:433:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <MRx>
#574: FILE: drivers/serial/sc26xx.c:474:
+	WRITE_SC_PORT(port, MRx, mr1);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#613: FILE: drivers/serial/sc26xx.c:513:
+static int sc26xx_verify_port(struct uart_port *port, struct serial_struct *ser)
                                                                             ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#618: FILE: drivers/serial/sc26xx.c:518:
+static struct uart_ops sc26xx_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#658: FILE: drivers/serial/sc26xx.c:558:
+static void sc26xx_console_write(struct console *con, const char *s, unsigned n)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#681: FILE: drivers/serial/sc26xx.c:581:
+	printk(KERN_INFO "Console: ttySC%d (SC26XX)\n", con->index);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#698: FILE: drivers/serial/sc26xx.c:598:
+};
+#define SC26XX_CONSOLE   &sc26xx_console

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#698: FILE: drivers/serial/sc26xx.c:598:
+#define SC26XX_CONSOLE   &sc26xx_console

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#720: FILE: drivers/serial/sc26xx.c:620:
+static void __devinit sc26xx_init_masks(struct uart_sc26xx_port *up,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#731: FILE: drivers/serial/sc26xx.c:631:
+static int __devinit sc26xx_probe(struct platform_device *dev)

WARNING:SIZEOF_PARENTHESIS: sizeof *up should be sizeof(*up)
#742: FILE: drivers/serial/sc26xx.c:642:
+	up = kzalloc(sizeof *up, GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#811: FILE: drivers/serial/sc26xx.c:711:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#851: FILE: drivers/serial/sc26xx.c:751:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 26 checks, 778 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350872.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
