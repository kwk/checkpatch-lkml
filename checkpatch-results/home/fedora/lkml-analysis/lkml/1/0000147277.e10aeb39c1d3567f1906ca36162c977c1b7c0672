WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#236: FILE: fs/reiserfs/xattr.c:342:
+ * or ownership changes, object deletions, etc. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: fs/reiserfs/xattr.c:514:
+static struct dentry *xattr_lookup(struct inode *inode, const char *name,
+				    int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#326: FILE: fs/reiserfs/xattr.c:592:
+	struct timespec now = current_fs_time(inode->i_sb);
+	if (hlist_unhashed(&inode->i_hash) || !inode->i_nlink ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#443: FILE: fs/reiserfs/xattr.c:707:
+	if (!err && new_size < i_size_read(dentry->d_inode)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#454: FILE: fs/reiserfs/xattr.c:718:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#465: FILE: fs/reiserfs/xattr.c:728:
+reiserfs_xattr_set(struct inode *inode, const char *name, const void *buffer,
+		     size_t buffer_size, int flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: fs/reiserfs/xattr.c:731:
+	int err = __reiserfs_xattr_set(inode, name, buffer, buffer_size, flags);
+	if (err == -ENODATA)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'handlers' - possible side-effects?
#527: FILE: fs/reiserfs/xattr.c:863:
+#define for_each_xattr_handler(handlers, handler)		\
+		for ((handler) = *(handlers)++;			\
+			(handler) != NULL;			\
+			(handler) = *(handlers)++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'handler' - possible side-effects?
#527: FILE: fs/reiserfs/xattr.c:863:
+#define for_each_xattr_handler(handlers, handler)		\
+		for ((handler) = *(handlers)++;			\
+			(handler) != NULL;			\
+			(handler) = *(handlers)++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: fs/reiserfs/xattr.c:871:
+find_xattr_handler_prefix(struct xattr_handler **handlers,
+			   const char *name)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#560: FILE: fs/reiserfs/xattr.c:886:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#616: FILE: fs/reiserfs/xattr.c:934:
+	struct xattr_handler *handler;
+	handler = find_xattr_handler_prefix(inode->i_sb->s_xattr, name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#677: FILE: fs/reiserfs/xattr.c:954:
+	size_t size;
+	if (name[0] != '.' ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: fs/reiserfs/xattr.c:957:
+		struct xattr_handler *handler;
+		handler = find_xattr_handler_prefix(b->inode->i_sb->s_xattr,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#865: FILE: fs/reiserfs/xattr.c:1080:
+			 * been enabled. Error out. */

WARNING:SPLIT_STRING: quoted string split across lines
#868: FILE: fs/reiserfs/xattr.c:1083:
+					 "xattrs/ACLs not supported "
+					 "on pre-v3.6 format filesystems. "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#869: FILE: fs/reiserfs/xattr.c:1084:
+					 "on pre-v3.6 format filesystems. "
+					 "Failing mount.");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "s_xattr"
#1119: FILE: include/linux/reiserfs_fs_sb.h:490:
+#define reiserfs_xattrs(s) ((s)->s_xattr != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1152: FILE: include/linux/reiserfs_xattr.h:48:
+int reiserfs_xattr_get(struct inode *, const char *, void *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1152: FILE: include/linux/reiserfs_xattr.h:48:
+int reiserfs_xattr_get(struct inode *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1152: FILE: include/linux/reiserfs_xattr.h:48:
+int reiserfs_xattr_get(struct inode *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1152: FILE: include/linux/reiserfs_xattr.h:48:
+int reiserfs_xattr_get(struct inode *, const char *, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1153: FILE: include/linux/reiserfs_xattr.h:49:
+int __reiserfs_xattr_set(struct inode *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1153: FILE: include/linux/reiserfs_xattr.h:49:
+int __reiserfs_xattr_set(struct inode *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#1153: FILE: include/linux/reiserfs_xattr.h:49:
+int __reiserfs_xattr_set(struct inode *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1153: FILE: include/linux/reiserfs_xattr.h:49:
+int __reiserfs_xattr_set(struct inode *, const char *, const void *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1153: FILE: include/linux/reiserfs_xattr.h:49:
+int __reiserfs_xattr_set(struct inode *, const char *, const void *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 9 checks, 1053 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000147277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
