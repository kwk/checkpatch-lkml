WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#202: FILE: Documentation/filesystems/proc.txt:1239:
+generation children with seperate address spaces instead, if possible.  This
                          ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#226: FILE: Documentation/sysctl/vm.txt:496:
+This value defines how many children with a seperate address space a specific
                                             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: fs/proc/base.c:470:
+	points = oom_badness(task->group_leader,
+				global_page_state(NR_INACTIVE_ANON) +

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/oom.h:31:
+extern unsigned int oom_badness(struct task_struct *p,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: include/linux/oom.h:32:
+extern unsigned int oom_badness(struct task_struct *p,
+			unsigned long totalpages, unsigned long uptime);

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#346: FILE: kernel/sysctl.c:971:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#383: FILE: mm/oom_kill.c:74:
+ * Tasks that fork a very large number of children with seperate address spaces
                                                         ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: mm/oom_kill.c:140:
+unsigned int oom_badness(struct task_struct *p, unsigned long totalpages,
+							unsigned long uptime)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#640: FILE: mm/oom_kill.c:231:
+			*totalpages += node_page_state(nid, NR_INACTIVE_ANON) +
 			^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#658: FILE: mm/oom_kill.c:247:
+			*totalpages += node_page_state(nid, NR_INACTIVE_ANON) +
 			^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: mm/oom_kill.c:271:
+static struct task_struct *select_bad_process(unsigned int *ppoints,
+		unsigned long totalpages, struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: mm/oom_kill.c:488:
+	pr_err("%s: Kill process %d (%s) with score %d or sacrifice child\n",
 		message, task_pid_nr(p), p->comm, points);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: mm/oom_kill.c:527:
+	if (oom_kill_process(p, gfp_mask, 0, points, limit, mem,
 				"Memory cgroup out of memory"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#784: FILE: mm/oom_kill.c:602:
+static void __out_of_memory(gfp_t gfp_mask, int order, unsigned long totalpages,
 			enum oom_constraint constraint, const nodemask_t *mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: mm/oom_kill.c:609:
+		if (!oom_kill_process(current, gfp_mask, order, 0, totalpages,
+			NULL, "Out of memory (oom_kill_allocating_task)"))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: mm/oom_kill.c:710:
+	constraint = constrained_alloc(zonelist, gfp_mask, nodemask,
+								&totalpages);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 12 checks, 698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000013362.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
