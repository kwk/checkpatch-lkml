WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
The attached patch makes it possible for the NFS filesystem to make use of the

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#45: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#74: FILE: fs/Kconfig:1603:
+config NFS_FSCACHE
+	bool "Provide NFS client caching support (EXPERIMENTAL)"
+	depends on EXPERIMENTAL
+	depends on NFS_FS=m && FSCACHE || NFS_FS=y && FSCACHE=y
+	help
+	  Say Y here if you want NFS data to be cached locally on disc through
+	  the general filesystem cache manager
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%4hx' is unnecessary
#131: FILE: fs/nfs/client.c:1329:
+	seq_printf(m, "v%d %02x%02x%02x%02x %4hx %-7s %-17s %s\n",
 		   clp->cl_nfsversion,
 		   NIPQUAD(clp->cl_addr.sin_addr),
 		   ntohs(clp->cl_addr.sin_port),
 		   dev,
+		   fsid,
+		   fsid,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#185: FILE: fs/nfs/file.c:335:
+	 * held, and our caller is holding that */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: fs/nfs/file.c:356:
+	BUG_ON(page->private != 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#220: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#225: FILE: fs/nfs/fscache.c:1:
+/* fscache.c: NFS filesystem cache interface

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#236: FILE: fs/nfs/fscache.c:12:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#274: FILE: fs/nfs/fscache.c:50:
+static const uint8_t nfs_cache_ipv6_wrapper_for_ipv4[12] = {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#280: FILE: fs/nfs/fscache.c:56:
+	uint16_t nfsversion;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#281: FILE: fs/nfs/fscache.c:57:
+	uint16_t port;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#284: FILE: fs/nfs/fscache.c:60:
+			uint8_t		ipv6wrapper[12];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#296: FILE: fs/nfs/fscache.c:72:
+	uint16_t len = 0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#324: FILE: fs/nfs/fscache.c:100:
+		printk(KERN_WARNING "NFS: Unknown network family '%d'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: fs/nfs/fscache.c:101:
+		printk(KERN_WARNING "NFS: Unknown network family '%d'\n",
+			clp->cl_addr.sin_family);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: fs/nfs/fscache.c:113:
+^I.type ^I^I= FSCACHE_COOKIE_TYPE_INDEX,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: fs/nfs/fscache.c:118:
+static uint16_t nfs_fh_get_key(const void *cookie_netfs_data,
+		void *buffer, uint16_t bufmax)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#345: FILE: fs/nfs/fscache.c:121:
+	uint16_t nsize;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nfs_fh_now_uncached', this function's name, in a string
#391: FILE: fs/nfs/fscache.c:167:
+	dprintk("NFS: nfs_fh_now_uncached: nfs_inode 0x%p\n", nfsi);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#428: FILE: fs/nfs/fscache.c:204:
+ * get the auxilliary data from netfs data
            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#430: FILE: fs/nfs/fscache.c:206:
+ * - should store the auxilliary data in the buffer
                       ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#457: FILE: fs/nfs/fscache.c:233:
+ *   presented, as is the auxilliary data
                           ^^^^^^^^^^

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#500: FILE: fs/nfs/fscache.c:276:
+struct vm_operations_struct nfs_fs_vm_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#518: FILE: fs/nfs/fscache.c:294:
+	 * the VM reissue the readpage */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#534: FILE: fs/nfs/fscache.h:1:
+/* fscache.h: NFS filesystem cache interface definitions

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#558: FILE: fs/nfs/fscache.h:25:
+extern struct vm_operations_struct nfs_fs_vm_operations;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#560: FILE: fs/nfs/fscache.h:27:
+extern void nfs_invalidatepage(struct page *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#560: FILE: fs/nfs/fscache.h:27:
+extern void nfs_invalidatepage(struct page *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#560: FILE: fs/nfs/fscache.h:27:
+extern void nfs_invalidatepage(struct page *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#561: FILE: fs/nfs/fscache.h:28:
+extern int nfs_releasepage(struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#561: FILE: fs/nfs/fscache.h:28:
+extern int nfs_releasepage(struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#561: FILE: fs/nfs/fscache.h:28:
+extern int nfs_releasepage(struct page *, gfp_t);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: fs/nfs/fscache.h:64:
+	dfprintk(FSCACHE,"NFS: get client cookie (0x%p/0x%p)\n",
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#606: FILE: fs/nfs/fscache.h:73:
+	dfprintk(FSCACHE,"NFS: releasing client cookie (0x%p/0x%p)\n",
 	                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: fs/nfs/fscache.h:74:
+	dfprintk(FSCACHE,"NFS: releasing client cookie (0x%p/0x%p)\n",
+		clp, clp->fscache);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#645: FILE: fs/nfs/fscache.h:112:
+		nfsi->fscache = fscache_acquire_cookie(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#677: FILE: fs/nfs/fscache.h:144:
+		nfsi->fscache = fscache_acquire_cookie(

ERROR:SPACING: space required after that ',' (ctx:VxV)
#709: FILE: fs/nfs/fscache.h:176:
+	dfprintk(FSCACHE,"NFS: zapping cookie (0x%p/0x%p)\n",
 	                ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: fs/nfs/fscache.h:177:
+	dfprintk(FSCACHE,"NFS: zapping cookie (0x%p/0x%p)\n",
+		nfsi, nfsi->fscache);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#745: FILE: fs/nfs/fscache.h:212:
+					     struct file *filp)
 					                  ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#783: FILE: fs/nfs/fscache.h:250:
+		BUG_ON(!nfsi->fscache);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#807: FILE: fs/nfs/fscache.h:274:
+		BUG_ON(!nfsi->fscache);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#816: FILE: fs/nfs/fscache.h:283:
+			BUG_ON(!PageLocked(page));

WARNING:SPLIT_STRING: quoted string split across lines
#838: FILE: fs/nfs/fscache.h:305:
+			 "NFS: "
+			 "readpage_to_fscache(fsc:%p/p:%p(i:%lx f:%lx)/%d)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#846: FILE: fs/nfs/fscache.h:313:
+			 "NFS:     "
+			 "readpage_to_fscache: p:%p(i:%lu f:%lx) ret %d\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#863: FILE: fs/nfs/fscache.h:330:
+extern void nfs_readpage_from_fscache_complete(struct page *, void *, int);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#912: FILE: fs/nfs/fscache.h:379:
+					     unsigned *nr_pages)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#929: FILE: fs/nfs/fscache.h:396:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#932: FILE: fs/nfs/fscache.h:399:
+		BUG_ON(!list_empty(pages));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#933: FILE: fs/nfs/fscache.h:400:
+		BUG_ON(*nr_pages != 0);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#970: FILE: fs/nfs/fscache.h:437:
+static inline void nfs_fscache_set_fh_cookie(struct inode *inode, struct file *filp) {}
                                                                                ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#976: FILE: fs/nfs/fscache.h:443:
+}
+static inline void nfs_fscache_invalidate_page(struct page *page,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#981: FILE: fs/nfs/fscache.h:448:
+}
+static inline void nfs_readpage_to_fscache(struct inode *inode, struct page *page, int sync) {}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#987: FILE: fs/nfs/fscache.h:454:
+}
+static inline int nfs_readpages_from_fscache(struct nfs_open_context *ctx,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#991: FILE: fs/nfs/fscache.h:458:
+					     unsigned *nr_pages)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1039: FILE: fs/nfs/inode.c:581:
+	nfs_fscache_set_fh_cookie(inode, filp);
 	                                 ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1114: FILE: fs/nfs/internal.h:158:
+extern int nfs_readpage_async(struct nfs_open_context *, struct inode *, struct page *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 34 warnings, 21 checks, 1195 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397847.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
