WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#99: 
Signed-off-by:  Lee Schermerhorn <lee.schermerhorn@hp.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Use a single space after Signed-off-by:
#100: 
Signed-off-by:  Rik van Riel <riel@redhat.com>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: mm/internal.h:43:
+extern int is_mlocked_vma(struct vm_area_struct *, struct page *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: mm/internal.h:48:
+extern void mlock_vma_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#144: FILE: mm/internal.h:50:
+extern int __mlock_vma_pages_range(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: mm/internal.h:51:
+extern int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: mm/internal.h:57:
+static inline void mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: mm/internal.h:67:
+static inline void munlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: mm/internal.h:76:
+extern void clear_page_mlock(struct page *page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#177: FILE: mm/internal.h:83:
+}
+static inline void clear_page_mlock(struct page *page) { }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: mm/internal.h:86:
+static inline void mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end) { }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#182: FILE: mm/internal.h:88:
+static inline void munlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end) { }

CHECK:LINE_SPACING: Please don't use multiple blank lines
#186: FILE: mm/internal.h:92:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: mm/mlock.c:76:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#274: FILE: mm/mlock.c:91:
+	BUG_ON(!PageLocked(page));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#276: FILE: mm/mlock.c:93:
+	if (!TestSetPageMlocked(page) && !isolate_lru_page(page))
+			putback_lru_page(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: mm/mlock.c:114:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: mm/mlock.c:151:
+int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#343: FILE: mm/mlock.c:160:
+	BUG_ON(start & ~PAGE_MASK || end & ~PAGE_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: mm/mlock.c:180:
+		ret = get_user_pages(current, mm, addr,
+				min_t(int, nr_pages, ARRAY_SIZE(pages)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: mm/mlock.c:224:
+int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageMlocked>
#537: FILE: include/linux/page-flags.h:281:
+#define __ClearPageMlocked(page) __clear_bit(PG_mlocked, &(page)->flags)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#708: FILE: mm/rmap.c:914:
+		if (TRY_TO_UNLOCK && unlikely(unlock)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#713: FILE: mm/rmap.c:919:
+			break;			/* no need to look further */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#713: FILE: mm/rmap.c:919:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#772: FILE: mm/rmap.c:975:
+		if (TRY_TO_UNLOCK && unlikely(unlock)) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#777: FILE: mm/rmap.c:980:
+			break;			/* no need to look further */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#777: FILE: mm/rmap.c:980:
+		} else

ERROR:SPACING: space prohibited before that close parenthesis ')'
#930: FILE: mm/page_alloc.c:661:
+			1 << PG_mlocked );

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345506.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 19 checks, 772 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000345506.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
