CHECK:CAMELCASE: Avoid CamelCase: <SGDescriptor_struct>
#52: FILE: drivers/block/cciss.c:1658:
+	SGDescriptor_struct *curr_sg = cmd->SG;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Ext>
#67: FILE: drivers/block/cciss.c:1672:
+		if (curr_sg[sg_index].Ext == CCISS_SG_CHAIN) {

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#68: FILE: drivers/block/cciss.c:1673:
+			temp64.val32.lower = cmd->SG[i].Addr.lower;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: drivers/block/cciss.c:1676:
+			pci_dma_sync_single_for_cpu(h->pdev, temp64.val,
+						cmd->SG[i].Len, ddir);

CHECK:CAMELCASE: Avoid CamelCase: <Len>
#71: FILE: drivers/block/cciss.c:1676:
+						cmd->SG[i].Len, ddir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#73: FILE: drivers/block/cciss.c:1678:
+			pci_unmap_single(h->pdev, temp64.val,
+						cmd->SG[i].Len, ddir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: drivers/block/cciss.c:1686:
+		pci_unmap_page(h->pdev, temp64.val, curr_sg[sg_index].Len,
+				ddir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#119: FILE: drivers/block/cciss.c:3100:
+	BUG_ON(creq->nr_phys_segments > h->maxsgentries);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#149: FILE: drivers/block/cciss.c:3150:
+		if (((sg_index+1) == (h->max_cmd_sgentries)) &&
 		              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'h->max_cmd_sgentries'
#149: FILE: drivers/block/cciss.c:3150:
+		if (((sg_index+1) == (h->max_cmd_sgentries)) &&
+			!chained && ((seg - i) > 1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: drivers/block/cciss.c:3151:
+		if (((sg_index+1) == (h->max_cmd_sgentries)) &&
+			!chained && ((seg - i) > 1)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#179: FILE: drivers/block/cciss.c:3175:
+		int len;
+		curr_sg = c->SG;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: drivers/block/cciss.c:3183:
+		temp64.val = pci_map_single(h->pdev,
+					h->cmd_sg_list[c->cmdindex]->sgchain,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: drivers/block/cciss.c:3191:
+		pci_dma_sync_single_for_device(h->pdev,
+				h->cmd_sg_list[c->cmdindex]->sg_chain_dma,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#206: FILE: drivers/block/cciss.c:3200:
+	printk(KERN_DEBUG "cciss: Submitting %ld sectors in %d segments "

WARNING:SPLIT_STRING: quoted string split across lines
#207: FILE: drivers/block/cciss.c:3201:
+	printk(KERN_DEBUG "cciss: Submitting %ld sectors in %d segments "
+			"chained[%d]\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#212: FILE: drivers/block/cciss.c:3205:
+	c->Header.SGList = c->Header.SGTotal = seg + chained;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <Header>
#212: FILE: drivers/block/cciss.c:3205:
+	c->Header.SGList = c->Header.SGTotal = seg + chained;

CHECK:CAMELCASE: Avoid CamelCase: <SGList>
#212: FILE: drivers/block/cciss.c:3205:
+	c->Header.SGList = c->Header.SGTotal = seg + chained;

CHECK:CAMELCASE: Avoid CamelCase: <SGTotal>
#212: FILE: drivers/block/cciss.c:3205:
+	c->Header.SGList = c->Header.SGTotal = seg + chained;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around c->cfgtable->MaxSGElements
#223: FILE: drivers/block/cciss.c:3781:
+	c->maxsgentries = readl(&(c->cfgtable->MaxSGElements));

CHECK:CAMELCASE: Avoid CamelCase: <MaxSGElements>
#223: FILE: drivers/block/cciss.c:3781:
+	c->maxsgentries = readl(&(c->cfgtable->MaxSGElements));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*hba[i]->scatter_list[k])...) over kmalloc(sizeof(struct scatterlist)...)
#261: FILE: drivers/block/cciss.c:4234:
+		hba[i]->scatter_list[k] = kmalloc(sizeof(struct scatterlist) *

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#261: FILE: drivers/block/cciss.c:4234:
+		hba[i]->scatter_list[k] = kmalloc(sizeof(struct scatterlist) *
+							hba[i]->maxsgentries,
+							GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hba[i]->scatter_list[k]"
#264: FILE: drivers/block/cciss.c:4237:
+		if (hba[i]->scatter_list[k] == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#265: FILE: drivers/block/cciss.c:4238:
+			printk(KERN_ERR "cciss%d: could not allocate "

WARNING:SPLIT_STRING: quoted string split across lines
#266: FILE: drivers/block/cciss.c:4239:
+			printk(KERN_ERR "cciss%d: could not allocate "
+				"s/g lists\n", i);

CHECK:CAMELCASE: Avoid CamelCase: <Cmd_sg_list>
#270: FILE: drivers/block/cciss.c:4243:
+	hba[i]->cmd_sg_list = kmalloc(sizeof(struct Cmd_sg_list *) *

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#274: FILE: drivers/block/cciss.c:4247:
+		printk(KERN_ERR "cciss%d: Cannot get memory for "

WARNING:SPLIT_STRING: quoted string split across lines
#275: FILE: drivers/block/cciss.c:4248:
+		printk(KERN_ERR "cciss%d: Cannot get memory for "
+			"s/g chaining.\n", i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: drivers/block/cciss.c:4256:
+					kmalloc(sizeof(struct Cmd_sg_list),
+							GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#285: FILE: drivers/block/cciss.c:4258:
+				printk(KERN_ERR "cciss%d: Cannot get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#286: FILE: drivers/block/cciss.c:4259:
+				printk(KERN_ERR "cciss%d: Cannot get memory "
+					"for chain block.\n", i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#295: FILE: drivers/block/cciss.c:4268:
+				printk(KERN_ERR "cciss%d: Cannot get memory "

WARNING:SPLIT_STRING: quoted string split across lines
#296: FILE: drivers/block/cciss.c:4269:
+				printk(KERN_ERR "cciss%d: Cannot get memory "
+					"for s/g chains\n", i);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: drivers/block/cciss_cmd.h:323:
+  DWORD            MaxSGElements;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: drivers/block/cciss_cmd.h:324:
+  DWORD            MaxLogicalUnits;$

CHECK:CAMELCASE: Avoid CamelCase: <MaxLogicalUnits>
#400: FILE: drivers/block/cciss_cmd.h:324:
+  DWORD            MaxLogicalUnits;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#401: FILE: drivers/block/cciss_cmd.h:325:
+  DWORD            MaxPhysicalDrives;$

CHECK:CAMELCASE: Avoid CamelCase: <MaxPhysicalDrives>
#401: FILE: drivers/block/cciss_cmd.h:325:
+  DWORD            MaxPhysicalDrives;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#402: FILE: drivers/block/cciss_cmd.h:326:
+  DWORD            MaxPhysicalDrivesPerLogicalUnit;$

CHECK:CAMELCASE: Avoid CamelCase: <MaxPhysicalDrivesPerLogicalUnit>
#402: FILE: drivers/block/cciss_cmd.h:326:
+  DWORD            MaxPhysicalDrivesPerLogicalUnit;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048660.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 17 warnings, 25 checks, 333 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048660.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
