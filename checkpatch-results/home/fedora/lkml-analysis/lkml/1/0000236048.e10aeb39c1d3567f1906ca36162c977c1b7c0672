CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->gprs[2] != __NR_rt_sigreturn'
#129: FILE: arch/s390/kernel/ptrace.c:587:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->gprs[2] != __NR_rt_sigreturn)
+		&& (regs->gprs[2] != __NR_ptrace)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->gprs[2] != __NR_ptrace'
#129: FILE: arch/s390/kernel/ptrace.c:587:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->gprs[2] != __NR_rt_sigreturn)
+		&& (regs->gprs[2] != __NR_ptrace)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: arch/s390/kernel/ptrace.c:588:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->gprs[2] != __NR_rt_sigreturn)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#131: FILE: arch/s390/kernel/ptrace.c:589:
+		&& (regs->gprs[2] != __NR_rt_sigreturn)
+		&& (regs->gprs[2] != __NR_ptrace)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_ax != __NR_rt_sigreturn'
#181: FILE: arch/x86/kernel/ptrace.c:1398:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_ax != __NR_rt_sigreturn)
+		&& (regs->orig_ax != __NR_ptrace)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_ax != __NR_ptrace'
#181: FILE: arch/x86/kernel/ptrace.c:1398:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_ax != __NR_rt_sigreturn)
+		&& (regs->orig_ax != __NR_ptrace)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#182: FILE: arch/x86/kernel/ptrace.c:1399:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_ax != __NR_rt_sigreturn)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#183: FILE: arch/x86/kernel/ptrace.c:1400:
+		&& (regs->orig_ax != __NR_rt_sigreturn)
+		&& (regs->orig_ax != __NR_ptrace)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#184: FILE: arch/x86/kernel/ptrace.c:1401:
+		if (!entryexit) {
+		struct siginfo info;

CHECK:SPACING: No space is necessary after a cast
#190: FILE: arch/x86/kernel/ptrace.c:1407:
+		info.si_addr = (void *) regs->orig_ax;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_rax != __NR_rt_sigreturn'
#203: FILE: arch/x86/kernel/ptrace.c:1505:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_rax != __NR_ptrace'
#203: FILE: arch/x86/kernel/ptrace.c:1505:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#204: FILE: arch/x86/kernel/ptrace.c:1506:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#205: FILE: arch/x86/kernel/ptrace.c:1507:
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

CHECK:SPACING: No space is necessary after a cast
#211: FILE: arch/x86/kernel/ptrace.c:1513:
+		info.si_addr = (void *) regs->orig_rax;

WARNING:SPACING: space prohibited before semicolon
#213: FILE: arch/x86/kernel/ptrace.c:1515:
+		regs->rax = -1 ;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_rax != __NR_rt_sigreturn'
#224: FILE: arch/x86/kernel/ptrace.c:1540:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'regs->orig_rax != __NR_ptrace'
#224: FILE: arch/x86/kernel/ptrace.c:1540:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#225: FILE: arch/x86/kernel/ptrace.c:1541:
+	if ((current->ptrace & PT_SELF)
+		&& (regs->orig_rax != __NR_rt_sigreturn)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#226: FILE: arch/x86/kernel/ptrace.c:1542:
+		&& (regs->orig_rax != __NR_rt_sigreturn)
+		&& (regs->orig_rax != __NR_ptrace)) {

WARNING:SPACING: space prohibited before semicolon
#227: FILE: arch/x86/kernel/ptrace.c:1543:
+		regs->rax = -1 ;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#275: FILE: include/asm-generic/siginfo.h:229:
+#define SYS_SYSCALL    (__SI_FAULT|1)  /* system call notification */
                                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 19 checks, 169 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236048.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
