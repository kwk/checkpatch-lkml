WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#48: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: fs/aufs/i_op.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#79: FILE: fs/aufs/i_op.c:27:
+	if ((write_mask && IS_IMMUTABLE(h_inode))
+	    || ((mask & MAY_EXEC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#80: FILE: fs/aufs/i_op.c:28:
+	    || ((mask & MAY_EXEC)
+		&& S_ISREG(h_inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#81: FILE: fs/aufs/i_op.c:29:
+		&& S_ISREG(h_inode->i_mode)
+		&& ((h_mnt->mnt_flags & MNT_NOEXEC)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#82: FILE: fs/aufs/i_op.c:30:
+		&& ((h_mnt->mnt_flags & MNT_NOEXEC)
+		    || !(h_inode->i_mode & S_IXUGO))))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#82: FILE: fs/aufs/i_op.c:30:
+		    || !(h_inode->i_mode & S_IXUGO))))

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#91: FILE: fs/aufs/i_op.c:39:
+	if ((write_mask && !au_br_writable(brperm))
+	    || (au_test_nfs(h_inode->i_sb) && S_ISDIR(h_inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#92: FILE: fs/aufs/i_op.c:40:
+	    || (au_test_nfs(h_inode->i_sb) && S_ISDIR(h_inode->i_mode)
+		&& write_mask && !(mask & MAY_READ))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#93: FILE: fs/aufs/i_op.c:41:
+		&& write_mask && !(mask & MAY_READ))
+	    || !h_inode->i_op->permission) {

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#99: FILE: fs/aufs/i_op.c:47:
+		AuTraceErr(err);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#124: FILE: fs/aufs/i_op.c:72:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#129: FILE: fs/aufs/i_op.c:77:
+		AuDebugOn(!h_inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#130: FILE: fs/aufs/i_op.c:78:
+		AuDebugOn(!h_inode
+			  || ((h_inode->i_mode & S_IFMT)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#171: FILE: fs/aufs/i_op.c:119:
+				  struct nameidata *nd)
 				                    ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#175: FILE: fs/aufs/i_op.c:123:
+	struct mutex *mtx;

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#180: FILE: fs/aufs/i_op.c:128:
+	IMustLock(dir);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#190: FILE: fs/aufs/i_op.c:138:
+	di_read_lock_parent(parent, AuLock_IR);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#191: FILE: fs/aufs/i_op.c:139:
+	npositive = au_lkup_dentry(dentry, au_dbstart(parent), /*type*/0, nd);
 	                                                                  ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: fs/aufs/i_op.c:150:
+		if (!S_ISDIR(h_inode->i_mode)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#211: FILE: fs/aufs/i_op.c:159:
+		} else

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#219: FILE: fs/aufs/i_op.c:167:
+	if (unlikely(IS_ERR(ret) && inode))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#221: FILE: fs/aufs/i_op.c:169:
+	au_store_oflag(nd);
 	               ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#240: FILE: fs/aufs/i_op.c:188:
+	if (add_entry) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#243: FILE: fs/aufs/i_op.c:191:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT>
#256: FILE: fs/aufs/i_op.c:204:
+		mutex_lock_nested(&h_dir->i_mutex, AuLsc_I_PARENT);

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate>
#301: FILE: fs/aufs/i_op.c:249:
+			err = AuWbrCreate(sbinfo, dentry,

CHECK:BRACES: braces {} should be used on all arms of this statement
#307: FILE: fs/aufs/i_op.c:255:
+			if (add_entry)
[...]
+			else {
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup>
#308: FILE: fs/aufs/i_op.c:256:
+				err = AuWbrCopyup(sbinfo, dentry);

CHECK:BRACES: Unbalanced braces around else statement
#309: FILE: fs/aufs/i_op.c:257:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#310: FILE: fs/aufs/i_op.c:258:
+				if (!IS_ROOT(dentry)) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: fs/aufs/i_op.c:262:
+				} else

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#325: FILE: fs/aufs/i_op.c:273:
+	AuDbg("bstart %d, bcpup %d\n", bstart, bcpup);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#360: FILE: fs/aufs/i_op.c:308:
+	iput(p->hdir->hi_inode);
 	^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#438: FILE: fs/aufs/i_op.c:386:
+	AuErr("err %d\n", err);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_DI_PARENT>
#463: FILE: fs/aufs/i_op.c:411:
+	au_pin_init(pin, dentry, bindex, AuLsc_DI_PARENT, AuLsc_I_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_PARENT2>
#463: FILE: fs/aufs/i_op.c:411:
+	au_pin_init(pin, dentry, bindex, AuLsc_DI_PARENT, AuLsc_I_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuIcpup_DID_CPUP>
#470: FILE: fs/aufs/i_op.c:418:
+#define AuIcpup_DID_CPUP	1

CHECK:CAMELCASE: Avoid CamelCase: <AuIcpup_##name>
#471: FILE: fs/aufs/i_op.c:419:
+#define au_ftest_icpup(flags, name)	((flags) & AuIcpup_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_MNT_WRITE>
#514: FILE: fs/aufs/i_op.c:462:
+	a->pin_flags = AuPin_MNT_WRITE;

CHECK:CAMELCASE: Avoid CamelCase: <AuOpt_UDBA_NONE>
#524: FILE: fs/aufs/i_op.c:472:
+		udba = AuOpt_UDBA_NONE;

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#535: FILE: fs/aufs/i_op.c:483:
+	mutex_lock_nested(&a->h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#560: FILE: fs/aufs/i_op.c:508:
+	if (!d_unhashed(dentry)) {
[...]
+	} else if (!hi_wh)
[...]
+	else
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_DTIME>
#561: FILE: fs/aufs/i_op.c:509:
+		err = au_sio_cpup_simple(dentry, a->btgt, sz, AuCpup_DTIME);

CHECK:BRACES: braces {} should be used on all arms of this statement
#623: FILE: fs/aufs/i_op.c:571:
+	if (ia->ia_valid & ATTR_SIZE) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#639: FILE: fs/aufs/i_op.c:587:
+	} else

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#660: FILE: fs/aufs/i_op.c:608:
+static int au_getattr_lock_reval(struct dentry *dentry, unsigned int sigen)
                                                                      ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#669: FILE: fs/aufs/i_op.c:617:
+	if (au_digen(dentry) != sigen || au_iigen(inode) != sigen) {
 	                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#669: FILE: fs/aufs/i_op.c:617:
+	if (au_digen(dentry) != sigen || au_iigen(inode) != sigen) {
 	                                                    ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#737: FILE: fs/aufs/i_op.c:685:
+	if (!d_unhashed(dentry) && !udba_none) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#738: FILE: fs/aufs/i_op.c:686:
+		unsigned int sigen = au_sigen(sb);
 		             ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#739: FILE: fs/aufs/i_op.c:687:
+		if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)
 		                        ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#739: FILE: fs/aufs/i_op.c:687:
+		if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)
 		                                                    ^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: fs/aufs/i_op.c:687:
+		unsigned int sigen = au_sigen(sb);
+		if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#739: FILE: fs/aufs/i_op.c:687:
+		if (au_digen(dentry) == sigen && au_iigen(inode) == sigen)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#741: FILE: fs/aufs/i_op.c:689:
+		else {

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#742: FILE: fs/aufs/i_op.c:690:
+			err = au_getattr_lock_reval(dentry, sigen);
 			                                    ^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#746: FILE: fs/aufs/i_op.c:694:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#755: FILE: fs/aufs/i_op.c:703:
+	if (au_dbstart(dentry) == bindex)
[...]
+	else if (au_opt_test(mnt_flags, PLINK) && au_plink_test(inode)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#761: FILE: fs/aufs/i_op.c:709:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#798: FILE: fs/aufs/i_op.c:746:
+	if (unlikely(/* !h_dentry
+		     || !h_dentry->d_inode

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#798: FILE: fs/aufs/i_op.c:746:
+	if (unlikely(/* !h_dentry
+		     || !h_dentry->d_inode

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#799: FILE: fs/aufs/i_op.c:747:
+		     || !h_dentry->d_inode
+		     || !h_dentry->d_inode->i_op

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#800: FILE: fs/aufs/i_op.c:748:
+		     || !h_dentry->d_inode->i_op
+		     || */ !h_dentry->d_inode->i_op->readlink))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#829: FILE: fs/aufs/i_op.c:777:
+static void *aufs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#851: FILE: fs/aufs/i_op.c:799:
+		nd_set_link(nd, buf);
 		            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#863: FILE: fs/aufs/i_op.c:811:
+			  struct nameidata *nd, void *cookie __maybe_unused)
 			                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#865: FILE: fs/aufs/i_op.c:813:
+	__putname(nd_get_link(nd));
 	                      ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#874: FILE: fs/aufs/i_op.c:822:
+	AuUnsupport();

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#879: FILE: fs/aufs/i_op.c:827:
+struct inode_operations aufs_symlink_iop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#888: FILE: fs/aufs/i_op.c:836:
+struct inode_operations aufs_dir_iop = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#904: FILE: fs/aufs/i_op.c:852:
+struct inode_operations aufs_iop = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#916: FILE: fs/aufs/i_op_add.c:1:
+/*

CHECK:BRACES: braces {} should be used on all arms of this statement
#979: FILE: fs/aufs/i_op_add.c:64:
+	if (IS_ERR(wh)) {
[...]
+	} else
[...]

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#980: FILE: fs/aufs/i_op_add.c:65:
+		AuIOErr("%.*s reverting whiteout failed(%d, %d)\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#981: FILE: fs/aufs/i_op_add.c:66:
+			AuDLNPair(dentry), err, rerr);

CHECK:BRACES: Unbalanced braces around else statement
#983: FILE: fs/aufs/i_op_add.c:68:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_DI_LOCKED>
#1061: FILE: fs/aufs/i_op_add.c:146:
+		     AuPin_DI_LOCKED | AuPin_MNT_WRITE);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1068: FILE: fs/aufs/i_op_add.c:153:
+	if (udba != AuOpt_UDBA_NONE
+	    && au_dbstart(dentry) == bcpup) {

WARNING:TYPO_SPELLING: 'Creat' may be misspelled - perhaps 'Create'?
#1100: FILE: fs/aufs/i_op_add.c:185:
+enum { Mknod, Symlink, Creat };
                        ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Mknod>
#1100: FILE: fs/aufs/i_op_add.c:185:
+enum { Mknod, Symlink, Creat };

CHECK:CAMELCASE: Avoid CamelCase: <Symlink>
#1100: FILE: fs/aufs/i_op_add.c:185:
+enum { Mknod, Symlink, Creat };

CHECK:CAMELCASE: Avoid CamelCase: <Creat>
#1100: FILE: fs/aufs/i_op_add.c:185:
+enum { Mknod, Symlink, Creat };

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1106: FILE: fs/aufs/i_op_add.c:191:
+			struct nameidata *nd;
 			                  ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_ADD_ENTRY>
#1131: FILE: fs/aufs/i_op_add.c:216:
+		.flags		= AuWrDir_ADD_ENTRY

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_DW>
#1137: FILE: fs/aufs/i_op_add.c:222:
+	aufs_read_lock(dentry, AuLock_DW);

WARNING:TYPO_SPELLING: 'Creat' may be misspelled - perhaps 'Create'?
#1150: FILE: fs/aufs/i_op_add.c:235:
+	case Creat:
 	     ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1160: FILE: fs/aufs/i_op_add.c:245:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1169: FILE: fs/aufs/i_op_add.c:254:
+		int rerr;
+		rerr = vfsub_unlink(h_dir, &h_path, /*force*/0);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1214: FILE: fs/aufs/i_op_add.c:299:
+		struct nameidata *nd)
 		                  ^^

WARNING:TYPO_SPELLING: 'Creat' may be misspelled - perhaps 'Create'?
#1217: FILE: fs/aufs/i_op_add.c:302:
+		.type = Creat,
 		        ^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1220: FILE: fs/aufs/i_op_add.c:305:
+			.nd	= nd
 			 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1220: FILE: fs/aufs/i_op_add.c:305:
+			.nd	= nd
 			   	  ^^

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1240: FILE: fs/aufs/i_op_add.c:325:
+	struct mutex *h_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuCpup_KEEPLINO>
#1286: FILE: fs/aufs/i_op_add.c:371:
+					 AuCpup_KEEPLINO, a->parent);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1305: FILE: fs/aufs/i_op_add.c:390:
+
+		}

CHECK:BRACES: Unbalanced braces around else statement
#1370: FILE: fs/aufs/i_op_add.c:455:
+		else {

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1458: FILE: fs/aufs/i_op_add.c:543:
+	struct mutex *h_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_ISDIR>
#1463: FILE: fs/aufs/i_op_add.c:548:
+		.flags		= AuWrDir_ADD_ENTRY | AuWrDir_ISDIR

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1489: FILE: fs/aufs/i_op_add.c:574:
+	if (wh_dentry
+	    || au_opt_test(au_mntflags(sb), ALWAYS_DIROPQ)) {

CHECK:CAMELCASE: Avoid CamelCase: <AuLabel>
#1508: FILE: fs/aufs/i_op_add.c:593:
+		AuLabel(revert opq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1547: FILE: fs/aufs/i_op_del.c:1:
+/*

CHECK:BRACES: Unbalanced braces around else statement
#1588: FILE: fs/aufs/i_op_del.c:42:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1590: FILE: fs/aufs/i_op_del.c:44:
+		AuDebugOn(bstart < *bcpup
+			  || au_test_ro(sb, *bcpup, dentry->d_inode));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1607: FILE: fs/aufs/i_op_del.c:61:
+					 /*nd*/NULL);
 					   ^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1721: FILE: fs/aufs/i_op_del.c:175:
+	if (udba != AuOpt_UDBA_NONE
+	    && au_dbstart(dentry) == bcpup) {

CHECK:BRACES: Unbalanced braces around else statement
#1895: FILE: fs/aufs/i_op_del.c:349:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2024: FILE: fs/aufs/i_op_ren.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuSRC>
#2040: FILE: fs/aufs/i_op_ren.c:17:
+enum { AuSRC, AuDST, AuSrcDst };

CHECK:CAMELCASE: Avoid CamelCase: <AuDST>
#2040: FILE: fs/aufs/i_op_ren.c:17:
+enum { AuSRC, AuDST, AuSrcDst };

CHECK:CAMELCASE: Avoid CamelCase: <AuSrcDst>
#2040: FILE: fs/aufs/i_op_ren.c:17:
+enum { AuSRC, AuDST, AuSrcDst };

CHECK:CAMELCASE: Avoid CamelCase: <AuPARENT>
#2041: FILE: fs/aufs/i_op_ren.c:18:
+enum { AuPARENT, AuCHILD, AuParentChild };

CHECK:CAMELCASE: Avoid CamelCase: <AuCHILD>
#2041: FILE: fs/aufs/i_op_ren.c:18:
+enum { AuPARENT, AuCHILD, AuParentChild };

CHECK:CAMELCASE: Avoid CamelCase: <AuParentChild>
#2041: FILE: fs/aufs/i_op_ren.c:18:
+enum { AuPARENT, AuCHILD, AuParentChild };

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_ISDIR>
#2043: FILE: fs/aufs/i_op_ren.c:20:
+#define AuRen_ISDIR	1

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_ISSAMEDIR>
#2044: FILE: fs/aufs/i_op_ren.c:21:
+#define AuRen_ISSAMEDIR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2044: FILE: fs/aufs/i_op_ren.c:21:
+#define AuRen_ISSAMEDIR	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_WHSRC>
#2045: FILE: fs/aufs/i_op_ren.c:22:
+#define AuRen_WHSRC	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2045: FILE: fs/aufs/i_op_ren.c:22:
+#define AuRen_WHSRC	(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_WHDST>
#2046: FILE: fs/aufs/i_op_ren.c:23:
+#define AuRen_WHDST	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2046: FILE: fs/aufs/i_op_ren.c:23:
+#define AuRen_WHDST	(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_MNT_WRITE>
#2047: FILE: fs/aufs/i_op_ren.c:24:
+#define AuRen_MNT_WRITE	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2047: FILE: fs/aufs/i_op_ren.c:24:
+#define AuRen_MNT_WRITE	(1 << 4)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_DT_DSTDIR>
#2048: FILE: fs/aufs/i_op_ren.c:25:
+#define AuRen_DT_DSTDIR	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2048: FILE: fs/aufs/i_op_ren.c:25:
+#define AuRen_DT_DSTDIR	(1 << 5)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_DIROPQ>
#2049: FILE: fs/aufs/i_op_ren.c:26:
+#define AuRen_DIROPQ	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2049: FILE: fs/aufs/i_op_ren.c:26:
+#define AuRen_DIROPQ	(1 << 6)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_CPUP>
#2050: FILE: fs/aufs/i_op_ren.c:27:
+#define AuRen_CPUP	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2050: FILE: fs/aufs/i_op_ren.c:27:
+#define AuRen_CPUP	(1 << 7)

CHECK:CAMELCASE: Avoid CamelCase: <AuRen_##name>
#2051: FILE: fs/aufs/i_op_ren.c:28:
+#define au_ftest_ren(flags, name)	((flags) & AuRen_##name)

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#2107: FILE: fs/aufs/i_op_ren.c:84:
+ * everything as if nothing happend.
                             ^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <RevertFailure>
#2112: FILE: fs/aufs/i_op_ren.c:89:
+#define RevertFailure(fmt, args...) do { \

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2129: FILE: fs/aufs/i_op_ren.c:106:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2135: FILE: fs/aufs/i_op_ren.c:112:
+				       a->br, /*nd*/NULL);
 				                ^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2164: FILE: fs/aufs/i_op_ren.c:141:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2170: FILE: fs/aufs/i_op_ren.c:147:
+				       a->br, /*nd*/NULL);
 				                ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2185: FILE: fs/aufs/i_op_ren.c:162:
+	if (!rerr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2188: FILE: fs/aufs/i_op_ren.c:165:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2223: FILE: fs/aufs/i_op_ren.c:200:
+}
+#undef RevertFailure

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2241: FILE: fs/aufs/i_op_ren.c:218:
+		if (au_ftest_ren(a->flags, DIROPQ)
+		    && au_dbdiropq(d) == a->btgt)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2274: FILE: fs/aufs/i_op_ren.c:251:
+				     au_sbi(dir->i_sb)->si_dirwh)
+	    || au_test_fs_remote(a->h_dst->d_sb)) {

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#2277: FILE: fs/aufs/i_op_ren.c:254:
+			AuWarn("failed removing whtmp dir %.*s (%d), "

WARNING:SPLIT_STRING: quoted string split across lines
#2278: FILE: fs/aufs/i_op_ren.c:255:
+			AuWarn("failed removing whtmp dir %.*s (%d), "
+			       "ignored.\n", AuDLNPair(a->h_dst), err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2325: FILE: fs/aufs/i_op_ren.c:302:
+		a->src_wh_dentry
+			= au_wh_create(a->src_dentry, a->btgt, a->src_h_parent);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2373: FILE: fs/aufs/i_op_ren.c:350:
+	if (au_ftest_ren(a->flags, ISDIR)
+	    && (a->dst_wh_dentry

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2374: FILE: fs/aufs/i_op_ren.c:351:
+	    && (a->dst_wh_dentry
+		|| au_dbdiropq(d) == a->btgt

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2376: FILE: fs/aufs/i_op_ren.c:353:
+		/* hide the lower to keep xino */
+		|| a->btgt < au_dbend(d)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2377: FILE: fs/aufs/i_op_ren.c:354:
+		|| a->btgt < au_dbend(d)
+		|| au_opt_test(au_mntflags(d->d_sb), ALWAYS_DIROPQ)))

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn1>
#2487: FILE: fs/aufs/i_op_ren.c:464:
+		AuWarn1("renaming dir who has child(ren) on multiple branches,"

WARNING:SPLIT_STRING: quoted string split across lines
#2488: FILE: fs/aufs/i_op_ren.c:465:
+		AuWarn1("renaming dir who has child(ren) on multiple branches,"
+			" is not supported\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2730: FILE: fs/aufs/i_op_ren.c:707:
+	if (au_br_rdonly(br)
+	    || (0 <= bdiropq && bdiropq < btgt)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2730: FILE: fs/aufs/i_op_ren.c:707:
+	    || (0 <= bdiropq && bdiropq < btgt)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2731: FILE: fs/aufs/i_op_ren.c:708:
+	    || (0 <= bdiropq && bdiropq < btgt)
+	    || (0 <= bwh && bwh < btgt))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2731: FILE: fs/aufs/i_op_ren.c:708:
+	    || (0 <= bwh && bwh < btgt))

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#2786: FILE: fs/aufs/i_op_ren.c:763:
+	struct mutex *h_mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_DIR>
#2846: FILE: fs/aufs/i_op_ren.c:823:
+					  AuLock_DIR | AuLock_FLUSH);

CHECK:BRACES: Unbalanced braces around else statement
#2847: FILE: fs/aufs/i_op_ren.c:824:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#2888: FILE: fs/aufs/i_op_ren.c:865:
+	} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2919: FILE: fs/aufs/i_op_ren.c:896:
+	/* dput/iput all lower dentries */
 	        ^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2938: FILE: fs/aufs/i_op_ren.c:915:
+		if (a->dst_inode
+		    && (a->dst_inode->i_nlink <= 1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2939: FILE: fs/aufs/i_op_ren.c:916:
+		    && (a->dst_inode->i_nlink <= 1
+			|| au_ftest_ren(a->flags, ISDIR)))

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2948: FILE: fs/aufs/i_op_ren.c:925:
+	iput(a->dst_inode);
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2959: FILE: fs/aufs/iinfo.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2999: FILE: fs/aufs/iinfo.c:41:
+	iput(hinode->hi_inode);
 	^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr1>
#3043: FILE: fs/aufs/iinfo.c:85:
+				AuIOErr1("failed au_xino_write() %d\n", err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3047: FILE: fs/aufs/iinfo.c:89:
+		if (au_ftest_hi(flags, HINOTIFY)
+		    && au_br_hinotifyable(br->br_perm)) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3222: FILE: fs/aufs/inode.c:1:
+/*

WARNING:SPLIT_STRING: quoted string split across lines
#3520: FILE: fs/aufs/inode.c:299:
+		AuWarn1("Un-notified UDBA or repeatedly renamed dir,"
+			" b%d, %s, %.*s, hi%lu, i%lu.\n",

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3526: FILE: fs/aufs/inode.c:305:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3531: FILE: fs/aufs/inode.c:310:
+	iput(inode);
 	^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3548: FILE: fs/aufs/inode.c:327:
+	if (!err
+	    && inode

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3549: FILE: fs/aufs/inode.c:328:
+	    && inode
+	    && au_ibstart(inode) <= bindex

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3550: FILE: fs/aufs/inode.c:329:
+	    && au_ibstart(inode) <= bindex
+	    && bindex <= au_ibend(inode)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3556: FILE: fs/aufs/inode.c:335:
+		struct inode *hi = au_h_iptr(inode, bindex);
+		if (hi)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3573: FILE: fs/aufs/inode.c:352:
+	if (au_test_nfs(h_inode->i_sb)
+	    && (mask & MAY_WRITE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3574: FILE: fs/aufs/inode.c:353:
+	    && (mask & MAY_WRITE)
+	    && S_ISDIR(h_inode->i_mode))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3584: FILE: fs/aufs/inode.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#3645: FILE: fs/aufs/inode.h:62:
+#define AuPin_MNT_WRITE		(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuPin_##name>
#3646: FILE: fs/aufs/inode.h:63:
+#define au_ftest_pin(flags, name)	((flags) & AuPin_##name)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#3687: FILE: fs/aufs/inode.h:104:
+extern struct inode_operations aufs_iop, aufs_symlink_iop, aufs_dir_iop;

CHECK:BIT_MACRO: Prefer using the BIT macro
#3691: FILE: fs/aufs/inode.h:108:
+#define AuWrDir_ISDIR		(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_##name>
#3692: FILE: fs/aufs/inode.h:109:
+#define au_ftest_wrdir(flags, name)	((flags) & AuWrDir_##name)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3700: FILE: fs/aufs/inode.h:117:
+};
+int au_wr_dir(struct dentry *dentry, struct dentry *src_dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#3718: FILE: fs/aufs/inode.h:135:
+		struct nameidata *nd);
 		                  ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_XINO>
#3744: FILE: fs/aufs/inode.h:161:
+#define AuHi_XINO	1

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_HINOTIFY>
#3745: FILE: fs/aufs/inode.h:162:
+#define AuHi_HINOTIFY	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#3745: FILE: fs/aufs/inode.h:162:
+#define AuHi_HINOTIFY	(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_##name>
#3746: FILE: fs/aufs/inode.h:163:
+#define au_ftest_hi(flags, name)	((flags) & AuHi_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD>
#3786: FILE: fs/aufs/inode.h:203:
+	AuLsc_II_CHILD,		/* child first */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD2>
#3787: FILE: fs/aufs/inode.h:204:
+	AuLsc_II_CHILD2,	/* rename(2), link(2), and cpup at hinotify */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD3>
#3788: FILE: fs/aufs/inode.h:205:
+	AuLsc_II_CHILD3,	/* copyup dirs */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT>
#3789: FILE: fs/aufs/inode.h:206:
+	AuLsc_II_PARENT,	/* see AuLsc_I_PARENT in vfsub.h */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT2>
#3790: FILE: fs/aufs/inode.h:207:
+	AuLsc_II_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT3>
#3791: FILE: fs/aufs/inode.h:208:
+	AuLsc_II_PARENT3,	/* copyup dirs */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_NEW_CHILD>
#3792: FILE: fs/aufs/inode.h:209:
+	AuLsc_II_NEW_CHILD

CHECK:CAMELCASE: Avoid CamelCase: <AuReadLockFunc>
#3804: FILE: fs/aufs/inode.h:221:
+#define AuReadLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_##lsc>
#3807: FILE: fs/aufs/inode.h:224:
+	down_read_nested(&au_ii(i)->ii_rwsem, AuLsc_II_##lsc); \

CHECK:CAMELCASE: Avoid CamelCase: <AuWriteLockFunc>
#3810: FILE: fs/aufs/inode.h:227:
+#define AuWriteLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuRWLockFuncs>
#3816: FILE: fs/aufs/inode.h:233:
+#define AuRWLockFuncs(name, lsc) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3816: FILE: fs/aufs/inode.h:233:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#3816: FILE: fs/aufs/inode.h:233:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lsc' - possible side-effects?
#3816: FILE: fs/aufs/inode.h:233:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleUnlockRwsemFuncs>
#3835: FILE: fs/aufs/inode.h:252:
+AuSimpleUnlockRwsemFuncs(ii, struct inode *i, &au_ii(i)->ii_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustNoWaiters>
#3837: FILE: fs/aufs/inode.h:254:
+#define IiMustNoWaiters(i)	AuRwMustNoWaiters(&au_ii(i)->ii_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#3837: FILE: fs/aufs/inode.h:254:
+#define IiMustNoWaiters(i)	AuRwMustNoWaiters(&au_ii(i)->ii_rwsem)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3854: FILE: fs/aufs/inode.h:271:
+	return !(iinfo->ii_hsb1 == h_inode->i_sb
+		 && iinfo->ii_higen == h_inode->i_generation);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#3943: FILE: fs/aufs/inode.h:360:
+		if (lflag) {
[...]
+		} else {
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 57 warnings, 149 checks, 3966 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154197.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
