WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#82: FILE: Makefile:4:
+EXTRAVERSION = .24
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#163: FILE: drivers/md/bitmap.c:1016:
+			int needed = ((sector_t)(i+1) << (CHUNK_BLOCK_SHIFT(bitmap))
 			                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#215: FILE: drivers/md/md.c:2775:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#237: FILE: drivers/md/raid10.c:1812:
+				for (j=0; j<conf->raid_disks; j++)
 				      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#237: FILE: drivers/md/raid10.c:1812:
+				for (j=0; j<conf->raid_disks; j++)
 				           ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf->mirrors[j].rdev"
#238: FILE: drivers/md/raid10.c:1813:
+					if (conf->mirrors[j].rdev == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <Faulty>
#239: FILE: drivers/md/raid10.c:1814:
+					    test_bit(Faulty, &conf->mirrors[j].rdev->flags)) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: fs/buffer.c:2433:
+	if (unlikely(ret)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#397: FILE: fs/buffer.c:2439:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <UniStrnlen>
#436: FILE: fs/cifs/cifssmb.c:97:
+		src_len = UniStrnlen((wchar_t *)src, maxlen);

CHECK:CAMELCASE: Avoid CamelCase: <cifs_strfromUCS_le>
#441: FILE: fs/cifs/cifssmb.c:101:
+		dst_len = cifs_strfromUCS_le(*dst, (__le16 *)src, src_len, nls_codepage);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#451: FILE: fs/cifs/cifssmb.c:108:
+		strlcpy(*dst, src, src_len + 1);

CHECK:CAMELCASE: Avoid CamelCase: <serverDomain>
#565: FILE: fs/cifs/sess.c:262:
+	ses->serverDomain = kzalloc((4 * len) + 2, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ses->serverDomain"
#566: FILE: fs/cifs/sess.c:263:
+	if (ses->serverDomain != NULL)

CHECK:CAMELCASE: Avoid CamelCase: <Flags2>
#580: FILE: fs/cifs/sess.c:615:
+	if (smb_buf->Flags2 & SMBFLG2_UNICODE) {

CHECK:SPACING: No space is necessary after a cast
#582: FILE: fs/cifs/sess.c:617:
+		if (((unsigned long) bcc_ptr - (unsigned long) smb_buf) % 2) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#619: FILE: fs/ext4/ext4.h:1087:
+extern int ext4_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_inode"
#727: FILE: fs/nfs/dir.c:1629:
+	if (new_inode != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_inode"
#738: FILE: fs/nfs/dir.c:1639:
+		if (new_inode != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#897: FILE: fs/ocfs2/file.c:2126:
+		if (ret < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#899: FILE: fs/ocfs2/file.c:2128:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: fs/ocfs2/file.c:2161:
+				err = generic_osync_inode(inode, mapping,
+						  OSYNC_METADATA|OSYNC_DATA);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#939: FILE: fs/ocfs2/file.c:2161:
+						  OSYNC_METADATA|OSYNC_DATA);
 						                ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1000: FILE: fs/splice.c:605:
+	smp_mb();

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1001: FILE: fs/splice.c:606:
+	if (waitqueue_active(&pipe->wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1397: FILE: include/linux/buffer_head.h:226:
+int block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf,
 				get_block_t get_block);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1438: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1438: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1438: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'splice_actor *' should also have an identifier name
#1438: FILE: include/linux/splice.h:71:
+extern int splice_from_pipe_feed(struct pipe_inode_info *, struct splice_desc *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1440: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1440: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1440: FILE: include/linux/splice.h:73:
+extern int splice_from_pipe_next(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1442: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1442: FILE: include/linux/splice.h:75:
+extern void splice_from_pipe_begin(struct splice_desc *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1443: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1443: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1443: FILE: include/linux/splice.h:76:
+extern void splice_from_pipe_end(struct pipe_inode_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1445: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_inode_info *' should also have an identifier name
#1445: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pipe_buffer *' should also have an identifier name
#1445: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct splice_desc *' should also have an identifier name
#1445: FILE: include/linux/splice.h:78:
+extern int pipe_to_file(struct pipe_inode_info *, struct pipe_buffer *,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1465: FILE: mm/memory.c:1810:
+			vmf.flags = FAULT_FLAG_WRITE|FAULT_FLAG_MKWRITE;
 			                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1482: FILE: mm/memory.c:1830:
+			if (unlikely(!(tmp & VM_FAULT_LOCKED))) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1489: FILE: mm/memory.c:1837:
+			} else

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1593: FILE: mm/memory.c:2524:
+				vmf.flags = FAULT_FLAG_WRITE|FAULT_FLAG_MKWRITE;
 				                            ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1600: FILE: mm/memory.c:2531:
+				if (unlikely(!(tmp & VM_FAULT_LOCKED))) {
[...]
+				} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1607: FILE: mm/memory.c:2538:
+				} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 16 warnings, 31 checks, 1411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000122902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
