WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
> > > +	 * Unlike OMAP1 controller, the cmdtype does not seem to be based on

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#177: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: drivers/mmc/host/omap_hsmmc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#183: FILE: drivers/mmc/host/omap_hsmmc.c:2:
+ * drivers/mmc/host/omap_hsmmc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#235: FILE: drivers/mmc/host/omap_hsmmc.c:54:
+#define VS18			(1 << 26)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#236: FILE: drivers/mmc/host/omap_hsmmc.c:55:
+#define VS30			(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#242: FILE: drivers/mmc/host/omap_hsmmc.c:61:
+#define SDBP			(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#246: FILE: drivers/mmc/host/omap_hsmmc.c:65:
+#define CEN			(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#252: FILE: drivers/mmc/host/omap_hsmmc.c:71:
+#define INIT_STREAM		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: drivers/mmc/host/omap_hsmmc.c:72:
+#define DP_SELECT		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#254: FILE: drivers/mmc/host/omap_hsmmc.c:73:
+#define DDIR			(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#256: FILE: drivers/mmc/host/omap_hsmmc.c:75:
+#define MSBS			(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#257: FILE: drivers/mmc/host/omap_hsmmc.c:76:
+#define BCE			(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#258: FILE: drivers/mmc/host/omap_hsmmc.c:77:
+#define FOUR_BIT		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#262: FILE: drivers/mmc/host/omap_hsmmc.c:81:
+#define ERR			(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#263: FILE: drivers/mmc/host/omap_hsmmc.c:82:
+#define CMD_TIMEOUT		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#264: FILE: drivers/mmc/host/omap_hsmmc.c:83:
+#define DATA_TIMEOUT		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#265: FILE: drivers/mmc/host/omap_hsmmc.c:84:
+#define CMD_CRC			(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#266: FILE: drivers/mmc/host/omap_hsmmc.c:85:
+#define DATA_CRC		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#267: FILE: drivers/mmc/host/omap_hsmmc.c:86:
+#define CARD_ERR		(1 << 28)

CHECK:BIT_MACRO: Prefer using the BIT macro
#271: FILE: drivers/mmc/host/omap_hsmmc.c:90:
+#define SRC			(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#272: FILE: drivers/mmc/host/omap_hsmmc.c:91:
+#define SRD			(1 << 26)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'host' - possible side-effects?
#294: FILE: drivers/mmc/host/omap_hsmmc.c:113:
+#define mmc_slot(host)		(host->pdata->slots[host->slot_id])

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#294: FILE: drivers/mmc/host/omap_hsmmc.c:113:
+#define mmc_slot(host)		(host->pdata->slots[host->slot_id])

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: drivers/mmc/host/omap_hsmmc.c:160:
+	OMAP_HSMMC_WRITE(host->base, SYSCTL,
+		OMAP_HSMMC_READ(host->base, SYSCTL) & ~CEN);

WARNING:TYPO_SPELLING: 'stoped' may be misspelled - perhaps 'stopped'?
#343: FILE: drivers/mmc/host/omap_hsmmc.c:162:
+		dev_dbg(mmc_dev(host->mmc), "MMC Clock is not stoped\n");
 		                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: drivers/mmc/host/omap_hsmmc.c:176:
+	OMAP_HSMMC_WRITE(host->base, CON,
+		OMAP_HSMMC_READ(host->base, CON) | INIT_STREAM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: drivers/mmc/host/omap_hsmmc.c:184:
+	OMAP_HSMMC_WRITE(host->base, CON,
+		OMAP_HSMMC_READ(host->base, CON) & ~INIT_STREAM);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'mmc_omap_show_cover_switch' to 'cover_switch_show'
#389: FILE: drivers/mmc/host/omap_hsmmc.c:208:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#391: FILE: drivers/mmc/host/omap_hsmmc.c:210:
+static DEVICE_ATTR(cover_switch, S_IRUGO, mmc_omap_show_cover_switch, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'mmc_omap_show_slot_name' to 'slot_name_show'
#402: FILE: drivers/mmc/host/omap_hsmmc.c:221:
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#404: FILE: drivers/mmc/host/omap_hsmmc.c:223:
+static DEVICE_ATTR(slot_name, S_IRUGO, mmc_omap_show_slot_name, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#411: FILE: drivers/mmc/host/omap_hsmmc.c:230:
+mmc_omap_start_command(struct mmc_omap_host *host, struct mmc_command *cmd,
+	struct mmc_data *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: drivers/mmc/host/omap_hsmmc.c:287:
+		dma_unmap_sg(mmc_dev(host->mmc), data->sg, host->dma_len,
+			host->dma_dir);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#505: FILE: drivers/mmc/host/omap_hsmmc.c:324:
+	if (host->data == NULL || cmd->error) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#520: FILE: drivers/mmc/host/omap_hsmmc.c:339:
+		dma_unmap_sg(mmc_dev(host->mmc), host->data->sg, host->dma_len,
+			host->dma_dir);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#536: FILE: drivers/mmc/host/omap_hsmmc.c:355:
+	static const char *mmc_omap_status_bits[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#559: FILE: drivers/mmc/host/omap_hsmmc.c:378:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->cmd"
#569: FILE: drivers/mmc/host/omap_hsmmc.c:388:
+	if (host->cmd == NULL && host->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->data"
#569: FILE: drivers/mmc/host/omap_hsmmc.c:388:
+	if (host->cmd == NULL && host->data == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/mmc/host/omap_hsmmc.c:390:
+		OMAP_HSMMC_WRITE(host->base, STAT,
+			OMAP_HSMMC_READ(host->base, STAT));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/mmc/host/omap_hsmmc.c:403:
+		if ((status & CMD_TIMEOUT) ||
+			(status & CMD_CRC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: drivers/mmc/host/omap_hsmmc.c:407:
+					OMAP_HSMMC_WRITE(host->base, SYSCTL,
+						OMAP_HSMMC_READ(host->base,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/mmc/host/omap_hsmmc.c:410:
+					while (OMAP_HSMMC_READ(host->base,
+							SYSCTL) & SRC)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/mmc/host/omap_hsmmc.c:423:
+		if ((status & DATA_TIMEOUT) ||
+			(status & DATA_CRC)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/mmc/host/omap_hsmmc.c:430:
+				OMAP_HSMMC_WRITE(host->base, SYSCTL,
+					OMAP_HSMMC_READ(host->base,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: drivers/mmc/host/omap_hsmmc.c:433:
+				while (OMAP_HSMMC_READ(host->base,
+						SYSCTL) & SRD)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#667: FILE: drivers/mmc/host/omap_hsmmc.c:486:
+	OMAP_HSMMC_WRITE(host->base, HCTL,
+		OMAP_HSMMC_READ(host->base, HCTL) & SDVSCLR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/mmc/host/omap_hsmmc.c:497:
+	if (host->id == OMAP_MMC1_DEVID && (((1 << vdd) == MMC_VDD_32_33) ||
+				((1 << vdd) == MMC_VDD_33_34)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/mmc/host/omap_hsmmc.c:505:
+	OMAP_HSMMC_WRITE(host->base, HCTL,
+		OMAP_HSMMC_READ(host->base, HCTL) | SDBP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: drivers/mmc/host/omap_hsmmc.c:526:
+		OMAP_HSMMC_WRITE(host->base, SYSCTL,
+			OMAP_HSMMC_READ(host->base, SYSCTL) | SRD);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#754: FILE: drivers/mmc/host/omap_hsmmc.c:573:
+static int mmc_omap_config_dma_param(int sync_dir, struct mmc_omap_host *host,
+				struct mmc_data *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: drivers/mmc/host/omap_hsmmc.c:577:
+		omap_set_dma_dest_params(host->dma_ch, 0,
+			OMAP_DMA_AMODE_CONSTANT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: drivers/mmc/host/omap_hsmmc.c:580:
+		omap_set_dma_src_params(host->dma_ch, 0,
+			OMAP_DMA_AMODE_POST_INC,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: drivers/mmc/host/omap_hsmmc.c:584:
+		omap_set_dma_src_params(host->dma_ch, 0,
+			OMAP_DMA_AMODE_CONSTANT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: drivers/mmc/host/omap_hsmmc.c:587:
+		omap_set_dma_dest_params(host->dma_ch, 0,
+			OMAP_DMA_AMODE_POST_INC,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#773: FILE: drivers/mmc/host/omap_hsmmc.c:592:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#816: FILE: drivers/mmc/host/omap_hsmmc.c:635:
+	ret = omap_request_dma(sync_dev, "MMC/SD", mmc_omap_dma_cb,
+			host, &dma_ch);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#825: FILE: drivers/mmc/host/omap_hsmmc.c:644:
+	host->dma_len = dma_map_sg(mmc_dev(host->mmc), data->sg,
+			data->sg_len, host->dma_dir);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#835: FILE: drivers/mmc/host/omap_hsmmc.c:654:
+		omap_set_dma_transfer_params(dma_ch, OMAP_DMA_DATA_TYPE_S32,
+			(data->blksz / 4), data->blocks, OMAP_DMA_SYNC_FRAME,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#851: FILE: drivers/mmc/host/omap_hsmmc.c:670:
+	uint32_t reg, clkd, dto = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: drivers/mmc/host/omap_hsmmc.c:709:
+	int ret;
+	host->data = req->data;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req->data"
#892: FILE: drivers/mmc/host/omap_hsmmc.c:711:
+	if (req->data == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mrq"
#922: FILE: drivers/mmc/host/omap_hsmmc.c:741:
+	WARN_ON(host->mrq != NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#928: FILE: drivers/mmc/host/omap_hsmmc.c:747:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#947: FILE: drivers/mmc/host/omap_hsmmc.c:766:
+			int vdd = fls(host->mmc->ocr_avail) - 1;
+			if (omap_mmc_switch_opcond(host, vdd) != 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#959: FILE: drivers/mmc/host/omap_hsmmc.c:778:
+		OMAP_HSMMC_WRITE(host->base, HCTL,
+			OMAP_HSMMC_READ(host->base, HCTL) | FOUR_BIT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#963: FILE: drivers/mmc/host/omap_hsmmc.c:782:
+		OMAP_HSMMC_WRITE(host->base, HCTL,
+			OMAP_HSMMC_READ(host->base, HCTL) & ~FOUR_BIT);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#969: FILE: drivers/mmc/host/omap_hsmmc.c:788:
+		if ((OMAP_HSMMC_READ(host->base, HCTL) & SDVSDET) &&
[...]
+				if (omap_mmc_switch_opcond(host, ios->vdd) != 0)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ios->vdd == DUAL_VOLT_OCR_BIT'
#969: FILE: drivers/mmc/host/omap_hsmmc.c:788:
+		if ((OMAP_HSMMC_READ(host->base, HCTL) & SDVSDET) &&
+			(ios->vdd == DUAL_VOLT_OCR_BIT)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/mmc/host/omap_hsmmc.c:789:
+		if ((OMAP_HSMMC_READ(host->base, HCTL) & SDVSDET) &&
+			(ios->vdd == DUAL_VOLT_OCR_BIT)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1000: FILE: drivers/mmc/host/omap_hsmmc.c:819:
+	OMAP_HSMMC_WRITE(host->base, SYSCTL,
+		OMAP_HSMMC_READ(host->base, SYSCTL) | ICE);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1005: FILE: drivers/mmc/host/omap_hsmmc.c:824:
+	while ((OMAP_HSMMC_READ(host->base, SYSCTL) & ICS) != 0x2
+		&& time_before(jiffies, timeout))

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#1006: FILE: drivers/mmc/host/omap_hsmmc.c:825:
+		msleep(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: drivers/mmc/host/omap_hsmmc.c:828:
+	OMAP_HSMMC_WRITE(host->base, SYSCTL,
+		OMAP_HSMMC_READ(host->base, SYSCTL) | CEN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: drivers/mmc/host/omap_hsmmc.c:835:
+		OMAP_HSMMC_WRITE(host->base, CON,
+				OMAP_HSMMC_READ(host->base, CON) | OD);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1025: FILE: drivers/mmc/host/omap_hsmmc.c:844:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1035: FILE: drivers/mmc/host/omap_hsmmc.c:854:
+		return -ENOSYS;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdata"
#1056: FILE: drivers/mmc/host/omap_hsmmc.c:875:
+	if (pdata == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#1068: FILE: drivers/mmc/host/omap_hsmmc.c:887:
+	if (res == NULL || irq < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1072: FILE: drivers/mmc/host/omap_hsmmc.c:891:
+	res = request_mem_region(res->start, res->end - res->start + 1,
+							pdev->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!res"
#1073: FILE: drivers/mmc/host/omap_hsmmc.c:892:
+	if (res == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#1140: FILE: drivers/mmc/host/omap_hsmmc.c:959:
+			dev_dbg(mmc_dev(host->mmc), "Enabling debounce"
+							" clk failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1169: FILE: drivers/mmc/host/omap_hsmmc.c:988:
+	OMAP_HSMMC_WRITE(host->base, HCTL,
+			OMAP_HSMMC_READ(host->base, HCTL) | hctl);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/mmc/host/omap_hsmmc.c:991:
+	OMAP_HSMMC_WRITE(host->base, CAPA,
+			OMAP_HSMMC_READ(host->base, CAPA) | capa);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1176: FILE: drivers/mmc/host/omap_hsmmc.c:995:
+	OMAP_HSMMC_WRITE(host->base, SYSCONFIG,
+			OMAP_HSMMC_READ(host->base, SYSCONFIG) | AUTOIDLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: drivers/mmc/host/omap_hsmmc.c:999:
+	OMAP_HSMMC_WRITE(host->base, HCTL,
+			OMAP_HSMMC_READ(host->base, HCTL) | SDBP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: drivers/mmc/host/omap_hsmmc.c:1003:
+	ret = request_irq(host->irq, mmc_omap_irq, IRQF_DISABLED,
+			mmc_hostname(mmc), host);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pdata->init"
#1190: FILE: drivers/mmc/host/omap_hsmmc.c:1009:
+	if (pdata->init != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->pdata->slots[host->slot_id].name"
#1217: FILE: drivers/mmc/host/omap_hsmmc.c:1036:
+	if (host->pdata->slots[host->slot_id].name != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1223: FILE: drivers/mmc/host/omap_hsmmc.c:1042:
+	if (mmc_slot(host).card_detect_irq && mmc_slot(host).card_detect &&
+			host->pdata->slots[host->slot_id].get_cover_state) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1225: FILE: drivers/mmc/host/omap_hsmmc.c:1044:
+		ret = device_create_file(&mmc->class_dev,
+					&dev_attr_cover_switch);

WARNING:SPLIT_STRING: quoted string split across lines
#1318: FILE: drivers/mmc/host/omap_hsmmc.c:1137:
+						"Unable to handle MMC board"
+						" level suspend\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1323: FILE: drivers/mmc/host/omap_hsmmc.c:1142:
+				OMAP_HSMMC_WRITE(host->base, HCTL,
+					OMAP_HSMMC_READ(host->base, HCTL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1326: FILE: drivers/mmc/host/omap_hsmmc.c:1145:
+				OMAP_HSMMC_WRITE(host->base, HCTL,
+					OMAP_HSMMC_READ(host->base, HCTL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1329: FILE: drivers/mmc/host/omap_hsmmc.c:1148:
+				OMAP_HSMMC_WRITE(host->base, HCTL,
+					OMAP_HSMMC_READ(host->base, HCTL)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1338: FILE: drivers/mmc/host/omap_hsmmc.c:1157:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1352: FILE: drivers/mmc/host/omap_hsmmc.c:1171:
+	if (host) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1366: FILE: drivers/mmc/host/omap_hsmmc.c:1185:
+			dev_dbg(mmc_dev(host->mmc),
+					"Enabling debounce clk failed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188986.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 81 checks, 1265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000188986.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
