WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
echo $TG_PT_GROUP_NAME > $FABRIC_MOD/$TARGETNAME/$TPGT/lun/lun_0/alua_tg_pt_gp

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#96: FILE: drivers/lio-core/target_core_configfs.c:1249:
+static ssize_t target_core_show_alua_lu_gp (void *p, char *page)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#104: FILE: drivers/lio-core/target_core_configfs.c:1257:
+^Iif (!(dev = su_dev->se_dev_ptr)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#104: FILE: drivers/lio-core/target_core_configfs.c:1257:
+	if (!(dev = su_dev->se_dev_ptr)) 

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#108: FILE: drivers/lio-core/target_core_configfs.c:1261:
+	if ((lu_gp = dev->dev_alua_lu_gp)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#113: FILE: drivers/lio-core/target_core_configfs.c:1266:
+^Ispin_unlock(&dev->dev_alua_lock);^I$

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#115: FILE: drivers/lio-core/target_core_configfs.c:1268:
+	return(len);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#118: FILE: drivers/lio-core/target_core_configfs.c:1271:
+static ssize_t target_core_store_alua_lu_gp (void *p, const char *page, size_t count)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: drivers/lio-core/target_core_configfs.c:1280:
+^Iif (!(dev = su_dev->se_dev_ptr)) $

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#127: FILE: drivers/lio-core/target_core_configfs.c:1280:
+	if (!(dev = su_dev->se_dev_ptr)) 

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#131: FILE: drivers/lio-core/target_core_configfs.c:1284:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for %s/%s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: drivers/lio-core/target_core_configfs.c:1285:
+		printk(KERN_WARNING "SPC3_ALUA_EMULATED not enabled for %s/%s\n",
+			config_item_name(&hba->hba_group.cg_item),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#137: FILE: drivers/lio-core/target_core_configfs.c:1290:
+		printk(KERN_ERR "ALUA LU Group Alias too large!\n");

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#144: FILE: drivers/lio-core/target_core_configfs.c:1297:
+	if ((lu_gp = dev->dev_alua_lu_gp)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#146: FILE: drivers/lio-core/target_core_configfs.c:1299:
+			printk("Target_Core_ConfigFS: Releasing %s/%s from ALUA"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#146: FILE: drivers/lio-core/target_core_configfs.c:1299:
+			printk("Target_Core_ConfigFS: Releasing %s/%s from ALUA"
+				" LU Group: core/alua/lu_gps/%s, ID: %hu\n",  
+				config_item_name(&hba->hba_group.cg_item),
+				config_item_name(&su_dev->se_dev_group.cg_item),
+				config_item_name(&lu_gp->lu_gp_group.cg_item),
+				lu_gp->lu_gp_id);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#147: FILE: drivers/lio-core/target_core_configfs.c:1300:
+^I^I^I^I" LU Group: core/alua/lu_gps/%s, ID: %hu\n",  $

WARNING:SPLIT_STRING: quoted string split across lines
#147: FILE: drivers/lio-core/target_core_configfs.c:1300:
+			printk("Target_Core_ConfigFS: Releasing %s/%s from ALUA"
+				" LU Group: core/alua/lu_gps/%s, ID: %hu\n",  

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#156: FILE: drivers/lio-core/target_core_configfs.c:1309:
+			return(count);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#161: FILE: drivers/lio-core/target_core_configfs.c:1314:
+	if (!(lu_gp_new = core_alua_get_lu_gp_by_name(dev, strstrip(buf))))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#170: FILE: drivers/lio-core/target_core_configfs.c:1323:
+	printk("Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#170: FILE: drivers/lio-core/target_core_configfs.c:1323:
+	printk("Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",
+		(move) ? "Moving" : "Adding",
+		config_item_name(&hba->hba_group.cg_item),
+		config_item_name(&su_dev->se_dev_group.cg_item),
+		config_item_name(&lu_gp_new->lu_gp_group.cg_item),
+		lu_gp_new->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#171: FILE: drivers/lio-core/target_core_configfs.c:1324:
+	printk("Target_Core_ConfigFS: %s %s/%s to ALUA LU Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#178: FILE: drivers/lio-core/target_core_configfs.c:1331:
+	return(count);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#184: FILE: drivers/lio-core/target_core_configfs.c:1337:
+		    .ca_mode = S_IRUGO | S_IWUSR },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#205: FILE: drivers/lio-core/target_core_configfs.c:1398:
+#define SE_DEV_ALUA_LU_ATTR_RO(_name)						\
+static struct target_core_alua_lu_gp_attribute target_core_alua_lu_gp_##_name =	\
+	__CONFIGFS_EATTR_RO(_name,						\
+	target_core_alua_lu_gp_show_attr_##_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#213: FILE: drivers/lio-core/target_core_configfs.c:1406:
+static ssize_t target_core_alua_lu_gp_show_attr_alua_access_state (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#213: FILE: drivers/lio-core/target_core_configfs.c:1406:
+static ssize_t target_core_alua_lu_gp_show_attr_alua_access_state (

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#217: FILE: drivers/lio-core/target_core_configfs.c:1410:
+	return(sprintf(page, "%d\n", lu_gp->lu_gp_alua_access_state));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#225: FILE: drivers/lio-core/target_core_configfs.c:1418:
+static ssize_t target_core_alua_lu_gp_show_attr_lu_gp_id (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#225: FILE: drivers/lio-core/target_core_configfs.c:1418:
+static ssize_t target_core_alua_lu_gp_show_attr_lu_gp_id (

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#229: FILE: drivers/lio-core/target_core_configfs.c:1422:
+	return(sprintf(page, "%hu\n", lu_gp->lu_gp_id));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#237: FILE: drivers/lio-core/target_core_configfs.c:1430:
+static ssize_t target_core_alua_lu_gp_show_attr_members (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#237: FILE: drivers/lio-core/target_core_configfs.c:1430:
+static ssize_t target_core_alua_lu_gp_show_attr_members (

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: drivers/lio-core/target_core_configfs.c:1448:
+		cur_len = snprintf(buf, 256, "%s/%s\n",
+			config_item_name(&su_dev->se_dev_group.cg_item),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#260: FILE: drivers/lio-core/target_core_configfs.c:1453:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: drivers/lio-core/target_core_configfs.c:1454:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#261: FILE: drivers/lio-core/target_core_configfs.c:1454:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: drivers/lio-core/target_core_configfs.c:1457:
+		memcpy(page+len, buf, cur_len);
 		           ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#269: FILE: drivers/lio-core/target_core_configfs.c:1462:
+	return(len);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#298: FILE: drivers/lio-core/target_core_configfs.c:1491:
+static struct config_group *target_core_alua_create_lu_gp (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#298: FILE: drivers/lio-core/target_core_configfs.c:1491:
+static struct config_group *target_core_alua_create_lu_gp (

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#306: FILE: drivers/lio-core/target_core_configfs.c:1499:
+	if (!(lu_gp = core_alua_allocate_lu_gp(name)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/lio-core/target_core_configfs.c:1506:
+	config_group_init_type_name(alua_lu_gp_cg, name,
+			&target_core_alua_lu_gp_cit);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: drivers/lio-core/target_core_configfs.c:1507:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: drivers/lio-core/target_core_configfs.c:1508:
+	printk("Target_Core_ConfigFS: Allocated ALUA Logical Unit Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#315: FILE: drivers/lio-core/target_core_configfs.c:1508:
+	printk("Target_Core_ConfigFS: Allocated ALUA Logical Unit Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",
+		config_item_name(alua_lu_gp_ci), lu_gp->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#316: FILE: drivers/lio-core/target_core_configfs.c:1509:
+	printk("Target_Core_ConfigFS: Allocated ALUA Logical Unit Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#319: FILE: drivers/lio-core/target_core_configfs.c:1512:
+	return(alua_lu_gp_cg);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: drivers/lio-core/target_core_configfs.c:1513:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#321: FILE: drivers/lio-core/target_core_configfs.c:1514:
+		
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#323: FILE: drivers/lio-core/target_core_configfs.c:1516:
+static void target_core_alua_drop_lu_gp (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#323: FILE: drivers/lio-core/target_core_configfs.c:1516:
+static void target_core_alua_drop_lu_gp (

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: drivers/lio-core/target_core_configfs.c:1523:
+	printk("Target_Core_ConfigFS: Releasing ALUA Logical Unit Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#330: FILE: drivers/lio-core/target_core_configfs.c:1523:
+	printk("Target_Core_ConfigFS: Releasing ALUA Logical Unit Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n", config_item_name(item),
+		lu_gp->lu_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#331: FILE: drivers/lio-core/target_core_configfs.c:1524:
+	printk("Target_Core_ConfigFS: Releasing ALUA Logical Unit Group:"
+		" core/alua/lu_gps/%s, ID: %hu\n", config_item_name(item),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: drivers/lio-core/target_core_configfs.c:1528:
+^Icore_alua_free_lu_gp(lu_gp);^I$

WARNING:RETURN_VOID: void function return statements are not generally useful
#337: FILE: drivers/lio-core/target_core_configfs.c:1530:
+	return;
+}

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#354: FILE: drivers/lio-core/target_core_configfs.c:1547:
+#define SE_DEV_ALUA_TG_PT_ATTR_RO(_name)						\
+static struct target_core_alua_tg_pt_gp_attribute target_core_alua_tg_pt_gp_##_name =	\
+	__CONFIGFS_EATTR_RO(_name,							\
+	target_core_alua_tg_pt_gp_show_attr_##_name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#362: FILE: drivers/lio-core/target_core_configfs.c:1555:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_state (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#362: FILE: drivers/lio-core/target_core_configfs.c:1555:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_alua_access_state (

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#366: FILE: drivers/lio-core/target_core_configfs.c:1559:
+	return(sprintf(page, "%d\n", tg_pt_gp->tg_pt_gp_alua_access_state));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#374: FILE: drivers/lio-core/target_core_configfs.c:1567:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_tg_pt_gp_id (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#374: FILE: drivers/lio-core/target_core_configfs.c:1567:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_tg_pt_gp_id (

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#378: FILE: drivers/lio-core/target_core_configfs.c:1571:
+	return(sprintf(page, "%hu\n", tg_pt_gp->tg_pt_gp_id));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#386: FILE: drivers/lio-core/target_core_configfs.c:1579:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_members (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#386: FILE: drivers/lio-core/target_core_configfs.c:1579:
+static ssize_t target_core_alua_tg_pt_gp_show_attr_members (

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: drivers/lio-core/target_core_configfs.c:1597:
+		cur_len = snprintf(buf, 256, "%s/tpgt_%hu/%s\n",
+			TPG_TFO(tpg)->tpg_get_wwn(tpg),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#410: FILE: drivers/lio-core/target_core_configfs.c:1603:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"

WARNING:SPLIT_STRING: quoted string split across lines
#411: FILE: drivers/lio-core/target_core_configfs.c:1604:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#411: FILE: drivers/lio-core/target_core_configfs.c:1604:
+			printk(KERN_WARNING "Ran out of lu_gp_show_attr"
+				"_members buffer\n");

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#414: FILE: drivers/lio-core/target_core_configfs.c:1607:
+		memcpy(page+len, buf, cur_len);
 		           ^

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#419: FILE: drivers/lio-core/target_core_configfs.c:1612:
+	return(len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#441: FILE: drivers/lio-core/target_core_configfs.c:1634:
+        .ct_owner               = THIS_MODULE,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#441: FILE: drivers/lio-core/target_core_configfs.c:1634:
+        .ct_owner               = THIS_MODULE,$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#448: FILE: drivers/lio-core/target_core_configfs.c:1641:
+static struct config_group *target_core_alua_create_tg_pt_gp (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#448: FILE: drivers/lio-core/target_core_configfs.c:1641:
+static struct config_group *target_core_alua_create_tg_pt_gp (

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#456: FILE: drivers/lio-core/target_core_configfs.c:1649:
+	if (!(tg_pt_gp = core_alua_allocate_tg_pt_gp(name)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/lio-core/target_core_configfs.c:1656:
+	config_group_init_type_name(alua_tg_pt_gp_cg, name,
+			&target_core_alua_tg_pt_gp_cit);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#464: FILE: drivers/lio-core/target_core_configfs.c:1657:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#465: FILE: drivers/lio-core/target_core_configfs.c:1658:
+	printk("Target_Core_ConfigFS: Allocated ALUA Target Port Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#465: FILE: drivers/lio-core/target_core_configfs.c:1658:
+	printk("Target_Core_ConfigFS: Allocated ALUA Target Port Group:"
+		" core/alua/tg_pt_gps/%s, ID: %hu\n",
+		config_item_name(alua_tg_pt_gp_ci), tg_pt_gp->tg_pt_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: drivers/lio-core/target_core_configfs.c:1659:
+	printk("Target_Core_ConfigFS: Allocated ALUA Target Port Group:"
+		" core/alua/tg_pt_gps/%s, ID: %hu\n",

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#469: FILE: drivers/lio-core/target_core_configfs.c:1662:
+	return(alua_tg_pt_gp_cg);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#472: FILE: drivers/lio-core/target_core_configfs.c:1665:
+static void target_core_alua_drop_tg_pt_gp (

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#472: FILE: drivers/lio-core/target_core_configfs.c:1665:
+static void target_core_alua_drop_tg_pt_gp (

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#479: FILE: drivers/lio-core/target_core_configfs.c:1672:
+	printk("Target_Core_ConfigFS: Releasing ALUA Target Port Group:"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#479: FILE: drivers/lio-core/target_core_configfs.c:1672:
+	printk("Target_Core_ConfigFS: Releasing ALUA Target Port Group:"
+		" core/alua/tg_pt_gps/%s, ID: %hu\n", config_item_name(item),
+		tg_pt_gp->tg_pt_gp_id);

WARNING:SPLIT_STRING: quoted string split across lines
#480: FILE: drivers/lio-core/target_core_configfs.c:1673:
+	printk("Target_Core_ConfigFS: Releasing ALUA Target Port Group:"
+		" core/alua/tg_pt_gps/%s, ID: %hu\n", config_item_name(item),

WARNING:RETURN_VOID: void function return statements are not generally useful
#486: FILE: drivers/lio-core/target_core_configfs.c:1679:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#542: FILE: drivers/lio-core/target_core_configfs.c:2020:
+        init_scsi_index_table();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#542: FILE: drivers/lio-core/target_core_configfs.c:2020:
+        init_scsi_index_table();$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#544: FILE: drivers/lio-core/target_core_configfs.c:2022:
+	if ((ret = init_se_global()) < 0)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#555: FILE: drivers/lio-core/target_core_configfs.c:2031:
+		printk(KERN_ERR "Unable to allocate target_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/lio-core/target_core_configfs.c:2036:
+	config_group_init_type_name(&se_global->target_core_hbagroup,
 		 	"core", &target_core_cit);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#569: FILE: drivers/lio-core/target_core_configfs.c:2043:
+	if (!(hba_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*hba_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#569: FILE: drivers/lio-core/target_core_configfs.c:2043:
+	if (!(hba_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/lio-core/target_core_configfs.c:2044:
+	if (!(hba_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#571: FILE: drivers/lio-core/target_core_configfs.c:2045:
+		printk(KERN_ERR "Unable to allocate hba_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: drivers/lio-core/target_core_configfs.c:2049:
+	config_group_init_type_name(&se_global->alua_group,
+			"alua", &target_core_alua_cit);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#583: FILE: drivers/lio-core/target_core_configfs.c:2057:
+	if (!(alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*alua_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#583: FILE: drivers/lio-core/target_core_configfs.c:2057:
+	if (!(alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/lio-core/target_core_configfs.c:2058:
+	if (!(alua_cg->default_groups = kzalloc(sizeof(struct config_group) * 3,
+			GFP_KERNEL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#585: FILE: drivers/lio-core/target_core_configfs.c:2059:
+		printk(KERN_ERR "Unable to allocate alua_cg->default_groups\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#588: FILE: drivers/lio-core/target_core_configfs.c:2062:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: drivers/lio-core/target_core_configfs.c:2064:
+	config_group_init_type_name(&se_global->alua_lu_gps_group,
+			"lu_gps", &target_core_alua_lu_gps_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: drivers/lio-core/target_core_configfs.c:2066:
+	config_group_init_type_name(&se_global->alua_tg_pt_gps_group,
+			"tg_pt_gps", &target_core_alua_tg_pt_gps_cit);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#599: FILE: drivers/lio-core/target_core_configfs.c:2073:
+	if (!(lu_gp = core_alua_allocate_lu_gp("default_lu_gp")))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#603: FILE: drivers/lio-core/target_core_configfs.c:2077:
+	if (!(lu_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*lu_gp_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#603: FILE: drivers/lio-core/target_core_configfs.c:2077:
+	if (!(lu_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: drivers/lio-core/target_core_configfs.c:2078:
+	if (!(lu_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#605: FILE: drivers/lio-core/target_core_configfs.c:2079:
+		printk(KERN_ERR "Unable to allocate lu_gp_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/lio-core/target_core_configfs.c:2084:
+	config_group_init_type_name(&lu_gp->lu_gp_group, "default_lu_gp",
+				&target_core_alua_lu_gp_cit);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#619: FILE: drivers/lio-core/target_core_configfs.c:2091:
+	if (!(tg_pt_gp = core_alua_allocate_tg_pt_gp("default_tg_pt_gp")))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#623: FILE: drivers/lio-core/target_core_configfs.c:2095:
+	if (!(tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tg_pt_gp_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#623: FILE: drivers/lio-core/target_core_configfs.c:2095:
+	if (!(tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: drivers/lio-core/target_core_configfs.c:2096:
+	if (!(tg_pt_gp_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#625: FILE: drivers/lio-core/target_core_configfs.c:2097:
+		printk(KERN_ERR "Unable to allocate tg_pt_gp_cg->default_groups\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/lio-core/target_core_configfs.c:2102:
+	config_group_init_type_name(&tg_pt_gp->tg_pt_gp_group, "default_tg_pt_gp",
+				&target_core_alua_tg_pt_gp_cit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000170761.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 36 errors, 51 warnings, 32 checks, 648 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000170761.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
