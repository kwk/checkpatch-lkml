WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#19: 
Subject: [PATCH 02/05] Linux Kernel Markers, architecture independant code.
                                                          ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#28: 
Linux Kernel Markers, architecture independant code.
                                   ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#70: FILE: include/linux/module.h:475:
+extern void list_modules(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: include/linux/marker.h:1:
+#ifndef _LINUX_MARKER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#123: FILE: include/linux/marker.h:47:
+	const char *name;
+	marker_probe_func **call;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#126: FILE: include/linux/marker.h:50:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#131: FILE: include/linux/marker.h:55:
+} __attribute__((packed));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#154: FILE: include/linux/marker.h:78:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#154: FILE: include/linux/marker.h:78:
+#define MARK_ENABLE(a) \
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: include/linux/marker.h:79:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: include/linux/marker.h:79:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#155: FILE: include/linux/marker.h:79:
+	*(MARK_ENABLE_TYPE*)((char*)a+MARK_ENABLE_IMMEDIATE_OFFSET)
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#157: FILE: include/linux/marker.h:81:
+#define GEN_MARK_ENABLE(a) \
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#157: FILE: include/linux/marker.h:81:
+#define GEN_MARK_ENABLE(a) \
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#158: FILE: include/linux/marker.h:82:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#158: FILE: include/linux/marker.h:82:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#158: FILE: include/linux/marker.h:82:
+	*(GEN_MARK_ENABLE_TYPE*)((char*)a+GEN_MARK_ENABLE_IMMEDIATE_OFFSET)
 	                                 ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#160: FILE: include/linux/marker.h:84:
+static inline __attribute__ ((format (printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: include/linux/marker.h:90:
+extern int marker_set_probe(const char *name, const char *format,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#167: FILE: include/linux/marker.h:91:
+extern int marker_set_probe(const char *name, const char *format,
+				marker_probe_func *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#169: FILE: include/linux/marker.h:93:
+extern int marker_remove_probe(marker_probe_func *probe);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#170: FILE: include/linux/marker.h:94:
+extern int marker_list_probe(marker_probe_func *probe);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#180: FILE: kernel/module.c:141:
+extern const struct __mark_marker __start___markers[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#181: FILE: kernel/module.c:142:
+extern const struct __mark_marker __stop___markers[];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#201: FILE: kernel/module.c:315:
+	char newi[MARK_ENABLE_IMMEDIATE_OFFSET+1];
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: kernel/module.c:316:
+	int size = MARK_ENABLE_IMMEDIATE_OFFSET+sizeof(MARK_ENABLE_TYPE);
 	                                       ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: kernel/module.c:345:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#233: FILE: kernel/module.c:347:
+ * the state is always coherent. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#234: FILE: kernel/module.c:348:
+static int marker_set_probe_range(const char *name, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: kernel/module.c:349:
+static int marker_set_probe_range(const char *name, 
+	const char *format,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#246: FILE: kernel/module.c:360:
+			if (format
+				&& strcmp(format, iter->cmark->format) != 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#247: FILE: kernel/module.c:361:
+				printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#249: FILE: kernel/module.c:363:
+					"Format mismatch for probe %s "
+					"(%s), marker (%s)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: kernel/module.c:376:
+				marker_set_enable(iter->enable, 0,
+					iter->cmark->type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#267: FILE: kernel/module.c:381:
+						printk(KERN_NOTICE

WARNING:SPLIT_STRING: quoted string split across lines
#269: FILE: kernel/module.c:383:
+							"Marker %s busy, "
+							"probe %p already "

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: kernel/module.c:384:
+							"probe %p already "
+							"installed\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: kernel/module.c:395:
+				marker_set_enable(iter->enable, 1,
+					iter->cmark->type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: kernel/module.c:404:
+static int marker_remove_probe_range(marker_probe_func *probe,
+	const struct __mark_marker *begin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/module.c:413:
+			marker_set_enable(iter->enable, 0,
+				iter->cmark->type);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: kernel/module.c:422:
+static int marker_list_probe_range(marker_probe_func *probe,
+	const struct __mark_marker *begin,

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#316: FILE: kernel/module.c:430:
+			if (probe != *iter->cmark->call) continue;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#317: FILE: kernel/module.c:431:
+		printk("name %s \n", iter->cmark->name);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#317: FILE: kernel/module.c:431:
+		printk("name %s \n", iter->cmark->name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#319: FILE: kernel/module.c:433:
+			printk("  enable %u optimized ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: kernel/module.c:434:
+			printk("  enable %u optimized ",
+				MARK_ENABLE(iter->enable));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#322: FILE: kernel/module.c:436:
+			printk("  enable %u generic ",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#323: FILE: kernel/module.c:437:
+			printk("  enable %u generic ",
+				GEN_MARK_ENABLE(iter->enable));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#324: FILE: kernel/module.c:438:
+		printk("  func 0x%p format \"%s\"\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: kernel/module.c:439:
+		printk("  func 0x%p format \"%s\"\n",
+			*iter->cmark->call, iter->cmark->format);

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#330: FILE: kernel/module.c:444:
+/* markers use the modlist_lock to to synchronise */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#330: FILE: kernel/module.c:444:
+}
+/* markers use the modlist_lock to to synchronise */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: kernel/module.c:446:
+int marker_set_probe(const char *name, const char *format,
+				marker_probe_func *probe)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: kernel/module.c:455:
+^I/* Markers in modules. */ $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#345: FILE: kernel/module.c:459:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#361: FILE: kernel/module.c:475:
+^I/* Markers in modules. */ $

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#365: FILE: kernel/module.c:479:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#379: FILE: kernel/module.c:493:
+	printk("Listing kernel markers\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#382: FILE: kernel/module.c:496:
+^I/* Markers in modules. */ $

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#383: FILE: kernel/module.c:497:
+	printk("Listing module markers\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#386: FILE: kernel/module.c:500:
+			printk("Listing markers for module %s\n", mod->name);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#388: FILE: kernel/module.c:502:
+				mod->markers, mod->markers+mod->num_markers);
 				                          ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#452: FILE: kernel/module.c:2480:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: kernel/module.c:2488:
+		MARK(list_modules, "%s %d[enum module_state] %lu",
+				mod->name, mod->state, refcount);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 24 warnings, 27 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
