WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#56: 
   is higher then the specified percentage. Fragmentation ratios are measured

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#74: 
mininum number of slabs or until we encounter a slab that has more than a
^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#153: FILE: include/linux/slab.h:67:
+	 * indicate that this wont work and then kick can simply
 	                      ^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#159: FILE: include/linux/slab.h:73:
+	void *(*get)(struct kmem_cache *, int nr, void **);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#159: FILE: include/linux/slab.h:73:
+	void *(*get)(struct kmem_cache *, int nr, void **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#172: FILE: include/linux/slab.h:86:
+	void (*kick)(struct kmem_cache *, int nr, void **, void *private);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void **' should also have an identifier name
#172: FILE: include/linux/slab.h:86:
+	void (*kick)(struct kmem_cache *, int nr, void **, void *private);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#185: FILE: mm/slub.c:246:
+static unsigned int max_defrag_slab_objects = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: mm/slub.c:1315:
+	if (!s->remote_node_defrag_ratio ||
+			get_cycles() % 1024 > s->remote_node_defrag_ratio)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: mm/slub.c:2497:
+static int __kmem_cache_vacate(struct kmem_cache *s,
+		struct page *page, unsigned long flags, void *scratch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: mm/slub.c:2555:
+static unsigned long sort_partial_list(struct kmem_cache *s,
+	struct kmem_cache_node *n, void *scratch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: mm/slub.c:2588:
+			list_move(&page->lru,
+				slabs_by_inuse + inuse);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: mm/slub.c:2606:
+static unsigned long __kmem_cache_shrink(struct kmem_cache *s,
+	struct kmem_cache_node *n, void *scratch)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#376: FILE: mm/slub.c:2620:
+	 * then we are done.
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <SetSlabFrozen>
#403: FILE: mm/slub.c:2647:
+		SetSlabFrozen(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*scratch)...) over kmalloc(sizeof(struct list_head)...)
#440: FILE: mm/slub.c:2682:
+	scratch = kmalloc(sizeof(struct list_head) * s->objects,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#440: FILE: mm/slub.c:2682:
+	scratch = kmalloc(sizeof(struct list_head) * s->objects,
+							GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: mm/slub.c:2683:
+	scratch = kmalloc(sizeof(struct list_head) * s->objects,
+							GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: mm/slub.c:2696:
+static unsigned long __kmem_cache_defrag(struct kmem_cache *s, int node,
+								void *scratch)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*scratch)...) over kmalloc(sizeof(struct list_head)...)
#537: FILE: mm/slub.c:2746:
+	scratch = kmalloc(sizeof(struct list_head) * max_defrag_slab_objects,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#537: FILE: mm/slub.c:2746:
+	scratch = kmalloc(sizeof(struct list_head) * max_defrag_slab_objects,
+								GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: mm/slub.c:2747:
+	scratch = kmalloc(sizeof(struct list_head) * max_defrag_slab_objects,
+								GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#570: FILE: mm/slub.c:2770:
+		if (node == -1) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#575: FILE: mm/slub.c:2775:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#592: FILE: mm/slub.c:2974:
 				size, align, flags, ctor, ops)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#597: FILE: mm/slub.c:2979:
+			if (ops->kick) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#601: FILE: mm/slub.c:2983:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: mm/slub.c:3847:
+static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *s,
+				const char *buf, size_t length)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#679: FILE: mm/slub.c:3849:
+	int n = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#753: FILE: include/linux/slub_def.h:61:
+	int remote_node_defrag_ratio;/*
+				 * Defragmentation through allocation from a

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409403.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 17 checks, 591 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409403.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
