WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
of the biggest wasters of memory for me. Because I rarely have more than one or

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#168: FILE: fs/dcache.c:43:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(dcache_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dcache_lock' should also have an identifier name
#168: FILE: fs/dcache.c:43:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK(dcache_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#215: FILE: fs/dcache.c:93:
+	if (unlikely(dentry_stat.nr_dentry > dentry_size+(dentry_size>>1)))
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#215: FILE: fs/dcache.c:93:
+	if (unlikely(dentry_stat.nr_dentry > dentry_size+(dentry_size>>1)))
 	                                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#216: FILE: fs/dcache.c:94:
+		dcache_hash_resize(dentry_hash->shift+1);
 		                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#217: FILE: fs/dcache.c:95:
+	else if (unlikely(dentry_stat.nr_dentry < (dentry_size>>1)))
 	                                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#218: FILE: fs/dcache.c:96:
+		dcache_hash_resize(dentry_hash->shift-1);
 		                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: fs/dcache.c:1089:
+static inline struct hlist_head *d_hash(struct dentry_hash *hashtable,
+			struct dentry *parent, unsigned long hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: fs/dcache.c:1250:
+static struct dentry * __d_lookup_hash(struct dentry_hash * hashtable,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#282: FILE: fs/dcache.c:1250:
+static struct dentry * __d_lookup_hash(struct dentry_hash * hashtable,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: fs/dcache.c:1251:
+static struct dentry * __d_lookup_hash(struct dentry_hash * hashtable,
+				struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: fs/dcache.c:1251:
+				struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#283: FILE: fs/dcache.c:1251:
+				struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: fs/dcache.c:1308:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: fs/dcache.c:1308:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#310: FILE: fs/dcache.c:1308:
+struct dentry * __d_lookup(struct dentry * parent, struct qstr * name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#322: FILE: fs/dcache.c:1320:
+		unsigned long seq;
+		do {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: fs/dcache.c:1336:
+ ^Ireturn ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: fs/dcache.c:1336:
+ ^Ireturn ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#339: FILE: fs/dcache.c:1336:
+ ^Ireturn ret;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: fs/dcache.c:1366:
+static int d_validate_hash(struct dentry_hash *hashtable,
+				struct dentry *dentry, struct dentry *parent)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#355: FILE: fs/dcache.c:1373:
+	hlist_for_each(lhp,base) {
 	                  ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#410: FILE: fs/dcache.c:1418:
+		unsigned long seq;
+		do {

ERROR:CODE_INDENT: code indent should use tabs where possible
#425: FILE: fs/dcache.c:1432:
+ ^Ircu_read_unlock();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#425: FILE: fs/dcache.c:1432:
+ ^Ircu_read_unlock();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#425: FILE: fs/dcache.c:1432:
+ ^Ircu_read_unlock();$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_hash)...) over kmalloc(sizeof(struct dentry_hash)...)
#477: FILE: fs/dcache.c:2117:
+	new_hash = kmalloc(sizeof(struct dentry_hash), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#484: FILE: fs/dcache.c:2124:
+	new_hash->table = vmalloc(new_size*sizeof(struct hlist_head));
 	                                  ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: fs/dcache.c:2159:
+ ^I^I^Ihlist_add_head_rcu(&dentry->d_hash, new_head);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#519: FILE: fs/dcache.c:2159:
+ ^I^I^Ihlist_add_head_rcu(&dentry->d_hash, new_head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: fs/dcache.c:2159:
+ ^I^I^Ihlist_add_head_rcu(&dentry->d_hash, new_head);$

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#527: FILE: fs/dcache.c:2167:
+	printk("resize dcache hash from %lu to %lu, moved %lu entries\n", old_size, new_size, transferred);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#527: FILE: fs/dcache.c:2167:
+	printk("resize dcache hash from %lu to %lu, moved %lu entries\n", old_size, new_size, transferred);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dentry_hash)...) over kmalloc(sizeof(struct dentry_hash)...)
#615: FILE: fs/dcache.c:2231:
+	dentry_hash = kmalloc(sizeof(struct dentry_hash), GFP_ATOMIC);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#617: FILE: fs/dcache.c:2233:
+	if (!dentry_hash)
+		panic("Failed to allocate dentry_hash\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#621: FILE: fs/dcache.c:2237:
+	dentry_hash->table = __vmalloc(hash_size*sizeof(struct hlist_head),
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#622: FILE: fs/dcache.c:2238:
+	dentry_hash->table = __vmalloc(hash_size*sizeof(struct hlist_head),
+					GFP_ATOMIC, PAGE_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463858.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 14 warnings, 13 checks, 474 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463858.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
