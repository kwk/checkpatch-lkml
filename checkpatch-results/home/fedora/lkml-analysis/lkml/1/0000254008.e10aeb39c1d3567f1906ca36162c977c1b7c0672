WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#91: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: arch/x86/mm/kmemcheck/error.c:1:
+#include <linux/interrupt.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#275: FILE: arch/x86/mm/kmemcheck/error.c:17:
+#define SHADOW_COPY_SIZE (1 << CONFIG_KMEMCHECK_SHADOW_COPY_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: arch/x86/mm/kmemcheck/error.c:89:
+void kmemcheck_error_save(enum kmemcheck_shadow state,
+	unsigned long address, unsigned int size, struct pt_regs *regs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: arch/x86/mm/kmemcheck/error.c:124:
+	BUG_ON(!shadow_copy);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#415: FILE: arch/x86/mm/kmemcheck/error.c:157:
+	static const char *desc[] = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#438: FILE: arch/x86/mm/kmemcheck/error.c:180:
+		printk(KERN_ERR  "kmemcheck: Caught %d-bit read "

WARNING:SPLIT_STRING: quoted string split across lines
#439: FILE: arch/x86/mm/kmemcheck/error.c:181:
+		printk(KERN_ERR  "kmemcheck: Caught %d-bit read "
+			"from %s memory (%p)\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#442: FILE: arch/x86/mm/kmemcheck/error.c:184:
+			(void *) e->address);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#444: FILE: arch/x86/mm/kmemcheck/error.c:186:
+		printk(KERN_INFO);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#447: FILE: arch/x86/mm/kmemcheck/error.c:189:
+				printk("%c", short_desc[e->shadow_copy[i]]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#449: FILE: arch/x86/mm/kmemcheck/error.c:191:
+				printk("?");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#451: FILE: arch/x86/mm/kmemcheck/error.c:193:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#452: FILE: arch/x86/mm/kmemcheck/error.c:194:
+		printk(KERN_INFO "%*c\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: arch/x86/mm/kmemcheck/error.c:195:
+		printk(KERN_INFO "%*c\n",
+			1 + (int) (e->address & (SHADOW_COPY_SIZE - 1)), '^');

CHECK:SPACING: No space is necessary after a cast
#453: FILE: arch/x86/mm/kmemcheck/error.c:195:
+			1 + (int) (e->address & (SHADOW_COPY_SIZE - 1)), '^');

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#456: FILE: arch/x86/mm/kmemcheck/error.c:198:
+		printk(KERN_EMERG "kmemcheck: Fatal error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#470: FILE: arch/x86/mm/kmemcheck/error.c:212:
+		printk(KERN_WARNING "kmemcheck: Lost %d error reports because "

WARNING:SPLIT_STRING: quoted string split across lines
#471: FILE: arch/x86/mm/kmemcheck/error.c:213:
+		printk(KERN_WARNING "kmemcheck: Lost %d error reports because "
+			"the queue was too small\n", error_missed_count);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#481: FILE: arch/x86/mm/kmemcheck/error.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__ERROR_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: arch/x86/mm/kmemcheck/error.h:9:
+void kmemcheck_error_save(enum kmemcheck_shadow state,
+	unsigned long address, unsigned int size, struct pt_regs *regs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#502: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:1:
+/**

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#525: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:24:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#527: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:26:
+#include <asm/pgtable.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#538: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:37:
+	printk(KERN_INFO "kmemcheck: \"Bugs, beware!\"\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#544: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:43:
+	* runs before SMP is set up. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#544: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:43:
+	/* Limit SMP to use a single CPU. We rely on the fact that this code
+	* runs before SMP is set up. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#546: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:45:
+		printk(KERN_INFO

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#554: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:53:
+int kmemcheck_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:NAKED_SSCANF: unchecked sscanf return value
#573: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:72:
+	sscanf(str, "%d", &kmemcheck_enabled);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#573: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:72:
+	sscanf(str, "%d", &kmemcheck_enabled);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#631: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:130:
+	BUG_ON(!irqs_disabled());

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#649: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:148:
+	 * this is not an error. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#681: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:180:
+	BUG_ON(!irqs_disabled());

CHECK:SPACING: No space is necessary after a cast
#739: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:238:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:240:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#742: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:241:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:SPACING: No space is necessary after a cast
#753: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:252:
+	return kmemcheck_pte_lookup((unsigned long) page_address(p));

CHECK:SPACING: No space is necessary after a cast
#760: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:259:
+	set_memory_4k((unsigned long) page_address(p), n);

CHECK:SPACING: No space is necessary after a cast
#767: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:266:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#769: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:268:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#770: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:269:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:282:
+static bool check_page_boundary(struct pt_regs *regs,
+	unsigned long addr, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#806: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:305:
+static void kmemcheck_read(struct pt_regs *regs,
+	unsigned long address, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:332:
+static void kmemcheck_write(struct pt_regs *regs,
+	unsigned long address, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#853: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:352:
+static void kmemcheck_access(struct pt_regs *regs,
+	unsigned long fallback_address, enum kmemcheck_method fallback_method)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#855: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:354:
+	const uint8_t *insn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#856: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:355:
+	const uint8_t *insn_primary;

CHECK:SPACING: No space is necessary after a cast
#870: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:369:
+	insn = (const uint8_t *) regs->ip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#919: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:418:
+		 * addresses, but we only get one page fault. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#940: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:439:
+	 * access. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: arch/x86/mm/kmemcheck/kmemcheck.c:457:
+bool kmemcheck_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#985: FILE: arch/x86/mm/kmemcheck/opcode.c:1:
+#include <linux/types.h>

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#995: FILE: arch/x86/mm/kmemcheck/opcode.c:11:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#996: FILE: arch/x86/mm/kmemcheck/opcode.c:12:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#998: FILE: arch/x86/mm/kmemcheck/opcode.c:14:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1000: FILE: arch/x86/mm/kmemcheck/opcode.c:16:
+		/* Group 4 */
+		|| b == 0x67;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1011: FILE: arch/x86/mm/kmemcheck/opcode.c:27:
+ * should be shot. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1061: FILE: arch/x86/mm/kmemcheck/opcode.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__OPCODE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1076: FILE: arch/x86/mm/kmemcheck/pte.c:1:
+#include <linux/mm.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1078: FILE: arch/x86/mm/kmemcheck/pte.c:3:
+#include <asm/pgtable.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1104: FILE: arch/x86/mm/kmemcheck/pte.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__PTE_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1109: FILE: arch/x86/mm/kmemcheck/pte.h:6:
+#include <asm/pgtable.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1120: FILE: arch/x86/mm/kmemcheck/shadow.c:1:
+#include <linux/kmemcheck.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1124: FILE: arch/x86/mm/kmemcheck/shadow.c:5:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: arch/x86/mm/kmemcheck/shadow.c:36:
+static void mark_shadow(void *address, unsigned int n,
+	enum kmemcheck_shadow status)

CHECK:SPACING: No space is necessary after a cast
#1159: FILE: arch/x86/mm/kmemcheck/shadow.c:40:
+	shadow = kmemcheck_shadow_lookup((unsigned long) address);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1207: FILE: arch/x86/mm/kmemcheck/shadow.c:88:
+	uint8_t *x;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#1272: FILE: arch/x86/mm/kmemcheck/shadow.c:153:
+	uint8_t *x;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1294: FILE: arch/x86/mm/kmemcheck/shadow.c:175:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1301: FILE: arch/x86/mm/kmemcheck/shadow.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__SHADOW_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1323: FILE: arch/x86/mm/kmemcheck/smp.c:1:
+#include <linux/kdebug.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: arch/x86/mm/kmemcheck/smp.c:16:
+static int nmi_notifier(struct notifier_block *self,
+	unsigned long val, void *data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1363: FILE: arch/x86/mm/kmemcheck/smp.c:41:
+	BUG_ON(err);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1408: FILE: arch/x86/mm/kmemcheck/smp.h:1:
+#ifndef ARCH__X86__MM__KMEMCHECK__SMP_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1437: FILE: arch/x86/mm/kmemcheck/string.c:1:
+#include <linux/interrupt.h>

CHECK:SPACING: No space is necessary after a cast
#1457: FILE: arch/x86/mm/kmemcheck/string.c:21:
+	addr = (unsigned long) s;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1467: FILE: arch/x86/mm/kmemcheck/string.c:31:
+	 * should be able to change them. */

CHECK:SPACING: No space is necessary after a cast
#1501: FILE: arch/x86/mm/kmemcheck/string.c:65:
+	addr = (unsigned long) s;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1508: FILE: arch/x86/mm/kmemcheck/string.c:72:
+		 * need one memset(). */

CHECK:SPACING: No space is necessary after a cast
#1520: FILE: arch/x86/mm/kmemcheck/string.c:84:
+		memset_one_page((void *) i, c, PAGE_SIZE);

CHECK:SPACING: No space is necessary after a cast
#1522: FILE: arch/x86/mm/kmemcheck/string.c:86:
+		memset_one_page((void *) end_page, c, end_offset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1527: FILE: arch/x86/mm/kmemcheck/string.c:91:
+EXPORT_SYMBOL(kmemcheck_memset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1534: FILE: include/asm-x86/kmemcheck.h:1:
+#ifndef ASM_X86_KMEMCHECK_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1547: FILE: include/asm-x86/kmemcheck.h:14:
+bool kmemcheck_fault(struct pt_regs *regs,
+	unsigned long address, unsigned long error_code);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: include/asm-x86/kmemcheck.h:30:
+static inline bool kmemcheck_fault(struct pt_regs *regs,
+	unsigned long address, unsigned long error_code)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1590: FILE: include/asm-x86/pgtable.h:41:
+#define _PAGE_HIDDEN	(_AC(1, L)<<_PAGE_BIT_HIDDEN)
                     	          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1617: FILE: include/linux/kmemcheck.h:1:
+#ifndef LINUX_KMEMCHECK_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254008.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 48 warnings, 39 checks, 1485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000254008.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
