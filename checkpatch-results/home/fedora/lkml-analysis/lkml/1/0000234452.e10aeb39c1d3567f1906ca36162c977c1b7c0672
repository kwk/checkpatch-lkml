WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#40: 
# cat /debug/tracing/stack_max_size 

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#43: 
# cat /debug/tracing/stack_trace 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#97: FILE: kernel/trace/Kconfig:109:
+config STACK_TRACER
+	bool "Trace max stack"
+	depends on HAVE_FTRACE
+	select FTRACE
+	select STACKTRACE
+	help
+	  This tracer records the max stack of the kernel, and displays
+	  it in debugfs/tracing/stack_trace
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: kernel/trace/trace_stack.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#145: FILE: kernel/trace/trace_stack.c:20:
+static unsigned long stack_dump_trace[STACK_TRACE_ENTRIES] =
+	{ [0 ... (STACK_TRACE_ENTRIES-1)] = ULONG_MAX };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#145: FILE: kernel/trace/trace_stack.c:20:
+	{ [0 ... (STACK_TRACE_ENTRIES-1)] = ULONG_MAX };
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: kernel/trace/trace_stack.c:38:
+	this_size = ((unsigned long)&this_size) & (THREAD_SIZE-1);
 	                                                      ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#216: FILE: kernel/trace/trace_stack.c:91:
+static struct ftrace_ops trace_ops __read_mostly =
+{

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#221: FILE: kernel/trace/trace_stack.c:96:
+stack_max_size_read(struct file *filp, char __user *ubuf,
                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#235: FILE: kernel/trace/trace_stack.c:110:
+stack_max_size_write(struct file *filp, const char __user *ubuf,
                                   ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#251: FILE: kernel/trace/trace_stack.c:126:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONST_STRUCT: struct file_operations should normally be const
#264: FILE: kernel/trace/trace_stack.c:139:
+static struct file_operations stack_max_size_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#313: FILE: kernel/trace/trace_stack.c:188:
+	return seq_printf(m, "[<%p>] %s\n", (void*)addr, str);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#315: FILE: kernel/trace/trace_stack.c:190:
+	return seq_printf(m, "%p\n", (void*)addr);

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#331: FILE: kernel/trace/trace_stack.c:206:
+static struct seq_operations stack_trace_seq_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: kernel/trace/trace_stack.c:220:
+		struct seq_file *m = file->private_data;
+		m->private = stack_dump_trace;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#351: FILE: kernel/trace/trace_stack.c:226:
+static struct file_operations stack_trace_fops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 11 warnings, 2 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000234452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
