WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
  Though our battery class insisting on re-usage, but not forces it. If some

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#55: 
# ls /sys/class/battery/main-battery/

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#58: 
# cat /sys/class/battery/main-battery/status

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#60: 
# cat /sys/class/leds/h5400\:green-right/trigger

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#62: 
# cat /sys/class/leds/h5400\:green-right/brightness

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#104: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#112: FILE: drivers/battery/Kconfig:4:
+config BATTERY
+	tristate "Battery monitoring support"
+	select EXTERNAL_POWER
+	help
+	  Say Y here to enable generic battery status reporting in
+	  the /sys filesystem.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#133: FILE: drivers/battery/battery.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#160: FILE: drivers/battery/battery.c:28:
+    defined(CONFIG_LEDS_TRIGGER_HWTIMER_MODULE)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: drivers/battery/battery.c:39:
+                                           struct power_supply *psy)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: drivers/battery/battery.c:39:
+                                           struct power_supply *psy)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: drivers/battery/battery.c:42:
+	struct battery *bat = container_of(pst, struct battery, pst);
+	pr_debug("%s\n", __FUNCTION__);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#174: FILE: drivers/battery/battery.c:42:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#178: FILE: drivers/battery/battery.c:46:
+	return;
+}

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#182: FILE: drivers/battery/battery.c:50:
+	pr_debug("%s\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#188: FILE: drivers/battery/battery.c:56:
+	pr_debug("%s\n", __FUNCTION__);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#190: FILE: drivers/battery/battery.c:58:
+	switch(bat->get_status(bat))
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#190: FILE: drivers/battery/battery.c:58:
+	switch(bat->get_status(bat))

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#207: FILE: drivers/battery/battery.c:75:
+	return;
+}

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: drivers/battery/battery.c:82:
+                                   struct device_attribute *attr, char *buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: drivers/battery/battery.c:82:
+                                   struct device_attribute *attr, char *buf)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#218: FILE: drivers/battery/battery.c:86:
+	int status = 0;
+	if (bat->get_status) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#240: FILE: drivers/battery/battery.c:108:
+static ssize_t battery_show_##_name(struct device *dev,                 \
+                                   struct device_attribute *attr,       \
+                                   char *buf) {                         \

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: drivers/battery/battery.c:109:
+                                   struct device_attribute *attr,       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: drivers/battery/battery.c:109:
+                                   struct device_attribute *attr,       \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: drivers/battery/battery.c:110:
+                                   char *buf) {                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: drivers/battery/battery.c:110:
+                                   char *buf) {                         \$

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'battery_show_status' to 'status_show'
#248: FILE: drivers/battery/battery.c:116:
+	.show = battery_show_##_name,                                   \

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#268: FILE: drivers/battery/battery.c:136:
+	#define create_bat_attr_conditional(name)                    \
+	if(bat->get_##name) {                                        \
+		rc = device_create_file(bat->dev, &dev_attr_##name); \
+		if (rc) goto name##_failed;                          \
+	}

ERROR:SPACING: space required before the open parenthesis '('
#269: FILE: drivers/battery/battery.c:137:
+	if(bat->get_##name) {                                        \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#271: FILE: drivers/battery/battery.c:139:
+		if (rc) goto name##_failed;                          \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#286: FILE: drivers/battery/battery.c:154:
+	#define remove_bat_attr_conditional(name)               \
+	if(bat->get_##name)                                     \
+		device_remove_file(bat->dev, &dev_attr_##name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#286: FILE: drivers/battery/battery.c:154:
+	#define remove_bat_attr_conditional(name)               \
+	if(bat->get_##name)                                     \
+		device_remove_file(bat->dev, &dev_attr_##name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:SPACING: space required before the open parenthesis '('
#287: FILE: drivers/battery/battery.c:155:
+	if(bat->get_##name)                                     \

WARNING:RETURN_VOID: void function return statements are not generally useful
#321: FILE: drivers/battery/battery.c:189:
+	return;
+}

ERROR:SPACING: space required before the open parenthesis '('
#328: FILE: drivers/battery/battery.c:196:
+	if(IS_ERR(bat->dev)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#347: FILE: drivers/battery/battery.c:215:
+^I                                  sizeof("-charging"), GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#354: FILE: drivers/battery/battery.c:222:
+^I                              sizeof("-full"), GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: drivers/battery/battery.c:234:
+^I                              &bat->charging_trig);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: drivers/battery/battery.c:236:
+^I                            &bat->full_trig);$

WARNING:RETURN_VOID: void function return statements are not generally useful
#402: FILE: drivers/battery/battery.c:270:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#418: FILE: drivers/battery/battery.c:286:
+	return;
+}

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#420: FILE: drivers/battery/battery.c:288:
+EXPORT_SYMBOL_GPL(battery_register);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#421: FILE: drivers/battery/battery.c:289:
+EXPORT_SYMBOL_GPL(battery_unregister);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#422: FILE: drivers/battery/battery.c:290:
+EXPORT_SYMBOL_GPL(battery_status_changed);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#423: FILE: drivers/battery/battery.c:291:
+EXPORT_SYMBOL_GPL(battery_is_external_power_supplied);

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: drivers/battery/battery.c:301:
+              "Szabolcs Gyurko, "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: drivers/battery/battery.c:301:
+              "Szabolcs Gyurko, "$

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: drivers/battery/battery.c:301:
+MODULE_AUTHOR("Ian Molton <spyro@f2s.com>, "
+              "Szabolcs Gyurko, "

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: drivers/battery/battery.c:302:
+              "Anton Vorontsov <cbou@mail.ru>");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: drivers/battery/battery.c:302:
+              "Anton Vorontsov <cbou@mail.ru>");$

WARNING:SPLIT_STRING: quoted string split across lines
#434: FILE: drivers/battery/battery.c:302:
+              "Szabolcs Gyurko, "
+              "Anton Vorontsov <cbou@mail.ru>");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#442: FILE: include/linux/battery.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#473: FILE: include/linux/battery.h:32:
+/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'uknown' may be misspelled - perhaps 'unknown'?
#476: FILE: include/linux/battery.h:35:
+ * space. Unused/uknown fields can be NULL and will not appear in sysfs.
                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#513: FILE: include/linux/battery.h:72:
+/* $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#531: FILE: include/linux/battery.h:90:
+extern void battery_status_changed(struct battery *bat);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#532: FILE: include/linux/battery.h:91:
+extern int battery_is_external_power_supplied(struct battery *bat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#533: FILE: include/linux/battery.h:92:
+extern int battery_register(struct device *parent, struct battery *bat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#534: FILE: include/linux/battery.h:93:
+extern void battery_unregister(struct battery *bat);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446108.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 35 warnings, 4 checks, 428 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446108.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
