WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
User-mode Linux by this patch uses PTRACE_VM of the hosting operating system

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: arch/um/include/shared/kern_util.h:60:
+extern int syscall_trace(struct uml_pt_regs *regs, int entryexit);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: arch/um/kernel/process.c:352:
+static int proc_read_sysemu(char *buf, char **start, off_t offset,
+		int size, int *eof, void *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: arch/um/kernel/process.c:362:
+static int proc_write_sysemu(struct file *file, const char __user *buf,
+		unsigned long count, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: arch/um/kernel/process.c:375:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: arch/um/kernel/process.c:377:
+static int proc_read_sysptvm(char *buf, char **start, off_t offset,
+		int size, int *eof, void *data)

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: arch/um/kernel/process.c:380:
+	int sysptvm = (get_using_sysptvm() != 0);
+	if (snprintf(buf, size, "%d\n", sysptvm) < size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#163: FILE: arch/um/kernel/process.c:388:
+static int proc_write_sysptvm(struct file *file, const char __user *buf,
+		unsigned long count, void *data)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#187: FILE: arch/um/kernel/process.c:410:
+		if (ent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#188: FILE: arch/um/kernel/process.c:411:
+			printk(KERN_WARNING "Failed to register /proc/sysptvm\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ent"
#197: FILE: arch/um/kernel/process.c:420:
+		if (ent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#198: FILE: arch/um/kernel/process.c:421:
+			printk(KERN_WARNING "Failed to register /proc/sysemu\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall >= NR_syscalls'
#293: FILE: arch/um/kernel/skas/syscall.c:35:
+		if ((syscall >= NR_syscalls) || (syscall < 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'syscall < 0'
#293: FILE: arch/um/kernel/skas/syscall.c:35:
+		if ((syscall >= NR_syscalls) || (syscall < 0))

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#294: FILE: arch/um/kernel/skas/syscall.c:36:
+			result = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#357: FILE: arch/um/os-Linux/start_up.c:204:
+static int __init nosysptvm_cmd_param(char *str, int* add)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: arch/um/os-Linux/start_up.c:211:
+__uml_setup("nosysptvm", nosysptvm_cmd_param,
+"nosysptvm\n"

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#371: FILE: arch/um/os-Linux/start_up.c:218:
+static int __init usesysemu_cmd_param(char *str, int* add)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: arch/um/os-Linux/start_up.c:225:
+__uml_setup("usesysemu", usesysemu_cmd_param,
+"usesysemu\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: arch/um/os-Linux/start_up.c:333:
+	pid_t pid = os_getpid();
+	if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#415: FILE: arch/um/os-Linux/start_up.c:350:
+	if (p[0] < 0)
[...]
+	else { /* clean up everything */
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#417: FILE: arch/um/os-Linux/start_up.c:352:
+	else { /* clean up everything */

WARNING:LINE_SPACING: Missing a blank line after declarations
#437: FILE: arch/um/os-Linux/start_up.c:372:
+	static char stack[1024];
+	feature = 0;

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#464: FILE: arch/um/os-Linux/start_up.c:399:
+	/* restart (time) and and try to skip the entire call */

CHECK:BRACES: braces {} should be used on all arms of this statement
#481: FILE: arch/um/os-Linux/start_up.c:416:
+	if (feature == PTRACE_SYSCALL_SKIPCALL) {
[...]
+	} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#488: FILE: arch/um/os-Linux/start_up.c:423:
+			return 1;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#492: FILE: arch/um/os-Linux/start_up.c:427:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156515.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 9 warnings, 16 checks, 412 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156515.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
