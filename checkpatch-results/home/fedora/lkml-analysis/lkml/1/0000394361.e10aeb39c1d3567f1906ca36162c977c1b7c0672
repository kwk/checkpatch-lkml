CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#94: FILE: fs/afs/internal.h:608:
+extern int afs_permission(struct inode *, int, struct vfs_lookup *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#94: FILE: fs/afs/internal.h:608:
+extern int afs_permission(struct inode *, int, struct vfs_lookup *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#94: FILE: fs/afs/internal.h:608:
+extern int afs_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#94: FILE: fs/afs/internal.h:608:
+extern int afs_permission(struct inode *, int, struct vfs_lookup *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/cifs/cifsfs.c:238:
+static int cifs_permission(struct inode *inode, int mask,
+		struct vfs_lookup *lookup)

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: fs/ecryptfs/inode.c:862:
+        if (lookup) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: fs/ecryptfs/inode.c:862:
+        if (lookup) {$

CHECK:BRACES: braces {} should be used on all arms of this statement
#183: FILE: fs/ecryptfs/inode.c:862:
+        if (lookup) {
[...]
         } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#202: FILE: fs/exec.c:145:
+	error = vfs_permission(&nd.lookup, MAY_READ | MAY_EXEC);
 	                        ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: fs/exec.c:686:
+			int err = vfs_permission(&nd.lookup, MAY_EXEC);
 			                          ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#233: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission (struct inode *, int, struct vfs_lookup *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#233: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#233: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#233: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#233: FILE: fs/ext2/acl.h:61:
+extern int ext2_permission (struct inode *, int, struct vfs_lookup *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#255: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission (struct inode *, int, struct vfs_lookup *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#255: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#255: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#255: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission (struct inode *, int, struct vfs_lookup *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#277: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission (struct inode *, int, struct vfs_lookup *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#277: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#277: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#277: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#277: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission (struct inode *, int, struct vfs_lookup *);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#350: FILE: fs/inotify_user.c:352:
+	error = vfs_permission(nd.lookup, MAY_READ);
 	                       ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#372: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#372: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#372: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#372: FILE: fs/jffs2/acl.h:31:
+extern int jffs2_permission(struct inode *, int, struct vfs_lookup *);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#503: FILE: fs/namei.c:1482:
+	return permission(dir,MAY_WRITE | MAY_EXEC, lookup);
 	                     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#551: FILE: fs/nfs/dir.c:1977:
 			if (nfs_server_capable(inode, NFS_CAP_ATOMIC_OPEN)
+					&& lookup

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#552: FILE: fs/nfs/dir.c:1978:
+					&& lookup
+					&& (lookup->flags & LOOKUP_OPEN))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#586: FILE: fs/open.c:247:
+	error = vfs_permission(&nd.lookup, MAY_WRITE);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#595: FILE: fs/open.c:455:
+	res = vfs_permission(&nd.lookup, mode);
 	                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#604: FILE: fs/open.c:489:
+	error = vfs_permission(&nd.lookup, MAY_EXEC);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#613: FILE: fs/open.c:540:
+	error = vfs_permission(&nd.lookup, MAY_EXEC);
 	                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#683: FILE: fs/utimes.c:114:
+				error = vfs_permission(&nd.lookup, MAY_WRITE);
 				                        ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#716: FILE: include/linux/fs.h:1011:
+extern int vfs_permission(struct vfs_lookup *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#716: FILE: include/linux/fs.h:1011:
+extern int vfs_permission(struct vfs_lookup *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#716: FILE: include/linux/fs.h:1011:
+extern int vfs_permission(struct vfs_lookup *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#725: FILE: include/linux/fs.h:1150:
+	int (*permission) (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#725: FILE: include/linux/fs.h:1150:
+	int (*permission) (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#725: FILE: include/linux/fs.h:1150:
+	int (*permission) (struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#725: FILE: include/linux/fs.h:1150:
+	int (*permission) (struct inode *, int, struct vfs_lookup *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#734: FILE: include/linux/fs.h:1565:
+extern int permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#734: FILE: include/linux/fs.h:1565:
+extern int permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#734: FILE: include/linux/fs.h:1565:
+extern int permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#734: FILE: include/linux/fs.h:1565:
+extern int permission(struct inode *, int, struct vfs_lookup *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: include/linux/nfs_fs.h:291:
+extern int nfs_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#745: FILE: include/linux/nfs_fs.h:291:
+extern int nfs_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#745: FILE: include/linux/nfs_fs.h:291:
+extern int nfs_permission(struct inode *, int, struct vfs_lookup *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfs_lookup *' should also have an identifier name
#745: FILE: include/linux/nfs_fs.h:291:
+extern int nfs_permission(struct inode *, int, struct vfs_lookup *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#778: FILE: include/linux/security.h:1223:
+	int (*inode_permission) (struct inode *inode, int mask, struct vfs_lookup *lookup);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#792: FILE: include/linux/security.h:1707:
+	return security_ops->inode_permission (inode, mask, lookup);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#834: FILE: net/unix/af_unix.c:732:
+		err = vfs_permission(&nd.lookup, MAY_WRITE);
 		                      ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#845: FILE: security/dummy.c:326:
+static int dummy_inode_permission (struct inode *inode, int mask, struct vfs_lookup *lookup)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 43 warnings, 12 checks, 630 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394361.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
