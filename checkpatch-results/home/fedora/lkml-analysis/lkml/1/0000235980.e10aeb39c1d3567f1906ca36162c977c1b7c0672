CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gendiskp' may be better as '(gendiskp)' to avoid precedence issues
#573: FILE: include/linux/genhd.h:238:
+#define disk_stat_add(cpu, gendiskp, field, addnd)			\
+	(per_cpu_ptr(gendiskp->dkstats, cpu)->field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#573: FILE: include/linux/genhd.h:238:
+#define disk_stat_add(cpu, gendiskp, field, addnd)			\
+	(per_cpu_ptr(gendiskp->dkstats, cpu)->field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#594: FILE: include/linux/genhd.h:259:
+#define part_stat_add(cpu, part, field, addnd)				\
+	(per_cpu_ptr(part->dkstats, cpu)->field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#594: FILE: include/linux/genhd.h:259:
+#define part_stat_add(cpu, part, field, addnd)				\
+	(per_cpu_ptr(part->dkstats, cpu)->field += addnd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#602: FILE: include/linux/genhd.h:262:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'part' - possible side-effects?
#602: FILE: include/linux/genhd.h:262:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#602: FILE: include/linux/genhd.h:262:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addnd' - possible side-effects?
#602: FILE: include/linux/genhd.h:262:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gendiskp' may be better as '(gendiskp)' to avoid precedence issues
#622: FILE: include/linux/genhd.h:291:
+#define disk_stat_add(cpu, gendiskp, field, addnd)			\
+	(gendiskp->dkstats.field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#622: FILE: include/linux/genhd.h:291:
+#define disk_stat_add(cpu, gendiskp, field, addnd)			\
+	(gendiskp->dkstats.field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'part' may be better as '(part)' to avoid precedence issues
#632: FILE: include/linux/genhd.h:300:
+#define part_stat_add(cpu, part, field, addnd)				\
 	(part->dkstats.field += addnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#632: FILE: include/linux/genhd.h:300:
+#define part_stat_add(cpu, part, field, addnd)				\
 	(part->dkstats.field += addnd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#640: FILE: include/linux/genhd.h:303:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'part' - possible side-effects?
#640: FILE: include/linux/genhd.h:303:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#640: FILE: include/linux/genhd.h:303:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addnd' - possible side-effects?
#640: FILE: include/linux/genhd.h:303:
+#define all_stat_add(cpu, gendiskp, part, field, addnd, sector)		\
+({									\
+	if (part)							\
+		part_stat_add(cpu, part, field, addnd);			\
+	disk_stat_add(cpu, gendiskp, field, addnd);			\
 })

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#713: FILE: include/linux/genhd.h:323:
+#define disk_stat_sub(cpu, gendiskp, field, subnd)			\
+	disk_stat_add(cpu, gendiskp, field, -subnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#720: FILE: include/linux/genhd.h:330:
+#define part_stat_sub(cpu, gendiskp, field, subnd)			\
+	part_stat_add(cpu, gendiskp, field, -subnd)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'subnd' may be better as '(subnd)' to avoid precedence issues
#727: FILE: include/linux/genhd.h:337:
+#define all_stat_sub(cpu, gendiskp, part, field, subnd, sector)		\
+	all_stat_add(cpu, gendiskp, part, field, -subnd, sector)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/genhd.h:389:
+extern void disk_round_stats(int cpu, struct gendisk *disk);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/linux/genhd.h:390:
+extern void part_round_stats(int cpu, struct hd_struct *part);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 21 checks, 584 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000235980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
