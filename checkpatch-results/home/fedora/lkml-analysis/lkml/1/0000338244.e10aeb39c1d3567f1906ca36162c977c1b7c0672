WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
x86_64: Map only usable memory in identity map. All reserved memory maps to a

WARNING:LINE_SPACING: Missing a blank line after declarations
#53: FILE: arch/x86/kernel/e820_64.c:127:
+	int i;
+	for (i = 0; i < e820.nr_map; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#55: FILE: arch/x86/kernel/e820_64.c:129:
+		struct e820entry *ei = &e820.map[i];
+		if (ei->type == E820_RESERVED)

WARNING:LINE_SPACING: Missing a blank line after declarations
#89: FILE: arch/x86/kernel/e820_64.c:191:
+	int i;
+	for (i = 0; i < e820.nr_map; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: arch/x86/kernel/e820_64.c:193:
+		struct e820entry *ei = &e820.map[i];
+		if (ei->type == E820_RESERVED)

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: arch/x86/kernel/e820_64.c:219:
+ ^I * Note: end address is exclusive and start is inclusive here$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#117: FILE: arch/x86/kernel/e820_64.c:219:
+ ^I * Note: end address is exclusive and start is inclusive here$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: arch/x86/mm/init_64.c:493:
 
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: arch/x86/mm/init_64.c:497:
+	static unsigned long res_phys_page;
+	if (!res_phys_page) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#193: FILE: arch/x86/mm/init_64.c:499:
+		pte_t *pte;
+		pte = alloc_low_page(&res_phys_page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#202: FILE: arch/x86/mm/init_64.c:508:
+	static unsigned long res_phys_ptepage;
+	if (!res_phys_ptepage) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#215: FILE: arch/x86/mm/init_64.c:521:
+			pte_t *pte = pte_page + i;
+			set_pte(pte, __pte(entry));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: arch/x86/mm/init_64.c:530:
+static void __init phys_pte_prune(pte_t *pte_page, unsigned long address,
+		unsigned long end, unsigned long vaddr, unsigned int exec)

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#228: FILE: arch/x86/mm/init_64.c:534:
+	for (; i < PTRS_PER_PTE; i++, address = (address & PAGE_MASK) + PAGE_SIZE, vaddr = (vaddr + PAGE_MASK) + PAGE_SIZE) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '~PAGE_MASK'
#239: FILE: arch/x86/mm/init_64.c:545:
+		if (!(address & (~PAGE_MASK)) &&
+		    (address + PAGE_SIZE <= end) &&
+		    !is_memory_any_valid(address, address + PAGE_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: arch/x86/mm/init_64.c:561:
+			entry = _PAGE_NX|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: arch/x86/mm/init_64.c:561:
+			entry = _PAGE_NX|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 			                              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: arch/x86/mm/init_64.c:561:
+			entry = _PAGE_NX|_KERNPG_TABLE|_PAGE_GLOBAL|address;
 			                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#257: FILE: arch/x86/mm/init_64.c:563:
+			entry = _KERNPG_TABLE|_PAGE_GLOBAL|address;
 			                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#257: FILE: arch/x86/mm/init_64.c:563:
+			entry = _KERNPG_TABLE|_PAGE_GLOBAL|address;
 			                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#264: FILE: arch/x86/mm/init_64.c:570:
+static void __init phys_pmd_prune(pmd_t *pmd_page, unsigned long address,
+		unsigned long end, unsigned long vaddr, unsigned int exec)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: arch/x86/mm/init_64.c:575:
+	for (; i < PTRS_PER_PMD; i++, address = (address & PMD_MASK) + PMD_SIZE,
+			vaddr = (vaddr & PMD_MASK) + PMD_SIZE) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '~PMD_MASK'
#281: FILE: arch/x86/mm/init_64.c:587:
+		if (!(address & (~PMD_MASK)) &&
+		    (address + PMD_SIZE <= end) &&
+		    !is_memory_any_valid(address, address + PMD_SIZE)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#284: FILE: arch/x86/mm/init_64.c:590:
+		    !is_memory_any_valid(address, address + PMD_SIZE)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#303: FILE: arch/x86/mm/init_64.c:609:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: arch/x86/mm/init_64.c:613:
+static void __init phys_pud_prune(pud_t *pud_page, unsigned long addr,
+	       unsigned long end, unsigned long vaddr, unsigned int exec)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: arch/x86/mm/init_64.c:618:
+	for (; i < PTRS_PER_PUD; i++, addr = (addr & PUD_MASK) + PUD_SIZE,
+			vaddr = (vaddr & PUD_MASK) + PUD_SIZE) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#319: FILE: arch/x86/mm/init_64.c:625:
+			pmd_t *pmd = pmd_offset(pud,0);
 			                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: arch/x86/mm/init_64.c:626:
+			pmd_t *pmd = pmd_offset(pud,0);
+			phys_pmd_prune(pmd, addr, end, vaddr, exec);

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: arch/x86/mm/init_64.c:665:
+^I^I               start - (unsigned long)KERNEL_TEXT_START,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#360: FILE: arch/x86/mm/init_64.c:666:
+^I^I               next - (unsigned long)KERNEL_TEXT_START,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#440: FILE: include/asm-x86/e820_64.h:29:
+extern int e820_any_non_reserved(unsigned long start, unsigned long end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#441: FILE: include/asm-x86/e820_64.h:30:
+extern int is_memory_any_valid(unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#442: FILE: include/asm-x86/e820_64.h:31:
+extern int e820_all_non_reserved(unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#443: FILE: include/asm-x86/e820_64.h:32:
+extern int is_memory_all_valid(unsigned long start, unsigned long end);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 12 warnings, 19 checks, 382 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338244.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
