WARNING:MISPLACED_INIT: __initdata should be placed after mci0_data
#102: FILE: arch/avr32/boards/atngw100/setup.c:46:
+static struct mci_platform_data __initdata mci0_data = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: arch/avr32/mach-at32ap/at32ap700x.c:1062:
+		dws = kmemdup(to_dw_dma_slave(data->dma_slave),
+				sizeof(struct dw_dma_slave), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dws)...) over kzalloc(sizeof(struct dw_dma_slave)...)
#186: FILE: arch/avr32/mach-at32ap/at32ap700x.c:1064:
+		dws = kzalloc(sizeof(struct dw_dma_slave), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: arch/avr32/mach-at32ap/at32ap700x.c:1077:
+	if (platform_device_add_data(pdev, data,
+				sizeof(struct mci_platform_data)))

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#259: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: drivers/mmc/host/atmel-mci-regs.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:SPACING: space required after that ',' (ctx:VxV)
#440: FILE: drivers/mmc/host/atmel-mci-regs.h:177:
+#define MCI_BF(name,value)				\
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#443: FILE: drivers/mmc/host/atmel-mci-regs.h:180:
+#define MCI_BFEXT(name,value)				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: drivers/mmc/host/atmel-mci-regs.h:183:
+#define MCI_BFINS(name,value,old)			\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#446: FILE: drivers/mmc/host/atmel-mci-regs.h:183:
+#define MCI_BFINS(name,value,old)			\
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#449: FILE: drivers/mmc/host/atmel-mci-regs.h:186:
+	 | MCI_BF(name,value))
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#452: FILE: drivers/mmc/host/atmel-mci-regs.h:189:
+#define mci_readl(port,reg)				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#454: FILE: drivers/mmc/host/atmel-mci-regs.h:191:
+#define mci_writel(port,reg,value)			\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#454: FILE: drivers/mmc/host/atmel-mci-regs.h:191:
+#define mci_writel(port,reg,value)			\
                            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#464: FILE: drivers/mmc/host/atmel-mci.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#488: FILE: drivers/mmc/host/atmel-mci.c:25:
+#include <asm/io.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#579: FILE: drivers/mmc/host/atmel-mci.c:116:
+#define atmci_is_completed(host, event)				\
+	test_bit(event, &host->completed_events)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#581: FILE: drivers/mmc/host/atmel-mci.c:118:
+#define atmci_test_and_clear_pending(host, event)		\
+	test_and_clear_bit(event, &host->pending_events)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#583: FILE: drivers/mmc/host/atmel-mci.c:120:
+#define atmci_test_and_set_completed(host, event)		\
+	test_and_set_bit(event, &host->completed_events)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#585: FILE: drivers/mmc/host/atmel-mci.c:122:
+#define atmci_set_completed(host, event)			\
+	set_bit(event, &host->completed_events)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#587: FILE: drivers/mmc/host/atmel-mci.c:124:
+#define atmci_set_pending(host, event)				\
+	set_bit(event, &host->pending_events)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'host' may be better as '(host)' to avoid precedence issues
#589: FILE: drivers/mmc/host/atmel-mci.c:126:
+#define atmci_clear_pending(host, event)			\
+	clear_bit(event, &host->pending_events)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#592: FILE: drivers/mmc/host/atmel-mci.c:129:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#764: FILE: drivers/mmc/host/atmel-mci.c:301:
+	host->debugfs_pending_events
+		= debugfs_create_u32("pending_events", 0400, root,

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#770: FILE: drivers/mmc/host/atmel-mci.c:307:
+	host->debugfs_completed_events
+		= debugfs_create_u32("completed_events", 0400, root,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#806: FILE: drivers/mmc/host/atmel-mci.c:343:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#807: FILE: drivers/mmc/host/atmel-mci.c:344:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#811: FILE: drivers/mmc/host/atmel-mci.c:348:
+{
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#812: FILE: drivers/mmc/host/atmel-mci.c:349:
+
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#841: FILE: drivers/mmc/host/atmel-mci.c:378:
+	static unsigned	dtomul_to_shift[] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#844: FILE: drivers/mmc/host/atmel-mci.c:381:
+	unsigned	timeout;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#845: FILE: drivers/mmc/host/atmel-mci.c:382:
+	unsigned	dtocyc;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#846: FILE: drivers/mmc/host/atmel-mci.c:383:
+	unsigned	dtomul;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#851: FILE: drivers/mmc/host/atmel-mci.c:388:
+		unsigned shift = dtomul_to_shift[dtomul];

WARNING:LINE_SPACING: Missing a blank line after declarations
#852: FILE: drivers/mmc/host/atmel-mci.c:389:
+		unsigned shift = dtomul_to_shift[dtomul];
+		dtocyc = (timeout + (1 << shift) - 1) >> shift;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#863: FILE: drivers/mmc/host/atmel-mci.c:400:
+	dev_vdbg(&host->mmc->class_dev, "setting timeout to %u cycles\n",
+			dtocyc << dtomul_to_shift[dtomul]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/mmc/host/atmel-mci.c:455:
+		list_for_each_entry_safe(desc, _desc, &host->dma.data_descs,
+				client_node)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#921: FILE: drivers/mmc/host/atmel-mci.c:458:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#939: FILE: drivers/mmc/host/atmel-mci.c:476:
+	dev_vdbg(&host->mmc->class_dev,
+			"start command: ARGR=0x%08x CMDR=0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: drivers/mmc/host/atmel-mci.c:520:
+	list_for_each_entry_safe(desc, _desc, &host->dma.data_descs,
+			client_node) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1013: FILE: drivers/mmc/host/atmel-mci.c:550:
+		if (atmci_is_completed(host, EVENT_CMD_COMPLETE)
+				&& data->stop

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1014: FILE: drivers/mmc/host/atmel-mci.c:551:
+				&& data->stop
+				&& !atmci_test_and_set_completed(host,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1084: FILE: drivers/mmc/host/atmel-mci.c:621:
+	dev_vdbg(&host->mmc->class_dev, "setting up descriptors (%c)...\n",
+			(data->flags & MMC_DATA_READ) ? 'r' : 'w');

WARNING:LINE_SPACING: Missing a blank line after declarations
#1092: FILE: drivers/mmc/host/atmel-mci.c:629:
+			void *p = kmap(sg_page(sg));
+			memset(p + sg->offset, 0x55, sg->length);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1097: FILE: drivers/mmc/host/atmel-mci.c:634:
+		sg_len = dma_map_sg(&host->pdev->dev, data->sg,
+				data->sg_len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1102: FILE: drivers/mmc/host/atmel-mci.c:639:
+		sg_len = dma_map_sg(&host->pdev->dev, data->sg,
+				data->sg_len, DMA_TO_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: drivers/mmc/host/atmel-mci.c:647:
+		dev_vdbg(&host->mmc->class_dev, "  addr %08x len %u\n",
+				sg_dma_address(sg), sg_dma_len(sg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: drivers/mmc/host/atmel-mci.c:654:
+		list_add_tail(&desc->client_node,
+				&host->dma.data_descs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1122: FILE: drivers/mmc/host/atmel-mci.c:659:
+	desc = list_entry(host->dma.data_descs.prev,
+			struct dma_slave_descriptor, client_node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1146: FILE: drivers/mmc/host/atmel-mci.c:683:
+	dev_vdbg(&mmc->class_dev, "BLKR=0x%08x\n",
+			(MCI_BF(BCNT, data->blocks)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1179: FILE: drivers/mmc/host/atmel-mci.c:716:
+		dev_warn(&mmc->class_dev, "WARNING: IMR=0x%08x\n",
+				mci_readl(host, IMR));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->mrq"
#1181: FILE: drivers/mmc/host/atmel-mci.c:718:
+	WARN_ON(host->mrq != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1232: FILE: drivers/mmc/host/atmel-mci.c:769:
+			dev_warn(&mmc->class_dev,
+				"clock %u too slow; using %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1278: FILE: drivers/mmc/host/atmel-mci.c:815:
+		dev_dbg(&mmc->class_dev, "card is %s\n",
+				read_only ? "read-only" : "read-write");

WARNING:SPLIT_STRING: quoted string split across lines
#1282: FILE: drivers/mmc/host/atmel-mci.c:819:
+			"no pin for checking read-only switch."
+			" Assuming write-enable.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1295: FILE: drivers/mmc/host/atmel-mci.c:832:
+static void atmci_command_complete(struct atmel_mci *host,
+			struct mmc_command *cmd, u32 status)

WARNING:TYPO_SPELLING: 'RENDE' may be misspelled - perhaps 'RENDER'?
#1309: FILE: drivers/mmc/host/atmel-mci.c:846:
+	else if (status & (MCI_BIT(RINDE) | MCI_BIT(RDIRE) | MCI_BIT(RENDE)))
 	                                                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1333: FILE: drivers/mmc/host/atmel-mci.c:870:
+	dev_vdbg(&mmc->class_dev,
+		"tasklet: pending/completed/mask %lx/%lx/%x\n",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1342: FILE: drivers/mmc/host/atmel-mci.c:879:
+		if (!mrq->cmd->error && mrq->stop
+				&& atmci_is_completed(host, EVENT_DMA_COMPLETE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1343: FILE: drivers/mmc/host/atmel-mci.c:880:
+				&& atmci_is_completed(host, EVENT_DMA_COMPLETE)
+				&& !atmci_test_and_set_completed(host,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: drivers/mmc/host/atmel-mci.c:899:
+			dev_dbg(&mmc->class_dev,
+					"data timeout error\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1372: FILE: drivers/mmc/host/atmel-mci.c:909:
+		if (host->present && data->stop
+				&& atmci_test_and_set_completed(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1372: FILE: drivers/mmc/host/atmel-mci.c:909:
+				&& atmci_test_and_set_completed(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1397: FILE: drivers/mmc/host/atmel-mci.c:934:
+			if (mrq->data && !atmci_is_completed(host,
+						EVENT_DATA_COMPLETE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1403: FILE: drivers/mmc/host/atmel-mci.c:940:
+			if (mrq->stop && !atmci_is_completed(host,
+						EVENT_STOP_COMPLETE))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1436: FILE: drivers/mmc/host/atmel-mci.c:973:
+				host->pio_sg = sg = sg_next(sg);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1445: FILE: drivers/mmc/host/atmel-mci.c:982:
+			unsigned int remaining = sg->length - offset;
+			memcpy(buf + offset, &value, remaining);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1449: FILE: drivers/mmc/host/atmel-mci.c:986:
+			host->pio_sg = sg = sg_next(sg);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1481: FILE: drivers/mmc/host/atmel-mci.c:1018:
+	if (data->stop && atmci_is_completed(host, EVENT_CMD_COMPLETE)
+			&& !atmci_test_and_set_completed(host, EVENT_STOP_SENT))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1503: FILE: drivers/mmc/host/atmel-mci.c:1040:
+				host->pio_sg = sg = sg_next(sg);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1517: FILE: drivers/mmc/host/atmel-mci.c:1054:
+			host->pio_sg = sg = sg_next(sg);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1552: FILE: drivers/mmc/host/atmel-mci.c:1089:
+	if (data->stop && atmci_is_completed(host, EVENT_CMD_COMPLETE)
+			&& !atmci_test_and_set_completed(host, EVENT_STOP_SENT))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1633: FILE: drivers/mmc/host/atmel-mci.c:1170:
+static enum dma_state_client atmci_dma_event(struct dma_client *client,
+		struct dma_chan *chan, enum dma_state state)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1652: FILE: drivers/mmc/host/atmel-mci.c:1189:
+			dev_info(&host->pdev->dev,
+					"Using %s for DMA transfers\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1666: FILE: drivers/mmc/host/atmel-mci.c:1203:
+			dev_info(&host->pdev->dev,
+					"Lost %s, reverting to PIO\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1674: FILE: drivers/mmc/host/atmel-mci.c:1211:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1776: FILE: drivers/mmc/host/atmel-mci.c:1313:
+		ret = request_irq(gpio_to_irq(host->detect_pin),
+				atmci_detect_change,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1789: FILE: drivers/mmc/host/atmel-mci.c:1326:
+	dev_info(&mmc->class_dev,
+			"Atmel MCI controller at 0x%08lx irq %d\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1887: FILE: include/asm-avr32/atmel-mci.h:1:
+#ifndef __ASM_AVR32_ATMEL_MCI_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 16 warnings, 55 checks, 1761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000322779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
