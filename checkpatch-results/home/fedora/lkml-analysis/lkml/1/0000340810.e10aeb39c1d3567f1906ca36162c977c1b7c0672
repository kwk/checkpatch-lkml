WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH] [Coding Style]: misc fixes for fs/ext{3,4}/acl.{c,h} from checkpatch.pl

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:LINE_SPACING: Missing a blank line after declarations
#234: FILE: fs/ext3/acl.c:240:
+			mode_t mode = inode->i_mode;
+			error = posix_acl_equiv_mode(acl, &mode);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: fs/ext3/acl.c:241:
+			if (error < 0)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#237: FILE: fs/ext3/acl.c:243:
+				return error;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: fs/ext3/acl.c:243:
+			else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct inode *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#317: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct inode *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#317: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#317: FILE: fs/ext3/acl.h:61:
+extern int ext3_permission(struct inode *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: fs/ext3/acl.h:62:
+extern int ext3_acl_chmod(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#318: FILE: fs/ext3/acl.h:62:
+extern int ext3_acl_chmod(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: fs/ext3/acl.h:63:
+extern int ext3_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#319: FILE: fs/ext3/acl.h:63:
+extern int ext3_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#319: FILE: fs/ext3/acl.h:63:
+extern int ext3_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#319: FILE: fs/ext3/acl.h:63:
+extern int ext3_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#516: FILE: fs/ext4/acl.c:240:
+			mode_t mode = inode->i_mode;
+			error = posix_acl_equiv_mode(acl, &mode);

CHECK:BRACES: braces {} should be used on all arms of this statement
#517: FILE: fs/ext4/acl.c:241:
+			if (error < 0)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#519: FILE: fs/ext4/acl.c:243:
+				return error;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#519: FILE: fs/ext4/acl.c:243:
+			else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#590: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#590: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#590: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#590: FILE: fs/ext4/acl.h:61:
+extern int ext4_permission(struct inode *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#591: FILE: fs/ext4/acl.h:62:
+extern int ext4_acl_chmod(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#591: FILE: fs/ext4/acl.h:62:
+extern int ext4_acl_chmod(struct inode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#592: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'handle_t *' should also have an identifier name
#592: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#592: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#592: FILE: fs/ext4/acl.h:63:
+extern int ext4_init_acl(handle_t *, struct inode *, struct inode *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 10 checks, 530 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
