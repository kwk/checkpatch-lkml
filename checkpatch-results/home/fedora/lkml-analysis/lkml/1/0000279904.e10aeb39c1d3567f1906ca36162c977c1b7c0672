WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/inode.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/inode.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/inode.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#65: FILE: fs/aufs/inode.h:22:
+ * $Id: inode.h,v 1.2 2008/04/21 01:32:05 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#110: FILE: fs/aufs/inode.h:67:
+extern struct inode_operations aufs_iop, aufs_symlink_iop, aufs_dir_iop;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_ADD_ENTRY>
#113: FILE: fs/aufs/inode.h:70:
+#define AuWrDir_ADD_ENTRY	1

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_LOCK_SRCDIR>
#114: FILE: fs/aufs/inode.h:71:
+#define AuWrDir_LOCK_SRCDIR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#114: FILE: fs/aufs/inode.h:71:
+#define AuWrDir_LOCK_SRCDIR	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_ISDIR>
#115: FILE: fs/aufs/inode.h:72:
+#define AuWrDir_ISDIR		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#115: FILE: fs/aufs/inode.h:72:
+#define AuWrDir_ISDIR		(1 << 2)

CHECK:CAMELCASE: Avoid CamelCase: <AuWrDir_##name>
#116: FILE: fs/aufs/inode.h:73:
+#define au_ftest_wrdir(flags, name)	((flags) & AuWrDir_##name)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#124: FILE: fs/aufs/inode.h:81:
+};
+int au_wr_dir(struct dentry *dentry, struct dentry *src_dentry,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#134: FILE: fs/aufs/inode.h:91:
+		struct nameidata *nd);
 		                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#170: FILE: fs/aufs/inode.h:127:
+#if 0 // xattr

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_XINO>
#191: FILE: fs/aufs/inode.h:148:
+#define AuHi_XINO	1

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_NOTIFY>
#192: FILE: fs/aufs/inode.h:149:
+#define AuHi_NOTIFY	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#192: FILE: fs/aufs/inode.h:149:
+#define AuHi_NOTIFY	(1 << 1)

CHECK:CAMELCASE: Avoid CamelCase: <AuHi_##name>
#193: FILE: fs/aufs/inode.h:150:
+#define au_ftest_hi(flags, name)	((flags) & AuHi_##name)

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD>
#231: FILE: fs/aufs/inode.h:188:
+	AuLsc_II_CHILD,		/* child first */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD2>
#232: FILE: fs/aufs/inode.h:189:
+	AuLsc_II_CHILD2,	/* rename(2), link(2), and cpup at hinotify */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_CHILD3>
#233: FILE: fs/aufs/inode.h:190:
+	AuLsc_II_CHILD3,	/* copyup dirs */

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT>
#234: FILE: fs/aufs/inode.h:191:
+	AuLsc_II_PARENT,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT2>
#235: FILE: fs/aufs/inode.h:192:
+	AuLsc_II_PARENT2,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT3>
#236: FILE: fs/aufs/inode.h:193:
+	AuLsc_II_PARENT3,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_PARENT4>
#237: FILE: fs/aufs/inode.h:194:
+	AuLsc_II_PARENT4,

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_NEW>
#238: FILE: fs/aufs/inode.h:195:
+	AuLsc_II_NEW		/* new inode */

CHECK:CAMELCASE: Avoid CamelCase: <AuReadLockFunc>
#251: FILE: fs/aufs/inode.h:208:
+#define AuReadLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_II_##lsc>
#253: FILE: fs/aufs/inode.h:210:
+{ au_rw_read_lock_nested(&au_ii(i)->ii_rwsem, AuLsc_II_##lsc); }

CHECK:CAMELCASE: Avoid CamelCase: <AuWriteLockFunc>
#255: FILE: fs/aufs/inode.h:212:
+#define AuWriteLockFunc(name, lsc) \

CHECK:CAMELCASE: Avoid CamelCase: <AuRWLockFuncs>
#259: FILE: fs/aufs/inode.h:216:
+#define AuRWLockFuncs(name, lsc) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#259: FILE: fs/aufs/inode.h:216:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#259: FILE: fs/aufs/inode.h:216:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lsc' - possible side-effects?
#259: FILE: fs/aufs/inode.h:216:
+#define AuRWLockFuncs(name, lsc) \
+	AuReadLockFunc(name, lsc) \
+	AuWriteLockFunc(name, lsc)

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleUnlockRwsemFuncs>
#279: FILE: fs/aufs/inode.h:236:
+AuSimpleUnlockRwsemFuncs(ii, struct inode *i, au_ii(i)->ii_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <IiMustReadLock>
#282: FILE: fs/aufs/inode.h:239:
+#define IiMustReadLock(i) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#282: FILE: fs/aufs/inode.h:239:
+#define IiMustReadLock(i) do { \
+	SiMustAnyLock((i)->i_sb); \
+	AuRwMustReadLock(&au_ii(i)->ii_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <SiMustAnyLock>
#283: FILE: fs/aufs/inode.h:240:
+	SiMustAnyLock((i)->i_sb); \

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustReadLock>
#284: FILE: fs/aufs/inode.h:241:
+	AuRwMustReadLock(&au_ii(i)->ii_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <IiMustWriteLock>
#287: FILE: fs/aufs/inode.h:244:
+#define IiMustWriteLock(i) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#287: FILE: fs/aufs/inode.h:244:
+#define IiMustWriteLock(i) do { \
+	SiMustAnyLock((i)->i_sb); \
+	AuRwMustWriteLock(&au_ii(i)->ii_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustWriteLock>
#289: FILE: fs/aufs/inode.h:246:
+	AuRwMustWriteLock(&au_ii(i)->ii_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <IiMustAnyLock>
#292: FILE: fs/aufs/inode.h:249:
+#define IiMustAnyLock(i) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#292: FILE: fs/aufs/inode.h:249:
+#define IiMustAnyLock(i) do { \
+	SiMustAnyLock((i)->i_sb); \
+	AuRwMustAnyLock(&au_ii(i)->ii_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustAnyLock>
#294: FILE: fs/aufs/inode.h:251:
+	AuRwMustAnyLock(&au_ii(i)->ii_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <IiMustNoWaiters>
#297: FILE: fs/aufs/inode.h:254:
+#define IiMustNoWaiters(i)	AuRwMustNoWaiters(&au_ii(i)->ii_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#297: FILE: fs/aufs/inode.h:254:
+#define IiMustNoWaiters(i)	AuRwMustNoWaiters(&au_ii(i)->ii_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#316: FILE: fs/aufs/inode.h:273:
+	AuDebugOn(!S_ISDIR(inode->i_mode));

WARNING:LINE_SPACING: Missing a blank line after declarations
#323: FILE: fs/aufs/inode.h:280:
+	struct au_hinode *hinode;
+	IiMustAnyLock(inode);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#346: FILE: fs/aufs/inode.h:303:
+	iput(hinode->hi_inode);
 	^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#362: FILE: fs/aufs/inode.h:319:
+	return !(au_ii(inode)->ii_hsb1 == h_inode->i_sb
+		 && inode->i_generation == h_inode->i_generation);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 8 warnings, 40 checks, 336 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279904.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
