WARNING:TYPO_SPELLING: 'performace' may be misspelled - perhaps 'performance'?
#53: 
the three primitives three important operations will have a performace
                                                            ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#174: FILE: include/asm-s390/pgtable.h:505:
+#define pte_same(a,b)  (pte_val(a) == pte_val(b))
                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#221: FILE: include/asm-s390/pgtable.h:730:
+#define ptep_get_and_clear(__mm, __address, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (atomic_read(&(__mm)->mm_users) > 1)				\
+		ptep_invalidate(__address, __ptep);			\
+	else								\
+		pte_clear((__mm), (__address), (__ptep));		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__address' - possible side-effects?
#221: FILE: include/asm-s390/pgtable.h:730:
+#define ptep_get_and_clear(__mm, __address, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (atomic_read(&(__mm)->mm_users) > 1)				\
+		ptep_invalidate(__address, __ptep);			\
+	else								\
+		pte_clear((__mm), (__address), (__ptep));		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#221: FILE: include/asm-s390/pgtable.h:730:
+#define ptep_get_and_clear(__mm, __address, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (atomic_read(&(__mm)->mm_users) > 1)				\
+		ptep_invalidate(__address, __ptep);			\
+	else								\
+		pte_clear((__mm), (__address), (__ptep));		\
+	__pte;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__mm' - possible side-effects?
#264: FILE: include/asm-s390/pgtable.h:771:
+#define ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1)			\
+			ptep_invalidate(__addr, __ptep);		\
+		set_pte_at(__mm, __addr, __ptep, pte_wrprotect(__pte));	\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__addr' - possible side-effects?
#264: FILE: include/asm-s390/pgtable.h:771:
+#define ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1)			\
+			ptep_invalidate(__addr, __ptep);		\
+		set_pte_at(__mm, __addr, __ptep, pte_wrprotect(__pte));	\
+	}								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__ptep' - possible side-effects?
#264: FILE: include/asm-s390/pgtable.h:771:
+#define ptep_set_wrprotect(__mm, __addr, __ptep)			\
+({									\
+	pte_t __pte = *(__ptep);					\
+	if (pte_write(__pte)) {						\
+		if (atomic_read(&(__mm)->mm_users) > 1)			\
+			ptep_invalidate(__addr, __ptep);		\
+		set_pte_at(__mm, __addr, __ptep, pte_wrprotect(__pte));	\
+	}								\
+})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#394: FILE: include/asm-s390/tlbflush.h:21:
+	extern void smp_ptlb_all(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#410: FILE: include/asm-s390/tlbflush.h:47:
+	asm volatile(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#412: FILE: include/asm-s390/tlbflush.h:49:
+		: : "a" (2048), "a" (__pa(pgd) & PAGE_MASK) : "cc" );

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: include/asm-s390/tlbflush.h:52:
+static inline void __tlb_flush_mm(struct mm_struct * mm)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#472: FILE: include/asm-s390/tlbflush.h:83:
+static inline void __tlb_flush_mm_cond(struct mm_struct * mm)

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#553: FILE: include/asm-s390/tlb.h:26:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/smp.h> instead of <asm/smp.h>
#555: FILE: include/asm-s390/tlb.h:28:
+#include <asm/smp.h>

CHECK:SPACING: No space is necessary after a cast
#597: FILE: include/asm-s390/tlb.h:70:
+		pmd_free((pmd_t *) tlb->array[tlb->nr_pmds++]);

WARNING:TYPO_SPELLING: 'fo' may be misspelled - perhaps 'of'?
#615: FILE: include/asm-s390/tlb.h:86:
+ * tlb_ptep_clear_flush. In both flush modes the tlb fo a page cache page
                                                      ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#631: FILE: include/asm-s390/tlb.h:100:
+	if (!tlb->fullmm) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#635: FILE: include/asm-s390/tlb.h:104:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#646: FILE: include/asm-s390/tlb.h:115:
+	if (!tlb->fullmm) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#647: FILE: include/asm-s390/tlb.h:116:
+		tlb->array[--tlb->nr_pmds] = (struct page *) pmd;

CHECK:BRACES: Unbalanced braces around else statement
#650: FILE: include/asm-s390/tlb.h:119:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 4 warnings, 14 checks, 534 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
