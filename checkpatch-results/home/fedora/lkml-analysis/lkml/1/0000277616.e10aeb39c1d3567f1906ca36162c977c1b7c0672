WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: fs/aufs/misc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/misc.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#60: FILE: fs/aufs/misc.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#73: FILE: fs/aufs/misc.c:29:
+	LKTRTrace("p %p, nused %d, sz %d\n", p, nused, new_sz);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#74: FILE: fs/aufs/misc.c:30:
+	AuDebugOn(new_sz <= 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#91: FILE: fs/aufs/misc.c:47:
+	if (src) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#94: FILE: fs/aufs/misc.c:50:
+		if (sbinfo->si_wbr_create == AuWbrCreate_TDP) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#96: FILE: fs/aufs/misc.c:52:
+			if ((dst->flags & LOOKUP_CREATE)
+			    && !(dst->intent.open.flags & O_CREAT))

CHECK:BRACES: Unbalanced braces around else statement
#102: FILE: fs/aufs/misc.c:58:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#108: FILE: fs/aufs/misc.c:64:
+struct nameidata *au_fake_dm(struct nameidata *fake_nd, struct nameidata *nd,
                                                                           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/aufs/misc.c:67:
+	LKTRTrace("nd %p, b%d\n", nd, bindex);
 	           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#111: FILE: fs/aufs/misc.c:67:
+	LKTRTrace("nd %p, b%d\n", nd, bindex);
 	                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#113: FILE: fs/aufs/misc.c:69:
+	if (!nd)
 	     ^^

CHECK:CAMELCASE: Avoid CamelCase: <DiMustAnyLock>
#116: FILE: fs/aufs/misc.c:72:
+	DiMustAnyLock(nd->path.dentry);

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: fs/aufs/misc.c:79:
+	if (fake_nd->path.dentry) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#127: FILE: fs/aufs/misc.c:83:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#130: FILE: fs/aufs/misc.c:86:
+	AuTraceErrPtr(fake_nd);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: fs/aufs/misc.c:97:
+		int dlgt, struct nameidata *nd, struct vfsmount *nfsmnt)
 		                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#145: FILE: fs/aufs/misc.c:101:
+	LKTRTrace("hi%lu, %.*s, 0%o, nd %d, nfsmnt %d\n",
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#146: FILE: fs/aufs/misc.c:102:
+		  h_dir->i_ino, AuDLNPair(h_dentry), mode, !!nd, !!nfsmnt);
 		                                             ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#146: FILE: fs/aufs/misc.c:102:
+		  h_dir->i_ino, AuDLNPair(h_dentry), mode, !!nd, !!nfsmnt);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#148: FILE: fs/aufs/misc.c:104:
+	err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:BRACES: braces {} should be used on all arms of this statement
#149: FILE: fs/aufs/misc.c:105:
+	if (!nfsmnt)
[...]
+	else {
[...]

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#150: FILE: fs/aufs/misc.c:106:
+		err = vfsub_create(h_dir, h_dentry, mode, /*nd*/NULL, dlgt);
 		                                            ^^

CHECK:BRACES: Unbalanced braces around else statement
#151: FILE: fs/aufs/misc.c:107:
+	else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#154: FILE: fs/aufs/misc.c:110:
+		if (nd)
 		    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#155: FILE: fs/aufs/misc.c:111:
+			fake_nd = *nd;
 			           ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#169: FILE: fs/aufs/misc.c:125:
+	AuTraceErr(err);

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: fs/aufs/misc.c:147:
+		struct dentry *parent;
+		parent = dget_parent(dst->f_dentry);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#192: FILE: fs/aufs/misc.c:148:
+		IMustLock(parent->d_inode);

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#211: FILE: fs/aufs/misc.c:167:
+		AuWarn("copying a large file %Ld\n", (long long)len);

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#211: FILE: fs/aufs/misc.c:167:
+		AuWarn("copying a large file %Ld\n", (long long)len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: fs/aufs/misc.c:230:
+			loff_t res;
+			LKTRLabel(hole);

CHECK:CAMELCASE: Avoid CamelCase: <LKTRLabel>
#274: FILE: fs/aufs/misc.c:230:
+			LKTRLabel(hole);

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD2>
#298: FILE: fs/aufs/misc.c:254:
+			mutex_lock_nested(&h_i->i_mutex, AuLsc_I_CHILD2);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#317: FILE: fs/aufs/misc.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#331: FILE: fs/aufs/misc.h:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#332: FILE: fs/aufs/misc.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#350: FILE: fs/aufs/misc.h:34:
+typedef unsigned int au_gen_t;

CHECK:CAMELCASE: Avoid CamelCase: <AuGenYounger>
#352: FILE: fs/aufs/misc.h:36:
+#define AuGenYounger(a, b)	((int)(b) - (int)(a) < 0)

CHECK:CAMELCASE: Avoid CamelCase: <AuGenOlder>
#353: FILE: fs/aufs/misc.h:37:
+#define AuGenOlder(a, b)	AufsGenYounger(b, a)

CHECK:CAMELCASE: Avoid CamelCase: <AufsGenYounger>
#353: FILE: fs/aufs/misc.h:37:
+#define AuGenOlder(a, b)	AufsGenYounger(b, a)

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgRcntInit>
#365: FILE: fs/aufs/misc.h:49:
+#define AuDbgRcntInit(rw) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgRcntInc>
#370: FILE: fs/aufs/misc.h:54:
+#define AuDbgRcntInc(rw)	atomic_inc_return(&(rw)->rcnt)

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgRcntDec>
#371: FILE: fs/aufs/misc.h:55:
+#define AuDbgRcntDec(rw)	WARN_ON(atomic_dec_return(&(rw)->rcnt) < 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#441: FILE: fs/aufs/misc.h:125:
+	int ret = down_read_trylock(&rw->rwsem);
+	if (ret)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#456: FILE: fs/aufs/misc.h:140:
+#define AuRwMustNoWaiters(rw)	AuDebugOn(!list_empty(&(rw)->rwsem.wait_list))

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustAnyLock>
#457: FILE: fs/aufs/misc.h:141:
+#define AuRwMustAnyLock(rw)	AuDebugOn(down_write_trylock(&(rw)->rwsem))

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustReadLock>
#459: FILE: fs/aufs/misc.h:143:
+#define AuRwMustReadLock(rw) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rw' - possible side-effects?
#459: FILE: fs/aufs/misc.h:143:
+#define AuRwMustReadLock(rw) do { \
+	AuRwMustAnyLock(rw); \
+	AuDebugOn(!atomic_read(&(rw)->rcnt)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustWriteLock>
#464: FILE: fs/aufs/misc.h:148:
+#define AuRwMustWriteLock(rw) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rw' - possible side-effects?
#464: FILE: fs/aufs/misc.h:148:
+#define AuRwMustWriteLock(rw) do { \
+	AuRwMustAnyLock(rw); \
+	AuDebugOn(atomic_read(&(rw)->rcnt)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleLockRwsemFuncs>
#473: FILE: fs/aufs/misc.h:157:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#473: FILE: fs/aufs/misc.h:157:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_lock(param) \
+{ au_rw_read_lock(&(rwsem)); } \
+static inline void prefix##_write_lock(param) \
+{ au_rw_write_lock(&(rwsem)); } \
+static inline int prefix##_read_trylock(param) \
+{ return au_rw_read_trylock(&(rwsem)); } \
+static inline int prefix##_write_trylock(param) \
+{ return au_rw_write_trylock(&(rwsem)); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#473: FILE: fs/aufs/misc.h:157:
+#define AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_lock(param) \
+{ au_rw_read_lock(&(rwsem)); } \
+static inline void prefix##_write_lock(param) \
+{ au_rw_write_lock(&(rwsem)); } \
+static inline int prefix##_read_trylock(param) \
+{ return au_rw_read_trylock(&(rwsem)); } \
+static inline int prefix##_write_trylock(param) \
+{ return au_rw_write_trylock(&(rwsem)); }

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#483: FILE: fs/aufs/misc.h:167:
+/* static inline void prefix##_read_trylock_nested(param, lsc)
+{au_rw_read_trylock_nested(&(rwsem, lsc));}

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#485: FILE: fs/aufs/misc.h:169:
+{au_rw_write_trylock_nested(&(rwsem), nested);} */

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleUnlockRwsemFuncs>
#487: FILE: fs/aufs/misc.h:171:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#487: FILE: fs/aufs/misc.h:171:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_unlock(param) \
+{ au_rw_read_unlock(&(rwsem)); } \
+static inline void prefix##_write_unlock(param) \
+{ au_rw_write_unlock(&(rwsem)); } \
+static inline void prefix##_downgrade_lock(param) \
+{ au_rw_dgrade_lock(&(rwsem)); }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#487: FILE: fs/aufs/misc.h:171:
+#define AuSimpleUnlockRwsemFuncs(prefix, param, rwsem) \
+static inline void prefix##_read_unlock(param) \
+{ au_rw_read_unlock(&(rwsem)); } \
+static inline void prefix##_write_unlock(param) \
+{ au_rw_write_unlock(&(rwsem)); } \
+static inline void prefix##_downgrade_lock(param) \
+{ au_rw_dgrade_lock(&(rwsem)); }

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#495: FILE: fs/aufs/misc.h:179:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#495: FILE: fs/aufs/misc.h:179:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prefix' - possible side-effects?
#495: FILE: fs/aufs/misc.h:179:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'param' - possible side-effects?
#495: FILE: fs/aufs/misc.h:179:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rwsem' - possible side-effects?
#495: FILE: fs/aufs/misc.h:179:
+#define AuSimpleRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleLockRwsemFuncs(prefix, param, rwsem) \
+	AuSimpleUnlockRwsemFuncs(prefix, param, rwsem)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#507: FILE: fs/aufs/misc.h:191:
+struct nameidata *au_fake_dm(struct nameidata *fake_nd, struct nameidata *nd,
                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#511: FILE: fs/aufs/misc.h:195:
+		int dlgt, struct nameidata *nd, struct vfsmount *nfsmnt);
 		                            ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 23 warnings, 40 checks, 467 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
