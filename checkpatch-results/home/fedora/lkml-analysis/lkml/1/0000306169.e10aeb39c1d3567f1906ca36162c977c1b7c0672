WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
reserve_memtype and free_memtype are new interfaces for maintaining alias-free

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'start < 0x100000'
#106: FILE: arch/x86/kernel/cpu/mtrr/generic.c:69:
+	if (mtrr_state.have_fixed && (start < 0x100000)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BRACES: braces {} are not necessary for single statement blocks
#129: FILE: arch/x86/kernel/cpu/mtrr/generic.c:92:
+	if (!mtrr_state.enabled & 2) {
+		return mtrr_state.def_type;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#150: FILE: arch/x86/kernel/cpu/mtrr/generic.c:113:
+		if ((start & mask) != (base & mask)) {
+			continue;
+		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#173: FILE: arch/x86/kernel/cpu/mtrr/generic.c:136:
+		if (prev_match != curr_match) {
+			return MTRR_TYPE_UNCACHABLE;
+		}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: arch/x86/mm/pat.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#253: FILE: arch/x86/mm/pat.c:17:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#254: FILE: arch/x86/mm/pat.c:18:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#257: FILE: arch/x86/mm/pat.c:21:
+#include <asm/cacheflush.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#268: FILE: arch/x86/mm/pat.c:32:
+	printk(KERN_INFO "x86: PAT support disabled.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#272: FILE: arch/x86/mm/pat.c:36:
+}
+early_param("nopat", nopat);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#282: FILE: arch/x86/mm/pat.c:46:
+		if (cpu_has_pat) {
+			return 1;
+		}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#288: FILE: arch/x86/mm/pat.c:52:
+	printk(KERN_INFO "CPU and/or kernel does not support PAT.\n");

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#298: FILE: arch/x86/mm/pat.c:62:
+	PAT_UC_MINUS = 7,	/* UC, but can be overriden by MTRR */
 	                 	                  ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#301: FILE: arch/x86/mm/pat.c:65:
+#define PAT(x,y)	((u64)PAT_ ## y << ((x)*8))
              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#301: FILE: arch/x86/mm/pat.c:65:
+#define PAT(x,y)	((u64)PAT_ ## y << ((x)*8))
                 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: arch/x86/mm/pat.c:96:
+	pat = PAT(0,WB) | PAT(1,WC) | PAT(2,UC_MINUS) | PAT(3,UC) |
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: arch/x86/mm/pat.c:96:
+	pat = PAT(0,WB) | PAT(1,WC) | PAT(2,UC_MINUS) | PAT(3,UC) |
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: arch/x86/mm/pat.c:96:
+	pat = PAT(0,WB) | PAT(1,WC) | PAT(2,UC_MINUS) | PAT(3,UC) |
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#332: FILE: arch/x86/mm/pat.c:96:
+	pat = PAT(0,WB) | PAT(1,WC) | PAT(2,UC_MINUS) | PAT(3,UC) |
 	                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: arch/x86/mm/pat.c:97:
+	      PAT(4,WB) | PAT(5,WC) | PAT(6,UC_MINUS) | PAT(7,UC);
 	           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: arch/x86/mm/pat.c:97:
+	      PAT(4,WB) | PAT(5,WC) | PAT(6,UC_MINUS) | PAT(7,UC);
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: arch/x86/mm/pat.c:97:
+	      PAT(4,WB) | PAT(5,WC) | PAT(6,UC_MINUS) | PAT(7,UC);
 	                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: arch/x86/mm/pat.c:97:
+	      PAT(4,WB) | PAT(5,WC) | PAT(6,UC_MINUS) | PAT(7,UC);
 	                                                     ^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#336: FILE: arch/x86/mm/pat.c:100:
+	if (!smp_processor_id()) {
+		rdmsrl(MSR_IA32_CR_PAT, boot_pat_state);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#341: FILE: arch/x86/mm/pat.c:105:
+	printk(KERN_INFO "x86 PAT enabled: cpu %d, old 0x%Lx, new 0x%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#341: FILE: arch/x86/mm/pat.c:105:
+	printk(KERN_INFO "x86 PAT enabled: cpu %d, old 0x%Lx, new 0x%Lx\n",

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#349: FILE: arch/x86/mm/pat.c:113:
+	switch (flags & _PAGE_CACHE_MASK) {
+		case _PAGE_CACHE_UC:		return "uncached";
+		case _PAGE_CACHE_UC_MINUS:	return "uncached-minus";
+		case _PAGE_CACHE_WB:		return "write-back";
+		case _PAGE_CACHE_WC:		return "write-combining";
+		default:			return "broken";

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#379: FILE: arch/x86/mm/pat.c:143:
+	struct list_head nd;
 	                 ^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#383: FILE: arch/x86/mm/pat.c:147:
+static DEFINE_SPINLOCK(memtype_lock); ^I/* protects memtype list */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: arch/x86/mm/pat.c:157:
+static int pat_x_mtrr_type(u64 start, u64 end, unsigned long prot,
+				unsigned long *ret_prot)

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/x86/mm/pat.c:187:
+^I           mtrr_type == MTRR_TYPE_UNCACHABLE) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: arch/x86/mm/pat.c:199:
+int reserve_memtype(u64 start, u64 end, unsigned long req_type,
+			unsigned long *ret_type)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new_entry)...) over kmalloc(sizeof(struct memtype)...)
#467: FILE: arch/x86/mm/pat.c:231:
+	new_entry  = kmalloc(sizeof(struct memtype), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#481: FILE: arch/x86/mm/pat.c:245:
+	list_for_each_entry(parse, &memtype_list, nd) {
 	                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#485: FILE: arch/x86/mm/pat.c:249:
+			list_add(&new_entry->nd, parse->nd.prev);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#485: FILE: arch/x86/mm/pat.c:249:
+			list_add(&new_entry->nd, parse->nd.prev);
 			                                ^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#498: FILE: arch/x86/mm/pat.c:262:
+				printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#498: FILE: arch/x86/mm/pat.c:262:
+				printk(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#499: FILE: arch/x86/mm/pat.c:263:
+		KERN_INFO "%s:%d conflicting memory types %Lx-%Lx %s<->%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#513: FILE: arch/x86/mm/pat.c:277:
+			list_for_each_entry_continue(parse, &memtype_list, nd) {
 			                                                   ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#514: FILE: arch/x86/mm/pat.c:278:
+				if (end <= parse->start) {
+					break;
+				}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#519: FILE: arch/x86/mm/pat.c:283:
+					printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#519: FILE: arch/x86/mm/pat.c:283:
+					printk(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#520: FILE: arch/x86/mm/pat.c:284:
+		KERN_INFO "%s:%d conflicting memory types %Lx-%Lx %s<->%s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#530: FILE: arch/x86/mm/pat.c:294:
+			if (err) {
+				break;
+			}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#535: FILE: arch/x86/mm/pat.c:299:
+			list_add(&new_entry->nd, saved_ptr->nd.prev);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#535: FILE: arch/x86/mm/pat.c:299:
+			list_add(&new_entry->nd, saved_ptr->nd.prev);
 			                                    ^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#548: FILE: arch/x86/mm/pat.c:312:
+				printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#548: FILE: arch/x86/mm/pat.c:312:
+				printk(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#549: FILE: arch/x86/mm/pat.c:313:
+		KERN_INFO "%s:%d conflicting memory types %Lx-%Lx %s<->%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#563: FILE: arch/x86/mm/pat.c:327:
+			list_for_each_entry_continue(parse, &memtype_list, nd) {
 			                                                   ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#564: FILE: arch/x86/mm/pat.c:328:
+				if (end <= parse->start) {
+					break;
+				}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#569: FILE: arch/x86/mm/pat.c:333:
+					printk(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#569: FILE: arch/x86/mm/pat.c:333:
+					printk(

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#570: FILE: arch/x86/mm/pat.c:334:
+		KERN_INFO "%s:%d conflicting memory types %Lx-%Lx %s<->%s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#580: FILE: arch/x86/mm/pat.c:344:
+			if (err) {
+				break;
+			}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#585: FILE: arch/x86/mm/pat.c:349:
+			list_add(&new_entry->nd, &saved_ptr->nd);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#585: FILE: arch/x86/mm/pat.c:349:
+			list_add(&new_entry->nd, &saved_ptr->nd);
 			                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#599: FILE: arch/x86/mm/pat.c:363:
+		list_add_tail(&new_entry->nd, &memtype_list);
 		                          ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#612: FILE: arch/x86/mm/pat.c:376:
+	if (!pat_wc_enabled) {
+		return 0;
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#617: FILE: arch/x86/mm/pat.c:381:
+	if (start >= ISA_START_ADDRESS && end <= ISA_END_ADDRESS) {
+		return 0;
+	}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#622: FILE: arch/x86/mm/pat.c:386:
+	list_for_each_entry(ml, &memtype_list, nd) {
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#624: FILE: arch/x86/mm/pat.c:388:
+			list_del(&ml->nd);
 			              ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#633: FILE: arch/x86/mm/pat.c:397:
+		printk(KERN_DEBUG "%s:%d freeing invalid memtype %Lx-%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#633: FILE: arch/x86/mm/pat.c:397:
+		printk(KERN_DEBUG "%s:%d freeing invalid memtype %Lx-%Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: arch/x86/mm/pat.c:398:
+		printk(KERN_DEBUG "%s:%d freeing invalid memtype %Lx-%Lx\n",
+			current->comm, current->pid, start, end);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#644: FILE: include/asm-x86/pat.h:1:
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: include/asm-x86/pat.h:9:
+extern void pat_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/asm-x86/pat.h:11:
+extern int reserve_memtype(u64 start, u64 end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#655: FILE: include/asm-x86/pat.h:12:
+extern int reserve_memtype(u64 start, u64 end,
+		unsigned long req_type, unsigned long *ret_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/asm-x86/pat.h:13:
+extern int free_memtype(u64 start, u64 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#725: FILE: include/asm-x86/mtrr.h:87:
+extern u8 mtrr_type_lookup(u64 addr, u64 end);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306169.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 43 warnings, 19 checks, 657 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306169.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
