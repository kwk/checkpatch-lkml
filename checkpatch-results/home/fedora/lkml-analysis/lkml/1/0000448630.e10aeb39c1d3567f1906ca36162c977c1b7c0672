ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#53: FILE: drivers/char/cyclades.c:681:
+#define ISZLOADED(card)	(((ZO_V1==readl(&((struct RUNTIME_9060 __iomem *) \
                        	        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#53: FILE: drivers/char/cyclades.c:681:
+#define ISZLOADED(card)	(((ZO_V1==readl(&((struct RUNTIME_9060 __iomem *) \

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'card' - possible side-effects?
#53: FILE: drivers/char/cyclades.c:681:
+#define ISZLOADED(card)	(((ZO_V1==readl(&((struct RUNTIME_9060 __iomem *) \
 			((card).ctl_addr))->mail_box_0)) || \
 			Z_FPGA_CHECK(card)) && \
+			(ZFIRM_ID==readl(&((struct FIRM_ID __iomem *) \
 			((card).base_addr+ID_ADDRESS))->signature)))

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#57: FILE: drivers/char/cyclades.c:684:
+			(ZFIRM_ID==readl(&((struct FIRM_ID __iomem *) \
 			         ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#57: FILE: drivers/char/cyclades.c:684:
+			(ZFIRM_ID==readl(&((struct FIRM_ID __iomem *) \

CHECK:CAMELCASE: Avoid CamelCase: <CyCCR>
#66: FILE: drivers/char/cyclades.c:975:
+		if (readb(base_addr + (CyCCR << index)) == 0) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:BRACES: braces {} are not necessary for single statement blocks
#66: FILE: drivers/char/cyclades.c:975:
+		if (readb(base_addr + (CyCCR << index)) == 0) {
 			break;
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <CySRER>
#75: FILE: drivers/char/cyclades.c:1018:
+		  readb(address + (CySRER << index)) | CyTxRdy);

CHECK:CAMELCASE: Avoid CamelCase: <CyTxRdy>
#75: FILE: drivers/char/cyclades.c:1018:
+		  readb(address + (CySRER << index)) | CyTxRdy);

CHECK:SPACING: No space is necessary after a cast
#85: FILE: drivers/char/cyclades.c:1028:
+	save_xir = (u_char) readb(address + (CyTIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyTIR>
#85: FILE: drivers/char/cyclades.c:1028:
+	save_xir = (u_char) readb(address + (CyTIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyCAR>
#86: FILE: drivers/char/cyclades.c:1029:
+	save_car = readb(address + (CyCAR << index));

CHECK:SPACING: No space is necessary after a cast
#99: FILE: drivers/char/cyclades.c:1058:
+		save_xir = (u_char) readb(base_addr + (CyRIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyRIR>
#99: FILE: drivers/char/cyclades.c:1058:
+		save_xir = (u_char) readb(base_addr + (CyRIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyRIVR>
#111: FILE: drivers/char/cyclades.c:1068:
+			j = (readb(base_addr + (CyRIVR << index)) &

CHECK:CAMELCASE: Avoid CamelCase: <CyRDSR>
#115: FILE: drivers/char/cyclades.c:1071:
+				data = readb(base_addr + (CyRDSR << index));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#142: FILE: drivers/char/cyclades.c:1106:
+								readb(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#151: FILE: drivers/char/cyclades.c:1119:
+								readb(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#160: FILE: drivers/char/cyclades.c:1131:
+								readb(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#169: FILE: drivers/char/cyclades.c:1150:
+								readb(

CHECK:SPACING: No space is necessary after a cast
#196: FILE: drivers/char/cyclades.c:1224:
+		save_xir = (u_char) readb(base_addr + (CyTIR << index));

CHECK:SPACING: No space is necessary after a cast
#260: FILE: drivers/char/cyclades.c:1349:
+		save_xir = (u_char) readb(base_addr + (CyMIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyMIR>
#260: FILE: drivers/char/cyclades.c:1349:
+		save_xir = (u_char) readb(base_addr + (CyMIR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyMISR>
#270: FILE: drivers/char/cyclades.c:1356:
+		mdm_change = readb(base_addr + (CyMISR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyMSVR1>
#271: FILE: drivers/char/cyclades.c:1357:
+		mdm_status = readb(base_addr + (CyMSVR1 << index));

CHECK:SPACING: No space is necessary after a cast
#319: FILE: drivers/char/cyclades.c:1513:
+		*param = (__u32) readl(&board_ctrl->fwcmd_param);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#351: FILE: drivers/char/cyclades.c:1570:
+	rx_get = new_rx_get = readl(&buf_ctrl->rx_get);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#379: FILE: drivers/char/cyclades.c:1639:
+			if (char_count >= (int)readl(&buf_ctrl->rx_threshold)) {
 				cy_sched_event(info, Cy_EVENT_Z_RX_FULL);
 			}

CHECK:CAMELCASE: Avoid CamelCase: <CyMSVR2>
#444: FILE: drivers/char/cyclades.c:2029:
+			readb(base_addr + (CyMSVR2 << index)));

CHECK:CAMELCASE: Avoid CamelCase: <CyRxData>
#449: FILE: drivers/char/cyclades.c:2033:
+			readb(base_addr + (CySRER << index)) | CyRxData);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxW)
#537: FILE: drivers/char/cyclades.c:2441:
+		zfw_ctrl = base_addr + (readl(&firm_id->zfwctrl_addr)& 0xfffff);
 		                                                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZE_V1 == readl(&((struct RUNTIME_9060 __iomem *)
 					 (cinfo->ctl_addr))->mail_box_0)'
#570: FILE: drivers/char/cyclades.c:2535:
+			if (((ZE_V1 == readl(&((struct RUNTIME_9060 __iomem *)
 					 (cinfo->ctl_addr))->mail_box_0)) &&
 					Z_FPGA_CHECK(*cinfo)) &&
+					(ZFIRM_HLT == readl(
 						&firm_id->signature))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ZFIRM_HLT == readl(
 						&firm_id->signature)'
#570: FILE: drivers/char/cyclades.c:2535:
+			if (((ZE_V1 == readl(&((struct RUNTIME_9060 __iomem *)
 					 (cinfo->ctl_addr))->mail_box_0)) &&
 					Z_FPGA_CHECK(*cinfo)) &&
+					(ZFIRM_HLT == readl(
 						&firm_id->signature))) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#570: FILE: drivers/char/cyclades.c:2535:
+			if (((ZE_V1 == readl(&((struct RUNTIME_9060 __iomem *)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#574: FILE: drivers/char/cyclades.c:2538:
+					(ZFIRM_HLT == readl(

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#574: FILE: drivers/char/cyclades.c:2538:
+					(ZFIRM_HLT == readl(

CHECK:CAMELCASE: Avoid CamelCase: <CyMdmCh>
#663: FILE: drivers/char/cyclades.c:3262:
+				readb(base_addr + (CySRER << index)) | CyMdmCh);

CHECK:CAMELCASE: Avoid CamelCase: <CyCOR3>
#860: FILE: drivers/char/cyclades.c:3914:
+		tmp = readb(base_addr + (CyCOR3 << index)) & CyREC_FIFO;

CHECK:CAMELCASE: Avoid CamelCase: <CyREC_FIFO>
#860: FILE: drivers/char/cyclades.c:3914:
+		tmp = readb(base_addr + (CyCOR3 << index)) & CyREC_FIFO;

CHECK:CAMELCASE: Avoid CamelCase: <CyRTPR>
#869: FILE: drivers/char/cyclades.c:3974:
+		tmp = readb(base_addr + (CyRTPR << index));

CHECK:CAMELCASE: Avoid CamelCase: <CyGFRCR>
#914: FILE: drivers/char/cyclades.c:4553:
+		if (readb(base_addr + (CyGFRCR << index)) == 0x00) {

CHECK:CAMELCASE: Avoid CamelCase: <CyPLX_VER>
#969: FILE: drivers/char/cyclades.c:4869:
+			plx_ver = readb(cy_pci_addr2 + CyPLX_VER) & 0x0f;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1059: FILE: include/linux/cyclades.h:542:
+#define cy_writeb(port,val)     do { writeb((val), (port)); mb(); } while (0)
                       ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1059: FILE: include/linux/cyclades.h:542:
+#define cy_writeb(port,val)     do { writeb((val), (port)); mb(); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1060: FILE: include/linux/cyclades.h:543:
+#define cy_writew(port,val)     do { writew((val), (port)); mb(); } while (0)
                       ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1060: FILE: include/linux/cyclades.h:543:
+#define cy_writew(port,val)     do { writew((val), (port)); mb(); } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1061: FILE: include/linux/cyclades.h:544:
+#define cy_writel(port,val)     do { writel((val), (port)); mb(); } while (0)
                       ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#1061: FILE: include/linux/cyclades.h:544:
+#define cy_writel(port,val)     do { writel((val), (port)); mb(); } while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 9 warnings, 34 checks, 936 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
