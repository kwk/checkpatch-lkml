WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Dead keys (for which the key type has been removed) will be garbage collected

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#135: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#140: FILE: security/keys/gc.c:1:
+/* Key garbage collector

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#158: FILE: security/keys/gc.c:19:
+unsigned key_gc_delay = 5 * 60;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#341: FILE: security/keys/internal.h:135:
+extern unsigned key_gc_delay;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: security/keys/internal.h:136:
+extern void keyring_gc(struct key *keyring, time_t limit);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: security/keys/internal.h:137:
+extern void key_schedule_gc(time_t expiry_at);

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#444: FILE: security/keys/keyring.c:1033:
+		if (!key_is_dead(klist->keys[loop], limit));
+			keep++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#444: FILE: security/keys/keyring.c:1033:
+		if (!key_is_dead(klist->keys[loop], limit));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct keyring_list)...)
#452: FILE: security/keys/keyring.c:1041:
+	new = kmalloc(sizeof(struct keyring_list) + max * sizeof(struct key *),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#518: FILE: security/keys/sysctl.c:26:
+		.extra1 = (void *) &one,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#519: FILE: security/keys/sysctl.c:27:
+		.extra2 = (void *) &max,

CHECK:SPACING: No space is necessary after a cast
#529: FILE: security/keys/sysctl.c:36:
+		.extra1 = (void *) &one,

CHECK:SPACING: No space is necessary after a cast
#530: FILE: security/keys/sysctl.c:37:
+		.extra2 = (void *) &max,

CHECK:SPACING: No space is necessary after a cast
#540: FILE: security/keys/sysctl.c:46:
+		.extra1 = (void *) &one,

CHECK:SPACING: No space is necessary after a cast
#541: FILE: security/keys/sysctl.c:47:
+		.extra2 = (void *) &max,

CHECK:SPACING: No space is necessary after a cast
#551: FILE: security/keys/sysctl.c:56:
+		.extra1 = (void *) &one,

CHECK:SPACING: No space is necessary after a cast
#552: FILE: security/keys/sysctl.c:57:
+		.extra2 = (void *) &max,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#558: FILE: security/keys/sysctl.c:63:
+		.maxlen = sizeof(unsigned),

CHECK:SPACING: No space is necessary after a cast
#561: FILE: security/keys/sysctl.c:66:
+		.extra1 = (void *) &zero,

CHECK:SPACING: No space is necessary after a cast
#562: FILE: security/keys/sysctl.c:67:
+		.extra2 = (void *) &max,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000088723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 7 warnings, 13 checks, 446 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000088723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
