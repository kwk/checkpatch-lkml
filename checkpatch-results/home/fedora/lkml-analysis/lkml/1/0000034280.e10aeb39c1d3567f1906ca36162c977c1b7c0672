WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
# perf timer record

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
# perf timer lat --print-lat --print-handle

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
-------------------------------------------------------------------------------------------------------

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: tools/perf/builtin-timer.c:1:
+#include "builtin.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#99: FILE: tools/perf/builtin-timer.c:20:
+static char const *timer_state_string[] = {

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#115: FILE: tools/perf/builtin-timer.c:36:
+static char const	*input_name = "perf.data";

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: tools/perf/builtin-timer.c:48:
+	OPT_STRING('i', "input", &input_name, "file",
+		    "input file name"),

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#142: FILE: tools/perf/builtin-timer.c:63:
+		   "sort by key(s): "SORT_KEY),

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#160: FILE: tools/perf/builtin-timer.c:81:
+static const char *record_args[] = {

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#192: FILE: tools/perf/builtin-timer.c:113:
+static char const *timer_type_string[] = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#216: FILE: tools/perf/builtin-timer.c:137:
+^Istruct timer_info ^I*itimer_hrtimer;$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#243: FILE: tools/perf/builtin-timer.c:164:
+#define CMP_FUNCTION(value)						\
+static int cmp_##value(struct timer_info *v1, struct timer_info *v2)	\
+{									\
+	if (v1->value < v2->value)					\
+		return -1;						\
+	if (v1->value > v2->value)					\
+		return 1;						\
+	return 0;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#243: FILE: tools/perf/builtin-timer.c:164:
+#define CMP_FUNCTION(value)						\
+static int cmp_##value(struct timer_info *v1, struct timer_info *v2)	\
+{									\
+	if (v1->value < v2->value)					\
+		return -1;						\
+	if (v1->value > v2->value)					\
+		return 1;						\
+	return 0;							\
+}

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#276: FILE: tools/perf/builtin-timer.c:197:
+#define NB_AVAILABLE_SORTS	(int)(sizeof(available_sorts) / sizeof(struct sort_dimension *))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#320: FILE: tools/perf/builtin-timer.c:241:
+	BUG_ON(list_empty(list));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: tools/perf/builtin-timer.c:299:
+__timer_insert(struct rb_root *root, struct timer_info *data,
+			 struct list_head *_sort_list)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#380: FILE: tools/perf/builtin-timer.c:301:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#418: FILE: tools/perf/builtin-timer.c:339:
+	if (find && find->type != type) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#420: FILE: tools/perf/builtin-timer.c:341:
+		dprintf("find timer[%p], but type[%s] is not we expect[%s],"
+			"set to initializtion state.\n", find->timer,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#461: FILE: tools/perf/builtin-timer.c:382:
+		struct timer_info *data;
+		node = rb_first(&timer_root);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'catched' may be misspelled - perhaps 'caught'?
#484: FILE: tools/perf/builtin-timer.c:405:
+	 * catched, no need check.
 	   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#496: FILE: tools/perf/builtin-timer.c:417:
+#define FILL_RAM_FIELD_PTR(event, field, data)				\
+	field = raw_field_ptr(event, #field, data)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#498: FILE: tools/perf/builtin-timer.c:419:
+#define FILLL_RAW_FIELD_VALUE(event, field, data)			\
+	field = (typeof(field))raw_field_value(event, #field, data)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#508: FILE: tools/perf/builtin-timer.c:429:
+		return hrtimer;
+	} else {

WARNING:SPLIT_STRING: quoted string split across lines
#563: FILE: tools/perf/builtin-timer.c:484:
+		dprintf("timer-expires-entry: Timer[%p], type:%s,"
+			" timer latency < 0, bug=%d.\n", timer,

WARNING:SPACING: space prohibited before semicolon
#565: FILE: tools/perf/builtin-timer.c:486:
+		return ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#577: FILE: tools/perf/builtin-timer.c:498:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#603: FILE: tools/perf/builtin-timer.c:524:
+		dprintf("timer expires exit: Timer[%p], type:%s, handle time"
+			" < 0, expires-ts:%llu, current-ts:%llu, bug=%d.\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#618: FILE: tools/perf/builtin-timer.c:539:
+	return;
+}

WARNING:SPACING: space prohibited before semicolon
#681: FILE: tools/perf/builtin-timer.c:602:
+		return ;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: tools/perf/builtin-timer.c:605:
+	dprintf("timer-start: Timer[%p], type:%s, task:%s, expires:%llu",
+		 timer_info->timer, "itimer", thread->comm, expires);

CHECK:BRACES: braces {} should be used on all arms of this statement
#724: FILE: tools/perf/builtin-timer.c:645:
+	if (which == ITIMER_REAL) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#728: FILE: tools/perf/builtin-timer.c:649:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#734: FILE: tools/perf/builtin-timer.c:655:
+		dprintf("timer-expires-entry: Timer[%p], type:%s, handle time < 0,"
+			"bug=%d.\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#748: FILE: tools/perf/builtin-timer.c:669:
+	return;
+}

WARNING:SPACING: Unnecessary space before function pointer arguments
#752: FILE: tools/perf/builtin-timer.c:673:
+	void (*handler) (void *data, struct event *event, int this_cpu,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#756: FILE: tools/perf/builtin-timer.c:677:
+^I{ "timer_start", ^Itimer_start_handler^I^I},$

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#802: FILE: tools/perf/builtin-timer.c:723:
+	dump_printf("(IP, %d): %d/%d: %p period: %Ld\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: tools/perf/builtin-timer.c:724:
+	dump_printf("(IP, %d): %d/%d: %p period: %Ld\n",
+		event->header.misc,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!thread"
#809: FILE: tools/perf/builtin-timer.c:730:
+	if (thread == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPLIT_STRING: quoted string split across lines
#829: FILE: tools/perf/builtin-timer.c:750:
+			"No trace sample to read. Did you call perf record "
+			"without -R?");

WARNING:LINE_SPACING: Missing a blank line after declarations
#845: FILE: tools/perf/builtin-timer.c:766:
+	int err;
+	timer_session = perf_session__new(input_name, O_RDONLY, 0, NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!timer_session"
#847: FILE: tools/perf/builtin-timer.c:768:
+	if (timer_session == NULL)

WARNING:TYPO_SPELLING: 'Unknow' may be misspelled - perhaps 'Unknown'?
#865: FILE: tools/perf/builtin-timer.c:786:
+		return "Unknow";
 		        ^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#889: FILE: tools/perf/builtin-timer.c:810:
+	if (timer_info->type == ITIMER) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#891: FILE: tools/perf/builtin-timer.c:812:
+		printf("|%-10.10s:[%7s]", ((struct thread *)(timer_info->timer))->comm,
+						   get_itimer_type(timer_info->itimer_type));

CHECK:BRACES: Unbalanced braces around else statement
#892: FILE: tools/perf/builtin-timer.c:813:
+	} else

WARNING:LONG_LINE_STRING: line length of 124 exceeds 100 columns
#905: FILE: tools/perf/builtin-timer.c:826:
+	printf("-------------------------------------------------------------------------------------------------------\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_STRING: line length of 124 exceeds 100 columns
#906: FILE: tools/perf/builtin-timer.c:827:
+	printf("|   Timer            |   TYPE   |   Avg-latency  | Max-latency  |  Max-latency-at-TS |Max-lat-at-Task |\n");

WARNING:LONG_LINE_STRING: line length of 124 exceeds 100 columns
#937: FILE: tools/perf/builtin-timer.c:858:
+	printf("-------------------------------------------------------------------------------------------------------\n");

WARNING:LONG_LINE_STRING: line length of 124 exceeds 100 columns
#938: FILE: tools/perf/builtin-timer.c:859:
+	printf("|   Timer            |   TYPE   | Avg-handle (ms)|Max-handle(ms)| Max-handle-at-TS(s)|Max-lat-at-func |\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#947: FILE: tools/perf/builtin-timer.c:868:
+	if (timer_info->type == ITIMER) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: tools/perf/builtin-timer.c:870:
+		printf("|%-10.10s:[%7s]", ((struct thread *)(timer_info->timer))->comm,
+						   get_itimer_type(timer_info->itimer_type));

CHECK:BRACES: Unbalanced braces around else statement
#950: FILE: tools/perf/builtin-timer.c:871:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1005: FILE: tools/perf/builtin-timer.c:926:
+	BUG_ON(i != rec_argc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1042: FILE: tools/perf/builtin.h:32:
+extern int cmd_timer(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034280.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 34 warnings, 20 checks, 978 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034280.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
