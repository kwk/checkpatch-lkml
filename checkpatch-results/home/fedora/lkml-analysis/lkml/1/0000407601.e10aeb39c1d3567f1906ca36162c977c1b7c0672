WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#59: FILE: drivers/md/Kconfig:265:
+config DM_MULTIPATH_RDAC
+	tristate "LSI/Engenio RDAC multipath support (EXPERIMENTAL)"
+	depends on DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL
+	---help---
+	  Multipath support for LSI/Engenio RDAC.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: drivers/md/dm-mpath-rdac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#110: FILE: drivers/md/dm-mpath-rdac.c:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#111: FILE: drivers/md/dm-mpath-rdac.c:19:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#133: FILE: drivers/md/dm-mpath-rdac.c:41:
+#define RDAC_QUIESCENCE_TIME 20;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#242: FILE: drivers/md/dm-mpath-rdac.c:150:
+};
+struct c8_inquiry {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#275: FILE: drivers/md/dm-mpath-rdac.c:183:
+	unsigned		timeout;

CHECK:BIT_MACRO: Prefer using the BIT macro
#277: FILE: drivers/md/dm-mpath-rdac.c:185:
+#define UNINITIALIZED_LUN	(1 << 8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#278: FILE: drivers/md/dm-mpath-rdac.c:186:
+	unsigned		lun;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/md/dm-mpath-rdac.c:209:
+static void submit_inquiry(struct rdac_handler *, int, unsigned int,
+					rq_end_io_fn *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/md/dm-mpath-rdac.c:223:
+	return (error || host_byte(req->errors) != DID_OK ||
+			msg_byte(req->errors) != COMMAND_COMPLETE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: drivers/md/dm-mpath-rdac.c:254:
+		scsi_normalize_sense(req->sense, SCSI_SENSE_BUFFERSIZE,
+				&sense_hdr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: drivers/md/dm-mpath-rdac.c:270:
+			DMINFO("MODE_SELECT failed on %s with sense 0x%x",
+						h->path->dev->name, sense);

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: drivers/md/dm-mpath-rdac.c:271:
+ ^I}$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#363: FILE: drivers/md/dm-mpath-rdac.c:271:
+ ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: drivers/md/dm-mpath-rdac.c:271:
+ ^I}$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: drivers/md/dm-mpath-rdac.c:284:
+static struct request *get_rdac_req(struct rdac_handler *h,
+			void *buffer, unsigned buflen, int rw)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#376: FILE: drivers/md/dm-mpath-rdac.c:284:
+			void *buffer, unsigned buflen, int rw)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_rdac_req', this function's name, in a string
#384: FILE: drivers/md/dm-mpath-rdac.c:292:
+		DMINFO("get_rdac_req: blk_get_request failed");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'get_rdac_req', this function's name, in a string
#390: FILE: drivers/md/dm-mpath-rdac.c:298:
+		DMINFO("get_rdac_req: blk_rq_map_kern failed");

ERROR:CODE_INDENT: code indent should use tabs where possible
#394: FILE: drivers/md/dm-mpath-rdac.c:302:
+ ^Imemset(&rq->cmd, 0, BLK_MAX_CDB);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#394: FILE: drivers/md/dm-mpath-rdac.c:302:
+ ^Imemset(&rq->cmd, 0, BLK_MAX_CDB);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: drivers/md/dm-mpath-rdac.c:302:
+ ^Imemset(&rq->cmd, 0, BLK_MAX_CDB);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#410: FILE: drivers/md/dm-mpath-rdac.c:318:
+	unsigned data_size;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rdac_failover_get', this function's name, in a string
#442: FILE: drivers/md/dm-mpath-rdac.c:350:
+		DMERR("rdac_failover_get: no rq");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'submit_mode_select', this function's name, in a string
#473: FILE: drivers/md/dm-mpath-rdac.c:381:
+		DMINFO("submit_mode_select: no queue");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'submit_mode_select', this function's name, in a string
#479: FILE: drivers/md/dm-mpath-rdac.c:387:
+		DMERR("submit_mode_select: no rq");

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: drivers/md/dm-mpath-rdac.c:405:
+	struct rdac_controller *ctlr;
+	ctlr = container_of(kref, struct rdac_controller, kref);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: drivers/md/dm-mpath-rdac.c:421:
+		if ((memcmp(tmp->subsys_id, subsys_id, SUBSYS_ID_LEN) == 0) &&
+			  (memcmp(tmp->slot_id, slot_id, SLOT_ID_LEN) == 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#551: FILE: drivers/md/dm-mpath-rdac.c:459:
+	if (h->ctlr) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#554: FILE: drivers/md/dm-mpath-rdac.c:462:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#613: FILE: drivers/md/dm-mpath-rdac.c:521:
+	if (h->ctlr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#618: FILE: drivers/md/dm-mpath-rdac.c:526:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: drivers/md/dm-mpath-rdac.c:555:
+static void submit_inquiry(struct rdac_handler *h, int page_code,
+		unsigned int len, rq_end_io_fn endio)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#693: FILE: drivers/md/dm-mpath-rdac.c:601:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#696: FILE: drivers/md/dm-mpath-rdac.c:604:
+}
+/*

WARNING:REPEATED_WORD: Possible repeated word: 'of'
#698: FILE: drivers/md/dm-mpath-rdac.c:606:
+ * only support subpage2c until we confirm that this is just a matter of
+ * of updating firmware or not, and RDAC (basic AVT works already) for now

WARNING:REPEATED_WORD: Possible repeated word: 'in'
#699: FILE: drivers/md/dm-mpath-rdac.c:607:
+ * but we can add these in in when we get time and testers

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#701: FILE: drivers/md/dm-mpath-rdac.c:609:
+static int rdac_create(struct hw_handler *hwh, unsigned argc, char **argv)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#704: FILE: drivers/md/dm-mpath-rdac.c:612:
+	unsigned timeout;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#712: FILE: drivers/md/dm-mpath-rdac.c:620:
+		return -EINVAL;
+	} else {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#713: FILE: drivers/md/dm-mpath-rdac.c:621:
+		if (sscanf(argv[1], "%u", &timeout) != 1) {
+			DMWARN("invalid timeout value");
+			return -EINVAL;
+		}

CHECK:SPACING: No space is necessary after a cast
#734: FILE: drivers/md/dm-mpath-rdac.c:642:
+	struct rdac_handler *h = (struct rdac_handler *) hwh->context;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#742: FILE: drivers/md/dm-mpath-rdac.c:650:
+static unsigned rdac_error(struct hw_handler *hwh, struct bio *bio)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#748: FILE: drivers/md/dm-mpath-rdac.c:656:
+static void rdac_pg_init(struct hw_handler *hwh, unsigned bypassed,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/md/dm-mpath-rdac.c:657:
+static void rdac_pg_init(struct hw_handler *hwh, unsigned bypassed,
+			struct dm_path *path)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 26 warnings, 16 checks, 741 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000407601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
