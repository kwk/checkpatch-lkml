WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#54: 
allocator is not really visible to applications. So this isnt like 
                                                         ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#62: 
> > doesnt work' argument either.
    ^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#84: 
Content-Disposition: attachment; filename="slob-scale-no-bigblock-list.patch"

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#114: FILE: mm/slob.c:59:
+#define __get_slob_block(b) ((unsigned long)(b) & ~(PAGE_SIZE-1))
                                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#118: FILE: mm/slob.c:63:
+	void *virt = (void*)__get_slob_block(mem);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#126: FILE: mm/slob.c:71:
+	struct page *page;
+	page = get_slob_page(b);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#133: FILE: mm/slob.c:78:
+	struct page *page;
+	page = get_slob_page(b);

WARNING:LINE_SPACING: Missing a blank line after declarations
#140: FILE: mm/slob.c:85:
+	struct page *page;
+	page = get_slob_page(b);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#285: FILE: mm/slob.c:76:
+	spinlock_t lock;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#286: FILE: mm/slob.c:77:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#286: FILE: mm/slob.c:77:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#286: FILE: mm/slob.c:77:
+	void (*ctor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#287: FILE: mm/slob.c:78:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#287: FILE: mm/slob.c:78:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#287: FILE: mm/slob.c:78:
+	void (*dtor)(void *, struct kmem_cache *, unsigned long);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#310: FILE: mm/slob.c:100:
+		BUG_ON(!cur->next);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#313: FILE: mm/slob.c:103:
+	BUG_ON(!x);

ERROR:SPACING: space required before the open parenthesis '('
#316: FILE: mm/slob.c:106:
+#define test_cache(x) do {} while(0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#356: FILE: mm/slob.c:157:
+	struct page *page;
+	page = get_slob_page(b);

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: mm/slob.c:164:
+	struct page *page;
+	page = get_slob_page(b);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#382: FILE: mm/slob.c:179:
+	BUG_ON(!units);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#402: FILE: mm/slob.c:212:
+				BUG_ON(cur + cur->units > prev->next);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: mm/slob.c:256:
+		BUG_ON(cur->next == &cachep->arena);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#455: FILE: mm/slob.c:263:
+		BUG_ON(b == &cachep->arena);

WARNING:LINE_SPACING: Missing a blank line after declarations
#486: FILE: mm/slob.c:294:
+		int order;
+		for (i=0, order=32; i < NR_SLOB_CACHES; i++, order <<= 1)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/slob.c:294:
+		for (i=0, order=32; i < NR_SLOB_CACHES; i++, order <<= 1)
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: mm/slob.c:294:
+		for (i=0, order=32; i < NR_SLOB_CACHES; i++, order <<= 1)
 		               ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#489: FILE: mm/slob.c:297:
+		BUG_ON(i == NR_SLOB_CACHES);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#584: FILE: mm/slob.c:388:
+	p = slob_alloc(c, 0, PAGE_SIZE-1);
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: mm/slob.c:416:
+	BUG_ON(atomic_read(&c->items));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#614: FILE: mm/slob.c:421:
+	printk("FIX ME: need to free memory\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: mm/slob.c:504:
+		int size = 32;
+		done = 1;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#686: FILE: mm/slob.c:510:
+		p = slob_alloc(&cache_cache, 0, PAGE_SIZE-1);
 		                                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#691: FILE: mm/slob.c:515:
+		bb_cache = kmem_cache_create("bb_cache",sizeof(bigblock_t), 0,
 		                                       ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#693: FILE: mm/slob.c:517:
+		for (i=0; i < NR_SLOB_CACHES; i++, size <<= 1)
 		      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#708: FILE: mm/slob.c:528:
+	for (p=s->next; p != s && x < 10000; p = p->next, x++)
 	      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#709: FILE: mm/slob.c:529:
+		printk(".");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#720: FILE: mm/slob.c:539:
+		printk("%s items:%d",

CHECK:SPACING: spaces required around that '?:' (ctx:VxV)
#721: FILE: mm/slob.c:540:
+		       c->name?:"<none>",
 		              ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#724: FILE: mm/slob.c:543:
+		printk("\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409351.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 28 warnings, 5 checks, 590 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409351.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
