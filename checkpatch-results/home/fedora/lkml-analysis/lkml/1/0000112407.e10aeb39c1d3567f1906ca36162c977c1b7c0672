WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git iommu-for-linus

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#94: 
      amd-iommu: move page table allocation code to seperate function
                                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#98: 
      amd-iommu: move aperture_range allocation code to seperate function
                                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'exlusion' may be misspelled - perhaps 'exclusion'?
#99: 
      amd-iommu: handle exlusion ranges and unity mappings in alloc_new_range
                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'adresses' may be misspelled - perhaps 'addresses'?
#104: 
      amd-iommu: don't free dma adresses below 512MB with CONFIG_IOMMU_STRESS
                                ^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#210: FILE: arch/x86/Kconfig.debug:162:
+config IOMMU_STRESS
+	bool "Enable IOMMU stress-test mode"
+	---help---
+	  This option disables various optimizations in IOMMU related
+	  code to do real stress testing of the IOMMU code. This option
+	  will cause a performance drop and should only be enabled for
+	  testing.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#234: FILE: arch/x86/include/asm/amd_iommu.h:30:
+extern void amd_iommu_flush_all_domains(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#235: FILE: arch/x86/include/asm/amd_iommu.h:31:
+extern void amd_iommu_flush_all_devices(void);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#248: FILE: arch/x86/include/asm/amd_iommu_types.h:198:
+#define DUMP_printk(format, arg...)					\
+	do {								\
+		if (amd_iommu_dump)						\
+			printk(KERN_INFO "AMD IOMMU: " format, ## arg);	\
+	} while(0);

do {} while(0) macros should not have a trailing semicolon.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#251: FILE: arch/x86/include/asm/amd_iommu_types.h:201:
+			printk(KERN_INFO "AMD IOMMU: " format, ## arg);	\

ERROR:SPACING: space required before the open parenthesis '('
#252: FILE: arch/x86/include/asm/amd_iommu_types.h:202:
+	} while(0);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#263: FILE: arch/x86/include/asm/amd_iommu_types.h:213:
+#define APERTURE_RANGE_SIZE	(1ULL << APERTURE_RANGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#279: FILE: arch/x86/include/asm/amd_iommu_types.h:238:
+struct aperture_range {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#328: FILE: arch/x86/kernel/amd_iommu.c:58:
+static u64* alloc_pte(struct protection_domain *dom,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!amd_iommu_pd_table[i]"
#380: FILE: arch/x86/kernel/amd_iommu.c:478:
+		if (amd_iommu_pd_table[i] == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#457: FILE: arch/x86/kernel/amd_iommu.c:663:
+static u64* fetch_pte(struct protection_domain *domain,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dma_dom->aperture[index])...) over kzalloc(sizeof(struct aperture_range)...)
#498: FILE: arch/x86/kernel/amd_iommu.c:704:
+	dma_dom->aperture[index] = kzalloc(sizeof(struct aperture_range), gfp);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'Intialize' may be misspelled - perhaps 'Initialize'?
#527: FILE: arch/x86/kernel/amd_iommu.c:733:
+	/* Intialize the exclusion range if necessary */
 	   ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#548: FILE: arch/x86/kernel/amd_iommu.c:754:
+		u64 *pte = fetch_pte(&dma_dom->domain, i);
+		if (!pte || !IOMMU_PTE_PRESENT(*pte))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: arch/x86/kernel/amd_iommu.c:788:
+	boundary_size = ALIGN(dma_get_seg_boundary(dev) + 1,
+			PAGE_SIZE) >> PAGE_SHIFT;

ERROR:SPACING: space required after that ';' (ctx:BxV)
#584: FILE: arch/x86/kernel/amd_iommu.c:790:
+	for (;i < max_index; ++i) {
 	     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#660: FILE: arch/x86/kernel/amd_iommu.c:855:
+	unsigned i = address >> APERTURE_RANGE_SHIFT;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: arch/x86/kernel/amd_iommu.c:858:
+	BUG_ON(i >= APERTURE_MAX_RANGES || range == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!range"
#664: FILE: arch/x86/kernel/amd_iommu.c:858:
+	BUG_ON(i >= APERTURE_MAX_RANGES || range == NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#695: FILE: arch/x86/kernel/amd_iommu.c:927:
+		int page  = i % APERTURE_RANGE_PAGES;
+		__set_bit(page, dom->aperture[index]->bitmap);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#859: FILE: arch/x86/kernel/amd_iommu.c:1282:
+static u64* alloc_pte(struct protection_domain *dom,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#896: FILE: arch/x86/kernel/amd_iommu.c:1319:
+static u64* dma_ops_get_pte(struct dma_ops_domain *dom,

CHECK:BRACES: braces {} should be used on all arms of this statement
#907: FILE: arch/x86/kernel/amd_iommu.c:1330:
+	if (!pte) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#910: FILE: arch/x86/kernel/amd_iommu.c:1333:
+	} else

WARNING:TYPO_SPELLING: 'sucessfully' may be misspelled - perhaps 'successfully'?
#985: FILE: arch/x86/kernel/amd_iommu.c:1450:
+		 * aperture was sucessfully enlarged by 128 MB, try
 		                ^^^^^^^^^^^

ERROR:GLOBAL_INITIALISERS: do not initialise globals to false
#1103: FILE: arch/x86/kernel/amd_iommu_init.c:127:
+bool amd_iommu_isolate = false;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1185: FILE: arch/x86/kernel/amd_iommu_init.c:437:
+	BUG_ON(iommu->cmd_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iommu->cmd_buf"
#1185: FILE: arch/x86/kernel/amd_iommu_init.c:437:
+	BUG_ON(iommu->cmd_buf == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1222: FILE: arch/x86/kernel/amd_iommu_init.c:474:
+	BUG_ON(iommu->evt_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iommu->evt_buf"
#1222: FILE: arch/x86/kernel/amd_iommu_init.c:474:
+	BUG_ON(iommu->evt_buf == NULL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1240: FILE: arch/x86/kernel/amd_iommu_init.c:621:
 
+

WARNING:SPLIT_STRING: quoted string split across lines
#1247: FILE: arch/x86/kernel/amd_iommu_init.c:628:
+			DUMP_printk("  DEV_ALL\t\t\t first devid: %02x:%02x.%x"
+				    " last device %02x:%02x.%x flags: %02x\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1264: FILE: arch/x86/kernel/amd_iommu_init.c:645:
+			DUMP_printk("  DEV_SELECT\t\t\t devid: %02x:%02x.%x "
+				    "flags: %02x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1276: FILE: arch/x86/kernel/amd_iommu_init.c:657:
+			DUMP_printk("  DEV_SELECT_RANGE_START\t "
+				    "devid: %02x:%02x.%x flags: %02x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1290: FILE: arch/x86/kernel/amd_iommu_init.c:671:
+			DUMP_printk("  DEV_ALIAS\t\t\t devid: %02x:%02x.%x "
+				    "flags: %02x devid_to: %02x:%02x.%x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1308: FILE: arch/x86/kernel/amd_iommu_init.c:688:
+			DUMP_printk("  DEV_ALIAS_RANGE\t\t "
+				    "devid: %02x:%02x.%x flags: %02x "

WARNING:SPLIT_STRING: quoted string split across lines
#1309: FILE: arch/x86/kernel/amd_iommu_init.c:689:
+				    "devid: %02x:%02x.%x flags: %02x "
+				    "devid_to: %02x:%02x.%x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1327: FILE: arch/x86/kernel/amd_iommu_init.c:707:
+			DUMP_printk("  DEV_EXT_SELECT\t\t devid: %02x:%02x.%x "
+				    "flags: %02x ext: %08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1340: FILE: arch/x86/kernel/amd_iommu_init.c:720:
+			DUMP_printk("  DEV_EXT_SELECT_RANGE\t devid: "
+				    "%02x:%02x.%x flags: %02x ext: %08x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1384: FILE: arch/x86/kernel/amd_iommu_init.c:845:
+			DUMP_printk("IOMMU: device: %02x:%02x.%01x cap: %04x "
+				    "seg: %d flags: %01x info %04x\n",

WARNING:SPLIT_STRING: quoted string split across lines
#1507: FILE: arch/x86/kernel/amd_iommu_init.c:989:
+	DUMP_printk("%s devid_start: %02x:%02x.%x devid_end: %02x:%02x.%x"
+		    " range_start: %016llx range_end: %016llx flags: %x\n", s,

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1619: FILE: arch/x86/kernel/amd_iommu_init.c:1331:
+__setup("amd_iommu_dump", parse_amd_iommu_dump);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1717: FILE: arch/x86/kernel/pci-calgary_64.c:1442:
+		printk(KERN_INFO "PCI-DMA: Calgary TCE table spec is %d\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1832: FILE: arch/x86/kernel/pci-gart_64.c:817:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1864: FILE: include/linux/dma-debug.h:35:
+extern int dma_debug_resize_entries(u32 num_entries);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1890: FILE: include/linux/swiotlb.h:32:
+extern phys_addr_t swiotlb_bus_to_phys(struct device *hwdev,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dev_addr != ref->dev_addr'
#2016: FILE: lib/dma-debug.c:249:
+		if ((entry->dev_addr != ref->dev_addr) ||
+		    (entry->dev != ref->dev))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry->dev != ref->dev'
#2016: FILE: lib/dma-debug.c:249:
+		if ((entry->dev_addr != ref->dev_addr) ||
+		    (entry->dev != ref->dev))

WARNING:TYPO_SPELLING: 'Therfore' may be misspelled - perhaps 'Therefore'?
#2025: FILE: lib/dma-debug.c:258:
+		 * positives being reported. Therfore we implement a
 		                             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2317: FILE: lib/dma-debug.c:669:
+static int dma_debug_device_change(struct notifier_block *nb,
+				    unsigned long action, void *data)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2322: FILE: lib/dma-debug.c:674:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#2329: FILE: lib/dma-debug.c:681:
+		err_printk(dev, NULL, "DMA-API: device driver has pending "
+				"DMA allocations while released from device "

WARNING:SPLIT_STRING: quoted string split across lines
#2330: FILE: lib/dma-debug.c:682:
+				"DMA allocations while released from device "
+				"[count=%d]\n", count);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*nb)...) over kzalloc(sizeof(struct notifier_block)...)
#2344: FILE: lib/dma-debug.c:695:
+	nb = kzalloc(sizeof(struct notifier_block), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nb"
#2345: FILE: lib/dma-debug.c:696:
+	if (nb == NULL) {

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#2346: FILE: lib/dma-debug.c:697:
+	if (nb == NULL) {
+		pr_err("dma_debug_add_bus: out of memory\n");

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#2427: FILE: lib/dma-debug.c:1048:
+	ref.size     = sg_dma_len(s),
+
+	bucket       = get_hash_bucket(&ref, &flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2541: FILE: lib/dma-debug.c:1243:
+
+

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2544: FILE: lib/dma-debug.c:1246:
+__setup("dma_debug_driver=", dma_debug_driver_setup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2581: FILE: lib/swiotlb.c:149:
+int __weak swiotlb_arch_address_needs_mapping(struct device *hwdev,
+					       dma_addr_t addr, size_t size)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2702: FILE: lib/swiotlb.c:696:
+	BUG_ON(dir == DMA_NONE);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112407.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 33 warnings, 25 checks, 2518 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112407.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
