CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count != target_len'
#160: FILE: fs/ocfs2/stack_user.c:216:
+	if ((count != target_len) ||
+	    (count > sizeof(union ocfs2_control_message)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > sizeof(union ocfs2_control_message)'
#160: FILE: fs/ocfs2/stack_user.c:216:
+	if ((count != target_len) ||
+	    (count > sizeof(union ocfs2_control_message)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: fs/ocfs2/stack_user.c:276:
+	BUG_ON(p->op_state != OCFS2_CONTROL_HANDSHAKE_PROTOCOL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#232: FILE: fs/ocfs2/stack_user.c:282:
+	if (ocfs2_control_this_node < 0) {
[...]
+	} else if (ocfs2_control_this_node != p->op_this_node)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: fs/ocfs2/stack_user.c:293:
+		ocfs2_control_set_handshake_state(file,
+					OCFS2_CONTROL_HANDSHAKE_VALID);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#277: FILE: fs/ocfs2/stack_user.c:316:
+	msg->space = msg->newline = '\0';

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#279: FILE: fs/ocfs2/stack_user.c:318:
+	nodenum = simple_strtol(msg->nodestr, &ptr, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nodenum == LONG_MIN'
#283: FILE: fs/ocfs2/stack_user.c:322:
+	if ((nodenum == LONG_MIN) || (nodenum == LONG_MAX) ||
+	    (nodenum > INT_MAX) || (nodenum < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nodenum == LONG_MAX'
#283: FILE: fs/ocfs2/stack_user.c:322:
+	if ((nodenum == LONG_MIN) || (nodenum == LONG_MAX) ||
+	    (nodenum > INT_MAX) || (nodenum < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nodenum > INT_MAX'
#283: FILE: fs/ocfs2/stack_user.c:322:
+	if ((nodenum == LONG_MIN) || (nodenum == LONG_MAX) ||
+	    (nodenum > INT_MAX) || (nodenum < 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nodenum < 0'
#283: FILE: fs/ocfs2/stack_user.c:322:
+	if ((nodenum == LONG_MIN) || (nodenum == LONG_MAX) ||
+	    (nodenum > INT_MAX) || (nodenum < 0))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#313: FILE: fs/ocfs2/stack_user.c:347:
+	msg->space1 = msg->space2 = msg->newline = '\0';

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#316: FILE: fs/ocfs2/stack_user.c:349:
+	nodenum = simple_strtol(msg->nodestr, &p, 16);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == OCFS2_CONTROL_MESSAGE_SETNODE_TOTAL_LEN'
#347: FILE: fs/ocfs2/stack_user.c:378:
+	if ((count == OCFS2_CONTROL_MESSAGE_SETNODE_TOTAL_LEN) &&
+	    !strncmp(msg.tag, OCFS2_CONTROL_MESSAGE_SETNODE_OP,
+		     OCFS2_CONTROL_MESSAGE_OP_LEN))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000300003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 11 checks, 315 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000300003.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
