CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/mm.h:1070:
+extern int mm_take_all_locks(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#232: FILE: include/linux/mm.h:1071:
+extern void mm_drop_all_locks(struct mm_struct *mm);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#267: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#271: FILE: include/linux/mmu_notifier.h:1:
+#ifndef _LINUX_MMU_NOTIFIER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'registerd' may be misspelled - perhaps 'registered'?
#290: FILE: include/linux/mmu_notifier.h:20:
+	/* all mmu notifiers registerd in this mm are queued in this list */
 	                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'droppped' may be misspelled - perhaps 'dropped'?
#381: FILE: include/linux/mmu_notifier.h:111:
+	 * droppped on invalidate_range_end() then the driver itself
 	   ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: include/linux/mmu_notifier.h:147:
+extern int mmu_notifier_register(struct mmu_notifier *mn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: include/linux/mmu_notifier.h:149:
+extern int __mmu_notifier_register(struct mmu_notifier *mn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#421: FILE: include/linux/mmu_notifier.h:151:
+extern void mmu_notifier_unregister(struct mmu_notifier *mn,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: include/linux/mmu_notifier.h:153:
+extern void __mmu_notifier_mm_destroy(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/linux/mmu_notifier.h:154:
+extern void __mmu_notifier_release(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/linux/mmu_notifier.h:155:
+extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: include/linux/mmu_notifier.h:156:
+extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#427: FILE: include/linux/mmu_notifier.h:157:
+extern void __mmu_notifier_invalidate_page(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: include/linux/mmu_notifier.h:158:
+extern void __mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#429: FILE: include/linux/mmu_notifier.h:159:
+extern void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#430: FILE: include/linux/mmu_notifier.h:160:
+extern void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/linux/mmu_notifier.h:161:
+extern void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: include/linux/mmu_notifier.h:162:
+extern void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: include/linux/mmu_notifier.h:171:
+static inline int mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: include/linux/mmu_notifier.h:179:
+static inline void mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: include/linux/mmu_notifier.h:186:
+static inline void mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: include/linux/mmu_notifier.h:193:
+static inline void mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: include/linux/mmu_notifier.h:246:
+static inline int mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: include/linux/mmu_notifier.h:252:
+static inline void mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: include/linux/mmu_notifier.h:257:
+static inline void mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#532: FILE: include/linux/mmu_notifier.h:262:
+static inline void mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#853: FILE: mm/mmap.c:2300:
+	BUG_ON(down_read_trylock(&mm->mmap_sem));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#858: FILE: mm/mmap.c:2305:
+		struct file *filp;
 		             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#859: FILE: mm/mmap.c:2306:
+		struct file *filp;
+		if (signal_pending(current))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#881: FILE: mm/mmap.c:2328:
+				BUG();

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#884: FILE: mm/mmap.c:2331:
+		filp = vma->vm_file;
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#885: FILE: mm/mmap.c:2332:
+		if (filp && filp->f_mapping &&
 		    ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#899: FILE: mm/mmap.c:2346:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#920: FILE: mm/mmap.c:2367:
+	BUG_ON(down_read_trylock(&mm->mmap_sem));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: mm/mmap.c:2368:
+	BUG_ON(!mutex_is_locked(&mm_all_locks_mutex));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#924: FILE: mm/mmap.c:2371:
+		struct file *filp;
 		             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#925: FILE: mm/mmap.c:2372:
+		struct file *filp;
+		if (vma->anon_vma &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#943: FILE: mm/mmap.c:2390:
+				BUG();

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#946: FILE: mm/mmap.c:2393:
+		filp = vma->vm_file;
 		^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#947: FILE: mm/mmap.c:2394:
+		if (filp && filp->f_mapping &&
 		    ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#956: FILE: mm/mmap.c:2403:
+				BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#967: FILE: mm/mmu_notifier.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#968: FILE: mm/mmu_notifier.c:2:
+ *  linux/mm/mmu_notifier.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1051: FILE: mm/mmu_notifier.c:85:
+int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
+					unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1068: FILE: mm/mmu_notifier.c:102:
+void __mmu_notifier_invalidate_page(struct mm_struct *mm,
+					  unsigned long address)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: mm/mmu_notifier.c:116:
+void __mmu_notifier_invalidate_range_start(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: mm/mmu_notifier.c:130:
+void __mmu_notifier_invalidate_range_end(struct mm_struct *mm,
+				  unsigned long start, unsigned long end)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1113: FILE: mm/mmu_notifier.c:147:
+	struct mmu_notifier_mm * mmu_notifier_mm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1116: FILE: mm/mmu_notifier.c:150:
+	BUG_ON(atomic_read(&mm->mm_users) <= 0);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mmu_notifier_mm)...) over kmalloc(sizeof(struct mmu_notifier_mm)...)
#1119: FILE: mm/mmu_notifier.c:153:
+	mmu_notifier_mm = kmalloc(sizeof(struct mmu_notifier_mm), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1156: FILE: mm/mmu_notifier.c:190:
+	BUG_ON(atomic_read(&mm->mm_users) <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1192: FILE: mm/mmu_notifier.c:226:
+	BUG_ON(!hlist_empty(&mm->mmu_notifier_mm->list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1209: FILE: mm/mmu_notifier.c:243:
+	BUG_ON(atomic_read(&mm->mm_count) <= 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1212: FILE: mm/mmu_notifier.c:246:
+	if (!hlist_unhashed(&mn->hlist)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1229: FILE: mm/mmu_notifier.c:263:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1238: FILE: mm/mmu_notifier.c:272:
+	BUG_ON(atomic_read(&mm->mm_count) <= 0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 26 warnings, 30 checks, 1091 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
