WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#43: 
> * tip-bot for Peter Zijlstra (a.p.zijlstra@chello.nl) wrote:
                                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
> > Gitweb:     http://git.kernel.org/tip/74193ef0ecab92535c8517f082f1f50504526c9b

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#46: 
> > Author:     Peter Zijlstra <a.p.zijlstra@chello.nl>
                                             ^^^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#64: 
> > This didnt work as it interacted with faulting user-space instructions,
         ^^^^^

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#92: 
NMIs to be reenabled prematurely. x86_32 uses popf and far return. x86_64 has to
           ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#221: FILE: arch/x86/include/asm/irqflags.h:77:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushq %rax;		\
                                         	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#221: FILE: arch/x86/include/asm/irqflags.h:77:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushq %rax;		\
+						movq %rsp, %rax;	\
+						movq 24+8(%rax), %rsp;	\
+						pushq 0+8(%rax);	\
+						pushq 16+8(%rax);	\
+						movq (%rax), %rax;	\
+						popfq;			\
+						ret

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#222: FILE: arch/x86/include/asm/irqflags.h:78:
+						movq %rsp, %rax;	\
 						     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#222: FILE: arch/x86/include/asm/irqflags.h:78:
+						movq %rsp, %rax;	\
 						           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#223: FILE: arch/x86/include/asm/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#223: FILE: arch/x86/include/asm/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						          ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#223: FILE: arch/x86/include/asm/irqflags.h:79:
+						movq 24+8(%rax), %rsp;	\
 						                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#224: FILE: arch/x86/include/asm/irqflags.h:80:
+						pushq 0+8(%rax);	\
 						       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#224: FILE: arch/x86/include/asm/irqflags.h:80:
+						pushq 0+8(%rax);	\
 						          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#225: FILE: arch/x86/include/asm/irqflags.h:81:
+						pushq 16+8(%rax);	\
 						        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#225: FILE: arch/x86/include/asm/irqflags.h:81:
+						pushq 16+8(%rax);	\
 						           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#226: FILE: arch/x86/include/asm/irqflags.h:82:
+						movq (%rax), %rax;	\

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#226: FILE: arch/x86/include/asm/irqflags.h:82:
+						movq (%rax), %rax;	\
 						      ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#226: FILE: arch/x86/include/asm/irqflags.h:82:
+						movq (%rax), %rax;	\
 						             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:BxV)
#248: FILE: arch/x86/include/asm/irqflags.h:104:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushl 8(%esp);	\
                                         	        ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#248: FILE: arch/x86/include/asm/irqflags.h:104:
+#define NATIVE_INTERRUPT_RETURN_NMI_SAFE	pushl 8(%esp);	\
+						popfl;		\
+						lret $4

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#471: FILE: include/linux/hardirq.h:55:
+#define __IRQ_MASK(x)	((1 << (x))-1)
                      	           ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#482: FILE: include/linux/hardirq.h:62:
+#define PREEMPT_OFFSET	(1 << PREEMPT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#483: FILE: include/linux/hardirq.h:63:
+#define SOFTIRQ_OFFSET	(1 << SOFTIRQ_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#484: FILE: include/linux/hardirq.h:64:
+#define HARDIRQ_OFFSET	(1 << HARDIRQ_SHIFT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#485: FILE: include/linux/hardirq.h:65:
+#define NMI_OFFSET	(1 << NMI_SHIFT)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109853.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 6 warnings, 18 checks, 280 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109853.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
