CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#172: FILE: include/asm-x86_64/desc.h:21:
+	asm volatile("ltr %w0"::"r" (GDT_ENTRY_TSS*8));
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#177: FILE: include/asm-x86_64/desc.h:26:
+       unsigned long tr;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: include/asm-x86_64/desc.h:27:
+       unsigned long tr;
+       asm volatile ("str %w0":"=r" (tr));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: include/asm-x86_64/desc.h:27:
+       asm volatile ("str %w0":"=r" (tr));$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#178: FILE: include/asm-x86_64/desc.h:27:
+       asm volatile ("str %w0":"=r" (tr));
                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: include/asm-x86_64/desc.h:28:
+       return tr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/asm-x86_64/desc.h:49:
+       asm ("sgdt %w0":"=m" (*ptr));$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#215: FILE: include/asm-x86_64/desc.h:49:
+       asm ("sgdt %w0":"=m" (*ptr));
                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#226: FILE: include/asm-x86_64/desc.h:55:
+	 * it is only done once at setup time */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: include/asm-x86_64/desc.h:60:
+static inline void native_write_gdt_entry(void *ptr, void *entry,
+						unsigned type, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: include/asm-x86_64/desc.h:60:
+						unsigned type, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#236: FILE: include/asm-x86_64/desc.h:60:
+						unsigned type, unsigned size)

WARNING:TYPO_SPELLING: 'an user' may be misspelled - perhaps 'a user'?
#244: FILE: include/asm-x86_64/desc.h:67:
+ * an user anxious for its definition: set_tssldt_descriptor
    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#248: FILE: include/asm-x86_64/desc.h:71:
+		native_write_gdt_entry((_ptr),(_e), (_type), (_size))
 		                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: include/asm-x86_64/desc.h:75:
+static inline void native_write_ldt_entry(struct desc_struct *ldt,
+					int entrynum, u32 entry_1, u32 entry_2)

CHECK:SPACING: No space is necessary after a cast
#256: FILE: include/asm-x86_64/desc.h:78:
+	lp = (__u32 *) ((entrynum << 3) + (char *) ldt);

WARNING:LINE_SPACING: Missing a blank line after declarations
#256: FILE: include/asm-x86_64/desc.h:78:
+	__u32 *lp;
+	lp = (__u32 *) ((entrynum << 3) + (char *) ldt);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: include/asm-x86_64/desc.h:80:
+	*(lp+1)	= entry_2;
 	    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: include/asm-x86_64/desc.h:90:
+       asm ("sidt %w0":"=m" (*dtr));$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#268: FILE: include/asm-x86_64/desc.h:90:
+       asm ("sidt %w0":"=m" (*dtr));
                       ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#294: FILE: include/asm-x86_64/desc.h:165:
 } 
+static inline void native_set_ldt(const void *addr,

CHECK:BRACES: braces {} should be used on all arms of this statement
#297: FILE: include/asm-x86_64/desc.h:168:
+	if (likely(entries == 0))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#299: FILE: include/asm-x86_64/desc.h:170:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#300: FILE: include/asm-x86_64/desc.h:171:
+		unsigned cpu = smp_processor_id();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#303: FILE: include/asm-x86_64/desc.h:174:
+		set_tssldt_descriptor(&cpu_gdt(cpu)[GDT_ENTRY_LDT],
+					(unsigned long)addr, DESC_LDT,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#305: FILE: include/asm-x86_64/desc.h:176:
+		__asm__ __volatile__ ("lldt %w0"::"r" (GDT_ENTRY_LDT*8));
 		                                                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#317: FILE: include/asm-x86_64/desc.h:188:
+#define store_tr(tr) (tr) = native_store_tr()

ERROR:SPACING: space required after that ',' (ctx:VxV)
#321: FILE: include/asm-x86_64/desc.h:192:
+#define write_idt_entry(_adr, _s) native_write_idt_entry((_adr),(_s))
                                                                ^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#326: FILE: include/asm-x86_64/desc.h:197:
+static inline void _set_gate(void *adr, unsigned type, unsigned long func, unsigned dpl, unsigned ist)
                                                                                                   ^^^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#326: FILE: include/asm-x86_64/desc.h:197:
+static inline void _set_gate(void *adr, unsigned type, unsigned long func, unsigned dpl, unsigned ist)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: include/asm-x86_64/desc.h:197:
+static inline void _set_gate(void *adr, unsigned type, unsigned long func, unsigned dpl, unsigned ist)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: include/asm-x86_64/desc.h:197:
+static inline void _set_gate(void *adr, unsigned type, unsigned long func, unsigned dpl, unsigned ist)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#326: FILE: include/asm-x86_64/desc.h:197:
+static inline void _set_gate(void *adr, unsigned type, unsigned long func, unsigned dpl, unsigned ist)

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: include/asm-x86_64/desc.h:200:
+	struct gate_struct s;
+	s.offset_low = PTR_LOW(func);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#331: FILE: include/asm-x86_64/desc.h:202:
+	s.ist = ist;
 	  ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#331: FILE: include/asm-x86_64/desc.h:202:
+	s.ist = ist;
 	        ^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#344: FILE: include/asm-x86_64/desc.h:215:
+	BUG_ON((unsigned)nr > 0xFF);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#344: FILE: include/asm-x86_64/desc.h:215:
+	BUG_ON((unsigned)nr > 0xFF);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#345: FILE: include/asm-x86_64/desc.h:216:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 0, 0);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#348: FILE: include/asm-x86_64/desc.h:219:
+static inline void set_intr_gate_ist(int nr, void *func, unsigned ist)
                                                                   ^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#348: FILE: include/asm-x86_64/desc.h:219:
+static inline void set_intr_gate_ist(int nr, void *func, unsigned ist)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#350: FILE: include/asm-x86_64/desc.h:221:
+	BUG_ON((unsigned)nr > 0xFF);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#350: FILE: include/asm-x86_64/desc.h:221:
+	BUG_ON((unsigned)nr > 0xFF);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#351: FILE: include/asm-x86_64/desc.h:222:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 0, ist);
 	                                                                   ^^^

CHECK:SPACING: No space is necessary after a cast
#351: FILE: include/asm-x86_64/desc.h:222:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 0, ist);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#356: FILE: include/asm-x86_64/desc.h:227:
+	BUG_ON((unsigned)nr > 0xFF);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: include/asm-x86_64/desc.h:227:
+	BUG_ON((unsigned)nr > 0xFF);

CHECK:SPACING: No space is necessary after a cast
#357: FILE: include/asm-x86_64/desc.h:228:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 3, 0);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#360: FILE: include/asm-x86_64/desc.h:231:
+static inline void set_system_gate_ist(int nr, void *func, unsigned ist)
                                                                     ^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#360: FILE: include/asm-x86_64/desc.h:231:
+static inline void set_system_gate_ist(int nr, void *func, unsigned ist)

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#362: FILE: include/asm-x86_64/desc.h:233:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 3, ist);
 	                                                                   ^^^

CHECK:SPACING: No space is necessary after a cast
#362: FILE: include/asm-x86_64/desc.h:233:
+	_set_gate(&idt_table[nr], GATE_INTERRUPT, (unsigned long) func, 3, ist);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#365: FILE: include/asm-x86_64/desc.h:236:
+#define clear_LDT()  set_ldt(NULL,0)
                                  ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#371: FILE: include/asm-x86_64/desc.h:241:
+static inline void load_LDT_nolock (mm_context_t *pc)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 33 warnings, 17 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390668.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
