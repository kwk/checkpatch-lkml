WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#38: FILE: drivers/misc/xp/Makefile:1:
+# drivers/misc/xp/Makefile

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: drivers/misc/xp/xpmem_attach.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!att"
#97: FILE: drivers/misc/xp/xpmem_attach.c:39:
+	if (att == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#123: FILE: drivers/misc/xp/xpmem_attach.c:65:
+	 * See if the entire vma is being unmapped. If so, clean up the
+	 * the xpmem_attachment structure and leave the vma to be cleaned up

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#128: FILE: drivers/misc/xp/xpmem_attach.c:70:
+	    ((vma->vm_end - vma->vm_start) == att->at_size)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#150: FILE: drivers/misc/xp/xpmem_attach.c:92:
+	if (vma->vm_start == att->at_vaddr)
[...]
+	else if (vma->vm_end == att->at_vaddr + att->at_size)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#154: FILE: drivers/misc/xp/xpmem_attach.c:96:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#163: FILE: drivers/misc/xp/xpmem_attach.c:105:
+		BUG_ON(!remaining_vma ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: drivers/misc/xp/xpmem_attach.c:122:
+	BUG_ON(!remaining_vma ||

WARNING:SPLIT_STRING: quoted string split across lines
#196: FILE: drivers/misc/xp/xpmem_attach.c:138:
+	dev_err(xpmem, "unexpected unmap of XPMEM segment at [0x%lx - 0x%lx], "
+		"killed process %d (%s)\n", vma->vm_start, vma->vm_end,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!att"
#226: FILE: drivers/misc/xp/xpmem_attach.c:168:
+	if (att == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/misc/xp/xpmem_attach.c:244:
+	if (!seg_tg_mmap_sem_locked &&
+		   &current->mm->mmap_sem > &seg_tg->mm->mmap_sem) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_ensure_valid_PFNs>
#330: FILE: drivers/misc/xp/xpmem_attach.c:272:
+	ret = xpmem_ensure_valid_PFNs(seg, seg_vaddr, 1, drop_memprot, 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_unblock_recall_PFNs>
#348: FILE: drivers/misc/xp/xpmem_attach.c:290:
+				xpmem_unblock_recall_PFNs(seg_tg);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#414: FILE: drivers/misc/xp/xpmem_attach.c:356:
+	BUG_ON(!pfn_valid(pfn));

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#443: FILE: drivers/misc/xp/xpmem_attach.c:385:
+struct vm_operations_struct xpmem_vm_ops_fault = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#448: FILE: drivers/misc/xp/xpmem_attach.c:390:
+struct vm_operations_struct xpmem_vm_ops_nopfn = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#495: FILE: drivers/misc/xp/xpmem_attach.c:437:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*att)...) over kzalloc(sizeof(struct xpmem_attachment)...)
#571: FILE: drivers/misc/xp/xpmem_attach.c:513:
+	att = kzalloc(sizeof(struct xpmem_attachment), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!att"
#572: FILE: drivers/misc/xp/xpmem_attach.c:514:
+	if (att == NULL) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: drivers/misc/xp/xpmem_attach.c:526:
+        init_waitqueue_head(&att->destroyed_wq);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: drivers/misc/xp/xpmem_attach.c:526:
+        init_waitqueue_head(&att->destroyed_wq);$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!att"
#683: FILE: drivers/misc/xp/xpmem_attach.c:625:
+	if (!xpmem_is_vm_ops_set(vma) || att == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PTEs_of_att>
#788: FILE: drivers/misc/xp/xpmem_attach.c:730:
+xpmem_clear_PTEs_of_att(struct xpmem_attachment *att, u64 vaddr, size_t size)

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PTEs_of_ap>
#821: FILE: drivers/misc/xp/xpmem_attach.c:763:
+xpmem_clear_PTEs_of_ap(struct xpmem_access_permit *ap, u64 seg_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/misc/xp/xpmem_attach.c:778:
+		if (!xpmem_get_overlapping_range(att->at_vaddr, att->at_size,
+		    &t_vaddr, &t_size))

CHECK:BRACES: braces {} should be used on all arms of this statement
#845: FILE: drivers/misc/xp/xpmem_attach.c:787:
+		if (list_empty(&att->att_list)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#850: FILE: drivers/misc/xp/xpmem_attach.c:792:
+		} else

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PTEs>
#860: FILE: drivers/misc/xp/xpmem_attach.c:802:
+xpmem_clear_PTEs(struct xpmem_segment *seg, u64 vaddr, size_t size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#873: FILE: drivers/misc/xp/xpmem_attach.c:815:
+		if (list_empty(&ap->ap_list)) {
[...]
+		} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/misc/xp/xpmem_attach.c:819:
+			ap = list_entry(&seg->ap_list,
+					 struct xpmem_access_permit, ap_list);

CHECK:BRACES: Unbalanced braces around else statement
#878: FILE: drivers/misc/xp/xpmem_attach.c:820:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#888: FILE: drivers/misc/xp/xpmem_get.c:1:
+/*

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#947: FILE: drivers/misc/xp/xpmem_get.c:60:
+	ret = xpmem_ipcperms(&perm, S_IRUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#949: FILE: drivers/misc/xp/xpmem_get.c:62:
+		ret = xpmem_ipcperms(&perm, S_IWUSR);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "permit_value"
#999: FILE: drivers/misc/xp/xpmem_get.c:112:
+	if (permit_type != XPMEM_PERMIT_MODE || permit_value != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ap)...) over kzalloc(sizeof(struct xpmem_access_permit)...)
#1052: FILE: drivers/misc/xp/xpmem_get.c:165:
+	ap = kzalloc(sizeof(struct xpmem_access_permit), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ap"
#1053: FILE: drivers/misc/xp/xpmem_get.c:166:
+	if (ap == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1110: FILE: drivers/misc/xp/xpmem_get.c:223:
+xpmem_release_ap(struct xpmem_thread_group *ap_tg,
+		  struct xpmem_access_permit *ap)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1236: FILE: drivers/misc/xp/xpmem_main.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tg)...) over kzalloc(sizeof(struct xpmem_thread_group)...)
#1315: FILE: drivers/misc/xp/xpmem_main.c:80:
+	tg = kzalloc(sizeof(struct xpmem_thread_group), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tg"
#1316: FILE: drivers/misc/xp/xpmem_main.c:81:
+	if (tg == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <n_recall_PFNs>
#1331: FILE: drivers/misc/xp/xpmem_main.c:96:
+	atomic_set(&tg->n_recall_PFNs, 0);

CHECK:CAMELCASE: Avoid CamelCase: <recall_PFNs_mutex>
#1332: FILE: drivers/misc/xp/xpmem_main.c:97:
+	mutex_init(&tg->recall_PFNs_mutex);

CHECK:CAMELCASE: Avoid CamelCase: <block_recall_PFNs_wq>
#1333: FILE: drivers/misc/xp/xpmem_main.c:98:
+	init_waitqueue_head(&tg->block_recall_PFNs_wq);

CHECK:CAMELCASE: Avoid CamelCase: <allow_recall_PFNs_wq>
#1334: FILE: drivers/misc/xp/xpmem_main.c:99:
+	init_waitqueue_head(&tg->allow_recall_PFNs_wq);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tg->ap_hashtable)...) over kzalloc(sizeof(struct xpmem_hashlist)...)
#1340: FILE: drivers/misc/xp/xpmem_main.c:105:
+	tg->ap_hashtable = kzalloc(sizeof(struct xpmem_hashlist) *

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tg->ap_hashtable"
#1342: FILE: drivers/misc/xp/xpmem_main.c:107:
+	if (tg->ap_hashtable == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "unpin_entry"
#1357: FILE: drivers/misc/xp/xpmem_main.c:122:
+	if (unpin_entry != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1392: FILE: drivers/misc/xp/xpmem_main.c:157:
+	BUG_ON(current->mm != current->group_leader->mm);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1550: FILE: drivers/misc/xp/xpmem_main.c:315:
+static struct file_operations xpmem_fops = {

WARNING:SPLIT_STRING: quoted string split across lines
#1577: FILE: drivers/misc/xp/xpmem_main.c:342:
+		dev_err(xpmem, "invalid partition ID, XPMEM driver failed to "
+			"initialize\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*xpmem_partitions)...) over kzalloc(sizeof(struct xpmem_partition)...)
#1582: FILE: drivers/misc/xp/xpmem_main.c:347:
+	xpmem_partitions = kzalloc(sizeof(struct xpmem_partition) *

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xpmem_partitions"
#1584: FILE: drivers/misc/xp/xpmem_main.c:349:
+	if (xpmem_partitions == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xpmem_unpin_procfs_dir"
#1601: FILE: drivers/misc/xp/xpmem_main.c:366:
+	if (xpmem_unpin_procfs_dir == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*hashtable)...) over kzalloc(sizeof(struct xpmem_hashlist)...)
#1613: FILE: drivers/misc/xp/xpmem_main.c:378:
+	hashtable = kzalloc(sizeof(struct xpmem_hashlist) *

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hashtable"
#1615: FILE: drivers/misc/xp/xpmem_main.c:380:
+	if (hashtable == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1681: FILE: drivers/misc/xp/xpmem_make.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*seg)...) over kzalloc(sizeof(struct xpmem_segment)...)
#1771: FILE: drivers/misc/xp/xpmem_make.c:91:
+	seg = kzalloc(sizeof(struct xpmem_segment), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg"
#1772: FILE: drivers/misc/xp/xpmem_make.c:92:
+	if (seg == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <PFNtable_mutex>
#1791: FILE: drivers/misc/xp/xpmem_make.c:111:
+	mutex_init(&seg->PFNtable_mutex);

CHECK:CAMELCASE: Avoid CamelCase: <PFNtable>
#1792: FILE: drivers/misc/xp/xpmem_make.c:112:
+	seg->PFNtable = kzalloc(XPMEM_PFNTABLE_L4SIZE * sizeof(u64 ***),

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1792: FILE: drivers/misc/xp/xpmem_make.c:112:
+	seg->PFNtable = kzalloc(XPMEM_PFNTABLE_L4SIZE * sizeof(u64 ***),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg->PFNtable"
#1794: FILE: drivers/misc/xp/xpmem_make.c:114:
+	if (seg->PFNtable == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PFNtable>
#1845: FILE: drivers/misc/xp/xpmem_make.c:165:
+	xpmem_clear_PFNtable(seg, seg->vaddr, seg->size, 1, 0);

WARNING:TYPO_SPELLING: 'processsing' may be misspelled - perhaps 'processing'?
#1855: FILE: drivers/misc/xp/xpmem_make.c:175:
+	 * the process is not in exit processsing (in which case the unregister
 	                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1860: FILE: drivers/misc/xp/xpmem_make.c:180:
+// >>> ^Iif (list_empty(&seg_tg->seg_list) && !(current->flags & PF_EXITING))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1861: FILE: drivers/misc/xp/xpmem_make.c:181:
+// >>> ^I^Iemm_notifier_unregister(&seg_tg->emm_notifier, seg_tg->mm);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1935: FILE: drivers/misc/xp/xpmem_misc.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg->PFNtable"
#2116: FILE: drivers/misc/xp/xpmem_misc.c:182:
+	DBUG_ON(seg->PFNtable == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l4table[i]"
#2119: FILE: drivers/misc/xp/xpmem_misc.c:185:
+		if (l4table[i] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3table[j]"
#2124: FILE: drivers/misc/xp/xpmem_misc.c:190:
+			if (l3table[j] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "l2table[k]"
#2129: FILE: drivers/misc/xp/xpmem_misc.c:195:
+				if (l2table[k] != NULL)

CHECK:CAMELCASE: Avoid CamelCase: <block_recall_PFNs>
#2219: FILE: drivers/misc/xp/xpmem_misc.c:285:
+		    struct xpmem_segment *seg, int block_recall_PFNs, int wait)

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_block_recall_PFNs>
#2224: FILE: drivers/misc/xp/xpmem_misc.c:290:
+		ret = xpmem_block_recall_PFNs(seg_tg, wait);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2307: FILE: drivers/misc/xp/xpmem_pfn.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_recall_PFNs>
#2337: FILE: drivers/misc/xp/xpmem_pfn.c:31:
+xpmem_recall_PFNs(struct xpmem_segment *seg, u64 vaddr, size_t size)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2350: FILE: drivers/misc/xp/xpmem_pfn.c:44:
+	       XPMEM_FLAG_RECALLINGPFNS)) {
+

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_recall_PFNs_of_tg>
#2388: FILE: drivers/misc/xp/xpmem_pfn.c:82:
+xpmem_recall_PFNs_of_tg(struct xpmem_thread_group *seg_tg, u64 vaddr,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2406: FILE: drivers/misc/xp/xpmem_pfn.c:100:
+	list_for_each_entry(seg, &seg_tg->seg_list, seg_list) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2410: FILE: drivers/misc/xp/xpmem_pfn.c:104:
+		if (xpmem_get_overlapping_range(seg->vaddr, seg->size,
+		    &t_vaddr, &t_size)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2411: FILE: drivers/misc/xp/xpmem_pfn.c:105:
+		    &t_vaddr, &t_size)) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#2419: FILE: drivers/misc/xp/xpmem_pfn.c:113:
+			if (list_empty(&seg->seg_list)) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2425: FILE: drivers/misc/xp/xpmem_pfn.c:119:
+			} else

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#2439: FILE: drivers/misc/xp/xpmem_pfn.c:133:
+		if (waitqueue_active(&tg->allow_recall_PFNs_wq))

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_disallow_blocking_recall_PFNs>
#2474: FILE: drivers/misc/xp/xpmem_pfn.c:168:
+xpmem_disallow_blocking_recall_PFNs(struct xpmem_thread_group *tg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2495: FILE: drivers/misc/xp/xpmem_pfn.c:189:
+		wait_event(tg->allow_recall_PFNs_wq,
+			  (atomic_read(&tg->n_recall_PFNs) >= 0));

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_allow_blocking_recall_PFNs>
#2500: FILE: drivers/misc/xp/xpmem_pfn.c:194:
+xpmem_allow_blocking_recall_PFNs(struct xpmem_thread_group *tg)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2506: FILE: drivers/misc/xp/xpmem_pfn.c:200:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2508: FILE: drivers/misc/xp/xpmem_pfn.c:202:
+int xpmem_emm_notifier_callback(struct emm_notifier *e, struct mm_struct *mm,
+		enum emm_operation op, unsigned long start, unsigned long end)

ERROR:SPACING: space required before the open parenthesis '('
#2516: FILE: drivers/misc/xp/xpmem_pfn.c:210:
+	switch(op) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2557: FILE: drivers/misc/xp/xpmem_pfn.c:251:
+	struct xpmem_page_request preq = {.valid = 1, .page_requests = LIST_HEAD_INIT(preq.page_requests), };

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:BRACES: braces {} should be used on all arms of this statement
#2570: FILE: drivers/misc/xp/xpmem_pfn.c:264:
+	if (n_pgs > 16) {
[...]
+	} else
[...]

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#2571: FILE: drivers/misc/xp/xpmem_pfn.c:265:
+		pages = kzalloc(sizeof(struct page *) * n_pgs, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages"
#2572: FILE: drivers/misc/xp/xpmem_pfn.c:266:
+		if (pages == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#2576: FILE: drivers/misc/xp/xpmem_pfn.c:270:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xpmem_vaddr_to_pte"
#2590: FILE: drivers/misc/xp/xpmem_pfn.c:284:
+	if (n_pgs == 1 && xpmem_vaddr_to_pte(src_mm, vaddr) == NULL &&

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2626: FILE: drivers/misc/xp/xpmem_pfn.c:320:
+		while (to_free-- > 0) {
+			page_cache_release(pages[to_free]);
+		}

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2632: FILE: drivers/misc/xp/xpmem_pfn.c:326:
+	if (preq.valid || bret != 0 || request_retries > 3 ) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2647: FILE: drivers/misc/xp/xpmem_pfn.c:341:
+	if (!preq.valid) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2677: FILE: drivers/misc/xp/xpmem_pfn.c:371:
+			if (!vma || vma->vm_start >= end_vaddr ||
+//>>> VM_PFNMAP may also be set? Can we say it's always set?

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!xpmem_vaddr_to_pte"
#2692: FILE: drivers/misc/xp/xpmem_pfn.c:386:
+			if (xpmem_vaddr_to_pte(src_mm, vaddr) == NULL)

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_fill_in_PFNtable>
#2709: FILE: drivers/misc/xp/xpmem_pfn.c:403:
+xpmem_fill_in_PFNtable(struct mm_struct *src_mm, struct xpmem_segment *seg,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pte_p"
#2721: FILE: drivers/misc/xp/xpmem_pfn.c:415:
+		if (pte_p == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pte_p"
#2759: FILE: drivers/misc/xp/xpmem_pfn.c:453:
+			if (pte_p != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_get_PFNs>
#2777: FILE: drivers/misc/xp/xpmem_pfn.c:471:
+xpmem_get_PFNs(struct xpmem_segment *seg, u64 vaddr, size_t size,

CHECK:CAMELCASE: Avoid CamelCase: <PFNtable_locked>
#2827: FILE: drivers/misc/xp/xpmem_pfn.c:521:
+	int PFNtable_locked = 0;

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#2830: FILE: drivers/misc/xp/xpmem_pfn.c:524:
+	u64 t_vaddr = t_vaddr;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2836: FILE: drivers/misc/xp/xpmem_pfn.c:530:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg->PFNtable"
#2837: FILE: drivers/misc/xp/xpmem_pfn.c:531:
+	DBUG_ON(seg->PFNtable == NULL);

WARNING:REPEATED_WORD: Possible repeated word: 'that'
#2853: FILE: drivers/misc/xp/xpmem_pfn.c:547:
+//>>> but do comment that that is the case.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2932: FILE: drivers/misc/xp/xpmem_pfn.c:626:
+		if (ret != 0) {
+			goto unlock;
+		}

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2941: FILE: drivers/misc/xp/xpmem_pfn.c:635:
+		BUG_ON(!vma || vma->vm_start > vaddr - PAGE_SIZE);

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_node_PFNlists>
#2998: FILE: drivers/misc/xp/xpmem_pfn.c:692:
+xpmem_find_node_with_cpus(struct xpmem_node_PFNlists *npls, int starting_nid)

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_node_PFNlist>
#3001: FILE: drivers/misc/xp/xpmem_pfn.c:695:
+	struct xpmem_node_PFNlist *npl;

CHECK:CAMELCASE: Avoid CamelCase: <PFNlists>
#3009: FILE: drivers/misc/xp/xpmem_pfn.c:703:
+		npl = &npls->PFNlists[nid];

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3034: FILE: drivers/misc/xp/xpmem_pfn.c:728:
+	BUG_ON(nid == starting_nid);

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_process_PFNlist_by_CPU>
#3039: FILE: drivers/misc/xp/xpmem_pfn.c:733:
+xpmem_process_PFNlist_by_CPU(struct work_struct *work)

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_PFNlist>
#3043: FILE: drivers/misc/xp/xpmem_pfn.c:737:
+	struct xpmem_PFNlist *pl = (struct xpmem_PFNlist *)work;

CHECK:CAMELCASE: Avoid CamelCase: <n_PFNs>
#3049: FILE: drivers/misc/xp/xpmem_pfn.c:743:
+	for (i = 0; i < pl->n_PFNs; i++) {

CHECK:CAMELCASE: Avoid CamelCase: <PFNs>
#3050: FILE: drivers/misc/xp/xpmem_pfn.c:744:
+		pfn = &pl->PFNs[i];

CHECK:CAMELCASE: Avoid CamelCase: <n_PFNlists_processing>
#3067: FILE: drivers/misc/xp/xpmem_pfn.c:761:
+	if (atomic_dec_return(&npls->n_PFNlists_processing) == 0)

CHECK:CAMELCASE: Avoid CamelCase: <PFNlists_processing_wq>
#3068: FILE: drivers/misc/xp/xpmem_pfn.c:762:
+		wake_up(&npls->PFNlists_processing_wq);

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_schedule_PFNlist_processing>
#3074: FILE: drivers/misc/xp/xpmem_pfn.c:768:
+xpmem_schedule_PFNlist_processing(struct xpmem_node_PFNlists *npls, int nid)

CHECK:CAMELCASE: Avoid CamelCase: <PFNlist>
#3082: FILE: drivers/misc/xp/xpmem_pfn.c:776:
+	DBUG_ON(npl->PFNlist == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!npl->PFNlist"
#3082: FILE: drivers/misc/xp/xpmem_pfn.c:776:
+	DBUG_ON(npl->PFNlist == NULL);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3089: FILE: drivers/misc/xp/xpmem_pfn.c:783:
+	if (cpu == NR_CPUS)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3097: FILE: drivers/misc/xp/xpmem_pfn.c:791:
+	BUG_ON(ret != 1);

CHECK:CAMELCASE: Avoid CamelCase: <n_PFNlists_scheduled>
#3100: FILE: drivers/misc/xp/xpmem_pfn.c:794:
+	npls->n_PFNlists_scheduled++;

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_add_to_PFNlist>
#3110: FILE: drivers/misc/xp/xpmem_pfn.c:804:
+xpmem_add_to_PFNlist(struct xpmem_segment *seg,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!npls"
#3119: FILE: drivers/misc/xp/xpmem_pfn.c:813:
+	if (npls == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*npls)...) over kmalloc(sizeof(struct xpmem_node_PFNlists)...)
#3120: FILE: drivers/misc/xp/xpmem_pfn.c:814:
+		npls = kmalloc(sizeof(struct xpmem_node_PFNlists), GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3121: FILE: drivers/misc/xp/xpmem_pfn.c:815:
+		BUG_ON(npls == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!npls"
#3121: FILE: drivers/misc/xp/xpmem_pfn.c:815:
+		BUG_ON(npls == NULL);

CHECK:CAMELCASE: Avoid CamelCase: <n_PFNlists_created>
#3127: FILE: drivers/misc/xp/xpmem_pfn.c:821:
+		npls->n_PFNlists_created = 0;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*npls->PFNlists)...) over kmalloc(sizeof(struct xpmem_node_PFNlist)...)
#3129: FILE: drivers/misc/xp/xpmem_pfn.c:823:
+		npls->PFNlists = kmalloc(sizeof(struct xpmem_node_PFNlist) *

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3131: FILE: drivers/misc/xp/xpmem_pfn.c:825:
+		BUG_ON(npls->PFNlists == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!npls->PFNlists"
#3131: FILE: drivers/misc/xp/xpmem_pfn.c:825:
+		BUG_ON(npls->PFNlists == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3145: FILE: drivers/misc/xp/xpmem_pfn.c:839:
+	BUG_ON(nid >= MAX_NUMNODES);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pl"
#3150: FILE: drivers/misc/xp/xpmem_pfn.c:844:
+	if (pl == NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3151: FILE: drivers/misc/xp/xpmem_pfn.c:845:
+	if (pl == NULL) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#3155: FILE: drivers/misc/xp/xpmem_pfn.c:849:
+			if (npl->cpu == XPMEM_CPUS_OFFLINE ||
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3163: FILE: drivers/misc/xp/xpmem_pfn.c:857:
+			} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pl"
#3173: FILE: drivers/misc/xp/xpmem_pfn.c:867:
+		if (pl == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*pl)...) over kmalloc_node(sizeof(struct xpmem_PFNlist)...)
#3174: FILE: drivers/misc/xp/xpmem_pfn.c:868:
+			pl = kmalloc_node(sizeof(struct xpmem_PFNlist) +

CHECK:CAMELCASE: Avoid CamelCase: <XPMEM_MAXNPFNs_PER_LIST>
#3175: FILE: drivers/misc/xp/xpmem_pfn.c:869:
+					  sizeof(u64) * XPMEM_MAXNPFNs_PER_LIST,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3177: FILE: drivers/misc/xp/xpmem_pfn.c:871:
+			BUG_ON(pl == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pl"
#3177: FILE: drivers/misc/xp/xpmem_pfn.c:871:
+			BUG_ON(pl == NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3201: FILE: drivers/misc/xp/xpmem_pfn.c:895:
+xpmem_zzz_l1(struct xpmem_segment *seg, u64 *l1table, u64 *vaddr,
+			u64 end_vaddr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3223: FILE: drivers/misc/xp/xpmem_pfn.c:917:
+xpmem_zzz_l2(struct xpmem_segment *seg, u64 **l2table, u64 *vaddr,
+			u64 end_vaddr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l1"
#3231: FILE: drivers/misc/xp/xpmem_pfn.c:925:
+		if (l1 == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3246: FILE: drivers/misc/xp/xpmem_pfn.c:940:
+xpmem_zzz_l3(struct xpmem_segment *seg, u64 ***l3table, u64 *vaddr,
+			u64 end_vaddr)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2"
#3254: FILE: drivers/misc/xp/xpmem_pfn.c:948:
+		if (l2 == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index != start_index'
#3304: FILE: drivers/misc/xp/xpmem_pfn.c:998:
+		if ((index != start_index) &&
+		    ((index % (PTRS_PER_PGD / 8)) == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3"
#3309: FILE: drivers/misc/xp/xpmem_pfn.c:1003:
+		if (l3 == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PFNtable_l1>
#3325: FILE: drivers/misc/xp/xpmem_pfn.c:1019:
+xpmem_clear_PFNtable_l1(struct xpmem_segment *seg, u64 *l1table, u64 *vaddr,

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PFNtable_l2>
#3358: FILE: drivers/misc/xp/xpmem_pfn.c:1052:
+xpmem_clear_PFNtable_l2(struct xpmem_segment *seg, u64 **l2table, u64 *vaddr,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l1"
#3367: FILE: drivers/misc/xp/xpmem_pfn.c:1061:
+		if (l1 == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_clear_PFNtable_l3>
#3381: FILE: drivers/misc/xp/xpmem_pfn.c:1075:
+xpmem_clear_PFNtable_l3(struct xpmem_segment *seg, u64 ***l3table, u64 *vaddr,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2"
#3390: FILE: drivers/misc/xp/xpmem_pfn.c:1084:
+		if (l2 == NULL) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index != start_index'
#3445: FILE: drivers/misc/xp/xpmem_pfn.c:1139:
+		if ((index != start_index) &&
+		    ((index % (PTRS_PER_PGD / 8)) == 0))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3"
#3450: FILE: drivers/misc/xp/xpmem_pfn.c:1144:
+		if (l3 == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "npls"
#3459: FILE: drivers/misc/xp/xpmem_pfn.c:1153:
+	if (npls != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "npls->PFNlists[nid].PFNlist"
#3462: FILE: drivers/misc/xp/xpmem_pfn.c:1156:
+				if (npls->PFNlists[nid].PFNlist != NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3554: FILE: drivers/misc/xp/xpmem.h:1:
+/*

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3580: FILE: drivers/misc/xp/xpmem.h:27:
+#define XPMEM_MAXADDR_SIZE	(size_t)(-1L)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3671: FILE: drivers/misc/xp/xpmem.h:118:
+extern int xpmem_version(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3672: FILE: drivers/misc/xp/xpmem.h:119:
+extern __s64 xpmem_make(void *, size_t, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3672: FILE: drivers/misc/xp/xpmem.h:119:
+extern __s64 xpmem_make(void *, size_t, int, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3672: FILE: drivers/misc/xp/xpmem.h:119:
+extern __s64 xpmem_make(void *, size_t, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3672: FILE: drivers/misc/xp/xpmem.h:119:
+extern __s64 xpmem_make(void *, size_t, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3672: FILE: drivers/misc/xp/xpmem.h:119:
+extern __s64 xpmem_make(void *, size_t, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3673: FILE: drivers/misc/xp/xpmem.h:120:
+extern int xpmem_remove(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#3673: FILE: drivers/misc/xp/xpmem.h:120:
+extern int xpmem_remove(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3674: FILE: drivers/misc/xp/xpmem.h:121:
+extern __s64 xpmem_get(__s64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#3674: FILE: drivers/misc/xp/xpmem.h:121:
+extern __s64 xpmem_get(__s64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3674: FILE: drivers/misc/xp/xpmem.h:121:
+extern __s64 xpmem_get(__s64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3674: FILE: drivers/misc/xp/xpmem.h:121:
+extern __s64 xpmem_get(__s64, int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3674: FILE: drivers/misc/xp/xpmem.h:121:
+extern __s64 xpmem_get(__s64, int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3675: FILE: drivers/misc/xp/xpmem.h:122:
+extern int xpmem_release(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#3675: FILE: drivers/misc/xp/xpmem.h:122:
+extern int xpmem_release(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3676: FILE: drivers/misc/xp/xpmem.h:123:
+extern void *xpmem_attach(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_addr' should also have an identifier name
#3676: FILE: drivers/misc/xp/xpmem.h:123:
+extern void *xpmem_attach(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3676: FILE: drivers/misc/xp/xpmem.h:123:
+extern void *xpmem_attach(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3676: FILE: drivers/misc/xp/xpmem.h:123:
+extern void *xpmem_attach(struct xpmem_addr, size_t, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3677: FILE: drivers/misc/xp/xpmem.h:124:
+extern void *xpmem_attach_wc(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_addr' should also have an identifier name
#3677: FILE: drivers/misc/xp/xpmem.h:124:
+extern void *xpmem_attach_wc(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3677: FILE: drivers/misc/xp/xpmem.h:124:
+extern void *xpmem_attach_wc(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3677: FILE: drivers/misc/xp/xpmem.h:124:
+extern void *xpmem_attach_wc(struct xpmem_addr, size_t, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3678: FILE: drivers/misc/xp/xpmem.h:125:
+extern void *xpmem_attach_getspace(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_addr' should also have an identifier name
#3678: FILE: drivers/misc/xp/xpmem.h:125:
+extern void *xpmem_attach_getspace(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3678: FILE: drivers/misc/xp/xpmem.h:125:
+extern void *xpmem_attach_getspace(struct xpmem_addr, size_t, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3678: FILE: drivers/misc/xp/xpmem.h:125:
+extern void *xpmem_attach_getspace(struct xpmem_addr, size_t, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3679: FILE: drivers/misc/xp/xpmem.h:126:
+extern int xpmem_detach(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3679: FILE: drivers/misc/xp/xpmem.h:126:
+extern int xpmem_detach(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3680: FILE: drivers/misc/xp/xpmem.h:127:
+extern int xpmem_bcopy(struct xpmem_addr, struct xpmem_addr, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_addr' should also have an identifier name
#3680: FILE: drivers/misc/xp/xpmem.h:127:
+extern int xpmem_bcopy(struct xpmem_addr, struct xpmem_addr, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_addr' should also have an identifier name
#3680: FILE: drivers/misc/xp/xpmem.h:127:
+extern int xpmem_bcopy(struct xpmem_addr, struct xpmem_addr, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3680: FILE: drivers/misc/xp/xpmem.h:127:
+extern int xpmem_bcopy(struct xpmem_addr, struct xpmem_addr, size_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3689: FILE: drivers/misc/xp/xpmem_private.h:1:
+/*

WARNING:TYPO_SPELLING: 'contans' may be misspelled - perhaps 'contains'?
#3793: FILE: drivers/misc/xp/xpmem_private.h:105:
+ * A 64-bit PFNtable entry contans the following fields:
                            ^^^^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#4009: FILE: drivers/misc/xp/xpmem_private.h:321:
+#define XPMEM_PFNTABLE_L3INDEX(v)   ((v >> PUD_SHIFT) & (PTRS_PER_PUD - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#4010: FILE: drivers/misc/xp/xpmem_private.h:322:
+#define XPMEM_PFNTABLE_L2INDEX(v)   ((v >> PMD_SHIFT) & (PTRS_PER_PMD - 1))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'v' may be better as '(v)' to avoid precedence issues
#4011: FILE: drivers/misc/xp/xpmem_private.h:323:
+#define XPMEM_PFNTABLE_L1INDEX(v)   ((v >> PAGE_SHIFT) & (PTRS_PER_PTE - 1))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l4table"
#4023: FILE: drivers/misc/xp/xpmem_private.h:335:
+	DBUG_ON(l4table == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3table"
#4025: FILE: drivers/misc/xp/xpmem_private.h:337:
+	DBUG_ON(l3table == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2table"
#4027: FILE: drivers/misc/xp/xpmem_private.h:339:
+	DBUG_ON(l2table == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l1table"
#4029: FILE: drivers/misc/xp/xpmem_private.h:341:
+	DBUG_ON(l1table == NULL);

CHECK:CAMELCASE: Avoid CamelCase: <xpmem_alloc_PFNtable_entry>
#4036: FILE: drivers/misc/xp/xpmem_private.h:348:
+xpmem_alloc_PFNtable_entry(size_t size)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!seg->PFNtable"
#4053: FILE: drivers/misc/xp/xpmem_private.h:365:
+	DBUG_ON(seg->PFNtable == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l4entry"
#4056: FILE: drivers/misc/xp/xpmem_private.h:368:
+	if (*l4entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l4entry"
#4060: FILE: drivers/misc/xp/xpmem_private.h:372:
+		if (locked || *l4entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l4entry"
#4067: FILE: drivers/misc/xp/xpmem_private.h:379:
+		if (*l4entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3entry"
#4071: FILE: drivers/misc/xp/xpmem_private.h:383:
+	if (*l3entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3entry"
#4075: FILE: drivers/misc/xp/xpmem_private.h:387:
+		if (locked || *l3entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l3entry"
#4082: FILE: drivers/misc/xp/xpmem_private.h:394:
+		if (*l3entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2entry"
#4086: FILE: drivers/misc/xp/xpmem_private.h:398:
+	if (*l2entry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2entry"
#4090: FILE: drivers/misc/xp/xpmem_private.h:402:
+		if (locked || *l2entry == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l2entry"
#4097: FILE: drivers/misc/xp/xpmem_private.h:409:
+		if (*l2entry == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4159: FILE: drivers/misc/xp/xpmem_private.h:471:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4192: FILE: drivers/misc/xp/xpmem_private.h:504:
+extern struct xpmem_thread_group *xpmem_open_proxy_tg_with_ref(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4192: FILE: drivers/misc/xp/xpmem_private.h:504:
+extern struct xpmem_thread_group *xpmem_open_proxy_tg_with_ref(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4193: FILE: drivers/misc/xp/xpmem_private.h:505:
+extern void xpmem_flush_proxy_tg_with_nosegs(struct xpmem_thread_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4193: FILE: drivers/misc/xp/xpmem_private.h:505:
+extern void xpmem_flush_proxy_tg_with_nosegs(struct xpmem_thread_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4194: FILE: drivers/misc/xp/xpmem_private.h:506:
+extern int xpmem_send_version(short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#4194: FILE: drivers/misc/xp/xpmem_private.h:506:
+extern int xpmem_send_version(short);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64 *' should also have an identifier name
#4197: FILE: drivers/misc/xp/xpmem_private.h:509:
+extern int xpmem_make(u64, size_t, int, void *, __s64 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4198: FILE: drivers/misc/xp/xpmem_private.h:510:
+extern void xpmem_remove_segs_of_tg(struct xpmem_thread_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4198: FILE: drivers/misc/xp/xpmem_private.h:510:
+extern void xpmem_remove_segs_of_tg(struct xpmem_thread_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4199: FILE: drivers/misc/xp/xpmem_private.h:511:
+extern int xpmem_remove(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4199: FILE: drivers/misc/xp/xpmem_private.h:511:
+extern int xpmem_remove(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64 *' should also have an identifier name
#4202: FILE: drivers/misc/xp/xpmem_private.h:514:
+extern int xpmem_get(__s64, int, int, void *, __s64 *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4203: FILE: drivers/misc/xp/xpmem_private.h:515:
+extern void xpmem_release_aps_of_tg(struct xpmem_thread_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4203: FILE: drivers/misc/xp/xpmem_private.h:515:
+extern void xpmem_release_aps_of_tg(struct xpmem_thread_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4204: FILE: drivers/misc/xp/xpmem_private.h:516:
+extern int xpmem_release(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4204: FILE: drivers/misc/xp/xpmem_private.h:516:
+extern int xpmem_release(__s64);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#4207: FILE: drivers/misc/xp/xpmem_private.h:519:
+extern struct vm_operations_struct xpmem_vm_ops_fault;

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#4208: FILE: drivers/misc/xp/xpmem_private.h:520:
+extern struct vm_operations_struct xpmem_vm_ops_nopfn;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64 *' should also have an identifier name
#4209: FILE: drivers/misc/xp/xpmem_private.h:521:
+extern int xpmem_attach(struct file *, __s64, off_t, size_t, u64, int, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4211: FILE: drivers/misc/xp/xpmem_private.h:523:
+extern void xpmem_clear_PTEs(struct xpmem_segment *, u64, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_segment *' should also have an identifier name
#4211: FILE: drivers/misc/xp/xpmem_private.h:523:
+extern void xpmem_clear_PTEs(struct xpmem_segment *, u64, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4211: FILE: drivers/misc/xp/xpmem_private.h:523:
+extern void xpmem_clear_PTEs(struct xpmem_segment *, u64, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4211: FILE: drivers/misc/xp/xpmem_private.h:523:
+extern void xpmem_clear_PTEs(struct xpmem_segment *, u64, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4212: FILE: drivers/misc/xp/xpmem_private.h:524:
+extern int xpmem_detach(u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4212: FILE: drivers/misc/xp/xpmem_private.h:524:
+extern int xpmem_detach(u64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4213: FILE: drivers/misc/xp/xpmem_private.h:525:
+extern void xpmem_detach_att(struct xpmem_access_permit *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_access_permit *' should also have an identifier name
#4213: FILE: drivers/misc/xp/xpmem_private.h:525:
+extern void xpmem_detach_att(struct xpmem_access_permit *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_attachment *' should also have an identifier name
#4213: FILE: drivers/misc/xp/xpmem_private.h:525:
+extern void xpmem_detach_att(struct xpmem_access_permit *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4215: FILE: drivers/misc/xp/xpmem_private.h:527:
+extern int xpmem_mmap(struct file *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#4215: FILE: drivers/misc/xp/xpmem_private.h:527:
+extern int xpmem_mmap(struct file *, struct vm_area_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#4215: FILE: drivers/misc/xp/xpmem_private.h:527:
+extern int xpmem_mmap(struct file *, struct vm_area_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4218: FILE: drivers/misc/xp/xpmem_private.h:530:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct emm_notifier *' should also have an identifier name
#4218: FILE: drivers/misc/xp/xpmem_private.h:530:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#4218: FILE: drivers/misc/xp/xpmem_private.h:530:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4218: FILE: drivers/misc/xp/xpmem_private.h:530:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4218: FILE: drivers/misc/xp/xpmem_private.h:530:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4219: FILE: drivers/misc/xp/xpmem_private.h:531:
+extern int xpmem_emm_notifier_callback(struct emm_notifier *, struct mm_struct *,
+		enum emm_operation, unsigned long, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_segment *' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#4220: FILE: drivers/misc/xp/xpmem_private.h:532:
+extern int xpmem_ensure_valid_PFNs(struct xpmem_segment *, u64, size_t, int,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_segment *' should also have an identifier name
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4222: FILE: drivers/misc/xp/xpmem_private.h:534:
+extern void xpmem_clear_PFNtable(struct xpmem_segment *, u64, size_t, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4223: FILE: drivers/misc/xp/xpmem_private.h:535:
+extern int xpmem_block_recall_PFNs(struct xpmem_thread_group *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4223: FILE: drivers/misc/xp/xpmem_private.h:535:
+extern int xpmem_block_recall_PFNs(struct xpmem_thread_group *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4223: FILE: drivers/misc/xp/xpmem_private.h:535:
+extern int xpmem_block_recall_PFNs(struct xpmem_thread_group *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4224: FILE: drivers/misc/xp/xpmem_private.h:536:
+extern void xpmem_unblock_recall_PFNs(struct xpmem_thread_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4224: FILE: drivers/misc/xp/xpmem_private.h:536:
+extern void xpmem_unblock_recall_PFNs(struct xpmem_thread_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4225: FILE: drivers/misc/xp/xpmem_private.h:537:
+extern int xpmem_fork_begin(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4226: FILE: drivers/misc/xp/xpmem_private.h:538:
+extern int xpmem_fork_end(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4231: FILE: drivers/misc/xp/xpmem_private.h:543:
+extern int xpmem_unpin_procfs_write(struct file *, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#4231: FILE: drivers/misc/xp/xpmem_private.h:543:
+extern int xpmem_unpin_procfs_write(struct file *, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char __user *' should also have an identifier name
#4231: FILE: drivers/misc/xp/xpmem_private.h:543:
+extern int xpmem_unpin_procfs_write(struct file *, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4231: FILE: drivers/misc/xp/xpmem_private.h:543:
+extern int xpmem_unpin_procfs_write(struct file *, const char __user *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4231: FILE: drivers/misc/xp/xpmem_private.h:543:
+extern int xpmem_unpin_procfs_write(struct file *, const char __user *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#4233: FILE: drivers/misc/xp/xpmem_private.h:545:
+extern int xpmem_unpin_procfs_read(char *, char **, off_t, int, int *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4241: FILE: drivers/misc/xp/xpmem_private.h:553:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_tgid(struct xpmem_partition *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_partition *' should also have an identifier name
#4241: FILE: drivers/misc/xp/xpmem_private.h:553:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_tgid(struct xpmem_partition *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pid_t' should also have an identifier name
#4241: FILE: drivers/misc/xp/xpmem_private.h:553:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_tgid(struct xpmem_partition *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4243: FILE: drivers/misc/xp/xpmem_private.h:555:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_segid(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4243: FILE: drivers/misc/xp/xpmem_private.h:555:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_segid(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4244: FILE: drivers/misc/xp/xpmem_private.h:556:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_apid(__s64);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4244: FILE: drivers/misc/xp/xpmem_private.h:556:
+extern struct xpmem_thread_group *xpmem_tg_ref_by_apid(__s64);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4245: FILE: drivers/misc/xp/xpmem_private.h:557:
+extern void xpmem_tg_deref(struct xpmem_thread_group *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4245: FILE: drivers/misc/xp/xpmem_private.h:557:
+extern void xpmem_tg_deref(struct xpmem_thread_group *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4246: FILE: drivers/misc/xp/xpmem_private.h:558:
+extern struct xpmem_segment *xpmem_seg_ref_by_segid(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4246: FILE: drivers/misc/xp/xpmem_private.h:558:
+extern struct xpmem_segment *xpmem_seg_ref_by_segid(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4246: FILE: drivers/misc/xp/xpmem_private.h:558:
+extern struct xpmem_segment *xpmem_seg_ref_by_segid(struct xpmem_thread_group *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4248: FILE: drivers/misc/xp/xpmem_private.h:560:
+extern void xpmem_seg_deref(struct xpmem_segment *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_segment *' should also have an identifier name
#4248: FILE: drivers/misc/xp/xpmem_private.h:560:
+extern void xpmem_seg_deref(struct xpmem_segment *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4249: FILE: drivers/misc/xp/xpmem_private.h:561:
+extern struct xpmem_access_permit *xpmem_ap_ref_by_apid(struct

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct
 							xpmem_thread_group *' should also have an identifier name
#4249: FILE: drivers/misc/xp/xpmem_private.h:561:
+extern struct xpmem_access_permit *xpmem_ap_ref_by_apid(struct

WARNING:FUNCTION_ARGUMENTS: function definition argument '__s64' should also have an identifier name
#4249: FILE: drivers/misc/xp/xpmem_private.h:561:
+extern struct xpmem_access_permit *xpmem_ap_ref_by_apid(struct

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4252: FILE: drivers/misc/xp/xpmem_private.h:564:
+extern void xpmem_ap_deref(struct xpmem_access_permit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_access_permit *' should also have an identifier name
#4252: FILE: drivers/misc/xp/xpmem_private.h:564:
+extern void xpmem_ap_deref(struct xpmem_access_permit *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4253: FILE: drivers/misc/xp/xpmem_private.h:565:
+extern void xpmem_att_deref(struct xpmem_attachment *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_attachment *' should also have an identifier name
#4253: FILE: drivers/misc/xp/xpmem_private.h:565:
+extern void xpmem_att_deref(struct xpmem_attachment *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4254: FILE: drivers/misc/xp/xpmem_private.h:566:
+extern int xpmem_seg_down_read(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_thread_group *' should also have an identifier name
#4254: FILE: drivers/misc/xp/xpmem_private.h:566:
+extern int xpmem_seg_down_read(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_segment *' should also have an identifier name
#4254: FILE: drivers/misc/xp/xpmem_private.h:566:
+extern int xpmem_seg_down_read(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4254: FILE: drivers/misc/xp/xpmem_private.h:566:
+extern int xpmem_seg_down_read(struct xpmem_thread_group *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4254: FILE: drivers/misc/xp/xpmem_private.h:566:
+extern int xpmem_seg_down_read(struct xpmem_thread_group *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4256: FILE: drivers/misc/xp/xpmem_private.h:568:
+extern u64 xpmem_get_seg_vaddr(struct xpmem_access_permit *, off_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpmem_access_permit *' should also have an identifier name
#4256: FILE: drivers/misc/xp/xpmem_private.h:568:
+extern u64 xpmem_get_seg_vaddr(struct xpmem_access_permit *, off_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#4256: FILE: drivers/misc/xp/xpmem_private.h:568:
+extern u64 xpmem_get_seg_vaddr(struct xpmem_access_permit *, off_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#4256: FILE: drivers/misc/xp/xpmem_private.h:568:
+extern u64 xpmem_get_seg_vaddr(struct xpmem_access_permit *, off_t, size_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4256: FILE: drivers/misc/xp/xpmem_private.h:568:
+extern u64 xpmem_get_seg_vaddr(struct xpmem_access_permit *, off_t, size_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4258: FILE: drivers/misc/xp/xpmem_private.h:570:
+extern void xpmem_block_nonfatal_signals(sigset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sigset_t *' should also have an identifier name
#4258: FILE: drivers/misc/xp/xpmem_private.h:570:
+extern void xpmem_block_nonfatal_signals(sigset_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4259: FILE: drivers/misc/xp/xpmem_private.h:571:
+extern void xpmem_unblock_nonfatal_signals(sigset_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sigset_t *' should also have an identifier name
#4259: FILE: drivers/misc/xp/xpmem_private.h:571:
+extern void xpmem_unblock_nonfatal_signals(sigset_t *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4338: FILE: drivers/misc/xp/xpmem_private.h:650:
+	wait_event(att->destroyed_wq, (!(att->flags & XPMEM_FLAG_DESTROYING) ||
+					(att->flags & XPMEM_FLAG_DESTROYED)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4341: FILE: drivers/misc/xp/xpmem_private.h:653:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4385: FILE: drivers/misc/xp/xpmem_private.h:697:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <unblock_recall_PFNs>
#4390: FILE: drivers/misc/xp/xpmem_private.h:702:
+		  struct xpmem_segment *seg, int unblock_recall_PFNs)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 152 warnings, 192 checks, 4398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000298946.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
