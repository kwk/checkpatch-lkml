WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: security/evm/evm_integrity.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:RETURN_VOID: void function return statements are not generally useful
#112: FILE: security/evm/evm_integrity.h:43:
+	return;
+}

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#157: FILE: security/evm/evm_secfs.c:179:
+	evm_ima = debugfs_create_file("ima", S_IRUSR | S_IRGRP, evm_dir,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#224: FILE: security/evm/ima/ima.h:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: security/evm/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#250: FILE: security/evm/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:WxV)
#250: FILE: security/evm/ima/ima.h:27:
+	printk(level "ima (%s): " format ,__func__, ## arg)
 	                                 ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#263: FILE: security/evm/ima/ima.h:40:
+#define MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'digest' may be better as '(digest)' to avoid precedence issues
#264: FILE: security/evm/ima/ima.h:41:
+#define HASH_KEY(digest) (hash_long( \
+	(unsigned long)(*digest), IMA_HASH_BITS));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#264: FILE: security/evm/ima/ima.h:41:
+#define HASH_KEY(digest) (hash_long( \
+	(unsigned long)(*digest), IMA_HASH_BITS));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#288: FILE: security/evm/ima/ima.h:65:
+void ima_invalidate_pcr(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#290: FILE: security/evm/ima/ima.h:67:
+struct queue_entry *ima_lookup_digest_entry(u8 * digest);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#304: FILE: security/evm/ima/ima.h:81:
+};
+extern struct ima_h_table ima_htable;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#308: FILE: security/evm/ima/ima.h:85:
+#define IMA_TPM ((TPM_ANY_TYPE<<16)| TPM_ANY_NUM)
                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxW)
#308: FILE: security/evm/ima/ima.h:85:
+#define IMA_TPM ((TPM_ANY_TYPE<<16)| TPM_ANY_NUM)
                                    ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#309: FILE: security/evm/ima/ima.h:86:
+static inline void ima_extend(const u8 * hash)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: security/evm/ima/ima.h:95:
+static inline void ima_pcrread(int idx, u8 * pcr, int pcr_size)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#323: FILE: security/evm/ima/ima.h:100:
+	if (tpm_pcr_read(IMA_TPM, idx, pcr, pcr_size) != 0) {
+		ima_error("Error Communicating to TPM chip\n");
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#333: FILE: security/evm/ima/ima_evm.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#356: FILE: security/evm/ima/ima_fs.c:1:
+/*

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#377: FILE: security/evm/ima/ima_fs.c:22:
+static ssize_t ima_show_htable_value(char __user * buf, size_t count,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#378: FILE: security/evm/ima/ima_fs.c:23:
+				     loff_t * ppos, atomic_t * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#378: FILE: security/evm/ima/ima_fs.c:23:
+				     loff_t * ppos, atomic_t * val)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#387: FILE: security/evm/ima/ima_fs.c:32:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: security/evm/ima/ima_fs.c:33:
+					  char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#389: FILE: security/evm/ima/ima_fs.c:34:
+					  size_t count, loff_t * ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#394: FILE: security/evm/ima/ima_fs.c:39:
+static struct file_operations ima_htable_violations_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#398: FILE: security/evm/ima/ima_fs.c:43:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#399: FILE: security/evm/ima/ima_fs.c:44:
+					   char __user * buf,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#400: FILE: security/evm/ima/ima_fs.c:45:
+					   size_t count, loff_t * ppos)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#404: FILE: security/evm/ima/ima_fs.c:49:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#406: FILE: security/evm/ima/ima_fs.c:51:
+static struct file_operations ima_measurements_count_ops = {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#411: FILE: security/evm/ima/ima_fs.c:56:
+static void *ima_measurements_start(struct seq_file *m, loff_t * pos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#428: FILE: security/evm/ima/ima_fs.c:73:
+				   loff_t * pos)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#431: FILE: security/evm/ima/ima_fs.c:76:
+	 * against concurrent list-extension */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#432: FILE: security/evm/ima/ima_fs.c:77:
+	struct list_head *lpos = (struct list_head *) v;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#446: FILE: security/evm/ima/ima_fs.c:91:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#473: FILE: security/evm/ima/ima_fs.c:118:
+	if (e == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#511: FILE: security/evm/ima/ima_fs.c:156:
+static struct seq_operations ima_measurments_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#523: FILE: security/evm/ima/ima_fs.c:168:
+static struct file_operations ima_measurements_ops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: security/evm/ima/ima_fs.c:175:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#543: FILE: security/evm/ima/ima_fs.c:188:
+	if (e == NULL)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#559: FILE: security/evm/ima/ima_fs.c:204:
+static struct seq_operations ima_ascii_measurements_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#572: FILE: security/evm/ima/ima_fs.c:217:
+static struct file_operations ima_ascii_measurements_ops = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: security/evm/ima/ima_fs.c:227:
+    ^I^I*ascii_runtime_measurements = NULL,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: security/evm/ima/ima_fs.c:227:
+    ^I^I*ascii_runtime_measurements = NULL,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: security/evm/ima/ima_fs.c:227:
+    ^I^I*ascii_runtime_measurements = NULL,$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#588: FILE: security/evm/ima/ima_fs.c:233:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#593: FILE: security/evm/ima/ima_fs.c:238:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#596: FILE: security/evm/ima/ima_fs.c:241:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#603: FILE: security/evm/ima/ima_fs.c:248:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#610: FILE: security/evm/ima/ima_fs.c:255:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#616: FILE: security/evm/ima/ima_fs.c:261:
+	    securityfs_create_file("violations", S_IRUSR | S_IRGRP,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: security/evm/ima/ima_fs.c:268:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: security/evm/ima/ima_fs.c:274:
+    return -1;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#645: FILE: security/evm/ima/ima_init.c:1:
+/*

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#670: FILE: security/evm/ima/ima_init.c:26:
+int ima_used_chip = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#682: FILE: security/evm/ima/ima_init.c:38:
+	if (entry == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#686: FILE: security/evm/ima/ima_init.c:42:
+	if ((count = strlen(boot_aggregate_name)) > TCG_EVENT_NAME_LEN_MAX)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#690: FILE: security/evm/ima/ima_init.c:46:
+	if (ima_used_chip) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#715: FILE: security/evm/ima/ima_init.c:71:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#767: FILE: security/evm/ima/ima_main.c:1:
+/*

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct measure_entry)...)
#833: FILE: security/evm/ima/ima_main.c:67:
+	entry = kzalloc(sizeof(struct measure_entry), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#840: FILE: security/evm/ima/ima_main.c:74:
+	if ((count = strlen(name)) > TCG_EVENT_NAME_LEN_MAX)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#859: FILE: security/evm/ima/ima_queue.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#886: FILE: security/evm/ima/ima_queue.c:28:
+ * normal operation (lookup entries). */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#914: FILE: security/evm/ima/ima_queue.c:56:
+struct queue_entry *ima_lookup_digest_entry(u8 * digest_value)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct queue_entry)...)
#939: FILE: security/evm/ima/ima_queue.c:81:
+	qe = kmalloc(sizeof(struct queue_entry), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#940: FILE: security/evm/ima/ima_queue.c:82:
+	if (qe == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct queue_entry)...)
#963: FILE: security/evm/ima/ima_queue.c:105:
+	qe = kmalloc(sizeof(struct queue_entry), GFP_ATOMIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#964: FILE: security/evm/ima/ima_queue.c:106:
+	if (qe == NULL) {

WARNING:INDENTED_LABEL: labels should not be indented
#983: FILE: security/evm/ima/ima_queue.c:125:
+      out:

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000458691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 31 warnings, 22 checks, 883 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000458691.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
