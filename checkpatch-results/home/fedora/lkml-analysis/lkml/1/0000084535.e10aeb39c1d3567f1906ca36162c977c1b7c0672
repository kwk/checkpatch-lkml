WARNING:TYPO_SPELLING: 'PARM' may be misspelled - perhaps 'PARAM'?
#32: 
(For consistency with zIPL and IPL PARM parameters.)
                                   ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: arch/s390/include/asm/ipl.h:96:
+extern size_t append_ipl_vmparm(char *, size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#68: FILE: arch/s390/include/asm/ipl.h:96:
+extern size_t append_ipl_vmparm(char *, size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#68: FILE: arch/s390/include/asm/ipl.h:96:
+extern size_t append_ipl_vmparm(char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: arch/s390/include/asm/ipl.h:97:
+extern size_t append_ipl_scpdata(char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#69: FILE: arch/s390/include/asm/ipl.h:97:
+extern size_t append_ipl_scpdata(char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#69: FILE: arch/s390/include/asm/ipl.h:97:
+extern size_t append_ipl_scpdata(char *, size_t);

WARNING:MISPLACED_INIT: __initdata should be placed after upper_command_line[COMMAND_LINE_SIZE]
#94: FILE: arch/s390/kernel/early.c:84:
+static __initdata char upper_command_line[COMMAND_LINE_SIZE];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#115: FILE: arch/s390/kernel/early.c:373:
+	char *parm, *delim;
 	      ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#121: FILE: arch/s390/kernel/early.c:379:
+	parm  = boot_command_line + len + 1;	/* append right after '\0' */
 	^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#123: FILE: arch/s390/kernel/early.c:381:
+	rc = ipl_data(parm, COMMAND_LINE_SIZE - len - 1);
 	              ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#125: FILE: arch/s390/kernel/early.c:383:
+		if (*parm == '=')
 		     ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#126: FILE: arch/s390/kernel/early.c:384:
+			memmove(boot_command_line, parm + 1, rc);
 			                           ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#162: FILE: arch/s390/kernel/ipl.c:276:
+size_t reipl_get_ascii_vmparm(char *dest, size_t size,
 				   const struct ipl_parameter_block *ipb)

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#206: FILE: arch/s390/kernel/ipl.c:324:
+	append_ipl_vmparm(parm, sizeof(parm));
 	                  ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#206: FILE: arch/s390/kernel/ipl.c:324:
+	append_ipl_vmparm(parm, sizeof(parm));
 	                               ^^^^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#210: FILE: arch/s390/kernel/ipl.c:328:
+static size_t scpdata_length(const char* buf, size_t count)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#255: FILE: arch/s390/kernel/ipl.c:373:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#318: FILE: arch/s390/kernel/ipl.c:728:
+		.mode = S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:BRACES: braces {} should be used on all arms of this statement
#358: FILE: arch/s390/kernel/ipl.c:1185:
+		if (ipl_info.type == IPL_TYPE_FCP) {
[...]
+			sys_reipl_fcp_scp_data_attr.attr.mode = S_IRUGO;
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#361: FILE: arch/s390/kernel/ipl.c:1187:
+			sys_reipl_fcp_scp_data_attr.attr.mode = S_IRUGO;

CHECK:BRACES: Unbalanced braces around else statement
#362: FILE: arch/s390/kernel/ipl.c:1188:
+		} else

CHECK:SPACING: No space is necessary after a cast
#375: FILE: arch/s390/kernel/ipl.c:1200:
+		free_page((unsigned long) reipl_block_fcp);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#383: FILE: arch/s390/kernel/ipl.c:1207:
+		free_page((unsigned long) reipl_block_fcp);

CHECK:SPACING: No space is necessary after a cast
#393: FILE: arch/s390/kernel/ipl.c:1216:
+		free_page((unsigned long) reipl_block_fcp);

CHECK:BRACES: Unbalanced braces around else statement
#400: FILE: arch/s390/kernel/ipl.c:1222:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084535.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 10 checks, 323 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084535.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
