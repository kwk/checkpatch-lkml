WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
  git://git.kernel.org/pub/scm/linux/kernel/git/penberg/slab-2.6.git topic/kmemtrace

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#330: FILE: MAINTAINERS:2461:
+P:	Eduard - Gabriel Munteanu
+M:	eduard.munteanu@linux360.ro

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#343: FILE: include/linux/kmemtrace.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/kmemtrace.h:23:
+extern void kmemtrace_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPLIT_STRING: quoted string split across lines
#376: FILE: include/linux/kmemtrace.h:34:
+	trace_mark(kmemtrace_alloc, "type_id %d call_site %lu ptr %lu "
+		   "bytes_req %lu bytes_alloc %lu gfp_flags %lu node %d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#377: FILE: include/linux/kmemtrace.h:35:
+		   type_id, call_site, (unsigned long) ptr,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#378: FILE: include/linux/kmemtrace.h:36:
+		   (unsigned long) bytes_req, (unsigned long) bytes_alloc,

CHECK:SPACING: No space is necessary after a cast
#379: FILE: include/linux/kmemtrace.h:37:
+		   (unsigned long) gfp_flags, node);

CHECK:SPACING: No space is necessary after a cast
#387: FILE: include/linux/kmemtrace.h:45:
+		   type_id, call_site, (unsigned long) ptr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#438: FILE: include/linux/slab.h:228:
+extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#450: FILE: include/linux/slab.h:246:
+extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: include/linux/slab_def.h:33:
+extern void *kmem_cache_alloc_notrace(struct kmem_cache *cachep, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#477: FILE: include/linux/slab_def.h:34:
+extern size_t slab_buffer_size(struct kmem_cache *cachep);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#484: FILE: include/linux/slab_def.h:41:
+}
+static inline size_t slab_buffer_size(struct kmem_cache *cachep)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#525: FILE: include/linux/slab_def.h:92:
+extern void *kmem_cache_alloc_node_notrace(struct kmem_cache *cachep,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#623: FILE: include/linux/slub_def.h:209:
+extern void *kmem_cache_alloc_notrace(struct kmem_cache *s, gfp_t gfpflags);

CHECK:SPACING: No space is necessary after a cast
#636: FILE: include/linux/slub_def.h:221:
+	void *ret = (void *) __get_free_pages(flags | __GFP_COMP, order);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: include/linux/slub_def.h:260:
+extern void *kmem_cache_alloc_node_notrace(struct kmem_cache *s,

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#764: FILE: lib/Kconfig.debug:757:
+	  This requires an userspace application to use. See
 	                ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#792: FILE: mm/kmemtrace.c:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#843: FILE: mm/kmemtrace.c:52:
+} __attribute__ ((__packed__));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#850: FILE: mm/kmemtrace.c:59:
+} __attribute__ ((__packed__));

WARNING:SPLIT_STRING: quoted string split across lines
#968: FILE: mm/kmemtrace.c:177:
+	err = marker_probe_register("kmemtrace_alloc", "type_id %d "
+				    "call_site %lu ptr %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#969: FILE: mm/kmemtrace.c:178:
+				    "call_site %lu ptr %lu "
+				    "bytes_req %lu bytes_alloc %lu "

WARNING:SPLIT_STRING: quoted string split across lines
#970: FILE: mm/kmemtrace.c:179:
+				    "bytes_req %lu bytes_alloc %lu "
+				    "gfp_flags %lu node %d",

WARNING:SPLIT_STRING: quoted string split across lines
#975: FILE: mm/kmemtrace.c:184:
+	err = marker_probe_register("kmemtrace_free", "type_id %d "
+				    "call_site %lu ptr %lu",

CHECK:SPACING: No space is necessary after a cast
#991: FILE: mm/kmemtrace.c:200:
+	*val = *((int *) data);

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: mm/kmemtrace.c:209:
+	*((int *) data) = !!val;

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1019: FILE: mm/kmemtrace.c:228:
+	if (kmemtrace_enabled_dentry)
+		debugfs_remove(kmemtrace_enabled_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1024: FILE: mm/kmemtrace.c:233:
+	if (kmemtrace_abi_version_dentry)
+		debugfs_remove(kmemtrace_abi_version_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1026: FILE: mm/kmemtrace.c:235:
+	if (kmemtrace_overruns_dentry)
+		debugfs_remove(kmemtrace_overruns_dentry);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1032: FILE: mm/kmemtrace.c:241:
+	if (kmemtrace_dir)
+		debugfs_remove(kmemtrace_dir);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1045: FILE: mm/kmemtrace.c:254:
+		debugfs_create_u32("abi_version", S_IRUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1048: FILE: mm/kmemtrace.c:257:
+		debugfs_create_u32("total_overruns", S_IRUSR,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1054: FILE: mm/kmemtrace.c:263:
+		debugfs_create_file("enabled", S_IRUSR | S_IWUSR,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1063: FILE: mm/kmemtrace.c:272:
+	printk(KERN_INFO "kmemtrace: fully up.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1088: FILE: mm/kmemtrace.c:297:
+}
+early_param("kmemtrace.enable", kmemtrace_set_boot_enabled);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1095: FILE: mm/kmemtrace.c:304:
+}
+early_param("kmemtrace.subbufs", kmemtrace_set_subbufs);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1106: FILE: mm/kmemtrace.c:315:
+		printk(KERN_ERR "kmemtrace: could not open relay channel.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1111: FILE: mm/kmemtrace.c:320:
+		printk(KERN_INFO "kmemtrace: disabled. Pass "

WARNING:SPLIT_STRING: quoted string split across lines
#1112: FILE: mm/kmemtrace.c:321:
+		printk(KERN_INFO "kmemtrace: disabled. Pass "
+			"kemtrace.enable=yes as kernel parameter for "

WARNING:SPLIT_STRING: quoted string split across lines
#1113: FILE: mm/kmemtrace.c:322:
+			"kemtrace.enable=yes as kernel parameter for "
+			"boot-time tracing.");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1117: FILE: mm/kmemtrace.c:326:
+		printk(KERN_ERR "kmemtrace: could not register marker probes!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1122: FILE: mm/kmemtrace.c:331:
+	printk(KERN_INFO "kmemtrace: enabled.\n");

CHECK:SPACING: No space is necessary after a cast
#1218: FILE: mm/slab.c:3719:
+				  (unsigned long) caller, ret,

CHECK:SPACING: No space is necessary after a cast
#1257: FILE: mm/slab.c:3771:
+			     (unsigned long) caller, ret,

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1658: FILE: mm/slub.c:3270:
+	/* Honor the call site pointer we recieved. */
 	                                  ^^^^^^^^

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#1681: FILE: mm/slub.c:3293:
+	/* Honor the call site pointer we recieved. */
 	                                  ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 28 warnings, 20 checks, 1489 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
