WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
kernel. Yes, these calls could be converted to printk(KERN_DEBUG), but there

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#58: FILE: include/linux/device.h:599:
+extern void dynamic_printk(char *, char *, ...);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#58: FILE: include/linux/device.h:599:
+extern void dynamic_printk(char *, char *, ...);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#58: FILE: include/linux/device.h:599:
+extern void dynamic_printk(char *, char *, ...);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: include/linux/device.h:601:
+#define dev_dbg(dev, format, ...) do {^I^I^I^I    ^I     \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#60: FILE: include/linux/device.h:601:
+#define dev_dbg(dev, format, ...) do {				    	     \
+	if (unlikely(dynamic_debug_on))					     \
+		dynamic_printk(KBUILD_MODNAME,				     \
+				KERN_DEBUG KBUILD_MODNAME ": %s %s: " format,\
+				dev_driver_string(dev), (dev)->bus_id,	     \
+				##__VA_ARGS__);				     \
+	} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#79: FILE: include/linux/kernel.h:296:
+extern void dynamic_printk(char *, char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#79: FILE: include/linux/kernel.h:296:
+extern void dynamic_printk(char *, char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#79: FILE: include/linux/kernel.h:296:
+extern void dynamic_printk(char *, char *, ...);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#103: FILE: lib/Kconfig.debug:640:
+^I  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'kerenl' may be misspelled - perhaps 'kernel'?
#109: FILE: lib/Kconfig.debug:646:
+	  The impact of this compile option is a larger kerenl text size ~1%.
 	                                                ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: lib/Kconfig.debug:647:
+^I  However, if CONFIG_IMMEDIATE is set, the run-time impact is $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#127: FILE: lib/Kconfig.debug:664:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#128: FILE: lib/Kconfig.debug:665:
+^I  This will cause kobject debug messages to spew out. Also, a special $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: lib/Kconfig.debug:674:
+^I$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#155: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: lib/dynamic_printk.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#161: FILE: lib/dynamic_printk.c:2:
+ * lib/dynamic_printk.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'their'
#164: FILE: lib/dynamic_printk.c:5:
+ * make pr_debug()/dev_dbg() calls runtime configurable based upon their
+ * their source module.

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: lib/dynamic_printk.c:19:
+#define FILE_TABLE_SIZE (1 << FILE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#184: FILE: lib/dynamic_printk.c:25:
+static struct hlist_head module_table[FILE_TABLE_SIZE] =
+	{ [0 ... FILE_TABLE_SIZE-1] = HLIST_HEAD_INIT };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: lib/dynamic_printk.c:25:
+	{ [0 ... FILE_TABLE_SIZE-1] = HLIST_HEAD_INIT };
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: lib/dynamic_printk.c:37:
+	unsigned int hash = full_name_hash(name, strlen(name));
+	return (hash & ((1 << FILE_HASH_BITS) - 1));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*new)...) over kmalloc(sizeof(struct debug_name)...)
#226: FILE: lib/dynamic_printk.c:67:
+	new = kmalloc(sizeof(struct debug_name), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#232: FILE: lib/dynamic_printk.c:73:
+	hlist_add_head_rcu(&new->hlist,
+			&module_table[name_hash(new->name)]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!element"
#242: FILE: lib/dynamic_printk.c:83:
+	if (element == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#257: FILE: lib/dynamic_printk.c:98:
+	if (all)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#259: FILE: lib/dynamic_printk.c:100:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: lib/dynamic_printk.c:109:
+static ssize_t pr_debug_write(struct file *file, const char __user *buf,
+				size_t length, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#287: FILE: lib/dynamic_printk.c:128:
+	else if (buffer[PAGE_SIZE-1])
 	                         ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_entries == 0'
#293: FILE: lib/dynamic_printk.c:134:
+		if (!all && (nr_entries == 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_entries == 0'
#298: FILE: lib/dynamic_printk.c:139:
+		if (all && (nr_entries == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_entries == 1'
#313: FILE: lib/dynamic_printk.c:154:
+		if (!err && (nr_entries == 1) && !all)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nr_entries == 0'
#318: FILE: lib/dynamic_printk.c:159:
+		if (!err && (nr_entries == 0) && !all)

CHECK:SPACING: No space is necessary after a cast
#353: FILE: lib/dynamic_printk.c:194:
+	unsigned int i = *(loff_t *) v;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#356: FILE: lib/dynamic_printk.c:197:
+		seq_printf(s, "all\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#365: FILE: lib/dynamic_printk.c:206:
+static struct seq_operations pr_debug_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#372: FILE: lib/dynamic_printk.c:213:
+static int pr_debug_open(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#374: FILE: lib/dynamic_printk.c:215:
+	return seq_open(filp, &pr_debug_seq_ops);
 	                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: lib/dynamic_printk.c:234:
+	file = debugfs_create_file("modules", 0644, dir, NULL,
+					&pr_debug_operations);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#400: FILE: lib/dynamic_printk.c:241:
+__initcall(dynamic_printk_init);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: lib/dynamic_printk.c:251:
+}
+early_param("dynamic_printk", dynamic_printk_setup);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 17 warnings, 19 checks, 336 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000288264.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
