CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#96: FILE: arch/i386/kernel/process.c:330:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE], **tmp = pages;
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#106: FILE: arch/i386/kernel/process.c:340:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i) {
 	                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#130: FILE: arch/i386/kernel/process.c:364:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i)
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#131: FILE: arch/i386/kernel/process.c:365:
+		__free_page(vmalloc_to_page(p + PAGE_SIZE*i));
 		                                         ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#162: FILE: include/asm-i386/module.h:77:
+#define MODULE_ARCH_VERMAGIC MODULE_PROC_FAMILY MODULE_STACKSIZE \
+		MODULE_DEBUG_STACK

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#176: FILE: include/asm-i386/thread_info.h:99:
+struct thread_info *alloc_thread_info(struct task_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct thread_info *' should also have an identifier name
#177: FILE: include/asm-i386/thread_info.h:100:
+void free_thread_info(struct thread_info *);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#222: FILE: arch/i386/kernel/irq.c:152:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#225: FILE: arch/i386/kernel/irq.c:155:
+		pages[i] =  virt_to_page(stack + PAGE_SIZE*i);
 		                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#226: FILE: arch/i386/kernel/irq.c:156:
+	return vmap(pages, THREAD_SIZE/PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
 	                              ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#235: FILE: arch/i386/kernel/irq.c:165:
+	if (!tmp)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#237: FILE: arch/i386/kernel/irq.c:167:
+		return -ENOMEM;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: arch/i386/kernel/irq.c:167:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#243: FILE: arch/i386/kernel/irq.c:173:
+	if (!tmp)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#245: FILE: arch/i386/kernel/irq.c:175:
+		return -ENOMEM;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#245: FILE: arch/i386/kernel/irq.c:175:
+	else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#257: FILE: arch/i386/kernel/irq.c:187:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE], **tmp = pages;
 	                              ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#295: FILE: arch/i386/mm/pgtable.c:188:
+		BUG_ON(kvaddr >= VMALLOC_START);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: arch/i386/mm/pgtable.c:190:
+		BUG_ON(kvaddr >= (unsigned long)__va(MAXMEM));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#320: FILE: include/asm-i386/page.h:127:
+#define __pa(x)			((unsigned long)(x)-PAGE_OFFSET)
                			                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 6 warnings, 13 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438044.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
