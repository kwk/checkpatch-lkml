WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#53: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: fs/staging/ceph/mon_client.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#81: FILE: fs/staging/ceph/mon_client.c:24:
+	dout(30, "monmap_decode %p %p len %d\n", p, end, (int)(end-p));
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#81: FILE: fs/staging/ceph/mon_client.c:24:
+	dout(30, "monmap_decode %p %p len %d\n", p, end, (int)(end-p));
 	                                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#84: FILE: fs/staging/ceph/mon_client.c:27:
+	m = kmalloc(end-p, GFP_NOFS);
 	               ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m"
#85: FILE: fs/staging/ceph/mon_client.c:28:
+	if (m == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: fs/staging/ceph/mon_client.c:31:
+	ceph_decode_need(&p, end, 2*sizeof(u32) + 2*sizeof(u64), bad);
 	                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#88: FILE: fs/staging/ceph/mon_client.c:31:
+	ceph_decode_need(&p, end, 2*sizeof(u32) + 2*sizeof(u64), bad);
 	                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#95: FILE: fs/staging/ceph/mon_client.c:38:
+	ceph_decode_need(&p, end, m->num_mon*sizeof(m->mon_inst[0]), bad);
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#96: FILE: fs/staging/ceph/mon_client.c:39:
+	ceph_decode_copy(&p, m->mon_inst, m->num_mon*sizeof(m->mon_inst[0]));
 	                                            ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#100: FILE: fs/staging/ceph/mon_client.c:43:
+	dout(30, "monmap_decode epoch %d, num_mon %d\n", m->epoch,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#103: FILE: fs/staging/ceph/mon_client.c:46:
+		dout(30, "monmap_decode  mon%d is %u.%u.%u.%u:%u\n", i,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#108: FILE: fs/staging/ceph/mon_client.c:51:
+	dout(30, "monmap_decode failed with %d\n", err);
 	^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#163: FILE: fs/staging/ceph/mon_client.c:106:
+	if (mutex_trylock(&req->monc->req_mutex)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#167: FILE: fs/staging/ceph/mon_client.c:110:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#187: FILE: fs/staging/ceph/mon_client.c:130:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#197: FILE: fs/staging/ceph/mon_client.c:140:
+	dout(5, "request_mdsmap from mon%d want %u\n", mon, monc->want_mdsmap);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_mdsmap', this function's name, in a string
#197: FILE: fs/staging/ceph/mon_client.c:140:
+	dout(5, "request_mdsmap from mon%d want %u\n", mon, monc->want_mdsmap);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#213: FILE: fs/staging/ceph/mon_client.c:156:
+	dout(5, "request_mdsmap want %u\n", want);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#233: FILE: fs/staging/ceph/mon_client.c:176:
+		dout(5, "got_mdsmap %u < wanted %u\n", got, monc->want_mdsmap);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#236: FILE: fs/staging/ceph/mon_client.c:179:
+		dout(5, "got_mdsmap %u >= wanted %u\n", got, monc->want_mdsmap);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: fs/staging/ceph/mon_client.c:187:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#254: FILE: fs/staging/ceph/mon_client.c:197:
+	dout(5, "request_osdmap from mon%d want %u\n", mon, monc->want_osdmap);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_osdmap', this function's name, in a string
#254: FILE: fs/staging/ceph/mon_client.c:197:
+	dout(5, "request_osdmap from mon%d want %u\n", mon, monc->want_osdmap);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#267: FILE: fs/staging/ceph/mon_client.c:210:
+	dout(5, "request_osdmap want %u\n", want);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#282: FILE: fs/staging/ceph/mon_client.c:225:
+		dout(5, "got_osdmap %u < wanted %u\n", got, monc->want_osdmap);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#285: FILE: fs/staging/ceph/mon_client.c:228:
+		dout(5, "got_osdmap %u >= wanted %u\n", got, monc->want_osdmap);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#293: FILE: fs/staging/ceph/mon_client.c:236:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#302: FILE: fs/staging/ceph/mon_client.c:245:
+	dout(5, "request_umount from mon%d\n", mon);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_umount', this function's name, in a string
#302: FILE: fs/staging/ceph/mon_client.c:245:
+	dout(5, "request_umount from mon%d\n", mon);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#328: FILE: fs/staging/ceph/mon_client.c:271:
+	dout(5, "handle_umount\n");
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#336: FILE: fs/staging/ceph/mon_client.c:279:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#350: FILE: fs/staging/ceph/mon_client.c:293:
+	dout(10, "handle_statfs_reply %p tid %llu\n", msg, tid);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#378: FILE: fs/staging/ceph/mon_client.c:321:
+	dout(10, "send_statfs to mon%d tid %llu\n", mon, req->tid);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'send_statfs', this function's name, in a string
#378: FILE: fs/staging/ceph/mon_client.c:321:
+	dout(10, "send_statfs to mon%d tid %llu\n", mon, req->tid);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#415: FILE: fs/staging/ceph/mon_client.c:358:
+				      round_jiffies_relative(1*HZ));
 				                              ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#450: FILE: fs/staging/ceph/mon_client.c:393:
+	dout(10, "do_statfs_check\n");
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_statfs_check', this function's name, in a string
#450: FILE: fs/staging/ceph/mon_client.c:393:
+	dout(10, "do_statfs_check\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#472: FILE: fs/staging/ceph/mon_client.c:415:
+				      round_jiffies_relative(1*HZ));
 				                              ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: fs/staging/ceph/mon_client.c:418:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#478: FILE: fs/staging/ceph/mon_client.c:421:
+	dout(5, "init\n");
 	^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*monc->monmap)...) over kzalloc(sizeof(struct ceph_monmap)...)
#481: FILE: fs/staging/ceph/mon_client.c:424:
+	monc->monmap = kzalloc(sizeof(struct ceph_monmap) +

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!monc->monmap"
#484: FILE: fs/staging/ceph/mon_client.c:427:
+	if (monc->monmap == NULL)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#502: FILE: fs/staging/ceph/mon_client.c:445:
+	dout(5, "stop\n");
 	^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#515: FILE: fs/staging/ceph/mon_client.h:1:
+#ifndef _FS_CEPH_MON_CLIENT_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_client *' should also have an identifier name
#557: FILE: fs/staging/ceph/mon_client.h:43:
+	ssize_t (*show)(struct ceph_mon_client *, struct ceph_mon_client_attr *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_client_attr *' should also have an identifier name
#557: FILE: fs/staging/ceph/mon_client.h:43:
+	ssize_t (*show)(struct ceph_mon_client *, struct ceph_mon_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#557: FILE: fs/staging/ceph/mon_client.h:43:
+	ssize_t (*show)(struct ceph_mon_client *, struct ceph_mon_client_attr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_client *' should also have an identifier name
#559: FILE: fs/staging/ceph/mon_client.h:45:
+	ssize_t (*store)(struct ceph_mon_client *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_client_attr *' should also have an identifier name
#559: FILE: fs/staging/ceph/mon_client.h:45:
+	ssize_t (*store)(struct ceph_mon_client *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#559: FILE: fs/staging/ceph/mon_client.h:45:
+	ssize_t (*store)(struct ceph_mon_client *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#559: FILE: fs/staging/ceph/mon_client.h:45:
+	ssize_t (*store)(struct ceph_mon_client *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_statfs_request *' should also have an identifier name
#566: FILE: fs/staging/ceph/mon_client.h:52:
+	ssize_t (*show)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_statfs_request_attr *' should also have an identifier name
#566: FILE: fs/staging/ceph/mon_client.h:52:
+	ssize_t (*show)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#566: FILE: fs/staging/ceph/mon_client.h:52:
+	ssize_t (*show)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_statfs_request *' should also have an identifier name
#569: FILE: fs/staging/ceph/mon_client.h:55:
+	ssize_t (*store)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ceph_mon_statfs_request_attr *' should also have an identifier name
#569: FILE: fs/staging/ceph/mon_client.h:55:
+	ssize_t (*store)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#569: FILE: fs/staging/ceph/mon_client.h:55:
+	ssize_t (*store)(struct ceph_mon_statfs_request *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#569: FILE: fs/staging/ceph/mon_client.h:55:
+	ssize_t (*store)(struct ceph_mon_statfs_request *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#620: FILE: fs/staging/ceph/mon_client.h:106:
+extern struct ceph_monmap *ceph_monmap_decode(void *p, void *end);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#621: FILE: fs/staging/ceph/mon_client.h:107:
+extern int ceph_monmap_contains(struct ceph_monmap *m,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#624: FILE: fs/staging/ceph/mon_client.h:110:
+extern int ceph_monc_init(struct ceph_mon_client *monc, struct ceph_client *cl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#625: FILE: fs/staging/ceph/mon_client.h:111:
+extern void ceph_monc_stop(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#632: FILE: fs/staging/ceph/mon_client.h:118:
+extern void ceph_monc_request_mdsmap(struct ceph_mon_client *monc, u32 want);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#633: FILE: fs/staging/ceph/mon_client.h:119:
+extern int ceph_monc_got_mdsmap(struct ceph_mon_client *monc, u32 have);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#635: FILE: fs/staging/ceph/mon_client.h:121:
+extern void ceph_monc_request_osdmap(struct ceph_mon_client *monc, u32 want);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#636: FILE: fs/staging/ceph/mon_client.h:122:
+extern int ceph_monc_got_osdmap(struct ceph_mon_client *monc, u32 have);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: fs/staging/ceph/mon_client.h:124:
+extern void ceph_monc_request_umount(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: fs/staging/ceph/mon_client.h:126:
+extern int ceph_monc_do_statfs(struct ceph_mon_client *monc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#642: FILE: fs/staging/ceph/mon_client.h:128:
+extern void ceph_monc_handle_statfs_reply(struct ceph_mon_client *monc,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#645: FILE: fs/staging/ceph/mon_client.h:131:
+extern void ceph_monc_request_umount(struct ceph_mon_client *monc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#646: FILE: fs/staging/ceph/mon_client.h:132:
+extern void ceph_monc_handle_umount(struct ceph_mon_client *monc,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107373.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 41 warnings, 31 checks, 586 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000107373.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
