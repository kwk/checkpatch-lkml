CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: arch/x86/mm/fault.c:1042:
+		fault = handle_speculative_fault(mm, address,
+				error_code & PF_WRITE ? FAULT_FLAG_WRITE : 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#172: FILE: drivers/char/sysrq.c:256:
+	printk(KERN_INFO "faults: %lu, err: %lu, min: %lu, maj: %lu, spec: %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/char/sysrq.c:257:
+	printk(KERN_INFO "faults: %lu, err: %lu, min: %lu, maj: %lu, spec: %lu\n",
+			current->total_flt, current->err_flt, current->min_flt,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: include/linux/mm.h:771:
+	unsigned seq = vma->vm_sequence.sequence;

WARNING:LINE_SPACING: Missing a blank line after declarations
#206: FILE: include/linux/mm.h:772:
+	unsigned seq = vma->vm_sequence.sequence;
+	smp_rmb();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#206: FILE: include/linux/mm.h:772:
+	smp_rmb();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/linux/mm.h:832:
+extern int handle_speculative_fault(struct mm_struct *mm,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: include/linux/mm.h:833:
+extern int handle_speculative_fault(struct mm_struct *mm,
+			unsigned long address, unsigned int flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: mm/memory.c:1961:
+static int pte_map_lock(struct mm_struct *mm, struct vm_area_struct *vma,
+		unsigned long address, pmd_t *pmd, unsigned int flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: mm/memory.c:2069:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: mm/memory.c:2135:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: mm/memory.c:2599:
+			if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+						&page_table, &ptl)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: mm/memory.c:2725:
+		if (!pte_map_lock(mm, vma, address, pmd, flags, seq,
+					&page_table, &ptl))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: mm/memory.c:3116:
+int handle_speculative_fault(struct mm_struct *mm, unsigned long address,
+		unsigned int flags)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#856: FILE: mm/memory.c:3120:
+	spinlock_t *ptl;

WARNING:MEMORY_BARRIER: memory barrier without comment
#877: FILE: mm/memory.c:3141:
+	smp_rmb();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#897: FILE: mm/memory.c:3161:
+
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#938: FILE: mm/mmap.c:504:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#984: FILE: mm/mmap.c:1876:
+		smp_wmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 12 checks, 840 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000028087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
