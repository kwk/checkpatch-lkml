CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/x86/kernel/tlb_uv.c:40:
+static void uv_reply_to_message(int resource,
 		    struct bau_payload_queue_entry *msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: arch/x86/kernel/tlb_uv.c:58:
+static void uv_bau_process_message(struct bau_payload_queue_entry *msg,
 		       int msg_slot, int sw_ack_slot)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msg->sending_cpu == sender'
#177: FILE: arch/x86/kernel/tlb_uv.c:107:
+		if ((msg->sending_cpu == sender) && (!msg->replied_to)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!msg->replied_to'
#177: FILE: arch/x86/kernel/tlb_uv.c:107:
+		if ((msg->sending_cpu == sender) && (!msg->replied_to)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#179: FILE: arch/x86/kernel/tlb_uv.c:109:
+			printk(KERN_DEBUG

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#184: FILE: arch/x86/kernel/tlb_uv.c:114:
+				if (!((long)1 << j & msp-> seen_by.bits)) {
 				                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPECAST_INT_CONSTANT: Unnecessary typecast of c90 int constant - '(long)1' could be '1L'
#184: FILE: arch/x86/kernel/tlb_uv.c:114:
+				if (!((long)1 << j & msp-> seen_by.bits)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#186: FILE: arch/x86/kernel/tlb_uv.c:116:
+					printk("%d ", j);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#189: FILE: arch/x86/kernel/tlb_uv.c:119:
+			printk("\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&bau_desc->distribution'
#257: FILE: arch/x86/kernel/tlb_uv.c:180:
+				if (uv_examine_destinations
+				    (&bau_desc->distribution) == 0) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#279: FILE: arch/x86/kernel/tlb_uv.c:189:
+					printk("giving up on cpu %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: arch/x86/kernel/tlb_uv.c:243:
+		completion_status = uv_wait_completion(bau_desc, mmr_offset,
+					right_shift);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: arch/x86/kernel/tlb_uv.c:297:
+int uv_flush_tlb_others(cpumask_t *cpumaskp, struct mm_struct *mm,
+	unsigned long va)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: arch/x86/kernel/tlb_uv.c:317:
+		BUG_ON(blade > (UV_DISTRIBUTION_SIZE - 1));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#546: FILE: arch/x86/kernel/tlb_uv.c:379:
+	pqp = va_queue_first = __get_cpu_var(bau_control).va_queue_first;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: arch/x86/kernel/tlb_uv.c:487:
+static ssize_t uv_ptc_proc_write(struct file *file, const char __user *user,
 		  size_t count, loff_t *data)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#751: FILE: arch/x86/kernel/tlb_uv.c:589:
+	BUG_ON(!bau_tabp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: arch/x86/kernel/tlb_uv.c:593:
+	BUG_ON(!bau_tabp->msg_statuses);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: arch/x86/kernel/tlb_uv.c:599:
+	BUG_ON(!bau_tabp->watching);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#762: FILE: arch/x86/kernel/tlb_uv.c:600:
+	for (i = 0, ip = bau_tabp->watching; i < DEST_Q_SIZE; i++, ip++) {
+		*ip = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: arch/x86/kernel/tlb_uv.c:611:
+static void __init uv_table_bases_finish(int blade, int node, int cur_cpu,
+				  struct bau_control *bau_tablesp,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#821: FILE: arch/x86/kernel/tlb_uv.c:645:
+	BUG_ON(!adp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#849: FILE: arch/x86/kernel/tlb_uv.c:673:
+static struct bau_payload_queue_entry * __init uv_payload_queue_init(int node,
+				int pnode, struct bau_control *bau_tablesp)

CHECK:SPACING: No space is necessary after a cast
#860: FILE: arch/x86/kernel/tlb_uv.c:678:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#860: FILE: arch/x86/kernel/tlb_uv.c:678:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#860: FILE: arch/x86/kernel/tlb_uv.c:678:
+	pqp = (struct bau_payload_queue_entry *) kmalloc_node(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#863: FILE: arch/x86/kernel/tlb_uv.c:681:
+	BUG_ON(!pqp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#954: FILE: arch/x86/kernel/tlb_uv.c:758:
+	BUG_ON(!uv_bau_table_bases);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#1093: FILE: arch/x86/kernel/tlb_uv.c:773:
+__initcall(uv_ptc_init);

WARNING:TYPO_SPELLING: 'threshholds' may be misspelled - perhaps 'thresholds'?
#1172: FILE: include/asm-x86/uv/uv_bau.h:63:
+ * source side threshholds at which message retries print a warning
                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1346: FILE: include/asm-x86/uv/uv_bau.h:333:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cpumask_t *' should also have an identifier name
#1346: FILE: include/asm-x86/uv/uv_bau.h:333:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1346: FILE: include/asm-x86/uv/uv_bau.h:333:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1346: FILE: include/asm-x86/uv/uv_bau.h:333:
+extern int uv_flush_tlb_others(cpumask_t *, struct mm_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1347: FILE: include/asm-x86/uv/uv_bau.h:334:
+extern void uv_bau_message_intr1(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1348: FILE: include/asm-x86/uv/uv_bau.h:335:
+extern void uv_bau_timeout_intr1(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267910.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 19 warnings, 16 checks, 1262 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267910.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
