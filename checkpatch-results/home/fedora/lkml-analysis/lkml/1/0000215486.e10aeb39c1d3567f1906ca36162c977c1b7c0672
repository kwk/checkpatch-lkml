WARNING:SPACING: space prohibited between function name and open parenthesis '('
#139: FILE: checkpoint/cpt_image.h:153:
+} __attribute__ ((aligned (8)));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#139: FILE: checkpoint/cpt_image.h:153:
+} __attribute__ ((aligned (8)));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#142: FILE: checkpoint/cpt_image.h:156:
+struct cpt_vma_image
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#160: FILE: checkpoint/cpt_image.h:174:
+} __attribute__ ((aligned (8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#160: FILE: checkpoint/cpt_image.h:174:
+} __attribute__ ((aligned (8)));

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#163: FILE: checkpoint/cpt_image.h:177:
+struct cpt_page_block
+{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#171: FILE: checkpoint/cpt_image.h:185:
+} __attribute__ ((aligned (8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#171: FILE: checkpoint/cpt_image.h:185:
+} __attribute__ ((aligned (8)));

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#177: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#182: FILE: checkpoint/cpt_mm.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#212: FILE: checkpoint/cpt_mm.c:31:
+struct page_area
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#222: FILE: checkpoint/cpt_mm.c:41:
+struct page_desc
+{

WARNING:TYPO_SPELLING: 'requre' may be misspelled - perhaps 'require'?
#236: FILE: checkpoint/cpt_mm.c:55:
+      or something else, which does not requre copy.
                                         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#236: FILE: checkpoint/cpt_mm.c:55:
+/* 0: page can be obtained from backstore, or still not mapped anonymous  page,
+      or something else, which does not requre copy.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'requres' may be misspelled - perhaps 'requires'?
#238: FILE: checkpoint/cpt_mm.c:57:
+   2: page requres copy but its content is zero. Quite useless.
            ^^^^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#244: FILE: checkpoint/cpt_mm.c:63:
+			  struct page_desc *pdesc, cpt_context_t * ctx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#251: FILE: checkpoint/cpt_mm.c:70:
+	spinlock_t *ptl;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#253: FILE: checkpoint/cpt_mm.c:72:
+	pgoff_t linear_index = (addr - vma->vm_start)/PAGE_SIZE + vma->vm_pgoff;
 	                                             ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#286: FILE: checkpoint/cpt_mm.c:105:
+	if ((pg = vm_normal_page(vma, addr, pte)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vma->vm_file"
#295: FILE: checkpoint/cpt_mm.c:114:
+		if (vma->vm_file == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: checkpoint/cpt_mm.c:120:
+			eprintk("pg->mapping!=f_mapping: %08lx %p %p\n",
+				    addr, vma->vm_file->f_mapping, pg->mapping);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#313: FILE: checkpoint/cpt_mm.c:132:
+		 * anonymous page is accessed but not written. */

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#365: FILE: checkpoint/cpt_mm.c:184:
+		if (pd.type != PD_COPY) {
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#367: FILE: checkpoint/cpt_mm.c:186:
+			return -EINVAL;
+		} else {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#370: FILE: checkpoint/cpt_mm.c:189:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#371: FILE: checkpoint/cpt_mm.c:190:
+		
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: checkpoint/cpt_mm.c:201:
+static int dump_pages(struct vm_area_struct *vma, unsigned long start,
+		unsigned long end, struct cpt_context *ctx)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#386: FILE: checkpoint/cpt_mm.c:205:
+	int npages = (end - start)/PAGE_SIZE;
 	                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#399: FILE: checkpoint/cpt_mm.c:218:
+			int i;
+			for (i=0; i<n; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#399: FILE: checkpoint/cpt_mm.c:218:
+			for (i=0; i<n; i++) {
 			      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#399: FILE: checkpoint/cpt_mm.c:218:
+			for (i=0; i<n; i++) {
 			           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#401: FILE: checkpoint/cpt_mm.c:220:
+				char *maddr = kmap(pg[i]);
+				ctx->write(maddr, PAGE_SIZE, ctx);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#407: FILE: checkpoint/cpt_mm.c:226:
+				page_cache_release(pg[n-1]);
 				                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#410: FILE: checkpoint/cpt_mm.c:229:
+		start += n*PAGE_SIZE;
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#413: FILE: checkpoint/cpt_mm.c:232:
+			page_cache_release(pg[n-1]);
 			                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#423: FILE: checkpoint/cpt_mm.c:242:
+	int err;
+	pgb->cpt_len = sizeof(*pgb) + pgb->cpt_end - pgb->cpt_start;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dump_one_vma', this function's name, in a string
#525: FILE: checkpoint/cpt_mm.c:344:
+			eprintk("dump_one_vma: funkey page\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#597: FILE: checkpoint/cpt_mm.c:416:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: checkpoint/cpt_mm.c:421:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#604: FILE: checkpoint/cpt_mm.c:423:
+		if ((err = dump_one_vma(mm, vma, ctx)) != 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000215486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 18 warnings, 10 checks, 566 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000215486.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
