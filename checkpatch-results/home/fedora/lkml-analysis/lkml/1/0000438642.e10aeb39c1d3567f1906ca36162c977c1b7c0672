WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Most of asm-i386/bugs.h is code which should be in a C file, so put it there.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: arch/i386/kernel/cpu/bugs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#71: FILE: arch/i386/kernel/cpu/bugs.c:14:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#83: FILE: arch/i386/kernel/cpu/bugs.c:26:
+__setup("no-hlt", no_halt);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#91: FILE: arch/i386/kernel/cpu/bugs.c:34:
+__setup("mca-pentium", mca_pentium);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#100: FILE: arch/i386/kernel/cpu/bugs.c:43:
+__setup("no387", no_387);

WARNING:MISPLACED_INIT: __initdata should be placed after x
#102: FILE: arch/i386/kernel/cpu/bugs.c:45:
+static double __initdata x = 4195835.0;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after y
#103: FILE: arch/i386/kernel/cpu/bugs.c:46:
+static double __initdata y = 3145727.0;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#120: FILE: arch/i386/kernel/cpu/bugs.c:63:
+		printk(KERN_EMERG "No coprocessor found and no math emulation present.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#121: FILE: arch/i386/kernel/cpu/bugs.c:64:
+		printk(KERN_EMERG "Giving up.\n");

WARNING:SPACING: space prohibited before semicolon
#122: FILE: arch/i386/kernel/cpu/bugs.c:65:
+		for (;;) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#122: FILE: arch/i386/kernel/cpu/bugs.c:65:
+		for (;;) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#141: FILE: arch/i386/kernel/cpu/bugs.c:84:
+		printk("Hmm, FPU with FDIV bug.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#149: FILE: arch/i386/kernel/cpu/bugs.c:92:
+	printk(KERN_INFO "Checking 'hlt' instruction... ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#151: FILE: arch/i386/kernel/cpu/bugs.c:94:
+		printk("disabled\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: arch/i386/kernel/cpu/bugs.c:101:
+	printk("OK.\n");

CHECK:SPACING: No space is necessary after a cast
#169: FILE: arch/i386/kernel/cpu/bugs.c:112:
+	int res, inp = (int) &res;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#171: FILE: arch/i386/kernel/cpu/bugs.c:114:
+	printk(KERN_INFO "Checking for popad bug... ");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#172: FILE: arch/i386/kernel/cpu/bugs.c:115:
+	__asm__ __volatile__(

ERROR:SPACING: space prohibited before that close parenthesis ')'
#176: FILE: arch/i386/kernel/cpu/bugs.c:119:
+	  : "ecx", "edi" );

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#178: FILE: arch/i386/kernel/cpu/bugs.c:121:
+	if (res != 12345678) printk( "Buggy.\n" );
+		        else printk( "OK.\n" );

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#178: FILE: arch/i386/kernel/cpu/bugs.c:121:
+	if (res != 12345678) printk( "Buggy.\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#178: FILE: arch/i386/kernel/cpu/bugs.c:121:
+	if (res != 12345678) printk( "Buggy.\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#178: FILE: arch/i386/kernel/cpu/bugs.c:121:
+	if (res != 12345678) printk( "Buggy.\n" );

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#178: FILE: arch/i386/kernel/cpu/bugs.c:121:
+	if (res != 12345678) printk( "Buggy.\n" );

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: arch/i386/kernel/cpu/bugs.c:122:
+^I^I        else printk( "OK.\n" );$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#179: FILE: arch/i386/kernel/cpu/bugs.c:122:
+		        else printk( "OK.\n" );

ERROR:SPACING: space prohibited after that open parenthesis '('
#179: FILE: arch/i386/kernel/cpu/bugs.c:122:
+		        else printk( "OK.\n" );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#179: FILE: arch/i386/kernel/cpu/bugs.c:122:
+		        else printk( "OK.\n" );

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#179: FILE: arch/i386/kernel/cpu/bugs.c:122:
+		        else printk( "OK.\n" );

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#196: FILE: arch/i386/kernel/cpu/bugs.c:139:
+ *   the need to do extra reads from the APIC.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#226: FILE: arch/i386/kernel/cpu/bugs.c:169:
+	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL
+	    && cpu_has_apic

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#227: FILE: arch/i386/kernel/cpu/bugs.c:170:
+	    && cpu_has_apic
+	    && boot_cpu_data.x86 == 5

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#228: FILE: arch/i386/kernel/cpu/bugs.c:171:
+	    && boot_cpu_data.x86 == 5
+	    && boot_cpu_data.x86_model == 2

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#229: FILE: arch/i386/kernel/cpu/bugs.c:172:
+	    && boot_cpu_data.x86_model == 2
+	    && (boot_cpu_data.x86_mask < 6 || boot_cpu_data.x86_mask == 11))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#234: FILE: arch/i386/kernel/cpu/bugs.c:177:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#239: FILE: arch/i386/kernel/cpu/bugs.c:182:
+	printk("CPU: ");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/asm-i386/alternative.h:19:
+extern void alternative_instructions(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/asm-i386/bugs.h:10:
+extern void __init check_bugs(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 17 warnings, 13 checks, 408 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438642.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
