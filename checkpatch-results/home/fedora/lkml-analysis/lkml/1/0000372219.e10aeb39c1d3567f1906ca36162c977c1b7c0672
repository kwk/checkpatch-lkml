WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#113: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#118: FILE: include/linux/xprintf.h:1:
+#ifndef LINUX_XPRINTF_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: include/linux/xprintf.h:21:
+extern void xprintf(void *data, const struct xprintf_ops *ops,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: include/linux/xprintf.h:22:
+extern void xprintf(void *data, const struct xprintf_ops *ops,
+	const char *fmt, ...)

WARNING:LINE_SPACING: Missing a blank line after declarations
#140: FILE: include/linux/xprintf.h:23:
+	const char *fmt, ...)
+	__attribute__ ((format (printf, 3, 4)));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#140: FILE: include/linux/xprintf.h:23:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/xprintf.h:24:
+extern void vxprintf(void *data, const struct xprintf_ops *ops,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: include/linux/xprintf.h:25:
+extern void vxprintf(void *data, const struct xprintf_ops *ops,
+	const char *fmt, va_list args)

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: include/linux/xprintf.h:26:
+	const char *fmt, va_list args)
+	__attribute__ ((format (printf, 3, 0)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 0) over __attribute__((format(printf, 3, 0)))
#143: FILE: include/linux/xprintf.h:26:
+	__attribute__ ((format (printf, 3, 0)));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#167: FILE: kernel/printk.c:490:
+ * the next time we print something. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#191: FILE: kernel/printk.c:514:
+ * are from the format string, and what parts are the arguments. */

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: kernel/printk.c:519:
+	if(escape_args)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#202: FILE: kernel/printk.c:525:
+	if(escape_args)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: kernel/printk.c:558:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#257: FILE: kernel/printk.c:614:
+	if(new_line) {

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#312: FILE: kernel/printk.c:618:
+		if (fmt[0] == '<' && fmt[1] >= '0'
+			&& fmt[1] <= '7' && fmt[2] == '>')
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: kernel/printk.c:618:
+		if (fmt[0] == '<' && fmt[1] >= '0'
[...]
+		} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#313: FILE: kernel/printk.c:619:
+		if (fmt[0] == '<' && fmt[1] >= '0'
+			&& fmt[1] <= '7' && fmt[2] == '>')

CHECK:SPACING: No space is necessary after a cast
#334: FILE: kernel/printk.c:640:
+				(unsigned long) t, nanosec_rem / 1000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: lib/vsprintf.c:245:
+static void xprintf_number(void *data, const struct xprintf_ops *ops,
+	unsigned long long num, int base, int size, int precision, int type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: lib/vsprintf.c:356:
+	struct vsnprintf_data *d = data;
+	d->str = d->buf;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#494: FILE: lib/vsprintf.c:371:
+		 * so we don't increment the buffer pointer. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: lib/vsprintf.c:396:
+	struct vsnprintf_data *d = data;
+	return d->str - d->buf;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#554: FILE: lib/vsprintf.c:443:
+	/* Reject out-of-range values early.  Large positive sizes are
+	   used for unknown buffer sizes. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#554: FILE: lib/vsprintf.c:443:
+	   used for unknown buffer sizes. */

CHECK:SPACING: No space is necessary after a cast
#555: FILE: lib/vsprintf.c:444:
+	if (unlikely((int) size < 0)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: lib/vsprintf.c:447:
+		static char warn = 1;
+		WARN_ON(warn);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#567: FILE: lib/vsprintf.c:456:
+EXPORT_SYMBOL(vsnprintf);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#571: FILE: lib/vsprintf.c:460:
+ * flexibility in what and where to output the result of the formatting. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: lib/vsprintf.c:462:
+void vxprintf(void *data, const struct xprintf_ops *ops,
+	const char *fmt, va_list args)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: lib/vsprintf.c:585:
+				xprintf_number(data, ops,
+					(unsigned long) va_arg(args, void *),

CHECK:SPACING: No space is necessary after a cast
#687: FILE: lib/vsprintf.c:585:
+					(unsigned long) va_arg(args, void *),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: lib/vsprintf.c:654:
+		xprintf_number(data, ops,
+			num, base, field_width, precision, flags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: lib/vsprintf.c:661:
+EXPORT_SYMBOL(vxprintf);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#785: FILE: lib/vsprintf.c:722:
+EXPORT_SYMBOL(xprintf);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 18 warnings, 14 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000372219.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
