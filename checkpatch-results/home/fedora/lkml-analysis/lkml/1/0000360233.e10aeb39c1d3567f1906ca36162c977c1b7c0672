WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: drivers/kvm/kvm_pv_dma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#63: FILE: drivers/kvm/kvm_pv_dma.c:10:
+#include <asm/io.h>

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#90: FILE: drivers/kvm/kvm_pv_dma.c:37:
+};
+static LIST_HEAD(pt_devs_head);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'match->pv_pci_info.busnr == pv_pci_info->busnr'
#101: FILE: drivers/kvm/kvm_pv_dma.c:48:
+		if (match &&
+		    (match->pv_pci_info.busnr == pv_pci_info->busnr) &&
+		    (match->pv_pci_info.devfn == pv_pci_info->devfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'match->pv_pci_info.devfn == pv_pci_info->devfn'
#101: FILE: drivers/kvm/kvm_pv_dma.c:48:
+		if (match &&
+		    (match->pv_pci_info.busnr == pv_pci_info->busnr) &&
+		    (match->pv_pci_info.devfn == pv_pci_info->devfn))

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#115: FILE: drivers/kvm/kvm_pv_dma.c:62:
+		match = list_entry(head->next, \

WARNING:TYPO_SPELLING: 'Errror' may be misspelled - perhaps 'Error'?
#142: FILE: drivers/kvm/kvm_pv_dma.c:89:
+		printk(KERN_INFO "%s: Errror doing hypercall!\n", __FUNCTION__);
 		                      ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#142: FILE: drivers/kvm/kvm_pv_dma.c:89:
+		printk(KERN_INFO "%s: Errror doing hypercall!\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#142: FILE: drivers/kvm/kvm_pv_dma.c:89:
+		printk(KERN_INFO "%s: Errror doing hypercall!\n", __FUNCTION__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*match)...) over kmalloc(sizeof(struct pv_passthrough_dev_list)...)
#147: FILE: drivers/kvm/kvm_pv_dma.c:94:
+	match = kmalloc(sizeof(struct pv_passthrough_dev_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!match"
#148: FILE: drivers/kvm/kvm_pv_dma.c:95:
+	if (match == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#149: FILE: drivers/kvm/kvm_pv_dma.c:96:
+		printk(KERN_INFO "%s: Out of memory\n", __FUNCTION__);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#149: FILE: drivers/kvm/kvm_pv_dma.c:96:
+	if (match == NULL) {
+		printk(KERN_INFO "%s: Out of memory\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#149: FILE: drivers/kvm/kvm_pv_dma.c:96:
+		printk(KERN_INFO "%s: Out of memory\n", __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#168: FILE: drivers/kvm/kvm_pv_dma.c:115:
+	if (page == NULL)

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#198: FILE: drivers/kvm/kvm_pv_dma.c:145:
+		 * accomodate in one page.
 		   ^^^^^^^^^^

WARNING:MINMAX: min() should probably be min_t(unsigned long, npages, MAX_PVDMA_PAGES)
#200: FILE: drivers/kvm/kvm_pv_dma.c:147:
+		for (i = 1; i < min((unsigned long)npages, MAX_PVDMA_PAGES); i++)
 			*dma_addr++ = virt_to_phys(vaddr + PAGE_SIZE * i);

WARNING:RETURN_VOID: void function return statements are not generally useful
#229: FILE: drivers/kvm/kvm_pv_dma.c:176:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#236: FILE: drivers/kvm/kvm_pv_dma.c:183:
+	void *vaddr = NULL;
+	if ((*dma_handle == bad_dma_address)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#237: FILE: drivers/kvm/kvm_pv_dma.c:184:
+	if ((*dma_handle == bad_dma_address)
+	    || !dma_ops->is_pv_device(dev, dev->bus_id))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#277: FILE: drivers/kvm/kvm_pv_dma.c:224:
+	printk(KERN_ERR "%s: Unhandled PV DMA operation. Report this.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#278: FILE: drivers/kvm/kvm_pv_dma.c:225:
+	       __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: drivers/kvm/kvm_pv_dma.c:277:
+void kvm_pv_dma_sync_sg_for_cpu(struct device *hwdev,
+		     struct scatterlist *sg, int nelems,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#349: FILE: drivers/kvm/kvm_pv_dma.c:296:
+	printk(KERN_ERR "%s: Unhandled PV DMA operation. Report this.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#350: FILE: drivers/kvm/kvm_pv_dma.c:297:
+	       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#366: FILE: drivers/kvm/kvm_pv_dma.c:313:
+	printk(KERN_ERR "%s: Unhandled PV DMA operation. Report this.\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#367: FILE: drivers/kvm/kvm_pv_dma.c:314:
+	       __FUNCTION__);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#390: FILE: drivers/kvm/kvm_pv_dma.c:337:
+static struct file_operations dma_chardev_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#403: FILE: drivers/kvm/kvm_pv_dma.c:350:
+		printk(KERN_ERR "%s: misc device register failed\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#404: FILE: drivers/kvm/kvm_pv_dma.c:351:
+		       __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#409: FILE: drivers/kvm/kvm_pv_dma.c:356:
+		printk(KERN_ERR "KVM paravirt support not available\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#416: FILE: drivers/kvm/kvm_pv_dma.c:363:
+	if (page == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#417: FILE: drivers/kvm/kvm_pv_dma.c:364:
+		printk(KERN_ERR "%s: Could not allocate page\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#417: FILE: drivers/kvm/kvm_pv_dma.c:364:
+		printk(KERN_ERR "%s: Could not allocate page\n", __FUNCTION__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#426: FILE: drivers/kvm/kvm_pv_dma.c:373:
+	printk(KERN_INFO "KVM PV DMA engine registered\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360233.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 9 checks, 398 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000360233.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
