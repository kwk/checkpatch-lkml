WARNING:TYPO_SPELLING: 'ommiting' may be misspelled - perhaps 'omitting'?
#49: 
By ommiting pointer to previous element, the reader becomes read lock free,
   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#61: FILE: include/linux/list1.h:1:
+#ifndef _LINUX_LIST1_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#85: FILE: include/linux/list1.h:25:
+#define LIST1_HEAD(name) struct list1_head name = LIST1_HEAD_INIT(name)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#114: FILE: include/linux/list1.h:54:
+#define list1_for_each_cookie(pos, cookie, head)                      \
+	for (({ if (!cookie)                                          \
+				     cookie = head; }),               \
+	     pos = rcu_dereference((cookie)->next);                   \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cookie' - possible side-effects?
#114: FILE: include/linux/list1.h:54:
+#define list1_for_each_cookie(pos, cookie, head)                      \
+	for (({ if (!cookie)                                          \
+				     cookie = head; }),               \
+	     pos = rcu_dereference((cookie)->next);                   \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cookie' may be better as '(cookie)' to avoid precedence issues
#114: FILE: include/linux/list1.h:54:
+#define list1_for_each_cookie(pos, cookie, head)                      \
+	for (({ if (!cookie)                                          \
+				     cookie = head; }),               \
+	     pos = rcu_dereference((cookie)->next);                   \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#114: FILE: include/linux/list1.h:54:
+#define list1_for_each_cookie(pos, cookie, head)                      \
+	for (({ if (!cookie)                                          \
+				     cookie = head; }),               \
+	     pos = rcu_dereference((cookie)->next);                   \
+	     prefetch(pos->next), pos != (head) || ((cookie) = NULL); \
+	     (cookie) = pos, pos = rcu_dereference(pos->next))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#115: FILE: include/linux/list1.h:55:
+	for (({ if (!cookie)                                          \

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201772.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 5 checks, 81 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000201772.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
