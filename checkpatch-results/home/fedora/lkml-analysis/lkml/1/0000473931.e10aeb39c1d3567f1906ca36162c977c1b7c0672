WARNING:SPACING: space prohibited between function name and open parenthesis '('
#58: FILE: include/linux/agpgart.h:120:
+#define AGPIOC_INFO32       _IOR (AGPIOC_BASE, 0, compat_uptr_t)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#58: FILE: include/linux/agpgart.h:120:
+#define AGPIOC_INFO32       _IOR (AGPIOC_BASE, 0, compat_uptr_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#59: FILE: include/linux/agpgart.h:121:
+#define AGPIOC_ACQUIRE32    _IO  (AGPIOC_BASE, 1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#59: FILE: include/linux/agpgart.h:121:
+#define AGPIOC_ACQUIRE32    _IO  (AGPIOC_BASE, 1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#60: FILE: include/linux/agpgart.h:122:
+#define AGPIOC_RELEASE32    _IO  (AGPIOC_BASE, 2)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#60: FILE: include/linux/agpgart.h:122:
+#define AGPIOC_RELEASE32    _IO  (AGPIOC_BASE, 2)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#61: FILE: include/linux/agpgart.h:123:
+#define AGPIOC_SETUP32      _IOW (AGPIOC_BASE, 3, compat_uptr_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#61: FILE: include/linux/agpgart.h:123:
+#define AGPIOC_SETUP32      _IOW (AGPIOC_BASE, 3, compat_uptr_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#62: FILE: include/linux/agpgart.h:124:
+#define AGPIOC_RESERVE32    _IOW (AGPIOC_BASE, 4, compat_uptr_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#62: FILE: include/linux/agpgart.h:124:
+#define AGPIOC_RESERVE32    _IOW (AGPIOC_BASE, 4, compat_uptr_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#63: FILE: include/linux/agpgart.h:125:
+#define AGPIOC_PROTECT32    _IOW (AGPIOC_BASE, 5, compat_uptr_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#63: FILE: include/linux/agpgart.h:125:
+#define AGPIOC_PROTECT32    _IOW (AGPIOC_BASE, 5, compat_uptr_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#65: FILE: include/linux/agpgart.h:127:
+#define AGPIOC_DEALLOCATE32 _IOW (AGPIOC_BASE, 7, compat_int_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#65: FILE: include/linux/agpgart.h:127:
+#define AGPIOC_DEALLOCATE32 _IOW (AGPIOC_BASE, 7, compat_int_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#66: FILE: include/linux/agpgart.h:128:
+#define AGPIOC_BIND32       _IOW (AGPIOC_BASE, 8, compat_uptr_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#66: FILE: include/linux/agpgart.h:128:
+#define AGPIOC_BIND32       _IOW (AGPIOC_BASE, 8, compat_uptr_t)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#67: FILE: include/linux/agpgart.h:129:
+#define AGPIOC_UNBIND32     _IOW (AGPIOC_BASE, 9, compat_uptr_t)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#67: FILE: include/linux/agpgart.h:129:
+#define AGPIOC_UNBIND32     _IOW (AGPIOC_BASE, 9, compat_uptr_t)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#99: FILE: include/linux/agpgart.h:161:
+^Iu32 physical;           /* device specific (some devices  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#100: FILE: include/linux/agpgart.h:162:
+^I^I^I^I * need a phys address of the     $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: include/linux/agpgart.h:163:
+^I^I^I^I * actual page behind the gatt    $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: include/linux/agpgart.h:164:
+				 * table)                        */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#145: FILE: drivers/char/agp/frontend.c:1057:
+	userinfo.pg_total = userinfo.pg_system = kerninfo.max_memory;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#165: FILE: drivers/char/agp/frontend.c:1077:
+	if ((unsigned) ureserve.seg_count >= ~0U/sizeof(struct agp_segment32))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#165: FILE: drivers/char/agp/frontend.c:1077:
+	if ((unsigned) ureserve.seg_count >= ~0U/sizeof(struct agp_segment32))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#165: FILE: drivers/char/agp/frontend.c:1077:
+	if ((unsigned) ureserve.seg_count >= ~0U/sizeof(struct agp_segment32))
 	                                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "client_priv"
#177: FILE: drivers/char/agp/frontend.c:1089:
+		if (client_priv != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#181: FILE: drivers/char/agp/frontend.c:1093:
+		if (client == NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#186: FILE: drivers/char/agp/frontend.c:1098:
+		return agp_remove_client(kreserve.pid);
+	} else {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#194: FILE: drivers/char/agp/frontend.c:1106:
+		usegment = kmalloc(sizeof(*usegment) * ureserve.seg_count, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#198: FILE: drivers/char/agp/frontend.c:1110:
+		ksegment = kmalloc(sizeof(*ksegment) * kreserve.seg_count, GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#204: FILE: drivers/char/agp/frontend.c:1116:
+		if (copy_from_user(usegment, (void __user *) ureserve.seg_list,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#220: FILE: drivers/char/agp/frontend.c:1132:
+		if (client == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!client"
#224: FILE: drivers/char/agp/frontend.c:1136:
+			if (client == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "client_priv"
#230: FILE: drivers/char/agp/frontend.c:1142:
+			if (client_priv != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memory"
#252: FILE: drivers/char/agp/frontend.c:1164:
+	if (memory == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memory"
#276: FILE: drivers/char/agp/frontend.c:1188:
+	if (memory == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!memory"
#293: FILE: drivers/char/agp/frontend.c:1205:
+	if (memory == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around agp_fe.agp_mutex
#304: FILE: drivers/char/agp/frontend.c:1216:
+	mutex_lock(&(agp_fe.agp_mutex));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'agp_fe.current_controller == NULL'
#306: FILE: drivers/char/agp/frontend.c:1218:
+	if ((agp_fe.current_controller == NULL) &&
+	    (cmd != AGPIOC_ACQUIRE32)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != AGPIOC_ACQUIRE32'
#306: FILE: drivers/char/agp/frontend.c:1218:
+	if ((agp_fe.current_controller == NULL) &&
+	    (cmd != AGPIOC_ACQUIRE32)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!agp_fe.current_controller"
#306: FILE: drivers/char/agp/frontend.c:1218:
+	if ((agp_fe.current_controller == NULL) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'agp_fe.backend_acquired != TRUE'
#311: FILE: drivers/char/agp/frontend.c:1223:
+	if ((agp_fe.backend_acquired != TRUE) &&
+	    (cmd != AGPIOC_ACQUIRE32)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd != AGPIOC_ACQUIRE32'
#311: FILE: drivers/char/agp/frontend.c:1223:
+	if ((agp_fe.backend_acquired != TRUE) &&
+	    (cmd != AGPIOC_ACQUIRE32)) {

CHECK:BOOL_COMPARISON: Using comparison to TRUE is error prone
#311: FILE: drivers/char/agp/frontend.c:1223:
+	if ((agp_fe.backend_acquired != TRUE) &&

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: drivers/char/agp/frontend.c:1234:
+		 * in case it's threaded */

CHECK:SPACING: No space is necessary after a cast
#332: FILE: drivers/char/agp/frontend.c:1244:
+		ret_val = compat_agpioc_info_wrap(curr_priv, (void __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#344: FILE: drivers/char/agp/frontend.c:1256:
+		ret_val = agpioc_setup_wrap(curr_priv, (void __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#348: FILE: drivers/char/agp/frontend.c:1260:
+		ret_val = compat_agpioc_reserve_wrap(curr_priv, (void __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#356: FILE: drivers/char/agp/frontend.c:1268:
+		ret_val = compat_agpioc_allocate_wrap(curr_priv, (void __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#360: FILE: drivers/char/agp/frontend.c:1272:
+		ret_val = agpioc_deallocate_wrap(curr_priv, (int) arg);

CHECK:SPACING: No space is necessary after a cast
#364: FILE: drivers/char/agp/frontend.c:1276:
+		ret_val = compat_agpioc_bind_wrap(curr_priv, (void __user *) arg);

CHECK:SPACING: No space is necessary after a cast
#368: FILE: drivers/char/agp/frontend.c:1280:
+		ret_val = compat_agpioc_unbind_wrap(curr_priv, (void __user *) arg);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around agp_fe.agp_mutex
#374: FILE: drivers/char/agp/frontend.c:1286:
+	mutex_unlock(&(agp_fe.agp_mutex));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473931.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 15 warnings, 27 checks, 332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473931.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
