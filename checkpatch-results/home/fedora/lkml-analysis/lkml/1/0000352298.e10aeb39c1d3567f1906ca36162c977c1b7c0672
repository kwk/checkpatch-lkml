WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#66: 
 git-pull git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86.git mm

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__p' - possible side-effects?
#304: FILE: include/asm-generic/percpu.h:46:
+#define SHIFT_PTR(__p, __offset) \
+	((__typeof(__p))(((void *)(__p)) + (__offset)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/asm-generic/percpu.h:63:
+extern void setup_per_cpu_areas(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#352: FILE: include/asm-generic/percpu.h:86:
+#define DECLARE_PER_CPU(type, name) extern PER_CPU_ATTRIBUTES \
+					__typeof__(type) per_cpu_var(name)

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#389: FILE: include/asm-generic/vmlinux.lds.h:261:
+	percpu : { } :percpu						\
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#393: FILE: include/asm-generic/vmlinux.lds.h:265:
+		*(.data.percpu)						\
 		^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#394: FILE: include/asm-generic/vmlinux.lds.h:266:
+		*(.data.percpu.shared_aligned)				\
 		^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#398: FILE: include/asm-generic/vmlinux.lds.h:270:
+	data : { } :data
 	           ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#443: FILE: include/asm-ia64/percpu.h:18:
+# define PER_CPU_ATTRIBUTES	__attribute__((__model__ (__small__)))

ERROR:SPACING: space required after that ',' (ctx:VxV)
#567: FILE: include/asm-s390/percpu.h:16:
+#define SHIFT_PTR(ptr,offset) (({			\
                      ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#573: FILE: include/asm-s390/percpu.h:19:
+	asm ( "larl %0, %1@GOTENT"		\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#574: FILE: include/asm-s390/percpu.h:20:
+	    : "=a" (__ptr) : "X" (ptr) );		\

ERROR:SPACING: space prohibited after that open parenthesis '('
#585: FILE: include/asm-s390/percpu.h:28:
+	asm ( "" : "=a" (__ptr) : "0" (ptr) );			\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#585: FILE: include/asm-s390/percpu.h:28:
+	asm ( "" : "=a" (__ptr) : "0" (ptr) );			\

CHECK:SPACING: No space is necessary after a cast
#586: FILE: include/asm-s390/percpu.h:29:
+	(typeof(ptr)) (__ptr + (offset)); }))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#702: FILE: include/asm-x86/percpu.h:1:
+#ifndef _ASM_X86_PERCPU_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#709: FILE: include/asm-x86/percpu.h:8:
+/* Same as asm-generic/percpu.h, except that we store the per cpu offset
+   in the PDA. Longer term the PDA and every per cpu variable

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#711: FILE: include/asm-x86/percpu.h:10:
+   from %gs */

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#750: FILE: include/asm-x86/percpu.h:48:
+#define PER_CPU(var, reg)				\
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
+	lea per_cpu__##var(reg), reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#750: FILE: include/asm-x86/percpu.h:48:
+#define PER_CPU(var, reg)				\
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
+	lea per_cpu__##var(reg), reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#751: FILE: include/asm-x86/percpu.h:49:
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
 	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#751: FILE: include/asm-x86/percpu.h:49:
+	movl %fs:per_cpu__##this_cpu_off, reg;		\
 	        ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#753: FILE: include/asm-x86/percpu.h:51:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var
                         	^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#753: FILE: include/asm-x86/percpu.h:51:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var
                         	   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#753: FILE: include/asm-x86/percpu.h:51:
+#define PER_CPU_VAR(var)	%fs:per_cpu__##var

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#755: FILE: include/asm-x86/percpu.h:53:
+#define PER_CPU(var, reg)			\
+	movl $per_cpu__##var, reg

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#798: FILE: include/asm-x86/percpu.h:96:
+ * don't give an lvalue though). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#799: FILE: include/asm-x86/percpu.h:97:
+extern void __bad_percpu_size(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#801: FILE: include/asm-x86/percpu.h:99:
+#define percpu_to_op(op,var,val)				\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#801: FILE: include/asm-x86/percpu.h:99:
+#define percpu_to_op(op,var,val)				\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#801: FILE: include/asm-x86/percpu.h:99:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#801: FILE: include/asm-x86/percpu.h:99:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#801: FILE: include/asm-x86/percpu.h:99:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#803: FILE: include/asm-x86/percpu.h:101:
+		typedef typeof(var) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#804: FILE: include/asm-x86/percpu.h:102:
+		if (0) { T__ tmp__; tmp__ = (val); }		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#807: FILE: include/asm-x86/percpu.h:105:
+			asm(op "b %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#809: FILE: include/asm-x86/percpu.h:107:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#812: FILE: include/asm-x86/percpu.h:110:
+			asm(op "w %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#814: FILE: include/asm-x86/percpu.h:112:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#817: FILE: include/asm-x86/percpu.h:115:
+			asm(op "l %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#819: FILE: include/asm-x86/percpu.h:117:
+			    :"ri" ((T__)val));			\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#821: FILE: include/asm-x86/percpu.h:119:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#825: FILE: include/asm-x86/percpu.h:123:
+#define percpu_from_op(op,var)					\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#825: FILE: include/asm-x86/percpu.h:123:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#825: FILE: include/asm-x86/percpu.h:123:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#830: FILE: include/asm-x86/percpu.h:128:
+			asm(op "b "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#835: FILE: include/asm-x86/percpu.h:133:
+			asm(op "w "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#840: FILE: include/asm-x86/percpu.h:138:
+			asm(op "l "__percpu_seg"%1,%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#844: FILE: include/asm-x86/percpu.h:142:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#849: FILE: include/asm-x86/percpu.h:147:
+#define x86_write_percpu(var,val) percpu_to_op("mov", per_cpu__##var, val)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#850: FILE: include/asm-x86/percpu.h:148:
+#define x86_add_percpu(var,val) percpu_to_op("add", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#851: FILE: include/asm-x86/percpu.h:149:
+#define x86_sub_percpu(var,val) percpu_to_op("sub", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#852: FILE: include/asm-x86/percpu.h:150:
+#define x86_or_percpu(var,val) percpu_to_op("or", per_cpu__##var, val)
                          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1095: FILE: include/linux/percpu.h:12:
+#define DEFINE_PER_CPU(type, name)					\
+	__attribute__((__section__(".data.percpu")))			\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#1096: FILE: include/linux/percpu.h:13:
+	__attribute__((__section__(".data.percpu")))			\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1100: FILE: include/linux/percpu.h:17:
+#define DEFINE_PER_CPU_SHARED_ALIGNED(type, name)			\
+	__attribute__((__section__(".data.percpu.shared_aligned")))	\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name		\
+	____cacheline_aligned_in_smp

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu.shared_aligned") over __attribute__((__section__(".data.percpu.shared_aligned")))
#1101: FILE: include/linux/percpu.h:18:
+	__attribute__((__section__(".data.percpu.shared_aligned")))	\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1109: FILE: include/linux/percpu.h:26:
+#define DEFINE_PER_CPU_FIRST(type, name)				\
+	__attribute__((__section__(".data.percpu.first")))		\
+	PER_CPU_ATTRIBUTES __typeof__(type) per_cpu__##name

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu.first") over __attribute__((__section__(".data.percpu.first")))
#1110: FILE: include/linux/percpu.h:27:
+	__attribute__((__section__(".data.percpu.first")))		\

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1113: FILE: include/linux/percpu.h:30:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1114: FILE: include/linux/percpu.h:31:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1153: FILE: init/main.c:383:
+		ptr = alloc_bootmem_pages_node(NODE_DATA(cpu_to_node(cpu)),
+								size);

CHECK:SPACING: No space is necessary after a cast
#1173: FILE: kernel/lockdep.c:616:
+		start = (unsigned long) __per_cpu_start + per_cpu_offset(i);

CHECK:SPACING: No space is necessary after a cast
#1174: FILE: kernel/lockdep.c:617:
+		end   = (unsigned long) __per_cpu_start + PERCPU_ENOUGH_ROOM

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 12 warnings, 25 checks, 761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352298.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
