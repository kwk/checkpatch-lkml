WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
memory cgroup soft limit reclaim finds the group that exceeds its soft limit

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: include/linux/memcontrol.h:121:
+mem_cgroup_soft_limit_reclaim(int priority, struct zone *zone, int nid,
+				gfp_t gfp_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: include/linux/memcontrol.h:272:
+mem_cgroup_soft_limit_reclaim(int priority, struct zone *zone, int nid,
+				gfp_t gfp_mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/swap.h:220:
+extern unsigned long mem_cgroup_shrink_zone(struct mem_cgroup *mem,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#111: FILE: include/linux/swap.h:221:
+extern unsigned long mem_cgroup_shrink_zone(struct mem_cgroup *mem,
+						struct zone *zone,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#137: FILE: mm/memcontrol.c:198:
+^I * Set to > 0, when reclaim is initiated due to $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#153: FILE: mm/memcontrol.c:243:
+#define MEM_CGROUP_RECLAIM_NOSWAP	(1 << MEM_CGROUP_RECLAIM_NOSWAP_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#155: FILE: mm/memcontrol.c:245:
+#define MEM_CGROUP_RECLAIM_SHRINK	(1 << MEM_CGROUP_RECLAIM_SHRINK_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#157: FILE: mm/memcontrol.c:247:
+#define MEM_CGROUP_RECLAIM_SOFT		(1 << MEM_CGROUP_RECLAIM_SOFT_BIT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: mm/memcontrol.c:392:
+mem_cgroup_get_node_zone_usage(struct mem_cgroup *mem, struct zone *zone,
+				int nid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#306: FILE: mm/memcontrol.c:1009:
+			ret = try_to_free_mem_cgroup_pages(victim, gfp_mask,
+							noswap,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: mm/memcontrol.c:1013:
+			ret = mem_cgroup_shrink_zone(victim, zone, gfp_mask,
+							get_swappiness(victim),

CHECK:BRACES: braces {} should be used on all arms of this statement
#320: FILE: mm/memcontrol.c:1024:
+		if (check_soft) {
[...]
+		} else if (mem_cgroup_check_under_limit(root_mem))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: mm/memcontrol.c:1162:
+		ret = mem_cgroup_hierarchical_reclaim(mem_over_limit, NULL,
+							gfp_mask, flags, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: mm/memcontrol.c:1828:
+		progress = mem_cgroup_hierarchical_reclaim(mem, NULL,
+					gfp_mask, MEM_CGROUP_RECLAIM_NOSWAP, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: mm/memcontrol.c:1883:
+		progress = mem_cgroup_hierarchical_reclaim(memcg, NULL,
+						GFP_KERNEL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: mm/memcontrol.c:1947:
+mem_cgroup_soft_limit_reclaim(int priority, struct zone *zone, int nid,
+				gfp_t gfp_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: mm/vmscan.c:1742:
+unsigned long mem_cgroup_shrink_zone(struct mem_cgroup *mem,
+					struct zone *zone, gfp_t gfp_mask,

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#527: FILE: mm/vmscan.c:1893:
+				if ((priority >= DEF_PRIORITY/2) ||
 				                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: mm/vmscan.c:1894:
+				if ((priority >= DEF_PRIORITY/2) ||
+					!mem_cgroup_soft_limit_reclaim(priority,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 1 warnings, 18 checks, 421 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
