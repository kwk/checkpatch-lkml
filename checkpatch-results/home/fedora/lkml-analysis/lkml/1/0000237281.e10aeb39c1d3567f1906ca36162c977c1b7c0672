WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#77: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#82: FILE: checkpoint/rstr_mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#102: FILE: checkpoint/rstr_mem.c:21:
+#include <asm/cacheflush.h>

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#126: FILE: checkpoint/rstr_mem.c:45:
+		if (!(pgarr = cr_pgarr_prep(ctx)))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#128: FILE: checkpoint/rstr_mem.c:47:
+		nr = min(npages, (int) pgarr->nleft);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(int, npages, pgarr->nleft)
#128: FILE: checkpoint/rstr_mem.c:47:
+		nr = min(npages, (int) pgarr->nleft);

CHECK:SPACING: No space is necessary after a cast
#155: FILE: checkpoint/rstr_mem.c:74:
+			ret = cr_uread(ctx, (void *) *(addrs++), PAGE_SIZE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#165: FILE: checkpoint/rstr_mem.c:84:
+ * this is useful when restoring the memory of a read-only vma */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#284: FILE: checkpoint/rstr_mem.c:203:
+	cr_debug("vma %#lx-%#lx npages %d\n", (unsigned long) hh->vm_start,

CHECK:SPACING: No space is necessary after a cast
#285: FILE: checkpoint/rstr_mem.c:204:
+		 (unsigned long) hh->vm_end, (int) hh->npages);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#305: FILE: checkpoint/rstr_mem.c:224:
+	switch (hh->how) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#310: FILE: checkpoint/rstr_mem.c:229:
+		/* vm_pgoff for anonymous mapping is the "global" page
+		   offset (namely from addr 0x0), so we force a zero */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: checkpoint/rstr_mem.c:229:
+		   offset (namely from addr 0x0), so we force a zero */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#328: FILE: checkpoint/rstr_mem.c:247:
+
+	}

CHECK:SPACING: No space is necessary after a cast
#330: FILE: checkpoint/rstr_mem.c:249:
+	addr = do_mmap_pgoff(file, (unsigned long) hh->vm_start,

CHECK:SPACING: No space is necessary after a cast
#339: FILE: checkpoint/rstr_mem.c:258:
+	if (IS_ERR((void*) addr))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#339: FILE: checkpoint/rstr_mem.c:258:
+	if (IS_ERR((void*) addr))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#340: FILE: checkpoint/rstr_mem.c:259:
+		return (PTR_ERR((void *) addr));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#376: FILE: checkpoint/rstr_mem.c:295:
+		ret = do_munmap(mm, vma->vm_start, vma->vm_end-vma->vm_start);
 		                                              ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#392: FILE: checkpoint/rstr_mem.c:311:
+#if 0	/* activate when containers are used */

WARNING:TYPO_SPELLING: 'inclue' may be misspelled - perhaps 'include'?
#466: FILE: checkpoint/rstr_x86.c:199:
+	 * user_desc' with reverse logic of inclue/asm/desc.h:fill_ldt() */
 	                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#466: FILE: checkpoint/rstr_x86.c:199:
+	 * user_desc' with reverse logic of inclue/asm/desc.h:fill_ldt() */

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#485: FILE: checkpoint/rstr_x86.c:218:
+		info.useable = desc.avl;
 		     ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 10 checks, 430 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000237281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
