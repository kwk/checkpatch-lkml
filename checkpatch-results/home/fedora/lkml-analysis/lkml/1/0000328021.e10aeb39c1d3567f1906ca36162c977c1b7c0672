WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-linus

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#257: FILE: drivers/ata/pata_bf54x.c:1150:
+	if (ATAPI_GET_STATUS(base) & (MULTI_XFER_ON|ULTRA_XFER_ON))
 	                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: drivers/ata/pata_bf54x.c:1152:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT|
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#261: FILE: drivers/ata/pata_bf54x.c:1152:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT|
 	                                                ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#261: FILE: drivers/ata/pata_bf54x.c:1152:
+	if (int_status & (MULTI_DONE_INT|UDMAIN_DONE_INT|UDMAOUT_DONE_INT|
 	                                                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#268: FILE: drivers/ata/pata_bf54x.c:1155:
+	if (int_status & (MULTI_TERM_INT|UDMAIN_TERM_INT|UDMAOUT_TERM_INT))
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#268: FILE: drivers/ata/pata_bf54x.c:1155:
+	if (int_status & (MULTI_TERM_INT|UDMAIN_TERM_INT|UDMAOUT_TERM_INT))
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#269: FILE: drivers/ata/pata_bf54x.c:1156:
+		host_stat |= ATA_DMA_ERR|ATA_DMA_INTR;
 		                        ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: drivers/ata/pata_sl82c105.c:225:
+^I/* First apply the usual rules */^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#371: FILE: drivers/ata/pata_sl82c105.c:231:
+	/* Now apply serialization rules. Only allow a command if the
+	   other channel state machine is idle */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#371: FILE: drivers/ata/pata_sl82c105.c:231:
+	   other channel state machine is idle */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: drivers/ata/sata_mv.c:32:
+  2) Improve/fix IRQ and error handling sequences.$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#406: FILE: drivers/ata/sata_mv.c:32:
+  2) Improve/fix IRQ and error handling sequences.
             ^

CHECK:CAMELCASE: Avoid CamelCase: <Improve>
#406: FILE: drivers/ata/sata_mv.c:32:
+  2) Improve/fix IRQ and error handling sequences.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: drivers/ata/sata_mv.c:34:
+  3) ATAPI support (Marvell claims the 60xx/70xx chips can do it).$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#408: FILE: drivers/ata/sata_mv.c:34:
+  3) ATAPI support (Marvell claims the 60xx/70xx chips can do it).

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#408: FILE: drivers/ata/sata_mv.c:34:
+  3) ATAPI support (Marvell claims the 60xx/70xx chips can do it).
                                            ^

CHECK:CAMELCASE: Avoid CamelCase: <Marvell>
#408: FILE: drivers/ata/sata_mv.c:34:
+  3) ATAPI support (Marvell claims the 60xx/70xx chips can do it).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: drivers/ata/sata_mv.c:36:
+  4) Think about TCQ support here, and for libata in general$

CHECK:CAMELCASE: Avoid CamelCase: <Think>
#410: FILE: drivers/ata/sata_mv.c:36:
+  4) Think about TCQ support here, and for libata in general

WARNING:TYPO_SPELLING: 'suppport' may be misspelled - perhaps 'support'?
#411: FILE: drivers/ata/sata_mv.c:37:
+  with controllers that suppport it via host-queuing hardware
                         ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: drivers/ata/sata_mv.c:37:
+  with controllers that suppport it via host-queuing hardware$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#411: FILE: drivers/ata/sata_mv.c:37:
+  with controllers that suppport it via host-queuing hardware
                                             ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: drivers/ata/sata_mv.c:38:
+  (a software-only implementation could be a nightmare).$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#412: FILE: drivers/ata/sata_mv.c:38:
+  (a software-only implementation could be a nightmare).
              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#774: FILE: drivers/ata/sata_mv.c:824:
+		int using_ncq = ((pp->pp_flags & MV_PP_FLAG_NCQ_EN) != 0);
+		if (want_ncq != using_ncq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#780: FILE: drivers/ata/sata_mv.c:830:
+		void __iomem *hc_mmio = mv_hc_base_from_port(

CHECK:BRACES: braces {} should be used on all arms of this statement
#864: FILE: drivers/ata/sata_mv.c:1064:
+	if (want_ncq) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#867: FILE: drivers/ata/sata_mv.c:1067:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: drivers/ata/sata_mv.c:1147:
+			pp->sg_tbl[tag] = dma_pool_alloc(hpriv->sg_tbl_pool,
+					      GFP_KERNEL, &pp->sg_tbl_dma[tag]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_DMA'
#1017: FILE: drivers/ata/sata_mv.c:1261:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_NCQ'
#1017: FILE: drivers/ata/sata_mv.c:1261:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_DMA'
#1059: FILE: drivers/ata/sata_mv.c:1351:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_NCQ'
#1059: FILE: drivers/ata/sata_mv.c:1351:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_DMA'
#1091: FILE: drivers/ata/sata_mv.c:1418:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'qc->tf.protocol != ATA_PROT_NCQ'
#1091: FILE: drivers/ata/sata_mv.c:1418:
+	if ((qc->tf.protocol != ATA_PROT_DMA) &&
+	    (qc->tf.protocol != ATA_PROT_NCQ)) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1174: FILE: drivers/ata/sata_mv.c:1778:
+	if (!(irq_stat & irq_mask) || (0xffffffffU == irq_stat))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1286: FILE: drivers/ata/sata_mv.c:2734:
+
+

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1297: FILE: drivers/ata/sata_mv.c:2745:
+				dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1305: FILE: drivers/ata/sata_mv.c:2753:
+			dev_printk(KERN_ERR, &pdev->dev,

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#1311: FILE: drivers/ata/sata_mv.c:2759:
+			dev_printk(KERN_ERR, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: drivers/ata/sata_mv.c:2813:
+	hpriv->crqb_pool   = dmam_pool_create("crqb_q", dev, MV_CRQB_Q_SZ,
+							     MV_CRQB_Q_SZ, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: drivers/ata/sata_mv.c:2818:
+	hpriv->crpb_pool   = dmam_pool_create("crpb_q", dev, MV_CRPB_Q_SZ,
+							     MV_CRPB_Q_SZ, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: drivers/ata/sata_mv.c:2823:
+	hpriv->sg_tbl_pool = dmam_pool_create("sg_tbl", dev, MV_SG_TBL_SZ,
+							     MV_SG_TBL_SZ, 0);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'ap->link.sactive'
#1422: FILE: drivers/ata/sata_nv.c:1026:
+						check_commands = ap->
+							link.sactive;

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 16 warnings, 28 checks, 1240 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000328021.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
