WARNING:TYPO_SPELLING: 'asynchrounous' may be misspelled - perhaps 'asynchronous'?
#33: 
asynchrounous dma engines.  The api handles inter-transaction dependencies
^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'asynchrounous' may be misspelled - perhaps 'asynchronous'?
#41: 
When CONFIG_DMA_ENGINE is not set the asynchrounous path is compiled away.
                                      ^^^^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: drivers/dma/Kconfig:25:
+config ASYNC_TX_DMA
+	tristate "Asynchronous Bulk Memory Transfers/Transforms API"
+	default y
+	---help---
+	  This enables the async_tx management layer for dma engines.
+	  Subsystems coded to this API will use offload engines for bulk
+	  memory operations where present.  Software implementations are
+	  called when a dma engine is not present or fails to allocate
+	  memory to carry out the transaction.
+	  Current subsystems ported to async_tx: MD_RAID4,5
+
 comment "DMA Devices"
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#126: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: drivers/dma/async_tx.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#145: FILE: drivers/dma/async_tx.c:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#158: FILE: drivers/dma/async_tx.c:28:
+#define PRINTK(x...) ((void)(ASYNC_TX_DEBUG && printk(x)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#194: FILE: drivers/dma/async_tx.c:64:
+	struct dma_chan_ref *ref;
+	ref = container_of(rcu, struct dma_chan_ref, rcu);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/dma/async_tx.c:79:
+dma_channel_add_remove(struct dma_client *client,
+	struct dma_chan *chan, enum dma_event event)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: drivers/dma/async_tx.c:88:
+		PRINTK("async_tx: dma resource added (capabilities: %#lx)\n",
+			chan->device->capabilities);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/dma/async_tx.c:97:
+			list_add_tail_rcu(&master_ref->async_node,
+				&async_tx_master_list.list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#229: FILE: drivers/dma/async_tx.c:99:
+			spin_unlock_irqrestore(&async_tx_master_list.lock,
+				flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#231: FILE: drivers/dma/async_tx.c:101:
+			printk(KERN_WARNING "async_tx: unable to create"

WARNING:SPLIT_STRING: quoted string split across lines
#232: FILE: drivers/dma/async_tx.c:102:
+			printk(KERN_WARNING "async_tx: unable to create"
+				" new master entry in response to"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#233: FILE: drivers/dma/async_tx.c:103:
+				" new master entry in response to"
+				" a DMA_RESOURCE_ADDED event"

WARNING:SPLIT_STRING: quoted string split across lines
#234: FILE: drivers/dma/async_tx.c:104:
+				" a DMA_RESOURCE_ADDED event"
+				" (-ENOMEM)\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: drivers/dma/async_tx.c:121:
+				list_add_tail_rcu(&ref->async_node,
+					&channel_entry->list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/dma/async_tx.c:123:
+				spin_unlock_irqrestore(&channel_entry->lock,
+					flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#255: FILE: drivers/dma/async_tx.c:125:
+				printk(KERN_WARNING "async_tx: unable to create"

WARNING:SPLIT_STRING: quoted string split across lines
#256: FILE: drivers/dma/async_tx.c:126:
+				printk(KERN_WARNING "async_tx: unable to create"
+					" new op-specific entry in response to"

WARNING:SPLIT_STRING: quoted string split across lines
#257: FILE: drivers/dma/async_tx.c:127:
+					" new op-specific entry in response to"
+					" a DMA_RESOURCE_ADDED event"

WARNING:SPLIT_STRING: quoted string split across lines
#258: FILE: drivers/dma/async_tx.c:128:
+					" a DMA_RESOURCE_ADDED event"
+					" (-ENOMEM)\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: drivers/dma/async_tx.c:135:
+		PRINTK("async_tx: dma resource removed (capabilities: %#lx)\n",
+			chan->device->capabilities);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: drivers/dma/async_tx.c:144:
+			list_for_each_entry_rcu(ref, &channel_entry->list,
+				async_node) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#287: FILE: drivers/dma/async_tx.c:157:
+		printk(KERN_WARNING "async_tx: does not support dma channel"

WARNING:SPLIT_STRING: quoted string split across lines
#288: FILE: drivers/dma/async_tx.c:158:
+		printk(KERN_WARNING "async_tx: does not support dma channel"
+			" suspend/resume\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#291: FILE: drivers/dma/async_tx.c:161:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#330: FILE: drivers/dma/async_tx.c:200:
+	printk("async_tx: api initialized (async)\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#334: FILE: drivers/dma/async_tx.c:204:
+	printk("async_tx: initialization failure\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: drivers/dma/async_tx.c:253:
+async_tx_find_channel(struct dma_async_tx_descriptor *depend_tx,
+	enum dma_transaction_type tx_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: drivers/dma/async_tx.c:257:
+	if (depend_tx &&
+		test_bit(tx_type, &depend_tx->chan->device->capabilities))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#389: FILE: drivers/dma/async_tx.c:259:
+		return depend_tx->chan;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#389: FILE: drivers/dma/async_tx.c:259:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#426: FILE: drivers/dma/async_tx.c:296:
+		if (iter == &channel_entry->list)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#428: FILE: drivers/dma/async_tx.c:298:
+		else {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: drivers/dma/async_tx.c:310:
+	printk("async_tx: api initialized (sync-only)\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: drivers/dma/async_tx.c:321:
+async_tx_find_channel(struct dma_async_tx_descriptor *depend_tx,
+	enum dma_transaction_type tx_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: drivers/dma/async_tx.c:329:
+async_tx_submit(struct dma_chan *chan, struct dma_async_tx_descriptor *tx,
+	enum async_tx_flags flags, struct dma_async_tx_descriptor *depend_tx,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#473: FILE: drivers/dma/async_tx.c:343:
+		BUG_ON(depend_tx->ack);

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: drivers/dma/async_tx.c:351:
+			struct dma_device *dep_dev = dep_chan->device;
+			dep_dev->device_dependency_added(dep_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#505: FILE: drivers/dma/async_tx.c:375:
+sync_epilog(unsigned long flags, struct dma_async_tx_descriptor *depend_tx,
+	dma_async_tx_callback callback, void *callback_param)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#516: FILE: drivers/dma/async_tx.c:386:
+do_async_xor(struct dma_async_tx_descriptor *tx, struct dma_device *device,
+	struct dma_chan *chan, struct page *dest, struct page **src_list,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#525: FILE: drivers/dma/async_tx.c:395:
+	PRINTK("%s: len: %u\n", __FUNCTION__, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#531: FILE: drivers/dma/async_tx.c:401:
+     ^Idevice->device_set_dest(dma_addr, tx, 0);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#531: FILE: drivers/dma/async_tx.c:401:
+     ^Idevice->device_set_dest(dma_addr, tx, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/dma/async_tx.c:401:
+     ^Idevice->device_set_dest(dma_addr, tx, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#539: FILE: drivers/dma/async_tx.c:409:
+^I     ^Idevice->device_set_src(dma_addr, tx, i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#539: FILE: drivers/dma/async_tx.c:409:
+^I     ^Idevice->device_set_src(dma_addr, tx, i);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: drivers/dma/async_tx.c:413:
+	async_tx_submit(chan, tx, flags, depend_tx, callback,
+		callback_param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: drivers/dma/async_tx.c:418:
+do_sync_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	unsigned int src_cnt, size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#555: FILE: drivers/dma/async_tx.c:425:
+	PRINTK("%s: len: %u\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#569: FILE: drivers/dma/async_tx.c:439:
+	xor_block(src_cnt, len, _dest,
+		(void **) src_list);

CHECK:SPACING: No space is necessary after a cast
#569: FILE: drivers/dma/async_tx.c:439:
+		(void **) src_list);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'explicity' may be misspelled - perhaps 'explicitly'?
#579: FILE: drivers/dma/async_tx.c:449:
+ *	buffer as a source when it is explicity specified in the source list.
   	                              ^^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: drivers/dma/async_tx.c:457:
+ ^IASYNC_TX_ASSUME_COHERENT, ASYNC_TX_ACK, ASYNC_TX_DEP_ACK$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: drivers/dma/async_tx.c:457:
+ ^IASYNC_TX_ASSUME_COHERENT, ASYNC_TX_ACK, ASYNC_TX_DEP_ACK$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: drivers/dma/async_tx.c:464:
+async_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	unsigned int src_cnt, size_t len, enum async_tx_flags flags,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: drivers/dma/async_tx.c:477:
+	BUG_ON(src_cnt <= 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#627: FILE: drivers/dma/async_tx.c:497:
+			tx = device->device_prep_dma_xor(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: drivers/dma/async_tx.c:502:
+				do_async_xor(tx, device, chan, dest,
+				&src_list[src_off], offset, xor_src_cnt, len,

CHECK:BRACES: Unbalanced braces around else statement
#635: FILE: drivers/dma/async_tx.c:505:
+			} else /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#635: FILE: drivers/dma/async_tx.c:505:
+			} else /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:SPACING: No space is necessary after a cast
#648: FILE: drivers/dma/async_tx.c:518:
+			xor_src_cnt = min(src_cnt, (unsigned int) MAX_XOR_BLOCKS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: drivers/dma/async_tx.c:537:
+				BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/dma/async_tx.c:540:
+					panic("%s: DMA_ERROR waiting for depend_tx\n",
+						__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#670: FILE: drivers/dma/async_tx.c:540:
+						__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: drivers/dma/async_tx.c:544:
+			do_sync_xor(dest, &src_list[src_off], offset,
+				xor_src_cnt, len, local_flags, depend_tx,

CHECK:BRACES: braces {} should be used on all arms of this statement
#686: FILE: drivers/dma/async_tx.c:556:
+		if (src_cnt > xor_src_cnt) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#700: FILE: drivers/dma/async_tx.c:570:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#711: FILE: drivers/dma/async_tx.c:581:
+	char *a = page_address(p);
+	return ((*(u32*)a) == 0 &&

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#711: FILE: drivers/dma/async_tx.c:581:
+	return ((*(u32*)a) == 0 &&

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#712: FILE: drivers/dma/async_tx.c:582:
+		memcmp(a, a+4, len-4)==0);
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#712: FILE: drivers/dma/async_tx.c:582:
+		memcmp(a, a+4, len-4)==0);
 		                  ^

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#712: FILE: drivers/dma/async_tx.c:582:
+		memcmp(a, a+4, len-4)==0);
 		                     ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#719: FILE: drivers/dma/async_tx.c:589:
+ * ^Iat index zero.  The contents of this array may be overwritten.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: drivers/dma/async_tx.c:601:
+async_xor_zero_sum(struct page *dest, struct page **src_list,
+	unsigned int offset, unsigned int src_cnt, size_t len,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#748: FILE: drivers/dma/async_tx.c:618:
+		PRINTK("%s: (async) len: %u\n", __FUNCTION__, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#756: FILE: drivers/dma/async_tx.c:626:
+^I^I     ^Idevice->device_set_src(dma_addr, tx, i);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#756: FILE: drivers/dma/async_tx.c:626:
+^I^I     ^Idevice->device_set_src(dma_addr, tx, i);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#760: FILE: drivers/dma/async_tx.c:630:
+		async_tx_submit(chan, tx, flags, depend_tx, callback,
+			callback_param);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#764: FILE: drivers/dma/async_tx.c:634:
+		PRINTK("%s: (sync) len: %u\n", __FUNCTION__, len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#770: FILE: drivers/dma/async_tx.c:640:
+		tx = async_xor(dest, src_list, offset, src_cnt, len, xor_flags,
+			depend_tx, NULL, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: drivers/dma/async_tx.c:645:
+				panic("%s: DMA_ERROR waiting for tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#775: FILE: drivers/dma/async_tx.c:645:
+					__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/dma/async_tx.c:673:
+async_memcpy(struct page *dest, struct page *src, unsigned int dest_offset,
+	unsigned int src_offset, size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#818: FILE: drivers/dma/async_tx.c:688:
+		PRINTK("%s: (async) len: %u\n", __FUNCTION__, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#824: FILE: drivers/dma/async_tx.c:694:
+^I     ^Idevice->device_set_dest(dma_addr, tx, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#824: FILE: drivers/dma/async_tx.c:694:
+^I     ^Idevice->device_set_dest(dma_addr, tx, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#830: FILE: drivers/dma/async_tx.c:700:
+^I     ^Idevice->device_set_src(dma_addr, tx, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#830: FILE: drivers/dma/async_tx.c:700:
+^I     ^Idevice->device_set_src(dma_addr, tx, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#833: FILE: drivers/dma/async_tx.c:703:
+		async_tx_submit(chan, tx, flags, depend_tx, callback,
+			callback_param);

WARNING:LINE_SPACING: Missing a blank line after declarations
#836: FILE: drivers/dma/async_tx.c:706:
+		void *dest_buf, *src_buf;
+		PRINTK("%s: (sync) len: %u\n", __FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#836: FILE: drivers/dma/async_tx.c:706:
+		PRINTK("%s: (sync) len: %u\n", __FUNCTION__, len);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#843: FILE: drivers/dma/async_tx.c:713:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#846: FILE: drivers/dma/async_tx.c:716:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#846: FILE: drivers/dma/async_tx.c:716:
+					__FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#886: FILE: drivers/dma/async_tx.c:756:
+async_memset(struct page *dest, int val, unsigned int offset,
+	size_t len, enum async_tx_flags flags,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#901: FILE: drivers/dma/async_tx.c:771:
+		PRINTK("%s: (async) len: %u\n", __FUNCTION__, len);

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: drivers/dma/async_tx.c:776:
+^I     ^Idevice->device_set_dest(dma_addr, tx, 0);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: drivers/dma/async_tx.c:776:
+^I     ^Idevice->device_set_dest(dma_addr, tx, 0);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: drivers/dma/async_tx.c:779:
+		async_tx_submit(chan, tx, flags, depend_tx, callback,
+			callback_param);

WARNING:LINE_SPACING: Missing a blank line after declarations
#912: FILE: drivers/dma/async_tx.c:782:
+		void *dest_buf;
+		PRINTK("%s: (sync) len: %u\n", __FUNCTION__, len);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#912: FILE: drivers/dma/async_tx.c:782:
+		PRINTK("%s: (sync) len: %u\n", __FUNCTION__, len);

CHECK:SPACING: No space is necessary after a cast
#914: FILE: drivers/dma/async_tx.c:784:
+		dest_buf = (void *) (((char *) page_address(dest)) + offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#921: FILE: drivers/dma/async_tx.c:791:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: drivers/dma/async_tx.c:794:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#924: FILE: drivers/dma/async_tx.c:794:
+					__FUNCTION__);

WARNING:TYPO_SPELLING: 'rouine' may be misspelled - perhaps 'routine'?
#937: FILE: drivers/dma/async_tx.c:807:
+ *	completion callbacks, or schedule new callback.  Note: this rouine
   	                                                            ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#946: FILE: drivers/dma/async_tx.c:816:
+async_interrupt(enum async_tx_flags flags,
+	struct dma_async_tx_descriptor *depend_tx,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#955: FILE: drivers/dma/async_tx.c:825:
+		PRINTK("%s: (async)\n", __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: drivers/dma/async_tx.c:828:
+		async_tx_submit(chan, tx, flags, depend_tx, callback,
+			callback_param);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#960: FILE: drivers/dma/async_tx.c:830:
+		PRINTK("%s: (sync)\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#967: FILE: drivers/dma/async_tx.c:837:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#970: FILE: drivers/dma/async_tx.c:840:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#970: FILE: drivers/dma/async_tx.c:840:
+					__FUNCTION__);

WARNING:TYPO_SPELLING: 'rouine' may be misspelled - perhaps 'routine'?
#981: FILE: drivers/dma/async_tx.c:851:
+ *	if next_op must be run on a different channel.  Note: this rouine
   	                                                           ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#989: FILE: drivers/dma/async_tx.c:859:
+async_interrupt_cond(enum dma_transaction_type next_op,
+	enum async_tx_flags flags, struct dma_async_tx_descriptor *depend_tx)

CHECK:BRACES: braces {} should be used on all arms of this statement
#998: FILE: drivers/dma/async_tx.c:868:
+	if (!chan_switch)
[...]
+	else if (tx) {
[...]
+	} else {
[...]

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1001: FILE: drivers/dma/async_tx.c:871:
+		PRINTK("%s: (async)\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1005: FILE: drivers/dma/async_tx.c:875:
+		PRINTK("%s: (sync)\n", __FUNCTION__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1012: FILE: drivers/dma/async_tx.c:882:
+			BUG_ON(depend_tx->ack);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/dma/async_tx.c:885:
+				panic("%s: DMA_ERROR waiting for depend_tx\n",
+					__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1015: FILE: drivers/dma/async_tx.c:885:
+					__FUNCTION__);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1031: FILE: drivers/dma/async_tx.c:901:
+EXPORT_SYMBOL_GPL(async_interrupt);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1032: FILE: drivers/dma/async_tx.c:902:
+EXPORT_SYMBOL_GPL(async_interrupt_cond);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1033: FILE: drivers/dma/async_tx.c:903:
+EXPORT_SYMBOL_GPL(async_memcpy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1034: FILE: drivers/dma/async_tx.c:904:
+EXPORT_SYMBOL_GPL(async_memset);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1035: FILE: drivers/dma/async_tx.c:905:
+EXPORT_SYMBOL_GPL(async_xor);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1036: FILE: drivers/dma/async_tx.c:906:
+EXPORT_SYMBOL_GPL(async_xor_zero_sum);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1037: FILE: drivers/dma/async_tx.c:907:
+EXPORT_SYMBOL_GPL(async_tx_issue_pending_all);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1038: FILE: drivers/dma/async_tx.c:908:
+EXPORT_SYMBOL_GPL(async_tx_ack);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1039: FILE: drivers/dma/async_tx.c:909:
+EXPORT_SYMBOL_GPL(dma_wait_for_async_tx);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1040: FILE: drivers/dma/async_tx.c:910:
+EXPORT_SYMBOL_GPL(async_tx_run_dependencies);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1047: FILE: drivers/dma/xor.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1061: FILE: drivers/dma/xor.c:15:
+ * (for example /usr/src/linux/COPYING); if not, write to the Free$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1062: FILE: drivers/dma/xor.c:16:
+ * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:SPACING: No space is necessary after a cast
#1079: FILE: drivers/dma/xor.c:33:
+	p1 = (unsigned long *) srcs[0];

CHECK:SPACING: No space is necessary after a cast
#1085: FILE: drivers/dma/xor.c:39:
+	p2 = (unsigned long *) srcs[1];

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: drivers/dma/xor.c:45:
+	p3 = (unsigned long *) srcs[2];

CHECK:SPACING: No space is necessary after a cast
#1097: FILE: drivers/dma/xor.c:51:
+	p4 = (unsigned long *) srcs[3];

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#1125: FILE: drivers/dma/xor.c:79:
+		while (jiffies == now) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1126: FILE: drivers/dma/xor.c:80:
+			mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1128: FILE: drivers/dma/xor.c:82:
+			mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1130: FILE: drivers/dma/xor.c:84:
+			mb();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1139: FILE: drivers/dma/xor.c:93:
+	printk("   %-10s: %5d.%03d MB/sec\n", tmpl->name,

CHECK:SPACING: No space is necessary after a cast
#1149: FILE: drivers/dma/xor.c:103:
+	b1 = (void *) __get_free_pages(GFP_KERNEL, 2);

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#1150: FILE: drivers/dma/xor.c:104:
+	if (! b1) {
 	    ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1151: FILE: drivers/dma/xor.c:105:
+		printk("xor: Yikes!  No memory available.\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1154: FILE: drivers/dma/xor.c:108:
+	b2 = b1 + 2*PAGE_SIZE + BENCH_SIZE;
 	           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1170: FILE: drivers/dma/xor.c:124:
+		printk(KERN_INFO "xor: automatically using best checksumming function: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1171: FILE: drivers/dma/xor.c:125:
+		printk(KERN_INFO "xor: automatically using best checksumming function: %s\n",
+			fastest->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1174: FILE: drivers/dma/xor.c:128:
+		printk(KERN_INFO "xor: measuring software checksumming speed\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1182: FILE: drivers/dma/xor.c:136:
+	printk("xor: using function: %s (%d.%03d MB/sec)\n",

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1195: FILE: drivers/dma/xor.c:149:
+EXPORT_SYMBOL(xor_block);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1250: FILE: drivers/md/raid5.c:918:
+^I^I     ^I   if (count == MAX_XOR_BLOCKS) {^I^I       \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1250: FILE: drivers/md/raid5.c:918:
+^I^I     ^I   if (count == MAX_XOR_BLOCKS) {^I^I       \$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1354: FILE: drivers/md/raid5.c:1146:
+		if (!nozero) memset(dest, 0, STRIPE_SIZE);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1536: FILE: include/linux/async_tx.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1550: FILE: include/linux/async_tx.h:15:
+ * this program; if not, write to the Free Software Foundation, Inc., 59$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1573: FILE: include/linux/async_tx.h:38:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: include/linux/async_tx.h:105:
+async_tx_run_dependencies(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *host_chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1647: FILE: include/linux/async_tx.h:112:
+	list_for_each_entry_safe(dep_tx, _dep_tx, &tx->depend_list,
+		depend_node) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1651: FILE: include/linux/async_tx.h:116:
+		BUG_ON(chan == host_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1664: FILE: include/linux/async_tx.h:129:
+async_tx_run_dependencies(struct dma_async_tx_descriptor *tx,
+	struct dma_chan *host_chan)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1689: FILE: include/linux/async_tx.h:154:
+async_xor(struct page *dest, struct page **src_list, unsigned int offset,
+	unsigned int src_cnt, size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1694: FILE: include/linux/async_tx.h:159:
+async_xor_zero_sum(struct page *dest, struct page **src_list,
+	unsigned int offset, unsigned int src_cnt, size_t len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1700: FILE: include/linux/async_tx.h:165:
+async_memcpy(struct page *dest, struct page *src, unsigned int dest_offset,
+	unsigned int src_offset, size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1705: FILE: include/linux/async_tx.h:170:
+async_memset(struct page *dest, int val, unsigned int offset,
+	size_t len, enum async_tx_flags flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: include/linux/async_tx.h:175:
+async_interrupt(enum async_tx_flags flags,
+	struct dma_async_tx_descriptor *depend_tx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1714: FILE: include/linux/async_tx.h:179:
+async_interrupt_cond(enum dma_transaction_type next_op,
+	enum async_tx_flags flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1728: FILE: include/linux/raid/xor.h:8:
+extern void xor_block(unsigned int count, unsigned int bytes,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1729: FILE: include/linux/raid/xor.h:9:
+extern void xor_block(unsigned int count, unsigned int bytes,
+	void *dest, void **srcs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 88 warnings, 68 checks, 1445 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
