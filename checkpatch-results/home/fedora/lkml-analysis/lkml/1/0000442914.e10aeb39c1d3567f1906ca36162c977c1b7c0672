WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#48: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: include/linux/mlx4/cmd.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: include/linux/mlx4/cq.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#366: FILE: include/linux/mlx4/device.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#405: FILE: include/linux/mlx4/device.h:40:
+#include <asm/atomic.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#574: FILE: include/linux/mlx4/device.h:209:
+	void (*comp)		(struct mlx4_cq *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mlx4_cq *' should also have an identifier name
#574: FILE: include/linux/mlx4/device.h:209:
+	void (*comp)		(struct mlx4_cq *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#575: FILE: include/linux/mlx4/device.h:210:
+	void (*event)		(struct mlx4_cq *, enum mlx4_event);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mlx4_cq *' should also have an identifier name
#575: FILE: include/linux/mlx4/device.h:210:
+	void (*event)		(struct mlx4_cq *, enum mlx4_event);

WARNING:SPACING: Unnecessary space before function pointer arguments
#592: FILE: include/linux/mlx4/device.h:227:
+	void (*event)		(struct mlx4_qp *, enum mlx4_event);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mlx4_qp *' should also have an identifier name
#592: FILE: include/linux/mlx4/device.h:227:
+	void (*event)		(struct mlx4_qp *, enum mlx4_event);

WARNING:SPACING: Unnecessary space before function pointer arguments
#601: FILE: include/linux/mlx4/device.h:236:
+	void (*event)		(struct mlx4_srq *, enum mlx4_event);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mlx4_srq *' should also have an identifier name
#601: FILE: include/linux/mlx4/device.h:236:
+	void (*event)		(struct mlx4_srq *, enum mlx4_event);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#695: FILE: include/linux/mlx4/doorbell.h:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#751: FILE: include/linux/mlx4/doorbell.h:57:
+	__raw_writeq((__force u64) val, dest);

CHECK:SPACING: No space is necessary after a cast
#757: FILE: include/linux/mlx4/doorbell.h:63:
+	__raw_writeq(*(u64 *) val, dest);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#768: FILE: include/linux/mlx4/doorbell.h:74:
+#define MLX4_DECLARE_DOORBELL_LOCK(name) spinlock_t name;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:SPACING: No space is necessary after a cast
#774: FILE: include/linux/mlx4/doorbell.h:80:
+	__raw_writel(((__force u32 *) &val)[0], dest);

CHECK:SPACING: No space is necessary after a cast
#775: FILE: include/linux/mlx4/doorbell.h:81:
+	__raw_writel(((__force u32 *) &val)[1], dest + 4);

CHECK:SPACING: No space is necessary after a cast
#784: FILE: include/linux/mlx4/doorbell.h:90:
+	__raw_writel((__force u32) val[0], dest);

CHECK:SPACING: No space is necessary after a cast
#785: FILE: include/linux/mlx4/doorbell.h:91:
+	__raw_writel((__force u32) val[1], dest + 4);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#798: FILE: include/linux/mlx4/driver.h:1:
+/*

WARNING:SPACING: Unnecessary space before function pointer arguments
#845: FILE: include/linux/mlx4/driver.h:48:
+	void *			(*add)	 (struct mlx4_dev *dev);

WARNING:SPACING: Unnecessary space before function pointer arguments
#847: FILE: include/linux/mlx4/driver.h:50:
+	void			(*event) (struct mlx4_dev *dev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#863: FILE: include/linux/mlx4/qp.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1157: FILE: include/linux/mlx4/srq.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442914.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 6 checks, 1110 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442914.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
