WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
Trace preempt/softirqs off/irqsoff latency in rwlock. Can be used to perform

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#68: FILE: include/linux/psrwlock-latency-trace.h:1:
+#ifndef _LINUX_PSRWLOCK_LATENCY_TRACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: include/linux/psrwlock-latency-trace.h:15:
+extern void psrwlock_profile_latency_reset(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: include/linux/psrwlock-latency-trace.h:16:
+extern void psrwlock_profile_latency_print(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: include/linux/psrwlock-latency-trace.h:18:
+extern void psrwlock_profile_irq_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: include/linux/psrwlock-latency-trace.h:19:
+extern void psrwlock_profile_irq_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#87: FILE: include/linux/psrwlock-latency-trace.h:20:
+extern void psrwlock_profile_bh_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: include/linux/psrwlock-latency-trace.h:21:
+extern void psrwlock_profile_bh_enable(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#90: FILE: include/linux/psrwlock-latency-trace.h:23:
+#define psrwlock_irq_save(flags)				\
+do {								\
+	local_irq_save(flags);					\
+	if (!irqs_disabled_flags(flags))			\
+		psrwlock_profile_irq_disable();		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#97: FILE: include/linux/psrwlock-latency-trace.h:30:
+#define psrwlock_irq_restore(flags)				\
+do {								\
+	if (irqs_disabled() && !irqs_disabled_flags(flags))	\
+		psrwlock_profile_irq_enable();		\
+	local_irq_restore(flags);				\
+} while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: include/linux/psrwlock-latency-trace.h:46:
+}
+static inline void psrwlock_irq_enable(void)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#119: FILE: include/linux/psrwlock-latency-trace.h:52:
+}
+static inline void psrwlock_bh_disable(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#125: FILE: include/linux/psrwlock-latency-trace.h:58:
+}
+static inline void psrwlock_bh_enable(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#131: FILE: include/linux/psrwlock-latency-trace.h:64:
+}
+static inline void psrwlock_bh_enable_ip(unsigned long ip)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/psrwlock-latency-trace.h:72:
+extern void psrwlock_profile_preempt_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/psrwlock-latency-trace.h:73:
+extern void psrwlock_profile_preempt_enable(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#148: FILE: include/linux/psrwlock-latency-trace.h:81:
+}
+static inline void psrwlock_preempt_enable(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#154: FILE: include/linux/psrwlock-latency-trace.h:87:
+}
+static inline void psrwlock_preempt_enable_no_resched(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: lib/psrwlock-latency-trace.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#229: FILE: lib/psrwlock-latency-trace.c:53:
+	printk(KERN_INFO "** get_cycles calibration **\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#250: FILE: lib/psrwlock-latency-trace.c:74:
+	printk(KERN_INFO "get_cycles takes [min,avg,max] %lu,%lu,%lu "

WARNING:SPLIT_STRING: quoted string split across lines
#251: FILE: lib/psrwlock-latency-trace.c:75:
+	printk(KERN_INFO "get_cycles takes [min,avg,max] %lu,%lu,%lu "
+		"cycles, results calibrated on avg\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#255: FILE: lib/psrwlock-latency-trace.c:79:
+	printk("\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: lib/psrwlock-latency-trace.c:105:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#285: FILE: lib/psrwlock-latency-trace.c:109:
+	printk(KERN_INFO "Writer-biased rwlock latency profiling reset\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: lib/psrwlock-latency-trace.c:112:
+	stop_machine(_psrwlock_profile_latency_reset,
+			NULL, &cpu_possible_map);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#321: FILE: lib/psrwlock-latency-trace.c:145:
+		printk(KERN_INFO "%s latency for cpu %d "

WARNING:SPLIT_STRING: quoted string split across lines
#322: FILE: lib/psrwlock-latency-trace.c:146:
+		printk(KERN_INFO "%s latency for cpu %d "
+			"disabled %lu times, "

WARNING:SPLIT_STRING: quoted string split across lines
#323: FILE: lib/psrwlock-latency-trace.c:147:
+			"disabled %lu times, "
+			"[min,avg,max] %llu,%llu,%llu cycles\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#328: FILE: lib/psrwlock-latency-trace.c:152:
+		printk(KERN_INFO "Max %s latency caused by :\n", typename);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#329: FILE: lib/psrwlock-latency-trace.c:153:
+		printk(KERN_INFO "disable : ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#331: FILE: lib/psrwlock-latency-trace.c:155:
+		printk(KERN_INFO "enable : ");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#339: FILE: lib/psrwlock-latency-trace.c:163:
+	printk(KERN_INFO "Writer-biased rwlock latency profiling results\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#340: FILE: lib/psrwlock-latency-trace.c:164:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#344: FILE: lib/psrwlock-latency-trace.c:168:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#460: FILE: lib/psrwlock-latency-trace.c:284:
+	printk(KERN_INFO "psrwlock latency profiling init\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 18 checks, 402 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
