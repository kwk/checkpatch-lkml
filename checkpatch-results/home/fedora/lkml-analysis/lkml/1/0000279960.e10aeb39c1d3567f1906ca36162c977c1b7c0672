WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: fs/aufs/debug.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/debug.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#59: FILE: fs/aufs/debug.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#65: FILE: fs/aufs/debug.h:22:
+ * $Id: debug.h,v 1.2 2008/04/21 02:00:37 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:CAMELCASE: Avoid CamelCase: <MtxMustLock>
#76: FILE: fs/aufs/debug.h:33:
+#define MtxMustLock(mtx)	AuDebugOn(!mutex_is_locked(mtx))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#76: FILE: fs/aufs/debug.h:33:
+#define MtxMustLock(mtx)	AuDebugOn(!mutex_is_locked(mtx))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#80: FILE: fs/aufs/debug.h:37:
+#define AuDebugOn(a)		BUG_ON(!!(a))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#101: FILE: fs/aufs/debug.h:58:
+#if defined(CONFIG_LKTR) || defined(CONFIG_LKTR_MODULE)

CHECK:CAMELCASE: Avoid CamelCase: <LktrCond>
#104: FILE: fs/aufs/debug.h:61:
+#undef LktrCond

CHECK:CAMELCASE: Avoid CamelCase: <LKTRDumpVma>
#109: FILE: fs/aufs/debug.h:66:
+#define LKTRDumpVma(pre, vma, suf)	do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <LKTRDumpStack>
#110: FILE: fs/aufs/debug.h:67:
+#define LKTRDumpStack()			do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#111: FILE: fs/aufs/debug.h:68:
+#define LKTRTrace(fmt, args...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#113: FILE: fs/aufs/debug.h:70:
+		AuDbg(fmt, ##args); \

CHECK:CAMELCASE: Avoid CamelCase: <LKTRLabel>
#115: FILE: fs/aufs/debug.h:72:
+#define LKTRLabel(label)		LKTRTrace("%s\n", #label)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#118: FILE: fs/aufs/debug.h:75:
+#define AuTraceErr(e) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#118: FILE: fs/aufs/debug.h:75:
+#define AuTraceErr(e) do { \
+	if (unlikely((e) < 0)) \
+		LKTRTrace("err %d\n", (int)(e)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#123: FILE: fs/aufs/debug.h:80:
+#define AuTraceErrPtr(p) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#123: FILE: fs/aufs/debug.h:80:
+#define AuTraceErrPtr(p) do { \
+	if (IS_ERR(p)) \
+		LKTRTrace("err %ld\n", PTR_ERR(p)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#128: FILE: fs/aufs/debug.h:85:
+#define AuTraceEnter()	LKTRLabel(enter)

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#131: FILE: fs/aufs/debug.h:88:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#131: FILE: fs/aufs/debug.h:88:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qstr' - possible side-effects?
#131: FILE: fs/aufs/debug.h:88:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#132: FILE: fs/aufs/debug.h:89:
+#define AuDLNPair(d)		AuLNPair(&(d)->d_name)

CHECK:CAMELCASE: Avoid CamelCase: <AuDpri>
#136: FILE: fs/aufs/debug.h:93:
+#define AuDpri(lvl, fmt, arg...) \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#137: FILE: fs/aufs/debug.h:94:
+	printk(lvl AUFS_NAME " %s:%d:%s[%d]: " fmt, \

CHECK:CAMELCASE: Avoid CamelCase: <AuInfo>
#140: FILE: fs/aufs/debug.h:97:
+#define AuInfo(fmt, arg...)	AuDpri(KERN_INFO, fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#141: FILE: fs/aufs/debug.h:98:
+#define AuWarn(fmt, arg...)	AuDpri(KERN_WARNING, fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#142: FILE: fs/aufs/debug.h:99:
+#define AuErr(fmt, arg...)	AuDpri(KERN_ERR, fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#143: FILE: fs/aufs/debug.h:100:
+#define AuIOErr(fmt, arg...)	AuErr("I/O Error, " fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErrWhck>
#144: FILE: fs/aufs/debug.h:101:
+#define AuIOErrWhck(fmt, arg...) AuErr("I/O Error, try whck. " fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn1>
#145: FILE: fs/aufs/debug.h:102:
+#define AuWarn1(fmt, arg...) do { \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#147: FILE: fs/aufs/debug.h:104:
+	if (!_c++) AuWarn(fmt, ##arg); \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <AuErr1>
#150: FILE: fs/aufs/debug.h:107:
+#define AuErr1(fmt, arg...) do { \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: fs/aufs/debug.h:109:
+	if (!_c++) AuErr(fmt, ##arg); \

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr1>
#155: FILE: fs/aufs/debug.h:112:
+#define AuIOErr1(fmt, arg...) do { \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: fs/aufs/debug.h:114:
+	if (!_c++) AuIOErr(fmt, ##arg); \

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupportMsg>
#160: FILE: fs/aufs/debug.h:117:
+#define AuUnsupportMsg	"This operation is not supported." \

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#162: FILE: fs/aufs/debug.h:119:
+#define AuUnsupport(fmt, args...) do { \

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: fs/aufs/debug.h:135:
+void au_dpri_file(struct file *filp);
                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgWhlist>
#183: FILE: fs/aufs/debug.h:140:
+#define AuDbgWhlist(w) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgVdir>
#188: FILE: fs/aufs/debug.h:145:
+#define AuDbgVdir(v) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgInode>
#193: FILE: fs/aufs/debug.h:150:
+#define AuDbgInode(i) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgDentry>
#198: FILE: fs/aufs/debug.h:155:
+#define AuDbgDentry(d) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgFile>
#203: FILE: fs/aufs/debug.h:160:
+#define AuDbgFile(f) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSb>
#208: FILE: fs/aufs/debug.h:165:
+#define AuDbgSb(sb) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSleep>
#213: FILE: fs/aufs/debug.h:170:
+#define AuDbgSleep(sec) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#213: FILE: fs/aufs/debug.h:170:
+#define AuDbgSleep(sec) do { \
+	AuDbg("sleep %d sec\n", sec); \
+	au_dbg_sleep(sec); \
+} while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#222: FILE: fs/aufs/debug.h:179:
+}
+static inline void au_debug_sbinfo_init(struct au_sbinfo *sbinfo)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#226: FILE: fs/aufs/debug.h:183:
+}
+#define AuDbgWhlist(w)		do {} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <DbgUdbaRace>
#235: FILE: fs/aufs/debug.h:192:
+#ifdef DbgUdbaRace

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSleep_UdbaRace>
#236: FILE: fs/aufs/debug.h:193:
+#define AuDbgSleep_UdbaRace()	AuDbgSleep(DbgUdbaRace)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#249: FILE: fs/aufs/debug.h:206:
+}
+#define au_sysrq_fin()		do {} while (0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 7 warnings, 40 checks, 210 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
