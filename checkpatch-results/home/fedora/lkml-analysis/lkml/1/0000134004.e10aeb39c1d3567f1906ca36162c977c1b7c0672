WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#42: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: arch/microblaze/mm/fault.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: arch/microblaze/mm/fault.c:2:
+ *  arch/microblaze/mm/fault.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#79: FILE: arch/microblaze/mm/fault.c:33:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#81: FILE: arch/microblaze/mm/fault.c:35:
+#include <asm/mmu_context.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#112: FILE: arch/microblaze/mm/fault.c:66:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'address >= TASK_SIZE'
#155: FILE: arch/microblaze/mm/fault.c:109:
+	if (kernel_mode(regs) && (address >= TASK_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#156: FILE: arch/microblaze/mm/fault.c:110:
+		printk(KERN_WARNING "kernel task_size exceed");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#171: FILE: arch/microblaze/mm/fault.c:125:
+	if (in_atomic() || mm == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#171: FILE: arch/microblaze/mm/fault.c:125:
+	if (in_atomic() || mm == NULL) {

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#174: FILE: arch/microblaze/mm/fault.c:128:
+			printk(KERN_EMERG

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#181: FILE: arch/microblaze/mm/fault.c:135:
+		/* in_atomic() in user mode is really bad,
+		   as is current->mm == NULL. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#181: FILE: arch/microblaze/mm/fault.c:135:
+		   as is current->mm == NULL. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#182: FILE: arch/microblaze/mm/fault.c:136:
+		printk(KERN_EMERG "Page fault in user mode with "

WARNING:SPLIT_STRING: quoted string split across lines
#183: FILE: arch/microblaze/mm/fault.c:137:
+		printk(KERN_EMERG "Page fault in user mode with "
+		       "in_atomic(), mm = %p\n", mm);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#184: FILE: arch/microblaze/mm/fault.c:138:
+		printk(KERN_EMERG "r15 = %lx  MSR = %lx\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#234: FILE: arch/microblaze/mm/fault.c:188:
+	if (address + 0x100000 < vma->vm_end) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: arch/microblaze/mm/fault.c:191:
+		struct pt_regs *uregs = current->thread.regs;
+		if (uregs == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!uregs"
#237: FILE: arch/microblaze/mm/fault.c:191:
+		if (uregs == NULL)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#252: FILE: arch/microblaze/mm/fault.c:206:
+		if (address + 2048 < uregs->r1
[...]
+				goto bad_area;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#253: FILE: arch/microblaze/mm/fault.c:207:
+		if (address + 2048 < uregs->r1
+			&& (kernel_mode(regs) || !store_updates_sp(regs)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: arch/microblaze/mm/fault.c:241:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#312: FILE: arch/microblaze/mm/fault.c:266:
+/*		info.si_signo = SIGSEGV;
+		info.si_errno = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#315: FILE: arch/microblaze/mm/fault.c:269:
+		force_sig_info(SIGSEGV, &info, current);*/

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#328: FILE: arch/microblaze/mm/fault.c:282:
+		yield();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#333: FILE: arch/microblaze/mm/fault.c:287:
+	printk(KERN_WARNING "VM: killing process %s\n", current->comm);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000134004.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 8 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000134004.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
