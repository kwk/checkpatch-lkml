WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: drivers/pci/iov.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#94: FILE: drivers/pci/iov.c:2:
+ * drivers/pci/iov.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: drivers/pci/iov.c:18:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#113: FILE: drivers/pci/iov.c:21:
+	ssize_t (*show)(struct kobject *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iov_attr *' should also have an identifier name
#113: FILE: drivers/pci/iov.c:21:
+	ssize_t (*show)(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#113: FILE: drivers/pci/iov.c:21:
+	ssize_t (*show)(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#115: FILE: drivers/pci/iov.c:23:
+	ssize_t (*store)(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct iov_attr *' should also have an identifier name
#115: FILE: drivers/pci/iov.c:23:
+	ssize_t (*store)(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#115: FILE: drivers/pci/iov.c:23:
+	ssize_t (*store)(struct kobject *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#115: FILE: drivers/pci/iov.c:23:
+	ssize_t (*store)(struct kobject *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/pci/iov.c:24:
+	ssize_t (*store)(struct kobject *,
+			struct iov_attr *, const char *, size_t);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'field' may be better as '(field)' to avoid precedence issues
#119: FILE: drivers/pci/iov.c:27:
+#define iov_config_attr(field)						\
+static ssize_t field##_show(struct kobject *kobj,			\
+		struct iov_attr *attr, char *buf)			\
+{									\
+	struct pci_iov *iov = container_of(kobj, struct pci_iov, kobj);	\
+									\
+	return sprintf(buf, "%d\n", iov->field);			\
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: drivers/pci/iov.c:51:
+static ssize_t iov_attr_show(struct kobject *kobj,
+		struct attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/pci/iov.c:59:
+static ssize_t iov_attr_store(struct kobject *kobj,
+		struct attribute *attr, const char *buf, size_t len)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#158: FILE: drivers/pci/iov.c:66:
+static struct sysfs_ops iov_attr_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:BRACES: braces {} should be used on all arms of this statement
#193: FILE: drivers/pci/iov.c:101:
+	if (dev->bus->number == busnr)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#194: FILE: drivers/pci/iov.c:102:
+		new->bus = bus = dev->bus;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#195: FILE: drivers/pci/iov.c:103:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#201: FILE: drivers/pci/iov.c:109:
+		BUG_ON(!new->bus);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: drivers/pci/iov.c:144:
+		BUG_ON(rc);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#359: FILE: drivers/pci/iov.c:267:
+	rc = strict_strtol(buf, 0, &enable);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#380: FILE: drivers/pci/iov.c:288:
+static ssize_t numvfs_store(struct kobject *kobj, struct iov_attr *attr,
+				const char *buf, size_t count)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#386: FILE: drivers/pci/iov.c:294:
+	rc = strict_strtol(buf, 0, &numvfs);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#397: FILE: drivers/pci/iov.c:305:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#401: FILE: drivers/pci/iov.c:309:
+	__ATTR(numvfs, S_IWUSR | S_IRUGO, numvfs_show, numvfs_store),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#402: FILE: drivers/pci/iov.c:310:
+	__ATTR(enable, S_IWUSR | S_IRUGO, is_enabled_show, is_enabled_store),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#406: FILE: drivers/pci/iov.c:314:
+static ssize_t vf_show(struct kobject *kobj, struct iov_attr *attr,
+				char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/pci/iov.c:326:
+static ssize_t vf_store(struct kobject *kobj, struct iov_attr *attr,
+				const char *buf, size_t count)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#424: FILE: drivers/pci/iov.c:332:
+	sscanf(buf, "%63s", ve->param[vfn]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#431: FILE: drivers/pci/iov.c:339:
+static ssize_t rid_show(struct kobject *kobj, struct iov_attr *attr,
+				char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: drivers/pci/iov.c:447:
+	if (!dev->is_pcie || (dev->pcie_type != PCI_EXP_TYPE_RC_END &&
+				dev->pcie_type != PCI_EXP_TYPE_ENDPOINT))

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#623: FILE: drivers/pci/iov.c:531:
+	iov->ve = kzalloc(sizeof(*iov->ve) * iov->totalvfs, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: drivers/pci/iov.c:541:
+	rc = kobject_init_and_add(&iov->kobj, &iov_ktype,
+					&dev->dev.kobj, "iov");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: drivers/pci/iov.c:554:
+		rc = kobject_init_and_add(&iov->ve[i].kobj, &iov_ktype,
+						&iov->kobj, iov->ve[i].name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#703: FILE: drivers/pci/iov.c:611:
+	BUG_ON(!dev->iov);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#714: FILE: drivers/pci/iov.c:622:
+	BUG_ON(!dev->iov);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#730: FILE: drivers/pci/iov.c:638:
+int pci_iov_register(struct pci_dev *dev, int (*notify)(struct pci_dev *, u32),
+			char **entries)

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#763: FILE: drivers/pci/iov.c:671:
+		attr = kzalloc(sizeof(*attr) * n, GFP_KERNEL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#771: FILE: drivers/pci/iov.c:679:
+			attr[j].attr.mode = S_IWUSR | S_IRUGO;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: drivers/pci/iov.c:686:
+					sysfs_remove_file(&iov->ve[i].kobj,
+								&attr[j].attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#793: FILE: drivers/pci/iov.c:701:
+			sysfs_remove_file(&iov->ve[k].kobj,
+					&iov->ve[k].attr[j].attr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#811: FILE: drivers/pci/iov.c:719:
+	BUG_ON(!iov || !iov->notify);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: drivers/pci/iov.c:727:
+			sysfs_remove_file(&iov->ve[i].kobj,
+					&iov->ve[i].attr[j].attr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#869: FILE: drivers/pci/iov.c:777:
+	BUG_ON(!iov || !iov->notify);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: drivers/pci/iov.c:830:
+int pci_iov_write_config(struct pci_dev *dev, int vfn,
+			char *entry, char *buf)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#1033: FILE: drivers/pci/pci.h:198:
+	int (*notify)(struct pci_dev *, u32);	/* event callback function */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1033: FILE: drivers/pci/pci.h:198:
+	int (*notify)(struct pci_dev *, u32);	/* event callback function */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1037: FILE: drivers/pci/pci.h:202:
+extern int pci_iov_init(struct pci_dev *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1038: FILE: drivers/pci/pci.h:203:
+extern void pci_iov_release(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1041: FILE: drivers/pci/pci.h:206:
+extern int pci_iov_resource_align(struct pci_dev *dev, int resno);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1042: FILE: drivers/pci/pci.h:207:
+extern int pci_iov_resource_bar(struct pci_dev *dev, int resno,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1049: FILE: drivers/pci/pci.h:214:
+}
+static inline void pci_iov_release(struct pci_dev *dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1052: FILE: drivers/pci/pci.h:217:
+}
+static inline void pci_iov_create_sysfs(struct pci_dev *dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1055: FILE: drivers/pci/pci.h:220:
+}
+static inline void pci_iov_remove_sysfs(struct pci_dev *dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1058: FILE: drivers/pci/pci.h:223:
+}
+static inline int pci_iov_resource_align(struct pci_dev *dev, int resno)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1062: FILE: drivers/pci/pci.h:227:
+}
+static inline int pci_iov_resource_bar(struct pci_dev *dev, int resno,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1141: FILE: include/linux/pci.h:1151:
+extern int pci_iov_enable(struct pci_dev *dev, int numvfs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1142: FILE: include/linux/pci.h:1152:
+extern void pci_iov_disable(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1143: FILE: include/linux/pci.h:1153:
+extern int pci_iov_register(struct pci_dev *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: include/linux/pci.h:1154:
+extern int pci_iov_register(struct pci_dev *dev,
+	int (*notify)(struct pci_dev *dev, u32 event), char **entries);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1145: FILE: include/linux/pci.h:1155:
+extern void pci_iov_unregister(struct pci_dev *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1146: FILE: include/linux/pci.h:1156:
+extern int pci_iov_read_config(struct pci_dev *dev, int id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1147: FILE: include/linux/pci.h:1157:
+extern int pci_iov_read_config(struct pci_dev *dev, int id,
+			char *entry, char *buf, int size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1148: FILE: include/linux/pci.h:1158:
+extern int pci_iov_write_config(struct pci_dev *dev, int id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: include/linux/pci.h:1159:
+extern int pci_iov_write_config(struct pci_dev *dev, int id,
+			char *entry, char *buf);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1155: FILE: include/linux/pci.h:1165:
+}
+static inline void pci_iov_disable(struct pci_dev *dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1158: FILE: include/linux/pci.h:1168:
+}
+static inline int pci_iov_register(struct pci_dev *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: include/linux/pci.h:1169:
+static inline int pci_iov_register(struct pci_dev *dev,
+	int (*notify)(struct pci_dev *dev, u32 event), char **entries)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1163: FILE: include/linux/pci.h:1173:
+}
+static inline void pci_iov_unregister(struct pci_dev *dev)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1166: FILE: include/linux/pci.h:1176:
+}
+static inline int pci_iov_read_config(struct pci_dev *dev, int id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1167: FILE: include/linux/pci.h:1177:
+static inline int pci_iov_read_config(struct pci_dev *dev, int id,
+			char *entry, char *buf, int size)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1171: FILE: include/linux/pci.h:1181:
+}
+static inline int pci_iov_write_config(struct pci_dev *dev, int id,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: include/linux/pci.h:1182:
+static inline int pci_iov_write_config(struct pci_dev *dev, int id,
+			char *entry, char *buf)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 47 checks, 1113 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000217230.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
