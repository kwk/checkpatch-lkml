WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#183: FILE: include/linux/ima.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#288: FILE: security/integrity/ima/Kconfig:35:
+config IMA_BASE_HOOKS
+	bool "IMA base hooks"
+	depends on IMA
+	default n
+	help
+	  Enable this option to allow the LSM module to enforce integrity.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#295: FILE: security/integrity/ima/Kconfig:42:
+config IMA_LSM_RULES
+	bool "Enable LSM measurement policy rules"
+	depends on IMA && (SECURITY_SELINUX || SECURITY_SMACK)
+	default y
+	help
+	  Disabling this option will not enforce LSM based policy rules.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#322: FILE: security/integrity/ima/ima.h:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#349: FILE: security/integrity/ima/ima.h:28:
+	printk(level "ima (%s): " format, __func__, ## arg)

CHECK:BIT_MACRO: Prefer using the BIT macro
#362: FILE: security/integrity/ima/ima.h:41:
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#380: FILE: security/integrity/ima/ima.h:59:
+};
+extern struct list_head ima_measurements;	/* list of all measurements */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#401: FILE: security/integrity/ima/ima.h:80:
+int ima_add_rule(int, char *subj_user, char *subj_role, char *subj_type,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: security/integrity/ima/ima.h:86:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#416: FILE: security/integrity/ima/ima.h:95:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#429: FILE: security/integrity/ima/ima.h:108:
+};
+extern struct ima_h_table ima_htable;

WARNING:TABSTOP: Statements should start on a tabstop
#433: FILE: security/integrity/ima/ima.h:112:
+	 return(hash_long(*digest, IMA_HASH_BITS));

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#433: FILE: security/integrity/ima/ima.h:112:
+	 return(hash_long(*digest, IMA_HASH_BITS));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#438: FILE: security/integrity/ima/ima.h:117:
+#define IMA_TPM ((((u32)TPM_ANY_TYPE)<<16) | (u32)TPM_ANY_NUM)
                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#468: FILE: security/integrity/ima/ima.h:147:
+	struct mutex mutex;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#470: FILE: security/integrity/ima/ima.h:149:
+};
+#define IMA_IINT_INIT		1

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#502: FILE: security/integrity/ima/ima_api.c:1:
+/*

WARNING:TYPO_SPELLING: 'compatability' may be misspelled - perhaps 'compatibility'?
#534: FILE: security/integrity/ima/ima_api.c:33:
+ * mode_setup - for compatability with non-template IMA versions
                     ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#544: FILE: security/integrity/ima/ima_api.c:43:
+	ima_info("template_mode %s \n", ima_template_mode ? "template" : "ima");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#548: FILE: security/integrity/ima/ima_api.c:47:
+__setup("ima_mode=", mode_setup);

WARNING:SIZEOF_PARENTHESIS: sizeof inode_template->digest should be sizeof(inode_template->digest)
#567: FILE: security/integrity/ima/ima_api.c:66:
+		       sizeof inode_template->digest);

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#675: FILE: security/integrity/ima/ima_api.c:174:
+	memset(entry, 0, sizeof *entry);

WARNING:SIZEOF_PARENTHESIS: sizeof *entry should be sizeof(*entry)
#685: FILE: security/integrity/ima/ima_api.c:184:
+	result = ima_store_template_measure("ima", sizeof *entry, (char *)entry,

WARNING:TYPO_SPELLING: 'keypairs' may be misspelled - perhaps 'key pairs'?
#746: FILE: security/integrity/ima/ima_api.c:245:
+ * The policy is defined in terms of keypairs:
                                      ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#747: FILE: security/integrity/ima/ima_api.c:246:
+ * ^I^Isubj=, obj=, type=, func=, mask=, fsmagic=$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#749: FILE: security/integrity/ima/ima_api.c:248:
+ * ^Ifunc: INODE_PERMISSION | BPRM_CHECK | FILE_MMAP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#750: FILE: security/integrity/ima/ima_api.c:249:
+ * ^Imask: contains the permission mask$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#755: FILE: security/integrity/ima/ima_api.c:254:
+ * or other error, return an error code.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#778: FILE: security/integrity/ima/ima_api.c:277:
+		if (!(iint->flags & IMA_MUST_MEASURE)
+		    || iint->flags & IMA_MEASURED)

CHECK:BRACES: braces {} should be used on all arms of this statement
#786: FILE: security/integrity/ima/ima_api.c:285:
+		if (rc) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#789: FILE: security/integrity/ima/ima_api.c:288:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#820: FILE: security/integrity/ima/ima_api.c:319:
+	if (!(iint->flags & IMA_MEASURED)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#823: FILE: security/integrity/ima/ima_api.c:322:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#883: FILE: security/integrity/ima/ima_crypto.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#895: FILE: security/integrity/ima/ima_crypto.c:13:
+ * ^ICalculate a file's or a template's hash.$

WARNING:LINE_SPACING: Missing a blank line after declarations
#925: FILE: security/integrity/ima/ima_crypto.c:43:
+		struct vfsmount *mnt = mntget(path->mnt);
+		if (!de || !mnt) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1042: FILE: security/integrity/ima/ima_fs.c:1:
+/*

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1079: FILE: security/integrity/ima/ima_fs.c:38:
+static ssize_t ima_show_htable_violations(struct file *filp,
                                                        ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1086: FILE: security/integrity/ima/ima_fs.c:45:
+static struct file_operations ima_htable_violations_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1090: FILE: security/integrity/ima/ima_fs.c:49:
+static ssize_t ima_show_measurements_count(struct file *filp,
                                                         ^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1096: FILE: security/integrity/ima/ima_fs.c:55:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1098: FILE: security/integrity/ima/ima_fs.c:57:
+static struct file_operations ima_measurements_count_ops = {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1122: FILE: security/integrity/ima/ima_fs.c:81:
+	 * against concurrent list-extension */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#1161: FILE: security/integrity/ima/ima_fs.c:120:
+	if (e == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#1192: FILE: security/integrity/ima/ima_fs.c:151:
+	if (integrity_find_template(e->template_name, &template_entry) == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1199: FILE: security/integrity/ima/ima_fs.c:158:
+	} else

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1200: FILE: security/integrity/ima/ima_fs.c:159:
+		seq_printf(m, " \n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1200: FILE: security/integrity/ima/ima_fs.c:159:
+		seq_printf(m, " \n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1204: FILE: security/integrity/ima/ima_fs.c:163:
+static struct seq_operations ima_measurments_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1216: FILE: security/integrity/ima/ima_fs.c:175:
+static struct file_operations ima_measurements_ops = {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!e"
#1279: FILE: security/integrity/ima/ima_fs.c:238:
+	if (e == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1294: FILE: security/integrity/ima/ima_fs.c:253:
+	if (integrity_find_template(e->template_name, &template_entry) == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1301: FILE: security/integrity/ima/ima_fs.c:260:
+	} else

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1302: FILE: security/integrity/ima/ima_fs.c:261:
+		seq_printf(m, " \n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1302: FILE: security/integrity/ima/ima_fs.c:261:
+		seq_printf(m, " \n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1307: FILE: security/integrity/ima/ima_fs.c:266:
+static struct seq_operations ima_ascii_measurements_seqops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1319: FILE: security/integrity/ima/ima_fs.c:278:
+static struct file_operations ima_ascii_measurements_ops = {

CHECK:CAMELCASE: Avoid CamelCase: <bufStart>
#1326: FILE: security/integrity/ima/ima_fs.c:285:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bufEnd>
#1326: FILE: security/integrity/ima/ima_fs.c:285:
+static char *get_tag(char *bufStart, char *bufEnd, char delimiter, int *taglen)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1333: FILE: security/integrity/ima/ima_fs.c:292:
+		if (*bufp == ' ')	/* skip blanks */
[...]
+		else if (*bufp == '#') {	/* skip comment */
[...]
+		} else if (*bufp == '\n')	/* skip newline */
[...]
+		else if (*bufp == '\t')	/* skip tabs */
[...]
+		else
[...]

WARNING:SPACING: space prohibited before semicolon
#1334: FILE: security/integrity/ima/ima_fs.c:293:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1334: FILE: security/integrity/ima/ima_fs.c:293:
+			while ((*bufp == ' ') && (bufp++ < bufEnd)) ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:SPACING: space prohibited before semicolon
#1336: FILE: security/integrity/ima/ima_fs.c:295:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1336: FILE: security/integrity/ima/ima_fs.c:295:
+			while ((*bufp != '\n') && (bufp++ < bufEnd)) ;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1393: FILE: security/integrity/ima/ima_fs.c:352:
+	if (strncmp(datap, "measure", 7) == 0) {
[...]
+	} else if (strncmp(datap, "dont_measure", 12) == 0)
[...]
+	else			/* bad format */
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1405: FILE: security/integrity/ima/ima_fs.c:364:
+		if (strncmp(tag, "obj_user=", 9) == 0)
[...]
+		else if (strncmp(tag, "obj_role=", 9) == 0)
[...]
+		else if (strncmp(tag, "obj_type=", 9) == 0)
[...]
+		else if (strncmp(tag, "subj_user=", 10) == 0)
[...]
+		else if (strncmp(tag, "subj_role=", 10) == 0)
[...]
+		else if (strncmp(tag, "subj_type=", 10) == 0)
[...]
+		else if (strncmp(tag, "func=", 5) == 0)
[...]
+		else if (strncmp(tag, "mask=", 5) == 0)
[...]
+		else if (strncmp(tag, "fsmagic=", 8) == 0)
[...]
+		else if (strncmp(tag, "uid=", 4) == 0)
[...]
+		else {		/* bad format */
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1425: FILE: security/integrity/ima/ima_fs.c:384:
+		else {		/* bad format */

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1457: FILE: security/integrity/ima/ima_fs.c:416:
+static struct file_operations ima_measure_policy_ops = {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1470: FILE: security/integrity/ima/ima_fs.c:429:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1477: FILE: security/integrity/ima/ima_fs.c:436:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1484: FILE: security/integrity/ima/ima_fs.c:443:
+				   S_IRUSR | S_IRGRP, ima_dir, NULL,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#1490: FILE: security/integrity/ima/ima_fs.c:449:
+	    securityfs_create_file("violations", S_IRUSR | S_IRGRP,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IWUSR' are not preferred. Consider using octal permissions '0640'.
#1496: FILE: security/integrity/ima/ima_fs.c:455:
+					    S_IRUSR | S_IRGRP | S_IWUSR,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1526: FILE: security/integrity/ima/ima_init.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entry"
#1561: FILE: security/integrity/ima/ima_init.c:36:
+	if (entry == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1571: FILE: security/integrity/ima/ima_init.c:46:
+	if (ima_used_chip) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1591: FILE: security/integrity/ima/ima_init.c:66:
+			sg_init_one(&sg, (u8 *) pcr_i, 20);

CHECK:BRACES: Unbalanced braces around else statement
#1596: FILE: security/integrity/ima/ima_init.c:71:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1637: FILE: security/integrity/ima/ima_main.c:1:
+/*

ERROR:INITIALISED_STATIC: do not initialise statics to false
#1667: FILE: security/integrity/ima/ima_main.c:31:
+static bool ima_initialized = false;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1686: FILE: security/integrity/ima/ima_main.c:50:
+__setup("ima_hash=", hash_setup);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1708: FILE: security/integrity/ima/ima_main.c:72:
+	if (file && file->f_dentry) {
+		data->dentry = dentry = file->f_dentry;
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1709: FILE: security/integrity/ima/ima_main.c:73:
+		data->dentry = dentry = file->f_dentry;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1713: FILE: security/integrity/ima/ima_main.c:77:
+			data->dentry = dentry = path->dentry;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1715: FILE: security/integrity/ima/ima_main.c:79:
+	if (dentry && dentry->d_inode) {
+		data->inode = dentry->d_inode;
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1720: FILE: security/integrity/ima/ima_main.c:84:
+	return;
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1792: FILE: security/integrity/ima/ima_main.c:156:
+ * ^I- Opening a file for write when already open for read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1795: FILE: security/integrity/ima/ima_main.c:159:
+ * ^I  could result in a file measurement error.$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1800: FILE: security/integrity/ima/ima_main.c:164:
+static int ima_nameidata_check_integrity(struct nameidata *nd, int mask)
                                                            ^^

WARNING:SIZEOF_PARENTHESIS: sizeof idata should be sizeof(idata)
#1810: FILE: security/integrity/ima/ima_main.c:174:
+	memset(&idata, 0, sizeof idata);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_WRITE'
#1820: FILE: security/integrity/ima/ima_main.c:184:
+	if ((mask == MAY_WRITE) || (mask == MAY_APPEND)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mask == MAY_APPEND'
#1820: FILE: security/integrity/ima/ima_main.c:184:
+	if ((mask == MAY_WRITE) || (mask == MAY_APPEND)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around data->dentry->d_count
#1827: FILE: security/integrity/ima/ima_main.c:191:
+			if (atomic_read(&(data->dentry->d_count)) - 1 >

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1828: FILE: security/integrity/ima/ima_main.c:192:
+			    atomic_read(&(inode->i_writecount)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_writecount
#1845: FILE: security/integrity/ima/ima_main.c:209:
+			if (atomic_read(&(inode->i_writecount)) > 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1996: FILE: security/integrity/ima/ima_policy.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2005: FILE: security/integrity/ima/ima_policy.c:10:
+ * ^I- initialize default measure policy rules$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2041: FILE: security/integrity/ima/ima_policy.c:46:
+#define IMA_FUNC ^I0x0001$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2042: FILE: security/integrity/ima/ima_policy.c:47:
+#define IMA_MASK ^I0x0002$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2050: FILE: security/integrity/ima/ima_policy.c:55:
+	{.action = DONT_MEASURE,.fsmagic = PROC_SUPER_MAGIC,
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2052: FILE: security/integrity/ima/ima_policy.c:57:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2052: FILE: security/integrity/ima/ima_policy.c:57:
+	{.action = DONT_MEASURE,.fsmagic = SYSFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2053: FILE: security/integrity/ima/ima_policy.c:58:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2053: FILE: security/integrity/ima/ima_policy.c:58:
+	{.action = DONT_MEASURE,.fsmagic = DEBUGFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2054: FILE: security/integrity/ima/ima_policy.c:59:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2054: FILE: security/integrity/ima/ima_policy.c:59:
+	{.action = DONT_MEASURE,.fsmagic = TMPFS_MAGIC,.flags = IMA_FSMAGIC},
 	                                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2055: FILE: security/integrity/ima/ima_policy.c:60:
+	{.action = DONT_MEASURE,.fsmagic = SECURITYFS_MAGIC,
 	                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2057: FILE: security/integrity/ima/ima_policy.c:62:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2057: FILE: security/integrity/ima/ima_policy.c:62:
+	{.action = MEASURE,.func = FILE_MMAP,.mask = MAY_EXEC,
 	                                    ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2059: FILE: security/integrity/ima/ima_policy.c:64:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2059: FILE: security/integrity/ima/ima_policy.c:64:
+	{.action = MEASURE,.func = BPRM_CHECK,.mask = MAY_EXEC,
 	                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: security/integrity/ima/ima_policy.c:66:
+	{.action = MEASURE,.func = INODE_PERMISSION,.mask = MAY_READ,.uid = 0,
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: security/integrity/ima/ima_policy.c:66:
+	{.action = MEASURE,.func = INODE_PERMISSION,.mask = MAY_READ,.uid = 0,
 	                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#2061: FILE: security/integrity/ima/ima_policy.c:66:
+	{.action = MEASURE,.func = INODE_PERMISSION,.mask = MAY_READ,.uid = 0,
 	                                                            ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2091: FILE: security/integrity/ima/ima_policy.c:96:
+	if ((rule->flags & IMA_FSMAGIC)
+	    && rule->fsmagic != inode->i_sb->s_magic)

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2302: FILE: security/integrity/ima/ima_policy.c:307:
+		rc = strict_strtoul(fsmagic, 16, &entry->fsmagic);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2312: FILE: security/integrity/ima/ima_policy.c:317:
+		rc = strict_strtoul(uid, 10, &lnum);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2313: FILE: security/integrity/ima/ima_policy.c:318:
+		if (rc)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2315: FILE: security/integrity/ima/ima_policy.c:320:
+		else {

CHECK:SPACING: No space is necessary after a cast
#2316: FILE: security/integrity/ima/ima_policy.c:321:
+			entry->uid = (uid_t) lnum;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2336: FILE: security/integrity/ima/ima_queue.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#2410: FILE: security/integrity/ima/ima_queue.c:75:
+	if (qe == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*qe)...) over kmalloc(sizeof(struct ima_queue_entry)...)
#2433: FILE: security/integrity/ima/ima_queue.c:98:
+	qe = kmalloc(sizeof(struct ima_queue_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qe"
#2434: FILE: security/integrity/ima/ima_queue.c:99:
+	if (qe == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2449: FILE: security/integrity/ima/ima_queue.c:114:
+	if (violation) {	/* Replace 0x00 with 0xFF */
[...]
+	} else
[...]

WARNING:SIZEOF_PARENTHESIS: sizeof digest should be sizeof(digest)
#2452: FILE: security/integrity/ima/ima_queue.c:117:
+		memset(digest, 0xff, sizeof digest);

CHECK:BRACES: Unbalanced braces around else statement
#2454: FILE: security/integrity/ima/ima_queue.c:119:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204698.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 61 warnings, 48 checks, 2285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000204698.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
