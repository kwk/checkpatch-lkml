WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/net/s6gmac.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: drivers/net/s6gmac.c:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#329: FILE: drivers/net/s6gmac.c:250:
+#define S6_GMAC_STATCARRY(n)	(0x130 + 4*(n))
                             	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#330: FILE: drivers/net/s6gmac.c:251:
+#define S6_GMAC_STATCARRYMSK(n)	(0x138 + 4*(n))
                                	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#401: FILE: drivers/net/s6gmac.c:322:
+#define S6_GMAC_HOST_DSTADDRLO(n) (0x160 + 8*(n))
                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#402: FILE: drivers/net/s6gmac.c:323:
+#define S6_GMAC_HOST_DSTADDRHI(n) (0x164 + 8*(n))
                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#403: FILE: drivers/net/s6gmac.c:324:
+#define S6_GMAC_HOST_DSTMASKLO(n) (0x180 + 8*(n))
                                             ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#404: FILE: drivers/net/s6gmac.c:325:
+#define S6_GMAC_HOST_DSTMASKHI(n) (0x184 + 8*(n))
                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#418: FILE: drivers/net/s6gmac.c:339:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#432: FILE: drivers/net/s6gmac.c:353:
+	spinlock_t lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: drivers/net/s6gmac.c:376:
+	struct sk_buff *skb;
+	while ((((u8)(pd->rx_skb_i - pd->rx_skb_o)) < S6_NUM_RX_SKB)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#456: FILE: drivers/net/s6gmac.c:377:
+	while ((((u8)(pd->rx_skb_i - pd->rx_skb_o)) < S6_NUM_RX_SKB)
+			&& (!s6dmac_fifo_full(pd->rx_dma, pd->rx_chan))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#457: FILE: drivers/net/s6gmac.c:378:
+			&& (!s6dmac_fifo_full(pd->rx_dma, pd->rx_chan))
+			&& (skb = dev_alloc_skb(S6_MAX_FRLEN + 2))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/net/s6gmac.c:381:
+		s6dmac_put_fifo_cache(pd->rx_dma, pd->rx_chan,
+			pd->io, (u32)skb->data, S6_MAX_FRLEN);

WARNING:LINE_SPACING: Missing a blank line after declarations
#469: FILE: drivers/net/s6gmac.c:390:
+	struct sk_buff *skb;
+	while (((u8)(pd->rx_skb_i - pd->rx_skb_o)) >

WARNING:LINE_SPACING: Missing a blank line after declarations
#489: FILE: drivers/net/s6gmac.c:410:
+	struct s6gmac *pd = netdev_priv(dev);
+	while (((u8)(pd->tx_skb_i - pd->tx_skb_o)) >

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#504: FILE: drivers/net/s6gmac.c:425:
+#define S6_STATS_C(b, r, f) [b] = { \

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'r' - possible side-effects?
#504: FILE: drivers/net/s6gmac.c:425:
+#define S6_STATS_C(b, r, f) [b] = { \
+	BUILD_BUG_ON_ZERO(r##_SIZE < S6_GMAC_STAT_SIZE_MIN) + \
+	BUILD_BUG_ON_ZERO((r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1)) \
+			>= (1<<4)) + \
+	r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1), \
+	BUILD_BUG_ON_ZERO(((unsigned)((r - S6_GMAC_STAT_REGS) / sizeof(u32))) \
+			>= ((1<<6)-1)) + \
+	(r - S6_GMAC_STAT_REGS) / sizeof(u32), \
+	BUILD_BUG_ON_ZERO((offsetof(struct net_device_stats, f)) \
+			% sizeof(unsigned long)) + \
+	BUILD_BUG_ON_ZERO((((unsigned)(offsetof(struct net_device_stats, f)) \
+			/ sizeof(unsigned long)) >= (1<<6))) + \
+	BUILD_BUG_ON_ZERO((sizeof(((struct net_device_stats *)0)->f) \
+			!= sizeof(unsigned long))) + \
+	(offsetof(struct net_device_stats, f)) / sizeof(unsigned long)},

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'r' may be better as '(r)' to avoid precedence issues
#504: FILE: drivers/net/s6gmac.c:425:
+#define S6_STATS_C(b, r, f) [b] = { \
+	BUILD_BUG_ON_ZERO(r##_SIZE < S6_GMAC_STAT_SIZE_MIN) + \
+	BUILD_BUG_ON_ZERO((r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1)) \
+			>= (1<<4)) + \
+	r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1), \
+	BUILD_BUG_ON_ZERO(((unsigned)((r - S6_GMAC_STAT_REGS) / sizeof(u32))) \
+			>= ((1<<6)-1)) + \
+	(r - S6_GMAC_STAT_REGS) / sizeof(u32), \
+	BUILD_BUG_ON_ZERO((offsetof(struct net_device_stats, f)) \
+			% sizeof(unsigned long)) + \
+	BUILD_BUG_ON_ZERO((((unsigned)(offsetof(struct net_device_stats, f)) \
+			/ sizeof(unsigned long)) >= (1<<6))) + \
+	BUILD_BUG_ON_ZERO((sizeof(((struct net_device_stats *)0)->f) \
+			!= sizeof(unsigned long))) + \
+	(offsetof(struct net_device_stats, f)) / sizeof(unsigned long)},

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#504: FILE: drivers/net/s6gmac.c:425:
+#define S6_STATS_C(b, r, f) [b] = { \
+	BUILD_BUG_ON_ZERO(r##_SIZE < S6_GMAC_STAT_SIZE_MIN) + \
+	BUILD_BUG_ON_ZERO((r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1)) \
+			>= (1<<4)) + \
+	r##_SIZE - (S6_GMAC_STAT_SIZE_MIN - 1), \
+	BUILD_BUG_ON_ZERO(((unsigned)((r - S6_GMAC_STAT_REGS) / sizeof(u32))) \
+			>= ((1<<6)-1)) + \
+	(r - S6_GMAC_STAT_REGS) / sizeof(u32), \
+	BUILD_BUG_ON_ZERO((offsetof(struct net_device_stats, f)) \
+			% sizeof(unsigned long)) + \
+	BUILD_BUG_ON_ZERO((((unsigned)(offsetof(struct net_device_stats, f)) \
+			/ sizeof(unsigned long)) >= (1<<6))) + \
+	BUILD_BUG_ON_ZERO((sizeof(((struct net_device_stats *)0)->f) \
+			!= sizeof(unsigned long))) + \
+	(offsetof(struct net_device_stats, f)) / sizeof(unsigned long)},

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#507: FILE: drivers/net/s6gmac.c:428:
+			>= (1<<4)) + \
 			     ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#509: FILE: drivers/net/s6gmac.c:430:
+	BUILD_BUG_ON_ZERO(((unsigned)((r - S6_GMAC_STAT_REGS) / sizeof(u32))) \

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#510: FILE: drivers/net/s6gmac.c:431:
+			>= ((1<<6)-1)) + \
 			      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#510: FILE: drivers/net/s6gmac.c:431:
+			>= ((1<<6)-1)) + \
 			          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#514: FILE: drivers/net/s6gmac.c:435:
+	BUILD_BUG_ON_ZERO((((unsigned)(offsetof(struct net_device_stats, f)) \

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#515: FILE: drivers/net/s6gmac.c:436:
+			/ sizeof(unsigned long)) >= (1<<6))) + \
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: drivers/net/s6gmac.c:469:
+static void s6gmac_stats_collect(struct s6gmac *pd,
+		const struct s6gmac_statinf *inf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#551: FILE: drivers/net/s6gmac.c:472:
+	int b;
+	for (b = 0; b < S6_STATS_B; b++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: drivers/net/s6gmac.c:482:
+static void s6gmac_stats_carry(struct s6gmac *pd,
+		const struct s6gmac_statinf *inf, u32 mask)

WARNING:LINE_SPACING: Missing a blank line after declarations
#564: FILE: drivers/net/s6gmac.c:485:
+	int b;
+	while (mask) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#581: FILE: drivers/net/s6gmac.c:502:
+	u32 mask;
+	mask = s6gmac_stats_pending(pd, carry);

WARNING:LINE_SPACING: Missing a blank line after declarations
#592: FILE: drivers/net/s6gmac.c:513:
+	struct s6gmac *pd = netdev_priv(dev);
+	if (!dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: drivers/net/s6gmac.c:528:
+static inline void s6gmac_set_dstaddr(struct s6gmac *pd, int n,
+	u32 addrlo, u32 addrhi, u32 masklo, u32 maskhi)

WARNING:LINE_SPACING: Missing a blank line after declarations
#618: FILE: drivers/net/s6gmac.c:539:
+	struct s6gmac *pd = netdev_priv(dev);
+	writel(0, pd->reg + S6_GMAC_MACCONF1);

CHECK:CAMELCASE: Avoid CamelCase: <SUPPORTED_1000baseT_Full>
#625: FILE: drivers/net/s6gmac.c:546:
+		& (SUPPORTED_1000baseT_Full | SUPPORTED_1000baseT_Half));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SUPPORTED_1000baseT_Half>
#625: FILE: drivers/net/s6gmac.c:546:
+		& (SUPPORTED_1000baseT_Full | SUPPORTED_1000baseT_Half));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#626: FILE: drivers/net/s6gmac.c:547:
+#if 0

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#638: FILE: drivers/net/s6gmac.c:559:
+	udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/net/s6gmac.c:561:
+	writel(1 << S6_GMAC_MACCONF1_TXENA | 1 << S6_GMAC_MACCONF1_RXENA,
+		pd->reg + S6_GMAC_MACCONF1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#655: FILE: drivers/net/s6gmac.c:576:
+	writel(dev->mtu && (dev->mtu < (S6_MAX_FRLEN - ETH_HLEN-ETH_FCS_LEN)) ?
 	                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#656: FILE: drivers/net/s6gmac.c:577:
+			dev->mtu+ETH_HLEN+ETH_FCS_LEN : S6_MAX_FRLEN,
 			        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#656: FILE: drivers/net/s6gmac.c:577:
+			dev->mtu+ETH_HLEN+ETH_FCS_LEN : S6_MAX_FRLEN,
 			                 ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#678: FILE: drivers/net/s6gmac.c:599:
+	writel((S6_GMAC_FIFOCONF_RSV_MASK & ~(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/net/s6gmac.c:621:
+	s6gmac_set_dstaddr(pd, 0,
+		0xFFFFFFFF, 0x0000FFFF, 0xFFFFFFFF, 0x0000FFFF);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#702: FILE: drivers/net/s6gmac.c:623:
+	s6gmac_set_dstaddr(pd, 1,
+		dev->dev_addr[5] |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#710: FILE: drivers/net/s6gmac.c:631:
+	s6gmac_set_dstaddr(pd, 2,
+		0x00000000, 0x00000100, 0x00000000, 0x00000100);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/net/s6gmac.c:633:
+	s6gmac_set_dstaddr(pd, 3,
+		0x00000000, 0x00000000, 0x00000000, 0x00000000);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#739: FILE: drivers/net/s6gmac.c:660:
+		udelay(64);

WARNING:LINE_SPACING: Missing a blank line after declarations
#747: FILE: drivers/net/s6gmac.c:668:
+	struct s6gmac *pd = bus->priv;
+	s6mii_enable(pd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: drivers/net/s6gmac.c:684:
+	struct s6gmac *pd = bus->priv;
+	s6mii_enable(pd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#778: FILE: drivers/net/s6gmac.c:699:
+	struct s6gmac *pd = bus->priv;
+	s6mii_enable(pd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#787: FILE: drivers/net/s6gmac.c:708:
+	u32 pllsel = readl(S6_REG_GREG1 + S6_GREG1_PLLSEL);
+	pllsel &= ~(S6_GREG1_PLLSEL_GMAC_MASK << S6_GREG1_PLLSEL_GMAC);

WARNING:LINE_SPACING: Missing a blank line after declarations
#825: FILE: drivers/net/s6gmac.c:746:
+	struct phy_device *phydev = pd->phydev;
+	if (pd->link.isup &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pd->link.mbit != phydev->speed'
#825: FILE: drivers/net/s6gmac.c:746:
+	if (pd->link.isup &&
+			(!phydev->link ||
+			(pd->link.mbit != phydev->speed) ||
+			(pd->link.full != phydev->duplex))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pd->link.full != phydev->duplex'
#825: FILE: drivers/net/s6gmac.c:746:
+	if (pd->link.isup &&
+			(!phydev->link ||
+			(pd->link.mbit != phydev->speed) ||
+			(pd->link.full != phydev->duplex))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#826: FILE: drivers/net/s6gmac.c:747:
+	if (pd->link.isup &&
+			(!phydev->link ||

WARNING:LINE_SPACING: Missing a blank line after declarations
#839: FILE: drivers/net/s6gmac.c:760:
+			u32 maccfg = readl(pd->reg + S6_GMAC_MACCONF2);
+			if (phydev->duplex)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phydev->speed == 1000'
#846: FILE: drivers/net/s6gmac.c:767:
+		if (pd->link.giga != (phydev->speed == 1000)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#849: FILE: drivers/net/s6gmac.c:770:
+			u32 maccfg = readl(pd->reg + S6_GMAC_MACCONF2);
+			maccfg &= ~(S6_GMAC_MACCONF2_IFMODE_MASK

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: drivers/net/s6gmac.c:796:
+	struct phy_device *p = NULL;
+	while ((!(p = pd->mii.bus->phy_map[i])) && (i < PHY_MAX_ADDR))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#880: FILE: drivers/net/s6gmac.c:801:
+		printk(KERN_ERR "%s: Could not attach to PHY\n", dev->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#893: FILE: drivers/net/s6gmac.c:814:
+	u32 mask;
+	mask =	1 << S6_GMAC_STATCARRY1_RDRP |

WARNING:LINE_SPACING: Missing a blank line after declarations
#925: FILE: drivers/net/s6gmac.c:846:
+	struct s6gmac *pd = netdev_priv(dev);
+	s6dmac_disable_chan(pd->tx_dma, pd->tx_chan);

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: drivers/net/s6gmac.c:856:
+	unsigned long flags;
+	spin_lock_irqsave(&pd->lock, flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: drivers/net/s6gmac.c:865:
+	s6dmac_put_fifo_cache(pd->tx_dma, pd->tx_chan,
+		(u32)skb->data, pd->io, skb->len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#948: FILE: drivers/net/s6gmac.c:869:
+		printk(KERN_ERR "GMAC BUG: skb tx ring overflow [%x, %x]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: drivers/net/s6gmac.c:870:
+		printk(KERN_ERR "GMAC BUG: skb tx ring overflow [%x, %x]\n",
+			pd->tx_skb_o, pd->tx_skb_i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#950: FILE: drivers/net/s6gmac.c:871:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#961: FILE: drivers/net/s6gmac.c:882:
+	unsigned long flags;
+	spin_lock_irqsave(&pd->lock, flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#970: FILE: drivers/net/s6gmac.c:891:
+	unsigned long flags;
+	phy_read_status(pd->phydev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: drivers/net/s6gmac.c:900:
+	s6dmac_enable_chan(pd->rx_dma, pd->rx_chan,
+		2, 1, 0, 1, 0, 0, 0, 7, -1, 2, 0, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#981: FILE: drivers/net/s6gmac.c:902:
+	s6dmac_enable_chan(pd->tx_dma, pd->tx_chan,
+		2, 0, 1, 0, 0, 0, 0, 7, -1, 2, 0, 1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#998: FILE: drivers/net/s6gmac.c:919:
+	unsigned long flags;
+	netif_stop_queue(dev);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1016: FILE: drivers/net/s6gmac.c:937:
+	int i;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1018: FILE: drivers/net/s6gmac.c:939:
+		unsigned long flags;
+		spin_lock_irqsave(&pd->lock, flags);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1036: FILE: drivers/net/s6gmac.c:957:
+static int __devinit s6gmac_probe(struct platform_device *pdev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1043: FILE: drivers/net/s6gmac.c:964:
+	struct mii_bus *mb;
+	dev = alloc_etherdev(sizeof(*pd));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1045: FILE: drivers/net/s6gmac.c:966:
+		printk(KERN_ERR DRV_PRMT "etherdev alloc failed, aborting.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1068: FILE: drivers/net/s6gmac.c:989:
+		printk(KERN_ERR DRV_PRMT "irq request failed: %d\n", dev->irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1073: FILE: drivers/net/s6gmac.c:994:
+		printk(KERN_ERR DRV_PRMT "error registering device %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1074: FILE: drivers/net/s6gmac.c:995:
+		printk(KERN_ERR DRV_PRMT "error registering device %s\n",
+			dev->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1079: FILE: drivers/net/s6gmac.c:1000:
+		printk(KERN_ERR DRV_PRMT "error allocating mii bus\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1092: FILE: drivers/net/s6gmac.c:1013:
+		int n = platform_get_irq(pdev, i + 1);
+		if (n < 0)

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1112: FILE: drivers/net/s6gmac.c:1033:
+static int __devexit s6gmac_remove(struct platform_device *pdev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1115: FILE: drivers/net/s6gmac.c:1036:
+	struct net_device *dev = platform_get_drvdata(pdev);
+	if (dev) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1117: FILE: drivers/net/s6gmac.c:1038:
+		struct s6gmac *pd = netdev_priv(dev);
+		mdiobus_unregister(pd->mii.bus);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1137: FILE: drivers/net/s6gmac.c:1058:
+	printk(KERN_INFO DRV_PRMT "S6 GMAC ethernet driver\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1141: FILE: drivers/net/s6gmac.c:1062:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 43 warnings, 45 checks, 1097 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000150991.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
