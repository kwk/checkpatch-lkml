CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#186: FILE: fs/namei.c:1576:
+			error = security_path_truncate(&nd->path, 0,
+					       ATTR_MTIME|ATTR_CTIME|ATTR_OPEN,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/namei.c:1576:
+					       ATTR_MTIME|ATTR_CTIME|ATTR_OPEN,
 					                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#186: FILE: fs/namei.c:1576:
+					       ATTR_MTIME|ATTR_CTIME|ATTR_OPEN,
 					                            ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/namei.c:2025:
+	error = security_path_mknod(&nd.path, dentry, mode, dev);
 	                             ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#225: FILE: fs/namei.c:2100:
+	error = security_path_mkdir(&nd.path, dentry, mode);
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#237: FILE: fs/namei.c:2211:
+	error = security_path_rmdir(&nd.path, dentry);
 	                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#249: FILE: fs/namei.c:2297:
+		error = security_path_unlink(&nd.path, dentry);
 		                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#261: FILE: fs/namei.c:2382:
+	error = security_path_symlink(&nd.path, dentry, from);
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#273: FILE: fs/namei.c:2483:
+	error = security_path_link(old_path.dentry, &nd.path, new_dentry);
 	                                             ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#311: FILE: fs/open.c:335:
+					       ATTR_MTIME|ATTR_CTIME, file);
 					                 ^

WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#362: FILE: include/linux/security.h:374:
+ *	associated with path strcture @path.
   	                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#421: FILE: include/linux/security.h:457:
+ *	@filp is the file structure (may be NULL).
   	 ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#431: FILE: include/linux/security.h:1388:
+	int (*path_unlink) (struct path *dir, struct dentry *dentry);

WARNING:SPACING: Unnecessary space before function pointer arguments
#432: FILE: include/linux/security.h:1389:
+	int (*path_mkdir) (struct path *dir, struct dentry *dentry, int mode);

WARNING:SPACING: Unnecessary space before function pointer arguments
#433: FILE: include/linux/security.h:1390:
+	int (*path_rmdir) (struct path *dir, struct dentry *dentry);

WARNING:SPACING: Unnecessary space before function pointer arguments
#434: FILE: include/linux/security.h:1391:
+	int (*path_mknod) (struct path *dir, struct dentry *dentry, int mode,

WARNING:SPACING: Unnecessary space before function pointer arguments
#436: FILE: include/linux/security.h:1393:
+	int (*path_truncate) (struct path *path, loff_t length,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#437: FILE: include/linux/security.h:1394:
+			      unsigned int time_attrs, struct file *filp);
 			                                            ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#438: FILE: include/linux/security.h:1395:
+	int (*path_symlink) (struct path *dir, struct dentry *dentry,

WARNING:SPACING: Unnecessary space before function pointer arguments
#440: FILE: include/linux/security.h:1397:
+	int (*path_link) (struct dentry *old_dentry, struct path *new_dir,

WARNING:SPACING: Unnecessary space before function pointer arguments
#442: FILE: include/linux/security.h:1399:
+	int (*path_rename) (struct path *old_dir, struct dentry *old_dentry,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#460: FILE: include/linux/security.h:2768:
+			   unsigned int time_attrs, struct file *filp);
 			                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#492: FILE: include/linux/security.h:2800:
+					 struct file *filp)
 					              ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#528: FILE: net/unix/af_unix.c:831:
+		err = security_path_mknod(&nd.path, dentry, mode, 0);
 		                           ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#583: FILE: security/capability.c:307:
+			     unsigned int time_attrs, struct file *filp)
 			                                           ^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#658: FILE: security/security.c:380:
+	BUG_ON(victim->d_parent->d_inode != dir);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#669: FILE: security/security.c:391:
+	if (isdir) {
[...]
+	} else if (S_ISDIR(victim->d_inode->i_mode))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#689: FILE: security/security.c:411:
+	int error = may_create(dir, dentry);
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#722: FILE: security/security.c:444:
+	int error = may_create(dir, dentry);
+	if (error)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#728: FILE: security/security.c:450:
+	mode &= (S_IRWXUGO | S_ISVTX);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#736: FILE: security/security.c:458:
+	int error = may_delete(dir, dentry, 1);
+	if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#752: FILE: security/security.c:474:
+	int error = may_delete(dir, dentry, 0);
+	if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#768: FILE: security/security.c:490:
+	int error = may_create(dir, dentry);
+	if (error)

WARNING:LINE_SPACING: Missing a blank line after declarations
#783: FILE: security/security.c:505:
+	int error;
+	if (!inode)

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: security/security.c:531:
+	int is_dir = S_ISDIR(old_dentry->d_inode->i_mode);
+	if (old_dentry->d_inode == new_dentry->d_inode)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#838: FILE: security/security.c:560:
+			   unsigned int time_attrs, struct file *filp)
 			                                         ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#842: FILE: security/security.c:564:
+	int error = 0;
+	mutex_lock(&dentry->d_inode->i_mutex);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#845: FILE: security/security.c:567:
+						    filp);
 						    ^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 33 warnings, 5 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
