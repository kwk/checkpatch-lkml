CHECK:CAMELCASE: Avoid CamelCase: <Active>
#125: FILE: include/linux/page-flags.h:188:
+	TESTCLEARFLAG(Active, active)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Unevictable>
#134: FILE: include/linux/page-flags.h:233:
+PAGEFLAG(Unevictable, unevictable) __CLEARPAGEFLAG(Unevictable, unevictable)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#176: FILE: include/linux/mmzone.h:146:
+#define for_each_evictable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageUnevictable>
#243: FILE: include/linux/mm_inline.h:95:
+		__ClearPageUnevictable(page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageActive>
#247: FILE: include/linux/mm_inline.h:99:
+			__ClearPageActive(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#263: FILE: include/linux/mm_inline.h:118:
+	if (PageUnevictable(page))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#265: FILE: include/linux/mm_inline.h:120:
+	else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/swap.h:183:
+extern void add_page_to_unevictable_list(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: include/linux/swap.h:234:
+extern int page_evictable(struct page *page, struct vm_area_struct *vma);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: include/linux/swap.h:237:
+static inline int page_evictable(struct page *page,
+						struct vm_area_struct *vma)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: mm/swap.c:187:
+	if (!PageActive(page) && !PageUnevictable(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#458: FILE: mm/migrate.c:338:
+	if (TestClearPageActive(page)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#461: FILE: mm/migrate.c:341:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#553: FILE: mm/migrate.c:708:
+		if (!page->mapping) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#558: FILE: mm/migrate.c:713:
+		} else

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#845: FILE: mm/vmscan.c:2327:
+{
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#878: FILE: mm/internal.h:46:
+extern int putback_lru_page(struct page *page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#908: FILE: mm/internal.h:82:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#923: FILE: mm/memcontrol.c:163:
 };
+#define PAGE_CGROUP_FLAG_CACHE	   (0x1)	/* charged as cache */

CHECK:BRACES: braces {} should be used on all arms of this statement
#938: FILE: mm/memcontrol.c:287:
+	if (pc->flags & PAGE_CGROUP_FLAG_UNEVICTABLE)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#940: FILE: mm/memcontrol.c:289:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#957: FILE: mm/memcontrol.c:307:
+	if (pc->flags & PAGE_CGROUP_FLAG_UNEVICTABLE)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#959: FILE: mm/memcontrol.c:309:
+	else {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1052: FILE: include/linux/memcontrol.h:37:
+extern void mem_cgroup_move_lists(struct page *page, enum lru_list lru);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 0 warnings, 24 checks, 854 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268496.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
