WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
2.6.27-stable review patch.  If anyone has any objections, please let us know.

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id 'f1987b44f642e96176adc88b7ce23a1d74806f89', maybe rebased or not pulled?
#45: 
commit f1987b44f642e96176adc88b7ce23a1d74806f89 upstream

CHECK:CAMELCASE: Avoid CamelCase: <serverName>
#102: FILE: fs/cifs/cifs_debug.c:138:
+					   "displayed\n\t", i, ses->serverName);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#102: FILE: fs/cifs/cifs_debug.c:138:
+				seq_printf(m, "\n%d) entry for %s not fully "
+					   "displayed\n\t", i, ses->serverName);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#108: FILE: fs/cifs/cifs_debug.c:142:
+				    "\n%d) Name: %s  Domain: %s Uses: %d OS:"
+				    " %s\n\tNOS: %s\tCapability: 0x%x\n\tSMB"

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#120: FILE: fs/cifs/cifs_debug.c:163:
+				tcon = list_entry(tmp3, struct cifsTconInfo,

CHECK:CAMELCASE: Avoid CamelCase: <fsDevInfo>
#123: FILE: fs/cifs/cifs_debug.c:166:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceType>
#123: FILE: fs/cifs/cifs_debug.c:166:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <treeName>
#125: FILE: fs/cifs/cifs_debug.c:168:
+					   tcon->treeName, tcon->tc_count);

CHECK:CAMELCASE: Avoid CamelCase: <nativeFileSystem>
#126: FILE: fs/cifs/cifs_debug.c:169:
+				if (tcon->nativeFileSystem) {

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: fs/cifs/cifs_debug.c:174:
+				seq_printf(m, "DevInfo: 0x%x Attributes: 0x%x"
+					"\nPathComponentMax: %d Status: 0x%d",

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#131: FILE: fs/cifs/cifs_debug.c:174:
+					"\nPathComponentMax: %d Status: 0x%d",

Prefixing 0x with decimal output is defective and should be corrected.

CHECK:CAMELCASE: Avoid CamelCase: <DeviceCharacteristics>
#132: FILE: fs/cifs/cifs_debug.c:175:
+					le32_to_cpu(tcon->fsDevInfo.DeviceCharacteristics),

CHECK:CAMELCASE: Avoid CamelCase: <fsAttrInfo>
#133: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#133: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <MaxPathNameComponentLength>
#134: FILE: fs/cifs/cifs_debug.c:177:
+					le32_to_cpu(tcon->fsAttrInfo.MaxPathNameComponentLength),

CHECK:CAMELCASE: Avoid CamelCase: <tidStatus>
#135: FILE: fs/cifs/cifs_debug.c:178:
+					tcon->tidStatus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/cifs/cifs_debug.c:196:
+				mid_entry = list_entry(tmp3, struct mid_q_entry,
 					qhead);

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#210: FILE: fs/cifs/cifs_debug.c:236:
+	struct cifsSesInfo *ses;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#346: FILE: fs/cifs/cifs_debug.c:335:
+				seq_printf(m, "\nSMBs: %d Oplock Breaks: %d",
+					atomic_read(&tcon->num_smbs_sent),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: fs/cifs/cifs_debug.c:338:
+				seq_printf(m, "\nReads:  %d Bytes: %lld",
+					atomic_read(&tcon->num_reads),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: fs/cifs/cifs_debug.c:341:
+				seq_printf(m, "\nWrites: %d Bytes: %lld",
+					atomic_read(&tcon->num_writes),

WARNING:SPLIT_STRING: quoted string split across lines
#355: FILE: fs/cifs/cifs_debug.c:344:
+				seq_printf(m, "\nLocks: %d HardLinks: %d "
+					      "Symlinks: %d",

WARNING:SPLIT_STRING: quoted string split across lines
#360: FILE: fs/cifs/cifs_debug.c:349:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#360: FILE: fs/cifs/cifs_debug.c:349:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/cifs/cifs_debug.c:354:
+				seq_printf(m, "\nMkdirs: %d Rmdirs: %d",
+					atomic_read(&tcon->num_mkdirs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: fs/cifs/cifs_debug.c:357:
+				seq_printf(m, "\nRenames: %d T2 Renames %d",
+					atomic_read(&tcon->num_renames),

WARNING:SPLIT_STRING: quoted string split across lines
#371: FILE: fs/cifs/cifs_debug.c:360:
+				seq_printf(m, "\nFindFirst: %d FNext %d "
+					      "FClose %d",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses == NULL'
#469: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->server == NULL'
#469: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses"
#469: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses->server"
#469: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#506: FILE: fs/cifs/cifssmb.c:769:
+	   closed on server already e.g. due to tcp session crashing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <CifsExiting>
#552: FILE: fs/cifs/connect.c:1462:
+		if (tcon->tidStatus == CifsExiting)

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#580: FILE: fs/cifs/connect.c:1490:
+	xid = GetXid();

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBTDis>
#581: FILE: fs/cifs/connect.c:1491:
+	CIFSSMBTDis(xid, tcon);

CHECK:CAMELCASE: Avoid CamelCase: <_FreeXid>
#582: FILE: fs/cifs/connect.c:1492:
+	_FreeXid(xid);

CHECK:CAMELCASE: Avoid CamelCase: <DeleteTconOplockQEntries>
#584: FILE: fs/cifs/connect.c:1494:
+	DeleteTconOplockQEntries(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <tconInfoFree>
#585: FILE: fs/cifs/connect.c:1495:
+	tconInfoFree(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <pSesInfo>
#596: FILE: fs/cifs/connect.c:2254:
+		tcon = cifs_find_tcon(pSesInfo, volume_info.UNC);

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#724: FILE: fs/cifs/misc.c:498:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#724: FILE: fs/cifs/misc.c:498:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <Tid>
#741: FILE: fs/cifs/misc.c:558:
+			if (tcon->tid != buf->Tid)

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#747: FILE: fs/cifs/misc.c:562:
+			list_for_each(tmp2, &tcon->openFileList) {

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#748: FILE: fs/cifs/misc.c:563:
+				netfile = list_entry(tmp2, struct cifsFileInfo,

CHECK:CAMELCASE: Avoid CamelCase: <pSMB>
#771: FILE: fs/cifs/misc.c:565:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <Fid>
#771: FILE: fs/cifs/misc.c:565:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#775: FILE: fs/cifs/misc.c:569:
+				cFYI(1, ("file id match, oplock break"));

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#776: FILE: fs/cifs/misc.c:570:
+				pCifsInode = CIFS_I(netfile->pInode);

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#777: FILE: fs/cifs/misc.c:571:
+				pCifsInode->clientCanCacheAll = false;

CHECK:CAMELCASE: Avoid CamelCase: <OplockLevel>
#778: FILE: fs/cifs/misc.c:572:
+				if (pSMB->OplockLevel == 0)

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#779: FILE: fs/cifs/misc.c:573:
+					pCifsInode->clientCanCacheRead = false;

CHECK:CAMELCASE: Avoid CamelCase: <oplockPending>
#780: FILE: fs/cifs/misc.c:574:
+				pCifsInode->oplockPending = true;

CHECK:CAMELCASE: Avoid CamelCase: <AllocOplockQEntry>
#781: FILE: fs/cifs/misc.c:575:
+				AllocOplockQEntry(netfile->pInode,

CHECK:CAMELCASE: Avoid CamelCase: <oplockThread>
#784: FILE: fs/cifs/misc.c:578:
+				if (oplockThread)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000196595.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 44 checks, 695 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000196595.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
