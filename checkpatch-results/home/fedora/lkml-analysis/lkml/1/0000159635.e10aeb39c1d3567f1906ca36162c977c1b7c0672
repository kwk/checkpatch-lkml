WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#166: FILE: drivers/char/devtime.c:1:
+#include <linux/init.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#216: FILE: drivers/char/devtime.c:51:
+	int result = strict_strtol(buffer, 10, &tv.tv_sec);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: drivers/char/devtime.c:52:
+	int result = strict_strtol(buffer, 10, &tv.tv_sec);
+	if ((result == 0) && (tv.tv_sec > 0)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'result == 0'
#217: FILE: drivers/char/devtime.c:52:
+	if ((result == 0) && (tv.tv_sec > 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tv.tv_sec > 0'
#217: FILE: drivers/char/devtime.c:52:
+	if ((result == 0) && (tv.tv_sec > 0)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#217: FILE: drivers/char/devtime.c:52:
+	if ((result == 0) && (tv.tv_sec > 0)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#220: FILE: drivers/char/devtime.c:55:
+	} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#226: FILE: drivers/char/devtime.c:61:
+time_read(struct file *f, char __user *buffer, size_t count, loff_t * offset)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: drivers/char/devtime.c:64:
+	int result = 0;
+	if (*offset != 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#229: FILE: drivers/char/devtime.c:64:
+	if (*offset != 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#231: FILE: drivers/char/devtime.c:66:
+	else {

CHECK:SPACING: No space is necessary after a cast
#234: FILE: drivers/char/devtime.c:69:
+		unsigned long readcount = min(count, (size_t) timetextlen);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MINMAX: min() should probably be min_t(size_t, count, timetextlen)
#234: FILE: drivers/char/devtime.c:69:
+		unsigned long readcount = min(count, (size_t) timetextlen);

WARNING:LINE_SPACING: Missing a blank line after declarations
#235: FILE: drivers/char/devtime.c:70:
+		unsigned long readcount = min(count, (size_t) timetextlen);
+		if (timetextlen <= 0)

CHECK:BRACES: braces {} should be used on all arms of this statement
#237: FILE: drivers/char/devtime.c:72:
+		if (!copy_to_user(buffer, tmpbuf, readcount)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#240: FILE: drivers/char/devtime.c:75:
+		} else

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#247: FILE: drivers/char/devtime.c:82:
+time_write(struct file *f, const char __user * buffer, size_t count,

CHECK:SPACING: No space is necessary after a cast
#255: FILE: drivers/char/devtime.c:90:
+	if (count > ((size_t) time_bufsize - 1))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159635.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 7 warnings, 10 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000159635.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
