CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: kernel/lockdep.c:583:
+print_shortest_lock_dependencies(struct lock_list *leaf,
+				struct lock_list *root)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#71: FILE: kernel/lockdep.c:593:
+		printk("%*s ... acquired at:\n", depth, "");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#73: FILE: kernel/lockdep.c:595:
+		printk("\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entry != root'
#75: FILE: kernel/lockdep.c:597:
+		if (depth == 0 && (entry != root)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#76: FILE: kernel/lockdep.c:598:
+			printk("lockdep:%s bad BFS generated tree\n", __func__);

WARNING:RETURN_VOID: void function return statements are not generally useful
#85: FILE: kernel/lockdep.c:607:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#86: FILE: kernel/lockdep.c:608:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#152: FILE: kernel/lockdep.c:1318:
+	printk("\nthe dependencies between %s-irq-safe lock", irqclass);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: kernel/lockdep.c:1319:
+	printk(" and the holding lock:\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#160: FILE: kernel/lockdep.c:1324:
+	printk("\nthe dependencies between the lock to be acquired");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#161: FILE: kernel/lockdep.c:1325:
+	printk(" and %s-irq-unsafe lock:\n", irqclass);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'target_entry1' should also have an identifier name
#175: FILE: kernel/lockdep.c:1344:
+	struct lock_list *uninitialized_var(target_entry1);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: kernel/lockdep.c:2013:
+	printk("\nthe shortest dependencies between 2nd lock and 1st lock:\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 3 checks, 197 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
