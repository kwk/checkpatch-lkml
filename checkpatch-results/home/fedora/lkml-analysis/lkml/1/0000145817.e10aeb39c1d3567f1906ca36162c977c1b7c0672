WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#58: FILE: arch/x86/kernel/apic/io_apic.c:576:
+assign_irq_vector_block(int irq, unsigned count, const struct cpumask *mask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#75: FILE: arch/x86/kernel/apic/io_apic.c:593:
+	static char init, result;
+	if (init)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 == 6'
#81: FILE: arch/x86/kernel/apic/io_apic.c:599:
+		if (c->x86 > 6 ||
+		    ((c->x86 == 6) && (c->x86_model >= 13)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model >= 13'
#81: FILE: arch/x86/kernel/apic/io_apic.c:599:
+		if (c->x86 > 6 ||
+		    ((c->x86 == 6) && (c->x86_model >= 13)))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#106: FILE: arch/x86/kernel/apic/io_apic.c:630:
+		unsigned i, count = 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#187: FILE: arch/x86/kernel/apic/io_apic.c:1401:
+__assign_irq_vector_block(int irq, unsigned count, const struct cpumask *mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#191: FILE: arch/x86/kernel/apic/io_apic.c:1405:
+	unsigned i, cpu;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: arch/x86/kernel/apic/io_apic.c:1410:
+	BUG_ON(irq + count > NR_IRQS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#197: FILE: arch/x86/kernel/apic/io_apic.c:1411:
+	BUG_ON(count & (count - 1));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#201: FILE: arch/x86/kernel/apic/io_apic.c:1415:
+		if ((cfg->move_in_progress) || cfg->move_cleanup_count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#288: FILE: arch/x86/kernel/apic/io_apic.c:1501:
+assign_irq_vector_block(int irq, unsigned count, const struct cpumask *mask)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#306: FILE: arch/x86/kernel/apic/io_apic.c:3308:
+unsigned int create_irq_nr(unsigned int irq_want, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#312: FILE: arch/x86/kernel/apic/io_apic.c:3311:
+	unsigned i, irq, new, run;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#322: FILE: arch/x86/kernel/apic/io_apic.c:3320:
+	irq = run = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: arch/x86/kernel/apic/io_apic.c:3347:
+			err = __assign_irq_vector(irq, cfg_new,
+							apic->target_cpus());

WARNING:LINE_SPACING: Missing a blank line after declarations
#393: FILE: arch/x86/kernel/apic/io_apic.c:3373:
+	int irq = create_irq_nr(nr_irqs_gsi, 1);
+	return irq ? irq : -1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: arch/x86/kernel/apic/io_apic.c:3401:
+static int msi_compose_msg(struct pci_dev *pdev, unsigned int irq,
+					unsigned count, struct msi_msg *msg)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#403: FILE: arch/x86/kernel/apic/io_apic.c:3401:
+					unsigned count, struct msi_msg *msg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: arch/x86/kernel/apic/io_apic.c:3592:
+static int setup_msi_irq(struct pci_dev *dev, struct msi_desc *msidesc,
+					unsigned count, unsigned base_irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: arch/x86/kernel/apic/io_apic.c:3592:
+					unsigned count, unsigned base_irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: arch/x86/kernel/apic/io_apic.c:3592:
+					unsigned count, unsigned base_irq)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#429: FILE: arch/x86/kernel/apic/io_apic.c:3596:
+	unsigned irq;

WARNING:LINE_SPACING: Missing a blank line after declarations
#457: FILE: arch/x86/kernel/apic/io_apic.c:3612:
+			struct irq_desc *desc = irq_to_desc(irq);
+			desc->status |= IRQ_MOVE_PCNTXT;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: arch/x86/kernel/apic/io_apic.c:3614:
+			set_irq_chip_and_handler_name(irq, &msi_ir_chip,
+						handle_edge_irq, "edge");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#462: FILE: arch/x86/kernel/apic/io_apic.c:3617:
+			set_irq_chip_and_handler_name(irq, &msi_chip,
+						handle_edge_irq, "edge");

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#469: FILE: arch/x86/kernel/apic/io_apic.c:3623:
+	dev_printk(KERN_DEBUG, &dev->dev, "irq %d for MSI/MSI-X\n", base_irq);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#477: FILE: arch/x86/kernel/apic/io_apic.c:3630:
+	unsigned base_irq, alloc, i;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#576: FILE: arch/x86/kernel/apic/io_apic.c:3729:
+	if (type == PCI_CAP_ID_MSI) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#587: FILE: arch/x86/kernel/apic/io_apic.c:3739:
+	unsigned i;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#592: FILE: arch/x86/kernel/apic/io_apic.c:3744:
+		for (i = 0; i < (1 << desc->msi_attrib.multiple); i++) {
+			destroy_irq(desc->irq + i);
+		}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#638: FILE: include/linux/irq.h:384:
+extern unsigned int create_irq_nr(unsigned int irq_want, unsigned count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/linux/irq.h:384:
+extern unsigned int create_irq_nr(unsigned int irq_want, unsigned count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 10 checks, 571 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000145817.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
