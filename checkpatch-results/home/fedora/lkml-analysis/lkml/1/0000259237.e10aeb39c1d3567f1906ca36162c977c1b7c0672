WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#379: FILE: arch/x86/mm/srat_32.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#380: FILE: arch/x86/mm/srat_32.c:2:
+ * Some of the code in this file has been gleaned from the 64 bit $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#385: FILE: arch/x86/mm/srat_32.c:7:
+ * All rights reserved.          $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#399: FILE: arch/x86/mm/srat_32.c:21:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#400: FILE: arch/x86/mm/srat_32.c:22:
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/topology.h> instead of <asm/topology.h>
#410: FILE: arch/x86/mm/srat_32.c:32:
+#include <asm/topology.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#411: FILE: arch/x86/mm/srat_32.c:33:
+#include <asm/smp.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#419: FILE: arch/x86/mm/srat_32.c:41:
+#define BMAP_SET(bmap, bit)	((bmap)[NODE_ARRAY_INDEX(bit)] |= 1 << NODE_ARRAY_OFFSET(bit))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bit' - possible side-effects?
#420: FILE: arch/x86/mm/srat_32.c:42:
+#define BMAP_TEST(bmap, bit)	((bmap)[NODE_ARRAY_INDEX(bit)] & (1 << NODE_ARRAY_OFFSET(bit)))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: arch/x86/mm/srat_32.c:44:
+#define PXM_BITMAP_LEN (MAX_PXM_DOMAINS / 8) $

WARNING:MISPLACED_INIT: __initdata should be placed after pxm_bitmap[PXM_BITMAP_LEN]
#423: FILE: arch/x86/mm/srat_32.c:45:
+static u8 __initdata pxm_bitmap[PXM_BITMAP_LEN];	/* bitmap of proximity domains */

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#434: FILE: arch/x86/mm/srat_32.c:56:
+};
+static struct node_memory_chunk_s __initdata node_memory_chunk[MAXCHUNKS];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MISPLACED_INIT: __initdata should be placed after node_memory_chunk[MAXCHUNKS]
#434: FILE: arch/x86/mm/srat_32.c:56:
+static struct node_memory_chunk_s __initdata node_memory_chunk[MAXCHUNKS];

WARNING:MISPLACED_INIT: __initdata should be placed after num_memory_chunks
#436: FILE: arch/x86/mm/srat_32.c:58:
+static int __initdata num_memory_chunks; /* total number of memory chunks */

WARNING:MISPLACED_INIT: __initdata should be placed after apicid_to_pxm[MAX_APICID]
#437: FILE: arch/x86/mm/srat_32.c:59:
+static u8 __initdata apicid_to_pxm[MAX_APICID];

ERROR:CODE_INDENT: code indent should use tabs where possible
#444: FILE: arch/x86/mm/srat_32.c:66:
+        printk(KERN_ERR "SRAT: SRAT not used.\n");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#444: FILE: arch/x86/mm/srat_32.c:66:
+        printk(KERN_ERR "SRAT: SRAT not used.\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#444: FILE: arch/x86/mm/srat_32.c:66:
+        printk(KERN_ERR "SRAT: SRAT not used.\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#445: FILE: arch/x86/mm/srat_32.c:67:
+        acpi_numa = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: arch/x86/mm/srat_32.c:67:
+        acpi_numa = -1;$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#474: FILE: arch/x86/mm/srat_32.c:96:
+	printk(KERN_DEBUG "CPU %02x in proximity domain %02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#475: FILE: arch/x86/mm/srat_32.c:97:
+	printk(KERN_DEBUG "CPU %02x in proximity domain %02x\n",
+		cpu_affinity->apic_id, cpu_affinity->proximity_domain_lo);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#513: FILE: arch/x86/mm/srat_32.c:135:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#515: FILE: arch/x86/mm/srat_32.c:137:
+		printk(KERN_WARNING "Too many mem chunks in SRAT."

WARNING:SPLIT_STRING: quoted string split across lines
#516: FILE: arch/x86/mm/srat_32.c:138:
+		printk(KERN_WARNING "Too many mem chunks in SRAT."
+			" Ignoring %lld MBytes at %llx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#517: FILE: arch/x86/mm/srat_32.c:139:
+			size/(1024*1024), paddr);
 			    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#517: FILE: arch/x86/mm/srat_32.c:139:
+			size/(1024*1024), paddr);
 			          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#537: FILE: arch/x86/mm/srat_32.c:159:
+	printk(KERN_DEBUG "Memory range %08lx to %08lx (type %x)"

WARNING:SPLIT_STRING: quoted string split across lines
#538: FILE: arch/x86/mm/srat_32.c:160:
+	printk(KERN_DEBUG "Memory range %08lx to %08lx (type %x)"
+			  " in proximity domain %02x %s\n",

ERROR:SPACING: space prohibited before that close parenthesis ')'
#543: FILE: arch/x86/mm/srat_32.c:165:
+		 "enabled and removable" : "enabled" ) );

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#554: FILE: arch/x86/mm/srat_32.c:176:
+}
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#569: FILE: arch/x86/mm/srat_32.c:191:
+		printk(KERN_INFO "Ignoring SRAT pfns: %08lx - %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: arch/x86/mm/srat_32.c:192:
+		printk(KERN_INFO "Ignoring SRAT pfns: %08lx - %08lx\n",
+			memory_chunk->start_pfn, memory_chunk->end_pfn);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#590: FILE: arch/x86/mm/srat_32.c:212:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#595: FILE: arch/x86/mm/srat_32.c:217:
+		printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: arch/x86/mm/srat_32.c:236:
+			int nid = acpi_map_pxm_to_node(i);
+			node_set_online(nid);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: arch/x86/mm/srat_32.c:239:
+	BUG_ON(num_online_nodes() == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#623: FILE: arch/x86/mm/srat_32.c:245:
+	printk(KERN_DEBUG "pxm bitmap: ");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#624: FILE: arch/x86/mm/srat_32.c:246:
+	for (i = 0; i < sizeof(pxm_bitmap); i++) {
+		printk(KERN_CONT "%02x ", pxm_bitmap[i]);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#625: FILE: arch/x86/mm/srat_32.c:247:
+		printk(KERN_CONT "%02x ", pxm_bitmap[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#625: FILE: arch/x86/mm/srat_32.c:247:
+		printk(KERN_CONT "%02x ", pxm_bitmap[i]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#627: FILE: arch/x86/mm/srat_32.c:249:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#627: FILE: arch/x86/mm/srat_32.c:249:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#628: FILE: arch/x86/mm/srat_32.c:250:
+	printk(KERN_DEBUG "Number of logical nodes in system = %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: arch/x86/mm/srat_32.c:251:
+	printk(KERN_DEBUG "Number of logical nodes in system = %d\n",
+			 num_online_nodes());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#630: FILE: arch/x86/mm/srat_32.c:252:
+	printk(KERN_DEBUG "Number of memory chunks in system = %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: arch/x86/mm/srat_32.c:253:
+	printk(KERN_DEBUG "Number of memory chunks in system = %d\n",
+			 num_memory_chunks);

ERROR:SPACING: space required before the open brace '{'
#636: FILE: arch/x86/mm/srat_32.c:258:
+	for (j = 0; j < num_memory_chunks; j++){

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#637: FILE: arch/x86/mm/srat_32.c:259:
+		struct node_memory_chunk_s * chunk = &node_memory_chunk[j];

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#638: FILE: arch/x86/mm/srat_32.c:260:
+		struct node_memory_chunk_s * chunk = &node_memory_chunk[j];
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#638: FILE: arch/x86/mm/srat_32.c:260:
+		printk(KERN_DEBUG

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#655: FILE: arch/x86/mm/srat_32.c:277:
+	printk(KERN_ERR "failed to get NUMA memory information from SRAT"

WARNING:SPLIT_STRING: quoted string split across lines
#656: FILE: arch/x86/mm/srat_32.c:278:
+	printk(KERN_ERR "failed to get NUMA memory information from SRAT"
+			" table\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000259237.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 30 warnings, 14 checks, 313 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000259237.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
