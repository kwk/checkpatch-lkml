CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type != EXT2_FT_WHT'
#48: FILE: fs/ext2/dir.c:222:
+	if (!de->inode && ((de->file_type != EXT2_FT_WHT) &&
+			   (de->file_type != EXT2_FT_FALLTHRU)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type != EXT2_FT_FALLTHRU'
#48: FILE: fs/ext2/dir.c:222:
+	if (!de->inode && ((de->file_type != EXT2_FT_WHT) &&
+			   (de->file_type != EXT2_FT_FALLTHRU)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: fs/ext2/dir.c:353:
+				over = filldir(dirent, de->name, de->name_len,
+						(n<<PAGE_CACHE_SHIFT) | offset,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#71: FILE: fs/ext2/dir.c:353:
+						(n<<PAGE_CACHE_SHIFT) | offset,
 						  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#84: FILE: fs/ext2/dir.c:480:
+		} else if(!res && de->file_type == EXT2_FT_FALLTHRU) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_WHT'
#112: FILE: fs/ext2/dir.c:609:
+		if ((de->file_type == EXT2_FT_WHT) ||
+		    (de->file_type == EXT2_FT_FALLTHRU))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_FALLTHRU'
#112: FILE: fs/ext2/dir.c:609:
+		if ((de->file_type == EXT2_FT_WHT) ||
+		    (de->file_type == EXT2_FT_FALLTHRU))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_WHT'
#122: FILE: fs/ext2/dir.c:625:
+	if (de->inode || (((de->file_type == EXT2_FT_WHT) ||
+			   (de->file_type == EXT2_FT_FALLTHRU)) &&
 			  !ext2_match (namelen, name, de))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_FALLTHRU'
#122: FILE: fs/ext2/dir.c:625:
+	if (de->inode || (((de->file_type == EXT2_FT_WHT) ||
+			   (de->file_type == EXT2_FT_FALLTHRU)) &&
 			  !ext2_match (namelen, name, de))) {

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#131: FILE: fs/ext2/dir.c:651:
+ * Create a fallthru entry.

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#133: FILE: fs/ext2/dir.c:653:
+int ext2_fallthru_entry (struct inode *dir, struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#138: FILE: fs/ext2/dir.c:658:
+	ext2_dirent * de;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: fs/ext2/dir.c:668:
+	if (ext2_match (namelen, name, de))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: fs/ext2/dir.c:675:
+		(char*)de - (char*)page_address(page);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: fs/ext2/dir.c:675:
+		(char*)de - (char*)page_address(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: fs/ext2/dir.c:677:
+	err = __ext2_write_begin(NULL, page->mapping, pos, rec_len, 0,
+							&page, NULL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_WHT'
#160: FILE: fs/ext2/dir.c:680:
+	if (de->inode || (de->file_type == EXT2_FT_WHT) ||
+	    (de->file_type == EXT2_FT_FALLTHRU)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_FALLTHRU'
#160: FILE: fs/ext2/dir.c:680:
+	if (de->inode || (de->file_type == EXT2_FT_WHT) ||
+	    (de->file_type == EXT2_FT_FALLTHRU)) {

CHECK:SPACING: No space is necessary after a cast
#162: FILE: fs/ext2/dir.c:682:
+		ext2_dirent *de1 = (ext2_dirent *) ((char *) de + name_len);

WARNING:LINE_SPACING: Missing a blank line after declarations
#163: FILE: fs/ext2/dir.c:683:
+		ext2_dirent *de1 = (ext2_dirent *) ((char *) de + name_len);
+		de1->rec_len = ext2_rec_len_to_disk(rec_len - name_len);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#172: FILE: fs/ext2/dir.c:692:
+	dir->i_mtime = dir->i_ctime = CURRENT_TIME_SEC;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_WHT'
#193: FILE: fs/ext2/dir.c:789:
+	if (de->inode || (((de->file_type == EXT2_FT_WHT) ||
+			   (de->file_type == EXT2_FT_FALLTHRU)) &&
+			  !ext2_match (namelen, name, de))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'de->file_type == EXT2_FT_FALLTHRU'
#193: FILE: fs/ext2/dir.c:789:
+	if (de->inode || (((de->file_type == EXT2_FT_WHT) ||
+			   (de->file_type == EXT2_FT_FALLTHRU)) &&
+			  !ext2_match (namelen, name, de))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#195: FILE: fs/ext2/dir.c:791:
+			  !ext2_match (namelen, name, de))) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#207: FILE: fs/ext2/ext2.h:115:
+extern int ext2_fallthru_entry (struct inode *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#207: FILE: fs/ext2/ext2.h:115:
+extern int ext2_fallthru_entry (struct inode *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#207: FILE: fs/ext2/ext2.h:115:
+extern int ext2_fallthru_entry (struct inode *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#207: FILE: fs/ext2/ext2.h:115:
+extern int ext2_fallthru_entry (struct inode *, struct dentry *);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#228: FILE: fs/ext2/namei.c:348:
+ * Create a fallthru entry.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#230: FILE: fs/ext2/namei.c:350:
+static int ext2_fallthru (struct inode *dir, struct dentry *dentry)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123514.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 16 checks, 198 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123514.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
