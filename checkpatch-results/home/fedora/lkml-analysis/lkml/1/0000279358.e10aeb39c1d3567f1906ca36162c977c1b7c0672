CHECK:LINE_SPACING: Please don't use multiple blank lines
#76: FILE: arch/x86/kernel/e820.c:498:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#86: FILE: arch/x86/kernel/e820.c:508:
+};
+static struct early_res early_res[MAX_EARLY_RES] __initdata = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: arch/x86/kernel/e820.c:533:
+	struct early_res *r;
+	for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++) {

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#115: FILE: arch/x86/kernel/e820.c:537:
+			      start, end - 1, name?name:"", r->start,
 			                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#115: FILE: arch/x86/kernel/e820.c:537:
+			      start, end - 1, name?name:"", r->start,
 			                               ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_early', this function's name, in a string
#138: FILE: arch/x86/kernel/e820.c:560:
+		panic("free_early on not reserved area: %llx-%llx!",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: arch/x86/kernel/e820.c:561:
+		panic("free_early on not reserved area: %llx-%llx!",
+			 start, end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: arch/x86/kernel/e820.c:567:
+	memmove(&early_res[i], &early_res[i + 1],
+	       (j - 1 - i) * sizeof(struct early_res));

WARNING:LINE_SPACING: Missing a blank line after declarations
#154: FILE: arch/x86/kernel/e820.c:576:
+	u64 final_start, final_end;
+	for (i = 0; i < MAX_EARLY_RES && early_res[i].end; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#156: FILE: arch/x86/kernel/e820.c:578:
+		struct early_res *r = &early_res[i];
+		final_start = max(start, r->start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#160: FILE: arch/x86/kernel/e820.c:582:
+		printk(KERN_INFO "  early res: %d [%llx-%llx] %s\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: arch/x86/kernel/e820.c:583:
+		printk(KERN_INFO "  early res: %d [%llx-%llx] %s\n", i,
+			final_start, final_end - 1, r->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: arch/x86/kernel/e820.c:603:
+		struct early_res *r = &early_res[i];
+		if (last >= r->start && addr < r->end) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: arch/x86/kernel/e820.c:623:
+		struct early_res *r = &early_res[i];
+		if (last > r->start && addr < r->start) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: arch/x86/kernel/e820.c:666:
+		while (bad_addr(&addr, size, align) && addr+size <= ei_last)
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: arch/x86/kernel/e820.c:700:
+		while (bad_addr_size(&addr, sizep, align) &&
+			addr + *sizep <= ei_last)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#287: FILE: arch/x86/kernel/e820.c:709:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ebda_addr == 0'
#547: FILE: arch/x86/kernel/head32.c:55:
+	if ((ebda_addr == 0) && (lowmem >= 0x9f000))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lowmem >= 0x9f000'
#547: FILE: arch/x86/kernel/head32.c:55:
+	if ((ebda_addr == 0) && (lowmem >= 0x9f000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lowmem == 0'
#551: FILE: arch/x86/kernel/head32.c:59:
+	if ((lowmem == 0) || (lowmem >= 0x100000))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lowmem >= 0x100000'
#551: FILE: arch/x86/kernel/head32.c:59:
+	if ((lowmem == 0) || (lowmem >= 0x100000))

WARNING:LINE_SPACING: Missing a blank line after declarations
#568: FILE: arch/x86/kernel/head32.c:76:
+		u64 ramdisk_end   = ramdisk_image + ramdisk_size;
+		reserve_early(ramdisk_image, ramdisk_end, "RAMDISK");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#707: FILE: arch/x86/kernel/setup_32.c:573:
+	bootmap_size = bootmem_bootmap_pages(max_low_pfn)<<PAGE_SHIFT;
 	                                                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#708: FILE: arch/x86/kernel/setup_32.c:574:
+	bootmap = find_e820_area(min_low_pfn<<PAGE_SHIFT,
 	                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#709: FILE: arch/x86/kernel/setup_32.c:575:
+				 max_low_pfn<<PAGE_SHIFT, bootmap_size,
 				            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#715: FILE: arch/x86/kernel/setup_32.c:581:
+	early_res_to_bootmem(0, max_low_pfn<<PAGE_SHIFT);
 	                                   ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#827: FILE: include/asm-x86/e820.h:73:
+extern u64 find_e820_area(u64 start, u64 end, u64 size, u64 align);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: include/asm-x86/e820.h:74:
+extern u64 find_e820_area_size(u64 start, u64 *sizep, u64 align);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#829: FILE: include/asm-x86/e820.h:75:
+extern void reserve_early(u64 start, u64 end, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#830: FILE: include/asm-x86/e820.h:76:
+extern void free_early(u64 start, u64 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#831: FILE: include/asm-x86/e820.h:77:
+extern void early_res_to_bootmem(u64 start, u64 end);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 23 checks, 761 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279358.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
