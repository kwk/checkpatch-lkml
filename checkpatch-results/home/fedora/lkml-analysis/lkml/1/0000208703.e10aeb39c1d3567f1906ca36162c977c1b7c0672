WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: security/tomoyo/common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#43: FILE: security/tomoyo/common.c:2:
+ * security/tomoyo/common.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#70: FILE: security/tomoyo/common.c:29:
+};
+/* String table for functionality that takes 2 modes. */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#83: FILE: security/tomoyo/common.c:42:
+	[TMY_TOMOYO_MAX_ACCEPT_ENTRY]
+	= { "MAX_ACCEPT_ENTRY",    MAX_ACCEPT_ENTRY, INT_MAX },

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#315: FILE: security/tomoyo/common.c:274:
+	printk(KERN_DEBUG "%s: Invalid pathname '%s'\n", function,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#375: FILE: security/tomoyo/common.c:334:
+	printk(KERN_DEBUG "%s: Invalid domainname '%s'\n", function,

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: security/tomoyo/common.c:389:
+		char *ep = strchr(pathname, '\0');
+		if (pathname < ep--) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#521: FILE: security/tomoyo/common.c:480:
+		char c;
+		if (*pattern != '\\') {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#566: FILE: security/tomoyo/common.c:525:
+			if (c == '\\' && is_byte_range(filename + 1)
+			    && strncmp(filename + 1, pattern, 3) == 0) {

WARNING:REPEATED_WORD: Possible repeated word: 'without'
#625: FILE: security/tomoyo/common.c:584:
+ * file_matches_to_pattern - Pattern matching without without '/' character.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#686: FILE: security/tomoyo/common.c:645:
+	/*
+	  if (!filename || !pattern)

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#708: FILE: security/tomoyo/common.c:667:
+		const char *p_delimiter = strchr(p, '/');
+		if (!f_delimiter)

WARNING:LINE_SPACING: Missing a blank line after declarations
#812: FILE: security/tomoyo/common.c:771:
+		static u8 count = 20;
+		if (count) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#814: FILE: security/tomoyo/common.c:773:
+			printk(KERN_ERR "BUG: sleeping function called "

WARNING:SPLIT_STRING: quoted string split across lines
#815: FILE: security/tomoyo/common.c:774:
+			printk(KERN_ERR "BUG: sleeping function called "
+			       "from invalid context.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#822: FILE: security/tomoyo/common.c:781:
+#if MAX_PROFILES != 256
+		&& profile < MAX_PROFILES

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#824: FILE: security/tomoyo/common.c:783:
+#endif
+		&& profile_ptr[profile] ?

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#910: FILE: security/tomoyo/common.c:869:
+		printk(KERN_WARNING "TOMOYO-WARNING: "

WARNING:SPLIT_STRING: quoted string split across lines
#911: FILE: security/tomoyo/common.c:870:
+		printk(KERN_WARNING "TOMOYO-WARNING: "
+		       "Domain '%s' has so many ACLs to hold. "

WARNING:SPLIT_STRING: quoted string split across lines
#912: FILE: security/tomoyo/common.c:871:
+		       "Domain '%s' has so many ACLs to hold. "
+		       "Stopped learning mode.\n", domain->domainname->name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#939: FILE: security/tomoyo/common.c:898:
+			int i;
+			for (i = 0; i < TMY_MAX_CONTROL_INDEX; i++)

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#941: FILE: security/tomoyo/common.c:900:
+				ptr->value[i]
+					= tmy_control_array[i].current_value;

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#971: FILE: security/tomoyo/common.c:930:
+	if (strict_strtoul(data, 10, &num))

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#993: FILE: security/tomoyo/common.c:952:
+			const char **modes;
+			switch (i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1036: FILE: security/tomoyo/common.c:995:
+		const struct profile *profile = profile_ptr[index];
+		head->read_step = step;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1051: FILE: security/tomoyo/common.c:1010:
+			const char *keyword = tmy_control_array[type].keyword;
+			switch (tmy_control_array[type].max_value) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1182: FILE: security/tomoyo/common.c:1141:
+		struct policy_manager_entry *ptr;
+		ptr = list1_entry(pos, struct policy_manager_entry, list);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1212: FILE: security/tomoyo/common.c:1171:
+		if (!ptr->is_deleted && ptr->is_domain
+		    && !tmy_pathcmp(domainname, ptr->manager))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1220: FILE: security/tomoyo/common.c:1179:
+		if (!ptr->is_deleted && !ptr->is_domain
+		    && !strcmp(exe, ptr->manager->name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1228: FILE: security/tomoyo/common.c:1187:
+		const pid_t pid = current->pid;
+		if (last_pid != pid) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1229: FILE: security/tomoyo/common.c:1188:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "

WARNING:SPLIT_STRING: quoted string split across lines
#1230: FILE: security/tomoyo/common.c:1189:
+			printk(KERN_WARNING "%s ( %s ) is not permitted to "
+			       "update policies.\n", domainname->name, exe);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1251: FILE: security/tomoyo/common.c:1210:
+	if (sscanf(data, "pid=%u", &pid) == 1) {
[...]
+	} else if (!strncmp(data, "domain=", 7)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1263: FILE: security/tomoyo/common.c:1222:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1271: FILE: security/tomoyo/common.c:1230:
+		struct domain_info *d;
+		head->read_var1 = NULL;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1332: FILE: security/tomoyo/common.c:1291:
+	if (sscanf(data, KEYWORD_USE_PROFILE "%u", &profile) == 1
+	    && profile < MAX_PROFILES) {

CHECK:SPACING: No space is necessary after a cast
#1334: FILE: security/tomoyo/common.c:1293:
+			domain->profile = (u8) profile;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1365: FILE: security/tomoyo/common.c:1324:
+		const char *msg;
+		if (!(perm & (1 << bit)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1369: FILE: security/tomoyo/common.c:1328:
+		if ((bit == TMY_TYPE_READ_ACL || bit == TMY_TYPE_WRITE_ACL)
+		    && (perm & (1 << TMY_TYPE_READ_WRITE_ACL)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1408: FILE: security/tomoyo/common.c:1367:
+		const char *msg;
+		if (!(perm & (1 << bit)))

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1440: FILE: security/tomoyo/common.c:1399:
+		struct single_path_acl_record *acl
+			= container_of(ptr, struct single_path_acl_record,

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1446: FILE: security/tomoyo/common.c:1405:
+		struct double_path_acl_record *acl
+			= container_of(ptr, struct double_path_acl_record,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1450: FILE: security/tomoyo/common.c:1409:
+	BUG(); /* This must not happen. */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#1475: FILE: security/tomoyo/common.c:1434:
+		const char *ignore_global_allow_read = "";
+		domain = list1_entry(dpos, struct domain_info, list);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1487: FILE: security/tomoyo/common.c:1446:
+			ignore_global_allow_read
+				= KEYWORD_IGNORE_GLOBAL_ALLOW_READ "\n";

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1501: FILE: security/tomoyo/common.c:1460:
+			struct acl_info *ptr
+				= list1_entry(apos, struct acl_info, list);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1540: FILE: security/tomoyo/common.c:1499:
+	strict_strtoul(data, 10, &profile);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1542: FILE: security/tomoyo/common.c:1501:
+	if (domain && profile < MAX_PROFILES
+	    && (profile_ptr[profile] || !sbin_init_started))

CHECK:SPACING: No space is necessary after a cast
#1543: FILE: security/tomoyo/common.c:1502:
+		domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1570: FILE: security/tomoyo/common.c:1529:
+		struct domain_info *domain;
+		domain = list1_entry(pos, struct domain_info, list);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1591: FILE: security/tomoyo/common.c:1550:
+	unsigned long pid;
+	strict_strtoul(head->write_buf, 10, &pid);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1591: FILE: security/tomoyo/common.c:1550:
+	strict_strtoul(head->write_buf, 10, &pid);

CHECK:SPACING: No space is necessary after a cast
#1592: FILE: security/tomoyo/common.c:1551:
+	head->read_step = (int) pid;

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#1736: FILE: security/tomoyo/common.c:1695:
+	 * Thus, let do_execve() call this function everytime.
 	                                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1738: FILE: security/tomoyo/common.c:1697:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1740: FILE: security/tomoyo/common.c:1699:
+	if (path_lookup(tmy_loader, LOOKUP_FOLLOW, &nd)) {
 	                                            ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1741: FILE: security/tomoyo/common.c:1700:
+		printk(KERN_INFO "Not activating Mandatory Access Control now "

WARNING:SPLIT_STRING: quoted string split across lines
#1742: FILE: security/tomoyo/common.c:1701:
+		printk(KERN_INFO "Not activating Mandatory Access Control now "
+		       "since %s doesn't exist.\n", tmy_loader);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1745: FILE: security/tomoyo/common.c:1704:
+	path_put(&nd.path);
 	          ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1782: FILE: security/tomoyo/common.c:1741:
+	printk(KERN_INFO "Calling %s to load policy. Please wait.\n",

CHECK:SPACING: No space is necessary after a cast
#1784: FILE: security/tomoyo/common.c:1743:
+	argv[0] = (char *) tmy_loader;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1791: FILE: security/tomoyo/common.c:1750:
+	printk(KERN_INFO "TOMOYO: 2.2.0-pre   2008/10/10\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1792: FILE: security/tomoyo/common.c:1751:
+	printk(KERN_INFO "Mandatory Access Control activated.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1796: FILE: security/tomoyo/common.c:1755:
+		struct domain_info *domain;
+		list1_for_each_entry(domain, &domain_list, list) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1798: FILE: security/tomoyo/common.c:1757:
+			const u8 profile = domain->profile;
+			if (profile_ptr[profile])

WARNING:TYPO_SPELLING: 'Poiner' may be misspelled - perhaps 'Pointer'?
#2000: FILE: security/tomoyo/common.c:1959:
+ * @buffer:     Poiner to buffer to write to.
                 ^^^^^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2013: FILE: security/tomoyo/common.c:1972:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2059: FILE: security/tomoyo/common.c:2018:
+		return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2071: FILE: security/tomoyo/common.c:2030:
+		char c;
+		if (head->write_avail >= head->writebuf_size - 1) {

CHECK:SPACING: No space is necessary after a cast
#2153: FILE: security/tomoyo/common.c:2112:
+	return tmy_open_control(((u8 *) file->f_path.dentry->d_inode->i_private)

CHECK:SPACING: No space is necessary after a cast
#2154: FILE: security/tomoyo/common.c:2113:
+				- ((u8 *) NULL), file);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#2203: FILE: security/tomoyo/common.c:2162:
+static struct file_operations tmy_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:SPACING: No space is necessary after a cast
#2223: FILE: security/tomoyo/common.c:2182:
+	securityfs_create_file(name, mode, parent, ((u8 *) NULL) + key,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2254: FILE: security/tomoyo/common.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2255: FILE: security/tomoyo/common.h:2:
+ * security/tomoyo/common.h

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#2332: FILE: security/tomoyo/common.h:79:
+} __attribute__((__packed__));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2345: FILE: security/tomoyo/common.h:92:
+	u8 is_deleted;     /* Delete flag.
+			      0 = active.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2347: FILE: security/tomoyo/common.h:94:
+			      255 = deleted and no longer undeletable. */

WARNING:SPACING: Unnecessary space before function pointer arguments
#2422: FILE: security/tomoyo/common.h:169:
+	int (*read) (struct tmy_io_buffer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tmy_io_buffer *' should also have an identifier name
#2422: FILE: security/tomoyo/common.h:169:
+	int (*read) (struct tmy_io_buffer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#2423: FILE: security/tomoyo/common.h:170:
+	int (*write) (struct tmy_io_buffer *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct tmy_io_buffer *' should also have an identifier name
#2423: FILE: security/tomoyo/common.h:170:
+	int (*write) (struct tmy_io_buffer *);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#2458: FILE: security/tomoyo/common.h:205:
+	__attribute__ ((format(printf, 2, 3)));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000208703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 59 warnings, 24 checks, 2529 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000208703.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
