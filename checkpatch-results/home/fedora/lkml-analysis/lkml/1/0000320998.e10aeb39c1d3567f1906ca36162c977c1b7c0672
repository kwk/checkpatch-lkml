WARNING:REPEATED_WORD: Possible repeated word: 'etc'
#128: FILE: Documentation/mmu_notifier/README:34:
+So the current approach in use by RDMA etc etc is conceptually broken

WARNING:TYPO_SPELLING: 'availabe' may be misspelled - perhaps 'available'?
#190: FILE: Documentation/mmu_notifier/README:96:
+The required additional Page flag is only availabe in 64 bit mode and
                                           ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'capabilty' may be misspelled - perhaps 'capability'?
#193: FILE: Documentation/mmu_notifier/README:99:
+An example of code to build a mmu_notifier mechanism with rmap capabilty
                                                                ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#230: FILE: include/linux/mmu_notifier.h:1:
+#ifndef _LINUX_MMU_NOTIFIER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: include/linux/mmu_notifier.h:16:
+ * ^IThese are callbacks registered with an mm_struct. If pages are$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: include/linux/mmu_notifier.h:17:
+ * ^Iremoved from an address space then callbacks are performed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: include/linux/mmu_notifier.h:19:
+ * ^ISpinlocks must be held in order to walk reverse maps. The$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#249: FILE: include/linux/mmu_notifier.h:20:
+ * ^Iinvalidate_page() callbacks are performed with spinlocks held.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#251: FILE: include/linux/mmu_notifier.h:22:
+ * ^IThe invalidate_range_start/end callbacks can be performed in contexts$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: include/linux/mmu_notifier.h:23:
+ * ^Iwhere sleeping is allowed or in atomic contexts. A flag is passed$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#253: FILE: include/linux/mmu_notifier.h:24:
+ * ^Ito indicate an atomic context.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: include/linux/mmu_notifier.h:87:
+	void (*invalidate_range_begin)(struct mmu_notifier *mn,
+				 struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: include/linux/mmu_notifier.h:92:
+	void (*invalidate_range_end)(struct mmu_notifier *mn,
+				 struct mm_struct *mm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: include/linux/mmu_notifier.h:105:
+extern void mmu_notifier_register(struct mmu_notifier *mn,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/linux/mmu_notifier.h:116:
+extern void mmu_notifier_unregister(struct mmu_notifier *mn,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: include/linux/mmu_notifier.h:119:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: include/linux/mmu_notifier.h:120:
+extern void mmu_notifier_release(struct mm_struct *mm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: include/linux/mmu_notifier.h:121:
+extern int mmu_notifier_age_page(struct mm_struct *mm,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#358: FILE: include/linux/mmu_notifier.h:129:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		struct mmu_notifier *__mn;				\
+		struct hlist_node *__n;					\
+									\
+		if (unlikely(!hlist_empty(&(mm)->mmu_notifier.head))) { \
+			rcu_read_lock();				\
+			hlist_for_each_entry_rcu(__mn, __n,		\
+					     &(mm)->mmu_notifier.head,	\
+					     hlist)			\
+				if (__mn->ops->function)		\
+					__mn->ops->function(__mn,	\
+							    mm,		\
+							    args);	\
+			rcu_read_unlock();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#358: FILE: include/linux/mmu_notifier.h:129:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		struct mmu_notifier *__mn;				\
+		struct hlist_node *__n;					\
+									\
+		if (unlikely(!hlist_empty(&(mm)->mmu_notifier.head))) { \
+			rcu_read_lock();				\
+			hlist_for_each_entry_rcu(__mn, __n,		\
+					     &(mm)->mmu_notifier.head,	\
+					     hlist)			\
+				if (__mn->ops->function)		\
+					__mn->ops->function(__mn,	\
+							    mm,		\
+							    args);	\
+			rcu_read_unlock();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mm' - possible side-effects?
#358: FILE: include/linux/mmu_notifier.h:129:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		struct mmu_notifier *__mn;				\
+		struct hlist_node *__n;					\
+									\
+		if (unlikely(!hlist_empty(&(mm)->mmu_notifier.head))) { \
+			rcu_read_lock();				\
+			hlist_for_each_entry_rcu(__mn, __n,		\
+					     &(mm)->mmu_notifier.head,	\
+					     hlist)			\
+				if (__mn->ops->function)		\
+					__mn->ops->function(__mn,	\
+							    mm,		\
+							    args);	\
+			rcu_read_unlock();				\
+		}							\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'function' may be better as '(function)' to avoid precedence issues
#384: FILE: include/linux/mmu_notifier.h:155:
+#define mmu_notifier(function, mm, args...)				\
+	do {								\
+		if (0) {						\
+			struct mmu_notifier *__mn;			\
+									\
+			__mn = (struct mmu_notifier *)(0x00ff);		\
+			__mn->ops->function(__mn, mm, args);		\
+		};							\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: include/linux/mmu_notifier.h:166:
+static inline void mmu_notifier_register(struct mmu_notifier *mn,
+						struct mm_struct *mm) {}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: include/linux/mmu_notifier.h:168:
+static inline void mmu_notifier_unregister(struct mmu_notifier *mn,
+						struct mm_struct *mm) {}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: include/linux/mmu_notifier.h:171:
+static inline int mmu_notifier_age_page(struct mm_struct *mm,
+				unsigned long address)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#419: FILE: mm/Kconfig:197:
+config MMU_NOTIFIER
+	def_bool y
+	bool "MMU notifier, for paging KVM/RDMA"

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#437: FILE: mm/mmu_notifier.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#438: FILE: mm/mmu_notifier.c:2:
+ *  linux/mm/mmu_notifier.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#442: FILE: mm/mmu_notifier.c:6:
+ *  ^I^IChristoph Lameter <clameter@sgi.com>$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: mm/mmu_notifier.c:49:
+		hlist_for_each_entry_rcu(mn, n,
+					  &mm->mmu_notifier.head, hlist) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 15 checks, 420 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000320998.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
