WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
- AS anticipation logic does not seem to be sufficient to provide BW difference

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: block/Kconfig.iosched:48:
+config IOSCHED_AS_HIER
+	bool "Anticipatory Hierarchical Scheduling support"
+	depends on IOSCHED_AS && CGROUPS
+	select ELV_FAIR_QUEUING
+	select GROUP_IOSCHED
+	default n
+	---help---
+	  Enable hierarhical scheduling in anticipatory. In this mode
+	  anticipatory keeps one IO queue per cgroup instead of a global
+	  queue. Elevator fair queuing logic ensures fairness among various
+	  queues.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:BRACES: braces {} should be used on all arms of this statement
#160: FILE: block/as-iosched.c:206:
+	if (as_batch_expired(ad, asq))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#162: FILE: block/as-iosched.c:208:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: block/as-iosched.c:211:
+		BUG_ON((asq->current_batch_time_left) < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: block/as-iosched.c:233:
+static void as_active_ioq_set(struct request_queue *q, void *sched_queue,
+				int coop)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: block/as-iosched.c:247:
+static int as_expire_ioq(struct request_queue *q, void *sched_queue,
+				int slice_expired, int force)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#325: FILE: block/elevator-fq.c:40:
+int elv_iosched_expire_ioq(struct request_queue *q, int slice_expired,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: block/elevator-fq.c:41:
+int elv_iosched_expire_ioq(struct request_queue *q, int slice_expired,
+					int force);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: block/elevator-fq.c:2879:
+ * ^I     is useful when elevator wants to drain iosched and wants to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: block/elevator-fq.c:2880:
+ * ^I     expire currnent active queue.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: block/elevator-fq.c:2883:
+ * ^I^I    wants to switch the queue. iosched should allow that until$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#391: FILE: block/elevator-fq.c:2884:
+ * ^I^I    and unless necessary. Currently AS can deny the switch if$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#392: FILE: block/elevator-fq.c:2885:
+ * ^I^I    in the middle of batch switch.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#394: FILE: block/elevator-fq.c:2887:
+ * ^I^I    if 0, time slice is still remaining. It is up to the iosched$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#395: FILE: block/elevator-fq.c:2888:
+ * ^I^I    whether it wants to wait on this queue or just want to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: block/elevator-fq.c:2889:
+ * ^I^I    expire it and move on to next queue.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#400: FILE: block/elevator-fq.c:2893:
+int elv_iosched_expire_ioq(struct request_queue *q, int slice_expired,
+					int force)

CHECK:BRACES: braces {} should be used on all arms of this statement
#428: FILE: block/elevator-fq.c:3007:
+	if (elv_iosched_expire_ioq(q, slice_expired, force))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#430: FILE: block/elevator-fq.c:3009:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 8 checks, 407 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000120130.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
