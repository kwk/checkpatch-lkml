WARNING:TYPO_SPELLING: 'te' may be misspelled - perhaps 'the'?
#28: 
This patch turns the set_p{te,md,ud,gd} functions into their
                           ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: include/asm-x86_64/pgtable.h:65:
+#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)
                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: include/asm-x86_64/pgtable.h:65:
+#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: include/asm-x86_64/pgtable.h:65:
+#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#66: FILE: include/asm-x86_64/pgtable.h:65:
+#define set_pte_at(mm,addr,ptep,pteval) set_pte(ptep,pteval)
                                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: include/asm-x86_64/pgtable.h:69:
+#define pte_clear(mm,addr,xp)	do { set_pte_at(mm, addr, xp, __pte(0)); } while (0)
                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#70: FILE: include/asm-x86_64/pgtable.h:69:
+#define pte_clear(mm,addr,xp)	do { set_pte_at(mm, addr, xp, __pte(0)); } while (0)
                          ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#70: FILE: include/asm-x86_64/pgtable.h:69:
+#define pte_clear(mm,addr,xp)	do { set_pte_at(mm, addr, xp, __pte(0)); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#71: FILE: include/asm-x86_64/pgtable.h:70:
+#define pmd_clear(xp)	do { set_pmd(xp, __pmd(0)); } while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#92: FILE: include/asm-x86_64/pgtable.h:85:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: include/asm-x86_64/pgtable.h:100:
 }
+static inline void native_pud_clear (pud_t *pud)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#114: FILE: include/asm-x86_64/pgtable.h:100:
+static inline void native_pud_clear (pud_t *pud)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#122: FILE: include/asm-x86_64/pgtable.h:105:
+static inline void native_pgd_clear (pgd_t * pgd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: include/asm-x86_64/pgtable.h:105:
+static inline void native_pgd_clear (pgd_t * pgd)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#128: FILE: include/asm-x86_64/pgtable.h:110:
+#define pte_ERROR(e) \
+	printk("%s:%d: bad pte %p(%016lx).\n", __FILE__, __LINE__, &(e), pte_val(e))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#129: FILE: include/asm-x86_64/pgtable.h:111:
+	printk("%s:%d: bad pte %p(%016lx).\n", __FILE__, __LINE__, &(e), pte_val(e))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#130: FILE: include/asm-x86_64/pgtable.h:112:
+#define pmd_ERROR(e) \
+	printk("%s:%d: bad pmd %p(%016lx).\n", __FILE__, __LINE__, &(e), pmd_val(e))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#131: FILE: include/asm-x86_64/pgtable.h:113:
+	printk("%s:%d: bad pmd %p(%016lx).\n", __FILE__, __LINE__, &(e), pmd_val(e))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#132: FILE: include/asm-x86_64/pgtable.h:114:
+#define pud_ERROR(e) \
+	printk("%s:%d: bad pud %p(%016lx).\n", __FILE__, __LINE__, &(e), pud_val(e))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#133: FILE: include/asm-x86_64/pgtable.h:115:
+	printk("%s:%d: bad pud %p(%016lx).\n", __FILE__, __LINE__, &(e), pud_val(e))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#134: FILE: include/asm-x86_64/pgtable.h:116:
+#define pgd_ERROR(e) \
+	printk("%s:%d: bad pgd %p(%016lx).\n", __FILE__, __LINE__, &(e), pgd_val(e))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#135: FILE: include/asm-x86_64/pgtable.h:117:
+	printk("%s:%d: bad pgd %p(%016lx).\n", __FILE__, __LINE__, &(e), pgd_val(e))

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: include/asm-x86_64/pgtable.h:127:
+	pte_t pte = __pte(xchg(&ptep->pte, 0));
+	pte_update(mm, addr, ptep);

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: include/asm-x86_64/pgtable.h:279:
+	unsigned long pte;
+	pte = (page_nr << PAGE_SHIFT);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#225: FILE: include/asm-x86_64/pgtable.h:355:
+static inline int ptep_test_and_clear_young(struct vm_area_struct *vma, unsigned long addr, pte_t *ptep)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#228: FILE: include/asm-x86_64/pgtable.h:358:
+	int ret = 0;
+	if (!pte_young(*ptep))

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#246: FILE: include/asm-x86_64/pgtable.h:376:
+static inline int pmd_large(pmd_t pte) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#259: FILE: include/asm-x86_64/pgtable.h:384:
+	unsigned long pte = pte_val(pte_old);
+	pte &= _PAGE_CHG_MASK;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 14 warnings, 6 checks, 219 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394672.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
