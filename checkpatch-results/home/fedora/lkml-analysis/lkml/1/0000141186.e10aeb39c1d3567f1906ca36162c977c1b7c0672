WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/aufs/debug.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR | S_IWGRP' are not preferred. Consider using octal permissions '0664'.
#63: FILE: fs/aufs/debug.c:18:
+module_param_named(debug, aufs_debug, int, S_IRUGO | S_IWUSR | S_IWGRP);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#68: FILE: fs/aufs/debug.c:23:
+		printk("%s" fmt, au_plevel, ##arg); \

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#80: FILE: fs/aufs/debug.c:35:
+	for (i = 0; i < AuSize_NHASH; i++) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#124: FILE: fs/aufs/debug.c:79:
+	BUILD_BUG_ON(sizeof(inode->i_blocks) != sizeof(unsigned long)
+		     && sizeof(inode->i_blocks) != sizeof(u64));

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: fs/aufs/debug.c:86:
+	dpri("i%d: i%lu, %s, cnt %d, nl %u, 0%o, sz %llu, blk %llu,"
+	     " ct %lld, np %lu, st 0x%lx, f 0x%x, g %x%s%.*s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#176: FILE: fs/aufs/debug.c:131:
+	     AuDLNPair(dentry->d_parent), AuDLNPair(dentry),

WARNING:LINE_SPACING: Missing a blank line after declarations
#181: FILE: fs/aufs/debug.c:136:
+		struct au_iinfo *iinfo = au_ii(dentry->d_inode);
+		if (iinfo)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#220: FILE: fs/aufs/debug.c:175:
+	if (bindex < 0
+	    && file->f_dentry

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#221: FILE: fs/aufs/debug.c:176:
+	    && file->f_dentry
+	    && au_test_aufs(file->f_dentry->d_sb)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#222: FILE: fs/aufs/debug.c:177:
+	    && au_test_aufs(file->f_dentry->d_sb)
+	    && au_fi(file))

WARNING:SPLIT_STRING: quoted string split across lines
#270: FILE: fs/aufs/debug.c:225:
+	dpri("s%d: {perm 0x%x, cnt %d, wbr %p}, "
+	     "%s, dev 0x%02x%02x, flags 0x%lx, cnt(BIAS) %d, active %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#271: FILE: fs/aufs/debug.c:226:
+	     "%s, dev 0x%02x%02x, flags 0x%lx, cnt(BIAS) %d, active %d, "
+	     "xino %d\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuBit>
#333: FILE: fs/aufs/debug.c:288:
+#define AuBit(name)	if (ia->ia_valid & ATTR_ ## name) \

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#333: FILE: fs/aufs/debug.c:288:
+#define AuBit(name)	if (ia->ia_valid & ATTR_ ## name) \
+				dpri(#name "\n")

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#358: FILE: fs/aufs/debug.c:313:
+void au_dbg_verify_dir_parent(struct dentry *dentry, unsigned int sigen)
                                                                   ^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#363: FILE: fs/aufs/debug.c:318:
+	AuDebugOn(!S_ISDIR(dentry->d_inode->i_mode)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#364: FILE: fs/aufs/debug.c:319:
+	AuDebugOn(!S_ISDIR(dentry->d_inode->i_mode)
+		  || IS_ROOT(dentry)

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#365: FILE: fs/aufs/debug.c:320:
+		  || au_digen(parent) != sigen);
 		                         ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#365: FILE: fs/aufs/debug.c:320:
+		  || IS_ROOT(dentry)
+		  || au_digen(parent) != sigen);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#369: FILE: fs/aufs/debug.c:324:
+void au_dbg_verify_nondir_parent(struct dentry *dentry, unsigned int sigen)
                                                                      ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#375: FILE: fs/aufs/debug.c:330:
+		  || au_digen(parent) != sigen);
 		                         ^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#375: FILE: fs/aufs/debug.c:330:
+	AuDebugOn(S_ISDIR(dentry->d_inode->i_mode)
+		  || au_digen(parent) != sigen);

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#379: FILE: fs/aufs/debug.c:334:
+void au_dbg_verify_gen(struct dentry *parent, unsigned int sigen)
                                                            ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#394: FILE: fs/aufs/debug.c:349:
+			AuDebugOn(au_digen(dentries[j]) != sigen);
 			                                   ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#417: FILE: fs/aufs/debug.c:372:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:CAMELCASE: Avoid CamelCase: <AuForceNoPlink>
#425: FILE: fs/aufs/debug.c:380:
+#ifdef AuForceNoPlink

CHECK:CAMELCASE: Avoid CamelCase: <AuForceNoXino>
#428: FILE: fs/aufs/debug.c:383:
+#ifdef AuForceNoXino

CHECK:CAMELCASE: Avoid CamelCase: <AuForceNoRefrof>
#431: FILE: fs/aufs/debug.c:386:
+#ifdef AuForceNoRefrof

CHECK:CAMELCASE: Avoid CamelCase: <AuForceHinotify>
#434: FILE: fs/aufs/debug.c:389:
+#ifdef AuForceHinotify

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn>
#451: FILE: fs/aufs/debug.c:406:
+	AuWarn("CONFIG_4KSTACKS is defined.\n");

CHECK:CAMELCASE: Avoid CamelCase: <AuForceNoBrs>
#454: FILE: fs/aufs/debug.c:409:
+#ifdef AuForceNoBrs

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#466: FILE: fs/aufs/debug.h:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: fs/aufs/debug.h:27:
+#define AuDebugOn(a)		BUG_ON(a)

WARNING:MEMORY_BARRIER: memory barrier without comment
#499: FILE: fs/aufs/debug.h:34:
+	smp_mb();

CHECK:CAMELCASE: Avoid CamelCase: <AuDpri>
#519: FILE: fs/aufs/debug.h:54:
+#define AuDpri(lvl, fmt, arg...) \

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#520: FILE: fs/aufs/debug.h:55:
+	printk(lvl AUFS_NAME " %s:%d:%s[%d]: " fmt, \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#522: FILE: fs/aufs/debug.h:57:
+#define AuDbg(fmt, arg...) do { \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: fs/aufs/debug.h:61:
+#define AuLabel(l) ^I^IAuDbg(#l "\n")$

CHECK:CAMELCASE: Avoid CamelCase: <AuLabel>
#526: FILE: fs/aufs/debug.h:61:
+#define AuLabel(l) 		AuDbg(#l "\n")

CHECK:CAMELCASE: Avoid CamelCase: <AuInfo>
#527: FILE: fs/aufs/debug.h:62:
+#define AuInfo(fmt, arg...)	AuDpri(KERN_INFO, fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuErr>
#529: FILE: fs/aufs/debug.h:64:
+#define AuErr(fmt, arg...)	AuDpri(KERN_ERR, fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#530: FILE: fs/aufs/debug.h:65:
+#define AuIOErr(fmt, arg...)	AuErr("I/O Error, " fmt, ##arg)

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn1>
#531: FILE: fs/aufs/debug.h:66:
+#define AuWarn1(fmt, arg...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuErr1>
#537: FILE: fs/aufs/debug.h:72:
+#define AuErr1(fmt, arg...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr1>
#543: FILE: fs/aufs/debug.h:78:
+#define AuIOErr1(fmt, arg...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupportMsg>
#549: FILE: fs/aufs/debug.h:84:
+#define AuUnsupportMsg	"This operation is not supported." \

CHECK:CAMELCASE: Avoid CamelCase: <AuUnsupport>
#551: FILE: fs/aufs/debug.h:86:
+#define AuUnsupport(fmt, args...) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#556: FILE: fs/aufs/debug.h:91:
+#define AuTraceErr(e) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#556: FILE: fs/aufs/debug.h:91:
+#define AuTraceErr(e) do { \
+	if (unlikely((e) < 0)) \
+		AuDbg("err %d\n", (int)(e)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErrPtr>
#561: FILE: fs/aufs/debug.h:96:
+#define AuTraceErrPtr(p) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#561: FILE: fs/aufs/debug.h:96:
+#define AuTraceErrPtr(p) do { \
+	if (IS_ERR(p)) \
+		AuDbg("err %ld\n", PTR_ERR(p)); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuLNPair>
#567: FILE: fs/aufs/debug.h:102:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#567: FILE: fs/aufs/debug.h:102:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qstr' - possible side-effects?
#567: FILE: fs/aufs/debug.h:102:
+#define AuLNPair(qstr)		(qstr)->len, (qstr)->name

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#582: FILE: fs/aufs/debug.h:117:
+void au_dpri_file(struct file *filp);
                                ^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#588: FILE: fs/aufs/debug.h:123:
+void au_dbg_verify_dir_parent(struct dentry *dentry, unsigned int sigen);
                                                                   ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#589: FILE: fs/aufs/debug.h:124:
+void au_dbg_verify_nondir_parent(struct dentry *dentry, unsigned int sigen);
                                                                      ^^^^^

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#590: FILE: fs/aufs/debug.h:125:
+void au_dbg_verify_gen(struct dentry *parent, unsigned int sigen);
                                                            ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgWhlist>
#596: FILE: fs/aufs/debug.h:131:
+#define AuDbgWhlist(w) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgVdir>
#601: FILE: fs/aufs/debug.h:136:
+#define AuDbgVdir(v) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgInode>
#606: FILE: fs/aufs/debug.h:141:
+#define AuDbgInode(i) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgDentry>
#611: FILE: fs/aufs/debug.h:146:
+#define AuDbgDentry(d) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgFile>
#616: FILE: fs/aufs/debug.h:151:
+#define AuDbgFile(f) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSb>
#621: FILE: fs/aufs/debug.h:156:
+#define AuDbgSb(sb) do { \

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSleep>
#626: FILE: fs/aufs/debug.h:161:
+#define AuDbgSleep(sec) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sec' - possible side-effects?
#626: FILE: fs/aufs/debug.h:161:
+#define AuDbgSleep(sec) do { \
+	AuDbg("sleep %d sec\n", sec); \
+	ssleep(sec); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgSleepJiffy>
#631: FILE: fs/aufs/debug.h:166:
+#define AuDbgSleepJiffy(jiffy) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'jiffy' - possible side-effects?
#631: FILE: fs/aufs/debug.h:166:
+#define AuDbgSleepJiffy(jiffy) do { \
+	AuDbg("sleep %d jiffies\n", jiffy); \
+	au_dbg_sleep_jiffy(jiffy); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuDbgIAttr>
#636: FILE: fs/aufs/debug.h:171:
+#define AuDbgIAttr(ia) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ia' - possible side-effects?
#636: FILE: fs/aufs/debug.h:171:
+#define AuDbgIAttr(ia) do { \
+	AuDbg("ia_valid 0x%x\n", (ia)->ia_valid); \
+	au_dbg_iattr(ia); \
+} while (0)

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#642: FILE: fs/aufs/debug.h:177:
+					    unsigned int sigen)
 					                 ^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#646: FILE: fs/aufs/debug.h:181:
+}
+static inline void au_dbg_verify_nondir_parent(struct dentry *dentry,

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#647: FILE: fs/aufs/debug.h:182:
+					   unsigned int sigen)
 					                ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/aufs/debug.h:182:
+static inline void au_dbg_verify_nondir_parent(struct dentry *dentry,
+					   unsigned int sigen)

WARNING:TYPO_SPELLING: 'sigen' may be misspelled - perhaps 'sign'?
#651: FILE: fs/aufs/debug.h:186:
+static inline void au_dbg_verify_gen(struct dentry *parent, unsigned int sigen)
                                                                          ^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#651: FILE: fs/aufs/debug.h:186:
+}
+static inline void au_dbg_verify_gen(struct dentry *parent, unsigned int sigen)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#655: FILE: fs/aufs/debug.h:190:
+}
+static inline void au_dbg_verify_hf(struct au_finfo *finfo)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#659: FILE: fs/aufs/debug.h:194:
+}
+static inline void au_dbg_verify_kthread(void)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#668: FILE: fs/aufs/debug.h:203:
+}
+static inline void au_debug_sbinfo_init(struct au_sbinfo *sbinfo)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#672: FILE: fs/aufs/debug.h:207:
+}
+#define AuDbgWhlist(w)		do {} while (0)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#703: FILE: fs/aufs/debug.h:238:
+}
+#define au_sysrq_fin()		do {} while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#715: FILE: fs/aufs/sysrq.c:1:
+/*

WARNING:TYPO_SPELLING: 'hanlder' may be misspelled - perhaps 'handler'?
#725: FILE: fs/aufs/sysrq.c:11:
+ * magic sysrq hanlder
                ^^^^^^^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#754: FILE: fs/aufs/sysrq.c:40:
+#if 0

WARNING:LINE_SPACING: Missing a blank line after declarations
#756: FILE: fs/aufs/sysrq.c:42:
+	struct inode *i;
+	pr_warning(AUFS_NAME ": isolated inode\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#774: FILE: fs/aufs/sysrq.c:60:
+module_param_named(sysrq, aufs_sysrq_key, charp, S_IRUGO);

WARNING:LINE_SPACING: Missing a blank line after declarations
#817: FILE: fs/aufs/sysrq.c:103:
+	int err;
+	err = unregister_sysrq_key(*aufs_sysrq_key, &au_sysrq_op);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141186.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 33 warnings, 54 checks, 763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141186.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
