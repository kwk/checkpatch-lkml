ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#74: FILE: drivers/serial/crisv10.c:591:
+static int rs_write(struct tty_struct * tty,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#79: FILE: drivers/serial/crisv10.c:594:
+static int e100_write_rs485(struct tty_struct * tty, const unsigned char *buf, int count);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: drivers/serial/crisv10.c:2130:
+  local_irq_save(timer_flags); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: drivers/serial/crisv10.c:2144:
+  local_irq_restore(timer_flags); \$

WARNING:LINE_SPACING: Missing a blank line after declarations
#641: FILE: drivers/serial/crisv10.c:2783:
+					struct tty_struct *tty = info->tty;
+					tty_insert_flip_char(tty, 0, flag);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#669: FILE: drivers/serial/crisv10.c:2813:
+		tty_insert_flip_char(tty, IO_EXTRACT(R_SERIAL0_READ, data_in, data_read), TTY_NORMAL);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#781: FILE: drivers/serial/crisv10.c:3148:
+do_softint(struct work_struct* work)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#876: FILE: drivers/serial/crisv10.c:3568:
+static int rs_raw_write(struct tty_struct * tty,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#952: FILE: drivers/serial/crisv10.c:3640:
+rs_write(struct tty_struct * tty,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1025: FILE: drivers/serial/crisv10.c:3987:
+	struct e100_serial * info = (struct e100_serial *)tty->driver_data;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1056: FILE: drivers/serial/crisv10.c:4005:
+rs_tiocmset(struct tty_struct *tty, struct file * file, unsigned int set, unsigned int clear)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1062: FILE: drivers/serial/crisv10.c:4007:
+	struct e100_serial * info = (struct e100_serial *)tty->driver_data;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1082: FILE: drivers/serial/crisv10.c:4009:
+	if (clear & TIOCM_RTS) {
 			e100_rts(info, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1082: FILE: drivers/serial/crisv10.c:4009:
+	if (clear & TIOCM_RTS) {
 			e100_rts(info, 0);
 		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1086: FILE: drivers/serial/crisv10.c:4012:
+	if (clear & TIOCM_DTR) {
 			e100_dtr(info, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1086: FILE: drivers/serial/crisv10.c:4012:
+	if (clear & TIOCM_DTR) {
 			e100_dtr(info, 0);
 		}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1091: FILE: drivers/serial/crisv10.c:4016:
+	if (clear & TIOCM_RI) {
 			e100_ri_out(info, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1091: FILE: drivers/serial/crisv10.c:4016:
+	if (clear & TIOCM_RI) {
 			e100_ri_out(info, 0);
 		}

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1095: FILE: drivers/serial/crisv10.c:4019:
+	if (clear & TIOCM_CD) {
 			e100_cd_out(info, 0);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1095: FILE: drivers/serial/crisv10.c:4019:
+	if (clear & TIOCM_CD) {
 			e100_cd_out(info, 0);
 		}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1103: FILE: drivers/serial/crisv10.c:4023:
+	if (set & TIOCM_RTS) {
+		e100_rts(info, 1);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1106: FILE: drivers/serial/crisv10.c:4026:
+	if (set & TIOCM_DTR) {
+		e100_dtr(info, 1);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1115: FILE: drivers/serial/crisv10.c:4030:
+	if (set & TIOCM_RI) {
+		e100_ri_out(info, 1);
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1118: FILE: drivers/serial/crisv10.c:4033:
+	if (set & TIOCM_CD) {
+		e100_cd_out(info, 1);
 	}

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#1152: FILE: drivers/serial/crisv10.c:4054:
+	printk("ser%i: modem state: %i 0x%08X\n", info->line, result, result);
 	        ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1152: FILE: drivers/serial/crisv10.c:4054:
+	printk("ser%i: modem state: %i 0x%08X\n", info->line, result, result);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1157: FILE: drivers/serial/crisv10.c:4059:
+		printk("state: %s\n", s);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1166: FILE: drivers/serial/crisv10.c:4066:
 
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1285: FILE: drivers/serial/crisv10.c:4279:
+		printk("DMA irq '%s' freed\n", info->dma_in_irq_description);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1294: FILE: drivers/serial/crisv10.c:4288:
+		printk("DMA irq '%s' freed\n", info->dma_out_irq_description);

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1369: FILE: drivers/serial/crisv10.c:4531:
+				printk(KERN_WARNING "DMA irq '%s' busy; falling back to non-DMA mode\n", info->dma_in_irq_description);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1369: FILE: drivers/serial/crisv10.c:4531:
+				printk(KERN_WARNING "DMA irq '%s' busy; falling back to non-DMA mode\n", info->dma_in_irq_description);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#1377: FILE: drivers/serial/crisv10.c:4539:
+				printk(KERN_WARNING "DMA '%s' busy; falling back to non-DMA mode\n", info->dma_in_irq_description);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1377: FILE: drivers/serial/crisv10.c:4539:
+				printk(KERN_WARNING "DMA '%s' busy; falling back to non-DMA mode\n", info->dma_in_irq_description);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1382: FILE: drivers/serial/crisv10.c:4544:
+			else printk("DMA irq '%s' allocated\n", info->dma_in_irq_description);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1382: FILE: drivers/serial/crisv10.c:4544:
+			else printk("DMA irq '%s' allocated\n", info->dma_in_irq_description);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1387: FILE: drivers/serial/crisv10.c:4549:
+			if (request_irq(info->dma_out_irq_nbr,
+					       tr_interrupt,

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1391: FILE: drivers/serial/crisv10.c:4553:
+				printk(KERN_WARNING "DMA irq '%s' busy; falling back to non-DMA mode\n", info->dma_out_irq_description);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1391: FILE: drivers/serial/crisv10.c:4553:
+				printk(KERN_WARNING "DMA irq '%s' busy; falling back to non-DMA mode\n", info->dma_out_irq_description);

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#1399: FILE: drivers/serial/crisv10.c:4561:
+				printk(KERN_WARNING "DMA '%s' busy; falling back to non-DMA mode\n", info->dma_out_irq_description);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1399: FILE: drivers/serial/crisv10.c:4561:
+				printk(KERN_WARNING "DMA '%s' busy; falling back to non-DMA mode\n", info->dma_out_irq_description);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1404: FILE: drivers/serial/crisv10.c:4566:
+			else printk("DMA irq '%s' allocated\n", info->dma_out_irq_description);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1404: FILE: drivers/serial/crisv10.c:4566:
+			else printk("DMA irq '%s' allocated\n", info->dma_out_irq_description);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1431: FILE: drivers/serial/crisv10.c:4592:
 
+	}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1433: FILE: drivers/serial/crisv10.c:4594:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1452: FILE: drivers/serial/crisv10.c:4613:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1476: FILE: drivers/serial/crisv10.c:4830:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1476: FILE: drivers/serial/crisv10.c:4830:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1476: FILE: drivers/serial/crisv10.c:4830:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1476: FILE: drivers/serial/crisv10.c:4830:
+ 		printk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1482: FILE: drivers/serial/crisv10.c:4836:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1482: FILE: drivers/serial/crisv10.c:4836:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1482: FILE: drivers/serial/crisv10.c:4836:
+ ^I^Iprintk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1482: FILE: drivers/serial/crisv10.c:4836:
+ 		printk(KERN_CRIT "ETRAX100LX serial: Could not allocate RS485 pin\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#1495: FILE: drivers/serial/crisv10.c:4868:
+				printk(KERN_CRIT "ETRAX100LX async serial: Could not allocate IO pins for %s, port %d\n",

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1567: FILE: drivers/serial/crisv10.c:4929:
+	if (request_irq(SERIAL_IRQ_NBR, ser_interrupt, IRQF_SHARED | IRQF_DISABLED, "serial ", driver))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1568: FILE: drivers/serial/crisv10.c:4930:
+		panic("%s: Failed to request irq8", __FUNCTION__);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1585: FILE: drivers/serial/crisv10.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1624: FILE: drivers/serial/crisv10.h:40:
+	volatile u8		*port; /* R_SERIALx_CTRL */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1628: FILE: drivers/serial/crisv10.h:44:
+	volatile u8		*oclrintradr; /* adr to R_DMA_CHx_CLR_INTR */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1629: FILE: drivers/serial/crisv10.h:45:
+	volatile u32		*ofirstadr;   /* adr to R_DMA_CHx_FIRST */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1630: FILE: drivers/serial/crisv10.h:46:
+	volatile u8		*ocmdadr;     /* adr to R_DMA_CHx_CMD */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1631: FILE: drivers/serial/crisv10.h:47:
+	const volatile u8	*ostatusadr;  /* adr to R_DMA_CHx_STATUS */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1634: FILE: drivers/serial/crisv10.h:50:
+	volatile u8		*iclrintradr; /* adr to R_DMA_CHx_CLR_INTR */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1635: FILE: drivers/serial/crisv10.h:51:
+	volatile u32		*ifirstadr;   /* adr to R_DMA_CHx_FIRST */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1636: FILE: drivers/serial/crisv10.h:52:
+	volatile u8		*icmdadr;     /* adr to R_DMA_CHx_CMD */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1637: FILE: drivers/serial/crisv10.h:53:
+	volatile u32		*idescradr;   /* adr to R_DMA_CHx_DESCR */

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1672: FILE: drivers/serial/crisv10.h:88:
+	volatile int		tr_running; /* 1 if output is running */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363350.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 51 warnings, 4 checks, 1611 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000363350.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
