WARNING:TYPO_SPELLING: 'addes' may be misspelled - perhaps 'adds'?
#33: 
- addes boot opttion to set relaxed_zone_order. ia64 is supported now.
  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
But, if Node(0)'s memory is too small (near or below 4G), Node(0)'s process has

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#82: 
Signed-Off-By: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#92: FILE: kernel/sysctl.c:83:
+extern int sysctl_relaxed_zone_order;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#174: FILE: mm/page_alloc.c:2185:
+		int distance = node_distance(local_node, node);
+		if (distance > RECLAIM_DISTANCE)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#198: FILE: mm/page_alloc.c:2209:
+int sysctl_relaxed_zone_order = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: mm/page_alloc.c:2220:
+int sysctl_relaxed_zone_order_handler(ctl_table *table, int write,
+		struct file *file, void __user *buffer, size_t *length,

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: mm/page_alloc.c:2224:
+	int oldval = sysctl_relaxed_zone_order;
+	proc_dointvec_minmax(table, write, file, buffer, length, ppos);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oldval != sysctl_relaxed_zone_order'
#214: FILE: mm/page_alloc.c:2225:
+	if (write && (oldval != sysctl_relaxed_zone_order))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#260: FILE: include/linux/mmzone.h:611:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: include/linux/mmzone.h:612:
+extern int sysctl_relaxed_zone_order_handler(struct ctl_table *, int,
+			struct file *, void __user *, size_t *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: include/linux/mmzone.h:614:
+extern int cmdline_parse_relaxed_zone_order(char *p);

WARNING:TYPO_SPELLING: 'aggresively' may be misspelled - perhaps 'aggressively'?
#305: FILE: Documentation/sysctl/vm.txt:285:
+This allows you to allocate local memory more aggresively.
                                               ^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: arch/ia64/mm/discontig.c:30:
 
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 13 warnings, 6 checks, 212 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440743.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
