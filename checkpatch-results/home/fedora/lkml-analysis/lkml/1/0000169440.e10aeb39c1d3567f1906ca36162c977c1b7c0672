CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: fs/notify/fsnotify.h:18:
+extern void fsnotify_flush_notif(struct fsnotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->mask == new->mask'
#130: FILE: fs/notify/notification.c:95:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->flag == new->flag)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->to_tell == new->to_tell'
#130: FILE: fs/notify/notification.c:95:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->flag == new->flag)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->flag == new->flag'
#130: FILE: fs/notify/notification.c:95:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->flag == new->flag)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->flag == FSNOTIFY_EVENT_INODE'
#133: FILE: fs/notify/notification.c:98:
+		if ((old->flag == FSNOTIFY_EVENT_INODE) &&
+		    (old->inode == new->inode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->inode == new->inode'
#133: FILE: fs/notify/notification.c:98:
+		if ((old->flag == FSNOTIFY_EVENT_INODE) &&
+		    (old->inode == new->inode))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#137: FILE: fs/notify/notification.c:102:
+		else if ((old->flag == FSNOTIFY_EVENT_PATH) &&
+		    (old->path.mnt == new->path.mnt) &&

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#150: FILE: fs/notify/notification.c:115:
+int fsnotify_add_notif_event(struct fsnotify_group *group, struct fsnotify_event *event, struct fsnotify_event_private_data *priv)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#224: FILE: fs/notify/notification.c:186:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#251: FILE: fs/notify/notification.c:213:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#262: FILE: fs/notify/notification.c:224:
+	 * play with lockless... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#291: FILE: fs/notify/notification.c:253:
+struct fsnotify_event *fsnotify_create_event(struct inode *to_tell, __u64 mask, void *data, int data_is)

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#307: FILE: fs/notify/notification.c:298:
+	event_holder_kmem_cache = kmem_cache_create("fsnotify_event_holder", sizeof(struct fsnotify_event_holder), 0, SLAB_PANIC, NULL);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#332: FILE: include/linux/fsnotify_backend.h:107:
+	struct list_head notification_list;	/* list of event_holder this group needs to send to userspace */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#333: FILE: include/linux/fsnotify_backend.h:108:
+	wait_queue_head_t notification_waitq;	/* read() on the notification file blocks on this waitq */

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#379: FILE: include/linux/fsnotify_backend.h:215:
+extern int fsnotify_add_notif_event(struct fsnotify_group *group, struct fsnotify_event *event, struct fsnotify_event_private_data *priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#379: FILE: include/linux/fsnotify_backend.h:215:
+extern int fsnotify_add_notif_event(struct fsnotify_group *group, struct fsnotify_event *event, struct fsnotify_event_private_data *priv);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/fsnotify_backend.h:216:
+extern int fsnotify_check_notif_queue(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/fsnotify_backend.h:217:
+extern struct fsnotify_event *fsnotify_peek_notif_event(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/fsnotify_backend.h:218:
+extern struct fsnotify_event *fsnotify_remove_notif_event(struct fsnotify_group *group);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169440.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 11 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000169440.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
