WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
similar manner to the reservations taken for MAP_SHARED mappings. The reserve count is

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: fs/hugetlbfs/inode.c:107:
+	if (hugetlb_reserve_pages(inode,
+				vma->vm_pgoff >> (HPAGE_SHIFT-PAGE_SHIFT),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#74: FILE: fs/hugetlbfs/inode.c:107:
+				vma->vm_pgoff >> (HPAGE_SHIFT-PAGE_SHIFT),
 				                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#105: FILE: include/linux/hugetlb.h:35:
+int hugetlb_reserve_pages(struct inode *inode, long from, long to,
+						struct vm_area_struct *vma);

WARNING:LINE_SPACING: Missing a blank line after declarations
#170: FILE: mm/hugetlb.c:59:
+	unsigned long reserve;
+	VM_BUG_ON(vma->vm_flags & VM_SHARED);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: mm/hugetlb.c:74:
+static void set_vma_resv_huge_pages(struct vm_area_struct *vma,
+							unsigned long reserve)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#231: FILE: mm/hugetlb.c:167:
+	if (!(vma->vm_flags & VM_SHARED) &&
+			!vma_resv_huge_pages(vma) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: mm/hugetlb.c:545:
+	if (!(vma->vm_flags & VM_SHARED) &&
+				!vma_resv_huge_pages(vma)) {

CHECK:SPACING: No space is necessary after a cast
#316: FILE: mm/hugetlb.c:564:
+	set_page_private(page, (unsigned long) mapping);

WARNING:LINE_SPACING: Missing a blank line after declarations
#332: FILE: mm/hugetlb.c:817:
+	unsigned long reserve = vma_resv_huge_pages(vma);
+	if (reserve)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: mm/hugetlb.c:1355:
+int hugetlb_reserve_pages(struct inode *inode,
+					long from, long to,

CHECK:BRACES: braces {} should be used on all arms of this statement
#365: FILE: mm/hugetlb.c:1366:
+	if (!vma || vma->vm_flags & VM_SHARED)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#367: FILE: mm/hugetlb.c:1368:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000283749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 10 checks, 294 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000283749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
