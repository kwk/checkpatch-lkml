WARNING:LINE_SPACING: Missing a blank line after declarations
#62: FILE: fs/stat.c:42:
+		int i;
+		stat->size = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "info"
#63: FILE: fs/stat.c:43:
+		if (info != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#66: FILE: fs/stat.c:46:
+				const struct pipe_buffer *buf = &info->bufs[i];
+				if (buf != NULL && buf->page != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buf"
#66: FILE: fs/stat.c:46:
+				if (buf != NULL && buf->page != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buf->page"
#66: FILE: fs/stat.c:46:
+				if (buf != NULL && buf->page != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: fs/stat.c:53:
+		loff_t (*uxsize)(struct inode *) = __symbol_get("unixsock_size");
+		if (uxsize != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "uxsize"
#73: FILE: fs/stat.c:53:
+		if (uxsize != NULL) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/net/af_unix.h:92:
+extern loff_t unixsock_size(struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#116: FILE: include/net/af_unix.h:92:
+extern loff_t unixsock_size(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#129: FILE: net/unix/af_unix.c:747:
+loff_t unixsock_size(struct inode *inode) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#130: FILE: net/unix/af_unix.c:748:
+    struct sock *sk = unix_find_socket_byinode(inode);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: net/unix/af_unix.c:749:
+    loff_t eax;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: net/unix/af_unix.c:751:
+    if(sk == NULL) { return 0; }$

ERROR:SPACING: space required before the open parenthesis '('
#133: FILE: net/unix/af_unix.c:751:
+    if(sk == NULL) { return 0; }

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: net/unix/af_unix.c:751:
+    if(sk == NULL) { return 0; }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#133: FILE: net/unix/af_unix.c:751:
+    if(sk == NULL) { return 0; }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#133: FILE: net/unix/af_unix.c:751:
+    if(sk == NULL) { return 0; }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: net/unix/af_unix.c:752:
+    eax = sk->sk_rcvbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: net/unix/af_unix.c:753:
+    sock_put(sk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: net/unix/af_unix.c:754:
+    return eax;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450125.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 11 warnings, 6 checks, 82 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000450125.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
