CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#44: FILE: fs/9p/v9fs.c:134:
+	v9ses->maxdata = (64*1024);
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#85: FILE: fs/9p/vfs_addr.c:69:
+		struct kvec kv = {buffer+offset, PAGE_SIZE-count};
 		                        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#85: FILE: fs/9p/vfs_addr.c:69:
+		struct kvec kv = {buffer+offset, PAGE_SIZE-count};
 		                                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#86: FILE: fs/9p/vfs_addr.c:70:
+		struct kvec kv = {buffer+offset, PAGE_SIZE-count};
+		retval = p9_client_readv(fid, &kv, offset, 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/9p/vfs_addr.c:93:
+static int v9fs_vfs_readpages(struct file *file, struct address_space *mapping,
+	struct list_head *page_list, unsigned num_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: fs/9p/vfs_addr.c:93:
+	struct list_head *page_list, unsigned num_pages)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#125: FILE: fs/9p/vfs_addr.c:104:
+	struct kvec *kv = kmalloc(sizeof(struct kvec)*num_pages, GFP_KERNEL);
 	                                             ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*kv)...) over kmalloc(sizeof(struct kvec)...)
#125: FILE: fs/9p/vfs_addr.c:104:
+	struct kvec *kv = kmalloc(sizeof(struct kvec)*num_pages, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#142: FILE: fs/9p/vfs_addr.c:121:
+		BUG_ON(count > num_pages);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: fs/9p/vfs_addr.c:123:
+		if (add_to_page_cache(tmp_page, mapping,
+					tmp_page->index, GFP_KERNEL)) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: fs/9p/vfs_addr.c:159:
+      .readpages = v9fs_vfs_readpages,$

CHECK:BRACES: braces {} should be used on all arms of this statement
#232: FILE: net/9p/client.c:478:
+		if (n) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#235: FILE: net/9p/client.c:481:
+			memmove(kv[kp->num].iov_base+kp->offset, buf, count);
 			                            ^

CHECK:BRACES: Unbalanced braces around else statement
#237: FILE: net/9p/client.c:483:
+		} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#238: FILE: net/9p/client.c:484:
+			memset(kv[kp->num].iov_base+kp->offset, 0, count);
 			                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 11 checks, 263 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000380978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
