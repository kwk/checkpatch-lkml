WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
      [S390] smp: disable preemption in smp_call_function/smp_call_function_on

CHECK:SPACING: No space is necessary after a cast
#174: FILE: arch/s390/kernel/ipl.c:1081:
+	dump_prefix_page = (u32)(unsigned long) lc;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#229: FILE: arch/s390/kernel/machine_kexec.c:35:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#511: FILE: arch/s390/mm/fault.c:306:
+	if (unlikely(space == 0 || in_atomic() || !mm))

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'space == 2'
#530: FILE: arch/s390/mm/fault.c:324:
+	if (unlikely((space == 2) && !(vma->vm_flags & VM_EXEC)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#628: FILE: drivers/s390/cio/device_fsm.c:343:
+	if (sch->driver && sch->driver->notify) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#632: FILE: drivers/s390/cio/device_fsm.c:347:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#668: FILE: drivers/s390/cio/device_fsm.c:559:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#690: FILE: drivers/s390/cio/device_fsm.c:627:
+		if (cdev->online) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#695: FILE: drivers/s390/cio/device_fsm.c:632:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#714: FILE: drivers/s390/cio/device_fsm.c:782:
+	if (sch->driver->notify) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#719: FILE: drivers/s390/cio/device_fsm.c:787:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 9 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460325.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
