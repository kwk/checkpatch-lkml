ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#75: FILE: drivers/serial/Kconfig:331:
to the

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#78: FILE: drivers/serial/Kconfig:334:
+config SERIAL_PCI_PL011
+	tristate "PL011 serial port based on PCI support"
+	depends on PCI
+	select SERIAL_CORE
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#83: FILE: drivers/serial/Kconfig:339:
+config SERIAL_PCI_PL011_CONSOLE
+	bool "Support for console on PL011 serial port based on PCI"
+	depends on SERIAL_PCI_PL011=y
+	select SERIAL_CORE_CONSOLE
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#104: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#109: FILE: drivers/serial/pl011-pci.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#110: FILE: drivers/serial/pl011-pci.c:2:
+* linux/drivers/serial/pl011-pci.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#110: FILE: drivers/serial/pl011-pci.c:2:
+/*
+* linux/drivers/serial/pl011-pci.c

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#127: FILE: drivers/serial/pl011-pci.c:19:
+* along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#128: FILE: drivers/serial/pl011-pci.c:20:
+* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#149: FILE: drivers/serial/pl011-pci.c:40:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#167: FILE: drivers/serial/pl011-pci.c:57:
+	(UART011_DR_OE|UART011_DR_BE|UART011_DR_PE|UART011_DR_FE)
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#167: FILE: drivers/serial/pl011-pci.c:57:
+	(UART011_DR_OE|UART011_DR_BE|UART011_DR_PE|UART011_DR_FE)
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#167: FILE: drivers/serial/pl011-pci.c:57:
+	(UART011_DR_OE|UART011_DR_BE|UART011_DR_PE|UART011_DR_FE)
 	                                          ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#169: FILE: drivers/serial/pl011-pci.c:59:
+#define UART_DUMMY_DR_RX	(1 << 16)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPACING: missing space after struct definition
#184: FILE: drivers/serial/pl011-pci.c:74:
+struct pci_pl011_adapter{

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#185: FILE: drivers/serial/pl011-pci.c:75:
+struct pci_pl011_adapter{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#191: FILE: drivers/serial/pl011-pci.c:81:
+	spinlock_t	intr_lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#209: FILE: drivers/serial/pl011-pci.c:99:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#213: FILE: drivers/serial/pl011-pci.c:102:
+/** There is by now at least one vendor with differing details, so
+struct vendor_data {

CHECK:BRACES: braces {} should be used on all arms of this statement
#275: FILE: drivers/serial/pl011-pci.c:161:
+			if (ch & UART011_DR_BE) {
[...]
+			} else if (ch & UART011_DR_PE)
[...]
+			else if (ch & UART011_DR_FE)
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#302: FILE: drivers/serial/pl011-pci.c:187:
+		uart_insert_char(&uap->port, ch, UART011_DR_OE, ch,
+

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#383: FILE: drivers/serial/pl011-pci.c:263:
+			writel(status & ~(UART011_TXIS|UART011_RTIS|
 			                              ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#383: FILE: drivers/serial/pl011-pci.c:263:
+			writel(status & ~(UART011_TXIS|UART011_RTIS|
 			                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#387: FILE: drivers/serial/pl011-pci.c:267:
+			if (status & (UART011_RTIS|UART011_RXIS))
 			                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#389: FILE: drivers/serial/pl011-pci.c:269:
+			if (status & (UART011_DSRMIS|UART011_DCDMIS|
 			                            ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#389: FILE: drivers/serial/pl011-pci.c:269:
+			if (status & (UART011_DSRMIS|UART011_DCDMIS|
 			                                           ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#390: FILE: drivers/serial/pl011-pci.c:270:
+				      UART011_CTSMIS|UART011_RIMIS))
 				                    ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#412: FILE: drivers/serial/pl011-pci.c:292:
+	unsigned int status = readl(uap->port.membase + UART01x_FR);
+	return status & (UART01x_FR_BUSY|UART01x_FR_TXFF) ? 0 :

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#412: FILE: drivers/serial/pl011-pci.c:292:
+	return status & (UART01x_FR_BUSY|UART01x_FR_TXFF) ? 0 :
 	                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'uartbit' may be better as '(uartbit)' to avoid precedence issues
#422: FILE: drivers/serial/pl011-pci.c:301:
+#define TIOCMBIT(uartbit, tiocmbit)		\
+	{					\
+		if (status & uartbit)		\
+			result |= tiocmbit;	\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tiocmbit' may be better as '(tiocmbit)' to avoid precedence issues
#443: FILE: drivers/serial/pl011-pci.c:322:
+#define	TIOCMBIT(tiocmbit, uartbit)		\
+	do {					\
+		if (mctrl & tiocmbit)		\
+			cr |= uartbit;		\
+		else				\
+			cr &= ~uartbit;		\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'uartbit' - possible side-effects?
#443: FILE: drivers/serial/pl011-pci.c:322:
+#define	TIOCMBIT(tiocmbit, uartbit)		\
+	do {					\
+		if (mctrl & tiocmbit)		\
+			cr |= uartbit;		\
+		else				\
+			cr &= ~uartbit;		\
+	} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: drivers/serial/pl011-pci.c:370:
+static void pl011_put_poll_char(struct uart_port *port,
+			 unsigned char ch)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: drivers/serial/pl011-pci.c:393:
+	retval = request_irq(uap->port.irq, pl011_int,
+		IRQF_DISABLED | IRQF_SHARED, "uart-pl011", uap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#591: FILE: drivers/serial/pl011-pci.c:469:
+pl011_set_termios(struct uart_port *port, struct ktermios *termios,
+		     struct ktermios *old)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/serial/pl011-pci.c:479:
+	baud = uart_get_baud_rate(port, termios, old, 0,
+	quot = port->uartclk * 4 / baud;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'port->private_data'
#627: FILE: drivers/serial/pl011-pci.c:504:
+		if (*(int *)(port->private_data) == PL011_HWFC) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#734: FILE: drivers/serial/pl011-pci.c:609:
+	int ret = 0;
+	if (ser->type != PORT_UNKNOWN && ser->type != PORT_AMBA)

WARNING:CONST_STRUCT: struct uart_ops should normally be const
#743: FILE: drivers/serial/pl011-pci.c:618:
+static struct uart_ops pci_pl011_pops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#807: FILE: drivers/serial/pl011-pci.c:681:
+pl011_console_get_options(struct uart_amba_port *uap, int *baud,
+			     int *parity, int *bits)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: drivers/serial/pl011-pci.c:729:
+		uart_parse_options(options, &baud, &parity, &bits,
+	else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#881: FILE: drivers/serial/pl011-pci.c:751:
+
+

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#892: FILE: drivers/serial/pl011-pci.c:762:
+static int __devinit

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*adapter)...) over kzalloc(sizeof(struct pci_pl011_adapter)...)
#915: FILE: drivers/serial/pl011-pci.c:785:
+	adapter = kzalloc(sizeof(struct pci_pl011_adapter), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#917: FILE: drivers/serial/pl011-pci.c:787:
+	if (!adapter) {
+		dev_err(&pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: drivers/serial/pl011-pci.c:788:
+		dev_err(&pdev->dev,
failed\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#956: FILE: drivers/serial/pl011-pci.c:825:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Device>
#961: FILE: drivers/serial/pl011-pci.c:830:
+			"Device has no PCI Memory resources, "

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Memory>
#961: FILE: drivers/serial/pl011-pci.c:830:
+			"Device has no PCI Memory resources, "

CHECK:CAMELCASE: Avoid CamelCase: <Added>
#987: FILE: drivers/serial/pl011-pci.c:854:
+			printk(KERN_INFO "Added uart port Failed\n");

CHECK:CAMELCASE: Avoid CamelCase: <Failed>
#987: FILE: drivers/serial/pl011-pci.c:854:
+			printk(KERN_INFO "Added uart port Failed\n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#989: FILE: drivers/serial/pl011-pci.c:856:
+			printk(KERN_INFO "Added uart port \n");

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#994: FILE: drivers/serial/pl011-pci.c:861:
+	dev_info(&pdev->dev, "adapter %d: (rev %d), irq %d\n",
 	                              ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#994: FILE: drivers/serial/pl011-pci.c:861:
+	dev_info(&pdev->dev, "adapter %d: (rev %d), irq %d\n",
 	                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#994: FILE: drivers/serial/pl011-pci.c:861:
+	dev_info(&pdev->dev, "adapter %d: (rev %d), irq %d\n",
 	                                       ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#994: FILE: drivers/serial/pl011-pci.c:861:
+	dev_info(&pdev->dev, "adapter %d: (rev %d), irq %d\n",
 	                                                ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: drivers/serial/pl011-pci.c:868:
+ out_iounmap:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: drivers/serial/pl011-pci.c:870:
+ out_kfree_adapter:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: drivers/serial/pl011-pci.c:872:
+ out_release_regions:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: drivers/serial/pl011-pci.c:874:
+ out_disable_device:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1010: FILE: drivers/serial/pl011-pci.c:876:
+ out:$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1019: FILE: drivers/serial/pl011-pci.c:885:
+
+

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1060: FILE: drivers/serial/pl011-pci.c:926:
+	printk(KERN_INFO "Serial: PCI PL011 UART driver\n");
 	                        ^

CHECK:CAMELCASE: Avoid CamelCase: <Serial>
#1060: FILE: drivers/serial/pl011-pci.c:926:
+	printk(KERN_INFO "Serial: PCI PL011 UART driver\n");

CHECK:CAMELCASE: Avoid CamelCase: <Driver>
#1080: FILE: drivers/serial/pl011-pci.c:946:
+MODULE_DESCRIPTION("Driver for the pl011 based on PCI");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1082: FILE: drivers/serial/pl011-pci.c:948:
+MODULE_SUPPORTED_DEVICE("pl011-pci");
                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047653.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 19 warnings, 42 checks, 999 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047653.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
