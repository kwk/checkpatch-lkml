CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: mm/internal.h:64:
+extern int mlock_vma_pages_range(struct vm_area_struct *vma,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: mm/internal.h:65:
+extern int mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: mm/internal.h:66:
+extern void munlock_vma_pages_all(struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: mm/internal.h:106:
+extern void mlock_vma_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#222: FILE: mm/internal.h:117:
+extern void __clear_page_mlock(struct page *page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#239: FILE: mm/internal.h:134:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#245: FILE: mm/internal.h:140:
+}
+static inline void clear_page_mlock(struct page *page) { }

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: mm/mlock.c:77:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: mm/mlock.c:103:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: mm/mlock.c:119:
+static int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: mm/mlock.c:144:
+		ret = get_user_pages(current, mm, addr,
+				min_t(int, nr_pages, ARRAY_SIZE(pages)),

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#396: FILE: mm/mlock.c:150:
+		 * We'll mlock the the pages if/when they get faulted in.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#451: FILE: mm/mlock.c:205:
+static int __munlock_pte_handler(pte_t *ptep, unsigned long addr,
+				   unsigned long end, void *private)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: mm/mlock.c:267:
+static void __munlock_vma_pages_range(struct vm_area_struct *vma,
+			      unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: mm/mlock.c:289:
+static int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#546: FILE: mm/mlock.c:300:
+static void __munlock_vma_pages_range(struct vm_area_struct *vma,
+			      unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: mm/mlock.c:309:
+int mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

WARNING:LINE_SPACING: Missing a blank line after declarations
#558: FILE: mm/mlock.c:312:
+	int nr_pages = (end - start) / PAGE_SIZE;
+	BUG_ON(!(vma->vm_flags & VM_LOCKED));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#558: FILE: mm/mlock.c:312:
+	BUG_ON(!(vma->vm_flags & VM_LOCKED));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: mm/mlock.c:321:
+	if (!((vma->vm_flags & (VM_DONTEXPAND | VM_RESERVED)) ||
+			is_vm_hugetlb_page(vma) ||

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#574: FILE: mm/mlock.c:328:
+	 * fall thru' to reset VM_LOCKED--no need to unlock, and

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#586: FILE: mm/mlock.c:340:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: mm/mlock.c:369:
+	if (newflags == vma->vm_flags ||
+			(vma->vm_flags & (VM_IO | VM_PFNMAP)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#624: FILE: mm/mlock.c:373:
+	if ((vma->vm_flags & (VM_DONTEXPAND | VM_RESERVED)) ||
+			is_vm_hugetlb_page(vma) ||

CHECK:BRACES: braces {} should be used on all arms of this statement
#669: FILE: mm/mlock.c:416:
+	if (lock) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#675: FILE: mm/mlock.c:422:
+	} else

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#715: FILE: mm/vmscan.c:602:
+				; /* fall thru'; add to swap cache */

WARNING:TYPO_SPELLING: 'instantate' may be misspelled - perhaps 'instantiate'?
#759: FILE: mm/vmscan.c:2335:
+ * fault path to determine how to instantate a new page.
                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <Mlocked>
#797: FILE: include/linux/page-flags.h:238:
+PAGEFLAG(Mlocked, mlocked) __CLEARPAGEFLAG(Mlocked, mlocked)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#870: FILE: mm/rmap.c:281:
+	spinlock_t *ptl;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: mm/rmap.c:838:
+static int try_to_unmap_cluster(unsigned long cursor, unsigned int *mapcount,
+		struct vm_area_struct *vma, struct page *check_page)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1204: FILE: mm/rmap.c:1108:
+				ret = try_to_unmap_cluster(cursor, &mapcount,
+								vma, page);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 24 checks, 1151 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000268490.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
