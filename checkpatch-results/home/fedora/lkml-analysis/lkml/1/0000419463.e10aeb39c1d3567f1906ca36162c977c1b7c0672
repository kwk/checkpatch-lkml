WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
New silicons such as MPC8548, MPC8641 with serial RapidIO controller are all supported.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#54: FILE: arch/powerpc/Kconfig:745:
+config RAPIDIO
+	bool "RapidIO support" if MPC8540 || MPC8560 || MPC8641 || MPC8548
+	help
+	  If you say Y here, the kernel will include drivers and
+	  infrastructure code to support RapidIO interconnect devices.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: arch/powerpc/kernel/rio.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#108: FILE: arch/powerpc/kernel/rio.c:26:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#111: FILE: arch/powerpc/kernel/rio.c:29:
+static int __devinit of_rio_rpn_probe(struct of_device *dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: arch/powerpc/kernel/rio.c:30:
+static int __devinit of_rio_rpn_probe(struct of_device *dev,
+				     const struct of_device_id *match)

WARNING:LINE_SPACING: Missing a blank line after declarations
#115: FILE: arch/powerpc/kernel/rio.c:33:
+	int rc;
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#115: FILE: arch/powerpc/kernel/rio.c:33:
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: arch/powerpc/kernel/rio.c:34:
+	printk(KERN_INFO "Setting up RapidIO peer-to-peer network %s\n",
+			dev->node->full_name);

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#128: FILE: arch/powerpc/kernel/rio.c:46:
+static struct of_device_id of_rio_rpn_ids[] = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#165: FILE: arch/powerpc/sysdev/fsl_rio.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#193: FILE: arch/powerpc/sysdev/fsl_rio.c:29:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#200: FILE: arch/powerpc/sysdev/fsl_rio.c:36:
+#define IRQ_RIO_BELL(m)		(((struct rio_priv *)(m->priv))->bellirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#201: FILE: arch/powerpc/sysdev/fsl_rio.c:37:
+#define IRQ_RIO_TX(m)		(((struct rio_priv *)(m->priv))->txirq)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'm' may be better as '(m)' to avoid precedence issues
#202: FILE: arch/powerpc/sysdev/fsl_rio.c:38:
+#define IRQ_RIO_RX(m)		(((struct rio_priv *)(m->priv))->rxirq)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#205: FILE: arch/powerpc/sysdev/fsl_rio.c:41:
+	printk(KERN_ERR "RIO %s: " fmt, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#205: FILE: arch/powerpc/sysdev/fsl_rio.c:41:
+	printk(KERN_ERR "RIO %s: " fmt, __FUNCTION__, ## arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#206: FILE: arch/powerpc/sysdev/fsl_rio.c:42:
+#define INFO(fmt...) printk(KERN_INFO "RIO: " fmt)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#257: FILE: arch/powerpc/sysdev/fsl_rio.c:93:
+#define DBELL_SID(x)		(*(u16 *)(x + DOORBELL_SID_OFFSET))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#258: FILE: arch/powerpc/sysdev/fsl_rio.c:94:
+#define DBELL_TID(x)		(*(u16 *)(x + DOORBELL_TID_OFFSET))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#259: FILE: arch/powerpc/sysdev/fsl_rio.c:95:
+#define DBELL_INF(x)		(*(u16 *)(x + DOORBELL_INFO_OFFSET))

WARNING:LINE_SPACING: Missing a blank line after declarations
#383: FILE: arch/powerpc/sysdev/fsl_rio.c:219:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_doorbell_send: index %d destid 0x%04x data 0x%04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: arch/powerpc/sysdev/fsl_rio.c:220:
+	pr_debug("fsl_doorbell_send: index %d destid 0x%04x data 0x%04x\n",
+			index, destid, data);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#394: FILE: arch/powerpc/sysdev/fsl_rio.c:230:
+		out_be32(&priv->msg_regs->oddatr,data );
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#394: FILE: arch/powerpc/sysdev/fsl_rio.c:230:
+		out_be32(&priv->msg_regs->oddatr,data );

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#416: FILE: arch/powerpc/sysdev/fsl_rio.c:252:
+static int fsl_local_config_read(struct rio_mport *mport, int index, u32 offset, int len, u32 * data)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#416: FILE: arch/powerpc/sysdev/fsl_rio.c:252:
+static int fsl_local_config_read(struct rio_mport *mport, int index, u32 offset, int len, u32 * data)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#419: FILE: arch/powerpc/sysdev/fsl_rio.c:255:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_local_config_read', this function's name, in a string
#419: FILE: arch/powerpc/sysdev/fsl_rio.c:255:
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: arch/powerpc/sysdev/fsl_rio.c:256:
+	pr_debug("fsl_local_config_read: index %d offset 0x%08x\n", index,
+			offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: arch/powerpc/sysdev/fsl_rio.c:275:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_local_config_write', this function's name, in a string
#439: FILE: arch/powerpc/sysdev/fsl_rio.c:275:
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: arch/powerpc/sysdev/fsl_rio.c:276:
+	pr_debug("fsl_local_config_write: index %d offset 0x%08x data 0x%08x\n",
+			index, offset, data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#459: FILE: arch/powerpc/sysdev/fsl_rio.c:295:
+static int fsl_rio_config_read(struct rio_mport *mport, int index, u16 destid,
+		u8 hopcount, u32 offset, int len, u32 * val)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#459: FILE: arch/powerpc/sysdev/fsl_rio.c:295:
+		u8 hopcount, u32 offset, int len, u32 * val)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_rio_config_read', this function's name, in a string
#464: FILE: arch/powerpc/sysdev/fsl_rio.c:300:
+	pr_debug("fsl_rio_config_read: index %d destid %d hopcount %d "

WARNING:SPLIT_STRING: quoted string split across lines
#465: FILE: arch/powerpc/sysdev/fsl_rio.c:301:
+	pr_debug("fsl_rio_config_read: index %d destid %d hopcount %d "
+			"offset 0x%08x len %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: arch/powerpc/sysdev/fsl_rio.c:337:
+static int fsl_rio_config_write(struct rio_mport *mport, int index, u16 destid,
+		u8 hopcount, u32 offset, int len, u32 val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: arch/powerpc/sysdev/fsl_rio.c:341:
+	struct rio_priv *priv = mport->priv;
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fsl_rio_config_write', this function's name, in a string
#505: FILE: arch/powerpc/sysdev/fsl_rio.c:341:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: arch/powerpc/sysdev/fsl_rio.c:342:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"
+			"offset 0x%08x len %d val 0x%08x\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#506: FILE: arch/powerpc/sysdev/fsl_rio.c:342:
+	pr_debug("fsl_rio_config_write: index %d destid %d hopcount %d"
+			"offset 0x%08x len %d val 0x%08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: arch/powerpc/sysdev/fsl_rio.c:378:
+static int fsl_rio_map_inb_mem(struct rio_mport *mport, resource_size_t lstart,
+		resource_size_t rstart,	resource_size_t size,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#547: FILE: arch/powerpc/sysdev/fsl_rio.c:383:
+	volatile struct rio_inb_atmu_regs __iomem *inbatmu =

CHECK:BRACES: braces {} should be used on all arms of this statement
#556: FILE: arch/powerpc/sysdev/fsl_rio.c:392:
+	if ((lstart + size) > (_ALIGN_DOWN(lstart, align) + align)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: arch/powerpc/sysdev/fsl_rio.c:396:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#565: FILE: arch/powerpc/sysdev/fsl_rio.c:401:
+		ERR("The local address 0x%x can not be aligned to the same size"
+			" 0x%x with the RapidIO space address 0x%x!\n", lstart,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: arch/powerpc/sysdev/fsl_rio.c:440:
+static int fsl_rio_map_outb_mem(struct rio_mport *mport, resource_size_t lstart,
+		resource_size_t rstart,	resource_size_t size,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#609: FILE: arch/powerpc/sysdev/fsl_rio.c:445:
+	volatile struct rio_atmu_regs __iomem *outbatmu =

CHECK:BRACES: braces {} should be used on all arms of this statement
#618: FILE: arch/powerpc/sysdev/fsl_rio.c:454:
+	if ((lstart + size) > (_ALIGN_DOWN(lstart, align) + align)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#622: FILE: arch/powerpc/sysdev/fsl_rio.c:458:
+	} else

WARNING:SPLIT_STRING: quoted string split across lines
#627: FILE: arch/powerpc/sysdev/fsl_rio.c:463:
+		ERR("The local address 0x%x can not be aligned to the same size"
+			" 0x%x with the RapidIO space address 0x%x!\n", lstart,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: arch/powerpc/sysdev/fsl_rio.c:547:
+int rio_hw_add_outb_message(struct rio_mport *mport, struct rio_dev *rdev,
+		int mbox, void *buffer, size_t len)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_outb_message', this function's name, in a string
#718: FILE: arch/powerpc/sysdev/fsl_rio.c:554:
+	pr_debug("RIO: rio_hw_add_outb_message(): "

WARNING:SPLIT_STRING: quoted string split across lines
#719: FILE: arch/powerpc/sysdev/fsl_rio.c:555:
+	pr_debug("RIO: rio_hw_add_outb_message(): "
+			"destid 0x%04x mbox %d buffer %p len 0x%08x\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len < 8'
#722: FILE: arch/powerpc/sysdev/fsl_rio.c:558:
+	if ((len < 8) || (len > RIO_MAX_MSG_SIZE)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > RIO_MAX_MSG_SIZE'
#722: FILE: arch/powerpc/sysdev/fsl_rio.c:558:
+	if ((len < 8) || (len > RIO_MAX_MSG_SIZE)) {

ERROR:SPACING: space required before the open parenthesis '('
#733: FILE: arch/powerpc/sysdev/fsl_rio.c:569:
+	switch(mport->phy_type) {

ERROR:SPACING: space prohibited after that open parenthesis '('
#736: FILE: arch/powerpc/sysdev/fsl_rio.c:572:
+		desc->dport = (rdev->destid << 16) | ( mbox & 0x3);

WARNING:INDENTED_LABEL: labels should not be indented
#763: FILE: arch/powerpc/sysdev/fsl_rio.c:599:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#767: FILE: arch/powerpc/sysdev/fsl_rio.c:603:
+EXPORT_SYMBOL_GPL(rio_hw_add_outb_message);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#775: FILE: arch/powerpc/sysdev/fsl_rio.c:611:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#800: FILE: arch/powerpc/sysdev/fsl_rio.c:636:
+		int slot = (dqp - priv->msg_tx_ring.phys) >> 5;
+		port->outb_msg[0].mcback(port, priv->msg_tx_ring.dev_id, -1, slot);

WARNING:INDENTED_LABEL: labels should not be indented
#806: FILE: arch/powerpc/sysdev/fsl_rio.c:642:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries < RIO_MIN_TX_RING_SIZE'
#826: FILE: arch/powerpc/sysdev/fsl_rio.c:662:
+	if ((entries < RIO_MIN_TX_RING_SIZE) ||
+	    (entries > RIO_MAX_TX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries > RIO_MAX_TX_RING_SIZE'
#826: FILE: arch/powerpc/sysdev/fsl_rio.c:662:
+	if ((entries < RIO_MIN_TX_RING_SIZE) ||
+	    (entries > RIO_MAX_TX_RING_SIZE) || (!is_power_of_2(entries))) {

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'priv->msg_tx_ring.virt_buffer[j]'
#848: FILE: arch/powerpc/sysdev/fsl_rio.c:684:
+							  priv->msg_tx_ring.
+							  virt_buffer[j],

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'priv->msg_tx_ring.phys_buffer[j]'
#850: FILE: arch/powerpc/sysdev/fsl_rio.c:686:
+							  priv->msg_tx_ring.
+							  phys_buffer[j]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#879: FILE: arch/powerpc/sysdev/fsl_rio.c:715:
+	rc = request_irq(IRQ_RIO_TX(mport), fsl_rio_tx_handler, 0, "msg_tx",
+			mport);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#894: FILE: arch/powerpc/sysdev/fsl_rio.c:730:
+	setbits32(&priv->msg_regs->omr,
+		 ((get_bitmask_order(entries) - 2) << 12));

WARNING:INDENTED_LABEL: labels should not be indented
#899: FILE: arch/powerpc/sysdev/fsl_rio.c:735:
+      out:

WARNING:INDENTED_LABEL: labels should not be indented
#902: FILE: arch/powerpc/sysdev/fsl_rio.c:738:
+      out_irq:

WARNING:INDENTED_LABEL: labels should not be indented
#906: FILE: arch/powerpc/sysdev/fsl_rio.c:742:
+      out_dma:

WARNING:TYPO_SPELLING: 'occurence' may be misspelled - perhaps 'occurrence'?
#943: FILE: arch/powerpc/sysdev/fsl_rio.c:779:
+ * mailbox event handler and acks the interrupt occurence.
                                                 ^^^^^^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#973: FILE: arch/powerpc/sysdev/fsl_rio.c:809:
+      out:

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries < RIO_MIN_RX_RING_SIZE'
#993: FILE: arch/powerpc/sysdev/fsl_rio.c:829:
+	if ((entries < RIO_MIN_RX_RING_SIZE) ||
+	    (entries > RIO_MAX_RX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'entries > RIO_MAX_RX_RING_SIZE'
#993: FILE: arch/powerpc/sysdev/fsl_rio.c:829:
+	if ((entries < RIO_MIN_RX_RING_SIZE) ||
+	    (entries > RIO_MAX_RX_RING_SIZE) || (!is_power_of_2(entries))) {

CHECK:SPACING: No space is necessary after a cast
#1018: FILE: arch/powerpc/sysdev/fsl_rio.c:854:
+	out_be32(&priv->msg_regs->ifqdpar, (u32) priv->msg_rx_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1019: FILE: arch/powerpc/sysdev/fsl_rio.c:855:
+	out_be32(&priv->msg_regs->ifqepar, (u32) priv->msg_rx_ring.phys);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1045: FILE: arch/powerpc/sysdev/fsl_rio.c:881:
+	setbits32(&priv->msg_regs->imr,
+			((get_bitmask_order(entries) - 2) << 12));

WARNING:INDENTED_LABEL: labels should not be indented
#1050: FILE: arch/powerpc/sysdev/fsl_rio.c:886:
+      out:

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rio_hw_add_inb_buffer', this function's name, in a string
#1090: FILE: arch/powerpc/sysdev/fsl_rio.c:926:
+	pr_debug("RIO: rio_hw_add_inb_buffer(), msg_rx_ring.rx_slot %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: arch/powerpc/sysdev/fsl_rio.c:931:
+		ERR("error adding inbound buffer %d, buffer exists\n",
+		       priv->msg_rx_ring.rx_slot);

WARNING:INDENTED_LABEL: labels should not be indented
#1104: FILE: arch/powerpc/sysdev/fsl_rio.c:940:
+      out:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1108: FILE: arch/powerpc/sysdev/fsl_rio.c:944:
+EXPORT_SYMBOL_GPL(rio_hw_add_inb_buffer);

WARNING:INDENTED_LABEL: labels should not be indented
#1147: FILE: arch/powerpc/sysdev/fsl_rio.c:983:
+      out1:

WARNING:INDENTED_LABEL: labels should not be indented
#1150: FILE: arch/powerpc/sysdev/fsl_rio.c:986:
+      out2:

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1154: FILE: arch/powerpc/sysdev/fsl_rio.c:990:
+EXPORT_SYMBOL_GPL(rio_hw_get_inb_message);

CHECK:SPACING: No space is necessary after a cast
#1187: FILE: arch/powerpc/sysdev/fsl_rio.c:1023:
+		    (u32) priv->dbell_ring.virt +

WARNING:SPLIT_STRING: quoted string split across lines
#1193: FILE: arch/powerpc/sysdev/fsl_rio.c:1029:
+		pr_debug("RIO: processing doorbell, sid 0x%02x tid 0x%02x "
+				"info 0x%04x\n", DBELL_SID(dmsg),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->start <= DBELL_INF(dmsg)'
#1197: FILE: arch/powerpc/sysdev/fsl_rio.c:1033:
+			if ((dbell->res->start <= DBELL_INF(dmsg)) &&
+			    (dbell->res->end >= DBELL_INF(dmsg))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dbell->res->end >= DBELL_INF(dmsg)'
#1197: FILE: arch/powerpc/sysdev/fsl_rio.c:1033:
+			if ((dbell->res->start <= DBELL_INF(dmsg)) &&
+			    (dbell->res->end >= DBELL_INF(dmsg))) {

WARNING:SPLIT_STRING: quoted string split across lines
#1208: FILE: arch/powerpc/sysdev/fsl_rio.c:1044:
+			pr_debug("RIO: spurious doorbell, sid 0x%02x "
+					"tid 0x%02x info %4.4x\n",

WARNING:INDENTED_LABEL: labels should not be indented
#1216: FILE: arch/powerpc/sysdev/fsl_rio.c:1052:
+      out:

CHECK:SPACING: No space is necessary after a cast
#1254: FILE: arch/powerpc/sysdev/fsl_rio.c:1090:
+	out_be32(&priv->msg_regs->dqdpar, (u32) priv->dbell_ring.phys);

CHECK:SPACING: No space is necessary after a cast
#1255: FILE: arch/powerpc/sysdev/fsl_rio.c:1091:
+	out_be32(&priv->msg_regs->dqepar, (u32) priv->dbell_ring.phys);

WARNING:INDENTED_LABEL: labels should not be indented
#1274: FILE: arch/powerpc/sysdev/fsl_rio.c:1110:
+      out:

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1286: FILE: arch/powerpc/sysdev/fsl_rio.c:1122:
+
+}

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1288: FILE: arch/powerpc/sysdev/fsl_rio.c:1124:
+static char *cmdline = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#1296: FILE: arch/powerpc/sysdev/fsl_rio.c:1132:
+	return simple_strtol(cmdline, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1308: FILE: arch/powerpc/sysdev/fsl_rio.c:1144:
+__setup("riohdid=", fsl_rio_get_cmdline);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1324: FILE: arch/powerpc/sysdev/fsl_rio.c:1160:
+			printk("1\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1327: FILE: arch/powerpc/sysdev/fsl_rio.c:1163:
+			printk("4\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1330: FILE: arch/powerpc/sysdev/fsl_rio.c:1166:
+			printk("Unknown\n");

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1331: FILE: arch/powerpc/sysdev/fsl_rio.c:1167:
+			break;;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1337: FILE: arch/powerpc/sysdev/fsl_rio.c:1173:
+			printk("Single-lane 0\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1340: FILE: arch/powerpc/sysdev/fsl_rio.c:1176:
+			printk("Single-lane 2\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1343: FILE: arch/powerpc/sysdev/fsl_rio.c:1179:
+			printk("Four-lane 2\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1346: FILE: arch/powerpc/sysdev/fsl_rio.c:1182:
+			printk("Unknown\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1356: FILE: arch/powerpc/sysdev/fsl_rio.c:1192:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1361: FILE: arch/powerpc/sysdev/fsl_rio.c:1197:
+	u8 pw = ccsr >> 30;
+	switch (pw) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1438: FILE: arch/powerpc/sysdev/fsl_rio.c:1274:
+	INFO("LAW start 0x%016llx, size 0x%016llx.\n", (u64)law_start,
+						(u64)law_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1440: FILE: arch/powerpc/sysdev/fsl_rio.c:1276:
+	INFO("Regs start 0x%08x size 0x%08x\n",	regs.start,
+						regs.end - regs.start + 1);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1458: FILE: arch/powerpc/sysdev/fsl_rio.c:1294:
+		printk("serial\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1461: FILE: arch/powerpc/sysdev/fsl_rio.c:1297:
+		printk("parallel");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1464: FILE: arch/powerpc/sysdev/fsl_rio.c:1300:
+		printk("Unknown type %d\n", phy_type);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1470: FILE: arch/powerpc/sysdev/fsl_rio.c:1306:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ops)...) over kzalloc(sizeof(struct rio_ops)...)
#1500: FILE: arch/powerpc/sysdev/fsl_rio.c:1336:
+	ops = kzalloc(sizeof(struct rio_ops), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*port)...) over kzalloc(sizeof(struct rio_mport)...)
#1507: FILE: arch/powerpc/sysdev/fsl_rio.c:1343:
+	port = kzalloc(sizeof(struct rio_mport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1519: FILE: arch/powerpc/sysdev/fsl_rio.c:1355:
+	INFO("RapidIO Common Transport System size: %d\n",
+			port->sys_size ? 65536 : 256);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*priv)...) over kzalloc(sizeof(struct rio_priv)...)
#1523: FILE: arch/powerpc/sysdev/fsl_rio.c:1359:
+	priv = kzalloc(sizeof(struct rio_priv), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1541: FILE: arch/powerpc/sysdev/fsl_rio.c:1377:
+	INFO("bellirq: %d, txirq: %d, rxirq %d\n", priv->bellirq,
+				priv->txirq, priv->rxirq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1570: FILE: arch/powerpc/sysdev/fsl_rio.c:1406:
+	if (!rio_request_io_region(port, NULL, law_start, RIO_MAINT_WIN_SIZE,
+				"maint_win", RIO_RESOURCE_MAINT, NULL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1576: FILE: arch/powerpc/sysdev/fsl_rio.c:1412:
+	out_be32(&priv->maint_atmu_regs->rowbar,
+				(law_start >> 12) & 0xffffff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1584: FILE: arch/powerpc/sysdev/fsl_rio.c:1420:
+	if (!rio_request_io_region(port, NULL, law_start + RIO_MAINT_WIN_SIZE,
+			RIO_DBELL_WIN_SIZE,

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1604: FILE: arch/powerpc/sysdev/fsl_rio.c:1440:
+	if (ops)
+		kfree(ops);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1606: FILE: arch/powerpc/sysdev/fsl_rio.c:1442:
+	if (port)
+		kfree(port);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1608: FILE: arch/powerpc/sysdev/fsl_rio.c:1444:
+	if (priv)
+		kfree(priv);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1617: FILE: arch/powerpc/sysdev/fsl_rio.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1634: FILE: arch/powerpc/sysdev/fsl_rio.h:18:
+extern int fsl_rio_setup(struct of_device *of_dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419463.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 70 warnings, 54 checks, 1558 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419463.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
