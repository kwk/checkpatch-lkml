WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#60: FILE: fs/namei.c:838:
+	 * at all ... */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#75: FILE: fs/namei.c:964:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                          ^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/namei.c:964:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/namei.c:964:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#75: FILE: fs/namei.c:964:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#75: FILE: fs/namei.c:964:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:1028:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                          ^^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#91: FILE: fs/namei.c:1028:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                            ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#91: FILE: fs/namei.c:1028:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#91: FILE: fs/namei.c:1028:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#91: FILE: fs/namei.c:1028:
+			err = union_create_topdir(nd,&next.dentry,&next.mnt);
 			                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#115: FILE: fs/namei.c:1789:
+			error = union_copyup(nd, flag);
 			                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: fs/namei.c:1871:
+		error = union_copyup(nd, flag);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#169: FILE: fs/union.c:315:
+ * @nd: pointer to nameidata
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#172: FILE: fs/union.c:318:
+int union_relookup_topmost(struct nameidata *nd, int flags)
                                              ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#190: FILE: fs/union.c:336:
+	err = path_lookup(name, flags|LOOKUP_CREATE|LOOKUP_TOPMOST, &this);
 	                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#190: FILE: fs/union.c:336:
+	err = path_lookup(name, flags|LOOKUP_CREATE|LOOKUP_TOPMOST, &this);
 	                                           ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#194: FILE: fs/union.c:340:
+	path_release(nd);
 	             ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: fs/union.c:353:
+	BUG_ON(this.um_flags & LAST_LOWLEVEL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#230: FILE: fs/union.c:1039:
+	BUG_ON(!stack);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#231: FILE: fs/union.c:1040:
+	BUG_ON(!new);

WARNING:RETURN_VOID: void function return statements are not generally useful
#249: FILE: fs/union.c:1058:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#267: FILE: fs/union.c:1466:
+static struct dentry * union_create(struct dentry *parent, struct dentry *old,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#268: FILE: fs/union.c:1467:
+				    struct nameidata *nd)
 				                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#298: FILE: fs/union.c:1497:
+	err = parent->d_inode->i_op->create(parent->d_inode, dentry, mode, nd);
 	                                                                   ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#314: FILE: fs/union.c:1513:
+static struct dentry * union_mkdir(struct dentry *parent, struct dentry *dir)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#336: FILE: fs/union.c:1535:
+	mode = dir->d_inode->i_mode & (S_IRWXUGO|S_ISVTX);
 	                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#336: FILE: fs/union.c:1535:
+	mode = dir->d_inode->i_mode & (S_IRWXUGO|S_ISVTX);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:RETURN_VOID: void function return statements are not generally useful
#386: FILE: fs/union.c:1585:
+	return;
+}

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#388: FILE: fs/union.c:1587:
+struct dentry * union_create_topmost(struct nameidata *nd, struct dentry *old)
                                                        ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#388: FILE: fs/union.c:1587:
+struct dentry * union_create_topmost(struct nameidata *nd, struct dentry *old)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#395: FILE: fs/union.c:1594:
+	BUG_ON(parent->d_sb == old->d_sb);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#406: FILE: fs/union.c:1605:
+	dentry = union_create(parent, old, nd);
 	                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#417: FILE: fs/union.c:1616:
+int union_create_topdir(struct nameidata *nd,
                                           ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#430: FILE: fs/union.c:1629:
+		BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#518: FILE: fs/union.c:1717:
+ * @nd: nameidata pointer to the file
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#521: FILE: fs/union.c:1720:
+int union_copyup(struct nameidata *nd, int flags)
                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#532: FILE: fs/union.c:1731:
+	err = union_relookup_topmost(nd, nd->flags|LOOKUP_PARENT);
 	                             ^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#532: FILE: fs/union.c:1731:
+	err = union_relookup_topmost(nd, nd->flags|LOOKUP_PARENT);
 	                                          ^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#540: FILE: fs/union.c:1739:
+	dentry = __lookup_hash_kern_union(&nd->last, nd->dentry, nd);
 	                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#566: FILE: fs/union.c:1765:
+		tmp = union_create_topmost(nd, dentry);
 		                           ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: fs/union.c:1773:
+			int ret = vfs_unlink(tmp->d_inode, tmp);
+			BUG_ON(ret);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#574: FILE: fs/union.c:1773:
+			BUG_ON(ret);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#576: FILE: fs/union.c:1775:
+			 * we should not BUG() on */

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#609: FILE: include/linux/union.h:39:
+extern struct dentry * union_create_topmost(struct nameidata *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#609: FILE: include/linux/union.h:39:
+extern struct dentry * union_create_topmost(struct nameidata *, struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#609: FILE: include/linux/union.h:39:
+extern struct dentry * union_create_topmost(struct nameidata *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#609: FILE: include/linux/union.h:39:
+extern struct dentry * union_create_topmost(struct nameidata *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#610: FILE: include/linux/union.h:40:
+extern int union_create_topdir(struct nameidata *, struct dentry **, struct vfsmount **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#610: FILE: include/linux/union.h:40:
+extern int union_create_topdir(struct nameidata *, struct dentry **, struct vfsmount **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#610: FILE: include/linux/union.h:40:
+extern int union_create_topdir(struct nameidata *, struct dentry **, struct vfsmount **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#610: FILE: include/linux/union.h:40:
+extern int union_create_topdir(struct nameidata *, struct dentry **, struct vfsmount **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#611: FILE: include/linux/union.h:41:
+extern int union_is_member(struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#611: FILE: include/linux/union.h:41:
+extern int union_is_member(struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#611: FILE: include/linux/union.h:41:
+extern int union_is_member(struct dentry *, struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: include/linux/union.h:42:
+extern int union_copy_file(struct dentry *, struct vfsmount *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#612: FILE: include/linux/union.h:42:
+extern int union_copy_file(struct dentry *, struct vfsmount *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#612: FILE: include/linux/union.h:42:
+extern int union_copy_file(struct dentry *, struct vfsmount *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#612: FILE: include/linux/union.h:42:
+extern int union_copy_file(struct dentry *, struct vfsmount *, struct dentry *, struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#612: FILE: include/linux/union.h:42:
+extern int union_copy_file(struct dentry *, struct vfsmount *, struct dentry *, struct vfsmount *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#613: FILE: include/linux/union.h:43:
+extern int union_copyup(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#613: FILE: include/linux/union.h:43:
+extern int union_copyup(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#613: FILE: include/linux/union.h:43:
+extern int union_copyup(struct nameidata *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#614: FILE: include/linux/union.h:44:
+extern int union_relookup_topmost(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#614: FILE: include/linux/union.h:44:
+extern int union_relookup_topmost(struct nameidata *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#614: FILE: include/linux/union.h:44:
+extern int union_relookup_topmost(struct nameidata *, int);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: include/linux/union.h:51:
+#define union_create_topmost(x,y) ({ BUG(); ERR_PTR(-EINVAL); })

ERROR:SPACING: space required after that ',' (ctx:VxV)
#621: FILE: include/linux/union.h:51:
+#define union_create_topmost(x,y) ({ BUG(); ERR_PTR(-EINVAL); })
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#622: FILE: include/linux/union.h:52:
+#define union_create_topdir(x,y,z) ({ (0); })
                              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#622: FILE: include/linux/union.h:52:
+#define union_create_topdir(x,y,z) ({ (0); })
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#623: FILE: include/linux/union.h:53:
+#define union_is_member(x,y) ({ (0); })
                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#624: FILE: include/linux/union.h:54:
+#define union_copy_file(dentry1,mnt1,dentry2,mnt2) ({ (0); })
                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#624: FILE: include/linux/union.h:54:
+#define union_copy_file(dentry1,mnt1,dentry2,mnt2) ({ (0); })
                                     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#624: FILE: include/linux/union.h:54:
+#define union_copy_file(dentry1,mnt1,dentry2,mnt2) ({ (0); })
                                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#625: FILE: include/linux/union.h:55:
+#define union_copyup(x,y) ({ (0); })
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#626: FILE: include/linux/union.h:56:
+#define union_relookup_topmost(x,y) ({ (0); })
                                 ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 45 warnings, 10 checks, 561 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431688.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
