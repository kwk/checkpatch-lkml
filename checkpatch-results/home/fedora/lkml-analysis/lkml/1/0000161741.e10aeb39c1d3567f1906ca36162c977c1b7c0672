WARNING:TYPO_SPELLING: 'likelyhood' may be misspelled - perhaps 'likelihood'?
#139: 
> it, wish we had never merged it"? I think the likelyhood of that 
                                                ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#160: 
 kernel/cr/cpt-ns.c                 |  324 +++++++++++++++++++++++++++++++++++++

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#205: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#210: FILE: include/linux/cr.h:1:
+#ifndef __INCLUDE_LINUX_CR_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#330: FILE: kernel/cr/Kconfig:1:
+config CR
+	bool "Container checkpoint/restart"
+	depends on IPC_NS || (SYSVIPC = n)
+	depends on NET_NS || (NET = n)
+	depends on PID_NS
+	depends on USER_NS
+	depends on UTS_NS
+	select FREEZER
+	depends on X86_32
+	help
+	  Container checkpoint/restart

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#361: FILE: kernel/cr/cpt-cred.c:1:
+#include <linux/cr.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#371: FILE: kernel/cr/cpt-cred.c:11:
+	printk("%s: dump cred %p\n", __func__, cred);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#430: FILE: kernel/cr/cpt-cred.c:70:
+	printk("%s: collect cred %p\n", __func__, cred);

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#470: FILE: kernel/cr/cpt-cred.c:110:
+			printk("%s: cred %p has external references %u:%u\n", __func__, cred, obj->o_count, cnt);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#470: FILE: kernel/cr/cpt-cred.c:110:
+			printk("%s: cred %p has external references %u:%u\n", __func__, cred, obj->o_count, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#482: FILE: kernel/cr/cpt-fs.c:1:
+#include <linux/fdtable.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: kernel/cr/cpt-fs.c:29:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#512: FILE: kernel/cr/cpt-fs.c:31:
+	printk("%s: can't checkpoint file %p, ->f_op = %pS\n", __func__, file, file->f_op);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#531: FILE: kernel/cr/cpt-fs.c:50:
+	printk("%s: collect file %p\n", __func__, file);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#550: FILE: kernel/cr/cpt-fs.c:69:
+	printk("%s: collect files_struct %p\n", __func__, fs);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#571: FILE: kernel/cr/cpt-fs.c:90:
+			printk("%s: files_struct %p has external references %u:%u\n", __func__, fs, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#571: FILE: kernel/cr/cpt-fs.c:90:
+			printk("%s: files_struct %p has external references %u:%u\n", __func__, fs, obj->o_count, cnt);

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#598: FILE: kernel/cr/cpt-fs.c:117:
+			printk("%s: file %p/%pS has external references %u:%lu\n", __func__, file, file->f_op, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#598: FILE: kernel/cr/cpt-fs.c:117:
+			printk("%s: file %p/%pS has external references %u:%lu\n", __func__, file, file->f_op, obj->o_count, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#610: FILE: kernel/cr/cpt-mm.c:1:
+#include <linux/mm.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#619: FILE: kernel/cr/cpt-mm.c:10:
+	printk("%s: vma = %p, ->vm_flags = 0x%lx\n", __func__, vma, flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#636: FILE: kernel/cr/cpt-mm.c:27:
+		printk("%s: vma = %p, unknown ->vm_flags 0x%lx\n", __func__, vma, flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#691: FILE: kernel/cr/cpt-mm.c:82:
+	printk("%s: collect mm_struct %p\n", __func__, mm);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#716: FILE: kernel/cr/cpt-mm.c:107:
+			printk("%s: mm_struct %p has external references %u:%u\n", __func__, mm, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#716: FILE: kernel/cr/cpt-mm.c:107:
+			printk("%s: mm_struct %p has external references %u:%u\n", __func__, mm, obj->o_count, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#750: FILE: kernel/cr/cpt-ns.c:1:
+#include <linux/cr.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#764: FILE: kernel/cr/cpt-ns.c:15:
+	printk("%s: dump uts_ns %p\n", __func__, uts_ns);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#800: FILE: kernel/cr/cpt-ns.c:51:
+	printk("%s: collect uts_ns %p\n", __func__, uts_ns);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#821: FILE: kernel/cr/cpt-ns.c:72:
+			printk("%s: uts_ns %p has external references %u:%u\n", __func__, uts_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#821: FILE: kernel/cr/cpt-ns.c:72:
+			printk("%s: uts_ns %p has external references %u:%u\n", __func__, uts_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#844: FILE: kernel/cr/cpt-ns.c:95:
+	printk("%s: collect ipc_ns %p\n", __func__, ipc_ns);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#865: FILE: kernel/cr/cpt-ns.c:116:
+			printk("%s: ipc_ns %p has external references %u:%u\n", __func__, ipc_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#865: FILE: kernel/cr/cpt-ns.c:116:
+			printk("%s: ipc_ns %p has external references %u:%u\n", __func__, ipc_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#893: FILE: kernel/cr/cpt-ns.c:144:
+	printk("%s: collect mnt_ns %p\n", __func__, mnt_ns);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#914: FILE: kernel/cr/cpt-ns.c:165:
+			printk("%s: mnt_ns %p has external references %u:%u\n", __func__, mnt_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#914: FILE: kernel/cr/cpt-ns.c:165:
+			printk("%s: mnt_ns %p has external references %u:%u\n", __func__, mnt_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#936: FILE: kernel/cr/cpt-ns.c:187:
+	printk("%s: collect pid_ns %p\n", __func__, pid_ns);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#976: FILE: kernel/cr/cpt-ns.c:227:
+	printk("%s: collect net_ns %p\n", __func__, net_ns);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#997: FILE: kernel/cr/cpt-ns.c:248:
+			printk("%s: net_ns %p has external references %u:%u\n", __func__, net_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#997: FILE: kernel/cr/cpt-ns.c:248:
+			printk("%s: net_ns %p has external references %u:%u\n", __func__, net_ns, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1025: FILE: kernel/cr/cpt-ns.c:276:
+	printk("%s: collect nsproxy %p\n", __func__, nsproxy);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1053: FILE: kernel/cr/cpt-ns.c:304:
+			printk("%s: nsproxy %p has external references %u:%u\n", __func__, nsproxy, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1053: FILE: kernel/cr/cpt-ns.c:304:
+			printk("%s: nsproxy %p has external references %u:%u\n", __func__, nsproxy, obj->o_count, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1080: FILE: kernel/cr/cpt-signal.c:1:
+#include <linux/sched.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1112: FILE: kernel/cr/cpt-signal.c:33:
+	printk("%s: collect signal_struct %p\n", __func__, signal);

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#1137: FILE: kernel/cr/cpt-signal.c:58:
+			printk("%s: signal_struct %p has external references %u:%u\n", __func__, signal, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1137: FILE: kernel/cr/cpt-signal.c:58:
+			printk("%s: signal_struct %p has external references %u:%u\n", __func__, signal, obj->o_count, cnt);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1149: FILE: kernel/cr/cpt-signal.c:70:
+	if (waitqueue_active(&sighand->signalfd_wqh))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1170: FILE: kernel/cr/cpt-signal.c:91:
+	printk("%s: collect sighand_struct %p\n", __func__, sighand);

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1195: FILE: kernel/cr/cpt-signal.c:116:
+			printk("%s: sighand_struct %p has external references %u:%u\n", __func__, sighand, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1195: FILE: kernel/cr/cpt-signal.c:116:
+			printk("%s: sighand_struct %p has external references %u:%u\n", __func__, sighand, obj->o_count, cnt);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1207: FILE: kernel/cr/cpt-sys.c:1:
+#include <linux/capability.h>

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1242: FILE: kernel/cr/cpt-sys.c:36:
+				printk("%s: freezing '%s' failed\n", __func__, tsk->comm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1269: FILE: kernel/cr/cpt-sys.c:63:
+		BUG_ON(obj->o_obj == tsk);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1277: FILE: kernel/cr/cpt-sys.c:71:
+	printk("%s: collect task %p/%s\n", __func__, tsk, tsk->comm);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1441: FILE: kernel/cr/cr-ctx.c:1:
+#include <linux/file.h>

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#1446: FILE: kernel/cr/cr-ctx.c:6:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1447: FILE: kernel/cr/cr-ctx.c:7:
+#include <asm/uaccess.h>

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*obj)...) over kmalloc(sizeof(struct cr_object)...)
#1478: FILE: kernel/cr/cr-ctx.c:38:
+	obj = kmalloc(sizeof(struct cr_object), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ctx)...) over kmalloc(sizeof(struct cr_context)...)
#1490: FILE: kernel/cr/cr-ctx.c:50:
+	ctx = kmalloc(sizeof(struct cr_context), GFP_KERNEL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1588: FILE: kernel/cr/cr.h:1:
+#ifndef __CR_H

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#1621: FILE: kernel/cr/cr.h:34:
+#define for_each_cr_object(ctx, obj, lh)		\
+	list_for_each_entry(obj, &ctx->lh, o_list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lh' may be better as '(lh)' to avoid precedence issues
#1621: FILE: kernel/cr/cr.h:34:
+#define for_each_cr_object(ctx, obj, lh)		\
+	list_for_each_entry(obj, &ctx->lh, o_list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#1623: FILE: kernel/cr/cr.h:36:
+#define for_each_cr_object_safe(ctx, obj, tmp, lh)	\
+	list_for_each_entry_safe(obj, tmp, &ctx->lh, o_list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'lh' may be better as '(lh)' to avoid precedence issues
#1623: FILE: kernel/cr/cr.h:36:
+#define for_each_cr_object_safe(ctx, obj, tmp, lh)	\
+	list_for_each_entry_safe(obj, tmp, &ctx->lh, o_list)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1655: FILE: kernel/cr/rst-sys.c:1:
+#include <linux/capability.h>

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1662: FILE: kernel/cr/rst-sys.c:8:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161741.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 61 warnings, 6 checks, 1394 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161741.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
