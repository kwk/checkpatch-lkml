WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/wbr_policy.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/wbr_policy.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/wbr_policy.c:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#64: FILE: fs/aufs/wbr_policy.c:22:
+ * $Id: wbr_policy.c,v 1.3 2008/04/28 03:04:12 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#77: FILE: fs/aufs/wbr_policy.c:35:
+	LKTRTrace("%.*s\n", AuDLNPair(h_dst));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#77: FILE: fs/aufs/wbr_policy.c:35:
+	LKTRTrace("%.*s\n", AuDLNPair(h_dst));

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#102: FILE: fs/aufs/wbr_policy.c:60:
+	AuTraceErr(err);

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#122: FILE: fs/aufs/wbr_policy.c:80:
+	AuDebugOn(bstart <= bdst

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#123: FILE: fs/aufs/wbr_policy.c:81:
+	AuDebugOn(bstart <= bdst
+		  && bdst <= au_dbend(dentry)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#124: FILE: fs/aufs/wbr_policy.c:82:
+		  && bdst <= au_dbend(dentry)
+		  && au_h_dptr(dentry, bdst));

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#128: FILE: fs/aufs/wbr_policy.c:86:
+	IMustLock(h_dir);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#135: FILE: fs/aufs/wbr_policy.c:93:
+	err = vfsub_sio_mkdir(h_dir, h_dentry, S_IRWXU | S_IRUGO | S_IXUGO,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#150: FILE: fs/aufs/wbr_policy.c:108:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:CAMELCASE: Avoid CamelCase: <AuIOErr>
#195: FILE: fs/aufs/wbr_policy.c:153:
+			AuIOErr("failed removing diropq for %.*s b%d (%d)\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#277: FILE: fs/aufs/wbr_policy.c:235:
+		if (!au_br_rdonly(au_sbr(sb, bindex))
[...]
+				err = bindex;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#278: FILE: fs/aufs/wbr_policy.c:236:
+		if (!au_br_rdonly(au_sbr(sb, bindex))
+		    && (!dirperm1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#279: FILE: fs/aufs/wbr_policy.c:237:
+		    && (!dirperm1
+			|| au_test_h_perm(h_dir, MAY_WRITE | MAY_EXEC,

CHECK:BRACES: braces {} should be used on all arms of this statement
#365: FILE: fs/aufs/wbr_policy.c:323:
+		if (!isdir) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#370: FILE: fs/aufs/wbr_policy.c:328:
+		} else

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#433: FILE: fs/aufs/wbr_policy.c:391:
+		LKTRTrace("b%d, %d, %Lu\n",

CHECK:CAMELCASE: Avoid CamelCase: <AuWarn1>
#436: FILE: fs/aufs/wbr_policy.c:394:
+			AuWarn1("failed statfs, b%d, %d\n", bindex, err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#471: FILE: fs/aufs/wbr_policy.c:429:
+	if (unlikely(time_after(jiffies, mfs->mfs_jiffy + mfs->mfs_expire)
+		     || mfs->mfs_bindex < 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#472: FILE: fs/aufs/wbr_policy.c:430:
+		     || mfs->mfs_bindex < 0
+		     || au_br_rdonly(au_sbr(sb, mfs->mfs_bindex))))

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceEnter>
#499: FILE: fs/aufs/wbr_policy.c:457:
+	AuTraceEnter();

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#518: FILE: fs/aufs/wbr_policy.c:476:
+		LKTRTrace("%Lu bytes, %Lu wmark\n",

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#573: FILE: fs/aufs/wbr_policy.c:531:
+	LKTRTrace("b%d, %Lu\n", err, b);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#586: FILE: fs/aufs/wbr_policy.c:544:
+			if (!au_br_rdonly(br)
+			    && au_test_h_perm(h_dir, MAY_WRITE | MAY_EXEC,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#588: FILE: fs/aufs/wbr_policy.c:546:
+					      /*dlgt*/0)
+			    && br->br_bytes > b) {

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#591: FILE: fs/aufs/wbr_policy.c:549:
+				LKTRTrace("b%d, %Lu\n", err, b);

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#606: FILE: fs/aufs/wbr_policy.c:564:
+			LKTRTrace("b%d, %Lu\n", err, b);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#653: FILE: fs/aufs/wbr_policy.c:611:
+		if (!au_br_rdonly(au_sbr(sb, bindex))
+		    && (!dirperm1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#654: FILE: fs/aufs/wbr_policy.c:612:
+		    && (!dirperm1
+			|| au_test_h_perm(h_dir, MAY_WRITE | MAY_EXEC,

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_TDP>
#686: FILE: fs/aufs/wbr_policy.c:644:
+	[AuWbrCopyup_TDP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BUP>
#689: FILE: fs/aufs/wbr_policy.c:647:
+	[AuWbrCopyup_BUP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCopyup_BU>
#692: FILE: fs/aufs/wbr_policy.c:650:
+	[AuWbrCopyup_BU] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_TDP>
#698: FILE: fs/aufs/wbr_policy.c:656:
+	[AuWbrCreate_TDP] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_RR>
#701: FILE: fs/aufs/wbr_policy.c:659:
+	[AuWbrCreate_RR] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFS>
#705: FILE: fs/aufs/wbr_policy.c:663:
+	[AuWbrCreate_MFS] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSV>
#710: FILE: fs/aufs/wbr_policy.c:668:
+	[AuWbrCreate_MFSV] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRR>
#715: FILE: fs/aufs/wbr_policy.c:673:
+	[AuWbrCreate_MFSRR] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_MFSRRV>
#720: FILE: fs/aufs/wbr_policy.c:678:
+	[AuWbrCreate_MFSRRV] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFS>
#725: FILE: fs/aufs/wbr_policy.c:683:
+	[AuWbrCreate_PMFS] = {

CHECK:CAMELCASE: Avoid CamelCase: <AuWbrCreate_PMFSV>
#730: FILE: fs/aufs/wbr_policy.c:688:
+	[AuWbrCreate_PMFSV] = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279924.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 32 checks, 693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279924.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
