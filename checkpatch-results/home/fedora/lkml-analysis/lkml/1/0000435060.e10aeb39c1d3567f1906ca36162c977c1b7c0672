WARNING:TYPO_SPELLING: 'discontigous' may be misspelled - perhaps 'discontiguous'?
#35: 
>>> block that spans multiple discontigous pages if we don't vmap
                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#59: 
--- linux-2.6.orig/include/linux/pagearray.h	2004-04-06 10:56:48.000000000 -0700

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: include/linux/pagearray.h:1:
+#ifndef _LINUX_PAGEARRAY_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#75: FILE: include/linux/pagearray.h:14:
+int alloc_page_array(struct pagearray *, const int, const size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const int' should also have an identifier name
#75: FILE: include/linux/pagearray.h:14:
+int alloc_page_array(struct pagearray *, const int, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#75: FILE: include/linux/pagearray.h:14:
+int alloc_page_array(struct pagearray *, const int, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#76: FILE: include/linux/pagearray.h:15:
+void free_page_array(struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#77: FILE: include/linux/pagearray.h:16:
+void zero_page_array(struct pagearray *);

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct vm_area_struct *' should also have an identifier name
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#78: FILE: include/linux/pagearray.h:17:
+struct page *nopage_page_array(const struct vm_area_struct *, unsigned long, unsigned long, int *, struct pagearray *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct vm_area_struct *' should also have an identifier name
#79: FILE: include/linux/pagearray.h:18:
+int mmap_page_array(const struct vm_area_struct *, struct pagearray *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#79: FILE: include/linux/pagearray.h:18:
+int mmap_page_array(const struct vm_area_struct *, struct pagearray *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#79: FILE: include/linux/pagearray.h:18:
+int mmap_page_array(const struct vm_area_struct *, struct pagearray *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#79: FILE: include/linux/pagearray.h:18:
+int mmap_page_array(const struct vm_area_struct *, struct pagearray *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#80: FILE: include/linux/pagearray.h:19:
+int copy_page_array_to_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#80: FILE: include/linux/pagearray.h:19:
+int copy_page_array_to_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#80: FILE: include/linux/pagearray.h:19:
+int copy_page_array_to_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#80: FILE: include/linux/pagearray.h:19:
+int copy_page_array_to_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#81: FILE: include/linux/pagearray.h:20:
+int copy_page_array_from_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#81: FILE: include/linux/pagearray.h:20:
+int copy_page_array_from_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#81: FILE: include/linux/pagearray.h:20:
+int copy_page_array_from_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const size_t' should also have an identifier name
#81: FILE: include/linux/pagearray.h:20:
+int copy_page_array_from_user(struct pagearray *, void __user *, const size_t, const size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#82: FILE: include/linux/pagearray.h:21:
+struct scatterlist *pagearray_to_scatterlist(struct pagearray *, size_t, size_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#82: FILE: include/linux/pagearray.h:21:
+struct scatterlist *pagearray_to_scatterlist(struct pagearray *, size_t, size_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#82: FILE: include/linux/pagearray.h:21:
+struct scatterlist *pagearray_to_scatterlist(struct pagearray *, size_t, size_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#82: FILE: include/linux/pagearray.h:21:
+struct scatterlist *pagearray_to_scatterlist(struct pagearray *, size_t, size_t, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagearray *' should also have an identifier name
#83: FILE: include/linux/pagearray.h:22:
+void *vmap_pagearray(struct pagearray *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#104: FILE: mm/pagearray.c:1:
+#include <linux/mm.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#109: FILE: mm/pagearray.c:6:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#125: FILE: mm/pagearray.c:22:
+	int k;
+	pages->length = PAGE_ALIGN(length);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#127: FILE: mm/pagearray.c:24:
+	pages->pages = kmalloc(pages->nr_pages*sizeof(struct page *), gfp_mask);
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#127: FILE: mm/pagearray.c:24:
+	pages->pages = kmalloc(pages->nr_pages*sizeof(struct page *), gfp_mask);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#130: FILE: mm/pagearray.c:27:
+	memset(pages->pages, 0, pages->nr_pages*sizeof(struct page *));
 	                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#155: FILE: mm/pagearray.c:52:
+	int k;
+	for (k = 0; k < pages->nr_pages; ++k)

WARNING:LINE_SPACING: Missing a blank line after declarations
#171: FILE: mm/pagearray.c:68:
+	int k;
+	for (k = 0; k < pages->nr_pages; ++k)

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#191: FILE: mm/pagearray.c:88:
+struct page *nopage_page_array(const struct vm_area_struct *vma, unsigned long pgoff, unsigned long vaddr, int *type, struct pagearray *pages)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#196: FILE: mm/pagearray.c:93:
+	if (pgoff > PAGE_ALIGN(pages->length)/PAGE_SIZE)
 	                                     ^

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#227: FILE: mm/pagearray.c:124:
+int mmap_page_array(const struct vm_area_struct *vma, struct pagearray *pages, const size_t offset, const size_t length)

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: mm/pagearray.c:128:
+	unsigned long end, off, vaddr = vma->vm_start + offset;
+	off = (vma->vm_pgoff << PAGE_SHIFT) + offset;

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#250: FILE: mm/pagearray.c:147:
+			break;
+		} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#252: FILE: mm/pagearray.c:149:
+			pmd_t *pmd = pmd_alloc(vma->vm_mm, pud, vaddr);
+			if (!pmd) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#255: FILE: mm/pagearray.c:152:
+				break;
+			} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#262: FILE: mm/pagearray.c:159:
+					break;
+				} else {

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#278: FILE: mm/pagearray.c:175:
+int mmap_page_array(const struct vm_area_struct *vma, struct pagearray *pages, const size_t offset, const size_t length)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#280: FILE: mm/pagearray.c:177:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#285: FILE: mm/pagearray.c:182:
+static int copy_page_array(struct pagearray *pages, char __user *buf, const size_t offset, const size_t length, const int rw)

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: mm/pagearray.c:197:
+		char *kbuf = kmap_atomic(pages->pages[k], KM_USER0);
+		tail = min(PAGE_SIZE - suboff, (unsigned long)remaining);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#314: FILE: mm/pagearray.c:211:
+		BUG_ON(tail - left > remaining);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#335: FILE: mm/pagearray.c:232:
+int copy_page_array_to_user(struct pagearray *pages, void __user *buf, const size_t offset, const size_t length)

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#352: FILE: mm/pagearray.c:249:
+int copy_page_array_from_user(struct pagearray *pages, void __user *buf, const size_t offset, const size_t length)

WARNING:REPEATED_WORD: Possible repeated word: 'length'
#366: FILE: mm/pagearray.c:263:
+ * bytes into the pagearray, with length length.

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#368: FILE: mm/pagearray.c:265:
+struct scatterlist *pagearray_to_scatterlist(struct pagearray *pages, size_t offset, size_t length, int *sglist_len)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#372: FILE: mm/pagearray.c:269:
+		(PAGE_ALIGN(offset + length) - (offset & PAGE_MASK))/PAGE_SIZE;
 		                                                    ^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#373: FILE: mm/pagearray.c:270:
+	sg = kmalloc(nr_pages * sizeof(struct scatterlist), GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435060.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 54 warnings, 4 checks, 325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000435060.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
