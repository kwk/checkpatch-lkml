WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#94: FILE: drivers/gpu/drm/Kconfig:21:
+config DRM_TTM
+	tristate "TTM memory manager"
+	depends on DRM
+	help
+	  GPU memory management subsystem for devices with multiple
+	  GPU memory types. Will be enabled automatically if a device driver
+	  uses it.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#116: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#136: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:1:
+/**************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#192: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:57:
+	if (unlikely(mem == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#198: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:63:
+		struct page *page = *cur_page;
+		if (!page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#221: FILE: drivers/gpu/drm/ttm/ttm_agp_backend.c:86:
+		printk(KERN_ERR TTM_PFX "AGP Bind memory failed.\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#292: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1:
+/**************************************************************************

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#340: FILE: drivers/gpu/drm/ttm/ttm_bo.c:49:
+static inline uint32_t ttm_bo_type_flags(unsigned type)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: drivers/gpu/drm/ttm/ttm_bo.c:60:
+	BUG_ON(atomic_read(&bo->list_kref.refcount));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#352: FILE: drivers/gpu/drm/ttm/ttm_bo.c:61:
+	BUG_ON(atomic_read(&bo->kref.refcount));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: drivers/gpu/drm/ttm/ttm_bo.c:62:
+	BUG_ON(atomic_read(&bo->cpu_writers));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#354: FILE: drivers/gpu/drm/ttm/ttm_bo.c:63:
+	BUG_ON(bo->sync_obj != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->sync_obj"
#354: FILE: drivers/gpu/drm/ttm/ttm_bo.c:63:
+	BUG_ON(bo->sync_obj != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#355: FILE: drivers/gpu/drm/ttm/ttm_bo.c:64:
+	BUG_ON(bo->mem.mm_node != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->mem.mm_node"
#355: FILE: drivers/gpu/drm/ttm/ttm_bo.c:64:
+	BUG_ON(bo->mem.mm_node != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#356: FILE: drivers/gpu/drm/ttm/ttm_bo.c:65:
+	BUG_ON(!list_empty(&bo->lru));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: drivers/gpu/drm/ttm/ttm_bo.c:66:
+	BUG_ON(!list_empty(&bo->ddestroy));

CHECK:BRACES: braces {} should be used on all arms of this statement
#361: FILE: drivers/gpu/drm/ttm/ttm_bo.c:70:
+	if (bo->destroy)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#363: FILE: drivers/gpu/drm/ttm/ttm_bo.c:72:
+	else {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#371: FILE: drivers/gpu/drm/ttm/ttm_bo.c:80:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#390: FILE: drivers/gpu/drm/ttm/ttm_bo.c:99:
+	BUG_ON(!atomic_read(&bo->reserved));

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#393: FILE: drivers/gpu/drm/ttm/ttm_bo.c:102:
+	if (!(bo->mem.placement & TTM_PL_FLAG_NO_EVICT)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: drivers/gpu/drm/ttm/ttm_bo.c:103:
+		BUG_ON(!list_empty(&bo->lru));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->ttm"
#400: FILE: drivers/gpu/drm/ttm/ttm_bo.c:109:
+		if (bo->ttm != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: drivers/gpu/drm/ttm/ttm_bo.c:150:
+		if (use_sequence && bo->seq_valid &&
+			(sequence - bo->val_seq < (1 << 31))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: drivers/gpu/drm/ttm/ttm_bo.c:178:
+	BUG();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#513: FILE: drivers/gpu/drm/ttm/ttm_bo.c:222:
+	uint32_t page_flags = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#525: FILE: drivers/gpu/drm/ttm/ttm_bo.c:234:
+		if (unlikely(bo->ttm == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#532: FILE: drivers/gpu/drm/ttm/ttm_bo.c:241:
+		if (unlikely(bo->ttm == NULL))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#542: FILE: drivers/gpu/drm/ttm/ttm_bo.c:251:
+		printk(KERN_ERR TTM_PFX "Illegal buffer object type\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->ttm == NULL'
#569: FILE: drivers/gpu/drm/ttm/ttm_bo.c:278:
+	if (!(new_man->flags & TTM_MEMTYPE_FLAG_FIXED) && (bo->ttm == NULL)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#569: FILE: drivers/gpu/drm/ttm/ttm_bo.c:278:
+	if (!(new_man->flags & TTM_MEMTYPE_FLAG_FIXED) && (bo->ttm == NULL)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#585: FILE: drivers/gpu/drm/ttm/ttm_bo.c:294:
+		if (bo->mem.mem_type == TTM_PL_SYSTEM) {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#587: FILE: drivers/gpu/drm/ttm/ttm_bo.c:296:
+			uint32_t save_flags = old_mem->placement;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#596: FILE: drivers/gpu/drm/ttm/ttm_bo.c:305:
+
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#614: FILE: drivers/gpu/drm/ttm/ttm_bo.c:323:
+			printk(KERN_ERR TTM_PFX "Can not flush read caches\n");

CHECK:SPACING: No space is necessary after a cast
#653: FILE: drivers/gpu/drm/ttm/ttm_bo.c:362:
+	(void) ttm_bo_wait(bo, false, false, !remove_all);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#662: FILE: drivers/gpu/drm/ttm/ttm_bo.c:371:
+		BUG_ON(ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#745: FILE: drivers/gpu/drm/ttm/ttm_bo.c:454:
+			bool next_onlist = !list_empty(next);
+			spin_unlock(&bdev->lru_lock);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->vm_node"
#783: FILE: drivers/gpu/drm/ttm/ttm_bo.c:492:
+	if (likely(bo->vm_node != NULL)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#806: FILE: drivers/gpu/drm/ttm/ttm_bo.c:515:
+static int ttm_bo_evict(struct ttm_buffer_object *bo, unsigned mem_type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#812: FILE: drivers/gpu/drm/ttm/ttm_bo.c:521:
+	uint32_t proposed_placement;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#822: FILE: drivers/gpu/drm/ttm/ttm_bo.c:531:
+		printk(KERN_ERR TTM_PFX "Failed to expire sync object before "

WARNING:SPLIT_STRING: quoted string split across lines
#823: FILE: drivers/gpu/drm/ttm/ttm_bo.c:532:
+		printk(KERN_ERR TTM_PFX "Failed to expire sync object before "
+		       "buffer eviction.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: drivers/gpu/drm/ttm/ttm_bo.c:536:
+	BUG_ON(!atomic_read(&bo->reserved));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#842: FILE: drivers/gpu/drm/ttm/ttm_bo.c:551:
+			printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#844: FILE: drivers/gpu/drm/ttm/ttm_bo.c:553:
+			       "Failed to find memory space for "
+			       "buffer 0x%p eviction.\n", bo);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#852: FILE: drivers/gpu/drm/ttm/ttm_bo.c:561:
+			printk(KERN_ERR TTM_PFX "Buffer eviction failed\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#873: FILE: drivers/gpu/drm/ttm/ttm_bo.c:582:
+				  uint32_t mem_type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#948: FILE: drivers/gpu/drm/ttm/ttm_bo.c:657:
+				 uint32_t mem_type,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#949: FILE: drivers/gpu/drm/ttm/ttm_bo.c:658:
+				 uint32_t mask, uint32_t *res_mask)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#951: FILE: drivers/gpu/drm/ttm/ttm_bo.c:660:
+	uint32_t cur_flags = ttm_bo_type_flags(mem_type);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#983: FILE: drivers/gpu/drm/ttm/ttm_bo.c:692:
+		     uint32_t proposed_placement,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#990: FILE: drivers/gpu/drm/ttm/ttm_bo.c:699:
+	uint32_t num_prios = bdev->driver->num_mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#991: FILE: drivers/gpu/drm/ttm/ttm_bo.c:700:
+	const uint32_t *prios = bdev->driver->mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#992: FILE: drivers/gpu/drm/ttm/ttm_bo.c:701:
+	uint32_t i;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#993: FILE: drivers/gpu/drm/ttm/ttm_bo.c:702:
+	uint32_t mem_type = TTM_PL_SYSTEM;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#994: FILE: drivers/gpu/drm/ttm/ttm_bo.c:703:
+	uint32_t cur_flags = 0;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'mem->page_alignment'
#1036: FILE: drivers/gpu/drm/ttm/ttm_bo.c:745:
+							       mem->
+							       page_alignment);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mem_type == TTM_PL_SYSTEM'
#1044: FILE: drivers/gpu/drm/ttm/ttm_bo.c:753:
+	if ((type_ok && (mem_type == TTM_PL_SYSTEM)) || node) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1104: FILE: drivers/gpu/drm/ttm/ttm_bo.c:813:
+		       uint32_t proposed_placement,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1111: FILE: drivers/gpu/drm/ttm/ttm_bo.c:820:
+	BUG_ON(!atomic_read(&bo->reserved));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1150: FILE: drivers/gpu/drm/ttm/ttm_bo.c:859:
+static int ttm_bo_mem_compat(uint32_t proposed_placement,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1162: FILE: drivers/gpu/drm/ttm/ttm_bo.c:871:
+			       uint32_t proposed_placement,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1167: FILE: drivers/gpu/drm/ttm/ttm_bo.c:876:
+	BUG_ON(!atomic_read(&bo->reserved));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1183: FILE: drivers/gpu/drm/ttm/ttm_bo.c:892:
+				printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#1185: FILE: drivers/gpu/drm/ttm/ttm_bo.c:894:
+				       "Failed moving buffer. "
+				       "Proposed placement 0x%08x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1188: FILE: drivers/gpu/drm/ttm/ttm_bo.c:897:
+				printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#1190: FILE: drivers/gpu/drm/ttm/ttm_bo.c:899:
+				       "Out of aperture space or "
+				       "DRM memory quota.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->ttm"
#1199: FILE: drivers/gpu/drm/ttm/ttm_bo.c:908:
+	if (bo->mem.mem_type == TTM_PL_SYSTEM && bo->ttm == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1219: FILE: drivers/gpu/drm/ttm/ttm_bo.c:928:
+		       uint32_t set_flags, uint32_t clr_flags)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1221: FILE: drivers/gpu/drm/ttm/ttm_bo.c:930:
+	uint32_t new_mask = set_flags | clr_flags;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->type == ttm_bo_type_user'
#1223: FILE: drivers/gpu/drm/ttm/ttm_bo.c:932:
+	if ((bo->type == ttm_bo_type_user) &&
+	    (clr_flags & TTM_PL_FLAG_CACHED)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1225: FILE: drivers/gpu/drm/ttm/ttm_bo.c:934:
+		printk(KERN_ERR TTM_PFX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1232: FILE: drivers/gpu/drm/ttm/ttm_bo.c:941:
+			printk(KERN_ERR TTM_PFX "Need to be root to modify"

WARNING:SPLIT_STRING: quoted string split across lines
#1233: FILE: drivers/gpu/drm/ttm/ttm_bo.c:942:
+			printk(KERN_ERR TTM_PFX "Need to be root to modify"
+			       " NO_EVICT status.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1239: FILE: drivers/gpu/drm/ttm/ttm_bo.c:948:
+			printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#1241: FILE: drivers/gpu/drm/ttm/ttm_bo.c:950:
+			       "Incompatible memory specification"
+			       " for NO_EVICT buffer.\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1252: FILE: drivers/gpu/drm/ttm/ttm_bo.c:961:
+			   uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1253: FILE: drivers/gpu/drm/ttm/ttm_bo.c:962:
+			   uint32_t page_alignment,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1258: FILE: drivers/gpu/drm/ttm/ttm_bo.c:967:
+			   void (*destroy) (struct ttm_buffer_object *))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1266: FILE: drivers/gpu/drm/ttm/ttm_bo.c:975:
+		printk(KERN_ERR TTM_PFX "Illegal buffer object size.\n");

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1343: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1052:
+			     uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1344: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1053:
+			     uint32_t page_alignment,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#1362: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1071:
+	if (unlikely(bo == NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1378: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1087:
+			     uint32_t mem_type, bool allow_errors)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1397: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1106:
+			printk(KERN_ERR TTM_PFX "Cleanup eviction failed\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1407: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1116:
+				   unsigned mem_type, bool allow_errors)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1427: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1136:
+		BUG_ON(ret);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1439: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1148:
+int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1445: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1154:
+		printk(KERN_ERR TTM_PFX "Illegal memory type %d\n", mem_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1450: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1159:
+		printk(KERN_ERR TTM_PFX "Trying to take down uninitialized "

WARNING:SPLIT_STRING: quoted string split across lines
#1451: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1160:
+		printk(KERN_ERR TTM_PFX "Trying to take down uninitialized "
+		       "memory manager type %u\n", mem_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1475: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1184:
+int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1480: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1189:
+		printk(KERN_ERR TTM_PFX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1487: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1196:
+		printk(KERN_ERR TTM_PFX

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1497: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1206:
+int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1504: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1213:
+		printk(KERN_ERR TTM_PFX "Illegal memory type %d\n", type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1510: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1219:
+		printk(KERN_ERR TTM_PFX

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1523: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1232:
+			printk(KERN_ERR TTM_PFX

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1545: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1254:
+	unsigned i = TTM_NUM_MEM_TYPES;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'i != TTM_PL_SYSTEM'
#1552: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1261:
+			if ((i != TTM_PL_SYSTEM) && ttm_bo_clean_mm(bdev, i)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1554: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1263:
+				printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#1556: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1265:
+				       "DRM memory manager type %d "
+				       "is not clean.\n", i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1577: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1286:
+	BUG_ON(!drm_mm_clean(&bdev->addr_space_mm));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bdev->dummy_read_page"
#1610: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1319:
+	if (unlikely(bdev->dummy_read_page == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1636: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1345:
+		printk(KERN_ERR TTM_PFX

CHECK:SPACING: No space is necessary after a cast
#1702: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1411:
+	loff_t offset = (loff_t) bo->addr_space_offset;

CHECK:SPACING: No space is necessary after a cast
#1703: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1412:
+	loff_t holelen = ((loff_t) bo->mem.num_pages) << PAGE_SHIFT;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1729: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1438:
+			BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->vm_node"
#1761: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1470:
+	if (unlikely(bo->vm_node == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->vm_node"
#1769: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1478:
+	if (unlikely(bo->vm_node == NULL)) {

CHECK:SPACING: No space is necessary after a cast
#1776: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1485:
+	bo->addr_space_offset = ((uint64_t) bo->vm_node->start) << PAGE_SHIFT;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo->sync_obj"
#1792: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1501:
+	if (likely(bo->sync_obj == NULL))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1796: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1505:
+	while (bo->sync_obj) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1799: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1508:
+			void *tmp_obj = bo->sync_obj;
+			bo->sync_obj = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1824: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1533:
+			void *tmp_obj = bo->sync_obj;
+			bo->sync_obj = NULL;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1849: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1558:
+		if (no_wait)
[...]
+		else if (interruptible) {
[...]
+		} else {
[...]

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1903: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1612:
+	uint32_t swap_placement = (TTM_PL_FLAG_CACHED | TTM_PL_FLAG_SYSTEM);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1931: FILE: drivers/gpu/drm/ttm/ttm_bo.c:1640:
+	BUG_ON(ret != 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1996: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2052: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:57:
+	uint32_t save_flags = old_mem->placement;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2096: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:101:
+	if (!(man->flags & TTM_MEMTYPE_FLAG_NEEDS_IOREMAP))
[...]
+	else {
[...]

CHECK:SPACING: No space is necessary after a cast
#2097: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:102:
+		addr = (void *)(((u8 *) man->io_addr) + bus_offset);

CHECK:BRACES: Unbalanced braces around else statement
#2098: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:103:
+	else {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2123: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:128:
+	uint32_t *dstP =

CHECK:SPACING: No space is necessary after a cast
#2124: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:129:
+	    (uint32_t *) ((unsigned long)dst + (page << PAGE_SHIFT));

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2125: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:130:
+	uint32_t *srcP =

CHECK:SPACING: No space is necessary after a cast
#2126: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:131:
+	    (uint32_t *) ((unsigned long)src + (page << PAGE_SHIFT));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2129: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:134:
+	int i;
+	for (i = 0; i < PAGE_SIZE / sizeof(uint32_t); ++i)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2183: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:188:
+	uint32_t save_flags = old_mem->placement;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2196: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:201:
+	if (old_iomap == NULL && new_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_iomap"
#2196: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:201:
+	if (old_iomap == NULL && new_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2198: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:203:
+	if (old_iomap == NULL && ttm == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ttm"
#2198: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:203:
+	if (old_iomap == NULL && ttm == NULL)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old_mem->mem_type == new_mem->mem_type'
#2204: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:209:
+	if ((old_mem->mem_type == new_mem->mem_type) &&
+	    (new_mem->mm_node->start <
+	     old_mem->mm_node->start + old_mem->mm_node->size)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!old_iomap"
#2213: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:218:
+		if (old_iomap == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new_iomap"
#2215: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:220:
+		else if (new_iomap == NULL)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2222: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:227:
+	mb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ttm != NULL'
#2230: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:235:
+	if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) && (ttm != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ttm"
#2230: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:235:
+	if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) && (ttm != NULL)) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2300: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:305:
+pgprot_t ttm_io_prot(uint32_t caching_flags, pgprot_t tmp)

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2302: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:307:
+#if defined(__i386__) || defined(__x86_64__)

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: No space is necessary after a cast
#2340: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:345:
+		map->virtual = (void *)(((u8 *) man->io_addr) + bus_offset);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2363: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:368:
+	BUG_ON(!ttm);

WARNING:TYPO_SPELLING: 'contigous' may be misspelled - perhaps 'contiguous'?
#2385: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:390:
+		 * or to make the buffer object look contigous.
 		                                     ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2406: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:411:
+	BUG_ON(!list_empty(&bo->swap));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2412: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:417:
+#if 0

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2422: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:427:
+		return ttm_bo_kmap_ttm(bo, start_page, num_pages, map);
+	} else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2447: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:452:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#2464: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:469:
+	int ret;
+	ret = ttm_bo_pci_offset(bdev, mem, &bus_base, &bus_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2465: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:470:
+	ret = ttm_bo_pci_offset(bdev, mem, &bus_base, &bus_offset,
+			&bus_size);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2473: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:478:
+			return -EINVAL;
+		else

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#2494: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:499:
+	uint32_t save_flags = old_mem->placement;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bo->ttm != NULL'
#2514: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:519:
+		if ((man->flags & TTM_MEMTYPE_FLAG_FIXED) &&
+		    (bo->ttm != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo->ttm"
#2515: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:520:
+		    (bo->ttm != NULL)) {

WARNING:TYPO_SPELLING: 'Otherwhise' may be misspelled - perhaps 'Otherwise'?
#2538: FILE: drivers/gpu/drm/ttm/ttm_bo_util.c:543:
+		 * needs to stay alive. Otherwhise hang it on the ghost
 		                        ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2563: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:1:
+/**************************************************************************

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur"
#2613: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:51:
+	while (likely(cur != NULL)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2616: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:54:
+		if (page_start >= cur_offset) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2621: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:59:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!best_bo"
#2625: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:63:
+	if (unlikely(best_bo == NULL))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2673: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:111:
+	if (test_bit(TTM_BO_PRIV_FLAG_MOVING, &bo->priv_flags)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2681: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:119:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2684: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:122:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2734: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:172:
+	for (i = 0; i < TTM_BO_VM_NUM_PREFAULT; ++i) {
+

CHECK:BRACES: Unbalanced braces around else statement
#2738: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:176:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2755: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:193:
+		if (unlikely((ret == -EBUSY) || (ret != 0 && i > 0)))
[...]
+		else if (unlikely(ret != 0)) {
[...]

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2762: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:200:
+
+		}

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2791: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:229:
+static struct vm_operations_struct ttm_bo_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2797: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:235:
+int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,
                              ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo"
#2807: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:245:
+	if (likely(bo != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#2811: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:249:
+	if (unlikely(bo == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2812: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:250:
+		printk(KERN_ERR TTM_PFX

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2822: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:260:
+	ret = driver->verify_access(bo, filp);
 	                                ^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2854: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:292:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2855: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:293:
+ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,
                                                            ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bo"
#2875: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:313:
+	if (likely(bo != NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bo"
#2879: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:317:
+	if (unlikely(bo == NULL))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2888: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:326:
+	ret = driver->verify_access(bo, filp);
 	                                ^^^^

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#2893: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:331:
+	if (unlikely(kmap_offset) >= bo->num_pages) {

WARNING:LIKELY_MISUSE: Using unlikely should generally have parentheses around the comparison
#2967: FILE: drivers/gpu/drm/ttm/ttm_bo_vm.c:405:
+	if (unlikely(kmap_offset) >= bo->num_pages)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3023: FILE: drivers/gpu/drm/ttm/ttm_global.c:1:
+/**************************************************************************

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#3059: FILE: drivers/gpu/drm/ttm/ttm_global.c:37:
+	struct mutex mutex;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3072: FILE: drivers/gpu/drm/ttm/ttm_global.c:50:
+		struct ttm_global_item *item = &glob[i];
+		mutex_init(&item->mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3081: FILE: drivers/gpu/drm/ttm/ttm_global.c:59:
+	int i;
+	for (i = 0; i < TTM_GLOBAL_NUM; ++i) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3083: FILE: drivers/gpu/drm/ttm/ttm_global.c:61:
+		struct ttm_global_item *item = &glob[i];
+		BUG_ON(item->object != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3083: FILE: drivers/gpu/drm/ttm/ttm_global.c:61:
+		BUG_ON(item->object != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "item->object"
#3083: FILE: drivers/gpu/drm/ttm/ttm_global.c:61:
+		BUG_ON(item->object != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3084: FILE: drivers/gpu/drm/ttm/ttm_global.c:62:
+		BUG_ON(item->refcount != 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!item->object"
#3097: FILE: drivers/gpu/drm/ttm/ttm_global.c:75:
+		if (unlikely(item->object == NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3126: FILE: drivers/gpu/drm/ttm/ttm_global.c:104:
+	BUG_ON(item->refcount == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3127: FILE: drivers/gpu/drm/ttm/ttm_global.c:105:
+	BUG_ON(ref->object != item->object);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3143: FILE: drivers/gpu/drm/ttm/ttm_memory.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3192: FILE: drivers/gpu/drm/ttm/ttm_memory.c:50:
+	uint64_t target;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3193: FILE: drivers/gpu/drm/ttm/ttm_memory.c:51:
+	uint64_t total_target;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!glob->shrink"
#3196: FILE: drivers/gpu/drm/ttm/ttm_memory.c:54:
+	if (glob->shrink == NULL)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3237: FILE: drivers/gpu/drm/ttm/ttm_memory.c:95:
+	uint64_t mem;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3264: FILE: drivers/gpu/drm/ttm/ttm_memory.c:122:
+	printk(KERN_INFO TTM_PFX "TTM available graphics memory: %llu MiB\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3266: FILE: drivers/gpu/drm/ttm/ttm_memory.c:124:
+	printk(KERN_INFO TTM_PFX "TTM available object memory: %llu MiB\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3275: FILE: drivers/gpu/drm/ttm/ttm_memory.c:133:
+	printk(KERN_INFO TTM_PFX "Used total memory is %llu bytes.\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3296: FILE: drivers/gpu/drm/ttm/ttm_memory.c:154:
+
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3299: FILE: drivers/gpu/drm/ttm/ttm_memory.c:157:
+			 uint64_t amount, bool himem)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3310: FILE: drivers/gpu/drm/ttm/ttm_memory.c:168:
+				  uint64_t amount, bool himem, bool reserve)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3312: FILE: drivers/gpu/drm/ttm/ttm_memory.c:170:
+	uint64_t limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#3313: FILE: drivers/gpu/drm/ttm/ttm_memory.c:171:
+	uint64_t lomem_limit;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3363: FILE: drivers/gpu/drm/ttm/ttm_memory.c:221:
+	if ((size & (size - 1)) == 0)
[...]
+	else if (size > PAGE_SIZE)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3367: FILE: drivers/gpu/drm/ttm/ttm_memory.c:225:
+		return PAGE_ALIGN(size);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#3367: FILE: drivers/gpu/drm/ttm/ttm_memory.c:225:
+	else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3383: FILE: drivers/gpu/drm/ttm/ttm_module.c:1:
+/**************************************************************************

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3411: FILE: drivers/gpu/drm/ttm/ttm_module.c:29:
+ * ^I    Jerome Glisse$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3439: FILE: drivers/gpu/drm/ttm/ttm_tt.c:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#3485: FILE: drivers/gpu/drm/ttm/ttm_tt.c:47:
+	uint8_t *page_virtual;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#3488: FILE: drivers/gpu/drm/ttm/ttm_tt.c:50:
+	if (unlikely(page == NULL))

WARNING:MEMORY_BARRIER: memory barrier without comment
#3504: FILE: drivers/gpu/drm/ttm/ttm_tt.c:66:
+	mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#3507: FILE: drivers/gpu/drm/ttm/ttm_tt.c:69:
+	mb();

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3518: FILE: drivers/gpu/drm/ttm/ttm_tt.c:80:
+{
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3526: FILE: drivers/gpu/drm/ttm/ttm_tt.c:88:
+		printk(KERN_ERR TTM_PFX

WARNING:LINE_SPACING: Missing a blank line after declarations
#3539: FILE: drivers/gpu/drm/ttm/ttm_tt.c:101:
+	unsigned long size = ttm->num_pages * sizeof(*ttm->pages);
+	ttm->pages = NULL;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3562: FILE: drivers/gpu/drm/ttm/ttm_tt.c:124:
+static struct page *ttm_tt_alloc_page(unsigned page_flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3578: FILE: drivers/gpu/drm/ttm/ttm_tt.c:140:
+	BUG_ON(!(ttm->page_flags & TTM_PAGE_FLAG_USER));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#3587: FILE: drivers/gpu/drm/ttm/ttm_tt.c:149:
+		if (page == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3591: FILE: drivers/gpu/drm/ttm/ttm_tt.c:153:
+			BUG_ON(write);

WARNING:TABSTOP: Statements should start on a tabstop
#3695: FILE: drivers/gpu/drm/ttm/ttm_tt.c:257:
+	    return set_memory_wc((unsigned long) page_address(p), 1);

CHECK:SPACING: No space is necessary after a cast
#3695: FILE: drivers/gpu/drm/ttm/ttm_tt.c:257:
+	    return set_memory_wc((unsigned long) page_address(p), 1);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_page"
#3734: FILE: drivers/gpu/drm/ttm/ttm_tt.c:296:
+		if (likely(cur_page != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_page"
#3748: FILE: drivers/gpu/drm/ttm/ttm_tt.c:310:
+		if (likely(cur_page != NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3785: FILE: drivers/gpu/drm/ttm/ttm_tt.c:347:
+				printk(KERN_ERR TTM_PFX

WARNING:SPLIT_STRING: quoted string split across lines
#3787: FILE: drivers/gpu/drm/ttm/ttm_tt.c:349:
+				       "Erroneous page count. "
+				       "Leaking pages.\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ttm"
#3802: FILE: drivers/gpu/drm/ttm/ttm_tt.c:364:
+	if (unlikely(ttm == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "be"
#3806: FILE: drivers/gpu/drm/ttm/ttm_tt.c:368:
+	if (likely(be != NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ttm->pages"
#3811: FILE: drivers/gpu/drm/ttm/ttm_tt.c:373:
+	if (likely(ttm->pages != NULL)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3836: FILE: drivers/gpu/drm/ttm/ttm_tt.c:398:
+	BUG_ON(num_pages != ttm->num_pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3837: FILE: drivers/gpu/drm/ttm/ttm_tt.c:399:
+	BUG_ON((ttm->page_flags & TTM_PAGE_FLAG_USER) == 0);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3867: FILE: drivers/gpu/drm/ttm/ttm_tt.c:429:
+			     uint32_t page_flags, struct page *dummy_read_page)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3892: FILE: drivers/gpu/drm/ttm/ttm_tt.c:454:
+		printk(KERN_ERR TTM_PFX "Failed allocating page table\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3898: FILE: drivers/gpu/drm/ttm/ttm_tt.c:460:
+		printk(KERN_ERR TTM_PFX "Failed creating ttm backend entry\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3912: FILE: drivers/gpu/drm/ttm/ttm_tt.c:474:
+		BUG_ON(ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3936: FILE: drivers/gpu/drm/ttm/ttm_tt.c:498:
+		printk(KERN_ERR TTM_PFX "Couldn't bind backend.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3970: FILE: drivers/gpu/drm/ttm/ttm_tt.c:532:
+	BUG_ON(swap_storage == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swap_storage"
#3970: FILE: drivers/gpu/drm/ttm/ttm_tt.c:532:
+	BUG_ON(swap_storage == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to_page"
#3979: FILE: drivers/gpu/drm/ttm/ttm_tt.c:541:
+		if (unlikely(to_page == NULL))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4013: FILE: drivers/gpu/drm/ttm/ttm_tt.c:575:
+	BUG_ON(ttm->state != tt_unbound && ttm->state != tt_unpopulated);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4014: FILE: drivers/gpu/drm/ttm/ttm_tt.c:576:
+	BUG_ON(ttm->caching_state != tt_cached);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4028: FILE: drivers/gpu/drm/ttm/ttm_tt.c:590:
+	if (!persistant_swap_storage) {
[...]
+	} else
[...]

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#4032: FILE: drivers/gpu/drm/ttm/ttm_tt.c:594:
+		if (unlikely(IS_ERR(swap_storage))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4033: FILE: drivers/gpu/drm/ttm/ttm_tt.c:595:
+			printk(KERN_ERR "Failed allocating swap storage.\n");

CHECK:BRACES: Unbalanced braces around else statement
#4036: FILE: drivers/gpu/drm/ttm/ttm_tt.c:598:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!from_page"
#4043: FILE: drivers/gpu/drm/ttm/ttm_tt.c:605:
+		if (unlikely(from_page == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!to_page"
#4046: FILE: drivers/gpu/drm/ttm/ttm_tt.c:608:
+		if (unlikely(to_page == NULL))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4080: FILE: include/drm/ttm/ttm_bo_api.h:1:
+/**************************************************************************

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4143: FILE: include/drm/ttm/ttm_bo_api.h:64:
+	uint32_t page_alignment;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4144: FILE: include/drm/ttm/ttm_bo_api.h:65:
+	uint32_t mem_type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4145: FILE: include/drm/ttm/ttm_bo_api.h:66:
+	uint32_t placement;

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#4157: FILE: include/drm/ttm/ttm_bo_api.h:78:
+ * space. These buffers cannot be mmaped from the device address space.
                                   ^^^^^^

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#4198: FILE: include/drm/ttm/ttm_bo_api.h:119:
+ * holds a pointer to a persistant shmem object.
                         ^^^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#4240: FILE: include/drm/ttm/ttm_bo_api.h:161:
+	void (*destroy) (struct ttm_buffer_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_buffer_object *' should also have an identifier name
#4240: FILE: include/drm/ttm/ttm_bo_api.h:161:
+	void (*destroy) (struct ttm_buffer_object *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4242: FILE: include/drm/ttm/ttm_bo_api.h:163:
+	uint64_t addr_space_offset;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#4246: FILE: include/drm/ttm/ttm_bo_api.h:167:
+	/**
+	* Members not needing protection.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4252: FILE: include/drm/ttm/ttm_bo_api.h:173:
+	spinlock_t lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4258: FILE: include/drm/ttm/ttm_bo_api.h:179:
+	uint32_t proposed_placement;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4277: FILE: include/drm/ttm/ttm_bo_api.h:198:
+	uint32_t val_seq;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4287: FILE: include/drm/ttm/ttm_bo_api.h:208:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4303: FILE: include/drm/ttm/ttm_bo_api.h:224:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4311: FILE: include/drm/ttm/ttm_bo_api.h:232:
+	uint32_t cur_placement;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4367: FILE: include/drm/ttm/ttm_bo_api.h:288:
+extern int ttm_bo_wait(struct ttm_buffer_object *bo, bool lazy,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4385: FILE: include/drm/ttm/ttm_bo_api.h:306:
+extern int ttm_buffer_object_validate(struct ttm_buffer_object *bo,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4386: FILE: include/drm/ttm/ttm_bo_api.h:307:
+				      uint32_t proposed_placement,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4395: FILE: include/drm/ttm/ttm_bo_api.h:316:
+extern void ttm_bo_unref(struct ttm_buffer_object **bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4420: FILE: include/drm/ttm/ttm_bo_api.h:341:
+extern void ttm_bo_synccpu_write_release(struct ttm_buffer_object *bo);

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#4437: FILE: include/drm/ttm/ttm_bo_api.h:358:
+ * holds a pointer to a persistant shmem object. Typically, this would
                         ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4454: FILE: include/drm/ttm/ttm_bo_api.h:375:
+extern int ttm_buffer_object_init(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4458: FILE: include/drm/ttm/ttm_bo_api.h:379:
+				  uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4459: FILE: include/drm/ttm/ttm_bo_api.h:380:
+				  uint32_t page_alignment,

WARNING:SPACING: Unnecessary space before function pointer arguments
#4464: FILE: include/drm/ttm/ttm_bo_api.h:385:
+				  void (*destroy) (struct ttm_buffer_object *));

WARNING:TYPO_SPELLING: 'persistant' may be misspelled - perhaps 'persistent'?
#4480: FILE: include/drm/ttm/ttm_bo_api.h:401:
+ * holds a pointer to a persistant shmem object. Typically, this would
                         ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4494: FILE: include/drm/ttm/ttm_bo_api.h:415:
+extern int ttm_buffer_object_create(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4497: FILE: include/drm/ttm/ttm_bo_api.h:418:
+				    uint32_t flags,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4498: FILE: include/drm/ttm/ttm_bo_api.h:419:
+				    uint32_t page_alignment,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4517: FILE: include/drm/ttm/ttm_bo_api.h:438:
+extern int ttm_bo_check_placement(struct ttm_buffer_object *bo,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4518: FILE: include/drm/ttm/ttm_bo_api.h:439:
+				  uint32_t set_flags, uint32_t clr_flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4537: FILE: include/drm/ttm/ttm_bo_api.h:458:
+extern int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4537: FILE: include/drm/ttm/ttm_bo_api.h:458:
+extern int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,

WARNING:TYPO_SPELLING: 'appications' may be misspelled - perhaps 'applications'?
#4557: FILE: include/drm/ttm/ttm_bo_api.h:478:
+ * there are no appications currently validating buffers before this
                 ^^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4566: FILE: include/drm/ttm/ttm_bo_api.h:487:
+extern int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4566: FILE: include/drm/ttm/ttm_bo_api.h:487:
+extern int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4587: FILE: include/drm/ttm/ttm_bo_api.h:508:
+extern int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4587: FILE: include/drm/ttm/ttm_bo_api.h:508:
+extern int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4626: FILE: include/drm/ttm/ttm_bo_api.h:547:
+extern int ttm_bo_kmap(struct ttm_buffer_object *bo, unsigned long start_page,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4637: FILE: include/drm/ttm/ttm_bo_api.h:558:
+extern void ttm_bo_kunmap(struct ttm_bo_kmap_obj *map);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4639: FILE: include/drm/ttm/ttm_bo_api.h:560:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4653: FILE: include/drm/ttm/ttm_bo_api.h:574:
+extern int ttm_fbdev_mmap(struct vm_area_struct *vma,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4659: FILE: include/drm/ttm/ttm_bo_api.h:580:
+ * @filp:      filp as input from the mmap method.
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4659: FILE: include/drm/ttm/ttm_bo_api.h:580:
+ * @filp:      filp as input from the mmap method.
                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4667: FILE: include/drm/ttm/ttm_bo_api.h:588:
+extern int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,
                                     ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4667: FILE: include/drm/ttm/ttm_bo_api.h:588:
+extern int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4674: FILE: include/drm/ttm/ttm_bo_api.h:595:
+ * @filp:      Pointer to the struct file attempting to read / write.
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4691: FILE: include/drm/ttm/ttm_bo_api.h:612:
+extern ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,
                                                                   ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4691: FILE: include/drm/ttm/ttm_bo_api.h:612:
+extern ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4695: FILE: include/drm/ttm/ttm_bo_api.h:616:
+extern void ttm_bo_swapout_all(struct ttm_bo_device *bdev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4704: FILE: include/drm/ttm/ttm_bo_driver.h:1:
+/**************************************************************************

WARNING:SPACING: Unnecessary space before function pointer arguments
#4758: FILE: include/drm/ttm/ttm_bo_driver.h:55:
+	int (*populate) (struct ttm_backend *backend,

WARNING:SPACING: Unnecessary space before function pointer arguments
#4769: FILE: include/drm/ttm/ttm_bo_driver.h:66:
+	void (*clear) (struct ttm_backend *backend);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4782: FILE: include/drm/ttm/ttm_bo_driver.h:79:
+	int (*bind) (struct ttm_backend *backend, struct ttm_mem_reg *bo_mem);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4792: FILE: include/drm/ttm/ttm_bo_driver.h:89:
+	int (*unbind) (struct ttm_backend *backend);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4801: FILE: include/drm/ttm/ttm_bo_driver.h:98:
+	void (*destroy) (struct ttm_backend *backend);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4816: FILE: include/drm/ttm/ttm_bo_driver.h:113:
+	uint32_t flags;

CHECK:BIT_MACRO: Prefer using the BIT macro
#4820: FILE: include/drm/ttm/ttm_bo_driver.h:117:
+#define TTM_PAGE_FLAG_VMALLOC         (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#4821: FILE: include/drm/ttm/ttm_bo_driver.h:118:
+#define TTM_PAGE_FLAG_USER            (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4822: FILE: include/drm/ttm/ttm_bo_driver.h:119:
+#define TTM_PAGE_FLAG_USER_DIRTY      (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4823: FILE: include/drm/ttm/ttm_bo_driver.h:120:
+#define TTM_PAGE_FLAG_WRITE           (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4824: FILE: include/drm/ttm/ttm_bo_driver.h:121:
+#define TTM_PAGE_FLAG_SWAPPED         (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4825: FILE: include/drm/ttm/ttm_bo_driver.h:122:
+#define TTM_PAGE_FLAG_PERSISTANT_SWAP (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4826: FILE: include/drm/ttm/ttm_bo_driver.h:123:
+#define TTM_PAGE_FLAG_ZERO_ALLOC      (1 << 6)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4864: FILE: include/drm/ttm/ttm_bo_driver.h:161:
+	uint32_t page_flags;

CHECK:BIT_MACRO: Prefer using the BIT macro
#4879: FILE: include/drm/ttm/ttm_bo_driver.h:176:
+#define TTM_MEMTYPE_FLAG_FIXED         (1 << 0)	/* Fixed (on-card) PCI memory */

CHECK:BIT_MACRO: Prefer using the BIT macro
#4880: FILE: include/drm/ttm/ttm_bo_driver.h:177:
+#define TTM_MEMTYPE_FLAG_MAPPABLE      (1 << 1)	/* Memory mappable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#4881: FILE: include/drm/ttm/ttm_bo_driver.h:178:
+#define TTM_MEMTYPE_FLAG_NEEDS_IOREMAP (1 << 2)	/* Fixed memory needs ioremap

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4882: FILE: include/drm/ttm/ttm_bo_driver.h:179:
+#define TTM_MEMTYPE_FLAG_NEEDS_IOREMAP (1 << 2)	/* Fixed memory needs ioremap
+						   before kernel access. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4882: FILE: include/drm/ttm/ttm_bo_driver.h:179:
+						   before kernel access. */

CHECK:BIT_MACRO: Prefer using the BIT macro
#4883: FILE: include/drm/ttm/ttm_bo_driver.h:180:
+#define TTM_MEMTYPE_FLAG_CMA           (1 << 3)	/* Can't map aperture */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4917: FILE: include/drm/ttm/ttm_bo_driver.h:214:
+struct ttm_mem_type_manager {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4924: FILE: include/drm/ttm/ttm_bo_driver.h:221:
+	uint32_t flags;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#4929: FILE: include/drm/ttm/ttm_bo_driver.h:226:
+	uint64_t size;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4930: FILE: include/drm/ttm/ttm_bo_driver.h:227:
+	uint32_t available_caching;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4931: FILE: include/drm/ttm/ttm_bo_driver.h:228:
+	uint32_t default_caching;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4969: FILE: include/drm/ttm/ttm_bo_driver.h:266:
+	const uint32_t *mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4970: FILE: include/drm/ttm/ttm_bo_driver.h:267:
+	const uint32_t *mem_busy_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4971: FILE: include/drm/ttm/ttm_bo_driver.h:268:
+	uint32_t num_mem_type_prio;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#4972: FILE: include/drm/ttm/ttm_bo_driver.h:269:
+	uint32_t num_mem_busy_prio;

WARNING:TYPO_SPELLING: 'previosly' may be misspelled - perhaps 'previously'?
#4991: FILE: include/drm/ttm/ttm_bo_driver.h:288:
+	 * A previosly evicted buffer has been rebound in a
 	     ^^^^^^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#4997: FILE: include/drm/ttm/ttm_bo_driver.h:294:
+	int (*invalidate_caches) (struct ttm_bo_device *bdev, uint32_t flags);

WARNING:SPACING: Unnecessary space before function pointer arguments
#4998: FILE: include/drm/ttm/ttm_bo_driver.h:295:
+	int (*init_mem_type) (struct ttm_bo_device *bdev, uint32_t type,

WARNING:SPACING: missing space after return type
#5010: FILE: include/drm/ttm/ttm_bo_driver.h:307:
+	 uint32_t(*evict_flags) (struct ttm_buffer_object *bo);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5010: FILE: include/drm/ttm/ttm_bo_driver.h:307:
+	 uint32_t(*evict_flags) (struct ttm_buffer_object *bo);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5024: FILE: include/drm/ttm/ttm_bo_driver.h:321:
+	int (*move) (struct ttm_buffer_object *bo,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5032: FILE: include/drm/ttm/ttm_bo_driver.h:329:
+	 * @filp: Pointer to a struct file trying to access the object.
 	    ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#5040: FILE: include/drm/ttm/ttm_bo_driver.h:337:
+	int (*verify_access) (struct ttm_buffer_object *bo,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5041: FILE: include/drm/ttm/ttm_bo_driver.h:338:
+			      struct file *filp);
 			                   ^^^^

WARNING:SPACING: Unnecessary space before function pointer arguments
#5053: FILE: include/drm/ttm/ttm_bo_driver.h:350:
+	bool (*sync_obj_signaled) (void *sync_obj, void *sync_arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5054: FILE: include/drm/ttm/ttm_bo_driver.h:351:
+	int (*sync_obj_wait) (void *sync_obj, void *sync_arg,

WARNING:SPACING: Unnecessary space before function pointer arguments
#5056: FILE: include/drm/ttm/ttm_bo_driver.h:353:
+	int (*sync_obj_flush) (void *sync_obj, void *sync_arg);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5057: FILE: include/drm/ttm/ttm_bo_driver.h:354:
+	void (*sync_obj_unref) (void **sync_obj);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5058: FILE: include/drm/ttm/ttm_bo_driver.h:355:
+	void *(*sync_obj_ref) (void *sync_obj);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5064: FILE: include/drm/ttm/ttm_bo_driver.h:361:
+#define TTM_BO_PRIV_FLAG_MOVING  0	/* Buffer object is moving and needs
+					   idling before CPU mapping */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5064: FILE: include/drm/ttm/ttm_bo_driver.h:361:
+					   idling before CPU mapping */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5092: FILE: include/drm/ttm/ttm_bo_driver.h:389:
+struct ttm_bo_device {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5148: FILE: include/drm/ttm/ttm_bo_driver.h:445:
+ttm_flag_masked(uint32_t *old, uint32_t new, uint32_t mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5167: FILE: include/drm/ttm/ttm_bo_driver.h:464:
+extern struct ttm_tt *ttm_tt_create(struct ttm_bo_device *bdev,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5169: FILE: include/drm/ttm/ttm_bo_driver.h:466:
+				    uint32_t page_flags,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5186: FILE: include/drm/ttm/ttm_bo_driver.h:483:
+extern int ttm_tt_set_user(struct ttm_tt *ttm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5198: FILE: include/drm/ttm/ttm_bo_driver.h:495:
+extern int ttm_tt_bind(struct ttm_tt *ttm, struct ttm_mem_reg *bo_mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5207: FILE: include/drm/ttm/ttm_bo_driver.h:504:
+extern void ttm_tt_destroy(struct ttm_tt *ttm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5216: FILE: include/drm/ttm/ttm_bo_driver.h:513:
+extern void ttm_tt_unbind(struct ttm_tt *ttm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5231: FILE: include/drm/ttm/ttm_bo_driver.h:528:
+extern struct page *ttm_tt_get_page(struct ttm_tt *ttm, int index);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5243: FILE: include/drm/ttm/ttm_bo_driver.h:540:
+extern void ttm_tt_cache_flush(struct page *pages[], unsigned long num_pages);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5258: FILE: include/drm/ttm/ttm_bo_driver.h:555:
+extern int ttm_tt_set_placement_caching(struct ttm_tt *ttm, uint32_t placement);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5259: FILE: include/drm/ttm/ttm_bo_driver.h:556:
+extern int ttm_tt_swapout(struct ttm_tt *ttm,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5275: FILE: include/drm/ttm/ttm_bo_driver.h:572:
+extern bool ttm_mem_reg_is_pci(struct ttm_bo_device *bdev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5276: FILE: include/drm/ttm/ttm_bo_driver.h:573:
+extern bool ttm_mem_reg_is_pci(struct ttm_bo_device *bdev,
+				   struct ttm_mem_reg *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5297: FILE: include/drm/ttm/ttm_bo_driver.h:594:
+extern int ttm_bo_mem_space(struct ttm_buffer_object *bo,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5298: FILE: include/drm/ttm/ttm_bo_driver.h:595:
+			    uint32_t proposed_placement,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5313: FILE: include/drm/ttm/ttm_bo_driver.h:610:
+extern int ttm_bo_wait_cpu(struct ttm_buffer_object *bo, bool no_wait);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5329: FILE: include/drm/ttm/ttm_bo_driver.h:626:
+extern int ttm_bo_pci_offset(struct ttm_bo_device *bdev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5335: FILE: include/drm/ttm/ttm_bo_driver.h:632:
+extern int ttm_bo_device_release(struct ttm_bo_device *bdev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5351: FILE: include/drm/ttm/ttm_bo_driver.h:648:
+extern int ttm_bo_device_init(struct ttm_bo_device *bdev,

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#5373: FILE: include/drm/ttm/ttm_bo_driver.h:670:
+ * occuring:
    ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5407: FILE: include/drm/ttm/ttm_bo_driver.h:704:
+extern int ttm_bo_reserve(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5418: FILE: include/drm/ttm/ttm_bo_driver.h:715:
+extern void ttm_bo_unreserve(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5429: FILE: include/drm/ttm/ttm_bo_driver.h:726:
+extern int ttm_bo_wait_unreserved(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5448: FILE: include/drm/ttm/ttm_bo_driver.h:745:
+extern int ttm_bo_block_reservation(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5458: FILE: include/drm/ttm/ttm_bo_driver.h:755:
+extern void ttm_bo_unblock_reservation(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5482: FILE: include/drm/ttm/ttm_bo_driver.h:779:
+extern int ttm_bo_move_ttm(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5504: FILE: include/drm/ttm/ttm_bo_driver.h:801:
+extern int ttm_bo_move_memcpy(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5515: FILE: include/drm/ttm/ttm_bo_driver.h:812:
+extern void ttm_bo_free_old_node(struct ttm_buffer_object *bo);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5536: FILE: include/drm/ttm/ttm_bo_driver.h:833:
+extern int ttm_bo_move_accel_cleanup(struct ttm_buffer_object *bo,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5550: FILE: include/drm/ttm/ttm_bo_driver.h:847:
+extern pgprot_t ttm_io_prot(enum ttm_caching_state c_state, pgprot_t tmp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5566: FILE: include/drm/ttm/ttm_bo_driver.h:863:
+extern struct ttm_backend *ttm_agp_backend_init(struct ttm_bo_device *bdev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5577: FILE: include/drm/ttm/ttm_memory.h:1:
+/**************************************************************************

WARNING:SPACING: Unnecessary space before function pointer arguments
#5623: FILE: include/drm/ttm/ttm_memory.h:47:
+	int (*do_shrink) (struct ttm_mem_shrink *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_mem_shrink *' should also have an identifier name
#5623: FILE: include/drm/ttm/ttm_memory.h:47:
+	int (*do_shrink) (struct ttm_mem_shrink *);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#5658: FILE: include/drm/ttm/ttm_memory.h:82:
+	spinlock_t lock;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5659: FILE: include/drm/ttm/ttm_memory.h:83:
+	uint64_t emer_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5660: FILE: include/drm/ttm/ttm_memory.h:84:
+	uint64_t max_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5661: FILE: include/drm/ttm/ttm_memory.h:85:
+	uint64_t swap_limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5662: FILE: include/drm/ttm/ttm_memory.h:86:
+	uint64_t used_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5663: FILE: include/drm/ttm/ttm_memory.h:87:
+	uint64_t used_total_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5664: FILE: include/drm/ttm/ttm_memory.h:88:
+	uint64_t total_memory_swap_limit;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5665: FILE: include/drm/ttm/ttm_memory.h:89:
+	uint64_t max_total_memory;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5666: FILE: include/drm/ttm/ttm_memory.h:90:
+	uint64_t emer_total_memory;

WARNING:SPACING: Unnecessary space before function pointer arguments
#5677: FILE: include/drm/ttm/ttm_memory.h:101:
+				       int (*func) (struct ttm_mem_shrink *))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "glob->shrink"
#5696: FILE: include/drm/ttm/ttm_memory.h:120:
+	if (glob->shrink != NULL) {

WARNING:TYPO_SPELLING: 'registert' may be misspelled - perhaps 'registered'?
#5709: FILE: include/drm/ttm/ttm_memory.h:133:
+ * @shrink: A previously registert struct ttm_mem_shrink object.
                          ^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5717: FILE: include/drm/ttm/ttm_memory.h:141:
+	BUG_ON(glob->shrink != shrink);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5722: FILE: include/drm/ttm/ttm_memory.h:146:
+extern int ttm_mem_global_init(struct ttm_mem_global *glob);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5723: FILE: include/drm/ttm/ttm_memory.h:147:
+extern void ttm_mem_global_release(struct ttm_mem_global *glob);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5724: FILE: include/drm/ttm/ttm_memory.h:148:
+extern int ttm_mem_global_alloc(struct ttm_mem_global *glob, uint64_t memory,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5726: FILE: include/drm/ttm/ttm_memory.h:150:
+extern void ttm_mem_global_free(struct ttm_mem_global *glob,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5727: FILE: include/drm/ttm/ttm_memory.h:151:
+				uint64_t amount, bool himem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5728: FILE: include/drm/ttm/ttm_memory.h:152:
+extern size_t ttm_round_pot(size_t size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5736: FILE: include/drm/ttm/ttm_module.h:1:
+/**************************************************************************

WARNING:SPACING: Unnecessary space before function pointer arguments
#5784: FILE: include/drm/ttm/ttm_module.h:49:
+	int (*init) (struct ttm_global_reference *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_global_reference *' should also have an identifier name
#5784: FILE: include/drm/ttm/ttm_module.h:49:
+	int (*init) (struct ttm_global_reference *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5785: FILE: include/drm/ttm/ttm_module.h:50:
+	void (*release) (struct ttm_global_reference *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ttm_global_reference *' should also have an identifier name
#5785: FILE: include/drm/ttm/ttm_module.h:50:
+	void (*release) (struct ttm_global_reference *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5788: FILE: include/drm/ttm/ttm_module.h:53:
+extern void ttm_global_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5789: FILE: include/drm/ttm/ttm_module.h:54:
+extern void ttm_global_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5790: FILE: include/drm/ttm/ttm_module.h:55:
+extern int ttm_global_item_ref(struct ttm_global_reference *ref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5791: FILE: include/drm/ttm/ttm_module.h:56:
+extern void ttm_global_item_unref(struct ttm_global_reference *ref);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5800: FILE: include/drm/ttm/ttm_placement.h:1:
+/**************************************************************************

CHECK:BIT_MACRO: Prefer using the BIT macro
#5847: FILE: include/drm/ttm/ttm_placement.h:48:
+#define TTM_PL_FLAG_SYSTEM      (1 << TTM_PL_SYSTEM)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5848: FILE: include/drm/ttm/ttm_placement.h:49:
+#define TTM_PL_FLAG_TT          (1 << TTM_PL_TT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5849: FILE: include/drm/ttm/ttm_placement.h:50:
+#define TTM_PL_FLAG_VRAM        (1 << TTM_PL_VRAM)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5850: FILE: include/drm/ttm/ttm_placement.h:51:
+#define TTM_PL_FLAG_PRIV0       (1 << TTM_PL_PRIV0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5851: FILE: include/drm/ttm/ttm_placement.h:52:
+#define TTM_PL_FLAG_PRIV1       (1 << TTM_PL_PRIV1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5852: FILE: include/drm/ttm/ttm_placement.h:53:
+#define TTM_PL_FLAG_PRIV2       (1 << TTM_PL_PRIV2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5853: FILE: include/drm/ttm/ttm_placement.h:54:
+#define TTM_PL_FLAG_PRIV3       (1 << TTM_PL_PRIV3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5854: FILE: include/drm/ttm/ttm_placement.h:55:
+#define TTM_PL_FLAG_PRIV4       (1 << TTM_PL_PRIV4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5855: FILE: include/drm/ttm/ttm_placement.h:56:
+#define TTM_PL_FLAG_PRIV5       (1 << TTM_PL_PRIV5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5856: FILE: include/drm/ttm/ttm_placement.h:57:
+#define TTM_PL_FLAG_SWAPPED     (1 << TTM_PL_SWAPPED)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5869: FILE: include/drm/ttm/ttm_placement.h:70:
+#define TTM_PL_FLAG_CACHED      (1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5870: FILE: include/drm/ttm/ttm_placement.h:71:
+#define TTM_PL_FLAG_UNCACHED    (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5871: FILE: include/drm/ttm/ttm_placement.h:72:
+#define TTM_PL_FLAG_WC          (1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5872: FILE: include/drm/ttm/ttm_placement.h:73:
+#define TTM_PL_FLAG_SHARED      (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5873: FILE: include/drm/ttm/ttm_placement.h:74:
+#define TTM_PL_FLAG_NO_EVICT    (1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5888: FILE: include/drm/ttm/ttm_placement.h:89:
+#define TTM_ACCESS_READ         (1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#5889: FILE: include/drm/ttm/ttm_placement.h:90:
+#define TTM_ACCESS_WRITE        (1 << 1)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 179 warnings, 249 checks, 5712 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
