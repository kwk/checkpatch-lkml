WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
MODULE_ALIAS("dmi:*:svnMICRO-STARINT'LCO.,LTD:pnMS-1013:pvr0131*:cvnMICRO-STARINT'LCO.,LTD:ct10:*");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#106: FILE: drivers/firmware/Kconfig:87:
+config DMIID
+    bool "Export DMI identification via sysfs to userspace"
+    depends on DMI
+    default y
+	help
+	  Say Y here if you want to query SMBIOS/DMI system identification
+	  information from userspace through /sys/class/dmi/id/ or if you want
+	  DMI-based module auto-loading.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#119: FILE: drivers/firmware/dmi-id.c:1:
+/*-*-linux-c-*-*/

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#136: FILE: drivers/firmware/dmi-id.c:18:
+#define DEFINE_DMI_ATTR(_name, _mode, _show)						\
+static struct device_attribute sys_dmi_##_name##_attr =					\
+	__ATTR(_name, _mode, _show, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#140: FILE: drivers/firmware/dmi-id.c:22:
+#define DEFINE_DMI_ATTR_WITH_SHOW(_name, _mode, _field)					\
+static ssize_t sys_dmi_##_name##_show(struct device *dev,				\
+				      struct device_attribute *attr, char *page)	\
+{											\
+	ssize_t len;									\
+	len = snprintf(page, PAGE_SIZE, "%s\n", dmi_get_system_info(_field));		\
+	page[PAGE_SIZE-2] = '\n';							\
+	page[PAGE_SIZE-1] = 0;								\
+	return min_t(ssize_t, len, PAGE_SIZE);						\
+}											\
+DEFINE_DMI_ATTR(_name, _mode, sys_dmi_##_name##_show);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#146: FILE: drivers/firmware/dmi-id.c:28:
+	page[PAGE_SIZE-2] = '\n';							\
 	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#147: FILE: drivers/firmware/dmi-id.c:29:
+	page[PAGE_SIZE-1] = 0;								\
 	              ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#187: FILE: drivers/firmware/dmi-id.c:69:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#209: FILE: drivers/firmware/dmi-id.c:91:
+	p = buffer + 3; left = buffer_size-5;
 	                                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: drivers/firmware/dmi-id.c:92:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#218: FILE: drivers/firmware/dmi-id.c:100:
+^I^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#242: FILE: drivers/firmware/dmi-id.c:124:
+	ssize_t r;
+	r = get_modalias(page, PAGE_SIZE-1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#242: FILE: drivers/firmware/dmi-id.c:124:
+	r = get_modalias(page, PAGE_SIZE-1);
 	                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#244: FILE: drivers/firmware/dmi-id.c:126:
+	return r+1;
 	        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#249: FILE: drivers/firmware/dmi-id.c:131:
+static struct attribute *sys_dmi_attributes[DMI_STRING_MAX+2];
                                                           ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#255: FILE: drivers/firmware/dmi-id.c:137:
+static struct attribute_group* sys_dmi_attribute_groups[] = {

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: drivers/firmware/dmi-id.c:143:
+static int dmi_dev_uevent(struct device *dev, char **envp,
+			    int num_envp, char *buffer, int buffer_size)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#264: FILE: drivers/firmware/dmi-id.c:146:
+	get_modalias(buffer+9, buffer_size-9);
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#264: FILE: drivers/firmware/dmi-id.c:146:
+	get_modalias(buffer+9, buffer_size-9);
 	                                  ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#281: FILE: drivers/firmware/dmi-id.c:163:
+#define ADD_DMI_ATTR(_name, _field) \
+	if (dmi_get_system_info(_field)) \
+		sys_dmi_attributes[i++] = & sys_dmi_##_name##_attr.attr; 

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#281: FILE: drivers/firmware/dmi-id.c:163:
+#define ADD_DMI_ATTR(_name, _field) \
+	if (dmi_get_system_info(_field)) \
+		sys_dmi_attributes[i++] = & sys_dmi_##_name##_attr.attr; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#283: FILE: drivers/firmware/dmi-id.c:165:
+^I^Isys_dmi_attributes[i++] = & sys_dmi_##_name##_attr.attr; $

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#283: FILE: drivers/firmware/dmi-id.c:165:
+		sys_dmi_attributes[i++] = & sys_dmi_##_name##_attr.attr; 
 		                          ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#285: FILE: drivers/firmware/dmi-id.c:167:
+extern int dmi_available;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#296: FILE: drivers/firmware/dmi-id.c:178:
+	 * what's available */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#298: FILE: drivers/firmware/dmi-id.c:180:
+^IADD_DMI_ATTR(bios_vendor,^IDMI_BIOS_VENDOR); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#327: FILE: drivers/firmware/dmi-id.c:209:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#335: FILE: drivers/firmware/dmi-id.c:217:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#341: FILE: drivers/firmware/dmi-id.c:223:
+^I$

CHECK:SPACING: No space is necessary after a cast
#369: FILE: drivers/firmware/dmi_scan.c:108:
+	u8 *d = (u8*) dm + index;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#369: FILE: drivers/firmware/dmi_scan.c:108:
+	u8 *d = (u8*) dm + index;

ERROR:SPACING: space required before the open parenthesis '('
#377: FILE: drivers/firmware/dmi_scan.c:116:
+		if(d[i] != 0x00) is_ff = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#377: FILE: drivers/firmware/dmi_scan.c:116:
+		if(d[i] != 0x00) is_ff = 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:SPACING: space required before the open parenthesis '('
#378: FILE: drivers/firmware/dmi_scan.c:117:
+		if(d[i] != 0xFF) is_00 = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#378: FILE: drivers/firmware/dmi_scan.c:117:
+		if(d[i] != 0xFF) is_00 = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#384: FILE: drivers/firmware/dmi_scan.c:123:
+	s = dmi_alloc(16*2+4+1);
 	                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: drivers/firmware/dmi_scan.c:123:
+	s = dmi_alloc(16*2+4+1);
 	                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#384: FILE: drivers/firmware/dmi_scan.c:123:
+	s = dmi_alloc(16*2+4+1);
 	                    ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#392: FILE: drivers/firmware/dmi_scan.c:131:
+^I  $

CHECK:SPACING: No space is necessary after a cast
#398: FILE: drivers/firmware/dmi_scan.c:137:
+	u8 *d = (u8*) dm + index;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#398: FILE: drivers/firmware/dmi_scan.c:137:
+	u8 *d = (u8*) dm + index;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#459: FILE: drivers/firmware/dmi_scan.c:315:
+^I^I}^I $

ERROR:CODE_INDENT: code indent should use tabs where possible
#497: FILE: drivers/misc/msi-laptop.c:288:
+        printk("msi-laptop: Identified laptop model '%s'.\n", id->ident);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#497: FILE: drivers/misc/msi-laptop.c:288:
+        printk("msi-laptop: Identified laptop model '%s'.\n", id->ident);$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#497: FILE: drivers/misc/msi-laptop.c:288:
+        printk("msi-laptop: Identified laptop model '%s'.\n", id->ident);

ERROR:CODE_INDENT: code indent should use tabs where possible
#498: FILE: drivers/misc/msi-laptop.c:289:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: drivers/misc/msi-laptop.c:289:
+        return 0;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 12 warnings, 14 checks, 455 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434705.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
