WARNING:TYPO_SPELLING: 'usefulfor' may be misspelled - perhaps 'useful for'?
#38: 
Just in case anyone wonders what this is usefulfor I've ported my
                                         ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#47: 
of going away in favour of more general tracing code aswell.
                                                     ^^^^^^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
--- linux-2.6.orig/arch/powerpc/platforms/cell/spufs/Makefile	2007-08-30 18:46:07.000000000 +0200

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: arch/powerpc/platforms/cell/spufs/sched.c:816:
+			spu_context_trace(spusched_tick__preempt_failed,
+						ctx, spu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#194: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#208: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:15:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#209: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:16:
+#include <asm/uaccess.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#228: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:35:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#247: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:54:
+        const struct sputrace *t = sputrace_log + sputrace_tail % bufsize;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:54:
+        const struct sputrace *t = sputrace_log + sputrace_tail % bufsize;$

CHECK:SPACING: No space is necessary after a cast
#253: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:60:
+		(unsigned long) tv.tv_sec,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#254: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:61:
+		(unsigned long) tv.tv_nsec,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:69:
+static ssize_t sputrace_read(struct file *file, char __user *buf,
+		size_t len, loff_t *ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:108:
+static int tcpprobe_open(struct inode * inode, struct file * file)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:108:
+static int tcpprobe_open(struct inode * inode, struct file * file)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:111:
+	sputrace_head = sputrace_tail = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:125:
+static void sputrace_log_item(const char *name, struct spu_context *ctx,
+		struct spu *spu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#332: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:139:
+		printk(KERN_WARNING

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:148:
+static void spu_context_event(const struct __mark_marker *mdata,
+		void *private, const char *format, ...)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:164:
+static void spu_context_nospu_event(const struct __mark_marker *mdata,
+		void *private, const char *format, ...)

WARNING:ALLOC_ARRAY_ARGS: kcalloc uses number as first arg, sizeof is generally wrong
#393: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:200:
+	sputrace_log = kcalloc(sizeof(struct sputrace),

The first argument for kcalloc or kmalloc_array should be the
number of elements.  sizeof() as the first argument is generally
wrong.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:201:
+	sputrace_log = kcalloc(sizeof(struct sputrace),
+				bufsize, GFP_KERNEL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#398: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:205:
+	entry = create_proc_entry("sputrace", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#409: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:216:
+			printk(KERN_INFO "Unable to register probe %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:217:
+			printk(KERN_INFO "Unable to register probe %s\n",
+					p->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#414: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:221:
+			printk(KERN_INFO "Unable to arm probe %s\n", p->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#420: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:227:
+ ^Ikfree(sputrace_log);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#420: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:227:
+ ^Ikfree(sputrace_log);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:227:
+ ^Ikfree(sputrace_log);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#422: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:229:
+ ^Ireturn -ENOMEM;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:229:
+ ^Ireturn -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:229:
+ ^Ireturn -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:239:
+ ^Iremove_proc_entry("sputrace", NULL);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:239:
+ ^Iremove_proc_entry("sputrace", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: arch/powerpc/platforms/cell/spufs/sputrace.c:239:
+ ^Iremove_proc_entry("sputrace", NULL);$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#479: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:342:
+#define spu_context_trace(name, ctx, spu) \
+	trace_mark(name, "%p %p", ctx, spu);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#481: FILE: arch/powerpc/platforms/cell/spufs/spufs.h:344:
+#define spu_context_nospu_trace(name, ctx) \
+	trace_mark(name, "%p", ctx);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385357.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 18 warnings, 13 checks, 397 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385357.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
