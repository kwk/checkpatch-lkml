WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#88: 
Apply http://www.rdrop.com/users/paulmck/patches/paulmck-rcu.2008.08.20a.patch

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#124: FILE: include/linux/rcuclassic.h:30:
+ * ^IDocumentation/RCU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#125: FILE: include/linux/rcuclassic.h:31:
+ * ^Ihttp://lwn.net/Articles/262464/ (What is RCU, Fundamentally?)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#126: FILE: include/linux/rcuclassic.h:32:
+ * ^Ihttp://lwn.net/Articles/263130/ (What is RCU's Usage?)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: include/linux/rcuclassic.h:33:
+ * ^Ihttp://lwn.net/Articles/264090/ (What is RCU's API? + references)$

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#158: FILE: include/linux/rcuclassic.h:59:
+#elif NR_CPUS <= CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#158: FILE: include/linux/rcuclassic.h:59:
+#elif NR_CPUS <= CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#162: FILE: include/linux/rcuclassic.h:63:
+	(((NR_CPUS) + (CONFIG_RCU_FANOUT) - 1) / (CONFIG_RCU_FANOUT))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#167: FILE: include/linux/rcuclassic.h:68:
+#elif NR_CPUS <= CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#167: FILE: include/linux/rcuclassic.h:68:
+#elif NR_CPUS <= CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT * CONFIG_RCU_FANOUT

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#172: FILE: include/linux/rcuclassic.h:73:
+	(((NR_CPUS) + (RCU_FANOUT_SQ) - 1) / (RCU_FANOUT_SQ))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#173: FILE: include/linux/rcuclassic.h:74:
+#define NUM_RCU_LEVEL_3 \
+	((NR_CPUS) + (CONFIG_RCU_FANOUT) - 1) / (CONFIG_RCU_FANOUT)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#174: FILE: include/linux/rcuclassic.h:75:
+	((NR_CPUS) + (CONFIG_RCU_FANOUT) - 1) / (CONFIG_RCU_FANOUT)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#191: FILE: include/linux/rcuclassic.h:89:
+	spinlock_t lock;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: include/linux/rcuclassic.h:166:
+^Ilong            qlen; ^I ^I/* # of queued callbacks */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: kernel/rcuclassic.c:31:
+ * ^IDocumentation/RCU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#386: FILE: kernel/rcuclassic.c:32:
+ * ^Ihttp://lwn.net/Articles/262464/ (What is RCU, Fundamentally?)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#387: FILE: kernel/rcuclassic.c:33:
+ * ^Ihttp://lwn.net/Articles/263130/ (What is RCU's Usage?)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: kernel/rcuclassic.c:34:
+ * ^Ihttp://lwn.net/Articles/264090/ (What is RCU's API? + references)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#398: FILE: kernel/rcuclassic.c:65:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LEVEL_1,  /* root of hierarchy. */ \
+		NUM_RCU_LEVEL_2, \
+		NUM_RCU_LEVEL_3, \
+		NUM_RCU_LEVEL_4, /* == MAX_RCU_LEVELS */ \
+	}, \
+	.signaled = 0, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'name' may be better as '(name)' to avoid precedence issues
#398: FILE: kernel/rcuclassic.c:65:
+#define RCU_STATE_INITIALIZER(name) { \
+	.level = { &name.node[0] }, \
+	.levelcnt = { \
+		NUM_RCU_LEVEL_1,  /* root of hierarchy. */ \
+		NUM_RCU_LEVEL_2, \
+		NUM_RCU_LEVEL_3, \
+		NUM_RCU_LEVEL_4, /* == MAX_RCU_LEVELS */ \
+	}, \
+	.signaled = 0, \
+	.gpnum = -300, \
+	.completed = -300, \
+	.onofflock = __SPIN_LOCK_UNLOCKED(&name.onofflock), \
+}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#726: FILE: kernel/rcuclassic.c:261:
+	for (i = NUM_RCU_LEVELS - 1; i >= 0; i--) {
+		levelspread[i] = CONFIG_RCU_FANOUT;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#729: FILE: kernel/rcuclassic.c:264:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#730: FILE: kernel/rcuclassic.c:265:
+	
+}

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#738: FILE: kernel/rcuclassic.c:273:
+	cprv = NR_CPUS;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#744: FILE: kernel/rcuclassic.c:279:
+^I$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#745: FILE: kernel/rcuclassic.c:280:
+	
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#858: FILE: kernel/rcuclassic.c:381:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#929: FILE: kernel/rcuclassic.c:443:
+	if (rdp->completed != completed_snap) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#967: FILE: kernel/rcuclassic.c:470:
+		if (!(rnp->qsmask & mask)) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#975: FILE: kernel/rcuclassic.c:478:
+		if (rnp->qsmask != 0) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp->parent"
#982: FILE: kernel/rcuclassic.c:485:
+		if (rnp->parent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#983: FILE: kernel/rcuclassic.c:486:
+		if (rnp->parent == NULL) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp"
#1101: FILE: kernel/rcuclassic.c:578:
+		if (rnp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nxtlist"
#1131: FILE: kernel/rcuclassic.c:599:
+	if (rdp->nxtlist != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "list"
#1255: FILE: kernel/rcuclassic.c:678:
+	if (list != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1488: FILE: kernel/rcuclassic.c:898:
+void call_rcu(struct rcu_head *head,
+				void (*func)(struct rcu_head *rcu))

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#1516: FILE: kernel/rcuclassic.c:926:
+void call_rcu_bh(struct rcu_head *head,

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1517: FILE: kernel/rcuclassic.c:927:
+void call_rcu_bh(struct rcu_head *head,
+				void (*func)(struct rcu_head *rcu))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rnp == NULL'
#1575: FILE: kernel/rcuclassic.c:983:
+		if ((rnp == NULL) || !!(rnp->qsmaskinit & mask))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rnp"
#1575: FILE: kernel/rcuclassic.c:983:
+		if ((rnp == NULL) || !!(rnp->qsmaskinit & mask))

WARNING:TYPO_SPELLING: 'notifcation' may be misspelled - perhaps 'notification'?
#1596: FILE: kernel/rcuclassic.c:1002:
+ * Handle CPU online/offline notifcation events.
                              ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1616: FILE: kernel/rcuclassic.c:1035:
+	for (i = 1; i < NUM_RCU_LEVELS; i++) {
+		rsp->level[i] = rsp->level[i - 1] + rsp->levelcnt[i - 1];
+	}

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1634: FILE: kernel/rcuclassic.c:1053:
+				rnp->grplo = rnp->grphi = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1640: FILE: kernel/rcuclassic.c:1059:
+^I^I^I^Irnp->parent = rsp->level[i - 1] + $

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1692: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1697: FILE: kernel/rcuclassic_trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1711: FILE: kernel/rcuclassic_trace.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1712: FILE: kernel/rcuclassic_trace.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1719: FILE: kernel/rcuclassic_trace.c:23:
+ * ^I^IDocumentation/RCU$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1730: FILE: kernel/rcuclassic_trace.c:34:
+#include <asm/atomic.h>

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'buf' - possible side-effects?
#1759: FILE: kernel/rcuclassic_trace.c:63:
+#define PRINT_RCU_DATA(name, buf, ebuf) \
+	do { \
+		int _p_r_d_i; \
+		\
+		for_each_online_cpu(_p_r_d_i) \
+			(buf) += print_one_rcu_data(&per_cpu(name, _p_r_d_i), \
+						    buf, ebuf); \
+	} while (0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1768: FILE: kernel/rcuclassic_trace.c:72:
+static ssize_t rcudata_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1769: FILE: kernel/rcuclassic_trace.c:73:
+static ssize_t rcudata_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1781: FILE: kernel/rcuclassic_trace.c:85:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1809: FILE: kernel/rcuclassic_trace.c:113:
+static ssize_t rcuhier_read(struct file *filp, char __user *buffer,
                                          ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1810: FILE: kernel/rcuclassic_trace.c:114:
+static ssize_t rcuhier_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: kernel/rcuclassic_trace.c:126:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1827: FILE: kernel/rcuclassic_trace.c:131:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
                                        ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1828: FILE: kernel/rcuclassic_trace.c:132:
+static ssize_t rcugp_read(struct file *filp, char __user *buffer,
+				size_t count, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1840: FILE: kernel/rcuclassic_trace.c:144:
+	bcount = simple_read_from_buffer(buffer, count, ppos,
+			rcuclassic_trace_buf, strlen(rcuclassic_trace_buf));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1845: FILE: kernel/rcuclassic_trace.c:149:
+static struct file_operations rcudata_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1850: FILE: kernel/rcuclassic_trace.c:154:
+static struct file_operations rcuhier_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1855: FILE: kernel/rcuclassic_trace.c:159:
+static struct file_operations rcugp_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1867: FILE: kernel/rcuclassic_trace.c:171:
+	datadir = debugfs_create_file("rcudata", 0444, rcudir,
+						NULL, &rcudata_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1876: FILE: kernel/rcuclassic_trace.c:180:
+	hierdir = debugfs_create_file("rcuhier", 0444, rcudir,
+						NULL, &rcuhier_fops);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1882: FILE: kernel/rcuclassic_trace.c:186:
+	if (datadir)
+		debugfs_remove(datadir);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#1884: FILE: kernel/rcuclassic_trace.c:188:
+	if (gpdir)
+		debugfs_remove(gpdir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1913: FILE: kernel/rcuclassic_trace.c:217:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 34 warnings, 29 checks, 1770 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236690.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
