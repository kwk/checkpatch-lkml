WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
Introduce a copy on write credentials record (struct cred).  The fsuid, fsgid,

WARNING:LINE_SPACING: Missing a blank line after declarations
#178: FILE: arch/mips/kernel/kspd.c:178:
+	struct cred *cred = dup_cred(current->cred);
+	change_fsuid(cred, uid);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));
                                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));
                                                                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <_GetXid>
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#333: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current->cred->uid));

CHECK:CAMELCASE: Avoid CamelCase: <treeCon>
#410: FILE: fs/cifs/misc.c:355:
+				if (current->cred->uid != treeCon->ses->linux_uid) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#417: FILE: fs/cifs/misc.c:361:
+						if (ses->linux_uid == current->cred->uid) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: braces {} should be used on all arms of this statement
#431: FILE: fs/coda/cache.c:35:
+	if (cii->c_uid != current->cred->uid) {
[...]
         } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: fs/coda/cache.c:36:
+                cii->c_uid = current->cred->uid;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: fs/coda/cache.c:36:
+                cii->c_uid = current->cred->uid;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: fs/hugetlbfs/inode.c:463:
+	inode = hugetlbfs_get_inode(dir->i_sb, current->cred->uid,
 					gid, S_IFLNK|S_IRWXUGO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: fs/hugetlbfs/inode.c:820:
+	inode = hugetlbfs_get_inode(root->d_sb, current->cred->uid,
+				current->cred->gid, S_IFREG | S_IRWXUGO, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#916: FILE: fs/hugetlbfs/inode.c:820:
+				current->cred->gid, S_IFREG | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->cred->uid != inode->i_uid'
#970: FILE: fs/locks.c:1344:
+	if ((current->cred->uid != inode->i_uid) && !capable(CAP_LEASE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#1092: FILE: fs/nfsd/nfs4callback.c:352:
+        struct cred *acred;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: fs/nfsd/nfs4callback.c:352:
+        struct cred *acred;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1103: FILE: fs/nfsd/nfs4callback.c:359:
+        change_fsuid(acred, clp->cl_cred.cr_uid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: fs/nfsd/nfs4callback.c:359:
+        change_fsuid(acred, clp->cl_cred.cr_uid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1104: FILE: fs/nfsd/nfs4callback.c:360:
+        change_fsgid(acred, clp->cl_cred.cr_gid);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: fs/nfsd/nfs4callback.c:360:
+        change_fsgid(acred, clp->cl_cred.cr_gid);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: fs/nfsd/nfs4callback.c:361:
+        change_groups(acred, clp->cl_cred.cr_group_info);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: fs/nfsd/nfs4callback.c:361:
+        change_groups(acred, clp->cl_cred.cr_group_info);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1111: FILE: fs/nfsd/nfs4callback.c:365:
+        ret = rpcauth_lookup_credcache(clnt->cl_auth, acred, taskflags);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1111: FILE: fs/nfsd/nfs4callback.c:365:
+        ret = rpcauth_lookup_credcache(clnt->cl_auth, acred, taskflags);$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1140: FILE: fs/nfsd/nfs4recover.c:66:
+	 * either */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1151: FILE: fs/nfsd/nfs4recover.c:74:
+	 * either */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1577: FILE: fs/xfs/linux-2.6/xfs_cred.h:26:
+typedef struct cred cred_t;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1638: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1643: FILE: include/linux/cred.h:1:
+/* Credentials management

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1677: FILE: include/linux/cred.h:35:
+extern struct cred *dup_cred(const struct cred *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cred *' should also have an identifier name
#1677: FILE: include/linux/cred.h:35:
+extern struct cred *dup_cred(const struct cred *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1678: FILE: include/linux/cred.h:36:
+extern void put_cred(struct cred *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1678: FILE: include/linux/cred.h:36:
+extern void put_cred(struct cred *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1679: FILE: include/linux/cred.h:37:
+extern void change_fsuid(struct cred *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1679: FILE: include/linux/cred.h:37:
+extern void change_fsuid(struct cred *, uid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uid_t' should also have an identifier name
#1679: FILE: include/linux/cred.h:37:
+extern void change_fsuid(struct cred *, uid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1680: FILE: include/linux/cred.h:38:
+extern void change_fsgid(struct cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1680: FILE: include/linux/cred.h:38:
+extern void change_fsgid(struct cred *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#1680: FILE: include/linux/cred.h:38:
+extern void change_fsgid(struct cred *, gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1681: FILE: include/linux/cred.h:39:
+extern void change_groups(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1681: FILE: include/linux/cred.h:39:
+extern void change_groups(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#1681: FILE: include/linux/cred.h:39:
+extern void change_groups(struct cred *, struct group_info *);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1799: FILE: include/linux/cred.h:157:
+#define set_current_cred(CRED)				\
+do {							\
+	put_cred(__set_current_cred(CRED));		\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1878: FILE: include/linux/sched.h:1039:
+	uid_t uid,euid,suid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1878: FILE: include/linux/sched.h:1039:
+	uid_t uid,euid,suid;
 	              ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: include/linux/sched.h:1040:
+	gid_t gid,egid,sgid;
 	         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1879: FILE: include/linux/sched.h:1040:
+	gid_t gid,egid,sgid;
 	              ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#1915: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1915: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1915: FILE: include/linux/sunrpc/auth.h:100:
+	struct rpc_cred *	(*lookup_cred)(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth*' should also have an identifier name
#1916: FILE: include/linux/sunrpc/auth.h:101:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1916: FILE: include/linux/sunrpc/auth.h:101:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1916: FILE: include/linux/sunrpc/auth.h:101:
+	struct rpc_cred *	(*crcreate)(struct rpc_auth*, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1925: FILE: include/linux/sunrpc/auth.h:109:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred *' should also have an identifier name
#1925: FILE: include/linux/sunrpc/auth.h:109:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1925: FILE: include/linux/sunrpc/auth.h:109:
+	int			(*crmatch)(struct cred *, struct rpc_cred *, int);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#1935: FILE: include/linux/sunrpc/auth.h:130:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#1935: FILE: include/linux/sunrpc/auth.h:130:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#1935: FILE: include/linux/sunrpc/auth.h:130:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1935: FILE: include/linux/sunrpc/auth.h:130:
+struct rpc_cred *	rpcauth_lookup_credcache(struct rpc_auth *, struct cred *, int);

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#1936: FILE: include/linux/sunrpc/auth.h:131:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred *' should also have an identifier name
#1936: FILE: include/linux/sunrpc/auth.h:131:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cred *' should also have an identifier name
#1936: FILE: include/linux/sunrpc/auth.h:131:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#1936: FILE: include/linux/sunrpc/auth.h:131:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rpc_credops *' should also have an identifier name
#1936: FILE: include/linux/sunrpc/auth.h:131:
+void			rpcauth_init_cred(struct rpc_cred *, const struct cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2031: FILE: kernel/cred.c:1:
+/* Credential caching/management

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2057: FILE: kernel/cred.c:27:
+EXPORT_SYMBOL(init_cred);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cred)...) over kmalloc(sizeof(struct cred)...)
#2071: FILE: kernel/cred.c:41:
+	cred = kmalloc(sizeof(struct cred), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2080: FILE: kernel/cred.c:50:
+EXPORT_SYMBOL(dup_cred);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2107: FILE: kernel/cred.c:77:
+EXPORT_SYMBOL(put_cred);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2121: FILE: kernel/cred.c:91:
+EXPORT_SYMBOL(change_fsuid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2135: FILE: kernel/cred.c:105:
+EXPORT_SYMBOL(change_fsgid);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2153: FILE: kernel/cred.c:123:
+EXPORT_SYMBOL(change_groups);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2201: FILE: kernel/fork.c:1023:
+	if ((retval = copy_cred(p) < 0))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2236: FILE: kernel/kernel-int.h:1:
+/* kernel/ internal definitions

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2317: FILE: kernel/sys.c:1090:
+		current->gid = current->egid = current->sgid = gid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2745: FILE: net/sunrpc/auth.c:271:
+rpcauth_lookup_credcache(struct rpc_auth *auth, struct cred *acred,
 		int flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2891: FILE: security/commoncap.c:165:
+	current->suid = current->euid = current->cred->uid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2892: FILE: security/commoncap.c:166:
+	current->sgid = current->egid = current->cred->gid = bprm->e_gid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2934: FILE: security/dummy.c:143:
+	current->suid = current->euid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2935: FILE: security/dummy.c:144:
+	current->sgid = current->egid = bprm->e_gid;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 52 warnings, 20 checks, 2438 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000371098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
