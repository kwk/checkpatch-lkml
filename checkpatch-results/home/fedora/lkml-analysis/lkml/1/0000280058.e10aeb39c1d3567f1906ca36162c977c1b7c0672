CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#67: FILE: drivers/hid/hid-core.c:1155:
+		if (id == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: drivers/hid/hid-input.c:394:
+	if (device->driver->input_mapping &&
+			device->driver->input_mapping(device, hidinput, usage,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#210: FILE: drivers/hid/usbhid/hid-core.c:723:
+		printk(KERN_ERR "HID device claimed by neither input, hiddev "

WARNING:SPLIT_STRING: quoted string split across lines
#211: FILE: drivers/hid/usbhid/hid-core.c:724:
+		printk(KERN_ERR "HID device claimed by neither input, hiddev "
+				"nor hidraw\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/hid/usbhid/hid-core.c:733:
+		hid_fixup_sony_ps3_controller(interface_to_usbdev(intf),
+			intf->cur_altsetting->desc.bInterfaceNumber);

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#220: FILE: drivers/hid/usbhid/hid-core.c:733:
+			intf->cur_altsetting->desc.bInterfaceNumber);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#222: FILE: drivers/hid/usbhid/hid-core.c:735:
+	printk(KERN_INFO);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#225: FILE: drivers/hid/usbhid/hid-core.c:738:
+		printk("input");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/hid/usbhid/hid-core.c:740:
+	if ((hid->claimed & HID_CLAIMED_INPUT) &&
+			((hid->claimed & HID_CLAIMED_HIDDEV) ||

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: drivers/hid/usbhid/hid-core.c:742:
+		printk(",");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: drivers/hid/usbhid/hid-core.c:744:
+		printk("hiddev%d", hid->minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: drivers/hid/usbhid/hid-core.c:746:
+	if ((hid->claimed & HID_CLAIMED_INPUT) &&
+			(hid->claimed & HID_CLAIMED_HIDDEV) &&

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#235: FILE: drivers/hid/usbhid/hid-core.c:748:
+		printk(",");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#237: FILE: drivers/hid/usbhid/hid-core.c:750:
+		printk("hidraw%d", ((struct hidraw *)hid->hidraw)->minor);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#253: FILE: drivers/hid/usbhid/hid-core.c:766:
+	printk(": USB HID v%x.%02x %s [%s] on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: drivers/hid/usbhid/hid-core.c:767:
+	printk(": USB HID v%x.%02x %s [%s] on %s\n",
+		hid->version >> 8, hid->version & 0xff, type, hid->name, path);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#283: FILE: drivers/hid/usbhid/hid-core.c:797:
 	if ((quirks & HID_QUIRK_IGNORE_MOUSE) &&
[...]
+			return -ENODEV;

CHECK:CAMELCASE: Avoid CamelCase: <bcdHID>
#297: FILE: drivers/hid/usbhid/hid-core.c:808:
+	hid->version = le16_to_cpu(hdesc->bcdHID);

CHECK:CAMELCASE: Avoid CamelCase: <bCountryCode>
#298: FILE: drivers/hid/usbhid/hid-core.c:809:
+	hid->country = hdesc->bCountryCode;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: drivers/hid/usbhid/hid-core.c:828:
+	ret = hid_get_class_descriptor(dev, interface->desc.bInterfaceNumber,
+			HID_DT_REPORT, rdesc, rsize);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*usbhid)...) over kzalloc(sizeof(struct usbhid_device)...)
#371: FILE: drivers/hid/usbhid/hid-core.c:869:
+	usbhid = kzalloc(sizeof(struct usbhid_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!usbhid"
#372: FILE: drivers/hid/usbhid/hid-core.c:870:
+	if (usbhid == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#583: FILE: drivers/hid/usbhid/hid-core.c:1055:
+	hid->vendor = le16_to_cpu(dev->descriptor.idVendor);

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#584: FILE: drivers/hid/usbhid/hid-core.c:1056:
+	hid->product = le16_to_cpu(dev->descriptor.idProduct);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#615: FILE: drivers/hid/usbhid/hid-core.c:1060:
+		strlcpy(hid->name, dev->manufacturer, sizeof(hid->name));

CHECK:CAMELCASE: Avoid CamelCase: <iSerialNumber>
#646: FILE: drivers/hid/usbhid/hid-core.c:1080:
+	if (usb_string(dev, dev->descriptor.iSerialNumber, hid->uniq, 64) <= 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: include/linux/hid.h:582:
+	void (*report_fixup)(struct hid_device *hdev, __u8 *buf,
+			unsigned int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: include/linux/hid.h:585:
+	int (*input_mapping)(struct hid_device *hdev,
+			struct hid_input *hidinput, struct hid_usage *usage,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: include/linux/hid.h:588:
+	void (*input_mapped)(struct hid_device *hdev,
+			struct hid_input *hidinput, struct hid_usage *usage,

WARNING:SPACING: Unnecessary space before function pointer arguments
#760: FILE: include/linux/hid.h:611:
+	int (*hidinput_input_event) (struct input_dev *idev, unsigned int type,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: include/linux/hid.h:612:
+	int (*hidinput_input_event) (struct input_dev *idev, unsigned int type,
+			unsigned int code, int value);

WARNING:TYPO_SPELLING: 'underlaying' may be misspelled - perhaps 'underlying'?
#797: FILE: include/linux/hid.h:677:
+ * hid_hw_start - start underlaying HW
                         ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'deffered' may be misspelled - perhaps 'differed'?
#802: FILE: include/linux/hid.h:682:
+ * and start the device (if not deffered to device open). hid_hw_stop must be
                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'successfull' may be misspelled - perhaps 'successful'?
#803: FILE: include/linux/hid.h:683:
+ * called if this was successfull.
                       ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'underlaying' may be misspelled - perhaps 'underlying'?
#811: FILE: include/linux/hid.h:691:
+ * hid_hw_stop - stop underlaying HW
                       ^^^^^^^^^^^

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hid->report_enum[HID_INPUT_REPORT].report_list'
#886: FILE: net/bluetooth/hidp/core.c:736:
+	list_for_each_entry(report, &hid->report_enum[HID_INPUT_REPORT].
+			report_list, list)

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'hid->report_enum[HID_FEATURE_REPORT].report_list'
#890: FILE: net/bluetooth/hidp/core.c:740:
+	list_for_each_entry(report, &hid->report_enum[HID_FEATURE_REPORT].
+			report_list, list)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 19 checks, 992 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000280058.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
