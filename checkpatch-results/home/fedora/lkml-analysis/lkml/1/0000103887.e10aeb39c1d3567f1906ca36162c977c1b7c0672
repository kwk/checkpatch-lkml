WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#90: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: arch/powerpc/kernel/perf_callchain.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#98: FILE: arch/powerpc/kernel/perf_callchain.c:4:
+ * Copyright © 2009 Paul Mackerras, IBM Corporation.
              ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#112: FILE: arch/powerpc/kernel/perf_callchain.c:18:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: No space is necessary after a cast
#173: FILE: arch/powerpc/kernel/perf_callchain.c:79:
+		fp = (unsigned long *) sp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#226: FILE: arch/powerpc/kernel/perf_callchain.c:132:
+	unsigned long addr = (unsigned long) ptr;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptep"
#246: FILE: arch/powerpc/kernel/perf_callchain.c:152:
+	if (ptep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#349: FILE: arch/powerpc/kernel/perf_callchain.c:255:
+	sf = (struct signal_frame_64 __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#350: FILE: arch/powerpc/kernel/perf_callchain.c:256:
+	if (read_user_stack_64((unsigned long __user *) &sf->pinfo, &pinfo) ||

CHECK:SPACING: No space is necessary after a cast
#351: FILE: arch/powerpc/kernel/perf_callchain.c:257:
+	    read_user_stack_64((unsigned long __user *) &sf->puc, &puc))

CHECK:SPACING: No space is necessary after a cast
#353: FILE: arch/powerpc/kernel/perf_callchain.c:259:
+	return pinfo == (unsigned long) &sf->info &&

CHECK:SPACING: No space is necessary after a cast
#354: FILE: arch/powerpc/kernel/perf_callchain.c:260:
+		puc == (unsigned long) &sf->uc;

CHECK:SPACING: No space is necessary after a cast
#374: FILE: arch/powerpc/kernel/perf_callchain.c:280:
+		fp = (unsigned long __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#393: FILE: arch/powerpc/kernel/perf_callchain.c:299:
+			sigframe = (struct signal_frame_64 __user *) sp;

CHECK:SPACING: No space is necessary after a cast
#510: FILE: arch/powerpc/kernel/perf_callchain.c:416:
+	sf = (struct signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#511: FILE: arch/powerpc/kernel/perf_callchain.c:417:
+	if (read_user_stack_32((unsigned int __user *) &sf->sctx.regs, &regs))

CHECK:SPACING: No space is necessary after a cast
#513: FILE: arch/powerpc/kernel/perf_callchain.c:419:
+	return regs == (unsigned long) &sf->mctx;

CHECK:SPACING: No space is necessary after a cast
#521: FILE: arch/powerpc/kernel/perf_callchain.c:427:
+	sf = (struct rt_signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#522: FILE: arch/powerpc/kernel/perf_callchain.c:428:
+	if (read_user_stack_32((unsigned int __user *) &sf->uc.uc_regs, &regs))

CHECK:SPACING: No space is necessary after a cast
#524: FILE: arch/powerpc/kernel/perf_callchain.c:430:
+	return regs == (unsigned long) &sf->uc.uc_mcontext;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: arch/powerpc/kernel/perf_callchain.c:434:
+static unsigned int __user *signal_frame_32_regs(unsigned int sp,
+				unsigned int next_sp, unsigned int next_ip)

CHECK:SPACING: No space is necessary after a cast
#543: FILE: arch/powerpc/kernel/perf_callchain.c:449:
+		sf = (struct signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#550: FILE: arch/powerpc/kernel/perf_callchain.c:456:
+		rt_sf = (struct rt_signal_frame_32 __user *) (unsigned long) sp;

CHECK:SPACING: No space is necessary after a cast
#575: FILE: arch/powerpc/kernel/perf_callchain.c:481:
+		fp = (unsigned int __user *) (unsigned long) sp;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000103887.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 22 checks, 552 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000103887.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
