WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#64: 
  trace [ <show [-c <cpulist>] [-f [no]<flagname>]> | <dump [-sm] <dest-dir>> ]

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#68: 
    shows the current tracer and other informations.
                                       ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#99: 
# ls -R dumped_tracing

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#232: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#237: FILE: ftrace.c:1:
+#define _GNU_SOURCE

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#246: FILE: ftrace.c:10:
+static int verbose = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#294: FILE: ftrace.c:58:
+static int koffset(POINTER_SYM, POINTER) = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#318: FILE: ftrace.c:82:
+static unsigned global_pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#319: FILE: ftrace.c:83:
+static unsigned max_tr_pages;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'at' may be better as '(at)' to avoid precedence issues
#331: FILE: ftrace.c:95:
+#define read_value(at, ptr, struct, member)				\
+	do {								\
+		if (!readmem(ptr + koffset(struct, member), KVADDR,	\
+				&at, sizeof(at), #struct " " #member,	\
+				RETURN_ON_ERROR | QUIET))		\
+			error(FATAL, "cannot read value, ptr%lu, %d\n", ptr, __LINE__);\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#331: FILE: ftrace.c:95:
+#define read_value(at, ptr, struct, member)				\
+	do {								\
+		if (!readmem(ptr + koffset(struct, member), KVADDR,	\
+				&at, sizeof(at), #struct " " #member,	\
+				RETURN_ON_ERROR | QUIET))		\
+			error(FATAL, "cannot read value, ptr%lu, %d\n", ptr, __LINE__);\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptr' may be better as '(ptr)' to avoid precedence issues
#331: FILE: ftrace.c:95:
+#define read_value(at, ptr, struct, member)				\
+	do {								\
+		if (!readmem(ptr + koffset(struct, member), KVADDR,	\
+				&at, sizeof(at), #struct " " #member,	\
+				RETURN_ON_ERROR | QUIET))		\
+			error(FATAL, "cannot read value, ptr%lu, %d\n", ptr, __LINE__);\
+	} while (0)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#341: FILE: ftrace.c:105:
+#define init_offset(struct, member) koffset(struct, member)		\
+	= MEMBER_OFFSET(#struct, #member);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#341: FILE: ftrace.c:105:
+#define init_offset(struct, member) koffset(struct, member)		\
+	= MEMBER_OFFSET(#struct, #member);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#342: FILE: ftrace.c:106:
+#define init_offset(struct, member) koffset(struct, member)		\
+	= MEMBER_OFFSET(#struct, #member);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#435: FILE: ftrace.c:199:
+static void ftrace_init_pages(struct ring_buffer_per_cpu *cpu_buffer,
+		unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#435: FILE: ftrace.c:199:
+		unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#437: FILE: ftrace.c:201:
+	unsigned j;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#441: FILE: ftrace.c:205:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: ftrace.c:209:
+	if (lockless_ring_buffer) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#448: FILE: ftrace.c:212:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#487: FILE: ftrace.c:251:
+static void ftrace_init_buffers(struct ring_buffer_per_cpu *buffers,
+		ulong ring_buffer, unsigned pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#487: FILE: ftrace.c:251:
+		ulong ring_buffer, unsigned pages)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: ftrace.c:260:
+	if (!readmem(buffers_array, KVADDR, tmp, sizeof(ulong) * kt->nr_cpu_ids,
+			"ring_buffer, buffers, array", RETURN_ON_ERROR|QUIET))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#496: FILE: ftrace.c:260:
+			"ring_buffer, buffers, array", RETURN_ON_ERROR|QUIET))
 			                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#505: FILE: ftrace.c:269:
+#define buffer_read_value(member) read_value(buffers[i].member,		\
+			buffers[i].kaddr, ring_buffer_per_cpu, member)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: ftrace.c:346:
+	if (!readmem(raw_page, KVADDR, page_tmp, PAGESIZE(), "get page context",
+			RETURN_ON_ERROR | QUIET))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: ftrace.c:353:
+static void ftrace_dump_buffer(FILE *out, struct ring_buffer_per_cpu *cpu_buffer,
+		unsigned pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#589: FILE: ftrace.c:353:
+		unsigned pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#591: FILE: ftrace.c:355:
+	unsigned i;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#640: FILE: ftrace.c:404:
+typedef uint64_t u64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's64' over 'int64_t'
#641: FILE: ftrace.c:405:
+typedef int64_t s64;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#642: FILE: ftrace.c:406:
+typedef uint32_t u32;

WARNING:TYPO_SPELLING: 'cann't' may be misspelled - perhaps 'can't'?
#663: FILE: ftrace.c:427:
+ /* SIGH, we cann't get "print fmt" from core-file */
              ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: ftrace.c:451:
+static void event_generic_print_fmt_print(struct event_type *t,
+		struct format_context *fc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: ftrace.c:453:
+static void event_default_print(struct event_type *t,
+		struct format_context *fc);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#698: FILE: ftrace.c:462:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#780: FILE: ftrace.c:544:
+			event_types = realloc(event_types,
+					sizeof(*event_types) * max_types);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: ftrace.c:621:
+		fprintf(out, "\tfield:%s %s;\toffset:%d;\tsize:%d;\n",
+				f->type, f->name, f->offset, f->size);

WARNING:TYPO_SPELLING: 'unknow' may be misspelled - perhaps 'unknown'?
#861: FILE: ftrace.c:625:
+	fprintf(out, "\nprint fmt: \"unknow fmt from dump\"\n");
 	                             ^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#891: FILE: ftrace.c:655:
+	uint64_t ts;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#892: FILE: ftrace.c:656:
+	uint32_t *offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#893: FILE: ftrace.c:657:
+	uint32_t *commit;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: ftrace.c:662:
+int ring_buffer_per_cpu_stream_init(struct ring_buffer_per_cpu *cpu_buffer,
+		unsigned pages, struct ring_buffer_per_cpu_stream *s)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#898: FILE: ftrace.c:662:
+		unsigned pages, struct ring_buffer_per_cpu_stream *s)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#900: FILE: ftrace.c:664:
+	unsigned i, count = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#920: FILE: ftrace.c:684:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#948: FILE: ftrace.c:712:
+	uint64_t ts;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#960: FILE: ftrace.c:724:
+#define RINGBUF_TYPE_DATA		0 ... 28

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#973: FILE: ftrace.c:737:
+	if (!readmem(raw_page, KVADDR, s->page_tmp, PAGESIZE(),
+			"get page context", RETURN_ON_ERROR | QUIET))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#983: FILE: ftrace.c:747:
+int ring_buffer_per_cpu_stream_pop_event(struct ring_buffer_per_cpu_stream *s,
+		struct ftrace_event *res)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->offset >= s->commit'
#993: FILE: ftrace.c:757:
+	if ((s->curr_page_indx == -1) || (s->offset >= s->commit)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:SPACING: spaces required around that '+=' (ctx:WxV)
#1014: FILE: ftrace.c:778:
+		s->ts +=event->time_delta;
 		      ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1048: FILE: ftrace.c:812:
+	default:;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:DEFAULT_NO_BREAK: switch default: should use break
#1048: FILE: ftrace.c:812:
+	default:;

switch default case is sometimes written as "default:;".  This can
cause new cases added below default to be defective.

A "break;" should be added after empty default statement to avoid
unwanted fallthrough.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1080: FILE: ftrace.c:844:
+		ring_buffer_per_cpu_stream_init(global_buffers + cpu,
+				global_pages, s->ss + cpu);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->popped_cpu < 0'
#1108: FILE: ftrace.c:872:
+	if ((s->popped_cpu < 0) || (s->popped_cpu == kt->nr_cpu_ids))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 's->popped_cpu == kt->nr_cpu_ids'
#1108: FILE: ftrace.c:872:
+	if ((s->popped_cpu < 0) || (s->popped_cpu == kt->nr_cpu_ids))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1116: FILE: ftrace.c:880:
+static int ring_buffer_stream_pop_event(struct ring_buffer_stream *s,
+		struct ftrace_event *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1132: FILE: ftrace.c:896:
+			ring_buffer_per_cpu_stream_pop_event(s->ss + cpu,
+					s->es + cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: ftrace.c:923:
+	ring_buffer_per_cpu_stream_pop_event(&s->ss[s->popped_cpu],
+			&s->es[s->popped_cpu]);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1251: FILE: ftrace.c:1015:
+		case 1: f->op = access_8; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1252: FILE: ftrace.c:1016:
+		case 2: f->op = access_16; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1253: FILE: ftrace.c:1017:
+		case 4: f->op = access_32; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1254: FILE: ftrace.c:1018:
+		case 8: f->op = access_64; break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1255: FILE: ftrace.c:1019:
+		default: f->op = access_other; break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1277: FILE: ftrace.c:1041:
+        for (i = 0; i < RUNNING_TASKS(); i++)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1277: FILE: ftrace.c:1041:
+        for (i = 0; i < RUNNING_TASKS(); i++)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1292: FILE: ftrace.c:1056:
+        while ((c = getopt(argc, argv, "sm")) != EOF) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1292: FILE: ftrace.c:1056:
+        while ((c = getopt(argc, argv, "sm")) != EOF) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1293: FILE: ftrace.c:1057:
+                switch(c)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1293: FILE: ftrace.c:1057:
+                switch(c)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1293: FILE: ftrace.c:1057:
+                switch(c)
+		{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: space required before the open parenthesis '('
#1293: FILE: ftrace.c:1057:
+                switch(c)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: ftrace.c:1102:
+		fprintf(fp, "You can use `sym -l > %s/kallsyms`\n\n",
+				dump_tracing_dir);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event_type' - possible side-effects?
#1357: FILE: ftrace.c:1121:
+#define access_field(event_type, data, field_name)			\
+({									\
+	static struct ftrace_field *__access_field##_field;		\
+									\
+	if (!__access_field##_field) {					\
+		__access_field##_field = find_event_field(event_type,	\
+				field_name);				\
+	}								\
+									\
+	if (!__access_field##_field) {					\
+		event_type->printer = event_default_print;		\
+		ring_buffer_stream_push_current_event(&format_context.stream);\
+		longjmp(show_event_env, INVALID_ACCESS_FIELD);		\
+	}								\
+									\
+	__access_field##_field->op(__access_field##_field, data);	\
+})

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1385: FILE: ftrace.c:1149:
+#define event_printf(fmt, args...)					\
+do {									\
+	show_event_pos += snprintf(show_event_buf + show_event_pos,	\
+			sizeof(show_event_buf) - show_event_pos,	\
+			fmt, ##args);					\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1392: FILE: ftrace.c:1156:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#1447: FILE: ftrace.c:1211:
+		if (tc[mid].pid > pid)
[...]
+		else if (tc[mid].pid < pid)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1451: FILE: ftrace.c:1215:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1470: FILE: ftrace.c:1234:
+	event_printf("%16s-%-5d [%03d] %5lu.%06lu: ",
+			comm, pid, fc->cpu, sec, usec);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1568: FILE: ftrace.c:1332:
+	unsigned a, b;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1576: FILE: ftrace.c:1340:
+		b = a = strtoul(s, (char **)&s, 10);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:CODE_INDENT: code indent should use tabs where possible
#1613: FILE: ftrace.c:1377:
+        while ((c = getopt(argc, argv, "f:c:")) != EOF) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1613: FILE: ftrace.c:1377:
+        while ((c = getopt(argc, argv, "f:c:")) != EOF) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1614: FILE: ftrace.c:1378:
+                switch(c)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1614: FILE: ftrace.c:1378:
+                switch(c)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1614: FILE: ftrace.c:1378:
+                switch(c)
+		{

ERROR:SPACING: space required before the open parenthesis '('
#1614: FILE: ftrace.c:1378:
+                switch(c)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1647: FILE: ftrace.c:1411:
+		format_context.cpu = ring_buffer_stream_pop_event(

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1658: FILE: ftrace.c:1422:
+
+}

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1745: FILE: ftrace.c:1509:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1767: FILE: ftrace.c:1531:
+	event_printf("%*s} %lluns", depth, " ",
+			(unsigned long long)(rettime - calltime));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1772: FILE: ftrace.c:1536:
+	struct event_type *t1 = find_event_type_by_name(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1774: FILE: ftrace.c:1538:
+	struct event_type *t2 = find_event_type_by_name(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1785: FILE: ftrace.c:1549:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'prev_pid == pid'
#1827: FILE: ftrace.c:1591:
+	if ((prev_pid == pid) || (prev_pid == -1))

CHECK:SPACING: No space is necessary after a cast
#1892: FILE: ftrace.c:1656:
+	len = sprintf(msecs_str, "%lu", (unsigned long) duration);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1957: FILE: ftrace.c:1721:
+	if (gopt_graph_print_cpu)
+		 event_printf(" %*d) ", max_bytes_for_cpu, cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1967: FILE: ftrace.c:1731:
+static void *get_return_for_leaf(struct event_type *t,
+		struct format_context *fc, void *curr_data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1986: FILE: ftrace.c:1750:
+	exit_func = access_field(function_graph_return_type, next.data,
+			"ret.func");

WARNING:LINE_SPACING: Missing a blank line after declarations
#2040: FILE: ftrace.c:1804:
+		unsigned long overrun = access_field(t, data, "ret.overrun");
+		event_printf(" (Overruns: %lu)\n", overrun);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2051: FILE: ftrace.c:1815:
+	function_graph_entry_type = find_event_type_by_name(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2053: FILE: ftrace.c:1817:
+	function_graph_return_type = find_event_type_by_name(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2104: FILE: ftrace.c:1868:
+static void event_sched_kthread_stop_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2107: FILE: ftrace.c:1871:
+	event_printf("task %s:%d\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2112: FILE: ftrace.c:1876:
+static void event_sched_kthread_stop_ret_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2118: FILE: ftrace.c:1882:
+static void event_sched_wait_task_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2121: FILE: ftrace.c:1885:
+	event_printf("task %s:%d [%d]\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2127: FILE: ftrace.c:1891:
+static void event_sched_wakeup_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2130: FILE: ftrace.c:1894:
+	event_printf("task %s:%d [%d] success=%d\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2137: FILE: ftrace.c:1901:
+static void event_sched_wakeup_new_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2140: FILE: ftrace.c:1904:
+	event_printf("task %s:%d [%d] success=%d\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2147: FILE: ftrace.c:1911:
+static void event_sched_switch_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2188: FILE: ftrace.c:1952:
+static void event_sched_migrate_task_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2191: FILE: ftrace.c:1955:
+	event_printf("task %s:%d [%d] from: %d  to: %d\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2199: FILE: ftrace.c:1963:
+static void event_sched_process_free_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2202: FILE: ftrace.c:1966:
+	event_printf("task %s:%d [%d]\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2208: FILE: ftrace.c:1972:
+static void event_sched_process_exit_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2211: FILE: ftrace.c:1975:
+	event_printf("task %s:%d [%d]\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2217: FILE: ftrace.c:1981:
+static void event_sched_process_wait_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2220: FILE: ftrace.c:1984:
+	event_printf("task %s:%d [%d]\n",
+			(char *)(long)access_field(t, fc->event.data, "comm"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2226: FILE: ftrace.c:1990:
+static void event_sched_process_fork_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2237: FILE: ftrace.c:2001:
+	event_printf("parent %s:%d  child %s:%d\n", parent_comm, parent_pid,
+			child_comm, child_pid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2241: FILE: ftrace.c:2005:
+static void event_sched_signal_send_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2244: FILE: ftrace.c:2008:
+	event_printf("sig: %d  task %s:%d\n",
+			(int)access_field(t, fc->event.data, "sig"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2250: FILE: ftrace.c:2014:
+static void event_kmalloc_print(struct event_type *t,
+		struct format_context *fc)

WARNING:SPLIT_STRING: quoted string split across lines
#2253: FILE: ftrace.c:2017:
+	event_printf("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu "
+			"gfp_flags=%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2262: FILE: ftrace.c:2026:
+static void event_kmem_cache_alloc_print(struct event_type *t,
+		struct format_context *fc)

WARNING:SPLIT_STRING: quoted string split across lines
#2265: FILE: ftrace.c:2029:
+	event_printf("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu "
+			"gfp_flags=%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2274: FILE: ftrace.c:2038:
+static void event_kmalloc_node_print(struct event_type *t,
+		struct format_context *fc)

WARNING:SPLIT_STRING: quoted string split across lines
#2277: FILE: ftrace.c:2041:
+	event_printf("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu "
+			"gfp_flags=%lx node=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: ftrace.c:2051:
+static void event_kmem_cache_alloc_node_print(struct event_type *t,
+		struct format_context *fc)

WARNING:SPLIT_STRING: quoted string split across lines
#2290: FILE: ftrace.c:2054:
+	event_printf("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu "
+			"gfp_flags=%lx node=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2300: FILE: ftrace.c:2064:
+static void event_kfree_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2303: FILE: ftrace.c:2067:
+	event_printf("call_site=%lx ptr=%p\n",
+			(long)access_field(t, fc->event.data, "call_site"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2308: FILE: ftrace.c:2072:
+static void event_kmem_cache_free_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2311: FILE: ftrace.c:2075:
+	event_printf("call_site=%lx ptr=%p\n",
+			(long)access_field(t, fc->event.data, "call_site"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2316: FILE: ftrace.c:2080:
+static void event_workqueue_insertion_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2329: FILE: ftrace.c:2093:
+static void event_workqueue_execution_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2342: FILE: ftrace.c:2106:
+static void event_workqueue_creation_print(struct event_type *t,
+		struct format_context *fc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2353: FILE: ftrace.c:2117:
+static void event_workqueue_destruction_print(struct event_type *t,
+		struct format_context *fc)

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#2423: FILE: help.c:2907:
+"    shows the current tracer and other informations.",
                                         ^^^^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089398.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 21 errors, 33 warnings, 89 checks, 2265 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089398.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
