WARNING:TYPO_SPELLING: 'focusses' may be misspelled - perhaps 'focuses'?
#36: 
 * This focusses on pages detected as corrupted in the background.
        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#108: FILE: mm/memory-failure.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#162: FILE: mm/memory-failure.c:55:
+#define Dprintk(x...) printk(x)

CHECK:CAMELCASE: Avoid CamelCase: <Dprintk>
#162: FILE: mm/memory-failure.c:55:
+#define Dprintk(x...) printk(x)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: mm/memory-failure.c:70:
+	printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#190: FILE: mm/memory-failure.c:83:
+		printk(KERN_INFO "MCE: Error sending signal to %s:%d: %d\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#218: FILE: mm/memory-failure.c:111:
+	struct list_head nd;
 	                 ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: mm/memory-failure.c:127:
+static void add_to_kill(struct task_struct *tsk, struct page *p,
+		       struct vm_area_struct *vma,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tk)...) over kmalloc(sizeof(struct to_kill)...)
#245: FILE: mm/memory-failure.c:138:
+		tk = kmalloc(sizeof(struct to_kill), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#247: FILE: mm/memory-failure.c:140:
+			printk(KERN_ERR "MCE: Out of memory while machine check handling\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#247: FILE: mm/memory-failure.c:140:
+		if (!tk) {
+			printk(KERN_ERR "MCE: Out of memory while machine check handling\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#253: FILE: mm/memory-failure.c:146:
+		printk(KERN_INFO "MCE: Failed to get address in VMA\n");

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#259: FILE: mm/memory-failure.c:152:
+	list_add_tail(&tk->nd, to_kill);
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#270: FILE: mm/memory-failure.c:163:
+	list_for_each_entry_safe (tk, next, to_kill, nd) {
 	                                             ^^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#270: FILE: mm/memory-failure.c:163:
+	list_for_each_entry_safe (tk, next, to_kill, nd) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#288: FILE: mm/memory-failure.c:181:
+				printk(KERN_ERR

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: mm/memory-failure.c:194:
+static void collect_procs_anon(struct page *page, struct list_head *to_kill,
+			      struct to_kill **tkc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!av"
#307: FILE: mm/memory-failure.c:200:
+	if (av == NULL)	/* Not actually mapped anymore */

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#311: FILE: mm/memory-failure.c:204:
+	for_each_process (tsk) {

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#314: FILE: mm/memory-failure.c:207:
+		list_for_each_entry (vma, &av->head, anon_vma_node) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: mm/memory-failure.c:221:
+static void collect_procs_file(struct page *page, struct list_head *to_kill,
+			      struct to_kill **tkc)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*tk)...) over kmalloc(sizeof(struct to_kill)...)
#362: FILE: mm/memory-failure.c:255:
+	tk = kmalloc(sizeof(struct to_kill), GFP_KERNEL);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#382: FILE: mm/memory-failure.c:275:
+static const char *action_name[] = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#412: FILE: mm/memory-failure.c:305:
+	printk(KERN_ERR "MCE: Unknown state page %lx flags %lx, count %d\n",

WARNING:REPEATED_WORD: Possible repeated word: 'page'
#444: FILE: mm/memory-failure.c:337:
+ * Dirty cache page page

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#454: FILE: mm/memory-failure.c:347:
+	printk(KERN_ERR "MCE: Hardware memory corruption on dirty file page: write error\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#466: FILE: mm/memory-failure.c:359:
+			printk(KERN_ERR

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#541: FILE: mm/memory-failure.c:434:
+	{ F(swapcache)|F(dirty), F(swapcache)|F(dirty), "dirty swapcache",
 	              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#541: FILE: mm/memory-failure.c:434:
+	{ F(swapcache)|F(dirty), F(swapcache)|F(dirty), "dirty swapcache",
 	                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#543: FILE: mm/memory-failure.c:436:
+	{ F(swapcache)|F(dirty), F(swapcache), "clean swapcache",
 	              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#546: FILE: mm/memory-failure.c:439:
+	{ F(unevictable)|F(dirty), F(unevictable)|F(dirty),
 	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#546: FILE: mm/memory-failure.c:439:
+	{ F(unevictable)|F(dirty), F(unevictable)|F(dirty),
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#552: FILE: mm/memory-failure.c:445:
+	{ F(mlocked)|F(dirty), F(mlocked)|F(dirty), "mlocked dirty page cache",
 	            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#552: FILE: mm/memory-failure.c:445:
+	{ F(mlocked)|F(dirty), F(mlocked)|F(dirty), "mlocked dirty page cache",
 	                                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#556: FILE: mm/memory-failure.c:449:
+	{ F(lru)|F(dirty), F(lru)|F(dirty), "dirty lru", me_pagecache_dirty },
 	        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#556: FILE: mm/memory-failure.c:449:
+	{ F(lru)|F(dirty), F(lru)|F(dirty), "dirty lru", me_pagecache_dirty },
 	                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#557: FILE: mm/memory-failure.c:450:
+	{ F(lru)|F(dirty), F(lru), "clean lru", me_pagecache_clean },
 	        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#571: FILE: mm/memory-failure.c:464:
+	printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#575: FILE: mm/memory-failure.c:468:
+	printk(KERN_ERR "MCE: Recovery of %s page %lx: %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#578: FILE: mm/memory-failure.c:471:
+		printk(KERN_ERR

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: mm/memory-failure.c:472:
+       "MCE: Page %lx (flags %lx) still referenced by %d users after recovery\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#595: FILE: mm/memory-failure.c:488:
+		printk(KERN_ERR

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#625: FILE: mm/memory-failure.c:518:
+			ret = try_to_unmap(p, TTU_UNMAP|
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#626: FILE: mm/memory-failure.c:519:
+					   TTU_IGNORE_MLOCK|TTU_IGNORE_ACCESS);
 					                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#657: FILE: mm/memory-failure.c:550:
+		printk(KERN_ERR

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: mm/memory-failure.c:551:
+   "MCE: Hardware memory corruption in memory outside kernel control at %lx\n",$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/mm.h:1326:
+extern void memory_failure(unsigned long pfn, int trapno);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#715: FILE: kernel/sysctl.c:1278:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'one', consider using the shared one in include/linux/sysctl.h
#716: FILE: kernel/sysctl.c:1279:
+		.extra2		= &one,

ERROR:SPACING: space required after that ',' (ctx:ExV)
#745: FILE: fs/proc/meminfo.c:152:
+		,atomic_long_read(&mce_bad_pages) << (PAGE_SHIFT - 10)
 		^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 29 warnings, 20 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000142960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
