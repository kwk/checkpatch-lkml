WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
Add RapidIO memory mapping API and simple Bitmap allocation with fixed size.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: drivers/rapidio/Kconfig:12:
+config RAPIDIO_PROC_FS
+	bool "I/O and Memory resource debug"
+	depends on RAPIDIO && PROC_FS
+	default y
+	---help---
+	  Enable this option, it will create a /proc/riores node for
+	  monitoring the RapidIO I/O and Memory resource.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: drivers/rapidio/rio-scan.c:104:
+	rio_local_write_config_32(port, RIO_DID_CSR, RIO_SET_DID(port->sys_size,
+				did));

CHECK:SPACING: space preferred before that '*' (ctx:VxE)
#174: FILE: drivers/rapidio/rio-scan.c:354:
+		if (!(rswitch->route_table = kzalloc(sizeof(u16)*
 		                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#174: FILE: drivers/rapidio/rio-scan.c:354:
+		if (!(rswitch->route_table = kzalloc(sizeof(u16)*

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#222: FILE: drivers/rapidio/rio-scan.c:605:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID(port->sys_size),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#223: FILE: drivers/rapidio/rio-scan.c:606:
+	if ((rdev = rio_setup_device(net, port, RIO_ANY_DESTID(port->sys_size),
+					hopcount, 1))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: drivers/rapidio/rio-scan.c:615:
+		sw_inport = rio_get_swpinfo_inport(port,
+				RIO_ANY_DESTID(port->sys_size), hopcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#243: FILE: drivers/rapidio/rio-scan.c:630:
+		    rio_get_swpinfo_tports(port, RIO_ANY_DESTID(port->sys_size),
+						hopcount);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/rapidio/rio-scan.c:1005:
+		if (rio_disc_peer(net, mport, RIO_ANY_DESTID(mport->sys_size),
+					0) < 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#353: FILE: drivers/rapidio/rio.c:42:
+	printk(KERN_ERR "%s:%s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#353: FILE: drivers/rapidio/rio.c:42:
+	printk(KERN_ERR "%s:%s: " fmt,  __FILE__, __FUNCTION__, ## arg)

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#368: FILE: drivers/rapidio/rio.c:64:
+	return (RIO_GET_DID(port->sys_size, result));

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: drivers/rapidio/rio.c:367:
+struct resource *rio_request_io_region(struct rio_mport *mport, void *devid,
+		resource_size_t start, resource_size_t size,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#393: FILE: drivers/rapidio/rio.c:371:
+	if (!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#393: FILE: drivers/rapidio/rio.c:371:
+	if (!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#403: FILE: drivers/rapidio/rio.c:381:
+		if (allocate_resource(&mport->iores, res, size,
+				mport->iores.start, mport->iores.end,

WARNING:TYPO_SPELLING: 'allocte' may be misspelled - perhaps 'allocate'?
#405: FILE: drivers/rapidio/rio.c:383:
+			ERR("allocte resource error!\n");
 			     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#421: FILE: drivers/rapidio/rio.c:399:
+	if (res)
+		kfree(res);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#461: FILE: drivers/rapidio/rio.c:439:
+int rio_map_outb_region(struct rio_mport *mport, u16 tid,
+		struct rio_mem *mem, u32 rflags)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#469: FILE: drivers/rapidio/rio.c:447:
+	rc = mport->mops->map_outb(mport, mem->iores.start, mem->riores.start, mem->size, tid, rflags);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#482: FILE: drivers/rapidio/rio.c:460:
+	unsigned long flags;
+	if (!mport->mops)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: drivers/rapidio/rio.c:475:
+	unsigned long flags;
+	if (!mport->mops)

WARNING:TYPO_SPELLING: 'successed' may be misspelled - perhaps 'succeeded'?
#509: FILE: drivers/rapidio/rio.c:487:
+ * Return 0 is successed.
                ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#514: FILE: drivers/rapidio/rio.c:492:
+	int rc = 0;
+	if (!mem)

WARNING:TYPO_SPELLING: 'Retrun' may be misspelled - perhaps 'Return'?
#541: FILE: drivers/rapidio/rio.c:519:
+ * Retrun: The rio_mem struction for inbound memory descriptor.
    ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/rapidio/rio.c:530:
+struct rio_mem *rio_request_inb_region(struct rio_mport *mport, void *dev_id,
+		resource_size_t size, const char *name, u32 owner)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rmem)...) over kzalloc(sizeof(struct rio_mem)...)
#557: FILE: drivers/rapidio/rio.c:535:
+	rmem = kzalloc(sizeof(struct rio_mem), GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#567: FILE: drivers/rapidio/rio.c:545:
+		printk(KERN_ERR "RIO space request error! ret = %d\n", ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#575: FILE: drivers/rapidio/rio.c:553:
+	if (!(rmem->virt = dma_alloc_coherent(NULL, rmem->size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/rapidio/rio.c:554:
+	if (!(rmem->virt = dma_alloc_coherent(NULL, rmem->size,
+				&rmem->iores.start, GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#584: FILE: drivers/rapidio/rio.c:562:
+	if ((ret = rio_map_inb_region(mport, rmem, 0))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#585: FILE: drivers/rapidio/rio.c:563:
+		printk(KERN_ERR "RIO map inbound mem error, ret = %d\n", ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#590: FILE: drivers/rapidio/rio.c:568:
+	if ((ret = rio_space_claim(rmem))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#591: FILE: drivers/rapidio/rio.c:569:
+		printk(KERN_ERR "RIO inbound mem claim error, ret = %d\n", ret);

WARNING:TYPO_SPELLING: 'successed' may be misspelled - perhaps 'succeeded'?
#608: FILE: drivers/rapidio/rio.c:586:
+ * Return 0 is successed.
                ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#613: FILE: drivers/rapidio/rio.c:591:
+	int rc = 0;
+	if (!mem)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: drivers/rapidio/rio.c:625:
+struct rio_mem *rio_prepare_io_mem(struct rio_mport *mport,
+		struct rio_dev *dev, resource_size_t size, const char *name)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rmem)...) over kzalloc(sizeof(struct rio_mem)...)
#651: FILE: drivers/rapidio/rio.c:629:
+	rmem = kzalloc(sizeof(struct rio_mem), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/rapidio/rio.c:638:
+	if (!(rio_request_io_region(mport, dev, 0, size,
+				name, RIO_RESOURCE_MEM, &rmem->iores))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: drivers/rapidio/rio.c:669:
+struct rio_mem *rio_request_outb_region(struct rio_mport *mport, void *dev_id,
+			resource_size_t size, const char *name, u32 owner)

CHECK:BRACES: braces {} should be used on all arms of this statement
#766: FILE: drivers/rapidio/rio.c:895:
+	if (p->sibling)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#768: FILE: drivers/rapidio/rio.c:897:
+		return p->sibling;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#768: FILE: drivers/rapidio/rio.c:897:
+	else {

ERROR:SPACING: space required before the open parenthesis '('
#770: FILE: drivers/rapidio/rio.c:899:
+		if(rs->res >= RIO_MAX_MPORT_RESOURCES) {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#799: FILE: drivers/rapidio/rio.c:928:
+	seq_printf(m, "IO: ");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: drivers/rapidio/rio.c:949:
+	seq_printf(m, "%*s%0*llx-%0*llx : %s\n",
+			depth * 2, "",

CHECK:SPACING: No space is necessary after a cast
#821: FILE: drivers/rapidio/rio.c:950:
+			width, (unsigned long long) r->start,

CHECK:SPACING: No space is necessary after a cast
#822: FILE: drivers/rapidio/rio.c:951:
+			width, (unsigned long long) r->end,

WARNING:LINE_SPACING: Missing a blank line after declarations
#837: FILE: drivers/rapidio/rio.c:966:
+	int res = seq_open(file, &resource_op);
+	if (!res) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#839: FILE: drivers/rapidio/rio.c:968:
+		struct seq_file *m = file->private_data;
+		m->private = &riomres;

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#860: FILE: drivers/rapidio/rio.c:989:
+__initcall(rioresources_init);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#877: FILE: drivers/rapidio/rio.h:54:
+#define RIO_GET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x00ff0000) >> 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#877: FILE: drivers/rapidio/rio.h:54:
+#define RIO_GET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x00ff0000) >> 16))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#878: FILE: drivers/rapidio/rio.h:55:
+#define RIO_SET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x000000ff) << 16))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#878: FILE: drivers/rapidio/rio.h:55:
+#define RIO_SET_DID(size, x)	(size ? (x & 0xffff) : ((x & 0x000000ff) << 16))

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#880: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#885: FILE: drivers/rapidio/sallocator/Kconfig:1:
+choice
+	prompt "Default RapidIO Space Allocator"
+	depends on RAPIDIO
+	default RIO_SA_DEFAULT_BITMAP
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#890: FILE: drivers/rapidio/sallocator/Kconfig:6:
+	config RIO_SA_DEFAULT_BITMAP
+		bool "Bitmap"
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#918: FILE: drivers/rapidio/sallocator/bitmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#960: FILE: drivers/rapidio/sallocator/bitmap.c:43:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#960: FILE: drivers/rapidio/sallocator/bitmap.c:43:
+	printk(KERN_ERR "ERROR %s - %s: " fmt,  __FILE__, __FUNCTION__, ## arg)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#962: FILE: drivers/rapidio/sallocator/bitmap.c:45:
+#define DBG(fmt...) printk(fmt)

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1000: FILE: drivers/rapidio/sallocator/bitmap.c:83:
+static struct rio_sect0	*sect0 = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1001: FILE: drivers/rapidio/sallocator/bitmap.c:84:
+static struct rio_mem *sblock_buf = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: drivers/rapidio/sallocator/bitmap.c:112:
+int rio_space_request(struct rio_mport *mport, resource_size_t size,
+			struct resource *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1039: FILE: drivers/rapidio/sallocator/bitmap.c:122:
+	ret = allocate_resource(root, new, size, root->start, root->end,
+			size, NULL, 0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1061: FILE: drivers/rapidio/sallocator/bitmap.c:144:
+	printk("Rio Sect0 %p dump:\n", psect0);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1062: FILE: drivers/rapidio/sallocator/bitmap.c:145:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1062: FILE: drivers/rapidio/sallocator/bitmap.c:145:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1063: FILE: drivers/rapidio/sallocator/bitmap.c:146:
+	printk("...id = 0x%08x, width = %d, rioid = %d \n",
+			psect0->id, psect0->width, psect0->rioid);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1066: FILE: drivers/rapidio/sallocator/bitmap.c:149:
+			printk("...inb_res[%d]: ctrl 0x%08x, owner 0x%08x\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: drivers/rapidio/sallocator/bitmap.c:225:
+		if ((sect0->inb_res[i].ctrl & SA_RIO_RES_CTRL_EN) &&
+				(((u64)sect0->inb_res[i].extaddr << 32 |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1158: FILE: drivers/rapidio/sallocator/bitmap.c:241:
+static struct resource *rio_space_get_dev_mem(struct rio_mport *mport,
+		u16 did, struct resource *res)

ERROR:SPACING: space required before the open parenthesis '('
#1160: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1160: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*res)...) over kmalloc(sizeof(struct resource)...)
#1160: FILE: drivers/rapidio/sallocator/bitmap.c:243:
+	if(!res && !(res = kmalloc(sizeof(struct resource), GFP_KERNEL))) {

WARNING:TYPO_SPELLING: 'diffrent' may be misspelled - perhaps 'different'?
#1190: FILE: drivers/rapidio/sallocator/bitmap.c:273:
+ * by the driver. If the remote RapidIO device use the diffrent space allocator,
                                                        ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1194: FILE: drivers/rapidio/sallocator/bitmap.c:277:
+int rio_space_find_mem(struct rio_mport *mport, u16 tid,
+			u32 owner, struct resource *res)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1196: FILE: drivers/rapidio/sallocator/bitmap.c:279:
+	volatile struct rio_sect0 __iomem *rsect0;

WARNING:SPLIT_STRING: quoted string split across lines
#1214: FILE: drivers/rapidio/sallocator/bitmap.c:297:
+		DBG("The target RapidIO space allocator is not rio_sa_bitmap! "
+				"id = 0x%x\n", rsect0->id);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1227: FILE: drivers/rapidio/sallocator/bitmap.c:310:
+		printk(KERN_WARNING "WARNING: The system width %d is smaller "

WARNING:SPLIT_STRING: quoted string split across lines
#1228: FILE: drivers/rapidio/sallocator/bitmap.c:311:
+		printk(KERN_WARNING "WARNING: The system width %d is smaller "
+			"than the remote RapidIO space address width %d!",

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1234: FILE: drivers/rapidio/sallocator/bitmap.c:317:
+		if ((in_be32(&rsect0->inb_res[i].ctrl) & SA_RIO_RES_CTRL_EN)
+			  && (in_be32(&rsect0->inb_res[i].owner) == owner )) {

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1234: FILE: drivers/rapidio/sallocator/bitmap.c:317:
+			  && (in_be32(&rsect0->inb_res[i].owner) == owner )) {

ERROR:SPACING: space required before the open parenthesis '('
#1273: FILE: drivers/rapidio/sallocator/bitmap.c:356:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1273: FILE: drivers/rapidio/sallocator/bitmap.c:356:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1274: FILE: drivers/rapidio/sallocator/bitmap.c:357:
+	if(!(sect0mem.virt = dma_alloc_coherent(NULL, RIO_SBLOCK_SIZE,
+					&sect0mem.iores.start, GFP_KERNEL))) {

ERROR:SPACING: space required before the open parenthesis '('
#1281: FILE: drivers/rapidio/sallocator/bitmap.c:364:
+	if(rio_space_request(mport, RIO_SBLOCK_SIZE, &sect0mem.riores))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1295: FILE: drivers/rapidio/sallocator/bitmap.c:378:
+	sblock_buf = rio_prepare_io_mem(mport, NULL, RIO_SBLOCK_SIZE,
+			"sblock_buf");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344250.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 38 warnings, 36 checks, 1177 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344250.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
