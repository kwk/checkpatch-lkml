WARNING:TYPO_SPELLING: 'hierachies' may be misspelled - perhaps 'hierarchies'?
#152: FILE: Documentation/cgroups.txt:58:
+At any one time there may be multiple active hierachies of task
                                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#625: FILE: include/linux/cgroup.h:1:
+#ifndef _LINUX_CGROUP_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#647: FILE: include/linux/cgroup.h:23:
+extern int cgroup_init_early(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: include/linux/cgroup.h:24:
+extern int cgroup_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#649: FILE: include/linux/cgroup.h:25:
+extern void cgroup_init_smp(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/cgroup.h:26:
+extern void cgroup_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: include/linux/cgroup.h:27:
+extern void cgroup_unlock(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#657: FILE: include/linux/cgroup.h:33:
+	 * hierarchy structure */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#662: FILE: include/linux/cgroup.h:38:
+	 * and css_put() */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#685: FILE: include/linux/cgroup.h:61:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#701: FILE: include/linux/cgroup.h:77:
+	 * cgroup */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#712: FILE: include/linux/cgroup.h:88:
+^Istruct dentry *dentry;^I  ^I/* cgroup fs entry */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#737: FILE: include/linux/cgroup.h:113:
+	 * subsystem, followed by a period */

WARNING:SPACING: Unnecessary space before function pointer arguments
#740: FILE: include/linux/cgroup.h:116:
+	int (*open) (struct inode *inode, struct file *file);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#741: FILE: include/linux/cgroup.h:117:
+	ssize_t (*read) (struct cgroup *cont, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#748: FILE: include/linux/cgroup.h:124:
+	u64 (*read_uint) (struct cgroup *cont, struct cftype *cft);

WARNING:SPACING: Unnecessary space before function pointer arguments
#749: FILE: include/linux/cgroup.h:125:
+	ssize_t (*write) (struct cgroup *cont, struct cftype *cft,

WARNING:SPACING: Unnecessary space before function pointer arguments
#752: FILE: include/linux/cgroup.h:128:
+	int (*release) (struct inode *inode, struct file *file);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#756: FILE: include/linux/cgroup.h:132:
+ * called by subsystems from within a populate() method */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: include/linux/cgroup.h:134:
+int cgroup_add_file(struct cgroup *cont, struct cgroup_subsys *subsys,
+		       const struct cftype *cft);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#761: FILE: include/linux/cgroup.h:137:
+ * only be called by subsystems from within a populate() method */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#763: FILE: include/linux/cgroup.h:139:
+int cgroup_add_files(struct cgroup *cont,
+			struct cgroup_subsys *subsys,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#778: FILE: include/linux/cgroup.h:154:
+	struct cgroup_subsys_state *(*create)(struct cgroup_subsys *ss,
+						  struct cgroup *cont);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: include/linux/cgroup.h:159:
+	void (*attach)(struct cgroup_subsys *ss, struct cgroup *cont,
+			struct cgroup *old_cont, struct task_struct *tsk);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#803: FILE: include/linux/cgroup.h:179:
+#define SUBSYS(_x) extern struct cgroup_subsys _x ## _subsys;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#807: FILE: include/linux/cgroup.h:183:
+static inline struct cgroup_subsys_state *cgroup_subsys_state(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#813: FILE: include/linux/cgroup.h:189:
+static inline struct cgroup_subsys_state *task_subsys_state(

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#819: FILE: include/linux/cgroup.h:195:
+static inline struct cgroup* task_cgroup(struct task_struct *task,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#820: FILE: include/linux/cgroup.h:196:
+static inline struct cgroup* task_cgroup(struct task_struct *task,
+					       int subsys_id)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#843: FILE: include/linux/cgroup_subsys.h:1:
+/* Add subsystem definitions of the form SUBSYS(<name>) in this

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#877: FILE: include/linux/sched.h:871:
+};
+#undef SUBSYS

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#884: FILE: include/linux/sched.h:878:
+struct css_set {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#891: FILE: include/linux/sched.h:885:
+	 * immutable after creation */

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#928: FILE: init/Kconfig:277:
+config CGROUPS
+	bool "Control Group support"
+	help
+	  This option will let you use process cgroup subsystems
+	  such as Cpusets
+
+	  Say N if unsure.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#981: FILE: kernel/cgroup.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#982: FILE: kernel/cgroup.c:2:
+ *  kernel/cgroup.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1024: FILE: kernel/cgroup.c:44:
+#include <asm/atomic.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1027: FILE: kernel/cgroup.c:47:
+#define SUBSYS(_x) &_x ## _subsys,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1066: FILE: kernel/cgroup.c:86:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_root' may be better as '(_root)' to avoid precedence issues
#1108: FILE: kernel/cgroup.c:128:
+#define for_each_subsys(_root, _ss) \
+list_for_each_entry(_ss, &_root->subsys_list, sibling)

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1202: FILE: kernel/cgroup.c:222:
+static struct inode_operations cgroup_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1216: FILE: kernel/cgroup.c:236:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1227: FILE: kernel/cgroup.c:247:
+		struct cgroup *cont = dentry->d_fsdata;
+		BUG_ON(!(cgroup_is_removed(cont)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1227: FILE: kernel/cgroup.c:247:
+		BUG_ON(!(cgroup_is_removed(cont)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1230: FILE: kernel/cgroup.c:250:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1234: FILE: kernel/cgroup.c:254:
+static struct dentry *cgroup_get_dentry(struct dentry *parent,
+					   const char *name)

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#1237: FILE: kernel/cgroup.c:257:
+	static struct dentry_operations cgroup_dops = {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1259: FILE: kernel/cgroup.c:279:
+	BUG_ON(!mutex_is_locked(&dentry->d_inode->i_mutex));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1264: FILE: kernel/cgroup.c:284:
+		struct dentry *d = list_entry(node, struct dentry, d_u.d_child);
+		list_del_init(node);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1267: FILE: kernel/cgroup.c:287:
+			 * directory with child cgroups */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1268: FILE: kernel/cgroup.c:288:
+			BUG_ON(d->d_inode->i_mode & S_IFDIR);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1295: FILE: kernel/cgroup.c:315:
+static int rebind_subsystems(struct cgroupfs_root *root,
+			      unsigned long final_bits)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1307: FILE: kernel/cgroup.c:327:
+		struct cgroup_subsys *ss = subsys[i];
+		if (!(bit & added_bits))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1318: FILE: kernel/cgroup.c:338:
+	 * later */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: kernel/cgroup.c:346:
+		unsigned long bit = 1UL << i;
+		if (bit & added_bits) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1328: FILE: kernel/cgroup.c:348:
+			BUG_ON(cont->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1329: FILE: kernel/cgroup.c:349:
+			BUG_ON(!dummytop->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1330: FILE: kernel/cgroup.c:350:
+			BUG_ON(dummytop->subsys[i]->cgroup != dummytop);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1340: FILE: kernel/cgroup.c:360:
+			BUG_ON(cont->subsys[i] != dummytop->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1341: FILE: kernel/cgroup.c:361:
+			BUG_ON(cont->subsys[i]->cgroup != cont);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1350: FILE: kernel/cgroup.c:370:
+			BUG_ON(!cont->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1353: FILE: kernel/cgroup.c:373:
+			BUG_ON(cont->subsys[i]);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1356: FILE: kernel/cgroup.c:376:
+	root->subsys_bits = root->actual_subsys_bits = final_bits;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1382: FILE: kernel/cgroup.c:402:
+ * flags. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1384: FILE: kernel/cgroup.c:404:
+static int parse_cgroupfs_options(char *data,
+				     struct cgroup_sb_opts *opts)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1401: FILE: kernel/cgroup.c:421:
+			int i;
+			for (i = 0; i < CGROUP_SUBSYS_COUNT; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1463: FILE: kernel/cgroup.c:483:
+	struct cgroup *cont = &root->top_cgroup;
+	INIT_LIST_HEAD(&root->subsys_list);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#1478: FILE: kernel/cgroup.c:498:
+	if (new->subsys_bits != root->subsys_bits)
+	    return 0;

WARNING:TABSTOP: Statements should start on a tabstop
#1479: FILE: kernel/cgroup.c:499:
+	    return 0;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IXUGO | S_IWUSR' are not preferred. Consider using octal permissions '0755'.
#1511: FILE: kernel/cgroup.c:531:
+		cgroup_new_inode(S_IFDIR | S_IRUGO | S_IXUGO | S_IWUSR, sb);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1524: FILE: kernel/cgroup.c:544:
+		iput(inode);
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1562: FILE: kernel/cgroup.c:582:
+		BUG_ON(sb->s_root == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sb->s_root"
#1562: FILE: kernel/cgroup.c:582:
+		BUG_ON(sb->s_root == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1569: FILE: kernel/cgroup.c:589:
+		BUG_ON(sb->s_root != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sb->s_root"
#1569: FILE: kernel/cgroup.c:589:
+		BUG_ON(sb->s_root != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1584: FILE: kernel/cgroup.c:604:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1591: FILE: kernel/cgroup.c:611:
+		BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1592: FILE: kernel/cgroup.c:612:
+		BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1593: FILE: kernel/cgroup.c:613:
+		BUG_ON(root->number_of_cgroups != 1);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#1616: FILE: kernel/cgroup.c:636:
+static void cgroup_kill_sb(struct super_block *sb) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1621: FILE: kernel/cgroup.c:641:
+	BUG_ON(!root);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1623: FILE: kernel/cgroup.c:643:
+	BUG_ON(root->number_of_cgroups != 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1624: FILE: kernel/cgroup.c:644:
+	BUG_ON(!list_empty(&cont->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1625: FILE: kernel/cgroup.c:645:
+	BUG_ON(!list_empty(&cont->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1632: FILE: kernel/cgroup.c:652:
+	BUG_ON(ret);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1671: FILE: kernel/cgroup.c:691:
+		int len = cont->dentry->d_name.len;
+		if ((start -= len) < buf)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1671: FILE: kernel/cgroup.c:691:
+		if ((start -= len) < buf)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1696: FILE: kernel/cgroup.c:716:
+static ssize_t cgroup_file_write(struct file *file, const char __user *buf,
+						size_t nbytes, loff_t *ppos)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: kernel/cgroup.c:730:
+static ssize_t cgroup_read_uint(struct cgroup *cont, struct cftype *cft,
+				   struct file *file,

CHECK:SPACING: No space is necessary after a cast
#1716: FILE: kernel/cgroup.c:736:
+	int len = sprintf(tmp, "%llu\n", (unsigned long long) val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1722: FILE: kernel/cgroup.c:742:
+static ssize_t cgroup_file_read(struct file *file, char __user *buf,
+				   size_t nbytes, loff_t *ppos)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1760: FILE: kernel/cgroup.c:780:
+	struct cftype *cft = __d_cft(file->f_dentry);
+	if (cft->release)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1769: FILE: kernel/cgroup.c:789:
+static int cgroup_rename(struct inode *old_dir, struct dentry *old_dentry,
+			    struct inode *new_dir, struct dentry *new_dentry)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1780: FILE: kernel/cgroup.c:800:
+static struct file_operations cgroup_file_operations = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1788: FILE: kernel/cgroup.c:808:
+static struct inode_operations cgroup_dir_inode_operations = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1796: FILE: kernel/cgroup.c:816:
+static int cgroup_create_file(struct dentry *dentry, int mode,
+				struct super_block *sb)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1817: FILE: kernel/cgroup.c:837:
+		 * populate it without racing with another mkdir */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1838: FILE: kernel/cgroup.c:858:
+static int cgroup_create_dir(struct cgroup *cont, struct dentry *dentry,
+				int mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1858: FILE: kernel/cgroup.c:878:
+int cgroup_add_file(struct cgroup *cont,
+		       struct cgroup_subsys *subsys,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1866: FILE: kernel/cgroup.c:886:
+	char name[MAX_CGROUP_TYPE_NAMELEN + MAX_CFTYPE_NAME + 2] = { 0 };
+	if (subsys && !test_bit(ROOT_NOPREFIX, &cont->root->flags)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1871: FILE: kernel/cgroup.c:891:
+	BUG_ON(!mutex_is_locked(&dir->d_inode->i_mutex));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1873: FILE: kernel/cgroup.c:893:
+	if (!IS_ERR(dentry)) {
[...]
+	} else
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1875: FILE: kernel/cgroup.c:895:
+		error = cgroup_create_file(dentry, 0644 | S_IFREG,
+						cont->root->sb);

CHECK:BRACES: Unbalanced braces around else statement
#1879: FILE: kernel/cgroup.c:899:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1885: FILE: kernel/cgroup.c:905:
+int cgroup_add_files(struct cgroup *cont,
+			struct cgroup_subsys *subsys,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1890: FILE: kernel/cgroup.c:910:
+	int i, err;
+	for (i = 0; i < count; i++) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1907: FILE: kernel/cgroup.c:927:
+		if (ss->populate && (err = ss->populate(ss, cont)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: kernel/cgroup.c:935:
+static void init_cgroup_css(struct cgroup_subsys_state *css,
+			       struct cgroup_subsys *ss,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1923: FILE: kernel/cgroup.c:943:
+	BUG_ON(cont->subsys[ss->subsys_id]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1937: FILE: kernel/cgroup.c:957:
+static long cgroup_create(struct cgroup *parent, struct dentry *dentry,
+			     int mode)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1953: FILE: kernel/cgroup.c:973:
+	 * fs */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1968: FILE: kernel/cgroup.c:988:
+		struct cgroup_subsys_state *css = ss->create(ss, cont);
+		if (IS_ERR(css)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1983: FILE: kernel/cgroup.c:1003:
+	BUG_ON(!mutex_is_locked(&cont->dentry->d_inode->i_mutex));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2052: FILE: kernel/cgroup.c:1072:
+	 * destroy */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2055: FILE: kernel/cgroup.c:1075:
+		struct cgroup_subsys_state *css;
+		css = cont->subsys[ss->subsys_id];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2085: FILE: kernel/cgroup.c:1105:
+	 * created the cgroup */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2094: FILE: kernel/cgroup.c:1114:
+	struct cgroup_subsys_state *css;
+	printk(KERN_ERR "Initializing cgroup subsys %s\n", ss->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2094: FILE: kernel/cgroup.c:1114:
+	printk(KERN_ERR "Initializing cgroup subsys %s\n", ss->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2100: FILE: kernel/cgroup.c:1120:
+	BUG_ON(IS_ERR(css));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2105: FILE: kernel/cgroup.c:1125:
+	 * the subsystem's top cgroup. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#2107: FILE: kernel/cgroup.c:1127:
+ ^I/* If this subsystem requested that it be notified with fork$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2107: FILE: kernel/cgroup.c:1127:
+ ^I/* If this subsystem requested that it be notified with fork$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2107: FILE: kernel/cgroup.c:1127:
+ ^I/* If this subsystem requested that it be notified with fork$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2108: FILE: kernel/cgroup.c:1128:
+ ^I * events, we should send it one now for every process in the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2108: FILE: kernel/cgroup.c:1128:
+ ^I * events, we should send it one now for every process in the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2109: FILE: kernel/cgroup.c:1129:
+ ^I * system */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2109: FILE: kernel/cgroup.c:1129:
+ ^I * system */$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2109: FILE: kernel/cgroup.c:1129:
+ 	 * system */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2117: FILE: kernel/cgroup.c:1137:
+		printk(KERN_INFO "Setting task %p css to %p (%d)\n", css, p, p->pid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2136: FILE: kernel/cgroup.c:1156:
+	int i;
+	init_cgroup_root(&rootnode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2142: FILE: kernel/cgroup.c:1162:
+		BUG_ON(!ss->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2143: FILE: kernel/cgroup.c:1163:
+		BUG_ON(strlen(ss->name) > MAX_CGROUP_TYPE_NAMELEN);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2144: FILE: kernel/cgroup.c:1164:
+		BUG_ON(!ss->create);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2145: FILE: kernel/cgroup.c:1165:
+		BUG_ON(!ss->destroy);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2147: FILE: kernel/cgroup.c:1167:
+			printk(KERN_ERR "Subsys %s id == %d\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2149: FILE: kernel/cgroup.c:1169:
+			BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#2169: FILE: kernel/cgroup.c:1189:
+		struct cgroup_subsys *ss = subsys[i];
+		if (!ss->early_init)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 91 warnings, 38 checks, 2049 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000379907.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
