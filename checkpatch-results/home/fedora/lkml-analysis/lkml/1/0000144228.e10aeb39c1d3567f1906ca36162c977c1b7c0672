WARNING:TYPO_SPELLING: 'dynamicly' may be misspelled - perhaps 'dynamically'?
#37: 
dynamicly and the application cannot know in advance what pages are
^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'strctures' may be misspelled - perhaps 'structures'?
#42: 
It uses a two sorted data strctures called stable and unstable trees
                          ^^^^^^^^^

WARNING:TYPO_SPELLING: 'registred' may be misspelled - perhaps 'registered'?
#51: 
Ksm scan just memory areas that were registred to be scanned by it.
                                     ^^^^^^^^^

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#71: 
        the begining of the virtual address of this region.
            ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#90: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#95: FILE: include/linux/ksm.h:1:
+#ifndef __LINUX_KSM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#115: FILE: include/linux/ksm.h:21:
+	__u64 addr; /* the begining of the virtual address */
 	                   ^^^^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: include/linux/ksm.h:22:
+        __u64 reserved_bits;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: include/linux/ksm.h:22:
+        __u64 reserved_bits;$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#164: FILE: mm/Kconfig:227:
+config KSM
+	tristate "Enable KSM for page sharing"
+	help
+	  Enable the KSM kernel module to allow page sharing of equal pages
+	  among different tasks.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#187: FILE: mm/ksm.c:1:
+/*

WARNING:TYPO_SPELLING: 'an userspace' may be misspelled - perhaps 'a userspace'?
#238: FILE: mm/ksm.c:52:
+ * ksm_mem_slot - hold information for an userspace scanning range
                                        ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'untill' may be misspelled - perhaps 'until'?
#239: FILE: mm/ksm.c:53:
+ * (the scanning for this region will be from addr untill addr +
                                                    ^^^^^^

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#246: FILE: mm/ksm.c:60:
+	unsigned long addr;	/* the begining of the virtual address */
 	                   	       ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#247: FILE: mm/ksm.c:61:
+	unsigned npages;	/* number of pages to share */

WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#275: FILE: mm/ksm.c:89:
+ * contents into a data strcture that hold pointer into the pages.
                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#277: FILE: mm/ksm.c:91:
+ * Since the contents of the pages may change at any moment, ksm cant just
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'strctures' may be misspelled - perhaps 'structures'?
#280: FILE: mm/ksm.c:94:
+ * For this purpuse ksm use two data strctures - stable and unstable trees,
                                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#282: FILE: mm/ksm.c:96:
+ * their contents, beacuse that each such page have to be write-protected,
                    ^^^^^^^

WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#286: FILE: mm/ksm.c:100:
+ * In addition to the stable tree, ksm use another data strcture called the
                                                         ^^^^^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#290: FILE: mm/ksm.c:104:
+ * write-protected, ksm cant trust the unstable tree to be fully assuranced to
                         ^^^^

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#296: FILE: mm/ksm.c:110:
+ *    memory, and then the tree is rebuild from the begining.
                                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#302: FILE: mm/ksm.c:116:
+ *    the tree get "corrupted" we wont get out of balance and the timing of
                                   ^^^^

WARNING:TYPO_SPELLING: 'algorithem' may be misspelled - perhaps 'algorithm'?
#304: FILE: mm/ksm.c:118:
+ *    into rbtree is the same algorithem, therefore we have no overhead when we
                               ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#332: FILE: mm/ksm.c:146:
+ * @mm: the memory strcture the rmap_item is pointing to.
                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'registred' may be misspelled - perhaps 'registered'?
#356: FILE: mm/ksm.c:170:
+ * slots is linked list that hold all the memory regions that were registred
                                                                    ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#370: FILE: mm/ksm.c:184:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#395: FILE: mm/ksm.c:209:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#477: FILE: mm/ksm.c:291:
+
+

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#512: FILE: mm/ksm.c:326:
+ * is always write protected (therefore its data content cant ever be changed)
                                                          ^^^^

WARNING:TYPO_SPELLING: 'cant' may be misspelled - perhaps 'can't'?
#513: FILE: mm/ksm.c:327:
+ * and this page cant be swapped.
                  ^^^^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#525: FILE: mm/ksm.c:339:
+	 * bit to know if such thing happend to the page.
 	                             ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: mm/ksm.c:383:
+	void *addr = kmap_atomic(page, KM_USER0);
+	checksum = jhash(addr, PAGE_SIZE, 17);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#585: FILE: mm/ksm.c:399:
+		if (mm == rmap_item->mm && rmap_item->address == addr) {
+			return rmap_item;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'insde' may be misspelled - perhaps 'inside'?
#595: FILE: mm/ksm.c:409:
+ * insde the stable or unstable trees, it would remove the link from there
    ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: mm/ksm.c:422:
+			BUG_ON(rmap_item->prev->next != rmap_item);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#612: FILE: mm/ksm.c:426:
+			BUG_ON(rmap_item->next->prev != rmap_item);

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: mm/ksm.c:436:
+^I ^I^Iif (!rmap_item->next && !rmap_item->prev) {$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#622: FILE: mm/ksm.c:436:
+^I ^I^Iif (!rmap_item->next && !rmap_item->prev) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#645: FILE: mm/ksm.c:459:
+	if (get_user_pages(current, mm, addr, 1, 1, 0, page, NULL)) {
+			put_page(page[0]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#645: FILE: mm/ksm.c:459:
+	if (get_user_pages(current, mm, addr, 1, 1, 0, page, NULL)) {
+			put_page(page[0]);
+	}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*slot)...) over kzalloc(sizeof(struct ksm_mem_slot)...)
#682: FILE: mm/ksm.c:496:
+	slot = kzalloc(sizeof(struct ksm_mem_slot), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#716: FILE: mm/ksm.c:530:
+	BUG_ON(!slot);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#740: FILE: mm/ksm.c:554:
+static int ksm_sma_release(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#750: FILE: mm/ksm.c:564:
+static long ksm_sma_ioctl(struct file *filp,
                                        ^^^^

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#956: FILE: mm/ksm.c:770:
+			if (ret) {
[...]
+			} else {
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#992: FILE: mm/ksm.c:806:
+^Iif (unlikely(!PageKsm(page[0], rmap_item->mm, rmap_item->address))) { $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1026: FILE: mm/ksm.c:840:
+			BUG_ON(!found_rmap_item->stable_tree);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1027: FILE: mm/ksm.c:841:
+			BUG_ON(!found_rmap_item->tree_item);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1029: FILE: mm/ksm.c:843:
+			if (!rmap_item ||
+			     !(found_rmap_item->mm == rmap_item->mm &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root_stable_tree.rb_node
#1078: FILE: mm/ksm.c:892:
+	struct rb_node **new = &(root_stable_tree.rb_node);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1088: FILE: mm/ksm.c:902:
+		BUG_ON(!tree_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1089: FILE: mm/ksm.c:903:
+		BUG_ON(!tree_item->rmap_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1093: FILE: mm/ksm.c:907:
+			BUG_ON(!insert_rmap_item->stable_tree);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1094: FILE: mm/ksm.c:908:
+			BUG_ON(!insert_rmap_item->tree_item);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1096: FILE: mm/ksm.c:910:
+			if (!(insert_rmap_item->mm == rmap_item->mm &&
+			     insert_rmap_item->address == rmap_item->address)) {

WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#1117: FILE: mm/ksm.c:931:
+			 * It isnt a bug when we are here (the fact that we
 			      ^^^^

WARNING:TYPO_SPELLING: 'didnt' may be misspelled - perhaps 'didn't'?
#1118: FILE: mm/ksm.c:932:
+			 * didnt find the page inside the stable tree), beacuse:
 			   ^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#1118: FILE: mm/ksm.c:932:
+			 * didnt find the page inside the stable tree), beacuse:
 			                                                ^^^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#1152: FILE: mm/ksm.c:966:
+ * (this function do both searching and inserting, beacuse the fact that
                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'algorithem' may be misspelled - perhaps 'algorithm'?
#1153: FILE: mm/ksm.c:967:
+ *  searching and inserting share the same walking algorithem in rbtrees)
                                                    ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1156: FILE: mm/ksm.c:970:
+static struct tree_item *unstable_tree_search_insert(struct page *page,
+					struct page **page2,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root_unstable_tree.rb_node
#1159: FILE: mm/ksm.c:973:
+	struct rb_node **new = &(root_unstable_tree.rb_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1169: FILE: mm/ksm.c:983:
+		BUG_ON(!tree_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: mm/ksm.c:985:
+		BUG_ON(!rmap_item);

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#1233: FILE: mm/ksm.c:1047:
+		 * the tree_item from it (beacuse the unstable tree was already
 		                          ^^^^^^^

WARNING:TYPO_SPELLING: 'beacuse' may be misspelled - perhaps 'because'?
#1244: FILE: mm/ksm.c:1058:
+	 * If we are here it mean the rmap_item was zapped, beacuse the
 	                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#1246: FILE: mm/ksm.c:1060:
+	 * should be KsmPages, so it shouldnt have came to here in the first
 	                             ^^^^^^^^

WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#1247: FILE: mm/ksm.c:1061:
+	 * place. (cmp_and_merge_page() shouldnt have been called)
 	                                ^^^^^^^^

WARNING:TYPO_SPELLING: 'strcture' may be misspelled - perhaps 'structure'?
#1277: FILE: mm/ksm.c:1091:
+ * @ksm_scan: the ksm scanner strcture.
                               ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1313: FILE: mm/ksm.c:1127:
+		BUG_ON(!tree_rmap_item->tree_item);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1368: FILE: mm/ksm.c:1182:
+		BUG_ON(!merge_rmap_item);

WARNING:TYPO_SPELLING: 'wont' may be misspelled - perhaps 'won't'?
#1391: FILE: mm/ksm.c:1205:
+			 * that are pointing into KsmPage that wont be inside
 			                                       ^^^^

WARNING:TYPO_SPELLING: 'vaild' may be misspelled - perhaps 'valid'?
#1471: FILE: mm/ksm.c:1285:
+ * update slot_index - make sure ksm_scan will point to vaild data,
                                                         ^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1499: FILE: mm/ksm.c:1313:
+ * (this function can be called from the kernel thread scanner, or from $

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1532: FILE: mm/ksm.c:1346:
+					     ksm_scan->page_index * PAGE_SIZE ,
 					                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1551: FILE: mm/ksm.c:1365:
+static struct file_operations ksm_sma_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ksm_sma)...) over kmalloc(sizeof(struct ksm_sma)...)
#1562: FILE: mm/ksm.c:1376:
+	ksm_sma = kmalloc(sizeof(struct ksm_sma), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1579: FILE: mm/ksm.c:1393:
+static long ksm_dev_ioctl(struct file *filp,
                                        ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1597: FILE: mm/ksm.c:1411:
+static struct file_operations ksm_chardev_ops = {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1617: FILE: mm/ksm.c:1431:
+			schedule_timeout_interruptible(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1621: FILE: mm/ksm.c:1435:
+			wait_event_interruptible(kthread_wait,
+					ksmd_flags & ksm_control_flags_run ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1647: FILE: mm/ksm.c:1461:
+static ssize_t sleep_store(struct kobject *kobj,
+				   struct kobj_attribute *attr,

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1653: FILE: mm/ksm.c:1467:
+	err = strict_strtoul(buf, 10, &usecs);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1686: FILE: mm/ksm.c:1500:
+	err = strict_strtoul(buf, 10, &nr_pages);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1716: FILE: mm/ksm.c:1530:
+	err = strict_strtoul(buf, 10, &k_flags);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1757: FILE: mm/ksm.c:1571:
+	err = strict_strtoul(buf, 10, &nr_pages);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1796: FILE: mm/ksm.c:1610:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1811: FILE: mm/ksm.c:1625:
+		printk(KERN_ERR "ksm: creating kthread failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1818: FILE: mm/ksm.c:1632:
+		printk(KERN_ERR "ksm: misc device register failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1824: FILE: mm/ksm.c:1638:
+		printk(KERN_ERR "ksm: register sysfs failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1828: FILE: mm/ksm.c:1642:
+	printk(KERN_WARNING "ksm loaded\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 73 warnings, 14 checks, 1739 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
