CHECK:CAMELCASE: Avoid CamelCase: <vBufA>
#127: FILE: arch/m68k/mac/via.c:652:
+		via1[vBufA] &= ~VIA1A_vHeadSel;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <VIA1A_vHeadSel>
#127: FILE: arch/m68k/mac/via.c:652:
+		via1[vBufA] &= ~VIA1A_vHeadSel;

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#169: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#174: FILE: drivers/block/swim.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#212: FILE: drivers/block/swim.c:39:
+} __attribute__((packed));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#216: FILE: drivers/block/swim.c:43:
+#define REG(x)	unsigned char x, x ## _pad[0x200 - 1];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#236: FILE: drivers/block/swim.c:63:
+} __attribute__((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: drivers/block/swim.c:65:
+#define swim_write(base, reg, v) ^Iout_8(&(base)->write_##reg, (v))$

CHECK:CAMELCASE: Avoid CamelCase: <mtrOff>
#252: FILE: drivers/block/swim.c:79:
+	REG(mtrOff)

CHECK:CAMELCASE: Avoid CamelCase: <mtrOn>
#253: FILE: drivers/block/swim.c:80:
+	REG(mtrOn)

CHECK:CAMELCASE: Avoid CamelCase: <intDrive>
#254: FILE: drivers/block/swim.c:81:
+	REG(intDrive)

CHECK:CAMELCASE: Avoid CamelCase: <extDrive>
#255: FILE: drivers/block/swim.c:82:
+	REG(extDrive)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#260: FILE: drivers/block/swim.c:87:
+} __attribute__((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#262: FILE: drivers/block/swim.c:89:
+#define iwm_write(base, reg, v) ^Iout_8(&(base)->reg, (v))$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#262: FILE: drivers/block/swim.c:89:
+#define iwm_write(base, reg, v) 	out_8(&(base)->reg, (v))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#263: FILE: drivers/block/swim.c:90:
+#define iwm_read(base, reg)		in_8(&(base)->reg)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#342: FILE: drivers/block/swim.c:169:
+struct floppy_state {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#385: FILE: drivers/block/swim.c:212:
+	spinlock_t lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#391: FILE: drivers/block/swim.c:218:
+extern int swim_read_sector_header(struct swim __iomem *base,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#393: FILE: drivers/block/swim.c:220:
+extern int swim_read_sector_data(struct swim __iomem *base,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#460: FILE: drivers/block/swim.c:287:
+	swim_write(base, phase, (LSTRB<<4) | LSTRB);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#462: FILE: drivers/block/swim.c:289:
+	swim_write(base, phase, (LSTRB<<4) | ((~LSTRB) & 0x0F));
 	                              ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#474: FILE: drivers/block/swim.c:301:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#501: FILE: drivers/block/swim.c:328:
+		for (i = 0; i < 2*HZ; i++) {
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#520: FILE: drivers/block/swim.c:347:
+	for (i = 0; i < 2*HZ; i++) {
 	                 ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#547: FILE: drivers/block/swim.c:374:
+	for (wait = 0; wait < HZ; wait++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#565: FILE: drivers/block/swim.c:392:
+	for (try = 0; try < 100; try++) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#585: FILE: drivers/block/swim.c:412:
+	if (step < 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#588: FILE: drivers/block/swim.c:415:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#606: FILE: drivers/block/swim.c:433:
+	if (ret == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#608: FILE: drivers/block/swim.c:435:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header.sector == sector'
#649: FILE: drivers/block/swim.c:476:
+		if (!ret && (header.sector == sector)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header.side != side'
#660: FILE: drivers/block/swim.c:487:
+	if ((header.side != side)  || (header.track != track) ||
+	     (header.sector != sector))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header.track != track'
#660: FILE: drivers/block/swim.c:487:
+	if ((header.side != side)  || (header.track != track) ||
+	     (header.sector != sector))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'header.sector != sector'
#660: FILE: drivers/block/swim.c:487:
+	if ((header.side != side)  || (header.track != track) ||
+	     (header.sector != sector))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: drivers/block/swim.c:488:
+	if ((header.side != side)  || (header.track != track) ||
+	     (header.sector != sector))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#676: FILE: drivers/block/swim.c:503:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#680: FILE: drivers/block/swim.c:507:
+		int x;
+		track = i / fs->secpercyl;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: drivers/block/swim.c:515:
+			ret = swim_read_sector(fs, side, track, sector,
+						buffer);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#705: FILE: drivers/block/swim.c:532:
+	while ((req = elv_next_request(q))) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#782: FILE: drivers/block/swim.c:609:
+		struct floppy_struct *g;
+		fs->disk_in = 1;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#787: FILE: drivers/block/swim.c:614:
+			printk(KERN_ERR

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#817: FILE: drivers/block/swim.c:644:
+	udelay(10);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#831: FILE: drivers/block/swim.c:658:
+	if (mode & (FMODE_READ|FMODE_WRITE)) {
 	                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#872: FILE: drivers/block/swim.c:699:
+	if ((cmd & 0x80) && !capable(CAP_SYS_ADMIN))
+			return -EPERM;

CHECK:SPACING: No space is necessary after a cast
#883: FILE: drivers/block/swim.c:710:
+		if (copy_to_user((void __user *) param, (void *) &floppy_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#889: FILE: drivers/block/swim.c:716:
+		printk(KERN_DEBUG "SWIM floppy_ioctl: unknown cmd %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'floppy_ioctl', this function's name, in a string
#889: FILE: drivers/block/swim.c:716:
+		printk(KERN_DEBUG "SWIM floppy_ioctl: unknown cmd %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#891: FILE: drivers/block/swim.c:718:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#938: FILE: drivers/block/swim.c:765:
+static struct block_device_operations floppy_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#960: FILE: drivers/block/swim.c:787:
+static int __devinit swim_add_floppy(struct swim_priv *swd,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#984: FILE: drivers/block/swim.c:811:
+static int __devinit swim_floppy_init(struct swim_priv *swd)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1003: FILE: drivers/block/swim.c:830:
+		printk(KERN_ERR "Unable to get major %d for SWIM floppy\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!swd->unit[drive].disk"
#1010: FILE: drivers/block/swim.c:837:
+		if (swd->unit[drive].disk == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1047: FILE: drivers/block/swim.c:874:
+static int __devinit swim_probe(struct platform_device *dev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1075: FILE: drivers/block/swim.c:902:
+		printk(KERN_INFO "SWIM device not found !\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*swd)...) over kzalloc(sizeof(struct swim_priv)...)
#1082: FILE: drivers/block/swim.c:909:
+	swd = kzalloc(sizeof(struct swim_priv), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#1108: FILE: drivers/block/swim.c:935:
+static int __devexit swim_remove(struct platform_device *dev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1153: FILE: drivers/block/swim.c:980:
+	printk(KERN_INFO "SWIM floppy driver %s\n", DRIVER_VERSION);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1175: FILE: drivers/block/swim_asm.S:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160800.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 34 checks, 1338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000160800.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
