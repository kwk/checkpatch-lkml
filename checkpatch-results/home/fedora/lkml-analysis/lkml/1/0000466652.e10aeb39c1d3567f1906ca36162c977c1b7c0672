WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
 arch/avr32/mach-at32ap/at32ap7000.c     |  144 ++++++++++++++++++++++++-------

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#208: FILE: arch/avr32/mach-at32ap/at32ap7000.c:393:
+	BUG_ON(clk->index > 7);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#237: FILE: arch/avr32/mach-at32ap/at32ap7000.c:765:
+		pin = (unsigned)b->controller_data;

WARNING:MISPLACED_INIT: __initdata should be placed after spi0_pins[]
#256: FILE: arch/avr32/mach-at32ap/at32ap7000.c:784:
+	static u8 __initdata spi0_pins[] =

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#257: FILE: arch/avr32/mach-at32ap/at32ap7000.c:785:
+	static u8 __initdata spi0_pins[] =
+		{ GPIO_PIN_PA(3), GPIO_PIN_PA(4),

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MISPLACED_INIT: __initdata should be placed after spi1_pins[]
#259: FILE: arch/avr32/mach-at32ap/at32ap7000.c:787:
+	static u8 __initdata spi1_pins[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#260: FILE: arch/avr32/mach-at32ap/at32ap7000.c:788:
+	static u8 __initdata spi1_pins[] =
+		{ GPIO_PIN_PB(2), GPIO_PIN_PB(3),

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#310: FILE: arch/avr32/mach-at32ap/at32ap7000.c:899:
+ * -------------------------------------------------------------------- */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#319: FILE: arch/avr32/mach-at32ap/at32ap7000.c:908:
+};
+static struct clk gclk1 = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#327: FILE: arch/avr32/mach-at32ap/at32ap7000.c:916:
+};
+static struct clk gclk2 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#335: FILE: arch/avr32/mach-at32ap/at32ap7000.c:924:
+};
+static struct clk gclk3 = {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#343: FILE: arch/avr32/mach-at32ap/at32ap7000.c:932:
+};
+static struct clk gclk4 = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#391: FILE: arch/avr32/mach-at32ap/clock.c:67:
+		printk(KERN_ERR "%s: mismatched disable\n", clk->name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/asm-avr32/io.h:31:
+extern void __raw_writesb(void __iomem *addr, const void *data, int bytelen);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/asm-avr32/io.h:32:
+extern void __raw_writesw(void __iomem *addr, const void *data, int wordlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#426: FILE: include/asm-avr32/io.h:33:
+extern void __raw_writesl(void __iomem *addr, const void *data, int longlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#431: FILE: include/asm-avr32/io.h:35:
+extern void __raw_readsb(const void __iomem *addr, void *data, int bytelen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#432: FILE: include/asm-avr32/io.h:36:
+extern void __raw_readsw(const void __iomem *addr, void *data, int wordlen);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#433: FILE: include/asm-avr32/io.h:37:
+extern void __raw_readsl(const void __iomem *addr, void *data, int longlen);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 7 warnings, 10 checks, 386 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000466652.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
