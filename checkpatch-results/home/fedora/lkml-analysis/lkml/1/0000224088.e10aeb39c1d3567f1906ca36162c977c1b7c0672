WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: arch/x86/kernel/tsc_resync.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#68: FILE: arch/x86/kernel/tsc_resync.c:13:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#74: FILE: arch/x86/kernel/tsc_resync.c:19:
+static int	tsc_lazy_resync = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#83: FILE: arch/x86/kernel/tsc_resync.c:28:
+static uint64_t		ref_clock_base;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#84: FILE: arch/x86/kernel/tsc_resync.c:29:
+static uint32_t		ref_clock_last;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#85: FILE: arch/x86/kernel/tsc_resync.c:30:
+static uint64_t		ref_clock_frequency;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#87: FILE: arch/x86/kernel/tsc_resync.c:32:
+static uint64_t		ref2cyc_scale;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#95: FILE: arch/x86/kernel/tsc_resync.c:40:
+	uint64_t	base;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#96: FILE: arch/x86/kernel/tsc_resync.c:41:
+	uint32_t	offset;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#114: FILE: arch/x86/kernel/tsc_resync.c:59:
+	uint32_t	ref_clock_now;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#134: FILE: arch/x86/kernel/tsc_resync.c:79:
+static int ref_clock_tsc_read(uint64_t *tsc, uint64_t *ref)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: arch/x86/kernel/tsc_resync.c:83:
+	unsigned	n1, n2;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#139: FILE: arch/x86/kernel/tsc_resync.c:84:
+	uint64_t	r;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#140: FILE: arch/x86/kernel/tsc_resync.c:85:
+	uint64_t	t1, t2;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#143: FILE: arch/x86/kernel/tsc_resync.c:88:
+	for (i = 0; i < MAX_RETRIES; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#146: FILE: arch/x86/kernel/tsc_resync.c:91:
+		rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#152: FILE: arch/x86/kernel/tsc_resync.c:97:
+		rmb();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#174: FILE: arch/x86/kernel/tsc_resync.c:119:
+	uint64_t	ref_start, ref_now;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#176: FILE: arch/x86/kernel/tsc_resync.c:121:
+	uint64_t	loop_count = ref_clock_frequency;	/* 1 sec */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#198: FILE: arch/x86/kernel/tsc_resync.c:143:
+	uint64_t	cycles;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#200: FILE: arch/x86/kernel/tsc_resync.c:145:
+	asm __volatile__ (

WARNING:TYPO_SPELLING: 'intialized' may be misspelled - perhaps 'initialized'?
#217: FILE: arch/x86/kernel/tsc_resync.c:162:
+ * system startup so that the TSC resync code is intialized as
                                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#238: FILE: arch/x86/kernel/tsc_resync.c:183:
+	uint32_t	hpet_period;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#239: FILE: arch/x86/kernel/tsc_resync.c:184:
+	uint32_t	hpet_counter;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#312: FILE: arch/x86/kernel/tsc_resync.c:257:
+	unsigned nmi_before, nmi_after;

WARNING:MEMORY_BARRIER: memory barrier without comment
#317: FILE: arch/x86/kernel/tsc_resync.c:262:
+		rmb();

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#319: FILE: arch/x86/kernel/tsc_resync.c:264:
+		asm __volatile__ (

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: arch/x86/kernel/tsc_resync.c:265:
+^I^I ^I"xorl %%eax, %%eax\n\t"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#320: FILE: arch/x86/kernel/tsc_resync.c:265:
+^I^I ^I"xorl %%eax, %%eax\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: arch/x86/kernel/tsc_resync.c:266:
+^I^I ^I"cpuid\n\t"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#321: FILE: arch/x86/kernel/tsc_resync.c:266:
+^I^I ^I"cpuid\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#322: FILE: arch/x86/kernel/tsc_resync.c:267:
+^I^I ^I"movl $0x10, %%ecx\n\t"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: arch/x86/kernel/tsc_resync.c:267:
+^I^I ^I"movl $0x10, %%ecx\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#323: FILE: arch/x86/kernel/tsc_resync.c:268:
+^I^I ^I"rdmsr\n\t"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#323: FILE: arch/x86/kernel/tsc_resync.c:268:
+^I^I ^I"rdmsr\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#324: FILE: arch/x86/kernel/tsc_resync.c:269:
+^I^I ^I"addl %%edi, %%eax\n\t"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#324: FILE: arch/x86/kernel/tsc_resync.c:269:
+^I^I ^I"addl %%edi, %%eax\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#325: FILE: arch/x86/kernel/tsc_resync.c:270:
+^I^I ^I"adcl %%esi, %%edx\n\t"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#325: FILE: arch/x86/kernel/tsc_resync.c:270:
+^I^I ^I"adcl %%esi, %%edx\n\t"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#326: FILE: arch/x86/kernel/tsc_resync.c:271:
+^I^I ^I"wrmsr\n"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#326: FILE: arch/x86/kernel/tsc_resync.c:271:
+^I^I ^I"wrmsr\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#327: FILE: arch/x86/kernel/tsc_resync.c:272:
+^I^I ^I: /* no outputs */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#327: FILE: arch/x86/kernel/tsc_resync.c:272:
+^I^I ^I: /* no outputs */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: arch/x86/kernel/tsc_resync.c:273:
+^I^I ^I: "D" ((u32)delta), "S" ((u32)(delta >> 32))$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#328: FILE: arch/x86/kernel/tsc_resync.c:273:
+^I^I ^I: "D" ((u32)delta), "S" ((u32)(delta >> 32))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: arch/x86/kernel/tsc_resync.c:274:
+^I^I ^I: "ax", "bx", "cx", "dx", "cc"$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#329: FILE: arch/x86/kernel/tsc_resync.c:274:
+^I^I ^I: "ax", "bx", "cx", "dx", "cc"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: arch/x86/kernel/tsc_resync.c:275:
+^I ^I);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#330: FILE: arch/x86/kernel/tsc_resync.c:275:
+^I ^I);$

WARNING:MEMORY_BARRIER: memory barrier without comment
#332: FILE: arch/x86/kernel/tsc_resync.c:277:
+		rmb();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#346: FILE: arch/x86/kernel/tsc_resync.c:291:
+	uint64_t	ref;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#347: FILE: arch/x86/kernel/tsc_resync.c:292:
+	uint64_t	tsc;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#349: FILE: arch/x86/kernel/tsc_resync.c:294:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#350: FILE: arch/x86/kernel/tsc_resync.c:295:
+	if (ref_clock_tsc_read(&tsc, &ref) != 0) {
+		return;
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#357: FILE: arch/x86/kernel/tsc_resync.c:302:
+#define	IS_RDTSC(op)	((op & 0xffff) == 0x310f)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#358: FILE: arch/x86/kernel/tsc_resync.c:303:
+#define IS_RDTSCP(op)	((op & 0xffffff) == 0xf9010f)

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#398: FILE: arch/x86/kernel/tsc_resync.c:343:
+	if (! tsc_resync_enabled)
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#401: FILE: arch/x86/kernel/tsc_resync.c:346:
+	switch (event) {
+		case IDLE_START:
[...]
+		case IDLE_END:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#434: FILE: arch/x86/kernel/tsc_resync.c:379:
+		printk("TSC resynchronization disabled\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#440: FILE: arch/x86/kernel/tsc_resync.c:385:
+		printk("TSC resynchronization not enabled: no HPET\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#446: FILE: arch/x86/kernel/tsc_resync.c:391:
+		printk("TSC resynchronization not enabled: "

WARNING:SPLIT_STRING: quoted string split across lines
#447: FILE: arch/x86/kernel/tsc_resync.c:392:
+		printk("TSC resynchronization not enabled: "
+			"reference clock calibration failed\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#456: FILE: arch/x86/kernel/tsc_resync.c:401:
+		printk("TSC lazy resynchronization enabled\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#458: FILE: arch/x86/kernel/tsc_resync.c:403:
+		printk("TSC resynchronization enabled\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#467: FILE: arch/x86/kernel/tsc_resync.c:412:
+			tsc_lazy_resync = tsc_resync_enabled = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#474: FILE: arch/x86/kernel/tsc_resync.c:419:
+__setup("tsc_resync=", tsc_resync_setup);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/asm-x86/proto.h:35:
+extern void tsc_resync_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#572: FILE: include/asm-x86/proto.h:36:
+extern int tsc_resync_handle_rdtsc(struct pt_regs *regs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 26 warnings, 28 checks, 496 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224088.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
