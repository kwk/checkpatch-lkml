WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-core-for-linus

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#316: FILE: Documentation/trace/events.txt:241:
+at the root of the subsytem.  Note however, that if a filter for any
                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#328: FILE: Documentation/trace/events.txt:253:
+Clear the filters on all events in the sched subsytem:
                                              ^^^^^^^^

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#338: FILE: Documentation/trace/events.txt:263:
+subsytem (all events end up with the same filter):
 ^^^^^^^^

WARNING:TYPO_SPELLING: 'subsytem' may be misspelled - perhaps 'subsystem'?
#348: FILE: Documentation/trace/events.txt:273:
+sched subsytem (all events but those that have a prev_pid field retain
       ^^^^^^^^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".kprobes.text") over __attribute__((__section__(".kprobes.text")))
#758: FILE: include/linux/kprobes.h:51:
+#define __kprobes	__attribute__((__section__(".kprobes.text")))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#765: FILE: include/linux/kprobes.h:57:
 };
+#define __kprobes

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&parser'
#1198: FILE: kernel/trace/ftrace.c:2590:
+	if (trace_parser_loaded((&parser))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1203: FILE: kernel/trace/ftrace.c:2595:
+		ret = ftrace_set_func(array, &ftrace_graph_count,
+					parser.buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1335: FILE: kernel/trace/trace.c:377:
+int trace_get_user(struct trace_parser *parser, const char __user *ubuf,
+	size_t cnt, loff_t *ppos)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1377: FILE: kernel/trace/trace.c:419:
+		if (parser->idx < parser->size)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1379: FILE: kernel/trace/trace.c:421:
+		else {

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1465: FILE: kernel/trace/trace.c:1648:
+	seq_puts(m, "#                |||| /_--=> lock-depth       \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1466: FILE: kernel/trace/trace.c:1649:
+	seq_puts(m, "#                |||||/     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1467: FILE: kernel/trace/trace.c:1650:
+	seq_puts(m, "#  cmd     pid   |||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#1468: FILE: kernel/trace/trace.c:1651:
+	seq_puts(m, "#     \\   /      ||||||   \\   |   /           \n");

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1564: FILE: kernel/trace/trace.h:55:
+#define __field(type, item)		type	item;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1564: FILE: kernel/trace/trace.h:55:
+#define __field(type, item)		type	item;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1584: FILE: kernel/trace/trace.h:64:
+#define __array(type, item, size)	type	item[size];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1584: FILE: kernel/trace/trace.h:64:
+#define __array(type, item, size)	type	item[size];

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1598: FILE: kernel/trace/trace.h:70:
+#define __dynamic_array(type, item)	type	item[];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1598: FILE: kernel/trace/trace.h:70:
+#define __dynamic_array(type, item)	type	item[];

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#1734: FILE: kernel/trace/trace.h:527:
+ * @idx: user input lenght
                     ^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1740: FILE: kernel/trace/trace.h:533:
+	unsigned	idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1741: FILE: kernel/trace/trace.h:534:
+	unsigned	size;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1760: FILE: kernel/trace/trace.h:553:
+extern int trace_parser_get_init(struct trace_parser *parser, int size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1761: FILE: kernel/trace/trace.h:554:
+extern void trace_parser_put(struct trace_parser *parser);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1762: FILE: kernel/trace/trace.h:555:
+extern int trace_get_user(struct trace_parser *parser, const char __user *ubuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1763: FILE: kernel/trace/trace.h:556:
+extern int trace_get_user(struct trace_parser *parser, const char __user *ubuf,
+	size_t cnt, loff_t *ppos);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1823: FILE: kernel/trace/trace.h:751:
+#define FTRACE_ENTRY(call, struct_name, id, tstruct, print)		\
 	extern struct ftrace_event_call event_##call;

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1890: FILE: kernel/trace/trace_clock.c:74:
+} trace_clock_struct ____cacheline_aligned_in_smp =
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1928: FILE: kernel/trace/trace_entries.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'layed' may be misspelled - perhaps 'laid'?
#1957: FILE: kernel/trace/trace_entries.h:30:
+ *	structure is layed out. This allows the internal structure
   	             ^^^^^

WARNING:TYPO_SPELLING: 'internel' may be misspelled - perhaps 'internal'?
#1961: FILE: kernel/trace/trace_entries.h:34:
+ *	internel structures are just tracing helpers, this is not
   	^^^^^^^^

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#1983: FILE: kernel/trace/trace_entries.h:56:
+ * Function trace entry - function address and parent function addres:
                                                                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1986: FILE: kernel/trace/trace_entries.h:59:
+FTRACE_ENTRY(function, ftrace_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1989: FILE: kernel/trace/trace_entries.h:62:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#1990: FILE: kernel/trace/trace_entries.h:63:
+		__field(	unsigned long,	ip		)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1990: FILE: kernel/trace/trace_entries.h:63:
+		__field(	unsigned long,	ip		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1991: FILE: kernel/trace/trace_entries.h:64:
+		__field(	unsigned long,	parent_ip	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1991: FILE: kernel/trace/trace_entries.h:64:
+		__field(	unsigned long,	parent_ip	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: kernel/trace/trace_entries.h:72:
+FTRACE_ENTRY(funcgraph_entry, ftrace_graph_ent_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2002: FILE: kernel/trace/trace_entries.h:75:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2003: FILE: kernel/trace/trace_entries.h:76:
+		__field_struct(	struct ftrace_graph_ent,	graph_ent	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2003: FILE: kernel/trace/trace_entries.h:76:
+		__field_struct(	struct ftrace_graph_ent,	graph_ent	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2004: FILE: kernel/trace/trace_entries.h:77:
+		__field_desc(	unsigned long,	graph_ent,	func		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2004: FILE: kernel/trace/trace_entries.h:77:
+		__field_desc(	unsigned long,	graph_ent,	func		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2005: FILE: kernel/trace/trace_entries.h:78:
+		__field_desc(	int,		graph_ent,	depth		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2005: FILE: kernel/trace/trace_entries.h:78:
+		__field_desc(	int,		graph_ent,	depth		)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2013: FILE: kernel/trace/trace_entries.h:86:
+FTRACE_ENTRY(funcgraph_exit, ftrace_graph_ret_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2016: FILE: kernel/trace/trace_entries.h:89:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2017: FILE: kernel/trace/trace_entries.h:90:
+		__field_struct(	struct ftrace_graph_ret,	ret	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2017: FILE: kernel/trace/trace_entries.h:90:
+		__field_struct(	struct ftrace_graph_ret,	ret	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2018: FILE: kernel/trace/trace_entries.h:91:
+		__field_desc(	unsigned long,	ret,		func	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2018: FILE: kernel/trace/trace_entries.h:91:
+		__field_desc(	unsigned long,	ret,		func	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2019: FILE: kernel/trace/trace_entries.h:92:
+		__field_desc(	unsigned long long, ret,	calltime)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2020: FILE: kernel/trace/trace_entries.h:93:
+		__field_desc(	unsigned long long, ret,	rettime	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2020: FILE: kernel/trace/trace_entries.h:93:
+		__field_desc(	unsigned long long, ret,	rettime	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2021: FILE: kernel/trace/trace_entries.h:94:
+		__field_desc(	unsigned long,	ret,		overrun	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2021: FILE: kernel/trace/trace_entries.h:94:
+		__field_desc(	unsigned long,	ret,		overrun	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2022: FILE: kernel/trace/trace_entries.h:95:
+		__field_desc(	int,		ret,		depth	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2022: FILE: kernel/trace/trace_entries.h:95:
+		__field_desc(	int,		ret,		depth	)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2037: FILE: kernel/trace/trace_entries.h:110:
+#define FTRACE_CTX_FIELDS					\
+	__field(	unsigned int,	prev_pid	)	\
+	__field(	unsigned char,	prev_prio	)	\
+	__field(	unsigned char,	prev_state	)	\
+	__field(	unsigned int,	next_pid	)	\
+	__field(	unsigned char,	next_prio	)	\
+	__field(	unsigned char,	next_state	)	\
+	__field(	unsigned int,	next_cpu	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2038: FILE: kernel/trace/trace_entries.h:111:
+	__field(	unsigned int,	prev_pid	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2038: FILE: kernel/trace/trace_entries.h:111:
+	__field(	unsigned int,	prev_pid	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2039: FILE: kernel/trace/trace_entries.h:112:
+	__field(	unsigned char,	prev_prio	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2039: FILE: kernel/trace/trace_entries.h:112:
+	__field(	unsigned char,	prev_prio	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2040: FILE: kernel/trace/trace_entries.h:113:
+	__field(	unsigned char,	prev_state	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2040: FILE: kernel/trace/trace_entries.h:113:
+	__field(	unsigned char,	prev_state	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2041: FILE: kernel/trace/trace_entries.h:114:
+	__field(	unsigned int,	next_pid	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2041: FILE: kernel/trace/trace_entries.h:114:
+	__field(	unsigned int,	next_pid	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2042: FILE: kernel/trace/trace_entries.h:115:
+	__field(	unsigned char,	next_prio	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2042: FILE: kernel/trace/trace_entries.h:115:
+	__field(	unsigned char,	next_prio	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2043: FILE: kernel/trace/trace_entries.h:116:
+	__field(	unsigned char,	next_state	)	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2043: FILE: kernel/trace/trace_entries.h:116:
+	__field(	unsigned char,	next_state	)	\

ERROR:SPACING: space prohibited after that open parenthesis '('
#2044: FILE: kernel/trace/trace_entries.h:117:
+	__field(	unsigned int,	next_cpu	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2044: FILE: kernel/trace/trace_entries.h:117:
+	__field(	unsigned int,	next_cpu	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2047: FILE: kernel/trace/trace_entries.h:120:
+FTRACE_ENTRY(context_switch, ctx_switch_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2050: FILE: kernel/trace/trace_entries.h:123:
+	F_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2066: FILE: kernel/trace/trace_entries.h:139:
+FTRACE_ENTRY_DUP(wakeup, ctx_switch_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2069: FILE: kernel/trace/trace_entries.h:142:
+	F_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2084: FILE: kernel/trace/trace_entries.h:157:
+FTRACE_ENTRY(special, special_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2087: FILE: kernel/trace/trace_entries.h:160:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2088: FILE: kernel/trace/trace_entries.h:161:
+		__field(	unsigned long,	arg1	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2088: FILE: kernel/trace/trace_entries.h:161:
+		__field(	unsigned long,	arg1	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2089: FILE: kernel/trace/trace_entries.h:162:
+		__field(	unsigned long,	arg2	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2089: FILE: kernel/trace/trace_entries.h:162:
+		__field(	unsigned long,	arg2	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2090: FILE: kernel/trace/trace_entries.h:163:
+		__field(	unsigned long,	arg3	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2090: FILE: kernel/trace/trace_entries.h:163:
+		__field(	unsigned long,	arg3	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2104: FILE: kernel/trace/trace_entries.h:177:
+FTRACE_ENTRY(kernel_stack, stack_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2107: FILE: kernel/trace/trace_entries.h:180:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2108: FILE: kernel/trace/trace_entries.h:181:
+		__array(	unsigned long,	caller, FTRACE_STACK_ENTRIES	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2108: FILE: kernel/trace/trace_entries.h:181:
+		__array(	unsigned long,	caller, FTRACE_STACK_ENTRIES	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2119: FILE: kernel/trace/trace_entries.h:192:
+FTRACE_ENTRY(user_stack, userstack_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2122: FILE: kernel/trace/trace_entries.h:195:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2123: FILE: kernel/trace/trace_entries.h:196:
+		__field(	unsigned int,	tgid	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2123: FILE: kernel/trace/trace_entries.h:196:
+		__field(	unsigned int,	tgid	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2124: FILE: kernel/trace/trace_entries.h:197:
+		__array(	unsigned long,	caller, FTRACE_STACK_ENTRIES	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2124: FILE: kernel/trace/trace_entries.h:197:
+		__array(	unsigned long,	caller, FTRACE_STACK_ENTRIES	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2138: FILE: kernel/trace/trace_entries.h:211:
+FTRACE_ENTRY(bprint, bprint_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2141: FILE: kernel/trace/trace_entries.h:214:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2142: FILE: kernel/trace/trace_entries.h:215:
+		__field(	unsigned long,	ip	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2142: FILE: kernel/trace/trace_entries.h:215:
+		__field(	unsigned long,	ip	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2143: FILE: kernel/trace/trace_entries.h:216:
+		__field(	const char *,	fmt	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2143: FILE: kernel/trace/trace_entries.h:216:
+		__field(	const char *,	fmt	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2144: FILE: kernel/trace/trace_entries.h:217:
+		__dynamic_array(	u32,	buf	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2144: FILE: kernel/trace/trace_entries.h:217:
+		__dynamic_array(	u32,	buf	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2152: FILE: kernel/trace/trace_entries.h:225:
+FTRACE_ENTRY(print, print_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2155: FILE: kernel/trace/trace_entries.h:228:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2156: FILE: kernel/trace/trace_entries.h:229:
+		__field(	unsigned long,	ip	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2156: FILE: kernel/trace/trace_entries.h:229:
+		__field(	unsigned long,	ip	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2157: FILE: kernel/trace/trace_entries.h:230:
+		__dynamic_array(	char,	buf	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2157: FILE: kernel/trace/trace_entries.h:230:
+		__dynamic_array(	char,	buf	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2165: FILE: kernel/trace/trace_entries.h:238:
+FTRACE_ENTRY(mmiotrace_rw, trace_mmiotrace_rw,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2168: FILE: kernel/trace/trace_entries.h:241:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2169: FILE: kernel/trace/trace_entries.h:242:
+		__field_struct(	struct mmiotrace_rw,	rw	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2169: FILE: kernel/trace/trace_entries.h:242:
+		__field_struct(	struct mmiotrace_rw,	rw	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2170: FILE: kernel/trace/trace_entries.h:243:
+		__field_desc(	resource_size_t, rw,	phys	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2170: FILE: kernel/trace/trace_entries.h:243:
+		__field_desc(	resource_size_t, rw,	phys	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2171: FILE: kernel/trace/trace_entries.h:244:
+		__field_desc(	unsigned long,	rw,	value	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2171: FILE: kernel/trace/trace_entries.h:244:
+		__field_desc(	unsigned long,	rw,	value	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2172: FILE: kernel/trace/trace_entries.h:245:
+		__field_desc(	unsigned long,	rw,	pc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2172: FILE: kernel/trace/trace_entries.h:245:
+		__field_desc(	unsigned long,	rw,	pc	)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2173: FILE: kernel/trace/trace_entries.h:246:
+^I^I__field_desc(^Iint, ^I^Irw,^Imap_id^I)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#2173: FILE: kernel/trace/trace_entries.h:246:
+		__field_desc(	int, 		rw,	map_id	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2173: FILE: kernel/trace/trace_entries.h:246:
+		__field_desc(	int, 		rw,	map_id	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2174: FILE: kernel/trace/trace_entries.h:247:
+		__field_desc(	unsigned char,	rw,	opcode	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2174: FILE: kernel/trace/trace_entries.h:247:
+		__field_desc(	unsigned char,	rw,	opcode	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2175: FILE: kernel/trace/trace_entries.h:248:
+		__field_desc(	unsigned char,	rw,	width	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2175: FILE: kernel/trace/trace_entries.h:248:
+		__field_desc(	unsigned char,	rw,	width	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2184: FILE: kernel/trace/trace_entries.h:257:
+FTRACE_ENTRY(mmiotrace_map, trace_mmiotrace_map,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2187: FILE: kernel/trace/trace_entries.h:260:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2188: FILE: kernel/trace/trace_entries.h:261:
+		__field_struct(	struct mmiotrace_map,	map	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2188: FILE: kernel/trace/trace_entries.h:261:
+		__field_struct(	struct mmiotrace_map,	map	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2189: FILE: kernel/trace/trace_entries.h:262:
+		__field_desc(	resource_size_t, map,	phys	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2189: FILE: kernel/trace/trace_entries.h:262:
+		__field_desc(	resource_size_t, map,	phys	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2190: FILE: kernel/trace/trace_entries.h:263:
+		__field_desc(	unsigned long,	map,	virt	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2190: FILE: kernel/trace/trace_entries.h:263:
+		__field_desc(	unsigned long,	map,	virt	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2191: FILE: kernel/trace/trace_entries.h:264:
+		__field_desc(	unsigned long,	map,	len	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2191: FILE: kernel/trace/trace_entries.h:264:
+		__field_desc(	unsigned long,	map,	len	)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2192: FILE: kernel/trace/trace_entries.h:265:
+^I^I__field_desc(^Iint, ^I^Imap,^Imap_id^I)$

ERROR:SPACING: space prohibited after that open parenthesis '('
#2192: FILE: kernel/trace/trace_entries.h:265:
+		__field_desc(	int, 		map,	map_id	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2192: FILE: kernel/trace/trace_entries.h:265:
+		__field_desc(	int, 		map,	map_id	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2193: FILE: kernel/trace/trace_entries.h:266:
+		__field_desc(	unsigned char,	map,	opcode	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2193: FILE: kernel/trace/trace_entries.h:266:
+		__field_desc(	unsigned char,	map,	opcode	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2202: FILE: kernel/trace/trace_entries.h:275:
+FTRACE_ENTRY(boot_call, trace_boot_call,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2205: FILE: kernel/trace/trace_entries.h:278:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2206: FILE: kernel/trace/trace_entries.h:279:
+		__field_struct(	struct boot_trace_call,	boot_call	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2206: FILE: kernel/trace/trace_entries.h:279:
+		__field_struct(	struct boot_trace_call,	boot_call	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2207: FILE: kernel/trace/trace_entries.h:280:
+		__field_desc(	pid_t,	boot_call,	caller		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2207: FILE: kernel/trace/trace_entries.h:280:
+		__field_desc(	pid_t,	boot_call,	caller		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2208: FILE: kernel/trace/trace_entries.h:281:
+		__array_desc(	char,	boot_call,	func,	KSYM_SYMBOL_LEN)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2215: FILE: kernel/trace/trace_entries.h:288:
+FTRACE_ENTRY(boot_ret, trace_boot_ret,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2218: FILE: kernel/trace/trace_entries.h:291:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2219: FILE: kernel/trace/trace_entries.h:292:
+		__field_struct(	struct boot_trace_ret,	boot_ret	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2219: FILE: kernel/trace/trace_entries.h:292:
+		__field_struct(	struct boot_trace_ret,	boot_ret	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2220: FILE: kernel/trace/trace_entries.h:293:
+		__array_desc(	char,	boot_ret,	func,	KSYM_SYMBOL_LEN)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2221: FILE: kernel/trace/trace_entries.h:294:
+		__field_desc(	int,	boot_ret,	result		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2221: FILE: kernel/trace/trace_entries.h:294:
+		__field_desc(	int,	boot_ret,	result		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2222: FILE: kernel/trace/trace_entries.h:295:
+		__field_desc(	unsigned long, boot_ret, duration	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2222: FILE: kernel/trace/trace_entries.h:295:
+		__field_desc(	unsigned long, boot_ret, duration	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2233: FILE: kernel/trace/trace_entries.h:306:
+FTRACE_ENTRY(branch, trace_branch,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2236: FILE: kernel/trace/trace_entries.h:309:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2237: FILE: kernel/trace/trace_entries.h:310:
+		__field(	unsigned int,	line				)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2237: FILE: kernel/trace/trace_entries.h:310:
+		__field(	unsigned int,	line				)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2238: FILE: kernel/trace/trace_entries.h:311:
+		__array(	char,		func,	TRACE_FUNC_SIZE+1	)
 		        	     		     	               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2238: FILE: kernel/trace/trace_entries.h:311:
+		__array(	char,		func,	TRACE_FUNC_SIZE+1	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2238: FILE: kernel/trace/trace_entries.h:311:
+		__array(	char,		func,	TRACE_FUNC_SIZE+1	)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2239: FILE: kernel/trace/trace_entries.h:312:
+		__array(	char,		file,	TRACE_FILE_SIZE+1	)
 		        	     		     	               ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#2239: FILE: kernel/trace/trace_entries.h:312:
+		__array(	char,		file,	TRACE_FILE_SIZE+1	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2239: FILE: kernel/trace/trace_entries.h:312:
+		__array(	char,		file,	TRACE_FILE_SIZE+1	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2240: FILE: kernel/trace/trace_entries.h:313:
+		__field(	char,		correct				)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2240: FILE: kernel/trace/trace_entries.h:313:
+		__field(	char,		correct				)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2249: FILE: kernel/trace/trace_entries.h:322:
+FTRACE_ENTRY(hw_branch, hw_branch_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2252: FILE: kernel/trace/trace_entries.h:325:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2253: FILE: kernel/trace/trace_entries.h:326:
+		__field(	u64,	from	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2253: FILE: kernel/trace/trace_entries.h:326:
+		__field(	u64,	from	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2254: FILE: kernel/trace/trace_entries.h:327:
+		__field(	u64,	to	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2254: FILE: kernel/trace/trace_entries.h:327:
+		__field(	u64,	to	)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2261: FILE: kernel/trace/trace_entries.h:334:
+FTRACE_ENTRY(power, trace_power,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2264: FILE: kernel/trace/trace_entries.h:337:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2265: FILE: kernel/trace/trace_entries.h:338:
+		__field_struct(	struct power_trace,	state_data	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2265: FILE: kernel/trace/trace_entries.h:338:
+		__field_struct(	struct power_trace,	state_data	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2266: FILE: kernel/trace/trace_entries.h:339:
+		__field_desc(	s64,	state_data,	stamp		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2266: FILE: kernel/trace/trace_entries.h:339:
+		__field_desc(	s64,	state_data,	stamp		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2267: FILE: kernel/trace/trace_entries.h:340:
+		__field_desc(	s64,	state_data,	end		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2267: FILE: kernel/trace/trace_entries.h:340:
+		__field_desc(	s64,	state_data,	end		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2268: FILE: kernel/trace/trace_entries.h:341:
+		__field_desc(	int,	state_data,	type		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2268: FILE: kernel/trace/trace_entries.h:341:
+		__field_desc(	int,	state_data,	type		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2269: FILE: kernel/trace/trace_entries.h:342:
+		__field_desc(	int,	state_data,	state		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2269: FILE: kernel/trace/trace_entries.h:342:
+		__field_desc(	int,	state_data,	state		)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2278: FILE: kernel/trace/trace_entries.h:351:
+FTRACE_ENTRY(kmem_alloc, kmemtrace_alloc_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2281: FILE: kernel/trace/trace_entries.h:354:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2282: FILE: kernel/trace/trace_entries.h:355:
+		__field(	enum kmemtrace_type_id,	type_id		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2282: FILE: kernel/trace/trace_entries.h:355:
+		__field(	enum kmemtrace_type_id,	type_id		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2283: FILE: kernel/trace/trace_entries.h:356:
+		__field(	unsigned long,		call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2283: FILE: kernel/trace/trace_entries.h:356:
+		__field(	unsigned long,		call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2284: FILE: kernel/trace/trace_entries.h:357:
+		__field(	const void *,		ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2284: FILE: kernel/trace/trace_entries.h:357:
+		__field(	const void *,		ptr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2285: FILE: kernel/trace/trace_entries.h:358:
+		__field(	size_t,			bytes_req	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2285: FILE: kernel/trace/trace_entries.h:358:
+		__field(	size_t,			bytes_req	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2286: FILE: kernel/trace/trace_entries.h:359:
+		__field(	size_t,			bytes_alloc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2286: FILE: kernel/trace/trace_entries.h:359:
+		__field(	size_t,			bytes_alloc	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2287: FILE: kernel/trace/trace_entries.h:360:
+		__field(	gfp_t,			gfp_flags	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2287: FILE: kernel/trace/trace_entries.h:360:
+		__field(	gfp_t,			gfp_flags	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2288: FILE: kernel/trace/trace_entries.h:361:
+		__field(	int,			node		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2288: FILE: kernel/trace/trace_entries.h:361:
+		__field(	int,			node		)

WARNING:SPLIT_STRING: quoted string split across lines
#2292: FILE: kernel/trace/trace_entries.h:365:
+	F_printk("type:%u call_site:%lx ptr:%p req:%zi alloc:%zi"
+		 " flags:%x node:%d",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2299: FILE: kernel/trace/trace_entries.h:372:
+FTRACE_ENTRY(kmem_free, kmemtrace_free_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2302: FILE: kernel/trace/trace_entries.h:375:
+	F_STRUCT(

ERROR:SPACING: space prohibited after that open parenthesis '('
#2303: FILE: kernel/trace/trace_entries.h:376:
+		__field(	enum kmemtrace_type_id,	type_id		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2303: FILE: kernel/trace/trace_entries.h:376:
+		__field(	enum kmemtrace_type_id,	type_id		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2304: FILE: kernel/trace/trace_entries.h:377:
+		__field(	unsigned long,		call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2304: FILE: kernel/trace/trace_entries.h:377:
+		__field(	unsigned long,		call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#2305: FILE: kernel/trace/trace_entries.h:378:
+		__field(	const void *,		ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2305: FILE: kernel/trace/trace_entries.h:378:
+		__field(	const void *,		ptr		)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '&parser'
#2594: FILE: kernel/trace/trace_events.c:250:
+	if (trace_parser_loaded((&parser))) {

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#2709: FILE: kernel/trace/trace_events_filter.c:156:
+	u##size *addr = (u##size *)(event + pred->offset);		\
 	        ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2740: FILE: kernel/trace/trace_export.c:26:
+#define __field(type, item)				type item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2747: FILE: kernel/trace/trace_export.c:29:
+#define __field_desc(type, container, item)		type item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2750: FILE: kernel/trace/trace_export.c:32:
+#define __array(type, item, size)			type item[size];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2753: FILE: kernel/trace/trace_export.c:35:
+#define __array_desc(type, container, item, size)	type item[size];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2756: FILE: kernel/trace/trace_export.c:38:
+#define __dynamic_array(type, item)			type item[];

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2762: FILE: kernel/trace/trace_export.c:44:
+#define F_printk(fmt, args...) fmt, args

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2774: FILE: kernel/trace/trace_export.c:56:
+	printk(print);						\

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2783: FILE: kernel/trace/trace_export.c:65:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2785: FILE: kernel/trace/trace_export.c:67:
+#define __field(type, item)						\
 	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
 	if (!ret)							\
 		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2785: FILE: kernel/trace/trace_export.c:67:
+#define __field(type, item)						\
 	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
 	if (!ret)							\
 		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2785: FILE: kernel/trace/trace_export.c:67:
+#define __field(type, item)						\
 	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
 	if (!ret)							\
 		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2785: FILE: kernel/trace/trace_export.c:67:
+#define __field(type, item)						\
 	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),		\
+			       sizeof(field.item));			\
 	if (!ret)							\
 		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2797: FILE: kernel/trace/trace_export.c:76:
+#define __field_desc(type, container, item)				\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'container' - possible side-effects?
#2797: FILE: kernel/trace/trace_export.c:76:
+#define __field_desc(type, container, item)				\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2797: FILE: kernel/trace/trace_export.c:76:
+#define __field_desc(type, container, item)				\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2797: FILE: kernel/trace/trace_export.c:76:
+#define __field_desc(type, container, item)				\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2797: FILE: kernel/trace/trace_export.c:76:
+#define __field_desc(type, container, item)				\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
+	if (!ret)							\
+		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2812: FILE: kernel/trace/trace_export.c:85:
+#define __array(type, item, len)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),	\
+			       sizeof(field.item));		\
 	if (!ret)							\
 		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2812: FILE: kernel/trace/trace_export.c:85:
+#define __array(type, item, len)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),	\
+			       sizeof(field.item));		\
 	if (!ret)							\
 		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2812: FILE: kernel/trace/trace_export.c:85:
+#define __array(type, item, len)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),	\
+			       sizeof(field.item));		\
 	if (!ret)							\
 		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2812: FILE: kernel/trace/trace_export.c:85:
+#define __array(type, item, len)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), item),	\
+			       sizeof(field.item));		\
 	if (!ret)							\
 		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2826: FILE: kernel/trace/trace_export.c:94:
+#define __array_desc(type, container, item, len)			\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
 	if (!ret)							\
 		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'container' - possible side-effects?
#2826: FILE: kernel/trace/trace_export.c:94:
+#define __array_desc(type, container, item, len)			\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
 	if (!ret)							\
 		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2826: FILE: kernel/trace/trace_export.c:94:
+#define __array_desc(type, container, item, len)			\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
 	if (!ret)							\
 		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2826: FILE: kernel/trace/trace_export.c:94:
+#define __array_desc(type, container, item, len)			\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
 	if (!ret)							\
 		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2826: FILE: kernel/trace/trace_export.c:94:
+#define __array_desc(type, container, item, len)			\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t" \
+			       "offset:%zu;\tsize:%zu;\n",		\
+			       offsetof(typeof(field), container.item),	\
+			       sizeof(field.container.item));		\
 	if (!ret)							\
 		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2838: FILE: kernel/trace/trace_export.c:103:
+#define __dynamic_array(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:0;\n",		\
+			       offsetof(typeof(field), item));		\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2838: FILE: kernel/trace/trace_export.c:103:
+#define __dynamic_array(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:0;\n",		\
+			       offsetof(typeof(field), item));		\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2838: FILE: kernel/trace/trace_export.c:103:
+#define __dynamic_array(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%zu;\tsize:0;\n",		\
+			       offsetof(typeof(field), item));		\
+	if (!ret)							\
+		return 0;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#2881: FILE: kernel/trace/trace_export.c:122:
+	struct struct_name field __attribute__((unused));		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2959: FILE: kernel/trace/trace_export.c:136:
+#define __field(type, item)						\
 	ret = trace_define_field(event_call, #type, #item,		\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item),			\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2970: FILE: kernel/trace/trace_export.c:145:
+#define __field_desc(type, container, item)	\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item),		\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'container' - possible side-effects?
#2970: FILE: kernel/trace/trace_export.c:145:
+#define __field_desc(type, container, item)	\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item),		\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2970: FILE: kernel/trace/trace_export.c:145:
+#define __field_desc(type, container, item)	\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item),		\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2970: FILE: kernel/trace/trace_export.c:145:
+#define __field_desc(type, container, item)	\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item),		\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2970: FILE: kernel/trace/trace_export.c:145:
+#define __field_desc(type, container, item)	\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item),		\
+				 is_signed_type(type), FILTER_OTHER);	\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2980: FILE: kernel/trace/trace_export.c:155:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0, FILTER_OTHER);	\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2980: FILE: kernel/trace/trace_export.c:155:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0, FILTER_OTHER);	\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#2980: FILE: kernel/trace/trace_export.c:155:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0, FILTER_OTHER);	\
 	if (ret)							\
 		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2980: FILE: kernel/trace/trace_export.c:155:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0, FILTER_OTHER);	\
 	if (ret)							\
 		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2980: FILE: kernel/trace/trace_export.c:155:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0, FILTER_OTHER);	\
 	if (ret)							\
 		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'container' - possible side-effects?
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2994: FILE: kernel/trace/trace_export.c:164:
+#define __array_desc(type, container, item, len)			\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field),		\
+					  container.item),		\
+				 sizeof(field.container.item), 0,	\
 				 FILTER_OTHER);				\
 	if (ret)							\
 		return ret;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3031: FILE: kernel/trace/trace_export.c:196:
+
+

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#3052: FILE: kernel/trace/trace_export.c:217:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#3053: FILE: kernel/trace/trace_export.c:218:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3169: FILE: kernel/trace/trace_functions_graph.c:986:
+	seq_printf(s, "#%.*s  _-----=> irqs-off        \n", size, spaces);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3170: FILE: kernel/trace/trace_functions_graph.c:987:
+	seq_printf(s, "#%.*s / _----=> need-resched    \n", size, spaces);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3171: FILE: kernel/trace/trace_functions_graph.c:988:
+	seq_printf(s, "#%.*s| / _---=> hardirq/softirq \n", size, spaces);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3172: FILE: kernel/trace/trace_functions_graph.c:989:
+	seq_printf(s, "#%.*s|| / _--=> preempt-depth   \n", size, spaces);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3173: FILE: kernel/trace/trace_functions_graph.c:990:
+	seq_printf(s, "#%.*s||| / _-=> lock-depth      \n", size, spaces);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3174: FILE: kernel/trace/trace_functions_graph.c:991:
+	seq_printf(s, "#%.*s|||| /                     \n", size, spaces);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3186: FILE: kernel/trace/trace_functions_graph.c:1002:
+	seq_printf(s, "#");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3191: FILE: kernel/trace/trace_functions_graph.c:1006:
+		seq_printf(s, " CPU");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3194: FILE: kernel/trace/trace_functions_graph.c:1008:
+		seq_printf(s, "  TASK/PID       ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3196: FILE: kernel/trace/trace_functions_graph.c:1010:
+		seq_printf(s, "|||||");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3203: FILE: kernel/trace/trace_functions_graph.c:1016:
+	seq_printf(s, "#");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3208: FILE: kernel/trace/trace_functions_graph.c:1020:
+		seq_printf(s, " |  ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3211: FILE: kernel/trace/trace_functions_graph.c:1022:
+		seq_printf(s, "   |    |        ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3213: FILE: kernel/trace/trace_functions_graph.c:1024:
+		seq_printf(s, "|||||");

WARNING:SPLIT_STRING: quoted string split across lines
#3504: FILE: kernel/trace/trace_sched_wakeup.c:291:
+		pr_info("wakeup trace: Couldn't activate tracepoint"
+			" probe to kernel_sched_migrate_task\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 151 errors, 64 warnings, 68 checks, 2985 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000070811.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
