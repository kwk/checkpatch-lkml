WARNING:TYPO_SPELLING: 'technics' may be misspelled - perhaps 'techniques'?
#39: 
provides a set of general mount options, borrowing technics used
                                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#189: FILE: Documentation/Smack.txt:6:
+Smack is the the Simplified Mandatory Access Control Kernel.

WARNING:REPEATED_WORD: Possible repeated word: 'Secret'
#450: FILE: Documentation/Smack.txt:267:
+	Top Secret Secret     rx

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#735: FILE: security/smack/smack_access.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#865: FILE: security/smack/smack_access.c:131:
+	for (sp = smack_list; sp != NULL; sp = sp->smk_next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#929: FILE: security/smack/smack_access.c:195:
+		if (found)
[...]
+		else if (i >= len || string[i] > '~' || string[i] <= ' ' ||
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#935: FILE: security/smack/smack_access.c:201:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#944: FILE: security/smack/smack_access.c:210:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#948: FILE: security/smack/smack_access.c:214:
+	if (skp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*skp)...) over kzalloc(sizeof(struct smack_known)...)
#949: FILE: security/smack/smack_access.c:215:
+		skp = kzalloc(sizeof(struct smack_known), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#950: FILE: security/smack/smack_access.c:216:
+		if (skp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#983: FILE: security/smack/smack_access.c:249:
+	if (skp == NULL)

WARNING:TYPO_SPELLING: 'appropraite' may be misspelled - perhaps 'appropriate'?
#992: FILE: security/smack/smack_access.c:258:
+ * Returns a pointer to the appropraite Smack label if there is one,
                             ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#999: FILE: security/smack/smack_access.c:265:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#1021: FILE: security/smack/smack_access.c:287:
+	for (skp = smack_known; skp != NULL; skp = skp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#1048: FILE: security/smack/smack_access.c:314:
+	for (kp = smack_known; final == NULL && kp != NULL; kp = kp->smk_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kp"
#1048: FILE: security/smack/smack_access.c:314:
+	for (kp = smack_known; final == NULL && kp != NULL; kp = kp->smk_next) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->smk_cipso"
#1049: FILE: security/smack/smack_access.c:315:
+		if (kp->smk_cipso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#1060: FILE: security/smack/smack_access.c:326:
+	if (final == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#1064: FILE: security/smack/smack_access.c:330:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "kp"
#1077: FILE: security/smack/smack_access.c:343:
+	for (kp = smack_known; kp != NULL; kp = kp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp"
#1082: FILE: security/smack/smack_access.c:348:
+	if (kp == NULL || kp->smk_cipso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->smk_cipso"
#1082: FILE: security/smack/smack_access.c:348:
+	if (kp == NULL || kp->smk_cipso == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1092: FILE: security/smack/smackfs.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1096: FILE: security/smack/smackfs.c:5:
+ *  ^Iit under the terms of the GNU General Public License as published by$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1100: FILE: security/smack/smackfs.c:9:
+ * ^ICasey Schaufler <casey@schaufler-ca.com>$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: security/smack/smackfs.c:10:
+ * ^IAhmed S. Darwish <darwish.07@gmail.com>$

CHECK:SPACING: No space is necessary after a cast
#1186: FILE: security/smack/smackfs.c:95:
+	struct smk_list_entry *skp = ((struct smk_list_entry *) v)->smk_next;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#1188: FILE: security/smack/smackfs.c:97:
+	if (skp == NULL)

CHECK:SPACING: No space is necessary after a cast
#1196: FILE: security/smack/smackfs.c:105:
+	struct smk_list_entry *slp = (struct smk_list_entry *) v;

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1225: FILE: security/smack/smackfs.c:134:
+static struct seq_operations load_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sp"
#1285: FILE: security/smack/smackfs.c:194:
+	for (sp = smack_list; sp != NULL; sp = sp->smk_next)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#1292: FILE: security/smack/smackfs.c:201:
+	if (sp == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*newp)...) over kzalloc(sizeof(struct smk_list_entry)...)
#1293: FILE: security/smack/smackfs.c:202:
+		newp = kzalloc(sizeof(struct smk_list_entry), GFP_KERNEL);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1302: FILE: security/smack/smackfs.c:211:
+	return;
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1306: FILE: security/smack/smackfs.c:215:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1343: FILE: security/smack/smackfs.c:252:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule.smk_subject"
#1352: FILE: security/smack/smackfs.c:261:
+	if (rule.smk_subject == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule.smk_object"
#1356: FILE: security/smack/smackfs.c:265:
+	if (rule.smk_object == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1432: FILE: security/smack/smackfs.c:341:
+		printk(KERN_WARNING "%s:%d remove rc = %d\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*doip)...) over kmalloc(sizeof(struct cipso_v4_doi)...)
#1435: FILE: security/smack/smackfs.c:344:
+	doip = kmalloc(sizeof(struct cipso_v4_doi), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doip"
#1436: FILE: security/smack/smackfs.c:345:
+	if (doip == NULL)

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1437: FILE: security/smack/smackfs.c:346:
+	if (doip == NULL)
+		panic("smack:  Failed to initialize cipso DOI.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1447: FILE: security/smack/smackfs.c:356:
+		printk(KERN_WARNING "%s:%d add rc = %d\n",

CHECK:SPACING: No space is necessary after a cast
#1465: FILE: security/smack/smackfs.c:374:
+	struct smack_known *skp = ((struct smack_known *) v)->smk_next;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "skp"
#1470: FILE: security/smack/smackfs.c:379:
+	while (skp != NULL && !skp->smk_cipso)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#1473: FILE: security/smack/smackfs.c:382:
+	if (skp == NULL)

CHECK:SPACING: No space is necessary after a cast
#1485: FILE: security/smack/smackfs.c:394:
+	struct smack_known *skp = (struct smack_known *) v;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#1493: FILE: security/smack/smackfs.c:402:
+	if (scp == NULL)

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1518: FILE: security/smack/smackfs.c:427:
+static struct seq_operations cipso_seq_ops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1540: FILE: security/smack/smackfs.c:449:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#1576: FILE: security/smack/smackfs.c:485:
+	if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp"
#1593: FILE: security/smack/smackfs.c:502:
+	if (skp == NULL)

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1596: FILE: security/smack/smackfs.c:505:
+	rule += SMK_LABELLEN;;

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1597: FILE: security/smack/smackfs.c:506:
+	ret = sscanf(rule, "%d", &maplevel);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1602: FILE: security/smack/smackfs.c:511:
+	ret = sscanf(rule, "%d", &catlen);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1613: FILE: security/smack/smackfs.c:522:
+		ret = sscanf(rule, "%d", &cat);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skp->smk_cipso"
#1620: FILE: security/smack/smackfs.c:529:
+	if (skp->smk_cipso == NULL) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*scp)...) over kzalloc(sizeof(struct smack_cipso)...)
#1621: FILE: security/smack/smackfs.c:530:
+		scp = kzalloc(sizeof(struct smack_cipso), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#1622: FILE: security/smack/smackfs.c:531:
+		if (scp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!scp"
#1630: FILE: security/smack/smackfs.c:539:
+	if (scp == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1658: FILE: security/smack/smackfs.c:567:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1665: FILE: security/smack/smackfs.c:574:
+static ssize_t smk_read_doi(struct file *filp, char __user *buf,
                                          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1682: FILE: security/smack/smackfs.c:591:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1706: FILE: security/smack/smackfs.c:615:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1723: FILE: security/smack/smackfs.c:632:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1730: FILE: security/smack/smackfs.c:639:
+static ssize_t smk_read_direct(struct file *filp, char __user *buf,
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1747: FILE: security/smack/smackfs.c:656:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#1771: FILE: security/smack/smackfs.c:680:
+	if (sscanf(temp, "%d", &i) != 1)
+		return -EINVAL;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1786: FILE: security/smack/smackfs.c:695:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1793: FILE: security/smack/smackfs.c:702:
+static ssize_t smk_read_ambient(struct file *filp, char __user *buf,
                                              ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1828: FILE: security/smack/smackfs.c:737:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!smack"
#1851: FILE: security/smack/smackfs.c:760:
+	if (smack == NULL)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1885: FILE: security/smack/smackfs.c:794:
+ * @filp: file pointer, not actually used
     ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1892: FILE: security/smack/smackfs.c:801:
+static ssize_t smk_read_nltype(struct file *filp, char __user *buf,
                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1920: FILE: security/smack/smackfs.c:829:
+ * @filp: file pointer, not actually used
     ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1945: FILE: security/smack/smackfs.c:854:
+	if (cp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#1948: FILE: security/smack/smackfs.c:857:
+	if (cp != NULL)

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1985: FILE: security/smack/smackfs.c:894:
+		[SMK_LOAD]	=
+			{"load", &smk_load_ops, S_IRUGO|S_IWUSR},

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1985: FILE: security/smack/smackfs.c:894:
+			{"load", &smk_load_ops, S_IRUGO|S_IWUSR},
 			                               ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1985: FILE: security/smack/smackfs.c:894:
+			{"load", &smk_load_ops, S_IRUGO|S_IWUSR},

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1987: FILE: security/smack/smackfs.c:896:
+		[SMK_CIPSO]	=
+			{"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1987: FILE: security/smack/smackfs.c:896:
+			{"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},
 			                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1987: FILE: security/smack/smackfs.c:896:
+			{"cipso", &smk_cipso_ops, S_IRUGO|S_IWUSR},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1989: FILE: security/smack/smackfs.c:898:
+		[SMK_DOI]	=
+			{"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1989: FILE: security/smack/smackfs.c:898:
+			{"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},
 			                             ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1989: FILE: security/smack/smackfs.c:898:
+			{"doi", &smk_doi_ops, S_IRUGO|S_IWUSR},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1991: FILE: security/smack/smackfs.c:900:
+		[SMK_DIRECT]	=
+			{"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1991: FILE: security/smack/smackfs.c:900:
+			{"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},
 			                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1991: FILE: security/smack/smackfs.c:900:
+			{"direct", &smk_direct_ops, S_IRUGO|S_IWUSR},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1993: FILE: security/smack/smackfs.c:902:
+		[SMK_AMBIENT]	=
+			{"ambient", &smk_ambient_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1993: FILE: security/smack/smackfs.c:902:
+			{"ambient", &smk_ambient_ops, S_IRUGO|S_IWUSR},
 			                                     ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1993: FILE: security/smack/smackfs.c:902:
+			{"ambient", &smk_ambient_ops, S_IRUGO|S_IWUSR},

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1995: FILE: security/smack/smackfs.c:904:
+		[SMK_NLTYPE]	=
+			{"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1995: FILE: security/smack/smackfs.c:904:
+			{"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},
 			                                   ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1995: FILE: security/smack/smackfs.c:904:
+			{"nltype", &smk_nltype_ops, S_IRUGO|S_IWUSR},

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2001: FILE: security/smack/smackfs.c:910:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2002: FILE: security/smack/smackfs.c:911:
+		printk(KERN_ERR "%s failed %d while creating inodes\n",
+			__func__, rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2054: FILE: security/smack/smackfs.c:963:
+			printk(KERN_ERR "smackfs:  could not mount!\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#2066: FILE: security/smack/smackfs.c:975:
+__initcall(init_smk_fs);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2071: FILE: security/smack/smack.h:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2097: FILE: security/smack/smack.h:27:
+#define SMK_LABELLEN	(SMK_MAXLEN+1)
                     	           ^

WARNING:TYPO_SPELLING: 'chuncks' may be misspelled - perhaps 'chunks'?
#2162: FILE: security/smack/smack.h:92:
+ * not necessary to keep allocating tiny chuncks of memory
                                          ^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2203: FILE: security/smack/smack.h:133:
+#define XATTR_NAME_SMACK	XATTR_SECURITY_PREFIX XATTR_SMACK_SUFFIX

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2245: FILE: security/smack/smack.h:175:
+struct inode_smack *new_inode_smack(char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2250: FILE: security/smack/smack.h:180:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2250: FILE: security/smack/smack.h:180:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2250: FILE: security/smack/smack.h:180:
+int smk_access(char *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2251: FILE: security/smack/smack.h:181:
+int smk_curacc(char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2251: FILE: security/smack/smack.h:181:
+int smk_curacc(char *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2252: FILE: security/smack/smack.h:182:
+int smack_to_cipso(const char *, struct smack_cipso *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct smack_cipso *' should also have an identifier name
#2252: FILE: security/smack/smack.h:182:
+int smack_to_cipso(const char *, struct smack_cipso *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#2253: FILE: security/smack/smack.h:183:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2253: FILE: security/smack/smack.h:183:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#2253: FILE: security/smack/smack.h:183:
+void smack_from_cipso(u32, char *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const u32' should also have an identifier name
#2254: FILE: security/smack/smack.h:184:
+char *smack_from_secid(const u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2255: FILE: security/smack/smack.h:185:
+char *smk_import(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2255: FILE: security/smack/smack.h:185:
+char *smk_import(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2256: FILE: security/smack/smack.h:186:
+struct smack_known *smk_import_entry(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#2256: FILE: security/smack/smack.h:186:
+struct smack_known *smk_import_entry(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#2257: FILE: security/smack/smack.h:187:
+u32 smack_to_secid(const char *);

WARNING:TYPO_SPELLING: 'Stricly' may be misspelled - perhaps 'Strictly'?
#2280: FILE: security/smack/smack.h:210:
+ * Stricly for CIPSO level manipulation.
    ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2297: FILE: security/smack/smack.h:227:
+	struct inode_smack *sip = isp->i_security;
+	return sip->smk_inode;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2305: FILE: security/smack/smack_lsm.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ip->i_op->getxattr"
#2356: FILE: security/smack/smack_lsm.c:52:
+	if (ip->i_op->getxattr == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*isp)...) over kzalloc(sizeof(struct inode_smack)...)
#2376: FILE: security/smack/smack_lsm.c:72:
+	isp = kzalloc(sizeof(struct inode_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#2377: FILE: security/smack/smack_lsm.c:73:
+	if (isp == NULL)

WARNING:TABSTOP: Statements should start on a tabstop
#2436: FILE: security/smack/smack_lsm.c:132:
+	 if (sp != smack_known_floor.smk_known)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2442: FILE: security/smack/smack_lsm.c:138:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbsp)...) over kzalloc(sizeof(struct superblock_smack)...)
#2457: FILE: security/smack/smack_lsm.c:153:
+	sbsp = kzalloc(sizeof(struct superblock_smack), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sbsp"
#2459: FILE: security/smack/smack_lsm.c:155:
+	if (sbsp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!otheropts"
#2508: FILE: security/smack/smack_lsm.c:204:
+	if (otheropts == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2511: FILE: security/smack/smack_lsm.c:207:
+	for (cp = orig, commap = orig; commap != NULL; cp = commap + 1) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2524: FILE: security/smack/smack_lsm.c:220:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op"
#2563: FILE: security/smack/smack_lsm.c:259:
+	for (op = data; op != NULL; op = commap) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "commap"
#2565: FILE: security/smack/smack_lsm.c:261:
+		if (commap != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2571: FILE: security/smack/smack_lsm.c:267:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2576: FILE: security/smack/smack_lsm.c:272:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2582: FILE: security/smack/smack_lsm.c:278:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2587: FILE: security/smack/smack_lsm.c:283:
+			if (nsp != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!isp"
#2596: FILE: security/smack/smack_lsm.c:292:
+	if (isp == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2621: FILE: security/smack/smack_lsm.c:317:
+ * @nd: mount point
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2629: FILE: security/smack/smack_lsm.c:325:
+static int smack_sb_mount(char *dev_name, struct nameidata *nd,
                                                             ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_security"
#2667: FILE: security/smack/smack_lsm.c:363:
+	if (inode->i_security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!name"
#2701: FILE: security/smack/smack_lsm.c:397:
+		if (*name == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#2707: FILE: security/smack/smack_lsm.c:403:
+		if (*value == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_dentry->d_inode"
#2734: FILE: security/smack/smack_lsm.c:430:
+	if (rc == 0 && new_dentry->d_inode != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_dentry->d_inode"
#2816: FILE: security/smack/smack_lsm.c:512:
+	if (rc == 0 && new_dentry->d_inode != NULL) {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2828: FILE: security/smack/smack_lsm.c:524:
+ * @nd: unused
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2835: FILE: security/smack/smack_lsm.c:531:
+				  struct nameidata *nd)
 				                    ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2892: FILE: security/smack/smack_lsm.c:588:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "nsp"
#2931: FILE: security/smack/smack_lsm.c:627:
+	if (nsp != NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#2937: FILE: security/smack/smack_lsm.c:633:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2963: FILE: security/smack/smack_lsm.c:659:
+	if (strcmp(name, XATTR_NAME_SMACK) == 0 &&
+		!__capable(current, CAP_MAC_OVERRIDE))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#3006: FILE: security/smack/smack_lsm.c:702:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#3047: FILE: security/smack/smack_lsm.c:743:
+	if (value == NULL || size > SMK_LABELLEN)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sp"
#3051: FILE: security/smack/smack_lsm.c:747:
+	if (sp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sock"
#3067: FILE: security/smack/smack_lsm.c:763:
+	if (sock == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buffer"
#3094: FILE: security/smack/smack_lsm.c:790:
+	if (buffer != NULL && len <= buffer_size) {

WARNING:TYPO_SPELLING: 'immutible' may be misspelled - perhaps 'immutable'?
#3294: FILE: security/smack/smack_lsm.c:990:
+ * points to an immutible list. No alloc required.
                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'immutible' may be misspelled - perhaps 'immutable'?
#3311: FILE: security/smack/smack_lsm.c:1007:
+ * points to an immutible list. The blobs never go away.
                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'subjet' may be misspelled - perhaps 'subject'?
#3494: FILE: security/smack/smack_lsm.c:1190:
+	 * This breaks the strict subjet/object access
 	                          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3500: FILE: security/smack/smack_lsm.c:1196:
+	if (__capable(current, CAP_MAC_OVERRIDE) ||
+		__capable(p, CAP_MAC_OVERRIDE))

WARNING:LINE_SPACING: Missing a blank line after declarations
#3516: FILE: security/smack/smack_lsm.c:1212:
+	struct inode_smack *isp = inode->i_security;
+	isp->smk_inode = p->security;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ssp)...) over kzalloc(sizeof(struct socket_smack)...)
#3538: FILE: security/smack/smack_lsm.c:1234:
+	ssp = kzalloc(sizeof(struct socket_smack), priority);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ssp"
#3539: FILE: security/smack/smack_lsm.c:1235:
+	if (ssp == NULL)

WARNING:TYPO_SPELLING: 'Appologies' may be misspelled - perhaps 'Apologies'?
#3601: FILE: security/smack/smack_lsm.c:1297:
+ * Appologies to the TSIG group in general and GW in particular.
    ^^^^^^^^^^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#3685: FILE: security/smack/smack_lsm.c:1381:
+	if (flags & S_IRUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#3687: FILE: security/smack/smack_lsm.c:1383:
+	if (flags & S_IWUGO)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUGO' are not preferred. Consider using octal permissions '0111'.
#3689: FILE: security/smack/smack_lsm.c:1385:
+	if (flags & S_IXUGO)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3933: FILE: security/smack/smack_lsm.c:1629:
+			   unsigned nsops, int alter)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4057: FILE: security/smack/smack_lsm.c:1753:
+static int smack_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
+			struct task_struct *target, long type, int mode)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode"
#4097: FILE: security/smack/smack_lsm.c:1793:
+	if (inode == NULL)

WARNING:TYPO_SPELLING: 'embarassing' may be misspelled - perhaps 'embarrassing'?
#4127: FILE: security/smack/smack_lsm.c:1823:
+		 * Casey says that it's a little embarassing
 		                                 ^^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!inode->i_op->getxattr"
#4184: FILE: security/smack/smack_lsm.c:1880:
+		if (inode->i_op->getxattr == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!opt_dentry"
#4189: FILE: security/smack/smack_lsm.c:1885:
+		if (opt_dentry == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#4191: FILE: security/smack/smack_lsm.c:1887:
+			if (dp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dp"
#4195: FILE: security/smack/smack_lsm.c:1891:
+			if (dp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fetched"
#4200: FILE: security/smack/smack_lsm.c:1896:
+		if (fetched != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!final"
#4207: FILE: security/smack/smack_lsm.c:1903:
+	if (final == NULL)

WARNING:RETURN_VOID: void function return statements are not generally useful
#4217: FILE: security/smack/smack_lsm.c:1913:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#4238: FILE: security/smack/smack_lsm.c:1934:
+	if (cp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#4273: FILE: security/smack/smack_lsm.c:1969:
+	if (value == NULL || size == 0 || size >= SMK_LABELLEN)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newsmack"
#4280: FILE: security/smack/smack_lsm.c:1976:
+	if (newsmack == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4323: FILE: security/smack/smack_lsm.c:2019:
+ * ^Ipair to smack$

WARNING:RETURN_VOID: void function return statements are not generally useful
#4371: FILE: security/smack/smack_lsm.c:2067:
+	return;
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4421: FILE: security/smack/smack_lsm.c:2117:
+					  int __user *optlen, unsigned len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4441: FILE: security/smack/smack_lsm.c:2137:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sock"
#4464: FILE: security/smack/smack_lsm.c:2160:
+	if (sock != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sk"
#4508: FILE: security/smack/smack_lsm.c:2204:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#4508: FILE: security/smack/smack_lsm.c:2204:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent->sk"
#4508: FILE: security/smack/smack_lsm.c:2204:
+	if (sk == NULL || parent == NULL || parent->sk == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#4550: FILE: security/smack/smack_lsm.c:2246:
+	if (skb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp"
#4620: FILE: security/smack/smack_lsm.c:2316:
+	if (keyp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keyp->security"
#4626: FILE: security/smack/smack_lsm.c:2322:
+	if (keyp->security == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!context->security"
#4631: FILE: security/smack/smack_lsm.c:2327:
+	if (context->security == NULL)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4668: FILE: security/smack/smack_lsm.c:2364:
+^I.ptrace = ^I^I^Ismack_ptrace,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4669: FILE: security/smack/smack_lsm.c:2365:
+^I.capget = ^I^I^Icap_capget,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4670: FILE: security/smack/smack_lsm.c:2366:
+^I.capset_check = ^I^Icap_capset_check,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4671: FILE: security/smack/smack_lsm.c:2367:
+^I.capset_set = ^I^I^Icap_capset_set,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4672: FILE: security/smack/smack_lsm.c:2368:
+^I.capable = ^I^I^Icap_capable,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4673: FILE: security/smack/smack_lsm.c:2369:
+^I.syslog = ^I^I^Ismack_syslog,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4674: FILE: security/smack/smack_lsm.c:2370:
+^I.settime = ^I^I^Icap_settime,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4675: FILE: security/smack/smack_lsm.c:2371:
+^I.vm_enough_memory = ^I^Icap_vm_enough_memory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4677: FILE: security/smack/smack_lsm.c:2373:
+^I.bprm_apply_creds = ^I^Icap_bprm_apply_creds,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4678: FILE: security/smack/smack_lsm.c:2374:
+^I.bprm_set_security = ^I^Icap_bprm_set_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4679: FILE: security/smack/smack_lsm.c:2375:
+^I.bprm_secureexec = ^I^Icap_bprm_secureexec,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4681: FILE: security/smack/smack_lsm.c:2377:
+^I.sb_alloc_security = ^I^Ismack_sb_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4682: FILE: security/smack/smack_lsm.c:2378:
+^I.sb_free_security = ^I^Ismack_sb_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4683: FILE: security/smack/smack_lsm.c:2379:
+^I.sb_copy_data = ^I^Ismack_sb_copy_data,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4684: FILE: security/smack/smack_lsm.c:2380:
+^I.sb_kern_mount = ^I^Ismack_sb_kern_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4685: FILE: security/smack/smack_lsm.c:2381:
+^I.sb_statfs = ^I^I^Ismack_sb_statfs,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4686: FILE: security/smack/smack_lsm.c:2382:
+^I.sb_mount = ^I^I^Ismack_sb_mount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4687: FILE: security/smack/smack_lsm.c:2383:
+^I.sb_umount = ^I^I^Ismack_sb_umount,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4689: FILE: security/smack/smack_lsm.c:2385:
+^I.inode_alloc_security = ^Ismack_inode_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4690: FILE: security/smack/smack_lsm.c:2386:
+^I.inode_free_security = ^I^Ismack_inode_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4691: FILE: security/smack/smack_lsm.c:2387:
+^I.inode_init_security = ^I^Ismack_inode_init_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4692: FILE: security/smack/smack_lsm.c:2388:
+^I.inode_link = ^I^I^Ismack_inode_link,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4693: FILE: security/smack/smack_lsm.c:2389:
+^I.inode_unlink = ^I^Ismack_inode_unlink,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4694: FILE: security/smack/smack_lsm.c:2390:
+^I.inode_rmdir = ^I^I^Ismack_inode_rmdir,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4695: FILE: security/smack/smack_lsm.c:2391:
+^I.inode_rename = ^I^Ismack_inode_rename,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4696: FILE: security/smack/smack_lsm.c:2392:
+^I.inode_permission = ^I^Ismack_inode_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4697: FILE: security/smack/smack_lsm.c:2393:
+^I.inode_setattr = ^I^Ismack_inode_setattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4698: FILE: security/smack/smack_lsm.c:2394:
+^I.inode_getattr = ^I^Ismack_inode_getattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4699: FILE: security/smack/smack_lsm.c:2395:
+^I.inode_setxattr = ^I^Ismack_inode_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4700: FILE: security/smack/smack_lsm.c:2396:
+^I.inode_post_setxattr = ^I^Ismack_inode_post_setxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4701: FILE: security/smack/smack_lsm.c:2397:
+^I.inode_getxattr = ^I^Ismack_inode_getxattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4702: FILE: security/smack/smack_lsm.c:2398:
+^I.inode_removexattr = ^I^Ismack_inode_removexattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4703: FILE: security/smack/smack_lsm.c:2399:
+^I.inode_getsecurity = ^I^Ismack_inode_getsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4704: FILE: security/smack/smack_lsm.c:2400:
+^I.inode_setsecurity = ^I^Ismack_inode_setsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4705: FILE: security/smack/smack_lsm.c:2401:
+^I.inode_listsecurity = ^I^Ismack_inode_listsecurity,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4707: FILE: security/smack/smack_lsm.c:2403:
+^I.file_permission = ^I^Ismack_file_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4708: FILE: security/smack/smack_lsm.c:2404:
+^I.file_alloc_security = ^I^Ismack_file_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4709: FILE: security/smack/smack_lsm.c:2405:
+^I.file_free_security = ^I^Ismack_file_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4710: FILE: security/smack/smack_lsm.c:2406:
+^I.file_ioctl = ^I^I^Ismack_file_ioctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4711: FILE: security/smack/smack_lsm.c:2407:
+^I.file_lock = ^I^I^Ismack_file_lock,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4712: FILE: security/smack/smack_lsm.c:2408:
+^I.file_fcntl = ^I^I^Ismack_file_fcntl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4713: FILE: security/smack/smack_lsm.c:2409:
+^I.file_set_fowner = ^I^Ismack_file_set_fowner,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4714: FILE: security/smack/smack_lsm.c:2410:
+^I.file_send_sigiotask = ^I^Ismack_file_send_sigiotask,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4715: FILE: security/smack/smack_lsm.c:2411:
+^I.file_receive = ^I^Ismack_file_receive,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4717: FILE: security/smack/smack_lsm.c:2413:
+^I.task_alloc_security = ^I^Ismack_task_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4718: FILE: security/smack/smack_lsm.c:2414:
+^I.task_free_security = ^I^Ismack_task_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4720: FILE: security/smack/smack_lsm.c:2416:
+^I.task_setpgid = ^I^Ismack_task_setpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4721: FILE: security/smack/smack_lsm.c:2417:
+^I.task_getpgid = ^I^Ismack_task_getpgid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4722: FILE: security/smack/smack_lsm.c:2418:
+^I.task_getsid = ^I^I^Ismack_task_getsid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4723: FILE: security/smack/smack_lsm.c:2419:
+^I.task_getsecid = ^I^Ismack_task_getsecid,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4724: FILE: security/smack/smack_lsm.c:2420:
+^I.task_setnice = ^I^Ismack_task_setnice,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4725: FILE: security/smack/smack_lsm.c:2421:
+^I.task_setioprio = ^I^Ismack_task_setioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4726: FILE: security/smack/smack_lsm.c:2422:
+^I.task_getioprio = ^I^Ismack_task_getioprio,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4727: FILE: security/smack/smack_lsm.c:2423:
+^I.task_setscheduler = ^I^Ismack_task_setscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4728: FILE: security/smack/smack_lsm.c:2424:
+^I.task_getscheduler = ^I^Ismack_task_getscheduler,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4729: FILE: security/smack/smack_lsm.c:2425:
+^I.task_movememory = ^I^Ismack_task_movememory,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4730: FILE: security/smack/smack_lsm.c:2426:
+^I.task_kill = ^I^I^Ismack_task_kill,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4731: FILE: security/smack/smack_lsm.c:2427:
+^I.task_wait = ^I^I^Ismack_task_wait,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4733: FILE: security/smack/smack_lsm.c:2429:
+^I.task_to_inode = ^I^Ismack_task_to_inode,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4735: FILE: security/smack/smack_lsm.c:2431:
+^I.ipc_permission = ^I^Ismack_ipc_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4737: FILE: security/smack/smack_lsm.c:2433:
+^I.msg_msg_alloc_security = ^Ismack_msg_msg_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4738: FILE: security/smack/smack_lsm.c:2434:
+^I.msg_msg_free_security = ^Ismack_msg_msg_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4740: FILE: security/smack/smack_lsm.c:2436:
+^I.msg_queue_alloc_security = ^Ismack_msg_queue_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4741: FILE: security/smack/smack_lsm.c:2437:
+^I.msg_queue_free_security = ^Ismack_msg_queue_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4742: FILE: security/smack/smack_lsm.c:2438:
+^I.msg_queue_associate = ^I^Ismack_msg_queue_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4743: FILE: security/smack/smack_lsm.c:2439:
+^I.msg_queue_msgctl = ^I^Ismack_msg_queue_msgctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4744: FILE: security/smack/smack_lsm.c:2440:
+^I.msg_queue_msgsnd = ^I^Ismack_msg_queue_msgsnd,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4745: FILE: security/smack/smack_lsm.c:2441:
+^I.msg_queue_msgrcv = ^I^Ismack_msg_queue_msgrcv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4747: FILE: security/smack/smack_lsm.c:2443:
+^I.shm_alloc_security = ^I^Ismack_shm_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4748: FILE: security/smack/smack_lsm.c:2444:
+^I.shm_free_security = ^I^Ismack_shm_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4749: FILE: security/smack/smack_lsm.c:2445:
+^I.shm_associate = ^I^Ismack_shm_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4750: FILE: security/smack/smack_lsm.c:2446:
+^I.shm_shmctl = ^I^I^Ismack_shm_shmctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4751: FILE: security/smack/smack_lsm.c:2447:
+^I.shm_shmat = ^I^I^Ismack_shm_shmat,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4753: FILE: security/smack/smack_lsm.c:2449:
+^I.sem_alloc_security = ^I^Ismack_sem_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4754: FILE: security/smack/smack_lsm.c:2450:
+^I.sem_free_security = ^I^Ismack_sem_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4755: FILE: security/smack/smack_lsm.c:2451:
+^I.sem_associate = ^I^Ismack_sem_associate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4756: FILE: security/smack/smack_lsm.c:2452:
+^I.sem_semctl = ^I^I^Ismack_sem_semctl,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4757: FILE: security/smack/smack_lsm.c:2453:
+^I.sem_semop = ^I^I^Ismack_sem_semop,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4760: FILE: security/smack/smack_lsm.c:2456:
+^I.netlink_recv = ^I^Icap_netlink_recv,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4762: FILE: security/smack/smack_lsm.c:2458:
+^I.d_instantiate = ^I^Ismack_d_instantiate,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4764: FILE: security/smack/smack_lsm.c:2460:
+^I.getprocattr = ^I^I^Ismack_getprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4765: FILE: security/smack/smack_lsm.c:2461:
+^I.setprocattr = ^I^I^Ismack_setprocattr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4767: FILE: security/smack/smack_lsm.c:2463:
+^I.unix_stream_connect = ^I^Ismack_unix_stream_connect,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4768: FILE: security/smack/smack_lsm.c:2464:
+^I.unix_may_send = ^I^Ismack_unix_may_send,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4770: FILE: security/smack/smack_lsm.c:2466:
+^I.socket_post_create = ^I^Ismack_socket_post_create,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4771: FILE: security/smack/smack_lsm.c:2467:
+^I.socket_sock_rcv_skb = ^I^Ismack_socket_sock_rcv_skb,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4774: FILE: security/smack/smack_lsm.c:2470:
+^I.sk_alloc_security = ^I^Ismack_sk_alloc_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4775: FILE: security/smack/smack_lsm.c:2471:
+^I.sk_free_security = ^I^Ismack_sk_free_security,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4776: FILE: security/smack/smack_lsm.c:2472:
+^I.sock_graft = ^I^I^Ismack_sock_graft,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4777: FILE: security/smack/smack_lsm.c:2473:
+^I.inet_conn_request = ^I^Ismack_inet_conn_request,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4780: FILE: security/smack/smack_lsm.c:2476:
+^I.key_alloc = ^I^I^Ismack_key_alloc,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4781: FILE: security/smack/smack_lsm.c:2477:
+^I.key_free = ^I^I^Ismack_key_free,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4782: FILE: security/smack/smack_lsm.c:2478:
+^I.key_permission = ^I^Ismack_key_permission,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4784: FILE: security/smack/smack_lsm.c:2480:
+^I.secid_to_secctx = ^I^Ismack_secid_to_secctx,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4785: FILE: security/smack/smack_lsm.c:2481:
+^I.release_secctx = ^I^Ismack_release_secctx,$

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#4788: FILE: security/smack/smack_lsm.c:2484:
+DEFINE_MUTEX(smack_list_lock);

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#4789: FILE: security/smack/smack_lsm.c:2485:
+DEFINE_MUTEX(smack_known_lock);

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#4790: FILE: security/smack/smack_lsm.c:2486:
+DEFINE_MUTEX(smack_cipso_lock);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4799: FILE: security/smack/smack_lsm.c:2495:
+	printk(KERN_INFO "Smack:  Initializing.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355717.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 183 warnings, 105 checks, 4618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355717.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
