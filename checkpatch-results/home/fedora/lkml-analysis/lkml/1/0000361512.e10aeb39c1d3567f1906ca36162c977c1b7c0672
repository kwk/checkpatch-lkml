CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#81: FILE: security/smack/smack.h:227:
+#define swap(x, y, type)      \
+do {			      \
+	type tmp = x;	      \
+	x = y;		      \
+	y = tmp;	      \
+} while (0);		      \
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#81: FILE: security/smack/smack.h:227:
+#define swap(x, y, type)      \
+do {			      \
+	type tmp = x;	      \
+	x = y;		      \
+	y = tmp;	      \
+} while (0);		      \
+

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#81: FILE: security/smack/smack.h:227:
+#define swap(x, y, type)      \
+do {			      \
+	type tmp = x;	      \
+	x = y;		      \
+	y = tmp;	      \
+} while (0);		      \
+

do {} while(0) macros should not have a trailing semicolon.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#136: FILE: security/smack/smackfs.c:102:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*load_state)...) over kzalloc(sizeof(struct smack_load_state)...)
#160: FILE: security/smack/smackfs.c:180:
+	load_state = kzalloc(sizeof(struct smack_load_state), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 65)
#303: FILE: security/smack/smackfs.c:350:
+			else if (data[i] == '-')
+				/* No-Op, '-' is a placeholder */;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule->smk_subject"
#317: FILE: security/smack/smackfs.c:362:
+			if (rule->smk_subject == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rule->smk_object"
#321: FILE: security/smack/smackfs.c:366:
+			if (rule->smk_object == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361512.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 6 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361512.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
