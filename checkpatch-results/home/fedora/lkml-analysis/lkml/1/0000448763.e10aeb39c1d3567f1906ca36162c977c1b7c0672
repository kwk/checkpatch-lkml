WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#63: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:BIT_MACRO: Prefer using the BIT macro
#410: FILE: arch/arm/mach-omap2/pm.c:60:
+#define		AUTO_EXTVOLT	(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#411: FILE: arch/arm/mach-omap2/pm.c:61:
+#define		FORCE_EXTVOLT	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#413: FILE: arch/arm/mach-omap2/pm.c:63:
+#define		MEMRETCTRL	(1 << 8)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#423: FILE: arch/arm/mach-omap2/pm.c:73:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#426: FILE: arch/arm/mach-omap2/pm.c:76:
+#define		AUTOSTAT_MPU	(1 << 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: arch/arm/mach-omap2/pm.c:78:
+#define ^IEN_WKUP^I^I(1 << 4)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#428: FILE: arch/arm/mach-omap2/pm.c:78:
+#define 	EN_WKUP		(1 << 4)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#429: FILE: arch/arm/mach-omap2/pm.c:79:
+#define ^IEN_GFX^I^I(1 << 3)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#429: FILE: arch/arm/mach-omap2/pm.c:79:
+#define 	EN_GFX		(1 << 3)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#430: FILE: arch/arm/mach-omap2/pm.c:80:
+#define ^IEN_DSP^I^I(1 << 2)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#430: FILE: arch/arm/mach-omap2/pm.c:80:
+#define 	EN_DSP		(1 << 2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: arch/arm/mach-omap2/pm.c:81:
+#define ^IEN_MPU^I^I(1 << 1)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#431: FILE: arch/arm/mach-omap2/pm.c:81:
+#define 	EN_MPU		(1 << 1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: arch/arm/mach-omap2/pm.c:82:
+#define ^IEN_CORE^I^I(1 << 0)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#432: FILE: arch/arm/mach-omap2/pm.c:82:
+#define 	EN_CORE		(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#436: FILE: arch/arm/mach-omap2/pm.c:86:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#451: FILE: arch/arm/mach-omap2/pm.c:101:
+#define		AUTOSTAT_DSS	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#452: FILE: arch/arm/mach-omap2/pm.c:102:
+#define		AUTOSTAT_L4	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#453: FILE: arch/arm/mach-omap2/pm.c:103:
+#define		AUTOSTAT_L3	(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: arch/arm/mach-omap2/pm.c:112:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#464: FILE: arch/arm/mach-omap2/pm.c:114:
+#define		AUTOSTAT_GFX	(1 << 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: arch/arm/mach-omap2/pm.c:115:
+#define PM_WKDEP_GFX    ^I0x3c8$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#468: FILE: arch/arm/mach-omap2/pm.c:118:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#473: FILE: arch/arm/mach-omap2/pm.c:123:
+#define ^IEN_GPIOS^I(1 << 2)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#473: FILE: arch/arm/mach-omap2/pm.c:123:
+#define 	EN_GPIOS	(1 << 2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#474: FILE: arch/arm/mach-omap2/pm.c:124:
+#define ^IEN_GPT1^I^I(1 << 0)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#474: FILE: arch/arm/mach-omap2/pm.c:124:
+#define 	EN_GPT1		(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#477: FILE: arch/arm/mach-omap2/pm.c:127:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#484: FILE: arch/arm/mach-omap2/pm.c:134:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#491: FILE: arch/arm/mach-omap2/pm.c:141:
+#define		AUTOSTAT_IVA	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#492: FILE: arch/arm/mach-omap2/pm.c:142:
+#define		AUTOSTAT_DSP	(1 << 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#538: FILE: arch/arm/mach-omap2/pm.c:167:
+        return omap_readl(0x48004010);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: arch/arm/mach-omap2/pm.c:167:
+        return omap_readl(0x48004010);$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#545: FILE: arch/arm/mach-omap2/pm.c:171:
+int omap2_pm_debug = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_iclk"
#602: FILE: arch/arm/mach-omap2/pm.c:219:
+	if (console_iclk == NULL || console_fclk == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_fclk"
#602: FILE: arch/arm/mach-omap2/pm.c:219:
+	if (console_iclk == NULL || console_fclk == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#606: FILE: arch/arm/mach-omap2/pm.c:223:
+		BUG_ON(serial_console_clock_disabled);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#609: FILE: arch/arm/mach-omap2/pm.c:226:
+		if ((int) serial_console_next_disable - (int) omap2_read_32k_sync_counter() >= 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf"
#654: FILE: arch/arm/mach-omap2/pm.c:271:
+	if (conf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_fclk"
#667: FILE: arch/arm/mach-omap2/pm.c:284:
+	if (console_fclk == NULL || console_iclk == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_iclk"
#667: FILE: arch/arm/mach-omap2/pm.c:284:
+	if (console_fclk == NULL || console_iclk == NULL) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#711: FILE: arch/arm/mach-omap2/pm.c:324:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#719: FILE: arch/arm/mach-omap2/pm.c:332:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#725: FILE: arch/arm/mach-omap2/pm.c:338:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#738: FILE: arch/arm/mach-omap2/pm.c:351:
+#if 0

WARNING:IF_1: Consider removing the #if 1 and its #endif
#756: FILE: arch/arm/mach-omap2/pm.c:369:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#780: FILE: arch/arm/mach-omap2/pm.c:392:
+		printk("--- Going to %s %s (next timer after %u ms)\n", s1, s2,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#783: FILE: arch/arm/mach-omap2/pm.c:395:
+		printk("--- Woke up (slept for %u.%03u ms)\n", us / 1000, us % 1000);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#785: FILE: arch/arm/mach-omap2/pm.c:397:
+		printk("%-20s: 0x%08x\n", regs[i].name, regs[i].val);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#806: FILE: arch/arm/mach-omap2/pm.c:410:
+static unsigned short enable_dyn_sleep = 0; /* disabled till drivers are fixed */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#809: FILE: arch/arm/mach-omap2/pm.c:412:
+static ssize_t omap_pm_sleep_while_idle_show(struct subsystem * subsys, char *buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#883: FILE: arch/arm/mach-omap2/pm.c:417:
+static ssize_t omap_pm_sleep_while_idle_store(struct subsystem * subsys,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#884: FILE: arch/arm/mach-omap2/pm.c:418:
+					      const char * buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: arch/arm/mach-omap2/pm.c:422:
+	unsigned short value;
+	if (sscanf(buf, "%hu", &value) != 1 ||

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#935: FILE: arch/arm/mach-omap2/pm.c:422:
+	if (sscanf(buf, "%hu", &value) != 1 ||
+	    (value != 0 && value != 1)) {
+		printk(KERN_ERR "idle_sleep_store: Invalid value\n");
+		return -EINVAL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#937: FILE: arch/arm/mach-omap2/pm.c:424:
+		printk(KERN_ERR "idle_sleep_store: Invalid value\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#954: FILE: arch/arm/mach-omap2/pm.c:440:
+extern struct subsystem power_subsys;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1057: FILE: arch/arm/mach-omap2/pm.c:484:
+	BUG_ON(i < 0);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1061: FILE: arch/arm/mach-omap2/pm.c:488:
+extern void omap2_gpio_resume_after_retention(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1112: FILE: arch/arm/mach-omap2/pm.c:520:
+	 * to sleeping unnecessarily. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1135: FILE: arch/arm/mach-omap2/pm.c:543:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1178: FILE: arch/arm/mach-omap2/pm.c:583:
+	 * seems to cause the I2C block to timeout. Why? Good question. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1183: FILE: arch/arm/mach-omap2/pm.c:588:
+	 * it is in retention mode. */

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#1288: FILE: arch/arm/mach-omap2/pm.c:688:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1374: FILE: arch/arm/mach-omap2/pm.c:793:
+	 * stabilisation */

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1379: FILE: arch/arm/mach-omap2/pm.c:798:
+	l = AUTO_EXTVOLT | SETOFF_LEVEL(1) | MEMRETCTRL | \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1392: FILE: arch/arm/mach-omap2/pm.c:810:
+	printk(KERN_INFO "Power Management for OMAP2 initializing\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1394: FILE: arch/arm/mach-omap2/pm.c:812:
+	printk(KERN_INFO "PRCM revision %d.%d\n", (l >> 4) & 0x0f, l & 0x0f);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1398: FILE: arch/arm/mach-omap2/pm.c:816:
+		printk(KERN_ERR "could not get osc_ck\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1407: FILE: arch/arm/mach-omap2/pm.c:822:
+		printk(KERN_ERR "could not get emul_ck\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sti"
#1422: FILE: arch/arm/mach-omap2/pm.c:837:
+		if (sti != NULL && sti->enable)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1527: FILE: include/asm-arm/arch-omap/pm.h:135:
+extern void omap2_block_sleep(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1528: FILE: include/asm-arm/arch-omap/pm.h:136:
+extern void omap2_allow_sleep(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 35 warnings, 33 checks, 1221 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
