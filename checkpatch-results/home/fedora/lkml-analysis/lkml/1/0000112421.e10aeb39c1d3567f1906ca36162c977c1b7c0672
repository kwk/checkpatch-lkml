WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git irq-for-linus

WARNING:TYPO_SPELLING: 'sucessfull' may be misspelled - perhaps 'successful'?
#135: 
      irq: only update affinity if ->set_affinity() is sucessfull
                                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: arch/ia64/kernel/acpi.c:682:
+	acpi_register_gsi(NULL, fadt->sci_interrupt, ACPI_LEVEL_SENSITIVE,
+				 ACPI_ACTIVE_LOW);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/ia64/kernel/msi_ia64.c:16:
+static int ia64_set_msi_irq_affinity(unsigned int irq,
 				      const cpumask_t *cpu_mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: arch/ia64/sn/kernel/msi_sn.c:155:
+static int sn_set_msi_irq_affinity(unsigned int irq,
 				    const struct cpumask *cpu_mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: arch/mips/include/asm/irq.h:52:
+extern int plat_set_irq_affinity(unsigned int irq,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: arch/mips/include/asm/irq.h:53:
+extern int plat_set_irq_affinity(unsigned int irq,
 				  const struct cpumask *affinity);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#853: FILE: arch/powerpc/sysdev/mpic.h:39:
+extern int mpic_set_affinity(unsigned int irq, const struct cpumask *cpumask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#866: FILE: arch/sparc/kernel/irq_64.c:322:
+static int sun4u_set_affinity(unsigned int virt_irq,
 			       const struct cpumask *mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#880: FILE: arch/sparc/kernel/irq_64.c:383:
+static int sun4v_set_affinity(unsigned int virt_irq,
 			       const struct cpumask *mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: arch/sparc/kernel/irq_64.c:453:
+static int sun4v_virt_set_affinity(unsigned int virt_irq,
 				    const struct cpumask *mask)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1007: FILE: arch/x86/include/asm/apic.h:202:
+extern void enable_IR_x2apic(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1016: FILE: arch/x86/include/asm/apic.h:204:
+extern int get_physical_broadcast(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1018: FILE: arch/x86/include/asm/apic.h:206:
+extern void apic_disable(void);

CHECK:CAMELCASE: Avoid CamelCase: <APIC_EILVTn>
#1050: FILE: arch/x86/include/asm/apicdef.h:122:
+#define APIC_EILVTn(n)	(0x500 + 0x10 * n)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1050: FILE: arch/x86/include/asm/apicdef.h:122:
+#define APIC_EILVTn(n)	(0x500 + 0x10 * n)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1073: FILE: arch/x86/include/asm/cpufeature.h:25:
+#define X86_FEATURE_MCE		(0*32+ 7) /* Machine Check Exception */
                        		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxW)
#1073: FILE: arch/x86/include/asm/cpufeature.h:25:
+#define X86_FEATURE_MCE		(0*32+ 7) /* Machine Check Exception */
                        		     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1118: FILE: arch/x86/include/asm/hw_irq.h:84:
+extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1119: FILE: arch/x86/include/asm/hw_irq.h:85:
+extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin,
+					struct io_apic_irq_attr *irq_attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1149: FILE: arch/x86/include/asm/io_apic.h:160:
+extern int io_apic_set_pci_routing(struct device *dev, int irq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1150: FILE: arch/x86/include/asm/io_apic.h:161:
+extern int io_apic_set_pci_routing(struct device *dev, int irq,
+		 struct io_apic_irq_attr *irq_attr);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dest' - possible side-effects?
#1175: FILE: arch/x86/include/asm/irq_remapping.h:4:
+#define IRTE_DEST(dest) ((x2apic_mode) ? dest : dest << 8)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1212: FILE: arch/x86/include/asm/mpspec.h:78:
+extern int mp_register_gsi(struct device *dev, u32 gsi, int edge_level,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1213: FILE: arch/x86/include/asm/mpspec.h:79:
+extern int mp_register_gsi(struct device *dev, u32 gsi, int edge_level,
+				 int active_high_low);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1355: FILE: arch/x86/kernel/acpi/boot.c:1157:
+static int mp_config_acpi_gsi(struct device *dev, u32 gsi, int trigger,
+			int polarity)

WARNING:SPLIT_STRING: quoted string split across lines
#1428: FILE: arch/x86/kernel/acpi/boot.c:1222:
 		printk(KERN_ERR "Invalid reference to IOAPIC pin "
+		       "%d-%d\n", mp_ioapics[ioapic].apicid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1566: FILE: arch/x86/kernel/apic/apic.c:146:
+		pr_warning("Bios already enabled x2apic, "
+			   "can't enforce nox2apic");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1628: FILE: arch/x86/kernel/apic/apic.c:1344:
+		x2apic_preenabled = x2apic_mode = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#1688: FILE: arch/x86/kernel/apic/apic.c:1384:
+		pr_info("Skipped enabling intr-remap because of skipping "
+			"io-apic setup\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1757: FILE: arch/x86/kernel/apic/apic.c:1444:
 		panic("x2apic enabled prior OS handover,"
+		      " enable CONFIG_X86_X2APIC, CONFIG_INTR_REMAP");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1814: FILE: arch/x86/kernel/apic/apic.c:1602:
+		apic_printk(APIC_VERBOSE, "mapped APIC to %08lx (%08lx)\n",
+					APIC_BASE, apic_phys);

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after multi_checked
#1992: FILE: arch/x86/kernel/apic/apic.c:2205:
+static int __cpuinitdata multi_checked;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after multi
#1993: FILE: arch/x86/kernel/apic/apic.c:2206:
+static int __cpuinitdata multi;

WARNING:MISPLACED_INIT: __cpuinitconst should be placed after multi_dmi_table[]
#2004: FILE: arch/x86/kernel/apic/apic.c:2217:
+static const __cpuinitconst struct dmi_system_id multi_dmi_table[] = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2076: FILE: arch/x86/kernel/apic/apic_flat_64.c:239:
+	if (acpi_gbl_FADT.header.revision >= FADT2_REVISION_ID &&
 		(acpi_gbl_FADT.flags & ACPI_FADT_APIC_PHYSICAL)) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2222: FILE: arch/x86/kernel/apic/io_apic.c:349:
 }
+/* end for move_irq_desc */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2390: FILE: arch/x86/kernel/apic/io_apic.c:533:
+static void __init replace_pin_at_irq_node(struct irq_cfg *cfg, int node,
 				      int oldapic, int oldpin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2503: FILE: arch/x86/kernel/apic/io_apic.c:1099:
+int IO_APIC_get_PCI_irq_vector(int bus, int slot, int pin,
+				struct io_apic_irq_attr *irq_attr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus == lbus'
#2523: FILE: arch/x86/kernel/apic/io_apic.c:1119:
+		if (!test_bit(lbus, mp_bus_not_pci) &&
+		    !mp_irqs[i].irqtype &&
+		    (bus == lbus) &&
+		    (slot == ((mp_irqs[i].srcbusirq >> 2) & 0x1f))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2614: FILE: arch/x86/kernel/apic/io_apic.c:1510:
+				apic_printk(APIC_VERBOSE,
+					KERN_DEBUG " %d-%d",

CHECK:BRACES: Unbalanced braces around else statement
#2616: FILE: arch/x86/kernel/apic/io_apic.c:1512:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2618: FILE: arch/x86/kernel/apic/io_apic.c:1514:
+				apic_printk(APIC_VERBOSE, " %d-%d",
+					mp_ioapics[apic_id].apicid, pin);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2623: FILE: arch/x86/kernel/apic/io_apic.c:1519:
+			apic_printk(APIC_VERBOSE,
+				" (apicid-pin) not connected\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2648: FILE: arch/x86/kernel/apic/io_apic.c:1530:
+		if (apic->multi_timer_check &&
+				apic->multi_timer_check(apic_id, irq))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2655: FILE: arch/x86/kernel/apic/io_apic.c:1535:
+			printk(KERN_INFO "can not get irq_desc for %d\n", irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2665: FILE: arch/x86/kernel/apic/io_apic.c:1545:
+		setup_IO_APIC_irq(apic_id, pin, irq, desc,
+				irq_trigger(idx), irq_polarity(idx));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2686: FILE: arch/x86/kernel/apic/io_apic.c:1827:
+		printk(KERN_DEBUG "... APIC EFEAT: %08x\n", v);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2688: FILE: arch/x86/kernel/apic/io_apic.c:1829:
+		printk(KERN_DEBUG "... APIC ECTRL: %08x\n", v);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2691: FILE: arch/x86/kernel/apic/io_apic.c:1832:
+			printk(KERN_DEBUG "... APIC EILVT%d: %08x\n", i, v);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2719: FILE: arch/x86/kernel/apic/io_apic.c:2249:
+		unsigned int i;
+		cfg->move_cleanup_count = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2753: FILE: arch/x86/kernel/apic/io_apic.c:2283:
+			io_apic_write(apic, 0x11 + pin*2, dest);
 			                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2754: FILE: arch/x86/kernel/apic/io_apic.c:2284:
+		reg = io_apic_read(apic, 0x10 + pin*2);
 		                                   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2757: FILE: arch/x86/kernel/apic/io_apic.c:2287:
+		io_apic_modify(apic, 0x10 + pin*2, reg);
 		                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2873: FILE: arch/x86/kernel/apic/io_apic.c:2411:
+static int set_ir_ioapic_affinity_irq_desc(struct irq_desc *desc,
 					    const struct cpumask *mask)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2879: FILE: arch/x86/kernel/apic/io_apic.c:2415:
 }
+static int set_ir_ioapic_affinity_irq(unsigned int irq,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2880: FILE: arch/x86/kernel/apic/io_apic.c:2416:
+static int set_ir_ioapic_affinity_irq(unsigned int irq,
 				       const struct cpumask *mask)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2890: FILE: arch/x86/kernel/apic/io_apic.c:2424:
+static inline int set_ir_ioapic_affinity_irq_desc(struct irq_desc *desc,
 						   const struct cpumask *mask)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3006: FILE: arch/x86/kernel/apic/io_apic.c:2617:
+	for (;;) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3337: FILE: arch/x86/kernel/apic/io_apic.c:3871:
+static int __io_apic_set_pci_routing(struct device *dev, int irq,
+				struct io_apic_irq_attr *irq_attr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#3347: FILE: arch/x86/kernel/apic/io_apic.c:3881:
+		apic_printk(APIC_QUIET,KERN_ERR "IOAPIC[%d]: Invalid reference to IRQ 0\n",
 		                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3348: FILE: arch/x86/kernel/apic/io_apic.c:3882:
+		apic_printk(APIC_QUIET,KERN_ERR "IOAPIC[%d]: Invalid reference to IRQ 0\n",
+			ioapic);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3359: FILE: arch/x86/kernel/apic/io_apic.c:3893:
+		printk(KERN_INFO "can not get irq_desc %d\n", irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3381: FILE: arch/x86/kernel/apic/io_apic.c:3915:
+int io_apic_set_pci_routing(struct device *dev, int irq,
+				struct io_apic_irq_attr *irq_attr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3541: FILE: arch/x86/kernel/apic/probe_64.c:54:
+	if (x2apic_mode && (apic != &apic_x2apic_phys &&
 #ifdef CONFIG_X86_UV

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3579: FILE: arch/x86/kernel/apic/x2apic_uv_x.c:586:
+	BUG_ON(!uv_blade_info);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3585: FILE: arch/x86/kernel/apic/x2apic_uv_x.c:592:
+	BUG_ON(!uv_node_to_blade);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3590: FILE: arch/x86/kernel/apic/x2apic_uv_x.c:597:
+	BUG_ON(!uv_cpu_to_blade);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3603: FILE: arch/x86/kernel/cpu/amd.c:275:
+	unsigned apicid = cpu_has_apic ? hard_smp_processor_id() : c->apicid;

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#3625: FILE: arch/x86/kernel/cpu/common.c:772:
+	/* Clear/Set all flags overriden by options, after probe */
 	                       ^^^^^^^^^

WARNING:TYPO_SPELLING: 'overriden' may be misspelled - perhaps 'overridden'?
#3640: FILE: arch/x86/kernel/cpu/common.c:825:
+	 * Clear/Set all flags overriden by options, need do it
 	                       ^^^^^^^^^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#3725: FILE: arch/x86/kernel/irq.c:27:
+	if (printk_ratelimit())

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3766: FILE: arch/x86/kernel/irq.c:218:
+			pr_emerg("%s: %d.%d No irq handler for vector (irq %d)\n",
+				__func__, smp_processor_id(), vector, irq);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#3772: 
rename from arch/x86/kernel/irqinit_32.c

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3778: FILE: arch/x86/kernel/irqinit.c:1:
+#include <linux/linkage.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#3900: FILE: arch/x86/kernel/irqinit.c:144:
+void init_IRQ(void) __attribute__((weak, alias("native_init_IRQ")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("native_init_IRQ") over __attribute__((alias("native_init_IRQ")))
#3900: FILE: arch/x86/kernel/irqinit.c:144:
+void init_IRQ(void) __attribute__((weak, alias("native_init_IRQ")));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3999: FILE: arch/x86/kernel/irqinit.c:253:
+			set_intr_gate(i, interrupt[i-FIRST_EXTERNAL_VECTOR]);
 			                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4389: FILE: arch/x86/kernel/smpboot.c:997:
+			pr_err("BIOS bug, local APIC #%d not detected!...\n",
+				boot_cpu_physical_apicid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4512: FILE: arch/x86/pci/irq.c:1156:
+		printk(KERN_INFO "PCI: Routing PCI interrupts for all devices because \"pci=routeirq\" specified\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4542: FILE: arch/x86/pci/irq.c:1206:
+			irq = IO_APIC_get_PCI_irq_vector(dev->bus->number,
+						PCI_SLOT(dev->devfn),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4562: FILE: arch/x86/pci/irq.c:1232:
+				io_apic_set_pci_routing(&dev->dev, irq,
+							 &irq_attr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4616: FILE: drivers/char/hpet.c:943:
+			irq = acpi_register_gsi(NULL, irqp->interrupts[i],
 				      irqp->triggering, irqp->polarity);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4629: FILE: drivers/parisc/iosapic.c:706:
+static int iosapic_set_affinity_irq(unsigned int irq,
 				     const struct cpumask *dest)

CHECK:SPACING: No space is necessary after a cast
#4679: FILE: drivers/pci/hotplug/ibmphp_core.c:163:
+						(int) (*cur_slot)->device, i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4683: FILE: drivers/pci/hotplug/ibmphp_core.c:167:
+			debug("(*cur_slot)->irq[0] = %x\n",
+					(*cur_slot)->irq[0]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4685: FILE: drivers/pci/hotplug/ibmphp_core.c:169:
+			debug("(*cur_slot)->irq[1] = %x\n",
+					(*cur_slot)->irq[1]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4687: FILE: drivers/pci/hotplug/ibmphp_core.c:171:
+			debug("(*cur_slot)->irq[2] = %x\n",
+					(*cur_slot)->irq[2]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4689: FILE: drivers/pci/hotplug/ibmphp_core.c:173:
+			debug("(*cur_slot)->irq[3] = %x\n",
+					(*cur_slot)->irq[3]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4692: FILE: drivers/pci/hotplug/ibmphp_core.c:176:
+			debug("rtable->exlusive_irqs = %x\n",
 					rtable->exclusive_irqs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4695: FILE: drivers/pci/hotplug/ibmphp_core.c:178:
+			debug("rtable->slots[loop].irq[0].bitmap = %x\n",
 					rtable->slots[loop].irq[0].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4698: FILE: drivers/pci/hotplug/ibmphp_core.c:180:
+			debug("rtable->slots[loop].irq[1].bitmap = %x\n",
 					rtable->slots[loop].irq[1].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4701: FILE: drivers/pci/hotplug/ibmphp_core.c:182:
+			debug("rtable->slots[loop].irq[2].bitmap = %x\n",
 					rtable->slots[loop].irq[2].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4704: FILE: drivers/pci/hotplug/ibmphp_core.c:184:
+			debug("rtable->slots[loop].irq[3].bitmap = %x\n",
 					rtable->slots[loop].irq[3].bitmap);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4708: FILE: drivers/pci/hotplug/ibmphp_core.c:187:
+			debug("rtable->slots[loop].irq[0].link = %x\n",
 					rtable->slots[loop].irq[0].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4711: FILE: drivers/pci/hotplug/ibmphp_core.c:189:
+			debug("rtable->slots[loop].irq[1].link = %x\n",
 					rtable->slots[loop].irq[1].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4714: FILE: drivers/pci/hotplug/ibmphp_core.c:191:
+			debug("rtable->slots[loop].irq[2].link = %x\n",
 					rtable->slots[loop].irq[2].link);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4717: FILE: drivers/pci/hotplug/ibmphp_core.c:193:
+			debug("rtable->slots[loop].irq[3].link = %x\n",
 					rtable->slots[loop].irq[3].link);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4784: FILE: drivers/pci/intr_remapping.c:24:
+}
+early_param("nointremap", setup_nointremap);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4803: FILE: drivers/pci/intr_remapping.c:39:
+	printk(KERN_DEBUG "alloc irq_2_iommu on node %d\n", node);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4918: FILE: drivers/xen/events.c:691:
+static int rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4918: FILE: drivers/xen/events.c:691:
+static int rebind_irq_to_cpu(unsigned irq, unsigned tcpu)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4939: FILE: drivers/xen/events.c:714:
+static int set_affinity_irq(unsigned irq, const struct cpumask *dest)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4957: FILE: include/linux/acpi.h:122:
+int acpi_register_gsi (struct device *dev, u32 gsi, int triggering, int polarity);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4969: FILE: include/linux/dmar.h:111:
+extern int intr_remapping_supported(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4991: FILE: include/linux/interrupt.h:569:
+extern int arch_init_chip_data(struct irq_desc *desc, int node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5039: FILE: include/linux/irq.h:212:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5048: FILE: include/linux/irq.h:220:
+extern struct irq_desc *irq_to_desc_alloc_node(unsigned int irq, int node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5057: FILE: include/linux/irq.h:386:
+extern unsigned int create_irq_nr(unsigned int irq_want, int node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5077: FILE: include/linux/irq.h:433:
+static inline bool alloc_desc_masks(struct irq_desc *desc, int node,
 								bool boot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5136: FILE: include/linux/irq.h:501:
+static inline bool alloc_desc_masks(struct irq_desc *desc, int node,
 								bool boot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5248: FILE: kernel/irq/handle.c:94:
+		ptr = alloc_bootmem_node(NODE_DATA(node),
+				nr * sizeof(*desc->kstat_irqs));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5257: FILE: kernel/irq/handle.c:101:
+		printk(KERN_DEBUG "  alloc kstat_irqs on node %d\n", node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#5327: FILE: kernel/irq/handle.c:222:
+	printk(KERN_DEBUG "  alloc irq_desc for %d on node %d\n", irq, node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5390: FILE: kernel/irq/internals.h:19:
+extern void init_kstat_irqs(struct irq_desc *desc, int node, int nr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112421.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 80 checks, 4582 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112421.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
