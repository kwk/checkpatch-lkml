WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
hald-addon-stor-4152  [000]   165.875501: unlock_kernel: depth: 0, fs/block_dev.c:1358 __blkdev_put()

CHECK:SPACING: No space is necessary after a cast
#88: FILE: include/linux/smp_lock.h:28:
+extern void __lockfunc _lock_kernel(void)	__acquires(kernel_lock);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#89: FILE: include/linux/smp_lock.h:29:
+extern void __lockfunc _unlock_kernel(void)	__releases(kernel_lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#89: FILE: include/linux/smp_lock.h:29:
+extern void __lockfunc _unlock_kernel(void)	__releases(kernel_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#89: FILE: include/linux/smp_lock.h:29:
+extern void __lockfunc _unlock_kernel(void)	__releases(kernel_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#109: FILE: include/linux/smp_lock.h:55:
+#define lock_kernel()	   trace_lock_kernel(__func__, __FILE__, __LINE__);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#110: FILE: include/linux/smp_lock.h:56:
+#define unlock_kernel()    trace_unlock_kernel(__func__, __FILE__, __LINE__);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#115: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#120: FILE: include/trace/events/bkl.h:1:
+#undef TRACE_SYSTEM

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: include/trace/events/bkl.h:10:
+TRACE_EVENT(lock_kernel,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#134: FILE: include/trace/events/bkl.h:15:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#135: FILE: include/trace/events/bkl.h:16:
+		__field(	int,		lock_depth		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#135: FILE: include/trace/events/bkl.h:16:
+		__field(	int,		lock_depth		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#136: FILE: include/trace/events/bkl.h:17:
+		__field_ext(	const char *,	func, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#136: FILE: include/trace/events/bkl.h:17:
+		__field_ext(	const char *,	func, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#137: FILE: include/trace/events/bkl.h:18:
+		__field_ext(	const char *,	file, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#137: FILE: include/trace/events/bkl.h:18:
+		__field_ext(	const char *,	file, FILTER_PTR_STRING	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#138: FILE: include/trace/events/bkl.h:19:
+		__field(	int,		line			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#138: FILE: include/trace/events/bkl.h:19:
+		__field(	int,		line			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#141: FILE: include/trace/events/bkl.h:22:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: include/trace/events/bkl.h:35:
+TRACE_EVENT(unlock_kernel,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#159: FILE: include/trace/events/bkl.h:40:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#166: FILE: include/trace/events/bkl.h:47:
+	TP_fast_assign(

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#221: FILE: lib/kernel_lock.c:132:
+EXPORT_SYMBOL(_lock_kernel);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 7 warnings, 9 checks, 134 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000067734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
