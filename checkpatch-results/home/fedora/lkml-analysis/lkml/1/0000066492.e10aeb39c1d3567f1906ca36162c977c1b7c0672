WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: include/linux/netfilter/xt_ipvs.h:1:
+#ifndef _XT_IPVS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#65: FILE: include/linux/netfilter/xt_ipvs.h:4:
+#define XT_IPVS_IPVS_PROPERTY	(1 << 0) /* all other options imply this one */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#66: FILE: include/linux/netfilter/xt_ipvs.h:5:
+#define XT_IPVS_PROTO		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#67: FILE: include/linux/netfilter/xt_ipvs.h:6:
+#define XT_IPVS_VADDR		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#68: FILE: include/linux/netfilter/xt_ipvs.h:7:
+#define XT_IPVS_VPORT		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#69: FILE: include/linux/netfilter/xt_ipvs.h:8:
+#define XT_IPVS_DIR		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#70: FILE: include/linux/netfilter/xt_ipvs.h:9:
+#define XT_IPVS_METHOD		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#71: FILE: include/linux/netfilter/xt_ipvs.h:10:
+#define XT_IPVS_VPORTCTL	(1 << 6)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#95: FILE: net/netfilter/Kconfig:681:
+config NETFILTER_XT_MATCH_IPVS
+	tristate '"ipvs" match support'
+	depends on IP_VS
+	depends on NETFILTER_ADVANCED
+	help
+	  This option allows you to match against IPVS properties of a packet.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#137: FILE: net/netfilter/xt_ipvs.c:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'u_int8_t'
#187: FILE: net/netfilter/xt_ipvs.c:51:
+	const u_int8_t family = par->family;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iph.protocol == data->l4proto'
#208: FILE: net/netfilter/xt_ipvs.c:72:
+		if ((iph.protocol == data->l4proto) ^
+		    !(data->invert & XT_IPVS_PROTO)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#221: FILE: net/netfilter/xt_ipvs.c:85:
+	/*
+	 * Check if the packet belongs to an existing entry

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cp"
#224: FILE: net/netfilter/xt_ipvs.c:88:
+	if (unlikely(cp == NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#230: FILE: net/netfilter/xt_ipvs.c:94:
+	/*
+	 * We found a connection, i.e. ct != 0, make sure to call

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cp->vport == data->vport'
#235: FILE: net/netfilter/xt_ipvs.c:99:
+		if ((cp->vport == data->vport) ^
+		    !(data->invert & XT_IPVS_VPORT)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp->control"
#242: FILE: net/netfilter/xt_ipvs.c:106:
+		if ((cp->control != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ct"
#253: FILE: net/netfilter/xt_ipvs.c:117:
+		if (ct == NULL || ct == &nf_conntrack_untracked) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ctinfo >= IP_CT_IS_REPLY'
#258: FILE: net/netfilter/xt_ipvs.c:122:
+		if ((ctinfo >= IP_CT_IS_REPLY) ^
+		    !!(data->invert & XT_IPVS_DIR)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#292: FILE: net/netfilter/xt_ipvs.c:156:
+#ifdef CONFIG_IP_VS_IPV6
+	    && par->family != NFPROTO_IPV6

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 15 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000066492.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
