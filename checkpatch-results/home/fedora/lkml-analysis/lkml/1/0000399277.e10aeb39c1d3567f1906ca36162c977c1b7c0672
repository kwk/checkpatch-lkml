WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
> Good idea, but unless we understand the problems involved, we are bound to 

WARNING:TYPO_SPELLING: 'refenence' may be misspelled - perhaps 'reference'?
#54: 
Locality of refenence to anonymous memory tends to be
            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mapping->a_ops->writepage"
#278: FILE: include/linux/mm.h:631:
+	if ((unlikely(mapping->a_ops->writepage == NULL)))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#465: FILE: include/linux/swap.h:181:
+extern void FASTCALL(lru_cache_add_file(struct page *));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#465: FILE: include/linux/swap.h:181:
+extern void FASTCALL(lru_cache_add_file(struct page *));

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: include/linux/swap.h:182:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#466: FILE: include/linux/swap.h:182:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: include/linux/swap.h:183:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#467: FILE: include/linux/swap.h:183:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#468: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#468: FILE: include/linux/swap.h:184:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: include/linux/swap.h:185:
+extern void FASTCALL(activate_page_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#469: FILE: include/linux/swap.h:185:
+extern void FASTCALL(activate_page_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: include/linux/swap.h:186:
+extern void FASTCALL(activate_page_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#470: FILE: include/linux/swap.h:186:
+extern void FASTCALL(activate_page_file(struct page *));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#542: FILE: mm/migrate.c:56:
+			if (PageActive(page)) {
+			    if (page_anon(page)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#543: FILE: mm/migrate.c:57:
+^I^I^I    if (page_anon(page)) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#543: FILE: mm/migrate.c:57:
+			    if (page_anon(page)) 

WARNING:TABSTOP: Statements should start on a tabstop
#545: FILE: mm/migrate.c:59:
+			    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#547: FILE: mm/migrate.c:61:
+			} else {
+			    if (page_anon(page)) 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#548: FILE: mm/migrate.c:62:
+^I^I^I    if (page_anon(page)) $

WARNING:TABSTOP: Statements should start on a tabstop
#548: FILE: mm/migrate.c:62:
+			    if (page_anon(page)) 

WARNING:TABSTOP: Statements should start on a tabstop
#550: FILE: mm/migrate.c:64:
+			    else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#581: FILE: mm/page_alloc.c:1547:
+	printk("Active_anon:%lu active_file:%lu inactive_anon%lu\n"

WARNING:SPLIT_STRING: quoted string split across lines
#599: FILE: mm/page_alloc.c:1576:
 			" high:%lukB"
+			" active_anon:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#600: FILE: mm/page_alloc.c:1577:
+			" active_anon:%lukB"
+			" inactive_anon:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#601: FILE: mm/page_alloc.c:1578:
+			" inactive_anon:%lukB"
+			" active_file:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: mm/page_alloc.c:1579:
+			" active_file:%lukB"
+			" inactive_file:%lukB"

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#817: FILE: mm/vmscan.c:693:
+			if (file) {
+			    zone->recent_rotated_file += sc->activated;

WARNING:TABSTOP: Statements should start on a tabstop
#820: FILE: mm/vmscan.c:696:
+			    if (PageActive(page))

WARNING:TABSTOP: Statements should start on a tabstop
#822: FILE: mm/vmscan.c:698:
+			    else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#824: FILE: mm/vmscan.c:700:
+			} else {
+			    zone->recent_rotated_anon += sc->activated;

WARNING:TABSTOP: Statements should start on a tabstop
#827: FILE: mm/vmscan.c:703:
+			    if (PageActive(page))

WARNING:TABSTOP: Statements should start on a tabstop
#829: FILE: mm/vmscan.c:705:
+			    else

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#844: FILE: mm/vmscan.c:741:
+				+ zone_page_state(zone, NR_INACTIVE_FILE))*3;
 				                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1026: FILE: mm/vmscan.c:892:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: mm/vmscan.c:893:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,
+		unsigned long *anon_percent, unsigned long *file_percent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1061: FILE: mm/vmscan.c:927:
+ ^I *                  anon       recent_rotated_anon $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1061: FILE: mm/vmscan.c:927:
+ ^I *                  anon       recent_rotated_anon $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1061: FILE: mm/vmscan.c:927:
+ ^I *                  anon       recent_rotated_anon $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1149: FILE: mm/vmscan.c:1000:
+	while (nr_active_file || nr_inactive_file ||
+				nr_active_anon || nr_inactive_anon) {

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_active_file, sc->swap_cluster_max)
#1151: FILE: mm/vmscan.c:1002:
+			nr_to_scan = min(nr_active_file,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: mm/vmscan.c:1003:
+			nr_to_scan = min(nr_active_file,
+					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_inactive_file, sc->swap_cluster_max)
#1158: FILE: mm/vmscan.c:1009:
+			nr_to_scan = min(nr_inactive_file,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1159: FILE: mm/vmscan.c:1010:
+			nr_to_scan = min(nr_inactive_file,
+					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_active_anon, sc->swap_cluster_max)
#1169: FILE: mm/vmscan.c:1017:
+			nr_to_scan = min(nr_active_anon,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: mm/vmscan.c:1018:
+			nr_to_scan = min(nr_active_anon,
 					(unsigned long)sc->swap_cluster_max);

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr_inactive_anon, sc->swap_cluster_max)
#1180: FILE: mm/vmscan.c:1024:
+			nr_to_scan = min(nr_inactive_anon,
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1181: FILE: mm/vmscan.c:1025:
+			nr_to_scan = min(nr_inactive_anon,
 					(unsigned long)sc->swap_cluster_max);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1210: FILE: mm/vmscan.c:1269:
+^I^I^I^I   + zone_page_state(zone, NR_ACTIVE_FILE) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1211: FILE: mm/vmscan.c:1270:
+^I^I^I^I   + zone_page_state(zone, NR_INACTIVE_ANON) $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: mm/vmscan.c:1487:
+				nr_to_scan = min(nr_pages,
+					zone_page_state(zone, NR_ACTIVE_FILE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1267: FILE: mm/vmscan.c:1506:
+			nr_to_scan = min(nr_pages,
+				zone_page_state(zone, NR_INACTIVE_FILE));

WARNING:SPLIT_STRING: quoted string split across lines
#1317: FILE: mm/vmstat.c:559:
 			   "\n        high     %lu"
+			   "\n        scanned  %lu (ao: %lu io: %lu af: %lu if: %lu)"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 31 warnings, 16 checks, 1416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000399277.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
