WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
      queues.  Among queues in the same classes the bandwidth is distributed

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: block/bfq-cgroup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: block/bfq-cgroup.c:57:
+	entity->ioprio = entity->new_ioprio = bgrp->ioprio;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#137: FILE: block/bfq-cgroup.c:58:
+	entity->ioprio_class = entity->new_ioprio_class = bgrp->ioprio_class;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#147: FILE: block/bfq-cgroup.c:68:
+	BUG_ON(parent == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#147: FILE: block/bfq-cgroup.c:68:
+	BUG_ON(parent == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#148: FILE: block/bfq-cgroup.c:69:
+	BUG_ON(bfqg == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqg"
#148: FILE: block/bfq-cgroup.c:69:
+	BUG_ON(bfqg == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#170: FILE: block/bfq-cgroup.c:91:
+	for (; cgroup != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg"
#174: FILE: block/bfq-cgroup.c:95:
+		if (bfqg != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqg"
#184: FILE: block/bfq-cgroup.c:105:
+		if (bfqg == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!leaf"
#190: FILE: block/bfq-cgroup.c:111:
+		if (leaf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#208: FILE: block/bfq-cgroup.c:129:
+	while (leaf != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#241: FILE: block/bfq-cgroup.c:162:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#241: FILE: block/bfq-cgroup.c:162:
+	for (; cgroup != NULL && leaf != NULL; cgroup = cgroup->parent) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#246: FILE: block/bfq-cgroup.c:167:
+		BUG_ON(bfqg != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg"
#246: FILE: block/bfq-cgroup.c:167:
+		BUG_ON(bfqg != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: block/bfq-cgroup.c:181:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgroup"
#260: FILE: block/bfq-cgroup.c:181:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "leaf"
#260: FILE: block/bfq-cgroup.c:181:
+	BUG_ON(cgroup == NULL && leaf != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup"
#261: FILE: block/bfq-cgroup.c:182:
+	if (cgroup != NULL && prev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "prev"
#261: FILE: block/bfq-cgroup.c:182:
+	if (cgroup != NULL && prev != NULL) {

WARNING:TYPO_SPELLING: 'becames' may be misspelled - perhaps 'becomes'?
#278: FILE: block/bfq-cgroup.c:199:
+ * but is a safe fallbak.  If this loss becames a problem it can be
                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg"
#294: FILE: block/bfq-cgroup.c:215:
+	if (bfqg != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg"
#298: FILE: block/bfq-cgroup.c:219:
+	if (bfqg != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: block/bfq-cgroup.c:249:
+	BUG_ON(resume && !entity->on_st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: block/bfq-cgroup.c:250:
+	BUG_ON(busy && !resume && entity->on_st && bfqq != bfqd->active_queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#332: FILE: block/bfq-cgroup.c:253:
+		BUG_ON(atomic_read(&bfqq->ref) < 2);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "async_bfqq"
#378: FILE: block/bfq-cgroup.c:299:
+	if (async_bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sync_bfqq"
#387: FILE: block/bfq-cgroup.c:308:
+	if (sync_bfqq != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: block/bfq-cgroup.c:329:
+	struct bfq_data *bfqd;
+	unsigned long uninitialized_var(flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#408: FILE: block/bfq-cgroup.c:329:
+	unsigned long uninitialized_var(flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#408: FILE: block/bfq-cgroup.c:329:
+	unsigned long uninitialized_var(flags);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd"
#411: FILE: block/bfq-cgroup.c:332:
+	if (bfqd != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#444: FILE: block/bfq-cgroup.c:365:
+	BUG_ON(bfqd == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqd"
#444: FILE: block/bfq-cgroup.c:365:
+	BUG_ON(bfqd == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#462: FILE: block/bfq-cgroup.c:383:
+	for (; entity != NULL; entity = st->first_idle)

WARNING:LINE_SPACING: Missing a blank line after declarations
#478: FILE: block/bfq-cgroup.c:399:
+	struct bfq_entity *entity = bfqg->my_entity;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#478: FILE: block/bfq-cgroup.c:399:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#478: FILE: block/bfq-cgroup.c:399:
+	unsigned long uninitialized_var(flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd"
#488: FILE: block/bfq-cgroup.c:409:
+	if (bfqd != NULL) {

WARNING:TYPO_SPELLING: 'Noone' may be misspelled - perhaps 'No one'?
#501: FILE: block/bfq-cgroup.c:422:
+		 * cgroup from the one being destroyed now.  Noone else
 		                                             ^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: block/bfq-cgroup.c:427:
+		BUG_ON(!RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#507: FILE: block/bfq-cgroup.c:428:
+		BUG_ON(!RB_EMPTY_ROOT(&st->idle));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#509: FILE: block/bfq-cgroup.c:430:
+	BUG_ON(bfqg->sched_data.next_active != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg->sched_data.next_active"
#509: FILE: block/bfq-cgroup.c:430:
+	BUG_ON(bfqg->sched_data.next_active != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: block/bfq-cgroup.c:431:
+	BUG_ON(bfqg->sched_data.active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqg->sched_data.active_entity"
#510: FILE: block/bfq-cgroup.c:431:
+	BUG_ON(bfqg->sched_data.active_entity != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: block/bfq-cgroup.c:432:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#511: FILE: block/bfq-cgroup.c:432:
+	BUG_ON(entity->tree != NULL);

WARNING:TYPO_SPELLING: 'noone' may be misspelled - perhaps 'no one'?
#516: FILE: block/bfq-cgroup.c:437:
+	 * cgroup, so we can be sure that noone is a) still using
 	                                  ^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqg"
#575: FILE: block/bfq-cgroup.c:496:
+	if (bfqg == NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#591: FILE: block/bfq-cgroup.c:512:
+#define SHOW_FUNCTION(__VAR)						\
+static u64 bfqio_cgroup_##__VAR##_read(struct cgroup *cgroup,		\
+				       struct cftype *cftype)		\
+{									\
+	struct bfqio_cgroup *bgrp;					\
+	u64 ret;							\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	bgrp = cgroup_to_bfqio(cgroup);					\
+	spin_lock_irq(&bgrp->lock);					\
+	ret = bgrp->__VAR;						\
+	spin_unlock_irq(&bgrp->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return ret;							\
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '__VAR' may be better as '(__VAR)' to avoid precedence issues
#615: FILE: block/bfq-cgroup.c:536:
+#define STORE_FUNCTION(__VAR, __MIN, __MAX)				\
+static int bfqio_cgroup_##__VAR##_write(struct cgroup *cgroup,		\
+					struct cftype *cftype,		\
+					u64 val)			\
+{									\
+	struct bfqio_cgroup *bgrp;					\
+	struct bfq_group *bfqg;						\
+	struct hlist_node *n;						\
+									\
+	if (val < (__MIN) || val > (__MAX))				\
+		return -EINVAL;						\
+									\
+	if (!cgroup_lock_live_group(cgroup))				\
+		return -ENODEV;						\
+									\
+	bgrp = cgroup_to_bfqio(cgroup);					\
+									\
+	spin_lock_irq(&bgrp->lock);					\
+	bgrp->__VAR = (unsigned char)val;				\
+	hlist_for_each_entry(bfqg, n, &bgrp->group_data, group_node) {	\
+		bfqg->entity.new_##__VAR = (unsigned char)val;		\
+		smp_wmb();						\
+		bfqg->entity.ioprio_changed = 1;			\
+	}								\
+	spin_unlock_irq(&bgrp->lock);					\
+									\
+	cgroup_unlock();						\
+									\
+	return 0;							\
+}

WARNING:MEMORY_BARRIER: memory barrier without comment
#636: FILE: block/bfq-cgroup.c:557:
+		smp_wmb();						\

CHECK:BRACES: braces {} should be used on all arms of this statement
#674: FILE: block/bfq-cgroup.c:595:
+	if (cgroup->parent != NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cgroup->parent"
#674: FILE: block/bfq-cgroup.c:595:
+	if (cgroup->parent != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bgrp"
#676: FILE: block/bfq-cgroup.c:597:
+		if (bgrp == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#678: FILE: block/bfq-cgroup.c:599:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#706: FILE: block/bfq-cgroup.c:627:
+	if (ioc != NULL && atomic_read(&ioc->nr_tasks) > 1)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ioc"
#728: FILE: block/bfq-cgroup.c:649:
+	if (ioc != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#729: FILE: block/bfq-cgroup.c:650:
+		BUG_ON(atomic_read(&ioc->refcount) == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioc"
#734: FILE: block/bfq-cgroup.c:655:
+	if (ioc == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#761: FILE: block/bfq-cgroup.c:682:
+	BUG_ON(!hlist_empty(&bgrp->group_data));

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: block/bfq-cgroup.c:709:
+	struct bfq_data *bfqd = cic->key;
+	return bfqd->root_group;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqg"
#814: FILE: block/bfq-cgroup.c:735:
+	if (bfqg == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#829: FILE: block/bfq-ioc.c:1:
+/*

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfq_ioc_gone"
#856: FILE: block/bfq-ioc.c:28:
+	if (bfq_ioc_gone != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfq_ioc_gone"
#858: FILE: block/bfq-ioc.c:30:
+		if (bfq_ioc_gone != NULL &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: block/bfq-ioc.c:58:
+	BUG_ON(cic->dead_key == 0);

WARNING:MEMORY_BARRIER: memory barrier without comment
#931: FILE: block/bfq-ioc.c:103:
+	smp_wmb();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic->cfqq[ASYNC]"
#942: FILE: block/bfq-ioc.c:114:
+	if (cic->cfqq[ASYNC] != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic->cfqq[SYNC]"
#947: FILE: block/bfq-ioc.c:119:
+	if (cic->cfqq[SYNC] != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#966: FILE: block/bfq-ioc.c:138:
+	struct bfq_data *bfqd;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#966: FILE: block/bfq-ioc.c:138:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#966: FILE: block/bfq-ioc.c:138:
+	unsigned long uninitialized_var(flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd"
#969: FILE: block/bfq-ioc.c:141:
+	if (bfqd != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: block/bfq-ioc.c:166:
+	cic = kmem_cache_alloc_node(bfq_ioc_pool, gfp_mask | __GFP_ZERO,
+							bfqd->queue->node);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic"
#995: FILE: block/bfq-ioc.c:167:
+	if (cic != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1024: FILE: block/bfq-ioc.c:196:
+	BUG_ON(ioc->ioc_data == cic);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioc"
#1057: FILE: block/bfq-ioc.c:229:
+	if (unlikely(ioc == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic"
#1064: FILE: block/bfq-ioc.c:236:
+	if (cic != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1073: FILE: block/bfq-ioc.c:245:
+		if (cic == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!k"
#1077: FILE: block/bfq-ioc.c:249:
+		if (unlikely(k == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1138: FILE: block/bfq-ioc.c:310:
+		printk(KERN_ERR "bfq: cic link failed!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ioc"
#1170: FILE: block/bfq-ioc.c:342:
+	if (ioc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic"
#1175: FILE: block/bfq-ioc.c:347:
+	if (cic != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1180: FILE: block/bfq-ioc.c:352:
+	if (cic == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1210: FILE: block/bfq-iosched.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#1309: FILE: block/bfq-iosched.c:100:
+	((struct cfq_io_context *) (rq)->elevator_private)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1370: FILE: block/bfq-iosched.c:161:
+	unsigned wrap = 0; /* bit mask: requests behind the disk head? */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq1"
#1372: FILE: block/bfq-iosched.c:163:
+	if (rq1 == NULL || rq1 == rq2)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq2"
#1374: FILE: block/bfq-iosched.c:165:
+	if (rq2 == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1423: FILE: block/bfq-iosched.c:214:
+		if (d1 < d2)
[...]
+		else if (d2 < d1)
[...]
+		else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1427: FILE: block/bfq-iosched.c:218:
+			return rq2;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#1427: FILE: block/bfq-iosched.c:218:
+		else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1438: FILE: block/bfq-iosched.c:229:
+	case (BFQ_RQ1_WRAP|BFQ_RQ2_WRAP): /* both rqs wrapped */
 	                  ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1461: FILE: block/bfq-iosched.c:252:
+	BUG_ON(RB_EMPTY_NODE(&last->rb_node));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rbprev"
#1463: FILE: block/bfq-iosched.c:254:
+	if (rbprev != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1466: FILE: block/bfq-iosched.c:257:
+	if (rbnext != NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rbnext"
#1466: FILE: block/bfq-iosched.c:257:
+	if (rbnext != NULL)

CHECK:BRACES: Unbalanced braces around else statement
#1468: FILE: block/bfq-iosched.c:259:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1483: FILE: block/bfq-iosched.c:274:
+	BUG_ON(bfqq->queued[sync] == 0);

WARNING:TYPO_SPELLING: 'shrinked' may be misspelled - perhaps 'shrunk'?
#1501: FILE: block/bfq-iosched.c:292:
+ * (if it has shrinked), to reduce the time it has to wait, still taking
               ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!next_rq"
#1514: FILE: block/bfq-iosched.c:305:
+	if (next_rq == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1524: FILE: block/bfq-iosched.c:315:
+	BUG_ON(entity->tree != &st->active);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1525: FILE: block/bfq-iosched.c:316:
+	BUG_ON(entity == entity->sched_data->active_entity);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1554: FILE: block/bfq-iosched.c:345:
+	BUG_ON(next_rq == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!next_rq"
#1554: FILE: block/bfq-iosched.c:345:
+	BUG_ON(next_rq == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1557: FILE: block/bfq-iosched.c:348:
+	if (!bfq_bfqq_busy(bfqq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1561: FILE: block/bfq-iosched.c:352:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1581: FILE: block/bfq-iosched.c:372:
+	if (cic == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#1585: FILE: block/bfq-iosched.c:376:
+	if (bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "__rq"
#1636: FILE: block/bfq-iosched.c:427:
+	if (__rq != NULL && elv_rq_merge_ok(__rq, bio)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1683: FILE: block/bfq-iosched.c:474:
+	if (cic == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#1696: FILE: block/bfq-iosched.c:487:
+	if (bfqq != NULL) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1701: FILE: block/bfq-iosched.c:492:
+		bfqq->budgets_assigned = (bfqq->budgets_assigned*7 + 256) / 8;
 		                                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#1737: FILE: block/bfq-iosched.c:528:
+	if (cic == NULL || atomic_read(&cic->ioc->nr_tasks) == 0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1812: FILE: block/bfq-iosched.c:603:
+	struct bfq_entity *entity = &bfqq->entity;
+	return entity->budget - entity->service;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1817: FILE: block/bfq-iosched.c:608:
+	BUG_ON(bfqq != bfqd->active_queue);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1893: FILE: block/bfq-iosched.c:684:
+	BUG_ON(bfqq != bfqd->active_queue);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1895: FILE: block/bfq-iosched.c:686:
+	if (bfq_bfqq_sync(bfqq)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1914: FILE: block/bfq-iosched.c:705:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_rq"
#1930: FILE: block/bfq-iosched.c:721:
+	if (next_rq != NULL)

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#1943: FILE: block/bfq-iosched.c:734:
+	 * amount of sectors transfered in 0.75 * timeout_sync at the
 	                     ^^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2086: FILE: block/bfq-iosched.c:877:
+	if (bfqq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_rq"
#2099: FILE: block/bfq-iosched.c:890:
+	if (next_rq != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#2100: FILE: block/bfq-iosched.c:891:
+		if (next_rq->hard_nr_sectors > bfq_bfqq_budget_left(bfqq)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2103: FILE: block/bfq-iosched.c:894:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2137: FILE: block/bfq-iosched.c:928:
+	BUG_ON(RB_EMPTY_ROOT(&bfqq->sort_list));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#2144: FILE: block/bfq-iosched.c:935:
+		if (rq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqd->active_cic"
#2164: FILE: block/bfq-iosched.c:955:
+		if (bfqd->active_cic == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2174: FILE: block/bfq-iosched.c:965:
+	if (bfqd->busy_queues > 1 && ((!bfq_bfqq_sync(bfqq) &&
+	    dispatched >= bfqd->bfq_max_budget_async_rq) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq->next_rq"
#2189: FILE: block/bfq-iosched.c:980:
+	while (bfqq->next_rq != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2194: FILE: block/bfq-iosched.c:985:
+	BUG_ON(!list_empty(&bfqq->fifo));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2209: FILE: block/bfq-iosched.c:1000:
+	if (bfqq != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2226: FILE: block/bfq-iosched.c:1017:
+	BUG_ON(bfqd->busy_queues != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2265: FILE: block/bfq-iosched.c:1056:
+		BUG_ON(timer_pending(&bfqd->idle_slice_timer));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2284: FILE: block/bfq-iosched.c:1075:
+	BUG_ON(atomic_read(&bfqq->ref) <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2289: FILE: block/bfq-iosched.c:1080:
+	BUG_ON(rb_first(&bfqq->sort_list) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rb_first"
#2289: FILE: block/bfq-iosched.c:1080:
+	BUG_ON(rb_first(&bfqq->sort_list) != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2290: FILE: block/bfq-iosched.c:1081:
+	BUG_ON(bfqq->allocated[READ] + bfqq->allocated[WRITE] != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2291: FILE: block/bfq-iosched.c:1082:
+	BUG_ON(bfqq->entity.tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq->entity.tree"
#2291: FILE: block/bfq-iosched.c:1082:
+	BUG_ON(bfqq->entity.tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2292: FILE: block/bfq-iosched.c:1083:
+	BUG_ON(bfq_bfqq_busy(bfqq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2293: FILE: block/bfq-iosched.c:1084:
+	BUG_ON(bfqd->active_queue == bfqq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2325: FILE: block/bfq-iosched.c:1116:
+		printk(KERN_ERR "bfq: bad prio %x\n", ioprio_class);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2365: FILE: block/bfq-iosched.c:1156:
+	struct bfq_group *bfqg;
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2365: FILE: block/bfq-iosched.c:1156:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#2365: FILE: block/bfq-iosched.c:1156:
+	unsigned long uninitialized_var(flags);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqd"
#2368: FILE: block/bfq-iosched.c:1159:
+	if (unlikely(bfqd == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2372: FILE: block/bfq-iosched.c:1163:
+	if (bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bfqq"
#2377: FILE: block/bfq-iosched.c:1168:
+		if (new_bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2384: FILE: block/bfq-iosched.c:1175:
+	if (bfqq != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2404: FILE: block/bfq-iosched.c:1195:
+	if (bfqq == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bfqq"
#2405: FILE: block/bfq-iosched.c:1196:
+		if (new_bfqq != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2417: FILE: block/bfq-iosched.c:1208:
+			new_bfqq = kmem_cache_alloc_node(bfq_pool,
+					gfp_mask | __GFP_NOFAIL | __GFP_ZERO,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2423: FILE: block/bfq-iosched.c:1214:
+			bfqq = kmem_cache_alloc_node(bfq_pool,
+					gfp_mask | __GFP_ZERO,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2425: FILE: block/bfq-iosched.c:1216:
+			if (bfqq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new_bfqq"
#2451: FILE: block/bfq-iosched.c:1242:
+	if (new_bfqq != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2455: FILE: block/bfq-iosched.c:1246:
+	WARN_ON((gfp_mask & __GFP_WAIT) && bfqq == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2471: FILE: block/bfq-iosched.c:1262:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2490: FILE: block/bfq-iosched.c:1281:
+	if (bfqq == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2492: FILE: block/bfq-iosched.c:1283:
+		if (bfqq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!async_bfqq"
#2499: FILE: block/bfq-iosched.c:1290:
+	if (!is_sync && *async_bfqq == NULL) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2514: FILE: block/bfq-iosched.c:1305:
+	cic->ttime_samples = (7*cic->ttime_samples + 256) / 8;
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2515: FILE: block/bfq-iosched.c:1306:
+	cic->ttime_total = (7*cic->ttime_total + 256*ttime) / 8;
 	                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2515: FILE: block/bfq-iosched.c:1306:
+	cic->ttime_total = (7*cic->ttime_total + 256*ttime) / 8;
 	                                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2539: FILE: block/bfq-iosched.c:1330:
+		sdist = min(sdist, (cic->seek_mean * 4) + 2*1024*1024);
 		                                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2539: FILE: block/bfq-iosched.c:1330:
+		sdist = min(sdist, (cic->seek_mean * 4) + 2*1024*1024);
 		                                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2541: FILE: block/bfq-iosched.c:1332:
+		sdist = min(sdist, (cic->seek_mean * 4)	+ 2*1024*64);
 		                                       	   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2541: FILE: block/bfq-iosched.c:1332:
+		sdist = min(sdist, (cic->seek_mean * 4)	+ 2*1024*64);
 		                                       	        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2543: FILE: block/bfq-iosched.c:1334:
+	cic->seek_samples = (7*cic->seek_samples + 256) / 8;
 	                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2544: FILE: block/bfq-iosched.c:1335:
+	cic->seek_total = (7*cic->seek_total + (u64)256*sdist) / 8;
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2544: FILE: block/bfq-iosched.c:1335:
+	cic->seek_total = (7*cic->seek_total + (u64)256*sdist) / 8;
 	                                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2545: FILE: block/bfq-iosched.c:1336:
+	total = cic->seek_total + (cic->seek_samples/2);
 	                                            ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#2743: FILE: block/bfq-iosched.c:1534:
+	if (cic == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2747: FILE: block/bfq-iosched.c:1538:
+	if (bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2764: FILE: block/bfq-iosched.c:1555:
+	if (bfqq != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2767: FILE: block/bfq-iosched.c:1558:
+		BUG_ON(!bfqq->allocated[rw]);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cic"
#2799: FILE: block/bfq-iosched.c:1590:
+	if (cic == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2805: FILE: block/bfq-iosched.c:1596:
+	if (bfqq == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#2807: FILE: block/bfq-iosched.c:1598:
+		if (bfqq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cic"
#2824: FILE: block/bfq-iosched.c:1615:
+	if (cic != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2868: FILE: block/bfq-iosched.c:1659:
+	if (bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#2893: FILE: block/bfq-iosched.c:1684:
+	if (bfqq != NULL) {

WARNING:TYPO_SPELLING: 'untill' may be misspelled - perhaps 'until'?
#2904: FILE: block/bfq-iosched.c:1695:
+ * exist for sure untill all the requests on a device are gone).
                   ^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2934: FILE: block/bfq-iosched.c:1725:
+	BUG_ON(bfqd->active_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd->active_queue"
#2934: FILE: block/bfq-iosched.c:1725:
+	BUG_ON(bfqd->active_queue != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2946: FILE: block/bfq-iosched.c:1737:
+	BUG_ON(timer_pending(&bfqd->idle_slice_timer));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqd"
#2958: FILE: block/bfq-iosched.c:1749:
+	if (bfqd == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqg"
#2966: FILE: block/bfq-iosched.c:1757:
+	if (bfqg == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfq_pool"
#3001: FILE: block/bfq-iosched.c:1792:
+	if (bfq_pool != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfq_ioc_pool"
#3003: FILE: block/bfq-iosched.c:1794:
+	if (bfq_ioc_pool != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfq_pool"
#3010: FILE: block/bfq-iosched.c:1801:
+	if (bfq_pool == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfq_ioc_pool"
#3017: FILE: block/bfq-iosched.c:1808:
+	if (bfq_ioc_pool == NULL)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3035: FILE: block/bfq-iosched.c:1826:
+	*var = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3039: FILE: block/bfq-iosched.c:1830:
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+static ssize_t __FUNC(elevator_t *e, char *page)			\
+{									\
+	struct bfq_data *bfqd = e->elevator_data;			\
+	unsigned int __data = __VAR;					\
+	if (__CONV)							\
+		__data = jiffies_to_msecs(__data);			\
+	return bfq_var_show(__data, (page));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3048: FILE: block/bfq-iosched.c:1839:
+}
+SHOW_FUNCTION(bfq_quantum_show, bfqd->bfq_quantum, 0);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__PTR' - possible side-effects?
#3060: FILE: block/bfq-iosched.c:1851:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct bfq_data *bfqd = e->elevator_data;			\
+	unsigned int __data;						\
+	int ret = bfq_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#3060: FILE: block/bfq-iosched.c:1851:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct bfq_data *bfqd = e->elevator_data;			\
+	unsigned int __data;						\
+	int ret = bfq_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#3060: FILE: block/bfq-iosched.c:1851:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct bfq_data *bfqd = e->elevator_data;			\
+	unsigned int __data;						\
+	int ret = bfq_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3060: FILE: block/bfq-iosched.c:1851:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+static ssize_t __FUNC(elevator_t *e, const char *page, size_t count)	\
+{									\
+	struct bfq_data *bfqd = e->elevator_data;			\
+	unsigned int __data;						\
+	int ret = bfq_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3076: FILE: block/bfq-iosched.c:1867:
+}
+STORE_FUNCTION(bfq_quantum_store, &bfqd->bfq_quantum, 1, INT_MAX, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3078: FILE: block/bfq-iosched.c:1869:
+STORE_FUNCTION(bfq_fifo_expire_sync_store, &bfqd->bfq_fifo_expire[1], 1,
+		INT_MAX, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3080: FILE: block/bfq-iosched.c:1871:
+STORE_FUNCTION(bfq_fifo_expire_async_store, &bfqd->bfq_fifo_expire[0], 1,
+		INT_MAX, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3083: FILE: block/bfq-iosched.c:1874:
+STORE_FUNCTION(bfq_back_seek_penalty_store, &bfqd->bfq_back_penalty, 1,
+		INT_MAX, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3086: FILE: block/bfq-iosched.c:1877:
+STORE_FUNCTION(bfq_max_budget_async_rq_store, &bfqd->bfq_max_budget_async_rq,
+		1, INT_MAX, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3088: FILE: block/bfq-iosched.c:1879:
+STORE_FUNCTION(bfq_timeout_async_store, &bfqd->bfq_timeout[ASYNC], 0,
+		INT_MAX, 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3108: FILE: block/bfq-iosched.c:1899:
+	if (__data == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3110: FILE: block/bfq-iosched.c:1901:
+	else {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3141: FILE: block/bfq-iosched.c:1932:
+	__ATTR(name, S_IRUGO|S_IWUSR, bfq_##name##_show, bfq_##name##_store)
 	                    ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3141: FILE: block/bfq-iosched.c:1932:
+	__ATTR(name, S_IRUGO|S_IWUSR, bfq_##name##_show, bfq_##name##_store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3159: FILE: block/bfq-iosched.c:1950:
+^I^I.elevator_merge_fn = ^I^Ibfq_merge,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#3205: FILE: block/bfq-iosched.c:1996:
+	DECLARE_COMPLETION_ONSTACK(all_gone);
+	elv_unregister(&iosched_bfq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3226: FILE: block/bfq-sched.c:1:
+/*

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#3237: FILE: block/bfq-sched.c:12:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#3237: FILE: block/bfq-sched.c:12:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#3238: FILE: block/bfq-sched.c:13:
+	for (; entity != NULL; entity = entity->parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#3240: FILE: block/bfq-sched.c:15:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#3240: FILE: block/bfq-sched.c:15:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#3240: FILE: block/bfq-sched.c:15:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#3251: FILE: block/bfq-sched.c:26:
+	if (sd->active_entity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_active"
#3265: FILE: block/bfq-sched.c:40:
+	if (next_active != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#3268: FILE: block/bfq-sched.c:43:
+		if (entity != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3278: FILE: block/bfq-sched.c:53:
+	BUG_ON(sd->next_active != entity);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#3281: FILE: block/bfq-sched.c:56:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#3281: FILE: block/bfq-sched.c:56:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#3282: FILE: block/bfq-sched.c:57:
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#3284: FILE: block/bfq-sched.c:59:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#3284: FILE: block/bfq-sched.c:59:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#3284: FILE: block/bfq-sched.c:59:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#3285: FILE: block/bfq-sched.c:60:
+	for (parent = NULL; entity != NULL; entity = parent)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3340: FILE: block/bfq-sched.c:115:
+	BUG_ON(entity->weight == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#3358: FILE: block/bfq-sched.c:133:
+	if (node != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3372: FILE: block/bfq-sched.c:147:
+	BUG_ON(entity->tree != root);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3382: FILE: block/bfq-sched.c:157:
+	BUG_ON(entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity"
#3382: FILE: block/bfq-sched.c:157:
+	BUG_ON(entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity->my_sched_data"
#3384: FILE: block/bfq-sched.c:159:
+	if (entity->my_sched_data == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3401: FILE: block/bfq-sched.c:176:
+	BUG_ON(entity->tree != &st->idle);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3415: FILE: block/bfq-sched.c:190:
+	if (bfqq != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3433: FILE: block/bfq-sched.c:208:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#3433: FILE: block/bfq-sched.c:208:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#3435: FILE: block/bfq-sched.c:210:
+	while (*node != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#3466: FILE: block/bfq-sched.c:241:
+	if (node != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#3508: FILE: block/bfq-sched.c:283:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_right"
#3511: FILE: block/bfq-sched.c:286:
+	if (node == parent->rb_left && parent->rb_right != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_left"
#3513: FILE: block/bfq-sched.c:288:
+	else if (parent->rb_left != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#3538: FILE: block/bfq-sched.c:313:
+	if (node->rb_left != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_right"
#3540: FILE: block/bfq-sched.c:315:
+	else if (node->rb_right != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3545: FILE: block/bfq-sched.c:320:
+	if (bfqq != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3564: FILE: block/bfq-sched.c:339:
+	if (bfqq != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3583: FILE: block/bfq-sched.c:358:
+	if (node->rb_right == NULL && node->rb_left == NULL)
[...]
+	else if (node->rb_right == NULL)
[...]
+	else if (node->rb_left == NULL)
[...]
+	else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#3583: FILE: block/bfq-sched.c:358:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#3583: FILE: block/bfq-sched.c:358:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#3585: FILE: block/bfq-sched.c:360:
+	else if (node->rb_right == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#3587: FILE: block/bfq-sched.c:362:
+	else if (node->rb_left == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#3589: FILE: block/bfq-sched.c:364:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "deepest->rb_right"
#3591: FILE: block/bfq-sched.c:366:
+		if (deepest->rb_right != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#3614: FILE: block/bfq-sched.c:389:
+	if (node != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3617: FILE: block/bfq-sched.c:392:
+	if (bfqq != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first_idle"
#3633: FILE: block/bfq-sched.c:408:
+	if (first_idle == NULL || bfq_gt(first_idle->finish, entity->finish))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last_idle"
#3635: FILE: block/bfq-sched.c:410:
+	if (last_idle == NULL || bfq_gt(entity->finish, last_idle->finish))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3640: FILE: block/bfq-sched.c:415:
+	if (bfqq != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3659: FILE: block/bfq-sched.c:434:
+	BUG_ON(!entity->on_st);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqq"
#3663: FILE: block/bfq-sched.c:438:
+	if (bfqq != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last_idle"
#3693: FILE: block/bfq-sched.c:468:
+	if (RB_EMPTY_ROOT(&st->active) && last_idle != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first_idle"
#3702: FILE: block/bfq-sched.c:477:
+	if (first_idle != NULL && !bfq_gt(first_idle->finish, st->vtime))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3726: FILE: block/bfq-sched.c:501:
+		BUG_ON(st->wsum == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3797: FILE: block/bfq-sched.c:572:
+		BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#3797: FILE: block/bfq-sched.c:572:
+		BUG_ON(entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3831: FILE: block/bfq-sched.c:606:
+		BUG_ON(entity->on_st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3888: FILE: block/bfq-sched.c:663:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#3888: FILE: block/bfq-sched.c:663:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#3890: FILE: block/bfq-sched.c:665:
+	if (was_active) {
[...]
+	} else if (entity->tree == &st->active)
[...]
+	else if (entity->tree == &st->idle)
[...]
+	else if (entity->tree != NULL)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#3897: FILE: block/bfq-sched.c:672:
+	else if (entity->tree != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3898: FILE: block/bfq-sched.c:673:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3908: FILE: block/bfq-sched.c:683:
+	BUG_ON(sd->active_entity == entity);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3909: FILE: block/bfq-sched.c:684:
+	BUG_ON(sd->next_active == entity);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->next_active"
#3935: FILE: block/bfq-sched.c:710:
+		if (sd->next_active != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#4003: FILE: block/bfq-sched.c:778:
+	while (node != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4009: FILE: block/bfq-sched.c:784:
+		BUG_ON(bfq_gt(entry->min_start, st->vtime));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#4011: FILE: block/bfq-sched.c:786:
+		if (node->rb_left != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first"
#4019: FILE: block/bfq-sched.c:794:
+		if (first != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4024: FILE: block/bfq-sched.c:799:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#4024: FILE: block/bfq-sched.c:799:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4044: FILE: block/bfq-sched.c:819:
+	BUG_ON(bfq_gt(entity->start, st->vtime));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4067: FILE: block/bfq-sched.c:842:
+	BUG_ON(sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#4067: FILE: block/bfq-sched.c:842:
+	BUG_ON(sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#4071: FILE: block/bfq-sched.c:846:
+		if (entity != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4094: FILE: block/bfq-sched.c:869:
+	BUG_ON(bfqd->active_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd->active_queue"
#4094: FILE: block/bfq-sched.c:869:
+	BUG_ON(bfqd->active_queue != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd"
#4100: FILE: block/bfq-sched.c:875:
+	for (; sd != NULL; sd = entity->my_sched_data) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4102: FILE: block/bfq-sched.c:877:
+		BUG_ON(entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity"
#4102: FILE: block/bfq-sched.c:877:
+		BUG_ON(entity == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4107: FILE: block/bfq-sched.c:882:
+	BUG_ON(bfqq == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfqq"
#4107: FILE: block/bfq-sched.c:882:
+	BUG_ON(bfqq == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd->active_cic"
#4114: FILE: block/bfq-sched.c:889:
+	if (bfqd->active_cic != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4148: FILE: block/bfq-sched.c:923:
+	BUG_ON(!bfq_bfqq_busy(bfqq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4149: FILE: block/bfq-sched.c:924:
+	BUG_ON(!RB_EMPTY_ROOT(&bfqq->sort_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4155: FILE: block/bfq-sched.c:930:
+	BUG_ON(bfqd->busy_queues == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4166: FILE: block/bfq-sched.c:941:
+	BUG_ON(bfq_bfqq_busy(bfqq));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4167: FILE: block/bfq-sched.c:942:
+	BUG_ON(bfqq == bfqd->active_queue);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4182: FILE: block/bfq.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4209: FILE: block/bfq.h:28:
+typedef unsigned long bfq_weight_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4210: FILE: block/bfq.h:29:
+typedef unsigned long bfq_service_t;

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#4377: FILE: block/bfq.h:196:
+ * @bfq_timeout: timeout for bfq_queues to consume their budget; used to
+ *               to prevent seeky queues to impose long latencies to well

WARNING:TYPO_SPELLING: 'distruction' may be misspelled - perhaps 'destruction'?
#4455: FILE: block/bfq.h:274:
+ * migration followed by cgroup distruction).
                                 ^^^^^^^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4597: FILE: block/bfq.h:416:
+	spinlock_t lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4615: FILE: block/bfq.h:434:
+	BUG_ON(idx >= BFQ_IOPRIO_CLASSES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4616: FILE: block/bfq.h:435:
+	BUG_ON(sched_data == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sched_data"
#4616: FILE: block/bfq.h:435:
+	BUG_ON(sched_data == NULL);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#4633: FILE: block/bfq.h:452:
+static inline void call_for_each_cic(struct io_context *ioc,
+				     void (*func)(struct io_context *,
+				     struct cfq_io_context *))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4635: FILE: block/bfq.h:454:
+				     void (*func)(struct io_context *,
+				     struct cfq_io_context *))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bfqd"
#4667: FILE: block/bfq.h:486:
+	if (bfqd != NULL) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 109 warnings, 206 checks, 4592 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205617.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
