WARNING:REPEATED_WORD: Possible repeated word: 'and'
#140: 
and and nothing more - it accepts pages from tracers, and relays the

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: linux/relay.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#322: FILE: linux/relay.h:2:
+ * linux/include/linux/relay.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#365: FILE: linux/relay.h:45:
+^Istruct timer_list timer; ^I/* reader wake-up timer */$

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#380: FILE: linux/relay.h:60:
+struct rchan
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#396: FILE: linux/relay.h:76:
+struct rchan_callbacks
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#437: FILE: linux/relay.h:117:
+struct relay_page_callbacks
+{

WARNING:SPACING: Unnecessary space before function pointer arguments
#447: FILE: linux/relay.h:127:
+	void (*page_released) (struct page *page, void *private_data);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#459: FILE: linux/relay.h:139:
+	void (*page_stolen) (struct page *page, void *private_data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: linux/relay.h:146:
+extern struct rchan *relay_open(const char *base_filename,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#472: FILE: linux/relay.h:152:
+extern void relay_add_page(struct rchan *chan,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#476: FILE: linux/relay.h:156:
+extern void relay_add_pages(struct rchan *chan,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#480: FILE: linux/relay.h:160:
+extern void relay_flush(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#481: FILE: linux/relay.h:161:
+extern void relay_close(struct rchan *chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#482: FILE: linux/relay.h:162:
+extern void relay_reset(struct rchan *chan);

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#494: FILE: relay.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#503: FILE: relay.c:10:
+ * Moved to kernel/relay.c by Paul Mundt, 2006.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#505: FILE: relay.c:12:
+ * ^I(mathieu.desnoyers@polymtl.ca)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*chan)...) over kzalloc(sizeof(struct rchan)...)
#574: FILE: relay.c:81:
+	chan = kzalloc(sizeof(struct rchan), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#583: FILE: relay.c:90:
+	strlcpy(chan->base_filename, base_filename, NAME_MAX);

WARNING:LINE_SPACING: Missing a blank line after declarations
#865: FILE: relay.c:372:
+	struct rchan *chan = container_of(kref, struct rchan, kref);
+	kfree(chan);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'fileystem' may be misspelled - perhaps 'filesystem'?
#889: FILE: relay.c:396:
+ *	Removes the file from the fileystem, which also frees the
   	                          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: relay.c:403:
+	struct rchan_buf *buf = container_of(kref, struct rchan_buf, kref);
+	buf->chan->cb->remove_buf_file(buf->dentry);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#929: FILE: relay.c:436:
+					   S_IRUSR, buf);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*buf)...) over kzalloc(sizeof(struct rchan_buf)...)
#944: FILE: relay.c:451:
+	struct rchan_buf *buf = kzalloc(sizeof(struct rchan_buf), GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#945: FILE: relay.c:452:
+	struct rchan_buf *buf = kzalloc(sizeof(struct rchan_buf), GFP_KERNEL);
+	if (!buf)

ERROR:CODE_INDENT: code indent should use tabs where possible
#963: FILE: relay.c:470:
+ ^Istruct rchan_buf *buf = NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#963: FILE: relay.c:470:
+ ^Istruct rchan_buf *buf = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#963: FILE: relay.c:470:
+ ^Istruct rchan_buf *buf = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: relay.c:486:
+ ^Ibuf->cpu = cpu;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#979: FILE: relay.c:486:
+ ^Ibuf->cpu = cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: relay.c:486:
+ ^Ibuf->cpu = cpu;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#980: FILE: relay.c:487:
+ ^I__relay_reset(buf, 1);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#980: FILE: relay.c:487:
+ ^I__relay_reset(buf, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: relay.c:487:
+ ^I__relay_reset(buf, 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#983: FILE: relay.c:490:
+ ^I^Ichan->buf[0] = buf;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#983: FILE: relay.c:490:
+ ^I^Ichan->buf[0] = buf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: relay.c:490:
+ ^I^Ichan->buf[0] = buf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#984: FILE: relay.c:491:
+ ^I^Ibuf->cpu = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#984: FILE: relay.c:491:
+ ^I^Ibuf->cpu = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: relay.c:491:
+ ^I^Ibuf->cpu = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#985: FILE: relay.c:492:
+  ^I}$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#985: FILE: relay.c:492:
+  ^I}$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: relay.c:492:
+  ^I}$

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: relay.c:497:
+ ^Irelay_destroy_buf(buf);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#990: FILE: relay.c:497:
+ ^Irelay_destroy_buf(buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: relay.c:497:
+ ^Irelay_destroy_buf(buf);$

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#1007: FILE: relay.c:514:
+	    (waitqueue_active(&buf->read_wait)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1026: FILE: relay.c:533:
+	struct rchan_buf *buf = (struct rchan_buf *)data;
+	wake_up_interruptible(&buf->read_wait);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1040: FILE: relay.c:547:
+	if (init) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1044: FILE: relay.c:551:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1102: FILE: relay.c:609:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1106: FILE: relay.c:613:
+static int relay_file_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1109: FILE: relay.c:616:
+	struct rchan_buf *buf = inode->i_private;
+	kref_get(&buf->kref);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1112: FILE: relay.c:619:
+	return nonseekable_open(inode, filp);
 	                               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1117: FILE: relay.c:624:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'implemention' may be misspelled - perhaps 'implementation'?
#1120: FILE: relay.c:627:
+ *	Poll implemention.
   	     ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1122: FILE: relay.c:629:
+static unsigned int relay_file_poll(struct file *filp, poll_table *wait)
                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1131: FILE: relay.c:638:
+		poll_wait(filp, &buf->read_wait, wait);
 		          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1142: FILE: relay.c:649:
+ *	@filp: the file
   	 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1147: FILE: relay.c:654:
+static int relay_file_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1150: FILE: relay.c:657:
+	struct rchan_buf *buf = filp->private_data;
+	kref_put(&buf->kref, relay_remove_buf);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: relay.c:685:
+		struct relay_page *rpage;
+		rpage = list_first_entry(&buf->pages, struct relay_page, list);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1221: FILE: relay.c:728:
+static ssize_t relay_file_read_pages(struct file *filp, loff_t *ppos,
                                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1252: FILE: relay.c:759:
+static ssize_t relay_file_read(struct file *filp,
                                             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1258: FILE: relay.c:765:
+	read_descriptor_t desc;
+	desc.written = 0;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1262: FILE: relay.c:769:
+	return relay_file_read_pages(filp, ppos, page_read_actor,
 	                             ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1285: FILE: relay.c:792:
+		struct relay_page *rpage;
+		rpage = list_first_entry(&buf->pages, struct relay_page, list);

WARNING:CONST_STRUCT: struct pipe_buf_operations should normally be const
#1295: FILE: relay.c:802:
+static struct pipe_buf_operations relay_pipe_buf_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:CODE_INDENT: code indent should use tabs where possible
#1362: FILE: relay.c:869:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1362: FILE: relay.c:869:
+        return ret;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#1379: FILE: relay.c:886:
+		if (ret < 0)
[...]
+		else if (!ret) {
[...]

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1415: FILE: relay.c:922:
+ * ^Irelay_hotcpu_callback - CPU hotplug callback$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1416: FILE: relay.c:923:
+ * ^I@nb: notifier block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1417: FILE: relay.c:924:
+ * ^I@action: hotplug action to take$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1418: FILE: relay.c:925:
+ * ^I@hcpu: CPU number$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1420: FILE: relay.c:927:
+ * ^IReturns the success/failure of the operation. (%NOTIFY_OK, %NOTIFY_BAD)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1423: FILE: relay.c:930:
+static int __cpuinit relay_hotcpu_callback(struct notifier_block *nb,
+				unsigned long action,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1438: FILE: relay.c:945:
+				printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'relay_hotcpu_callback', this function's name, in a string
#1439: FILE: relay.c:946:
+					"relay_hotcpu_callback: cpu %d buffer "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1440: FILE: relay.c:947:
+					"relay_hotcpu_callback: cpu %d buffer "
+					"creation failed\n", hotcpu);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1450: FILE: relay.c:957:
+		 * final relay_flush() call. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PATCH_PREFIX: patch prefix 'include' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1466: FILE: linux/relay_pagewriter.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1467: FILE: linux/relay_pagewriter.h:2:
+ * linux/include/linux/relay_pagewriter.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1529: FILE: linux/relay_pagewriter.h:64:
+extern size_t pagewriter_switch_page_default_callback(struct pagewriter_buf *b,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1565: FILE: linux/relay_pagewriter.h:100:
+	void (*new_page) (struct pagewriter_buf *buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1713: FILE: linux/relay_pagewriter.h:248:
+		size_t new_offset = buf->offset + length;
+		if (likely(new_offset != PAGE_SIZE)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1715: FILE: linux/relay_pagewriter.h:250:
+			size_t padding = PAGE_SIZE - buf->offset;
+			pagewriter->cb->write_padding(buf, padding, reserved);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1742: FILE: linux/relay_pagewriter.h:277:
+	BUG_ON(length >= PAGE_SIZE - 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1746: FILE: linux/relay_pagewriter.h:281:
+extern struct pagewriter *pagewriter_open(const char *base_filename,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1753: FILE: linux/relay_pagewriter.h:288:
+extern void pagewriter_flush(struct pagewriter *pagewriter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1754: FILE: linux/relay_pagewriter.h:289:
+extern void pagewriter_close(struct pagewriter *pagewriter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1755: FILE: linux/relay_pagewriter.h:290:
+extern void pagewriter_reset(struct pagewriter *pagewriter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1756: FILE: linux/relay_pagewriter.h:291:
+extern void pagewriter_save_flight_data(struct pagewriter *pagewriter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1757: FILE: linux/relay_pagewriter.h:292:
+extern int pagewriter_late_setup(struct pagewriter *pagewriter,

WARNING:PATCH_PREFIX: patch prefix 'kernel' exists, appears to be a -p0 patch

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1764: FILE: relay_pagewriter.c:1:
+/*

WARNING:TYPO_SPELLING: 'usespace' may be misspelled - perhaps 'userspace'?
#1768: FILE: relay_pagewriter.c:5:
+ * usespace, and reclaim them after they've been read.
    ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1778: FILE: relay_pagewriter.c:15:
+ * ^I(mathieu.desnoyers@polymtl.ca)$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pagewriter)...) over kzalloc(sizeof(struct pagewriter)...)
#1842: FILE: relay_pagewriter.c:79:
+	pagewriter = kzalloc(sizeof(struct pagewriter), GFP_KERNEL);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1847: FILE: relay_pagewriter.c:84:
+		strlcpy(pagewriter->base_filename, base_filename, NAME_MAX);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1909: FILE: relay_pagewriter.c:146:
+		struct pagewriter_buf *buf = pagewriter->buf[i];
+		if (buf) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1913: FILE: relay_pagewriter.c:150:
+				size_t padlen = PAGE_SIZE - buf->offset;
+				pagewriter->cb->write_padding(buf, padlen,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1945: FILE: relay_pagewriter.c:182:
+		printk(KERN_WARNING "pagewriter: one or more items not logged "

WARNING:SPLIT_STRING: quoted string split across lines
#1946: FILE: relay_pagewriter.c:183:
+		printk(KERN_WARNING "pagewriter: one or more items not logged "
+		       "[item size (%Zd) > PAGE_SIZE (%lu)]\n",

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#1946: FILE: relay_pagewriter.c:183:
+		       "[item size (%Zd) > PAGE_SIZE (%lu)]\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rpage)...) over kmalloc(sizeof(struct relay_page)...)
#2184: FILE: relay_pagewriter.c:421:
+		rpage = kmalloc(sizeof(struct relay_page), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*buf)...) over kzalloc(sizeof(struct pagewriter_buf)...)
#2212: FILE: relay_pagewriter.c:449:
+	struct pagewriter_buf *buf = kzalloc(sizeof(struct pagewriter_buf),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2238: FILE: relay_pagewriter.c:475:
+static struct pagewriter_buf *pagewriter_open_buf(struct pagewriter *pagewriter,
+					     unsigned int cpu)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2296: FILE: relay_pagewriter.c:533:
+ * ^Ipagewriter_page_released_callback - relay_page page_released impl$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2297: FILE: relay_pagewriter.c:534:
+ * ^I@page: the page released$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2298: FILE: relay_pagewriter.c:535:
+ * ^I@private_data: contains associated pagewriter_buf$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2300: FILE: relay_pagewriter.c:537:
+ * ^Irelay has notified us that a page we gave it has been read and$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2301: FILE: relay_pagewriter.c:538:
+ * ^Iis now available for us to re-use.  We simply add it back to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2302: FILE: relay_pagewriter.c:539:
+ * ^Ithe page pool for that buf.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2315: FILE: relay_pagewriter.c:552:
+ * ^Ipagewriter_page_stolen_callback - relay_page page_stolen impl$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2316: FILE: relay_pagewriter.c:553:
+ * ^I@page: the page released$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2317: FILE: relay_pagewriter.c:554:
+ * ^I@private_data: contains associated pagewriter_buf$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2319: FILE: relay_pagewriter.c:556:
+ * ^Irelay has notified us that a page we gave it has been stolen.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2320: FILE: relay_pagewriter.c:557:
+ * ^IWe simply allocate a new one and add it to the page pool for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2321: FILE: relay_pagewriter.c:558:
+ * ^Ithat buf.$

ERROR:SPACING: space required before the open parenthesis '('
#2437: FILE: relay_pagewriter.c:674:
+	if(buf->n_pages_flight > buf->pagewriter->n_pages)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2456: FILE: relay_pagewriter.c:693:
+ * ^Ipagewriter_hotcpu_callback - CPU hotplug callback$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2457: FILE: relay_pagewriter.c:694:
+ * ^I@nb: notifier block$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2458: FILE: relay_pagewriter.c:695:
+ * ^I@action: hotplug action to take$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2459: FILE: relay_pagewriter.c:696:
+ * ^I@hcpu: CPU number$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2461: FILE: relay_pagewriter.c:698:
+ * ^IReturns the success/failure of the operation. (%NOTIFY_OK, %NOTIFY_BAD)$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2480: FILE: relay_pagewriter.c:717:
+				printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pagewriter_hotcpu_callback', this function's name, in a string
#2481: FILE: relay_pagewriter.c:718:
+					"pagewriter_hotcpu_callback: cpu %d "

WARNING:SPLIT_STRING: quoted string split across lines
#2482: FILE: relay_pagewriter.c:719:
+					"pagewriter_hotcpu_callback: cpu %d "
+				       "buffer creation failed\n", hotcpu);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2492: FILE: relay_pagewriter.c:729:
+		 * final relay_flush() call. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2500: FILE: relay_pagewriter.c:737:
+{
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216518.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 99 warnings, 24 checks, 2176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216518.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
