WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#45: FILE: extensions/.u32-test:2:
+[ -f "$KERNEL_DIR/include/linux/netfilter/xt_u32.h" ] && echo u32

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#51: FILE: extensions/libipt_u32.c:1:
+/* Shared library add-on to iptables to add u32 matching,

ERROR:SPACING: space prohibited after that open parenthesis '('
#75: FILE: extensions/libipt_u32.c:25:
+	printf( "u32 v%s options:\n"

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#139: FILE: extensions/libipt_u32.c:89:
+	uint32_t number;

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: extensions/libipt_u32.c:91:
+	char *end;
+	errno = 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#160: FILE: extensions/libipt_u32.c:110:
+	char *arg = argv[optind-1]; /* the argument string */
 	                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: extensions/libipt_u32.c:143:
+^I^I^I^I           "u32: at char %d: too many \"&&\"s",$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: extensions/libipt_u32.c:144:
+^I^I^I^I           arg - start);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#206: FILE: extensions/libipt_u32.c:156:
+^I^I^I^I^I           "u32: at char %d: "$

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: extensions/libipt_u32.c:157:
+^I^I^I^I^I           "location spec missing",$

WARNING:SPLIT_STRING: quoted string split across lines
#207: FILE: extensions/libipt_u32.c:157:
+					           "u32: at char %d: "
+					           "location spec missing",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#208: FILE: extensions/libipt_u32.c:158:
+^I^I^I^I^I           arg - start);$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#217: FILE: extensions/libipt_u32.c:167:
+						data->tests[testind].location[locind].nextop = XT_U32_AND;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#220: FILE: extensions/libipt_u32.c:170:
+						if (*arg != '<')

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#222: FILE: extensions/libipt_u32.c:172:
+								   "u32: at char %d: a second < expected", arg - start);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#223: FILE: extensions/libipt_u32.c:173:
+						data->tests[testind].location[locind].nextop = XT_U32_LEFTSH;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#226: FILE: extensions/libipt_u32.c:176:
+						if (*arg != '>')

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#228: FILE: extensions/libipt_u32.c:178:
+								   "u32: at char %d: a second > expected", arg - start);

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#229: FILE: extensions/libipt_u32.c:179:
+						data->tests[testind].location[locind].nextop = XT_U32_RIGHTSH;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#231: FILE: extensions/libipt_u32.c:181:
+						data->tests[testind].location[locind].nextop = XT_U32_AT;

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#234: FILE: extensions/libipt_u32.c:184:
+							"u32: at char %d: operator expected", arg - start);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: extensions/libipt_u32.c:184:
+						exit_error(PARAMETER_PROBLEM,
+							"u32: at char %d: operator expected", arg - start);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#244: FILE: extensions/libipt_u32.c:194:
+						   "u32: at char %d: too many operators", arg - start);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#256: FILE: extensions/libipt_u32.c:206:
+						   "u32: at char %d: a second & was expected", arg - start);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#259: FILE: extensions/libipt_u32.c:209:
+						   "u32: at char %d: value spec missing", arg - start);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#266: FILE: extensions/libipt_u32.c:216:
+							   "u32: at char %d: too many \"&&\"s", arg - start);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#273: FILE: extensions/libipt_u32.c:223:
+			}
+			else { /* read value range */

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#273: FILE: extensions/libipt_u32.c:223:
+			else { /* read value range */

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#277: FILE: extensions/libipt_u32.c:227:
+							   "u32: at char %d: expected , or &&", arg - start);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#280: FILE: extensions/libipt_u32.c:230:
+				data->tests[testind].value[valind].min = parse_number(&arg, arg - start);

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#285: FILE: extensions/libipt_u32.c:235:
+				if (*arg==':') {
 				        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#288: FILE: extensions/libipt_u32.c:238:
+						parse_number(&arg, arg-start);
 						                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#297: FILE: extensions/libipt_u32.c:247:
+						   "u32: at char %d: too many ,'s", arg-start);
 						                                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#310: FILE: extensions/libipt_u32.c:260:
+^I          int numeric)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: extensions/libipt_u32.c:260:
+static void print(const struct ipt_ip *ip, const struct ipt_entry_match *match,
+	          int numeric)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423383.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 20 warnings, 7 checks, 300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423383.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
