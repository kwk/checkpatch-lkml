WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
xsave/xrstor manages the existing and future processor extended states in x86

WARNING:TYPO_SPELLING: 'architecutre' may be misspelled - perhaps 'architecture'?
#37: 
architecutre.
^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'specfically' may be misspelled - perhaps 'specifically'?
#89: 
referred by get/setcontext() will be governed by glibc. This is specfically
                                                                ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#90: 
needed if glibc's get/setcontext() want to play with xsave info aswell.
                                                                ^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#143: FILE: arch/x86/kernel/xsave.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#169: FILE: arch/x86/kernel/xsave.c:27:
+		printk("save_i387_xstate: bad xstate %p\n", buf);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'save_i387_xstate', this function's name, in a string
#169: FILE: arch/x86/kernel/xsave.c:27:
+		printk("save_i387_xstate: bad xstate %p\n", buf);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:BRACES: braces {} should be used on all arms of this statement
#219: FILE: arch/x86/kernel/xsave.c:77:
+	if (xstate) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#220: FILE: arch/x86/kernel/xsave.c:78:
+		err = xrestore_checking((struct xsave_struct *) xstate, size,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#226: FILE: arch/x86/kernel/xsave.c:84:
+		 * knows and not specifed in the user restore masks.
 		                 ^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#230: FILE: arch/x86/kernel/xsave.c:88:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#233: FILE: arch/x86/kernel/xsave.c:91:
+	if (buf) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#242: FILE: arch/x86/kernel/xsave.c:100:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: arch/x86/kernel/xsave.c:149:
+		u32 tmp;
+		__get_user(tmp, &buf1->xstate);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#298: FILE: arch/x86/kernel/xsave.c:156:
+	if (xstate) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#304: FILE: arch/x86/kernel/xsave.c:162:
+		err = xrestore_checking((__force struct xsave_struct *) xstate,

WARNING:TYPO_SPELLING: 'specifed' may be misspelled - perhaps 'specified'?
#310: FILE: arch/x86/kernel/xsave.c:168:
+		 * knows and not specifed in the user restore masks.
 		                 ^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: arch/x86/kernel/xsave.c:172:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#331: FILE: arch/x86/kernel/xsave.c:189:
+	} else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#390: FILE: arch/x86/kernel/xsave.c:248:
+		printk("FP/SSE not shown under xsave features %x\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: arch/x86/kernel/xsave.c:250:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#412: FILE: arch/x86/kernel/xsave.c:270:
+	printk("xsave/xrstor: cntxt size %x, supported lmask %x, hmask %x\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#420: FILE: include/asm-x86/xsave.h:1:
+#ifndef __ASM_X86_64_XSAVE_H

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#423: FILE: include/asm-x86/xsave.h:4:
+#include <asm/processor.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/asm-x86/xsave.h:29:
+extern void xsave_cntxt_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#449: FILE: include/asm-x86/xsave.h:30:
+extern void xsave_init(void);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#460: FILE: include/asm-x86/xsave.h:41:
+	/* This, however, we can work around by forcing the compiler to select
+	   an addressing mode that doesn't require extended registers. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#460: FILE: include/asm-x86/xsave.h:41:
+	   an addressing mode that doesn't require extended registers. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around tsk->thread.xstate->xsave
#462: FILE: include/asm-x86/xsave.h:43:
+			     ::"D" (&(tsk->thread.xstate->xsave)),

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#471: FILE: include/asm-x86/xsave.h:52:
+	int err;
+	__asm__ __volatile__("1: .byte " REX_PREFIX "0x0f,0xae,0x27\n"

WARNING:LINE_SPACING: Missing a blank line after declarations
#534: FILE: include/asm-x86/xsave.h:115:
+	struct xsave_struct *xstate = &tsk->thread.xstate->xsave;
+	if (cpu_has_xsave) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#691: FILE: include/asm-x86/sigcontext.h:206:
+ ^Iu64 xstate_bv;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#691: FILE: include/asm-x86/sigcontext.h:206:
+ ^Iu64 xstate_bv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#691: FILE: include/asm-x86/sigcontext.h:206:
+ ^Iu64 xstate_bv;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#692: FILE: include/asm-x86/sigcontext.h:207:
+ ^Iu64 reserved1[2];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#692: FILE: include/asm-x86/sigcontext.h:207:
+ ^Iu64 reserved1[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: include/asm-x86/sigcontext.h:207:
+ ^Iu64 reserved1[2];$

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: include/asm-x86/sigcontext.h:208:
+ ^Iu64 reserved2[5];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#693: FILE: include/asm-x86/sigcontext.h:208:
+ ^Iu64 reserved2[5];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: include/asm-x86/sigcontext.h:208:
+ ^Iu64 reserved2[5];$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#694: FILE: include/asm-x86/sigcontext.h:209:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: include/asm-x86/sigcontext.h:216:
+ ^Istruct _fpstate fpstate;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#701: FILE: include/asm-x86/sigcontext.h:216:
+ ^Istruct _fpstate fpstate;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: include/asm-x86/sigcontext.h:216:
+ ^Istruct _fpstate fpstate;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#702: FILE: include/asm-x86/sigcontext.h:217:
+ ^Istruct _xsave_hdr_struct xsave_hdr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#702: FILE: include/asm-x86/sigcontext.h:217:
+ ^Istruct _xsave_hdr_struct xsave_hdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: include/asm-x86/sigcontext.h:217:
+ ^Istruct _xsave_hdr_struct xsave_hdr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: include/asm-x86/sigcontext.h:218:
+ ^I/* new processor state extensions will go here */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#703: FILE: include/asm-x86/sigcontext.h:218:
+ ^I/* new processor state extensions will go here */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: include/asm-x86/sigcontext.h:218:
+ ^I/* new processor state extensions will go here */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#704: FILE: include/asm-x86/sigcontext.h:219:
+} __attribute__ ((aligned (64)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#704: FILE: include/asm-x86/sigcontext.h:219:
+} __attribute__ ((aligned (64)));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#709: FILE: include/asm-x86/sigcontext.h:224:
+^Iu32 ^Ilmask;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#840: FILE: arch/x86/ia32/ia32_signal.c:413:
+	if (used_math()) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#843: FILE: arch/x86/ia32/ia32_signal.c:416:
+			*xstate = (struct xsave_struct *) sp;

CHECK:SPACING: No space is necessary after a cast
#847: FILE: arch/x86/ia32/ia32_signal.c:420:
+		*fpstate = (struct _fpstate_ia32 *) sp;

CHECK:BRACES: Unbalanced braces around else statement
#850: FILE: arch/x86/ia32/ia32_signal.c:423:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1029: FILE: arch/x86/kernel/i387.c:195:
+	if (cpu_has_xsave)
+		 target->thread.xstate->xsave.xsave_hdr.xstate_bv |= XSTATE_FPSSE;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1039: FILE: arch/x86/kernel/i387.c:398:
+	if (cpu_has_xsave)
+		 target->thread.xstate->xsave.xsave_hdr.xstate_bv |= XSTATE_FP;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: arch/x86/kernel/i387.c:441:
+^I^I        struct xsave_struct __user *buf1)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: arch/x86/kernel/i387.c:441:
+int save_i387_xstate_ia32(struct _fpstate_ia32 __user *buf,
+		        struct xsave_struct __user *buf1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1120: FILE: arch/x86/kernel/i387.c:495:
+int restore_i387_xstate_ia32(struct _fpstate_ia32 __user *buf,
+			   struct xstate_cntxt_ia32 __user *buf1)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1144: FILE: arch/x86/kernel/i387.c:514:
+		if (cpu_has_xsave)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1146: FILE: arch/x86/kernel/i387.c:516:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1294: FILE: arch/x86/kernel/signal_32.c:329:
+	if (used_math()) {
[...]
+	} else
[...]

CHECK:SPACING: No space is necessary after a cast
#1297: FILE: arch/x86/kernel/signal_32.c:332:
+			*xstate = (struct xsave_struct *) sp;

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: arch/x86/kernel/signal_32.c:336:
+		*fpstate = (struct _fpstate *) sp;

CHECK:BRACES: Unbalanced braces around else statement
#1304: FILE: arch/x86/kernel/signal_32.c:339:
+	} else

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1320: FILE: arch/x86/kernel/signal_32.c:363:
+	if (!access_ok(VERIFY_WRITE, frame, sizeof (*frame)))

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1390: FILE: include/asm-x86/cpufeature.h:93:
+#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE */
                          	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1390: FILE: include/asm-x86/cpufeature.h:93:
+#define X86_FEATURE_XSAVE	(4*32+26) /* XSAVE */
                          	     ^

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#1411: FILE: include/asm-x86/i387.h:22:
+#include <asm/percpu.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1422: FILE: include/asm-x86/i387.h:37:
+extern int save_i387_xstate_ia32(struct _fpstate_ia32 __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1424: FILE: include/asm-x86/i387.h:39:
+extern int restore_i387_xstate_ia32(struct _fpstate_ia32 __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1426: FILE: include/asm-x86/i387.h:41:
+extern int restore_user_xstate(struct _fpstate_ia32 __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1429: FILE: include/asm-x86/i387.h:44:
+extern int restore_i387_fxsave(struct _fpstate_ia32 __user *buf);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1432: FILE: include/asm-x86/i387.h:47:
+#define X87_FSW_ES (1 << 7)	/* Exception Summary */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: No space is necessary after a cast
#1445: FILE: include/asm-x86/i387.h:62:
+	struct i387_fxsave_struct *fx = ((__force  struct i387_fxsave_struct *) buf);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1465: FILE: include/asm-x86/i387.h:86:
+#if 0 /* See comment in __fxsave_clear() below. */

CHECK:SPACING: No space is necessary after a cast
#1488: FILE: include/asm-x86/i387.h:108:
+	struct i387_fxsave_struct *fx = (struct i387_fxsave_struct *) xstate;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1569: FILE: include/asm-x86/i387.h:188:
+extern int save_i387_xstate(void __user *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1570: FILE: include/asm-x86/i387.h:189:
+extern int restore_i387_xstate(struct _fpstate *buf, struct xstate_cntxt *buf1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1599: FILE: include/asm-x86/i387.h:236:
+^I ^I * Header may indicate the init state of the FP.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1599: FILE: include/asm-x86/i387.h:236:
+^I ^I * Header may indicate the init state of the FP.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1600: FILE: include/asm-x86/i387.h:237:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1600: FILE: include/asm-x86/i387.h:237:
+^I ^I */$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#1606: FILE: include/asm-x86/i387.h:243:
+	} else {
[...]
 	alternative_input(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1631: FILE: include/asm-x86/i387.h:267:
+extern int save_i387_xstate(struct _fpstate __user *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1632: FILE: include/asm-x86/i387.h:268:
+extern int save_i387_xstate(struct _fpstate __user *buf,
+			  struct xsave_struct __user *buf1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1633: FILE: include/asm-x86/i387.h:269:
+extern int restore_i387_xstate(struct _fpstate __user *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1634: FILE: include/asm-x86/i387.h:270:
+extern int restore_i387_xstate(struct _fpstate __user *buf,
+			     struct xstate_cntxt __user *buf1);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1635: FILE: include/asm-x86/i387.h:271:
+extern int restore_user_xstate(struct _fpstate __user *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1638: FILE: include/asm-x86/i387.h:274:
+extern int restore_i387_fxsave(struct _fpstate __user *buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1651: FILE: include/asm-x86/processor.h:355:
+ ^Iu64 xstate_bv;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1651: FILE: include/asm-x86/processor.h:355:
+ ^Iu64 xstate_bv;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1651: FILE: include/asm-x86/processor.h:355:
+ ^Iu64 xstate_bv;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1652: FILE: include/asm-x86/processor.h:356:
+ ^Iu64 reserved1[2];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1652: FILE: include/asm-x86/processor.h:356:
+ ^Iu64 reserved1[2];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1652: FILE: include/asm-x86/processor.h:356:
+ ^Iu64 reserved1[2];$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1654: FILE: include/asm-x86/processor.h:358:
+} __attribute__((packed));

ERROR:CODE_INDENT: code indent should use tabs where possible
#1657: FILE: include/asm-x86/processor.h:361:
+ ^Istruct i387_fxsave_struct i387;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1657: FILE: include/asm-x86/processor.h:361:
+ ^Istruct i387_fxsave_struct i387;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1657: FILE: include/asm-x86/processor.h:361:
+ ^Istruct i387_fxsave_struct i387;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1658: FILE: include/asm-x86/processor.h:362:
+ ^Istruct xsave_hdr_struct xsave_hdr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1658: FILE: include/asm-x86/processor.h:362:
+ ^Istruct xsave_hdr_struct xsave_hdr;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1658: FILE: include/asm-x86/processor.h:362:
+ ^Istruct xsave_hdr_struct xsave_hdr;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1659: FILE: include/asm-x86/processor.h:363:
+ ^I/* new processor state extensions will go here */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1659: FILE: include/asm-x86/processor.h:363:
+ ^I/* new processor state extensions will go here */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1659: FILE: include/asm-x86/processor.h:363:
+ ^I/* new processor state extensions will go here */$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1660: FILE: include/asm-x86/processor.h:364:
+} __attribute__ ((packed, aligned (64)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1660: FILE: include/asm-x86/processor.h:364:
+} __attribute__ ((packed, aligned (64)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(64) over __attribute__((aligned(64)))
#1660: FILE: include/asm-x86/processor.h:364:
+} __attribute__ ((packed, aligned (64)));

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1694: FILE: include/asm-x86/ucontext.h:11:
+	int		  __unused[32 - (sizeof (sigset_t) / sizeof (int))];

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1694: FILE: include/asm-x86/ucontext.h:11:
+	int		  __unused[32 - (sizeof (sigset_t) / sizeof (int))];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 59 warnings, 41 checks, 1494 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
