WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > > These are the range of performance losses/gains I found when running against

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#166: FILE: include/linux/gfp.h:144:
+extern struct page *

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'nodemask_t *' should also have an identifier name
#166: FILE: include/linux/gfp.h:144:
+extern struct page *

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#166: FILE: include/linux/gfp.h:144:
+extern struct page *

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zonelist *' should also have an identifier name
#166: FILE: include/linux/gfp.h:144:
+extern struct page *

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nodes"
#196: FILE: include/linux/mmzone.h:643:
+	if (likely(nodes == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#213: FILE: include/linux/mmzone.h:659:
+	for (z = zonelist->zones;
[...]
+		z++);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#225: FILE: include/linux/mmzone.h:670:
+	for (++z;
[...]
+		z++);

WARNING:LONG_LINE_COMMENT: line length of 144 exceeds 100 columns
#241: FILE: include/linux/mmzone.h:691:
+ * for_each_zone_zonelist_nodemask - helper macro to iterate over valid zones in a zonelist at or below a given zone index and within a nodemask

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'zone' - possible side-effects?
#251: FILE: include/linux/mmzone.h:701:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx), zone = *z;	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx), zone = *z)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'z' - possible side-effects?
#251: FILE: include/linux/mmzone.h:701:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx), zone = *z;	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx), zone = *z)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'highidx' - possible side-effects?
#251: FILE: include/linux/mmzone.h:701:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx), zone = *z;	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx), zone = *z)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nodemask' - possible side-effects?
#251: FILE: include/linux/mmzone.h:701:
+#define for_each_zone_zonelist_nodemask(zone, z, zlist, highidx, nodemask) \
+	for (z = first_zones_zonelist(zlist, nodemask, highidx), zone = *z;	\
 		zone;							\
+		z = next_zones_zonelist(z, nodemask, highidx), zone = *z)

WARNING:TYPO_SPELLING: 'curremt' may be misspelled - perhaps 'current'?
#267: FILE: kernel/cpuset.c:2330:
+ * cpuset_nodemask_valid_mems_allowed - check zonelist vs. curremt mems_allowed
                                                            ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#304: FILE: mm/mempolicy.c:137:
+	int nd, k;
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#333: FILE: mm/mempolicy.c:141:
+	for_each_node_mask(nd, *nodemask) {
 	                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#334: FILE: mm/mempolicy.c:142:
+		struct zone *z = &NODE_DATA(nd)->node_zones[k];
 		                            ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: mm/mempolicy.c:143:
+		struct zone *z = &NODE_DATA(nd)->node_zones[k];
+		if (z->present_pages > 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: mm/mempolicy.c:1072:
+	if (policy->policy == MPOL_BIND &&
+			gfp_zone(gfp) >= policy_zone &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: mm/mempolicy.c:1135:
+		struct zone **z;
+		zonelist = &NODE_DATA(numa_node_id())->node_zonelist;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#457: FILE: mm/mempolicy.c:1329:
+		/* Fallthrough */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#486: FILE: mm/mempolicy.c:1635:
+		/* Fall through */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: mm/page_alloc.c:1151:
+get_page_from_freelist(gfp_t gfp_mask, nodemask_t *nodemask, unsigned int order,
 		struct zonelist *zonelist, int alloc_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: mm/page_alloc.c:1168:
+	for_each_zone_zonelist_nodemask(zone, z, zonelist,
+						high_zoneidx, nodemask) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/page_alloc.c:1223:
+__alloc_pages_nodemask(gfp_t gfp_mask, nodemask_t *nodemask,
+		unsigned int order, struct zonelist *zonelist)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#572: FILE: mm/page_alloc.c:1247:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask, order,
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#573: FILE: mm/page_alloc.c:1248:
+	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask, order,
 				zonelist, ALLOC_WMARK_LOW|ALLOC_CPUSET);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#582: FILE: mm/page_alloc.c:1293:
+	page = get_page_from_freelist(gfp_mask, nodemask, order, zonelist,
+									alloc_flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: mm/page_alloc.c:1306:
+			page = get_page_from_freelist(gfp_mask, nodemask,
+				order, zonelist, ALLOC_NO_WATERMARKS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: mm/page_alloc.c:1338:
+		page = get_page_from_freelist(gfp_mask, nodemask, order,
 						zonelist, alloc_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#612: FILE: mm/page_alloc.c:1348:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask,
 		                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: mm/page_alloc.c:1349:
+		page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask,
+				order, zonelist, ALLOC_WMARK_HIGH|ALLOC_CPUSET);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#613: FILE: mm/page_alloc.c:1349:
+				order, zonelist, ALLOC_WMARK_HIGH|ALLOC_CPUSET);
 				                                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#623: FILE: mm/page_alloc.c:1395:
+__alloc_pages(gfp_t gfp_mask, unsigned int order,
+		struct zonelist *zonelist)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#628: FILE: mm/page_alloc.c:1400:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 19 checks, 456 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000394243.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
