WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
  - a source string should be available, but we may just know the string size

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#84: FILE: include/trace/ftrace.h:22:
+#define __field(type, item)		type	item;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#84: FILE: include/trace/ftrace.h:22:
+#define __field(type, item)		type	item;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#92: FILE: include/trace/ftrace.h:28:
+#define __dynamic_array(type, item, len) unsigned short __data_loc_##item;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#131: FILE: include/trace/ftrace.h:64:
+#define __field(type, item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#131: FILE: include/trace/ftrace.h:64:
+#define __field(type, item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#139: FILE: include/trace/ftrace.h:70:
+#define __dynamic_array(type, item, len)	int item;

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#162: FILE: include/trace/ftrace.h:131:
+#define __get_str(field) (char *)__get_dynamic_array(field)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#174: FILE: include/trace/ftrace.h:219:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_seq_printf(s, "\tfield:__data_loc " #item ";\t"	       \
 			       "offset:%u;\tsize:%u;\n",		       \
 			       (unsigned int)offsetof(typeof(field),	       \
+					__data_loc_##item),		       \
+			       (unsigned int)sizeof(field.__data_loc_##item)); \
 	if (!ret)							       \
 		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#174: FILE: include/trace/ftrace.h:219:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_seq_printf(s, "\tfield:__data_loc " #item ";\t"	       \
 			       "offset:%u;\tsize:%u;\n",		       \
 			       (unsigned int)offsetof(typeof(field),	       \
+					__data_loc_##item),		       \
+			       (unsigned int)sizeof(field.__data_loc_##item)); \
 	if (!ret)							       \
 		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#196: FILE: include/trace/ftrace.h:275:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\
+				offsetof(typeof(field), __data_loc_##item),    \
+				 sizeof(field.__data_loc_##item), 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#196: FILE: include/trace/ftrace.h:275:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\
+				offsetof(typeof(field), __data_loc_##item),    \
+				 sizeof(field.__data_loc_##item), 0);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#197: FILE: include/trace/ftrace.h:276:
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#227: FILE: include/trace/ftrace.h:319:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#227: FILE: include/trace/ftrace.h:319:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#227: FILE: include/trace/ftrace.h:319:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#259: FILE: include/trace/ftrace.h:487:
+#define __dynamic_array(type, item, len)				\
+	__entry->__data_loc_##item = __data_offsets.item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#259: FILE: include/trace/ftrace.h:487:
+#define __dynamic_array(type, item, len)				\
+	__entry->__data_loc_##item = __data_offsets.item;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#267: FILE: include/trace/ftrace.h:491:
+#define __string(item, src) __dynamic_array(char, item, -1)       ^I\$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117574.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 11 warnings, 1 checks, 236 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000117574.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
