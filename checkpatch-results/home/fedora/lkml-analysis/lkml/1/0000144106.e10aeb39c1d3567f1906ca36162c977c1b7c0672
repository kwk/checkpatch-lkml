WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
This patch adds the RAMDISK subsystem plugin for accessing struct page from upstream

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#45: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#50: FILE: drivers/target/target_core_rd.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#74: FILE: drivers/target/target_core_rd.c:25:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#75: FILE: drivers/target/target_core_rd.c:26:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#79: FILE: drivers/target/target_core_rd.c:30:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#112: FILE: drivers/target/target_core_rd.c:63:
+		printk(KERN_ERR "Unable to allocate memory for rd_host_t\n");

CHECK:SPACING: No space is necessary after a cast
#120: FILE: drivers/target/target_core_rd.c:71:
+	hba->hba_ptr = (void *) rd_host;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#124: FILE: drivers/target/target_core_rd.c:75:
+	printk(KERN_INFO "CORE_HBA[%d] - %s Ramdisk HBA Driver %s on"

WARNING:SPLIT_STRING: quoted string split across lines
#125: FILE: drivers/target/target_core_rd.c:76:
+	printk(KERN_INFO "CORE_HBA[%d] - %s Ramdisk HBA Driver %s on"
+		" Generic Target Core Stack %s\n", hba->hba_id,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#127: FILE: drivers/target/target_core_rd.c:78:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached Ramdisk HBA: %u to Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#128: FILE: drivers/target/target_core_rd.c:79:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached Ramdisk HBA: %u to Generic"
+		" Target Core TCQ Depth: %d MaxSectors: %u\n", hba->hba_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#144: FILE: drivers/target/target_core_rd.c:95:
+		printk(KERN_ERR "hba->hba_ptr is NULL!\n");

CHECK:SPACING: No space is necessary after a cast
#148: FILE: drivers/target/target_core_rd.c:99:
+	rd_host = (rd_host_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#150: FILE: drivers/target/target_core_rd.c:101:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached Ramdisk HBA: %u from"

WARNING:SPLIT_STRING: quoted string split across lines
#151: FILE: drivers/target/target_core_rd.c:102:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached Ramdisk HBA: %u from"
+		" Generic Target Core\n", hba->hba_id, rd_host->rd_host_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#190: FILE: drivers/target/target_core_rd.c:141:
+	printk(KERN_INFO "CORE_RD[%u] - Released device space for Ramdisk"

WARNING:SPLIT_STRING: quoted string split across lines
#191: FILE: drivers/target/target_core_rd.c:142:
+	printk(KERN_INFO "CORE_RD[%u] - Released device space for Ramdisk"
+		" Device ID: %u, pages %u in %u tables total bytes %lu\n",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#198: FILE: drivers/target/target_core_rd.c:149:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#213: FILE: drivers/target/target_core_rd.c:164:
+		printk(KERN_ERR "Illegal page count: %u for Ramdisk device\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: drivers/target/target_core_rd.c:165:
+		printk(KERN_ERR "Illegal page count: %u for Ramdisk device\n",
+			rd_dev->rd_page_count);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#221: FILE: drivers/target/target_core_rd.c:172:
+	sg_table = kzalloc(sg_tables * sizeof(rd_dev_sg_table_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#223: FILE: drivers/target/target_core_rd.c:174:
+		printk(KERN_ERR "Unable to allocate memory for Ramdisk"

WARNING:SPLIT_STRING: quoted string split across lines
#224: FILE: drivers/target/target_core_rd.c:175:
+		printk(KERN_ERR "Unable to allocate memory for Ramdisk"
+			" scatterlist tables\n");

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#235: FILE: drivers/target/target_core_rd.c:186:
+		sg = kzalloc(sg_per_table * sizeof(struct scatterlist),
+				GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: drivers/target/target_core_rd.c:187:
+		sg = kzalloc(sg_per_table * sizeof(struct scatterlist),
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#238: FILE: drivers/target/target_core_rd.c:189:
+			printk(KERN_ERR "Unable to allocate scatterlist array"

WARNING:SPLIT_STRING: quoted string split across lines
#239: FILE: drivers/target/target_core_rd.c:190:
+			printk(KERN_ERR "Unable to allocate scatterlist array"
+				" for rd_dev_t\n");

CHECK:SPACING: No space is necessary after a cast
#252: FILE: drivers/target/target_core_rd.c:203:
+			pg = (struct page *) alloc_pages(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#252: FILE: drivers/target/target_core_rd.c:203:
+			pg = (struct page *) alloc_pages(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#255: FILE: drivers/target/target_core_rd.c:206:
+				printk(KERN_ERR "Unable to allocate scatterlist"

WARNING:SPLIT_STRING: quoted string split across lines
#256: FILE: drivers/target/target_core_rd.c:207:
+				printk(KERN_ERR "Unable to allocate scatterlist"
+					" pages for rd_dev_sg_table_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#267: FILE: drivers/target/target_core_rd.c:218:
+	printk(KERN_INFO "CORE_RD[%u] - Built Ramdisk Device ID: %u space of"

WARNING:SPLIT_STRING: quoted string split across lines
#268: FILE: drivers/target/target_core_rd.c:219:
+	printk(KERN_INFO "CORE_RD[%u] - Built Ramdisk Device ID: %u space of"
+		" %u pages in %u tables\n", rd_dev->rd_host->rd_host_id,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#275: FILE: drivers/target/target_core_rd.c:226:
+static void *rd_allocate_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#281: FILE: drivers/target/target_core_rd.c:232:
+	rd_host_t *rd_host = (rd_host_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#285: FILE: drivers/target/target_core_rd.c:236:
+		printk(KERN_ERR "Unable to allocate memory for rd_dev_t\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#309: FILE: drivers/target/target_core_rd.c:260:
+static se_device_t *rd_create_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#316: FILE: drivers/target/target_core_rd.c:267:
+	rd_dev_t *rd_dev = (rd_dev_t *) p;

CHECK:SPACING: No space is necessary after a cast
#317: FILE: drivers/target/target_core_rd.c:268:
+	rd_host_t *rd_host = (rd_host_t *) hba->hba_ptr;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: drivers/target/target_core_rd.c:278:
+	dev = transport_add_device_to_core_hba(hba,
+			(rd_dev->rd_direct) ? &rd_dr_template :

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#335: FILE: drivers/target/target_core_rd.c:286:
+	printk(KERN_INFO "CORE_RD[%u] - Added LIO %s Ramdisk Device ID: %u of"

WARNING:SPLIT_STRING: quoted string split across lines
#336: FILE: drivers/target/target_core_rd.c:287:
+	printk(KERN_INFO "CORE_RD[%u] - Added LIO %s Ramdisk Device ID: %u of"
+		" %u pages in %u tables, %lu total bytes\n",

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#350: FILE: drivers/target/target_core_rd.c:301:
+se_device_t *rd_DIRECT_create_virtdevice(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#358: FILE: drivers/target/target_core_rd.c:309:
+se_device_t *rd_MEMCPY_create_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#372: FILE: drivers/target/target_core_rd.c:323:
+	rd_dev_t *rd_dev = (rd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#375: FILE: drivers/target/target_core_rd.c:326:
+	printk(KERN_INFO "CORE_RD[%u] - Activating Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#376: FILE: drivers/target/target_core_rd.c:327:
+	printk(KERN_INFO "CORE_RD[%u] - Activating Device with TCQ: %d at"
+		" Ramdisk Device ID: %d\n", rd_host->rd_host_id,

CHECK:SPACING: No space is necessary after a cast
#388: FILE: drivers/target/target_core_rd.c:339:
+	rd_dev_t *rd_dev = (rd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#391: FILE: drivers/target/target_core_rd.c:342:
+	printk(KERN_INFO "CORE_RD[%u] - Deactivating Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#392: FILE: drivers/target/target_core_rd.c:343:
+	printk(KERN_INFO "CORE_RD[%u] - Deactivating Device with TCQ: %d at"
+		" Ramdisk Device ID: %d\n", rd_host->rd_host_id,

CHECK:SPACING: No space is necessary after a cast
#402: FILE: drivers/target/target_core_rd.c:353:
+	rd_dev_t *rd_dev = (rd_dev_t *) p;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#421: FILE: drivers/target/target_core_rd.c:372:
+void *rd_allocate_request(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#429: FILE: drivers/target/target_core_rd.c:380:
+		printk(KERN_ERR "Unable to allocate rd_request_t\n");

CHECK:SPACING: No space is necessary after a cast
#432: FILE: drivers/target/target_core_rd.c:383:
+	rd_req->rd_dev = (rd_dev_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#444: FILE: drivers/target/target_core_rd.c:395:
+	rd_dev_t *rd_dev = (rd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#465: FILE: drivers/target/target_core_rd.c:416:
+	rd_dev_t *rd_dev = (rd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#478: FILE: drivers/target/target_core_rd.c:429:
+	rd_dev_t *rd_dev = (rd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#494: FILE: drivers/target/target_core_rd.c:445:
+	rd_request_t *rd_req = (rd_request_t *) task->transport_req;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: drivers/target/target_core_rd.c:459:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				rd_req->rd_scsi_cdb, rd_req->rd_buf, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: drivers/target/target_core_rd.c:466:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				rd_req->rd_scsi_cdb, rd_req->rd_buf, 1,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#523: FILE: drivers/target/target_core_rd.c:474:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: drivers/target/target_core_rd.c:475:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",
+					T_TASK(cmd)->t_task_cdb[1] & 0x1f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: drivers/target/target_core_rd.c:484:
+		ret = transport_generic_emulate_request_sense(cmd,
+				T_TASK(cmd)->t_task_cdb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#553: FILE: drivers/target/target_core_rd.c:504:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for"

WARNING:SPLIT_STRING: quoted string split across lines
#554: FILE: drivers/target/target_core_rd.c:505:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for"
+			" RAMDISKs\n", rd_req->rd_scsi_cdb[0]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sg_table->page_start_offset <= page'
#575: FILE: drivers/target/target_core_rd.c:526:
+		if ((sg_table->page_start_offset <= page) &&
+		    (sg_table->page_end_offset >= page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sg_table->page_end_offset >= page'
#575: FILE: drivers/target/target_core_rd.c:526:
+		if ((sg_table->page_start_offset <= page) &&
+		    (sg_table->page_end_offset >= page))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#580: FILE: drivers/target/target_core_rd.c:531:
+	printk(KERN_ERR "Unable to locate rd_dev_sg_table_t for page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#581: FILE: drivers/target/target_core_rd.c:532:
+	printk(KERN_ERR "Unable to locate rd_dev_sg_table_t for page: %u\n",
+			page);

CHECK:SPACING: No space is necessary after a cast
#605: FILE: drivers/target/target_core_rd.c:556:
+	sg_d = (struct scatterlist *) req->rd_buf;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#608: FILE: drivers/target/target_core_rd.c:559:
+	printk(KERN_INFO "RD[%u]: Read LBA: %llu, Size: %u Page: %u, Offset:"

WARNING:SPLIT_STRING: quoted string split across lines
#609: FILE: drivers/target/target_core_rd.c:560:
+	printk(KERN_INFO "RD[%u]: Read LBA: %llu, Size: %u Page: %u, Offset:"
+		" %u\n", dev->rd_dev_id, req->rd_lba, req->rd_size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#619: FILE: drivers/target/target_core_rd.c:570:
+			printk(KERN_INFO "Step 1 - sg_d[%d]: %p length: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#620: FILE: drivers/target/target_core_rd.c:571:
+			printk(KERN_INFO "Step 1 - sg_d[%d]: %p length: %d"
+				" offset: %u sg_s[%d].length: %u\n", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#623: FILE: drivers/target/target_core_rd.c:574:
+			printk(KERN_INFO "Step 1 - length: %u dst_offset: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#624: FILE: drivers/target/target_core_rd.c:575:
+			printk(KERN_INFO "Step 1 - length: %u dst_offset: %u"
+				" src_offset: %u\n", length, dst_offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: drivers/target/target_core_rd.c:583:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#636: FILE: drivers/target/target_core_rd.c:587:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#644: FILE: drivers/target/target_core_rd.c:595:
+			printk(KERN_INFO "Step 2 - sg_d[%d]: %p length: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#645: FILE: drivers/target/target_core_rd.c:596:
+			printk(KERN_INFO "Step 2 - sg_d[%d]: %p length: %d"
+				" offset: %u sg_s[%d].length: %u\n", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#648: FILE: drivers/target/target_core_rd.c:599:
+			printk(KERN_INFO "Step 2 - length: %u dst_offset: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#649: FILE: drivers/target/target_core_rd.c:600:
+			printk(KERN_INFO "Step 2 - length: %u dst_offset: %u"
+				" src_offset: %u\n", length, dst_offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: drivers/target/target_core_rd.c:608:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#659: FILE: drivers/target/target_core_rd.c:610:
+			if (sg_d[i].length == length) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#662: FILE: drivers/target/target_core_rd.c:613:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: drivers/target/target_core_rd.c:618:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#676: FILE: drivers/target/target_core_rd.c:627:
+		printk(KERN_INFO "page: %u, remaining size: %u, length: %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#677: FILE: drivers/target/target_core_rd.c:628:
+		printk(KERN_INFO "page: %u, remaining size: %u, length: %u,"
+			" i: %u, j: %u\n", req->rd_page,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#689: FILE: drivers/target/target_core_rd.c:640:
+			printk(KERN_INFO "page: %u in same page table\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: drivers/target/target_core_rd.c:641:
+			printk(KERN_INFO "page: %u in same page table\n",
+				req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#695: FILE: drivers/target/target_core_rd.c:646:
+		printk(KERN_INFO "getting new page table for page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: drivers/target/target_core_rd.c:647:
+		printk(KERN_INFO "getting new page table for page: %u\n",
+				req->rd_page);

CHECK:SPACING: No space is necessary after a cast
#728: FILE: drivers/target/target_core_rd.c:679:
+	sg_s = (struct scatterlist *) req->rd_buf;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#730: FILE: drivers/target/target_core_rd.c:681:
+	printk(KERN_INFO "RD[%d] Write LBA: %llu, Size: %u, Page: %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: drivers/target/target_core_rd.c:682:
+	printk(KERN_INFO "RD[%d] Write LBA: %llu, Size: %u, Page: %u,"
+		" Offset: %u\n", dev->rd_dev_id, req->rd_lba, req->rd_size,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#741: FILE: drivers/target/target_core_rd.c:692:
+			printk(KERN_INFO "Step 1 - sg_s[%d]: %p length: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#742: FILE: drivers/target/target_core_rd.c:693:
+			printk(KERN_INFO "Step 1 - sg_s[%d]: %p length: %d"
+				" offset: %d sg_d[%d].length: %u\n", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#745: FILE: drivers/target/target_core_rd.c:696:
+			printk(KERN_INFO "Step 1 - length: %u src_offset: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#746: FILE: drivers/target/target_core_rd.c:697:
+			printk(KERN_INFO "Step 1 - length: %u src_offset: %u"
+				" dst_offset: %u\n", length, src_offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#754: FILE: drivers/target/target_core_rd.c:705:
+				BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: drivers/target/target_core_rd.c:709:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#766: FILE: drivers/target/target_core_rd.c:717:
+			printk(KERN_INFO "Step 2 - sg_s[%d]: %p length: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#767: FILE: drivers/target/target_core_rd.c:718:
+			printk(KERN_INFO "Step 2 - sg_s[%d]: %p length: %d"
+				" offset: %d sg_d[%d].length: %u\n", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#770: FILE: drivers/target/target_core_rd.c:721:
+			printk(KERN_INFO "Step 2 - length: %u src_offset: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#771: FILE: drivers/target/target_core_rd.c:722:
+			printk(KERN_INFO "Step 2 - length: %u src_offset: %u"
+				" dst_offset: %u\n", length, src_offset,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#779: FILE: drivers/target/target_core_rd.c:730:
+				BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#781: FILE: drivers/target/target_core_rd.c:732:
+			if (sg_s[i].length == length) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#784: FILE: drivers/target/target_core_rd.c:735:
+			} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#789: FILE: drivers/target/target_core_rd.c:740:
+				BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#798: FILE: drivers/target/target_core_rd.c:749:
+		printk(KERN_INFO "page: %u, remaining size: %u, length: %u,"

WARNING:SPLIT_STRING: quoted string split across lines
#799: FILE: drivers/target/target_core_rd.c:750:
+		printk(KERN_INFO "page: %u, remaining size: %u, length: %u,"
+			" i: %u, j: %u\n", req->rd_page,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#811: FILE: drivers/target/target_core_rd.c:762:
+			printk(KERN_INFO "page: %u in same page table\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: drivers/target/target_core_rd.c:763:
+			printk(KERN_INFO "page: %u in same page table\n",
+				req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#817: FILE: drivers/target/target_core_rd.c:768:
+		printk(KERN_INFO "getting new page table for page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#818: FILE: drivers/target/target_core_rd.c:769:
+		printk(KERN_INFO "getting new page table for page: %u\n",
+				req->rd_page);

CHECK:SPACING: No space is necessary after a cast
#837: FILE: drivers/target/target_core_rd.c:788:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#868: FILE: drivers/target/target_core_rd.c:819:
+static int rd_DIRECT_with_offset(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#889: FILE: drivers/target/target_core_rd.c:840:
+	printk(KERN_INFO "%s DIRECT LBA: %llu, Size: %u Page: %u, Offset: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#890: FILE: drivers/target/target_core_rd.c:841:
+	printk(KERN_INFO "%s DIRECT LBA: %llu, Size: %u Page: %u, Offset: %u\n",
+		(req->rd_data_direction != RD_DATA_READ) ? "Write" : "Read",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#896: FILE: drivers/target/target_core_rd.c:847:
+			printk(KERN_ERR "Unable to allocate se_mem_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#925: FILE: drivers/target/target_core_rd.c:876:
+		printk(KERN_INFO "page: %u, size: %u, offset_length: %u, j: %u"

WARNING:SPLIT_STRING: quoted string split across lines
#926: FILE: drivers/target/target_core_rd.c:877:
+		printk(KERN_INFO "page: %u, size: %u, offset_length: %u, j: %u"
+			" se_mem: %p, se_page: %p se_off: %u se_len: %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#942: FILE: drivers/target/target_core_rd.c:893:
+			printk(KERN_INFO "page: %u in same page table\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#943: FILE: drivers/target/target_core_rd.c:894:
+			printk(KERN_INFO "page: %u in same page table\n",
+					req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#948: FILE: drivers/target/target_core_rd.c:899:
+		printk(KERN_INFO "getting new page table for page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: drivers/target/target_core_rd.c:900:
+		printk(KERN_INFO "getting new page table for page: %u\n",
+				req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#961: FILE: drivers/target/target_core_rd.c:912:
+	printk(KERN_INFO "RD_DR - Allocated %u se_mem_t segments for task\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#962: FILE: drivers/target/target_core_rd.c:913:
+	printk(KERN_INFO "RD_DR - Allocated %u se_mem_t segments for task\n",
+			*se_mem_cnt);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#971: FILE: drivers/target/target_core_rd.c:922:
+static int rd_DIRECT_without_offset(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#990: FILE: drivers/target/target_core_rd.c:941:
+	printk(KERN_INFO "%s DIRECT LBA: %llu, Size: %u, Page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: drivers/target/target_core_rd.c:942:
+	printk(KERN_INFO "%s DIRECT LBA: %llu, Size: %u, Page: %u\n",
+		(req->rd_data_direction != RD_DATA_READ) ? "Write" : "Read",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#997: FILE: drivers/target/target_core_rd.c:948:
+			printk(KERN_ERR "Unable to allocate se_mem_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1009: FILE: drivers/target/target_core_rd.c:960:
+		printk(KERN_INFO "page: %u, size: %u, j: %u se_mem: %p,"

WARNING:SPLIT_STRING: quoted string split across lines
#1010: FILE: drivers/target/target_core_rd.c:961:
+		printk(KERN_INFO "page: %u, size: %u, j: %u se_mem: %p,"
+			" se_page: %p se_off: %u se_len: %u\n", req->rd_page,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1023: FILE: drivers/target/target_core_rd.c:974:
+			printk("page: %u in same page table\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1024: FILE: drivers/target/target_core_rd.c:975:
+			printk("page: %u in same page table\n",
+				req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1029: FILE: drivers/target/target_core_rd.c:980:
+		printk(KERN_INFO "getting new page table for page: %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1030: FILE: drivers/target/target_core_rd.c:981:
+		printk(KERN_INFO "getting new page table for page: %u\n",
+				req->rd_page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1042: FILE: drivers/target/target_core_rd.c:993:
+	printk(KERN_INFO "RD_DR - Allocated %u se_mem_t segments for task\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: drivers/target/target_core_rd.c:994:
+	printk(KERN_INFO "RD_DR - Allocated %u se_mem_t segments for task\n",
+			*se_mem_cnt);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1052: FILE: drivers/target/target_core_rd.c:1003:
+int rd_DIRECT_do_se_mem_map(

CHECK:SPACING: No space is necessary after a cast
#1061: FILE: drivers/target/target_core_rd.c:1012:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1075: FILE: drivers/target/target_core_rd.c:1026:
+		ret = rd_DIRECT_with_offset(task, se_mem_list, se_mem_cnt,
+				task_offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1078: FILE: drivers/target/target_core_rd.c:1029:
+		ret = rd_DIRECT_without_offset(task, se_mem_list, se_mem_cnt,
+				task_offset);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#1097: FILE: drivers/target/target_core_rd.c:1048:
+	list_for_each_entry_safe(se_mem, se_mem_tmp, T_TASK(cmd)->t_mem_list,
[...]
+		 list_del(&se_mem->se_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: drivers/target/target_core_rd.c:1049:
+	list_for_each_entry_safe(se_mem, se_mem_tmp, T_TASK(cmd)->t_mem_list,
+				se_list) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*t_mem_list)...) over kzalloc(sizeof(struct list_head)...)
#1113: FILE: drivers/target/target_core_rd.c:1064:
+	T_TASK(cmd)->t_mem_list = kzalloc(sizeof(struct list_head), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1115: FILE: drivers/target/target_core_rd.c:1066:
+		printk(KERN_ERR "Unable to allocate memory for T_TASK(cmd)"

WARNING:SPLIT_STRING: quoted string split across lines
#1116: FILE: drivers/target/target_core_rd.c:1067:
+		printk(KERN_ERR "Unable to allocate memory for T_TASK(cmd)"
+				"->t_mem_list\n");

CHECK:SPACING: No space is necessary after a cast
#1150: FILE: drivers/target/target_core_rd.c:1101:
+	req = (rd_request_t *) task->transport_req;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1150: FILE: drivers/target/target_core_rd.c:1101:
+	rd_request_t *req;
+	req = (rd_request_t *) task->transport_req;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1155: FILE: drivers/target/target_core_rd.c:1106:
+ssize_t rd_set_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#1161: FILE: drivers/target/target_core_rd.c:1112:
+	rd_dev_t *rd_dev = (rd_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1167: FILE: drivers/target/target_core_rd.c:1118:
+		printk(KERN_ERR "Unable to allocate memory for temporary buffer\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1182: FILE: drivers/target/target_core_rd.c:1133:
+		if ((ptr2)) {
[...]
+		} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#1184: FILE: drivers/target/target_core_rd.c:1135:
+			ret = strict_strtoul(ptr, 0,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1185: FILE: drivers/target/target_core_rd.c:1136:
+			ret = strict_strtoul(ptr, 0,
+				(unsigned long *)&rd_dev->rd_page_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1187: FILE: drivers/target/target_core_rd.c:1138:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1188: FILE: drivers/target/target_core_rd.c:1139:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" rd_pages=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1191: FILE: drivers/target/target_core_rd.c:1142:
+			printk(KERN_INFO "RAMDISK: Referencing Page"

WARNING:SPLIT_STRING: quoted string split across lines
#1192: FILE: drivers/target/target_core_rd.c:1143:
+			printk(KERN_INFO "RAMDISK: Referencing Page"
+				" Count: %u\n", rd_dev->rd_page_count);

CHECK:BRACES: Unbalanced braces around else statement
#1195: FILE: drivers/target/target_core_rd.c:1146:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1206: FILE: drivers/target/target_core_rd.c:1157:
+	rd_dev_t *rd_dev = (rd_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1209: FILE: drivers/target/target_core_rd.c:1160:
+		printk(KERN_INFO "Missing rd_pages= parameter\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1216: FILE: drivers/target/target_core_rd.c:1167:
+ssize_t rd_show_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#1221: FILE: drivers/target/target_core_rd.c:1172:
+	rd_dev_t *rd_dev = (rd_dev_t *) se_dev->se_dev_su_ptr;

CHECK:SPACING: No space is necessary after a cast
#1251: FILE: drivers/target/target_core_rd.c:1202:
+	rd_dev_t *rd_dev = (rd_dev_t *) dev->dev_ptr;

WARNING:SPLIT_STRING: quoted string split across lines
#1262: FILE: drivers/target/target_core_rd.c:1213:
+	*bl += sprintf(b + *bl, "        PAGES/PAGE_SIZE: %u*%lu"
+			"  SG_table_count: %u\n", rd_dev->rd_page_count,

WARNING:RETURN_VOID: void function return statements are not generally useful
#1266: FILE: drivers/target/target_core_rd.c:1217:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#1275: FILE: drivers/target/target_core_rd.c:1226:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1278: FILE: drivers/target/target_core_rd.c:1229:
+	req->rd_buf		= (void *) T_TASK(cmd)->t_task_buf;

CHECK:SPACING: No space is necessary after a cast
#1288: FILE: drivers/target/target_core_rd.c:1239:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1301: FILE: drivers/target/target_core_rd.c:1252:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1315: FILE: drivers/target/target_core_rd.c:1266:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1331: FILE: drivers/target/target_core_rd.c:1282:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1345: FILE: drivers/target/target_core_rd.c:1296:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1359: FILE: drivers/target/target_core_rd.c:1310:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1373: FILE: drivers/target/target_core_rd.c:1324:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1406: FILE: drivers/target/target_core_rd.c:1357:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1417: FILE: drivers/target/target_core_rd.c:1368:
+	rd_request_t *req = (rd_request_t *) task->transport_req;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1478: FILE: include/target/target_core_rd.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1502: FILE: include/target/target_core_rd.h:25:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1503: FILE: include/target/target_core_rd.h:26:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1507: FILE: include/target/target_core_rd.h:30:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1531: FILE: include/target/target_core_rd.h:54:
+extern int rd_CDB_inquiry(se_task_t *, u32);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1532: FILE: include/target/target_core_rd.h:55:
+extern int rd_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1532: FILE: include/target/target_core_rd.h:55:
+extern int rd_CDB_none(se_task_t *, u32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1532: FILE: include/target/target_core_rd.h:55:
+extern int rd_CDB_none(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1533: FILE: include/target/target_core_rd.h:56:
+extern int rd_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1533: FILE: include/target/target_core_rd.h:56:
+extern int rd_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1533: FILE: include/target/target_core_rd.h:56:
+extern int rd_CDB_read_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1534: FILE: include/target/target_core_rd.h:57:
+extern int rd_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1534: FILE: include/target/target_core_rd.h:57:
+extern int rd_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1534: FILE: include/target/target_core_rd.h:57:
+extern int rd_CDB_read_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1535: FILE: include/target/target_core_rd.h:58:
+extern int rd_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1535: FILE: include/target/target_core_rd.h:58:
+extern int rd_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1535: FILE: include/target/target_core_rd.h:58:
+extern int rd_CDB_write_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1536: FILE: include/target/target_core_rd.h:59:
+extern int rd_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1536: FILE: include/target/target_core_rd.h:59:
+extern int rd_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1536: FILE: include/target/target_core_rd.h:59:
+extern int rd_CDB_write_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1538: FILE: include/target/target_core_rd.h:61:
+extern int rd_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1538: FILE: include/target/target_core_rd.h:61:
+extern int rd_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1538: FILE: include/target/target_core_rd.h:61:
+extern int rd_attach_hba(se_hba_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1539: FILE: include/target/target_core_rd.h:62:
+extern int rd_detach_hba(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1539: FILE: include/target/target_core_rd.h:62:
+extern int rd_detach_hba(se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1540: FILE: include/target/target_core_rd.h:63:
+extern void *rd_DIRECT_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1540: FILE: include/target/target_core_rd.h:63:
+extern void *rd_DIRECT_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1540: FILE: include/target/target_core_rd.h:63:
+extern void *rd_DIRECT_allocate_virtdevice(se_hba_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1541: FILE: include/target/target_core_rd.h:64:
+extern void *rd_MEMCPY_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1541: FILE: include/target/target_core_rd.h:64:
+extern void *rd_MEMCPY_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1541: FILE: include/target/target_core_rd.h:64:
+extern void *rd_MEMCPY_allocate_virtdevice(se_hba_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1542: FILE: include/target/target_core_rd.h:65:
+extern se_device_t *rd_DIRECT_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1542: FILE: include/target/target_core_rd.h:65:
+extern se_device_t *rd_DIRECT_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1542: FILE: include/target/target_core_rd.h:65:
+extern se_device_t *rd_DIRECT_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1542: FILE: include/target/target_core_rd.h:65:
+extern se_device_t *rd_DIRECT_create_virtdevice(se_hba_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1543: FILE: include/target/target_core_rd.h:66:
+extern se_device_t *rd_DIRECT_create_virtdevice(se_hba_t *,
+				se_subsystem_dev_t *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1544: FILE: include/target/target_core_rd.h:67:
+extern se_device_t *rd_MEMCPY_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1544: FILE: include/target/target_core_rd.h:67:
+extern se_device_t *rd_MEMCPY_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1544: FILE: include/target/target_core_rd.h:67:
+extern se_device_t *rd_MEMCPY_create_virtdevice(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1544: FILE: include/target/target_core_rd.h:67:
+extern se_device_t *rd_MEMCPY_create_virtdevice(se_hba_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1545: FILE: include/target/target_core_rd.h:68:
+extern se_device_t *rd_MEMCPY_create_virtdevice(se_hba_t *,
+				se_subsystem_dev_t *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1546: FILE: include/target/target_core_rd.h:69:
+extern int rd_activate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1546: FILE: include/target/target_core_rd.h:69:
+extern int rd_activate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1547: FILE: include/target/target_core_rd.h:70:
+extern void rd_deactivate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1547: FILE: include/target/target_core_rd.h:70:
+extern void rd_deactivate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1548: FILE: include/target/target_core_rd.h:71:
+extern void rd_free_device(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1548: FILE: include/target/target_core_rd.h:71:
+extern void rd_free_device(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1549: FILE: include/target/target_core_rd.h:72:
+extern int rd_transport_complete(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1549: FILE: include/target/target_core_rd.h:72:
+extern int rd_transport_complete(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1550: FILE: include/target/target_core_rd.h:73:
+extern void *rd_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1550: FILE: include/target/target_core_rd.h:73:
+extern void *rd_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1550: FILE: include/target/target_core_rd.h:73:
+extern void *rd_allocate_request(se_task_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1551: FILE: include/target/target_core_rd.h:74:
+extern int rd_DIRECT_do_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1551: FILE: include/target/target_core_rd.h:74:
+extern int rd_DIRECT_do_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1552: FILE: include/target/target_core_rd.h:75:
+extern int rd_MEMCPY_do_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1552: FILE: include/target/target_core_rd.h:75:
+extern int rd_MEMCPY_do_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1553: FILE: include/target/target_core_rd.h:76:
+extern int rd_DIRECT_allocate_DMA(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#1553: FILE: include/target/target_core_rd.h:76:
+extern int rd_DIRECT_allocate_DMA(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1553: FILE: include/target/target_core_rd.h:76:
+extern int rd_DIRECT_allocate_DMA(se_cmd_t *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1553: FILE: include/target/target_core_rd.h:76:
+extern int rd_DIRECT_allocate_DMA(se_cmd_t *, u32, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_task_s *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_mem_s **' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32 *' should also have an identifier name
#1554: FILE: include/target/target_core_rd.h:77:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1555: FILE: include/target/target_core_rd.h:78:
+extern int rd_DIRECT_do_se_mem_map(struct se_task_s *, struct list_head *,
+				void *, struct se_mem_s *, struct se_mem_s **,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1557: FILE: include/target/target_core_rd.h:80:
+extern void rd_DIRECT_free_DMA(se_cmd_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_cmd_t *' should also have an identifier name
#1557: FILE: include/target/target_core_rd.h:80:
+extern void rd_DIRECT_free_DMA(se_cmd_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1558: FILE: include/target/target_core_rd.h:81:
+extern void rd_free_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1558: FILE: include/target/target_core_rd.h:81:
+extern void rd_free_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1559: FILE: include/target/target_core_rd.h:82:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1559: FILE: include/target/target_core_rd.h:82:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1559: FILE: include/target/target_core_rd.h:82:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1559: FILE: include/target/target_core_rd.h:82:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#1559: FILE: include/target/target_core_rd.h:82:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1560: FILE: include/target/target_core_rd.h:83:
+extern ssize_t rd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						const char *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1561: FILE: include/target/target_core_rd.h:84:
+extern ssize_t rd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1561: FILE: include/target/target_core_rd.h:84:
+extern ssize_t rd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1561: FILE: include/target/target_core_rd.h:84:
+extern ssize_t rd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1562: FILE: include/target/target_core_rd.h:85:
+extern ssize_t rd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1562: FILE: include/target/target_core_rd.h:85:
+extern ssize_t rd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1562: FILE: include/target/target_core_rd.h:85:
+extern ssize_t rd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1562: FILE: include/target/target_core_rd.h:85:
+extern ssize_t rd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1563: FILE: include/target/target_core_rd.h:86:
+extern ssize_t rd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1564: FILE: include/target/target_core_rd.h:87:
+extern void rd_dr_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1564: FILE: include/target/target_core_rd.h:87:
+extern void rd_dr_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1564: FILE: include/target/target_core_rd.h:87:
+extern void rd_dr_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1564: FILE: include/target/target_core_rd.h:87:
+extern void rd_dr_get_plugin_info(void *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1565: FILE: include/target/target_core_rd.h:88:
+extern void rd_mcp_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1565: FILE: include/target/target_core_rd.h:88:
+extern void rd_mcp_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1565: FILE: include/target/target_core_rd.h:88:
+extern void rd_mcp_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1565: FILE: include/target/target_core_rd.h:88:
+extern void rd_mcp_get_plugin_info(void *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1566: FILE: include/target/target_core_rd.h:89:
+extern void rd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1566: FILE: include/target/target_core_rd.h:89:
+extern void rd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1566: FILE: include/target/target_core_rd.h:89:
+extern void rd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1566: FILE: include/target/target_core_rd.h:89:
+extern void rd_get_hba_info(se_hba_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1567: FILE: include/target/target_core_rd.h:90:
+extern void rd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1567: FILE: include/target/target_core_rd.h:90:
+extern void rd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1567: FILE: include/target/target_core_rd.h:90:
+extern void rd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1567: FILE: include/target/target_core_rd.h:90:
+extern void rd_get_dev_info(se_device_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1568: FILE: include/target/target_core_rd.h:91:
+extern int rd_DIRECT_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1568: FILE: include/target/target_core_rd.h:91:
+extern int rd_DIRECT_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1568: FILE: include/target/target_core_rd.h:91:
+extern int rd_DIRECT_check_lba(unsigned long long, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1569: FILE: include/target/target_core_rd.h:92:
+extern int rd_MEMCPY_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1569: FILE: include/target/target_core_rd.h:92:
+extern int rd_MEMCPY_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1569: FILE: include/target/target_core_rd.h:92:
+extern int rd_MEMCPY_check_lba(unsigned long long, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1570: FILE: include/target/target_core_rd.h:93:
+extern int rd_check_for_SG(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1570: FILE: include/target/target_core_rd.h:93:
+extern int rd_check_for_SG(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1571: FILE: include/target/target_core_rd.h:94:
+extern unsigned char *rd_get_cdb(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1571: FILE: include/target/target_core_rd.h:94:
+extern unsigned char *rd_get_cdb(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1572: FILE: include/target/target_core_rd.h:95:
+extern u32 rd_get_blocksize(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1572: FILE: include/target/target_core_rd.h:95:
+extern u32 rd_get_blocksize(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1573: FILE: include/target/target_core_rd.h:96:
+extern u32 rd_get_device_rev(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1573: FILE: include/target/target_core_rd.h:96:
+extern u32 rd_get_device_rev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1574: FILE: include/target/target_core_rd.h:97:
+extern u32 rd_get_device_type(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1574: FILE: include/target/target_core_rd.h:97:
+extern u32 rd_get_device_type(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1575: FILE: include/target/target_core_rd.h:98:
+extern u32 rd_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1575: FILE: include/target/target_core_rd.h:98:
+extern u32 rd_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1575: FILE: include/target/target_core_rd.h:98:
+extern u32 rd_get_dma_length(u32, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1576: FILE: include/target/target_core_rd.h:99:
+extern u32 rd_get_max_sectors(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1576: FILE: include/target/target_core_rd.h:99:
+extern u32 rd_get_max_sectors(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1577: FILE: include/target/target_core_rd.h:100:
+extern u32 rd_get_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1577: FILE: include/target/target_core_rd.h:100:
+extern u32 rd_get_queue_depth(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1578: FILE: include/target/target_core_rd.h:101:
+extern u32 rd_get_max_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1578: FILE: include/target/target_core_rd.h:101:
+extern u32 rd_get_max_queue_depth(se_device_t *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1584: FILE: include/target/target_core_rd.h:107:
+typedef struct rd_request_s {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1605: FILE: include/target/target_core_rd.h:128:
+	  * contiguous memory segments */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1611: FILE: include/target/target_core_rd.h:134:
+typedef struct rd_dev_sg_table_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1620: FILE: include/target/target_core_rd.h:143:
+typedef struct rd_dev_s {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1638: FILE: include/target/target_core_rd.h:161:
+extern void __rd_get_dev_info(rd_dev_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'rd_dev_t *' should also have an identifier name
#1638: FILE: include/target/target_core_rd.h:161:
+extern void __rd_get_dev_info(rd_dev_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1638: FILE: include/target/target_core_rd.h:161:
+extern void __rd_get_dev_info(rd_dev_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1638: FILE: include/target/target_core_rd.h:161:
+extern void __rd_get_dev_info(rd_dev_t *, char *, int *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1640: FILE: include/target/target_core_rd.h:163:
+typedef struct rd_host_s {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144106.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 186 warnings, 128 checks, 1679 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000144106.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
