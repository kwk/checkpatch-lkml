WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
This is the core of the cgroup-io-throttle kernel infrastructure. It creates

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#71: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#76: FILE: block/blk-io-throttle.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#91: FILE: block/blk-io-throttle.c:16:
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: block/blk-io-throttle.c:61:
+static void __iothrottle_stat_add_safe(struct iothrottle_stat *stat,
+			enum iothrottle_stat_index idx,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: block/blk-io-throttle.c:70:
+static void iothrottle_stat_add_sleep(struct iothrottle_stat *stat,
+			unsigned long long sleep)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#157: FILE: block/blk-io-throttle.c:82:
+static unsigned long long iothrottle_read_stat(struct iothrottle_stat *stat,
+				enum iothrottle_stat_index idx)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#203: FILE: block/blk-io-throttle.c:128:
+};
+static struct iothrottle init_iothrottle;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: block/blk-io-throttle.c:165:
+static inline void iothrottle_insert_node(struct iothrottle *iot,
+						struct iothrottle_node *n)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cgrp->parent'
#272: FILE: block/blk-io-throttle.c:197:
+	if (unlikely((cgrp->parent) == NULL))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#272: FILE: block/blk-io-throttle.c:197:
+	if (unlikely((cgrp->parent) == NULL))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: block/blk-io-throttle.c:199:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: block/blk-io-throttle.c:234:
+static void iothrottle_show_stats(struct seq_file *m, dev_t dev,
+			struct res_counter_ratelimit *res)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: block/blk-io-throttle.c:239:
+	seq_printf(m, "%u %u %llu %llu %lli %llu %li\n",
+		MAJOR(dev), MINOR(dev),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: block/blk-io-throttle.c:246:
+static int iothrottle_read(struct cgroup *cgrp, struct cftype *cft,
+				struct seq_file *m)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#333: FILE: block/blk-io-throttle.c:258:
+		BUG_ON(!n->dev);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: block/blk-io-throttle.c:268:
+			count = iothrottle_read_stat(&n->stat,
+					IOTHROTTLE_STAT_COUNT);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: block/blk-io-throttle.c:270:
+			sleep = iothrottle_read_stat(&n->stat,
+					IOTHROTTLE_STAT_SLEEP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#347: FILE: block/blk-io-throttle.c:272:
+			seq_printf(m, "%u %u %llu %li\n",
+				MAJOR(n->dev), MINOR(n->dev),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#371: FILE: block/blk-io-throttle.c:296:
+		BUG_ON(!bdev->bd_inode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: block/blk-io-throttle.c:314:
+static int iothrottle_parse_args(char *buf, size_t nbytes, int filetype,
+			dev_t *dev, unsigned long long *iolimit,

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#417: FILE: block/blk-io-throttle.c:342:
+	ret = strict_strtoull(s[1], 10, iolimit);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#425: FILE: block/blk-io-throttle.c:350:
+	ret = strict_strtoull(s[2], 10, strategy);

CHECK:BRACES: braces {} should be used on all arms of this statement
#437: FILE: block/blk-io-throttle.c:362:
+	if (!s[3])
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#439: FILE: block/blk-io-throttle.c:364:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtoll is obsolete, use kstrtoll instead
#440: FILE: block/blk-io-throttle.c:365:
+		ret = strict_strtoll(s[3], 10, bucket_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#453: FILE: block/blk-io-throttle.c:378:
+static int iothrottle_write(struct cgroup *cgrp, struct cftype *cft,
+				const char *buffer)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#474: FILE: block/blk-io-throttle.c:399:
+	ret = iothrottle_parse_args(buf, nbytes, cft->private, &dev, &iolimit,
+				&strategy, &bucket_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: block/blk-io-throttle.c:415:
+		res_counter_ratelimit_set_limit(&newn->bw, strategy,
+				ALIGN(iolimit, 1024), ALIGN(bucket_size, 1024));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: block/blk-io-throttle.c:425:
+		res_counter_ratelimit_set_limit(&newn->iops, strategy,
+				iolimit * 1000, bucket_size * 1000);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: block/blk-io-throttle.c:525:
+static unsigned long long iothrottle_evaluate_sleep(struct iothrottle *iot,
+				struct block_device *bdev, ssize_t bytes)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#631: FILE: block/blk-io-throttle.c:556:
+static void iothrottle_acct_stat(struct iothrottle *iot,
+			struct block_device *bdev, unsigned long long sleep)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: block/blk-io-throttle.c:609:
+cgroup_io_throttle(struct page *page, struct block_device *bdev,
+		ssize_t bytes, int can_sleep)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#691: FILE: block/blk-io-throttle.c:616:
+	BUG_ON(!bdev->bd_inode || !bdev->bd_disk);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: block/blk-io-throttle.c:633:
+	WARN_ON_ONCE(can_sleep &&
+		(irqs_disabled() || in_interrupt() || in_atomic()));

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#708: FILE: block/blk-io-throttle.c:633:
+		(irqs_disabled() || in_interrupt() || in_atomic()));

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#745: FILE: include/linux/blk-io-throttle.h:1:
+#ifndef BLK_IO_THROTTLE_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#752: FILE: include/linux/blk-io-throttle.h:8:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: include/linux/blk-io-throttle.h:14:
+cgroup_io_throttle(struct page *page, struct block_device *bdev,
+		ssize_t bytes, int can_sleep);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#787: FILE: include/linux/blk-io-throttle.h:43:
+cgroup_io_throttle(struct page *page, struct block_device *bdev,
+		ssize_t bytes, int can_sleep)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 27 checks, 773 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000227411.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
