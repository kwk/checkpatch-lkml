WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/aufs/file.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#57: FILE: fs/aufs/file.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#58: FILE: fs/aufs/file.h:16:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:CVS_KEYWORD: CVS style keyword markers, these will _not_ be updated
#64: FILE: fs/aufs/file.h:22:
+ * $Id: file.h,v 1.2 2008/04/21 01:35:14 sfjro Exp $

Since linux moved to git, the CVS markers are no longer used.
So, CVS style keywords ($Id$, $Revision$, $Log$) should not be
added.

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#97: FILE: fs/aufs/file.h:55:
+		struct vm_operations_struct	*fi_h_vm_ops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#105: FILE: fs/aufs/file.h:63:
+extern struct address_space_operations aufs_aop;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#117: FILE: fs/aufs/file.h:75:
+extern struct file_operations aufs_file_fop;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#177: FILE: fs/aufs/file.h:135:
+int au_store_fmode_exec(struct nameidata *nd, struct inode *inode);
                                           ^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <LKTRTrace>
#181: FILE: fs/aufs/file.h:139:
+	LKTRTrace("%.*s\n", AuDLNPair(h_file->f_dentry));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <AuDLNPair>
#181: FILE: fs/aufs/file.h:139:
+	LKTRTrace("%.*s\n", AuDLNPair(h_file->f_dentry));

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#192: FILE: fs/aufs/file.h:150:
+static inline int au_store_fmode_exec(struct nameidata *nd, struct inode *inode)
                                                         ^^

CHECK:CAMELCASE: Avoid CamelCase: <AuSimpleRwsemFuncs>
#216: FILE: fs/aufs/file.h:174:
+AuSimpleRwsemFuncs(fi, struct file *f, au_fi(f)->fi_rwsem);

CHECK:CAMELCASE: Avoid CamelCase: <FiMustReadLock>
#219: FILE: fs/aufs/file.h:177:
+#define FiMustReadLock(f) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#219: FILE: fs/aufs/file.h:177:
+#define FiMustReadLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustReadLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <SiMustAnyLock>
#220: FILE: fs/aufs/file.h:178:
+	SiMustAnyLock((f)->f_dentry->d_sb); \

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustReadLock>
#221: FILE: fs/aufs/file.h:179:
+	AuRwMustReadLock(&au_fi(f)->fi_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <FiMustWriteLock>
#224: FILE: fs/aufs/file.h:182:
+#define FiMustWriteLock(f) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#224: FILE: fs/aufs/file.h:182:
+#define FiMustWriteLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustWriteLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustWriteLock>
#226: FILE: fs/aufs/file.h:184:
+	AuRwMustWriteLock(&au_fi(f)->fi_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <FiMustAnyLock>
#229: FILE: fs/aufs/file.h:187:
+#define FiMustAnyLock(f) do { \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'f' - possible side-effects?
#229: FILE: fs/aufs/file.h:187:
+#define FiMustAnyLock(f) do { \
+	SiMustAnyLock((f)->f_dentry->d_sb); \
+	AuRwMustAnyLock(&au_fi(f)->fi_rwsem); \
+} while (0)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustAnyLock>
#231: FILE: fs/aufs/file.h:189:
+	AuRwMustAnyLock(&au_fi(f)->fi_rwsem); \

CHECK:CAMELCASE: Avoid CamelCase: <FiMustNoWaiters>
#234: FILE: fs/aufs/file.h:192:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuRwMustNoWaiters>
#234: FILE: fs/aufs/file.h:192:
+#define FiMustNoWaiters(f)	AuRwMustNoWaiters(&au_fi(f)->fi_rwsem)

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#260: FILE: fs/aufs/file.h:218:
+	AuDebugOn(au_sbend(file->f_dentry->d_sb) < bindex);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#268: FILE: fs/aufs/file.h:226:
+	AuDebugOn(au_sbend(file->f_dentry->d_sb) < bindex
+		  || bindex < au_fbstart(file));

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#277: FILE: fs/aufs/file.h:235:
+	AuDebugOn(!S_ISDIR(file->f_dentry->d_inode->i_mode)
+		  || (au_fi(file)->fi_vdir_cache && vdir_cache));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 8 warnings, 18 checks, 246 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
