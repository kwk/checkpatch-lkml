WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: fs/fdmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#48: FILE: fs/fdmap.c:2:
+ *  fs/fdmap.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#68: FILE: fs/fdmap.c:22:
+	spinlock_t lock;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#77: FILE: fs/fdmap.c:31:
+	head->prev = head->next = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:MEMORY_BARRIER: memory barrier without comment
#126: FILE: fs/fdmap.c:80:
+	smp_rmb();

CHECK:SPACING: No space is necessary after a cast
#162: FILE: fs/fdmap.c:116:
+	return (struct file *) ptr->prev;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#176: FILE: fs/fdmap.c:130:
+	smp_wmb();

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/fdmap.c:131:
+	fmap->slots[FDMAP_FD(fd) - fmap->base].prev = (unsigned long) file;

CHECK:SPACING: No space is necessary after a cast
#231: FILE: fs/fdmap.c:185:
+		fd = (int) fmap->slots[0].next;

WARNING:MEMORY_BARRIER: memory barrier without comment
#242: FILE: fs/fdmap.c:196:
+	smp_wmb();

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#322: FILE: fs/fdmap.c:276:
+void fdmap_for_each_file(struct fd_map *fmap, int (*proc)(void *, struct file *),
+			 void *priv)
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#331: FILE: fs/fdmap.c:285:
+			file = (struct file *) ptr->prev;

WARNING:TYPO_SPELLING: 'desciptors' may be misspelled - perhaps 'descriptors'?
#340: FILE: fs/fdmap.c:294:
+ *                       desciptors having the bit @bit set in their flags
                          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'desciptors' may be misspelled - perhaps 'descriptors'?
#348: FILE: fs/fdmap.c:302:
+ * @fset:   [out]    Bit set of file desciptors having the bit @bit set in
                                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'desciptor' may be misspelled - perhaps 'descriptor'?
#349: FILE: fs/fdmap.c:303:
+ *                   their flags. Bit #0 of @fset refers to the file desciptor
                                                                      ^^^^^^^^^

WARNING:TYPO_SPELLING: 'desciptors' may be misspelled - perhaps 'descriptors'?
#353: FILE: fs/fdmap.c:307:
+ * file desciptors with the bit @bit set are available.
         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'transfered' may be misspelled - perhaps 'transferred'?
#388: FILE: fs/fdmap.c:342:
+ *                   transfered
                      ^^^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#400: FILE: fs/fdmap.c:354:
+	BUG_ON(dfmap->size < sfmap->size);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#406: FILE: fs/fdmap.c:360:
+		if (fdmap_busy_slot(sptr) && sptr->prev) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#408: FILE: fs/fdmap.c:362:
+				get_file((struct file *) sptr->prev);

CHECK:BRACES: Unbalanced braces around else statement
#411: FILE: fs/fdmap.c:365:
+		} else

CHECK:SPACING: No space is necessary after a cast
#436: FILE: fs/fdmap.c:390:
+	if ((long) base + (long) size >= INT_MAX ||

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fmap)...) over kzalloc(sizeof(struct fd_map)...)
#439: FILE: fs/fdmap.c:393:
+	fmap = kzalloc(sizeof(struct fd_map), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: fs/fdmap.c:417:
+	BUG_ON(!fmap);

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#518: FILE: fs/fdmap.c:472:
+__initcall(fdmap_defer_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#525: FILE: include/linux/fdmap.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#526: FILE: include/linux/fdmap.h:2:
+ *  include/linux/fdmap.h

CHECK:BIT_MACRO: Prefer using the BIT macro
#542: FILE: include/linux/fdmap.h:18:
+#define FDMAP_F_CLOEXEC		(1UL << FDMAP_BIT_CLOEXEC)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: No space is necessary after a cast
#545: FILE: include/linux/fdmap.h:21:
+#define FDMAP_HINT_FDUP(i)	(- (int) (i))

ERROR:SPACING: space prohibited after that '-' (ctx:BxW)
#545: FILE: include/linux/fdmap.h:21:
+#define FDMAP_HINT_FDUP(i)	(- (int) (i))
                           	 ^

CHECK:SPACING: No space is necessary after a cast
#546: FILE: include/linux/fdmap.h:22:
+#define FDMAP_HINT_EXACT(i)	((int) (i) + 1)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423359.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 14 checks, 573 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423359.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
