WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
- sata_mv: large update, include ATAPI support (previously thought impossible)

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#131: 
Erik Inge Bolsø (4):
              ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#333: FILE: drivers/ata/ata_piix.c:466:
+^I^I.pio_mask ^I= ATA_PIO4,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#344: FILE: drivers/ata/ata_piix.c:475:
+^I^I.pio_mask ^I= ATA_PIO4,$

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#493: FILE: drivers/ata/libata-core.c:6721:
+EXPORT_SYMBOL_GPL(ata_pio_queue_task);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#515: FILE: drivers/ata/libata-eh.c:565:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#517: FILE: drivers/ata/libata-eh.c:567:
+		/* This must occur under the ap->lock as we don't want
+		   a polled recovery to race the real interrupt handler

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: drivers/ata/libata-eh.c:568:
+^I^I   $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#521: FILE: drivers/ata/libata-eh.c:571:
+^I^I   $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#523: FILE: drivers/ata/libata-eh.c:573:
+		   this as if normal completion won the race */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#527: FILE: drivers/ata/libata-eh.c:577:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: drivers/ata/libata-eh.c:621:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#537: FILE: drivers/ata/libata-eh.c:623:
+	/* If we timed raced normal completion and there is nothing to
+	   recover nr_timedout == 0 why exactly are we doing error recovery ? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#537: FILE: drivers/ata/libata-eh.c:623:
+	   recover nr_timedout == 0 why exactly are we doing error recovery ? */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#568: FILE: drivers/ata/libata-sff.c:1653:
+unsigned int ata_sff_host_intr(struct ata_port *ap,
 				      struct ata_queued_cmd *qc)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#595: FILE: drivers/ata/libata-sff.c:1801:
+	if (qc == NULL ||  !(qc->flags & ATA_QCFLAG_ACTIVE))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#601: FILE: drivers/ata/libata-sff.c:1807:
+	/* See if the controller thinks it is still busy - if so the command
+	   isn't a lost IRQ but is still in progress */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#601: FILE: drivers/ata/libata-sff.c:1807:
+	   isn't a lost IRQ but is still in progress */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#607: FILE: drivers/ata/libata-sff.c:1813:
+	/* There was a command running, we are no longer busy and we have
+	   no interrupt. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#607: FILE: drivers/ata/libata-sff.c:1813:
+	   no interrupt. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#609: FILE: drivers/ata/libata-sff.c:1815:
+	ata_port_printk(ap, KERN_WARNING, "lost interrupt (Status 0x%x)\n",
+								status);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#611: FILE: drivers/ata/libata-sff.c:1817:
+	/* Run the host interrupt logic as if the interrupt had not been
+	   lost */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#611: FILE: drivers/ata/libata-sff.c:1817:
+	   lost */

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#628: FILE: drivers/ata/libata-sff.c:2251:
+ *	failing to complete. In some cases this is neccessary before a
   	                                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#639: FILE: drivers/ata/libata-sff.c:2262:
+	if (qc == NULL || qc->dma_dir == DMA_TO_DEVICE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#645: FILE: drivers/ata/libata-sff.c:2268:
+	for (count = 0; (ap->ops->sff_check_status(ap) & ATA_DRQ)
+						&& count < 32768; count++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#651: FILE: drivers/ata/libata-sff.c:2274:
+		ata_port_printk(ap, KERN_DEBUG,
+			"drained %d bytes to clear DRQ.\n", count);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#653: FILE: drivers/ata/libata-sff.c:2276:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#666: FILE: drivers/ata/libata-sff.c:2321:
+		if (qc->err_mask == AC_ERR_TIMEOUT
+						&& (host_stat & ATA_DMA_ERR)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#715: FILE: drivers/ata/pata_acpi.c:251:
+^I^I.udma_mask ^I= ATA_UDMA6,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#949: FILE: drivers/ata/pata_artop.c:304:
+	/* Now apply serialization rules. Only allow a command if the
+	   other channel state machine is idle */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#949: FILE: drivers/ata/pata_artop.c:304:
+	   other channel state machine is idle */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: drivers/ata/pata_at32.c:71:
+  PIO_MASK = ATA_PIO4,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1227: FILE: drivers/ata/pata_efar.c:256:
+^I^I.udma_mask ^I= ATA_UDMA4,$

WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#1740: FILE: drivers/ata/pata_pcmcia.c:134:
+ *	failing to complete. In some cases this is neccessary before a
   	                                           ^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1744: FILE: drivers/ata/pata_pcmcia.c:138:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1744: FILE: drivers/ata/pata_pcmcia.c:138:
+ $

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!qc"
#1751: FILE: drivers/ata/pata_pcmcia.c:145:
+	if (qc == NULL || qc->dma_dir == DMA_TO_DEVICE)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1758: FILE: drivers/ata/pata_pcmcia.c:152:
+	for (count = 0; (ap->ops->sff_check_status(ap) & ATA_DRQ)
+							&& count++ < 65536;)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1763: FILE: drivers/ata/pata_pcmcia.c:157:
+		ata_port_printk(ap, KERN_WARNING, "drained %d bytes to clear DRQ.\n",
+								count);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1765: FILE: drivers/ata/pata_pcmcia.c:159:
+
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1984: FILE: drivers/ata/pata_rb532_cf.c:105:
 static __devinit int rb532_pata_driver_probe(struct platform_device *pdev)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2039: FILE: drivers/ata/pata_sc1200.c:199:
+	/* Now apply serialization rules. Only allow a command if the
+	   other channel state machine is idle */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2039: FILE: drivers/ata/pata_sc1200.c:199:
+	   other channel state machine is idle */

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2464: FILE: drivers/ata/sata_mv.c:75:
+module_param(msi, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2469: FILE: drivers/ata/sata_mv.c:80:
+module_param(irq_coalescing_io_count, int, S_IRUGO);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2474: FILE: drivers/ata/sata_mv.c:85:
+module_param(irq_coalescing_usecs, int, S_IRUGO);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2844: FILE: drivers/ata/sata_mv.c:1002:
+	void __iomem *hc_mmio = mv_hc_base_from_port(

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2875: FILE: drivers/ata/sata_mv.c:1033:
+		clks = count = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2899: FILE: drivers/ata/sata_mv.c:1057:
+		clks = count = 0; /* force clearing of regular regs below */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2936: FILE: drivers/ata/sata_mv.c:1094:
+static void mv_start_edma(struct ata_port *ap, void __iomem *port_mmio,
 			 struct mv_port_priv *pp, u8 protocol)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2964: FILE: drivers/ata/sata_mv.c:1109:
+		mv_clear_and_enable_port_irqs(ap, port_mmio, DONE_IRQ|ERR_IRQ);
 		                                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3283: FILE: drivers/ata/sata_mv.c:1756:
+	writel((pp->sg_tbl_dma[qc->tag] >> 16) >> 16,
+		port_mmio + BMDMA_PRD_HIGH_OFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3285: FILE: drivers/ata/sata_mv.c:1758:
+	writelfl(pp->sg_tbl_dma[qc->tag],
+		port_mmio + BMDMA_PRD_LOW_OFS);

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(fis)
#3464: FILE: drivers/ata/sata_mv.c:2091:
+	err = mv_send_fis(ap, fis, sizeof(fis) / sizeof(fis[0]));

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#3471: FILE: drivers/ata/sata_mv.c:2098:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3521: FILE: drivers/ata/sata_mv.c:2151:
+		writelfl((pp->crqb_dma & EDMA_REQ_Q_BASE_LO_MASK) | in_index,
+					port_mmio + EDMA_REQ_Q_IN_PTR_OFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3668: FILE: drivers/ata/sata_mv.c:3749:
+	mv_set_irq_coalescing(host, irq_coalescing_io_count,
+				    irq_coalescing_usecs);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4064: FILE: drivers/ata/sata_vsc.c:312:
+	/* The IRQ handling is not quite standard SFF behaviour so we
+	   cannot use the default lost interrupt handler */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4064: FILE: drivers/ata/sata_vsc.c:312:
+	   cannot use the default lost interrupt handler */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4136: FILE: include/linux/libata.h:1014:
+extern void ata_pio_queue_task(struct ata_port *ap, void *data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4146: FILE: include/linux/libata.h:1581:
+extern void ata_sff_lost_interrupt(struct ata_port *ap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4154: FILE: include/linux/libata.h:1594:
+extern void ata_sff_drain_fifo(struct ata_queued_cmd *qc);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 32 warnings, 25 checks, 3475 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
