WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
> >   wb thread will notice and execute work on bdi->work_list. The arguments

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '22ef37eed673587ac984965dc88ba94c68873291', maybe rebased or not pulled?
#126: 
commit 22ef37eed673587ac984965dc88ba94c68873291

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#139: 
    Signed-off-by: Toshiyuki Okajima <toshi.okajima@jp.fujitsu.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#140: 
    Cc: Alexey Dobriyan <adobriyan@gmail.com>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#141: 
    Cc: Peter Zijlstra <peterz@infradead.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#142: 
    Cc: Nick Piggin <nickpiggin@yahoo.com.au>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Cc:
#143: 
    Cc: Al Viro <viro@zeniv.linux.org.uk>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#144: 
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#145: 
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

CHECK:SPACING: No space is necessary after a cast
#363: FILE: fs/fs-writeback.c:59:
+	return (struct super_block *) (work->sb_data & ~1UL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#376: FILE: fs/fs-writeback.c:71:
+	work->sb_data = (unsigned long) sb;

CHECK:BRACES: braces {} should be used on all arms of this statement
#411: FILE: fs/fs-writeback.c:101:
+	if (!bdi_work_on_stack(work))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#413: FILE: fs/fs-writeback.c:103:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#474: FILE: fs/fs-writeback.c:164:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#476: FILE: fs/fs-writeback.c:166:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#501: FILE: fs/fs-writeback.c:191:
+int bdi_start_writeback(struct backing_dev_info *bdi, struct super_block *sb,
+			 long nr_pages)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#695: FILE: fs/fs-writeback.c:382:
+	while (!kthread_should_stop()) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#698: FILE: fs/fs-writeback.c:385:
+		if (pages_written)
[...]
+		else if (wait_jiffies != -1UL) {
[...]

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#791: FILE: fs/fs-writeback.c:565:
+				printk("bdi-%s not registered\n", bdi->name);

CHECK:BRACES: Unbalanced braces around else statement
#1043: FILE: fs/fs-writeback.c:927:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1076: FILE: fs/fs-writeback.c:960:
+void generic_sync_sb_inodes(struct super_block *sb,
+				struct writeback_control *wbc)

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1316: FILE: fs/ubifs/super.c:1926:
+	c->bdi.name = "ubifs",
 	c->bdi.capabilities = BDI_CAP_MAP_COPY;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1402: FILE: include/linux/backing-dev.h:108:
+int bdi_start_writeback(struct backing_dev_info *bdi, struct super_block *sb,
+			 long nr_pages);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1496: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1496: FILE: include/linux/fs.h:1560:
+	struct bdi_writeback *(*inode_get_wb) (struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1504: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct writeback_control *' should also have an identifier name
#1504: FILE: include/linux/fs.h:2069:
+extern void generic_sync_bdi_inodes(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1505: FILE: include/linux/fs.h:2070:
+extern void generic_sync_bdi_inodes(struct super_block *sb,
+				struct writeback_control *);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1640: FILE: mm/backing-dev.c:58:
+	nr_wb = nr_dirty = nr_io = nr_more_io = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#1746: FILE: mm/backing-dev.c:293:
+	if (!test_and_set_bit(BDI_wb_alloc, &bdi->state))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1748: FILE: mm/backing-dev.c:295:
+	else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*wb)...) over kmalloc(sizeof(struct bdi_writeback)...)
#1749: FILE: mm/backing-dev.c:296:
+		wb = kmalloc(sizeof(struct bdi_writeback), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#1848: FILE: mm/backing-dev.c:395:
+	if (!bdi_wblist_needs_lock(bdi))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1850: FILE: mm/backing-dev.c:397:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1880: FILE: mm/backing-dev.c:427:
+		smp_mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1916: FILE: mm/backing-dev.c:463:
+		wb->task = kthread_run(bdi_start_fn, wb, "bdi-%s",
+						dev_name(bdi->dev));

WARNING:SPACING: missing space after return type
#1965: FILE: mm/backing-dev.c:512:
+				     int(*func)(struct backing_dev_info *))

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1971: FILE: mm/backing-dev.c:518:
+		printk("bdi %p/%s is not registered!\n", bdi, bdi->name);

WARNING:TYPO_SPELLING: 'simultanous' may be misspelled - perhaps 'simultaneous'?
#1977: FILE: mm/backing-dev.c:524:
+	 * abort if we two or more simultanous calls to
 	                           ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#1978: FILE: mm/backing-dev.c:525:
+	 * bdi_add_default_flusher_task() occured, further additions will block
 	                                  ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1999: FILE: mm/backing-dev.c:546:
+	wait_on_bit_lock(&bdi->state, BDI_pending, bdi_sched_wait,
+				TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2053: FILE: mm/backing-dev.c:611:
+		wb->task = kthread_run(bdi_forker_task, wb, "bdi-%s",
+						dev_name(dev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2090: FILE: mm/backing-dev.c:653:
+	wait_on_bit(&bdi->state, BDI_pending, bdi_sched_wait,
+			TASK_UNINTERRUPTIBLE);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#2397: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123301.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 24 checks, 2084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000123301.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
