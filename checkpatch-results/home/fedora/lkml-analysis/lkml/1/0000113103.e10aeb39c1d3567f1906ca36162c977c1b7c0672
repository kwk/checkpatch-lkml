WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
>   data might overflow on 64 bit systems. In addition, since "fairness" is nothing 

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#99: FILE: block/elevator-fq.h:31:
+	__ATTR(name, S_IRUGO|S_IWUSR, elv_##name##_show, elv_##name##_store)
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO|S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#99: FILE: block/elevator-fq.h:31:
+	__ATTR(name, S_IRUGO|S_IWUSR, elv_##name##_show, elv_##name##_store)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: block/elevator-fq.h:656:
+extern ssize_t elv_slice_idle_show(struct elevator_queue *e, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: block/elevator-fq.h:657:
+extern ssize_t elv_slice_idle_store(struct elevator_queue *e, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#122: FILE: block/elevator-fq.h:658:
+extern ssize_t elv_slice_idle_store(struct elevator_queue *e, const char *name,
 						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: block/elevator-fq.h:659:
+extern ssize_t elv_slice_sync_show(struct elevator_queue *e, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#126: FILE: block/elevator-fq.h:660:
+extern ssize_t elv_slice_sync_store(struct elevator_queue *e, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#127: FILE: block/elevator-fq.h:661:
+extern ssize_t elv_slice_sync_store(struct elevator_queue *e, const char *name,
 						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: block/elevator-fq.h:663:
+extern ssize_t elv_async_slice_idle_show(struct elevator_queue *e, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#132: FILE: block/elevator-fq.h:664:
+extern ssize_t elv_async_slice_idle_store(struct elevator_queue *e,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: block/elevator-fq.h:665:
+extern ssize_t elv_async_slice_idle_store(struct elevator_queue *e,
 					const char *name, size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: block/elevator-fq.h:667:
+extern ssize_t elv_slice_async_show(struct elevator_queue *e, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#138: FILE: block/elevator-fq.h:668:
+extern ssize_t elv_slice_async_store(struct elevator_queue *e, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: block/elevator-fq.h:669:
+extern ssize_t elv_slice_async_store(struct elevator_queue *e, const char *name,
 						size_t count);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: block/elevator-fq.h:670:
+extern ssize_t elv_fairness_show(struct elevator_queue *e, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: block/elevator-fq.h:671:
+extern ssize_t elv_fairness_store(struct elevator_queue *e, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: block/elevator-fq.h:672:
+extern ssize_t elv_fairness_store(struct elevator_queue *e, const char *name,
 						size_t count);

CHECK:SPACING: No space is necessary after a cast
#316: FILE: block/elevator-fq.c:2633:
+	char *p = (char *) page;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#318: FILE: block/elevator-fq.c:2635:
+	*var = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#360: FILE: block/elevator-fq.c:2639:
+#define SHOW_FUNCTION(__FUNC, __VAR, __CONV)				\
+ssize_t __FUNC(struct elevator_queue *e, char *page)		\
+{									\
+	struct elv_fq_data *efqd = &e->efqd;				\
+	unsigned int __data = __VAR;					\
+	if (__CONV)							\
+		__data = jiffies_to_msecs(__data);			\
+	return elv_var_show(__data, (page));				\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#369: FILE: block/elevator-fq.c:2648:
+}
+SHOW_FUNCTION(elv_fairness_show, efqd->fairness, 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#370: FILE: block/elevator-fq.c:2649:
+EXPORT_SYMBOL(elv_fairness_show);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#372: FILE: block/elevator-fq.c:2651:
+EXPORT_SYMBOL(elv_slice_idle_show);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#374: FILE: block/elevator-fq.c:2653:
+EXPORT_SYMBOL(elv_async_slice_idle_show);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#376: FILE: block/elevator-fq.c:2655:
+EXPORT_SYMBOL(elv_slice_sync_show);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#378: FILE: block/elevator-fq.c:2657:
+EXPORT_SYMBOL(elv_slice_async_show);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '__PTR' - possible side-effects?
#381: FILE: block/elevator-fq.c:2660:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct elv_fq_data *efqd = &e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MIN' - possible side-effects?
#381: FILE: block/elevator-fq.c:2660:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct elv_fq_data *efqd = &e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'MAX' - possible side-effects?
#381: FILE: block/elevator-fq.c:2660:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct elv_fq_data *efqd = &e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#381: FILE: block/elevator-fq.c:2660:
+#define STORE_FUNCTION(__FUNC, __PTR, MIN, MAX, __CONV)			\
+ssize_t __FUNC(struct elevator_queue *e, const char *page, size_t count)	\
+{									\
+	struct elv_fq_data *efqd = &e->efqd;				\
+	unsigned int __data;						\
+	int ret = elv_var_store(&__data, (page), count);		\
+	if (__data < (MIN))						\
+		__data = (MIN);						\
+	else if (__data > (MAX))					\
+		__data = (MAX);						\
+	if (__CONV)							\
+		*(__PTR) = msecs_to_jiffies(__data);			\
+	else								\
+		*(__PTR) = __data;					\
+	return ret;							\
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#397: FILE: block/elevator-fq.c:2676:
+}
+STORE_FUNCTION(elv_fairness_store, &efqd->fairness, 0, 1, 0);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#398: FILE: block/elevator-fq.c:2677:
+EXPORT_SYMBOL(elv_fairness_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#400: FILE: block/elevator-fq.c:2679:
+EXPORT_SYMBOL(elv_slice_idle_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#402: FILE: block/elevator-fq.c:2681:
+EXPORT_SYMBOL(elv_async_slice_idle_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#404: FILE: block/elevator-fq.c:2683:
+EXPORT_SYMBOL(elv_slice_sync_store);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#406: FILE: block/elevator-fq.c:2685:
+EXPORT_SYMBOL(elv_slice_async_store);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 22 checks, 415 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000113103.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
