CHECK:LINE_SPACING: Please don't use multiple blank lines
#107: FILE: drivers/input/evdev.c:339:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#116: FILE: drivers/input/evdev.c:445:
+static int evdev_ir_send_from_user(const char __user *buffer, size_t size,
+				     struct ir_command *ir_command)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#149: FILE: drivers/input/evdev.c:508:
+static int evdev_ir_send_from_user(const char __user *buffer, size_t size,
+				     struct ir_command *ir_command)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#177: FILE: drivers/input/evdev.c:912:
+			if (_IOC_NR(cmd) == _IOC_NR(EVIOIRSEND)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#202: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#207: FILE: drivers/input/ir-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SIZEOF_PARENTHESIS: sizeof ir->buffer[0] should be sizeof(ir->buffer[0])
#251: FILE: drivers/input/ir-core.c:45:
+	memcpy(&ir->buffer[ir->count], &ir->buffer[0], ir->count * sizeof ir->buffer[0]);

WARNING:SIZEOF_PARENTHESIS: sizeof ir->buffer[0] should be sizeof(ir->buffer[0])
#253: FILE: drivers/input/ir-core.c:47:
+	memcpy(&ir->buffer[ir->count], &ir->buffer[0], ir->count * sizeof ir->buffer[0]);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#259: FILE: drivers/input/ir-core.c:53:
+static int decode_sony(struct input_dev *dev, struct ir_protocol *sony, unsigned int d, unsigned int bit)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#267: FILE: drivers/input/ir-core.c:61:
+	printk("D %d %d %d\n", d, delta, bit);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#269: FILE: drivers/input/ir-core.c:63:
+	if ((bit == 0) && (delta > 22)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#269: FILE: drivers/input/ir-core.c:63:
+	if ((bit == 0) && (delta > 22)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#270: FILE: drivers/input/ir-core.c:64:
+		printk("SIRC state 1\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 26'
#271: FILE: drivers/input/ir-core.c:65:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 32'
#271: FILE: drivers/input/ir-core.c:65:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 42'
#271: FILE: drivers/input/ir-core.c:65:
+		if ((sony->state == 26) || (sony->state == 32) || (sony->state == 42)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->good == sony->code'
#272: FILE: drivers/input/ir-core.c:66:
+			if (sony->good && (sony->good == sony->code)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#273: FILE: drivers/input/ir-core.c:67:
+			if (sony->good && (sony->good == sony->code)) {
+

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#274: FILE: drivers/input/ir-core.c:68:
+				input_report_ir(dev, IR_PROTOCOL, (sony->state == 26) ? IR_PROTOCOL_SONY_12 :

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#275: FILE: drivers/input/ir-core.c:69:
+						(sony->state == 32) ? IR_PROTOCOL_SONY_15 : IR_PROTOCOL_SONY_20);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#289: FILE: drivers/input/ir-core.c:83:
+				printk("SIRC - Saving %d bit %05x\n", (sony->state - 2) / 2, sony->code);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#289: FILE: drivers/input/ir-core.c:83:
+				printk("SIRC - Saving %d bit %05x\n", (sony->state - 2) / 2, sony->code);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 1'
#297: FILE: drivers/input/ir-core.c:91:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#297: FILE: drivers/input/ir-core.c:91:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 4'
#297: FILE: drivers/input/ir-core.c:91:
+	if ((sony->state == 1) && (bit == 1) && (delta == 4)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#299: FILE: drivers/input/ir-core.c:93:
+		printk("SIRC state 2\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state == 2'
#302: FILE: drivers/input/ir-core.c:96:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#302: FILE: drivers/input/ir-core.c:96:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#302: FILE: drivers/input/ir-core.c:96:
+	if ((sony->state == 2) && (bit == 0) && (delta == 1)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#304: FILE: drivers/input/ir-core.c:98:
+		printk("SIRC state 3\n");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#307: FILE: drivers/input/ir-core.c:101:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state >= 3'
#307: FILE: drivers/input/ir-core.c:101:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#307: FILE: drivers/input/ir-core.c:101:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#307: FILE: drivers/input/ir-core.c:101:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#307: FILE: drivers/input/ir-core.c:101:
+	if ((sony->state >= 3) && (sony->state & 1) && (bit == 1) && ((delta == 1) || (delta == 2))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#310: FILE: drivers/input/ir-core.c:104:
+		printk("SIRC state %d bit %d\n", sony->state, delta - 1);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sony->state >= 3'
#313: FILE: drivers/input/ir-core.c:107:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#313: FILE: drivers/input/ir-core.c:107:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#313: FILE: drivers/input/ir-core.c:107:
+	if ((sony->state >= 3) && !(sony->state & 1) && (bit == 0) && (delta == 1)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#315: FILE: drivers/input/ir-core.c:109:
+		printk("SIRC state %d\n", sony-> state);

ERROR:SPACING: spaces prohibited around that '->' (ctx:VxW)
#315: FILE: drivers/input/ir-core.c:109:
+		printk("SIRC state %d\n", sony-> state);
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#322: FILE: drivers/input/ir-core.c:116:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#356: FILE: drivers/input/ir-core.c:150:
+static int decode_jvc(struct input_dev *dev, struct ir_protocol *jvc, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#366: FILE: drivers/input/ir-core.c:160:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#366: FILE: drivers/input/ir-core.c:160:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 1'
#372: FILE: drivers/input/ir-core.c:166:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#372: FILE: drivers/input/ir-core.c:166:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#372: FILE: drivers/input/ir-core.c:166:
+	if ((jvc->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state == 2'
#377: FILE: drivers/input/ir-core.c:171:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#377: FILE: drivers/input/ir-core.c:171:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#377: FILE: drivers/input/ir-core.c:171:
+	if ((jvc->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#382: FILE: drivers/input/ir-core.c:176:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#382: FILE: drivers/input/ir-core.c:176:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#382: FILE: drivers/input/ir-core.c:176:
+	if ((jvc->state >= 3) && (jvc->state & 1) && (bit == 1) && (delta == 1)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#387: FILE: drivers/input/ir-core.c:181:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->state >= 3'
#387: FILE: drivers/input/ir-core.c:181:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#387: FILE: drivers/input/ir-core.c:181:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#387: FILE: drivers/input/ir-core.c:181:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#387: FILE: drivers/input/ir-core.c:181:
+	if ((jvc->state >= 3) && !(jvc->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'jvc->good == jvc->code'
#394: FILE: drivers/input/ir-core.c:188:
+			if (jvc->good && (jvc->good == jvc->code)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: drivers/input/ir-core.c:207:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#447: FILE: drivers/input/ir-core.c:241:
+static int decode_nec(struct input_dev *dev, struct ir_protocol *nec, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#457: FILE: drivers/input/ir-core.c:251:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 22'
#457: FILE: drivers/input/ir-core.c:251:
+	if ((bit == 0) && (delta > 22)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 1'
#463: FILE: drivers/input/ir-core.c:257:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#463: FILE: drivers/input/ir-core.c:257:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 16'
#463: FILE: drivers/input/ir-core.c:257:
+	if ((nec->state == 1) && (bit == 1) && (delta == 16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state == 2'
#468: FILE: drivers/input/ir-core.c:262:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#468: FILE: drivers/input/ir-core.c:262:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 8'
#468: FILE: drivers/input/ir-core.c:262:
+	if ((nec->state == 2) && (bit == 0) && (delta == 8)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#473: FILE: drivers/input/ir-core.c:267:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#473: FILE: drivers/input/ir-core.c:267:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#473: FILE: drivers/input/ir-core.c:267:
+	if ((nec->state >= 3) && (nec->state & 1) && (bit == 1) && (delta == 1)) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#485: FILE: drivers/input/ir-core.c:279:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nec->state >= 3'
#485: FILE: drivers/input/ir-core.c:279:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#485: FILE: drivers/input/ir-core.c:279:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 1'
#485: FILE: drivers/input/ir-core.c:279:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 3'
#485: FILE: drivers/input/ir-core.c:279:
+	if ((nec->state >= 3) && !(nec->state & 1) && (bit == 0) && ((delta == 1) || (delta == 3))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#497: FILE: drivers/input/ir-core.c:291:
+
+

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#505: FILE: drivers/input/ir-core.c:299:
+static int decode_rc5(struct input_dev *dev, struct ir_protocol *rc5, unsigned int d, unsigned int bit)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#518: FILE: drivers/input/ir-core.c:312:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 0'
#571: FILE: drivers/input/ir-core.c:365:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->bits == 3'
#571: FILE: drivers/input/ir-core.c:365:
+		if ((rc6->bits == 0) || (rc6->bits == 3)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#580: FILE: drivers/input/ir-core.c:374:
+		if (rc6->state == 23) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#586: FILE: drivers/input/ir-core.c:380:
+		} else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#593: FILE: drivers/input/ir-core.c:387:
+static int decode_rc6(struct input_dev *dev, struct ir_protocol *rc6, unsigned int d, unsigned int bit)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#604: FILE: drivers/input/ir-core.c:398:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta > 19'
#604: FILE: drivers/input/ir-core.c:398:
+	if ((bit == 0) && (delta > 19)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 1'
#612: FILE: drivers/input/ir-core.c:406:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 1'
#612: FILE: drivers/input/ir-core.c:406:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 6'
#612: FILE: drivers/input/ir-core.c:406:
+	if ((rc6->state == 1) && (bit == 1) && (delta == 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc6->state == 2'
#617: FILE: drivers/input/ir-core.c:411:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bit == 0'
#617: FILE: drivers/input/ir-core.c:411:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta == 2'
#617: FILE: drivers/input/ir-core.c:411:
+	if ((rc6->state == 2) && (bit == 0) && (delta == 2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta >= 1'
#623: FILE: drivers/input/ir-core.c:417:
+		if ((delta >= 1) || (delta <= 3)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'delta <= 3'
#623: FILE: drivers/input/ir-core.c:417:
+		if ((delta >= 1) || (delta <= 3)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#644: FILE: drivers/input/ir-core.c:438:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev->ir)...) over kzalloc(sizeof(struct ir_device)...)
#647: FILE: drivers/input/ir-core.c:441:
+	dev->ir = kzalloc(sizeof(struct ir_device), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:LINE_SPACING: Please don't use multiple blank lines
#659: FILE: drivers/input/ir-core.c:453:
+
+

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#663: FILE: drivers/input/ir-core.c:457:
+	if (dev->ir) {
+		kfree(dev->ir);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#671: FILE: drivers/input/ir-core.c:465:
+	unsigned freq, xmit = 0;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#739: FILE: drivers/input/ir/Kconfig:4:
+menuconfig INPUT_IR
+	bool "Infrared Remote (IR) receiver/transmitter drivers"
+	default n
+	help
+	  Say Y here, and all supported Infrared Remote Control IR
+	  receiver and transmitter drivers will be displayed. The receiver drivers
+	  allow control of your Linux system via remote control.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#769: FILE: include/linux/input.h:82:
+#define EVIOIRSEND		_IOC(_IOC_WRITE, 'E', 0x80, sizeof(struct ir_command))	/* send an IR command */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#815: FILE: include/linux/input.h:981:
+
+

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#862: FILE: include/linux/input.h:1427:
+	struct mutex lock;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#873: FILE: include/linux/input.h:1438:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 26 warnings, 79 checks, 765 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223087.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
