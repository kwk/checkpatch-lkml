WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: drivers/regulator/reg-core.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#144: FILE: drivers/regulator/reg-core.c:101:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#149: FILE: drivers/regulator/reg-core.c:106:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:CAMELCASE: Avoid CamelCase: <max_uV>
#153: FILE: drivers/regulator/reg-core.c:110:
+	if (uV > rcdev->constraints->max_uV ||

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: drivers/regulator/reg-core.c:111:
+	if (uV > rcdev->constraints->max_uV ||
+		uV < rcdev->constraints->min_uV) {

CHECK:CAMELCASE: Avoid CamelCase: <min_uV>
#154: FILE: drivers/regulator/reg-core.c:111:
+		uV < rcdev->constraints->min_uV) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#155: FILE: drivers/regulator/reg-core.c:112:
+		printk(KERN_ERR "%s: invalid voltage %duV for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#166: FILE: drivers/regulator/reg-core.c:123:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#171: FILE: drivers/regulator/reg-core.c:128:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:CAMELCASE: Avoid CamelCase: <max_uA>
#175: FILE: drivers/regulator/reg-core.c:132:
+	if (uA > rcdev->constraints->max_uA ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/regulator/reg-core.c:133:
+	if (uA > rcdev->constraints->max_uA ||
+		uA < rcdev->constraints->min_uA) {

CHECK:CAMELCASE: Avoid CamelCase: <min_uA>
#176: FILE: drivers/regulator/reg-core.c:133:
+		uA < rcdev->constraints->min_uA) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#177: FILE: drivers/regulator/reg-core.c:134:
+		printk(KERN_ERR "%s: invalid current %duA for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: drivers/regulator/reg-core.c:145:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#193: FILE: drivers/regulator/reg-core.c:150:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#198: FILE: drivers/regulator/reg-core.c:155:
+		printk(KERN_ERR "%s: invalid mode %x for %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#209: FILE: drivers/regulator/reg-core.c:166:
+		printk(KERN_ERR "%s: no constraints for %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#214: FILE: drivers/regulator/reg-core.c:171:
+		printk(KERN_ERR "%s: operation not allowed for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#222: FILE: drivers/regulator/reg-core.c:179:
+static ssize_t device_requested_uA_show(struct device *dev,
+			     struct device_attribute *attr, char *buf)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#227: FILE: drivers/regulator/reg-core.c:184:
+	if (regulator == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <uA_load>
#230: FILE: drivers/regulator/reg-core.c:187:
+	return sprintf(buf, "%d\n", regulator->uA_load);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#279: FILE: drivers/regulator/reg-core.c:236:
+static ssize_t regulator_min_uA_show(struct class_device *cdev,
+					    char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: drivers/regulator/reg-core.c:247:
+static ssize_t regulator_max_uA_show(struct class_device *cdev,
+					    char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#301: FILE: drivers/regulator/reg-core.c:258:
+static ssize_t regulator_min_uV_show(struct class_device *cdev,
+					    char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: drivers/regulator/reg-core.c:269:
+static ssize_t regulator_max_uV_show(struct class_device *cdev,
+					    char *buf)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#329: FILE: drivers/regulator/reg-core.c:286:
+	list_for_each_entry(regulator, &rcdev->consumer_list, list)
+	    uA += regulator->uA_load;

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: drivers/regulator/reg-core.c:295:
+	struct regulator_cdev *rcdev = to_rcdev(cdev);
+	return sprintf(buf, "%d\n", rcdev->use_count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#372: FILE: drivers/regulator/reg-core.c:329:
+	struct regulator_cdev *rcdev = to_rcdev(cdev);
+	kfree(rcdev);

CHECK:CAMELCASE: Avoid CamelCase: <uV_required>
#389: FILE: drivers/regulator/reg-core.c:346:
+		if (regulator->enabled && regulator->uV_required > highest_uV)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#396: FILE: drivers/regulator/reg-core.c:353:
+ * support all the client devices */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#410: FILE: drivers/regulator/reg-core.c:367:
+ * consumer load. All locks held by caller */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: drivers/regulator/reg-core.c:375:
+	if (err < 0 || !rcdev->desc->ops->get_optimum_mode ||
+	    !rcdev->desc->ops->get_voltage || !rcdev->desc->ops->set_mode);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <input_uV>
#429: FILE: drivers/regulator/reg-core.c:386:
+		input_uV = rcdev->constraints->input_uV;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#432: FILE: drivers/regulator/reg-core.c:389:
+	list_for_each_entry(sibling, &rcdev->consumer_list, list)
+	    current_uA += sibling->uA_load;

CHECK:CAMELCASE: Avoid CamelCase: <uV_to_mV>
#454: FILE: drivers/regulator/reg-core.c:411:
+					uV_to_mV(constraints->min_uV));

CHECK:CAMELCASE: Avoid CamelCase: <uA_to_mA>
#462: FILE: drivers/regulator/reg-core.c:419:
+					uA_to_mA(constraints->min_uA));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#477: FILE: drivers/regulator/reg-core.c:434:
+	printk(KERN_INFO "regulator: %s: %s\n", rcdev->desc->name, buf);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#490: FILE: drivers/regulator/reg-core.c:447:
+	if (regulator == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: drivers/regulator/reg-core.c:457:
+		size = scnprintf(buf, REG_STR_SIZE, "microamps_requested_%s",
+			regulator->rcdev->desc->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator->dev_attr.attr.name"
#506: FILE: drivers/regulator/reg-core.c:463:
+		if (regulator->dev_attr.attr.name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#514: FILE: drivers/regulator/reg-core.c:471:
+			printk(KERN_WARNING "%s: could not add regulator_cdev"

WARNING:SPLIT_STRING: quoted string split across lines
#515: FILE: drivers/regulator/reg-core.c:472:
+			printk(KERN_WARNING "%s: could not add regulator_cdev"
+				" load sysfs\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/regulator/reg-core.c:478:
+		err = sysfs_create_link(&rcdev->cdev.kobj, &dev->kobj,
+			dev->kobj.name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#523: FILE: drivers/regulator/reg-core.c:480:
+			printk(KERN_WARNING

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!id"
#554: FILE: drivers/regulator/reg-core.c:511:
+	if (id == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#564: FILE: drivers/regulator/reg-core.c:521:
+	printk(KERN_ERR "regulator: Unable to get requested regulator: %s\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#571: FILE: drivers/regulator/reg-core.c:528:
+	if (regulator == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#593: FILE: drivers/regulator/reg-core.c:550:
+	if (regulator == NULL || IS_ERR(regulator))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#622: FILE: drivers/regulator/reg-core.c:579:
+			printk(KERN_ERR "%s: failed to enable %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#632: FILE: drivers/regulator/reg-core.c:589:
+			printk(KERN_ERR "%s: invalid voltage for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: drivers/regulator/reg-core.c:595:
+		if (rcdev->constraints &&
+			(rcdev->constraints->valid_ops_mask &

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#644: FILE: drivers/regulator/reg-core.c:601:
+			printk(KERN_ERR "%s: failed to enable %s\n",

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#687: FILE: drivers/regulator/reg-core.c:644:
+	if (rcdev->use_count == 1) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#692: FILE: drivers/regulator/reg-core.c:649:
+				printk(KERN_ERR "%s: failed to disable %s\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#705: FILE: drivers/regulator/reg-core.c:662:
+		 * have one less consumer device. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: drivers/regulator/reg-core.c:666:
+		if (rcdev->constraints &&
+			(rcdev->constraints->valid_ops_mask &

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc"
#1088: FILE: drivers/regulator/reg-core.c:1045:
+	if (regulator_desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->name"
#1091: FILE: drivers/regulator/reg-core.c:1048:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_desc->ops"
#1091: FILE: drivers/regulator/reg-core.c:1048:
+	if (regulator_desc->name == NULL || regulator_desc->ops == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rcdev)...) over kzalloc(sizeof(struct regulator_cdev)...)
#1098: FILE: drivers/regulator/reg-core.c:1055:
+	rcdev = kzalloc(sizeof(struct regulator_cdev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcdev"
#1099: FILE: drivers/regulator/reg-core.c:1056:
+	if (rcdev == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1120: FILE: drivers/regulator/reg-core.c:1077:
+	if (ret == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1122: FILE: drivers/regulator/reg-core.c:1079:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcdev"
#1139: FILE: drivers/regulator/reg-core.c:1096:
+	if (rcdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#1165: FILE: drivers/regulator/reg-core.c:1122:
+	if (regulator == NULL || parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1165: FILE: drivers/regulator/reg-core.c:1122:
+	if (regulator == NULL || parent == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1190: FILE: drivers/regulator/reg-core.c:1147:
+		printk(KERN_ERR

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator"
#1211: FILE: drivers/regulator/reg-core.c:1168:
+	if (regulator == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1241: FILE: drivers/regulator/reg-core.c:1198:
+int regulator_set_platform_constraints(const char *regulator_name,
+	struct regulation_constraints *constraints)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!regulator_name"
#1245: FILE: drivers/regulator/reg-core.c:1202:
+	if (regulator_name == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1349: FILE: drivers/regulator/reg-core.c:1306:
+	printk(KERN_INFO "regulator: core version %s\n", REGULATOR_VERSION);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 31 warnings, 40 checks, 1311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310424.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
