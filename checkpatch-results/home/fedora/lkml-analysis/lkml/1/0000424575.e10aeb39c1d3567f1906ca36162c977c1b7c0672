WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#64: FILE: mm/slub.c:350:
+			printk(KERN_ERR "%8s 0x%p: ", text, addr + i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#89: FILE: mm/slub.c:419:
+	printk(KERN_ERR "INFO: %s in ", s);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#92: FILE: mm/slub.c:421:
+	printk(" age=%lu cpu=%u pid=%d\n", jiffies - t->when, t->cpu, t->pid);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#107: FILE: mm/slub.c:435:
+	printk(KERN_ERR "INFO: Slab 0x%p used=%u fp=0x%p flags=0x%04lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#108: FILE: mm/slub.c:436:
+	printk(KERN_ERR "INFO: Slab 0x%p used=%u fp=0x%p flags=0x%04lx\n",
+		page, page->inuse, page->freelist, page->flags);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#110: FILE: mm/slub.c:438:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#120: FILE: mm/slub.c:448:
+	printk(KERN_ERR "========================================"

WARNING:SPLIT_STRING: quoted string split across lines
#121: FILE: mm/slub.c:449:
+	printk(KERN_ERR "========================================"
+			"=====================================\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#122: FILE: mm/slub.c:450:
+	printk(KERN_ERR "BUG %s: %s\n", s->name, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#123: FILE: mm/slub.c:451:
+	printk(KERN_ERR "----------------------------------------"

WARNING:SPLIT_STRING: quoted string split across lines
#124: FILE: mm/slub.c:452:
+	printk(KERN_ERR "----------------------------------------"
+			"-------------------------------------\n\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#135: FILE: mm/slub.c:463:
+	printk(KERN_ERR "FIX %s: %s\n", s->name, buf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#147: FILE: mm/slub.c:475:
+	printk(KERN_ERR "INFO: Object 0x%p @offset=%lu fp=0x%p\n\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: mm/slub.c:476:
+	printk(KERN_ERR "INFO: Object 0x%p @offset=%lu fp=0x%p\n\n",
+			p, p - addr, get_freepointer(s, p));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: mm/slub.c:549:
+static void restore_bytes(struct kmem_cache *s, char *message, u8 data,
+						void *from, void *to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: mm/slub.c:556:
+static int check_bytes_and_report(struct kmem_cache *s, struct page *page,
+			u8 *object, char *what,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#246: FILE: mm/slub.c:557:
+			u8* start, unsigned int value, unsigned int bytes)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: mm/slub.c:571:
+	printk(KERN_ERR "INFO: 0x%p-0x%p. First byte 0x%x instead of 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: mm/slub.c:572:
+	printk(KERN_ERR "INFO: 0x%p-0x%p. First byte 0x%x instead of 0x%x\n",
+					fault, end - 1, fault[0], value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/slub.c:678:
+		if (!check_bytes_and_report(s, page, object, "Redzone",
+			endobject, red, s->inuse - s->objsize))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: mm/slub.c:683:
+			check_bytes_and_report(s, page, p, "Alignment padding", endobject,
+				POISON_INUSE, s->inuse - s->objsize);

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: mm/slub.c:691:
+^I^I^I ^Ip + s->objsize -1, POISON_END, 1)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#390: FILE: mm/slub.c:691:
+^I^I^I ^Ip + s->objsize -1, POISON_END, 1)))$

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#390: FILE: mm/slub.c:691:
+			 	p + s->objsize -1, POISON_END, 1)))
 			 	               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: mm/slub.c:730:
+		slab_err(s, page, "Corrupted offset %lu",
+			(unsigned long)(page->offset * sizeof(void *)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: mm/slub.c:735:
+		slab_err(s, page, "inuse %u > max %u",
+			s->name, page->inuse, s->objects);

WARNING:SPLIT_STRING: quoted string split across lines
#449: FILE: mm/slub.c:778:
 		slab_err(s, page, "Wrong object count. Counter is %d but "
+			"counted were %d", page->inuse, s->objects - nr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#492: FILE: mm/slub.c:909:
+			object_err(s, page, object,
+					"page slab pointer corrupt.");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 12 checks, 609 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
