WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#64: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#69: FILE: fs/nilfs2/seglist.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#86: FILE: fs/nilfs2/seglist.h:18:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#87: FILE: fs/nilfs2/seglist.h:19:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#104: FILE: fs/nilfs2/seglist.h:36:
+#define NILFS_SLH_FREED		0x0001	/* The segment was freed provisonally.
+					   It must be cancelled if

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#105: FILE: fs/nilfs2/seglist.h:37:
+					   construction aborted */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#107: FILE: fs/nilfs2/seglist.h:39:
+	unsigned		flags;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#113: FILE: fs/nilfs2/seglist.h:45:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#114: FILE: fs/nilfs2/seglist.h:46:
+void nilfs_dispose_segment_list(struct list_head *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#160: FILE: fs/nilfs2/segment.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#176: FILE: fs/nilfs2/segment.c:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#177: FILE: fs/nilfs2/segment.c:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#204: FILE: fs/nilfs2/segment.c:45:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#211: FILE: fs/nilfs2/segment.c:52:
+#define SC_MAX_SEGDELTA 64   /* Upper limit of the number of segments
+				appended in collection retry loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: fs/nilfs2/segment.c:52:
+				appended in collection retry loop */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#217: FILE: fs/nilfs2/segment.c:58:
+	SC_LSEG_DSYNC,	/* Flush data blocks of a given file and make
+			   a logical segment without a super root */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#217: FILE: fs/nilfs2/segment.c:58:
+			   a logical segment without a super root */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#219: FILE: fs/nilfs2/segment.c:60:
+	SC_FLUSH_FILE,	/* Flush data files, leads to segment writes without
+			   creating a checkpoint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#219: FILE: fs/nilfs2/segment.c:60:
+			   creating a checkpoint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#221: FILE: fs/nilfs2/segment.c:62:
+	SC_FLUSH_DAT,	/* Flush DAT file. This also creates segments without
+			   a checkpoint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#221: FILE: fs/nilfs2/segment.c:62:
+			   a checkpoint */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#246: FILE: fs/nilfs2/segment.c:87:
+	int (*collect_data)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#246: FILE: fs/nilfs2/segment.c:87:
+	int (*collect_data)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#246: FILE: fs/nilfs2/segment.c:87:
+	int (*collect_data)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#248: FILE: fs/nilfs2/segment.c:89:
+	int (*collect_node)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#248: FILE: fs/nilfs2/segment.c:89:
+	int (*collect_node)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#248: FILE: fs/nilfs2/segment.c:89:
+	int (*collect_node)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#250: FILE: fs/nilfs2/segment.c:91:
+	int (*collect_bmap)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head *' should also have an identifier name
#250: FILE: fs/nilfs2/segment.c:91:
+	int (*collect_bmap)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#250: FILE: fs/nilfs2/segment.c:91:
+	int (*collect_bmap)(struct nilfs_sc_info *, struct buffer_head *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#252: FILE: fs/nilfs2/segment.c:93:
+	void (*write_data_binfo)(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_segsum_pointer *' should also have an identifier name
#252: FILE: fs/nilfs2/segment.c:93:
+	void (*write_data_binfo)(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union nilfs_binfo *' should also have an identifier name
#252: FILE: fs/nilfs2/segment.c:93:
+	void (*write_data_binfo)(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#255: FILE: fs/nilfs2/segment.c:96:
+	void (*write_node_binfo)(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_segsum_pointer *' should also have an identifier name
#255: FILE: fs/nilfs2/segment.c:96:
+	void (*write_node_binfo)(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'union nilfs_binfo *' should also have an identifier name
#255: FILE: fs/nilfs2/segment.c:96:
+	void (*write_node_binfo)(struct nilfs_sc_info *,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!nilfs_transaction_cachep"
#300: FILE: fs/nilfs2/segment.c:141:
+	return (nilfs_transaction_cachep == NULL) ? -ENOMEM : 0;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#320: FILE: fs/nilfs2/segment.c:161:
+		if (cur_ti->ti_magic == NILFS_TI_MAGIC)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#322: FILE: fs/nilfs2/segment.c:163:
+			return ++cur_ti->ti_count;
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#322: FILE: fs/nilfs2/segment.c:163:
+		else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#328: FILE: fs/nilfs2/segment.c:169:
+			printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#330: FILE: fs/nilfs2/segment.c:171:
+			       "NILFS warning: journal info from a different "
+			       "FS\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'othewise' may be misspelled - perhaps 'otherwise'?
#364: FILE: fs/nilfs2/segment.c:205:
+ * instead; othewise a new struct is assigned from a slab.
             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#426: FILE: fs/nilfs2/segment.c:267:
+	BUG_ON(ti == NULL || ti->ti_magic != NILFS_TI_MAGIC);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ti"
#426: FILE: fs/nilfs2/segment.c:267:
+	BUG_ON(ti == NULL || ti->ti_magic != NILFS_TI_MAGIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sci"
#436: FILE: fs/nilfs2/segment.c:277:
+	if (sci != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#483: FILE: fs/nilfs2/segment.c:324:
+	BUG_ON(cur_ti);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#484: FILE: fs/nilfs2/segment.c:325:
+	BUG_ON(!ti);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#500: FILE: fs/nilfs2/segment.c:341:
+		yield();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#510: FILE: fs/nilfs2/segment.c:351:
+	BUG_ON(ti == NULL || ti->ti_magic != NILFS_TI_MAGIC);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ti"
#510: FILE: fs/nilfs2/segment.c:351:
+	BUG_ON(ti == NULL || ti->ti_magic != NILFS_TI_MAGIC);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: fs/nilfs2/segment.c:352:
+	BUG_ON(ti->ti_count > 0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#521: FILE: fs/nilfs2/segment.c:362:
+					    unsigned bytes)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#524: FILE: fs/nilfs2/segment.c:365:
+	unsigned blocksize = sci->sc_super->s_blocksize;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#529: FILE: fs/nilfs2/segment.c:370:
+		BUG_ON(NILFS_SEGBUF_BH_IS_LAST(ssp->bh,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#546: FILE: fs/nilfs2/segment.c:387:
+	unsigned sumbytes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#547: FILE: fs/nilfs2/segment.c:388:
+	unsigned flags = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#560: FILE: fs/nilfs2/segment.c:401:
+	sci->sc_blk_cnt = sci->sc_datablk_cnt = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#569: FILE: fs/nilfs2/segment.c:410:
+		return -E2BIG; /* The current segment is filled up
+				  (internal code) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#569: FILE: fs/nilfs2/segment.c:410:
+				  (internal code) */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#594: FILE: fs/nilfs2/segment.c:435:
+static int nilfs_segctor_segsum_block_required(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#596: FILE: fs/nilfs2/segment.c:437:
+	unsigned binfo_size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#598: FILE: fs/nilfs2/segment.c:439:
+	unsigned blocksize = sci->sc_super->s_blocksize;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#611: FILE: fs/nilfs2/segment.c:452:
+	nilfs_segctor_map_segsum_entry(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#628: FILE: fs/nilfs2/segment.c:469:
+	finfo = nilfs_segctor_map_segsum_entry(sci, &sci->sc_finfo_ptr,
+						 sizeof(*finfo));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#638: FILE: fs/nilfs2/segment.c:479:
+	sci->sc_blk_cnt = sci->sc_datablk_cnt = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#644: FILE: fs/nilfs2/segment.c:485:
+					unsigned binfo_size)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#651: FILE: fs/nilfs2/segment.c:492:
+	required = nilfs_segctor_segsum_block_required(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#728: FILE: fs/nilfs2/segment.c:569:
+	BUG_ON(!buffer_dirty(bh));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#736: FILE: fs/nilfs2/segment.c:577:
+	struct nilfs_binfo_v *binfo_v = nilfs_segctor_map_segsum_entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#745: FILE: fs/nilfs2/segment.c:586:
+	__le64 *vblocknr = nilfs_segctor_map_segsum_entry(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#777: FILE: fs/nilfs2/segment.c:618:
+	BUG_ON(!buffer_dirty(bh));

WARNING:LINE_SPACING: Missing a blank line after declarations
#826: FILE: fs/nilfs2/segment.c:667:
+		struct buffer_head *bh, *head;
+		sector_t blkoff

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#827: FILE: fs/nilfs2/segment.c:668:
+		sector_t blkoff
+			= page->index << (PAGE_SHIFT - inode->i_blkbits);

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#831: FILE: fs/nilfs2/segment.c:672:
+		bh = head = page_buffers(page);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#859: FILE: fs/nilfs2/segment.c:700:
+	unsigned i, ndirties = 0, nlimit;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#881: FILE: fs/nilfs2/segment.c:722:
+		bh = head = page_buffers(page);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#918: FILE: fs/nilfs2/segment.c:759:
+			bh = head = page_buffers(pvec.pages[i]);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#938: FILE: fs/nilfs2/segment.c:779:
+	unsigned nv = 0;

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#962: FILE: fs/nilfs2/segment.c:803:
+			iput(&(*pii)->vfs_inode);
 			^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1030: FILE: fs/nilfs2/segment.c:871:
+		/* The following code is duplicated with cpfile.  But, it is
+		   needed to collect the checkpoint even if it was not newly

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1031: FILE: fs/nilfs2/segment.c:872:
+		   created */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1034: FILE: fs/nilfs2/segment.c:875:
+		nilfs_cpfile_put_checkpoint(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1037: FILE: fs/nilfs2/segment.c:878:
+		BUG_ON(err == -EINVAL || err == -ENOENT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1053: FILE: fs/nilfs2/segment.c:894:
+		BUG_ON(err == -EINVAL || err == -ENOENT);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1085: FILE: fs/nilfs2/segment.c:926:
+		BUG_ON(!ibh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1118: FILE: fs/nilfs2/segment.c:959:
+	BUG_ON(NILFS_SR_BYTES > bh_sr->b_size);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1118: FILE: fs/nilfs2/segment.c:959:
+	BUG_ON(NILFS_SR_BYTES > bh_sr->b_size);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1145: FILE: fs/nilfs2/segment.c:986:
+	unsigned isz = nilfs->ns_inode_size;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1149: FILE: fs/nilfs2/segment.c:990:
+	raw_sr->sr_nongc_ctime
+		= cpu_to_le64(nilfs_doing_gc() ?

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1153: FILE: fs/nilfs2/segment.c:994:
+	nilfs_mdt_write_inode_direct(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1155: FILE: fs/nilfs2/segment.c:996:
+	nilfs_mdt_write_inode_direct(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1157: FILE: fs/nilfs2/segment.c:998:
+	nilfs_mdt_write_inode_direct(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1196: FILE: fs/nilfs2/segment.c:1037:
+		BUG_ON(err);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1266: FILE: fs/nilfs2/segment.c:1107:
+			err2 = nilfs_segctor_apply_buffers(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1277: FILE: fs/nilfs2/segment.c:1118:
+		err = nilfs_segctor_apply_buffers(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1281: FILE: fs/nilfs2/segment.c:1122:
+			nilfs_segctor_apply_buffers(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1288: FILE: fs/nilfs2/segment.c:1129:
+	err = nilfs_segctor_apply_buffers(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1294: FILE: fs/nilfs2/segment.c:1135:
+	err = nilfs_segctor_apply_buffers(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1351: FILE: fs/nilfs2/segment.c:1192:
+		sci->sc_stage.scnt++;  /* Fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1358: FILE: fs/nilfs2/segment.c:1199:
+				err = nilfs_segctor_scan_file(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1362: FILE: fs/nilfs2/segment.c:1203:
+					sci->sc_stage.gc_inode_ptr = list_entry(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1372: FILE: fs/nilfs2/segment.c:1213:
+		sci->sc_stage.scnt++;  /* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1397: FILE: fs/nilfs2/segment.c:1238:
+		sci->sc_stage.scnt++;  /* Fall through */

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1403: FILE: fs/nilfs2/segment.c:1244:
+				sci->sc_sketch_inode->i_ctime.tv_sec
+					= sci->sc_seg_ctime;

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1405: FILE: fs/nilfs2/segment.c:1246:
+				sci->sc_sketch_inode->i_mtime.tv_sec
+					= sci->sc_seg_ctime;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1406: FILE: fs/nilfs2/segment.c:1247:
+				err = nilfs_mark_inode_dirty(

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1419: FILE: fs/nilfs2/segment.c:1260:
+		/* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1430: FILE: fs/nilfs2/segment.c:1271:
+		/* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1436: FILE: fs/nilfs2/segment.c:1277:
+		sci->sc_stage.scnt++;  /* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1446: FILE: fs/nilfs2/segment.c:1287:
+		sci->sc_stage.scnt++;  /* Fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1457: FILE: fs/nilfs2/segment.c:1298:
+		sci->sc_stage.scnt++;  /* Fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1486: FILE: fs/nilfs2/segment.c:1327:
+		BUG();

CHECK:BRACES: braces {} should be used on all arms of this statement
#1535: FILE: fs/nilfs2/segment.c:1376:
+	if (list_empty(&sci->sc_segbufs)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1540: FILE: fs/nilfs2/segment.c:1381:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1562: FILE: fs/nilfs2/segment.c:1403:
+	if (nilfs->ns_segnum == nilfs->ns_nextnum) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1567: FILE: fs/nilfs2/segment.c:1408:
+	} else

WARNING:REPEATED_WORD: Possible repeated word: 'next'
#1616: FILE: fs/nilfs2/segment.c:1457:
+		/* allocate the next next full segment */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1635: FILE: fs/nilfs2/segment.c:1476:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1651: FILE: fs/nilfs2/segment.c:1492:
+		BUG_ON(ret);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1657: FILE: fs/nilfs2/segment.c:1498:
+			/* Case 1a:  Partial segment appended into an existing
+			   segment */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1657: FILE: fs/nilfs2/segment.c:1498:
+			   segment */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1667: FILE: fs/nilfs2/segment.c:1508:
+		BUG_ON(ret);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1721: FILE: fs/nilfs2/segment.c:1562:
+		BUG_ON(ret); /* always succeed because bh_su is dirty */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1742: FILE: fs/nilfs2/segment.c:1583:
+	BUG_ON(ret); /* always succeed because bh_su is dirty */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1750: FILE: fs/nilfs2/segment.c:1591:
+		BUG_ON(ret); /* always succeed */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1769: FILE: fs/nilfs2/segment.c:1610:
+		BUG_ON(ret);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1774: FILE: fs/nilfs2/segment.c:1615:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1823: FILE: fs/nilfs2/segment.c:1664:
+	BUG_ON(!list_empty(&new_bh->b_assoc_buffers));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1857: FILE: fs/nilfs2/segment.c:1698:
+			finfo =	nilfs_segctor_map_segsum_entry(

CHECK:BRACES: braces {} should be used on all arms of this statement
#1891: FILE: fs/nilfs2/segment.c:1732:
+		if (--nblocks == 0) {
[...]
+		} else if (ndatablk > 0)
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1927: FILE: fs/nilfs2/segment.c:1768:
+	bh = head = page_buffers(page);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1972: FILE: fs/nilfs2/segment.c:1813:
+		/* For split b-tree node pages, this function may be called
+		   twice.  We ignore the 2nd or later calls by this check. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1972: FILE: fs/nilfs2/segment.c:1813:
+		   twice.  We ignore the 2nd or later calls by this check. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1982: FILE: fs/nilfs2/segment.c:1823:
+		int err = nilfs_copy_replace_page_buffers(page, out);
+		if (unlikely(err))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2075: FILE: fs/nilfs2/segment.c:1916:
+	head = bh = page_buffers(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2096: FILE: fs/nilfs2/segment.c:1937:
+	if (buffer_nilfs_allocated(page_buffers(page))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2099: FILE: fs/nilfs2/segment.c:1940:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2111: FILE: fs/nilfs2/segment.c:1952:
+		/* For b-tree node pages, this function may be called twice
+		   or more because they might be split in a segment.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2113: FILE: fs/nilfs2/segment.c:1954:
+		   buffers in a split btnode page. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2129: FILE: fs/nilfs2/segment.c:1970:
+		head = bh = page_buffers(page);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sci->sc_super_root"
#2207: FILE: fs/nilfs2/segment.c:2048:
+	int update_sr = (sci->sc_super_root != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2288: FILE: fs/nilfs2/segment.c:2129:
+	if (update_sr) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2294: FILE: fs/nilfs2/segment.c:2135:
+	} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2312: FILE: fs/nilfs2/segment.c:2153:
+			err = nilfs_ifile_get_inode_block(

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2354: FILE: fs/nilfs2/segment.c:2195:
+			/* The current checkpoint number (=nilfs->ns_cno) is
+			   changed between check-in and check-out only if the

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2356: FILE: fs/nilfs2/segment.c:2197:
+			   for the inodes that remain in the dirty list. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2428: FILE: fs/nilfs2/segment.c:2269:
+		BUG_ON(!buffer_dirty(ent->bh_su));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2437: FILE: fs/nilfs2/segment.c:2278:
+		BUG_ON(!buffer_dirty(ent->bh_su));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sci->sc_super_root"
#2522: FILE: fs/nilfs2/segment.c:2363:
+		has_sr = (sci->sc_super_root != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2527: FILE: fs/nilfs2/segment.c:2368:
+			BUG_ON(mode == SC_LSEG_SR);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2688: FILE: fs/nilfs2/segment.c:2529:
+			else if (nilfs_segment_usage_volatile_active(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2696: FILE: fs/nilfs2/segment.c:2537:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#2698: FILE: fs/nilfs2/segment.c:2539:
+			       "NILFS: %s segment is requested to be cleaned "
+			       "(segnum=%llu)\n",

WARNING:TYPO_SPELLING: 'retured' may be misspelled - perhaps 'returned'?
#2787: FILE: fs/nilfs2/segment.c:2628:
+ * Return Value: On success, 0 is retured. On errors, one of the following
                                   ^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2811: FILE: fs/nilfs2/segment.c:2652:
+	BUG_ON((ti = current->journal_info) && ti->ti_magic == NILFS_TI_MAGIC);

WARNING:TYPO_SPELLING: 'retured' may be misspelled - perhaps 'returned'?
#2822: FILE: fs/nilfs2/segment.c:2663:
+ * Return Value: On success, 0 is retured. On errors, one of the following
                                   ^^^^^^^

CHECK:BIT_MACRO: Prefer using the BIT macro
#2883: FILE: fs/nilfs2/segment.c:2724:
+#define FLUSH_DAT_BIT	(1 << NILFS_DAT_INO) /* DAT only */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2888: FILE: fs/nilfs2/segment.c:2729:
+	BUG_ON(!sci);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2890: FILE: fs/nilfs2/segment.c:2731:
+	req->sc_err = req->sb_err = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2907: FILE: fs/nilfs2/segment.c:2748:
+	if (req->mode == SC_LSEG_SR) {
[...]
+	} else if (req->mode == SC_FLUSH_FILE)
[...]
+	else if (req->mode == SC_FLUSH_DAT)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2948: FILE: fs/nilfs2/segment.c:2789:
+	struct task_struct *p = (struct task_struct *)data;
+	wake_up_process(p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3086: FILE: fs/nilfs2/segment.c:2927:
+	printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#3088: FILE: fs/nilfs2/segment.c:2929:
+	       "segctord starting. Construction interval = %lu seconds, "
+	       "CP frequency < %lu seconds\n",

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3103: FILE: fs/nilfs2/segment.c:2944:
+			break;
+		else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3112: FILE: fs/nilfs2/segment.c:2953:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3162: FILE: fs/nilfs2/segment.c:3003:
+		printk(KERN_ERR "NILFS: error %d creating segctord thread\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sci->sc_task"
#3166: FILE: fs/nilfs2/segment.c:3007:
+	wait_event(sci->sc_wait_task, sci->sc_task != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sci->sc_task"
#3177: FILE: fs/nilfs2/segment.c:3018:
+		wait_event(sci->sc_wait_task, sci->sc_task == NULL);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3203: FILE: fs/nilfs2/segment.c:3044:
+			iput(sci->sc_sketch_inode);
 			^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3251: FILE: fs/nilfs2/segment.c:3092:
+	/* The segctord thread was stopped and its timer was removed.
+	   But some tasks remain. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3251: FILE: fs/nilfs2/segment.c:3092:
+	   But some tasks remain. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3284: FILE: fs/nilfs2/segment.c:3125:
+	flag = ((sci->sc_state & NILFS_SEGCTOR_COMMIT) || sci->sc_flush_request
+		|| sci->sc_seq_request != sci->sc_seq_done);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3290: FILE: fs/nilfs2/segment.c:3131:
+	BUG_ON(!list_empty(&sci->sc_copied_buffers));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3303: FILE: fs/nilfs2/segment.c:3144:
+	BUG_ON(!list_empty(&sci->sc_segbufs));

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#3306: FILE: fs/nilfs2/segment.c:3147:
+		iput(sci->sc_sketch_inode);
 		^^^^

WARNING:TYPO_SPELLING: 'initilizes' may be misspelled - perhaps 'initializes'?
#3320: FILE: fs/nilfs2/segment.c:3161:
+ * initilizes it, and starts the segment constructor.
    ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3334: FILE: fs/nilfs2/segment.c:3175:
+	/* Each field of nilfs_segctor is cleared through the initialization
+	   of super-block info */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3334: FILE: fs/nilfs2/segment.c:3175:
+	   of super-block info */

WARNING:SPLIT_STRING: quoted string split across lines
#3373: FILE: fs/nilfs2/segment.c:3214:
+			      "Non empty dirty list after the last "
+			      "segment construction\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3387: FILE: fs/nilfs2/segment.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3403: FILE: fs/nilfs2/segment.h:17:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3404: FILE: fs/nilfs2/segment.h:18:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:TYPO_SPELLING: 'infomation' may be misspelled - perhaps 'information'?
#3419: FILE: fs/nilfs2/segment.h:33:
+ * struct nilfs_recovery_info - Recovery infomation
                                          ^^^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3460: FILE: fs/nilfs2/segment.h:74:
+^Iunsigned ^I^Iflags;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3460: FILE: fs/nilfs2/segment.h:74:
+	unsigned 		flags;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3469: FILE: fs/nilfs2/segment.h:83:
+	unsigned		offset; /* offset in bytes */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#3547: FILE: fs/nilfs2/segment.h:161:
+	spinlock_t		sc_state_lock;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3574: FILE: fs/nilfs2/segment.h:188:
+	NILFS_SC_PRIOR_FLUSH,	/* Requesting immediate flush without making a
+				   checkpoint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3574: FILE: fs/nilfs2/segment.h:188:
+				   checkpoint */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3585: FILE: fs/nilfs2/segment.h:199:
+#define NILFS_SC_CLEANUP_RETRY	    3  /* Retry count of construction when
+					  destroying segctord */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3585: FILE: fs/nilfs2/segment.h:199:
+					  destroying segctord */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3591: FILE: fs/nilfs2/segment.h:205:
+#define NILFS_SC_DEFAULT_TIMEOUT    5   /* Timeout value of dirty blocks.
+					   It triggers construction of a

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3592: FILE: fs/nilfs2/segment.h:206:
+					   logical segment with a super root */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3594: FILE: fs/nilfs2/segment.h:208:
+#define NILFS_SC_DEFAULT_SR_FREQ    30  /* Maximum frequency of super root
+					   creation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3594: FILE: fs/nilfs2/segment.h:208:
+					   creation */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3596: FILE: fs/nilfs2/segment.h:210:
+#define NILFS_SC_DEFAULT_SB_FREQ    30  /* Minimum interval of periodical
+					   update of superblock (reserved) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3596: FILE: fs/nilfs2/segment.h:210:
+					   update of superblock (reserved) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3603: FILE: fs/nilfs2/segment.h:217:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3605: FILE: fs/nilfs2/segment.h:219:
+extern int nilfs_init_transaction_cache(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3606: FILE: fs/nilfs2/segment.h:220:
+extern void nilfs_destroy_transaction_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3607: FILE: fs/nilfs2/segment.h:221:
+extern void nilfs_relax_pressure_in_lock(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3607: FILE: fs/nilfs2/segment.h:221:
+extern void nilfs_relax_pressure_in_lock(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3609: FILE: fs/nilfs2/segment.h:223:
+extern int nilfs_construct_segment(struct super_block *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3609: FILE: fs/nilfs2/segment.h:223:
+extern int nilfs_construct_segment(struct super_block *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3610: FILE: fs/nilfs2/segment.h:224:
+extern int nilfs_construct_dsync_segment(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3610: FILE: fs/nilfs2/segment.h:224:
+extern int nilfs_construct_dsync_segment(struct super_block *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#3610: FILE: fs/nilfs2/segment.h:224:
+extern int nilfs_construct_dsync_segment(struct super_block *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3612: FILE: fs/nilfs2/segment.h:226:
+extern void nilfs_flush_segment(struct super_block *, ino_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3612: FILE: fs/nilfs2/segment.h:226:
+extern void nilfs_flush_segment(struct super_block *, ino_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ino_t' should also have an identifier name
#3612: FILE: fs/nilfs2/segment.h:226:
+extern void nilfs_flush_segment(struct super_block *, ino_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3613: FILE: fs/nilfs2/segment.h:227:
+extern int nilfs_clean_segments(struct super_block *, void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3613: FILE: fs/nilfs2/segment.h:227:
+extern int nilfs_clean_segments(struct super_block *, void __user *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#3613: FILE: fs/nilfs2/segment.h:227:
+extern int nilfs_clean_segments(struct super_block *, void __user *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3615: FILE: fs/nilfs2/segment.h:229:
+extern int nilfs_segctor_add_segments_to_be_freed(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#3615: FILE: fs/nilfs2/segment.h:229:
+extern int nilfs_segctor_add_segments_to_be_freed(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u64 *' should also have an identifier name
#3615: FILE: fs/nilfs2/segment.h:229:
+extern int nilfs_segctor_add_segments_to_be_freed(struct nilfs_sc_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#3615: FILE: fs/nilfs2/segment.h:229:
+extern int nilfs_segctor_add_segments_to_be_freed(struct nilfs_sc_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3617: FILE: fs/nilfs2/segment.h:231:
+extern void nilfs_segctor_clear_segments_to_be_freed(struct nilfs_sc_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sc_info *' should also have an identifier name
#3617: FILE: fs/nilfs2/segment.h:231:
+extern void nilfs_segctor_clear_segments_to_be_freed(struct nilfs_sc_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3619: FILE: fs/nilfs2/segment.h:233:
+extern int nilfs_attach_segment_constructor(struct nilfs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sb_info *' should also have an identifier name
#3619: FILE: fs/nilfs2/segment.h:233:
+extern int nilfs_attach_segment_constructor(struct nilfs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_recovery_info *' should also have an identifier name
#3619: FILE: fs/nilfs2/segment.h:233:
+extern int nilfs_attach_segment_constructor(struct nilfs_sb_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3621: FILE: fs/nilfs2/segment.h:235:
+extern void nilfs_detach_segment_constructor(struct nilfs_sb_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sb_info *' should also have an identifier name
#3621: FILE: fs/nilfs2/segment.h:235:
+extern void nilfs_detach_segment_constructor(struct nilfs_sb_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3624: FILE: fs/nilfs2/segment.h:238:
+extern int nilfs_read_super_root_block(struct super_block *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#3624: FILE: fs/nilfs2/segment.h:238:
+extern int nilfs_read_super_root_block(struct super_block *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#3624: FILE: fs/nilfs2/segment.h:238:
+extern int nilfs_read_super_root_block(struct super_block *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#3624: FILE: fs/nilfs2/segment.h:238:
+extern int nilfs_read_super_root_block(struct super_block *, sector_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3624: FILE: fs/nilfs2/segment.h:238:
+extern int nilfs_read_super_root_block(struct super_block *, sector_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3626: FILE: fs/nilfs2/segment.h:240:
+extern int nilfs_search_super_root(struct the_nilfs *, struct nilfs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct the_nilfs *' should also have an identifier name
#3626: FILE: fs/nilfs2/segment.h:240:
+extern int nilfs_search_super_root(struct the_nilfs *, struct nilfs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sb_info *' should also have an identifier name
#3626: FILE: fs/nilfs2/segment.h:240:
+extern int nilfs_search_super_root(struct the_nilfs *, struct nilfs_sb_info *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_recovery_info *' should also have an identifier name
#3626: FILE: fs/nilfs2/segment.h:240:
+extern int nilfs_search_super_root(struct the_nilfs *, struct nilfs_sb_info *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3628: FILE: fs/nilfs2/segment.h:242:
+extern int nilfs_recover_logical_segments(struct the_nilfs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct the_nilfs *' should also have an identifier name
#3628: FILE: fs/nilfs2/segment.h:242:
+extern int nilfs_recover_logical_segments(struct the_nilfs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_sb_info *' should also have an identifier name
#3628: FILE: fs/nilfs2/segment.h:242:
+extern int nilfs_recover_logical_segments(struct the_nilfs *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nilfs_recovery_info *' should also have an identifier name
#3628: FILE: fs/nilfs2/segment.h:242:
+extern int nilfs_recover_logical_segments(struct the_nilfs *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 156 warnings, 76 checks, 3552 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228131.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
