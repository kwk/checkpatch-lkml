WARNING:SPACING: missing space after struct definition
#56: FILE: arch/x86/kernel/process.c:617:
+struct hotplug_cpu{

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#61: FILE: arch/x86/kernel/process.c:622:
+static long ^Ioffsched_services;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: arch/x86/kernel/process.c:634:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	cpu->hotplug_cpu_dead = NULL;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#81: FILE: arch/x86/kernel/process.c:642:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	return test_bit(CPU_OFFSCHED, &cpu->flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#88: FILE: arch/x86/kernel/process.c:649:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	return test_bit(CPU_OFFSCHED_KMEM, &cpu->flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#95: FILE: arch/x86/kernel/process.c:656:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	set_bit(CPU_OFFSCHED_KMEM, &cpu->flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#102: FILE: arch/x86/kernel/process.c:663:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	clear_bit(CPU_OFFSCHED_KMEM, &cpu->flags);

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: arch/x86/kernel/process.c:670:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	if (is_offsched(cpuid))

WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: arch/x86/kernel/process.c:682:
+	struct hotplug_cpu *cpu = &per_cpu(offschedcpu, cpuid);
+	cpu->hotplug_cpu_dead();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#130: FILE: arch/x86/kernel/process.c:691:
+EXPORT_SYMBOL(offsched_rule);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#132: FILE: arch/x86/kernel/process.c:693:
+/*
+* if we a have filter than apply filter.

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#157: FILE: arch/x86/kernel/process.c:718:
+ * napi scheudule is called in offsched context.
+*/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#160: FILE: arch/x86/kernel/process.c:721:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#161: FILE: arch/x86/kernel/process.c:722:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#193: FILE: arch/x86/kernel/smpboot.c:1288:
+			printk(KERN_INFO "CPU %d is now offline %s\n", cpu,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#194: FILE: arch/x86/kernel/smpboot.c:1289:
+			printk(KERN_INFO "CPU %d is now offline %s\n", cpu,
+				is_offsched(cpu) ? "and OFFSCHED" : "");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#195: FILE: arch/x86/kernel/smpboot.c:1290:
+			if (1 == num_online_cpus() && !is_offsched(cpu))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081157.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 3 checks, 149 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000081157.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
