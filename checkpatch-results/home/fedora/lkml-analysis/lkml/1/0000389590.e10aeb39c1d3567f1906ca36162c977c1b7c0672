CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mm' may be better as '(mm)' to avoid precedence issues
#130: FILE: arch/um/kernel/tlb.c:43:
+#define INIT_HVC(mm, force) \
+	((struct host_vm_change) \
+	 { .ops		= { { .type = NONE } },	\
+	   .id		= &mm->context.id, \
+       	   .data	= NULL, \
+	   .index	= 0, \
+	   .force	= force })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'force' - possible side-effects?
#130: FILE: arch/um/kernel/tlb.c:43:
+#define INIT_HVC(mm, force) \
+	((struct host_vm_change) \
+	 { .ops		= { { .type = NONE } },	\
+	   .id		= &mm->context.id, \
+       	   .data	= NULL, \
+	   .index	= 0, \
+	   .force	= force })

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: arch/um/kernel/tlb.c:47:
+       ^I   .data^I= NULL, \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#134: FILE: arch/um/kernel/tlb.c:47:
+       ^I   .data^I= NULL, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/um/kernel/tlb.c:47:
+       ^I   .data^I= NULL, \$

ERROR:SPACING: space required before the open parenthesis '('
#146: FILE: arch/um/kernel/tlb.c:59:
+		switch(op->type) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#162: FILE: arch/um/kernel/tlb.c:75:
+			printk(KERN_ERR "Unknown op type %d in do_ops\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_ops', this function's name, in a string
#162: FILE: arch/um/kernel/tlb.c:75:
+			printk(KERN_ERR "Unknown op type %d in do_ops\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#255: FILE: arch/um/kernel/tlb.c:141:
+^I^I^I     ^I    .u = { .munmap = { .addr^I= addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#255: FILE: arch/um/kernel/tlb.c:141:
+^I^I^I     ^I    .u = { .munmap = { .addr^I= addr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#296: FILE: arch/um/kernel/tlb.c:169:
+^I^I^I     ^I    .u = { .mprotect = { .addr^I= addr,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: arch/um/kernel/tlb.c:169:
+^I^I^I     ^I    .u = { .mprotect = { .addr^I= addr,$

CHECK:BRACES: braces {} should be used on all arms of this statement
#321: FILE: arch/um/kernel/tlb.c:197:
+		if (hvc->force || pte_newpage(*pte)) {
[...]
-					      last_op, mmu, flush, do_ops);
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#329: FILE: arch/um/kernel/tlb.c:201:
+			else ret = add_munmap(addr, PAGE_SIZE, hvc);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#368: FILE: arch/um/kernel/tlb.c:227:
+		else ret = update_pte_range(pmd, addr, next, hvc);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#368: FILE: arch/um/kernel/tlb.c:227:
 		}
+		else ret = update_pte_range(pmd, addr, next, hvc);

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#401: FILE: arch/um/kernel/tlb.c:249:
+		else ret = update_pmd_range(pud, addr, next, hvc);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#401: FILE: arch/um/kernel/tlb.c:249:
 		}
+		else ret = update_pmd_range(pud, addr, next, hvc);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#438: FILE: arch/um/kernel/tlb.c:272:
+		else ret = update_pud_range(pgd, addr, next, &hvc);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#438: FILE: arch/um/kernel/tlb.c:272:
 		}
+		else ret = update_pud_range(pgd, addr, next, &hvc);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389590.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 6 warnings, 3 checks, 423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389590.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
