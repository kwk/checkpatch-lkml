WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#67: 
   1        361449551 326454971 -34994580     /lib64/libc-2.10.1.so   _IO_vfprintf_internal

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#91: 
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                 ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#107: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#161: FILE: tools/perf/builtin-diff.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:STATIC_CONST: Move const after static - use 'static const char'
#179: FILE: tools/perf/builtin-diff.c:19:
+static char	   const *input_old = "perf.data.old",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: tools/perf/builtin-diff.c:22:
+static bool ^I   show_percent;$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!he"
#192: FILE: tools/perf/builtin-diff.c:32:
+	if (he == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#242: FILE: tools/perf/builtin-diff.c:82:
+	while (*p != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: tools/perf/builtin-diff.c:84:
+		int cmp;
+		parent = *p;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#248: FILE: tools/perf/builtin-diff.c:88:
+		if (cmp > 0)
[...]
+		else if (cmp < 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#252: FILE: tools/perf/builtin-diff.c:92:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next"
#271: FILE: tools/perf/builtin-diff.c:111:
+	while (next != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#293: FILE: tools/perf/builtin-diff.c:133:
+		if (cmp > 0)
[...]
+		else if (cmp < 0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#297: FILE: tools/perf/builtin-diff.c:137:
+		else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#314: FILE: tools/perf/builtin-diff.c:154:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: tools/perf/builtin-diff.c:158:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: tools/perf/builtin-diff.c:158:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: tools/perf/builtin-diff.c:158:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                             ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#318: FILE: tools/perf/builtin-diff.c:158:
+	for (nd = rb_first(&new_session->hists); nd; nd = rb_next(nd)) {
 	                                                          ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#319: FILE: tools/perf/builtin-diff.c:159:
+		struct hist_entry *pos = rb_entry(nd, struct hist_entry, rb_node);
 		                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#320: FILE: tools/perf/builtin-diff.c:160:
+		struct hist_entry *pos = rb_entry(nd, struct hist_entry, rb_node);
+		pos->pair = perf_session__find_hist_entry_by_name(old_session, pos);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self->pair"
#334: FILE: tools/perf/builtin-diff.c:174:
+	if (self->pair != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: tools/perf/builtin-diff.c:176:
+		long pdiff = (long)self->pair->position - (long)pos;
+		old_count = self->pair->count;

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#360: FILE: tools/perf/builtin-diff.c:200:
+			printed += fprintf(fp, " %9Lu %9Lu", old_count, self->count);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#372: FILE: tools/perf/builtin-diff.c:212:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#376: FILE: tools/perf/builtin-diff.c:216:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#376: FILE: tools/perf/builtin-diff.c:216:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#376: FILE: tools/perf/builtin-diff.c:216:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#376: FILE: tools/perf/builtin-diff.c:216:
+	for (nd = rb_first(&self->hists); nd; nd = rb_next(nd)) {
 	                                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#377: FILE: tools/perf/builtin-diff.c:217:
+		struct hist_entry *he = rb_entry(nd, struct hist_entry, rb_node);
 		                                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#378: FILE: tools/perf/builtin-diff.c:218:
+		struct hist_entry *he = rb_entry(nd, struct hist_entry, rb_node);
+		printed += hist_entry__fprintf_matched(he, pos++, self, pair, fp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session[0]"
#391: FILE: tools/perf/builtin-diff.c:231:
+	if (session[0] == NULL || session[1] == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!session[1]"
#391: FILE: tools/perf/builtin-diff.c:231:
+	if (session[0] == NULL || session[1] == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#439: FILE: tools/perf/builtin-diff.c:279:
+		if (argc == 2) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#442: FILE: tools/perf/builtin-diff.c:282:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#457: FILE: tools/perf/builtin.h:20:
+extern int cmd_diff(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034644.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 23 warnings, 13 checks, 362 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000034644.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
