WARNING:BAD_SIGN_OFF: Duplicate signature
#76: 
Cc: Paul Mackerras <paulus@samba.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#110: FILE: tools/perf/util/symbol.c:46:
+		curr = rb_entry(nd, struct symbol, rb_node);
 		                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#140: FILE: tools/perf/util/symbol.c:73:
+	nd = rb_last(&curr->dso->syms);
 	^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#141: FILE: tools/perf/util/symbol.c:74:
+	if (nd) {
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#142: FILE: tools/perf/util/symbol.c:75:
+		struct symbol *sym = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#143: FILE: tools/perf/util/symbol.c:76:
+		struct symbol *sym = rb_entry(nd, struct symbol, rb_node);
+		curr->end = sym->end;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym"
#189: FILE: tools/perf/util/symbol.c:265:
+		if (sym == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dso"
#271: FILE: tools/perf/util/symbol.c:331:
+			if (dso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!map"
#275: FILE: tools/perf/util/symbol.c:335:
+			if (map == NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#314: FILE: tools/perf/util/symbol.c:361:
 
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#397: FILE: tools/perf/util/symbol.c:779:
+			if (curr_map == NULL) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr_map"
#397: FILE: tools/perf/util/symbol.c:779:
+			if (curr_map == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr_dso"
#404: FILE: tools/perf/util/symbol.c:786:
+				if (curr_dso == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!curr_map"
#407: FILE: tools/perf/util/symbol.c:789:
+				if (curr_map == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: tools/perf/util/symbol.c:797:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#446: FILE: tools/perf/util/symbol.c:825:
+		if (filter && filter(curr_map, f))
[...]
 		else {
[...]

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#476: FILE: tools/perf/util/symbol.c:1008:
+	if (mapp)
 	    ^^^^

WARNING:TYPO_SPELLING: 'mapp' may be misspelled - perhaps 'map'?
#477: FILE: tools/perf/util/symbol.c:1009:
+		*mapp = map;
 		 ^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 8 warnings, 10 checks, 450 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000062607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
