WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Adds a refault histogram for those policies that use nonresident page tracking.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#46: FILE: mm/Kconfig:165:
+config MM_REFAULT
+	bool "Refault histogram"
+	def_bool y
+	depends on MM_NONRESIDENT
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#79: FILE: mm/refault.c:1:
+#include <linux/module.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#88: FILE: mm/refault.c:10:
+DEFINE_PER_CPU(unsigned long[BUCKETS+1], refault_histogram);
                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'pages' may be better as '(pages)' to avoid precedence issues
#140: FILE: mm/refault.c:62:
+#define K(pages)	(pages << (PAGE_SHIFT - 10))

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#151: FILE: mm/refault.c:73:
+		seq_printf(m, "     Refault distance          Hits\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#161: FILE: mm/refault.c:83:
+struct seq_operations refault_op = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#195: FILE: mm/refault.c:117:
+       (void)inode;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#196: FILE: mm/refault.c:118:
+       return seq_open(file, &refault_op);$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#199: FILE: mm/refault.c:121:
+static struct file_operations refault_file_operations = {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: mm/refault.c:122:
+       .open           = refault_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mm/refault.c:123:
+       .read           = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/refault.c:124:
+       .llseek         = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: mm/refault.c:125:
+       .release        = seq_release,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: mm/refault.c:126:
+       .write          = refault_write,$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#211: FILE: mm/refault.c:133:
+	entry = create_proc_entry("refault", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#218: FILE: mm/refault.c:140:
+__initcall(refault_proc_init);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#244: FILE: include/linux/nonresident.h:36:
+extern void nonresident_refault(unsigned long);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 3 checks, 192 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000400128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
