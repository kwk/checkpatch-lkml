WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: net/9p/ramfs/ramfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#97: FILE: net/9p/ramfs/ramfs.c:20:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#112: FILE: net/9p/ramfs/ramfs.c:35:
+#define ROOTPERM ^I0777$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#128: FILE: net/9p/ramfs/ramfs.c:51:
+^Iint ^I^I^Iexcl;$

CHECK:CAMELCASE: Avoid CamelCase: <Removed>
#152: FILE: net/9p/ramfs/ramfs.c:75:
+	Removed = 1,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Enospace>
#160: FILE: net/9p/ramfs/ramfs.c:83:
+static char *Enospace = "no space left";

CHECK:CAMELCASE: Avoid CamelCase: <Einternal>
#161: FILE: net/9p/ramfs/ramfs.c:84:
+static char *Einternal = "internal error";

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: net/9p/ramfs/ramfs.c:118:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "file %p %s count %d\n", f, f->name,
+		atomic_read(&f->refcount));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: net/9p/ramfs/ramfs.c:130:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "file %p %s count %d\n", f, f->name,
+		atomic_read(&f->refcount));

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#244: FILE: net/9p/ramfs/ramfs.c:167:
+	n = (size/blksize + (size%blksize?1:0)) * blksize;
 	         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#244: FILE: net/9p/ramfs/ramfs.c:167:
+	n = (size/blksize + (size%blksize?1:0)) * blksize;
 	                         ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#244: FILE: net/9p/ramfs/ramfs.c:167:
+	n = (size/blksize + (size%blksize?1:0)) * blksize;
 	                                 ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#244: FILE: net/9p/ramfs/ramfs.c:167:
+	n = (size/blksize + (size%blksize?1:0)) * blksize;
 	                                   ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "f"
#272: FILE: net/9p/ramfs/ramfs.c:195:
+	for (f = dir->dirents; f != NULL; f = f->next) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: net/9p/ramfs/ramfs.c:197:
+		P9_DPRINTK(P9SRV_DEBUG_FS, "dir %p '%s' child %p '%s'\n", dir,
+			dir->name, f, f->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: net/9p/ramfs/ramfs.c:213:
+static int check_perm(struct p9srv_req *req, struct ramfs_file *dir,
+	u32 uid, int perm)

CHECK:CAMELCASE: Avoid CamelCase: <Eperm>
#304: FILE: net/9p/ramfs/ramfs.c:227:
+		p9srv_respond_error(req, Eperm, EPERM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: net/9p/ramfs/ramfs.c:236:
+static struct ramfs_file *file_create(struct ramfs_file *parent, char *name,
+	int perm, u32 uid, u32 gid)

CHECK:BRACES: braces {} should be used on all arms of this statement
#346: FILE: net/9p/ramfs/ramfs.c:269:
+		if (parent->dirlast) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#349: FILE: net/9p/ramfs/ramfs.c:272:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: net/9p/ramfs/ramfs.c:330:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "fid %p from %s to %s\n", fid,
+		fid->file->name, file->name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req->afid"
#442: FILE: net/9p/ramfs/ramfs.c:365:
+	if (req->afid != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <Enoauth>
#443: FILE: net/9p/ramfs/ramfs.c:366:
+		p9srv_respond_error(req, Enoauth, EIO);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#454: FILE: net/9p/ramfs/ramfs.c:377:
+	err = p9_create_rattach(req->rcall, &fid->file->qid);
 	                             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#458: FILE: net/9p/ramfs/ramfs.c:381:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: net/9p/ramfs/ramfs.c:394:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "fid %d nfid %d nwname %d\n", req->fid->fid,
+		req->newfid->fid, req->tcall->params.twalk.nwname);

CHECK:CAMELCASE: Avoid CamelCase: <Enotfound>
#498: FILE: net/9p/ramfs/ramfs.c:421:
+		p9srv_respond_error(req, Enotfound, ENOENT);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#503: FILE: net/9p/ramfs/ramfs.c:426:
+	err = p9_create_rwalk(req->rcall, i, wqids);
 	                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#507: FILE: net/9p/ramfs/ramfs.c:430:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Eopen>
#551: FILE: net/9p/ramfs/ramfs.c:474:
+			p9srv_respond_error(req, Eopen, EPERM);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#559: FILE: net/9p/ramfs/ramfs.c:482:
+	err = p9_create_ropen(req->rcall, &file->qid, 0);
 	                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#566: FILE: net/9p/ramfs/ramfs.c:489:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <Eexist>
#595: FILE: net/9p/ramfs/ramfs.c:518:
+		p9srv_respond_error(req, Eexist, EEXIST);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#624: FILE: net/9p/ramfs/ramfs.c:547:
+		P9_DMSOCKET)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: net/9p/ramfs/ramfs.c:555:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "file %p parent %p first child %p\n",
+		file, dir, dir->dirents);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#633: FILE: net/9p/ramfs/ramfs.c:556:
+	err = p9_create_rcreate(req->rcall, &file->qid, 0);
 	                             ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#642: FILE: net/9p/ramfs/ramfs.c:565:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#656: FILE: net/9p/ramfs/ramfs.c:579:
+	rc = req->rcall;
 	          ^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cf"
#673: FILE: net/9p/ramfs/ramfs.c:596:
+		for (n = 0, cf = fid->dirent; (n < count) && (cf != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: net/9p/ramfs/ramfs.c:598:
+			BUG_ON(test_bit(Removed, &cf->status));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#679: FILE: net/9p/ramfs/ramfs.c:602:
+			i = p9_serialize_stat(&wstat, data + n, count - n - 1,
+				req->conn->dotu);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#693: FILE: net/9p/ramfs/ramfs.c:616:
+		if (file->length < offset+count)
 		                         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#703: FILE: net/9p/ramfs/ramfs.c:626:
+/*
+	pthread_mutex_lock(&file->lock);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#729: FILE: net/9p/ramfs/ramfs.c:652:
+	if (file->length < offset+count) {
 	                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#731: FILE: net/9p/ramfs/ramfs.c:654:
+		if (file_truncate(file, offset+count)) {
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#737: FILE: net/9p/ramfs/ramfs.c:660:
+		if (offset+count > file->datasize) {
 		          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#746: FILE: net/9p/ramfs/ramfs.c:669:
+				memset(file->data+file->length, 0,
 				                 ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: net/9p/ramfs/ramfs.c:670:
+				memset(file->data+file->length, 0,
+					offset - file->length);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#749: FILE: net/9p/ramfs/ramfs.c:672:
+			file->length = offset+count;
 			                     ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#762: FILE: net/9p/ramfs/ramfs.c:685:
+	err = p9_create_rwrite(req->rcall, count);
 	                            ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#766: FILE: net/9p/ramfs/ramfs.c:689:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#773: FILE: net/9p/ramfs/ramfs.c:696:
+	err = p9_create_rclunk(req->rcall);
 	                            ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#777: FILE: net/9p/ramfs/ramfs.c:700:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#792: FILE: net/9p/ramfs/ramfs.c:715:
+	P9_DPRINTK(P9SRV_DEBUG_FS, "fid %d name %s\n", req->fid->fid,
+		file->name);

CHECK:CAMELCASE: Avoid CamelCase: <Enotempty>
#796: FILE: net/9p/ramfs/ramfs.c:719:
+		p9srv_respond_error(req, Enotempty, ENOTEMPTY);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#838: FILE: net/9p/ramfs/ramfs.c:761:
+	err = p9_create_rremove(req->rcall);
 	                             ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#845: FILE: net/9p/ramfs/ramfs.c:768:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#856: FILE: net/9p/ramfs/ramfs.c:779:
+	err = p9_create_rstat(req->rcall, &wstat, req->conn->dotu);
 	                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#860: FILE: net/9p/ramfs/ramfs.c:783:
+		p9srv_respond(req, req->rcall);
 		                        ^^^^^

CHECK:SPACING: No space is necessary after a cast
#911: FILE: net/9p/ramfs/ramfs.c:834:
+	if (stat->length != (u64) ~0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: net/9p/ramfs/ramfs.c:836:
+		if (!check_perm(req, file, req->fid->uid, 2) ||
+						file->perm & P9_DMDIR)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#927: FILE: net/9p/ramfs/ramfs.c:850:
+			memset(file->data+file->length, 0, length-file->length);
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#927: FILE: net/9p/ramfs/ramfs.c:850:
+			memset(file->data+file->length, 0, length-file->length);
 			                                         ^

CHECK:SPACING: No space is necessary after a cast
#932: FILE: net/9p/ramfs/ramfs.c:855:
+	if (stat->mode != (u32) ~0) {

CHECK:SPACING: No space is necessary after a cast
#942: FILE: net/9p/ramfs/ramfs.c:865:
+	if (stat->mtime != (u32) ~0) {

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#952: FILE: net/9p/ramfs/ramfs.c:875:
+	err = p9_create_rwstat(req->rcall);
 	                            ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#956: FILE: net/9p/ramfs/ramfs.c:879:
+		rc = req->rcall;
 		          ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#980: FILE: net/9p/ramfs/ramfs.c:903:
+			memset(file->data + file->length, 0,
+				file->datasize - file->length);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 25 warnings, 43 checks, 1011 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000361764.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
