ERROR:OPEN_BRACE: that open brace { should be on the previous line
#66: FILE: drivers/base/class.c:828:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#67: FILE: drivers/base/class.c:829:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#77: FILE: drivers/base/class.c:839:
+		if (dev) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#80: FILE: drivers/base/class.c:842:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: drivers/base/class.c:874:
+struct device *class_find_device(struct class *class, void *data,
+				   int (*match)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: drivers/base/class.c:885:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#124: FILE: drivers/base/class.c:886:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#127: FILE: drivers/base/class.c:889:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#127: FILE: drivers/base/class.c:889:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: drivers/base/class.c:891:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: drivers/base/class.c:920:
+struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#169: FILE: drivers/base/class.c:931:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#170: FILE: drivers/base/class.c:932:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#173: FILE: drivers/base/class.c:935:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#173: FILE: drivers/base/class.c:935:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#175: FILE: drivers/base/class.c:937:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#204: FILE: include/linux/device.h:198:
+extern int class_for_each_device(struct class *class, void *data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#206: FILE: include/linux/device.h:200:
+extern struct device *class_find_device(struct class *class, void *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/device.h:202:
+extern struct class_device *class_find_child(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: include/linux/device.h:203:
+extern struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 2 warnings, 17 checks, 160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
