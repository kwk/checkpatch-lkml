CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#38: 
>  Frédéric_Weisbecker <fweisbec@gmail.com>,
     ^

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
> > > http://devresources.linux-foundation.org/craiger/hackbench/ (this page 

WARNING:TYPO_SPELLING: 'containts' may be misspelled - perhaps 'contains'?
#54: 
> > > containts link to hackbench.c) 
      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'containts' may be misspelled - perhaps 'contains'?
#94: 
New hackbench this patch containts has little improvements.
                         ^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#114: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#186: FILE: tools/perf/builtin-bench.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#226: FILE: tools/perf/builtin-bench.c:41:
+static int use_pipes = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#228: FILE: tools/perf/builtin-bench.c:43:
+static unsigned int thread_mode = 0;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ready', this function's name, in a string
#272: FILE: tools/perf/builtin-bench.c:87:
+		barf("CLIENT: ready write");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#294: FILE: tools/perf/builtin-bench.c:109:
+				    sizeof(data)-done);
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: tools/perf/builtin-bench.c:121:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#308: FILE: tools/perf/builtin-bench.c:123:
+static void *receiver(struct receiver_context* ctx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: tools/perf/builtin-bench.c:208:
+static unsigned int group(pthread_t *pth,
+		unsigned int num_fds,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#408: FILE: tools/perf/builtin-bench.c:223:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: tools/perf/builtin-bench.c:246:
+		pth[num_fds+i] = create_worker(snd_ctx, (void *)sender);
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#481: FILE: tools/perf/builtin-bench.c:296:
+		total_children += group(pth_tab+total_children, num_fds,
 		                               ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#503: FILE: tools/perf/builtin-bench.c:318:
+	printf("%lu.%03lu\n", diff.tv_sec, diff.tv_usec/1000);
 	                                               ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#510: FILE: tools/perf/builtin-bench.c:325:
+	int (*fn)(int, const char **, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#510: FILE: tools/perf/builtin-bench.c:325:
+	int (*fn)(int, const char **, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#510: FILE: tools/perf/builtin-bench.c:325:
+	int (*fn)(int, const char **, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#549: FILE: tools/perf/builtin.h:28:
+extern int cmd_bench(int argc, const char **argv, const char *prefix);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 9 warnings, 9 checks, 424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000053465.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
