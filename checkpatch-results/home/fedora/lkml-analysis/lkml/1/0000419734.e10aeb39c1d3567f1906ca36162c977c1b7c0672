WARNING:TYPO_SPELLING: 'shouldnt' may be misspelled - perhaps 'shouldn't'?
#82: 
side-effects (they shouldnt). Then #4 can go into -v18.
                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#109: 
> doesnt give me good results. Basically I expected the loop to take 
  ^^^^^^

WARNING:TYPO_SPELLING: 'remeber' may be misspelled - perhaps 'remember'?
#112: 
> by increasing sysctl_sched_runtime_limit at group level (to remeber 
                                                              ^^^^^^^

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#136: FILE: Makefile:4:
+EXTRAVERSION = .4-cfs-v17
 ^^^^^^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#172: FILE: include/linux/sched.h:537:
+#define is_rt_policy(p)		((p) == SCHED_FIFO || (p) == SCHED_RR)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#521: FILE: kernel/sched.c:841:
+	return min(rq->lrq.cpu_load[type-1], rq->lrq.raw_weighted_load);
 	                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#533: FILE: kernel/sched.c:855:
+	return max(rq->lrq.cpu_load[type-1], rq->lrq.raw_weighted_load);
 	                                ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#565: FILE: kernel/sched.c:1146:
+			       100*(tl + p->se.load_weight) <= imbalance*load) {
 			          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#565: FILE: kernel/sched.c:1146:
+			       100*(tl + p->se.load_weight) <= imbalance*load) {
 			                                                ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#584: FILE: kernel/sched.c:1244:
+	p->se.wait_start_fair = p->se.wait_start = p->se.exec_start = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#594: FILE: kernel/sched.c:1249:
+	p->se.sum_wait_runtime = p->se.sum_sleep_runtime = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#595: FILE: kernel/sched.c:1250:
+	p->se.sleep_start = p->se.sleep_start_fair = p->se.block_start = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#596: FILE: kernel/sched.c:1251:
+	p->se.sleep_max = p->se.block_max = p->se.exec_max = p->se.wait_max = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#597: FILE: kernel/sched.c:1252:
+	p->se.wait_runtime_overruns = p->se.wait_runtime_underruns = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#657: FILE: kernel/sched.c:1589:
+		this_rq->lrq.cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#657: FILE: kernel/sched.c:1589:
+		this_rq->lrq.cpu_load[i] = (old_load*(scale-1) + new_load) >> i;
 		                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: kernel/sched.c:2189:
+		if (rq->nr_running == 1 &&
+				 rq->lrq.raw_weighted_load > imbalance)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#740: FILE: kernel/sched.c:3500:
+	BUG_ON(p->se.on_rq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#842: FILE: kernel/sched.c:5775:
+		rq->clock = rq->lrq.fair_clock = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1032: FILE: kernel/sched_debug.c:238:
+	p->se.sleep_max = p->se.block_max = p->se.exec_max = p->se.wait_max = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1033: FILE: kernel/sched_debug.c:239:
+	p->se.wait_runtime_overruns = p->se.wait_runtime_underruns = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1083: FILE: kernel/sched_fair.c:79:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1136: FILE: kernel/sched_fair.c:131:
+static inline struct rb_node * first_fair(struct lrq *lrq)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1150: FILE: kernel/sched_fair.c:140:
+static struct sched_entity * __pick_next_entity(struct lrq *lrq)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1321: FILE: kernel/sched_fair.c:314:
+^I^I^I^I^I^I^I ^INICE_0_LOAD);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1321: FILE: kernel/sched_fair.c:314:
+^I^I^I^I^I^I^I ^INICE_0_LOAD);$

WARNING:TABSTOP: Statements should start on a tabstop
#1410: FILE: kernel/sched_fair.c:402:
+		 if (curr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1431: FILE: kernel/sched_fair.c:419:
+	if ((entity_is_task(p) && tsk->policy == SCHED_BATCH) ||
+						 !(sysctl_sched_features & 4))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1444: FILE: kernel/sched_fair.c:430:
+		delta_fair = div64_s(delta_fair * load,
+						 load + p->load_weight);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1534: FILE: kernel/sched_fair.c:527:
+static struct sched_entity * pick_next_entity(struct lrq *lrq, u64 now)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1561: FILE: kernel/sched_fair.c:554:
+		if (prev->on_rq &&
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1562: FILE: kernel/sched_fair.c:555:
+		if (prev->on_rq &&
+			test_tsk_thread_flag(prevtask, TIF_NEED_RESCHED)) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1563: FILE: kernel/sched_fair.c:556:
+			test_tsk_thread_flag(prevtask, TIF_NEED_RESCHED)) {
+

CHECK:BRACES: Unbalanced braces around else statement
#1568: FILE: kernel/sched_fair.c:561:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curtask == rq->idle'
#1606: FILE: kernel/sched_fair.c:599:
+		if ((curtask == rq->idle) || (rt_prio(nexttask->prio) &&
+					(nexttask->prio < curtask->prio))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'nexttask->prio < curtask->prio'
#1606: FILE: kernel/sched_fair.c:599:
+		if ((curtask == rq->idle) || (rt_prio(nexttask->prio) &&
+					(nexttask->prio < curtask->prio))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1607: FILE: kernel/sched_fair.c:600:
+		if ((curtask == rq->idle) || (rt_prio(nexttask->prio) &&
+					(nexttask->prio < curtask->prio))) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1617: FILE: kernel/sched_fair.c:608:
+
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1691: FILE: kernel/sched_fair.c:675:
 			p_to->sched_class == &fair_sched_class
+			&& p->se.wait_runtime > 0) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 7 warnings, 28 checks, 1698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000419734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
