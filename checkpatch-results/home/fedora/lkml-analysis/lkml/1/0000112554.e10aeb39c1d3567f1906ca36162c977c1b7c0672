WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#44: 
 print fmt: "irq=%d handler=%s", REC->irq, (char *)((void *)REC + REC->__data_loc

WARNING:TYPO_SPELLING: 'ned' may be misspelled - perhaps 'need'?
#73: 
ned long)((gfp_t)0x8000u), "GFP_ZERO"}, {(unsigned long)((gfp_t)0x10000u), "GFP_
^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#148: FILE: include/linux/ftrace_event.h:143:
+extern char *ftrace_read_binary(struct trace_seq *p,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#152: FILE: include/linux/ftrace_event.h:147:
+extern int ftrace_initialize_print(struct ftrace_event_call *event,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#154: FILE: include/linux/ftrace_event.h:149:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: include/linux/ftrace_event.h:150:
+extern void ftrace_destroy_print(struct ftrace_event_call *event);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#259: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#264: FILE: kernel/trace/trace_read_binary.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: kernel/trace/trace_read_binary.c:211:
+       struct ftrace_event_field *field, unsigned long long mask,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: kernel/trace/trace_read_binary.c:212:
+       const char *fmt, const char *end)$

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#549: FILE: kernel/trace/trace_read_binary.c:286:
+		mask = simple_strtoull(fmt, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#591: FILE: kernel/trace/trace_read_binary.c:328:
+		sym = simple_strtoull(fmt, NULL, 0);

CHECK:BRACES: braces {} should be used on all arms of this statement
#664: FILE: kernel/trace/trace_read_binary.c:401:
+		if (field_type == FIELD_IS_IFMASK) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#668: FILE: kernel/trace/trace_read_binary.c:405:
+			mask = simple_strtoull(fmt, NULL, 0);

CHECK:BRACES: Unbalanced braces around else statement
#670: FILE: kernel/trace/trace_read_binary.c:407:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#690: FILE: kernel/trace/trace_read_binary.c:427:
+		if (field_type == FIELD_IS_MASK) {
[...]
+		} else
[...]

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#704: FILE: kernel/trace/trace_read_binary.c:441:
+			fmt = tok+1;
 			         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#708: FILE: kernel/trace/trace_read_binary.c:445:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#837: FILE: kernel/trace/trace_read_binary.c:574:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#873: FILE: kernel/trace/trace_read_binary.c:610:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#897: FILE: kernel/trace/trace_read_binary.c:634:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#962: FILE: kernel/trace/trace_read_binary.c:699:
+	list_for_each_entry(info, &event->print_info, list) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: kernel/trace/trace_read_binary.c:728:
+				trace_seq_printf(s,
+					"<error: bad field size %d?>\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1073: FILE: kernel/trace/trace_read_binary.c:810:
+				trace_seq_printf(s,
+					 "<error: bad field size %d?>\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 13 checks, 932 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
