WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: drivers/ide/ide-eh.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq"
#183: FILE: drivers/ide/ide-eh.c:120:
+	if (rq == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#220: FILE: drivers/ide/ide-eh.c:157:
+	udelay(10);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

CHECK:BRACES: braces {} should be used on all arms of this statement
#223: FILE: drivers/ide/ide-eh.c:160:
+	if (OK_STAT(stat, 0, ATA_BUSY))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#224: FILE: drivers/ide/ide-eh.c:161:
+		printk(KERN_INFO "%s: ATAPI reset complete\n", drive->name);

CHECK:BRACES: Unbalanced braces around else statement
#225: FILE: drivers/ide/ide-eh.c:162:
+	else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#227: FILE: drivers/ide/ide-eh.c:164:
+			ide_set_handler(drive, &atapi_reset_pollfunc, HZ/20,
 			                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#234: FILE: drivers/ide/ide-eh.c:171:
+		printk(KERN_ERR "%s: ATAPI reset timed-out, status=0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/ide/ide-eh.c:172:
+		printk(KERN_ERR "%s: ATAPI reset timed-out, status=0x%02x\n",
+			drive->name, stat);

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#247: FILE: drivers/ide/ide-eh.c:184:
+	static const char *err_master_vals[] =

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#248: FILE: drivers/ide/ide-eh.c:185:
+	static const char *err_master_vals[] =
+		{ NULL, "passed", "formatter device error",

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#254: FILE: drivers/ide/ide-eh.c:191:
+	printk(KERN_ERR "%s: reset: master: ", hwif->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#256: FILE: drivers/ide/ide-eh.c:193:
+		printk(KERN_CONT "%s", err_master_vals[err_master]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#256: FILE: drivers/ide/ide-eh.c:193:
+		printk(KERN_CONT "%s", err_master_vals[err_master]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#258: FILE: drivers/ide/ide-eh.c:195:
+		printk(KERN_CONT "error (0x%02x?)", err);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#258: FILE: drivers/ide/ide-eh.c:195:
+		printk(KERN_CONT "error (0x%02x?)", err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#260: FILE: drivers/ide/ide-eh.c:197:
+		printk(KERN_CONT "; slave: failed");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#260: FILE: drivers/ide/ide-eh.c:197:
+		printk(KERN_CONT "; slave: failed");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#261: FILE: drivers/ide/ide-eh.c:198:
+	printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#261: FILE: drivers/ide/ide-eh.c:198:
+	printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#280: FILE: drivers/ide/ide-eh.c:217:
+			printk(KERN_ERR "%s: host reset_poll failure for %s.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#281: FILE: drivers/ide/ide-eh.c:218:
+			printk(KERN_ERR "%s: host reset_poll failure for %s.\n",
+				hwif->name, drive->name);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#290: FILE: drivers/ide/ide-eh.c:227:
+			ide_set_handler(drive, &reset_pollfunc, HZ/20, NULL);
 			                                          ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#294: FILE: drivers/ide/ide-eh.c:231:
+		printk(KERN_ERR "%s: reset timed-out, status=0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#295: FILE: drivers/ide/ide-eh.c:232:
+		printk(KERN_ERR "%s: reset timed-out, status=0x%02x\n",
+			hwif->name, tmp);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#302: FILE: drivers/ide/ide-eh.c:239:
+			printk(KERN_INFO "%s: reset: success\n", hwif->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: drivers/ide/ide-eh.c:333:
+	BUG_ON(hwif->handler != NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "hwif->handler"
#396: FILE: drivers/ide/ide-eh.c:333:
+	BUG_ON(hwif->handler != NULL);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#402: FILE: drivers/ide/ide-eh.c:339:
+		udelay(20);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#407: FILE: drivers/ide/ide-eh.c:344:
+		__ide_set_handler(drive, &atapi_reset_pollfunc, HZ/20, NULL);
 		                                                  ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#460: FILE: drivers/ide/ide-eh.c:397:
+	udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#464: FILE: drivers/ide/ide-eh.c:401:
+	udelay(10);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#467: FILE: drivers/ide/ide-eh.c:404:
+	__ide_set_handler(drive, &reset_pollfunc, HZ/20, NULL);
 	                                            ^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#968: FILE: include/linux/ide.h:1147:
+int ide_end_request(ide_drive_t *, int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#968: FILE: include/linux/ide.h:1147:
+int ide_end_request(ide_drive_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#968: FILE: include/linux/ide.h:1147:
+int ide_end_request(ide_drive_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#969: FILE: include/linux/ide.h:1148:
+int ide_end_dequeued_request(ide_drive_t *, struct request *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#969: FILE: include/linux/ide.h:1148:
+int ide_end_dequeued_request(ide_drive_t *, struct request *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#969: FILE: include/linux/ide.h:1148:
+int ide_end_dequeued_request(ide_drive_t *, struct request *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#969: FILE: include/linux/ide.h:1148:
+int ide_end_dequeued_request(ide_drive_t *, struct request *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#970: FILE: include/linux/ide.h:1149:
+void ide_kill_rq(ide_drive_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#970: FILE: include/linux/ide.h:1149:
+void ide_kill_rq(ide_drive_t *, struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#972: FILE: include/linux/ide.h:1151:
+void __ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_handler_t *' should also have an identifier name
#972: FILE: include/linux/ide.h:1151:
+void __ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#972: FILE: include/linux/ide.h:1151:
+void __ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_expiry_t *' should also have an identifier name
#972: FILE: include/linux/ide.h:1151:
+void __ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#974: FILE: include/linux/ide.h:1153:
+void ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_handler_t *' should also have an identifier name
#974: FILE: include/linux/ide.h:1153:
+void ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#974: FILE: include/linux/ide.h:1153:
+void ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_expiry_t *' should also have an identifier name
#974: FILE: include/linux/ide.h:1153:
+void ide_set_handler(ide_drive_t *, ide_handler_t *, unsigned int,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 15 checks, 906 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000178630.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
