WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
search for the pathname in the entire union mounted stack. Also they have been

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#58: FILE: fs/dcache.c:1281:
+struct dentry * __d_lookup_single(struct dentry *parent, struct qstr *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#66: FILE: fs/dcache.c:1366:
+struct dentry * d_lookup_single(struct dentry *parent, struct qstr *name)

ERROR:CODE_INDENT: code indent should use tabs where possible
#71: FILE: fs/dcache.c:1371:
+        do {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#71: FILE: fs/dcache.c:1371:
+        do {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: fs/dcache.c:1372:
+                seq = read_seqbegin(&rename_lock);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: fs/dcache.c:1372:
+                seq = read_seqbegin(&rename_lock);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#73: FILE: fs/dcache.c:1373:
+                dentry = __d_lookup_single(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#73: FILE: fs/dcache.c:1373:
+                dentry = __d_lookup_single(parent, name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#74: FILE: fs/dcache.c:1374:
+                if (dentry)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#74: FILE: fs/dcache.c:1374:
+                if (dentry)$

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#89: FILE: fs/namei.c:377:
+do_revalidate_single(struct dentry *dentry, struct nameidata *nd)
                                                               ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#91: FILE: fs/namei.c:379:
+	int status = dentry->d_op->d_revalidate(dentry, nd);
 	                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#92: FILE: fs/namei.c:380:
+	int status = dentry->d_op->d_revalidate(dentry, nd);
+	if (unlikely(status <= 0)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#135: FILE: fs/namei.c:442:
+		dentry = do_revalidate_single(dentry, nd);
 		                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#144: FILE: fs/namei.c:495:
+struct dentry * real_lookup_single(struct dentry *parent, struct qstr *name, struct nameidata *nd)
                                                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#144: FILE: fs/namei.c:495:
+struct dentry * real_lookup_single(struct dentry *parent, struct qstr *name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#162: FILE: fs/namei.c:536:
+		result = do_revalidate_single(result, nd);
 		                                      ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#248: FILE: fs/namei.c:1330:
+struct dentry * __lookup_hash_single(struct qstr *name, struct dentry *base, struct nameidata *nd)
                                                                                                ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#248: FILE: fs/namei.c:1330:
+struct dentry * __lookup_hash_single(struct qstr *name, struct dentry *base, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: fs/namespace.c:140:
+struct vfsmount * find_mnt(struct dentry *dentry)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#296: FILE: fs/namespace.c:162:
+	BUG_ON(!mnt);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: fs/union.c:369:
+static noinline int revalidate_union(struct dentry * dentry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: fs/union.c:377:
+		UM_DEBUG_DCACHE("dentry unused, count=%d\n",
+			     atomic_read(&dentry->d_count));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#338: FILE: fs/union.c:395:
+	BUG_ON(!lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#339: FILE: fs/union.c:396:
+	BUG_ON(dentry->d_union == lock);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#349: FILE: fs/union.c:406:
+	BUG_ON(atomic_read(&old_lock->u_count) != 1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#352: FILE: fs/union.c:409:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: fs/union.c:419:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#401: FILE: fs/union.c:458:
+struct dentry * __d_lookup_union(struct dentry *base, struct qstr *name)

WARNING:LINE_SPACING: Missing a blank line after declarations
#464: FILE: fs/union.c:521:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_DCACHE("name=\"%s\", inode=%p, device=%s\n",

WARNING:BRACES: braces {} are not necessary for single statement blocks
#480: FILE: fs/union.c:537:
+	if (topmost->d_union) {
+		union_lock_spinlock(topmost, &topmost->d_lock);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->d_overlaid != dentry'
#508: FILE: fs/union.c:565:
+		if (last->d_overlaid
+		    && (last->d_overlaid != dentry)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#509: FILE: fs/union.c:566:
+		if (last->d_overlaid
+		    && (last->d_overlaid != dentry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#510: FILE: fs/union.c:567:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#510: FILE: fs/union.c:567:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#512: FILE: fs/union.c:569:
+			       __FUNCTION__, last->d_name.name,

CHECK:BRACES: braces {} should be used on all arms of this statement
#541: FILE: fs/union.c:598:
+	if (topmost->d_union && atomic_read(&topmost->d_union->u_count) == 1) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#544: FILE: fs/union.c:601:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#559: FILE: fs/union.c:616:
+ * is in "stack". */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#566: FILE: fs/union.c:623:
+	BUG_ON(!stack);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#567: FILE: fs/union.c:624:
+	BUG_ON(!new);

WARNING:RETURN_VOID: void function return statements are not generally useful
#585: FILE: fs/union.c:642:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#591: FILE: fs/union.c:648:
+extern struct dentry * __lookup_hash_single(struct qstr *, struct dentry *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#591: FILE: fs/union.c:648:
+extern struct dentry * __lookup_hash_single(struct qstr *, struct dentry *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#591: FILE: fs/union.c:648:
+extern struct dentry * __lookup_hash_single(struct qstr *, struct dentry *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#591: FILE: fs/union.c:648:
+extern struct dentry * __lookup_hash_single(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#591: FILE: fs/union.c:648:
+extern struct dentry * __lookup_hash_single(struct qstr *, struct dentry *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#593: FILE: fs/union.c:650:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#593: FILE: fs/union.c:650:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#593: FILE: fs/union.c:650:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#593: FILE: fs/union.c:650:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#593: FILE: fs/union.c:650:
+extern struct dentry * real_lookup_single(struct dentry *, struct qstr *,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#619: FILE: fs/union.c:676:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#623: FILE: fs/union.c:680:
+	 * with a NULLed nd argument */
 	                 ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#623: FILE: fs/union.c:680:
+	 * with a NULLed nd argument */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#625: FILE: fs/union.c:682:
+		nd.last.name = NULL;	// handled in __link_path_walk
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#626: FILE: fs/union.c:683:
+		nd.last.len = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#627: FILE: fs/union.c:684:
+		nd.last.hash = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#628: FILE: fs/union.c:685:
+		nd.flags = __nd->flags;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#629: FILE: fs/union.c:686:
+		nd.um_flags = 0;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#630: FILE: fs/union.c:687:
+		nd.last_type = -1;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#631: FILE: fs/union.c:688:
+		nd.depth = 0;		// handled in do_follow_link
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#632: FILE: fs/union.c:689:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#632: FILE: fs/union.c:689:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		                                         ^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#636: FILE: fs/union.c:693:
+	if (topmost->d_union) {
+		union_lock_spinlock(topmost, &topmost->d_lock);
+	}

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#646: FILE: fs/union.c:703:
+		 * so we need to reset it here */

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#648: FILE: fs/union.c:705:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#649: FILE: fs/union.c:706:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#653: FILE: fs/union.c:710:
+					      __nd ? &nd : NULL);
 					              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#672: FILE: fs/union.c:729:
+		follow_mount(&nd.mnt, &dentry);
 		              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#676: FILE: fs/union.c:733:
+			struct vfsmount *mnt = find_mnt(dentry);
+			UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'last->d_overlaid != dentry'
#682: FILE: fs/union.c:739:
+		if (last->d_overlaid && (last->d_overlaid != dentry)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#683: FILE: fs/union.c:740:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#683: FILE: fs/union.c:740:
+			printk(KERN_ERR "%s: strange stack layout " \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#685: FILE: fs/union.c:742:
+			       __FUNCTION__, last->d_name.name,

WARNING:INDENTED_LABEL: labels should not be indented
#716: FILE: fs/union.c:773:
+	loop:

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#717: FILE: fs/union.c:774:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#718: FILE: fs/union.c:775:
+		mntput(nd.mnt);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#726: FILE: fs/union.c:783:
+	__dput(nd.dentry);
 	       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#727: FILE: fs/union.c:784:
+	mntput(nd.mnt);
 	       ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#732: FILE: fs/union.c:789:
+struct dentry * real_lookup_union(struct dentry *base, struct qstr *name,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#738: FILE: fs/union.c:795:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#752: FILE: fs/union.c:809:
+		nd.last.name = NULL;	// handled in __link_path_walk
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#753: FILE: fs/union.c:810:
+		nd.last.len = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#754: FILE: fs/union.c:811:
+		nd.last.hash = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#755: FILE: fs/union.c:812:
+		nd.flags = __nd->flags;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#756: FILE: fs/union.c:813:
+		nd.um_flags = 0;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#757: FILE: fs/union.c:814:
+		nd.last_type = -1;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#758: FILE: fs/union.c:815:
+		nd.depth = 0;		// handled in do_follow_link
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#759: FILE: fs/union.c:816:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#759: FILE: fs/union.c:816:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		                                         ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#764: FILE: fs/union.c:821:
+		struct dentry * dentry;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#767: FILE: fs/union.c:824:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#768: FILE: fs/union.c:825:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#770: FILE: fs/union.c:827:
+		dentry = real_lookup_single(nd.dentry, name, &nd);
 		                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#770: FILE: fs/union.c:827:
+		dentry = real_lookup_single(nd.dentry, name, &nd);
 		                                              ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#771: FILE: fs/union.c:828:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#772: FILE: fs/union.c:829:
+		mntput(nd.mnt);
 		       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#795: FILE: fs/union.c:852:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#802: FILE: fs/union.c:859:
+	err = __lookup_union(topmost, name, &nd);
 	                                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#812: FILE: fs/union.c:869:
+struct dentry * __lookup_hash_union(struct qstr *name, struct dentry *parent,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#817: FILE: fs/union.c:874:
+	struct nameidata nd;
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#828: FILE: fs/union.c:885:
+		nd.last.name = NULL;	// handled in __link_path_walk
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#829: FILE: fs/union.c:886:
+		nd.last.len = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#830: FILE: fs/union.c:887:
+		nd.last.hash = 0;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#831: FILE: fs/union.c:888:
+		nd.flags = __nd->flags;
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#832: FILE: fs/union.c:889:
+		nd.um_flags = 0;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#833: FILE: fs/union.c:890:
+		nd.last_type = -1;	// dito
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#834: FILE: fs/union.c:891:
+		nd.depth = 0;		// handled in do_follow_link
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#835: FILE: fs/union.c:892:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#835: FILE: fs/union.c:892:
+		memcpy(&nd.intent, &__nd->intent, sizeof(nd.intent));
 		                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#843: FILE: fs/union.c:900:
+		nd.dentry = __dget(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#844: FILE: fs/union.c:901:
+		nd.mnt = find_mnt(parent);
 		^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#847: FILE: fs/union.c:904:
+		dentry = __lookup_hash_single(name, nd.dentry, &nd);
 		                                    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#847: FILE: fs/union.c:904:
+		dentry = __lookup_hash_single(name, nd.dentry, &nd);
 		                                                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#849: FILE: fs/union.c:906:
+		__dput(nd.dentry);
 		       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#850: FILE: fs/union.c:907:
+		mntput(nd.mnt);
 		       ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#872: FILE: fs/union.c:929:
+		struct vfsmount *mnt = find_mnt(topmost);
+		UM_DEBUG_UID("name=\"%s\", inode=%p, device=%s\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#879: FILE: fs/union.c:936:
+	err = __lookup_union(topmost, name, &nd);
 	                                     ^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#915: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#915: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#915: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#915: FILE: include/linux/dcache.h:297:
+extern struct dentry * d_lookup_single(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#916: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#916: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#916: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#916: FILE: include/linux/dcache.h:298:
+extern struct dentry * __d_lookup_single(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#920: FILE: include/linux/dcache.h:302:
+extern struct dentry * __d_lookup_union(struct dentry *, struct qstr *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#920: FILE: include/linux/dcache.h:302:
+extern struct dentry * __d_lookup_union(struct dentry *, struct qstr *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#923: FILE: include/linux/dcache.h:305:
+static inline struct dentry * __d_lookup(struct dentry *parent, struct qstr *name)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#926: FILE: include/linux/dcache.h:308:
+       return __d_lookup_union(parent, name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: include/linux/dcache.h:310:
+       return __d_lookup_single(parent, name);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: include/linux/dcache.h:443:
+extern struct vfsmount *find_mnt(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#939: FILE: include/linux/dcache.h:443:
+extern struct vfsmount *find_mnt(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#976: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount **' should also have an identifier name
#976: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry **' should also have an identifier name
#976: FILE: include/linux/union.h:27:
+extern int follow_union_mount(struct vfsmount **, struct dentry **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#977: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#977: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#977: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#977: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#977: FILE: include/linux/union.h:28:
+extern struct dentry * real_lookup_union(struct dentry *, struct qstr *,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#979: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_union(struct qstr *, struct dentry *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#979: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct qstr *' should also have an identifier name
#979: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#979: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_union(struct qstr *, struct dentry *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#979: FILE: include/linux/union.h:30:
+extern struct dentry * __lookup_hash_union(struct qstr *, struct dentry *,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#986: FILE: include/linux/union.h:37:
+#define follow_union_mount(x,y) do { /* empty */ } while (0)
                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#990: FILE: include/linux/union.h:41:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)
                                                                                                       ^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#990: FILE: include/linux/union.h:41:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#990: FILE: include/linux/union.h:41:
+static inline struct dentry * real_lookup(struct dentry *parent, struct qstr *name, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#993: FILE: include/linux/union.h:44:
+	return real_lookup_union(parent, name, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#995: FILE: include/linux/union.h:46:
+	return real_lookup_single(parent, name, nd);
 	                                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#999: FILE: include/linux/union.h:50:
+static inline struct dentry * __lookup_hash(struct qstr *name, struct dentry *base, struct nameidata *nd)
                                                                                                       ^^

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#999: FILE: include/linux/union.h:50:
+static inline struct dentry * __lookup_hash(struct qstr *name, struct dentry *base, struct nameidata *nd)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#999: FILE: include/linux/union.h:50:
+static inline struct dentry * __lookup_hash(struct qstr *name, struct dentry *base, struct nameidata *nd)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1002: FILE: include/linux/union.h:53:
+	return __lookup_hash_union(name, base, nd);
 	                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1004: FILE: include/linux/union.h:55:
+	return __lookup_hash_single(name, base, nd);
 	                                        ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 25 errors, 121 warnings, 13 checks, 923 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000444413.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
