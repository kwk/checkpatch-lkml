CHECK:SPACING: spaces preferred around that '*' (ctx:VxB)
#99: FILE: include/linux/kernel.h:33:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#99: FILE: include/linux/kernel.h:33:
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))

ERROR:SPACING: space required after that ';' (ctx:VxV)
#110: FILE: include/linux/kernel.h:40:
+	({type _dummy; typeof(x) _dummy2; (void)(&_dummy == &_dummy2); 1;})
 	                                                                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#118: FILE: include/linux/kernel.h:47:
+	({typeof(type) _x = function; (void)_x;})
 	                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#130: FILE: include/linux/kernel.h:56:
+#define container_of(ptr, type, member) ({			\
+	const typeof(((type *)0)->member) *__mptr = (ptr);	\
+	(type *)((char *)__mptr - offsetof(type, member));})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'member' may be better as '(member)' to avoid precedence issues
#130: FILE: include/linux/kernel.h:56:
+#define container_of(ptr, type, member) ({			\
+	const typeof(((type *)0)->member) *__mptr = (ptr);	\
+	(type *)((char *)__mptr - offsetof(type, member));})

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#131: FILE: include/linux/kernel.h:57:
+	const typeof(((type *)0)->member) *__mptr = (ptr);	\
 	                                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#132: FILE: include/linux/kernel.h:58:
+	(type *)((char *)__mptr - offsetof(type, member));})
 	                                                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#155: FILE: include/linux/kernel.h:68:
+	_x < _y ? _x : _y;})
 	                 ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#161: FILE: include/linux/kernel.h:74:
+	_x > _y ? _x : _y;})
 	                 ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#170: FILE: include/linux/kernel.h:83:
+	({type _x = (x); type _y = (y); _x < _y ? _x: _y;})
 	                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#170: FILE: include/linux/kernel.h:83:
+	({type _x = (x); type _y = (y); _x < _y ? _x: _y;})
 	                                                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#173: FILE: include/linux/kernel.h:86:
+	({type _x = (x); type _y = (y); _x > _y ? _x: _y;})
 	                                            ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#173: FILE: include/linux/kernel.h:86:
+	({type _x = (x); type _y = (y); _x > _y ? _x: _y;})
 	                                                ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#175: FILE: include/linux/kernel.h:88:
+#define abs(x) ({int _x = (x); (_x < 0) ? -_x : _x;})
                                                   ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#205: FILE: include/linux/kernel.h:104:
+	((x) + _mask) & ~_mask;})
 	                      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#213: FILE: include/linux/kernel.h:111:
+	(_n + _d - 1) / _d;})
 	                  ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#222: FILE: include/linux/kernel.h:116:
+	(((_x + (_y - 1)) / _y) * _y);})
 	                             ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/kernel.h:121:
+extern void dump_thread(struct pt_regs *regs, struct user *dump);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#270: FILE: include/linux/kernel.h:139:
+extern fastcall NORET_TYPE void do_exit(long error_code) ATTRIB_NORET;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: include/linux/kernel.h:140:
+extern NORET_TYPE void complete_and_exit(struct completion *, long)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: include/linux/kernel.h:145:
+extern struct pid *session_of_pgrp(struct pid *pgrp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: include/linux/kernel.h:146:
+extern int core_kernel_text(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: include/linux/kernel.h:147:
+extern int __kernel_text_address(unsigned long addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#283: FILE: include/linux/kernel.h:148:
+extern int kernel_text_address(unsigned long addr);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#286: FILE: include/linux/kernel.h:151:
+#define TAINT_PROPRIETARY_MODULE	(1<<0)
                                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#286: FILE: include/linux/kernel.h:151:
+#define TAINT_PROPRIETARY_MODULE	(1<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#287: FILE: include/linux/kernel.h:152:
+#define TAINT_FORCED_MODULE		(1<<1)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#287: FILE: include/linux/kernel.h:152:
+#define TAINT_FORCED_MODULE		(1<<1)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#288: FILE: include/linux/kernel.h:153:
+#define TAINT_UNSAFE_SMP		(1<<2)
                         		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#288: FILE: include/linux/kernel.h:153:
+#define TAINT_UNSAFE_SMP		(1<<2)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#289: FILE: include/linux/kernel.h:154:
+#define TAINT_FORCED_RMMOD		(1<<3)
                           		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#289: FILE: include/linux/kernel.h:154:
+#define TAINT_FORCED_RMMOD		(1<<3)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#290: FILE: include/linux/kernel.h:155:
+#define TAINT_MACHINE_CHECK		(1<<4)
                            		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#290: FILE: include/linux/kernel.h:155:
+#define TAINT_MACHINE_CHECK		(1<<4)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#291: FILE: include/linux/kernel.h:156:
+#define TAINT_BAD_PAGE			(1<<5)
                       			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#291: FILE: include/linux/kernel.h:156:
+#define TAINT_BAD_PAGE			(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#292: FILE: include/linux/kernel.h:157:
+#define TAINT_USER			(1<<6)
                   			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#292: FILE: include/linux/kernel.h:157:
+#define TAINT_USER			(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#293: FILE: include/linux/kernel.h:158:
+#define TAINT_DIE			(1<<7)
                  			  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#293: FILE: include/linux/kernel.h:158:
+#define TAINT_DIE			(1<<7)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: include/linux/kernel.h:160:
+extern const char *print_tainted(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#296: FILE: include/linux/kernel.h:161:
+extern void add_taint(unsigned);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: include/linux/kernel.h:161:
+extern void add_taint(unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#296: FILE: include/linux/kernel.h:161:
+extern void add_taint(unsigned);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#300: FILE: include/linux/kernel.h:165:
+extern int oops_in_progress;	/* If set, an oops, panic(), BUG() or die()
+				   is in progress */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#300: FILE: include/linux/kernel.h:165:
+				   is in progress */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: include/linux/kernel.h:179:
+extern int do_sysinfo(struct sysinfo *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: include/linux/kernel.h:182:
+extern void bust_spinlocks(int yes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: include/linux/kernel.h:185:
+extern unsigned long int_sqrt(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#330: FILE: include/linux/kernel.h:185:
+extern unsigned long int_sqrt(unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: include/linux/kernel.h:188:
+extern unsigned long simple_strtoul(const char *cp, char **endp,

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#333: FILE: include/linux/kernel.h:188:
+extern unsigned long simple_strtoul(const char *cp, char **endp,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: include/linux/kernel.h:190:
+extern long simple_strtol(const char *cp, char **endp, unsigned int base);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#335: FILE: include/linux/kernel.h:190:
+extern long simple_strtol(const char *cp, char **endp, unsigned int base);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: include/linux/kernel.h:191:
+extern unsigned long long simple_strtoull(const char *cp, char **endp,

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#336: FILE: include/linux/kernel.h:191:
+extern unsigned long long simple_strtoull(const char *cp, char **endp,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: include/linux/kernel.h:193:
+extern long long simple_strtoll(const char *cp, char **endp, unsigned int base);

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#338: FILE: include/linux/kernel.h:193:
+extern long long simple_strtoll(const char *cp, char **endp, unsigned int base);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: include/linux/kernel.h:194:
+extern int sprintf(char *buf, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/kernel.h:196:
+extern int vsprintf(char *buf, const char *fmt, va_list args)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: include/linux/kernel.h:198:
+extern int snprintf(char *buf, size_t size, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#350: FILE: include/linux/kernel.h:202:
+extern int scnprintf(char *buf, size_t size, const char *fmt, ...)

WARNING:NAKED_SSCANF: unchecked sscanf return value
#359: FILE: include/linux/kernel.h:210:
+extern int sscanf(const char *str, const char *fmt, ...)
 	__attribute__ ((format (scanf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#359: FILE: include/linux/kernel.h:210:
+extern int sscanf(const char *str, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: include/linux/kernel.h:212:
+extern int vsscanf(const char *str, const char *fmt, va_list args)

ERROR:SPACING: space required after that ';' (ctx:VxV)
#400: FILE: include/linux/kernel.h:225:
+# define sector_div(n, b) ({int _res = (n) % (b); (n) /= (b); _res;})
                                                                   ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#400: FILE: include/linux/kernel.h:225:
+# define sector_div(n, b) ({int _res = (n) % (b); (n) /= (b); _res;})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#400: FILE: include/linux/kernel.h:225:
+# define sector_div(n, b) ({int _res = (n) % (b); (n) /= (b); _res;})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#487: FILE: include/linux/kernel.h:229:
+extern int cond_resched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#599: FILE: include/linux/kernel.h:246:
+extern  void __might_sleep(char *file, int line);

ERROR:SPACING: space required after that ';' (ctx:VxV)
#601: FILE: include/linux/kernel.h:248:
+	do {__might_sleep(__FILE__, __LINE__); might_resched();} while (0)
 	                                                      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#603: FILE: include/linux/kernel.h:250:
+# define might_sleep() do {might_resched();} while (0)
                                           ^

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#603: FILE: include/linux/kernel.h:250:
+# define might_sleep() do {might_resched();} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

ERROR:SPACING: space required after that ';' (ctx:VxV)
#608: FILE: include/linux/kernel.h:253:
+#define might_sleep_if(cond) do {if (cond) might_sleep();} while (0)
                                                         ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr' may be better as '(nr)' to avoid precedence issues
#638: FILE: include/linux/bitops.h:9:
+#define BITS_TO_LONGS(nr)	((nr + BITS_PER_LONG - 1) / BITS_PER_LONG)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#643: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#648: FILE: include/linux/logging.h:1:
+#ifndef _LINUX_LOGGING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#678: FILE: include/linux/logging.h:31:
+asmlinkage int printk(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#678: FILE: include/linux/logging.h:31:
+asmlinkage int printk(const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#679: FILE: include/linux/logging.h:32:
+	__attribute__ ((format (printf, 1, 2))) __cold;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#681: FILE: include/linux/logging.h:34:
+	__attribute__ ((format (printf, 1, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#683: FILE: include/linux/logging.h:36:
+extern int log_buf_get_len(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: include/linux/logging.h:37:
+extern int log_buf_read(int idx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#685: FILE: include/linux/logging.h:38:
+extern int log_buf_copy(char *dest, int idx, int len);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#689: FILE: include/linux/logging.h:42:
+static inline int __attribute__ ((format (printf, 1, 2))) printk(const char *s, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#689: FILE: include/linux/logging.h:42:
+static inline int __attribute__ ((format (printf, 1, 2))) printk(const char *s, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#694: FILE: include/linux/logging.h:47:
+static inline int __attribute__ ((format (printf, 1, 0))) vprintk(const char *s, va_list args)

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#715: FILE: include/linux/logging.h:68:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#715: FILE: include/linux/logging.h:68:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#716: FILE: include/linux/logging.h:69:
+extern int __printk_ratelimit(int ratelimit_jiffies, int ratelimit_burst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#717: FILE: include/linux/logging.h:70:
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#731: FILE: include/linux/logging.h:84:
+extern void dump_stack(void) __cold;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#732: FILE: include/linux/logging.h:85:
+extern void wake_up_klogd(void);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#739: FILE: include/linux/logging.h:92:
+};
+extern void hex_dump_to_buffer(const void *buf, size_t len,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#739: FILE: include/linux/logging.h:92:
+extern void hex_dump_to_buffer(const void *buf, size_t len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: include/linux/logging.h:95:
+extern void print_hex_dump(const char *level, const char *prefix_str,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#745: FILE: include/linux/logging.h:98:
+extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#748: FILE: include/linux/logging.h:101:
+#define pr_emerg(fmt, arg...)	printk(KERN_EMERG fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#749: FILE: include/linux/logging.h:102:
+#define pr_alert(fmt, arg...)	printk(KERN_ALERT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#750: FILE: include/linux/logging.h:103:
+#define pr_crit(fmt, arg...)	printk(KERN_CRIT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#751: FILE: include/linux/logging.h:104:
+#define pr_err(fmt, arg...)	printk(KERN_ERR fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#752: FILE: include/linux/logging.h:105:
+#define pr_warning(fmt, arg...)	printk(KERN_WARNING fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#753: FILE: include/linux/logging.h:106:
+#define pr_notice(fmt, arg...)	printk(KERN_NOTICE fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#754: FILE: include/linux/logging.h:107:
+#define pr_info(fmt, arg...)	printk(KERN_INFO fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#758: FILE: include/linux/logging.h:111:
+#define pr_debug(fmt, arg...)	printk(KERN_DEBUG fmt, ##arg)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#760: FILE: include/linux/logging.h:113:
+static inline int __attribute__ ((format (printf, 1, 2))) pr_debug(const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#760: FILE: include/linux/logging.h:113:
+static inline int __attribute__ ((format (printf, 1, 2))) pr_debug(const char * fmt, ...)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#770: FILE: include/linux/logging.h:123:
+#define NIPQUAD(addr)			\
+	((unsigned char *)&addr)[0],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#770: FILE: include/linux/logging.h:123:
+#define NIPQUAD(addr)			\
+	((unsigned char *)&addr)[0],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[3]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#770: FILE: include/linux/logging.h:123:
+#define NIPQUAD(addr)			\
+	((unsigned char *)&addr)[0],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[3]

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#777: FILE: include/linux/logging.h:130:
+#define NIP6(addr)			\
+	ntohs((addr).s6_addr16[0]),	\
+	ntohs((addr).s6_addr16[1]),	\
+	ntohs((addr).s6_addr16[2]),	\
+	ntohs((addr).s6_addr16[3]),	\
+	ntohs((addr).s6_addr16[4]),	\
+	ntohs((addr).s6_addr16[5]),	\
+	ntohs((addr).s6_addr16[6]),	\
+	ntohs((addr).s6_addr16[7])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#777: FILE: include/linux/logging.h:130:
+#define NIP6(addr)			\
+	ntohs((addr).s6_addr16[0]),	\
+	ntohs((addr).s6_addr16[1]),	\
+	ntohs((addr).s6_addr16[2]),	\
+	ntohs((addr).s6_addr16[3]),	\
+	ntohs((addr).s6_addr16[4]),	\
+	ntohs((addr).s6_addr16[5]),	\
+	ntohs((addr).s6_addr16[6]),	\
+	ntohs((addr).s6_addr16[7])

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#790: FILE: include/linux/logging.h:143:
+#define HIPQUAD(addr)			\
+	((unsigned char *)&addr)[3],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[0]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#790: FILE: include/linux/logging.h:143:
+#define HIPQUAD(addr)			\
+	((unsigned char *)&addr)[3],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[0]

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'addr' may be better as '(addr)' to avoid precedence issues
#790: FILE: include/linux/logging.h:143:
+#define HIPQUAD(addr)			\
+	((unsigned char *)&addr)[3],	\
+	((unsigned char *)&addr)[2],	\
+	((unsigned char *)&addr)[1],	\
+	((unsigned char *)&addr)[0]

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#810: FILE: include/net/neighbour.h:90:
+#define HA_ALIGN_MASK(x, mask)	(((x) + (mask)) & ~(mask))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 29 warnings, 66 checks, 757 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000352380.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
