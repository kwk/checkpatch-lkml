WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
>     // this is a convenience wrapper, maybe not needed as they get combinatoric

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#248: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#253: FILE: include/linux/logging.h:1:
+#ifndef _LINUX_LOGGING_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/logging.h:9:
+extern const char *print_tainted(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#281: FILE: include/linux/logging.h:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#284: FILE: include/linux/logging.h:32:
+	__attribute__ ((format (printf, 1, 0)));

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#285: FILE: include/linux/logging.h:33:
+asmlinkage int printk(const char * fmt, ...)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: include/linux/logging.h:33:
+asmlinkage int printk(const char * fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#286: FILE: include/linux/logging.h:34:
+	__attribute__ ((format (printf, 1, 2))) __cold;

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#289: FILE: include/linux/logging.h:37:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: include/linux/logging.h:37:
+extern int printk_ratelimit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: include/linux/logging.h:38:
+extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 0) over __attribute__((format(printf, 1, 0)))
#294: FILE: include/linux/logging.h:42:
+	__attribute__ ((format (printf, 1, 0)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#296: FILE: include/linux/logging.h:44:
+static inline int printk(const char *s, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#297: FILE: include/linux/logging.h:45:
+	__attribute__ ((format (printf, 1, 2)));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: include/linux/logging.h:46:
+static inline int __cold printk(const char *s, ...) { return 0; }

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#299: FILE: include/linux/logging.h:47:
+static inline int printk_ratelimit(void) { return 0; }

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#300: FILE: include/linux/logging.h:48:
+static inline bool printk_timed_ratelimit(unsigned long *caller_jiffies, \

WARNING:STORAGE_CLASS: storage class 'asmlinkage' should be located before type 'void'
#305: FILE: include/linux/logging.h:53:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#305: FILE: include/linux/logging.h:53:
+extern void asmlinkage __attribute__((format(printf, 1, 2)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: include/linux/logging.h:56:
+extern void dump_stack(void) __cold;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#315: FILE: include/linux/logging.h:63:
+};
+extern void hex_dump_to_buffer(const void *buf, size_t len,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: include/linux/logging.h:63:
+extern void hex_dump_to_buffer(const void *buf, size_t len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: include/linux/logging.h:64:
+extern void hex_dump_to_buffer(const void *buf, size_t len,
+				int rowsize, int groupsize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: include/linux/logging.h:66:
+extern void print_hex_dump(const char *level, const char *prefix_str,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: include/linux/logging.h:67:
+extern void print_hex_dump(const char *level, const char *prefix_str,
+				int prefix_type, int rowsize, int groupsize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: include/linux/logging.h:69:
+extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#322: FILE: include/linux/logging.h:70:
+extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
+			const void *buf, size_t len);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#341: FILE: include/linux/logging.h:89:
+	printk(KERN_EMERG fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#343: FILE: include/linux/logging.h:91:
+	printk(KERN_ALERT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#345: FILE: include/linux/logging.h:93:
+	printk(KERN_CRIT fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#347: FILE: include/linux/logging.h:95:
+	printk(KERN_ERR fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#349: FILE: include/linux/logging.h:97:
+	printk(KERN_WARNING fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#351: FILE: include/linux/logging.h:99:
+	printk(KERN_NOTICE fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#353: FILE: include/linux/logging.h:101:
+	printk(KERN_INFO fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#358: FILE: include/linux/logging.h:106:
+	printk(KERN_DEBUG fmt, ##arg)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#361: FILE: include/linux/logging.h:109:
+	({ if (0) printk(KERN_DEBUG fmt, ##arg); 0; })

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: include/linux/logging.h:112:
+extern void bust_spinlocks(int yes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#365: FILE: include/linux/logging.h:113:
+extern void wake_up_klogd(void);

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#366: FILE: include/linux/logging.h:114:
+extern int oops_in_progress;		/* If set, an oops, panic(), BUG() or die() is in progress */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: include/linux/logging.h:130:
+extern int __ratelimit(struct ratelimit_state *rs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239974.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 25 warnings, 15 checks, 283 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000239974.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
