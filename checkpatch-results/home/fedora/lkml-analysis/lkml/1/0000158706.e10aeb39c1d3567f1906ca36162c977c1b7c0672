WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
Contains the structures that expresses the traces and "channels" (set of buffers

WARNING:TYPO_SPELLING: 'splitted' may be misspelled - perhaps 'split'?
#47: 
conveying part of the trace data, typically splitted in high, medium and low
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#74: FILE: include/linux/ltt-tracer.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#96: FILE: include/linux/ltt-tracer.h:23:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: include/linux/ltt-tracer.h:61:
+size_t ltt_serialize_data(struct rchan_buf *buf, size_t buf_offset,
+			struct ltt_serialize_closure *closure,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#189: FILE: include/linux/ltt-tracer.h:116:
+extern void ltt_vtrace(const struct marker *mdata, void *probe_data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: include/linux/ltt-tracer.h:117:
+extern void ltt_vtrace(const struct marker *mdata, void *probe_data,
+	void *call_data, const char *fmt, va_list *args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/ltt-tracer.h:118:
+extern void ltt_trace(const struct marker *mdata, void *probe_data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: include/linux/ltt-tracer.h:119:
+extern void ltt_trace(const struct marker *mdata, void *probe_data,
+	void *call_data, const char *fmt, ...);

WARNING:LINE_SPACING: Missing a blank line after declarations
#223: FILE: include/linux/ltt-tracer.h:150:
+	size_t alignment = min(sizeof(void *), size_of_type);
+	return (alignment - align_drift) & (alignment - 1);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: include/linux/ltt-tracer.h:152:
+}
+/* Default arch alignment */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#236: FILE: include/linux/ltt-tracer.h:163:
+static inline unsigned int ltt_align(size_t align_drift,
+		 size_t size_of_type)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#241: FILE: include/linux/ltt-tracer.h:168:
+#define LTT_ALIGN __attribute__((packed))

WARNING:SPACING: Unnecessary space before function pointer arguments
#259: FILE: include/linux/ltt-tracer.h:186:
+	int (*reserve_slot) (struct ltt_trace_struct *trace,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: include/linux/ltt-tracer.h:187:
+	int (*reserve_slot) (struct ltt_trace_struct *trace,
+				struct ltt_channel_struct *channel,

WARNING:SPACING: Unnecessary space before function pointer arguments
#266: FILE: include/linux/ltt-tracer.h:193:
+	void (*commit_slot) (struct ltt_channel_struct *channel,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: include/linux/ltt-tracer.h:194:
+	void (*commit_slot) (struct ltt_channel_struct *channel,
+				void **transport_data, long buf_offset,

WARNING:SPACING: Unnecessary space before function pointer arguments
#269: FILE: include/linux/ltt-tracer.h:196:
+	void (*wakeup_channel) (struct ltt_channel_struct *ltt_channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#270: FILE: include/linux/ltt-tracer.h:197:
+	int (*user_blocking) (struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: include/linux/ltt-tracer.h:198:
+	int (*user_blocking) (struct ltt_trace_struct *trace,
+				unsigned int index, size_t data_size,

WARNING:SPACING: Unnecessary space before function pointer arguments
#274: FILE: include/linux/ltt-tracer.h:201:
+	int (*create_dirs) (struct ltt_trace_struct *new_trace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#275: FILE: include/linux/ltt-tracer.h:202:
+	void (*remove_dirs) (struct ltt_trace_struct *new_trace);

WARNING:SPACING: Unnecessary space before function pointer arguments
#276: FILE: include/linux/ltt-tracer.h:203:
+	int (*create_channel) (const char *trace_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: include/linux/ltt-tracer.h:204:
+	int (*create_channel) (const char *trace_name,
+				struct ltt_trace_struct *trace,

WARNING:SPACING: Unnecessary space before function pointer arguments
#282: FILE: include/linux/ltt-tracer.h:209:
+	void (*finish_channel) (struct ltt_channel_struct *channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#283: FILE: include/linux/ltt-tracer.h:210:
+	void (*remove_channel) (struct ltt_channel_struct *channel);

WARNING:SPACING: Unnecessary space before function pointer arguments
#284: FILE: include/linux/ltt-tracer.h:211:
+	void (*user_errors) (struct ltt_trace_struct *trace,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: include/linux/ltt-tracer.h:212:
+	void (*user_errors) (struct ltt_trace_struct *trace,
+				unsigned int index, size_t data_size,

WARNING:SPACING: Unnecessary space before function pointer arguments
#288: FILE: include/linux/ltt-tracer.h:215:
+	int (*handle_cpuhp) (struct notifier_block *nb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: include/linux/ltt-tracer.h:216:
+	int (*handle_cpuhp) (struct notifier_block *nb,
+				unsigned long action, void *hcpu,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#303: FILE: include/linux/ltt-tracer.h:230:
+#define CHANNEL_FLAG_ENABLE	(1U<<0)
                            	   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#303: FILE: include/linux/ltt-tracer.h:230:
+#define CHANNEL_FLAG_ENABLE	(1U<<0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#304: FILE: include/linux/ltt-tracer.h:231:
+#define CHANNEL_FLAG_OVERWRITE	(1U<<1)
                               	   ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#304: FILE: include/linux/ltt-tracer.h:231:
+#define CHANNEL_FLAG_OVERWRITE	(1U<<1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#362: FILE: include/linux/ltt-tracer.h:289:
+#define	LTT_RFLAG_ID			(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#363: FILE: include/linux/ltt-tracer.h:290:
+#define	LTT_RFLAG_ID_SIZE		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#364: FILE: include/linux/ltt-tracer.h:291:
+#define	LTT_RFLAG_ID_SIZE_TSC		(1 << 2)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#381: FILE: include/linux/ltt-tracer.h:308:
+	uint64_t cycle_count_begin;	/* Cycle count at subbuffer start */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#382: FILE: include/linux/ltt-tracer.h:309:
+	uint64_t cycle_count_end;	/* Cycle count at subbuffer end */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#383: FILE: include/linux/ltt-tracer.h:310:
+	uint32_t magic_number;		/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#387: FILE: include/linux/ltt-tracer.h:314:
+	uint8_t major_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#388: FILE: include/linux/ltt-tracer.h:315:
+	uint8_t minor_version;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#389: FILE: include/linux/ltt-tracer.h:316:
+	uint8_t arch_size;		/* Architecture pointer size */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#390: FILE: include/linux/ltt-tracer.h:317:
+	uint8_t alignment;		/* LTT data alignment */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#391: FILE: include/linux/ltt-tracer.h:318:
+	uint64_t start_time_sec;	/* NTP-corrected start time */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#392: FILE: include/linux/ltt-tracer.h:319:
+	uint64_t start_time_usec;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#393: FILE: include/linux/ltt-tracer.h:320:
+	uint64_t start_freq;		/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#397: FILE: include/linux/ltt-tracer.h:324:
+	uint32_t freq_scale;		/* Frequency scaling (divisor) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#398: FILE: include/linux/ltt-tracer.h:325:
+	uint32_t lost_size;		/* Size unused at end of subbuffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#399: FILE: include/linux/ltt-tracer.h:326:
+	uint32_t buf_size;		/* Size of this subbuffer */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#400: FILE: include/linux/ltt-tracer.h:327:
+	uint32_t events_lost;		/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#405: FILE: include/linux/ltt-tracer.h:332:
+	uint32_t subbuf_corrupt;	/*

WARNING:TYPO_SPELLING: 'begginig' may be misspelled - perhaps 'beginning'?
#407: FILE: include/linux/ltt-tracer.h:334:
+					 * the begginig of the trace.
 					       ^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#410: FILE: include/linux/ltt-tracer.h:337:
+	uint8_t header_end[0];		/* End of header */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#444: FILE: include/linux/ltt-tracer.h:371:
+ * */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#445: FILE: include/linux/ltt-tracer.h:372:
+static inline unsigned char ltt_get_header_size(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#500: FILE: include/linux/ltt-tracer.h:427:
+static inline size_t ltt_write_event_header(struct ltt_trace_struct *trace,
+		struct ltt_channel_struct *channel,

CHECK:CAMELCASE: Avoid CamelCase: <eID>
#502: FILE: include/linux/ltt-tracer.h:429:
+		u16 eID, size_t event_size,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#530: FILE: include/linux/ltt-tracer.h:457:
+		ltt_relay_write(buf, buf_offset,
+			(u16[]){ (u16)eID }, sizeof(u16));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: include/linux/ltt-tracer.h:460:
+		ltt_relay_write(buf, buf_offset,
+			(u16[]){ (u16)small_size }, sizeof(u16));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#537: FILE: include/linux/ltt-tracer.h:464:
+			ltt_relay_write(buf, buf_offset,
+				(u32[]){ (u32)event_size }, sizeof(u32));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: include/linux/ltt-tracer.h:469:
+		ltt_relay_write(buf, buf_offset,
+			(u64[]){ (u64)tsc }, sizeof(u64));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#548: FILE: include/linux/ltt-tracer.h:475:
+		ltt_relay_write(buf, buf_offset,
+			(u16[]){ (u16)eID }, sizeof(u16));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#551: FILE: include/linux/ltt-tracer.h:478:
+		ltt_relay_write(buf, buf_offset,
+			(u16[]){ (u16)small_size }, sizeof(u16));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: include/linux/ltt-tracer.h:482:
+			ltt_relay_write(buf, buf_offset,
+				(u32[]){ (u32)event_size }, sizeof(u32));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#561: FILE: include/linux/ltt-tracer.h:488:
+		ltt_relay_write(buf, buf_offset,
+			(u16[]){ (u16)eID }, sizeof(u16));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#580: FILE: include/linux/ltt-tracer.h:507:
+	((offset) & (~((chan)->alloc_size-1)))
 	                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#583: FILE: include/linux/ltt-tracer.h:510:
+#define SUBBUF_ALIGN(offset, chan) \
+	(((offset) + (chan)->subbuf_size) & (~((chan)->subbuf_size - 1)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'chan' - possible side-effects?
#587: FILE: include/linux/ltt-tracer.h:514:
+#define SUBBUF_INDEX(offset, chan) \
+	(BUFFER_OFFSET((offset), chan) >> (chan)->subbuf_size_order)

WARNING:TYPO_SPELLING: 'chanel' may be misspelled - perhaps 'channel'?
#599: FILE: include/linux/ltt-tracer.h:526:
+ * @channel : the chanel to reserve space into.
                   ^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#610: FILE: include/linux/ltt-tracer.h:537:
+static inline int ltt_reserve_slot(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#627: FILE: include/linux/ltt-tracer.h:554:
+
+

WARNING:TYPO_SPELLING: 'chanel' may be misspelled - perhaps 'channel'?
#636: FILE: include/linux/ltt-tracer.h:563:
+ * @channel : the chanel to reserve space into.
                   ^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#641: FILE: include/linux/ltt-tracer.h:568:
+static inline void ltt_commit_slot(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#711: FILE: include/linux/ltt-tracer.h:638:
+extern int ltt_module_register(enum ltt_module_function name, void *function,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: include/linux/ltt-tracer.h:639:
+extern int ltt_module_register(enum ltt_module_function name, void *function,
+		struct module *owner);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#713: FILE: include/linux/ltt-tracer.h:640:
+extern void ltt_module_unregister(enum ltt_module_function name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: include/linux/ltt-tracer.h:671:
+int ltt_trace_set_channel_subbufsize(const char *trace_name,
+		const char *channel_name, unsigned int size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: include/linux/ltt-tracer.h:673:
+int ltt_trace_set_channel_subbufcount(const char *trace_name,
+		const char *channel_name, unsigned int cnt);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#748: FILE: include/linux/ltt-tracer.h:675:
+int ltt_trace_set_channel_enable(const char *trace_name,
+		const char *channel_name, unsigned int enable);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#750: FILE: include/linux/ltt-tracer.h:677:
+int ltt_trace_set_channel_overwrite(const char *trace_name,
+		const char *channel_name, unsigned int overwrite);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#756: FILE: include/linux/ltt-tracer.h:683:
+extern int ltt_control(enum ltt_control_msg msg, const char *trace_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: include/linux/ltt-tracer.h:684:
+extern int ltt_control(enum ltt_control_msg msg, const char *trace_name,
+		const char *trace_type, union ltt_control_args args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#764: FILE: include/linux/ltt-tracer.h:691:
+extern int ltt_filter_control(enum ltt_filter_control_msg msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#765: FILE: include/linux/ltt-tracer.h:692:
+extern int ltt_filter_control(enum ltt_filter_control_msg msg,
+		const char *trace_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: include/linux/ltt-tracer.h:695:
+void ltt_write_trace_header(struct ltt_trace_struct *trace,
+		struct ltt_subbuffer_header *header);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#769: FILE: include/linux/ltt-tracer.h:696:
+extern void ltt_buffer_destroy(struct ltt_channel_struct *ltt_chan);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#778: FILE: include/linux/ltt-tracer.h:705:
+extern int ltt_probe_register(struct ltt_available_probe *pdata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#779: FILE: include/linux/ltt-tracer.h:706:
+extern int ltt_probe_unregister(struct ltt_available_probe *pdata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#780: FILE: include/linux/ltt-tracer.h:707:
+extern int ltt_marker_connect(const char *channel, const char *mname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: include/linux/ltt-tracer.h:708:
+extern int ltt_marker_connect(const char *channel, const char *mname,
+		const char *pname);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#782: FILE: include/linux/ltt-tracer.h:709:
+extern int ltt_marker_disconnect(const char *channel, const char *mname,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#783: FILE: include/linux/ltt-tracer.h:710:
+extern int ltt_marker_disconnect(const char *channel, const char *mname,
+		const char *pname);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#784: FILE: include/linux/ltt-tracer.h:711:
+extern void ltt_dump_marker_state(struct ltt_trace_struct *trace);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158706.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 21 warnings, 73 checks, 729 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158706.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
