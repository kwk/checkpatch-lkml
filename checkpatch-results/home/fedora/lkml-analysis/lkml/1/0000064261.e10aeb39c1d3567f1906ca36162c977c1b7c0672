WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
TOMOYO is a pathname based access control system, but also deals some of non

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: security/tomoyo/condition.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: security/tomoyo/condition.c:2:
+ * security/tomoyo/condition.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:LINE_SPACING: Missing a blank line after declarations
#70: FILE: security/tomoyo/condition.c:25:
+	struct tomoyo_path_info arg;
+	arg.name = arg_ptr;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: security/tomoyo/condition.c:28:
+		bool result;
+		if (index != argv->index)

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: security/tomoyo/condition.c:59:
+	struct tomoyo_path_info value;
+	name.name = env_name;

WARNING:LINE_SPACING: Missing a blank line after declarations
#110: FILE: security/tomoyo/condition.c:65:
+		bool result;
+		if (!tomoyo_path_matches_pattern(&name, envp->name))

WARNING:TYPO_SPELLING: 'Poiner' may be misspelled - perhaps 'Pointer'?
#136: FILE: security/tomoyo/condition.c:91:
+ * @envp: Poiner to "struct tomoyo_envp_entry".
           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#146: FILE: security/tomoyo/condition.c:101:
+	/*
+	  if exec.argc=3

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#176: FILE: security/tomoyo/condition.c:131:
+	u8 *checked;
+	if (argc + envc <= sizeof(local_checked)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#195: FILE: security/tomoyo/condition.c:150:
+			const unsigned char c = kaddr[offset++];
+			arg.name = arg_ptr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: security/tomoyo/condition.c:180:
+				char *cp = strchr(arg_ptr, '=');
+				if (cp) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: security/tomoyo/condition.c:240:
+	struct tomoyo_path_info exe;
+	if (!file)

WARNING:LINE_SPACING: Missing a blank line after declarations
#301: FILE: security/tomoyo/condition.c:256:
+	char *cp = NULL;
+	if (*filename == '"') {

WARNING:LINE_SPACING: Missing a blank line after declarations
#324: FILE: security/tomoyo/condition.c:279:
+	char *cp;
+	if (*start++ != '"')

WARNING:LINE_SPACING: Missing a blank line after declarations
#329: FILE: security/tomoyo/condition.c:284:
+		const char c = *cp++;
+		if (!c)

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: security/tomoyo/condition.c:310:
+	char c;
+	if (tomoyo_parse_ulong(&index, &start) != TOMOYO_VALUE_TYPE_DECIMAL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#513: FILE: security/tomoyo/condition.c:468:
+	char *start = strstr(condition, "; set ");
+	if (!start)

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: security/tomoyo/condition.c:475:
+		unsigned long value;
+		while (*start == ' ')

CHECK:SPACING: No space is necessary after a cast
#538: FILE: security/tomoyo/condition.c:493:
+		post_state[i] = (u8) value;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: security/tomoyo/condition.c:528:
+	char *end_of_string;
+	if (!tomoyo_parse_post_condition(start, post_state))

WARNING:LINE_SPACING: Missing a blank line after declarations
#588: FILE: security/tomoyo/condition.c:543:
+		bool is_not = false;
+		if (!*word)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#598: FILE: security/tomoyo/condition.c:553:
+			printk(KERN_WARNING "%u: <%s>\n", __LINE__, word);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#622: FILE: security/tomoyo/condition.c:577:
+			printk(KERN_WARNING "%u: <%s> left=%u\n", __LINE__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#632: FILE: security/tomoyo/condition.c:587:
+			printk(KERN_WARNING "%u: <%s> left=%u\n", __LINE__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#646: FILE: security/tomoyo/condition.c:601:
+			printk(KERN_WARNING "%u: <%s> right=%u\n", __LINE__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#652: FILE: security/tomoyo/condition.c:607:
+		printk(KERN_DEBUG "%u: cond=%u numbers=%u names=%u ac=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#653: FILE: security/tomoyo/condition.c:608:
+		printk(KERN_DEBUG "%u: cond=%u numbers=%u names=%u ac=%u "
+		       "ec=%u\n", __LINE__, condc, numbers_count, names_count,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#673: FILE: security/tomoyo/condition.c:628:
+	condp = (struct tomoyo_condition_element *) (entry + 1);

CHECK:SPACING: No space is necessary after a cast
#674: FILE: security/tomoyo/condition.c:629:
+	numbers_p = (struct tomoyo_number_union *) (condp + condc);

CHECK:SPACING: No space is necessary after a cast
#675: FILE: security/tomoyo/condition.c:630:
+	names_p = (struct tomoyo_name_union *) (numbers_p + numbers_count);

CHECK:SPACING: No space is necessary after a cast
#676: FILE: security/tomoyo/condition.c:631:
+	argv = (struct tomoyo_argv_entry *) (names_p + names_count);

CHECK:SPACING: No space is necessary after a cast
#677: FILE: security/tomoyo/condition.c:632:
+	envp = (struct tomoyo_envp_entry *) (argv + argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#693: FILE: security/tomoyo/condition.c:648:
+		bool is_not = false;
+		if (!*word)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#703: FILE: security/tomoyo/condition.c:658:
+			printk(KERN_WARNING "%u: <%s>\n", __LINE__, word);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#726: FILE: security/tomoyo/condition.c:681:
+				printk(KERN_WARNING "%u: No operator.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#741: FILE: security/tomoyo/condition.c:696:
+			printk(KERN_WARNING "%u: <%s> left=%u\n", __LINE__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#758: FILE: security/tomoyo/condition.c:713:
+			printk(KERN_WARNING "%u: <%s> left=%u\n", __LINE__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#785: FILE: security/tomoyo/condition.c:740:
+			printk(KERN_WARNING "%u: left=%u right=%u match=%u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#794: FILE: security/tomoyo/condition.c:749:
+		printk(KERN_DEBUG "%u: <%s> cond=%u numbers=%u names=%u ac=%u "

WARNING:SPLIT_STRING: quoted string split across lines
#795: FILE: security/tomoyo/condition.c:750:
+		printk(KERN_DEBUG "%u: <%s> cond=%u numbers=%u names=%u ac=%u "
+		       "ec=%u\n", __LINE__, condition, condc, numbers_count,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#798: FILE: security/tomoyo/condition.c:753:
+	BUG_ON(names_count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#799: FILE: security/tomoyo/condition.c:754:
+	BUG_ON(numbers_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#800: FILE: security/tomoyo/condition.c:755:
+	BUG_ON(argc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#801: FILE: security/tomoyo/condition.c:756:
+	BUG_ON(envc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#802: FILE: security/tomoyo/condition.c:757:
+	BUG_ON(condc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#831: FILE: security/tomoyo/condition.c:786:
+		printk(KERN_WARNING "%u: %s failed\n", __LINE__, __func__);

WARNING:LINE_SPACING: Missing a blank line after declarations
#960: FILE: security/tomoyo/condition.c:915:
+	const struct tomoyo_condition *cond = acl->cond;
+	if (!cond)

CHECK:SPACING: No space is necessary after a cast
#970: FILE: security/tomoyo/condition.c:925:
+	condp = (struct tomoyo_condition_element *) (cond + 1);

CHECK:SPACING: No space is necessary after a cast
#971: FILE: security/tomoyo/condition.c:926:
+	numbers_p = (const struct tomoyo_number_union *) (condp + condc);

CHECK:SPACING: No space is necessary after a cast
#974: FILE: security/tomoyo/condition.c:929:
+	argv = (const struct tomoyo_argv_entry *) (names_p +

CHECK:SPACING: No space is necessary after a cast
#976: FILE: security/tomoyo/condition.c:931:
+	envp = (const struct tomoyo_envp_entry *) (argv + argc);

WARNING:LINE_SPACING: Missing a blank line after declarations
#984: FILE: security/tomoyo/condition.c:939:
+		u8 j;
+		condp++;

WARNING:LINE_SPACING: Missing a blank line after declarations
#991: FILE: security/tomoyo/condition.c:946:
+			const struct tomoyo_name_union *ptr = names_p++;
+			switch (left) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1017: FILE: security/tomoyo/condition.c:972:
+			bool is_bitop = false;
+			switch (index) {

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#1082: FILE: security/tomoyo/condition.c:1037:
+				value = S_IRUSR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR' are not preferred. Consider using octal permissions '0200'.
#1086: FILE: security/tomoyo/condition.c:1041:
+				value = S_IWUSR;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXUSR' are not preferred. Consider using octal permissions '0100'.
#1090: FILE: security/tomoyo/condition.c:1045:
+				value = S_IXUSR;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRGRP' are not preferred. Consider using octal permissions '0040'.
#1094: FILE: security/tomoyo/condition.c:1049:
+				value = S_IRGRP;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWGRP' are not preferred. Consider using octal permissions '0020'.
#1098: FILE: security/tomoyo/condition.c:1053:
+				value = S_IWGRP;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXGRP' are not preferred. Consider using octal permissions '0010'.
#1102: FILE: security/tomoyo/condition.c:1057:
+				value = S_IXGRP;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IROTH' are not preferred. Consider using octal permissions '0004'.
#1106: FILE: security/tomoyo/condition.c:1061:
+				value = S_IROTH;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWOTH' are not preferred. Consider using octal permissions '0002'.
#1110: FILE: security/tomoyo/condition.c:1065:
+				value = S_IWOTH;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IXOTH' are not preferred. Consider using octal permissions '0001'.
#1114: FILE: security/tomoyo/condition.c:1069:
+				value = S_IXOTH;

CHECK:SPACING: No space is necessary after a cast
#1128: FILE: security/tomoyo/condition.c:1083:
+				value = (u8) (task->tomoyo_flags >> 24);

CHECK:SPACING: No space is necessary after a cast
#1131: FILE: security/tomoyo/condition.c:1086:
+				value = (u8) (task->tomoyo_flags >> 16);

CHECK:SPACING: No space is necessary after a cast
#1134: FILE: security/tomoyo/condition.c:1089:
+				value = (u8) (task->tomoyo_flags >> 8);

CHECK:SPACING: No space is necessary after a cast
#1137: FILE: security/tomoyo/condition.c:1092:
+				value = ((u8) task->tomoyo_flags)

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#1291: FILE: security/tomoyo/condition.c:1246:
+			value = value;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1305: FILE: security/tomoyo/condition.c:1260:
+			const struct tomoyo_number_union *ptr = numbers_p++;
+			left_min = ptr->values[0];

WARNING:LINE_SPACING: Missing a blank line after declarations
#1311: FILE: security/tomoyo/condition.c:1266:
+			const struct tomoyo_number_union *ptr = numbers_p++;
+			if (ptr->is_group) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 57 warnings, 14 checks, 1332 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064261.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
