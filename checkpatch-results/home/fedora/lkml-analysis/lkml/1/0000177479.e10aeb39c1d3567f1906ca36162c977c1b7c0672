WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#48: 
   http://people.redhat.com/mingo/perfcounters/perfcounters-v6-v2.6.29-rc2.patch

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#163: 
      x86: smp.h move zap_low_mappings declartion to tlbflush.h
                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#164: 
      x86: smp.h move prefill_possible_map declartion to cpu.h
                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#165: 
      x86: smp.h move stack_processor_id declartion to cpu.h
                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#166: 
      x86: smp.h move safe_smp_processor_id declartion to cpu.h
                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#167: 
      x86: smp.h move cpu_physical_id declartion to cpu.h
                                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#168: 
      x86: smp.h move boot_cpu_id declartion to cpu.h
                                  ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#171: 
      x86: smp.h move cpu_callin_mask and cpu_callin_map declartion to cpumask.h
                                                         ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#172: 
      x86: smp.h move cpu_callout_mask and cpu_callout_map declartion to cpumask.h
                                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#173: 
      x86: smp.h move cpu_initialized_mask and cpu_initialized declartion to cpumask.h
                                                               ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'declartion' may be misspelled - perhaps 'declaration'?
#174: 
      x86: smp.h move cpu_sibling_setup_mask and cpu_sibling_setup_map declartion to cpumask.h
                                                                       ^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#469: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 4)
#847: FILE: arch/mips/include/asm/irq.h:68:
 do {									\
+    if (!cpumask_test_cpu(smp_processor_id(), irq_desc[irq].affinity)) {\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: arch/mips/include/asm/irq.h:69:
+    if (!cpumask_test_cpu(smp_processor_id(), irq_desc[irq].affinity)) {\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1066: FILE: arch/powerpc/include/asm/hw_irq.h:152:
+extern void perf_counter_do_pending(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1099: FILE: arch/powerpc/include/asm/perf_counter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1284: FILE: arch/powerpc/kernel/perf_counter.c:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1313: FILE: arch/powerpc/kernel/perf_counter.c:30:
+};
+DEFINE_PER_CPU(struct cpu_hw_counters, cpu_hw_counters);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1354: FILE: arch/powerpc/kernel/perf_counter.c:71:
+		printk(KERN_ERR "oops trying to read PMC%d\n", idx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1391: FILE: arch/powerpc/kernel/perf_counter.c:108:
+		printk(KERN_ERR "oops trying to write PMC%d\n", idx);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1424: FILE: arch/powerpc/kernel/perf_counter.c:141:
+	value = mask = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1449: FILE: arch/powerpc/kernel/perf_counter.c:166:
+	value = mask = nv = 0;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1557: FILE: arch/powerpc/kernel/perf_counter.c:274:
+		mb();

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1587: FILE: arch/powerpc/kernel/perf_counter.c:304:
+	 * Just reenable the PMU with the current MMCR* settings
 	        ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1605: FILE: arch/powerpc/kernel/perf_counter.c:322:
+		printk(KERN_ERR "oops compute_mmcr failed\n");

CHECK:CAMELCASE: Avoid CamelCase: <MMCR0_PMCjCE>
#1617: FILE: arch/powerpc/kernel/perf_counter.c:334:
+	mtspr(SPRN_MMCR0, (cpuhw->mmcr[0] & ~(MMCR0_PMC1CE | MMCR0_PMCjCE))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:MEMORY_BARRIER: memory barrier without comment
#1650: FILE: arch/powerpc/kernel/perf_counter.c:367:
+	mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1697: FILE: arch/powerpc/kernel/perf_counter.c:414:
+int hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1795: FILE: arch/powerpc/kernel/perf_counter.c:512:
+				cpuhw->counter[i-1] = cpuhw->counter[i];
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1892: FILE: arch/powerpc/kernel/perf_counter.c:609:
+		u64 *p = (u64 *) &irqdata->data[irqdata->len];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2042: FILE: arch/powerpc/kernel/perf_counter.c:759:
+extern struct power_pmu power6_pmu;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2049: FILE: arch/powerpc/kernel/perf_counter.c:766:
+		printk(KERN_ERR "Couldn't init performance monitor subsystem\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2075: FILE: arch/powerpc/kernel/power6-pmu.c:1:
+/*

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2179: FILE: arch/powerpc/kernel/power6-pmu.c:105:
+			if (0x30 <= psel && psel <= 0x3d) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2325: FILE: arch/powerpc/kernel/power6-pmu.c:251:
+				((pmc > 2? pmc - 2: pmc + 2) << PM_PMC_SH);
 				         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2325: FILE: arch/powerpc/kernel/power6-pmu.c:251:
+				((pmc > 2? pmc - 2: pmc + 2) << PM_PMC_SH);
 				                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2342: FILE: arch/powerpc/kernel/power6-pmu.c:268:
+^I[PERF_COUNT_BRANCH_INSTRUCTIONS] = 0x410a0,^I/* BR_PRED */ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2364: FILE: arch/powerpc/kernel/ppc970-pmu.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2493: FILE: arch/powerpc/kernel/ppc970-pmu.c:130:
+static u64 unit_cons[PM_LASTUNIT+1][2] = {
                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2557: FILE: arch/powerpc/kernel/ppc970-pmu.c:194:
+^I^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2571: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2580: FILE: arch/powerpc/kernel/ppc970-pmu.c:217:
+	pmc_grp_use[0] = pmc_grp_use[1] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2618: FILE: arch/powerpc/kernel/ppc970-pmu.c:255:
+	ttmuse[0] = ttmuse[1] = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#2635: FILE: arch/powerpc/kernel/ppc970-pmu.c:272:
+		if (unit <= PM_STS)
[...]
+		else if (unit == PM_LSU0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#2639: FILE: arch/powerpc/kernel/ppc970-pmu.c:276:
+		else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2901: FILE: arch/x86/include/asm/apicnum.h:1:
+#ifndef _ASM_X86_APICNUM_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2923: FILE: arch/x86/include/asm/atomic_32.h:252:
+typedef struct {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2941: FILE: arch/x86/include/asm/atomic_32.h:270:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmpxchg8b', this function's name, in a string
#2943: FILE: arch/x86/include/asm/atomic_32.h:272:
+		LOCK_PREFIX "cmpxchg8b (%[ptr])\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3161: FILE: arch/x86/include/asm/bitops.h:60:
+set_bit(unsigned int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3171: FILE: arch/x86/include/asm/bitops.h:98:
+clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3181: FILE: arch/x86/include/asm/bitops.h:213:
+test_and_set_bit_lock(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3190: FILE: arch/x86/include/asm/bitops.h:309:
+static __always_inline int constant_test_bit(unsigned int nr, const volatile unsigned long *addr)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3204: FILE: arch/x86/include/asm/cpu.h:12:
+extern void prefill_possible_map(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3237: FILE: arch/x86/include/asm/cpumask.h:1:
+#ifndef _ASM_X86_CPUMASK_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3345: FILE: arch/x86/include/asm/hardirq_64.h:8:
+typedef struct {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3389: FILE: arch/x86/include/asm/hw_irq.h:33:
+extern void perf_counter_interrupt(void);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3534: FILE: arch/x86/include/asm/irq_vectors.h:124:
+	((8 * NR_CPUS) > (32 * MAX_IO_APICS) ?		\

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#3535: FILE: arch/x86/include/asm/irq_vectors.h:125:
+		(NR_VECTORS + (8 * NR_CPUS)) :		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3594: FILE: arch/x86/include/asm/mmu_context_32.h:39:
+		BUG_ON(percpu_read(cpu_tlbstate.active_mm) != next);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3637: FILE: arch/x86/include/asm/mmu_context_64.h:32:
+		BUG_ON(percpu_read(cpu_tlbstate.active_mm) != next);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#3729: FILE: arch/x86/include/asm/pda.h:10:
+#include <asm/percpu.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#3942: FILE: arch/x86/include/asm/percpu.h:27:
+#define PER_CPU(var, reg)						\
+	__percpu_mov_op %__percpu_seg:per_cpu__this_cpu_off, reg;	\
 	lea per_cpu__##var(reg), reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#3942: FILE: arch/x86/include/asm/percpu.h:27:
+#define PER_CPU(var, reg)						\
+	__percpu_mov_op %__percpu_seg:per_cpu__this_cpu_off, reg;	\
 	lea per_cpu__##var(reg), reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#3943: FILE: arch/x86/include/asm/percpu.h:28:
+	__percpu_mov_op %__percpu_seg:per_cpu__this_cpu_off, reg;	\
 	                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#3946: FILE: arch/x86/include/asm/percpu.h:30:
+#define PER_CPU_VAR(var)	%__percpu_seg:per_cpu__##var
                         	^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3946: FILE: arch/x86/include/asm/percpu.h:30:
+#define PER_CPU_VAR(var)	%__percpu_seg:per_cpu__##var

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#3950: FILE: arch/x86/include/asm/percpu.h:32:
+#define PER_CPU(var, reg)						\
+	__percpu_mov_op $per_cpu__##var, reg

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3988: FILE: arch/x86/include/asm/percpu.h:42:
+#define __percpu_arg(x)		"%%"__stringify(__percpu_seg)":%P" #x

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4001: FILE: arch/x86/include/asm/percpu.h:61:
+		asm(op "b %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4007: FILE: arch/x86/include/asm/percpu.h:66:
+		asm(op "w %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4013: FILE: arch/x86/include/asm/percpu.h:71:
+		asm(op "l %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4018: FILE: arch/x86/include/asm/percpu.h:76:
+		asm(op "q %1,"__percpu_arg(0)		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4030: FILE: arch/x86/include/asm/percpu.h:89:
+		asm(op "b "__percpu_arg(1)",%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4036: FILE: arch/x86/include/asm/percpu.h:94:
+		asm(op "w "__percpu_arg(1)",%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4042: FILE: arch/x86/include/asm/percpu.h:99:
+		asm(op "l "__percpu_arg(1)",%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4047: FILE: arch/x86/include/asm/percpu.h:104:
+		asm(op "q "__percpu_arg(1)",%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4072: FILE: arch/x86/include/asm/percpu.h:125:
+	asm volatile("btr %2,"__percpu_arg(1)"\n\tsbbl %0,%0"		\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4084: FILE: arch/x86/include/asm/percpu.h:137:
+extern void load_pda_offset(int cpu);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4113: FILE: arch/x86/include/asm/perf_counter.h:1:
+#ifndef _ASM_X86_PERF_COUNTER_H

CHECK:BIT_MACRO: Prefer using the BIT macro
#4133: FILE: arch/x86/include/asm/perf_counter.h:21:
+#define ARCH_PERFMON_EVENTSEL0_ENABLE			  (1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#4134: FILE: arch/x86/include/asm/perf_counter.h:22:
+#define ARCH_PERFMON_EVENTSEL_INT			  (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4135: FILE: arch/x86/include/asm/perf_counter.h:23:
+#define ARCH_PERFMON_EVENTSEL_OS			  (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4136: FILE: arch/x86/include/asm/perf_counter.h:24:
+#define ARCH_PERFMON_EVENTSEL_USR			  (1 << 16)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4145: FILE: arch/x86/include/asm/perf_counter.h:33:
+#define ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX ^I^I 0$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4173: FILE: arch/x86/include/asm/perf_counter.h:61:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4200: FILE: arch/x86/include/asm/perf_counter.h:88:
+extern void init_hw_perf_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4201: FILE: arch/x86/include/asm/perf_counter.h:89:
+extern void perf_counters_lapic_init(int nmi);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#4348: FILE: arch/x86/include/asm/system.h:97:
+	     "movq "__percpu_arg([current_task])",%%rsi\n\t"		  \

CHECK:BIT_MACRO: Prefer using the BIT macro
#4377: FILE: arch/x86/include/asm/thread_info.h:108:
+#define _TIF_PERF_COUNTERS	(1 << TIF_PERF_COUNTERS)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4386: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4386: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4386: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                                   ^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/percpu.h> instead of <asm/percpu.h>
#4395: FILE: arch/x86/include/asm/thread_info.h:199:
+#include <asm/percpu.h>

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4396: FILE: arch/x86/include/asm/thread_info.h:200:
+#define KERNEL_STACK_OFFSET (5*8)
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4428: FILE: arch/x86/include/asm/thread_info.h:221:
+	movq PER_CPU_VAR(kernel_stack),reg ; \
 	                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4429: FILE: arch/x86/include/asm/thread_info.h:222:
+	subq $(THREAD_SIZE-KERNEL_STACK_OFFSET),reg
 	                  ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4429: FILE: arch/x86/include/asm/thread_info.h:222:
+	subq $(THREAD_SIZE-KERNEL_STACK_OFFSET),reg
 	                                       ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4487: FILE: arch/x86/include/asm/tlbflush.h:175:
+extern void zap_low_mappings(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4563: FILE: arch/x86/include/asm/uv/uv_bau.h:328:
+extern int uv_flush_tlb_others(struct cpumask *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpumask *' should also have an identifier name
#4563: FILE: arch/x86/include/asm/uv/uv_bau.h:328:
+extern int uv_flush_tlb_others(struct cpumask *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#4563: FILE: arch/x86/include/asm/uv/uv_bau.h:328:
+extern int uv_flush_tlb_others(struct cpumask *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4563: FILE: arch/x86/include/asm/uv/uv_bau.h:328:
+extern int uv_flush_tlb_others(struct cpumask *,

WARNING:LINE_SPACING: Missing a blank line after declarations
#4579: FILE: arch/x86/kernel/acpi/boot.c:916:
+		struct mpc_ioapic *ia = &mp_ioapics[i];
+		__set_bit(ia->apicid, used);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4617: FILE: arch/x86/kernel/acpi/boot.c:968:
+	printk(KERN_INFO "IOAPIC[%d]: apic_id %d, version %d, address 0x%x, "

WARNING:SPLIT_STRING: quoted string split across lines
#4618: FILE: arch/x86/kernel/acpi/boot.c:969:
+	printk(KERN_INFO "IOAPIC[%d]: apic_id %d, version %d, address 0x%x, "
+	       "GSI %d-%d\n", idx, mp_ioapics[idx].apicid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4628: FILE: arch/x86/kernel/acpi/boot.c:977:
+static void assign_to_mp_irq(struct mpc_intsrc *m,
+				    struct mpc_intsrc *mp_irq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4637: FILE: arch/x86/kernel/acpi/boot.c:983:
+static int mp_irq_cmp(struct mpc_intsrc *mp_irq,
+				struct mpc_intsrc *m)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5070: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:135:
+	DECLARE_BITMAP(shared_cpu_map, NR_CPUS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5146: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:520:
+				cpumask_set_cpu(i,
+					to_cpumask(this_leaf->shared_cpu_map));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5152: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:524:
+					cpumask_set_cpu(cpu, to_cpumask(

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#5206: FILE: arch/x86/kernel/cpu/intel_cacheinfo.c:891:
+static DECLARE_BITMAP(cache_dev_map, NR_CPUS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5325: FILE: arch/x86/kernel/cpu/perf_counter.c:1:
+/*

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#5368: FILE: arch/x86/kernel/cpu/perf_counter.c:44:
+static const int intel_perfmon_event_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5369: FILE: arch/x86/kernel/cpu/perf_counter.c:45:
+  [PERF_COUNT_CPU_CYCLES]^I^I= 0x003c,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5370: FILE: arch/x86/kernel/cpu/perf_counter.c:46:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5371: FILE: arch/x86/kernel/cpu/perf_counter.c:47:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x4f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5372: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x412e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5373: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5374: FILE: arch/x86/kernel/cpu/perf_counter.c:50:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5375: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+  [PERF_COUNT_BUS_CYCLES]^I^I= 0x013c,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5403: FILE: arch/x86/kernel/cpu/perf_counter.c:79:
+	if (atomic64_cmpxchg(&hwc->prev_count, prev_raw_count,
+					new_raw_count) != prev_raw_count)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5517: FILE: arch/x86/kernel/cpu/perf_counter.c:193:
+__pmc_generic_disable(struct perf_counter *counter,
+			   struct hw_perf_counter *hwc, unsigned int idx)

WARNING:TYPO_SPELLING: 'reasoable' may be misspelled - perhaps 'reasonable'?
#5540: FILE: arch/x86/kernel/cpu/perf_counter.c:216:
+	 * If we are way outside a reasoable range then just skip forward:
 	                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5561: FILE: arch/x86/kernel/cpu/perf_counter.c:237:
+	err = checking_wrmsrl(hwc->counter_base + idx,
+			     (u64)(-left) & counter_value_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5590: FILE: arch/x86/kernel/cpu/perf_counter.c:266:
+__pmc_generic_enable(struct perf_counter *counter,
+			  struct hw_perf_counter *hwc, int idx)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5696: FILE: arch/x86/kernel/cpu/perf_counter.c:372:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5697: FILE: arch/x86/kernel/cpu/perf_counter.c:373:
+	printk(KERN_INFO "CPU#%d: ctrl:       %016llx\n", cpu, ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5698: FILE: arch/x86/kernel/cpu/perf_counter.c:374:
+	printk(KERN_INFO "CPU#%d: status:     %016llx\n", cpu, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5699: FILE: arch/x86/kernel/cpu/perf_counter.c:375:
+	printk(KERN_INFO "CPU#%d: overflow:   %016llx\n", cpu, overflow);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5700: FILE: arch/x86/kernel/cpu/perf_counter.c:376:
+	printk(KERN_INFO "CPU#%d: fixed:      %016llx\n", cpu, fixed);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5701: FILE: arch/x86/kernel/cpu/perf_counter.c:377:
+	printk(KERN_INFO "CPU#%d: used:       %016llx\n", cpu, *(u64 *)cpuc->used);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5709: FILE: arch/x86/kernel/cpu/perf_counter.c:385:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d ctrl:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5710: FILE: arch/x86/kernel/cpu/perf_counter.c:386:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d ctrl:  %016llx\n",
+			cpu, idx, pmc_ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5711: FILE: arch/x86/kernel/cpu/perf_counter.c:387:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d count: %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5712: FILE: arch/x86/kernel/cpu/perf_counter.c:388:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d count: %016llx\n",
+			cpu, idx, pmc_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5713: FILE: arch/x86/kernel/cpu/perf_counter.c:389:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d left:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5714: FILE: arch/x86/kernel/cpu/perf_counter.c:390:
+		printk(KERN_INFO "CPU#%d:   gen-PMC%d left:  %016llx\n",
+			cpu, idx, prev_left);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5719: FILE: arch/x86/kernel/cpu/perf_counter.c:395:
+		printk(KERN_INFO "CPU#%d: fixed-PMC%d count: %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5720: FILE: arch/x86/kernel/cpu/perf_counter.c:396:
+		printk(KERN_INFO "CPU#%d: fixed-PMC%d count: %016llx\n",
+			cpu, idx, pmc_count);

CHECK:SPACING: No space is necessary after a cast
#5755: FILE: arch/x86/kernel/cpu/perf_counter.c:431:
+		u64 *p = (u64 *) &irqdata->data[irqdata->len];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5787: FILE: arch/x86/kernel/cpu/perf_counter.c:463:
+	list_for_each_entry(counter, &group_leader->sibling_list, list_entry) {
+

CHECK:SPACING: No space is necessary after a cast
#5821: FILE: arch/x86/kernel/cpu/perf_counter.c:497:
+		clear_bit(bit, (unsigned long *) &status);

WARNING:TYPO_SPELLING: 'initate' may be misspelled - perhaps 'initiate'?
#5840: FILE: arch/x86/kernel/cpu/perf_counter.c:516:
+		 * wakeup_pending and initate a wakeup callback:
 		                      ^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#5860: FILE: arch/x86/kernel/cpu/perf_counter.c:536:
+	 * Restore - do not reenable when global enable is off:
 	                    ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5962: FILE: arch/x86/kernel/cpu/perf_counter.c:638:
+	printk(KERN_INFO "Intel Performance Monitoring support detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5964: FILE: arch/x86/kernel/cpu/perf_counter.c:640:
+	printk(KERN_INFO "... version:         %d\n", eax.split.version_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5965: FILE: arch/x86/kernel/cpu/perf_counter.c:641:
+	printk(KERN_INFO "... num counters:    %d\n", eax.split.num_counters);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#5969: FILE: arch/x86/kernel/cpu/perf_counter.c:645:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5970: FILE: arch/x86/kernel/cpu/perf_counter.c:646:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",
+			nr_counters_generic, X86_PMC_MAX_GENERIC);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5975: FILE: arch/x86/kernel/cpu/perf_counter.c:651:
+	printk(KERN_INFO "... bit width:       %d\n", eax.split.bit_width);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5977: FILE: arch/x86/kernel/cpu/perf_counter.c:653:
+	printk(KERN_INFO "... value mask:      %016Lx\n", counter_value_mask);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5977: FILE: arch/x86/kernel/cpu/perf_counter.c:653:
+	printk(KERN_INFO "... value mask:      %016Lx\n", counter_value_mask);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5979: FILE: arch/x86/kernel/cpu/perf_counter.c:655:
+	printk(KERN_INFO "... mask length:     %d\n", eax.split.mask_length);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#5984: FILE: arch/x86/kernel/cpu/perf_counter.c:660:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5985: FILE: arch/x86/kernel/cpu/perf_counter.c:661:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",
+			nr_counters_fixed, X86_PMC_MAX_FIXED);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5987: FILE: arch/x86/kernel/cpu/perf_counter.c:663:
+	printk(KERN_INFO "... fixed counters:  %d\n", nr_counters_fixed);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5989: FILE: arch/x86/kernel/cpu/perf_counter.c:665:
+	perf_counter_mask |= ((1LL << nr_counters_fixed)-1) << X86_PMC_IDX_FIXED;
 	                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#5991: FILE: arch/x86/kernel/cpu/perf_counter.c:667:
+	printk(KERN_INFO "... counter mask:    %016Lx\n", perf_counter_mask);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5991: FILE: arch/x86/kernel/cpu/perf_counter.c:667:
+	printk(KERN_INFO "... counter mask:    %016Lx\n", perf_counter_mask);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6070: FILE: arch/x86/kernel/dumpstack_64.c:166:
+			unsigned long *irq_stack;
+			irq_stack = irq_stack_end -

CHECK:SPACING: No space is necessary after a cast
#6087: FILE: arch/x86/kernel/dumpstack_64.c:179:
+				stack = (unsigned long *) (irq_stack_end[-1]);

CHECK:SPACING: No space is necessary after a cast
#6116: FILE: arch/x86/kernel/dumpstack_64.c:224:
+				stack = (unsigned long *) (irq_stack_end[-1]);

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#6240: FILE: arch/x86/kernel/entry_64.S:1082:
+	subq $EXCEPTION_STKSZ, TSS_ist + (\ist - 1) * 8(%rbp)
 	                                   ^^^

WARNING:TYPO_SPELLING: 'ist' may be misspelled - perhaps 'is'?
#6243: FILE: arch/x86/kernel/entry_64.S:1084:
+	addq $EXCEPTION_STKSZ, TSS_ist + (\ist - 1) * 8(%rbp)
 	                                   ^^^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#6591: FILE: arch/x86/kernel/io_apic.c:1140:
+	switch ((mp_irqs[idx].irqflag>>2) & 3)
 	                             ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#6662: FILE: arch/x86/kernel/io_apic.c:1721:
+	printk(KERN_DEBUG "IO APIC #%d......\n", mp_ioapics[apic].apicid);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#6726: FILE: arch/x86/kernel/io_apic.c:2169:
+					mp_irqs[i].dstapic
+						= mp_ioapics[apic].apicid;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#6914: FILE: arch/x86/kernel/irq.c:56:
+	seq_printf(p, "CNT: ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#6917: FILE: arch/x86/kernel/irq.c:59:
+	seq_printf(p, "  Performance counter interrupts\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7048: FILE: arch/x86/kernel/module_32.c:45:
+	   table entries. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7085: FILE: arch/x86/kernel/module_64.c:40:
+	   table entries. */

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#7105: FILE: arch/x86/kernel/module_64.c:94:
+		DEBUGP("type %d st_value %Lx r_addend %Lx loc %Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7106: FILE: arch/x86/kernel/module_64.c:95:
+		DEBUGP("type %d st_value %Lx r_addend %Lx loc %Lx\n",
+			(int)ELF64_R_TYPE(rel[i].r_info),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7130: FILE: arch/x86/kernel/module_64.c:125:
+			printk(KERN_ERR "module %s: Unknown rela relocation: %llu\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7139: FILE: arch/x86/kernel/module_64.c:133:
+	printk(KERN_ERR "overflow in relocation type %d val %Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#7139: FILE: arch/x86/kernel/module_64.c:133:
+	printk(KERN_ERR "overflow in relocation type %d val %Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7148: FILE: arch/x86/kernel/module_64.c:146:
+	printk(KERN_ERR "non add relocation not supported\n");

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#7156: FILE: arch/x86/kernel/module_64.c:151:
+		    const Elf_Shdr *sechdrs,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#7364: FILE: arch/x86/kernel/mpparse.c:703:
+		    ((mpf->specification == 1)
+		     || (mpf->specification == 4))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7393: FILE: arch/x86/kernel/mpparse.c:733:
+				reserve_bootmem_generic(mpf->physptr, size,
 						BOOTMEM_DEFAULT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7458: FILE: arch/x86/kernel/mpparse.c:1029:
+	printk(KERN_INFO "physptr: %x\n", mpf->physptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#7489: FILE: arch/x86/kernel/mpparse.c:1066:
+		printk(KERN_INFO "physptr new: %x\n", mpf->physptr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7617: FILE: arch/x86/kernel/process_64.c:627:
+	percpu_write(kernel_stack,
 		  (unsigned long)task_stack_page(next_p) +

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#7660: FILE: arch/x86/kernel/setup_percpu.c:20:
+# define DBG(x...) printk(KERN_DEBUG x)

WARNING:MEMORY_BARRIER: memory barrier without comment
#7736: FILE: arch/x86/kernel/setup_percpu.c:96:
+	mb();

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#7738: FILE: arch/x86/kernel/setup_percpu.c:98:
+}
+#ifndef CONFIG_SMP

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#7923: FILE: arch/x86/kernel/setup_percpu.c:280:
+		printk(KERN_ERR "numa_set_node: invalid cpu# (%d)\n", cpu);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'numa_set_node', this function's name, in a string
#7923: FILE: arch/x86/kernel/setup_percpu.c:280:
+		printk(KERN_ERR "numa_set_node: invalid cpu# (%d)\n", cpu);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#8152: FILE: arch/x86/kernel/tlb_32.c:8:
+DEFINE_PER_CPU_SHARED_ALIGNED(struct tlb_state, cpu_tlbstate)
+			= { &init_mm, 0, };

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8171: FILE: arch/x86/kernel/tlb_32.c:37:
+	BUG_ON(percpu_read(cpu_tlbstate.state) == TLBSTATE_OK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8223: FILE: arch/x86/kernel/tlb_32.c:130:
+	BUG_ON(cpumask_empty(cpumask));

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#8364: FILE: arch/x86/kernel/tlb_64.c:22:
+DEFINE_PER_CPU_SHARED_ALIGNED(struct tlb_state, cpu_tlbstate)
+			= { &init_mm, 0, };

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#8377: FILE: arch/x86/kernel/tlb_64.c:52:
+		DECLARE_BITMAP(flush_cpumask, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#8845: FILE: arch/x86/xen/enlighten.c:642:
+		DECLARE_BITMAP(mask, NR_CPUS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#8858: FILE: arch/x86/xen/enlighten.c:646:
+	BUG_ON(cpumask_empty(cpus));

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#9279: FILE: drivers/base/topology.c:34:
+#define define_one_ro_named(_name, _func)				\
+static SYSDEV_ATTR(_name, 0444, _func, NULL)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#9282: FILE: drivers/base/topology.c:37:
+#define define_one_ro(_name)				\
 static SYSDEV_ATTR(_name, 0444, show_##_name, NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#9442: FILE: drivers/net/sfc/efx.c:862:
+		printk(KERN_WARNING

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#9597: FILE: drivers/xen/events.c:79:
 };
+struct cpu_evtchn_s {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#9598: FILE: drivers/xen/events.c:80:
+	unsigned long bits[NR_EVENT_CHANNELS/BITS_PER_LONG];
 	                                    ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#9600: FILE: drivers/xen/events.c:82:
+};
+static struct cpu_evtchn_s *cpu_evtchn_mask_p;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9654: FILE: drivers/xen/events.c:836:
+	BUG_ON(cpu_evtchn_mask_p == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_evtchn_mask_p"
#9654: FILE: drivers/xen/events.c:836:
+	BUG_ON(cpu_evtchn_mask_p == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#9779: FILE: include/asm-generic/percpu.h:96:
+# define percpu_read(var)						\
+  ({									\
+	typeof(per_cpu_var(var)) __tmp_var__;				\
+	__tmp_var__ = get_cpu_var(var);					\
+	put_cpu_var(var);						\
+	__tmp_var__;							\
+  })

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#9780: FILE: include/asm-generic/percpu.h:97:
+  ({^I^I^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#9785: FILE: include/asm-generic/percpu.h:102:
+  })$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#9788: FILE: include/asm-generic/percpu.h:105:
+#define __percpu_generic_to_op(var, val, op)				\
+do {									\
+	get_cpu_var(var) op val;					\
+	put_cpu_var(var);						\
+} while (0)

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#9885: FILE: include/asm-generic/vmlinux.lds.h:474:
+		*(.data.percpu.shared_aligned)				\
 		^

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#9886: FILE: include/asm-generic/vmlinux.lds.h:475:
+		*(.data.percpu.page_aligned)				\
 		^

WARNING:TYPO_SPELLING: 'slighly' may be misspelled - perhaps 'slightly'?
#9896: FILE: include/asm-generic/vmlinux.lds.h:485:
+ * using slighly different layout.
          ^^^^^^^

WARNING:TYPO_SPELLING: 'maniuplate' may be misspelled - perhaps 'manipulate'?
#9912: FILE: include/asm-generic/vmlinux.lds.h:499:
+ * macro doesn't maniuplate @vaddr or @phdr and __per_cpu_load and
                  ^^^^^^^^^^

ERROR:SPACING: space prohibited after that open parenthesis '('
#9917: FILE: include/asm-generic/vmlinux.lds.h:504:
+	PERCPU_VADDR( , )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#9917: FILE: include/asm-generic/vmlinux.lds.h:504:
+	PERCPU_VADDR( , )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#9927: FILE: include/linux/init_task.h:119:
+# define INIT_PERF_COUNTERS(tsk)					\
+	.perf_counter_ctx.counter_list =				\
+		LIST_HEAD_INIT(tsk.perf_counter_ctx.counter_list),	\
+	.perf_counter_ctx.lock =					\
+		__SPIN_LOCK_UNLOCKED(tsk.perf_counter_ctx.lock),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9955: FILE: include/linux/interrupt.h:470:
+extern int arch_probe_nr_irqs(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9994: FILE: include/linux/irq.h:437:
+static inline bool init_alloc_desc_masks(struct irq_desc *desc, int cpu,
+								bool boot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10050: FILE: include/linux/irq.h:493:
+static inline bool init_alloc_desc_masks(struct irq_desc *desc, int cpu,
+								bool boot)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10083: FILE: include/linux/kernel_stat.h:81:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10087: FILE: include/linux/kernel_stat.h:85:
+extern void curr_rq_lock_irq_save(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10088: FILE: include/linux/kernel_stat.h:86:
+extern void curr_rq_unlock_irq_restore(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10089: FILE: include/linux/kernel_stat.h:87:
+extern unsigned long long __task_delta_exec(struct task_struct *tsk, int update);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10101: FILE: include/linux/perf_counter.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#10116: FILE: include/linux/perf_counter.h:16:
+#include <asm/atomic.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#10245: FILE: include/linux/perf_counter.h:145:
+	int (*enable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#10246: FILE: include/linux/perf_counter.h:146:
+	void (*disable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#10247: FILE: include/linux/perf_counter.h:147:
+	void (*read)			(struct perf_counter *counter);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#10280: FILE: include/linux/perf_counter.h:180:
+	struct file			*filp;
 	           			 ^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10350: FILE: include/linux/perf_counter.h:250:
+extern void perf_counter_task_sched_in(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10351: FILE: include/linux/perf_counter.h:251:
+extern void perf_counter_task_sched_out(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10352: FILE: include/linux/perf_counter.h:252:
+extern void perf_counter_task_tick(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10353: FILE: include/linux/perf_counter.h:253:
+extern void perf_counter_init_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10354: FILE: include/linux/perf_counter.h:254:
+extern void perf_counter_exit_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10355: FILE: include/linux/perf_counter.h:255:
+extern void perf_counter_notify(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10356: FILE: include/linux/perf_counter.h:256:
+extern void perf_counter_print_debug(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10357: FILE: include/linux/perf_counter.h:257:
+extern u64 hw_perf_save_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10358: FILE: include/linux/perf_counter.h:258:
+extern void hw_perf_restore(u64 ctrl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10359: FILE: include/linux/perf_counter.h:259:
+extern int perf_counter_task_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10360: FILE: include/linux/perf_counter.h:260:
+extern int perf_counter_task_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10361: FILE: include/linux/perf_counter.h:261:
+extern int hw_perf_group_sched_in(struct perf_counter *group_leader,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10362: FILE: include/linux/perf_counter.h:262:
+extern int hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#10447: FILE: include/linux/sched.h:2331:
+extern void task_oncpu_function_call(struct task_struct *p,

WARNING:SPACING: Unnecessary space before function pointer arguments
#10448: FILE: include/linux/sched.h:2332:
+				     void (*func) (void *info), void *info);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10450: FILE: include/linux/sched.h:2334:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#10470: FILE: include/linux/syscalls.h:693:
 
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#10471: FILE: include/linux/syscalls.h:694:
+asmlinkage int sys_perf_counter_open(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10648: FILE: kernel/irq/handle.c:104:
+		printk(KERN_ERR "can not alloc irq_desc cpumasks\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#10649: FILE: kernel/irq/handle.c:105:
+		BUG_ON(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10685: FILE: kernel/irq/handle.c:138:
+	printk(KERN_INFO "NR_IRQS:%d nr_irqs:%d\n", NR_IRQS, nr_irqs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10735: FILE: kernel/irq/handle.c:181:
+		WARN(1, "irq (%d) >= nr_irqs (%d) in irq_to_desc_alloc\n",
+			irq, nr_irqs);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#10753: FILE: kernel/irq/handle.c:232:
+	printk(KERN_INFO "NR_IRQS:%d\n", NR_IRQS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10870: FILE: kernel/irq/numa_migrate.c:42:
+static bool init_copy_one_irq_desc(int irq, struct irq_desc *old_desc,
 		 struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10874: FILE: kernel/irq/numa_migrate.c:46:
+		printk(KERN_ERR "irq %d: can not get new irq_desc cpumask "

WARNING:SPLIT_STRING: quoted string split across lines
#10875: FILE: kernel/irq/numa_migrate.c:47:
+		printk(KERN_ERR "irq %d: can not get new irq_desc cpumask "
+				"for migration.\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#10893: FILE: kernel/irq/numa_migrate.c:86:
+		printk(KERN_ERR "irq %d: can not get new irq_desc "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#10893: FILE: kernel/irq/numa_migrate.c:86:
 	if (!desc) {
+		printk(KERN_ERR "irq %d: can not get new irq_desc "

WARNING:SPLIT_STRING: quoted string split across lines
#10894: FILE: kernel/irq/numa_migrate.c:87:
+		printk(KERN_ERR "irq %d: can not get new irq_desc "
+				"for migration.\n", irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10933: FILE: kernel/perf_counter.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10983: FILE: kernel/perf_counter.c:51:
+int __weak hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#11021: FILE: kernel/perf_counter.c:89:
+				 &counter->sibling_list, list_entry) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11121: FILE: kernel/perf_counter.c:189:
+
+

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#11138: FILE: kernel/perf_counter.c:206:
+		 * the removal is always sucessful.
 		                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#11441: FILE: kernel/perf_counter.c:509:
+		 * the install is always sucessful.
 		                         ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#11967: FILE: kernel/perf_counter.c:1035:
+			(unsigned long) counter->usrdata);

CHECK:SPACING: No space is necessary after a cast
#12112: FILE: kernel/perf_counter.c:1180:
+	return put_user(cntval, (u64 __user *) buf) ? -EFAULT : sizeof(cntval);

WARNING:MINMAX: min() should probably be min_t(size_t, count, usrdata->len)
#12121: FILE: kernel/perf_counter.c:1189:
+	count = min(count, (size_t)usrdata->len);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12654: FILE: kernel/perf_counter.c:1722:
+	counter->filp = counter_file;
 	         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12694: FILE: kernel/perf_counter.c:1762:
+inherit_counter(struct perf_counter *parent_counter,
+	      struct task_struct *parent,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12705: FILE: kernel/perf_counter.c:1773:
+	 * which has a filp for sure, which we use as the reference
 	               ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12712: FILE: kernel/perf_counter.c:1780:
+	child_counter = perf_counter_alloc(&parent_counter->hw_event,
+					    parent_counter->cpu, group_leader,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12732: FILE: kernel/perf_counter.c:1800:
+	 * Get a reference to the parent filp - we will fput it
 	                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12734: FILE: kernel/perf_counter.c:1802:
+	 * we are in the parent and we know that the filp still
 	                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12761: FILE: kernel/perf_counter.c:1829:
+static int inherit_group(struct perf_counter *parent_counter,
+	      struct task_struct *parent,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12805: FILE: kernel/perf_counter.c:1873:
+	fput(parent_counter->filp);
 	                     ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#12961: FILE: kernel/perf_counter.c:2029:
+}
+static void perf_counter_exit_cpu(int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#12980: FILE: kernel/perf_counter.c:2048:
+	switch (action) {
+

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after perf_cpu_nb
#12998: FILE: kernel/perf_counter.c:2066:
+static struct notifier_block __cpuinitdata perf_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#13026: FILE: kernel/perf_counter.c:2094:
+	err = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#13058: FILE: kernel/perf_counter.c:2126:
+	err = strict_strtoul(buf, 10, &val);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#13071: FILE: kernel/perf_counter.c:2139:
+static SYSDEV_CLASS_ATTR(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#13078: FILE: kernel/perf_counter.c:2146:
+static SYSDEV_CLASS_ATTR(

WARNING:SPACING: Unnecessary space before function pointer arguments
#13173: FILE: kernel/sched.c:2277:
+			      void (*func) (void *info), void *info)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177479.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 142 warnings, 131 checks, 11693 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177479.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
