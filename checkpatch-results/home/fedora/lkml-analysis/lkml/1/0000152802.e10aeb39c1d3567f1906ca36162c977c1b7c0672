WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#73: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: arch/microblaze/include/asm/mmu.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:NEW_TYPEDEFS: do not add new typedefs
#90: FILE: arch/microblaze/include/asm/mmu.h:13:
+typedef struct {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: arch/microblaze/include/asm/mmu_context.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#130: FILE: arch/microblaze/include/asm/tlb.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#152: FILE: arch/microblaze/include/asm/tlbflush.h:1:
+/*

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#163: FILE: arch/microblaze/include/asm/tlbflush.h:12:
+#define flush_tlb()				BUG()

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#164: FILE: arch/microblaze/include/asm/tlbflush.h:13:
+#define flush_tlb_all()				BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#165: FILE: arch/microblaze/include/asm/tlbflush.h:14:
+#define flush_tlb_mm(mm)			BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#166: FILE: arch/microblaze/include/asm/tlbflush.h:15:
+#define flush_tlb_page(vma, addr)		BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#167: FILE: arch/microblaze/include/asm/tlbflush.h:16:
+#define flush_tlb_range(mm, start, end)		BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#168: FILE: arch/microblaze/include/asm/tlbflush.h:17:
+#define flush_tlb_pgtables(mm, start, end)	BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#169: FILE: arch/microblaze/include/asm/tlbflush.h:18:
+#define flush_tlb_kernel_range(start, end)	BUG()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#178: FILE: arch/microblaze/mm/init.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#198: FILE: arch/microblaze/mm/init.c:21:
+#include <asm/mmu_context.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:SPACING: No space is necessary after a cast
#245: FILE: arch/microblaze/mm/init.c:68:
+		memory_start = (u32) lmb.memory.region[i].base;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#246: FILE: arch/microblaze/mm/init.c:69:
+		memory_end = (u32) lmb.memory.region[i].base + (u32) lmb.memory.region[i].size;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'memory_start <= (u32)_text'
#247: FILE: arch/microblaze/mm/init.c:70:
+		if ((memory_start <= (u32)_text) && ((u32)_text <= memory_end)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#250: FILE: arch/microblaze/mm/init.c:73:
+			printk("%s: Main mem: 0x%x-0x%x, size 0x%08x\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: arch/microblaze/mm/init.c:74:
+			printk("%s: Main mem: 0x%x-0x%x, size 0x%08x\n", __func__,
+				memory_start, memory_end, memory_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: arch/microblaze/mm/init.c:81:
+		panic("%s: Missing memory setting 0x%08x-0x%08x\n",
+			__func__, memory_start, memory_end);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#266: FILE: arch/microblaze/mm/init.c:89:
+	printk("%s: kernel addr=0x%08x-0x%08x size=0x%08x\n", __func__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: arch/microblaze/mm/init.c:90:
+	printk("%s: kernel addr=0x%08x-0x%08x size=0x%08x\n", __func__,
+		kernel_align_start, kernel_align_start + kernel_align_size,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#283: FILE: arch/microblaze/mm/init.c:106:
+	num_physpages = max_mapnr = memory_size >> PAGE_SHIFT; /* RAM is assumed contiguous */

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#284: FILE: arch/microblaze/mm/init.c:107:
+	max_pfn = max_low_pfn = memory_end >> PAGE_SHIFT;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#286: FILE: arch/microblaze/mm/init.c:109:
+	printk(KERN_INFO "%s: max_mapnr: %#lx\n", __func__, max_mapnr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#287: FILE: arch/microblaze/mm/init.c:110:
+	printk(KERN_INFO "%s: min_low_pfn: %#lx\n", __func__, min_low_pfn);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#288: FILE: arch/microblaze/mm/init.c:111:
+	printk(KERN_INFO "%s: max_low_pfn: %#lx\n", __func__, max_low_pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: arch/microblaze/mm/init.c:121:
+	map_size = init_bootmem_node(NODE_DATA(0), PFN_UP(TOPHYS((u32)_end)),
+					min_low_pfn, max_low_pfn);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: arch/microblaze/mm/init.c:131:
+		pr_debug("reserved %d - 0x%08x-0x%08x\n", i,
+			(u32) lmb.reserved.region[i].base,

CHECK:SPACING: No space is necessary after a cast
#308: FILE: arch/microblaze/mm/init.c:131:
+			(u32) lmb.reserved.region[i].base,

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/microblaze/mm/init.c:132:
+			(u32) lmb_size_bytes(&lmb.reserved, i));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: arch/microblaze/mm/init.c:134:
+		reserve_bootmem(lmb.reserved.region[i].base,
+			lmb_size_bytes(&lmb.reserved, i) - 1, BOOTMEM_DEFAULT);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#327: FILE: arch/microblaze/mm/init.c:150:
+	printk(KERN_INFO "Freeing %s: %ldk freed\n", what, (end - begin) >> 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: arch/microblaze/mm/init.c:157:
+	int pages = 0;
+	for (; start < end; start += PAGE_SIZE) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#341: FILE: arch/microblaze/mm/init.c:164:
+	printk(KERN_NOTICE "Freeing initrd memory: %dk freed\n", pages);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#355: FILE: arch/microblaze/mm/init.c:178:
+	printk(KERN_NOTICE "%s\n", __func__);

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#355: FILE: arch/microblaze/mm/init.c:178:
+	printk(KERN_NOTICE "%s\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#364: FILE: arch/microblaze/mm/init.c:187:
+	printk(KERN_INFO "Memory: %luk/%luk available\n",

CHECK:SPACING: No space is necessary after a cast
#365: FILE: arch/microblaze/mm/init.c:188:
+	       (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#365: FILE: arch/microblaze/mm/init.c:188:
+	       (unsigned long) nr_free_pages() << (PAGE_SHIFT-10),
 	                                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#366: FILE: arch/microblaze/mm/init.c:189:
+	       num_physpages << (PAGE_SHIFT-10));
 	                                   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 17 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152802.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
