ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#54: FILE: GNUmakefile:0:
CC = gcc

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#92: FILE: linux/cramfs_fs.h:91:
+                               | CRAMFS_FLAG_SHIFTED_ROOT_OFFSET \ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: linux/cramfs_fs.h:91:
+                               | CRAMFS_FLAG_SHIFTED_ROOT_OFFSET \ $

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: linux/cramfs_fs.h:91:
+                               | CRAMFS_FLAG_SHIFTED_ROOT_OFFSET \ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: linux/cramfs_fs.h:92:
+                               | CRAMFS_FLAG_LZO_COMPRESSION )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: linux/cramfs_fs.h:92:
+                               | CRAMFS_FLAG_LZO_COMPRESSION )$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#93: FILE: linux/cramfs_fs.h:92:
+                               | CRAMFS_FLAG_LZO_COMPRESSION )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer name
#96: FILE: linux/cramfs_fs.h:95:
+int (* cramfs_uncompress_block) ();

WARNING:SPACING: Unnecessary space before function pointer arguments
#96: FILE: linux/cramfs_fs.h:95:
+int (* cramfs_uncompress_block) ();

ERROR:SPACING: space prohibited after that '*' (ctx:BxW)
#96: FILE: linux/cramfs_fs.h:95:
+int (* cramfs_uncompress_block) ();
      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#115: FILE: lzo_compress.c:1:
+#include <stdio.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#120: FILE: lzo_compress.c:6:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#122: FILE: lzo_compress.c:8:
+extern void *lzo_compress_buf;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#123: FILE: lzo_compress.c:9:
+extern int page_size;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#125: FILE: lzo_compress.c:11:
+int cramfs_lzo_cmpr(unsigned char *data_in, unsigned char *cpage_out, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: lzo_compress.c:12:
+                         uint32_t sourcelen, uint32_t *dstlen)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: lzo_compress.c:12:
+int cramfs_lzo_cmpr(unsigned char *data_in, unsigned char *cpage_out, 
+                         uint32_t sourcelen, uint32_t *dstlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: lzo_compress.c:12:
+                         uint32_t sourcelen, uint32_t *dstlen)$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#126: FILE: lzo_compress.c:12:
+                         uint32_t sourcelen, uint32_t *dstlen)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: lzo_compress.c:14:
+       uint32_t compress_size;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#128: FILE: lzo_compress.c:14:
+       uint32_t compress_size;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#129: FILE: lzo_compress.c:15:
+       int ret;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#131: FILE: lzo_compress.c:17:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: lzo_compress.c:18:
+       ret = lzo1x_999_compress(data_in, sourcelen, (void$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: lzo_compress.c:20:
+       if (ret != LZO_E_OK || compress_size > *dstlen )$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#135: FILE: lzo_compress.c:20:
+       if (ret != LZO_E_OK || compress_size > *dstlen )
+               return -1;

ERROR:SPACING: space prohibited before that close parenthesis ')'
#135: FILE: lzo_compress.c:20:
+       if (ret != LZO_E_OK || compress_size > *dstlen )

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: lzo_compress.c:21:
+               return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: lzo_compress.c:21:
+               return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: lzo_compress.c:23:
+       memcpy(cpage_out, (void *)lzo_compress_buf, compress_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: lzo_compress.c:24:
+       *dstlen = compress_size;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#141: FILE: lzo_compress.c:26:
+       return 0; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#141: FILE: lzo_compress.c:26:
+       return 0; $

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#143: FILE: lzo_compress.c:28:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: lzo_compress.c:32:
+       lzo_mem = malloc(LZO1X_999_MEM_COMPRESS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: lzo_compress.c:33:
+       if (!lzo_mem)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#148: FILE: lzo_compress.c:33:
+       if (!lzo_mem)
+               return -1;

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: lzo_compress.c:34:
+               return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: lzo_compress.c:34:
+               return -1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#151: FILE: lzo_compress.c:36:
+       /* Worst case LZO compression size from their FAQ */ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: lzo_compress.c:38:
+       lzo_compress_buf = malloc(page_size + (page_size / 64) + 16 +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: lzo_compress.c:39:
+       if (!lzo_compress_buf) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#155: FILE: lzo_compress.c:39:
+       if (!lzo_compress_buf) {
+               free(lzo_mem);

ERROR:CODE_INDENT: code indent should use tabs where possible
#156: FILE: lzo_compress.c:40:
+               free(lzo_mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#156: FILE: lzo_compress.c:40:
+               free(lzo_mem);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#157: FILE: lzo_compress.c:41:
+               lzo_mem = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#157: FILE: lzo_compress.c:41:
+               lzo_mem = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#158: FILE: lzo_compress.c:42:
+               return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: lzo_compress.c:42:
+               return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: lzo_compress.c:43:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: lzo_compress.c:45:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: lzo_compress.c:50:
+       free(lzo_compress_buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: lzo_compress.c:51:
+       free(lzo_mem);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#170: FILE: lzo_compress.c:54:
+
+

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#180: FILE: mkcramfs.c:78:
+void *lzo_mem = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#181: FILE: mkcramfs.c:79:
+void *lzo_compress_buf = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#191: FILE: mkcramfs.c:96:
+static int opt_lzo = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: mkcramfs.c:137:
+               " -l         use LZO compression instead of ZLIB\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mkcramfs.c:137:
+               " -l         use LZO compression instead of ZLIB\n"$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#210: FILE: mkcramfs.c:163:
+       if (lzo_compress_buf)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#210: FILE: mkcramfs.c:163:
+       if (lzo_compress_buf)
+               free(lzo_compress_buf);

ERROR:CODE_INDENT: code indent should use tabs where possible
#211: FILE: mkcramfs.c:164:
+               free(lzo_compress_buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: mkcramfs.c:164:
+               free(lzo_compress_buf);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: mkcramfs.c:165:
+       if (lzo_mem)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#212: FILE: mkcramfs.c:165:
+       if (lzo_mem)
+               free(lzo_mem);

ERROR:CODE_INDENT: code indent should use tabs where possible
#213: FILE: mkcramfs.c:166:
+               free(lzo_mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: mkcramfs.c:166:
+               free(lzo_mem);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: mkcramfs.c:400:
+       if (opt_lzo)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#221: FILE: mkcramfs.c:400:
+       if (opt_lzo)
+               super->flags |= CRAMFS_FLAG_LZO_COMPRESSION; 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#222: FILE: mkcramfs.c:401:
+               super->flags |= CRAMFS_FLAG_LZO_COMPRESSION; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: mkcramfs.c:401:
+               super->flags |= CRAMFS_FLAG_LZO_COMPRESSION; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: mkcramfs.c:401:
+               super->flags |= CRAMFS_FLAG_LZO_COMPRESSION; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: mkcramfs.c:611:
+                       if (opt_lzo) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: mkcramfs.c:611:
+                       if (opt_lzo) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#236: FILE: mkcramfs.c:611:
+                       if (opt_lzo) {
[...]
+                               err= cramfs_lzo_cmpr(uncompressed,base +

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: mkcramfs.c:612:
+                               /* Use LZO compression */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: mkcramfs.c:613:
+                               err= cramfs_lzo_cmpr(uncompressed,base +$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: mkcramfs.c:613:
+                               err= cramfs_lzo_cmpr(uncompressed,base +$

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#238: FILE: mkcramfs.c:613:
+                               err= cramfs_lzo_cmpr(uncompressed,base +
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#238: FILE: mkcramfs.c:613:
+                               err= cramfs_lzo_cmpr(uncompressed,base +
                                                                 ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#240: FILE: mkcramfs.c:614:
+                               if (err < 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: mkcramfs.c:614:
+                               if (err < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#240: FILE: mkcramfs.c:614:
+                               if (err < 0)
+                                       die(MKFS_ERROR, 0, "LZO

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: mkcramfs.c:615:
+                                       die(MKFS_ERROR, 0, "LZO$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: mkcramfs.c:615:
+                                       die(MKFS_ERROR, 0, "LZO$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: mkcramfs.c:616:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: mkcramfs.c:616:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: mkcramfs.c:617:
+                       else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: mkcramfs.c:617:
+                       else {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#245: FILE: mkcramfs.c:618:
+                               /* Use default ZLIB compression */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: mkcramfs.c:618:
+                               /* Use default ZLIB compression */ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#245: FILE: mkcramfs.c:618:
+                               /* Use default ZLIB compression */ $

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: mkcramfs.c:619:
+                               err = compress2(base + curr, &len,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#246: FILE: mkcramfs.c:619:
+                               err = compress2(base + curr, &len,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: mkcramfs.c:620:
+                               if (err != Z_OK) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#248: FILE: mkcramfs.c:620:
+                               if (err != Z_OK) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#249: FILE: mkcramfs.c:621:
+                                       die(MKFS_ERROR, 0, "compression$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: mkcramfs.c:621:
+                                       die(MKFS_ERROR, 0, "compression$

ERROR:CODE_INDENT: code indent should use tabs where possible
#251: FILE: mkcramfs.c:622:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: mkcramfs.c:622:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: mkcramfs.c:724:
+       while ((c = getopt(argc, argv, "hEe:i:ln:psvz")) != EOF) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#260: FILE: mkcramfs.c:724:
+       while ((c = getopt(argc, argv, "hEe:i:ln:psvz")) != EOF) {
                switch (c) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: mkcramfs.c:745:
+               case 'l':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#271: FILE: mkcramfs.c:746:
+                       opt_lzo = 1;$

WARNING:TYPO_SPELLING: 'istead' may be misspelled - perhaps 'instead'?
#272: FILE: mkcramfs.c:747:
+                       printf("LZO compression is used istead of ZLIB
                                                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: mkcramfs.c:747:
+                       printf("LZO compression is used istead of ZLIB$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#274: FILE: mkcramfs.c:748:
+                       break; $

ERROR:CODE_INDENT: code indent should use tabs where possible
#274: FILE: mkcramfs.c:748:
+                       break; $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#283: FILE: mkcramfs.c:780:
+       if (opt_lzo) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#283: FILE: mkcramfs.c:780:
+       if (opt_lzo) {
[...]
+               if ( cramfs_lzo_init() < 0 )

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#284: FILE: mkcramfs.c:781:
+       if (opt_lzo) {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#285: FILE: mkcramfs.c:782:
+               if ( cramfs_lzo_init() < 0 )$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#285: FILE: mkcramfs.c:782:
+               if ( cramfs_lzo_init() < 0 )$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#285: FILE: mkcramfs.c:782:
+               if ( cramfs_lzo_init() < 0 )
+                       die(MKFS_ERROR, 1, "cramfs_lzo_init failed");

ERROR:SPACING: space prohibited after that open parenthesis '('
#285: FILE: mkcramfs.c:782:
+               if ( cramfs_lzo_init() < 0 )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#285: FILE: mkcramfs.c:782:
+               if ( cramfs_lzo_init() < 0 )

ERROR:CODE_INDENT: code indent should use tabs where possible
#286: FILE: mkcramfs.c:783:
+                       die(MKFS_ERROR, 1, "cramfs_lzo_init failed");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#286: FILE: mkcramfs.c:783:
+                       die(MKFS_ERROR, 1, "cramfs_lzo_init failed");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: mkcramfs.c:784:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: mkcramfs.c:900:
+       if (opt_lzo)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#297: FILE: mkcramfs.c:900:
+       if (opt_lzo)
+               cramfs_lzo_exit();

ERROR:CODE_INDENT: code indent should use tabs where possible
#298: FILE: mkcramfs.c:901:
+               cramfs_lzo_exit();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: mkcramfs.c:901:
+               cramfs_lzo_exit();$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 49 errors, 66 warnings, 8 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000364553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
