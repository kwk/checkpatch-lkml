WARNING:REPEATED_WORD: Possible repeated word: 'be'
#66: 
here can be be inline because that constant is not used when these

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: fs/buffer.c:1808:
+					zero_user_segments(page,
+						to, block_end,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/buffer.c:2309:
+			zero_user_segments(page, block_start, from,
+						to, block_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#269: FILE: fs/direct-io.c:891:
+				zero_user(page, block_in_page << blkbits,
+						1 << blkbits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: fs/libfs.c:345:
+			zero_user_segments(page,
+				0, from,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: fs/ntfs/aops.c:98:
+			memset(kaddr + bh_offset(bh) + ofs, 0,
+					bh->b_size - ofs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/ntfs/file.c:611:
+					zero_user(page, bh_offset(bh),
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: fs/ntfs/file.c:687:
+						zero_user(page, bh_offset(bh),
+								blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: fs/ntfs/file.c:706:
+					zero_user(page, bh_offset(bh),
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: fs/ntfs/file.c:870:
+					zero_user(page, bh_offset(bh),
+						blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: fs/ntfs/file.c:1130:
+				zero_user_segment(page, bh_offset(bh) + ofs,
+						blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#618: FILE: fs/ntfs/file.c:1271:
+					zero_user(page, bh_offset(bh),
+							blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: include/linux/highmem.h:128:
+static inline void zero_user_segments(struct page *page,
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#732: FILE: include/linux/highmem.h:128:
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#732: FILE: include/linux/highmem.h:128:
+	unsigned start1, unsigned end1,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: include/linux/highmem.h:129:
+	unsigned start2, unsigned end2)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#733: FILE: include/linux/highmem.h:129:
+	unsigned start2, unsigned end2)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#737: FILE: include/linux/highmem.h:133:
+	BUG_ON(end1 > PAGE_SIZE ||

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#738: FILE: include/linux/highmem.h:134:
+	BUG_ON(end1 > PAGE_SIZE ||
+		end2 > PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#751: FILE: include/linux/highmem.h:147:
+static inline void zero_user_segment(struct page *page,
+	unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#751: FILE: include/linux/highmem.h:147:
+	unsigned start, unsigned end)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#751: FILE: include/linux/highmem.h:147:
+	unsigned start, unsigned end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#757: FILE: include/linux/highmem.h:153:
+static inline void zero_user(struct page *page,
+	unsigned start, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: include/linux/highmem.h:153:
+	unsigned start, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#757: FILE: include/linux/highmem.h:153:
+	unsigned start, unsigned size)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#823: FILE: fs/reiserfs/file.c:1066:
+			zero_user_segment(prepared_pages[num_pages-1], to,
 			                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: fs/reiserfs/file.c:1067:
+			zero_user_segment(prepared_pages[num_pages-1], to,
+					PAGE_CACHE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: fs/reiserfs/file.c:1195:
+					zero_user_segment(prepared_pages[0],
+						       block_start, from);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#846: FILE: fs/reiserfs/file.c:1227:
+					zero_user_segment(prepared_pages[num_pages-1],
 					                                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#847: FILE: fs/reiserfs/file.c:1228:
+					zero_user_segment(prepared_pages[num_pages-1],
+							to, block_end);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385955.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 20 checks, 604 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000385955.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
