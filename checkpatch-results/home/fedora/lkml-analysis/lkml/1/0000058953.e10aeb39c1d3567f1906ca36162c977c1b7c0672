CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#118: FILE: drivers/crypto/talitos.c:714:
+	spinlock_t desc_lock;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#198: FILE: drivers/crypto/talitos.c:794:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#235: FILE: drivers/crypto/talitos.c:831:
+	list_splice_tail_init(&xor_chan->submit_q,
+				 &xor_chan->pending_q);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/crypto/talitos.c:855:
+	list_splice_tail_init(&desc->tx_list,
+				 &xor_chan->submit_q);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#266: FILE: drivers/crypto/talitos.c:862:
+static struct talitos_xor_desc *talitos_xor_alloc_descriptor(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#309: FILE: drivers/crypto/talitos.c:905:
+	BUG_ON(unlikely(xor_chan->total_desc));	/* Some descriptor not freed? */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#348: FILE: drivers/crypto/talitos.c:944:
+static struct dma_async_tx_descriptor * talitos_prep_dma_xor(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#348: FILE: drivers/crypto/talitos.c:944:
+static struct dma_async_tx_descriptor * talitos_prep_dma_xor(

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: drivers/crypto/talitos.c:953:
+	BUG_ON(unlikely(len > TALITOS_MAX_DATA_LEN));

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*xor_chan)...) over kzalloc(sizeof(struct talitos_xor_chan)...)
#451: FILE: drivers/crypto/talitos.c:1047:
+	xor_chan = kzalloc(sizeof(struct talitos_xor_chan), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#453: FILE: drivers/crypto/talitos.c:1049:
+	if (!xor_chan) {
+		dev_err(dev, "unable to allocate xor channel\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#491: FILE: drivers/crypto/talitos.c:1087:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#515: FILE: drivers/crypto/talitos.c:2338:
+		int max_xor_srcs = 3;
+		if (of_device_is_compatible(np, "fsl,sec3.0"))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000058953.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 5 warnings, 7 checks, 481 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000058953.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
