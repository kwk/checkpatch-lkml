WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Add security support to the AFS filesystem.  Kerberos IV tickets are added as

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#39: 
Signed-Off-By: David Howells <dhowells@redhat.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cell)...) over kzalloc(sizeof(struct afs_cell)...)
#185: FILE: fs/afs/cell.c:48:
+	cell = kzalloc(sizeof(struct afs_cell) + namelen + 1, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#261: FILE: fs/afs/cell.c:113:
+	printk(KERN_ERR "kAFS: bad VL server IP address\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file->private_data"
#419: FILE: fs/afs/dir.c:390:
+	ASSERT(file->private_data != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#460: FILE: fs/afs/dir.c:496:
+	key = afs_request_key_nd(vnode->volume->cell, nd);
 	                                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#492: FILE: fs/afs/dir.c:588:
+	key = afs_request_key_nd(vnode->volume->cell, nd);
 	                                              ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "file"
#620: FILE: fs/afs/file.c:130:
+	ASSERT(file != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "key"
#622: FILE: fs/afs/file.c:132:
+	ASSERT(key != NULL);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#843: FILE: fs/afs/internal.h:182:
+	uint8_t			name[AFS_MAXVOLNAME + 1];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#901: FILE: fs/afs/internal.h:391:
+extern int afs_permission(struct inode *, int, struct nameidata *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#901: FILE: fs/afs/internal.h:391:
+extern int afs_permission(struct inode *, int, struct nameidata *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#901: FILE: fs/afs/internal.h:391:
+extern int afs_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#901: FILE: fs/afs/internal.h:391:
+extern int afs_permission(struct inode *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#910: FILE: fs/afs/internal.h:400:
+extern int afs_open(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#910: FILE: fs/afs/internal.h:400:
+extern int afs_open(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#910: FILE: fs/afs/internal.h:400:
+extern int afs_open(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#911: FILE: fs/afs/internal.h:401:
+extern int afs_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#911: FILE: fs/afs/internal.h:401:
+extern int afs_release(struct inode *, struct file *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#911: FILE: fs/afs/internal.h:401:
+extern int afs_release(struct inode *, struct file *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_volsync *' should also have an identifier name
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#922: FILE: fs/afs/internal.h:410:
+extern int afs_fs_fetch_file_status(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_server *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_volsync *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#929: FILE: fs/afs/internal.h:415:
+extern int afs_fs_fetch_data(struct afs_server *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: fs/afs/internal.h:423:
+extern struct inode *afs_iget(struct super_block *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct super_block *' should also have an identifier name
#938: FILE: fs/afs/internal.h:423:
+extern struct inode *afs_iget(struct super_block *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#938: FILE: fs/afs/internal.h:423:
+extern struct inode *afs_iget(struct super_block *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_fid *' should also have an identifier name
#938: FILE: fs/afs/internal.h:423:
+extern struct inode *afs_iget(struct super_block *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#942: FILE: fs/afs/internal.h:427:
+extern void afs_zap_permits(struct rcu_head *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rcu_head *' should also have an identifier name
#942: FILE: fs/afs/internal.h:427:
+extern void afs_zap_permits(struct rcu_head *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#951: FILE: fs/afs/internal.h:449:
+extern int afs_mntpt_check_symlink(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#951: FILE: fs/afs/internal.h:449:
+extern int afs_mntpt_check_symlink(struct afs_vnode *, struct key *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#951: FILE: fs/afs/internal.h:449:
+extern int afs_mntpt_check_symlink(struct afs_vnode *, struct key *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: fs/afs/internal.h:479:
+extern void afs_clear_permits(struct afs_vnode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#971: FILE: fs/afs/internal.h:479:
+extern void afs_clear_permits(struct afs_vnode *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#972: FILE: fs/afs/internal.h:480:
+extern void afs_cache_permit(struct afs_vnode *, struct key *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#972: FILE: fs/afs/internal.h:480:
+extern void afs_cache_permit(struct afs_vnode *, struct key *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#972: FILE: fs/afs/internal.h:480:
+extern void afs_cache_permit(struct afs_vnode *, struct key *, long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long' should also have an identifier name
#972: FILE: fs/afs/internal.h:480:
+extern void afs_cache_permit(struct afs_vnode *, struct key *, long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#973: FILE: fs/afs/internal.h:481:
+extern struct key *afs_request_key(struct afs_cell *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_cell *' should also have an identifier name
#973: FILE: fs/afs/internal.h:481:
+extern struct key *afs_request_key(struct afs_cell *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#974: FILE: fs/afs/internal.h:482:
+extern struct key *afs_request_key_nd(struct afs_cell *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_cell *' should also have an identifier name
#974: FILE: fs/afs/internal.h:482:
+extern struct key *afs_request_key_nd(struct afs_cell *, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#974: FILE: fs/afs/internal.h:482:
+extern struct key *afs_request_key_nd(struct afs_cell *, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: fs/afs/internal.h:483:
+extern int afs_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#975: FILE: fs/afs/internal.h:483:
+extern int afs_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#975: FILE: fs/afs/internal.h:483:
+extern int afs_permission(struct inode *, int, struct nameidata *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nameidata *' should also have an identifier name
#975: FILE: fs/afs/internal.h:483:
+extern int afs_permission(struct inode *, int, struct nameidata *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: fs/afs/internal.h:501:
+extern int afs_fs_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#988: FILE: fs/afs/internal.h:502:
+extern void afs_fs_exit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#999: FILE: fs/afs/internal.h:511:
+extern int afs_vl_get_entry_by_name(struct in_addr *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct in_addr *' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'afs_volid_t' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'afs_voltype_t' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_cache_vlocation *' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct afs_wait_mode *' should also have an identifier name
#1003: FILE: fs/afs/internal.h:514:
+extern int afs_vl_get_entry_by_id(struct in_addr *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1023: FILE: fs/afs/internal.h:550:
+extern int afs_vnode_fetch_status(struct afs_vnode *, struct afs_vnode *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_vnode *' should also have an identifier name
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct key *' should also have an identifier name
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'off_t' should also have an identifier name
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1025: FILE: fs/afs/internal.h:552:
+extern int afs_vnode_fetch_data(struct afs_vnode *, struct key *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1036: FILE: fs/afs/internal.h:565:
+extern struct afs_volume *afs_volume_lookup(struct afs_mount_params *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct afs_mount_params *' should also have an identifier name
#1036: FILE: fs/afs/internal.h:565:
+extern struct afs_volume *afs_volume_lookup(struct afs_mount_params *);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1129: FILE: fs/afs/rxrpc.c:143:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1146: FILE: fs/afs/rxrpc.c:160:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1159: FILE: fs/afs/rxrpc.c:173:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "call->type->name"
#1164: FILE: fs/afs/rxrpc.c:178:
+	ASSERT(call->type->name != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "call->type"
#1221: FILE: fs/afs/rxrpc.c:253:
+	ASSERT(call->type != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "call->type->name"
#1222: FILE: fs/afs/rxrpc.c:254:
+	ASSERT(call->type->name != NULL);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1388: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1393: FILE: fs/afs/security.c:1:
+/* AFS security handling

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1432: FILE: fs/afs/security.c:40:
+		return key_get(cell->anonymous_key);
+	} else {

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1442: FILE: fs/afs/security.c:50:
+struct key *afs_request_key_nd(struct afs_cell *cell, struct nameidata *nd)
                                                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1449: FILE: fs/afs/security.c:57:
+	       key_serial(nd ? nd->key : NULL));
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1451: FILE: fs/afs/security.c:59:
+	if (!nd)
 	     ^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1456: FILE: fs/afs/security.c:64:
+	 * in a previous step) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "auth_inode"
#1539: FILE: fs/afs/security.c:147:
+		ASSERT(auth_inode != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1593: FILE: fs/afs/security.c:201:
+	 * lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1602: FILE: fs/afs/security.c:210:
+	 * lock to update the cache for the status */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1652: FILE: fs/afs/security.c:260:
+	iput(&auth_vnode->vfs_inode);
 	^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1707: FILE: fs/afs/security.c:315:
+		 * (the post-processing will cache the result on auth_vnode) */

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1713: FILE: fs/afs/security.c:321:
+			iput(&auth_vnode->vfs_inode);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1721: FILE: fs/afs/security.c:329:
+	iput(&auth_vnode->vfs_inode);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1731: FILE: fs/afs/security.c:339:
+int afs_permission(struct inode *inode, int mask, struct nameidata *nd)
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1740: FILE: fs/afs/security.c:348:
+	key = afs_request_key_nd(vnode->volume->cell, nd);
 	                                              ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1771: FILE: fs/afs/security.c:379:
+			BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1857: FILE: fs/afs/super.c:217:
+		printk(KERN_ERR "kAFS: no volume name specified\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1862: FILE: fs/afs/super.c:222:
+		printk(KERN_ERR "kAFS: unparsable volume name\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1912: FILE: fs/afs/super.c:272:
+			printk(KERN_ERR "kAFS: unable to lookup cell '%s'\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1965: FILE: fs/afs/super.c:388:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1966: FILE: fs/afs/super.c:389:
+		
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#2162: FILE: fs/afs/vlocation.c:382:
+	       (int) namesz, (int) namesz, name, namesz);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 75 warnings, 31 checks, 2187 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000446228.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
