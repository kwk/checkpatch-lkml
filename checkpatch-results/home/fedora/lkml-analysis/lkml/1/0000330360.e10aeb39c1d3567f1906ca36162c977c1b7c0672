CHECK:SPACING: No space is necessary after a cast
#46: FILE: arch/x86/math-emu/errors.c:60:
+  printk(KERN_ERR "At %p:", (void *) address);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#46: FILE: arch/x86/math-emu/errors.c:60:
+  printk(KERN_ERR "At %p:", (void *) address);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#46: FILE: arch/x86/math-emu/errors.c:60:
+  printk(KERN_ERR "At %p:", (void *) address);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 14)
#51: FILE: arch/x86/math-emu/errors.c:65:
 	  if ((byte1 & 0xf8) == 0xd8) {
+	      printk(KERN_ERR " %02x", byte1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#53: FILE: arch/x86/math-emu/errors.c:66:
+	      printk(KERN_ERR " %02x", byte1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#57: FILE: arch/x86/math-emu/errors.c:69:
+	  printk(KERN_ERR " [%02x]", byte1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#62: FILE: arch/x86/math-emu/errors.c:73:
+	printk(KERN_ERR " [more..]\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#66: FILE: arch/x86/math-emu/errors.c:77:
 	  if (FPU_modrm >= 0300)
+	    printk(KERN_ERR " %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8, FPU_modrm & 7);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#68: FILE: arch/x86/math-emu/errors.c:78:
+	    printk(KERN_ERR " %02x (%02x+%d)\n", FPU_modrm, FPU_modrm & 0xf8, FPU_modrm & 7);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (10, 12)
#69: FILE: arch/x86/math-emu/errors.c:79:
 	  else
+	    printk(KERN_ERR " /%d, mod=%d rm=%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#71: FILE: arch/x86/math-emu/errors.c:80:
+	    printk(KERN_ERR " /%d, mod=%d rm=%d\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 6)
#75: FILE: arch/x86/math-emu/errors.c:84:
   else
+      printk(KERN_ERR "%04x\n", FPU_CS);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#77: FILE: arch/x86/math-emu/errors.c:85:
+      printk(KERN_ERR "%04x\n", FPU_CS);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#77: FILE: arch/x86/math-emu/errors.c:85:
+      printk(KERN_ERR "%04x\n", FPU_CS);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#82: FILE: arch/x86/math-emu/errors.c:90:
 if (partial_status & SW_Backward)
+printk(KERN_ERR "SW: backward compatibility\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#84: FILE: arch/x86/math-emu/errors.c:91:
+printk(KERN_ERR "SW: backward compatibility\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#85: FILE: arch/x86/math-emu/errors.c:92:
 if (partial_status & SW_C3)
+printk(KERN_ERR "SW: condition bit 3\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#87: FILE: arch/x86/math-emu/errors.c:93:
+printk(KERN_ERR "SW: condition bit 3\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#88: FILE: arch/x86/math-emu/errors.c:94:
 if (partial_status & SW_C2)
+printk(KERN_ERR "SW: condition bit 2\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#90: FILE: arch/x86/math-emu/errors.c:95:
+printk(KERN_ERR "SW: condition bit 2\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#91: FILE: arch/x86/math-emu/errors.c:96:
 if (partial_status & SW_C1)
+printk(KERN_ERR "SW: condition bit 1\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#93: FILE: arch/x86/math-emu/errors.c:97:
+printk(KERN_ERR "SW: condition bit 1\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#94: FILE: arch/x86/math-emu/errors.c:98:
 if (partial_status & SW_C0)
+printk(KERN_ERR "SW: condition bit 0\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#96: FILE: arch/x86/math-emu/errors.c:99:
+printk(KERN_ERR "SW: condition bit 0\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#97: FILE: arch/x86/math-emu/errors.c:100:
 if (partial_status & SW_Summary)
+printk(KERN_ERR "SW: exception summary\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#99: FILE: arch/x86/math-emu/errors.c:101:
+printk(KERN_ERR "SW: exception summary\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#100: FILE: arch/x86/math-emu/errors.c:102:
 if (partial_status & SW_Stack_Fault)
+printk(KERN_ERR "SW: stack fault\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#102: FILE: arch/x86/math-emu/errors.c:103:
+printk(KERN_ERR "SW: stack fault\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#103: FILE: arch/x86/math-emu/errors.c:104:
 if (partial_status & SW_Precision)
+printk(KERN_ERR "SW: loss of precision\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#105: FILE: arch/x86/math-emu/errors.c:105:
+printk(KERN_ERR "SW: loss of precision\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#106: FILE: arch/x86/math-emu/errors.c:106:
 if (partial_status & SW_Underflow)
+printk(KERN_ERR "SW: underflow\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: arch/x86/math-emu/errors.c:107:
+printk(KERN_ERR "SW: underflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#109: FILE: arch/x86/math-emu/errors.c:108:
 if (partial_status & SW_Overflow)
+printk(KERN_ERR "SW: overflow\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#111: FILE: arch/x86/math-emu/errors.c:109:
+printk(KERN_ERR "SW: overflow\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#112: FILE: arch/x86/math-emu/errors.c:110:
 if (partial_status & SW_Zero_Div)
+printk(KERN_ERR "SW: divide by zero\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#114: FILE: arch/x86/math-emu/errors.c:111:
+printk(KERN_ERR "SW: divide by zero\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#115: FILE: arch/x86/math-emu/errors.c:112:
 if (partial_status & SW_Denorm_Op)
+printk(KERN_ERR "SW: denormalized operand\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: arch/x86/math-emu/errors.c:113:
+printk(KERN_ERR "SW: denormalized operand\n");

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (0, 0)
#118: FILE: arch/x86/math-emu/errors.c:114:
 if (partial_status & SW_Invalid)
+printk(KERN_ERR "SW: invalid operation\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#120: FILE: arch/x86/math-emu/errors.c:115:
+printk(KERN_ERR "SW: invalid operation\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/x86/math-emu/errors.c:118:
+  printk(KERN_ERR " SW: b=%d st=%ld es=%d sf=%d cc=%d%d%d%d ef=%d%d%d%d%d%d\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#124: FILE: arch/x86/math-emu/errors.c:118:
+  printk(KERN_ERR " SW: b=%d st=%ld es=%d sf=%d cc=%d%d%d%d ef=%d%d%d%d%d%d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#133: FILE: arch/x86/math-emu/errors.c:129:
+printk(KERN_ERR " CW: ic=%d rc=%ld%ld pc=%ld%ld iem=%d     ef=%d%d%d%d%d%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: arch/x86/math-emu/errors.c:130:
+printk(KERN_ERR " CW: ic=%d rc=%ld%ld pc=%ld%ld iem=%d     ef=%d%d%d%d%d%d\n",
 	 control_word & 0x1000 ? 1 : 0,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#142: FILE: arch/x86/math-emu/errors.c:149:
+	  printk(KERN_ERR "st(%d)  %c .%04lx %04lx %04lx %04lx e%+-6d ", i,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#148: FILE: arch/x86/math-emu/errors.c:303:
       if (exception_names[i].type) {
[...]
+	  printk(KERN_ERR "FP Exception: %s!\n", exception_names[i].name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#151: FILE: arch/x86/math-emu/errors.c:305:
+	  printk(KERN_ERR "FP Exception: %s!\n", exception_names[i].name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#156: FILE: arch/x86/math-emu/errors.c:309:
+	printk(KERN_ERR "FPU emulator: Unknown Exception: 0x%04x!\n", n);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (6, 10)
#158: FILE: arch/x86/math-emu/errors.c:311:
       if (n == EX_INTERNAL) {
+	  printk(KERN_ERR "FPU emulator: Internal error type 0x%04x\n", int_type);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#160: FILE: arch/x86/math-emu/errors.c:312:
+	  printk(KERN_ERR "FPU emulator: Internal error type 0x%04x\n", int_type);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 48 warnings, 2 checks, 119 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000330360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
