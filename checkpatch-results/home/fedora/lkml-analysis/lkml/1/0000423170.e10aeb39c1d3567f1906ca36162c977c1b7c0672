WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/logfs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: fs/logfs/super.c:2:
+ * fs/logfs/super.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#66: FILE: fs/logfs/super.c:21:
+	BUG_ON(ret == -EINVAL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#89: FILE: fs/logfs/super.c:44:
+	BUG_ON((ofs >= mtd->size) || (len > mtd->size - ofs));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: fs/logfs/super.c:45:
+	BUG_ON(ofs != (ofs >> super->s_writeshift) << super->s_writeshift);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: fs/logfs/super.c:46:
+	BUG_ON(len > PAGE_CACHE_SIZE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'retlen != len'
#96: FILE: fs/logfs/super.c:51:
+	if (ret || (retlen != len))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:TYPO_SPELLING: 'excercise' may be misspelled - perhaps 'exercise'?
#108: FILE: fs/logfs/super.c:63:
+ * from mtderase().  What an excercise in futility!
                              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#112: FILE: fs/logfs/super.c:67:
+	complete((struct completion*)ei->priv);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#123: FILE: fs/logfs/super.c:78:
+	BUG_ON(len % mtd->erasesize);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#125: FILE: fs/logfs/super.c:80:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: fs/logfs/super.c:80:
+	truncate_inode_pages_range(&inode->i_data, ofs, ofs+len-1);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#148: FILE: fs/logfs/super.c:103:
+	long offset = from & (PAGE_SIZE-1);
 	                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/logfs/super.c:110:
+		page = read_cache_page(mapping, index,
+				(filler_t*)mapping->a_ops->readpage, NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#155: FILE: fs/logfs/super.c:110:
+				(filler_t*)mapping->a_ops->readpage, NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#178: FILE: fs/logfs/super.c:133:
+	long offset = to & (PAGE_SIZE-1);
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: fs/logfs/super.c:140:
+		page = read_cache_page(mapping, index,
+				(filler_t*)mapping->a_ops->readpage, NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#185: FILE: fs/logfs/super.c:140:
+				(filler_t*)mapping->a_ops->readpage, NULL);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#210: FILE: fs/logfs/super.c:165:
+	long offset = to & (PAGE_SIZE-1);
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: fs/logfs/super.c:172:
+		page = read_cache_page(mapping, index,
+				(filler_t*)mapping->a_ops->readpage, NULL);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#217: FILE: fs/logfs/super.c:172:
+				(filler_t*)mapping->a_ops->readpage, NULL);

CHECK:SPACING: No space is necessary after a cast
#255: FILE: fs/logfs/super.c:210:
+	void *stack = (void *) ((ulong)current & ~0x1fffUL);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#258: FILE: fs/logfs/super.c:213:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#258: FILE: fs/logfs/super.c:213:
+	for (i=0; i<LOGFS_NO_AREAS; i++) {
 	           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#260: FILE: fs/logfs/super.c:215:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
 		                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#261: FILE: fs/logfs/super.c:216:
+		u64 ofs = sb->s_blocksize + i*super->s_writesize;
+		mtdwrite(sb, ofs, super->s_writesize, wbuf);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#272: FILE: fs/logfs/super.c:227:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#272: FILE: fs/logfs/super.c:227:
+	for (i=0; i<LOGFS_MAX_LEVELS; i++)
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#291: FILE: fs/logfs/super.c:246:
+	const unsigned char *p = s;
+	while (n-- != 0) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#292: FILE: fs/logfs/super.c:247:
+		if ((unsigned char)c != *p++) {
+			return (void *)(p - 1);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#314: FILE: fs/logfs/super.c:269:
+	stats->f_namelen= LOGFS_MAX_NAMELEN;
 	                ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#342: FILE: fs/logfs/super.c:297:
+#if 1

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#348: FILE: fs/logfs/super.c:303:
+		printk(KERN_ERR "LOGFS: fsck failed, refusing to mount\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#355: FILE: fs/logfs/super.c:310:
+	iput(logfs_super(sb)->s_master_inode);
 	^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#397: FILE: fs/logfs/super.c:352:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#397: FILE: fs/logfs/super.c:352:
+	super->s_gc_reserve = super->s_total_levels * (2*super->s_no_blocks -1);
 	                                                                    ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#422: FILE: fs/logfs/super.c:377:
+	 * for rw-mounts, if necessary */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: fs/logfs/super.c:423:
+static int logfs_get_sb_mtd(struct file_system_type *type, int flags,
+		struct mtd_info *mtd, struct vfsmount *mnt)

ERROR:SPACING: space required before that '*' (ctx:VxV)
#474: FILE: fs/logfs/super.c:429:
+	super = kzalloc(sizeof*super, GFP_KERNEL);
 	                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#510: FILE: fs/logfs/super.c:465:
+static int logfs_get_sb(struct file_system_type *type, int flags,
+		const char *devname, void *data, struct vfsmount *mnt)

WARNING:LINE_SPACING: Missing a blank line after declarations
#522: FILE: fs/logfs/super.c:477:
+		char *garbage;
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#522: FILE: fs/logfs/super.c:477:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);
 		                              ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#522: FILE: fs/logfs/super.c:477:
+		mtdnr = simple_strtoul(devname+3, &garbage, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 18 warnings, 16 checks, 521 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423170.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
