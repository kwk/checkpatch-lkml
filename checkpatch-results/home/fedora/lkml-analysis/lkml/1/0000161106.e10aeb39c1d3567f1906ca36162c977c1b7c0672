CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#99: FILE: kernel/trace/trace_events.c:50:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#185: FILE: kernel/trace/trace_events.c:340:
+event_type_read(struct file *filp, char __user *ubuf, size_t cnt,
                              ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: kernel/trace/trace_events.c:351:
+		r += sprintf(buf+r, "raw\n");
 		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#202: FILE: kernel/trace/trace_events.c:357:
+event_type_write(struct file *filp, const char __user *ubuf, size_t cnt,
                               ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#228: FILE: kernel/trace/trace_events.c:383:
+	if (!strncmp(buf, "printf", 6) &&
[...]
+	} else if (!strncmp(buf, "raw", 3) &&
[...]
+	} else
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#230: FILE: kernel/trace/trace_events.c:385:
+	    (!buf[6] || isspace(buf[6]))) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#247: FILE: kernel/trace/trace_events.c:402:
+	    (!buf[3] || isspace(buf[3]))) {
+

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: kernel/trace/trace_events.c:416:
+	} else

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#270: FILE: kernel/trace/trace_events.c:425:
+event_available_types_read(struct file *filp, char __user *ubuf, size_t cnt,
                                         ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#280: FILE: kernel/trace/trace_events.c:435:
+		r += sprintf(buf+r, "raw\n");
 		                ^

WARNING:SPLIT_STRING: quoted string split across lines
#322: FILE: kernel/trace/trace_events.c:564:
+			pr_warning("Could not initialize trace point"
+				   " events/%s\n", call->name);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#344: FILE: kernel/trace/trace_events.c:592:
+		pr_warning("Could not create debugfs "
+			   "'%s/type' entry\n", call->name);

WARNING:SPLIT_STRING: quoted string split across lines
#350: FILE: kernel/trace/trace_events.c:598:
+		pr_warning("Could not create debugfs "
+			   "'%s/type' available_types\n", call->name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161106.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 7 checks, 273 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000161106.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
