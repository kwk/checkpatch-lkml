CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#55: FILE: arch/x86/mm/pat.c:12:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#69: FILE: arch/x86/mm/pat.c:82:
+^Icase 0: ^Ireturn "default";$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#70: FILE: arch/x86/mm/pat.c:83:
+^Idefault: ^Ireturn "broken";$

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#91: FILE: arch/x86/mm/pat.c:149:
+	KERN_DEBUG "%s:%d conflicting cache attribute %Lx-%Lx %s<->%s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#105: FILE: arch/x86/mm/pat.c:185:
+	"%s:%d conflicting cache attributes on free %Lx-%Lx %s<->%s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#116: FILE: arch/x86/mm/pat.c:196:
+		printk(KERN_DEBUG "%s:%d freeing invalid mattr %Lx-%Lx %s\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#116: FILE: arch/x86/mm/pat.c:196:
+		printk(KERN_DEBUG "%s:%d freeing invalid mattr %Lx-%Lx %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: arch/x86/mm/pat.c:197:
+		printk(KERN_DEBUG "%s:%d freeing invalid mattr %Lx-%Lx %s\n",
 			current->comm, current->pid,

WARNING:LINE_SPACING: Missing a blank line after declarations
#131: FILE: arch/x86/mm/pat.c:210:
+	unsigned long want_flags = 0;
+	if (file->f_flags & O_SYNC)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: arch/x86/mm/pat.c:216:
+ ^I * memory types for physical addresses outside main memory,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: arch/x86/mm/pat.c:216:
+ ^I * memory types for physical addresses outside main memory,$

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#144: FILE: arch/x86/mm/pat.c:223:
+	    ! ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#144: FILE: arch/x86/mm/pat.c:223:
+	    ! ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#153: FILE: arch/x86/mm/pat.c:232:
+	reserve_mattr(offset, offset+size, want_flags, &flags);
 	                            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#155: FILE: arch/x86/mm/pat.c:234:
+		printk(KERN_DEBUG

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#156: FILE: arch/x86/mm/pat.c:235:
+	"%s:%d /dev/mem expected mapping type %s for %Lx-%Lx, got %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#159: FILE: arch/x86/mm/pat.c:238:
+			offset, offset+size,
 			              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#165: FILE: arch/x86/mm/pat.c:244:
+		/* RED-PEN when the kernel memory was write protected
+		   or similar before we'll destroy that here. need a pgprot

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#166: FILE: arch/x86/mm/pat.c:245:
+		   mask in cpa? */

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: arch/x86/mm/pat.c:247:
+^I^I                      size >> PAGE_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: arch/x86/mm/pat.c:248:
+^I^I                      __pgprot(__PAGE_KERNEL | flags));$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#171: FILE: arch/x86/mm/pat.c:250:
+	return __pgprot((pgprot_val(vma_prot) & ~_PAGE_CACHE_MASK)|flags);
 	                                                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#180: FILE: arch/x86/mm/pat.c:259:
+	reserve_mattr(addr, addr+size, want_flags, &flags);
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#182: FILE: arch/x86/mm/pat.c:261:
+		printk(KERN_DEBUG

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#183: FILE: arch/x86/mm/pat.c:262:
+	"%s:%d /dev/mem expected mapping type %s for %Lx-%Lx, got %s\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#186: FILE: arch/x86/mm/pat.c:265:
+			addr, addr+size,
 			          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#196: FILE: arch/x86/mm/pat.c:275:
+	free_mattr(addr, addr+size, flags);
 	                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#198: FILE: arch/x86/mm/pat.c:277:
+	if (addr < __pa(high_memory) &&
+	   (pgprot_val(vma_prot) & _PAGE_CACHE_MASK))

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: arch/x86/mm/pat.c:279:
+^I^I                      size >> PAGE_SHIFT,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: arch/x86/mm/pat.c:280:
+^I^I                      PAGE_KERNEL);$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#249: FILE: drivers/char/mem.c:245:
+void __attribute__((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#255: FILE: drivers/char/mem.c:251:
+void __attribute__((weak))

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#273: FILE: drivers/char/mem.c:269:
+static struct vm_operations_struct mmap_mem_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#295: FILE: include/asm-x86/pgtable.h:1:
+#ifndef _ASM_X86_PGTABLE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_VALID_PHYS_ADDR_RANGE' is wrong - use Kconfig variables or standard guards instead
#320: FILE: include/asm-x86/io.h:14:
+#define ARCH_HAS_VALID_PHYS_ADDR_RANGE

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: include/asm-x86/io.h:16:
+extern int valid_phys_addr_range(unsigned long addr, size_t count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: include/asm-x86/io.h:17:
+extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: arch/x86/mm/ioremap.c:46:
+	u64 address = pfn << PAGE_SHIFT;
+	return (is_memory_all_valid(address, address + size) ||

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338236.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 19 warnings, 11 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000338236.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
