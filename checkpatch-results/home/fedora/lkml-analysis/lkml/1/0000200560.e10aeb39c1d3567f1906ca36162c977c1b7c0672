WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
reported a similar problem on Blackfin arch where it doesn't seem to be easy

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#114: FILE: drivers/uio/uio.c:120:
+static struct sysfs_ops map_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#129: FILE: drivers/uio/uio.c:134:
+};
+#define to_portio(portio) container_of(portio, struct uio_portio, kobj)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct uio_port *' should also have an identifier name
#148: FILE: drivers/uio/uio.c:153:
+	ssize_t (*show)(struct uio_port *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#148: FILE: drivers/uio/uio.c:153:
+	ssize_t (*show)(struct uio_port *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct uio_port *' should also have an identifier name
#149: FILE: drivers/uio/uio.c:154:
+	ssize_t (*store)(struct uio_port *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#149: FILE: drivers/uio/uio.c:154:
+	ssize_t (*store)(struct uio_port *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#149: FILE: drivers/uio/uio.c:154:
+	ssize_t (*store)(struct uio_port *, const char *, size_t);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#153: FILE: drivers/uio/uio.c:158:
+	__ATTR(start, S_IRUGO, portio_start_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#155: FILE: drivers/uio/uio.c:160:
+	__ATTR(size, S_IRUGO, portio_size_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#157: FILE: drivers/uio/uio.c:162:
+	__ATTR(porttype, S_IRUGO, portio_porttype_show, NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#169: FILE: drivers/uio/uio.c:174:
+	struct uio_portio *portio = to_portio(kobj);
+	kfree(portio);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#173: FILE: drivers/uio/uio.c:178:
+static ssize_t portio_type_show(struct kobject *kobj, struct attribute *attr,
+			     char *buf)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#187: FILE: drivers/uio/uio.c:192:
+static struct sysfs_ops portio_sysfs_ops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#246: FILE: drivers/uio/uio.c:297:
+			idev->portio_dir = kobject_create_and_add("portio",
+							&idev->dev->kobj);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: drivers/uio/uio.c:308:
+		ret = kobject_add(&portio->kobj, idev->portio_dir,
+							"port%d", pi);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000200560.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 4 checks, 276 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000200560.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
