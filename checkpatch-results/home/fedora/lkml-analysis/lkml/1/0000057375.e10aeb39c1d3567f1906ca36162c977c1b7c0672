WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: drivers/input/lirc/Kconfig:14:
+config LIRC_IMON
+	tristate "SoundGraph iMON Receiver and Display"
+	depends on LIRC_DEV
+	help
+	  Driver for the SoundGraph iMON IR Receiver and Display
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: drivers/input/lirc/lirc_imon.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: drivers/input/lirc/lirc_imon.c:19:
+ *   along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#110: FILE: drivers/input/lirc/lirc_imon.c:20:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: drivers/input/lirc/lirc_imon.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#238: FILE: drivers/input/lirc/lirc_imon.c:148:
+#define TOUCH_TIMEOUT	(HZ/30)
                      	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct file_operations should normally be const
#241: FILE: drivers/input/lirc/lirc_imon.c:151:
+static struct file_operations display_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#261: FILE: drivers/input/lirc/lirc_imon.c:171:
+};
+/*

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#479: FILE: drivers/input/lirc/lirc_imon.c:389:
+module_param(debug, int, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#481: FILE: drivers/input/lirc/lirc_imon.c:391:
+module_param(display_type, int, S_IRUGO);

WARNING:SPLIT_STRING: quoted string split across lines
#483: FILE: drivers/input/lirc/lirc_imon.c:393:
+MODULE_PARM_DESC(display_type, "Type of attached display. 0=autodetect, "
+		 "1=vfd, 2=lcd, 3=vga, 4=none (default: autodetect)");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#484: FILE: drivers/input/lirc/lirc_imon.c:394:
+module_param(ir_protocol, int, S_IRUGO | S_IWUSR);

WARNING:SPLIT_STRING: quoted string split across lines
#486: FILE: drivers/input/lirc/lirc_imon.c:396:
+MODULE_PARM_DESC(ir_protocol, "Which IR protocol to use. 0=native iMON, "
+		 "1=Windows Media Center Ed. (RC-6), 2=iMON w/o PAD stabilize "

WARNING:SPLIT_STRING: quoted string split across lines
#487: FILE: drivers/input/lirc/lirc_imon.c:397:
+		 "1=Windows Media Center Ed. (RC-6), 2=iMON w/o PAD stabilize "
+		 "(default: native iMON)");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#488: FILE: drivers/input/lirc/lirc_imon.c:398:
+module_param(nomouse, int, S_IRUGO | S_IWUSR);

WARNING:SPLIT_STRING: quoted string split across lines
#490: FILE: drivers/input/lirc/lirc_imon.c:400:
+MODULE_PARM_DESC(nomouse, "Disable mouse input device mode when IR device is "
+		 "open. 0=don't disable, 1=disable. (default: don't disable)");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#491: FILE: drivers/input/lirc/lirc_imon.c:401:
+module_param(pad_thresh, int, S_IRUGO | S_IWUSR);

WARNING:SPLIT_STRING: quoted string split across lines
#493: FILE: drivers/input/lirc/lirc_imon.c:403:
+MODULE_PARM_DESC(pad_thresh, "Threshold at which a pad push registers as an "
+		 "arrow key in kbd mode (default: 28)");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#494: FILE: drivers/input/lirc/lirc_imon.c:404:
+module_param(lirc_mode, int, S_IRUGO | S_IWUSR);

WARNING:SPLIT_STRING: quoted string split across lines
#496: FILE: drivers/input/lirc/lirc_imon.c:406:
+MODULE_PARM_DESC(lirc_mode, "Run onboard decoding receiver in lirc mode rather "
+		 "than as a pure input device");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#519: FILE: drivers/input/lirc/lirc_imon.c:429:
+		err("%s: unable to deregister from lirc(%d)",
+			__func__, retval);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#521: FILE: drivers/input/lirc/lirc_imon.c:431:
+		printk(KERN_INFO MOD_NAME ": Deregistered iMON driver "

WARNING:SPLIT_STRING: quoted string split across lines
#522: FILE: drivers/input/lirc/lirc_imon.c:432:
+		printk(KERN_INFO MOD_NAME ": Deregistered iMON driver "
+		       "(minor:%d)\n", minor);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#524: FILE: drivers/input/lirc/lirc_imon.c:434:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: drivers/input/lirc/lirc_imon.c:462:
+		err("%s: no context found for minor %d",
+					__func__, subminor);

CHECK:CAMELCASE: Avoid CamelCase: <bEndpointAddress>
#635: FILE: drivers/input/lirc/lirc_imon.c:545:
+				      context->tx_endpoint->bEndpointAddress);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#636: FILE: drivers/input/lirc/lirc_imon.c:546:
+		interval = context->tx_endpoint->bInterval;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*control_req)...) over kmalloc(sizeof(struct usb_ctrlrequest)...)
#646: FILE: drivers/input/lirc/lirc_imon.c:556:
+		control_req = kmalloc(sizeof(struct usb_ctrlrequest),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!control_req"
#648: FILE: drivers/input/lirc/lirc_imon.c:558:
+		if (control_req == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#652: FILE: drivers/input/lirc/lirc_imon.c:562:
+		control_req->bRequestType = 0x21;

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#653: FILE: drivers/input/lirc/lirc_imon.c:563:
+		control_req->bRequest = 0x09;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#654: FILE: drivers/input/lirc/lirc_imon.c:564:
+		control_req->wValue = cpu_to_le16(0x0200);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#655: FILE: drivers/input/lirc/lirc_imon.c:565:
+		control_req->wIndex = cpu_to_le16(0x0001);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#656: FILE: drivers/input/lirc/lirc_imon.c:566:
+		control_req->wLength = cpu_to_le16(0x0008);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#671: FILE: drivers/input/lirc/lirc_imon.c:581:
+	atomic_set(&(context->tx.busy), 1);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around context->tx.busy
#675: FILE: drivers/input/lirc/lirc_imon.c:585:
+		atomic_set(&(context->tx.busy), 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#680: FILE: drivers/input/lirc/lirc_imon.c:590:
+		retval = wait_for_completion_interruptible(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#752: FILE: drivers/input/lirc/lirc_imon.c:662:
+		clock_enable_pkt[0][2] = month-1;
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#778: FILE: drivers/input/lirc/lirc_imon.c:688:
+		clock_enable_pkt[0][1] = month-1;
 		                              ^

WARNING:SPLIT_STRING: quoted string split across lines
#835: FILE: drivers/input/lirc/lirc_imon.c:745:
+	dev_info(d, "Visit http://www.lirc.org/html/imon-24g.html for "
+		 "instructions on how to associate your iMON 2.4G DT/LT "

WARNING:SPLIT_STRING: quoted string split across lines
#836: FILE: drivers/input/lirc/lirc_imon.c:746:
+		 "instructions on how to associate your iMON 2.4G DT/LT "
+		 "remote\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#885: FILE: drivers/input/lirc/lirc_imon.c:795:
+		len = snprintf(buf, PAGE_SIZE,
+			"To set the clock on your iMON display:\n"

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dow > 6'
#923: FILE: drivers/input/lirc/lirc_imon.c:833:
+	if ((month < 1 || month > 12) ||
+	    (day < 1 || day > 31) || (dow > 6) ||
+	    (hour > 23) || (minute > 59) || (second > 59)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hour > 23'
#923: FILE: drivers/input/lirc/lirc_imon.c:833:
+	if ((month < 1 || month > 12) ||
+	    (day < 1 || day > 31) || (dow > 6) ||
+	    (hour > 23) || (minute > 59) || (second > 59)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'minute > 59'
#923: FILE: drivers/input/lirc/lirc_imon.c:833:
+	if ((month < 1 || month > 12) ||
+	    (day < 1 || day > 31) || (dow > 6) ||
+	    (hour > 23) || (minute > 59) || (second > 59)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'second > 59'
#923: FILE: drivers/input/lirc/lirc_imon.c:833:
+	if ((month < 1 || month > 12) ||
+	    (day < 1 || day > 31) || (dow > 6) ||
+	    (hour > 23) || (minute > 59) || (second > 59)) {

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_imon_clock' to 'imon_clock_show' 'store_imon_clock' to 'imon_clock_store'
#940: FILE: drivers/input/lirc/lirc_imon.c:850:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LINE_SPACING: Please don't use multiple blank lines
#942: FILE: drivers/input/lirc/lirc_imon.c:852:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#943: FILE: drivers/input/lirc/lirc_imon.c:853:
+static DEVICE_ATTR(imon_clock, S_IWUSR | S_IRUGO, show_imon_clock,

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_associate_remote' to 'associate_remote_show' 'store_associate_remote' to 'associate_remote_store'
#946: FILE: drivers/input/lirc/lirc_imon.c:856:
+static DEVICE_ATTR(associate_remote, S_IWUSR | S_IRUGO, show_associate_remote,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#946: FILE: drivers/input/lirc/lirc_imon.c:856:
+static DEVICE_ATTR(associate_remote, S_IWUSR | S_IRUGO, show_associate_remote,

CHECK:SPACING: No space is necessary after a cast
#1026: FILE: drivers/input/lirc/lirc_imon.c:936:
+		context->usb_tx_buf[7] = (unsigned char) seq;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1031: FILE: drivers/input/lirc/lirc_imon.c:941:
+			err("%s: send packet failed for packet #%d",
+					__func__, seq/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1031: FILE: drivers/input/lirc/lirc_imon.c:941:
+					__func__, seq/2);
 					             ^

CHECK:SPACING: No space is necessary after a cast
#1043: FILE: drivers/input/lirc/lirc_imon.c:953:
+		context->usb_tx_buf[7] = (unsigned char) seq;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1047: FILE: drivers/input/lirc/lirc_imon.c:957:
+			err("%s: send packet failed for packet #%d",
+					__func__, seq/2);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1047: FILE: drivers/input/lirc/lirc_imon.c:957:
+					__func__, seq/2);
 					             ^

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: drivers/input/lirc/lirc_imon.c:1001:
+		    __func__, (int) n_bytes);

CHECK:SPACING: No space is necessary after a cast
#1107: FILE: drivers/input/lirc/lirc_imon.c:1017:
+			__func__, (int) n_bytes);

WARNING:RETURN_VOID: void function return statements are not generally useful
#1134: FILE: drivers/input/lirc/lirc_imon.c:1044:
+	return;
+}

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1147: FILE: drivers/input/lirc/lirc_imon.c:1057:
+	unsigned char ir_proto_packet[] =
+		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86 };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#1154: FILE: drivers/input/lirc/lirc_imon.c:1064:
+			dev_info(dev, "%s: MCE IR proto not supported on this "
+				 "device, using iMON protocol\n", __func__);

WARNING:SPLIT_STRING: quoted string split across lines
#1169: FILE: drivers/input/lirc/lirc_imon.c:1079:
+		dev_dbg(dev, "Configuring IR receiver for iMON protocol "
+			"without PAD stabilize function enabled\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1175: FILE: drivers/input/lirc/lirc_imon.c:1085:
+		dev_info(dev, "%s: unknown IR protocol specified, will "
+			 "just default to iMON protocol\n", __func__);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1190: FILE: drivers/input/lirc/lirc_imon.c:1100:
+
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#1262: FILE: drivers/input/lirc/lirc_imon.c:1172:
+	return;
+}

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1282: FILE: drivers/input/lirc/lirc_imon.c:1192:
+		buf[i] = value>>(i*8);
 		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1282: FILE: drivers/input/lirc/lirc_imon.c:1192:
+		buf[i] = value>>(i*8);
 		                  ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#1287: FILE: drivers/input/lirc/lirc_imon.c:1197:
+	return;
+}

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!touch"
#1496: FILE: drivers/input/lirc/lirc_imon.c:1406:
+		if (touch == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1498: FILE: drivers/input/lirc/lirc_imon.c:1408:
+			dev_warn(dev, "%s: touchscreen input device is "
+				 "NULL!\n", __func__);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1513: FILE: drivers/input/lirc/lirc_imon.c:1423:
+		if (!context->ffdc_dev && (buf[0] & 0x01) && len == 5) {
[...]
+		} else if (context->ffdc_dev && (buf[0] & 0x40) &&
[...]
+		} else if (context->ffdc_dev && (buf[0] == 0x68)) {
[...]
+		} else if (keycode == KEY_CHANNELUP &&
[...]
+		} else if (keycode == KEY_CHANNELDOWN &&
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1546: FILE: drivers/input/lirc/lirc_imon.c:1456:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!idev"
#1550: FILE: drivers/input/lirc/lirc_imon.c:1460:
+			if (idev == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#1552: FILE: drivers/input/lirc/lirc_imon.c:1462:
+				dev_warn(dev, "%s: idev input device "
+					 "is NULL!\n", __func__);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len == 5'
#1583: FILE: drivers/input/lirc/lirc_imon.c:1493:
+	if ((len == 5) && (buf[0] == 0x01) && (buf[4] == 0x00)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[0] == 0x01'
#1583: FILE: drivers/input/lirc/lirc_imon.c:1493:
+	if ((len == 5) && (buf[0] == 0x01) && (buf[4] == 0x00)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[4] == 0x00'
#1583: FILE: drivers/input/lirc/lirc_imon.c:1493:
+	if ((len == 5) && (buf[0] == 0x01) && (buf[4] == 0x00)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1585: FILE: drivers/input/lirc/lirc_imon.c:1495:
+		buf[5] = buf[6] = buf[7] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'tendancy' may be misspelled - perhaps 'tendency'?
#1600: FILE: drivers/input/lirc/lirc_imon.c:1510:
+		 * diagonals, it has a tendancy to jump back and forth, so lets
 		                       ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'buf[1] == 0'
#1604: FILE: drivers/input/lirc/lirc_imon.c:1514:
+			if ((buf[1] == 0) && ((rel_x != 0) || (rel_y != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rel_x != 0'
#1604: FILE: drivers/input/lirc/lirc_imon.c:1514:
+			if ((buf[1] == 0) && ((rel_x != 0) || (rel_y != 0))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rel_y != 0'
#1604: FILE: drivers/input/lirc/lirc_imon.c:1514:
+			if ((buf[1] == 0) && ((rel_x != 0) || (rel_y != 0))) {

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#1637: FILE: drivers/input/lirc/lirc_imon.c:1547:
+		 * with reversed endianess. Extract direction from buffer,
 		                 ^^^^^^^^^

WARNING:TYPO_SPELLING: 'endianess' may be misspelled - perhaps 'endianness'?
#1638: FILE: drivers/input/lirc/lirc_imon.c:1548:
+		 * rotate endianess, adjust sign and feed the values into
 		          ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1651: FILE: drivers/input/lirc/lirc_imon.c:1561:
+			rel_x |= ~0x10+1;
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1656: FILE: drivers/input/lirc/lirc_imon.c:1566:
+			rel_y |= ~0x10+1;
 			              ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1659: FILE: drivers/input/lirc/lirc_imon.c:1569:
+		buf[1] = buf[4] = buf[5] = buf[6] = buf[7] = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1702: FILE: drivers/input/lirc/lirc_imon.c:1612:
+		static struct timeval prev_time = { 0, 0 };
+		if (debug) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1703: FILE: drivers/input/lirc/lirc_imon.c:1613:
+			printk(KERN_INFO "intf%d decoded packet: ", intf);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1705: FILE: drivers/input/lirc/lirc_imon.c:1615:
+				printk("%02x ", buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1706: FILE: drivers/input/lirc/lirc_imon.c:1616:
+			printk("\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1715: FILE: drivers/input/lirc/lirc_imon.c:1625:
+		else if (ir_protocol == IMON_IR_PROTOCOL_MCE && buf[0] == 0x80
+			 && buf[2] != context->last_mce_byte)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1720: FILE: drivers/input/lirc/lirc_imon.c:1630:
+		else if (ir_protocol == IMON_IR_PROTOCOL_MCE && buf[0] == 0x80
+			 && seen_first) {

WARNING:SPLIT_STRING: quoted string split across lines
#1765: FILE: drivers/input/lirc/lirc_imon.c:1675:
+		dev_warn(dev, "imon %s: invalid incoming packet "
+			 "size (len = %d, intf%d)\n", __func__, len, intf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1799: FILE: drivers/input/lirc/lirc_imon.c:1709:
+			printk(KERN_INFO "intf%d decoded packet: ", intf);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1801: FILE: drivers/input/lirc/lirc_imon.c:1711:
+			printk(KERN_INFO "raw packet: ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1803: FILE: drivers/input/lirc/lirc_imon.c:1713:
+			printk("%02x ", buf[i]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1804: FILE: drivers/input/lirc/lirc_imon.c:1714:
+		printk("\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1840: FILE: drivers/input/lirc/lirc_imon.c:1750:
+			int curr_bit = !(buf[octet] & mask);
+			if (curr_bit != context->rx.prev_bit) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#1879: FILE: drivers/input/lirc/lirc_imon.c:1789:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1918: FILE: drivers/input/lirc/lirc_imon.c:1828:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#1954: FILE: drivers/input/lirc/lirc_imon.c:1864:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#2008: FILE: drivers/input/lirc/lirc_imon.c:1918:
+		dev_dbg(dev, "%s: overriding display type to %d via "
+			"modparam\n", __func__, display_type);

CHECK:CAMELCASE: Avoid CamelCase: <bNumEndpoints>
#2029: FILE: drivers/input/lirc/lirc_imon.c:1939:
+	num_endpts = iface_desc->desc.bNumEndpoints;

CHECK:CAMELCASE: Avoid CamelCase: <bInterfaceNumber>
#2030: FILE: drivers/input/lirc/lirc_imon.c:1940:
+	ifnum      = iface_desc->desc.bInterfaceNumber;

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#2031: FILE: drivers/input/lirc/lirc_imon.c:1941:
+	vendor     = le16_to_cpu(usbdev->descriptor.idVendor);

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#2032: FILE: drivers/input/lirc/lirc_imon.c:1942:
+	product    = le16_to_cpu(usbdev->descriptor.idProduct);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2052: FILE: drivers/input/lirc/lirc_imon.c:1962:
+		int ep_type;
+		ep = &iface_desc->endpoint[i].desc;

CHECK:CAMELCASE: Avoid CamelCase: <bmAttributes>
#2054: FILE: drivers/input/lirc/lirc_imon.c:1964:
+		ep_type = ep->bmAttributes & USB_ENDPOINT_XFERTYPE_MASK;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2057: FILE: drivers/input/lirc/lirc_imon.c:1967:
+		if (!ir_ep_found &&
+			ep_dir == USB_DIR_IN &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2059: FILE: drivers/input/lirc/lirc_imon.c:1969:
+			ep_type == USB_ENDPOINT_XFER_INT) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#2082: FILE: drivers/input/lirc/lirc_imon.c:1992:
+			dev_dbg(dev, "%s: device uses control endpoint, not "
+				"interface OUT endpoint\n", __func__);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*context)...) over kzalloc(sizeof(struct imon_context)...)
#2129: FILE: drivers/input/lirc/lirc_imon.c:2039:
+		context = kzalloc(sizeof(struct imon_context), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*driver)...) over kzalloc(sizeof(struct lirc_driver)...)
#2135: FILE: drivers/input/lirc/lirc_imon.c:2045:
+		driver = kzalloc(sizeof(struct lirc_driver), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rbuf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#2141: FILE: drivers/input/lirc/lirc_imon.c:2051:
+		rbuf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

CHECK:BRACES: Unbalanced braces around else statement
#2199: FILE: drivers/input/lirc/lirc_imon.c:2109:
+		} else

WARNING:SPLIT_STRING: quoted string split across lines
#2201: FILE: drivers/input/lirc/lirc_imon.c:2111:
+			dev_info(dev, "Registered iMON driver "
+				 "(lirc minor: %d)\n", lirc_minor);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2267: FILE: drivers/input/lirc/lirc_imon.c:2177:
+			u16 kc = imon_remote_key_table[i].keycode;
+			__set_bit(kc, context->idev->keybit);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2271: FILE: drivers/input/lirc/lirc_imon.c:2181:
+			u16 kc = imon_panel_key_table[i].keycode;
+			__set_bit(kc, context->idev->keybit);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2275: FILE: drivers/input/lirc/lirc_imon.c:2185:
+			u16 kc = imon_mce_key_table[i].keycode;
+			__set_bit(kc, context->idev->keybit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2286: FILE: drivers/input/lirc/lirc_imon.c:2196:
+		usb_fill_int_urb(context->rx_urb_intf0, context->usbdev_intf0,
+			usb_rcvintpipe(context->usbdev_intf0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: drivers/input/lirc/lirc_imon.c:2197:
+			usb_rcvintpipe(context->usbdev_intf0,
+				context->rx_endpoint_intf0->bEndpointAddress),

CHECK:BRACES: braces {} should be used on all arms of this statement
#2307: FILE: drivers/input/lirc/lirc_imon.c:2217:
+		if (context->display_type == IMON_DISPLAY_TYPE_VGA) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#2338: FILE: drivers/input/lirc/lirc_imon.c:2248:
+				dev_info(dev, "%s: touchscreen input device "
+					 "setup failed\n", __func__);

CHECK:BRACES: Unbalanced braces around else statement
#2339: FILE: drivers/input/lirc/lirc_imon.c:2249:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2343: FILE: drivers/input/lirc/lirc_imon.c:2253:
+		usb_fill_int_urb(context->rx_urb_intf1, context->usbdev_intf1,
+			usb_rcvintpipe(context->usbdev_intf1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2344: FILE: drivers/input/lirc/lirc_imon.c:2254:
+			usb_rcvintpipe(context->usbdev_intf1,
+				context->rx_endpoint_intf1->bEndpointAddress),

WARNING:SPLIT_STRING: quoted string split across lines
#2384: FILE: drivers/input/lirc/lirc_imon.c:2294:
+			dev_info(dev, "%s: could not get a minor number for "
+				 "display\n", __func__);

WARNING:SPLIT_STRING: quoted string split across lines
#2393: FILE: drivers/input/lirc/lirc_imon.c:2303:
+			dev_info(dev, "%s: failed to enable front-panel "
+				 "buttons and/or knobs\n", __func__);

WARNING:SPLIT_STRING: quoted string split across lines
#2400: FILE: drivers/input/lirc/lirc_imon.c:2310:
+	dev_info(dev, "iMON device (%04x:%04x, intf%d) on "
+		 "usb<%d:%d> initialized\n", vendor, product, ifnum,

CHECK:BRACES: braces {} should be used on all arms of this statement
#2480: FILE: drivers/input/lirc/lirc_imon.c:2390:
+	if (!context->ir_isopen && !context->dev_present_intf0 &&
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2487: FILE: drivers/input/lirc/lirc_imon.c:2397:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2492: FILE: drivers/input/lirc/lirc_imon.c:2402:
+	printk(KERN_INFO "%s: iMON device (intf%d) disconnected\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2517: FILE: drivers/input/lirc/lirc_imon.c:2427:
+		usb_fill_int_urb(context->rx_urb_intf0, context->usbdev_intf0,
+			usb_rcvintpipe(context->usbdev_intf0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2518: FILE: drivers/input/lirc/lirc_imon.c:2428:
+			usb_rcvintpipe(context->usbdev_intf0,
+				context->rx_endpoint_intf0->bEndpointAddress),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2527: FILE: drivers/input/lirc/lirc_imon.c:2437:
+		usb_fill_int_urb(context->rx_urb_intf1, context->usbdev_intf1,
+			usb_rcvintpipe(context->usbdev_intf1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2528: FILE: drivers/input/lirc/lirc_imon.c:2438:
+			usb_rcvintpipe(context->usbdev_intf1,
+				context->rx_endpoint_intf1->bEndpointAddress),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2543: FILE: drivers/input/lirc/lirc_imon.c:2453:
+	printk(KERN_INFO MOD_NAME ": " MOD_DESC ", v" MOD_VERSION "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2557: FILE: drivers/input/lirc/lirc_imon.c:2467:
+	printk(KERN_INFO MOD_NAME ": module removed. Goodbye!\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2567: FILE: drivers/input/lirc/lirc_imon.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2585: FILE: drivers/input/lirc/lirc_imon.h:19:
+ *   along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2586: FILE: drivers/input/lirc/lirc_imon.h:20:
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2706: FILE: drivers/input/lirc/lirc_imon.h:140:
+/* the OK and Enter buttons decode to the same value
+	{ 0x02000028, KEY_OK }, */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2706: FILE: drivers/input/lirc/lirc_imon.h:140:
+	{ 0x02000028, KEY_OK }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2762: FILE: drivers/input/lirc/lirc_imon.h:196:
+/* the TV key on my panel is broken, doesn't work under any OS
+	{ 0x0000000000000fee, KEY_TV }, */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2762: FILE: drivers/input/lirc/lirc_imon.h:196:
+	{ 0x0000000000000fee, KEY_TV }, */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057375.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 66 warnings, 76 checks, 2697 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000057375.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
