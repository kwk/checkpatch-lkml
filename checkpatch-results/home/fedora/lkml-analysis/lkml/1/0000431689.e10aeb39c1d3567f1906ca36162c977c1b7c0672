WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
are maintained in a cache. Subsequently when the entries from the bottom layers

WARNING:TYPO_SPELLING: 'maitained' may be misspelled - perhaps 'maintained'?
#40: 
And union directory cache is maitained across these calls.
                             ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'to'
#70: FILE: fs/aio.c:492:
+		 * __fput no longer releases the dentry and vfsmnt, thanks to
+		 * to union mount. Hence do this manually.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#133: FILE: fs/read_write.c:130:
+	if (S_ISDIR(file->f_path.dentry->d_inode->i_mode) &&
+			unlikely(file->f_path.dentry->d_overlaid))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#225: FILE: fs/union.c:1012:
+		printk(KERN_CRIT

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#225: FILE: fs/union.c:1012:
+	if (!this) {
+		printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'union_cache_add_entry', this function's name, in a string
#226: FILE: fs/union.c:1013:
+		       "union_cache_add_entry(): out of kernel memory\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#232: FILE: fs/union.c:1019:
+		printk(KERN_CRIT

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#232: FILE: fs/union.c:1019:
+	if (!tmp_name) {
+		printk(KERN_CRIT

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'union_cache_add_entry', this function's name, in a string
#233: FILE: fs/union.c:1020:
+		       "union_cache_add_entry(): out of kernel memory\n");

WARNING:RETURN_VOID: void function return statements are not generally useful
#265: FILE: fs/union.c:1052:
+	return;
+}

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#301: FILE: fs/union.c:1088:
+static struct file * __dentry_open_read(struct dentry *dentry,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: fs/union.c:1100:
+	f->f_mode = ((flags+1) & O_ACCMODE) | FMODE_LSEEK |
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: fs/union.c:1103:
+	BUG_ON(f->f_mode & FMODE_WRITE);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required after that ',' (ctx:VxV)
#325: FILE: fs/union.c:1112:
+		error = f->f_op->open(inode,f);
 		                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: fs/union.c:1145:
+static int filldir_union(void *buf, const char *name, int namlen,
+			   loff_t offset, u64 ino, unsigned int d_type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#406: FILE: fs/union.c:1193:
+		struct rdstate *r = list_entry(pos, struct rdstate, list);
+		put_rdstate(r);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*r)...) over kmalloc(sizeof(struct rdstate)...)
#437: FILE: fs/union.c:1224:
+	r = kmalloc(sizeof(struct rdstate), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#469: FILE: fs/union.c:1256:
+	BUG_ON(!topmost->d_union);

CHECK:BRACES: braces {} should be used on all arms of this statement
#488: FILE: fs/union.c:1275:
+	if (dentry == topmost) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: fs/union.c:1288:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#505: FILE: fs/union.c:1292:
+	BUG_ON(dentry->d_topmost != topmost);

WARNING:TYPO_SPELLING: 'afterall' may be misspelled - perhaps 'after all'?
#561: FILE: fs/union.c:1348:
+ * seek operations afterall.
                    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: fs/union.c:1362:
+		BUG_ON(!topmost->d_union);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#638: FILE: include/linux/union.h:34:
+extern int readdir_union(struct file *, void *, filldir_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#638: FILE: include/linux/union.h:34:
+extern int readdir_union(struct file *, void *, filldir_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#638: FILE: include/linux/union.h:34:
+extern int readdir_union(struct file *, void *, filldir_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'filldir_t' should also have an identifier name
#638: FILE: include/linux/union.h:34:
+extern int readdir_union(struct file *, void *, filldir_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#640: FILE: include/linux/union.h:36:
+extern loff_t union_dir_llseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#640: FILE: include/linux/union.h:36:
+extern loff_t union_dir_llseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#640: FILE: include/linux/union.h:36:
+extern loff_t union_dir_llseek(struct file *, loff_t, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#640: FILE: include/linux/union.h:36:
+extern loff_t union_dir_llseek(struct file *, loff_t, int);

CHECK:BRACES: Unbalanced braces around else statement
#659: FILE: include/linux/union.h:96:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431689.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 22 warnings, 9 checks, 583 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431689.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
