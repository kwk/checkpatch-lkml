WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/logfs/progs/mkfs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#83: FILE: fs/logfs/progs/mkfs.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#84: FILE: fs/logfs/progs/mkfs.c:39:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#128: FILE: fs/logfs/progs/mkfs.c:83:
+static size_t __write_header(struct logfs_journal_header *h, size_t len,
+		size_t datalen, u16 type, u8 compr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: fs/logfs/progs/mkfs.c:98:
+static size_t write_header(struct logfs_journal_header *h, size_t datalen,
+		u16 type)

WARNING:LINE_SPACING: Missing a blank line after declarations
#146: FILE: fs/logfs/progs/mkfs.c:101:
+	size_t len = datalen + sizeof(*h);
+	return __write_header(h, len, datalen, type, COMPR_NONE);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#162: FILE: fs/logfs/progs/mkfs.c:117:
+	da->da_size	= cpu_to_be64((LOGFS_INO_ROOT+1) * blocksize);
 	           	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#163: FILE: fs/logfs/progs/mkfs.c:118:
+#if 0

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#165: FILE: fs/logfs/progs/mkfs.c:120:
+	da->da_data[LOGFS_INO_ROOT] = cpu_to_be64(3*segsize);
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/logfs/progs/mkfs.c:145:
+static size_t write_je(size_t jpos, void *scratch, void *header,
+		size_t (*write)(void *scratch, u16 *type))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'compr_len < 0'
#206: FILE: fs/logfs/progs/mkfs.c:161:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type == JE_ANCHOR'
#206: FILE: fs/logfs/progs/mkfs.c:161:
+	if ((compr_len < 0) || (type == JE_ANCHOR)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#207: FILE: fs/logfs/progs/mkfs.c:162:
+		BUG_ON(len > max);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#227: FILE: fs/logfs/progs/mkfs.c:182:
+	journal = kzalloc(2*blocksize, GFP_KERNEL);
 	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#264: FILE: fs/logfs/progs/mkfs.c:219:
+	ds->ds_feature_ro_compat= 0;
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: fs/logfs/progs/mkfs.c:246:
+static void getsize(struct super_block *sb, u64 *size,
+		u64 *no_segs)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#301: FILE: fs/logfs/progs/mkfs.c:256:
+	int k, seg=0;
 	          ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#305: FILE: fs/logfs/progs/mkfs.c:260:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#305: FILE: fs/logfs/progs/mkfs.c:260:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	               ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#305: FILE: fs/logfs/progs/mkfs.c:260:
+	for (ofs=0; ofs<fssize; ofs+=segsize) {
 	                           ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#308: FILE: fs/logfs/progs/mkfs.c:263:
+		for (k=0; k<segsize; k+=mtd->erasesize) {
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#308: FILE: fs/logfs/progs/mkfs.c:263:
+		for (k=0; k<segsize; k+=mtd->erasesize) {
 		           ^

ERROR:SPACING: spaces required around that '+=' (ctx:VxV)
#308: FILE: fs/logfs/progs/mkfs.c:263:
+		for (k=0; k<segsize; k+=mtd->erasesize) {
 		                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#310: FILE: fs/logfs/progs/mkfs.c:265:
+			bad = bad ? : mtd->block_isbad(mtd, ofs+k);
 			                                       ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#350: FILE: fs/logfs/progs/mkfs.c:305:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 7 warnings, 11 checks, 324 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000423168.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
