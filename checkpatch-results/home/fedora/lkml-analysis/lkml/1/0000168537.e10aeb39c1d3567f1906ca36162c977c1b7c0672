WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-fixes-for-linus

WARNING:TYPO_SPELLING: 'occurances' may be misspelled - perhaps 'occurrences'?
#192: FILE: arch/x86/Kconfig.cpu:328:
+	  occurances of this problem, at the cost of much heavier spinlock and
 	  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#232: FILE: arch/x86/include/asm/cpufeature.h:96:
+#define X86_FEATURE_CLFLUSH_MONITOR (3*32+25) /* "" clflush reqd with monitor */
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#232: FILE: arch/x86/include/asm/cpufeature.h:96:
+#define X86_FEATURE_CLFLUSH_MONITOR (3*32+25) /* "" clflush reqd with monitor */
                                          ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: arch/x86/include/asm/mpspec.h:63:
+extern int acpi_probe_gsi(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs' should also have an identifier name
#383: FILE: arch/x86/include/asm/traps.h:44:
+dotraplinkage void do_device_not_available(struct pt_regs);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct math_emu_info *' should also have an identifier name
#392: FILE: arch/x86/include/asm/traps.h:80:
+void math_emulate(struct math_emu_info *);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#531: FILE: arch/x86/kernel/io_apic.c:3861:
+	printk(KERN_DEBUG "nr_irqs_gsi: %d\n", nr_irqs_gsi);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#583: FILE: arch/x86/kernel/process_64.c:162:
+	printk(KERN_INFO "Pid: %d, comm: %.20s %s %s %.*s %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: arch/x86/kernel/process_64.c:163:
+	printk(KERN_INFO "Pid: %d, comm: %.20s %s %s %.*s %s\n",
 		current->pid, current->comm, print_tainted(),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#713: FILE: arch/x86/math-emu/fpu_proto.h:54:
+extern void math_emulate(struct math_emu_info *info);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#714: FILE: arch/x86/math-emu/fpu_proto.h:55:
+extern void math_abort(struct math_emu_info *info, unsigned int signal);

CHECK:SPACING: No space is necessary after a cast
#743: FILE: arch/x86/math-emu/fpu_system.h:37:
+#define FPU_CS			(*(unsigned short *) &(FPU_info->regs->cs))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around FPU_info->regs->cs
#743: FILE: arch/x86/math-emu/fpu_system.h:37:
+#define FPU_CS			(*(unsigned short *) &(FPU_info->regs->cs))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#744: FILE: arch/x86/math-emu/fpu_system.h:38:
+#define FPU_SS			(*(unsigned short *) &(FPU_info->regs->ss))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around FPU_info->regs->ss
#744: FILE: arch/x86/math-emu/fpu_system.h:38:
+#define FPU_SS			(*(unsigned short *) &(FPU_info->regs->ss))

CHECK:SPACING: No space is necessary after a cast
#745: FILE: arch/x86/math-emu/fpu_system.h:39:
+#define FPU_DS			(*(unsigned short *) &(FPU_info->regs->ds))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around FPU_info->regs->ds
#745: FILE: arch/x86/math-emu/fpu_system.h:39:
+#define FPU_DS			(*(unsigned short *) &(FPU_info->regs->ds))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#803: FILE: arch/x86/math-emu/get_address.c:55:
+		(reg_offset_vm86[((unsigned)x)] + (u_char *)FPU_info->regs))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#824: FILE: arch/x86/math-emu/get_address.c:68:
+		(reg_offset_pm[((unsigned)x)] + (u_char *)FPU_info->regs))

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#881: FILE: drivers/pci/intel-iommu.c:272:
+int dmar_disabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#896: FILE: drivers/pci/intel-iommu.c:294:
+			printk(KERN_INFO "Intel-IOMMU: enabled\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#900: FILE: drivers/pci/intel-iommu.c:297:
+			printk(KERN_INFO "Intel-IOMMU: disabled\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 10 warnings, 12 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000168537.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
