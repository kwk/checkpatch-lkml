CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#59: FILE: arch/ia64/sn/kernel/huberror.c:189:
 {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#72: FILE: arch/ia64/sn/kernel/huberror.c:200:
+	 * are targetted at the boot CPU.
 	       ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#84: FILE: arch/ia64/sn/kernel/huberror.c:217:
 {
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: arch/ia64/sn/kernel/huberror.c:220:
+             (void *)hubdev_info)) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: arch/ia64/sn/kernel/huberror.c:220:
+             (void *)hubdev_info)) {$

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#98: FILE: arch/ia64/sn/kernel/huberror.c:229:
+	 * are targetted at the boot CPU.
 	       ^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#124: FILE: arch/ia64/sn/pci/pcibr/pcibr_provider.c:153:
+	 * are targetted at the boot CPU.
 	       ^^^^^^^^^

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#152: FILE: arch/ia64/sn/pci/tioca_provider.c:660:
+	 * are targetted at the boot CPU.
 	       ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#177: FILE: arch/ia64/sn/pci/tioce_provider.c:1038:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'targetted' may be misspelled - perhaps 'targeted'?
#181: FILE: arch/ia64/sn/pci/tioce_provider.c:1042:
+	 * are targetted at the boot CPU.
 	       ^^^^^^^^^

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#255: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:446:
+			return true;
+		else

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#256: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:447:
+			printk("Disabling the boot processor is not allowed.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#259: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:450:
+		printk("CPU disable is not supported on this system.\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#276: FILE: include/asm-ia64/sn/arch.h:84:
+extern bool sn_cpu_disable_allowed(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397876.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 9 warnings, 4 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000397876.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
