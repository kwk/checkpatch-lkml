WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Subject: [PATCH] [Target_Core_Mod/ConfigFS]: Added storage object attributes

WARNING:TYPO_SPELLING: 'limitiations' may be misspelled - perhaps 'limitations'?
#91: 
limitiations.
^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#134: FILE: drivers/lio-core/target_core_configfs.c:522:
+#define DEF_DEV_ATTRIB_SHOW(_name)						\
+static ssize_t target_core_dev_show_attr_##_name (				\
+	struct se_dev_attrib_s *da,						\
+	char *page)								\
+{										\
+	se_device_t *dev;							\
+	se_subsystem_dev_t *se_dev = da->da_sub_dev;				\
+	ssize_t rb;								\
+										\
+	spin_lock(&se_dev->se_dev_lock);					\
+	if (!(dev = se_dev->se_dev_ptr)) {					\
+		spin_unlock(&se_dev->se_dev_lock); 				\
+		return(-ENODEV);						\
+	}									\
+	rb = snprintf(page, PAGE_SIZE, "%u\n", (u32)DEV_ATTRIB(dev)->_name);	\
+	spin_unlock(&se_dev->se_dev_lock);					\
+										\
+	return(rb);								\
+}									

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#135: FILE: drivers/lio-core/target_core_configfs.c:523:
+static ssize_t target_core_dev_show_attr_##_name (				\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#144: FILE: drivers/lio-core/target_core_configfs.c:532:
+	if (!(dev = se_dev->se_dev_ptr)) {					\

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#145: FILE: drivers/lio-core/target_core_configfs.c:533:
+^I^Ispin_unlock(&se_dev->se_dev_lock); ^I^I^I^I\$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#152: FILE: drivers/lio-core/target_core_configfs.c:540:
+}^I^I^I^I^I^I^I^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#155: FILE: drivers/lio-core/target_core_configfs.c:543:
+static ssize_t target_core_dev_store_attr_##_name (				\

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#167: FILE: drivers/lio-core/target_core_configfs.c:555:
+	if (!(dev = se_dev->se_dev_ptr)) {					\

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#171: FILE: drivers/lio-core/target_core_configfs.c:559:
+	val = simple_strtoul(page, &endptr, 0);					\

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#178: FILE: drivers/lio-core/target_core_configfs.c:566:
+#define DEF_DEV_ATTRIB(_name)							\
+DEF_DEV_ATTRIB_SHOW(_name);							\
+DEF_DEV_ATTRIB_STORE(_name);

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#178: FILE: drivers/lio-core/target_core_configfs.c:566:
+#define DEF_DEV_ATTRIB(_name)							\
+DEF_DEV_ATTRIB_SHOW(_name);							\
+DEF_DEV_ATTRIB_STORE(_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#178: FILE: drivers/lio-core/target_core_configfs.c:566:
+#define DEF_DEV_ATTRIB(_name)							\
+DEF_DEV_ATTRIB_SHOW(_name);							\
+DEF_DEV_ATTRIB_STORE(_name);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#182: FILE: drivers/lio-core/target_core_configfs.c:570:
+#define DEF_DEV_ATTRIB_RO(_name)						\
+DEF_DEV_ATTRIB_SHOW(_name);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#186: FILE: drivers/lio-core/target_core_configfs.c:574:
+#define SE_DEV_ATTR(_name, _mode)						\
+static struct target_core_dev_attrib_attribute target_core_dev_attrib_##_name = \
+		__CONFIGFS_EATTR(_name, _mode,					\
+		target_core_dev_show_attr_##_name,				\
+		target_core_dev_store_attr_##_name);		

ERROR:TRAILING_WHITESPACE: trailing whitespace
#190: FILE: drivers/lio-core/target_core_configfs.c:578:
+^I^Itarget_core_dev_store_attr_##_name);^I^I$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#192: FILE: drivers/lio-core/target_core_configfs.c:580:
+#define SE_DEV_ATTR_RO(_name);							\
+static struct target_core_dev_attrib_attribute target_core_dev_attrib_##_name = \
+		__CONFIGFS_EATTR_RO(_name,					\
+		target_core_dev_show_attr_##_name);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#198: FILE: drivers/lio-core/target_core_configfs.c:586:
+SE_DEV_ATTR(status_thread, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#201: FILE: drivers/lio-core/target_core_configfs.c:589:
+SE_DEV_ATTR(status_thread_tur, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#207: FILE: drivers/lio-core/target_core_configfs.c:595:
+SE_DEV_ATTR(max_sectors, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#213: FILE: drivers/lio-core/target_core_configfs.c:601:
+SE_DEV_ATTR(queue_depth, S_IRUGO | S_IWUSR);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#216: FILE: drivers/lio-core/target_core_configfs.c:604:
+SE_DEV_ATTR(task_timeout, S_IRUGO | S_IWUSR);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: drivers/lio-core/target_core_configfs.c:626:
+^I.ct_attrs^I^I= target_core_dev_attrib_attrs,^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#239: FILE: drivers/lio-core/target_core_configfs.c:627:
+^I.ct_owner^I^I= THIS_MODULE,^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#274: FILE: drivers/lio-core/target_core_configfs.c:877:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dev_cg->default_groups)...) over kzalloc(sizeof(struct config_group)...)
#274: FILE: drivers/lio-core/target_core_configfs.c:877:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/lio-core/target_core_configfs.c:878:
+	if (!(dev_cg->default_groups = kzalloc(sizeof(struct config_group) * 2,
+			GFP_KERNEL)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: drivers/lio-core/target_core_configfs.c:891:
+	config_group_init_type_name(&se_dev->se_dev_group, name,
+			&target_core_dev_cit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: drivers/lio-core/target_core_configfs.c:893:
+	config_group_init_type_name(&se_dev->se_dev_attrib.da_group, "attrib",
+			&target_core_dev_attrib_cit);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212517.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 15 warnings, 6 checks, 190 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000212517.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
