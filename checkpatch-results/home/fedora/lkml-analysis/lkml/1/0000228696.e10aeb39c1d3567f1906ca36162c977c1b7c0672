WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
Collect dirty file and writeback pages to be used by memory cgroup dirty_ratio

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: include/linux/memcontrol.h:53:
+extern void put_mem_cgroup(struct mem_cgroup *mem);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: include/linux/memcontrol.h:55:
+extern unsigned long mem_cgroup_global_lru_pages(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#254: FILE: include/linux/memcontrol.h:56:
+extern unsigned long mem_cgroup_get_free_pages(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#255: FILE: include/linux/memcontrol.h:57:
+extern long mem_cgroup_dirty_ratio(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#257: FILE: include/linux/memcontrol.h:59:
+extern void mem_cgroup_charge_file_dirty(struct page *page, int charge);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: include/linux/memcontrol.h:60:
+extern s64 mem_cgroup_nr_file_dirty(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: include/linux/memcontrol.h:62:
+extern void mem_cgroup_charge_writeback(struct page *page, int charge);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: include/linux/memcontrol.h:63:
+extern s64 mem_cgroup_nr_writeback(struct mem_cgroup *mem);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/memcontrol.c:62:
+static void __mem_cgroup_stat_add(struct mem_cgroup_stat *stat,
+		enum mem_cgroup_stat_index idx, int val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: mm/memcontrol.c:65:
+	int cpu = get_cpu();
+	stat->cpustat[cpu].count[idx] += val;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: mm/memcontrol.c:391:
+static void mem_cgroup_charge_stat(struct page *page,
+			enum mem_cgroup_stat_index idx, int charge)

CHECK:BRACES: braces {} should be used on all arms of this statement
#449: FILE: mm/memcontrol.c:415:
+	if (mem == NULL) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#449: FILE: mm/memcontrol.c:415:
+	if (mem == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#454: FILE: mm/memcontrol.c:420:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#465: FILE: mm/memcontrol.c:431:
+	if (mem == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#465: FILE: mm/memcontrol.c:431:
+	if (mem == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#469: FILE: mm/memcontrol.c:435:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#480: FILE: mm/memcontrol.c:446:
+	if (mem == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#480: FILE: mm/memcontrol.c:446:
+	if (mem == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#484: FILE: mm/memcontrol.c:450:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#497: FILE: mm/memcontrol.c:463:
+	if (mem == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#497: FILE: mm/memcontrol.c:463:
+	if (mem == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#501: FILE: mm/memcontrol.c:467:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#515: FILE: mm/memcontrol.c:481:
+	if (mem == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mem"
#515: FILE: mm/memcontrol.c:481:
+	if (mem == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#519: FILE: mm/memcontrol.c:485:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#539: FILE: mm/memcontrol.c:1093:
+static int mem_cgroup_dirty_ratio_write(struct cgroup *cont, struct cftype *cft,
+			const char *buffer)

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#545: FILE: mm/memcontrol.c:1099:
+	ret = strict_strtol(buffer, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228696.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 26 checks, 513 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000228696.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
