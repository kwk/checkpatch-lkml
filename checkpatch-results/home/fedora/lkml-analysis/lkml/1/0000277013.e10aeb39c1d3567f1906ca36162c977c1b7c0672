WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
  Split LRU-list of unused dentries to each superblocks to avoid soft lock up

WARNING:TYPO_SPELLING: 'Previosly' may be misspelled - perhaps 'Previously'?
#32: 
 Previosly I posted are:
 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'differnt' may be misspelled - perhaps 'different'?
#44: 
 under spin_lock(), and if dentry->d_sb is differnt from given superblock,
                                           ^^^^^^^^

WARNING:TYPO_SPELLING: 'spliting' may be misspelled - perhaps 'splitting'?
#72: 
 But this spliting will break LRU of dentry-unused.
          ^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#96: 
# mount -t nfs 10.124.60.70:/work/kernel-src nfs

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
# mount -t nfs 10.124.60.70:/work/kernel-src nfs

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#280: FILE: fs/dcache.c:455:
+	BUG_ON(!sb);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: fs/dcache.c:456:
+	BUG_ON((flags & DCACHE_REFERENCED) && count == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!count"
#281: FILE: fs/dcache.c:456:
+	BUG_ON((flags & DCACHE_REFERENCED) && count == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "count"
#283: FILE: fs/dcache.c:458:
+	if (count != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: fs/dcache.c:462:
+	if (count == NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!count"
#287: FILE: fs/dcache.c:462:
+	if (count == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#289: FILE: fs/dcache.c:464:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: fs/dcache.c:467:
+			dentry = list_entry(sb->s_dentry_lru.prev,
+					struct dentry, d_lru);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: fs/dcache.c:468:
+			BUG_ON(dentry->d_sb != sb);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#302: FILE: fs/dcache.c:477:
+			if ((flags & DCACHE_REFERENCED)
+				&& (dentry->d_flags & DCACHE_REFERENCED)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == NULL'
#332: FILE: fs/dcache.c:507:
+	if ((count == NULL) && (!list_empty(&sb->s_dentry_lru)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!count"
#332: FILE: fs/dcache.c:507:
+	if ((count == NULL) && (!list_empty(&sb->s_dentry_lru)))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "count"
#334: FILE: fs/dcache.c:509:
+	if (count != NULL)

WARNING:TYPO_SPELLING: 'impelementation' may be misspelled - perhaps 'implementation'?
#428: FILE: fs/dcache.c:553:
+		 * based on following way, but impelementation is arranged
 		                               ^^^^^^^^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sb->s_root != NULL'
#469: FILE: fs/dcache.c:573:
+			if ((sb->s_root != NULL) &&
+			    (!list_empty(&sb->s_dentry_lru))) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sb->s_root"
#469: FILE: fs/dcache.c:573:
+			if ((sb->s_root != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#473: FILE: fs/dcache.c:577:
+				__shrink_dcache_sb(sb, &w_count,
+						DCACHE_REFERENCED);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 13 checks, 477 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000277013.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
