WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#77: FILE: lib/Kconfig.debug:176:
+config KMEMPROF
+	bool "Kernel memory profiling support"
+	depends on SLUB
+	default n
+	help
+	  Say Y here to have the kernel track every memory allocation in
+	  the kernel.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#108: FILE: include/linux/slab.h:100:
+void kmem_track_free(void *, const void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#108: FILE: include/linux/slab.h:100:
+void kmem_track_free(void *, const void *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#282: FILE: Documentation/kmemprof/kmemprof.c:1:
+#include <errno.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#339: FILE: Documentation/kmemprof/kmemprof.c:58:
+	fd = open(filename, O_CREAT | O_RDWR | O_TRUNC,
+			S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0644'.
#339: FILE: Documentation/kmemprof/kmemprof.c:58:
+			S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#347: FILE: Documentation/kmemprof/kmemprof.c:66:
+	unsigned long cpu = (unsigned long) data;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: Documentation/kmemprof/kmemprof.c:121:
+		err = pthread_create(&readers[i], NULL, reader_thread,
+				(void *) i);

CHECK:SPACING: No space is necessary after a cast
#402: FILE: Documentation/kmemprof/kmemprof.c:121:
+				(void *) i);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#424: FILE: Documentation/kmemprof/kmemprof.pl:2:
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#553: FILE: mm/kmemprof.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#596: FILE: mm/kmemprof.c:44:
+			.call_site	= (u64) call_site,

CHECK:SPACING: No space is necessary after a cast
#597: FILE: mm/kmemprof.c:45:
+			.ptr		= (u64) p,

CHECK:SPACING: No space is necessary after a cast
#612: FILE: mm/kmemprof.c:60:
+			.call_site	= (u64) call_site,

CHECK:SPACING: No space is necessary after a cast
#613: FILE: mm/kmemprof.c:61:
+			.ptr		= (u64) p,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#623: FILE: mm/kmemprof.c:71:
+#define KMEMPROF_MODE (S_IFREG | S_IRUSR | S_IWUSR)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: mm/kmemprof.c:106:
+	kmemprof_chan = relay_open("cpu", kmemprof_dir, KMEMPROF_SUBBUF_SIZE,
+				KMEMPROF_NR_SUBBUFS, &relay_callbacks, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#663: FILE: mm/kmemprof.c:111:
+	kmemprof_enabled_file = debugfs_create_bool("enabled", KMEMPROF_MODE,
+					kmemprof_dir, &kmemprof_enabled);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#669: FILE: mm/kmemprof.c:117:
+	printk(KERN_ERR "kmemprof: failed to initialize debugfs.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 10 checks, 559 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000340541.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
