WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: security/tomoyo/file.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#45: FILE: security/tomoyo/file.c:2:
+ * security/tomoyo/file.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#56: FILE: security/tomoyo/file.c:13:
+#define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#60: FILE: security/tomoyo/file.c:17:
+extern struct semaphore domain_acl_lock;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(acl_type_array)
#113: FILE: security/tomoyo/file.c:70:
+	return (acl_type < sizeof(acl_type_array) / sizeof(acl_type_array[0]))

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(acl_type_array)
#119: FILE: security/tomoyo/file.c:76:
+	return (acl_type < sizeof(acl_type_array) / sizeof(acl_type_array[0]))

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(acl_type_array)
#125: FILE: security/tomoyo/file.c:82:
+	if (index < (sizeof(acl_type_array) / sizeof(acl_type_array[0])) - 1)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#127: FILE: security/tomoyo/file.c:84:
+	printk("%s: Index %u is out of range. Fix the kernel source.\n", __FUNCTION__, index);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#127: FILE: security/tomoyo/file.c:84:
+	printk("%s: Index %u is out of range. Fix the kernel source.\n", __FUNCTION__, index);

WARNING:LINE_SPACING: Missing a blank line after declarations
#134: FILE: security/tomoyo/file.c:91:
+	int len;
+	if (!name || !tail) return 0;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#134: FILE: security/tomoyo/file.c:91:
+	if (!name || !tail) return 0;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#142: FILE: security/tomoyo/file.c:99:
+		struct path_info head; /* Keep this first, this pointer is passed to tomoyo_free(). */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: security/tomoyo/file.c:106:
+		int error;
+		if ((error = tomoyo_realpath_from_dentry2(dentry,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#149: FILE: security/tomoyo/file.c:106:
+		if ((error = tomoyo_realpath_from_dentry2(dentry,

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#150: FILE: security/tomoyo/file.c:107:
+^I^I                                          mnt,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#151: FILE: security/tomoyo/file.c:108:
+^I^I                                          buf->body,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#152: FILE: security/tomoyo/file.c:109:
+^I^I                                          sizeof(buf->body) - 1)) == 0) {$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#159: FILE: security/tomoyo/file.c:116:
+		printk("tomoyo_realpath_from_dentry = %d\n", error);

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: security/tomoyo/file.c:124:
+                                       const char *filename1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: security/tomoyo/file.c:124:
+                                       const char *filename1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#168: FILE: security/tomoyo/file.c:125:
+                                       const char *filename2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: security/tomoyo/file.c:125:
+                                       const char *filename2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: security/tomoyo/file.c:126:
+                                       struct domain_info * const domain,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: security/tomoyo/file.c:126:
+                                       struct domain_info * const domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: security/tomoyo/file.c:127:
+                                       const u8 is_add);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: security/tomoyo/file.c:127:
+                                       const u8 is_add);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#172: FILE: security/tomoyo/file.c:129:
+                                       const char *filename,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: security/tomoyo/file.c:129:
+                                       const char *filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: security/tomoyo/file.c:130:
+                                       struct domain_info * const domain,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: security/tomoyo/file.c:130:
+                                       struct domain_info * const domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#174: FILE: security/tomoyo/file.c:131:
+                                       const u8 is_add);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: security/tomoyo/file.c:131:
+                                       const u8 is_add);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: security/tomoyo/file.c:136:
+                                 const u8 perm,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: security/tomoyo/file.c:136:
+                                 const u8 perm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: security/tomoyo/file.c:137:
+                                 const int is_granted)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: security/tomoyo/file.c:137:
+                                 const int is_granted)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#184: FILE: security/tomoyo/file.c:141:
+	int len;
+	len = filename->total_len + 8;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#185: FILE: security/tomoyo/file.c:142:
+	if ((buf = tomoyo_init_audit_log(&len)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#185: FILE: security/tomoyo/file.c:142:
+	if ((buf = tomoyo_init_audit_log(&len)) == NULL) return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#191: FILE: security/tomoyo/file.c:148:
+                                  const struct path_info *filename1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: security/tomoyo/file.c:148:
+                                  const struct path_info *filename1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#192: FILE: security/tomoyo/file.c:149:
+                                  const struct path_info *filename2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: security/tomoyo/file.c:149:
+                                  const struct path_info *filename2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: security/tomoyo/file.c:150:
+                                  const int is_granted)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: security/tomoyo/file.c:150:
+                                  const int is_granted)$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#197: FILE: security/tomoyo/file.c:154:
+	len = strlen(operation) + filename1->total_len + (filename2 ? filename2->total_len : 0) + 16;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LINE_SPACING: Missing a blank line after declarations
#197: FILE: security/tomoyo/file.c:154:
+	int len;
+	len = strlen(operation) + filename1->total_len + (filename2 ? filename2->total_len : 0) + 16;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#198: FILE: security/tomoyo/file.c:155:
+	if ((buf = tomoyo_init_audit_log(&len)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#198: FILE: security/tomoyo/file.c:155:
+	if ((buf = tomoyo_init_audit_log(&len)) == NULL) return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#200: FILE: security/tomoyo/file.c:157:
+^I         operation, filename1->name, filename2 ? filename2->name : "");$

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: security/tomoyo/file.c:168:
+	char *cp = NULL;
+	if ((cp = strchr(data, '=')) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: security/tomoyo/file.c:168:
+	if ((cp = strchr(data, '=')) == NULL) {

WARNING:SPACING: space prohibited before semicolon
#212: FILE: security/tomoyo/file.c:169:
+	out: ;

WARNING:INDENTED_LABEL: labels should not be indented
#212: FILE: security/tomoyo/file.c:169:
+	out: ;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#213: FILE: security/tomoyo/file.c:170:
+		printk("ERROR: Invalid line '%s=%s'\n", data, cp);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#214: FILE: security/tomoyo/file.c:171:
+		printk("This line must be one of the following. The first is the default.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#215: FILE: security/tomoyo/file.c:172:
+		printk("%s=%s if you want to check this permission using this permission.\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: security/tomoyo/file.c:174:
+		printk("%s=generic-write if you want to check this permission "

WARNING:SPLIT_STRING: quoted string split across lines
#218: FILE: security/tomoyo/file.c:175:
+		printk("%s=generic-write if you want to check this permission "
+		       "using generic-write permission.\n", data);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#219: FILE: security/tomoyo/file.c:176:
+		printk("%s=no-check if you don't want to check this permission.\n", data);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#224: FILE: security/tomoyo/file.c:181:
+		if (strcmp(acl_type_array[i].keyword, data)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#225: FILE: security/tomoyo/file.c:182:
+		if (strcmp(cp, acl_type_array[i].keyword) == 0) acl_type_array[i].check_type = 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#226: FILE: security/tomoyo/file.c:183:
+		else if (strcmp(cp, "generic-write") == 0) acl_type_array[i].check_type = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#227: FILE: security/tomoyo/file.c:184:
+		else if (strcmp(cp, "no-check") == 0) acl_type_array[i].check_type = -1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#228: FILE: security/tomoyo/file.c:185:
+		else goto out;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#231: FILE: security/tomoyo/file.c:188:
+	printk("WARNING: Unprocessed line '%s=%s'\n", data, cp);

WARNING:LINE_SPACING: Missing a blank line after declarations
#239: FILE: security/tomoyo/file.c:196:
+		int i;
+		for (i = 0; acl_type_array[i].keyword; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: security/tomoyo/file.c:198:
+^I^I^I                 "%s=%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: security/tomoyo/file.c:199:
+^I^I^I                 acl_type_array[i].keyword,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#243: FILE: security/tomoyo/file.c:200:
+^I^I^I                 acl_type_array[i].check_type > 0 ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: security/tomoyo/file.c:201:
+^I^I^I                 ^Iacl_type_array[i].keyword :$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#244: FILE: security/tomoyo/file.c:201:
+^I^I^I                 ^Iacl_type_array[i].keyword :$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: security/tomoyo/file.c:202:
+^I^I^I                 ^Iacl_type_array[i].check_type == 0 ?$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: security/tomoyo/file.c:202:
+^I^I^I                 ^Iacl_type_array[i].check_type == 0 ?$

ERROR:CODE_INDENT: code indent should use tabs where possible
#246: FILE: security/tomoyo/file.c:203:
+^I^I^I                 ^I^I"generic-write" : "no-check");$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#246: FILE: security/tomoyo/file.c:203:
+^I^I^I                 ^I^I"generic-write" : "no-check");$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#255: FILE: security/tomoyo/file.c:212:
+static struct globally_readable_file_entry *globally_readable_list = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#263: FILE: security/tomoyo/file.c:220:
+	int error = -ENOMEM;
+	if (!tomoyo_is_correct_path(filename, 1, -1, -1, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: security/tomoyo/file.c:220:
+	if (!tomoyo_is_correct_path(filename, 1, -1, -1, __FUNCTION__))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#265: FILE: security/tomoyo/file.c:222:
+	if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: security/tomoyo/file.c:222:
+	if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#278: FILE: security/tomoyo/file.c:235:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#278: FILE: security/tomoyo/file.c:235:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#281: FILE: security/tomoyo/file.c:238:
+	if ((ptr = globally_readable_list) != NULL) {

WARNING:SPACING: space prohibited before semicolon
#289: FILE: security/tomoyo/file.c:246:
+ out: ;

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: security/tomoyo/file.c:254:
+	struct globally_readable_file_entry *ptr;
+	for (ptr = globally_readable_list; ptr; ptr = ptr->next) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#298: FILE: security/tomoyo/file.c:255:
+		if (!ptr->is_deleted && !tomoyo_pathcmp(filename, ptr->filename)) return 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: security/tomoyo/file.c:268:
+	struct globally_readable_file_entry *ptr = head->read_var2;
+	if (!ptr) ptr = globally_readable_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#311: FILE: security/tomoyo/file.c:268:
+	if (!ptr) ptr = globally_readable_list;

ERROR:CODE_INDENT: code indent should use tabs where possible
#315: FILE: security/tomoyo/file.c:272:
+^I^I                                         TOMOYO_KEYWORD_ALLOW_READ "%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#316: FILE: security/tomoyo/file.c:273:
+^I^I                                         ptr->filename->name))$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#325: FILE: security/tomoyo/file.c:282:
+static struct group_entry *group_list = NULL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#328: FILE: security/tomoyo/file.c:285:
+                                  const char *member_name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#328: FILE: security/tomoyo/file.c:285:
+                                  const char *member_name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#329: FILE: security/tomoyo/file.c:286:
+                                  const int is_delete)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: security/tomoyo/file.c:286:
+                                  const int is_delete)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#336: FILE: security/tomoyo/file.c:293:
+	int error = -ENOMEM;
+	if (!tomoyo_is_correct_path(group_name, 0, 0, 0, __FUNCTION__) || !group_name[0] ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#336: FILE: security/tomoyo/file.c:293:
+	if (!tomoyo_is_correct_path(group_name, 0, 0, 0, __FUNCTION__) || !group_name[0] ||
[...]
+			return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#336: FILE: security/tomoyo/file.c:293:
+	if (!tomoyo_is_correct_path(group_name, 0, 0, 0, __FUNCTION__) || !group_name[0] ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: security/tomoyo/file.c:294:
+	if (!tomoyo_is_correct_path(group_name, 0, 0, 0, __FUNCTION__) || !group_name[0] ||
+		!tomoyo_is_correct_path(member_name, 0, 0, 0, __FUNCTION__) || !member_name[0])

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#337: FILE: security/tomoyo/file.c:294:
+		!tomoyo_is_correct_path(member_name, 0, 0, 0, __FUNCTION__) || !member_name[0])

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#339: FILE: security/tomoyo/file.c:296:
+	if ((saved_group_name = tomoyo_save_name(group_name)) == NULL ||

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#339: FILE: security/tomoyo/file.c:296:
+	if ((saved_group_name = tomoyo_save_name(group_name)) == NULL ||
+		(saved_member_name = tomoyo_save_name(member_name)) == NULL) return -ENOMEM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: security/tomoyo/file.c:297:
+	if ((saved_group_name = tomoyo_save_name(group_name)) == NULL ||
+		(saved_member_name = tomoyo_save_name(member_name)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#343: FILE: security/tomoyo/file.c:300:
+		if (saved_group_name != group->group_name) continue;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: security/tomoyo/file.c:315:
+		if ((new_group = tomoyo_alloc_element(sizeof(*new_group))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#358: FILE: security/tomoyo/file.c:315:
+		if ((new_group = tomoyo_alloc_element(sizeof(*new_group))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#361: FILE: security/tomoyo/file.c:318:
+		if ((group = group_list) != NULL) {

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#366: FILE: security/tomoyo/file.c:323:
+			group_list= new_group;
 			          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#370: FILE: security/tomoyo/file.c:327:
+	if ((new_member = tomoyo_alloc_element(sizeof(*new_member))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#370: FILE: security/tomoyo/file.c:327:
+	if ((new_member = tomoyo_alloc_element(sizeof(*new_member))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#373: FILE: security/tomoyo/file.c:330:
+	if ((member = group->first_member) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#389: FILE: security/tomoyo/file.c:346:
+	char *cp = strchr(data, ' ');
+	if (!cp) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#389: FILE: security/tomoyo/file.c:346:
+	if (!cp) return -EINVAL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#398: FILE: security/tomoyo/file.c:355:
+	struct group_entry *group;
+	for (i = 0; i <= 1; i++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#400: FILE: security/tomoyo/file.c:357:
+			if (strcmp(group_name, group->group_name->name) == 0) return group;

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: security/tomoyo/file.c:368:
+                                         const struct group_entry *group,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: security/tomoyo/file.c:368:
+                                         const struct group_entry *group,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: security/tomoyo/file.c:369:
+                                         const int may_use_pattern)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: security/tomoyo/file.c:369:
+                                         const int may_use_pattern)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#415: FILE: security/tomoyo/file.c:372:
+	struct group_member *member;
+	for (member = group->first_member; member; member = member->next) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#416: FILE: security/tomoyo/file.c:373:
+		if (member->is_deleted) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: security/tomoyo/file.c:375:
+			if (!tomoyo_pathcmp(pathname, member->member_name)) return 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#420: FILE: security/tomoyo/file.c:377:
+			if (tomoyo_path_matches_to_pattern(pathname, member->member_name)) return 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#430: FILE: security/tomoyo/file.c:387:
+	struct group_member *member = head->read_var2;
+	if (!group) group = group_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#430: FILE: security/tomoyo/file.c:387:
+	if (!group) group = group_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#433: FILE: security/tomoyo/file.c:390:
+		if (!member) member = group->first_member;

ERROR:CODE_INDENT: code indent should use tabs where possible
#438: FILE: security/tomoyo/file.c:395:
+^I^I^I                     TOMOYO_KEYWORD_PATH_GROUP "%s %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#439: FILE: security/tomoyo/file.c:396:
+^I^I^I                     group->group_name->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#440: FILE: security/tomoyo/file.c:397:
+^I^I^I                     member->member_name->name))$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#444: FILE: security/tomoyo/file.c:401:
+		if (member) break;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#453: FILE: security/tomoyo/file.c:410:
+static struct pattern_entry *pattern_list = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#461: FILE: security/tomoyo/file.c:418:
+	int error = -ENOMEM;
+	if (!tomoyo_is_correct_path(pattern, 0, 1, 0, __FUNCTION__)) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#461: FILE: security/tomoyo/file.c:418:
+	if (!tomoyo_is_correct_path(pattern, 0, 1, 0, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#461: FILE: security/tomoyo/file.c:418:
+	if (!tomoyo_is_correct_path(pattern, 0, 1, 0, __FUNCTION__)) return -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#462: FILE: security/tomoyo/file.c:419:
+	if ((saved_pattern = tomoyo_save_name(pattern)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#462: FILE: security/tomoyo/file.c:419:
+	if ((saved_pattern = tomoyo_save_name(pattern)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#475: FILE: security/tomoyo/file.c:432:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#475: FILE: security/tomoyo/file.c:432:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#478: FILE: security/tomoyo/file.c:435:
+	if ((ptr = pattern_list) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: security/tomoyo/file.c:452:
+	const struct path_info *pattern = NULL;
+	for (ptr = pattern_list; ptr; ptr = ptr->next) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#496: FILE: security/tomoyo/file.c:453:
+		if (ptr->is_deleted) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#497: FILE: security/tomoyo/file.c:454:
+		if (!tomoyo_path_matches_to_pattern(filename, ptr->pattern)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#506: FILE: security/tomoyo/file.c:463:
+	if (pattern) filename = pattern;

WARNING:LINE_SPACING: Missing a blank line after declarations
#518: FILE: security/tomoyo/file.c:475:
+	struct pattern_entry *ptr = head->read_var2;
+	if (!ptr) ptr = pattern_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#518: FILE: security/tomoyo/file.c:475:
+	if (!ptr) ptr = pattern_list;

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: security/tomoyo/file.c:480:
+^I^I                     TOMOYO_KEYWORD_FILE_PATTERN "%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#524: FILE: security/tomoyo/file.c:481:
+^I^I                     ptr->pattern->name))$

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#533: FILE: security/tomoyo/file.c:490:
+static struct no_rewrite_entry *no_rewrite_list = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: security/tomoyo/file.c:498:
+	int error = -ENOMEM;
+	if (!tomoyo_is_correct_path(pattern, 0, 0, 0, __FUNCTION__)) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#541: FILE: security/tomoyo/file.c:498:
+	if (!tomoyo_is_correct_path(pattern, 0, 0, 0, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#541: FILE: security/tomoyo/file.c:498:
+	if (!tomoyo_is_correct_path(pattern, 0, 0, 0, __FUNCTION__)) return -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#542: FILE: security/tomoyo/file.c:499:
+	if ((saved_pattern = tomoyo_save_name(pattern)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#542: FILE: security/tomoyo/file.c:499:
+	if ((saved_pattern = tomoyo_save_name(pattern)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#555: FILE: security/tomoyo/file.c:512:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#555: FILE: security/tomoyo/file.c:512:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#558: FILE: security/tomoyo/file.c:515:
+	if ((ptr = no_rewrite_list) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: security/tomoyo/file.c:531:
+	struct no_rewrite_entry *ptr;
+	for (ptr = no_rewrite_list; ptr; ptr = ptr->next) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#575: FILE: security/tomoyo/file.c:532:
+		if (ptr->is_deleted) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#576: FILE: security/tomoyo/file.c:533:
+		if (!tomoyo_path_matches_to_pattern(filename, ptr->pattern)) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#590: FILE: security/tomoyo/file.c:547:
+	struct no_rewrite_entry *ptr = head->read_var2;
+	if (!ptr) ptr = no_rewrite_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#590: FILE: security/tomoyo/file.c:547:
+	if (!ptr) ptr = no_rewrite_list;

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: security/tomoyo/file.c:552:
+^I^I                     TOMOYO_KEYWORD_DENY_REWRITE "%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: security/tomoyo/file.c:553:
+^I^I                     ptr->pattern->name))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: security/tomoyo/file.c:563:
+                               u8 perm,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: security/tomoyo/file.c:563:
+                               u8 perm,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: security/tomoyo/file.c:564:
+                               struct domain_info * const domain,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: security/tomoyo/file.c:564:
+                               struct domain_info * const domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: security/tomoyo/file.c:565:
+                               const u8 is_add)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: security/tomoyo/file.c:565:
+                               const u8 is_add)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#614: FILE: security/tomoyo/file.c:571:
+	u8 is_group = 0;
+	if (!domain) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#614: FILE: security/tomoyo/file.c:571:
+	if (!domain) return -EINVAL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#616: FILE: security/tomoyo/file.c:573:
+		printk(KERN_DEBUG "%s: Invalid permission '%d %s'\n", __FUNCTION__, perm, filename);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#616: FILE: security/tomoyo/file.c:573:
+		printk(KERN_DEBUG "%s: Invalid permission '%d %s'\n", __FUNCTION__, perm, filename);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#619: FILE: security/tomoyo/file.c:576:
+	if (!tomoyo_is_correct_path(filename, 0, 0, 0, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#619: FILE: security/tomoyo/file.c:576:
+	if (!tomoyo_is_correct_path(filename, 0, 0, 0, __FUNCTION__)) return -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#622: FILE: security/tomoyo/file.c:579:
+		if ((saved_filename =

CHECK:SPACING: No space is necessary after a cast
#623: FILE: security/tomoyo/file.c:580:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename + 1)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#627: FILE: security/tomoyo/file.c:584:
+		if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#627: FILE: security/tomoyo/file.c:584:
+		if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

WARNING:LONG_LINE_COMMENT: line length of 105 exceeds 100 columns
#636: FILE: security/tomoyo/file.c:593:
+				return 0; /* Don't add if the directory doesn't have write permission. */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#641: FILE: security/tomoyo/file.c:598:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#641: FILE: security/tomoyo/file.c:598:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: security/tomoyo/file.c:601:
+			struct file_acl_record *new_ptr;
+			if (ptr->type == TOMOYO_TYPE_FILE_ACL) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#645: FILE: security/tomoyo/file.c:602:
+				if (((struct file_acl_record *) ptr)->u.filename == saved_filename) {

CHECK:SPACING: No space is necessary after a cast
#645: FILE: security/tomoyo/file.c:602:
+				if (((struct file_acl_record *) ptr)->u.filename == saved_filename) {

WARNING:MEMORY_BARRIER: memory barrier without comment
#648: FILE: security/tomoyo/file.c:605:
+						mb();

WARNING:SPACING: space prohibited before semicolon
#662: FILE: security/tomoyo/file.c:619:
+	first_entry: ;

WARNING:INDENTED_LABEL: labels should not be indented
#662: FILE: security/tomoyo/file.c:619:
+	first_entry: ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#663: FILE: security/tomoyo/file.c:620:
+			if (is_add == 1 && tomoyo_too_many_domain_acl(domain)) break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#665: FILE: security/tomoyo/file.c:622:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#665: FILE: security/tomoyo/file.c:622:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

CHECK:SPACING: No space is necessary after a cast
#670: FILE: security/tomoyo/file.c:627:
+			error = tomoyo_add_domain_acl(ptr, domain, (struct acl_info *) new_ptr);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#679: FILE: security/tomoyo/file.c:636:
+			if (((struct file_acl_record *) ptr)->u.filename != saved_filename) continue;

CHECK:SPACING: No space is necessary after a cast
#679: FILE: security/tomoyo/file.c:636:
+			if (((struct file_acl_record *) ptr)->u.filename != saved_filename) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#679: FILE: security/tomoyo/file.c:636:
+			if (((struct file_acl_record *) ptr)->u.filename != saved_filename) continue;

CHECK:SPACING: No space is necessary after a cast
#691: FILE: security/tomoyo/file.c:648:
+		((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#694: FILE: security/tomoyo/file.c:651:
+	const int may_use_pattern = ((perm & 1) == 0);
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#694: FILE: security/tomoyo/file.c:651:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#696: FILE: security/tomoyo/file.c:653:
+		if (perm == 4 && tomoyo_is_globally_readable_file(filename)) return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: security/tomoyo/file.c:662:
+^I^I^I                                  ((struct file_acl_record *) ptr)->u.group,$

CHECK:SPACING: No space is necessary after a cast
#705: FILE: security/tomoyo/file.c:662:
+			                                  ((struct file_acl_record *) ptr)->u.group,

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: security/tomoyo/file.c:663:
+^I^I^I                                  may_use_pattern))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: security/tomoyo/file.c:666:
+^I^I           !((struct file_acl_record *) ptr)->u.filename->is_patterned) {$

CHECK:SPACING: No space is necessary after a cast
#709: FILE: security/tomoyo/file.c:666:
+		           !((struct file_acl_record *) ptr)->u.filename->is_patterned) {

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#711: FILE: security/tomoyo/file.c:668:
+			                                   ((struct file_acl_record *) ptr)->u.filename))

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: security/tomoyo/file.c:668:
+^I^I^I                                   ((struct file_acl_record *) ptr)->u.filename))$

CHECK:SPACING: No space is necessary after a cast
#711: FILE: security/tomoyo/file.c:668:
+			                                   ((struct file_acl_record *) ptr)->u.filename))

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#718: FILE: security/tomoyo/file.c:675:
+static int tomoyo_check_file_perm2(const struct path_info *filename, const u8 perm, const char *operation)

WARNING:LINE_SPACING: Missing a blank line after declarations
#721: FILE: security/tomoyo/file.c:678:
+	int error = 0;
+	if (!filename) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#721: FILE: security/tomoyo/file.c:678:
+	if (!filename) return 0;

CHECK:SPACING: No space is necessary after a cast
#726: FILE: security/tomoyo/file.c:683:
+			((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#728: FILE: security/tomoyo/file.c:685:
+		const int is_enforce = tomoyo_check_enforce(TOMOYO_MAC_FOR_FILE);
+		if (tomoyo_verbose_mode()) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#729: FILE: security/tomoyo/file.c:686:
+			printk("TOMOYO-%s: Access %d(%s) to %s denied for %s\n",

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#733: FILE: security/tomoyo/file.c:690:
+		if (is_enforce) error =

ERROR:CODE_INDENT: code indent should use tabs where possible
#735: FILE: security/tomoyo/file.c:692:
+^I^I^I                        domain->domainname->name, perm, filename->name);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#742: FILE: security/tomoyo/file.c:699:
+		if (!is_enforce) error = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#752: FILE: security/tomoyo/file.c:709:
+	u8 type;
+	if (!filename) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#752: FILE: security/tomoyo/file.c:709:
+	if (!filename) return -EINVAL;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#754: FILE: security/tomoyo/file.c:711:
+	if (sscanf(data, "%u", &perm) == 1) {
+		return tomoyo_add_file_acl(filename, (u8) perm, domain, is_delete ? 0 : -1);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#754: FILE: security/tomoyo/file.c:711:
+	if (sscanf(data, "%u", &perm) == 1) {
+		return tomoyo_add_file_acl(filename, (u8) perm, domain, is_delete ? 0 : -1);
+	}

CHECK:SPACING: No space is necessary after a cast
#755: FILE: security/tomoyo/file.c:712:
+		return tomoyo_add_file_acl(filename, (u8) perm, domain, is_delete ? 0 : -1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#757: FILE: security/tomoyo/file.c:714:
+	if (strncmp(data, "allow_", 6)) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#760: FILE: security/tomoyo/file.c:717:
+		if (strcmp(data, acl_type_array[type].keyword)) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#763: FILE: security/tomoyo/file.c:720:
+			char *filename2 = strchr(filename, ' ');
+			if (!filename2) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#763: FILE: security/tomoyo/file.c:720:
+			if (!filename2) break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: security/tomoyo/file.c:723:
+^I^I^I                                   filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: security/tomoyo/file.c:724:
+^I^I^I                                   filename2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: security/tomoyo/file.c:725:
+^I^I^I                                   domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: security/tomoyo/file.c:726:
+^I^I^I                                   is_delete ? 0 : -1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: security/tomoyo/file.c:729:
+^I^I^I                                   filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: security/tomoyo/file.c:730:
+^I^I^I                                   domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: security/tomoyo/file.c:731:
+^I^I^I                                   is_delete ? 0 : -1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: security/tomoyo/file.c:740:
+                                       const char *filename,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: security/tomoyo/file.c:740:
+                                       const char *filename,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#784: FILE: security/tomoyo/file.c:741:
+                                       struct domain_info * const domain,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: security/tomoyo/file.c:741:
+                                       struct domain_info * const domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#785: FILE: security/tomoyo/file.c:742:
+                                       const u8 is_add)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#785: FILE: security/tomoyo/file.c:742:
+                                       const u8 is_add)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: security/tomoyo/file.c:748:
+	u8 is_group = 0;
+	if (!domain) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#791: FILE: security/tomoyo/file.c:748:
+	if (!domain) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#792: FILE: security/tomoyo/file.c:749:
+	if (!tomoyo_is_correct_path(filename, 0, 0, 0, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#792: FILE: security/tomoyo/file.c:749:
+	if (!tomoyo_is_correct_path(filename, 0, 0, 0, __FUNCTION__)) return -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#795: FILE: security/tomoyo/file.c:752:
+		if ((saved_filename =

CHECK:SPACING: No space is necessary after a cast
#796: FILE: security/tomoyo/file.c:753:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename + 1)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#800: FILE: security/tomoyo/file.c:757:
+		if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#800: FILE: security/tomoyo/file.c:757:
+		if ((saved_filename = tomoyo_save_name(filename)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#804: FILE: security/tomoyo/file.c:761:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#804: FILE: security/tomoyo/file.c:761:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#807: FILE: security/tomoyo/file.c:764:
+			struct single_acl_record *new_ptr;
+			if (ptr->type == type) {

CHECK:SPACING: No space is necessary after a cast
#808: FILE: security/tomoyo/file.c:765:
+				if (((struct single_acl_record *) ptr)->u.filename ==

WARNING:SPACING: space prohibited before semicolon
#820: FILE: security/tomoyo/file.c:777:
+		first_entry: ;

WARNING:INDENTED_LABEL: labels should not be indented
#820: FILE: security/tomoyo/file.c:777:
+		first_entry: ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#821: FILE: security/tomoyo/file.c:778:
+			if (is_add == 1 && tomoyo_too_many_domain_acl(domain)) break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#823: FILE: security/tomoyo/file.c:780:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#823: FILE: security/tomoyo/file.c:780:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

CHECK:SPACING: No space is necessary after a cast
#827: FILE: security/tomoyo/file.c:784:
+			error = tomoyo_add_domain_acl(ptr, domain, (struct acl_info *) new_ptr);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#833: FILE: security/tomoyo/file.c:790:
+			if (ptr->type != type || ptr->is_deleted) continue;

CHECK:SPACING: No space is necessary after a cast
#834: FILE: security/tomoyo/file.c:791:
+			if (((struct single_acl_record *) ptr)->u.filename != saved_filename)

ERROR:CODE_INDENT: code indent should use tabs where possible
#845: FILE: security/tomoyo/file.c:802:
+                                       const char *filename1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#845: FILE: security/tomoyo/file.c:802:
+                                       const char *filename1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#846: FILE: security/tomoyo/file.c:803:
+                                       const char *filename2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#846: FILE: security/tomoyo/file.c:803:
+                                       const char *filename2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#847: FILE: security/tomoyo/file.c:804:
+                                       struct domain_info * const domain,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#847: FILE: security/tomoyo/file.c:804:
+                                       struct domain_info * const domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#848: FILE: security/tomoyo/file.c:805:
+                                       const u8 is_add)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: security/tomoyo/file.c:805:
+                                       const u8 is_add)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: security/tomoyo/file.c:811:
+	u8 is_group1 = 0, is_group2 = 0;
+	if (!domain) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#854: FILE: security/tomoyo/file.c:811:
+	if (!domain) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#855: FILE: security/tomoyo/file.c:812:
+	if (!tomoyo_is_correct_path(filename1, 0, 0, 0, __FUNCTION__) ||

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#856: FILE: security/tomoyo/file.c:813:
+	    !tomoyo_is_correct_path(filename2, 0, 0, 0, __FUNCTION__))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#860: FILE: security/tomoyo/file.c:817:
+		if ((saved_filename1 =

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#861: FILE: security/tomoyo/file.c:818:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename1 + 1)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#861: FILE: security/tomoyo/file.c:818:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename1 + 1)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#865: FILE: security/tomoyo/file.c:822:
+		if ((saved_filename1 = tomoyo_save_name(filename1)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#865: FILE: security/tomoyo/file.c:822:
+		if ((saved_filename1 = tomoyo_save_name(filename1)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#869: FILE: security/tomoyo/file.c:826:
+		if ((saved_filename2 =

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#870: FILE: security/tomoyo/file.c:827:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename2 + 1)) == NULL)

CHECK:SPACING: No space is necessary after a cast
#870: FILE: security/tomoyo/file.c:827:
+			(struct path_info *) tomoyo_find_or_assign_new_group(filename2 + 1)) == NULL)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#874: FILE: security/tomoyo/file.c:831:
+		if ((saved_filename2 = tomoyo_save_name(filename2)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#874: FILE: security/tomoyo/file.c:831:
+		if ((saved_filename2 = tomoyo_save_name(filename2)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#878: FILE: security/tomoyo/file.c:835:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#878: FILE: security/tomoyo/file.c:835:
+		if ((ptr = domain->first_acl_ptr) == NULL) goto first_entry;

WARNING:LINE_SPACING: Missing a blank line after declarations
#881: FILE: security/tomoyo/file.c:838:
+			struct double_acl_record *new_ptr;
+			if (ptr->type == type) {

CHECK:SPACING: No space is necessary after a cast
#882: FILE: security/tomoyo/file.c:839:
+				if (((struct double_acl_record *) ptr)->u1.filename1 ==

CHECK:SPACING: No space is necessary after a cast
#884: FILE: security/tomoyo/file.c:841:
+				    ((struct double_acl_record *) ptr)->u2.filename2 ==

WARNING:SPACING: space prohibited before semicolon
#896: FILE: security/tomoyo/file.c:853:
+		first_entry: ;

WARNING:INDENTED_LABEL: labels should not be indented
#896: FILE: security/tomoyo/file.c:853:
+		first_entry: ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#897: FILE: security/tomoyo/file.c:854:
+			if (is_add == 1 && tomoyo_too_many_domain_acl(domain)) break;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#899: FILE: security/tomoyo/file.c:856:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#899: FILE: security/tomoyo/file.c:856:
+			if ((new_ptr = tomoyo_alloc_element(sizeof(*new_ptr))) == NULL) break;

CHECK:SPACING: No space is necessary after a cast
#905: FILE: security/tomoyo/file.c:862:
+			error = tomoyo_add_domain_acl(ptr, domain, (struct acl_info *) new_ptr);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#911: FILE: security/tomoyo/file.c:868:
+			if (ptr->type != type || ptr->is_deleted) continue;

CHECK:SPACING: No space is necessary after a cast
#912: FILE: security/tomoyo/file.c:869:
+			if (((struct double_acl_record *) ptr)->u1.filename1 != saved_filename1 ||

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 40)
#912: FILE: security/tomoyo/file.c:869:
+			if (((struct double_acl_record *) ptr)->u1.filename1 != saved_filename1 ||
[...]
+					continue;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#913: FILE: security/tomoyo/file.c:870:
+			if (((struct double_acl_record *) ptr)->u1.filename1 != saved_filename1 ||
+				((struct double_acl_record *) ptr)->u2.filename2 != saved_filename2)

CHECK:SPACING: No space is necessary after a cast
#913: FILE: security/tomoyo/file.c:870:
+				((struct double_acl_record *) ptr)->u2.filename2 != saved_filename2)

CHECK:SPACING: No space is necessary after a cast
#926: FILE: security/tomoyo/file.c:883:
+		((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#928: FILE: security/tomoyo/file.c:885:
+	struct acl_info *ptr;
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#928: FILE: security/tomoyo/file.c:885:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#930: FILE: security/tomoyo/file.c:887:
+		if (ptr->type != type || ptr->is_deleted) continue;

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#933: FILE: security/tomoyo/file.c:890:
+			                                   ((struct single_acl_record *) ptr)->u.group,

ERROR:CODE_INDENT: code indent should use tabs where possible
#933: FILE: security/tomoyo/file.c:890:
+^I^I^I                                   ((struct single_acl_record *) ptr)->u.group,$

CHECK:SPACING: No space is necessary after a cast
#933: FILE: security/tomoyo/file.c:890:
+			                                   ((struct single_acl_record *) ptr)->u.group,

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: security/tomoyo/file.c:891:
+^I^I^I                                   1))$

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#938: FILE: security/tomoyo/file.c:895:
+			                                    ((struct single_acl_record *) ptr)->u.filename))

ERROR:CODE_INDENT: code indent should use tabs where possible
#938: FILE: security/tomoyo/file.c:895:
+^I^I^I                                    ((struct single_acl_record *) ptr)->u.filename))$

CHECK:SPACING: No space is necessary after a cast
#938: FILE: security/tomoyo/file.c:895:
+			                                    ((struct single_acl_record *) ptr)->u.filename))

ERROR:CODE_INDENT: code indent should use tabs where possible
#947: FILE: security/tomoyo/file.c:904:
+                                         const struct path_info *filename1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#947: FILE: security/tomoyo/file.c:904:
+                                         const struct path_info *filename1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#948: FILE: security/tomoyo/file.c:905:
+                                         const struct path_info *filename2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#948: FILE: security/tomoyo/file.c:905:
+                                         const struct path_info *filename2)$

CHECK:SPACING: No space is necessary after a cast
#951: FILE: security/tomoyo/file.c:908:
+		((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#953: FILE: security/tomoyo/file.c:910:
+	struct acl_info *ptr;
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#953: FILE: security/tomoyo/file.c:910:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#955: FILE: security/tomoyo/file.c:912:
+		if (ptr->type != type || ptr->is_deleted) continue;

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#958: FILE: security/tomoyo/file.c:915:
+			                                   ((struct double_acl_record *) ptr)->u1.group1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#958: FILE: security/tomoyo/file.c:915:
+^I^I^I                                   ((struct double_acl_record *) ptr)->u1.group1,$

CHECK:SPACING: No space is necessary after a cast
#958: FILE: security/tomoyo/file.c:915:
+			                                   ((struct double_acl_record *) ptr)->u1.group1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#959: FILE: security/tomoyo/file.c:916:
+^I^I^I                                   1))$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#963: FILE: security/tomoyo/file.c:920:
+			                                    ((struct double_acl_record *) ptr)->u1.filename1))

ERROR:CODE_INDENT: code indent should use tabs where possible
#963: FILE: security/tomoyo/file.c:920:
+^I^I^I                                    ((struct double_acl_record *) ptr)->u1.filename1))$

CHECK:SPACING: No space is necessary after a cast
#963: FILE: security/tomoyo/file.c:920:
+			                                    ((struct double_acl_record *) ptr)->u1.filename1))

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#968: FILE: security/tomoyo/file.c:925:
+			                                   ((struct double_acl_record *) ptr)->u2.group2,

ERROR:CODE_INDENT: code indent should use tabs where possible
#968: FILE: security/tomoyo/file.c:925:
+^I^I^I                                   ((struct double_acl_record *) ptr)->u2.group2,$

CHECK:SPACING: No space is necessary after a cast
#968: FILE: security/tomoyo/file.c:925:
+			                                   ((struct double_acl_record *) ptr)->u2.group2,

ERROR:CODE_INDENT: code indent should use tabs where possible
#969: FILE: security/tomoyo/file.c:926:
+^I^I^I                                   1))$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#973: FILE: security/tomoyo/file.c:930:
+			                                    ((struct double_acl_record *) ptr)->u2.filename2))

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: security/tomoyo/file.c:930:
+^I^I^I                                    ((struct double_acl_record *) ptr)->u2.filename2))$

CHECK:SPACING: No space is necessary after a cast
#973: FILE: security/tomoyo/file.c:930:
+			                                    ((struct double_acl_record *) ptr)->u2.filename2))

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: security/tomoyo/file.c:939:
+                                                 const struct path_info *filename)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#982: FILE: security/tomoyo/file.c:939:
+                                                 const struct path_info *filename)$

CHECK:SPACING: No space is necessary after a cast
#986: FILE: security/tomoyo/file.c:943:
+		((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#988: FILE: security/tomoyo/file.c:945:
+	const int is_enforce = tomoyo_check_enforce(TOMOYO_MAC_FOR_FILE);
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#988: FILE: security/tomoyo/file.c:945:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#989: FILE: security/tomoyo/file.c:946:
+	if (tomoyo_check_acl_flags(operation) < 0) return 0;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#995: FILE: security/tomoyo/file.c:952:
+				printk("TOMOYO-%s: Access '%s %s' denied for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: security/tomoyo/file.c:960:
+^I^I^I^I                                domain->domainname->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1004: FILE: security/tomoyo/file.c:961:
+^I^I^I^I                                tomoyo_acltype2keyword(operation),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: security/tomoyo/file.c:962:
+^I^I^I^I                                filename->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1008: FILE: security/tomoyo/file.c:965:
+^I^I^I^I                            tomoyo_get_pattern(filename)->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1009: FILE: security/tomoyo/file.c:966:
+^I^I^I^I                            domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1010: FILE: security/tomoyo/file.c:967:
+^I^I^I^I                            1);$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1017: FILE: security/tomoyo/file.c:974:
+	if (!error && operation == TOMOYO_TYPE_TRUNCATE_ACL && tomoyo_is_no_rewrite_file(filename)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1017: FILE: security/tomoyo/file.c:974:
+	if (!error && operation == TOMOYO_TYPE_TRUNCATE_ACL && tomoyo_is_no_rewrite_file(filename)) {
+		error = tomoyo_check_single_write_permission2(TOMOYO_TYPE_REWRITE_ACL, filename);
+	}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1023: FILE: security/tomoyo/file.c:980:
+int tomoyo_check_exec_perm(const struct path_info *filename, struct file *filp)
                                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1025: FILE: security/tomoyo/file.c:982:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1035: FILE: security/tomoyo/file.c:992:
+	const int is_enforce = tomoyo_check_enforce(TOMOYO_MAC_FOR_FILE);
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1035: FILE: security/tomoyo/file.c:992:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1036: FILE: security/tomoyo/file.c:993:
+	if (acc_mode == 0) return 0;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1047: FILE: security/tomoyo/file.c:1004:
+					error = tomoyo_check_single_write_permission2(TOMOYO_TYPE_REWRITE_ACL,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1048: FILE: security/tomoyo/file.c:1005:
+^I^I^I^I^I                                              buf);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1052: FILE: security/tomoyo/file.c:1009:
+		if (error == 0) error = tomoyo_check_file_perm2(buf, acc_mode, "open");

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1054: FILE: security/tomoyo/file.c:1011:
+			error = tomoyo_check_single_write_permission2(TOMOYO_TYPE_TRUNCATE_ACL, buf);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1057: FILE: security/tomoyo/file.c:1014:
+	if (!is_enforce) error = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1062: FILE: security/tomoyo/file.c:1019:
+                                         struct dentry *dentry,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1062: FILE: security/tomoyo/file.c:1019:
+                                         struct dentry *dentry,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1063: FILE: security/tomoyo/file.c:1020:
+                                         struct vfsmount *mnt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: security/tomoyo/file.c:1020:
+                                         struct vfsmount *mnt)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1068: FILE: security/tomoyo/file.c:1025:
+	const int is_enforce = tomoyo_check_enforce(TOMOYO_MAC_FOR_FILE);
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1068: FILE: security/tomoyo/file.c:1025:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

CHECK:SPACING: No space is necessary after a cast
#1075: FILE: security/tomoyo/file.c:1032:
+				strcat((char *) buf->name, "/");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1082: FILE: security/tomoyo/file.c:1039:
+	if (!is_enforce) error = 0;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1086: FILE: security/tomoyo/file.c:1043:
+int tomoyo_check_rewrite_permission(struct file *filp)
                                                  ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1091: FILE: security/tomoyo/file.c:1048:
+	struct path_info *buf = tomoyo_get_path(filp->f_dentry, filp->f_vfsmnt);
+	if (buf) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1092: FILE: security/tomoyo/file.c:1049:
+		if (tomoyo_is_no_rewrite_file(buf)) {
[...]
+		} else {
[...]

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1099: FILE: security/tomoyo/file.c:1056:
+	if (!is_enforce) error = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1104: FILE: security/tomoyo/file.c:1061:
+                                         struct dentry *dentry1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: security/tomoyo/file.c:1061:
+                                         struct dentry *dentry1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: security/tomoyo/file.c:1062:
+                                         struct vfsmount *mnt1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: security/tomoyo/file.c:1062:
+                                         struct vfsmount *mnt1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1106: FILE: security/tomoyo/file.c:1063:
+                                         struct dentry *dentry2,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: security/tomoyo/file.c:1063:
+                                         struct dentry *dentry2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1107: FILE: security/tomoyo/file.c:1064:
+                                         struct vfsmount *mnt2)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: security/tomoyo/file.c:1064:
+                                         struct vfsmount *mnt2)$

CHECK:SPACING: No space is necessary after a cast
#1112: FILE: security/tomoyo/file.c:1069:
+		((struct tomoyo_security *) current->security)->domain_info;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1114: FILE: security/tomoyo/file.c:1071:
+	const int is_enforce = tomoyo_check_enforce(TOMOYO_MAC_FOR_FILE);
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1114: FILE: security/tomoyo/file.c:1071:
+	if (!tomoyo_check_flags(TOMOYO_MAC_FOR_FILE)) return 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1115: FILE: security/tomoyo/file.c:1072:
+^Iif (tomoyo_check_acl_flags(operation) < 0) return 0;^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1115: FILE: security/tomoyo/file.c:1072:
+	if (tomoyo_check_acl_flags(operation) < 0) return 0;		

CHECK:SPACING: No space is necessary after a cast
#1123: FILE: security/tomoyo/file.c:1080:
+					strcat((char *) buf1->name, "/");

CHECK:SPACING: No space is necessary after a cast
#1127: FILE: security/tomoyo/file.c:1084:
+					strcat((char *) buf2->name, "/");

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1134: FILE: security/tomoyo/file.c:1091:
+			tomoyo_audit_write_log(tomoyo_acltype2keyword(operation), buf1, buf2, !error);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1137: FILE: security/tomoyo/file.c:1094:
+					printk("TOMOYO-%s: Access '%s %s %s' denied for %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1146: FILE: security/tomoyo/file.c:1103:
+^I^I^I^I^I                                domain->domainname->name,$

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1147: FILE: security/tomoyo/file.c:1104:
+					                                tomoyo_acltype2keyword(operation),

ERROR:CODE_INDENT: code indent should use tabs where possible
#1147: FILE: security/tomoyo/file.c:1104:
+^I^I^I^I^I                                tomoyo_acltype2keyword(operation),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1148: FILE: security/tomoyo/file.c:1105:
+^I^I^I^I^I                                buf1->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1149: FILE: security/tomoyo/file.c:1106:
+^I^I^I^I^I                                buf2->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1152: FILE: security/tomoyo/file.c:1109:
+^I^I^I^I^I                            tomoyo_get_pattern(buf1)->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1153: FILE: security/tomoyo/file.c:1110:
+^I^I^I^I^I                            tomoyo_get_pattern(buf2)->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1154: FILE: security/tomoyo/file.c:1111:
+^I^I^I^I^I                            domain,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1155: FILE: security/tomoyo/file.c:1112:
+^I^I^I^I^I                            1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1161: FILE: security/tomoyo/file.c:1118:
+^I^I^I^I                                2,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: security/tomoyo/file.c:1119:
+^I^I^I^I                                tomoyo_acltype2keyword(operation));$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1167: FILE: security/tomoyo/file.c:1124:
+	if (!is_enforce) error = 0;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418661.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 214 errors, 144 warnings, 38 checks, 1126 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418661.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
