WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#374: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#379: FILE: arch/s390/include/asm/perf_counter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:MEMORY_BARRIER: memory barrier without comment
#465: FILE: arch/s390/kernel/smp.c:864:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#472: FILE: arch/s390/kernel/smp.c:870:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#489: FILE: arch/s390/kernel/smp.c:888:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#497: FILE: arch/s390/kernel/smp.c:895:
+	smp_rmb();

CHECK:SPACING: No space is necessary after a cast
#561: FILE: arch/s390/kernel/time.c:1440:
+	stp_page = (void *) get_zeroed_page(GFP_ATOMIC);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#569: FILE: arch/s390/kernel/time.c:1447:
+		free_page((unsigned long) stp_page);

WARNING:MEMORY_BARRIER: memory barrier without comment
#598: FILE: arch/s390/kernel/vtime.c:153:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#603: FILE: arch/s390/kernel/vtime.c:157:
+	smp_wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#620: FILE: arch/s390/kernel/vtime.c:252:
+	smp_rmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#628: FILE: arch/s390/kernel/vtime.c:259:
+	smp_rmb();

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*req)...) over kzalloc(sizeof(struct raw3215_req)...)
#794: FILE: drivers/s390/char/con3215.c:883:
+		req = kzalloc(sizeof(struct raw3215_req), GFP_KERNEL | GFP_DMA);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*condev)...) over kzalloc(sizeof(struct con3270)...)
#843: FILE: drivers/s390/char/con3270.c:602:
+	condev = kzalloc(sizeof(struct con3270), GFP_KERNEL | GFP_DMA);

CHECK:SPACING: No space is necessary after a cast
#863: FILE: drivers/s390/char/con3270.c:623:
+		cbuf = (void *) get_zeroed_page(GFP_KERNEL | GFP_DMA);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rp)...) over kzalloc(sizeof(struct raw3270)...)
#950: FILE: drivers/s390/char/raw3270.c:821:
+	rp = kzalloc(sizeof(struct raw3270), GFP_KERNEL | GFP_DMA);

CHECK:SPACING: No space is necessary after a cast
#1000: FILE: drivers/s390/char/sclp_con.c:300:
+		page = (void *) get_zeroed_page(GFP_KERNEL | GFP_DMA);

CHECK:SPACING: No space is necessary after a cast
#1025: FILE: drivers/s390/char/sclp_vt220.c:603:
+		free_page((unsigned long) page);

CHECK:SPACING: No space is necessary after a cast
#1041: FILE: drivers/s390/char/sclp_vt220.c:641:
+		page = (void *) get_zeroed_page(GFP_KERNEL | GFP_DMA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1161: FILE: drivers/s390/cio/qdio_main.c:280:
+static inline int qdio_siga_sync(struct qdio_q *q, unsigned int output,
 			  unsigned int input)

CHECK:BRACES: Unbalanced braces around else statement
#1314: FILE: drivers/s390/cio/qdio_main.c:551:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1410: FILE: drivers/s390/cio/qdio_main.c:820:
+	struct qdio_q *q = (struct qdio_q *)data;
+	__tiqdio_inbound_processing(q);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ap_work_queue"
#1648: FILE: drivers/s390/crypto/ap_bus.c:642:
+		if (ap_work_queue != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: No space is necessary after a cast
#1676: FILE: drivers/s390/crypto/ap_bus.c:670:
+			    (unsigned long) ap_dev);

CHECK:SPACING: No space is necessary after a cast
#1697: FILE: drivers/s390/crypto/ap_bus.c:691:
+			    (unsigned long) ap_dev);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1771: FILE: tools/perf/perf.h:18:
+#define rmb()		asm volatile("bcr 15,0" ::: "memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#1771: FILE: tools/perf/perf.h:18:
+#define rmb()		asm volatile("bcr 15,0" ::: "memory")

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#1772: FILE: tools/perf/perf.h:19:
+#define cpu_relax()	asm volatile("" ::: "memory");

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1772: FILE: tools/perf/perf.h:19:
+#define cpu_relax()	asm volatile("" ::: "memory");

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000106733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 13 warnings, 14 checks, 1449 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000106733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
