ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#198: FILE: arch/s390/kernel/compat_linux.c:152:
+	if (!(retval = put_user(high2lowuid(current->sec->uid), ruid)) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: arch/s390/kernel/compat_linux.c:169:
+	if (!(retval = put_user(high2lowgid(current->sec->gid), rgid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#280: FILE: arch/sparc64/kernel/sys_sparc32.c:108:
+	if (!(retval = put_user(high2lowuid(current->sec->uid), ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#293: FILE: arch/sparc64/kernel/sys_sparc32.c:125:
+	if (!(retval = put_user(high2lowgid(current->sec->gid), rgid)) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->uid == 0'
#383: FILE: drivers/char/agp/frontend.c:692:
+	if ((current->act_as->uid == 0) || (current->act_as->suid == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->suid == 0'
#383: FILE: drivers/char/agp/frontend.c:692:
+	if ((current->act_as->uid == 0) || (current->act_as->suid == 0)) {

WARNING:SPLIT_STRING: quoted string split across lines
#409: FILE: drivers/char/tty_audit.c:89:
 		audit_log_format(ab, "tty pid=%u uid=%u auid=%u major=%d "
+				 "minor=%d comm=", tsk->pid, tsk->sec->uid,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#630: FILE: fs/binfmt_elf_fdpic.c:588:
+	NEW_AUX_ENT( 9, AT_UID,		(elf_addr_t) current->sec->uid);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#630: FILE: fs/binfmt_elf_fdpic.c:588:
+	NEW_AUX_ENT( 9, AT_UID,		(elf_addr_t) current->sec->uid);

CHECK:SPACING: No space is necessary after a cast
#631: FILE: fs/binfmt_elf_fdpic.c:589:
+	NEW_AUX_ENT(10, AT_EUID,	(elf_addr_t) current->sec->euid);

CHECK:SPACING: No space is necessary after a cast
#632: FILE: fs/binfmt_elf_fdpic.c:590:
+	NEW_AUX_ENT(11, AT_GID,		(elf_addr_t) current->sec->gid);

CHECK:SPACING: No space is necessary after a cast
#633: FILE: fs/binfmt_elf_fdpic.c:591:
+	NEW_AUX_ENT(12, AT_EGID,	(elf_addr_t) current->sec->egid);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#659: FILE: fs/cifs/connect.c:822:
+					      * instead? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SPLIT_STRING: quoted string split across lines
#723: FILE: fs/ecryptfs/messaging.c:286:
 				"message response from an unrecognized "
+				"process [%d]\n",

WARNING:SPLIT_STRING: quoted string split across lines
#738: FILE: fs/ecryptfs/messaging.c:339:
 		ecryptfs_printk(KERN_ERR, "User [%d] does not have a daemon "
+				"registered\n", current->sec->euid);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#846: FILE: fs/fcntl.c:279:
+	f_modown(filp, pid, type, current->sec->uid, current->act_as->euid,
 	         ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1060: FILE: fs/ncpfs/ioctl.c:43:
 	if ((file_permission(file, MAY_WRITE) != 0)
+	    && (current->act_as->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1069: FILE: fs/ncpfs/ioctl.c:73:
 	if ((file_permission(file, MAY_WRITE) != 0)
+	    && (current->act_as->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1078: FILE: fs/ncpfs/ioctl.c:144:
 	if ((file_permission(file, MAY_WRITE) != 0)
+	    && (current->act_as->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1087: FILE: fs/ncpfs/ioctl.c:279:
 		if ((file_permission(filp, MAY_WRITE) != 0)
+		    && (current->act_as->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1096: FILE: fs/ncpfs/ioctl.c:359:
 		if ((file_permission(filp, MAY_READ) != 0)
+			&& (current->act_as->uid != server->m.mounted_uid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1105: FILE: fs/ncpfs/ioctl.c:383:
 			if ((file_permission(filp, MAY_READ) != 0)
+			    && (current->act_as->uid != server->m.mounted_uid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1114: FILE: fs/ncpfs/ioctl.c:458:
 		if ((file_permission(filp, MAY_WRITE) != 0)
+		    && (current->act_as->uid != server->m.mounted_uid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1123: FILE: fs/ncpfs/ioctl.c:481:
 		if ((file_permission(filp, MAY_READ) != 0)
+		    && (current->act_as->uid != server->m.mounted_uid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1132: FILE: fs/ncpfs/ioctl.c:494:
 			if ((file_permission(filp, MAY_WRITE) != 0)
+			    && (current->act_as->uid != server->m.mounted_uid))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1141: FILE: fs/ncpfs/ioctl.c:515:
 		if ((file_permission(filp, MAY_WRITE) != 0)
+		    && (current->act_as->uid != server->m.mounted_uid))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1535: FILE: include/linux/sched.h:573:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1575: FILE: include/linux/sched.h:613:
+					 * keys to */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1591: FILE: include/linux/sched.h:629:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1599: FILE: include/linux/sched.h:862:
+extern int set_groups(struct task_security *sec, struct group_info *group_info);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1777: FILE: ipc/util.c:286:
+	new->cuid = new->uid = current->act_as->euid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1778: FILE: ipc/util.c:287:
+	new->gid = new->cgid = current->act_as->egid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2016: FILE: kernel/fork.c:1017:
+	p->act_as = p->sec = &p->__temp_sec;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->uid != tsec->euid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->uid != tsec->suid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->uid != tsec->uid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->gid != tsec->egid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->gid != tsec->sgid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sec->gid != tsec->gid'
#2123: FILE: kernel/ptrace.c:139:
+	if (((sec->uid != tsec->euid) ||
+	     (sec->uid != tsec->suid) ||
+	     (sec->uid != tsec->uid) ||
+	     (sec->gid != tsec->egid) ||
+	     (sec->gid != tsec->sgid) ||
+	     (sec->gid != tsec->gid)) && !capable(CAP_SYS_PTRACE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->euid != p->sec->euid'
#2151: FILE: kernel/sched.c:4314:
+		if ((current->act_as->euid != p->sec->euid) &&
+		    (current->act_as->euid != p->sec->uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->euid != p->sec->uid'
#2151: FILE: kernel/sched.c:4314:
+		if ((current->act_as->euid != p->sec->euid) &&
+		    (current->act_as->euid != p->sec->uid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->euid != p->sec->euid'
#2162: FILE: kernel/sched.c:4512:
+	if ((current->act_as->euid != p->sec->euid) &&
+	    (current->act_as->euid != p->sec->uid) &&
+	    !capable(CAP_SYS_NICE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->act_as->euid != p->sec->uid'
#2162: FILE: kernel/sched.c:4512:
+	if ((current->act_as->euid != p->sec->euid) &&
+	    (current->act_as->euid != p->sec->uid) &&
+	    !capable(CAP_SYS_NICE))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2187: FILE: kernel/signal.c:540:
 			(task_session_nr(current) != task_session_nr(t)))
+		    && (current->act_as->euid ^ t->sec->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2188: FILE: kernel/signal.c:541:
+		    && (current->act_as->euid ^ t->sec->suid)
+		    && (current->act_as->euid ^ t->sec->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2189: FILE: kernel/signal.c:542:
+		    && (current->act_as->euid ^ t->sec->uid)
+		    && (current->act_as->uid ^ t->sec->suid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2190: FILE: kernel/signal.c:543:
+		    && (current->act_as->uid ^ t->sec->suid)
+		    && (current->act_as->uid ^ t->sec->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2209: FILE: kernel/signal.c:1116:
 	if ((info == SEND_SIG_NOINFO || (!is_si_special(info) && SI_FROMUSER(info)))
+	    && (euid != p->sec->suid) && (euid != p->sec->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2210: FILE: kernel/signal.c:1117:
+	    && (euid != p->sec->suid) && (euid != p->sec->uid)
+	    && (uid != p->sec->suid) && (uid != p->sec->uid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'who != current->sec->uid'
#2294: FILE: kernel/sys.c:175:
+				if ((who != current->sec->uid) &&
+				    !(user = find_user(who)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2294: FILE: kernel/sys.c:175:
+				if ((who != current->sec->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'who != current->sec->uid'
#2319: FILE: kernel/sys.c:238:
+				if ((who != current->sec->uid) &&
+				    !(user = find_user(who)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2319: FILE: kernel/sys.c:238:
+				if ((who != current->sec->uid) &&

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2399: FILE: kernel/sys.c:549:
+		sec->gid = sec->egid = sec->sgid = sec->fsgid = gid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2406: FILE: kernel/sys.c:555:
+		sec->egid = sec->fsgid = gid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2434: FILE: kernel/sys.c:615:
+	new_ruid = old_ruid = sec->uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2435: FILE: kernel/sys.c:616:
+	new_euid = old_euid = sec->euid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2462: FILE: kernel/sys.c:643:
+	sec->fsuid = sec->euid = new_euid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2506: FILE: kernel/sys.c:694:
+	sec->fsuid = sec->euid = uid;

CHECK:SPACING: No space is necessary after a cast
#2531: FILE: kernel/sys.c:721:
+		if ((ruid != (uid_t) -1) && (ruid != sec->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != sec->uid'
#2531: FILE: kernel/sys.c:721:
+		if ((ruid != (uid_t) -1) && (ruid != sec->uid) &&
+		    (ruid != sec->euid) && (ruid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != sec->euid'
#2531: FILE: kernel/sys.c:721:
+		if ((ruid != (uid_t) -1) && (ruid != sec->uid) &&
+		    (ruid != sec->euid) && (ruid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != sec->suid'
#2531: FILE: kernel/sys.c:721:
+		if ((ruid != (uid_t) -1) && (ruid != sec->uid) &&
+		    (ruid != sec->euid) && (ruid != sec->suid))

CHECK:SPACING: No space is necessary after a cast
#2536: FILE: kernel/sys.c:724:
+		if ((euid != (uid_t) -1) && (euid != sec->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != sec->uid'
#2536: FILE: kernel/sys.c:724:
+		if ((euid != (uid_t) -1) && (euid != sec->uid) &&
+		    (euid != sec->euid) && (euid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != sec->euid'
#2536: FILE: kernel/sys.c:724:
+		if ((euid != (uid_t) -1) && (euid != sec->uid) &&
+		    (euid != sec->euid) && (euid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != sec->suid'
#2536: FILE: kernel/sys.c:724:
+		if ((euid != (uid_t) -1) && (euid != sec->uid) &&
+		    (euid != sec->euid) && (euid != sec->suid))

CHECK:SPACING: No space is necessary after a cast
#2541: FILE: kernel/sys.c:727:
+		if ((suid != (uid_t) -1) && (suid != sec->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != sec->uid'
#2541: FILE: kernel/sys.c:727:
+		if ((suid != (uid_t) -1) && (suid != sec->uid) &&
+		    (suid != sec->euid) && (suid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != sec->euid'
#2541: FILE: kernel/sys.c:727:
+		if ((suid != (uid_t) -1) && (suid != sec->uid) &&
+		    (suid != sec->euid) && (suid != sec->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != sec->suid'
#2541: FILE: kernel/sys.c:727:
+		if ((suid != (uid_t) -1) && (suid != sec->uid) &&
+		    (suid != sec->euid) && (suid != sec->suid))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2578: FILE: kernel/sys.c:758:
+	if (!(retval = put_user(sec->uid, ruid)) &&

CHECK:SPACING: No space is necessary after a cast
#2598: FILE: kernel/sys.c:778:
+		if ((rgid != (gid_t) -1) && (rgid != sec->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != sec->gid'
#2598: FILE: kernel/sys.c:778:
+		if ((rgid != (gid_t) -1) && (rgid != sec->gid) &&
+		    (rgid != sec->egid) && (rgid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != sec->egid'
#2598: FILE: kernel/sys.c:778:
+		if ((rgid != (gid_t) -1) && (rgid != sec->gid) &&
+		    (rgid != sec->egid) && (rgid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != sec->sgid'
#2598: FILE: kernel/sys.c:778:
+		if ((rgid != (gid_t) -1) && (rgid != sec->gid) &&
+		    (rgid != sec->egid) && (rgid != sec->sgid))

CHECK:SPACING: No space is necessary after a cast
#2603: FILE: kernel/sys.c:781:
+		if ((egid != (gid_t) -1) && (egid != sec->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != sec->gid'
#2603: FILE: kernel/sys.c:781:
+		if ((egid != (gid_t) -1) && (egid != sec->gid) &&
+		    (egid != sec->egid) && (egid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != sec->egid'
#2603: FILE: kernel/sys.c:781:
+		if ((egid != (gid_t) -1) && (egid != sec->gid) &&
+		    (egid != sec->egid) && (egid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != sec->sgid'
#2603: FILE: kernel/sys.c:781:
+		if ((egid != (gid_t) -1) && (egid != sec->gid) &&
+		    (egid != sec->egid) && (egid != sec->sgid))

CHECK:SPACING: No space is necessary after a cast
#2608: FILE: kernel/sys.c:784:
+		if ((sgid != (gid_t) -1) && (sgid != sec->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != sec->gid'
#2608: FILE: kernel/sys.c:784:
+		if ((sgid != (gid_t) -1) && (sgid != sec->gid) &&
+		    (sgid != sec->egid) && (sgid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != sec->egid'
#2608: FILE: kernel/sys.c:784:
+		if ((sgid != (gid_t) -1) && (sgid != sec->gid) &&
+		    (sgid != sec->egid) && (sgid != sec->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != sec->sgid'
#2608: FILE: kernel/sys.c:784:
+		if ((sgid != (gid_t) -1) && (sgid != sec->gid) &&
+		    (sgid != sec->egid) && (sgid != sec->sgid))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2642: FILE: kernel/sys.c:811:
+	if (!(retval = put_user(sec->gid, rgid)) &&

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2736: FILE: kernel/sys.c:1277:
+EXPORT_SYMBOL(set_groups);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2883: FILE: kernel/sys.c:1751:
+			comm[sizeof(me->comm)-1] = 0;
 			                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2885: FILE: kernel/sys.c:1753:
+			if (strncpy_from_user(comm, (char __user *)arg2,
 						sizeof(me->comm)-1) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2987: FILE: kernel/uid16.c:89:
+	if (!(retval = put_user(high2lowuid(current->sec->uid), ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3000: FILE: kernel/uid16.c:109:
+	if (!(retval = put_user(high2lowgid(current->sec->gid), rgid)) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->euid != obj->suid'
#3107: FILE: mm/mempolicy.c:981:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->euid != obj->uid'
#3107: FILE: mm/mempolicy.c:981:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->uid != obj->suid'
#3107: FILE: mm/mempolicy.c:981:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->uid != obj->uid'
#3107: FILE: mm/mempolicy.c:981:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->euid != obj->suid'
#3132: FILE: mm/migrate.c:948:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->euid != obj->uid'
#3132: FILE: mm/migrate.c:948:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->uid != obj->suid'
#3132: FILE: mm/migrate.c:948:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'act_as->uid != obj->uid'
#3132: FILE: mm/migrate.c:948:
+	if ((act_as->euid != obj->suid) && (act_as->euid != obj->uid) &&
+	    (act_as->uid != obj->suid) && (act_as->uid != obj->uid) &&
 	    !capable(CAP_SYS_NICE)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3148: FILE: mm/oom_kill.c:129:
+	if (cap_t(p->sec->cap_effective) & CAP_TO_MASK(CAP_SYS_ADMIN) ||
+				p->sec->uid == 0 || p->sec->euid == 0)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3320: FILE: net/unix/af_unix.c:1199:
+	ska->sk_peercred.uid = skb->sk_peercred.uid = current->act_as->euid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3321: FILE: net/unix/af_unix.c:1200:
+	ska->sk_peercred.gid = skb->sk_peercred.gid = current->act_as->egid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3397: FILE: security/commoncap.c:152:
+			   cap_combine (sec->cap_permitted,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3443: FILE: security/commoncap.c:339:
+	    !cap_issubset (new_permitted, sec->cap_permitted)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3464: FILE: security/commoncap.c:355:
+	sec->suid = sec->euid = sec->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3465: FILE: security/commoncap.c:356:
+	sec->sgid = sec->egid = sec->fsgid = bprm->e_gid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3518: FILE: security/commoncap.c:454:
+		cap_clear (sec->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3519: FILE: security/commoncap.c:455:
+		cap_clear (sec->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3523: FILE: security/commoncap.c:457:
+	if (old_euid == 0 && sec->euid != 0) {
+		cap_clear (sec->cap_effective);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3524: FILE: security/commoncap.c:458:
+		cap_clear (sec->cap_effective);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3662: FILE: security/dummy.c:140:
+	sec->suid = sec->euid = sec->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3663: FILE: security/dummy.c:141:
+	sec->sgid = sec->egid = sec->fsgid = bprm->e_gid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3703: FILE: security/dummy.c:592:
+	p->sec->euid = p->sec->fsuid = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3947: FILE: security/keys/process_keys.c:364:
+	BUG_ON(!tsk->sec);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3963: FILE: security/keys/process_keys.c:380:
+	BUG_ON(!tsk->sec);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4247: FILE: security/selinux/hooks.c:176:
+	struct task_security_struct *tsec = task->sec->security;
+	task->sec->security = NULL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 16 warnings, 88 checks, 3886 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333135.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
