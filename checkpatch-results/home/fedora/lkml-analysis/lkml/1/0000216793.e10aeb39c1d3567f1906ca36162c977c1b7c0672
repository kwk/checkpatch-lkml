WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#78: FILE: fs/fat/fat.h:1:
+#ifndef _FAT_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <dotsOK>
#110: FILE: fs/fat/fat.h:33:
+		 dotsOK:1,        /* set = hidden and system files are named '.filename' */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:BIT_MACRO: Prefer using the BIT macro
#122: FILE: fs/fat/fat.h:45:
+#define FAT_HASH_SIZE	(1UL << FAT_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#123: FILE: fs/fat/fat.h:46:
+#define FAT_HASH_MASK	(FAT_HASH_SIZE-1)
                      	              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#132: FILE: fs/fat/fat.h:55:
+	unsigned char fats,fat_bits; /* number of FATs, FAT bits (12 or 16) */
 	                  ^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#155: FILE: fs/fat/fat.h:78:
+	spinlock_t inode_hash_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#165: FILE: fs/fat/fat.h:88:
+	spinlock_t cache_lru_lock;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO' are not preferred. Consider using octal permissions '0222'.
#201: FILE: fs/fat/fat.h:124:
+	return ((inode->i_mode & S_IWUGO) ? ATTR_NONE : ATTR_RO) |

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LINE_SPACING: Missing a blank line after declarations
#209: FILE: fs/fat/fat.h:132:
+	unsigned char s = name[0];
+	s = (s<<7) + (s>>1) + name[1];	s = (s<<7) + (s>>1) + name[2];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: fs/fat/fat.h:132:
+	s = (s<<7) + (s>>1) + name[1];	s = (s<<7) + (s>>1) + name[2];
 	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#209: FILE: fs/fat/fat.h:132:
+	s = (s<<7) + (s>>1) + name[1];	s = (s<<7) + (s>>1) + name[2];
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#209: FILE: fs/fat/fat.h:132:
+	s = (s<<7) + (s>>1) + name[1];	s = (s<<7) + (s>>1) + name[2];
 	                              	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#209: FILE: fs/fat/fat.h:132:
+	s = (s<<7) + (s>>1) + name[1];	s = (s<<7) + (s>>1) + name[2];
 	                              	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: fs/fat/fat.h:133:
+	s = (s<<7) + (s>>1) + name[3];	s = (s<<7) + (s>>1) + name[4];
 	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#210: FILE: fs/fat/fat.h:133:
+	s = (s<<7) + (s>>1) + name[3];	s = (s<<7) + (s>>1) + name[4];
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#210: FILE: fs/fat/fat.h:133:
+	s = (s<<7) + (s>>1) + name[3];	s = (s<<7) + (s>>1) + name[4];
 	                              	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#210: FILE: fs/fat/fat.h:133:
+	s = (s<<7) + (s>>1) + name[3];	s = (s<<7) + (s>>1) + name[4];
 	                              	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: fs/fat/fat.h:134:
+	s = (s<<7) + (s>>1) + name[5];	s = (s<<7) + (s>>1) + name[6];
 	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#211: FILE: fs/fat/fat.h:134:
+	s = (s<<7) + (s>>1) + name[5];	s = (s<<7) + (s>>1) + name[6];
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: fs/fat/fat.h:134:
+	s = (s<<7) + (s>>1) + name[5];	s = (s<<7) + (s>>1) + name[6];
 	                              	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#211: FILE: fs/fat/fat.h:134:
+	s = (s<<7) + (s>>1) + name[5];	s = (s<<7) + (s>>1) + name[6];
 	                              	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: fs/fat/fat.h:135:
+	s = (s<<7) + (s>>1) + name[7];	s = (s<<7) + (s>>1) + name[8];
 	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#212: FILE: fs/fat/fat.h:135:
+	s = (s<<7) + (s>>1) + name[7];	s = (s<<7) + (s>>1) + name[8];
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#212: FILE: fs/fat/fat.h:135:
+	s = (s<<7) + (s>>1) + name[7];	s = (s<<7) + (s>>1) + name[8];
 	                              	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#212: FILE: fs/fat/fat.h:135:
+	s = (s<<7) + (s>>1) + name[7];	s = (s<<7) + (s>>1) + name[8];
 	                              	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#213: FILE: fs/fat/fat.h:136:
+	s = (s<<7) + (s>>1) + name[9];	s = (s<<7) + (s>>1) + name[10];
 	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#213: FILE: fs/fat/fat.h:136:
+	s = (s<<7) + (s>>1) + name[9];	s = (s<<7) + (s>>1) + name[10];
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#213: FILE: fs/fat/fat.h:136:
+	s = (s<<7) + (s>>1) + name[9];	s = (s<<7) + (s>>1) + name[10];
 	                              	      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#213: FILE: fs/fat/fat.h:136:
+	s = (s<<7) + (s>>1) + name[9];	s = (s<<7) + (s>>1) + name[10];
 	                              	               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: fs/fat/fat.h:173:
+extern void fat_cache_inval_inode(struct inode *inode);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#251: FILE: fs/fat/fat.h:174:
+extern int fat_get_cluster(struct inode *inode, int cluster,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#253: FILE: fs/fat/fat.h:176:
+extern int fat_bmap(struct inode *inode, sector_t sector, sector_t *phys,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#258: FILE: fs/fat/fat.h:181:
+extern int fat_search_long(struct inode *inode, const unsigned char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#260: FILE: fs/fat/fat.h:183:
+extern int fat_dir_empty(struct inode *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: fs/fat/fat.h:184:
+extern int fat_subdirs(struct inode *dir);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: fs/fat/fat.h:185:
+extern int fat_scan(struct inode *dir, const unsigned char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: fs/fat/fat.h:187:
+extern int fat_get_dotdot_entry(struct inode *dir, struct buffer_head **bh,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#266: FILE: fs/fat/fat.h:189:
+extern int fat_alloc_new_dir(struct inode *dir, struct timespec *ts);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#267: FILE: fs/fat/fat.h:190:
+extern int fat_add_entries(struct inode *dir, void *slots, int nr_slots,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: fs/fat/fat.h:192:
+extern int fat_remove_entries(struct inode *dir, struct fat_slot_info *sinfo);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#288: FILE: fs/fat/fat.h:211:
+	fatent->bhs[0] = fatent->bhs[1] = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#300: FILE: fs/fat/fat.h:223:
+	int i;
+	fatent->u.ent32_p = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#304: FILE: fs/fat/fat.h:227:
+	fatent->bhs[0] = fatent->bhs[1] = NULL;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: fs/fat/fat.h:230:
+extern void fat_ent_access_init(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: fs/fat/fat.h:231:
+extern int fat_ent_read(struct inode *inode, struct fat_entry *fatent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: fs/fat/fat.h:233:
+extern int fat_ent_write(struct inode *inode, struct fat_entry *fatent,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: fs/fat/fat.h:235:
+extern int fat_alloc_clusters(struct inode *inode, int *cluster,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#314: FILE: fs/fat/fat.h:237:
+extern int fat_free_clusters(struct inode *inode, int cluster);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: fs/fat/fat.h:238:
+extern int fat_count_free_clusters(struct super_block *sb);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#318: FILE: fs/fat/fat.h:241:
+extern int fat_generic_ioctl(struct inode *inode, struct file *filp,
                                                                ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: fs/fat/fat.h:241:
+extern int fat_generic_ioctl(struct inode *inode, struct file *filp,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/fat/fat.h:245:
+extern int fat_setattr(struct dentry * dentry, struct iattr * attr);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#322: FILE: fs/fat/fat.h:245:
+extern int fat_setattr(struct dentry * dentry, struct iattr * attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: fs/fat/fat.h:245:
+extern int fat_setattr(struct dentry * dentry, struct iattr * attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: fs/fat/fat.h:246:
+extern void fat_truncate(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: fs/fat/fat.h:247:
+extern int fat_getattr(struct vfsmount *mnt, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: fs/fat/fat.h:251:
+extern void fat_attach(struct inode *inode, loff_t i_pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: fs/fat/fat.h:252:
+extern void fat_detach(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: fs/fat/fat.h:253:
+extern struct inode *fat_iget(struct super_block *sb, loff_t i_pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: fs/fat/fat.h:254:
+extern struct inode *fat_build_inode(struct super_block *sb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: fs/fat/fat.h:255:
+extern struct inode *fat_build_inode(struct super_block *sb,
+			struct msdos_dir_entry *de, loff_t i_pos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: fs/fat/fat.h:256:
+extern int fat_sync_inode(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#334: FILE: fs/fat/fat.h:257:
+extern int fat_fill_super(struct super_block *sb, void *data, int silent,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: fs/fat/fat.h:258:
+extern int fat_fill_super(struct super_block *sb, void *data, int silent,
+			const struct inode_operations *fs_dir_inode_ops, int isvfat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: fs/fat/fat.h:260:
+extern int fat_flush_inodes(struct super_block *sb, struct inode *i1,

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: fs/fat/fat.h:261:
+^I^I            struct inode *i2);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: fs/fat/fat.h:261:
+extern int fat_flush_inodes(struct super_block *sb, struct inode *i1,
+		            struct inode *i2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: fs/fat/fat.h:263:
+extern void fat_fs_panic(struct super_block *s, const char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#341: FILE: fs/fat/fat.h:264:
+extern void fat_clusters_flush(struct super_block *sb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: fs/fat/fat.h:265:
+extern int fat_chain_add(struct inode *inode, int new_dclus, int nr_cluster);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#343: FILE: fs/fat/fat.h:266:
+extern int date_dos2unix(unsigned short time, unsigned short date, int tz_utc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: fs/fat/fat.h:267:
+extern void fat_date_unix2dos(int unix_date, __le16 *time, __le16 *date,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: fs/fat/fat.h:269:
+extern int fat_sync_bhs(struct buffer_head **bhs, int nr_bhs);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 64 checks, 647 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000216793.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
