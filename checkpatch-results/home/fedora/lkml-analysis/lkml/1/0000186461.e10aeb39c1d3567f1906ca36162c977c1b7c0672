WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
Subject: [PATCH] fastboot: Asynchronous function calls to speed up kernel boot

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#68: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: include/linux/async.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#90: FILE: include/linux/async.h:18:
+extern void async_schedule(async_func_ptr *ptr, void *data);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: include/linux/async.h:19:
+extern void async_synchronize_full(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: include/linux/async.h:20:
+extern void async_synchronize_cookie(async_cookie_t cookie);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#144: FILE: kernel/async.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#156: FILE: kernel/async.c:13:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#158: FILE: kernel/async.c:15:
+/*
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#200: FILE: kernel/async.c:57:
+#include <asm/atomic.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: kernel/async.c:62:
+
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#223: FILE: kernel/async.c:80:
+extern int initcall_debug;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#225: FILE: kernel/async.c:82:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#232: FILE: kernel/async.c:89:
+	struct async_entry *entry;
+	if (!list_empty(&async_pending)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: kernel/async.c:91:
+		entry = list_first_entry(&async_pending,
+			struct async_entry, list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: kernel/async.c:95:
+		entry = list_first_entry(&async_running,
+			struct async_entry, list);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#245: FILE: kernel/async.c:102:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#246: FILE: kernel/async.c:103:
+}
+/*

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#269: FILE: kernel/async.c:126:
+		printk("calling  %lli_%pF @ %i\n", entry->cookie, entry->func, task_pid_nr(current));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#269: FILE: kernel/async.c:126:
+		printk("calling  %lli_%pF @ %i\n", entry->cookie, entry->func, task_pid_nr(current));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#269: FILE: kernel/async.c:126:
+		printk("calling  %lli_%pF @ %i\n", entry->cookie, entry->func, task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#276: FILE: kernel/async.c:133:
+		printk("initcall %lli_%pF returned 0 after %lld usecs\n", entry->cookie,

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#276: FILE: kernel/async.c:133:
+		printk("initcall %lli_%pF returned 0 after %lld usecs\n", entry->cookie,
+			entry->func, ktime_to_ns(delta) >> 10);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#277: FILE: kernel/async.c:134:
+		printk("initcall %lli_%pF returned 0 after %lld usecs\n", entry->cookie,
+			entry->func, ktime_to_ns(delta) >> 10);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: kernel/async.c:158:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*entry)...) over kzalloc(sizeof(struct async_entry)...)
#308: FILE: kernel/async.c:165:
+	entry = kzalloc(sizeof(struct async_entry), GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: kernel/async.c:168:
+		async_cookie_t newcookie;
+		spin_lock_irqsave(&async_lock, flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#342: FILE: kernel/async.c:199:
+		printk("async_waiting @ %i\n", task_pid_nr(current));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: kernel/async.c:209:
+		printk("async_continuing @ %i after %lli usec\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: kernel/async.c:210:
+		printk("async_continuing @ %i after %lli usec\n",
+			task_pid_nr(current), ktime_to_ns(delta) >> 10);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: kernel/async.c:215:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#362: FILE: kernel/async.c:219:
+	DECLARE_WAITQUEUE(wq, current);
+	add_wait_queue(&async_new, &wq);

WARNING:LINE_SPACING: Missing a blank line after declarations
#366: FILE: kernel/async.c:223:
+		int ret = HZ;
+		set_current_state(TASK_INTERRUPTIBLE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#404: FILE: kernel/async.c:261:
+	DECLARE_WAITQUEUE(wq, current);
+	add_wait_queue(&async_new, &wq);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#422: FILE: kernel/async.c:279:
+
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#426: FILE: kernel/async.c:283:
+		rmb();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 16 checks, 358 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000186461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
