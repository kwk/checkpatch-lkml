WARNING:TYPO_SPELLING: 'greatfully' may be misspelled - perhaps 'gratefully'?
#43: 
> greatfully accepted.
  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#51: 
solution or the kludgy patch to e2fsprogs in the the SLES RPM which

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '84e7405d89cb79b43d84e86051bf2f34d9ae5216', maybe rebased or not pulled?
#60: 
commit 84e7405d89cb79b43d84e86051bf2f34d9ae5216

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#74: 
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#128: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#183: FILE: debian/uuid-runtime.postinst

There is no reason for source files to be executable.  The executable
bit can be removed safely.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#189: FILE: debian/uuid-runtime.postinst:2:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#194: FILE: debian/uuid-runtime.postrm

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#200: FILE: debian/uuid-runtime.postrm:2:
+set -e

ERROR:EXECUTE_PERMISSIONS: do not set execute permissions for source files
#208: FILE: debian/uuid-runtime.prerm

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#214: FILE: debian/uuid-runtime.prerm:2:
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: lib/uuid/gen_uuid.c:257:
+	static int state_fd = -2;
+	static FILE *state_f;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: lib/uuid/gen_uuid.c:263:
+^I^Istate_fd = open("/var/lib/misc/uuid-clock", $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#254: FILE: lib/uuid/gen_uuid.c:264:
+				O_RDWR|O_CREAT, 0600);
 				      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#264: FILE: lib/uuid/gen_uuid.c:274:
+			if ((errno == EAGAIN) || (errno == EINTR))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#264: FILE: lib/uuid/gen_uuid.c:274:
+			if ((errno == EAGAIN) || (errno == EINTR))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#276: FILE: lib/uuid/gen_uuid.c:286:
+^I^Iif (fscanf(state_f, "clock: %04x tv: %lu %lu adj: %d\n", $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#284: FILE: lib/uuid/gen_uuid.c:294:
+^I^I$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#328: FILE: lib/uuid/gen_uuid.c:349:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#328: FILE: lib/uuid/gen_uuid.c:349:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#339: FILE: lib/uuid/gen_uuid.c:360:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#355: FILE: lib/uuid/gen_uuid.c:376:
+	uint32_t reply_len = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#358: FILE: lib/uuid/gen_uuid.c:379:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#364: FILE: lib/uuid/gen_uuid.c:385:
+^Iif (connect(s, (const struct sockaddr *) &srv_addr, $

CHECK:SPACING: No space is necessary after a cast
#364: FILE: lib/uuid/gen_uuid.c:385:
+	if (connect(s, (const struct sockaddr *) &srv_addr, 

CHECK:SPACING: No space is necessary after a cast
#376: FILE: lib/uuid/gen_uuid.c:397:
+	ret = read_all(s, (char *) &reply_len, sizeof(reply_len));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#410: FILE: lib/uuid/gen_uuid.c:449:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#425: FILE: lib/uuid/gen_uuid.c:469:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#442: FILE: misc/Makefile.in:22:
+^I^I^Ilogsave.8 filefrag.8 uuidd.8 @FSCK_MAN@ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#511: FILE: misc/uuidd.8.in:4:
+.\" $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: misc/uuidd.8.in:9:
+.B uuidd $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#519: FILE: misc/uuidd.8.in:12:
+] $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#536: FILE: misc/uuidd.8.in:29:
+.B \-s $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#544: FILE: misc/uuidd.8.in:37:
+daemon is used by the UUID library to generate $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#551: FILE: misc/uuidd.8.in:44:
+Run $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#569: FILE: misc/uuidd.8.in:62:
+Test uuidd by trying to connect to a running uuidd daemon and $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#573: FILE: misc/uuidd.8.in:66:
+Test uuidd by trying to connect to a running uuidd daemon and $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#592: FILE: misc/uuidd.c:1:
+/*

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#620: FILE: misc/uuidd.c:29:
+extern char *optarg;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#621: FILE: misc/uuidd.c:30:
+extern int optind;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#630: FILE: misc/uuidd.c:39:
+^Ifprintf(stderr, _("Usage: %s [-d] [-p pidfile] [-s socketpath]\n"), $

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#646: FILE: misc/uuidd.c:55:
+	} else if (pid != 0) {
+	    exit(0);

CHECK:SPACING: No space is necessary after a cast
#658: FILE: misc/uuidd.c:67:
+	(void) setsid();

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#668: FILE: misc/uuidd.c:77:
+extern void uuid__generate_random(uuid_t out);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#676: FILE: misc/uuidd.c:85:
+	uint32_t reply_len = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#681: FILE: misc/uuidd.c:90:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {

CHECK:SPACING: No space is necessary after a cast
#692: FILE: misc/uuidd.c:101:
+	(void) unlink(socket_path);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#694: FILE: misc/uuidd.c:103:
+^Iif (bind(s, (const struct sockaddr *) &my_addr, $

CHECK:SPACING: No space is necessary after a cast
#694: FILE: misc/uuidd.c:103:
+	if (bind(s, (const struct sockaddr *) &my_addr, 

WARNING:BRACES: braces {} are not necessary for single statement blocks
#708: FILE: misc/uuidd.c:117:
+	if (!debug) {
+		create_daemon(pidfile_path);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#714: FILE: misc/uuidd.c:123:
+		ns = accept(s, (struct sockaddr *) &from_addr, &fromlen);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#716: FILE: misc/uuidd.c:125:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#716: FILE: misc/uuidd.c:125:
+			if ((errno == EAGAIN) || (errno == EINTR))

ERROR:SPACING: space required before the open parenthesis '('
#732: FILE: misc/uuidd.c:141:
+		switch(op) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#735: FILE: misc/uuidd.c:144:
+			reply_len = strlen(reply_buf)+1;
 			                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#739: FILE: misc/uuidd.c:148:
+			reply_len = strlen(reply_buf)+1;
 			                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EAGAIN'
#767: FILE: misc/uuidd.c:176:
+			if ((errno == EAGAIN) || (errno == EINTR))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'errno == EINTR'
#767: FILE: misc/uuidd.c:176:
+			if ((errno == EAGAIN) || (errno == EINTR))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#778: FILE: misc/uuidd.c:187:
+int call_daemon(char *socket_path, int op, char *buf, int buflen, $

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#784: FILE: misc/uuidd.c:193:
+	uint32_t reply_len = 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#787: FILE: misc/uuidd.c:196:
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#796: FILE: misc/uuidd.c:205:
+^Iif (connect(s, (const struct sockaddr *) &srv_addr, $

CHECK:SPACING: No space is necessary after a cast
#796: FILE: misc/uuidd.c:205:
+	if (connect(s, (const struct sockaddr *) &srv_addr, 

CHECK:SPACING: No space is necessary after a cast
#813: FILE: misc/uuidd.c:222:
+	ret = read_all(s, (char *) &reply_len, sizeof(reply_len));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: misc/uuidd.c:242:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#850: FILE: misc/uuidd.c:259:
+	while ((c = getopt (argc, argv, "dkp:s:tr")) != EOF) {

CHECK:SPACING: No space is necessary after a cast
#875: FILE: misc/uuidd.c:284:
+		ret = call_daemon(socket_path, do_type, (char *) &uu,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#883: FILE: misc/uuidd.c:292:
+^I^I^Iprintf("Unexpected reply length from server %d\n", $

WARNING:SPLIT_STRING: quoted string split across lines
#905: FILE: misc/uuidd.c:314:
+						"Couldn't kill uuidd running "
+						"at pid %d: %s\n", do_kill,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#919: FILE: misc/uuidd.c:328:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 2
#930: FILE: misc/uuidd.rc:2:
+### BEGIN INIT INFO

ERROR:TRAILING_WHITESPACE: trailing whitespace
#968: FILE: misc/uuidd.rc:40:
+^I    if test -f /var/run/uuidd.pid; then exit 2; fi $

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 27 errors, 18 warnings, 27 checks, 822 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
