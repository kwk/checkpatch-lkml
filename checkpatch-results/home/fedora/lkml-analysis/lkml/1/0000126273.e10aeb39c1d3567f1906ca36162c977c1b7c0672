WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#62: FILE: drivers/net/can/Kconfig:15:
+config CAN_DEV
+	tristate "Platform CAN drivers with Netlink support"
+	depends on CAN
+	default Y
+	---help---
+	  Enables the common framework for platform CAN drivers with Netlink
+	  support. This is the standard library for CAN drivers.
+	  If unsure, say Y.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#71: FILE: drivers/net/can/Kconfig:24:
+config CAN_CALC_BITTIMING
+	bool "CAN bit-timing calculation"
+	depends on CAN_DEV
+	default Y
+	---help---
+	  If enabled, CAN bit-timing parameters will be calculated for the
+	  bit-rate specified via Netlink argument "bitrate" when the device
+	  get started. This works fine for the most common CAN controllers
+	  with standard bit-rates but may fail for exotic bit-rates or CAN

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#106: FILE: drivers/net/can/dev.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#121: FILE: drivers/net/can/dev.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#122: FILE: drivers/net/can/dev.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#144: FILE: drivers/net/can/dev.c:39:
+/*
+ * Bit-timing calculation derived from:

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#184: FILE: drivers/net/can/dev.c:79:
+		return -ENOTSUPP;

ENOTSUPP is not a standard error code and should be avoided in new patches.
EOPNOTSUPP should be used instead.

See: https://lore.kernel.org/netdev/20200510182252.GA411829@lunn.ch/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brp < btc->brp_min'
#206: FILE: drivers/net/can/dev.c:101:
+		if ((brp < btc->brp_min) || (brp > btc->brp_max))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'brp > btc->brp_max'
#206: FILE: drivers/net/can/dev.c:101:
+		if ((brp < btc->brp_min) || (brp > btc->brp_max))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#241: FILE: drivers/net/can/dev.c:136:
+			return -EDOM;
+		} else {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#273: FILE: drivers/net/can/dev.c:168:
+/*
+ * Checks the validity of the specified bit-timing parameters prop_seg,

WARNING:ENOTSUPP: ENOTSUPP is not a SUSV4 error code, prefer EOPNOTSUPP
#286: FILE: drivers/net/can/dev.c:181:
+		return -ENOTSUPP;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#322: FILE: drivers/net/can/dev.c:217:
+	if (priv->bittiming_const) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#338: FILE: drivers/net/can/dev.c:233:
+/*
+ * Local echo of CAN messages

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#364: FILE: drivers/net/can/dev.c:259:
+/*
+ * Put the skb on the stack to be looped backed locally lateron

CHECK:BRACES: braces {} should be used on all arms of this statement
#383: FILE: drivers/net/can/dev.c:278:
+		if (atomic_read(&skb->users) != 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#390: FILE: drivers/net/can/dev.c:285:
+		} else

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#413: FILE: drivers/net/can/dev.c:308:
+/*
+ * Get the skb from the stack and loop it back locally

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#431: FILE: drivers/net/can/dev.c:326:
+/*
+ * CAN device restart for bus-off recovery

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!skb"
#462: FILE: drivers/net/can/dev.c:357:
+	if (skb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#497: FILE: drivers/net/can/dev.c:392:
+/*
+ * CAN bus-off

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#536: FILE: drivers/net/can/dev.c:431:
+/*
+ * Allocate and setup space for the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#558: FILE: drivers/net/can/dev.c:453:
+/*
+ * Free space of the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#567: FILE: drivers/net/can/dev.c:462:
+/*
+ * Common open function when the device gets opened.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#585: FILE: drivers/net/can/dev.c:480:
+/*
+ * Common close function for cleanup before the device gets closed.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#600: FILE: drivers/net/can/dev.c:495:
+/*
+ * CAN netlink interface

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#609: FILE: drivers/net/can/dev.c:504:
+	[IFLA_CAN_BITTIMING_CONST]
+				= { .len = sizeof(struct can_bittiming_const) },

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#630: FILE: drivers/net/can/dev.c:525:
+		printk("ctrlmode %#x mask %#x flags %#x\n", priv->ctrlmode,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#715: FILE: drivers/net/can/dev.c:610:
+/*
+ * Register the CAN network device

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#743: FILE: drivers/net/can/dev.c:638:
+/*
+ * Unregister the CAN network device

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#753: FILE: drivers/net/can/dev.c:648:
+	printk(KERN_INFO MOD_DESC "\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#770: FILE: include/linux/can/dev.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#845: FILE: include/linux/can/netlink.h:1:
+/*

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#864: FILE: include/linux/can/netlink.h:20:
+ * For futher information, please read chapter "8 BIT TIMING
        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'segement' may be misspelled - perhaps 'segment'?
#886: FILE: include/linux/can/netlink.h:42:
+	__u32 tseg1_min;	/* Time segement 1 = prop_seg + phase_seg1 */
 	                	        ^^^^^^^^

WARNING:TYPO_SPELLING: 'segement' may be misspelled - perhaps 'segment'?
#888: FILE: include/linux/can/netlink.h:44:
+	__u32 tseg2_min;	/* Time segement 2 = phase_seg2 */
 	                	        ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#925: FILE: include/linux/can/netlink.h:81:
+#define CAN_CTRLMODE_LISTENONLY^I0x2 ^I/* Listen-only mode */$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000126273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 28 warnings, 7 checks, 883 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000126273.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
