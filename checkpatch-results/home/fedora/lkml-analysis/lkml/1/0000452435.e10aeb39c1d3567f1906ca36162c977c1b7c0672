WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#57: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#73: FILE: drivers/trec/trec.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#92: FILE: drivers/trec/trec.c:20:
+#define DPK(fmt, args...) printk(KERN_ERR "trec " fmt, ## args)

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#98: FILE: drivers/trec/trec.c:26:
+struct trec_dev_struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'expermental' may be misspelled - perhaps 'experimental'?
#108: FILE: drivers/trec/trec.c:36:
+int major = 240;	/* 240 a "local/expermental" device number for the moment */
                 	                ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#111: FILE: drivers/trec/trec.c:39:
+module_param(major, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#112: FILE: drivers/trec/trec.c:40:
+module_param(minor, int, S_IRUGO);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#123: FILE: drivers/trec/trec.c:51:
+struct file_operations trec_f_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#130: FILE: drivers/trec/trec.c:58:
+	uint64_t	tsc;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#143: FILE: drivers/trec/trec.c:71:
+	struct trec_buffer_struct *	next;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#144: FILE: drivers/trec/trec.c:72:
+	struct trec_struct *		cur;

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#145: FILE: drivers/trec/trec.c:73:
+	struct trec_struct *		end;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#154: FILE: drivers/trec/trec.c:82:
+struct trec_buffer_struct ^Itrec_buffers[2][TREC_COUNT];$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#155: FILE: drivers/trec/trec.c:83:
+int				trec_idx = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#156: FILE: drivers/trec/trec.c:84:
+spinlock_t ^I^I^Itrec_lock = SPIN_LOCK_UNLOCKED;$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#158: FILE: drivers/trec/trec.c:86:
+struct trec_buffer_struct *	trec_buffer_cur = NULL;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#158: FILE: drivers/trec/trec.c:86:
+struct trec_buffer_struct *	trec_buffer_cur = NULL;

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#159: FILE: drivers/trec/trec.c:87:
+struct trec_buffer_struct *	trec_buffer_snapshot = NULL;

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#159: FILE: drivers/trec/trec.c:87:
+struct trec_buffer_struct *	trec_buffer_snapshot = NULL;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: drivers/trec/trec.c:89:
+struct trec_dev_struct ^I^Itrec_dev;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#182: FILE: drivers/trec/trec.c:110:
+^I^I^Imodname = delim = ""; ^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#182: FILE: drivers/trec/trec.c:110:
+^I^I^Imodname = delim = ""; ^I^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#182: FILE: drivers/trec/trec.c:110:
+			modname = delim = ""; 		

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: drivers/trec/trec.c:112:
+		n = snprintf(b, bsize, "0x%016lx %s%s%s%s+0x%lx/0x%lx",
+			address, delim, modname, delim, symname, offset, symsize);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_init', this function's name, in a string
#200: FILE: drivers/trec/trec.c:128:
+	DPK("trec: trec_init E\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#206: FILE: drivers/trec/trec.c:134:
+			trec->next = &trec_buffers[i][(j+1) % TREC_COUNT];
 			                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_init', this function's name, in a string
#217: FILE: drivers/trec/trec.c:145:
+	DPK("trec: trec_init X\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#238: FILE: drivers/trec/trec.c:166:
+^Itrec->tsc = rd_tsc();^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#282: FILE: drivers/trec/trec.c:210:
+^I^I^I$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#284: FILE: drivers/trec/trec.c:212:
+				cur->tsc, cur->pid, (void *)cur->tsk, (void *)cur->v1, (void *)cur->v2);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: drivers/trec/trec.c:212:
+			n = snprintf(b, sizeof(b), KERN_ERR "t=%20llu pid=%5u tsk=%p v1=%p v2=%p ",
+				cur->tsc, cur->pid, (void *)cur->tsk, (void *)cur->v1, (void *)cur->v2);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: drivers/trec/trec.c:213:
+			n += snprint_address(b+n, sizeof(b)-n, cur->pc);
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#285: FILE: drivers/trec/trec.c:213:
+			n += snprint_address(b+n, sizeof(b)-n, cur->pc);
 			                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: drivers/trec/trec.c:214:
+			printk("%s\n", b);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#300: FILE: drivers/trec/trec.c:228:
+static void sysrq_handle_trec_print_snapshot(int key, struct tty_struct *tty) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#308: FILE: drivers/trec/trec.c:236:
+static void sysrq_handle_trec_snapshot(int key, struct tty_struct *tty) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#313: FILE: drivers/trec/trec.c:241:
+static struct sysrq_key_op sysrq_trec_snapshot_op = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#314: FILE: drivers/trec/trec.c:242:
+static struct sysrq_key_op sysrq_trec_snapshot_op = 
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: drivers/trec/trec.c:248:
+static struct sysrq_key_op sysrq_trec_print_snapshot_op = $

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#321: FILE: drivers/trec/trec.c:249:
+static struct sysrq_key_op sysrq_trec_print_snapshot_op = 
+{

WARNING:TYPO_SPELLING: 'Initilize' may be misspelled - perhaps 'Initialize'?
#328: FILE: drivers/trec/trec.c:256:
+ * Initilize trec sysrq support
    ^^^^^^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'setup_trec_sysrq', this function's name, in a string
#332: FILE: drivers/trec/trec.c:260:
+	DPK("setup_trec_sysrq y=trec_snapshot z=trec_print_snapshot\n");

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#337: FILE: drivers/trec/trec.c:265:
+__initcall(setup_trec_sysrq);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#347: FILE: drivers/trec/trec.c:275:
+       $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: drivers/trec/trec.c:275:
+       $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_open', this function's name, in a string
#348: FILE: drivers/trec/trec.c:276:
+	DPK("trec_open: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_open', this function's name, in a string
#353: FILE: drivers/trec/trec.c:281:
+	DPK("trec_open: X result=%d\n", result);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#362: FILE: drivers/trec/trec.c:290:
+^Iint^Iresult = 0; $

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_release', this function's name, in a string
#364: FILE: drivers/trec/trec.c:292:
+	DPK("trec_release: E\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#365: FILE: drivers/trec/trec.c:293:
+^I$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_release', this function's name, in a string
#366: FILE: drivers/trec/trec.c:294:
+	DPK("trec_release: X result=%d\n", result);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#375: FILE: drivers/trec/trec.c:303:
+^Iint ^I^Iresult;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: drivers/trec/trec.c:304:
+^Idev_t ^I^Idev_number = 0;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#377: FILE: drivers/trec/trec.c:305:
+^Istatic struct ^Iclass *trec_class;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#379: FILE: drivers/trec/trec.c:307:
+	DPK("trec_device_init: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#384: FILE: drivers/trec/trec.c:312:
+		DPK("trec_device_init: static major result=%d\n", result);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#388: FILE: drivers/trec/trec.c:316:
+		DPK("trec_device_init: dynamic major result=%d\n", result);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#389: FILE: drivers/trec/trec.c:317:
+^I}^I$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#392: FILE: drivers/trec/trec.c:320:
+		printk(KERN_WARNING "trec: can't get major %d\n", major);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#399: FILE: drivers/trec/trec.c:327:
+^I$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#401: FILE: drivers/trec/trec.c:329:
+	if (result)
+	{

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#403: FILE: drivers/trec/trec.c:331:
+		DPK("trec_device_init: cdev_add failed\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#416: FILE: drivers/trec/trec.c:344:
+	if (trec_buffer_cur == NULL) {
+		trec_init();
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trec_buffer_cur"
#416: FILE: drivers/trec/trec.c:344:
+	if (trec_buffer_cur == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_init', this function's name, in a string
#456: FILE: drivers/trec/trec.c:384:
+	DPK("trec_device_init: X result=%d major=%d minor=%d\n", result, major, minor);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_exit', this function's name, in a string
#467: FILE: drivers/trec/trec.c:395:
+	DPK("trec_device_exit: E\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'trec_device_exit', this function's name, in a string
#471: FILE: drivers/trec/trec.c:399:
+	DPK("trec_device_exit: X\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#483: FILE: include/asm-generic/trec.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#506: FILE: include/asm-i386/trec.h:1:
+/*

ERROR:TRAILING_WHITESPACE: trailing whitespace
#518: FILE: include/asm-i386/trec.h:13:
+#if CONFIG_X86_TSC $

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#524: FILE: include/asm-i386/trec.h:19:
+static uint64_t inline rd_tsc(void)

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#526: FILE: include/asm-i386/trec.h:21:
+	volatile uint64_t value;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#526: FILE: include/asm-i386/trec.h:21:
+	volatile uint64_t value;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: include/asm-x86_64/trec.h:1:
+/*

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#564: FILE: include/linux/trec.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#577: FILE: include/linux/trec.h:14:
+#include <asm/processor.h>	/* For current_text_addr */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#583: FILE: include/linux/trec.h:20:
+#define TREC_ENABLED ^I^I1$

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#589: FILE: include/linux/trec.h:26:
+			trec_write(TREC_PC_ADDR, TREC_PID, (unsigned long)(__v1), (unsigned long)(__v2)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: include/linux/trec.h:27:
+       ^I} while (0)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#590: FILE: include/linux/trec.h:27:
+       ^I} while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: include/linux/trec.h:27:
+       ^I} while (0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#592: FILE: include/linux/trec.h:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#594: FILE: include/linux/trec.h:31:
+#define TRECC0(__c) ^I^ITRECC(__c, 0, 0)$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#597: FILE: include/linux/trec.h:34:
+#define TRECC0_RETV(__c,__retv) do { TRECC0(__c); return(__retv); } while (0)
                        ^

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#597: FILE: include/linux/trec.h:34:
+#define TRECC0_RETV(__c,__retv) do { TRECC0(__c); return(__retv); } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#598: FILE: include/linux/trec.h:35:
+#define TRECC0_RET(__c) ^Ido { TRECC0(__c); return; } while (0)$

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#598: FILE: include/linux/trec.h:35:
+#define TRECC0_RET(__c) 	do { TRECC0(__c); return; } while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#600: FILE: include/linux/trec.h:37:
+#define TREC0() ^I^ITRECC0(1)$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#601: FILE: include/linux/trec.h:38:
+#define TREC1(__v) ^I^ITRECC1(1, (__v)) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#601: FILE: include/linux/trec.h:38:
+#define TREC1(__v) ^I^ITRECC1(1, (__v)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#602: FILE: include/linux/trec.h:39:
+#define TREC2(__v1, __v2)^ITRECC2(1, (__v1), (__v2)) $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: include/linux/trec.h:40:
+#define TREC_RETV(__retv) ^ITRECC0_RETV(1, __retv)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#604: FILE: include/linux/trec.h:41:
+#define TREC_RET() ^I^ITRECC0_RET(1)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: include/linux/trec.h:43:
+extern void trec_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#607: FILE: include/linux/trec.h:44:
+extern void trec_write(unsigned long pc, int pid, unsigned long v1, unsigned long v2);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#608: FILE: include/linux/trec.h:45:
+extern void trec_snapshot(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#609: FILE: include/linux/trec.h:46:
+extern void trec_print_snapshot(void);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#616: FILE: include/linux/trec.h:53:
+#define TREC_ENABLED ^I^I0$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#620: FILE: include/linux/trec.h:57:
+#define TRECC(__c,__v1, __v2)	do { } while (0)
                  ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#628: FILE: include/linux/trec.h:65:
+#define TREC_RETV(__retv) ^Ido { return(__retv); } while (0)$

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#628: FILE: include/linux/trec.h:65:
+#define TREC_RETV(__retv) 	do { return(__retv); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#628: FILE: include/linux/trec.h:65:
+#define TREC_RETV(__retv) 	do { return(__retv); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#629: FILE: include/linux/trec.h:66:
+#define TREC_RET() ^I^Ido { return; } while (0)$

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#629: FILE: include/linux/trec.h:66:
+#define TREC_RET() 		do { return; } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#629: FILE: include/linux/trec.h:66:
+#define TREC_RET() 		do { return; } while (0)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#647: FILE: lib/Kconfig.debug:306:
+config TREC
+ 	def_bool n
+ 	bool "Trace record support"
+ 	depends on DEBUG_KERNEL
+ 	help
+ 	  Trace records are a light weight tracing facility
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 61 warnings, 14 checks, 564 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000452435.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
