WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
Note that this patch unconditionally trims allocations, whereas on yours this

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#348: FILE: fs/proc/nommu.c:112:
+static struct seq_operations proc_nommu_region_list_seqop = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#374: FILE: fs/proc/nommu.c:133:
+	proc_create("maps", S_IRUGO, NULL, &proc_nommu_region_list_operations);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: No space is necessary after a cast
#397: FILE: fs/proc/proc_misc.c:205:
+		K((unsigned long) atomic_read(&mmap_pages_allocated)),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#431: FILE: fs/proc/task_nommu.c:30:
+			sbytes += kobjsize((void *) vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#439: FILE: fs/proc/task_nommu.c:34:
+			bytes += kobjsize((void *) vma->vm_start);

CHECK:SPACING: No space is necessary after a cast
#440: FILE: fs/proc/task_nommu.c:35:
+			slack += kobjsize((void *) vma->vm_start) -

CHECK:SPACING: No space is necessary after a cast
#483: FILE: fs/proc/task_nommu.c:97:
+		size += kobjsize((void *) vma->vm_start);

WARNING:LINE_SPACING: Missing a blank line after declarations
#505: FILE: fs/proc/task_nommu.c:122:
+		struct inode *inode = vma->vm_file->f_path.dentry->d_inode;
+		dev = inode->i_sb->s_dev;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#630: FILE: include/linux/mm.h:1013:
+extern void __init mmap_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#699: FILE: ipc/shm.c:1058:
+	 * given */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: mm/mmap.c:2265:
+	vm_area_cachep = kmem_cache_create("vm_area_struct",
+			sizeof(struct vm_area_struct), 0,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#766: FILE: mm/nommu.c:38:
+static inline __attribute__((format(printf, 1, 2)))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#771: FILE: mm/nommu.c:43:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#773: FILE: mm/nommu.c:45:
+	printk(KERN_DEBUG "==> %s("FMT")\n", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#773: FILE: mm/nommu.c:45:
+	printk(KERN_DEBUG "==> %s("FMT")\n", __func__, ##__VA_ARGS__)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#775: FILE: mm/nommu.c:47:
+	printk(KERN_DEBUG "<== %s()"FMT"\n", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#775: FILE: mm/nommu.c:47:
+	printk(KERN_DEBUG "<== %s()"FMT"\n", __func__, ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#777: FILE: mm/nommu.c:49:
+	printk(KERN_DEBUG "xxx" FMT"yyy\n", ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#777: FILE: mm/nommu.c:49:
+	printk(KERN_DEBUG "xxx" FMT"yyy\n", ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#780: FILE: mm/nommu.c:52:
+	no_printk(KERN_DEBUG "==> %s("FMT")\n", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#782: FILE: mm/nommu.c:54:
+	no_printk(KERN_DEBUG "<== %s()"FMT"\n", __func__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#784: FILE: mm/nommu.c:56:
+	no_printk(KERN_DEBUG FMT"\n", ##__VA_ARGS__)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#898: FILE: mm/nommu.c:420:
+			return;
+		else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#899: FILE: mm/nommu.c:421:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#925: FILE: mm/nommu.c:433:
+	BUG_ON(!nommu_region_tree.rb_node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: mm/nommu.c:462:
+	BUG_ON(!nommu_region_tree.rb_node);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#990: FILE: mm/nommu.c:472:
+		 * from ramfs/tmpfs mustn't be released here */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1030: FILE: mm/nommu.c:506:
+	BUG_ON(!vma->vm_region);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1051: FILE: mm/nommu.c:528:
+		 * (the latter is necessary as we may get identical VMAs) */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1081: FILE: mm/nommu.c:542:
+			BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1171: FILE: mm/nommu.c:630:
+	 * resides) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1222: FILE: mm/nommu.c:681:
+	 * resides) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1292: FILE: mm/nommu.c:969:
+	 * excess */

CHECK:SPACING: No space is necessary after a cast
#1315: FILE: mm/nommu.c:987:
+	region->vm_start = vma->vm_start = (unsigned long) base;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1315: FILE: mm/nommu.c:987:
+	region->vm_start = vma->vm_start = (unsigned long) base;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1316: FILE: mm/nommu.c:988:
+	region->vm_end   = vma->vm_end   = vma->vm_start + len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1451: FILE: mm/nommu.c:1130:
+			 * mappings */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1519: FILE: mm/nommu.c:1190:
+				vma->vm_start = region->vm_start = addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1520: FILE: mm/nommu.c:1191:
+				vma->vm_end = region->vm_end = addr + len;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1637: FILE: mm/nommu.c:1250:
+	printk(KERN_WARNING "Attempt to share mismatched mappings\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1647: FILE: mm/nommu.c:1256:
+	printk(KERN_WARNING "Allocation of vma for %lu byte allocation"

WARNING:SPLIT_STRING: quoted string split across lines
#1648: FILE: mm/nommu.c:1257:
+	printk(KERN_WARNING "Allocation of vma for %lu byte allocation"
+	       " from process %d failed\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1656: FILE: mm/nommu.c:1263:
+	printk(KERN_WARNING "Allocation of vm region for %lu byte allocation"

WARNING:SPLIT_STRING: quoted string split across lines
#1657: FILE: mm/nommu.c:1264:
+	printk(KERN_WARNING "Allocation of vm region for %lu byte allocation"
+	       " from process %d failed\n",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1686: FILE: mm/nommu.c:1285:
+	 * owner */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1728: FILE: mm/nommu.c:1311:
+		region->vm_end = new->vm_end = addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1730: FILE: mm/nommu.c:1313:
+		region->vm_start = new->vm_start = addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1742: FILE: mm/nommu.c:1324:
+		vma->vm_region->vm_start = vma->vm_start = addr;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1745: FILE: mm/nommu.c:1327:
+		vma->vm_region->vm_end = vma->vm_end = addr;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1783: FILE: mm/nommu.c:1349:
+	 * and list */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1796: FILE: mm/nommu.c:1359:
+	BUG_ON(atomic_read(&region->vm_usage) != 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1843: FILE: mm/nommu.c:1394:
+		printk(KERN_WARNING

WARNING:SPLIT_STRING: quoted string split across lines
#1845: FILE: mm/nommu.c:1396:
+		       "munmap of memory not mmapped by process %d (%s):"
+		       " 0x%lx-0x%lx\n",

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1864: FILE: mm/nommu.c:1415:
+		return -EINVAL;
+	} else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 33 warnings, 22 checks, 1772 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000274621.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
