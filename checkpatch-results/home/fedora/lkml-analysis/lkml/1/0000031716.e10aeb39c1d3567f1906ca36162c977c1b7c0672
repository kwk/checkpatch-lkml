WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
- Performance (a save put or get of an integer does only generate 9 assembly

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#80: 
#include "kfifo.h"

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#84: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#85: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#87: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#97: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#102: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#104: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#138: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#140: 
#define	DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#141: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#144: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#148: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#159: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#164: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#166: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#195: 
#include "kfifo.h"

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#197: 
#define FIFO_SIZE	32

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#200: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#202: 
#else

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#204: 
#endif

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#214: 
#ifdef DYNAMIC

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#219: 
#endif

WARNING:TYPO_SPELLING: 'powerfull' may be misspelled - perhaps 'powerful'?
#261: 
to use. So linux will get now an powerfull fifo API which provides all what 
                                 ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'resuse' may be misspelled - perhaps 'reuse'?
#267: 
is to provide powerful API's and LIB's to resuse code.
                                          ^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#329: FILE: include/linux/kfifo.h:48:
+typedef	unsigned int	__KFIFO_STREAM[0];

WARNING:NEW_TYPEDEFS: do not add new typedefs
#330: FILE: include/linux/kfifo.h:49:
+typedef	unsigned char	__KFIFO_REC_1;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#331: FILE: include/linux/kfifo.h:50:
+typedef	unsigned short	__KFIFO_REC_2;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptrtype' - possible side-effects?
#333: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ptrtype' may be better as '(ptrtype)' to avoid precedence issues
#333: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#333: FILE: include/linux/kfifo.h:52:
+#define __STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	union { \
+		struct { \
+			unsigned int	in; \
+			unsigned int	out; \
+		}; \
+		rectype		type; \
+		ptrtype *	ptr; \
+		const ptrtype *	ptr_const; \
+	};

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#340: FILE: include/linux/kfifo.h:59:
+		ptrtype *	ptr; \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#341: FILE: include/linux/kfifo.h:60:
+		const ptrtype *	ptr_const; \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#344: FILE: include/linux/kfifo.h:63:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#344: FILE: include/linux/kfifo.h:63:
+#define __STRUCT_KFIFO(type, size, rectype, ptrtype) \
+{ \
+	__STRUCT_KFIFO_COMMON(rectype, ptrtype) \
+	type		data[(!size || (size & (size - 1))) ? -1 : size]; \
+}

ERROR:POINTER_LOCATION: "foo *		bar" should be "foo *bar"
#357: FILE: include/linux/kfifo.h:76:
+	type *		data; \

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#367: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_STREAM' should also have an identifier name
#367: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#367: FILE: include/linux/kfifo.h:85:
+struct kfifo __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_STREAM, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#408: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_1' should also have an identifier name
#408: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#408: FILE: include/linux/kfifo.h:96:
+struct kfifo_rec_ptr_1 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_1, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned char' should also have an identifier name
#409: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__KFIFO_REC_2' should also have an identifier name
#409: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void' should also have an identifier name
#409: FILE: include/linux/kfifo.h:97:
+struct kfifo_rec_ptr_2 __STRUCT_KFIFO_PTR(unsigned char, __KFIFO_REC_2, void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#428: FILE: include/linux/kfifo.h:105:
+#define DECLARE_KFIFO_PTR(fifo, type) \
+	STRUCT_KFIFO_PTR(type) fifo

CHECK:SPACING: No space is necessary after a cast
#429: FILE: include/linux/kfifo.h:106:
+	STRUCT_KFIFO_PTR(type) fifo

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#437: FILE: include/linux/kfifo.h:113:
+#define __kfifo_initializer(fifo) \
+	(typeof(fifo)) { \
+		{ \
+			{ \
+			.in	= 0, \
+			.out	= 0, \
+			} \
+		} \
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'fifo' may be better as '(fifo)' to avoid precedence issues
#456: FILE: include/linux/kfifo.h:123:
+#define	__is_kfifo_ptr(fifo) \
+	(offsetof(typeof(*fifo), data) == offsetof(struct kfifo, data))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#469: FILE: include/linux/kfifo.h:130:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#469: FILE: include/linux/kfifo.h:130:
+#define INIT_KFIFO(fifo) \
+	fifo = __kfifo_initializer(fifo)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#485: FILE: include/linux/kfifo.h:139:
+#define DECLARE_KFIFO(fifo, type, size) \
+	STRUCT_KFIFO(type, size) fifo

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#499: FILE: include/linux/kfifo.h:150:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fifo' - possible side-effects?
#499: FILE: include/linux/kfifo.h:150:
+#define DEFINE_KFIFO(fifo, type, size) \
+	DECLARE_KFIFO(fifo, type, size) = __kfifo_initializer(fifo)

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: include/linux/kfifo.h:177:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#546: FILE: include/linux/kfifo.h:177:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: include/linux/kfifo.h:177:
+ ^I__is_kfifo_ptr(__tmps) ? ((struct kfifo *)__tmps)->size : \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: include/linux/kfifo.h:178:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#547: FILE: include/linux/kfifo.h:178:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: include/linux/kfifo.h:178:
+ ^I^I^Isizeof(__tmps->data) / sizeof(__tmps->data[0]); \$

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(__tmps->data)
#547: FILE: include/linux/kfifo.h:178:
+ 			sizeof(__tmps->data) / sizeof(__tmps->data[0]); \

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#559: FILE: include/linux/kfifo.h:185:
+#define kfifo_reset(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->in = __tmp->out = 0; \
+})

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#562: FILE: include/linux/kfifo.h:188:
+	__tmp->in = __tmp->out = 0; \

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#591: FILE: include/linux/kfifo.h:195:
+#define kfifo_reset_out(fifo)	\
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	__tmp->out = __tmp->in; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#697: FILE: include/linux/kfifo.h:245:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#697: FILE: include/linux/kfifo.h:245:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: include/linux/kfifo.h:245:
+ ^I(__avail <= recsize) ? 0 __avail - __recsize; \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#723: FILE: include/linux/kfifo.h:253:
+#define	kfifo_skip(fifo) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_skip_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, __recsize); \
+	else \
+		__tmp->out++; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#763: FILE: include/linux/kfifo.h:276:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#763: FILE: include/linux/kfifo.h:276:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: include/linux/kfifo.h:276:
+ ^I(!__recsize) ? kfifo_len(__tmp) * sizeof(__tmp->data[0]) : \$

WARNING:TYPO_SPELLING: 'numer' may be misspelled - perhaps 'number'?
#779: FILE: include/linux/kfifo.h:290:
+ * The numer of elements will be rounded-up to a power of 2.
        ^^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#789: FILE: include/linux/kfifo.h:298:
+ ^Iif (0) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#789: FILE: include/linux/kfifo.h:298:
+ ^Iif (0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#789: FILE: include/linux/kfifo.h:298:
+ ^Iif (0) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#826: FILE: include/linux/kfifo.h:319:
+ ^Iif (0) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#826: FILE: include/linux/kfifo.h:319:
+ ^Iif (0) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#826: FILE: include/linux/kfifo.h:319:
+ ^Iif (0) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#863: FILE: include/linux/kfifo.h:340:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#863: FILE: include/linux/kfifo.h:340:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: include/linux/kfifo.h:340:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#865: FILE: include/linux/kfifo.h:342:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#866: FILE: include/linux/kfifo.h:343:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#866: FILE: include/linux/kfifo.h:343:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#866: FILE: include/linux/kfifo.h:343:
+ ^I^I__dummy = (typeof(__val))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#872: FILE: include/linux/kfifo.h:349:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#872: FILE: include/linux/kfifo.h:349:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: include/linux/kfifo.h:349:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#873: FILE: include/linux/kfifo.h:350:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#873: FILE: include/linux/kfifo.h:350:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: include/linux/kfifo.h:350:
+ ^I^Iif (kfifo_is_full(__tmp)) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#874: FILE: include/linux/kfifo.h:351:
+ ^I^I^I__ret = 0; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#874: FILE: include/linux/kfifo.h:351:
+ ^I^I^I__ret = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#874: FILE: include/linux/kfifo.h:351:
+ ^I^I^I__ret = 0; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#875: FILE: include/linux/kfifo.h:352:
+ ^I^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#875: FILE: include/linux/kfifo.h:352:
+ ^I^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#875: FILE: include/linux/kfifo.h:352:
+ ^I^Ielse { \$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#877: FILE: include/linux/kfifo.h:354:
+				*(typeof(&__tmp->data[0]))__val; \
 				         ^

WARNING:MEMORY_BARRIER: memory barrier without comment
#878: FILE: include/linux/kfifo.h:355:
+			smp_wmb(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: include/linux/kfifo.h:358:
+ ^I^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#881: FILE: include/linux/kfifo.h:358:
+ ^I^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#881: FILE: include/linux/kfifo.h:358:
+ ^I^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: include/linux/kfifo.h:359:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#882: FILE: include/linux/kfifo.h:359:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: include/linux/kfifo.h:359:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#931: FILE: include/linux/kfifo.h:379:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#931: FILE: include/linux/kfifo.h:379:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: include/linux/kfifo.h:379:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#933: FILE: include/linux/kfifo.h:381:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: include/linux/kfifo.h:382:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#934: FILE: include/linux/kfifo.h:382:
+ ^I^I__dummy = (typeof(__val))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: include/linux/kfifo.h:382:
+ ^I^I__dummy = (typeof(__val))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#940: FILE: include/linux/kfifo.h:388:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#940: FILE: include/linux/kfifo.h:388:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#940: FILE: include/linux/kfifo.h:388:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#941: FILE: include/linux/kfifo.h:389:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#941: FILE: include/linux/kfifo.h:389:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#941: FILE: include/linux/kfifo.h:389:
+ ^I^Iif (kfifo_is_empty(__tmp)) \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: include/linux/kfifo.h:390:
+ ^I^I^I__ret = 0; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#942: FILE: include/linux/kfifo.h:390:
+ ^I^I^I__ret = 0; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: include/linux/kfifo.h:390:
+ ^I^I^I__ret = 0; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#943: FILE: include/linux/kfifo.h:391:
+ ^I^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#943: FILE: include/linux/kfifo.h:391:
+ ^I^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#943: FILE: include/linux/kfifo.h:391:
+ ^I^Ielse { \$

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#944: FILE: include/linux/kfifo.h:392:
+			*(typeof(&__tmp->data[0]))__val = \
 			         ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: include/linux/kfifo.h:393:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#945: FILE: include/linux/kfifo.h:393:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: include/linux/kfifo.h:393:
+ ^I^I^I^I__tmp->data[__tmp->out & (fifo_size - 1)]; \$

WARNING:MEMORY_BARRIER: memory barrier without comment
#946: FILE: include/linux/kfifo.h:394:
+			smp_wmb(); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: include/linux/kfifo.h:397:
+ ^I^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#949: FILE: include/linux/kfifo.h:397:
+ ^I^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: include/linux/kfifo.h:397:
+ ^I^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#950: FILE: include/linux/kfifo.h:398:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#950: FILE: include/linux/kfifo.h:398:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#950: FILE: include/linux/kfifo.h:398:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: include/linux/kfifo.h:422:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#993: FILE: include/linux/kfifo.h:422:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: include/linux/kfifo.h:422:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#995: FILE: include/linux/kfifo.h:424:
+		typeof(__tmp->ptr_const) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#996: FILE: include/linux/kfifo.h:425:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#996: FILE: include/linux/kfifo.h:425:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: include/linux/kfifo.h:425:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1001: FILE: include/linux/kfifo.h:430:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1001: FILE: include/linux/kfifo.h:430:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1001: FILE: include/linux/kfifo.h:430:
+ ^Ielse { \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1044: FILE: include/linux/kfifo.h:451:
+#define	kfifo_in_locked(fifo, buf, n, lock) \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_in(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1092: FILE: include/linux/kfifo.h:482:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1092: FILE: include/linux/kfifo.h:482:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: include/linux/kfifo.h:482:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1094: FILE: include/linux/kfifo.h:484:
+		typeof(__tmp->ptr) __dummy __attribute__ ((unused)); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1095: FILE: include/linux/kfifo.h:485:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1095: FILE: include/linux/kfifo.h:485:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: include/linux/kfifo.h:485:
+ ^I^I__dummy = (typeof(__buf))NULL; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1101: FILE: include/linux/kfifo.h:491:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1101: FILE: include/linux/kfifo.h:491:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: include/linux/kfifo.h:491:
+ ^Ielse { \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#1155: FILE: include/linux/kfifo.h:515:
+#define	kfifo_out_locked(fifo, buf, n, lock) \
+__kfifo_check( \
+({ \
+	unsigned long __flags; \
+	unsigned int __ret; \
+	spin_lock_irqsave(lock, __flags); \
+	__ret = kfifo_out(fifo, buf, n); \
+	spin_unlock_irqrestore(lock, __flags); \
+	__ret; \
+}) \
+)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1203: FILE: include/linux/kfifo.h:544:
+ ^Iconst void __user * __from = (from); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1203: FILE: include/linux/kfifo.h:544:
+ ^Iconst void __user * __from = (from); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1203: FILE: include/linux/kfifo.h:544:
+ ^Iconst void __user * __from = (from); \$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1203: FILE: include/linux/kfifo.h:544:
+ 	const void __user * __from = (from); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1208: FILE: include/linux/kfifo.h:549:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1208: FILE: include/linux/kfifo.h:549:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1208: FILE: include/linux/kfifo.h:549:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1212: FILE: include/linux/kfifo.h:553:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1212: FILE: include/linux/kfifo.h:553:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1212: FILE: include/linux/kfifo.h:553:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1219: FILE: include/linux/kfifo.h:560:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1219: FILE: include/linux/kfifo.h:560:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1219: FILE: include/linux/kfifo.h:560:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1242: FILE: include/linux/kfifo.h:581:
+ ^Ivoid __user * __to = (to); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1242: FILE: include/linux/kfifo.h:581:
+ ^Ivoid __user * __to = (to); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1242: FILE: include/linux/kfifo.h:581:
+ ^Ivoid __user * __to = (to); \$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1242: FILE: include/linux/kfifo.h:581:
+ 	void __user * __to = (to); \

ERROR:CODE_INDENT: code indent should use tabs where possible
#1247: FILE: include/linux/kfifo.h:586:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1247: FILE: include/linux/kfifo.h:586:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1247: FILE: include/linux/kfifo.h:586:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1251: FILE: include/linux/kfifo.h:590:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1251: FILE: include/linux/kfifo.h:590:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1251: FILE: include/linux/kfifo.h:590:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1258: FILE: include/linux/kfifo.h:597:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1258: FILE: include/linux/kfifo.h:597:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1258: FILE: include/linux/kfifo.h:597:
+ ^I} \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1282: FILE: include/linux/kfifo.h:619:
+ ^Iint __nents = (nents); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1282: FILE: include/linux/kfifo.h:619:
+ ^Iint __nents = (nents); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1282: FILE: include/linux/kfifo.h:619:
+ ^Iint __nents = (nents); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1283: FILE: include/linux/kfifo.h:620:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1283: FILE: include/linux/kfifo.h:620:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1283: FILE: include/linux/kfifo.h:620:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1286: FILE: include/linux/kfifo.h:623:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1286: FILE: include/linux/kfifo.h:623:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1286: FILE: include/linux/kfifo.h:623:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1291: FILE: include/linux/kfifo.h:628:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1291: FILE: include/linux/kfifo.h:628:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1291: FILE: include/linux/kfifo.h:628:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1300: FILE: include/linux/kfifo.h:637:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1300: FILE: include/linux/kfifo.h:637:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1300: FILE: include/linux/kfifo.h:637:
+ ^I} \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1326: FILE: include/linux/kfifo.h:651:
+#define kfifo_dma_in_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+ 	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_in_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->in += __len / sizeof(__tmp->data[0]); \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1329: FILE: include/linux/kfifo.h:654:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1329: FILE: include/linux/kfifo.h:654:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1329: FILE: include/linux/kfifo.h:654:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1356: FILE: include/linux/kfifo.h:681:
+ ^Iint __nents = (nents); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1356: FILE: include/linux/kfifo.h:681:
+ ^Iint __nents = (nents); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1356: FILE: include/linux/kfifo.h:681:
+ ^Iint __nents = (nents); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1357: FILE: include/linux/kfifo.h:682:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1357: FILE: include/linux/kfifo.h:682:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1357: FILE: include/linux/kfifo.h:682:
+ ^Iunsigned int __len = (len); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1360: FILE: include/linux/kfifo.h:685:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1360: FILE: include/linux/kfifo.h:685:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1360: FILE: include/linux/kfifo.h:685:
+ ^Iconst unsigned int fifo_size = kfifo_size(__tmp); \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: include/linux/kfifo.h:690:
+ ^Ielse { \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1365: FILE: include/linux/kfifo.h:690:
+ ^Ielse { \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: include/linux/kfifo.h:690:
+ ^Ielse { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1374: FILE: include/linux/kfifo.h:699:
+ ^I} \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1374: FILE: include/linux/kfifo.h:699:
+ ^I} \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1374: FILE: include/linux/kfifo.h:699:
+ ^I} \$

WARNING:TYPO_SPELLING: 'transferd' may be misspelled - perhaps 'transferred'?
#1382: FILE: include/linux/kfifo.h:705:
+ * @len: number of bytes transferd.
                          ^^^^^^^^^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1391: FILE: include/linux/kfifo.h:713:
+#define kfifo_dma_out_finish(fifo, len) \
+(void)({ \
+	typeof(fifo + 1) __tmp = (fifo); \
+ 	unsigned int __len = (len); \
+	const size_t __recsize = sizeof(__tmp->type); \
+	if (__recsize) \
+		__kfifo_dma_out_finish_rec((struct __kfifoc *)__tmp, \
+			__tmp->data, kfifo_size(__tmp), __len, __recsize); \
+	else \
+		__tmp->out += __len / sizeof(__tmp->data[0]); \
+})

ERROR:CODE_INDENT: code indent should use tabs where possible
#1394: FILE: include/linux/kfifo.h:716:
+ ^Iunsigned int __len = (len); \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1394: FILE: include/linux/kfifo.h:716:
+ ^Iunsigned int __len = (len); \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1394: FILE: include/linux/kfifo.h:716:
+ ^Iunsigned int __len = (len); \$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1407: FILE: include/linux/kfifo.h:725:
+extern int __kfifo_alloc(void *fifo, unsigned int size,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: include/linux/kfifo.h:726:
+extern int __kfifo_alloc(void *fifo, unsigned int size,
+	size_t esize, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1420: FILE: include/linux/kfifo.h:729:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1421: FILE: include/linux/kfifo.h:730:
+extern void __kfifo_init(void *fifo, void *buffer, unsigned int size,
+	size_t esize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1438: FILE: include/linux/kfifo.h:732:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1439: FILE: include/linux/kfifo.h:733:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, const void *buf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1451: FILE: include/linux/kfifo.h:736:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1452: FILE: include/linux/kfifo.h:737:
+extern unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1456: FILE: include/linux/kfifo.h:739:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1457: FILE: include/linux/kfifo.h:740:
+extern unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1460: FILE: include/linux/kfifo.h:743:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1461: FILE: include/linux/kfifo.h:744:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1462: FILE: include/linux/kfifo.h:745:
+extern unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+	unsigned int size, size_t esize, void *buf, unsigned int len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1464: FILE: include/linux/kfifo.h:747:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1464: FILE: include/linux/kfifo.h:747:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1465: FILE: include/linux/kfifo.h:748:
+extern unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1467: FILE: include/linux/kfifo.h:750:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, $

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: include/linux/kfifo.h:750:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1468: FILE: include/linux/kfifo.h:751:
+extern unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1470: FILE: include/linux/kfifo.h:753:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1471: FILE: include/linux/kfifo.h:754:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1472: FILE: include/linux/kfifo.h:755:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size,  size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1475: FILE: include/linux/kfifo.h:758:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1476: FILE: include/linux/kfifo.h:759:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1479: FILE: include/linux/kfifo.h:762:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1480: FILE: include/linux/kfifo.h:763:
+extern unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1483: FILE: include/linux/kfifo.h:766:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1484: FILE: include/linux/kfifo.h:767:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1485: FILE: include/linux/kfifo.h:768:
+extern unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1488: FILE: include/linux/kfifo.h:771:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1489: FILE: include/linux/kfifo.h:772:
+extern unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1492: FILE: include/linux/kfifo.h:775:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: include/linux/kfifo.h:776:
+extern unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1496: FILE: include/linux/kfifo.h:779:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1497: FILE: include/linux/kfifo.h:780:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1498: FILE: include/linux/kfifo.h:781:
+extern unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1501: FILE: include/linux/kfifo.h:784:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1502: FILE: include/linux/kfifo.h:785:
+extern unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1505: FILE: include/linux/kfifo.h:788:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1506: FILE: include/linux/kfifo.h:789:
+extern unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1509: FILE: include/linux/kfifo.h:792:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1510: FILE: include/linux/kfifo.h:793:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1511: FILE: include/linux/kfifo.h:794:
+extern void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1513: FILE: include/linux/kfifo.h:796:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1514: FILE: include/linux/kfifo.h:797:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1515: FILE: include/linux/kfifo.h:798:
+extern unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t esize,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1518: FILE: include/linux/kfifo.h:801:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1519: FILE: include/linux/kfifo.h:802:
+extern unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1522: FILE: include/linux/kfifo.h:805:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1523: FILE: include/linux/kfifo.h:806:
+extern unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1526: FILE: include/linux/kfifo.h:809:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1527: FILE: include/linux/kfifo.h:810:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1528: FILE: include/linux/kfifo.h:811:
+extern void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1530: FILE: include/linux/kfifo.h:813:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1531: FILE: include/linux/kfifo.h:814:
+extern unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1532: FILE: include/linux/kfifo.h:815:
+extern unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#1561: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#1561: FILE: kernel/kfifo.c:30:
+#define	roundup_diff(val, size)	(((val) + (size - 1)) / size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1572: FILE: kernel/kfifo.c:33:
+int __kfifo_alloc(void *fifo, unsigned int size,
+		size_t esize, gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1604: FILE: kernel/kfifo.c:45:
+	BUG_ON(size <= 1);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1606: FILE: kernel/kfifo.c:47:
+	proxy->in = proxy->out = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1650: FILE: kernel/kfifo.c:66:
+^I$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1655: FILE: kernel/kfifo.c:71:
+	proxy->in = proxy->out = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1664: FILE: kernel/kfifo.c:77:
+extern unsigned int __kfifo_in(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, const void *buf,

WARNING:MEMORY_BARRIER: memory barrier without comment
#1694: FILE: kernel/kfifo.c:96:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1703: FILE: kernel/kfifo.c:103:
+unsigned int __kfifo_out(struct __kfifoc *fifoc, void *data,
+		unsigned int size, size_t esize, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1732: FILE: kernel/kfifo.c:121:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1741: FILE: kernel/kfifo.c:128:
+extern unsigned long __kfifo_from_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size,  size_t esize,

CHECK:BRACES: braces {} should be used on all arms of this statement
#1765: FILE: kernel/kfifo.c:146:
+	if (unlikely(ret))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1767: FILE: kernel/kfifo.c:148:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1778: FILE: kernel/kfifo.c:155:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1785: FILE: kernel/kfifo.c:162:
+unsigned long __kfifo_to_user(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize, void __user *to,

CHECK:BRACES: Unbalanced braces around else statement
#1806: FILE: kernel/kfifo.c:182:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#1815: FILE: kernel/kfifo.c:189:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1822: FILE: kernel/kfifo.c:196:
+static unsigned int setup_sgl(void *data, unsigned int size,
+	struct scatterlist *sgl, int nents, unsigned int len, unsigned int off)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1828: FILE: kernel/kfifo.c:202:
+		if (nents > 1) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1834: FILE: kernel/kfifo.c:208:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1846: FILE: kernel/kfifo.c:218:
+unsigned int __kfifo_dma_in_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1859: FILE: kernel/kfifo.c:225:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1881: FILE: kernel/kfifo.c:240:
+unsigned int __kfifo_dma_out_prepare(struct __kfifoc *fifoc,
+		void *data, unsigned int size, size_t esize,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1888: FILE: kernel/kfifo.c:247:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1909: FILE: kernel/kfifo.c:264:
+unsigned int __kfifo_in_1(struct __kfifoc *fifoc, void *data,
+		unsigned int size, const void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1931: FILE: kernel/kfifo.c:282:
+	smp_wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1953: FILE: kernel/kfifo.c:288:
+unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1954: FILE: kernel/kfifo.c:289:
+unsigned int __kfifo_out_1(struct __kfifoc *fifoc, void *data, 
+		unsigned int size, void *buf, unsigned int len)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1975: FILE: kernel/kfifo.c:307:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1985: FILE: kernel/kfifo.c:314:
+extern unsigned long __kfifo_from_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2008: FILE: kernel/kfifo.c:336:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2018: FILE: kernel/kfifo.c:343:
+unsigned long __kfifo_to_user_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, void __user *to,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2040: FILE: kernel/kfifo.c:360:
+^Iif (unlikely(ret)) $

WARNING:MEMORY_BARRIER: memory barrier without comment
#2044: FILE: kernel/kfifo.c:364:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2065: FILE: kernel/kfifo.c:371:
+unsigned int __kfifo_dma_in_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2075: FILE: kernel/kfifo.c:378:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2095: FILE: kernel/kfifo.c:393:
+unsigned int __kfifo_dma_out_prepare_1(struct __kfifoc *fifoc,
+		void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2103: FILE: kernel/kfifo.c:400:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#2121: FILE: kernel/kfifo.c:415:
+	((data)[(out) & ((size) -1)])
 	                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2127: FILE: kernel/kfifo.c:421:
+static unsigned int __kfifo_peek_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, size_t recsize)

WARNING:TYPO_SPELLING: 'storeing' may be misspelled - perhaps 'storing'?
#2159: FILE: kernel/kfifo.c:439:
+ * __kfifo_poke_n internal helper function for storeing the length of
                                                ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2165: FILE: kernel/kfifo.c:443:
+static void __kfifo_poke_n(struct __kfifoc *fifoc,
+	unsigned char *data, unsigned int size, unsigned int n, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2174: FILE: kernel/kfifo.c:452:
+unsigned int __kfifo_peek_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2184: FILE: kernel/kfifo.c:459:
+unsigned int __kfifo_in_rec(struct __kfifoc *fifoc, void *data,
+	unsigned int size, const void *buf, unsigned int len,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2205: FILE: kernel/kfifo.c:480:
+	smp_wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2214: FILE: kernel/kfifo.c:486:
+unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2215: FILE: kernel/kfifo.c:487:
+unsigned int __kfifo_out_rec(struct __kfifoc *fifoc, void *data, 
+	unsigned int size, void *buf, unsigned int len, size_t recsize)

WARNING:MEMORY_BARRIER: memory barrier without comment
#2238: FILE: kernel/kfifo.c:509:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2249: FILE: kernel/kfifo.c:516:
+unsigned long __kfifo_from_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, const void __user *from,

WARNING:MEMORY_BARRIER: memory barrier without comment
#2282: FILE: kernel/kfifo.c:542:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2304: FILE: kernel/kfifo.c:549:
+unsigned long __kfifo_to_user_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, void __user *to,

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2328: FILE: kernel/kfifo.c:570:
+^Iif (unlikely(ret)) $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2332: FILE: kernel/kfifo.c:574:
+^Iif (unlikely(ret)) $

WARNING:MEMORY_BARRIER: memory barrier without comment
#2335: FILE: kernel/kfifo.c:577:
+	smp_wmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2343: FILE: kernel/kfifo.c:584:
+unsigned int __kfifo_dma_in_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2350: FILE: kernel/kfifo.c:591:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#2352: FILE: kernel/kfifo.c:593:
+	switch(recsize) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2376: FILE: kernel/kfifo.c:614:
+void __kfifo_dma_in_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2386: FILE: kernel/kfifo.c:621:
+unsigned int __kfifo_dma_out_prepare_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, struct scatterlist *sgl,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2396: FILE: kernel/kfifo.c:628:
+		BUG();

ERROR:SPACING: space required before the open parenthesis '('
#2398: FILE: kernel/kfifo.c:630:
+	switch(recsize) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2422: FILE: kernel/kfifo.c:652:
+void __kfifo_dma_out_finish_rec(struct __kfifoc *fifoc,
+	void *data, unsigned int size, unsigned int len, size_t recsize)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 74 errors, 168 warnings, 102 checks, 2138 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031716.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
