WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> > easy iteration over the tracepoints. The debugfs filesystem must be mounted

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_dirent' - possible side-effects?
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_dirent' may be better as '(sys_dirent)' to avoid precedence issues
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sys_next' - possible side-effects?
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sys_next' may be better as '(sys_next)' to avoid precedence issues
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'st' - possible side-effects?
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'st' may be better as '(st)' to avoid precedence issues
#145: FILE: tools/perf/util/parse-events.c:116:
+#define for_each_subsystem(sys_dir, sys_dirent, sys_next, file, st)	     \
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name) &&				     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(sys_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(sys_dirent.d_name, "..") != 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#146: FILE: tools/perf/util/parse-events.c:117:
+	while (!readdir_r(sys_dir, &sys_dirent, &sys_next) && sys_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s",			     \

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_dirent' - possible side-effects?
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_dirent' may be better as '(evt_dirent)' to avoid precedence issues
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'evt_next' - possible side-effects?
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'evt_next' may be better as '(evt_next)' to avoid precedence issues
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'file' - possible side-effects?
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'st' - possible side-effects?
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'st' may be better as '(st)' to avoid precedence issues
#160: FILE: tools/perf/util/parse-events.c:125:
+#define for_each_event(sys_dirent, evt_dir, evt_dirent, evt_next, file, st)  \
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \
+		     getenv(PERF_DEBUGFS_ENVIRONMENT), "tracing/events",     \
+		     sys_dirent.d_name, evt_dirent.d_name) &&		     \
+	   (stat(file, &st) == 0) && (S_ISDIR(st.st_mode)) &&		     \
+	   (strcmp(evt_dirent.d_name, ".") != 0) &&			     \
 	   (strcmp(evt_dirent.d_name, "..") != 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#161: FILE: tools/perf/util/parse-events.c:126:
+	while (!readdir_r(evt_dir, &evt_dirent, &evt_next) && evt_next)	     \
+	if (snprintf(file, MAXPATHLEN, "%s/%s/%s/%s",			     \

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 14 checks, 189 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000098675.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
