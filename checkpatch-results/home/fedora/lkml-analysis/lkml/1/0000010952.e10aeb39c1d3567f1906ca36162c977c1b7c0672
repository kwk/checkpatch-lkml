WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#686: FILE: include/linux/early_res.h:1:
+#ifndef _LINUX_EARLY_RES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/linux/early_res.h:5:
+extern void reserve_early(u64 start, u64 end, char *name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#691: FILE: include/linux/early_res.h:6:
+extern void reserve_early_overlap_ok(u64 start, u64 end, char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#692: FILE: include/linux/early_res.h:7:
+extern void free_early(u64 start, u64 end);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#693: FILE: include/linux/early_res.h:8:
+extern void early_res_to_bootmem(u64 start, u64 end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: include/linux/early_res.h:12:
+u64 find_early_area(u64 ei_start, u64 ei_last, u64 start, u64 end,
+			 u64 size, u64 align);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#725: FILE: kernel/early_res.c:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#749: FILE: kernel/early_res.c:25:
+};
+static struct early_res early_res_x[MAX_EARLY_RES_X] __initdata;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: kernel/early_res.c:58:
+	memmove(&early_res[i], &early_res[i + 1],
+	       (j - 1 - i) * sizeof(struct early_res));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#831: FILE: kernel/early_res.c:107:
+		lower_start = lower_end = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#832: FILE: kernel/early_res.c:108:
+		upper_start = upper_end = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#856: FILE: kernel/early_res.c:132:
+static void __init __reserve_early(u64 start, u64 end, char *name,
+						int overlap_ok)

WARNING:SPLIT_STRING: quoted string split across lines
#867: FILE: kernel/early_res.c:143:
+		panic("Overlapping early reservations "
+		      "%llx-%llx %s to %llx-%llx %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#910: FILE: kernel/early_res.c:186:
+	if ((max_early_res - early_res_count) > max(max_early_res/8, 2))
 	                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#923: FILE: kernel/early_res.c:199:
+		mem = find_fw_memmap_area(start, end, size,
+					 sizeof(struct early_res));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#929: FILE: kernel/early_res.c:205:
+			mem = find_fw_memmap_area(start, end, size,
+						 sizeof(struct early_res));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: kernel/early_res.c:218:
+		memcpy(&new[1], &early_res[0],
+			 sizeof(struct early_res) * max_early_res);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#943: FILE: kernel/early_res.c:219:
+		memset(&new[max_early_res+1], 0,
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#944: FILE: kernel/early_res.c:220:
+		memset(&new[max_early_res+1], 0,
+			 sizeof(struct early_res) * (max_early_res - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: kernel/early_res.c:224:
+		memcpy(&new[1], &early_res[1],
+			 sizeof(struct early_res) * (max_early_res - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#950: FILE: kernel/early_res.c:226:
+		memset(&new[max_early_res], 0,
+			 sizeof(struct early_res) * max_early_res);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#955: FILE: kernel/early_res.c:231:
+	printk(KERN_DEBUG "early_res array is doubled to %d at [%llx - %llx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#956: FILE: kernel/early_res.c:232:
+	printk(KERN_DEBUG "early_res array is doubled to %d at [%llx - %llx]\n",
+		max_early_res, mem, mem + size - 1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_early', this function's name, in a string
#1005: FILE: kernel/early_res.c:281:
+		panic("free_early on not reserved area: %llx-%llx!",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: kernel/early_res.c:282:
+		panic("free_early on not reserved area: %llx-%llx!",
+			 start, end - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1029: FILE: kernel/early_res.c:305:
+	printk(KERN_INFO "Subtract (%d early reservations)\n", count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1034: FILE: kernel/early_res.c:310:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %15s\n", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: kernel/early_res.c:311:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %15s\n", i,
+			r->start, r->end, r->name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1044: FILE: kernel/early_res.c:320:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1087: FILE: kernel/early_res.c:363:
+		memset(&early_res[0], 0,
+			 sizeof(struct early_res) * max_early_res);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1110: FILE: kernel/early_res.c:386:
+	printk(KERN_INFO "(%d/%d early reservations) ==> bootmem [%010llx - %010llx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1111: FILE: kernel/early_res.c:387:
+	printk(KERN_INFO "(%d/%d early reservations) ==> bootmem [%010llx - %010llx]\n",
+			 count - idx, max_early_res, start, end);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1114: FILE: kernel/early_res.c:390:
+		struct early_res *r = &early_res[i];
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %16s", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1114: FILE: kernel/early_res.c:390:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %16s", i,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1115: FILE: kernel/early_res.c:391:
+		printk(KERN_INFO "  #%d [%010llx - %010llx] %16s", i,
+			r->start, r->end, r->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1119: FILE: kernel/early_res.c:395:
+			printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1119: FILE: kernel/early_res.c:395:
+			printk(KERN_CONT "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1122: FILE: kernel/early_res.c:398:
+		printk(KERN_CONT " ==> [%010llx - %010llx]\n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1122: FILE: kernel/early_res.c:398:
+		printk(KERN_CONT " ==> [%010llx - %010llx]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1123: FILE: kernel/early_res.c:399:
+		printk(KERN_CONT " ==> [%010llx - %010llx]\n",
+			final_start, final_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1125: FILE: kernel/early_res.c:401:
+		reserve_bootmem_generic(final_start, final_end - final_start,
+				BOOTMEM_DEFAULT);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1164: FILE: kernel/early_res.c:440:
+		struct early_res *r = &early_res[i];
+		if (last > r->start && addr < r->start) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1193: FILE: kernel/early_res.c:469:
+u64 __init find_early_area(u64 ei_start, u64 ei_last, u64 start, u64 end,
+			 u64 size, u64 align)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1202: FILE: kernel/early_res.c:478:
+	while (bad_addr(&addr, size, align) && addr+size <= ei_last)
 	                                           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1217: FILE: kernel/early_res.c:493:
+u64 __init find_early_area_size(u64 ei_start, u64 ei_last, u64 start,
+			 u64 *sizep, u64 align)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1239: FILE: kernel/early_res.c:515:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 31 checks, 591 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000010952.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
