WARNING:TYPO_SPELLING: 'thier' may be misspelled - perhaps 'their'?
#63: 
/* machine regulator devices with thier consumers and constraints */
                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#514: FILE: drivers/regulator/core.c:569:
+		printk(KERN_ERR "%s: no way to set suspend state\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#515: FILE: drivers/regulator/core.c:570:
+		printk(KERN_ERR "%s: no way to set suspend state\n",
+			__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#536: FILE: drivers/regulator/core.c:669:
+static int set_machine_constraints(struct regulator_dev *rdev,
+	struct regulation_constraints *constraints)

CHECK:CAMELCASE: Avoid CamelCase: <apply_uV>
#543: FILE: drivers/regulator/core.c:676:
+	if (rdev->constraints->apply_uV &&

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#544: FILE: drivers/regulator/core.c:677:
+	if (rdev->constraints->apply_uV &&
+		rdev->constraints->min_uV == rdev->constraints->max_uV &&

CHECK:CAMELCASE: Avoid CamelCase: <min_uV>
#544: FILE: drivers/regulator/core.c:677:
+		rdev->constraints->min_uV == rdev->constraints->max_uV &&

CHECK:CAMELCASE: Avoid CamelCase: <max_uV>
#544: FILE: drivers/regulator/core.c:677:
+		rdev->constraints->min_uV == rdev->constraints->max_uV &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: drivers/regulator/core.c:682:
+				printk(KERN_ERR "%s: failed to apply %duV"

WARNING:SPLIT_STRING: quoted string split across lines
#550: FILE: drivers/regulator/core.c:683:
+				printk(KERN_ERR "%s: failed to apply %duV"
+					" constraint\n", __func__,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: drivers/regulator/core.c:713:
+static int set_supply(struct regulator_dev *rdev,
+	struct regulator_dev *supply_rdev)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#587: FILE: drivers/regulator/core.c:720:
+		printk(KERN_ERR

WARNING:TABSTOP: Statements should start on a tabstop
#590: FILE: drivers/regulator/core.c:723:
+		       goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#610: FILE: drivers/regulator/core.c:743:
+static int set_consumer_device_supply(struct regulator_dev *rdev,
+	struct device *consumer_dev, const char *supply)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!supply"
#614: FILE: drivers/regulator/core.c:747:
+	if (supply == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*node)...) over kmalloc(sizeof(struct regulator_map)...)
#617: FILE: drivers/regulator/core.c:750:
+	node = kmalloc(sizeof(struct regulator_map), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node"
#618: FILE: drivers/regulator/core.c:751:
+	if (node == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/regulator/core.c:763:
+static void unset_consumer_device_supply(struct regulator_dev *rdev,
+	struct device *consumer_dev)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#636: FILE: drivers/regulator/core.c:769:
+		if (rdev == node->regulator &&
+			consumer_dev == node->dev) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: drivers/regulator/core.c:1677:
+struct regulator_dev *regulator_register(struct device *dev,
+	struct regulator_desc *regulator_desc)

WARNING:TYPO_SPELLING: 'preform' may be misspelled - perhaps 'perform'?
#720: FILE: drivers/regulator/core.c:1710:
+	/* preform any regulator specific init */
 	   ^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#764: FILE: drivers/regulator/core.c:1745:
+		ret = set_supply(rdev,
+			dev_get_drvdata(init_data->supply_regulator_dev));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#776: FILE: drivers/regulator/core.c:1757:
+		ret = set_consumer_device_supply(rdev,
+			init_data->consumer_supplies[i].dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#781: FILE: drivers/regulator/core.c:1762:
+				unset_consumer_device_supply(rdev,
+					init_data->consumer_supplies[i].dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1017: FILE: include/linux/regulator/driver.h:89:
+struct regulator_dev *regulator_register(struct device *dev,
+	struct regulator_desc *regulator_desc);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000226575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 18 checks, 914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000226575.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
