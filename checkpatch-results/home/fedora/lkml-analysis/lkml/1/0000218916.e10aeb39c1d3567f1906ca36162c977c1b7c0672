WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-v28-for-linus-phase10

WARNING:TYPO_SPELLING: 'chec' may be misspelled - perhaps 'check'?
#57: 
                                   # bb577f9: x86: add periodic corruption chec
                                                                           ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#164: 
      x86: moved Intel microcode patch loader declarations to seperate header file
                                                              ^^^^^^^^

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#307: FILE: MAINTAINERS:394:
+P:      Peter Oruba

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#308: FILE: MAINTAINERS:395:
+M:      peter.oruba@amd.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#308: FILE: MAINTAINERS:395:
+P:      Peter Oruba
+M:      peter.oruba@amd.com

WARNING:MAINTAINERS_STYLE: MAINTAINERS entries use one tab after TYPE:
#309: FILE: MAINTAINERS:396:
+S:      Supported

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#348: FILE: arch/x86/Kconfig:810:
+config MICROCODE_INTEL
+       bool "Intel microcode patch loading support"
+       depends on MICROCODE
+       default MICROCODE
+       select FW_LOADER
+       --help---
+         This options enables microcode patch loading support for Intel
+         processors.
+
+         For latest news and information on obtaining all the required
+         Intel ingredients for this driver, check:
+         <http://www.urbanmyth.org/microcode/>.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#361: FILE: arch/x86/Kconfig:823:
+config MICROCODE_AMD
+       bool "AMD microcode patch loading support"
+       depends on MICROCODE
+       select FW_LOADER
+       --help---
+         If you select this option, microcode patch loading support for AMD
+	 processors will be enabled.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#399: FILE: arch/x86/Kconfig:1120:
+config X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK
+        bool "Set the default setting of memory_corruption_check"
+	depends on X86_CHECK_BIOS_CORRUPTION
+	default y
+	help
+	 Set whether the default state of memory_corruption_check is
+	 on or off.
+

CHECK:CAMELCASE: Avoid CamelCase: <orig_video_isVGA>
#568: FILE: arch/x86/boot/video-vesa.c:227:
+	boot_params.screen_info.orig_video_isVGA = VIDEO_TYPE_VLFB;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#693: FILE: arch/x86/kernel/dumpstack_32.c:29:
+	printk(" [<%p>] %s%pS\n", (void *) address,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#693: FILE: arch/x86/kernel/dumpstack_32.c:29:
+	printk(" [<%p>] %s%pS\n", (void *) address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: arch/x86/kernel/dumpstack_32.c:30:
+	printk(" [<%p>] %s%pS\n", (void *) address,
+			reliable ? "" : "? ", (void *) address);

CHECK:SPACING: No space is necessary after a cast
#694: FILE: arch/x86/kernel/dumpstack_32.c:30:
+			reliable ? "" : "? ", (void *) address);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#704: FILE: arch/x86/kernel/dumpstack_32.c:38:
+		if (p < end && p >= (end-THREAD_SIZE))
 		                        ^

CHECK:SPACING: No space is necessary after a cast
#730: FILE: arch/x86/kernel/dumpstack_32.c:65:
+			if ((unsigned long) stack == bp + sizeof(long)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#778: FILE: arch/x86/kernel/dumpstack_32.c:136:
+	printk("%s <%s> ", (char *)data, name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#791: FILE: arch/x86/kernel/dumpstack_32.c:146:
+	printk(data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#800: FILE: arch/x86/kernel/dumpstack_32.c:161:
+	printk("%sCall Trace:\n", log_lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#823: FILE: arch/x86/kernel/dumpstack_32.c:190:
+			printk("\n%s", log_lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#824: FILE: arch/x86/kernel/dumpstack_32.c:191:
+		printk(" %08lx", *stack++);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#829: FILE: arch/x86/kernel/dumpstack_32.c:194:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#863: FILE: arch/x86/kernel/dumpstack_32.c:233:
+	printk(KERN_EMERG "Process %.*s (pid: %d, ti=%p task=%p task.ti=%p)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: arch/x86/kernel/dumpstack_32.c:234:
+	printk(KERN_EMERG "Process %.*s (pid: %d, ti=%p task=%p task.ti=%p)\n",
 		TASK_COMM_LEN, current->comm, task_pid_nr(current),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#873: FILE: arch/x86/kernel/dumpstack_32.c:246:
+		printk(KERN_EMERG "Stack:\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#875: FILE: arch/x86/kernel/dumpstack_32.c:248:
+		show_stack_log_lvl(NULL, regs, &regs->sp,
+				0, KERN_EMERG);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#914: FILE: arch/x86/kernel/dumpstack_32.c:394:
+	/*
+	* We are in trouble anyway, lets at least try

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#918: FILE: arch/x86/kernel/dumpstack_32.c:398:
+	printk(KERN_EMERG "%s", str);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#919: FILE: arch/x86/kernel/dumpstack_32.c:399:
+	printk(" on CPU%d, ip %08lx, registers:\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: arch/x86/kernel/dumpstack_32.c:400:
+	printk(" on CPU%d, ip %08lx, registers:\n",
+		smp_processor_id(), regs->ip);

WARNING:TYPO_SPELLING: 'aswell' may be misspelled - perhaps 'as well'?
#930: FILE: arch/x86/kernel/dumpstack_32.c:410:
+	 * and might aswell get out now while we still can:
 	             ^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#948: FILE: arch/x86/kernel/dumpstack_32.c:428:
+}
+early_param("oops", oops_setup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#960: FILE: arch/x86/kernel/dumpstack_32.c:437:
 }
+early_param("kstack", kstack_setup);

CHECK:SPACING: No space is necessary after a cast
#985: FILE: arch/x86/kernel/dumpstack_64.c:29:
+	printk(" [<%p>] %s%pS\n", (void *) address,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#985: FILE: arch/x86/kernel/dumpstack_64.c:29:
+	printk(" [<%p>] %s%pS\n", (void *) address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#986: FILE: arch/x86/kernel/dumpstack_64.c:30:
+	printk(" [<%p>] %s%pS\n", (void *) address,
+			reliable ? "" : "? ", (void *) address);

CHECK:SPACING: No space is necessary after a cast
#986: FILE: arch/x86/kernel/dumpstack_64.c:30:
+			reliable ? "" : "? ", (void *) address);

CHECK:SPACING: No space is necessary after a cast
#995: FILE: arch/x86/kernel/dumpstack_64.c:147:
+			if ((unsigned long) stack == bp + sizeof(long)) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1012: FILE: arch/x86/kernel/dumpstack_64.c:253:
+	printk(data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1020: FILE: arch/x86/kernel/dumpstack_64.c:260:
+	printk("%s%s\n", (char *)data, msg);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1026: FILE: arch/x86/kernel/dumpstack_64.c:265:
+	printk("%s <%s> ", (char *)data, name);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1036: FILE: arch/x86/kernel/dumpstack_64.c:275:
+	printk(data);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1045: FILE: arch/x86/kernel/dumpstack_64.c:290:
+	printk("%sCall Trace:\n", log_lvl);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1056: FILE: arch/x86/kernel/dumpstack_64.c:336:
+			printk("\n%s", log_lvl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1074: FILE: arch/x86/kernel/dumpstack_64.c:394:
+		printk(KERN_EMERG "Stack:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#1093: FILE: arch/x86/kernel/dumpstack_64.c:481:
+	printk(KERN_EMERG "%s: %04lx [#%d] ", str, err & 0xffff, ++die_counter);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1115: FILE: arch/x86/kernel/early_printk.c:16:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:MISPLACED_INIT: __initconst should be placed after bases[]
#1134: FILE: arch/x86/kernel/early_printk.c:123:
+			static const int __initconst bases[] = { 0x3f8, 0x2f8 };

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1247: FILE: arch/x86/kernel/early_printk.c:268:
+static int dbgp_wait_until_done(unsigned ctrl)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lpid == USB_PID_NAK'
#1266: FILE: arch/x86/kernel/early_printk.c:287:
+	if ((lpid == USB_PID_NAK) || (lpid == USB_PID_NYET))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lpid == USB_PID_NYET'
#1266: FILE: arch/x86/kernel/early_printk.c:287:
+	if ((lpid == USB_PID_NAK) || (lpid == USB_PID_NYET))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1284: FILE: arch/x86/kernel/early_printk.c:305:
+	lo = hi = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1286: FILE: arch/x86/kernel/early_printk.c:307:
+		lo |= bytes[i] << (8*i);
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1288: FILE: arch/x86/kernel/early_printk.c:309:
+		hi |= bytes[i] << (8*(i - 4));
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1302: FILE: arch/x86/kernel/early_printk.c:323:
+		bytes[i] = (lo >> (8*i)) & 0xff;
 		                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1304: FILE: arch/x86/kernel/early_printk.c:325:
+		bytes[i] = (hi >> (8*(i - 4))) & 0xff;
 		                    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1307: FILE: arch/x86/kernel/early_printk.c:328:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1307: FILE: arch/x86/kernel/early_printk.c:328:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1308: FILE: arch/x86/kernel/early_printk.c:329:
+static int dbgp_bulk_write(unsigned devnum, unsigned endpoint,
+			 const char *bytes, int size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1337: FILE: arch/x86/kernel/early_printk.c:358:
+static int dbgp_bulk_read(unsigned devnum, unsigned endpoint, void *data,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1337: FILE: arch/x86/kernel/early_printk.c:358:
+static int dbgp_bulk_read(unsigned devnum, unsigned endpoint, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1338: FILE: arch/x86/kernel/early_printk.c:359:
+static int dbgp_bulk_read(unsigned devnum, unsigned endpoint, void *data,
+				 int size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1368: FILE: arch/x86/kernel/early_printk.c:389:
+static int dbgp_control_msg(unsigned devnum, int requesttype, int request,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1369: FILE: arch/x86/kernel/early_printk.c:390:
+static int dbgp_control_msg(unsigned devnum, int requesttype, int request,
+	int value, int index, void *data, int size)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1377: FILE: arch/x86/kernel/early_printk.c:398:
+	if (size > (read ? DBGP_MAX_PACKET:0))
 	                                  ^

CHECK:CAMELCASE: Avoid CamelCase: <bRequestType>
#1381: FILE: arch/x86/kernel/early_printk.c:402:
+	req.bRequestType = requesttype;

CHECK:CAMELCASE: Avoid CamelCase: <bRequest>
#1382: FILE: arch/x86/kernel/early_printk.c:403:
+	req.bRequest = request;

CHECK:CAMELCASE: Avoid CamelCase: <wValue>
#1383: FILE: arch/x86/kernel/early_printk.c:404:
+	req.wValue = cpu_to_le16(value);

CHECK:CAMELCASE: Avoid CamelCase: <wIndex>
#1384: FILE: arch/x86/kernel/early_printk.c:405:
+	req.wIndex = cpu_to_le16(index);

CHECK:CAMELCASE: Avoid CamelCase: <wLength>
#1385: FILE: arch/x86/kernel/early_printk.c:406:
+	req.wLength = cpu_to_le16(size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1407: FILE: arch/x86/kernel/early_printk.c:428:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1423: FILE: arch/x86/kernel/early_printk.c:444:
+		id = read_pci_config_byte(num, slot, func, pos+PCI_CAP_LIST_ID);
 		                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1430: FILE: arch/x86/kernel/early_printk.c:451:
+		pos = read_pci_config_byte(num, slot, func,
+						 pos+PCI_CAP_LIST_NEXT);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1430: FILE: arch/x86/kernel/early_printk.c:451:
+						 pos+PCI_CAP_LIST_NEXT);
 						    ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1453: FILE: arch/x86/kernel/early_printk.c:474:
+				unsigned cap;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1493: FILE: arch/x86/kernel/early_printk.c:514:
+			writel(portsc & ~(PORT_RWC_BITS | PORT_RESET),
+				&ehci_regs->port_status[port - 1]);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1495: FILE: arch/x86/kernel/early_printk.c:516:
+				portsc = readl(&ehci_regs->port_status[port-1]);
 				                                           ^

WARNING:TYPO_SPELLING: 'happend' may be misspelled - perhaps 'happened'?
#1503: FILE: arch/x86/kernel/early_printk.c:524:
+		/* bomb out completely if something weird happend */
 		                                          ^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1548: FILE: arch/x86/kernel/early_printk.c:569:
+	u32 dword;
+	dword = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1549: FILE: arch/x86/kernel/early_printk.c:570:
+	dword = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,
+				 0x74);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1550: FILE: arch/x86/kernel/early_printk.c:571:
+	dword &= ~(0x0f<<12);
 	               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1551: FILE: arch/x86/kernel/early_printk.c:572:
+	dword |= ((port & 0x0f)<<12);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1553: FILE: arch/x86/kernel/early_printk.c:574:
+	write_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func, 0x74,
+				 dword);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1562: FILE: arch/x86/kernel/early_printk.c:583:
+	vendorid = read_pci_config(ehci_dev.bus, ehci_dev.slot, ehci_dev.func,
+		 0x00);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1594: FILE: arch/x86/kernel/early_printk.c:615:
+		portsc = readl(&ehci_regs->port_status[i-1]);
 		                                        ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_debug_port != debug_port'
#1598: FILE: arch/x86/kernel/early_printk.c:619:
+	if (port_map_tried && (new_debug_port != debug_port)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1678: FILE: arch/x86/kernel/early_printk.c:699:
+		ret = dbgp_control_msg(devnum,
+			USB_DIR_IN | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:CAMELCASE: Avoid CamelCase: <bDebugOutEndpoint>
#1692: FILE: arch/x86/kernel/early_printk.c:713:
+	dbgp_endpoint_out = dbgp_desc.bDebugOutEndpoint;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1697: FILE: arch/x86/kernel/early_printk.c:718:
+		ret = dbgp_control_msg(devnum,
+			USB_DIR_OUT | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: arch/x86/kernel/early_printk.c:722:
+			dbgp_printk("Could not move attached device to %d\n",
+				USB_DEBUG_DEVNUM);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1710: FILE: arch/x86/kernel/early_printk.c:731:
+	ret = dbgp_control_msg(USB_DEBUG_DEVNUM,
+		USB_DIR_OUT | USB_TYPE_STANDARD | USB_RECIP_DEVICE,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1736: FILE: arch/x86/kernel/early_printk.c:757:
+	port_map_tried |= (1<<(debug_port - 1));
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1737: FILE: arch/x86/kernel/early_printk.c:758:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1737: FILE: arch/x86/kernel/early_printk.c:758:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                               ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#1737: FILE: arch/x86/kernel/early_printk.c:758:
+	new_debug_port = ((debug_port-1+1)%n_ports) + 1;
 	                                  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1738: FILE: arch/x86/kernel/early_printk.c:759:
+	if (port_map_tried != ((1<<n_ports) - 1)) {
 	                         ^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1766: FILE: arch/x86/kernel/early_printk.c:787:
+		dbgp_num = simple_strtoul(s, &e, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1774: FILE: arch/x86/kernel/early_printk.c:795:
+	dbgp_printk("Found EHCI debug port on %02x:%02x.%1x\n", bus, slot,
+			 func);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1843: FILE: arch/x86/kernel/early_printk.c:864:
+		ret = dbgp_bulk_write(USB_DEBUG_DEVNUM,
+			dbgp_endpoint_out, str, chunk);

WARNING:MISPLACED_INIT: __initdata should be placed after early_console_initialized
#1881: FILE: arch/x86/kernel/early_printk.c:923:
+static int __initdata early_console_initialized;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#1904: FILE: arch/x86/kernel/early_printk.c:949:
+	keep_early = (strstr(buf, "keep") != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1914: FILE: arch/x86/kernel/early_printk.c:969:
+		if (early_dbgp_init(buf+4) < 0)
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2036: FILE: arch/x86/kernel/irqinit_64.c:221:
+		int vector = FIRST_EXTERNAL_VECTOR + i;
+		if (vector != IA32_SYSCALL_VECTOR)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2909: FILE: arch/x86/kernel/microcode_amd.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'unter' may be misspelled - perhaps 'under'?
#2921: FILE: arch/x86/kernel/microcode_amd.c:13:
+ *  Licensed unter the terms of the GNU General Public
              ^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2923: FILE: arch/x86/kernel/microcode_amd.c:15:
+ *  License version 2. See file COPYING for details.
+*/

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2945: FILE: arch/x86/kernel/microcode_amd.c:37:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#2946: FILE: arch/x86/kernel/microcode_amd.c:38:
+#include <asm/processor.h>

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3008: FILE: arch/x86/kernel/microcode_amd.c:100:
+		printk(KERN_ERR "microcode: CPU%d not a capable AMD processor\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3017: FILE: arch/x86/kernel/microcode_amd.c:109:
+	printk(KERN_INFO "microcode: collect_cpu_info_amd : patch_id=0x%x\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'collect_cpu_info_amd', this function's name, in a string
#3017: FILE: arch/x86/kernel/microcode_amd.c:109:
+	printk(KERN_INFO "microcode: collect_cpu_info_amd : patch_id=0x%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3018: FILE: arch/x86/kernel/microcode_amd.c:110:
+	printk(KERN_INFO "microcode: collect_cpu_info_amd : patch_id=0x%x\n",
+		csig->rev);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3031: FILE: arch/x86/kernel/microcode_amd.c:123:
+	BUG_ON(equiv_cpu_table == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!equiv_cpu_table"
#3031: FILE: arch/x86/kernel/microcode_amd.c:123:
+	BUG_ON(equiv_cpu_table == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3043: FILE: arch/x86/kernel/microcode_amd.c:135:
+		printk(KERN_ERR "microcode: CPU%d cpu_id "

WARNING:SPLIT_STRING: quoted string split across lines
#3044: FILE: arch/x86/kernel/microcode_amd.c:136:
+		printk(KERN_ERR "microcode: CPU%d cpu_id "
+		       "not found in equivalent cpu table \n", cpu);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3044: FILE: arch/x86/kernel/microcode_amd.c:136:
+		       "not found in equivalent cpu table \n", cpu);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->processor_rev_id[0]'
#3048: FILE: arch/x86/kernel/microcode_amd.c:140:
+	if ((mc_header->processor_rev_id[0]) != (equiv_cpu_id & 0xff)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3049: FILE: arch/x86/kernel/microcode_amd.c:141:
+		printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#3051: FILE: arch/x86/kernel/microcode_amd.c:143:
+			"microcode: CPU%d patch does not match "
+			"(patch is %x, cpu extended is %x) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3051: FILE: arch/x86/kernel/microcode_amd.c:143:
+			"(patch is %x, cpu extended is %x) \n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->processor_rev_id[1]'
#3057: FILE: arch/x86/kernel/microcode_amd.c:149:
+	if ((mc_header->processor_rev_id[1]) != ((equiv_cpu_id >> 16) & 0xff)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3058: FILE: arch/x86/kernel/microcode_amd.c:150:
+		printk(KERN_ERR "microcode: CPU%d patch does not match "

WARNING:SPLIT_STRING: quoted string split across lines
#3059: FILE: arch/x86/kernel/microcode_amd.c:151:
+		printk(KERN_ERR "microcode: CPU%d patch does not match "
+			"(patch is %x, cpu base id is %x) \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3059: FILE: arch/x86/kernel/microcode_amd.c:151:
+			"(patch is %x, cpu base id is %x) \n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!nb_pci_dev'
#3071: FILE: arch/x86/kernel/microcode_amd.c:163:
+		if ((!nb_pci_dev) ||
+		    (mc_header->nb_rev_id != nb_pci_dev->revision)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->nb_rev_id != nb_pci_dev->revision'
#3071: FILE: arch/x86/kernel/microcode_amd.c:163:
+		if ((!nb_pci_dev) ||
+		    (mc_header->nb_rev_id != nb_pci_dev->revision)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3073: FILE: arch/x86/kernel/microcode_amd.c:165:
+			printk(KERN_ERR "microcode: CPU%d NB mismatch \n", cpu);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3073: FILE: arch/x86/kernel/microcode_amd.c:165:
+			printk(KERN_ERR "microcode: CPU%d NB mismatch \n", cpu);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!sb_pci_dev'
#3085: FILE: arch/x86/kernel/microcode_amd.c:177:
+		if ((!sb_pci_dev) ||
+		    (mc_header->sb_rev_id != sb_pci_dev->revision)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mc_header->sb_rev_id != sb_pci_dev->revision'
#3085: FILE: arch/x86/kernel/microcode_amd.c:177:
+		if ((!sb_pci_dev) ||
+		    (mc_header->sb_rev_id != sb_pci_dev->revision)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3087: FILE: arch/x86/kernel/microcode_amd.c:179:
+			printk(KERN_ERR "microcode: CPU%d SB mismatch \n", cpu);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3087: FILE: arch/x86/kernel/microcode_amd.c:179:
+			printk(KERN_ERR "microcode: CPU%d SB mismatch \n", cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3111: FILE: arch/x86/kernel/microcode_amd.c:203:
+	BUG_ON(cpu_num != cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mc_amd"
#3113: FILE: arch/x86/kernel/microcode_amd.c:205:
+	if (mc_amd == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3134: FILE: arch/x86/kernel/microcode_amd.c:226:
+		printk(KERN_ERR "microcode: CPU%d update from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#3135: FILE: arch/x86/kernel/microcode_amd.c:227:
+		printk(KERN_ERR "microcode: CPU%d update from revision "
+		       "0x%x to 0x%x failed\n", cpu_num,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3140: FILE: arch/x86/kernel/microcode_amd.c:232:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#3141: FILE: arch/x86/kernel/microcode_amd.c:233:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "
+	       "0x%x to 0x%x \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#3141: FILE: arch/x86/kernel/microcode_amd.c:233:
+	       "0x%x to 0x%x \n",

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3147: FILE: arch/x86/kernel/microcode_amd.c:239:
+static void * get_next_ucode(u8 *buf, unsigned int size,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3148: FILE: arch/x86/kernel/microcode_amd.c:240:
+static void * get_next_ucode(u8 *buf, unsigned int size,
+			int (*get_ucode_data)(void *, const void *, size_t),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3160: FILE: arch/x86/kernel/microcode_amd.c:252:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#3161: FILE: arch/x86/kernel/microcode_amd.c:253:
+		printk(KERN_ERR "microcode: error! "
+		       "Wrong microcode payload type field\n");

CHECK:SPACING: No space is necessary after a cast
#3165: FILE: arch/x86/kernel/microcode_amd.c:257:
+	total_size = (unsigned long) (section_hdr[4] + (section_hdr[5] << 8));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3167: FILE: arch/x86/kernel/microcode_amd.c:259:
+	printk(KERN_INFO "microcode: size %u, total_size %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3168: FILE: arch/x86/kernel/microcode_amd.c:260:
+	printk(KERN_INFO "microcode: size %u, total_size %u\n",
+		size, total_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3171: FILE: arch/x86/kernel/microcode_amd.c:263:
+		printk(KERN_ERR "microcode: error! Bad data in microcode data file\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#3178: FILE: arch/x86/kernel/microcode_amd.c:270:
+		if (get_ucode_data(mc, buf + UCODE_CONTAINER_SECTION_HDR, total_size)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3181: FILE: arch/x86/kernel/microcode_amd.c:273:
+		} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3188: FILE: arch/x86/kernel/microcode_amd.c:280:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3190: FILE: arch/x86/kernel/microcode_amd.c:282:
+static int install_equiv_cpu_table(u8 *buf,
+		int (*get_ucode_data)(void *, const void *, size_t))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3203: FILE: arch/x86/kernel/microcode_amd.c:295:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#3204: FILE: arch/x86/kernel/microcode_amd.c:296:
+		printk(KERN_ERR "microcode: error! "
+		       "Wrong microcode equivalnet cpu table\n");

CHECK:SPACING: No space is necessary after a cast
#3208: FILE: arch/x86/kernel/microcode_amd.c:300:
+	equiv_cpu_table = (struct equiv_cpu_entry *) vmalloc(size);

WARNING:UNNECESSARY_CASTS: unnecessary cast may hide bugs, see http://c-faq.com/malloc/mallocnocast.html
#3208: FILE: arch/x86/kernel/microcode_amd.c:300:
+	equiv_cpu_table = (struct equiv_cpu_entry *) vmalloc(size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3210: FILE: arch/x86/kernel/microcode_amd.c:302:
+		printk(KERN_ERR "microcode: error, can't allocate memory for equiv CPU table\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#3210: FILE: arch/x86/kernel/microcode_amd.c:302:
+	if (!equiv_cpu_table) {
+		printk(KERN_ERR "microcode: error, can't allocate memory for equiv CPU table\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3233: FILE: arch/x86/kernel/microcode_amd.c:325:
+static int generic_load_microcode(int cpu, void *data, size_t size,
+		int (*get_ucode_data)(void *, const void *, size_t))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3243: FILE: arch/x86/kernel/microcode_amd.c:335:
+		printk(KERN_ERR "microcode: installing equivalent cpu table failed\n");

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#3251: FILE: arch/x86/kernel/microcode_amd.c:343:
+		unsigned int uninitialized_var(mc_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mc_size' should also have an identifier name
#3251: FILE: arch/x86/kernel/microcode_amd.c:343:
+		unsigned int uninitialized_var(mc_size);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:BRACES: braces {} should be used on all arms of this statement
#3259: FILE: arch/x86/kernel/microcode_amd.c:351:
+		if (get_matching_microcode(cpu, mc, new_rev)) {
[...]
+		} else 
[...]

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3264: FILE: arch/x86/kernel/microcode_amd.c:356:
+^I^I} else $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#3264: FILE: arch/x86/kernel/microcode_amd.c:356:
+		} else 

CHECK:BRACES: braces {} should be used on all arms of this statement
#3272: FILE: arch/x86/kernel/microcode_amd.c:364:
+		if (!leftover) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#3277: FILE: arch/x86/kernel/microcode_amd.c:369:
+			pr_debug("microcode: CPU%d found a matching microcode update with"
+				" version 0x%x (current=0x%x)\n",

CHECK:BRACES: Unbalanced braces around else statement
#3279: FILE: arch/x86/kernel/microcode_amd.c:371:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3301: FILE: arch/x86/kernel/microcode_amd.c:393:
+	BUG_ON(cpu != raw_smp_processor_id());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3305: FILE: arch/x86/kernel/microcode_amd.c:397:
+		printk(KERN_ERR "microcode: ucode data file %s load failed\n", fw_name);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#3309: FILE: arch/x86/kernel/microcode_amd.c:401:
+	ret = generic_load_microcode(cpu, (void*)firmware->data, firmware->size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3310: FILE: arch/x86/kernel/microcode_amd.c:402:
+	ret = generic_load_microcode(cpu, (void*)firmware->data, firmware->size,
+			&get_ucode_fw);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3319: FILE: arch/x86/kernel/microcode_amd.c:411:
+	printk(KERN_WARNING "microcode: AMD microcode update via /dev/cpu/microcode"

WARNING:SPLIT_STRING: quoted string split across lines
#3320: FILE: arch/x86/kernel/microcode_amd.c:412:
+	printk(KERN_WARNING "microcode: AMD microcode update via /dev/cpu/microcode"
+			"is not supported\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#3320: FILE: arch/x86/kernel/microcode_amd.c:412:
+	printk(KERN_WARNING "microcode: AMD microcode update via /dev/cpu/microcode"
+			"is not supported\n");

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#3332: FILE: arch/x86/kernel/microcode_amd.c:424:
+static struct microcode_ops microcode_amd_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#3340: FILE: arch/x86/kernel/microcode_amd.c:432:
+struct microcode_ops * __init init_amd_microcode(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3350: FILE: arch/x86/kernel/microcode_core.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3441: FILE: arch/x86/kernel/microcode_core.c:92:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#3442: FILE: arch/x86/kernel/microcode_core.c:93:
+#include <asm/processor.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3449: FILE: arch/x86/kernel/microcode_core.c:100:
+#define MICROCODE_VERSION ^I"2.00"$

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#3451: FILE: arch/x86/kernel/microcode_core.c:102:
+struct microcode_ops *microcode_ops;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3498: FILE: arch/x86/kernel/microcode_core.c:149:
+		printk(KERN_ERR "microcode: too much data (max %ld pages)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3534: FILE: arch/x86/kernel/microcode_core.c:185:
+		printk(KERN_ERR

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#3563: FILE: arch/x86/kernel/microcode_core.c:214:
+	unsigned long val = simple_strtoul(buf, &end, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3593: FILE: arch/x86/kernel/microcode_core.c:244:
+static ssize_t version_show(struct sys_device *dev,
+			struct sysdev_attribute *attr, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3601: FILE: arch/x86/kernel/microcode_core.c:252:
+static ssize_t pf_show(struct sys_device *dev,
+			struct sysdev_attribute *attr, char *buf)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3682: FILE: arch/x86/kernel/microcode_core.c:333:
+^I} else {^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3698: FILE: arch/x86/kernel/microcode_core.c:349:
+	BUG_ON(raw_smp_processor_id() != cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3772: FILE: arch/x86/kernel/microcode_core.c:423:
+			printk(KERN_ERR "microcode: Failed to create the sysfs "

WARNING:SPLIT_STRING: quoted string split across lines
#3773: FILE: arch/x86/kernel/microcode_core.c:424:
+			printk(KERN_ERR "microcode: Failed to create the sysfs "
+				"group for CPU%d\n", cpu);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3805: FILE: arch/x86/kernel/microcode_core.c:456:
+		printk(KERN_ERR "microcode: no support for this CPU vendor\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3830: FILE: arch/x86/kernel/microcode_core.c:481:
+	printk(KERN_INFO

WARNING:SPLIT_STRING: quoted string split across lines
#3833: FILE: arch/x86/kernel/microcode_core.c:484:
+	       " <tigran@aivazian.fsnet.co.uk>"
+	       " <peter.oruba@amd.com>\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#3852: FILE: arch/x86/kernel/microcode_core.c:503:
+	printk(KERN_INFO

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3864: FILE: arch/x86/kernel/microcode_intel.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3955: FILE: arch/x86/kernel/microcode_intel.c:92:
+#include <asm/uaccess.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#3956: FILE: arch/x86/kernel/microcode_intel.c:93:
+#include <asm/processor.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3995: FILE: arch/x86/kernel/microcode_intel.c:132:
+#define DEFAULT_UCODE_DATASIZE ^I(2000)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mc' - possible side-effects?
#4001: FILE: arch/x86/kernel/microcode_intel.c:138:
+#define get_totalsize(mc) \
+	(((struct microcode_intel *)mc)->hdr.totalsize ? \
+	 ((struct microcode_intel *)mc)->hdr.totalsize : \
+	 DEFAULT_UCODE_TOTALSIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mc' - possible side-effects?
#4006: FILE: arch/x86/kernel/microcode_intel.c:143:
+#define get_datasize(mc) \
+	(((struct microcode_intel *)mc)->hdr.datasize ? \
+	 ((struct microcode_intel *)mc)->hdr.datasize : DEFAULT_UCODE_DATASIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p1' - possible side-effects?
#4010: FILE: arch/x86/kernel/microcode_intel.c:147:
+#define sigmatch(s1, s2, p1, p2) \
+	(((s1) == (s2)) && (((p1) & (p2)) || (((p1) == 0) && ((p2) == 0))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p2' - possible side-effects?
#4010: FILE: arch/x86/kernel/microcode_intel.c:147:
+#define sigmatch(s1, s2, p1, p2) \
+	(((s1) == (s2)) && (((p1) & (p2)) || (((p1) == 0) && ((p2) == 0))))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4027: FILE: arch/x86/kernel/microcode_intel.c:164:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "

WARNING:SPLIT_STRING: quoted string split across lines
#4028: FILE: arch/x86/kernel/microcode_intel.c:165:
+		printk(KERN_ERR "microcode: CPU%d not a capable Intel "
+			"processor\n", cpu_num);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86_model >= 5'
#4034: FILE: arch/x86/kernel/microcode_intel.c:171:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'c->x86 > 6'
#4034: FILE: arch/x86/kernel/microcode_intel.c:171:
+	if ((c->x86_model >= 5) || (c->x86 > 6)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'collect_cpu_info', this function's name, in a string
#4045: FILE: arch/x86/kernel/microcode_intel.c:182:
+	pr_debug("microcode: collect_cpu_info : sig=0x%x, pf=0x%x, rev=0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4046: FILE: arch/x86/kernel/microcode_intel.c:183:
+	pr_debug("microcode: collect_cpu_info : sig=0x%x, pf=0x%x, rev=0x%x\n",
+			csig->sig, csig->pf, csig->rev);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4056: FILE: arch/x86/kernel/microcode_intel.c:193:
+static inline int $

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4073: FILE: arch/x86/kernel/microcode_intel.c:210:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#4074: FILE: arch/x86/kernel/microcode_intel.c:211:
+		printk(KERN_ERR "microcode: error! "
+			"Bad data size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4079: FILE: arch/x86/kernel/microcode_intel.c:216:
+		printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#4080: FILE: arch/x86/kernel/microcode_intel.c:217:
+		printk(KERN_ERR "microcode: error! "
+			"Unknown microcode update format\n");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ext_table_size < EXT_HEADER_SIZE'
#4085: FILE: arch/x86/kernel/microcode_intel.c:222:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4086: FILE: arch/x86/kernel/microcode_intel.c:223:
+		if ((ext_table_size < EXT_HEADER_SIZE)
+		 || ((ext_table_size - EXT_HEADER_SIZE) % EXT_SIGNATURE_SIZE)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4087: FILE: arch/x86/kernel/microcode_intel.c:224:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#4088: FILE: arch/x86/kernel/microcode_intel.c:225:
+			printk(KERN_ERR "microcode: error! "
+				"Small exttable size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4093: FILE: arch/x86/kernel/microcode_intel.c:230:
+			printk(KERN_ERR "microcode: error! "

WARNING:SPLIT_STRING: quoted string split across lines
#4094: FILE: arch/x86/kernel/microcode_intel.c:231:
+			printk(KERN_ERR "microcode: error! "
+				"Bad exttable size in microcode data file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4109: FILE: arch/x86/kernel/microcode_intel.c:246:
+			printk(KERN_WARNING "microcode: aborting, "

WARNING:SPLIT_STRING: quoted string split across lines
#4110: FILE: arch/x86/kernel/microcode_intel.c:247:
+			printk(KERN_WARNING "microcode: aborting, "
+				"bad extended signature table checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4121: FILE: arch/x86/kernel/microcode_intel.c:258:
+		printk(KERN_ERR "microcode: aborting, bad checksum\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4134: FILE: arch/x86/kernel/microcode_intel.c:271:
+			printk(KERN_ERR "microcode: aborting, bad checksum\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4185: FILE: arch/x86/kernel/microcode_intel.c:322:
+	BUG_ON(cpu_num != cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mc_intel"
#4187: FILE: arch/x86/kernel/microcode_intel.c:324:
+	if (mc_intel == NULL)

CHECK:SPACING: No space is necessary after a cast
#4195: FILE: arch/x86/kernel/microcode_intel.c:332:
+	      (unsigned long) mc_intel->bits,

CHECK:SPACING: No space is necessary after a cast
#4196: FILE: arch/x86/kernel/microcode_intel.c:333:
+	      (unsigned long) mc_intel->bits >> 16 >> 16);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4207: FILE: arch/x86/kernel/microcode_intel.c:344:
+		printk(KERN_ERR "microcode: CPU%d update from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#4208: FILE: arch/x86/kernel/microcode_intel.c:345:
+		printk(KERN_ERR "microcode: CPU%d update from revision "
+			"0x%x to 0x%x failed\n", cpu_num, uci->cpu_sig.rev, val[1]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4211: FILE: arch/x86/kernel/microcode_intel.c:348:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "

WARNING:SPLIT_STRING: quoted string split across lines
#4212: FILE: arch/x86/kernel/microcode_intel.c:349:
+	printk(KERN_INFO "microcode: CPU%d updated from revision "
+	       "0x%x to 0x%x, date = %04x-%02x-%02x \n",

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#4212: FILE: arch/x86/kernel/microcode_intel.c:349:
+	       "0x%x to 0x%x, date = %04x-%02x-%02x \n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4221: FILE: arch/x86/kernel/microcode_intel.c:358:
+static int generic_load_microcode(int cpu, void *data, size_t size,
+		int (*get_ucode_data)(void *, const void *, size_t))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4237: FILE: arch/x86/kernel/microcode_intel.c:374:
+			printk(KERN_ERR "microcode: error!"

WARNING:SPLIT_STRING: quoted string split across lines
#4238: FILE: arch/x86/kernel/microcode_intel.c:375:
+			printk(KERN_ERR "microcode: error!"
+					"Bad data in microcode data file\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#4252: FILE: arch/x86/kernel/microcode_intel.c:389:
+		if (get_matching_microcode(&uci->cpu_sig, mc, new_rev)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4257: FILE: arch/x86/kernel/microcode_intel.c:394:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#4265: FILE: arch/x86/kernel/microcode_intel.c:402:
+		if (!leftover) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#4270: FILE: arch/x86/kernel/microcode_intel.c:407:
+			pr_debug("microcode: CPU%d found a matching microcode update with"
+				 " version 0x%x (current=0x%x)\n",

CHECK:BRACES: Unbalanced braces around else statement
#4272: FILE: arch/x86/kernel/microcode_intel.c:409:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4293: FILE: arch/x86/kernel/microcode_intel.c:430:
+	BUG_ON(cpu != raw_smp_processor_id());

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#4302: FILE: arch/x86/kernel/microcode_intel.c:439:
+	ret = generic_load_microcode(cpu, (void*)firmware->data, firmware->size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4303: FILE: arch/x86/kernel/microcode_intel.c:440:
+	ret = generic_load_microcode(cpu, (void*)firmware->data, firmware->size,
+			&get_ucode_fw);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4318: FILE: arch/x86/kernel/microcode_intel.c:455:
+	BUG_ON(cpu != raw_smp_processor_id());

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#4320: FILE: arch/x86/kernel/microcode_intel.c:457:
+	return generic_load_microcode(cpu, (void*)buf, size, &get_ucode_user);

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#4331: FILE: arch/x86/kernel/microcode_intel.c:468:
+struct microcode_ops microcode_intel_ops = {

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#4339: FILE: arch/x86/kernel/microcode_intel.c:476:
+struct microcode_ops * __init init_intel_microcode(void)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4362: FILE: arch/x86/kernel/setup.c:595:
+static unsigned __read_mostly corruption_check_size = 64*1024;
                                                         ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4368: FILE: arch/x86/kernel/setup.c:601:
+
+

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#4373: FILE: arch/x86/kernel/setup.c:606:
+	memory_corruption_check = simple_strtol(arg, &end, 10);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4377: FILE: arch/x86/kernel/setup.c:610:
+}
+early_param("memory_corruption_check", set_corruption_check);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4383: FILE: arch/x86/kernel/setup.c:616:
+	corruption_check_period = simple_strtoul(arg, &end, 10);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4387: FILE: arch/x86/kernel/setup.c:620:
+}
+early_param("memory_corruption_check_period", set_corruption_check_period);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4392: FILE: arch/x86/kernel/setup.c:625:
+	unsigned size;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4401: FILE: arch/x86/kernel/setup.c:634:
+}
+early_param("memory_corruption_check_size", set_corruption_check_size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4403: FILE: arch/x86/kernel/setup.c:636:
+
+

ERROR:SPACING: space required before the open parenthesis '('
#4426: FILE: arch/x86/kernel/setup.c:659:
+	while(addr < corruption_check_size && num_scan_areas < MAX_SCAN_AREAS) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4428: FILE: arch/x86/kernel/setup.c:661:
+		u64 size;
+		addr = find_e820_area_size(addr, &size, PAGE_SIZE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4450: FILE: arch/x86/kernel/setup.c:683:
+	printk(KERN_INFO "Scanning %d areas for low memory corruption\n",

ERROR:SPACING: space required before the open parenthesis '('
#4465: FILE: arch/x86/kernel/setup.c:698:
+	for(i = 0; i < num_scan_areas; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#4469: FILE: arch/x86/kernel/setup.c:702:
+		for(; size; addr++, size -= sizeof(unsigned long)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4472: FILE: arch/x86/kernel/setup.c:705:
+			printk(KERN_ERR "Corrupted low memory at %p (%lx phys) = %08lx\n",

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#4479: FILE: arch/x86/kernel/setup.c:712:
+	WARN(corruption, KERN_ERR "Memory corruption detected in low memory\n");

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4485: FILE: arch/x86/kernel/setup.c:718:
+	mod_timer(&periodic_check_timer, round_jiffies(jiffies + corruption_check_period*HZ));
 	                                                                                ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4493: FILE: arch/x86/kernel/setup.c:726:
+	printk(KERN_INFO "Scanning for low memory corruption every %d seconds\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#4504: FILE: arch/x86/kernel/setup.c:737:
+	printk(KERN_NOTICE

WARNING:MISPLACED_INIT: __initdata should be placed after bad_bios_dmi_table[]
#4515: FILE: arch/x86/kernel/setup.c:748:
+static struct dmi_system_id __initdata bad_bios_dmi_table[] = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4575: FILE: arch/x86/kernel/setup.c:1103:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#4651: FILE: arch/x86/kernel/time_64.c:61:
+		u8 irq_v = inb_p(0x61);       /* read the current state */
+		outb_p(irq_v|0x80, 0x61);     /* reset the IRQ */

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4651: FILE: arch/x86/kernel/time_64.c:61:
+		outb_p(irq_v|0x80, 0x61);     /* reset the IRQ */
 		            ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5228: FILE: include/asm-x86/microcode.h:1:
+#ifndef ASM_X86__MICROCODE_H

WARNING:SPACING: Unnecessary space before function pointer arguments
#5240: FILE: include/asm-x86/microcode.h:13:
+	int  (*request_microcode_user) (int cpu, const void __user *buf, size_t size);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5241: FILE: include/asm-x86/microcode.h:14:
+	int  (*request_microcode_fw) (int cpu, struct device *device);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5243: FILE: include/asm-x86/microcode.h:16:
+	void (*apply_microcode) (int cpu);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5245: FILE: include/asm-x86/microcode.h:18:
+	int  (*collect_cpu_info) (int cpu, struct cpu_signature *csig);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5246: FILE: include/asm-x86/microcode.h:19:
+	void (*microcode_fini_cpu) (int cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5254: FILE: include/asm-x86/microcode.h:27:
+};
+extern struct ucode_cpu_info ucode_cpu_info[];

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5257: FILE: include/asm-x86/microcode.h:30:
+extern struct microcode_ops * __init init_intel_microcode(void);

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#5257: FILE: include/asm-x86/microcode.h:30:
+extern struct microcode_ops * __init init_intel_microcode(void);

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#5259: FILE: include/asm-x86/microcode.h:32:
+static inline struct microcode_ops * __init init_intel_microcode(void)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5266: FILE: include/asm-x86/microcode.h:39:
+extern struct microcode_ops * __init init_amd_microcode(void);

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#5266: FILE: include/asm-x86/microcode.h:39:
+extern struct microcode_ops * __init init_amd_microcode(void);

WARNING:CONST_STRUCT: struct microcode_ops should normally be const
#5268: FILE: include/asm-x86/microcode.h:41:
+static inline struct microcode_ops * __init init_amd_microcode(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5499: FILE: include/linux/usb/ehci_def.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5513: FILE: include/linux/usb/ehci_def.h:15:
+ * along with this program; if not, write to the Free Software Foundation,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5514: FILE: include/linux/usb/ehci_def.h:16:
+ * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5528: FILE: include/linux/usb/ehci_def.h:30:
+#define HC_LENGTH(p)		(((p)>>00)&0x00ff)	/* bits 7:0 */
                     		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5528: FILE: include/linux/usb/ehci_def.h:30:
+#define HC_LENGTH(p)		(((p)>>00)&0x00ff)	/* bits 7:0 */
                     		          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5529: FILE: include/linux/usb/ehci_def.h:31:
+#define HC_VERSION(p)		(((p)>>16)&0xffff)	/* bits 31:16 */
                      		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5529: FILE: include/linux/usb/ehci_def.h:31:
+#define HC_VERSION(p)		(((p)>>16)&0xffff)	/* bits 31:16 */
                      		          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5531: FILE: include/linux/usb/ehci_def.h:33:
+#define HCS_DEBUG_PORT(p)	(((p)>>20)&0xf)	/* bits 23:20, debug port? */
                          	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5531: FILE: include/linux/usb/ehci_def.h:33:
+#define HCS_DEBUG_PORT(p)	(((p)>>20)&0xf)	/* bits 23:20, debug port? */
                          	          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5532: FILE: include/linux/usb/ehci_def.h:34:
+#define HCS_INDICATOR(p)	((p)&(1 << 16))	/* true: has port indicators */
                         	    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5533: FILE: include/linux/usb/ehci_def.h:35:
+#define HCS_N_CC(p)		(((p)>>12)&0xf)	/* bits 15:12, #companion HCs */
                    		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5533: FILE: include/linux/usb/ehci_def.h:35:
+#define HCS_N_CC(p)		(((p)>>12)&0xf)	/* bits 15:12, #companion HCs */
                    		          ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5534: FILE: include/linux/usb/ehci_def.h:36:
+#define HCS_N_PCC(p)		(((p)>>8)&0xf)	/* bits 11:8, ports per CC */
                     		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5534: FILE: include/linux/usb/ehci_def.h:36:
+#define HCS_N_PCC(p)		(((p)>>8)&0xf)	/* bits 11:8, ports per CC */
                     		         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5535: FILE: include/linux/usb/ehci_def.h:37:
+#define HCS_PORTROUTED(p)	((p)&(1 << 7))	/* true: port routing */
                          	    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5536: FILE: include/linux/usb/ehci_def.h:38:
+#define HCS_PPC(p)		((p)&(1 << 4))	/* true: port power control */
                   		    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5537: FILE: include/linux/usb/ehci_def.h:39:
+#define HCS_N_PORTS(p)		(((p)>>0)&0xf)	/* bits 3:0, ports on HC */
                       		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5537: FILE: include/linux/usb/ehci_def.h:39:
+#define HCS_N_PORTS(p)		(((p)>>0)&0xf)	/* bits 3:0, ports on HC */
                       		         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5540: FILE: include/linux/usb/ehci_def.h:42:
+#define HCC_EXT_CAPS(p)		(((p)>>8)&0xff)	/* for pci extended caps */
                        		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5540: FILE: include/linux/usb/ehci_def.h:42:
+#define HCC_EXT_CAPS(p)		(((p)>>8)&0xff)	/* for pci extended caps */
                        		         ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5541: FILE: include/linux/usb/ehci_def.h:43:
+#define HCC_ISOC_CACHE(p)       ((p)&(1 << 7))  /* true: can cache isoc frame */
                                     ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5542: FILE: include/linux/usb/ehci_def.h:44:
+#define HCC_ISOC_THRES(p)       (((p)>>4)&0x7)  /* bits 6:4, uframes cached */
                                      ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5542: FILE: include/linux/usb/ehci_def.h:44:
+#define HCC_ISOC_THRES(p)       (((p)>>4)&0x7)  /* bits 6:4, uframes cached */
                                          ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5543: FILE: include/linux/usb/ehci_def.h:45:
+#define HCC_CANPARK(p)		((p)&(1 << 2))  /* true: can park on async qh */
                       		    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5544: FILE: include/linux/usb/ehci_def.h:46:
+#define HCC_PGM_FRAMELISTLEN(p) ((p)&(1 << 1))  /* true: periodic_size changes*/
                                     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5545: FILE: include/linux/usb/ehci_def.h:47:
+#define HCC_64BIT_ADDR(p)       ((p)&(1))       /* true: can use 64-bit addr */
                                     ^

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#5546: FILE: include/linux/usb/ehci_def.h:48:
+	u8		portroute [8];	 /* nibbles for routing - offset 0xC */

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#5547: FILE: include/linux/usb/ehci_def.h:49:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5549: FILE: include/linux/usb/ehci_def.h:51:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5552: FILE: include/linux/usb/ehci_def.h:54:
+struct ehci_regs {
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5556: FILE: include/linux/usb/ehci_def.h:58:
+#define CMD_PARK	(1<<11)		/* enable "park" on async qh */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5556: FILE: include/linux/usb/ehci_def.h:58:
+#define CMD_PARK	(1<<11)		/* enable "park" on async qh */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5557: FILE: include/linux/usb/ehci_def.h:59:
+#define CMD_PARK_CNT(c)	(((c)>>8)&3)	/* how many transfers to park for */
                        	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5557: FILE: include/linux/usb/ehci_def.h:59:
+#define CMD_PARK_CNT(c)	(((c)>>8)&3)	/* how many transfers to park for */
                        	         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5558: FILE: include/linux/usb/ehci_def.h:60:
+#define CMD_LRESET	(1<<7)		/* partial reset (no ports, etc) */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5558: FILE: include/linux/usb/ehci_def.h:60:
+#define CMD_LRESET	(1<<7)		/* partial reset (no ports, etc) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5559: FILE: include/linux/usb/ehci_def.h:61:
+#define CMD_IAAD	(1<<6)		/* "doorbell" interrupt async advance */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5559: FILE: include/linux/usb/ehci_def.h:61:
+#define CMD_IAAD	(1<<6)		/* "doorbell" interrupt async advance */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5560: FILE: include/linux/usb/ehci_def.h:62:
+#define CMD_ASE		(1<<5)		/* async schedule enable */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5560: FILE: include/linux/usb/ehci_def.h:62:
+#define CMD_ASE		(1<<5)		/* async schedule enable */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5561: FILE: include/linux/usb/ehci_def.h:63:
+#define CMD_PSE		(1<<4)		/* periodic schedule enable */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5561: FILE: include/linux/usb/ehci_def.h:63:
+#define CMD_PSE		(1<<4)		/* periodic schedule enable */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5563: FILE: include/linux/usb/ehci_def.h:65:
+#define CMD_RESET	(1<<1)		/* reset HC not bus */
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5563: FILE: include/linux/usb/ehci_def.h:65:
+#define CMD_RESET	(1<<1)		/* reset HC not bus */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5564: FILE: include/linux/usb/ehci_def.h:66:
+#define CMD_RUN		(1<<0)		/* start/stop HC */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5564: FILE: include/linux/usb/ehci_def.h:66:
+#define CMD_RUN		(1<<0)		/* start/stop HC */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5568: FILE: include/linux/usb/ehci_def.h:70:
+#define STS_ASS		(1<<15)		/* Async Schedule Status */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5568: FILE: include/linux/usb/ehci_def.h:70:
+#define STS_ASS		(1<<15)		/* Async Schedule Status */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5569: FILE: include/linux/usb/ehci_def.h:71:
+#define STS_PSS		(1<<14)		/* Periodic Schedule Status */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5569: FILE: include/linux/usb/ehci_def.h:71:
+#define STS_PSS		(1<<14)		/* Periodic Schedule Status */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5570: FILE: include/linux/usb/ehci_def.h:72:
+#define STS_RECL	(1<<13)		/* Reclamation */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5570: FILE: include/linux/usb/ehci_def.h:72:
+#define STS_RECL	(1<<13)		/* Reclamation */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5571: FILE: include/linux/usb/ehci_def.h:73:
+#define STS_HALT	(1<<12)		/* Not running (any reason) */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5571: FILE: include/linux/usb/ehci_def.h:73:
+#define STS_HALT	(1<<12)		/* Not running (any reason) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5574: FILE: include/linux/usb/ehci_def.h:76:
+#define STS_IAA		(1<<5)		/* Interrupted on async advance */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5574: FILE: include/linux/usb/ehci_def.h:76:
+#define STS_IAA		(1<<5)		/* Interrupted on async advance */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5575: FILE: include/linux/usb/ehci_def.h:77:
+#define STS_FATAL	(1<<4)		/* such as some PCI access errors */
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5575: FILE: include/linux/usb/ehci_def.h:77:
+#define STS_FATAL	(1<<4)		/* such as some PCI access errors */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5576: FILE: include/linux/usb/ehci_def.h:78:
+#define STS_FLR		(1<<3)		/* frame list rolled over */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5576: FILE: include/linux/usb/ehci_def.h:78:
+#define STS_FLR		(1<<3)		/* frame list rolled over */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5577: FILE: include/linux/usb/ehci_def.h:79:
+#define STS_PCD		(1<<2)		/* port change detect */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5577: FILE: include/linux/usb/ehci_def.h:79:
+#define STS_PCD		(1<<2)		/* port change detect */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5578: FILE: include/linux/usb/ehci_def.h:80:
+#define STS_ERR		(1<<1)		/* "error" completion (overflow, ...) */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5578: FILE: include/linux/usb/ehci_def.h:80:
+#define STS_ERR		(1<<1)		/* "error" completion (overflow, ...) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5579: FILE: include/linux/usb/ehci_def.h:81:
+#define STS_INT		(1<<0)		/* "normal" completion (short, ...) */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5579: FILE: include/linux/usb/ehci_def.h:81:
+#define STS_INT		(1<<0)		/* "normal" completion (short, ...) */

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#5593: FILE: include/linux/usb/ehci_def.h:95:
+	u32		reserved [9];

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5597: FILE: include/linux/usb/ehci_def.h:99:
+#define FLAG_CF		(1<<0)		/* true: we'll support "high speed" */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5597: FILE: include/linux/usb/ehci_def.h:99:
+#define FLAG_CF		(1<<0)		/* true: we'll support "high speed" */

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#5600: FILE: include/linux/usb/ehci_def.h:102:
+	u32		port_status [0];	/* up to N_PORTS */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5602: FILE: include/linux/usb/ehci_def.h:104:
+#define PORT_WKOC_E	(1<<22)		/* wake on overcurrent (enable) */
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5602: FILE: include/linux/usb/ehci_def.h:104:
+#define PORT_WKOC_E	(1<<22)		/* wake on overcurrent (enable) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5603: FILE: include/linux/usb/ehci_def.h:105:
+#define PORT_WKDISC_E	(1<<21)		/* wake on disconnect (enable) */
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5603: FILE: include/linux/usb/ehci_def.h:105:
+#define PORT_WKDISC_E	(1<<21)		/* wake on disconnect (enable) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5604: FILE: include/linux/usb/ehci_def.h:106:
+#define PORT_WKCONN_E	(1<<20)		/* wake on connect (enable) */
                      	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5604: FILE: include/linux/usb/ehci_def.h:106:
+#define PORT_WKCONN_E	(1<<20)		/* wake on connect (enable) */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5606: FILE: include/linux/usb/ehci_def.h:108:
+#define PORT_LED_OFF	(0<<14)
                     	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5607: FILE: include/linux/usb/ehci_def.h:109:
+#define PORT_LED_AMBER	(1<<14)
                       	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5607: FILE: include/linux/usb/ehci_def.h:109:
+#define PORT_LED_AMBER	(1<<14)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5608: FILE: include/linux/usb/ehci_def.h:110:
+#define PORT_LED_GREEN	(2<<14)
                       	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5609: FILE: include/linux/usb/ehci_def.h:111:
+#define PORT_LED_MASK	(3<<14)
                      	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5610: FILE: include/linux/usb/ehci_def.h:112:
+#define PORT_OWNER	(1<<13)		/* true: companion hc owns this port */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5610: FILE: include/linux/usb/ehci_def.h:112:
+#define PORT_OWNER	(1<<13)		/* true: companion hc owns this port */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5611: FILE: include/linux/usb/ehci_def.h:113:
+#define PORT_POWER	(1<<12)		/* true: has power (see PPC) */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5611: FILE: include/linux/usb/ehci_def.h:113:
+#define PORT_POWER	(1<<12)		/* true: has power (see PPC) */

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5612: FILE: include/linux/usb/ehci_def.h:114:
+#define PORT_USB11(x) (((x)&(3<<10)) == (1<<10))	/* USB 1.1 device */
                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5612: FILE: include/linux/usb/ehci_def.h:114:
+#define PORT_USB11(x) (((x)&(3<<10)) == (1<<10))	/* USB 1.1 device */
                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5612: FILE: include/linux/usb/ehci_def.h:114:
+#define PORT_USB11(x) (((x)&(3<<10)) == (1<<10))	/* USB 1.1 device */
                                           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5615: FILE: include/linux/usb/ehci_def.h:117:
+#define PORT_RESET	(1<<8)		/* reset port */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5615: FILE: include/linux/usb/ehci_def.h:117:
+#define PORT_RESET	(1<<8)		/* reset port */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5616: FILE: include/linux/usb/ehci_def.h:118:
+#define PORT_SUSPEND	(1<<7)		/* suspend port */
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5616: FILE: include/linux/usb/ehci_def.h:118:
+#define PORT_SUSPEND	(1<<7)		/* suspend port */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5617: FILE: include/linux/usb/ehci_def.h:119:
+#define PORT_RESUME	(1<<6)		/* resume it */
                    	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5617: FILE: include/linux/usb/ehci_def.h:119:
+#define PORT_RESUME	(1<<6)		/* resume it */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5618: FILE: include/linux/usb/ehci_def.h:120:
+#define PORT_OCC	(1<<5)		/* over current change */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5618: FILE: include/linux/usb/ehci_def.h:120:
+#define PORT_OCC	(1<<5)		/* over current change */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5619: FILE: include/linux/usb/ehci_def.h:121:
+#define PORT_OC		(1<<4)		/* over current active */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5619: FILE: include/linux/usb/ehci_def.h:121:
+#define PORT_OC		(1<<4)		/* over current active */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5620: FILE: include/linux/usb/ehci_def.h:122:
+#define PORT_PEC	(1<<3)		/* port enable change */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5620: FILE: include/linux/usb/ehci_def.h:122:
+#define PORT_PEC	(1<<3)		/* port enable change */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5621: FILE: include/linux/usb/ehci_def.h:123:
+#define PORT_PE		(1<<2)		/* port enable */
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5621: FILE: include/linux/usb/ehci_def.h:123:
+#define PORT_PE		(1<<2)		/* port enable */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5622: FILE: include/linux/usb/ehci_def.h:124:
+#define PORT_CSC	(1<<1)		/* connect status change */
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5622: FILE: include/linux/usb/ehci_def.h:124:
+#define PORT_CSC	(1<<1)		/* connect status change */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5623: FILE: include/linux/usb/ehci_def.h:125:
+#define PORT_CONNECT	(1<<0)		/* device connected */
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5623: FILE: include/linux/usb/ehci_def.h:125:
+#define PORT_CONNECT	(1<<0)		/* device connected */

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#5625: FILE: include/linux/usb/ehci_def.h:127:
+} __attribute__ ((packed));

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5628: FILE: include/linux/usb/ehci_def.h:130:
+#define USBMODE_SDIS	(1<<3)		/* Stream disable */
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5628: FILE: include/linux/usb/ehci_def.h:130:
+#define USBMODE_SDIS	(1<<3)		/* Stream disable */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5629: FILE: include/linux/usb/ehci_def.h:131:
+#define USBMODE_BE	(1<<2)		/* BE/LE endianness select */
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5629: FILE: include/linux/usb/ehci_def.h:131:
+#define USBMODE_BE	(1<<2)		/* BE/LE endianness select */

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5630: FILE: include/linux/usb/ehci_def.h:132:
+#define USBMODE_CM_HC	(3<<0)		/* host controller mode */
                      	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5631: FILE: include/linux/usb/ehci_def.h:133:
+#define USBMODE_CM_IDLE	(0<<0)		/* idle state */
                        	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5638: FILE: include/linux/usb/ehci_def.h:140:
+#define DBGP_OWNER	(1<<30)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5638: FILE: include/linux/usb/ehci_def.h:140:
+#define DBGP_OWNER	(1<<30)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5639: FILE: include/linux/usb/ehci_def.h:141:
+#define DBGP_ENABLED	(1<<28)
                     	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5639: FILE: include/linux/usb/ehci_def.h:141:
+#define DBGP_ENABLED	(1<<28)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5640: FILE: include/linux/usb/ehci_def.h:142:
+#define DBGP_DONE	(1<<16)
                  	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5640: FILE: include/linux/usb/ehci_def.h:142:
+#define DBGP_DONE	(1<<16)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5641: FILE: include/linux/usb/ehci_def.h:143:
+#define DBGP_INUSE	(1<<10)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5641: FILE: include/linux/usb/ehci_def.h:143:
+#define DBGP_INUSE	(1<<10)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5642: FILE: include/linux/usb/ehci_def.h:144:
+#define DBGP_ERRCODE(x)	(((x)>>7)&0x07)
                        	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5642: FILE: include/linux/usb/ehci_def.h:144:
+#define DBGP_ERRCODE(x)	(((x)>>7)&0x07)
                        	         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5645: FILE: include/linux/usb/ehci_def.h:147:
+#define DBGP_ERROR	(1<<6)
                   	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5645: FILE: include/linux/usb/ehci_def.h:147:
+#define DBGP_ERROR	(1<<6)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5646: FILE: include/linux/usb/ehci_def.h:148:
+#define DBGP_GO		(1<<5)
                		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5646: FILE: include/linux/usb/ehci_def.h:148:
+#define DBGP_GO		(1<<5)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5647: FILE: include/linux/usb/ehci_def.h:149:
+#define DBGP_OUT	(1<<4)
                 	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#5647: FILE: include/linux/usb/ehci_def.h:149:
+#define DBGP_OUT	(1<<4)

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5648: FILE: include/linux/usb/ehci_def.h:150:
+#define DBGP_LEN(x)	(((x)>>0)&0x0f)
                    	     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5648: FILE: include/linux/usb/ehci_def.h:150:
+#define DBGP_LEN(x)	(((x)>>0)&0x0f)
                    	         ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#5650: FILE: include/linux/usb/ehci_def.h:152:
+#define DBGP_PID_GET(x)		(((x)>>16)&0xff)
                        		     ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5650: FILE: include/linux/usb/ehci_def.h:152:
+#define DBGP_PID_GET(x)		(((x)>>16)&0xff)
                        		          ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5651: FILE: include/linux/usb/ehci_def.h:153:
+#define DBGP_PID_SET(data, tok)	(((data)<<8)|(tok))
                                	        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5651: FILE: include/linux/usb/ehci_def.h:153:
+#define DBGP_PID_SET(data, tok)	(((data)<<8)|(tok))
                                	            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#5655: FILE: include/linux/usb/ehci_def.h:157:
+#define DBGP_EPADDR(dev, ep)	(((dev)<<8)|(ep))
                             	       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5655: FILE: include/linux/usb/ehci_def.h:157:
+#define DBGP_EPADDR(dev, ep)	(((dev)<<8)|(ep))
                             	           ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#5656: FILE: include/linux/usb/ehci_def.h:158:
+} __attribute__ ((packed));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218916.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 159 warnings, 249 checks, 4271 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000218916.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
