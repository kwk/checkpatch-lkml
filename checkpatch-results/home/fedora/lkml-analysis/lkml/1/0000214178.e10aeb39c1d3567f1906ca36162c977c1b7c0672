WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
The following changes since commit 2515ddc6db8eb49a79f0fe5e67ff09ac7c81eab4:

WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '2515ddc6db8eb49a79f0fe5e67ff09ac7c81eab4', maybe rebased or not pulled?
#31: 
The following changes since commit 2515ddc6db8eb49a79f0fe5e67ff09ac7c81eab4:

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#146: FILE: include/linux/moduleparam.h:120:
+#define core_param(name, var, type, perm)				\
+	param_check_##type(name, &(var));				\
+	__module_param_call("", name, param_set_##type, param_get_##type, \
+			    &var, perm)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#146: FILE: include/linux/moduleparam.h:120:
+#define core_param(name, var, type, perm)				\
+	param_check_##type(name, &(var));				\
+	__module_param_call("", name, param_set_##type, param_get_##type, \
+			    &var, perm)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#146: FILE: include/linux/moduleparam.h:120:
+#define core_param(name, var, type, perm)				\
+	param_check_##type(name, &(var));				\
+	__module_param_call("", name, param_set_##type, param_get_##type, \
+			    &var, perm)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#253: FILE: kernel/module.c:67:
+ * (delete uses stop_machine/add uses RCU list operations). */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#262: FILE: kernel/module.c:137:
+static void *section_addr(Elf_Ehdr *hdr, Elf_Shdr *shdrs,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#262: FILE: kernel/module.c:137:
+static void *section_addr(Elf_Ehdr *hdr, Elf_Shdr *shdrs,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#449: FILE: kernel/module.c:2084:
+	 * find optional sections. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#508: FILE: kernel/module.c:2129:
+	if ((mod->num_syms && !mod->crcs)
+	    || (mod->num_gpl_syms && !mod->gpl_crcs)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#509: FILE: kernel/module.c:2130:
+	    || (mod->num_gpl_syms && !mod->gpl_crcs)
+	    || (mod->num_gpl_future_syms && !mod->gpl_future_crcs)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#513: FILE: kernel/module.c:2132:
 #ifdef CONFIG_UNUSED_SYMBOLS
+	    || (mod->num_unused_syms && !mod->unused_crcs)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#514: FILE: kernel/module.c:2133:
+	    || (mod->num_unused_syms && !mod->unused_crcs)
+	    || (mod->num_unused_gpl_syms && !mod->unused_gpl_crcs)

WARNING:TYPO_SPELLING: 'Noone' may be misspelled - perhaps 'No one'?
#619: FILE: kernel/module.c:2232:
+	 * info during argument parsing.  Noone should access us, since
 	                                  ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#772: FILE: kernel/params.c:376:
+#define to_module_attr(n) container_of(n, struct module_attribute, attr);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#773: FILE: kernel/params.c:377:
+#define to_module_kobject(n) container_of(n, struct module_kobject, kobj);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#830: FILE: kernel/params.c:458:
+	BUG_ON(!kp->perm);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#853: FILE: kernel/params.c:470:
+		       sizeof(*mk->mp) + sizeof(mk->mp->attrs[0]) * (num+1),
 		                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#860: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);
 	                                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#860: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);
 	                                                      ^

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#860: FILE: kernel/params.c:477:
+	attrs = krealloc(attrs, sizeof(new->grp.attrs[0])*(num+2), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#881: FILE: kernel/params.c:496:
+	new->num = num+1;
 	              ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mk)...) over kzalloc(sizeof(struct module_kobject)...)
#1020: FILE: kernel/params.c:589:
+		mk = kzalloc(sizeof(struct module_kobject), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1021: FILE: kernel/params.c:590:
+		BUG_ON(!mk);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1029: FILE: kernel/params.c:598:
+			printk(KERN_ERR "Module '%s' failed add to sysfs, "

WARNING:SPLIT_STRING: quoted string split across lines
#1030: FILE: kernel/params.c:599:
+			printk(KERN_ERR "Module '%s' failed add to sysfs, "
+			       "error number %d\n", name, err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1031: FILE: kernel/params.c:600:
+			printk(KERN_ERR	"The system will be unstable now.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1041: FILE: kernel/params.c:609:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1043: FILE: kernel/params.c:611:
+	BUG_ON(err);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1104: FILE: kernel/params.c:645:
+			strlcpy(modname, kp->name, name_len);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1163: FILE: kernel/stop_machine.c:63:
+ * in the context of a dedicated stopmachine workqueue. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1190: FILE: kernel/stop_machine.c:91:
+				 * is needed to tell that something failed. */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1325: FILE: kernel/workqueue.c:770:
+	struct sched_param param = { .sched_priority = MAX_RT_PRIO-1 };
 	                                                          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214178.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 18 warnings, 14 checks, 1196 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000214178.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
