WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
 Add DECLARE_KFIFO - macro to declare a kfifo and the associated buffer inside a struct

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#62: FILE: include/linux/kfifo.h:58:
+#define __kfifo_initializer(s, b) \
+       (struct kfifo) { \
+               .size   = s, \
+               .in     = 0, \
+               .out    = 0, \
+               .buffer = b \
+       }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#63: FILE: include/linux/kfifo.h:59:
+       (struct kfifo) { \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#64: FILE: include/linux/kfifo.h:60:
+               .size   = s, \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#64: FILE: include/linux/kfifo.h:60:
+               .size   = s, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#65: FILE: include/linux/kfifo.h:61:
+               .in     = 0, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#65: FILE: include/linux/kfifo.h:61:
+               .in     = 0, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#66: FILE: include/linux/kfifo.h:62:
+               .out    = 0, \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#66: FILE: include/linux/kfifo.h:62:
+               .out    = 0, \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#67: FILE: include/linux/kfifo.h:63:
+               .buffer = b \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#67: FILE: include/linux/kfifo.h:63:
+               .buffer = b \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#68: FILE: include/linux/kfifo.h:64:
+       }$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size' may be better as '(size)' to avoid precedence issues
#80: FILE: include/linux/kfifo.h:76:
+#define DECLARE_KFIFO(name, size) \
+union { \
+       struct kfifo name; \
+       unsigned char name##kfifo_buffer[size + sizeof(struct kfifo)]; \
+}

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: include/linux/kfifo.h:78:
+       struct kfifo name; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: include/linux/kfifo.h:79:
+       unsigned char name##kfifo_buffer[size + sizeof(struct kfifo)]; \$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#91: FILE: include/linux/kfifo.h:87:
+#define INIT_KFIFO(name) \
+       name = __kfifo_initializer(sizeof(name##kfifo_buffer) - \
+                               sizeof(struct kfifo), name##kfifo_buffer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: include/linux/kfifo.h:88:
+       name = __kfifo_initializer(sizeof(name##kfifo_buffer) - \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: include/linux/kfifo.h:89:
+                               sizeof(struct kfifo), name##kfifo_buffer)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: include/linux/kfifo.h:89:
+                               sizeof(struct kfifo), name##kfifo_buffer)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#105: FILE: include/linux/kfifo.h:101:
+#define DEFINE_KFIFO(name, size) \
+       unsigned char name##kfifo_buffer[size]; \
+       struct kfifo name = __kfifo_initializer(size, name##kfifo_buffer)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: include/linux/kfifo.h:102:
+       unsigned char name##kfifo_buffer[size]; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#107: FILE: include/linux/kfifo.h:103:
+       struct kfifo name = __kfifo_initializer(size, name##kfifo_buffer)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/linux/kfifo.h:130:
+       return fifo->size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: include/linux/kfifo.h:152:
+       return fifo->in == fifo->out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: include/linux/kfifo.h:161:
+       return kfifo_len(fifo) == kfifo_size(fifo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#155: FILE: include/linux/kfifo.h:170:
+       return kfifo_size(fifo) - kfifo_len(fifo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: include/linux/kfifo.h:223:
+       if (kfifo_is_empty(fifo))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#168: FILE: include/linux/kfifo.h:223:
+       if (kfifo_is_empty(fifo))
+               kfifo_reset(fifo);

ERROR:CODE_INDENT: code indent should use tabs where possible
#169: FILE: include/linux/kfifo.h:224:
+               kfifo_reset(fifo);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: include/linux/kfifo.h:224:
+               kfifo_reset(fifo);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047561.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 20 warnings, 2 checks, 115 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000047561.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
