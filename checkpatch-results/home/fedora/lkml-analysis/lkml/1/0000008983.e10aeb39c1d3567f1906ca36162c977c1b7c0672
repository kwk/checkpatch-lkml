CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#99: FILE: include/linux/ring_buffer.h:225:
+extern void tracing_start(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#100: FILE: include/linux/ring_buffer.h:226:
+extern void tracing_stop(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/ring_buffer.h:227:
+extern void ftrace_off_permanent(void);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#106: FILE: include/linux/ring_buffer.h:232:
+static inline void __attribute__ ((format (printf, 1, 2)))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#110: FILE: include/linux/ring_buffer.h:236:
+}
+#define __trace_printk_check_format(fmt, args...)			\

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#133: FILE: include/linux/ring_buffer.h:259:
+#define trace_printk(fmt, args...)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#133: FILE: include/linux/ring_buffer.h:259:
+#define trace_printk(fmt, args...)					\
+do {									\
+	__trace_printk_check_format(fmt, ##args);			\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__trace_bprintk(_THIS_IP_, trace_printk_fmt, ##args);	\
+	} else								\
+		__trace_printk(_THIS_IP_, fmt, ##args);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#138: FILE: include/linux/ring_buffer.h:264:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#148: FILE: include/linux/ring_buffer.h:274:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#152: FILE: include/linux/ring_buffer.h:278:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: include/linux/ring_buffer.h:280:
+extern void trace_dump_stack(void);

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#161: FILE: include/linux/ring_buffer.h:287:
+#define ftrace_vprintk(fmt, vargs)					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#161: FILE: include/linux/ring_buffer.h:287:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'vargs' - possible side-effects?
#161: FILE: include/linux/ring_buffer.h:287:
+#define ftrace_vprintk(fmt, vargs)					\
+do {									\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__ftrace_vbprintk(_THIS_IP_, trace_printk_fmt, vargs);	\
+	} else								\
+		__ftrace_vprintk(_THIS_IP_, fmt, vargs);		\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#165: FILE: include/linux/ring_buffer.h:291:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/ring_buffer.h:305:
+extern void ftrace_dump(void);

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#184: FILE: include/linux/ring_buffer.h:310:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#184: FILE: include/linux/ring_buffer.h:310:
+trace_printk(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

WARNING:TRACE_PRINTK: Do not use trace_printk() in production code (this can be ignored if built only with a debug config option)
#191: FILE: include/linux/ring_buffer.h:317:
+trace_printk(const char *fmt, ...)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#195: FILE: include/linux/ring_buffer.h:321:
+}
+static inline int

WARNING:TRACE_PRINTK: Do not use ftrace_vprintk() in production code (this can be ignored if built only with a debug config option)
#196: FILE: include/linux/ring_buffer.h:322:
+ftrace_vprintk(const char *fmt, va_list ap)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#200: FILE: include/linux/ring_buffer.h:326:
+}
+static inline void ftrace_dump(void) { }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 11 checks, 167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
