CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#120: FILE: kernel/trace/trace_kprobe.c:40:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#125: FILE: kernel/trace/trace_kprobe.c:45:
+#define MAX_REG_NUM (sizeof(struct pt_regs)/sizeof(unsigned long))
                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#130: FILE: kernel/trace/trace_kprobe.c:50:
+	if (unlikely((unsigned)num > MAX_REG_NUM))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#132: FILE: kernel/trace/trace_kprobe.c:52:
+	return *((unsigned long *)regs + (unsigned)num);

WARNING:LINE_SPACING: Missing a blank line after declarations
#138: FILE: kernel/trace/trace_kprobe.c:58:
+	unsigned long *addr = (unsigned long *)kernel_trap_sp(regs);
+	addr += (unsigned)num;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#138: FILE: kernel/trace/trace_kprobe.c:58:
+	addr += (unsigned)num;

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: kernel/trace/trace_kprobe.c:68:
+	unsigned long retval;
+	probe_kernel_address(addr, retval);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#152: FILE: kernel/trace/trace_kprobe.c:72:
+#if defined(__i386__)

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: kernel/trace/trace_kprobe.c:77:
+	unsigned long n = (unsigned long)data;
+	if (n > REGPARMS) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#163: FILE: kernel/trace/trace_kprobe.c:83:
+		return fetch_stack(regs, (void *)(n - REGPARMS));
+	} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#177: FILE: kernel/trace/trace_kprobe.c:97:
+	unsigned long n = (unsigned long)data;
+	if (n > REGPARMS) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#183: FILE: kernel/trace/trace_kprobe.c:103:
+		return fetch_stack(regs, (void *)(n - REGPARMS));
+	} else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#212: FILE: kernel/trace/trace_kprobe.c:132:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#219: FILE: kernel/trace/trace_kprobe.c:139:
+	unsigned long (*func)(struct pt_regs *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#219: FILE: kernel/trace/trace_kprobe.c:139:
+	unsigned long (*func)(struct pt_regs *, void *);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#277: FILE: kernel/trace/trace_kprobe.c:345:
+			ret = strict_strtoul(tmp + 1, 10, &param);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: braces {} should be used on all arms of this statement
#278: FILE: kernel/trace/trace_kprobe.c:346:
+			if (ret || param > PARAM_MAX_ARGS)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#280: FILE: kernel/trace/trace_kprobe.c:348:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#286: FILE: kernel/trace/trace_kprobe.c:354:
+			if (isdigit(tmp[1])) {
[...]
+			} else if (is_return && tmp[1] == 'v') {
[...]
+			} else if (is_return && tmp[1] == 'p') {
[...]
+			} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#287: FILE: kernel/trace/trace_kprobe.c:355:
+				ret = strict_strtoul(tmp + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#288: FILE: kernel/trace/trace_kprobe.c:356:
+				if (ret || param > PARAM_MAX_REGS)
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#290: FILE: kernel/trace/trace_kprobe.c:358:
+				else {

CHECK:BRACES: Unbalanced braces around else statement
#300: FILE: kernel/trace/trace_kprobe.c:368:
+			} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#304: FILE: kernel/trace/trace_kprobe.c:372:
+			ret = strict_strtoul(tmp + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#305: FILE: kernel/trace/trace_kprobe.c:373:
+			if (ret || param > PARAM_MAX_STACK)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#307: FILE: kernel/trace/trace_kprobe.c:375:
+			else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#313: FILE: kernel/trace/trace_kprobe.c:381:
+			ret = strict_strtoul(tmp + 1, 0, &param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#343: FILE: kernel/trace/trace_kprobe.c:462:
+		seq_printf(m, "%c %s%+ld ",
 			probe_is_return(tp) ? 'r' : 'p',

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: kernel/trace/trace_kprobe.c:466:
+		seq_printf(m, "%c 0x%p ",
 			probe_is_return(tp) ? 'r' : 'p',

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#361: FILE: kernel/trace/trace_kprobe.c:479:
+			seq_printf(m, " rv");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#363: FILE: kernel/trace/trace_kprobe.c:481:
+			seq_printf(m, " rp");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#365: FILE: kernel/trace/trace_kprobe.c:483:
+	seq_printf(m, "\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#383: FILE: kernel/trace/trace_kprobe.c:582:
 }
+static void kprobe_trace_printk_1(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: kernel/trace/trace_kprobe.c:586:
+	__trace_printk(ip, "%s%s%+ld 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@",

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#391: FILE: kernel/trace/trace_kprobe.c:590:
+}
+static void kprobe_trace_printk_2(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: kernel/trace/trace_kprobe.c:594:
+	__trace_printk(ip, "%s%s%+ld 0x%lx 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@", probe_symbol(tp),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#400: FILE: kernel/trace/trace_kprobe.c:599:
+}
+static void kprobe_trace_printk_3(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#404: FILE: kernel/trace/trace_kprobe.c:603:
+	__trace_printk(ip, "%s%s%+ld 0x%lx 0x%lx 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@", probe_symbol(tp),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: kernel/trace/trace_kprobe.c:609:
+}
+static void kprobe_trace_printk_4(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: kernel/trace/trace_kprobe.c:613:
+	__trace_printk(ip, "%s%s%+ld 0x%lx 0x%lx 0x%lx 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@", probe_symbol(tp),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#421: FILE: kernel/trace/trace_kprobe.c:620:
+}
+static void kprobe_trace_printk_5(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: kernel/trace/trace_kprobe.c:624:
+	__trace_printk(ip, "%s%s%+ld 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@", probe_symbol(tp),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#433: FILE: kernel/trace/trace_kprobe.c:632:
+}
+static void kprobe_trace_printk_6(unsigned long ip, struct trace_probe *tp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: kernel/trace/trace_kprobe.c:636:
+	__trace_printk(ip, "%s%s%+ld 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx 0x%lx\n",
+			probe_is_return(tp) ? "<-" : "@", probe_symbol(tp),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152370.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 26 checks, 411 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152370.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
