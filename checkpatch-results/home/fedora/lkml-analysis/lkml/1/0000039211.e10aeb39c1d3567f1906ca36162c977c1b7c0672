WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: security/integrity/ima/ima_main.c:43:
+	BUG_ON(!mutex_is_locked(&iint->mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#98: FILE: security/integrity/ima/ima_main.c:57:
+	ima_inc_counts(iint, (__force fmode_t)((flags+1) & O_ACCMODE));
 	                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#107: FILE: security/integrity/ima/ima_main.c:66:
+	BUG_ON(!mutex_is_locked(&iint->mutex));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->opencount < 0'
#120: FILE: security/integrity/ima/ima_main.c:79:
+	if ((iint->opencount < 0) ||
+	    (iint->readcount < 0) ||
+	    (iint->writecount < 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->readcount < 0'
#120: FILE: security/integrity/ima/ima_main.c:79:
+	if ((iint->opencount < 0) ||
+	    (iint->readcount < 0) ||
+	    (iint->writecount < 0)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iint->writecount < 0'
#120: FILE: security/integrity/ima/ima_main.c:79:
+	if ((iint->opencount < 0) ||
+	    (iint->readcount < 0) ||
+	    (iint->writecount < 0)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#129: FILE: security/integrity/ima/ima_main.c:88:
+		printk(KERN_INFO "%s: open/free imbalance (r:%ld w:%ld o:%ld)\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#130: FILE: security/integrity/ima/ima_main.c:89:
+		       __FUNCTION__, iint->readcount, iint->writecount,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#139: FILE: security/integrity/ima/ima_main.c:98:
+	ima_dec_counts(iint, inode, (__force fmode_t)((flags+1) & O_ACCMODE));
 	                                                    ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039211.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 5 checks, 173 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039211.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
