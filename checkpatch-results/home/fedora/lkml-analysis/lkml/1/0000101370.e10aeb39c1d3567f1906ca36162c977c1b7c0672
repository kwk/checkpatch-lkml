WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/208b4b4a59351011b7f212e273f2b7bc47a9c482

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: tools/perf/util/module.c:1:
+#include "util.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#116: FILE: tools/perf/util/module.c:31:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#156: FILE: tools/perf/util/module.c:71:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#174: FILE: tools/perf/util/module.c:89:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#185: FILE: tools/perf/util/module.c:100:
+		if (hash < s->hash)
[...]
+		else if (hash > s->hash)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#189: FILE: tools/perf/util/module.c:104:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#192: FILE: tools/perf/util/module.c:107:
+				return s;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#210: FILE: tools/perf/util/module.c:125:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#211: FILE: tools/perf/util/module.c:126:
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#211: FILE: tools/perf/util/module.c:126:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->secs); nd; nd = rb_next(nd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#212: FILE: tools/perf/util/module.c:127:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
 		                               ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#213: FILE: tools/perf/util/module.c:128:
+		struct section *pos = rb_entry(nd, struct section, rb_node);
+		ret += sec_dso__fprintf_section(pos, fp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#258: FILE: tools/perf/util/module.c:173:
+	if (self != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#298: FILE: tools/perf/util/module.c:213:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#316: FILE: tools/perf/util/module.c:231:
+	if (self == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#327: FILE: tools/perf/util/module.c:242:
+		if (hash < m->hash)
[...]
+		else if (hash > m->hash)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#331: FILE: tools/perf/util/module.c:246:
+		else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#334: FILE: tools/perf/util/module.c:249:
+				return m;
+			else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#349: FILE: tools/perf/util/module.c:264:
+	struct rb_node *nd;
 	                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#354: FILE: tools/perf/util/module.c:269:
+	for (nd = rb_first(&self->mods); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#355: FILE: tools/perf/util/module.c:270:
+		struct module *pos = rb_entry(nd, struct module, rb_node);
 		                              ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir_path"
#410: FILE: tools/perf/util/module.c:325:
+	if (dir_path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dir"
#418: FILE: tools/perf/util/module.c:333:
+	if (dir == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#431: FILE: tools/perf/util/module.c:346:
+		if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#437: FILE: tools/perf/util/module.c:352:
+		if (file == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!path"
#511: FILE: tools/perf/util/module.c:426:
+	if (path == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#520: FILE: tools/perf/util/module.c:435:
+	if (file == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#555: FILE: tools/perf/util/module.c:470:
+			if (*(name+len) == '-')
 			          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#556: FILE: tools/perf/util/module.c:471:
+				*(name+len) = '_';
 				      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#601: FILE: tools/perf/util/module.h:1:
+#ifndef _PERF_MODULE_

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sec_dso *' should also have an identifier name
#620: FILE: tools/perf/util/module.h:20:
+	struct section    *(*find_section)(struct sec_dso *, const char *name);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mod_dso *' should also have an identifier name
#636: FILE: tools/perf/util/module.h:36:
+	struct module    *(*find_module)(struct mod_dso *, const char *name);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101370.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 18 checks, 576 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101370.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
