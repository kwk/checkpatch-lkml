WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
  The idea (good one!) is that the code which supplies struct file_operations

WARNING:TYPO_SPELLING: 'fullfilled' may be misspelled - perhaps 'fulfilled'?
#105: 
  Relations between objects (task_struct has pointer to mm_struct) are fullfilled
                                                                       ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Userpsace' may be misspelled - perhaps 'Userspace'?
#146: 
  Userpsace supplies pid of root task and opened file descriptor of future dump file.
  ^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#238: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#242: FILE: include/linux/cr.h:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#453: FILE: kernel/cr/Kconfig:1:
+config CR
+	bool "Container checkpoint/restart"
+	select FREEZER
+	help
+	  Container checkpoint/restart.
+
+	  Say N.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#474: FILE: kernel/cr/cpt-sys.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#512: FILE: kernel/cr/cpt-sys.c:39:
+				printk("%s: freezing '%s' failed\n", __func__, tsk->comm);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#559: FILE: kernel/cr/cpt-sys.c:86:
+	strlcpy((char *)&i.cr_uts_release, (const char *)init_uts_ns.name.release, sizeof(i.cr_uts_release));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#559: FILE: kernel/cr/cpt-sys.c:86:
+	strlcpy((char *)&i.cr_uts_release, (const char *)init_uts_ns.name.release, sizeof(i.cr_uts_release));

CHECK:BRACES: braces {} should be used on all arms of this statement
#612: FILE: kernel/cr/cpt-sys.c:139:
+		if (nsproxy) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#616: FILE: kernel/cr/cpt-sys.c:143:
+		} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#656: FILE: kernel/cr/cr-context.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#663: FILE: kernel/cr/cr-context.c:8:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#664: FILE: kernel/cr/cr-context.c:9:
+#include <asm/uaccess.h>

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*obj)...) over kmalloc(sizeof(struct cr_object)...)
#720: FILE: kernel/cr/cr-context.c:65:
+	obj = kmalloc(sizeof(struct cr_object), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ctx)...) over kmalloc(sizeof(struct cr_context)...)
#748: FILE: kernel/cr/cr-context.c:93:
+	ctx = kmalloc(sizeof(struct cr_context), GFP_KERNEL);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#774: FILE: kernel/cr/cr-context.c:119:
+struct cr_object *cr_find_obj_by_ptr(struct cr_context *ctx, const void *ptr, enum cr_context_obj_type type)

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#785: FILE: kernel/cr/cr-context.c:130:
+struct cr_object *cr_find_obj_by_pos(struct cr_context *ctx, loff_t pos, enum cr_context_obj_type type)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#799: FILE: kernel/cr/cr-file.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#856: FILE: kernel/cr/cr-file.c:58:
+	printk("collect file %p: rv %d\n", file, rv);

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#882: FILE: kernel/cr/cr-file.c:84:
+			printk("%s: file %p/%pS has external references %lu:%lu\n", __func__, file, file->f_op, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#882: FILE: kernel/cr/cr-file.c:84:
+			printk("%s: file %p/%pS has external references %lu:%lu\n", __func__, file, file->f_op, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#925: FILE: kernel/cr/cr-file.c:127:
+	printk("dump file %p: '%.*s', ->f_op = %pS\n", file, i->cr_name_len, name, file->f_op);

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#979: FILE: kernel/cr/cr-file.c:181:
+	i = krealloc(i, i->cr_hdr.cr_len + 1, GFP_KERNEL);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1016: FILE: kernel/cr/cr-file.c:218:
+	printk("restore file %p, pos %lld: '%s'\n", file, (long long)pos, cr_name);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1024: FILE: kernel/cr/cr-mm.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:INCLUDE_LINUX: Use #include <linux/elf.h> instead of <asm/elf.h>
#1031: FILE: kernel/cr/cr-mm.c:8:
+#include <asm/elf.h>

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1033: FILE: kernel/cr/cr-mm.c:10:
+#include <asm/mmu_context.h>

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1044: FILE: kernel/cr/cr-mm.c:21:
+		WARN(1, "vma %08lx-%08lx %pS isn't checkpointable\n", vma->vm_start, vma->vm_end, vma->vm_ops);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#1083: FILE: kernel/cr/cr-mm.c:60:
+		WARN(1, "vma %08lx-%08lx %pS uses uncheckpointable flags 0x%08lx\n", vma->vm_start, vma->vm_end, vma->vm_ops, vm_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1097: FILE: kernel/cr/cr-mm.c:74:
+		page = follow_page(vma, addr, FOLL_ANON|FOLL_GET);
 		                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1109: FILE: kernel/cr/cr-mm.c:86:
+			printk("dump addr %p, page %p\n", (void *)addr, page);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1141: FILE: kernel/cr/cr-mm.c:118:
+	printk("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags 0x%08lx, vm_pgoff = 0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1142: FILE: kernel/cr/cr-mm.c:119:
+	printk("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags 0x%08lx, vm_pgoff = 0x%08lx\n",
+		vma, vma->vm_start, vma->vm_end,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1174: FILE: kernel/cr/cr-mm.c:151:
+	printk("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags 0x%08lx, ->vm_ops = %pS, vm_pgoff = 0x%08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1175: FILE: kernel/cr/cr-mm.c:152:
+	printk("dump vma %p: %08lx-%08lx %c%c%c%c vm_flags 0x%08lx, ->vm_ops = %pS, vm_pgoff = 0x%08lx\n",
+		vma, vma->vm_start, vma->vm_end,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1209: FILE: kernel/cr/cr-mm.c:186:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE_COMMENT: line length of 152 exceeds 100 columns
#1222: FILE: kernel/cr/cr-mm.c:199:
+//	printk("%s: cr_start_addr = 0x%08lx, nr_pages = %u, page_size = %u\n", __func__, (unsigned long)i.cr_start_addr, i.cr_nr_pages, i.cr_page_size);

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1223: FILE: kernel/cr/cr-mm.c:200:
+	if (i.cr_hdr.cr_type != CR_OBJ_VMA_CONTENT || i.cr_nr_pages != 1 || i.cr_page_size != PAGE_SIZE)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1319: FILE: kernel/cr/cr-mm.c:296:
+	if (i->cr_pos_vm_file != CR_POS_UNDEF) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1328: FILE: kernel/cr/cr-mm.c:305:
+	} else

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1333: FILE: kernel/cr/cr-mm.c:310:
+	addr = do_mmap_pgoff(file, i->cr_vm_start, i->cr_vm_end - i->cr_vm_start, prot, flags, i->cr_vm_pgoff);

WARNING:LONG_LINE: line length of 168 exceeds 100 columns
#1345: FILE: kernel/cr/cr-mm.c:322:
+		printk("%s: vma %08lx-%08lx should be %08lx-%08lx\n", __func__, vma->vm_start, vma->vm_end, (unsigned long)i->cr_vm_start, (unsigned long)i->cr_vm_end);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1345: FILE: kernel/cr/cr-mm.c:322:
+		printk("%s: vma %08lx-%08lx should be %08lx-%08lx\n", __func__, vma->vm_start, vma->vm_end, (unsigned long)i->cr_vm_start, (unsigned long)i->cr_vm_end);

WARNING:LONG_LINE: line length of 251 exceeds 100 columns
#1349: FILE: kernel/cr/cr-mm.c:326:
+	printk("restore vma: %08lx-%08lx, vm_flags 0x%08lx, pgprot 0x%llx, vm_pgoff 0x%lx, pos_vm_file %lld\n", vma->vm_start, vma->vm_end, vma->vm_flags, (unsigned long long)pgprot_val(vma->vm_page_prot), vma->vm_pgoff, (long long)i->cr_pos_vm_file);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1349: FILE: kernel/cr/cr-mm.c:326:
+	printk("restore vma: %08lx-%08lx, vm_flags 0x%08lx, pgprot 0x%llx, vm_pgoff 0x%lx, pos_vm_file %lld\n", vma->vm_start, vma->vm_end, vma->vm_flags, (unsigned long long)pgprot_val(vma->vm_page_prot), vma->vm_pgoff, (long long)i->cr_pos_vm_file);

WARNING:LONG_LINE: line length of 133 exceeds 100 columns
#1351: FILE: kernel/cr/cr-mm.c:328:
+		printk("restore vma: ->vm_flags = 0x%08lx, ->cr_vm_flags = 0x%08lx\n", vma->vm_flags, (unsigned long)i->cr_vm_flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1351: FILE: kernel/cr/cr-mm.c:328:
+		printk("restore vma: ->vm_flags = 0x%08lx, ->cr_vm_flags = 0x%08lx\n", vma->vm_flags, (unsigned long)i->cr_vm_flags);

WARNING:LONG_LINE: line length of 172 exceeds 100 columns
#1353: FILE: kernel/cr/cr-mm.c:330:
+		printk("restore vma: ->prot = 0x%llx, ->cr_vm_flags = 0x%llx\n", (unsigned long long)pgprot_val(vma->vm_page_prot), (unsigned long long)i->cr_vm_page_prot);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1353: FILE: kernel/cr/cr-mm.c:330:
+		printk("restore vma: ->prot = 0x%llx, ->cr_vm_flags = 0x%llx\n", (unsigned long long)pgprot_val(vma->vm_page_prot), (unsigned long long)i->cr_vm_page_prot);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1432: FILE: kernel/cr/cr-mm.c:409:
+	printk("collect mm_struct %p: rv %d\n", mm, rv);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1453: FILE: kernel/cr/cr-mm.c:430:
+			printk("%s: mm_struct %p has external references %lu:%u\n", __func__, mm, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1453: FILE: kernel/cr/cr-mm.c:430:
+			printk("%s: mm_struct %p has external references %lu:%u\n", __func__, mm, obj->o_count, cnt);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1495: FILE: kernel/cr/cr-mm.c:472:
+	printk("dump mm_struct %p, pos %lld\n", mm, (long long)obj->o_pos);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1581: FILE: kernel/cr/cr-mm.c:558:
+	printk("restore mm_struct %p, pos %lld\n", mm, (long long)pos);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1607: FILE: kernel/cr/cr-mm.c:584:
+	tsk->mm = tsk->active_mm = mm;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1618: FILE: kernel/cr/cr-task.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1670: FILE: kernel/cr/cr-task.c:53:
+	BUG_ON(cr_find_obj_by_ptr(ctx, tsk, CR_CTX_TASK_STRUCT));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1676: FILE: kernel/cr/cr-task.c:59:
+	printk("collect task_struct %p: '%s' rv %d\n", tsk, tsk->comm, rv);

WARNING:STRLCPY: Prefer strscpy over strlcpy - see: https://lore.kernel.org/r/CAHk-=wgfRnXz0W3D37d01q3JFkr_i_uTL=V6A6G1oUZcprmknw@mail.gmail.com/
#1732: FILE: kernel/cr/cr-task.c:115:
+	strlcpy((char *)i->cr_comm, (const char *)tsk->comm, sizeof(i->cr_comm));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1743: FILE: kernel/cr/cr-task.c:126:
+	printk("dump task_struct %p/%s, pos %lld\n", tsk, tsk->comm, (long long)obj->o_pos);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1781: FILE: kernel/cr/cr-task.c:164:
+	printk("%s: ENTER tsk = %p/%s\n", __func__, tsk, tsk->comm);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1788: FILE: kernel/cr/cr-task.c:171:
+	printk("%s: schedule rv %d\n", __func__, rv);

WARNING:KREALLOC_ARG_REUSE: Reusing the krealloc arg is almost always a bug
#1816: FILE: kernel/cr/cr-task.c:199:
+	i = krealloc(i, sizeof(*i) + i->cr_len_arch, GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1854: FILE: kernel/cr/cr-task.c:237:
+	tsk->real_parent = tsk->parent = real_parent;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1874: FILE: kernel/cr/cr.h:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#1910: FILE: kernel/cr/cr.h:37:
+#define for_each_cr_object(ctx, obj, type)				\
+	list_for_each_entry(obj, &ctx->cr_obj[type], o_list)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctx' may be better as '(ctx)' to avoid precedence issues
#1912: FILE: kernel/cr/cr.h:39:
+#define for_each_cr_object_safe(ctx, obj, tmp, type)			\
+	list_for_each_entry_safe(obj, tmp, &ctx->cr_obj[type], o_list)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1914: FILE: kernel/cr/cr.h:41:
+struct cr_object *cr_find_obj_by_ptr(struct cr_context *ctx, const void *ptr, enum cr_context_obj_type type);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1915: FILE: kernel/cr/cr.h:42:
+struct cr_object *cr_find_obj_by_pos(struct cr_context *ctx, loff_t pos, enum cr_context_obj_type type);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1954: FILE: kernel/cr/cr.h:81:
+#if 0

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1978: FILE: kernel/cr/cr.h:105:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1988: FILE: kernel/cr/cr.h:115:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1998: FILE: kernel/cr/cr.h:125:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2003: FILE: kernel/cr/cr.h:130:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2006: FILE: kernel/cr/cr.h:133:
+static inline int cr_arch_restore_task_struct(struct task_struct *tsk, struct cr_image_task_struct *i)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2008: FILE: kernel/cr/cr.h:135:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2018: FILE: kernel/cr/cr.h:145:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2023: FILE: kernel/cr/cr.h:150:
+	return -ENOSYS;

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2026: FILE: kernel/cr/cr.h:153:
+static inline int cr_arch_restore_mm_struct(struct cr_context *ctx, loff_t pos, __u32 len, struct mm_struct *mm)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#2028: FILE: kernel/cr/cr.h:155:
+	return -ENOSYS;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2036: FILE: kernel/cr/rst-sys.c:1:
+/* Copyright (C) 2000-2009 Parallels Holdings, Ltd. */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2055: FILE: kernel/cr/rst-sys.c:20:
+	printk("%s: image version %u, arch %u\n", __func__, i.cr_image_version, i.cr_arch);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2092: FILE: kernel/cr/rst-sys.c:57:
+		printk("%s: wake up tsk %p/%s\n", __func__, tsk, tsk->comm);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 72 warnings, 13 checks, 1866 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000141281.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
