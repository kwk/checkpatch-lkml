WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
fs/bio-integrity.c  |  715 +++++++++++++++++++++++++++++++++++++++++++++++++++

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: fs/bio-integrity.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#71: FILE: fs/bio-integrity.c:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#95: FILE: fs/bio-integrity.c:42:
+struct bip *bio_integrity_alloc_bioset(struct bio *bio, gfp_t gfp_mask, unsigned int nr_vecs, struct bio_set *bs)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: fs/bio-integrity.c:48:
+	BUG_ON(bio == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#101: FILE: fs/bio-integrity.c:48:
+	BUG_ON(bio == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#104: FILE: fs/bio-integrity.c:51:
+	if (unlikely(bip == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#105: FILE: fs/bio-integrity.c:52:
+		printk(KERN_ERR "%s: could not alloc bip\n", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bv"
#113: FILE: fs/bio-integrity.c:60:
+	if (unlikely(bv == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#114: FILE: fs/bio-integrity.c:61:
+		printk(KERN_ERR "%s: could not alloc bip_vec\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: fs/bio-integrity.c:104:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#157: FILE: fs/bio-integrity.c:104:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bip->bip_buf"
#160: FILE: fs/bio-integrity.c:107:
+	if (!bio_flagged(bio, BIO_CLONED) && bip->bip_buf != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: fs/bio-integrity.c:135:
+		printk(KERN_ERR "%s: bip_vec full\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: fs/bio-integrity.c:140:
+	BUG_ON(iv == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iv"
#193: FILE: fs/bio-integrity.c:140:
+	BUG_ON(iv == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: fs/bio-integrity.c:141:
+	BUG_ON(iv->bv_page != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iv->bv_page"
#194: FILE: fs/bio-integrity.c:141:
+	BUG_ON(iv->bv_page != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#236: FILE: fs/bio-integrity.c:183:
+	BUG_ON(bio->bi_size == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: fs/bio-integrity.c:206:
+	BUG_ON(bip->bip_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip->bip_buf"
#259: FILE: fs/bio-integrity.c:206:
+	BUG_ON(bip->bip_buf == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#260: FILE: fs/bio-integrity.c:207:
+	BUG_ON(bio_data_dir(bio) != WRITE);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#274: FILE: fs/bio-integrity.c:221:
+		printk(KERN_ERR "%s: tag too big for bio: %u > %u\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#301: FILE: fs/bio-integrity.c:248:
+	BUG_ON(bip->bip_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip->bip_buf"
#301: FILE: fs/bio-integrity.c:248:
+	BUG_ON(bip->bip_buf == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#302: FILE: fs/bio-integrity.c:249:
+	BUG_ON(bio_data_dir(bio) != READ);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#316: FILE: fs/bio-integrity.c:263:
+		printk(KERN_ERR "%s: tag too big for bio: %u > %u\n",

WARNING:TYPO_SPELLING: 'accomodate' may be misspelled - perhaps 'accommodate'?
#333: FILE: fs/bio-integrity.c:280:
+ * bip attached with enough room to accomodate the generated integrity
                                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#362: FILE: fs/bio-integrity.c:309:
+		BUG_ON(total > bio->bi_integrity->bip_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#392: FILE: fs/bio-integrity.c:339:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#392: FILE: fs/bio-integrity.c:339:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: fs/bio-integrity.c:340:
+	BUG_ON(bio_integrity(bio));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#401: FILE: fs/bio-integrity.c:348:
+	if (unlikely(buf == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#402: FILE: fs/bio-integrity.c:349:
+		printk(KERN_ERR "could not allocate integrity buffer\n");

CHECK:SPACING: No space is necessary after a cast
#406: FILE: fs/bio-integrity.c:353:
+	end = (((unsigned long) buf) + len + PAGE_SIZE - 1) >> PAGE_SHIFT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#407: FILE: fs/bio-integrity.c:354:
+	start = ((unsigned long) buf) >> PAGE_SHIFT;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#412: FILE: fs/bio-integrity.c:359:
+	if (unlikely(bip == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#413: FILE: fs/bio-integrity.c:360:
+		printk(KERN_ERR "could not allocate data integrity bioset\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#426: FILE: fs/bio-integrity.c:373:
+		int ret;
+		bytes = PAGE_SIZE - offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#501: FILE: fs/bio-integrity.c:448:
+		BUG_ON(total > bio->bi_integrity->bip_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#551: FILE: fs/bio-integrity.c:498:
+	BUG_ON(bip->bip_bio != bio);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#575: FILE: fs/bio-integrity.c:522:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#575: FILE: fs/bio-integrity.c:522:
+	BUG_ON(bip == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#576: FILE: fs/bio-integrity.c:523:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#576: FILE: fs/bio-integrity.c:523:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: fs/bio-integrity.c:566:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#619: FILE: fs/bio-integrity.c:566:
+	BUG_ON(bip == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#620: FILE: fs/bio-integrity.c:567:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#620: FILE: fs/bio-integrity.c:567:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: fs/bio-integrity.c:568:
+	BUG_ON(!bio_flagged(bio, BIO_CLONED));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: fs/bio-integrity.c:624:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#677: FILE: fs/bio-integrity.c:624:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: fs/bio-integrity.c:625:
+	BUG_ON(bip->bip_vcnt != 1);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#699: FILE: fs/bio-integrity.c:646:
+	bp->bip1.bip_vcnt = bp->bip2.bip_vcnt = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#700: FILE: fs/bio-integrity.c:647:
+	bp->bip1.bip_idx = bp->bip2.bip_idx = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#717: FILE: fs/bio-integrity.c:664:
+	BUG_ON(bip_src == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip_src"
#717: FILE: fs/bio-integrity.c:664:
+	BUG_ON(bip_src == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#721: FILE: fs/bio-integrity.c:668:
+	if (bip == NULL)

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#749: FILE: fs/bio-integrity.c:696:
+	if (bs->bio_integrity_pool)
+		mempool_destroy(bs->bio_integrity_pool);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#755: FILE: fs/bio-integrity.c:702:
+	bio_integrity_slab = KMEM_CACHE(bip, SLAB_HWCACHE_ALIGN|SLAB_PANIC);
 	                                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bip->bip_vec[(idx)]
#919: FILE: include/linux/bio.h:452:
+#define bip_vec_idx(bip, idx)	(&(bip->bip_vec[(idx)]))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bip' may be better as '(bip)' to avoid precedence issues
#919: FILE: include/linux/bio.h:452:
+#define bip_vec_idx(bip, idx)	(&(bip->bip_vec[(idx)]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bvl' - possible side-effects?
#922: FILE: include/linux/bio.h:455:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bip' - possible side-effects?
#922: FILE: include/linux/bio.h:455:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#922: FILE: include/linux/bio.h:455:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start_idx' - possible side-effects?
#922: FILE: include/linux/bio.h:455:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bip' - possible side-effects?
#927: FILE: include/linux/bio.h:460:
+#define bip_for_each_vec(bvl, bip, i)					\
+	__bip_for_each_vec(bvl, bip, i, (bip)->bip_idx)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#932: FILE: include/linux/bio.h:465:
+extern struct bip *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#932: FILE: include/linux/bio.h:465:
+extern struct bip *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#932: FILE: include/linux/bio.h:465:
+extern struct bip *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#932: FILE: include/linux/bio.h:465:
+extern struct bip *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#932: FILE: include/linux/bio.h:465:
+extern struct bip *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#933: FILE: include/linux/bio.h:466:
+extern struct bip *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#933: FILE: include/linux/bio.h:466:
+extern struct bip *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#933: FILE: include/linux/bio.h:466:
+extern struct bip *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#933: FILE: include/linux/bio.h:466:
+extern struct bip *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#934: FILE: include/linux/bio.h:467:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#934: FILE: include/linux/bio.h:467:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#934: FILE: include/linux/bio.h:467:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#935: FILE: include/linux/bio.h:468:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#935: FILE: include/linux/bio.h:468:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#935: FILE: include/linux/bio.h:468:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#935: FILE: include/linux/bio.h:468:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#935: FILE: include/linux/bio.h:468:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#937: FILE: include/linux/bio.h:470:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#937: FILE: include/linux/bio.h:470:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#937: FILE: include/linux/bio.h:470:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#937: FILE: include/linux/bio.h:470:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: include/linux/bio.h:471:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#938: FILE: include/linux/bio.h:471:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#938: FILE: include/linux/bio.h:471:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#938: FILE: include/linux/bio.h:471:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: include/linux/bio.h:472:
+extern int bio_integrity_prep(struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#939: FILE: include/linux/bio.h:472:
+extern int bio_integrity_prep(struct bio *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: include/linux/bio.h:473:
+extern void bio_integrity_endio(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#940: FILE: include/linux/bio.h:473:
+extern void bio_integrity_endio(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#940: FILE: include/linux/bio.h:473:
+extern void bio_integrity_endio(struct bio *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: include/linux/bio.h:474:
+extern void bio_integrity_advance(struct bio *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#941: FILE: include/linux/bio.h:474:
+extern void bio_integrity_advance(struct bio *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#941: FILE: include/linux/bio.h:474:
+extern void bio_integrity_advance(struct bio *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#942: FILE: include/linux/bio.h:475:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#942: FILE: include/linux/bio.h:475:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#942: FILE: include/linux/bio.h:475:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#942: FILE: include/linux/bio.h:475:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#943: FILE: include/linux/bio.h:476:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#943: FILE: include/linux/bio.h:476:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_pair *' should also have an identifier name
#943: FILE: include/linux/bio.h:476:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#943: FILE: include/linux/bio.h:476:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#944: FILE: include/linux/bio.h:477:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#944: FILE: include/linux/bio.h:477:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#944: FILE: include/linux/bio.h:477:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#944: FILE: include/linux/bio.h:477:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#945: FILE: include/linux/bio.h:478:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#945: FILE: include/linux/bio.h:478:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#945: FILE: include/linux/bio.h:478:
+extern int bioset_integrity_create(struct bio_set *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#946: FILE: include/linux/bio.h:479:
+extern void bioset_integrity_free(struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#946: FILE: include/linux/bio.h:479:
+extern void bioset_integrity_free(struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#947: FILE: include/linux/bio.h:480:
+extern void bio_integrity_init_slab(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270249.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 71 warnings, 46 checks, 905 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270249.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
