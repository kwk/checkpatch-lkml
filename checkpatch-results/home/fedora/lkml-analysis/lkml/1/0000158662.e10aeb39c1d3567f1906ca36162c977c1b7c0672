WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#136: FILE: drivers/block/mg_disk.c:43:
+	printk(KERN_ERR "%s: %s: status=0x%02x { ", name, msg, stat & 0xff);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#147: FILE: drivers/block/mg_disk.c:63:
+		printk(KERN_ERR "%s: %s: error=0x%02x { ", name, msg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: drivers/block/mg_disk.c:64:
+		printk(KERN_ERR "%s: %s: error=0x%02x { ", name, msg,
 				host->error & 0xff);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#183: FILE: drivers/block/mg_disk.c:126:
+			msleep(1);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#203: FILE: drivers/block/mg_disk.c:145:
+		msleep(10);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#324: FILE: drivers/block/mg_disk.c:220:
+	printk(KERN_INFO "mg_disk: model: %s\n", model);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#325: FILE: drivers/block/mg_disk.c:221:
+	printk(KERN_INFO "mg_disk: firm: %.8s\n", fwrev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#326: FILE: drivers/block/mg_disk.c:222:
+	printk(KERN_INFO "mg_disk: serial: %s\n", serial);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "req"
#386: FILE: drivers/block/mg_disk.c:280:
+	if (req != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: drivers/block/mg_disk.c:282:
+		if (++req->errors >= MG_MAX_ERRORS ||
+				host->error == MG_ERR_TIMEOUT)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: drivers/block/mg_disk.c:331:
+		if (mg_wait(host, MG_REG_STATUS_BIT_DATA_REQ,
+					MG_TMAX_WAIT_RD_DRQ) != MG_ERR_NONE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: drivers/block/mg_disk.c:377:
+		if (mg_wait(host, MG_REG_STATUS_BIT_DATA_REQ,
+					MG_TMAX_WAIT_WR_DRQ) != MG_ERR_NONE) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#503: FILE: drivers/block/mg_disk.c:383:
+			outw(*(u16 *)req->buffer,
+					(unsigned long)host->dev_base +

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#655: FILE: drivers/block/mg_disk.c:690:
+	msleep(1);

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#679: FILE: drivers/block/mg_disk.c:713:
+	msleep(1);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host)...) over kzalloc(sizeof(struct mg_host)...)
#697: FILE: drivers/block/mg_disk.c:740:
+	host = kzalloc(sizeof(struct mg_host), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#713: FILE: drivers/block/mg_disk.c:761:
+	host->dev_base = ioremap(rsc->start , rsc->end + 1);
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: drivers/block/mg_disk.c:772:
+	rsc = platform_get_resource_byname(plat_dev, IORESOURCE_IO,
+			MG_RST_PIN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: drivers/block/mg_disk.c:793:
+		rsc = platform_get_resource_byname(plat_dev, IORESOURCE_IO,
+				MG_RSTOUT_PIN);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#751: FILE: drivers/block/mg_disk.c:795:
+			printk(KERN_ERR "%s:%d get reset-out pin fail\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#752: FILE: drivers/block/mg_disk.c:796:
+			printk(KERN_ERR "%s:%d get reset-out pin fail\n",
+					__func__, __LINE__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#771: FILE: drivers/block/mg_disk.c:815:
+			printk(KERN_ERR "%s:%d fail (err code : %d)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: drivers/block/mg_disk.c:816:
+			printk(KERN_ERR "%s:%d fail (err code : %d)\n",
+					__func__, __LINE__, err);

CHECK:BIT_MACRO: Prefer using the BIT macro
#890: FILE: include/linux/mg_disk.h:142:
+#define MG_BOOT_DEV		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#892: FILE: include/linux/mg_disk.h:144:
+#define MG_STORAGE_DEV		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#894: FILE: include/linux/mg_disk.h:146:
+#define MG_STORAGE_DEV_SKIP_RST	(1 << 2)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 14 checks, 815 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000158662.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
