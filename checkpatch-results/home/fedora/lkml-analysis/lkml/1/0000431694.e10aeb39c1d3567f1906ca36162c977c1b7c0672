WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
parts of union stack don't go away from under us. Since dget() takes a mutex

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: fs/dcache.c:309:
+	BUG_ON(IS_UNION(dentry));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#252: FILE: fs/namei.c:672:
+	mountpoint=__dget((*mnt)->mnt_mountpoint);
 	          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#450: FILE: fs/union.c:62:
+			printk(KERN_ERR "%s: \"%s\" stale union reference\n" \

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#450: FILE: fs/union.c:62:
+			printk(KERN_ERR "%s: \"%s\" stale union reference\n" \

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#452: FILE: fs/union.c:64:
+			       __FUNCTION__,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#463: FILE: fs/union.c:75:
+	BUG_ON(!dentry->d_union);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry == dentry->d_topmost'
#465: FILE: fs/union.c:77:
+	if ((dentry == dentry->d_topmost) || (dentry == dentry->d_overlaid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry == dentry->d_overlaid'
#465: FILE: fs/union.c:77:
+	if ((dentry == dentry->d_topmost) || (dentry == dentry->d_overlaid)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#466: FILE: fs/union.c:78:
+		printk(KERN_ERR "%s: \"%s\" loop in union stack\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#467: FILE: fs/union.c:79:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: fs/union.c:80:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#472: FILE: fs/union.c:84:
+		printk(KERN_ERR "%s: \"%s\" isn't a directory!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#473: FILE: fs/union.c:85:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: fs/union.c:86:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#478: FILE: fs/union.c:90:
+		printk(KERN_ERR "%s: \"%s\" has a negative topmost dentry!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#479: FILE: fs/union.c:91:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: fs/union.c:92:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#484: FILE: fs/union.c:96:
+		printk(KERN_ERR "%s: \"%s\" is a negative topmost dentry!\n",

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#485: FILE: fs/union.c:97:
+		       __FUNCTION__, dentry->d_name.name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#486: FILE: fs/union.c:98:
+		BUG();

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#550: FILE: fs/union.c:162:
+int __destroy_union(struct dentry * dentry)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: fs/union.c:179:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: fs/union.c:218:
+		struct dentry *tmp = next;
+		next = next->d_overlaid;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: fs/union.c:230:
+static void __destroy_stack_part(struct dentry * first, struct dentry * last)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#618: FILE: fs/union.c:230:
+static void __destroy_stack_part(struct dentry * first, struct dentry * last)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#620: FILE: fs/union.c:232:
+	struct dentry * next = first;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#623: FILE: fs/union.c:235:
+		struct dentry * tmp = next;

WARNING:LINE_SPACING: Missing a blank line after declarations
#624: FILE: fs/union.c:236:
+		struct dentry * tmp = next;
+		next = next->d_overlaid;

CHECK:BRACES: braces {} should be used on all arms of this statement
#649: FILE: fs/union.c:261:
+	if (dentry->d_topmost) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#652: FILE: fs/union.c:264:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#658: FILE: fs/union.c:270:
+		struct dentry *tmp = next;	// the dentry we dput now
+		next = next->d_overlaid;	// the dentry we dput next

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#676: FILE: fs/union.c:288:
+		if (tmp->d_union
+		    && (atomic_read(&tmp->d_union->u_count) == 1)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: fs/union.c:289:
+			BUG_ON(next);

WARNING:RETURN_VOID: void function return statements are not generally useful
#689: FILE: fs/union.c:301:
+	return;
+}

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#709: FILE: include/linux/dcache.h:340:
+extern void __dput_single(struct dentry *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#710: FILE: include/linux/dcache.h:341:
+extern void dput(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#710: FILE: include/linux/dcache.h:341:
+extern void dput(struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#716: FILE: include/linux/dcache.h:347:
+static inline struct dentry * __dget(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#724: FILE: include/linux/dcache.h:355:
+static inline struct dentry * dget(struct dentry *dentry)

WARNING:TYPO_SPELLING: 'completly' may be misspelled - perhaps 'completely'?
#731: FILE: include/linux/dcache.h:362:
+	 * in completly. This is symmetric to dput() which can sleep too.
 	      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: include/linux/dcache.h:403:
+		BUG_ON(!atomic_read(&dentry->d_count));

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 8)
#802: FILE: include/linux/dcache.h:433:
+	} else
[...]
+	return __dput_single(dentry);

CHECK:BRACES: Unbalanced braces around else statement
#802: FILE: include/linux/dcache.h:433:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#833: FILE: include/linux/dcache_union.h:42:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#834: FILE: include/linux/dcache_union.h:43:
+extern void __union_check(struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#834: FILE: include/linux/dcache_union.h:43:
+extern void __union_check(struct dentry *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#879: FILE: include/linux/dcache_union.h:247:
+static inline struct dentry * __dget_union(struct dentry *dentry)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#898: FILE: include/linux/dcache_union.h:266:
+		struct dentry * tmp = dentry->d_overlaid;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#912: FILE: include/linux/dcache_union.h:280:
+extern void __dput_union(struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#913: FILE: include/linux/dcache_union.h:281:
+extern int __destroy_union(struct dentry *dentry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431694.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 29 warnings, 12 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000431694.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
