WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
With a lot of help from Ingo Molnar and Pekka Enberg over the last couple of

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#138: FILE: arch/x86/Kconfig.debug:166:
+config KMEMCHECK_DEBUG
+	bool "kmemcheck: extra debug information"
+	depends on KMEMCHECK
+	select STACKTRACE
+	default n
+	help
+	  This option will cause kmemcheck to record some more information
+	  that will be printed out in the case of a fatal error within
+	  kmemcheck itself.
+
  #
  # IO delay types:
  #

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#223: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#228: FILE: arch/x86/kernel/kmemcheck_32.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#244: FILE: arch/x86/kernel/kmemcheck_32.c:17:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#246: FILE: arch/x86/kernel/kmemcheck_32.c:19:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#247: FILE: arch/x86/kernel/kmemcheck_32.c:20:
+#include <asm/string.h>

CHECK:SPACING: No space is necessary after a cast
#274: FILE: arch/x86/kernel/kmemcheck_32.c:47:
+	return (void *) address + (PAGE_SIZE << (compound_order(head) - 1));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: arch/x86/kernel/kmemcheck_32.c:60:
+	BUG_ON(!pte);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#288: FILE: arch/x86/kernel/kmemcheck_32.c:61:
+	BUG_ON(level != PG_LEVEL_4K);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#305: FILE: arch/x86/kernel/kmemcheck_32.c:78:
+	BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#306: FILE: arch/x86/kernel/kmemcheck_32.c:79:
+	BUG_ON(level != PG_LEVEL_4K);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#330: FILE: arch/x86/kernel/kmemcheck_32.c:103:
+	printk(KERN_EMERG "%s regs:\n", name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#331: FILE: arch/x86/kernel/kmemcheck_32.c:104:
+	printk(KERN_EMERG "eip: %08lx\n", regs->ip);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#332: FILE: arch/x86/kernel/kmemcheck_32.c:105:
+	printk(KERN_EMERG "eax: %08lx ebx: %08lx\n", regs->ax, regs->bx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#333: FILE: arch/x86/kernel/kmemcheck_32.c:106:
+	printk(KERN_EMERG "ecx: %08lx edx: %08lx\n", regs->cx, regs->dx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#334: FILE: arch/x86/kernel/kmemcheck_32.c:107:
+	printk(KERN_EMERG "esi: %08lx edi: %08lx\n", regs->si, regs->di);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#335: FILE: arch/x86/kernel/kmemcheck_32.c:108:
+	printk(KERN_EMERG "\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#347: FILE: arch/x86/kernel/kmemcheck_32.c:120:
+	BUG_ON(!irqs_disabled());

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#351: FILE: arch/x86/kernel/kmemcheck_32.c:124:
+		 * single-stepping? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#354: FILE: arch/x86/kernel/kmemcheck_32.c:127:
+		printk(KERN_EMERG "kmemcheck: entered #PF from single-"

WARNING:SPLIT_STRING: quoted string split across lines
#355: FILE: arch/x86/kernel/kmemcheck_32.c:128:
+		printk(KERN_EMERG "kmemcheck: entered #PF from single-"
+			"stepping cotext.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#370: FILE: arch/x86/kernel/kmemcheck_32.c:143:
+		printk(KERN_EMERG "kmemcheck: missed a #DB.\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#394: FILE: arch/x86/kernel/kmemcheck_32.c:167:
+	BUG_ON(!__get_cpu_var(kmemcheck_addr1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#395: FILE: arch/x86/kernel/kmemcheck_32.c:168:
+	BUG_ON(!__get_cpu_var(kmemcheck_addr1)
+		&& !__get_cpu_var(kmemcheck_addr2));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#402: FILE: arch/x86/kernel/kmemcheck_32.c:175:
+	 * this is not an error. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#431: FILE: arch/x86/kernel/kmemcheck_32.c:204:
+	BUG_ON(!irqs_disabled());

CHECK:SPACING: No space is necessary after a cast
#468: FILE: arch/x86/kernel/kmemcheck_32.c:241:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#470: FILE: arch/x86/kernel/kmemcheck_32.c:243:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#471: FILE: arch/x86/kernel/kmemcheck_32.c:244:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:SPACING: No space is necessary after a cast
#489: FILE: arch/x86/kernel/kmemcheck_32.c:262:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#491: FILE: arch/x86/kernel/kmemcheck_32.c:264:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#492: FILE: arch/x86/kernel/kmemcheck_32.c:265:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:SPACING: No space is necessary after a cast
#509: FILE: arch/x86/kernel/kmemcheck_32.c:282:
+	shadow = address_get_shadow((unsigned long) address);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#535: FILE: arch/x86/kernel/kmemcheck_32.c:308:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#536: FILE: arch/x86/kernel/kmemcheck_32.c:309:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#538: FILE: arch/x86/kernel/kmemcheck_32.c:311:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#540: FILE: arch/x86/kernel/kmemcheck_32.c:313:
+		/* Group 4 */
+		|| b == 0x67;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#546: FILE: arch/x86/kernel/kmemcheck_32.c:319:
+ * should be shot. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#576: FILE: arch/x86/kernel/kmemcheck_32.c:349:
+	for (; opcode_is_prefix(*op); ++op);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:SPACING: No space is necessary after a cast
#590: FILE: arch/x86/kernel/kmemcheck_32.c:363:
+		return *(uint8_t *) shadow != 0;

CHECK:SPACING: No space is necessary after a cast
#592: FILE: arch/x86/kernel/kmemcheck_32.c:365:
+		return *(uint16_t *) shadow != 0;

CHECK:SPACING: No space is necessary after a cast
#594: FILE: arch/x86/kernel/kmemcheck_32.c:367:
+		return *(uint32_t *) shadow != 0;

CHECK:SPACING: No space is necessary after a cast
#599: FILE: arch/x86/kernel/kmemcheck_32.c:372:
+		return *(uint8_t *) shadow == 0xff;

CHECK:SPACING: No space is necessary after a cast
#601: FILE: arch/x86/kernel/kmemcheck_32.c:374:
+		return *(uint16_t *) shadow == 0xffff;

CHECK:SPACING: No space is necessary after a cast
#603: FILE: arch/x86/kernel/kmemcheck_32.c:376:
+		return *(uint32_t *) shadow == 0xffffffff;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: arch/x86/kernel/kmemcheck_32.c:380:
+	BUG();

CHECK:SPACING: No space is necessary after a cast
#616: FILE: arch/x86/kernel/kmemcheck_32.c:389:
+		*(uint8_t *) shadow = 0xff;

CHECK:SPACING: No space is necessary after a cast
#619: FILE: arch/x86/kernel/kmemcheck_32.c:392:
+		*(uint16_t *) shadow = 0xffff;

CHECK:SPACING: No space is necessary after a cast
#622: FILE: arch/x86/kernel/kmemcheck_32.c:395:
+		*(uint32_t *) shadow = 0xffffffff;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#626: FILE: arch/x86/kernel/kmemcheck_32.c:399:
+	BUG();

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#630: FILE: arch/x86/kernel/kmemcheck_32.c:403:
+kmemcheck_read(uint32_t eip, uint32_t address, unsigned int size,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#639: FILE: arch/x86/kernel/kmemcheck_32.c:412:
+		static uint32_t prev_eip;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#645: FILE: arch/x86/kernel/kmemcheck_32.c:418:
+		printk(KERN_ALERT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#648: FILE: arch/x86/kernel/kmemcheck_32.c:421:
+		printk(KERN_ALERT

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#651: FILE: arch/x86/kernel/kmemcheck_32.c:424:
+		printk("address %08x\n", address);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#666: FILE: arch/x86/kernel/kmemcheck_32.c:439:
+kmemcheck_write(uint32_t eip, uint32_t address, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: arch/x86/kernel/kmemcheck_32.c:472:
+kmemcheck_access(struct pt_regs *regs,
+	unsigned long fallback_address, enum kmemcheck_method fallback_method)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#701: FILE: arch/x86/kernel/kmemcheck_32.c:474:
+	const uint8_t *insn;

WARNING:LINE_SPACING: Missing a blank line after declarations
#706: FILE: arch/x86/kernel/kmemcheck_32.c:479:
+		static int warn_once = 1;
+		if (!warn_once)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#711: FILE: arch/x86/kernel/kmemcheck_32.c:484:
+		printk(KERN_EMERG "kmemcheck: It seems that kmemcheck itself "

WARNING:SPLIT_STRING: quoted string split across lines
#712: FILE: arch/x86/kernel/kmemcheck_32.c:485:
+		printk(KERN_EMERG "kmemcheck: It seems that kmemcheck itself "
+			"triggered a page fault :-( This generally "

WARNING:SPLIT_STRING: quoted string split across lines
#713: FILE: arch/x86/kernel/kmemcheck_32.c:486:
+			"triggered a page fault :-( This generally "
+			"means that some book-keeping memory was not "

WARNING:SPLIT_STRING: quoted string split across lines
#714: FILE: arch/x86/kernel/kmemcheck_32.c:487:
+			"means that some book-keeping memory was not "
+			"allocated with the __GFP_NOTRACK flag, which it "

WARNING:SPLIT_STRING: quoted string split across lines
#715: FILE: arch/x86/kernel/kmemcheck_32.c:488:
+			"allocated with the __GFP_NOTRACK flag, which it "
+			"should be (where was %08lx allocated at?)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#718: FILE: arch/x86/kernel/kmemcheck_32.c:491:
+		BUG();

CHECK:SPACING: No space is necessary after a cast
#724: FILE: arch/x86/kernel/kmemcheck_32.c:497:
+	insn = (const uint8_t *) regs->ip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#732: FILE: arch/x86/kernel/kmemcheck_32.c:505:
+		 * addresses, but we only get one page fault. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#753: FILE: arch/x86/kernel/kmemcheck_32.c:526:
+	 * access. */

CHECK:SPACING: No space is necessary after a cast
#783: FILE: arch/x86/kernel/kmemcheck_32.c:556:
+		__memset((void *) s, c, n);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: arch/x86/kernel/kmemcheck_32.c:561:
+	 * should be able to change them. */

CHECK:SPACING: No space is necessary after a cast
#792: FILE: arch/x86/kernel/kmemcheck_32.c:565:
+	__memset((void *) s, c, n);

CHECK:SPACING: No space is necessary after a cast
#793: FILE: arch/x86/kernel/kmemcheck_32.c:566:
+	__memset((void *) x, 0xff, n);

CHECK:SPACING: No space is necessary after a cast
#815: FILE: arch/x86/kernel/kmemcheck_32.c:588:
+		__memset((void *) s, c, n);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#824: FILE: arch/x86/kernel/kmemcheck_32.c:597:
+		 * need one memset(). */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#857: FILE: arch/x86/kernel/traps_32.c:846:
+extern void sysenter_past_esp(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#858: FILE: arch/x86/kernel/traps_32.c:847:
+extern void x86_debug(void);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#871: FILE: arch/x86/kernel/traps_32.c:884:
+		if (!(regs->flags & VM_MASK) && !user_mode(regs) &&
+			((void *)regs->ip != system_call) &&

ERROR:SPACING: space required after that ',' (ctx:VxO)
#897: FILE: arch/x86/kernel/traps_32.c:1177:
+	set_intr_gate(1,&x86_debug);
 	               ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#897: FILE: arch/x86/kernel/traps_32.c:1177:
+	set_intr_gate(1,&x86_debug);
 	                ^

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#918: FILE: arch/x86/mm/fault.c:497:
+static int vmalloc_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#919: FILE: arch/x86/mm/fault.c:498:
+static int vmalloc_fault(struct pt_regs *regs, unsigned long address,
+	unsigned long error_code)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#963: FILE: arch/x86/mm/pgtable_32.c:193:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO|__GFP_NOTRACK, 0);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#963: FILE: arch/x86/mm/pgtable_32.c:193:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO|__GFP_NOTRACK, 0);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#963: FILE: arch/x86/mm/pgtable_32.c:193:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO|__GFP_NOTRACK, 0);
 	                                                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#972: FILE: arch/x86/mm/pgtable_32.c:343:
+	pgd_t *pgd = quicklist_alloc(0, GFP_KERNEL|__GFP_NOTRACK, pgd_ctor);
 	                                          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#982: FILE: include/asm-x86/kmemcheck.h:1:
+#ifdef CONFIG_X86_32

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#991: FILE: include/asm-x86/kmemcheck_32.h:1:
+#ifndef ASM_X86_KMEMCHECK_32_H

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#995: FILE: include/asm-x86/kmemcheck_32.h:5:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: include/asm-x86/kmemcheck_32.h:19:
+void kmemcheck_access(struct pt_regs *regs,
+	unsigned long address, enum kmemcheck_method method);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1034: FILE: include/asm-x86/pgtable.h:42:
+#define _PAGE_HIDDEN	(_AC(1, L)<<_PAGE_BIT_HIDDEN)
                     	          ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1059: FILE: include/asm-x86/string_32.h:266:
+ * checking in order to save a whole lot of (unnecessary) page faults. */

CHECK:SPACING: No space is necessary after a cast
#1063: FILE: include/asm-x86/string_32.h:270:
+#define memset(s, c, n) kmemcheck_memset((unsigned long) (s), (c), (n))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1090: FILE: include/linux/kmemcheck.h:1:
+#ifndef LINUX_KMEMCHECK_H

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1132: FILE: kernel/fork.c:1551:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1132: FILE: kernel/fork.c:1551:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_DESTROY_BY_RCU
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:ExV)
#1133: FILE: kernel/fork.c:1552:
+			|SLAB_NOTRACK,
 			^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1138: FILE: kernel/fork.c:1556:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1138: FILE: kernel/fork.c:1556:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1142: FILE: kernel/fork.c:1559:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1142: FILE: kernel/fork.c:1559:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1146: FILE: kernel/fork.c:1562:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1146: FILE: kernel/fork.c:1562:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1150: FILE: kernel/fork.c:1565:
+			SLAB_PANIC|SLAB_NOTRACK, NULL);
 			          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1154: FILE: kernel/fork.c:1568:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1154: FILE: kernel/fork.c:1568:
+			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_NOTRACK, NULL);
 			                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1199: FILE: mm/slub.c:1060:
+	 * status of each byte within the allocation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1223: FILE: mm/slub.c:1082:
+		 * analyze the memory accesses. */

CHECK:BRACES: Unbalanced braces around else statement
#1287: FILE: mm/slub.c:1598:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1296: FILE: mm/slub.c:1607:
+		if (unlikely((gfpflags & __GFP_NOTRACK)
+			&& !(s->flags & SLAB_NOTRACK)))
+		{

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1297: FILE: mm/slub.c:1608:
+		if (unlikely((gfpflags & __GFP_NOTRACK)
+			&& !(s->flags & SLAB_NOTRACK)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1365: FILE: mm/slub.c:3059:
+		gfp_t gfpflags = GFP_KERNEL;
+		if (flags & SLAB_NOTRACK)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1369: FILE: mm/slub.c:3063:
+		if (kmem_cache_open(s, gfpflags, name,
  				size, align, flags, ctor)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 53 warnings, 55 checks, 1163 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000325042.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
