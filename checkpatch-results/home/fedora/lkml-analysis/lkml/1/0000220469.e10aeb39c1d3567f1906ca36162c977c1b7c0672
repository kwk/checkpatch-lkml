WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#40: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#45: FILE: net/9p/trans_rdma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#68: FILE: net/9p/trans_rdma.c:24:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: net/9p/trans_rdma.c:56:
+#define P9_RDMA_MAXSIZE		(4*4096)	/* Min SGE is 4, so we can
                        		  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#102: FILE: net/9p/trans_rdma.c:58:
+						 * of 64k */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#150: FILE: net/9p/trans_rdma.c:106:
+	spinlock_t req_lock;

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#166: FILE: net/9p/trans_rdma.c:122:
+ * @rcall: Keepts track of replies (receive)
     ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#174: FILE: net/9p/trans_rdma.c:130:
+		struct p9_fcall *rcall;
 		                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#185: FILE: net/9p/trans_rdma.c:141:
+ * @rcall: response &p9_fcall structure
     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#195: FILE: net/9p/trans_rdma.c:151:
+	struct p9_fcall *rcall;
 	                 ^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#202: FILE: net/9p/trans_rdma.c:158:
+	spinlock_t lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#208: FILE: net/9p/trans_rdma.c:164:
+	struct p9_rdma_req *req;
+	req = kzalloc(sizeof *req, GFP_KERNEL);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SIZEOF_PARENTHESIS: sizeof *req should be sizeof(*req)
#208: FILE: net/9p/trans_rdma.c:164:
+	req = kzalloc(sizeof *req, GFP_KERNEL);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#241: FILE: net/9p/trans_rdma.c:197:
+/*
+  * Option Parsing (code inspired by NFS code)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#241: FILE: net/9p/trans_rdma.c:197:
+/*
+  * Option Parsing (code inspired by NFS code)

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#246: FILE: net/9p/trans_rdma.c:202:
+	Opt_port, Opt_rq_depth, Opt_sq_depth, Opt_timeout, Opt_err,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rq_depth>
#246: FILE: net/9p/trans_rdma.c:202:
+	Opt_port, Opt_rq_depth, Opt_sq_depth, Opt_timeout, Opt_err,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sq_depth>
#246: FILE: net/9p/trans_rdma.c:202:
+	Opt_port, Opt_rq_depth, Opt_sq_depth, Opt_timeout, Opt_err,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_timeout>
#246: FILE: net/9p/trans_rdma.c:202:
+	Opt_port, Opt_rq_depth, Opt_sq_depth, Opt_timeout, Opt_err,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#246: FILE: net/9p/trans_rdma.c:202:
+	Opt_port, Opt_rq_depth, Opt_sq_depth, Opt_timeout, Opt_err,

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: net/9p/trans_rdma.c:249:
+		int r;
+		if (!*p)

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#327: FILE: net/9p/trans_rdma.c:283:
+/*
+ * Queues the request to the list of active requests on the transport

WARNING:LINE_SPACING: Missing a blank line after declarations
#334: FILE: net/9p/trans_rdma.c:290:
+	unsigned long flags;
+	atomic_inc(&req->ref);

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: net/9p/trans_rdma.c:299:
+	unsigned long flags;
+	spin_lock_irqsave(&rdma->req_lock, flags);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#350: FILE: net/9p/trans_rdma.c:306:
+/*
+ * Searches the list of requests on the transport and returns the request

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: net/9p/trans_rdma.c:331:
+p9_cm_event_handler(struct rdma_cm_id *id,
+		 struct rdma_cm_event *event)

WARNING:LINE_SPACING: Missing a blank line after declarations
#379: FILE: net/9p/trans_rdma.c:335:
+	struct p9_trans_rdma *rdma = t->priv;
+	switch (event->event) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#381: FILE: net/9p/trans_rdma.c:337:
+		BUG_ON(rdma->state != P9_RDMA_INIT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#386: FILE: net/9p/trans_rdma.c:342:
+		BUG_ON(rdma->state != P9_RDMA_ADDR_RESOLVED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: net/9p/trans_rdma.c:347:
+		BUG_ON(rdma->state != P9_RDMA_ROUTE_RESOLVED);

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#399: FILE: net/9p/trans_rdma.c:355:
+			t->status = Disconnected;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: net/9p/trans_rdma.c:376:
+		BUG();

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#446: FILE: net/9p/trans_rdma.c:402:
+				PRINT_FCALL_ERROR("unknown error", req->rcall);
 				                                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#452: FILE: net/9p/trans_rdma.c:408:
+		P9_DPRINTK(P9_DEBUG_ERROR,
+				"fcall mismatch: expected %d, got %d\n",

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#476: FILE: net/9p/trans_rdma.c:432:
+				   c->rcall, trans->extended);
 				      ^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#481: FILE: net/9p/trans_rdma.c:437:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#484: FILE: net/9p/trans_rdma.c:440:
+		p9_printfcall(buf, sizeof(buf), c->rcall,
 		                                   ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#486: FILE: net/9p/trans_rdma.c:442:
+		printk(KERN_NOTICE ">>> %p %s\n", trans, buf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#494: FILE: net/9p/trans_rdma.c:450:
+			req->rcall = c->rcall;
 			     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#494: FILE: net/9p/trans_rdma.c:450:
+			req->rcall = c->rcall;
 			                ^^^^^

WARNING:RETURN_VOID: void function return statements are not generally useful
#509: FILE: net/9p/trans_rdma.c:465:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#550: FILE: net/9p/trans_rdma.c:506:
+			printk(KERN_ERR "9prdma: unexpected completion type, "

WARNING:SPLIT_STRING: quoted string split across lines
#551: FILE: net/9p/trans_rdma.c:507:
+			printk(KERN_ERR "9prdma: unexpected completion type, "
+			       "c->wc_op=%d, wc.opcode=%d, status=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#627: FILE: net/9p/trans_rdma.c:583:
+	struct p9_fcall *fc;
+	fc = kmalloc(sizeof(struct p9_fcall) + trans->msize, GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#627: FILE: net/9p/trans_rdma.c:583:
+	fc = kmalloc(sizeof(struct p9_fcall) + trans->msize, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#643: FILE: net/9p/trans_rdma.c:599:
+		return (u16) tag;

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#668: FILE: net/9p/trans_rdma.c:624:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#672: FILE: net/9p/trans_rdma.c:628:
+		printk(KERN_NOTICE "<<< %p %s\n", trans, buf);

WARNING:SIZEOF_PARENTHESIS: sizeof *rpl_context should be sizeof(*rpl_context)
#766: FILE: net/9p/trans_rdma.c:722:
+	rpl_context = kmalloc(sizeof *rpl_context, GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#770: FILE: net/9p/trans_rdma.c:726:
+	rpl_context->rcall = alloc_fcall(t);
 	             ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#771: FILE: net/9p/trans_rdma.c:727:
+	if (!rpl_context->rcall) {
 	                  ^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#777: FILE: net/9p/trans_rdma.c:733:
+	/*
+	 * Post a receive buffer for this request. We don't know

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#784: FILE: net/9p/trans_rdma.c:740:
+		kfree(rpl_context->rcall);
 		                   ^^^^^

WARNING:SIZEOF_PARENTHESIS: sizeof *req_context should be sizeof(*req_context)
#790: FILE: net/9p/trans_rdma.c:746:
+	req_context = kmalloc(sizeof *req_context, GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#837: FILE: net/9p/trans_rdma.c:793:
+		*rc = req->rcall;
 		           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#839: FILE: net/9p/trans_rdma.c:795:
+		kfree(req->rcall);
 		           ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#855: FILE: net/9p/trans_rdma.c:811:
+	if (rdma->state < P9_RDMA_CLOSING) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#859: FILE: net/9p/trans_rdma.c:815:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#867: FILE: net/9p/trans_rdma.c:823:
+	struct p9_trans_rdma *rdma = trans->priv;
+	if (!rdma)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_trans)...)
#887: FILE: net/9p/trans_rdma.c:843:
+	trans = kmalloc(sizeof(struct p9_trans), GFP_KERNEL);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#896: FILE: net/9p/trans_rdma.c:852:
+	rdma = trans->priv = kzalloc(sizeof(struct p9_trans_rdma), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans->priv)...) over kzalloc(sizeof(struct p9_trans_rdma)...)
#896: FILE: net/9p/trans_rdma.c:852:
+	rdma = trans->priv = kzalloc(sizeof(struct p9_trans_rdma), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#992: FILE: net/9p/trans_rdma.c:948:
+	if (0 == (devattr.device_cap_flags & IB_DEVICE_LOCAL_DMA_LKEY)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#997: FILE: net/9p/trans_rdma.c:953:
+	} else

WARNING:SIZEOF_PARENTHESIS: sizeof qp_attr should be sizeof(qp_attr)
#1001: FILE: net/9p/trans_rdma.c:957:
+	memset(&qp_attr, 0, sizeof qp_attr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 42 warnings, 22 checks, 1025 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000220469.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
