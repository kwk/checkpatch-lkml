WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git upstream-davem

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#153: FILE: MAINTAINERS:2110:
+P:	Jesse Brandeburg
+M:	jesse.brandeburg@intel.com

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#274: FILE: drivers/net/atlx/atl1.c:2806:
+				dev_printk(KERN_DEBUG, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/net/atlx/atl1.c:2807:
+				dev_printk(KERN_DEBUG, &pdev->dev,
+					"error getting speed/duplex\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#381: FILE: drivers/net/atlx/atl1.c:2886:
+			dev_printk(KERN_DEBUG, &pdev->dev,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/net/atlx/atl1.c:2887:
+			dev_printk(KERN_DEBUG, &pdev->dev,
+				"error enabling pci device\n");

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#521: FILE: drivers/net/cxgb3/cxgb3_main.c:426:
+	/*
+	 * netif_napi_add() can be called only once per napi_struct because it

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#554: FILE: drivers/net/cxgb3/cxgb3_main.c:1072:
+	if (!adapter->open_device_map && (err = cxgb_up(adapter)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#671: FILE: drivers/net/cxgb3/sge.c:565:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#724: FILE: drivers/net/cxgb3/t3_hw.c:3673:
+		struct port_info *p = adap2pinfo(adapter, i);
+		while (!adapter->params.vpd.port_type[j])

ERROR:TRAILING_WHITESPACE: trailing whitespace
#773: FILE: drivers/net/dm9000.c:482:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#785: FILE: drivers/net/dm9000.c:524:
+static int __devinit

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'dm9000_probe', this function's name, in a string
#794: FILE: drivers/net/dm9000.c:546:
+	dev_dbg(&pdev->dev, "dm9000_probe()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#808: FILE: drivers/net/dm9000.c:560:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#816: FILE: drivers/net/dm9000.c:786:
+^I$

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#852: FILE: drivers/net/dm9000.c:1404:
+static int __devexit

CHECK:BIT_MACRO: Prefer using the BIT macro
#885: FILE: drivers/net/ehea/ehea.h:124:
+#define EHEA_MAP_ENTRIES (1 << EHEA_DIR_INDEX_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#901: FILE: drivers/net/ehea/ehea.h:203:
+/*
+ * Memory map data structures

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#904: FILE: drivers/net/ehea/ehea.h:206:
+struct ehea_dir_bmap
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#907: FILE: drivers/net/ehea/ehea.h:209:
+};
+struct ehea_top_bmap

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#908: FILE: drivers/net/ehea/ehea.h:210:
+struct ehea_top_bmap
+{

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#911: FILE: drivers/net/ehea/ehea.h:213:
+};
+struct ehea_bmap

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#912: FILE: drivers/net/ehea/ehea.h:214:
+struct ehea_bmap
+{

ERROR:CODE_INDENT: code indent should use tabs where possible
#934: FILE: drivers/net/ehea/ehea_main.c:3508:
+                             unsigned long action, void *data)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#934: FILE: drivers/net/ehea/ehea_main.c:3508:
+                             unsigned long action, void *data)$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#989: FILE: drivers/net/ehea/ehea_qmr.c:34:
+struct ehea_bmap *ehea_bmap = NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:SPACING: space required before the open parenthesis '('
#1016: FILE: drivers/net/ehea/ehea_qmr.c:570:
+	if(!ehea_top_bmap->dir[dir]) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#1030: FILE: drivers/net/ehea/ehea_qmr.c:581:
+	if(!ehea_bmap->top[top]) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1045: FILE: drivers/net/ehea/ehea_qmr.c:594:
+	unsigned long i, mr_len, start_section, end_section;
+	start_section = (pfn * PAGE_SIZE) / EHEA_SECTSIZE;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ehea_bmap)...) over kzalloc(sizeof(struct ehea_bmap)...)
#1050: FILE: drivers/net/ehea/ehea_qmr.c:598:
+	ehea_bmap = kzalloc(sizeof(struct ehea_bmap), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space required before the open parenthesis '('
#1065: FILE: drivers/net/ehea/ehea_qmr.c:611:
+		if(ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1093: FILE: drivers/net/ehea/ehea_qmr.c:633:
+	int ret;
+	mutex_lock(&ehea_busmap_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1105: FILE: drivers/net/ehea/ehea_qmr.c:644:
+	int top, dir;
+	mutex_lock(&ehea_busmap_mutex);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1125: FILE: drivers/net/ehea/ehea_qmr.c:664:
+out_destroy:^I$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1175: FILE: drivers/net/ehea/ehea_qmr.c:696:
+	unsigned long ret = idx;
+	ret |= dir << EHEA_DIR_INDEX_SHIFT;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1192: FILE: drivers/net/ehea/ehea_qmr.c:713:
+	for (j = 0; j < (EHEA_PAGES_PER_SECTION / EHEA_MAX_RPAGE); j++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#1200: FILE: drivers/net/ehea/ehea_qmr.c:721:
+		if ((hret != H_SUCCESS)
+		    && (hret != H_PAGE_REGISTERED)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#1200: FILE: drivers/net/ehea/ehea_qmr.c:721:
+		if ((hret != H_SUCCESS)
+		    && (hret != H_PAGE_REGISTERED)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1201: FILE: drivers/net/ehea/ehea_qmr.c:722:
+		if ((hret != H_SUCCESS)
+		    && (hret != H_PAGE_REGISTERED)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1221: FILE: drivers/net/ehea/ehea_qmr.c:742:
+^I^I$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1223: FILE: drivers/net/ehea/ehea_qmr.c:744:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))
+			    	return hret;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#1223: FILE: drivers/net/ehea/ehea_qmr.c:744:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#1223: FILE: drivers/net/ehea/ehea_qmr.c:744:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1224: FILE: drivers/net/ehea/ehea_qmr.c:745:
+^I^I^I    ^Ireturn hret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1224: FILE: drivers/net/ehea/ehea_qmr.c:745:
+^I^I^I    ^Ireturn hret;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1241: FILE: drivers/net/ehea/ehea_qmr.c:762:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))
+			    	return hret;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#1241: FILE: drivers/net/ehea/ehea_qmr.c:762:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#1241: FILE: drivers/net/ehea/ehea_qmr.c:762:
+		if ((hret != H_SUCCESS) && (hret != H_PAGE_REGISTERED))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1242: FILE: drivers/net/ehea/ehea_qmr.c:763:
+^I^I^I    ^Ireturn hret;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1242: FILE: drivers/net/ehea/ehea_qmr.c:763:
+^I^I^I    ^Ireturn hret;$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_PAGE_REGISTERED'
#1321: FILE: drivers/net/ehea/ehea_qmr.c:806:
+		if((hret != H_PAGE_REGISTERED) && (hret != H_SUCCESS))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hret != H_SUCCESS'
#1321: FILE: drivers/net/ehea/ehea_qmr.c:806:
+		if((hret != H_PAGE_REGISTERED) && (hret != H_SUCCESS))

ERROR:SPACING: space required before the open parenthesis '('
#1321: FILE: drivers/net/ehea/ehea_qmr.c:806:
+		if((hret != H_PAGE_REGISTERED) && (hret != H_SUCCESS))

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1402: FILE: drivers/net/myri10ge/myri10ge.c:200:
+	spinlock_t stats_lock;

WARNING:MEMORY_BARRIER: memory barrier without comment
#1545: FILE: drivers/net/myri10ge/myri10ge.c:380:
+			mb();

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((__aligned__(8)))
#1566: FILE: drivers/net/myri10ge/myri10ge.c:467:
+	__be32 buf[16] __attribute__ ((__aligned__(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((__aligned__(8)))
#1604: FILE: drivers/net/myri10ge/myri10ge.c:663:
+	__be32 buf[16] __attribute__ ((__aligned__(8)));

CHECK:SPACING: No space is necessary after a cast
#1690: FILE: drivers/net/myri10ge/myri10ge.c:888:
+	mgp->ss.irq_claim = (__iomem __be32 *) (mgp->sram + cmd.data0);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1936: FILE: drivers/net/myri10ge/myri10ge.c:1360:
+	/*
+	 * parse the product code to deterimine the interface type

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#1942: FILE: drivers/net/myri10ge/myri10ge.c:1366:
+	if (ptr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1943: FILE: drivers/net/myri10ge/myri10ge.c:1367:
+		printk(KERN_ERR "myri10ge: %s: Missing product code\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ptr"
#1949: FILE: drivers/net/myri10ge/myri10ge.c:1373:
+		if (ptr == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1950: FILE: drivers/net/myri10ge/myri10ge.c:1374:
+			printk(KERN_ERR "myri10ge: %s: Invalid product "

WARNING:SPLIT_STRING: quoted string split across lines
#1951: FILE: drivers/net/myri10ge/myri10ge.c:1375:
+			printk(KERN_ERR "myri10ge: %s: Invalid product "
+			       "code %s\n", netdev->name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2184: FILE: drivers/net/myri10ge/myri10ge.c:1662:
+	ss->rx_small.mask = ss->rx_big.mask = rx_ring_entries - 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->tx.req_bytes"
#2196: FILE: drivers/net/myri10ge/myri10ge.c:1671:
+	if (ss->tx.req_bytes == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->rx_small.shadow"
#2210: FILE: drivers/net/myri10ge/myri10ge.c:1680:
+	if (ss->rx_small.shadow == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->rx_big.shadow"
#2218: FILE: drivers/net/myri10ge/myri10ge.c:1685:
+	if (ss->rx_big.shadow == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->tx.info"
#2228: FILE: drivers/net/myri10ge/myri10ge.c:1692:
+	if (ss->tx.info == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->rx_small.info"
#2236: FILE: drivers/net/myri10ge/myri10ge.c:1697:
+	if (ss->rx_small.info == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ss->rx_big.info"
#2244: FILE: drivers/net/myri10ge/myri10ge.c:1702:
+	if (ss->rx_big.info == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2294: FILE: drivers/net/myri10ge/myri10ge.c:1735:
+		int idx = i & ss->rx_big.mask;
+		myri10ge_unmap_rx_page(mgp->pdev, &ss->rx_big.info[idx],

WARNING:LINE_SPACING: Missing a blank line after declarations
#2306: FILE: drivers/net/myri10ge/myri10ge.c:1743:
+		int idx = i & ss->rx_small.mask;
+		myri10ge_unmap_rx_page(mgp->pdev, &ss->rx_small.info[idx],

CHECK:SPACING: No space is necessary after a cast
#2467: FILE: drivers/net/myri10ge/myri10ge.c:1995:
+		mgp->ss.tx.wc_fifo = (u8 __iomem *) mgp->sram + MXGEFW_ETH_SEND_4;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mgp->ss.tx.req_bytes"
#2567: FILE: drivers/net/myri10ge/myri10ge.c:2115:
+	if (mgp->ss.tx.req_bytes == NULL)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2639: FILE: drivers/net/myri10ge/myri10ge.c:2377:
+		 * do not cross mgp->tx_boundary */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2885: FILE: drivers/net/myri10ge/myri10ge.c:3176:
+	mgp->ss.fw_stats = dma_alloc_coherent(&pdev->dev, sizeof(*mgp->ss.fw_stats),
+					   &mgp->ss.fw_stats_bus, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mgp->ss.fw_stats"
#2886: FILE: drivers/net/myri10ge/myri10ge.c:3177:
+	if (mgp->ss.fw_stats == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2900: FILE: drivers/net/myri10ge/myri10ge.c:3219:
+	mgp->ss.rx_done.entry = dma_alloc_coherent(&pdev->dev, bytes,
+						&mgp->ss.rx_done.bus, GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mgp->ss.rx_done.entry"
#2901: FILE: drivers/net/myri10ge/myri10ge.c:3220:
+	if (mgp->ss.rx_done.entry == NULL)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2980: FILE: drivers/net/myri10ge/myri10ge_mcp.h:147:
+#define MXGEFW_CMD_SET_INTRQ_SIZE_FLAG_NO_STRICT_SIZE_CHECK  (1 << 31)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3123: FILE: drivers/net/myri10ge/myri10ge_mcp_gen_header.h:18:
+	unsigned mcp_private;	/* pointer to mcp-type specific structure */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3137: FILE: drivers/net/myri10ge/myri10ge_mcp_gen_header.h:39:
+	unsigned counters_addr;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3138: FILE: drivers/net/myri10ge/myri10ge_mcp_gen_header.h:40:
+	unsigned copy_block_info;	/* for small mcps loaded with "lload -d" */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3141: FILE: drivers/net/myri10ge/myri10ge_mcp_gen_header.h:43:
+	unsigned msix_table_addr;	/* start address of msix table in firmware */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'efx' may be better as '(efx)' to avoid precedence issues
#3231: FILE: drivers/net/sfc/enum.h:44:
+#define LOOPBACK_MODE(efx)				\
+	LOOPBACK_MODE_NAME(efx->loopback_mode)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#3235: FILE: drivers/net/sfc/enum.h:48:
+#define LOOPBACKS_10G_INTERNAL ((1 << LOOPBACK_XGMII)| \
                                                      ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_mask' - possible side-effects?
#3245: FILE: drivers/net/sfc/enum.h:58:
+#define LOOPBACK_OUT_OF(_from, _to, _mask)		\
+	(((LOOPBACK_MASK(_from) & (_mask)) &&		\
+	  ((LOOPBACK_MASK(_to) & (_mask)) == 0)) ? 1 : 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3272: FILE: drivers/net/sfc/ethtool.c:27:
+^I[LOOPBACK_XAUI] ^I= "XAUI",$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3275: FILE: drivers/net/sfc/ethtool.c:30:
+^I[LOOPBACK_PCS]^I ^I= "PHY(PCS)",$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_channel' may be better as '(_channel)' to avoid precedence issues
#3324: FILE: drivers/net/sfc/ethtool.c:271:
+#define EFX_CHANNEL_NAME(_channel) "channel%d", _channel->channel

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_tx_queue' may be better as '(_tx_queue)' to avoid precedence issues
#3325: FILE: drivers/net/sfc/ethtool.c:272:
+#define EFX_TX_QUEUE_NAME(_tx_queue) "txq%d", _tx_queue->queue

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_rx_queue' may be better as '(_rx_queue)' to avoid precedence issues
#3326: FILE: drivers/net/sfc/ethtool.c:273:
+#define EFX_RX_QUEUE_NAME(_rx_queue) "rxq%d", _rx_queue->queue

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->loopback_mode != LOOPBACK_NONE'
#3598: FILE: drivers/net/sfc/falcon.c:1735:
+	if ((FALCON_REV(efx) < FALCON_REV_B0) ||
+	    (efx->loopback_mode != LOOPBACK_NONE))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3727: FILE: drivers/net/sfc/falcon_xmac.c:393:
+	 * into our out of XGMII, XGXS or XAUI loopbacks. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3772: FILE: drivers/net/sfc/falcon_xmac.c:438:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->loopback_mode == LOOPBACK_NETWORK'
#3781: FILE: drivers/net/sfc/falcon_xmac.c:447:
+	if ((efx->loopback_mode == LOOPBACK_NETWORK) ||
+	    (efx->phy_type == PHY_TYPE_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->phy_type == PHY_TYPE_NONE'
#3781: FILE: drivers/net/sfc/falcon_xmac.c:447:
+	if ((efx->loopback_mode == LOOPBACK_NETWORK) ||
+	    (efx->phy_type == PHY_TYPE_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->loopback_mode == LOOPBACK_NETWORK'
#3811: FILE: drivers/net/sfc/falcon_xmac.c:567:
+	if ((efx->loopback_mode == LOOPBACK_NETWORK) ||
+	    (efx->phy_type == PHY_TYPE_NONE))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'efx->phy_type == PHY_TYPE_NONE'
#3811: FILE: drivers/net/sfc/falcon_xmac.c:567:
+	if ((efx->loopback_mode == LOOPBACK_NETWORK) ||
+	    (efx->phy_type == PHY_TYPE_NONE))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3837: FILE: drivers/net/sfc/mdio_10g.c:171:
+	 * of mmd's */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3864: FILE: drivers/net/sfc/mdio_10g.c:209:
+	ctrl1 = ctrl2 = mdio_clause45_read(efx, phy_id, MDIO_MMD_PMAPMD,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3881: FILE: drivers/net/sfc/mdio_10g.c:226:
+	ctrl1 = ctrl2 = mdio_clause45_read(efx, phy_id, MDIO_MMD_PMAPMD,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3894: FILE: drivers/net/sfc/mdio_10g.c:239:
+	ctrl1 = ctrl2 = mdio_clause45_read(efx, phy_id, MDIO_MMD_PCS,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3906: FILE: drivers/net/sfc/mdio_10g.c:251:
+	ctrl1 = ctrl2 = mdio_clause45_read(efx, phy_id, MDIO_MMD_PHYXS,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3981: FILE: drivers/net/sfc/mdio_10g.h:237:
+extern void mdio_clause45_transmit_disable(struct efx_nic *efx);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3984: FILE: drivers/net/sfc/mdio_10g.h:240:
+extern void mdio_clause45_phy_reconfigure(struct efx_nic *efx);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4057: FILE: drivers/net/sfc/net_driver.h:536:
+	unsigned loopbacks;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4083: FILE: drivers/net/sfc/net_driver.h:745:
+	unsigned tx_disabled;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4140: FILE: drivers/net/sfc/selftest.c:1:
+/****************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#4160: FILE: drivers/net/sfc/selftest.c:21:
+#include <asm/io.h>

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#4171: FILE: drivers/net/sfc/selftest.c:32:
+/*
+ * Loopback test packet structure

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#4182: FILE: drivers/net/sfc/selftest.c:43:
+} __attribute__ ((packed));

WARNING:MEMORY_BARRIER: memory barrier without comment
#4245: FILE: drivers/net/sfc/selftest.c:106:
+	smp_wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4248: FILE: drivers/net/sfc/selftest.c:109:
+	 * traffic before a test event is raised is considered a pass */

WARNING:MEMORY_BARRIER: memory barrier without comment
#4292: FILE: drivers/net/sfc/selftest.c:153:
+	smp_wmb();

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4302: FILE: drivers/net/sfc/selftest.c:163:
+		return -ETIMEDOUT;
+	} else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#4327: FILE: drivers/net/sfc/selftest.c:188:
+	smp_wmb();

WARNING:SPLIT_STRING: quoted string split across lines
#4349: FILE: drivers/net/sfc/selftest.c:210:
+		EFX_ERR(channel->efx, "channel %d saw interrupt on CPU%d "
+			"during event queue test\n", channel->channel,

WARNING:SPLIT_STRING: quoted string split across lines
#4358: FILE: drivers/net/sfc/selftest.c:219:
+		EFX_ERR(channel->efx, "channel %d event was generated, but "
+			"failed to trigger an interrupt\n", channel->channel);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid1 != 0x0000'
#4395: FILE: drivers/net/sfc/selftest.c:256:
+	if ((physid1 != 0x0000) && (physid1 != 0xffff) &&
+	    (physid2 != 0x0000) && (physid2 != 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid1 != 0xffff'
#4395: FILE: drivers/net/sfc/selftest.c:256:
+	if ((physid1 != 0x0000) && (physid1 != 0xffff) &&
+	    (physid2 != 0x0000) && (physid2 != 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid2 != 0x0000'
#4395: FILE: drivers/net/sfc/selftest.c:256:
+	if ((physid1 != 0x0000) && (physid1 != 0xffff) &&
+	    (physid2 != 0x0000) && (physid2 != 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid2 != 0xffff'
#4395: FILE: drivers/net/sfc/selftest.c:256:
+	if ((physid1 != 0x0000) && (physid1 != 0xffff) &&
+	    (physid2 != 0x0000) && (physid2 != 0xffff)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4424: FILE: drivers/net/sfc/selftest.c:285:
+	BUG_ON(!buf_ptr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'state == NULL'
#4427: FILE: drivers/net/sfc/selftest.c:288:
+	if ((state == NULL) || state->flush)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#4427: FILE: drivers/net/sfc/selftest.c:288:
+	if ((state == NULL) || state->flush)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4431: FILE: drivers/net/sfc/selftest.c:292:
+^I$

CHECK:SPACING: No space is necessary after a cast
#4432: FILE: drivers/net/sfc/selftest.c:293:
+	received = (struct efx_loopback_payload *)(char *) buf_ptr;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4435: FILE: drivers/net/sfc/selftest.c:296:
+^I$

WARNING:SPLIT_STRING: quoted string split across lines
#4439: FILE: drivers/net/sfc/selftest.c:300:
+		EFX_ERR(efx, "saw runt RX packet (length %d) in %s loopback "
+			"test\n", pkt_len, LOOPBACK_MODE(efx));

WARNING:SPLIT_STRING: quoted string split across lines
#4453: FILE: drivers/net/sfc/selftest.c:314:
+		EFX_ERR(efx, "saw incorrect RX packet length %d (wanted %d) in "
+			"%s loopback test\n", pkt_len, (int)sizeof(*payload),

WARNING:SPLIT_STRING: quoted string split across lines
#4475: FILE: drivers/net/sfc/selftest.c:336:
+		EFX_ERR(efx, "saw RX packet from iteration %d (wanted %d) in "
+			"%s loopback test\n", ntohs(received->iteration),

WARNING:MEMORY_BARRIER: memory barrier without comment
#4534: FILE: drivers/net/sfc/selftest.c:395:
+	smp_wmb();

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4547: FILE: drivers/net/sfc/selftest.c:408:
+^I^I/* Allocate an skb, holding an extra reference for $

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4548: FILE: drivers/net/sfc/selftest.c:409:
+		 * transmit completion counting */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4556: FILE: drivers/net/sfc/selftest.c:417:
+		 * exercise the rss vectors */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4563: FILE: drivers/net/sfc/selftest.c:424:
+		 * interrupt handler. */

WARNING:SPLIT_STRING: quoted string split across lines
#4574: FILE: drivers/net/sfc/selftest.c:435:
+			EFX_ERR(efx, "TX queue %d could not transmit packet %d "
+				"of %d in %s loopback test\n", tx_queue->queue,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4599: FILE: drivers/net/sfc/selftest.c:460:
+	 * skbs not already completed will be free'd when the queue is flushed */

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#4600: FILE: drivers/net/sfc/selftest.c:461:
+	for (i=0; i < state->packet_count; i++) {
 	      ^

WARNING:SPLIT_STRING: quoted string split across lines
#4618: FILE: drivers/net/sfc/selftest.c:479:
+		EFX_ERR(efx, "TX queue %d saw only %d out of an expected %d "
+			"TX completion events in %s loopback test\n",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#4622: FILE: drivers/net/sfc/selftest.c:483:
+		/* Allow to fall through so we see the RX errors as well */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPLIT_STRING: quoted string split across lines
#4628: FILE: drivers/net/sfc/selftest.c:489:
+		EFX_LOG(efx, "TX queue %d saw only %d out of an expected %d "
+			"received packets in %s loopback test\n",

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#4632: FILE: drivers/net/sfc/selftest.c:493:
+		/* Fall through */

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#4657: FILE: drivers/net/sfc/selftest.c:518:
+		state->skbs = kzalloc(sizeof(state->skbs[0]) *
+				      state->packet_count, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPLIT_STRING: quoted string split across lines
#4662: FILE: drivers/net/sfc/selftest.c:523:
+		EFX_LOG(efx, "TX queue %d testing %s loopback with %d "
+			"packets\n", tx_queue->queue, LOOPBACK_MODE(efx),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4667: FILE: drivers/net/sfc/selftest.c:528:
+^I^I$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4680: FILE: drivers/net/sfc/selftest.c:541:
+			 * floating around after a failure. */

WARNING:SPLIT_STRING: quoted string split across lines
#4687: FILE: drivers/net/sfc/selftest.c:548:
+	EFX_LOG(efx, "TX queue %d passed %s loopback test with a burst length "
+		"of %d packets\n", tx_queue->queue, LOOPBACK_MODE(efx),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4702: FILE: drivers/net/sfc/selftest.c:563:
+^I$

WARNING:MEMORY_BARRIER: memory barrier without comment
#4747: FILE: drivers/net/sfc/selftest.c:608:
+			rmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4761: FILE: drivers/net/sfc/selftest.c:622:
+		 * in attempting a loopback test */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4797: FILE: drivers/net/sfc/selftest.c:658:
+ * This checks interrupt generation, event delivery and PHY presence. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4821: FILE: drivers/net/sfc/selftest.c:682:
+ * This checks MAC and PHY loopback on the specified port. */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#4832: FILE: drivers/net/sfc/selftest.c:693:
+	if (state == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4839: FILE: drivers/net/sfc/selftest.c:700:
+	 * "flushing" so all inflight packets are dropped */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4840: FILE: drivers/net/sfc/selftest.c:701:
+	BUG_ON(efx->loopback_selftest);

WARNING:MEMORY_BARRIER: memory barrier without comment
#4847: FILE: drivers/net/sfc/selftest.c:708:
+	wmb();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4863: FILE: drivers/net/sfc/selftest.h:1:
+/****************************************************************************

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#4879: FILE: drivers/net/sfc/selftest.h:17:
+/*
+ * Self tests

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4904: FILE: drivers/net/sfc/selftest.h:42:
+extern void efx_loopback_rx_packet(struct efx_nic *efx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4906: FILE: drivers/net/sfc/selftest.h:44:
+extern int efx_online_test(struct efx_nic *efx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4908: FILE: drivers/net/sfc/selftest.h:46:
+extern int efx_offline_test(struct efx_nic *efx,

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#5026: FILE: drivers/net/sfc/tenxpress.c:250:
+	EFX_TRACE(efx, "%s\n", __func__);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5063: FILE: drivers/net/sfc/tenxpress.c:354:
+	ctrl1 = ctrl2 = mdio_clause45_read(efx, phy_id, MDIO_MMD_PHYXS,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5085: FILE: drivers/net/sfc/tenxpress.c:376:
+	 * perform a special software reset */

CHECK:SPACING: No space is necessary after a cast
#5088: FILE: drivers/net/sfc/tenxpress.c:379:
+		(void) tenxpress_special_reset(efx);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#5202: FILE: drivers/net/sfc/tx.c:512:
+#if defined(__i386__) || defined(__x86_64__)

Architecture specific defines should be avoided wherever
possible.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsoh' may be better as '(tsoh)' to avoid precedence issues
#5208: FILE: drivers/net/sfc/tx.c:518:
+#define TSOH_BUFFER(tsoh)	((u8 *)(tsoh + 1) + TSOH_OFFSET)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'hdr_len' may be better as '(hdr_len)' to avoid precedence issues
#5211: FILE: drivers/net/sfc/tx.c:521:
+#define TSOH_SIZE(hdr_len)					\
+	(sizeof(struct efx_tso_header) + TSOH_OFFSET + hdr_len)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#5220: FILE: drivers/net/sfc/tx.c:530:
+#define ETH_HDR_LEN(skb)  (skb_network_header(skb) - (skb)->data)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#5221: FILE: drivers/net/sfc/tx.c:531:
+#define SKB_TCP_OFF(skb)  PTR_DIFF(tcp_hdr(skb), (skb)->data)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'skb' - possible side-effects?
#5222: FILE: drivers/net/sfc/tx.c:532:
+#define SKB_IPV4_OFF(skb) PTR_DIFF(ip_hdr(skb), (skb)->data)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5241: FILE: drivers/net/sfc/tx.c:551:
+	unsigned remaining_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5242: FILE: drivers/net/sfc/tx.c:552:
+	unsigned seqnum;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5243: FILE: drivers/net/sfc/tx.c:553:
+	unsigned packet_space;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5254: FILE: drivers/net/sfc/tx.c:564:
+		unsigned page_off;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5265: FILE: drivers/net/sfc/tx.c:575:
+		unsigned ipv4_id;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5269: FILE: drivers/net/sfc/tx.c:579:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5271: FILE: drivers/net/sfc/tx.c:581:
+/*
+ * Verify that our various assumptions about sk_buffs and the conditions

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5285: FILE: drivers/net/sfc/tx.c:595:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5287: FILE: drivers/net/sfc/tx.c:597:
+/*
+ * Allocate a page worth of efx_tso_header structures, and string them

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5292: FILE: drivers/net/sfc/tx.c:602:
+{
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!base_kva"
#5299: FILE: drivers/net/sfc/tx.c:609:
+	if (base_kva == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#5301: FILE: drivers/net/sfc/tx.c:611:
+		EFX_ERR(tx_queue->efx, "Unable to allocate page for TSO"
+			" headers\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5318: FILE: drivers/net/sfc/tx.c:628:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#5332: FILE: drivers/net/sfc/tx.c:642:
+	while (*p != NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5385: FILE: drivers/net/sfc/tx.c:695:
+			       dma_addr_t dma_addr, unsigned len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5387: FILE: drivers/net/sfc/tx.c:697:
+			       dma_addr_t unmap_addr, unsigned unmap_len)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5391: FILE: drivers/net/sfc/tx.c:701:
+	unsigned dma_len, fill_level, insert_ptr, misalign;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5408: FILE: drivers/net/sfc/tx.c:718:
+			 * stopped from the access of read_count. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#5411: FILE: drivers/net/sfc/tx.c:721:
+				*(volatile unsigned *)&tx_queue->read_count;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#5411: FILE: drivers/net/sfc/tx.c:721:
+				*(volatile unsigned *)&tx_queue->read_count;

WARNING:MEMORY_BARRIER: memory barrier without comment
#5417: FILE: drivers/net/sfc/tx.c:727:
+			smp_mb();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5441: FILE: drivers/net/sfc/tx.c:751:
+		misalign = (unsigned)dma_addr & efx->type->bug5391_mask;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5463: FILE: drivers/net/sfc/tx.c:773:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5465: FILE: drivers/net/sfc/tx.c:775:
+/*
+ * Put a TSO header into the TX queue.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5472: FILE: drivers/net/sfc/tx.c:782:
+				      struct efx_tso_header *tsoh, unsigned len)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5491: FILE: drivers/net/sfc/tx.c:801:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5515: FILE: drivers/net/sfc/tx.c:825:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5538: FILE: drivers/net/sfc/tx.c:848:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5552: FILE: drivers/net/sfc/tx.c:862:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5566: FILE: drivers/net/sfc/tx.c:876:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#5581: FILE: drivers/net/sfc/tx.c:891:
+{
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5610: FILE: drivers/net/sfc/tx.c:920:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5627: FILE: drivers/net/sfc/tx.c:937:
+	unsigned ip_length;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tx_queue->tso_headers_free"
#5632: FILE: drivers/net/sfc/tx.c:942:
+		if (tx_queue->tso_headers_free == NULL)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5682: FILE: drivers/net/sfc/tx.c:992:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#5731: FILE: drivers/net/sfc/tx.c:1041:
+		int hl = state.p.header_length;
+		rc = tso_get_fragment(&state, tx_queue->efx,

WARNING:SPLIT_STRING: quoted string split across lines
#5773: FILE: drivers/net/sfc/tx.c:1083:
+	EFX_ERR(tx_queue->efx, "Out of memory for TSO headers, or PCI mapping"
+		" error\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5789: FILE: drivers/net/sfc/tx.c:1099:
+
+

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#5791: FILE: drivers/net/sfc/tx.c:1101:
+/*
+ * Free up all TSO datastructures associated with tx_queue. This

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5797: FILE: drivers/net/sfc/tx.c:1107:
+	unsigned i;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tx_queue->tso_headers_free"
#5803: FILE: drivers/net/sfc/tx.c:1113:
+	while (tx_queue->tso_headers_free != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*phy_data)...) over kzalloc(sizeof(struct xfp_phy_data)...)
#5841: FILE: drivers/net/sfc/xfp_phy.c:87:
+	phy_data = kzalloc(sizeof(struct xfp_phy_data), GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#5842: FILE: drivers/net/sfc/xfp_phy.c:88:
+	efx->phy_data = (void *) phy_data;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281732.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 102 warnings, 93 checks, 5404 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000281732.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
