CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#67: FILE: include/linux/page-flags.h:139:
 }
+static inline void TestSetPageUptodate(struct page *page)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: fs/fsblock.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#111: FILE: fs/fsblock.c:2:
+ * fs/fsblock.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#137: FILE: fs/fsblock.c:28:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/fsblock.c:37:
+static void block_ctor(void *data, struct kmem_cache *cachep,
+			unsigned long flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: fs/fsblock.c:40:
+	struct fsblock *block = data;
+	atomic_set(&block->count, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: fs/fsblock.c:46:
+	block_cache = kmem_cache_create("fsblock-data",
+			sizeof(struct fsblock), 0,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#156: FILE: fs/fsblock.c:47:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#156: FILE: fs/fsblock.c:47:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#156: FILE: fs/fsblock.c:47:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: fs/fsblock.c:51:
+	mblock_cache = kmem_cache_create("fsblock-metadata",
+			sizeof(struct fsblock_meta), 0,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#161: FILE: fs/fsblock.c:52:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#161: FILE: fs/fsblock.c:52:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#161: FILE: fs/fsblock.c:52:
+			SLAB_RECLAIM_ACCOUNT|SLAB_PANIC|SLAB_MEM_SPREAD|SLAB_DESTROY_BY_RCU,
 			                                               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#200: FILE: fs/fsblock.c:91:
+		block = kmalloc_node(sizeof(struct fsblock)*nr, gfp_flags, nid);
 		                                           ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*block)...) over kmalloc_node(sizeof(struct fsblock)...)
#200: FILE: fs/fsblock.c:91:
+		block = kmalloc_node(sizeof(struct fsblock)*nr, gfp_flags, nid);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#203: FILE: fs/fsblock.c:94:
+			int i;
+			for (i = 0; i < nr; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#205: FILE: fs/fsblock.c:96:
+				struct fsblock *b = block + i;
+				atomic_set(&b->count, 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#224: FILE: fs/fsblock.c:115:
+		int nr = PAGE_CACHE_SIZE >> bits;
+		mblock = kmalloc_node(sizeof(struct fsblock_meta)*nr, gfp_flags, nid);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#224: FILE: fs/fsblock.c:115:
+		mblock = kmalloc_node(sizeof(struct fsblock_meta)*nr, gfp_flags, nid);
 		                                                 ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*mblock)...) over kmalloc_node(sizeof(struct fsblock_meta)...)
#224: FILE: fs/fsblock.c:115:
+		mblock = kmalloc_node(sizeof(struct fsblock_meta)*nr, gfp_flags, nid);

WARNING:LINE_SPACING: Missing a blank line after declarations
#227: FILE: fs/fsblock.c:118:
+			int i;
+			for (i = 0; i < nr; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: fs/fsblock.c:120:
+				struct fsblock_meta *mb = mblock + i;
+				atomic_set(&mb->block.count, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/fsblock.c:140:
+		FSB_BUG_ON(page->index != first_page_idx(page->index,
+							fsblock_size(block)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#257: FILE: fs/fsblock.c:148:
+		struct fsblock *b;
+		block = page_blocks(block->page);

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#281: FILE: fs/fsblock.c:172:
+	if ((flags & badflags) || ((flags & goodflags) != goodflags) || count || private || vmap_count) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#282: FILE: fs/fsblock.c:173:
+		printk("block flags = %lx\n", flags);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#283: FILE: fs/fsblock.c:174:
+		printk("block size  = %u\n", size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#284: FILE: fs/fsblock.c:175:
+		printk("block count = %u\n", count);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#285: FILE: fs/fsblock.c:176:
+		printk("block private = %p\n", private);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#286: FILE: fs/fsblock.c:177:
+		printk("vmap count  = %u\n", vmap_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: fs/fsblock.c:178:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#297: FILE: fs/fsblock.c:188:
+	struct fsblock *block = container_of(head, struct fsblock, rcu_head);
+	kfree(block);

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: fs/fsblock.c:200:
+			struct fsblock *b;
+			if (test_bit(BL_metadata, &block->flags))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/fsblock.c:256:
+	FSB_BUG_ON(atomic_read(&block->count) == 2 &&
+			atomic_read(&block->vmap_count));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: fs/fsblock.c:292:
+		wait_on_bit_lock(&block->flags, BL_locked, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#421: FILE: fs/fsblock.c:312:
+		wait_on_bit(&block->flags, BL_locked, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#432: FILE: fs/fsblock.c:323:
+		struct page *page = block->page, *p;
+		for_each_page(page, fsblock_size(block), p) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: fs/fsblock.c:351:
+		wait_on_bit(&block->flags, BL_sync_io, sleep_on_block,
+							TASK_UNINTERRUPTIBLE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: fs/fsblock.c:357:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#469: FILE: fs/fsblock.c:360:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#471: FILE: fs/fsblock.c:362:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#483: FILE: fs/fsblock.c:374:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#485: FILE: fs/fsblock.c:376:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#495: FILE: fs/fsblock.c:386:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#498: FILE: fs/fsblock.c:389:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#500: FILE: fs/fsblock.c:391:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#510: FILE: fs/fsblock.c:401:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#529: FILE: fs/fsblock.c:420:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#531: FILE: fs/fsblock.c:422:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: fs/fsblock.c:432:
+	struct page *page, *p;
+	might_sleep();

CHECK:BRACES: braces {} should be used on all arms of this statement
#544: FILE: fs/fsblock.c:435:
+	if (!fsblock_superpage(block))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#546: FILE: fs/fsblock.c:437:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#556: FILE: fs/fsblock.c:447:
+	struct inode *inode = mapping->host;
+	if (unlikely(S_ISBLK(inode->i_mode)))

WARNING:UNNECESSARY_PARENTHESES: Unnecessary parentheses
#576: FILE: fs/fsblock.c:467:
+			if ((page_blocks_rcu(page) != block)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#650: FILE: fs/fsblock.c:541:
+		unsigned int page_offset = 0;
+		if (fsblock_subpage(block))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#656: FILE: fs/fsblock.c:547:
+		return kmap(block->page) + page_offset + off;
+	} else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#664: FILE: fs/fsblock.c:555:
+			smp_rmb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: fs/fsblock.c:565:
+		FSB_BUG_ON(test_bit(BL_metadata, &block->flags) &&
+			pgoff != block->block_nr * (size >> PAGE_CACHE_SHIFT));

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#690: FILE: fs/fsblock.c:581:
+			return kmap(page) + pos;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#690: FILE: fs/fsblock.c:581:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#745: FILE: fs/fsblock.c:636:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#784: FILE: fs/fsblock.c:675:
+		struct fsblock *block;
+		block = find_get_page_block(page);

CHECK:BRACES: braces {} should be used on all arms of this statement
#786: FILE: fs/fsblock.c:677:
+			if (fsblock_subpage(block)) {
[...]
+			} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#788: FILE: fs/fsblock.c:679:
+				struct fsblock *b;
+				for_each_block(block, b) {

CHECK:BRACES: Unbalanced braces around else statement
#797: FILE: fs/fsblock.c:688:
+			} else

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#885: FILE: fs/fsblock.c:776:
+static int create_unmapped_blocks(struct page *page, gfp_t gfp_flags, unsigned int size, unsigned int flags)

WARNING:TYPO_SPELLING: 'funcions' may be misspelled - perhaps 'functions'?
#900: FILE: fs/fsblock.c:791:
+	 * XXX: maybe use private alloc funcions so fses can embed block into
 	                                ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#910: FILE: fs/fsblock.c:801:
+		struct fsblock_meta *mblock;
+		mblock = alloc_mblocks(page, bits, gfp_flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#924: FILE: fs/fsblock.c:815:
+		if (fsblock_subpage(block)) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: fs/fsblock.c:817:
+			struct fsblock *b;
+			for_each_block(block, b)

CHECK:BRACES: Unbalanced braces around else statement
#928: FILE: fs/fsblock.c:819:
+		} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#932: FILE: fs/fsblock.c:823:
+		int uptodate = 1;
 		    ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#933: FILE: fs/fsblock.c:824:
+		int uptodate = 1;
+		FSB_BUG_ON(page->index != first_page_idx(page->index, size));

WARNING:MEMORY_BARRIER: memory barrier without comment
#942: FILE: fs/fsblock.c:833:
+		smp_mb();

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#945: FILE: fs/fsblock.c:836:
+				uptodate = 0;
 				^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#947: FILE: fs/fsblock.c:838:
+		if (uptodate)
 		    ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: fs/fsblock.c:849:
+static struct page *create_lock_page_range(struct address_space *mapping,
+					pgoff_t pgoff, unsigned int size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1004: FILE: fs/fsblock.c:895:
+	if (!size_is_superpage(size))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1006: FILE: fs/fsblock.c:897:
+	else {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1017: FILE: fs/fsblock.c:908:
+struct fsblock_meta *find_or_create_mblock(struct block_device *bdev, sector_t blocknr, unsigned int size)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1055: FILE: fs/fsblock.c:946:
+		sector_t base_block;
+		base_block = pgoff << (PAGE_CACHE_SHIFT - bd_inode->i_blkbits);

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1078: FILE: fs/fsblock.c:969:
+static void block_end_read(struct fsblock *block, int uptodate)
                                                       ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1089: FILE: fs/fsblock.c:980:
+	if (unlikely(!uptodate)) {
 	              ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1089: FILE: fs/fsblock.c:980:
+	if (unlikely(!uptodate)) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#1091: FILE: fs/fsblock.c:982:
+		if (!fsblock_superpage(block))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1093: FILE: fs/fsblock.c:984:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1095: FILE: fs/fsblock.c:986:
+			struct page *p;
+			for_each_page(page, fsblock_size(block), p) {

CHECK:BRACES: Unbalanced braces around else statement
#1099: FILE: fs/fsblock.c:990:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1102: FILE: fs/fsblock.c:993:
+	if (fsblock_subpage(block)) {
[...]
+	} else
[...]

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1115: FILE: fs/fsblock.c:1006:
+				uptodate = 0;
 				^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#1119: FILE: fs/fsblock.c:1010:
+	} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1126: FILE: fs/fsblock.c:1017:
+		if (uptodate)
 		    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1140: FILE: fs/fsblock.c:1031:
+			if (uptodate)
 			    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1153: FILE: fs/fsblock.c:1044:
+static void block_end_write(struct fsblock *block, int uptodate)
                                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1164: FILE: fs/fsblock.c:1055:
+	if (unlikely(!uptodate)) {
 	              ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1166: FILE: fs/fsblock.c:1057:
+		if (!fsblock_superpage(block))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1168: FILE: fs/fsblock.c:1059:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1170: FILE: fs/fsblock.c:1061:
+			struct page *p;
+			for_each_page(page, fsblock_size(block), p) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1177: FILE: fs/fsblock.c:1068:
+	if (fsblock_subpage(block)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1192: FILE: fs/fsblock.c:1083:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1195: FILE: fs/fsblock.c:1086:
+	if (!sync_io) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1201: FILE: fs/fsblock.c:1092:
+				struct page *p;
+				for_each_page(page, fsblock_size(block), p) {

CHECK:BRACES: Unbalanced braces around else statement
#1207: FILE: fs/fsblock.c:1098:
+	} else

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1218: FILE: fs/fsblock.c:1109:
+	int uptodate;
 	    ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1223: FILE: fs/fsblock.c:1114:
+	uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);
 	^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1226: FILE: fs/fsblock.c:1117:
+		printk(KERN_WARNING "block_end_bio_io: op not supported!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'block_end_bio_io', this function's name, in a string
#1226: FILE: fs/fsblock.c:1117:
+		printk(KERN_WARNING "block_end_bio_io: op not supported!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1227: FILE: fs/fsblock.c:1118:
+		WARN_ON(uptodate);
 		        ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1234: FILE: fs/fsblock.c:1125:
+		block_end_read(block, uptodate);
 		                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1236: FILE: fs/fsblock.c:1127:
+		block_end_write(block, uptodate);
 		                       ^^^^^^^^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1251: FILE: fs/fsblock.c:1142:
+	int nr = (size + PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT;
 	                                ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1253: FILE: fs/fsblock.c:1144:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1254: FILE: fs/fsblock.c:1145:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u]\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'submit_block', this function's name, in a string
#1254: FILE: fs/fsblock.c:1145:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u]\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1255: FILE: fs/fsblock.c:1146:
+	printk("submit_block for %s [blocknr=%lu, sector=%lu, size=%u]\n",
+		(test_bit(BL_readin, &block->flags) ? "read" : "write"),

CHECK:BRACES: braces {} should be used on all arms of this statement
#1333: FILE: fs/fsblock.c:1224:
+		if (test_bit(BL_dirty, &block->flags)) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1339: FILE: fs/fsblock.c:1230:
+				struct fsblock *b;
+				for_each_block(page_blocks(page), b) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1349: FILE: fs/fsblock.c:1240:
+				struct page *p;
+				for_each_page(page, fsblock_size(block), p) {

CHECK:BRACES: Unbalanced braces around else statement
#1362: FILE: fs/fsblock.c:1253:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1376: FILE: fs/fsblock.c:1267:
+		struct page *p;
+		for_each_page(page, fsblock_size(block), p) {

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1381: FILE: fs/fsblock.c:1272:
+	} /* XXX: could check for all subblocks uptodate */
 	                                        ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1388: FILE: fs/fsblock.c:1279:
+	struct page *page;
+	FSB_BUG_ON(!fsblock_superpage(&mblock->block) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1389: FILE: fs/fsblock.c:1280:
+	FSB_BUG_ON(!fsblock_superpage(&mblock->block) &&
+		!test_bit(BL_uptodate, &mblock->block.flags));

WARNING:LINE_SPACING: Missing a blank line after declarations
#1399: FILE: fs/fsblock.c:1290:
+		struct page *p;
+		for_each_page(page, fsblock_size(mblock_block(mblock)), p) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1436: FILE: fs/fsblock.c:1327:
+			mba = list_entry(mba->blist.next,struct mb_assoc,blist);
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1436: FILE: fs/fsblock.c:1327:
+			mba = list_entry(mba->blist.next,struct mb_assoc,blist);
 			                                                ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*mba)...) over kmalloc(sizeof(struct mb_assoc)...)
#1439: FILE: fs/fsblock.c:1330:
+	mba = kmalloc(sizeof(struct mb_assoc), GFP_ATOMIC);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1479: FILE: fs/fsblock.c:1370:
+		if (list_empty(&mba->blist))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1481: FILE: fs/fsblock.c:1372:
+		else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1483: FILE: fs/fsblock.c:1374:
+				block->private = list_entry(mba->blist.next,struct mb_assoc,blist);
 				                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1483: FILE: fs/fsblock.c:1374:
+				block->private = list_entry(mba->blist.next,struct mb_assoc,blist);
 				                                                           ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1490: FILE: fs/fsblock.c:1381:
+		if (test_bit(BL_dirty, &block->flags)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1496: FILE: fs/fsblock.c:1387:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1532: FILE: fs/fsblock.c:1423:
+			struct fsblock *block = mblock_block(mba->mblock);
+			if (test_bit(BL_dirty, &block->flags)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1549: FILE: fs/fsblock.c:1440:
+		if (list_empty(&mba->blist))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1551: FILE: fs/fsblock.c:1442:
+		else {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1553: FILE: fs/fsblock.c:1444:
+				block->private = list_entry(mba->blist.next,struct mb_assoc,blist);
 				                                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1553: FILE: fs/fsblock.c:1444:
+				block->private = list_entry(mba->blist.next,struct mb_assoc,blist);
 				                                                           ^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1584: FILE: fs/fsblock.c:1475:
+		 * the block uptodate. Probably not worthwhile.
 		             ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1588: FILE: fs/fsblock.c:1479:
+		if (!err)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1590: FILE: fs/fsblock.c:1481:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1609: FILE: fs/fsblock.c:1500:
+				int ret;
+				FSB_BUG_ON(PageWriteback(block->page));

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1621: FILE: fs/fsblock.c:1512:
+					FSB_BUG_ON(size >= PAGE_CACHE_SIZE && !PageUptodate(block->page));

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#1637: FILE: fs/fsblock.c:1528:
+sector_t fsblock_bmap(struct address_space *mapping, sector_t blocknr, insert_mapping_fn *insert_mapping)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1711: FILE: fs/fsblock.c:1602:
+		unsigned int offset = block_page_offset(block, size);
+		zero_user_page(page, offset, size, KM_USER0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1755: FILE: fs/fsblock.c:1646:
+	ret = insert_mapping(mapping, page->index << PAGE_CACHE_SHIFT,
+						PAGE_CACHE_SIZE, 0);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1763: FILE: fs/fsblock.c:1654:
+	if (!fsblock_superpage(block)) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1767: FILE: fs/fsblock.c:1658:
+			struct fsblock *b;
+			for_each_block(block, b)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1856: FILE: fs/fsblock.c:1747:
+int fsblock_write_page(struct page *page, insert_mapping_fn *insert_mapping,
+				struct writeback_control *wbc)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1881: FILE: fs/fsblock.c:1772:
+		 * have blocks by this stage!!! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1888: FILE: fs/fsblock.c:1779:
+	ret = insert_mapping(mapping, page->index << PAGE_CACHE_SHIFT,
+						PAGE_CACHE_SIZE, 1);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1904: FILE: fs/fsblock.c:1795:
+	if (!fsblock_superpage(block)) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1908: FILE: fs/fsblock.c:1799:
+			struct fsblock *b;
+			for_each_block(block, b)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1988: FILE: fs/fsblock.c:1879:
+		unsigned int offset = block_page_offset(block, size);
+		zero_user_page(page, offset, size, KM_USER0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2000: FILE: fs/fsblock.c:1891:
+static int fsblock_prepare_write_super(struct page *orig_page,
+				unsigned int size, unsigned from, unsigned to,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2000: FILE: fs/fsblock.c:1891:
+				unsigned int size, unsigned from, unsigned to,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2000: FILE: fs/fsblock.c:1891:
+				unsigned int size, unsigned from, unsigned to,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2023: FILE: fs/fsblock.c:1914:
+	ret = insert_mapping(mapping, page->index << PAGE_CACHE_SHIFT,
+						PAGE_CACHE_SIZE, 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2066: FILE: fs/fsblock.c:1957:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2066: FILE: fs/fsblock.c:1957:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2067: FILE: fs/fsblock.c:1958:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to,
+					insert_mapping_fn *insert_mapping)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2089: FILE: fs/fsblock.c:1980:
+	ret = insert_mapping(mapping, page->index << PAGE_CACHE_SHIFT,
+						PAGE_CACHE_SIZE, 1);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2096: FILE: fs/fsblock.c:1987:
+	if (fsblock_subpage(block)) {
[...]
+	} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#2098: FILE: fs/fsblock.c:1989:
+		struct fsblock *b;
+		for_each_block(block, b)

CHECK:BRACES: Unbalanced braces around else statement
#2100: FILE: fs/fsblock.c:1991:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#2117: FILE: fs/fsblock.c:2008:
+		struct fsblock *b;
+		for_each_block(block, b) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2134: FILE: fs/fsblock.c:2025:
+	} else {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2153: FILE: fs/fsblock.c:2044:
+static int __fsblock_commit_write_super(struct page *orig_page,
+			struct fsblock *block, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2153: FILE: fs/fsblock.c:2044:
+			struct fsblock *block, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2153: FILE: fs/fsblock.c:2044:
+			struct fsblock *block, unsigned from, unsigned to)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2172: FILE: fs/fsblock.c:2063:
+static int __fsblock_commit_write_sub(struct page *page,
+			struct fsblock *block, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2172: FILE: fs/fsblock.c:2063:
+			struct fsblock *block, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2172: FILE: fs/fsblock.c:2063:
+			struct fsblock *block, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2193: FILE: fs/fsblock.c:2084:
+int __fsblock_commit_write(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2193: FILE: fs/fsblock.c:2084:
+int __fsblock_commit_write(struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2227: FILE: fs/fsblock.c:2118:
+int fsblock_commit_write(struct file *file, struct page *page, unsigned from, unsigned to)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2227: FILE: fs/fsblock.c:2118:
+int fsblock_commit_write(struct file *file, struct page *page, unsigned from, unsigned to)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2244: FILE: fs/fsblock.c:2135:
+        return ret;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2244: FILE: fs/fsblock.c:2135:
+        return ret;$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2246: FILE: fs/fsblock.c:2137:
+
+}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2281: FILE: fs/fsblock.c:2172:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2292: FILE: fs/fsblock.c:2183:
+	nr_pages = ((size - length + PAGE_CACHE_SIZE-1) >> PAGE_CACHE_SHIFT);
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2294: FILE: fs/fsblock.c:2185:
+	offset = from & (PAGE_CACHE_SIZE-1);
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2309: FILE: fs/fsblock.c:2200:
+			zero_user_page(page, offset, PAGE_CACHE_SIZE-offset, KM_USER0);
 			                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2325: FILE: fs/fsblock.c:2216:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2340: FILE: fs/fsblock.c:2231:
+	offset = from & (PAGE_CACHE_SIZE-1);
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2348: FILE: fs/fsblock.c:2239:
+		zero_user_page(page, offset, PAGE_CACHE_SIZE-offset, KM_USER0);
 		                                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2371: FILE: fs/fsblock.c:2262:
+	int ret = 0;
+	if (can_free_block(block)) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2508: FILE: fs/fsblock.c:2399:
+		return 0;
+	} else {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#2567: FILE: fs/fsblock.c:2458:
+#if 0

WARNING:INDENTED_LABEL: labels should not be indented
#2568: FILE: fs/fsblock.c:2459:
+			XXX: generic code should not do it for us

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2602: FILE: fs/fsblock.c:2493:
+static struct vm_operations_struct fsblock_file_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2626: FILE: include/linux/fsblock.h:1:
+#ifndef __FSBLOCK_H__

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2640: FILE: include/linux/fsblock.h:15:
+#include <asm/atomic.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2658: FILE: include/linux/fsblock.h:33:
+				 * blkdev inode. */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2750: FILE: include/linux/fsblock.h:125:
+
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#2760: FILE: include/linux/fsblock.h:135:
+	struct fsblock *block;
+	FSB_BUG_ON(!PageBlocks(page));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2764: FILE: include/linux/fsblock.h:139:
+	/* XXX these go bang if put here
+	FSB_BUG_ON(PageUptodate(page) && !test_bit(BL_uptodate, &block->flags));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2796: FILE: include/linux/fsblock.h:171:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#2811: FILE: include/linux/fsblock.h:186:
+#define assert_first_block(first)					\
+({									\
+	FSB_BUG_ON((struct fsblock *)first != page_blocks(first->page));\
+	first;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'first' may be better as '(first)' to avoid precedence issues
#2811: FILE: include/linux/fsblock.h:186:
+#define assert_first_block(first)					\
+({									\
+	FSB_BUG_ON((struct fsblock *)first != page_blocks(first->page));\
+	first;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'b' may be better as '(b)' to avoid precedence issues
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bsize' may be better as '(bsize)' to avoid precedence issues
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size_of' - possible side-effects?
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'size_of' may be better as '(size_of)' to avoid precedence issues
#2817: FILE: include/linux/fsblock.h:192:
+#define block_inbounds(first, b, bsize, size_of)			\
+({									\
+	int ret;							\
+	FSB_BUG_ON(!fsblock_subpage(first));				\
+	FSB_BUG_ON(sizeof_block(first) != size_of);			\
+	ret = ((unsigned long)b - (unsigned long)first) * bsize <	\
+					PAGE_CACHE_SIZE * size_of;	\
+	if (ret) {							\
+		FSB_BUG_ON(!fsblock_subpage(b));			\
+		FSB_BUG_ON(test_bit(BL_metadata, &first->flags) !=	\
+			test_bit(BL_metadata, &b->flags));		\
+		FSB_BUG_ON(sizeof_block(b) != size_of);			\
+	}								\
+	ret;								\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#2833: FILE: include/linux/fsblock.h:208:
+#define for_each_block(first, b)					\
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#2833: FILE: include/linux/fsblock.h:208:
+#define for_each_block(first, b)					\
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LONG_LINE: line length of 158 exceeds 100 columns
#2834: FILE: include/linux/fsblock.h:209:
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2834: FILE: include/linux/fsblock.h:209:
+ for (b = assert_first_block(first); block_inbounds(first, b, fsblock_size(first), sizeof_block(first)); b = (void *)((unsigned long)b + sizeof_block(first)))$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#2836: FILE: include/linux/fsblock.h:211:
+#define __for_each_block(first, size, b)				\
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#2836: FILE: include/linux/fsblock.h:211:
+#define __for_each_block(first, size, b)				\
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2837: FILE: include/linux/fsblock.h:212:
+ for (b = assert_first_block(first); block_inbounds(first, b, size, sizeof(struct fsblock)); b++)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'first' - possible side-effects?
#2839: FILE: include/linux/fsblock.h:214:
+#define __for_each_mblock(first, size, mb)				\
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mb' - possible side-effects?
#2839: FILE: include/linux/fsblock.h:214:
+#define __for_each_mblock(first, size, mb)				\
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

WARNING:LONG_LINE: line length of 161 exceeds 100 columns
#2840: FILE: include/linux/fsblock.h:215:
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2840: FILE: include/linux/fsblock.h:215:
+ for (mb = block_mblock(assert_first_block(mblock_block(first))); block_inbounds(mblock_block(first), mblock_block(mb), size, sizeof(struct fsblock_meta)); mb++)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2842: FILE: include/linux/fsblock.h:217:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2843: FILE: include/linux/fsblock.h:218:
+#define first_page_idx(idx, bsize) ((idx) & ~(((bsize) >> PAGE_CACHE_SHIFT)-1))
                                                                            ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2856: FILE: include/linux/fsblock.h:231:
+static inline void find_pages(struct address_space *mapping, pgoff_t start, int nr_pages, struct page **pages)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2861: FILE: include/linux/fsblock.h:236:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2861: FILE: include/linux/fsblock.h:236:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2862: FILE: include/linux/fsblock.h:237:
+        ret = radix_tree_gang_lookup(&mapping->page_tree,
+				(void **)pages, start, nr_pages);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'page' - possible side-effects?
#2867: FILE: include/linux/fsblock.h:242:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#2867: FILE: include/linux/fsblock.h:242:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#2867: FILE: include/linux/fsblock.h:242:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#2867: FILE: include/linux/fsblock.h:242:
+#define for_each_page(page, size, p)					\
+do {									\
+	pgoff_t ___idx = (page)->index;					\
+	int ___i, ___nr = (size) >> PAGE_CACHE_SHIFT;			\
+	(p) = (page);							\
+	FSB_BUG_ON(___idx != first_page_idx(___idx, size));		\
+	for (___i = 0; ___i < ___nr; ___i++) {				\
+		(p) = find_page(page->mapping, ___idx + ___i);		\
+		FSB_BUG_ON(!(p));					\
+		{ struct { int i; } page; (void)page.i;			\
+

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2878: FILE: include/linux/fsblock.h:253:
+#define end_for_each_page } } } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2900: FILE: include/linux/fsblock.h:275:
+	unsigned int size_of = sizeof_block(block);
+	idx = (unsigned long)block - (unsigned long)page_blocks(block->page);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2906: FILE: include/linux/fsblock.h:281:
+struct fsblock_meta *find_get_mblock(struct block_device *bdev, sector_t blocknr, unsigned int size);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2908: FILE: include/linux/fsblock.h:283:
+struct fsblock_meta *find_or_create_mblock(struct block_device *bdev, sector_t blocknr, unsigned int size);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2912: FILE: include/linux/fsblock.h:287:
+
+

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#2918: FILE: include/linux/fsblock.h:293:
+static inline struct fsblock_meta *sb_find_or_create_mblock(struct super_block *sb, sector_t blocknr)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2947: FILE: include/linux/fsblock.h:322:
+}
+void lock_block(struct fsblock *block);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2950: FILE: include/linux/fsblock.h:325:
+sector_t fsblock_bmap(struct address_space *mapping, sector_t block, insert_mapping_fn *insert_mapping);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2954: FILE: include/linux/fsblock.h:329:
+int fsblock_write_page(struct page *page, insert_mapping_fn *insert_mapping,
+				struct writeback_control *wbc);

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2956: FILE: include/linux/fsblock.h:331:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to, insert_mapping_fn insert_mapping);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2956: FILE: include/linux/fsblock.h:331:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to, insert_mapping_fn insert_mapping);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2956: FILE: include/linux/fsblock.h:331:
+int fsblock_prepare_write(struct page *page, unsigned from, unsigned to, insert_mapping_fn insert_mapping);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2957: FILE: include/linux/fsblock.h:332:
+int __fsblock_commit_write(struct page *page, unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2957: FILE: include/linux/fsblock.h:332:
+int __fsblock_commit_write(struct page *page, unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2958: FILE: include/linux/fsblock.h:333:
+int fsblock_commit_write(struct file *file, struct page *page, unsigned from, unsigned to);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2958: FILE: include/linux/fsblock.h:333:
+int fsblock_commit_write(struct file *file, struct page *page, unsigned from, unsigned to);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2978: FILE: include/linux/fsblock_types.h:1:
+#ifndef __FSBLOCK_TYPES_H__

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#2986: FILE: include/linux/fsblock_types.h:9:
+#include <asm/atomic.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2991: FILE: include/linux/fsblock_types.h:14:
+# define FSB_BUG()	BUG()

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2992: FILE: include/linux/fsblock_types.h:15:
+# define FSB_BUG_ON(x)	BUG_ON(x)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3205: FILE: include/linux/buffer_head.h:233:
+	BUG_ON(PageBlocks(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3225: FILE: mm/filemap.c:2477:
+	BUG_ON(!(PagePrivate(page) ^ PageBlocks(page)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3255: FILE: mm/swap.c:417:
+		if ((PagePrivate(page) || PageBlocks(page)) &&
+				!TestSetPageLocked(page)) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3256: FILE: mm/swap.c:418:
+			BUG_ON(PagePrivate(page) && PageBlocks(page));

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3352: FILE: mm/truncate.c:190:
+			next = page->index+1;
 			                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3353: FILE: mm/truncate.c:191:
+			if (next-1 > end)
 			        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3400: FILE: mm/truncate.c:224:
+			if (next-1 > end) {
 			        ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3426: FILE: mm/truncate.c:331:
+	BUG_ON(PagePrivate(page) || PageBlocks(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3506: FILE: fs/inode.c:174:
+	BUG_ON(mapping_has_private(&inode->i_data));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3522: FILE: fs/inode.c:251:
+	BUG_ON(mapping_has_private(mapping));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3523: FILE: fs/inode.c:252:
+	BUG_ON(mapping->nrpages);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3531: FILE: fs/inode.c:315:
+		struct address_space * mapping;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3545: FILE: fs/inode.c:334:
+		BUG_ON(mapping_has_private(mapping));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414038.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 138 warnings, 114 checks, 3437 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414038.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
