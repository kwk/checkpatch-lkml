WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Currently, ARM linux uses mach-type to figure out platform. But mach-type could not handle variants well and it doesn't tell the kernel about info about attached peripherals.

WARNING:TYPO_SPELLING: 'simplifiy' may be misspelled - perhaps 'simplify'?
#38: 
The device-tree used by powerpc and sparc could simplifiy board ports, less platform specific code and simplify device driver code.
                                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#68: FILE: arch/arm/Kconfig:164:
+config PROC_DEVICETREE
+        bool "Support for device tree in /proc"
+        depends on PROC_FS
+        help
+          This option adds a device-tree directory under /proc which contains
+          an image of the device tree that the kernel copies from Open
+          Firmware or other boot firmware. If unsure, say Y here.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: arch/arm/include/asm/of_device.h:1:
+#ifndef _ASM_POWERPC_OF_DEVICE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#112: FILE: arch/arm/include/asm/of_device.h:19:
+extern struct of_device *of_device_alloc(struct device_node *np,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: arch/arm/include/asm/of_device.h:23:
+extern int of_device_uevent(struct device *dev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#132: FILE: arch/arm/include/asm/of_platform.h:1:
+#ifndef _ASM_POWERPC_OF_PLATFORM_H

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#150: FILE: arch/arm/include/asm/of_platform.h:19:
+}
+static inline void of_unregister_platform_driver(struct of_platform_driver *drv)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: arch/arm/include/asm/of_platform.h:25:
+extern struct of_device *of_platform_device_create(struct device_node *np,

WARNING:CONST_STRUCT: struct of_device_id should normally be const
#160: FILE: arch/arm/include/asm/of_platform.h:29:
+#define OF_NO_DEEP_PROBE ((struct of_device_id *)-1)

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#162: FILE: arch/arm/include/asm/of_platform.h:31:
+extern int of_platform_bus_probe(struct device_node *root,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#166: FILE: arch/arm/include/asm/of_platform.h:35:
+extern struct of_device *of_find_device_by_phandle(phandle ph);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#168: FILE: arch/arm/include/asm/of_platform.h:37:
+extern void of_instantiate_rtc(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#177: FILE: arch/arm/include/asm/prom.h:1:
+#ifndef _POWERPC_PROM_H

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#198: FILE: arch/arm/include/asm/prom.h:22:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#212: FILE: arch/arm/include/asm/prom.h:36:
+						 * content */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'pathes' may be misspelled - perhaps 'paths'?
#221: FILE: arch/arm/include/asm/prom.h:45:
+ * The dt struct contains the device tree structure, full pathes and
                                                           ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#248: FILE: arch/arm/include/asm/prom.h:72:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'kref'
#275: FILE: arch/arm/include/asm/prom.h:99:
+	struct  kref kref;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#292: FILE: arch/arm/include/asm/prom.h:116:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: arch/arm/include/asm/prom.h:120:
+static inline void set_node_proc_entry(struct device_node *dn,
+					struct proc_dir_entry *de)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#301: FILE: arch/arm/include/asm/prom.h:125:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: arch/arm/include/asm/prom.h:126:
+extern struct device_node *of_find_all_nodes(struct device_node *prev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: arch/arm/include/asm/prom.h:127:
+extern struct device_node *of_node_get(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: arch/arm/include/asm/prom.h:128:
+extern void of_node_put(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: arch/arm/include/asm/prom.h:131:
+extern int __init of_scan_flat_dt(int (*it)(unsigned long node,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#311: FILE: arch/arm/include/asm/prom.h:135:
+extern void * __init of_get_flat_dt_prop(unsigned long node, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: arch/arm/include/asm/prom.h:136:
+extern void * __init of_get_flat_dt_prop(unsigned long node, const char *name,
+					unsigned long *size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#313: FILE: arch/arm/include/asm/prom.h:137:
+extern int __init of_flat_dt_is_compatible(unsigned long node,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: arch/arm/include/asm/prom.h:138:
+extern int __init of_flat_dt_is_compatible(unsigned long node,
+					const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: arch/arm/include/asm/prom.h:139:
+extern unsigned long __init of_get_flat_dt_root(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: arch/arm/include/asm/prom.h:142:
+extern void of_attach_node(struct device_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#318: FILE: arch/arm/include/asm/prom.h:142:
+extern void of_attach_node(struct device_node *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: arch/arm/include/asm/prom.h:143:
+extern void of_detach_node(struct device_node *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device_node *' should also have an identifier name
#319: FILE: arch/arm/include/asm/prom.h:143:
+extern void of_detach_node(struct device_node *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#322: FILE: arch/arm/include/asm/prom.h:146:
+extern void finish_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#323: FILE: arch/arm/include/asm/prom.h:147:
+extern void unflatten_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: arch/arm/include/asm/prom.h:148:
+extern void early_init_devtree(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#324: FILE: arch/arm/include/asm/prom.h:148:
+extern void early_init_devtree(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#325: FILE: arch/arm/include/asm/prom.h:149:
+extern int machine_is_compatible(const char *compat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: arch/arm/include/asm/prom.h:150:
+extern void print_properties(struct device_node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: arch/arm/include/asm/prom.h:151:
+extern int prom_n_intr_cells(struct device_node *np);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: arch/arm/include/asm/prom.h:152:
+extern void prom_get_irq_senses(unsigned char *senses, int off, int max);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#329: FILE: arch/arm/include/asm/prom.h:153:
+extern int prom_add_property(struct device_node *np, struct property *prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#330: FILE: arch/arm/include/asm/prom.h:154:
+extern int prom_remove_property(struct device_node *np, struct property *prop);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: arch/arm/include/asm/prom.h:155:
+extern int prom_update_property(struct device_node *np,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: arch/arm/include/asm/prom.h:166:
+extern int pci_device_from_OF_node(struct device_node *node,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#344: FILE: arch/arm/include/asm/prom.h:168:
+extern struct device_node *pci_busdev_to_OF_node(struct pci_bus *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_bus *' should also have an identifier name
#344: FILE: arch/arm/include/asm/prom.h:168:
+extern struct device_node *pci_busdev_to_OF_node(struct pci_bus *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#344: FILE: arch/arm/include/asm/prom.h:168:
+extern struct device_node *pci_busdev_to_OF_node(struct pci_bus *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#345: FILE: arch/arm/include/asm/prom.h:169:
+extern struct device_node *pci_device_to_OF_node(struct pci_dev *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pci_dev *' should also have an identifier name
#345: FILE: arch/arm/include/asm/prom.h:169:
+extern struct device_node *pci_device_to_OF_node(struct pci_dev *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#346: FILE: arch/arm/include/asm/prom.h:170:
+extern void pci_create_OF_bus_map(void);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#349: FILE: arch/arm/include/asm/prom.h:173:
+extern struct resource *request_OF_resource(struct device_node* node,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#349: FILE: arch/arm/include/asm/prom.h:173:
+extern struct resource *request_OF_resource(struct device_node* node,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: arch/arm/include/asm/prom.h:174:
+extern struct resource *request_OF_resource(struct device_node* node,
+				int index, const char *name_postfix);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#351: FILE: arch/arm/include/asm/prom.h:175:
+extern int release_OF_resource(struct device_node *node, int index);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#353: FILE: arch/arm/include/asm/prom.h:177:
+
+

WARNING:TYPO_SPELLING: 'retreival' may be misspelled - perhaps 'retrieval'?
#355: FILE: arch/arm/include/asm/prom.h:179:
+ * OF address retreival & translation
               ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: arch/arm/include/asm/prom.h:182:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#363: FILE: arch/arm/include/asm/prom.h:187:
+	u64 r = 0;
+	while (size--)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#372: FILE: arch/arm/include/asm/prom.h:196:
+	return cell[size-1];
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: arch/arm/include/asm/prom.h:204:
+extern u64 of_translate_address(struct device_node *np, const u32 *addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#383: FILE: arch/arm/include/asm/prom.h:207:
+extern u64 of_translate_dma_address(struct device_node *dev,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#390: FILE: arch/arm/include/asm/prom.h:214:
+extern const u32 *of_get_address(struct device_node *dev, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: arch/arm/include/asm/prom.h:215:
+extern const u32 *of_get_address(struct device_node *dev, int index,
+			   u64 *size, unsigned int *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#393: FILE: arch/arm/include/asm/prom.h:217:
+extern const u32 *of_get_pci_address(struct device_node *dev, int bar_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: arch/arm/include/asm/prom.h:218:
+extern const u32 *of_get_pci_address(struct device_node *dev, int bar_no,
+			       u64 *size, unsigned int *flags);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: arch/arm/include/asm/prom.h:221:
+static inline const u32 *of_get_pci_address(struct device_node *dev,
+		int bar_no, u64 *size, unsigned int *flags)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#409: FILE: arch/arm/include/asm/prom.h:233:
+extern int of_address_to_resource(struct device_node *dev, int index,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: arch/arm/include/asm/prom.h:236:
+extern int of_pci_address_to_resource(struct device_node *dev, int bar,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: arch/arm/include/asm/prom.h:240:
+static inline int of_pci_address_to_resource(struct device_node *dev, int bar,
+		struct resource *r)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#418: FILE: arch/arm/include/asm/prom.h:242:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: arch/arm/include/asm/prom.h:250:
+void of_parse_dma_window(struct device_node *dn, const void *dma_window_prop,
+		unsigned long *busno, unsigned long *phys, unsigned long *size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#428: FILE: arch/arm/include/asm/prom.h:252:
+extern void kdump_move_device_tree(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: arch/arm/include/asm/prom.h:261:
+extern const void *of_get_mac_address(struct device_node *np);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: arch/arm/include/asm/prom.h:290:
+extern void of_irq_map_init(unsigned int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#485: FILE: arch/arm/include/asm/prom.h:309:
+extern int of_irq_map_raw(struct device_node *parent, const u32 *intspec,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#489: FILE: arch/arm/include/asm/prom.h:313:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#493: FILE: arch/arm/include/asm/prom.h:317:
+ * @index:     ^Iindex of the interrupt to resolve$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#500: FILE: arch/arm/include/asm/prom.h:324:
+extern int of_irq_map_one(struct device_node *device, int index,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#515: FILE: arch/arm/include/asm/prom.h:339:
+extern int of_irq_map_pci(struct pci_dev *pdev, struct of_irq *out_irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: arch/arm/include/asm/prom.h:341:
+extern int of_irq_to_resource(struct device_node *dev, int index,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#518: FILE: arch/arm/include/asm/prom.h:342:
+extern int of_irq_to_resource(struct device_node *dev, int index,
+			struct resource *r);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: arch/arm/include/asm/prom.h:351:
+extern void __iomem *of_iomap(struct device_node *device, int index);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#536: FILE: arch/arm/include/asm/prom.h:360:
+#define _ALIGN_UP(addr, size)	(((addr) + ((size) - 1)) & (~((size) - 1)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#588: FILE: arch/arm/kernel/prom.c:1:
+/*

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#626: FILE: arch/arm/kernel/prom.c:39:
+#define DBG(fmt...) printk(KERN_ERR fmt)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#633: FILE: arch/arm/kernel/prom.c:46:
+extern struct device_node *allnodes;	/* temporary while merging */

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#635: FILE: arch/arm/kernel/prom.c:48:
+extern rwlock_t devtree_lock;	/* temporary while merging */

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#674: FILE: arch/arm/kernel/prom.c:87:
+		printk("Weird tag at start of node: %x\n", tag);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#679: FILE: arch/arm/kernel/prom.c:92:
+	l = allocl = strlen(pathp) + 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#706: FILE: arch/arm/kernel/prom.c:119:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#712: FILE: arch/arm/kernel/prom.c:125:
+		if (new_format) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#727: FILE: arch/arm/kernel/prom.c:140:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dad"
#732: FILE: arch/arm/kernel/prom.c:145:
+		if (dad != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pname"
#762: FILE: arch/arm/kernel/prom.c:175:
+		if (pname == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#763: FILE: arch/arm/kernel/prom.c:176:
+			printk(KERN_INFO "Can't find property name in list!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: arch/arm/kernel/prom.c:228:
+			DBG("fixed up name for %s -> %s\n", pathp,
+				(char *)pp->value);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#833: FILE: arch/arm/kernel/prom.c:246:
+		printk(KERN_INFO "Weird tag at end of node: %x\n", tag);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#851: FILE: arch/arm/kernel/prom.c:264:
+	DBG(" -> unflatten_device_tree()\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#863: FILE: arch/arm/kernel/prom.c:276:
+	mem = (unsigned long) __alloc_bootmem(size + 4,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#875: FILE: arch/arm/kernel/prom.c:288:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: arch/arm/kernel/prom.c:289:
+		printk(KERN_WARNING "Weird tag at end of tree: %08x\n",
+			*((u32 *)start));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#878: FILE: arch/arm/kernel/prom.c:291:
+		printk(KERN_WARNING "End of tree marker overwritten: %08x\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!of_chosen"
#884: FILE: arch/arm/kernel/prom.c:297:
+	if (of_chosen == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unflatten_device_tree', this function's name, in a string
#887: FILE: arch/arm/kernel/prom.c:300:
+	DBG(" <- unflatten_device_tree()\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#937: FILE: arch/arm/kernel/prom.c:350:
+		printk(KERN_WARNING "WARNING: Bad of_node_put() on %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#938: FILE: arch/arm/kernel/prom.c:351:
+		printk(KERN_WARNING "WARNING: Bad of_node_put() on %s\n",
+			node->full_name);

WARNING:LINE_SPACING: Missing a blank line after declarations
#949: FILE: arch/arm/kernel/prom.c:362:
+		struct property *next = prop->next;
+		kfree(prop->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: arch/arm/kernel/prom.c:397:
+    phys_flat_dev_tree_address =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#986: FILE: arch/arm/kernel/prom.c:399:
+    phys_flat_dev_tree_size = tag->u.flat_dev_tree_address.flat_dev_tree_size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: arch/arm/kernel/prom.c:401:
+    have_of = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: arch/arm/kernel/prom.c:402:
+    if (phys_flat_dev_tree_size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: arch/arm/kernel/prom.c:405:
+    printk(KERN_INFO$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#992: FILE: arch/arm/kernel/prom.c:405:
+    printk(KERN_INFO

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: arch/arm/kernel/prom.c:411:
+    return 0;$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 41 warnings, 76 checks, 925 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000119831.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
