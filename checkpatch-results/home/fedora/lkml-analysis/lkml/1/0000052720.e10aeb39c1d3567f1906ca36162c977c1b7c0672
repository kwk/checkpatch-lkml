CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/mfd/mc13783-core.c:15:
+#define MC13783_IRQSTAT0_ADCDONEI	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: drivers/mfd/mc13783-core.c:16:
+#define MC13783_IRQSTAT0_ADCBISDONEI	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/mfd/mc13783-core.c:17:
+#define MC13783_IRQSTAT0_TSI		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/mfd/mc13783-core.c:18:
+#define MC13783_IRQSTAT0_WHIGHI		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: drivers/mfd/mc13783-core.c:19:
+#define MC13783_IRQSTAT0_WLOWI		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#137: FILE: drivers/mfd/mc13783-core.c:20:
+#define MC13783_IRQSTAT0_CHGDETI	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: drivers/mfd/mc13783-core.c:21:
+#define MC13783_IRQSTAT0_CHGOVI		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#139: FILE: drivers/mfd/mc13783-core.c:22:
+#define MC13783_IRQSTAT0_CHGREVI	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#140: FILE: drivers/mfd/mc13783-core.c:23:
+#define MC13783_IRQSTAT0_CHGSHORTI	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: drivers/mfd/mc13783-core.c:24:
+#define MC13783_IRQSTAT0_CCCVI		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#142: FILE: drivers/mfd/mc13783-core.c:25:
+#define MC13783_IRQSTAT0_CHGCURRI	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#143: FILE: drivers/mfd/mc13783-core.c:26:
+#define MC13783_IRQSTAT0_BPONI		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#144: FILE: drivers/mfd/mc13783-core.c:27:
+#define MC13783_IRQSTAT0_LOBATLI	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#145: FILE: drivers/mfd/mc13783-core.c:28:
+#define MC13783_IRQSTAT0_LOBATHI	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#146: FILE: drivers/mfd/mc13783-core.c:29:
+#define MC13783_IRQSTAT0_UDPI		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#147: FILE: drivers/mfd/mc13783-core.c:30:
+#define MC13783_IRQSTAT0_USBI		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: drivers/mfd/mc13783-core.c:31:
+#define MC13783_IRQSTAT0_IDI		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#149: FILE: drivers/mfd/mc13783-core.c:32:
+#define MC13783_IRQSTAT0_SE1I		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#150: FILE: drivers/mfd/mc13783-core.c:33:
+#define MC13783_IRQSTAT0_CKDETI		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#151: FILE: drivers/mfd/mc13783-core.c:34:
+#define MC13783_IRQSTAT0_UDMI		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#176: FILE: drivers/mfd/mc13783-core.c:59:
+#define MC13783_IRQSTAT1_1HZI		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#177: FILE: drivers/mfd/mc13783-core.c:60:
+#define MC13783_IRQSTAT1_TODAI		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#178: FILE: drivers/mfd/mc13783-core.c:61:
+#define MC13783_IRQSTAT1_ONOFD1I	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#179: FILE: drivers/mfd/mc13783-core.c:62:
+#define MC13783_IRQSTAT1_ONOFD2I	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#180: FILE: drivers/mfd/mc13783-core.c:63:
+#define MC13783_IRQSTAT1_ONOFD3I	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#181: FILE: drivers/mfd/mc13783-core.c:64:
+#define MC13783_IRQSTAT1_SYSRSTI	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#182: FILE: drivers/mfd/mc13783-core.c:65:
+#define MC13783_IRQSTAT1_RTCRSTI	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#183: FILE: drivers/mfd/mc13783-core.c:66:
+#define MC13783_IRQSTAT1_PCI		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: drivers/mfd/mc13783-core.c:67:
+#define MC13783_IRQSTAT1_WARMI		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#185: FILE: drivers/mfd/mc13783-core.c:68:
+#define MC13783_IRQSTAT1_MEMHLDI	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#186: FILE: drivers/mfd/mc13783-core.c:69:
+#define MC13783_IRQSTAT1_PWRRDYI	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#187: FILE: drivers/mfd/mc13783-core.c:70:
+#define MC13783_IRQSTAT1_THWARNLI	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#188: FILE: drivers/mfd/mc13783-core.c:71:
+#define MC13783_IRQSTAT1_THWARNHI	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#189: FILE: drivers/mfd/mc13783-core.c:72:
+#define MC13783_IRQSTAT1_CLKI		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#190: FILE: drivers/mfd/mc13783-core.c:73:
+#define MC13783_IRQSTAT1_SEMAFI		(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#191: FILE: drivers/mfd/mc13783-core.c:74:
+#define MC13783_IRQSTAT1_MC2BI		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#192: FILE: drivers/mfd/mc13783-core.c:75:
+#define MC13783_IRQSTAT1_HSDETI		(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#193: FILE: drivers/mfd/mc13783-core.c:76:
+#define MC13783_IRQSTAT1_HSLI		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#194: FILE: drivers/mfd/mc13783-core.c:77:
+#define MC13783_IRQSTAT1_ALSPTHI	(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#195: FILE: drivers/mfd/mc13783-core.c:78:
+#define MC13783_IRQSTAT1_AHSSHORTI	(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#220: FILE: drivers/mfd/mc13783-core.c:103:
+#define MC13783_ADC1_ADEN		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#221: FILE: drivers/mfd/mc13783-core.c:104:
+#define MC13783_ADC1_RAND		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#222: FILE: drivers/mfd/mc13783-core.c:105:
+#define MC13783_ADC1_ADSEL		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#223: FILE: drivers/mfd/mc13783-core.c:106:
+#define MC13783_ADC1_ASC		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#224: FILE: drivers/mfd/mc13783-core.c:107:
+#define MC13783_ADC1_ADTRIGIGN		(1 << 21)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#231: FILE: drivers/mfd/mc13783-core.c:114:
+		dev_dbg(&mc13783->spidev->dev, "wait for %s from %pf\n",
+			__func__, __builtin_return_address(0));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#235: FILE: drivers/mfd/mc13783-core.c:118:
+	}
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#237: FILE: drivers/mfd/mc13783-core.c:120:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pf' - use %ps instead
#252: FILE: drivers/mfd/mc13783-core.c:126:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: drivers/mfd/mc13783-core.c:127:
+	dev_dbg(&mc13783->spidev->dev, "%s from %pf\n",
+			__func__, __builtin_return_address(0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/mfd/mc13783-core.c:133:
+static int mc13783_prep_read_transfer(struct mc13783 *mc13783,
+		struct spi_transfer *t, u32 *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: drivers/mfd/mc13783-core.c:151:
+static int mc13783_eval_read_transfer(struct mc13783 *mc13783,
+		struct spi_transfer *t, u32 *buf,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#287: FILE: drivers/mfd/mc13783-core.c:154:
+	BUG_ON(t->tx_buf != buf || t->rx_buf != buf);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: drivers/mfd/mc13783-core.c:162:
+static int mc13783_prep_write_transfer(struct mc13783 *mc13783,
+		struct spi_transfer *t, u32 *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/mfd/mc13783-core.c:180:
+static int mc13783_eval_write_transfer(struct mc13783 *mc13783,
+		struct spi_transfer *t, u32 *buf,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#323: FILE: drivers/mfd/mc13783-core.c:183:
+	BUG_ON(t->tx_buf != buf || t->rx_buf != buf);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#337: FILE: drivers/mfd/mc13783-core.c:195:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: drivers/mfd/mc13783-core.c:208:
+	BUG_ON(!ret && m.status);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#378: FILE: drivers/mfd/mc13783-core.c:228:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#393: FILE: drivers/mfd/mc13783-core.c:242:
+	BUG_ON(!ret && m.status);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#407: FILE: drivers/mfd/mc13783-core.c:254:
+int mc13783_reg_rmw(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#415: FILE: drivers/mfd/mc13783-core.c:259:
+	BUG_ON(val & ~mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: drivers/mfd/mc13783-core.c:316:
+int mc13783_irq_request_nounmask(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: drivers/mfd/mc13783-core.c:318:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#499: FILE: drivers/mfd/mc13783-core.c:319:
+	BUG_ON(!handler);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/mfd/mc13783-core.c:335:
+int mc13783_irq_request(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev)

WARNING:LINE_SPACING: Missing a blank line after declarations
#544: FILE: drivers/mfd/mc13783-core.c:357:
+	int ret;
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#544: FILE: drivers/mfd/mc13783-core.c:357:
+	BUG_ON(!mutex_is_locked(&mc13783->lock));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#547: FILE: drivers/mfd/mc13783-core.c:360:
+	if (irq < 0 || irq >= MC13783_NUM_IRQ || !mc13783->irqhandler[irq] ||
+			mc13783->irqdata[irq] != dev)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: drivers/mfd/mc13783-core.c:384:
+	BUG_ON(irq < 0 || irq >= MC13783_NUM_IRQ);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#611: FILE: drivers/mfd/mc13783-core.c:395:
+static int mc13783_irq_handle(struct mc13783 *mc13783,
+		unsigned int offstat, unsigned int offmask, int baseirq)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#643: FILE: drivers/mfd/mc13783-core.c:421:
+			dev_err(&mc13783->spidev->dev,
+					"BUG: irq %u but no handler\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: drivers/mfd/mc13783-core.c:442:
+	ret = mc13783_irq_handle(mc13783, MC13783_IRQSTAT0,
+			MC13783_IRQMASK0, MC13783_IRQ_ADCDONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: drivers/mfd/mc13783-core.c:447:
+	ret = mc13783_irq_handle(mc13783, MC13783_IRQSTAT1,
+			MC13783_IRQMASK1, MC13783_IRQ_1HZ);

CHECK:BIT_MACRO: Prefer using the BIT macro
#697: FILE: drivers/mfd/mc13783-core.c:475:
+#define MC13783_ADC_WORKING (1 << 16)

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#712: FILE: drivers/mfd/mc13783-core.c:487:
+	dev_dbg(&mc13783->spidev->dev, "%s\n", __func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#777: FILE: drivers/mfd/mc13783-core.c:534:
+	mc13783_irq_request(mc13783, MC13783_IRQ_ADCDONE,
+			mc13783_handler_adcdone, __func__, &adcdone_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/mfd/mc13783-core.c:554:
+			mc13783_reg_read(mc13783,
+					MC13783_REG_ADC_2, &sample[i]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#815: FILE: drivers/mfd/mc13783-core.c:565:
+static int mc13783_add_subdevice_pdata(struct mc13783 *mc13783,
+		const char *name, void *pdata, size_t pdata_size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#855: FILE: drivers/mfd/mc13783-core.c:602:
+	dev_info(&mc13783->spidev->dev,
+			"MC13783 Rev %d.%d FinVer %x detected\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: drivers/mfd/mc13783-core.c:642:
+	ret = request_threaded_irq(spi->irq, NULL, mc13783_irq_thread,
+			IRQF_ONESHOT | IRQF_TRIGGER_HIGH, "mc13783", mc13783);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#953: FILE: drivers/mfd/mc13783-core.c:674:
+		mc13783_add_subdevice_pdata(mc13783, "mc13783-regulator",
+				&regulator_pdata, sizeof(regulator_pdata));

WARNING:HOTPLUG_SECTION: Using __devexit is unnecessary
#995: FILE: drivers/mfd/mc13783-core.c:688:
 static int __devexit mc13783_remove(struct spi_device *spi)

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1085: FILE: include/linux/mfd/mc13783-private.h:32:
+	struct mutex lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1243: FILE: include/linux/mfd/mc13783-private.h:210:
+static inline int mc13783_set_bits(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1246: FILE: include/linux/mfd/mc13783-private.h:213:
+	int ret;
+	mc13783_lock(mc13783);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1337: FILE: include/linux/mfd/mc13783.h:22:
+int mc13783_reg_rmw(struct mc13783 *mc13783, unsigned int offset,
+		u32 mask, u32 val);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1340: FILE: include/linux/mfd/mc13783.h:25:
+int mc13783_irq_request(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1342: FILE: include/linux/mfd/mc13783.h:27:
+int mc13783_irq_request_nounmask(struct mc13783 *mc13783, int irq,
+		irq_handler_t handler, const char *name, void *dev);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1350: FILE: include/linux/mfd/mc13783.h:35:
+#define MC13783_ADC0_ADREFEN		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1351: FILE: include/linux/mfd/mc13783.h:36:
+#define MC13783_ADC0_ADREFMODE		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1352: FILE: include/linux/mfd/mc13783.h:37:
+#define MC13783_ADC0_TSMOD0		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1353: FILE: include/linux/mfd/mc13783.h:38:
+#define MC13783_ADC0_TSMOD1		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1354: FILE: include/linux/mfd/mc13783.h:39:
+#define MC13783_ADC0_TSMOD2		(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1355: FILE: include/linux/mfd/mc13783.h:40:
+#define MC13783_ADC0_ADINC1		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1356: FILE: include/linux/mfd/mc13783.h:41:
+#define MC13783_ADC0_ADINC2		(1 << 17)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052720.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 78 checks, 1352 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000052720.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
