CHECK:BRACES: braces {} should be used on all arms of this statement
#98: FILE: drivers/s390/cio/css.c:810:
+			if (secm_area) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#102: FILE: drivers/s390/cio/css.c:814:
+			} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#122: FILE: drivers/s390/cio/css.c:834:
+			if (secm_area) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#126: FILE: drivers/s390/cio/css.c:838:
+			} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#139: FILE: drivers/s390/cio/css.c:851:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#140: FILE: drivers/s390/cio/css.c:852:
+}
+static struct notifier_block css_power_notifier = {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONST_STRUCT: struct dev_pm_ops should normally be const
#223: FILE: drivers/s390/cio/css.c:1094:
+static struct dev_pm_ops css_pm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACING: Unnecessary space before function pointer arguments
#262: FILE: drivers/s390/cio/css.h:90:
+	int (*prepare) (struct subchannel *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#262: FILE: drivers/s390/cio/css.h:90:
+	int (*prepare) (struct subchannel *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#263: FILE: drivers/s390/cio/css.h:91:
+	void (*complete) (struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#263: FILE: drivers/s390/cio/css.h:91:
+	void (*complete) (struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#264: FILE: drivers/s390/cio/css.h:92:
+	int (*freeze)(struct subchannel *);

WARNING:SPACING: Unnecessary space before function pointer arguments
#265: FILE: drivers/s390/cio/css.h:93:
+	int (*thaw) (struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#265: FILE: drivers/s390/cio/css.h:93:
+	int (*thaw) (struct subchannel *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct subchannel *' should also have an identifier name
#266: FILE: drivers/s390/cio/css.h:94:
+	int (*restore)(struct subchannel *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000115665.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 6 checks, 230 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000115665.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
