WARNING:TYPO_SPELLING: 'hopefuly' may be misspelled - perhaps 'hopefully'?
#36: 
hopefuly this could be any use for others as well...
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#108: FILE: include/linux/dynamic_debug.h:34:
+#define _DPRINTK_FLAGS_RB      (1<<1)  /* store message to the ring buffer */
                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#108: FILE: include/linux/dynamic_debug.h:34:
+#define _DPRINTK_FLAGS_RB      (1<<1)  /* store message to the ring buffer */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#118: FILE: include/linux/dynamic_debug.h:56:
+extern int dynamic_debug_rb_init(struct dentry *dir);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/linux/dynamic_debug.h:57:
+extern int dynamic_debug_rb_store(const char *fmt, ...);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#138: FILE: include/linux/dynamic_debug.h:73:
+			printk(KERN_DEBUG pr_fmt(fmt),	##__VA_ARGS__);	\

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#157: FILE: include/linux/dynamic_debug.h:90:
+			dev_printk(KERN_DEBUG, dev, fmt, ##__VA_ARGS__);\

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#176: FILE: lib/Kconfig.debug:1059:
+config DYNAMIC_DEBUG_RB
+	bool "Use ring buffer for output"
+	default n
+	depends on DYNAMIC_DEBUG
+	help
+	  Enables the support for storing DYNAMIC_DEBUG messages into the
+	  ring buffer. The ring_buffer is accesable by 'trace' or 'trace_pipe'
+	  files (see Documentation/dynamic-debug-howto.txt).
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#241: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#246: FILE: lib/dynamic_debug_rb.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#247: FILE: lib/dynamic_debug_rb.c:2:
+ * lib/dynamic_debug_rb.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!event"
#324: FILE: lib/dynamic_debug_rb.c:79:
+	if (event == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'size == rb_size_kb'
#345: FILE: lib/dynamic_debug_rb.c:100:
+	if (!size ||
+	    (size == rb_size_kb))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#371: FILE: lib/dynamic_debug_rb.c:126:
+	for_each_cpu(cpu, cpu_possible_mask) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#372: FILE: lib/dynamic_debug_rb.c:127:
+		if (iter->type == DDEBUG_TRACE_ITER_READ) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#377: FILE: lib/dynamic_debug_rb.c:132:
+		} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter"
#486: FILE: lib/dynamic_debug_rb.c:241:
+	if (iter == NULL)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#516: FILE: lib/dynamic_debug_rb.c:271:
+	    (file->f_flags & O_TRUNC)) {
+

CHECK:SPACING: No space is necessary after a cast
#543: FILE: lib/dynamic_debug_rb.c:298:
+		((struct seq_file *) file->private_data)->private = iter;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#634: FILE: lib/dynamic_debug_rb.c:389:
+static ssize_t rb_size_kb_write(struct file *filp, const char __user *ubuf,
                                              ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#649: FILE: lib/dynamic_debug_rb.c:404:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LINE_SPACING: Missing a blank line after declarations
#673: FILE: lib/dynamic_debug_rb.c:428:
+	struct ddebug_trace_iter *iter = file->private_data;
+	trace_iter_free(iter);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#707: FILE: lib/dynamic_debug_rb.c:462:
+		printk(KERN_ERR "failed to allocate ring buffer!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#714: FILE: lib/dynamic_debug_rb.c:469:
+		printk(KERN_ERR "failed to create 'trace' file!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#721: FILE: lib/dynamic_debug_rb.c:476:
+		printk(KERN_ERR "failed to create 'trace_pipe' file!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: lib/dynamic_debug_rb.c:483:
+		printk(KERN_ERR "failed to create 'rb_size_kb' file!\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 12 checks, 660 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000031100.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
