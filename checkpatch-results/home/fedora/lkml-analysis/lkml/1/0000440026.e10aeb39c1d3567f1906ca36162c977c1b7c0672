WARNING:LINE_SPACING: Missing a blank line after declarations
#84: FILE: kernel/container.c:696:
+	int subsys_id;
+	get_first_subsys(cont, NULL, &subsys_id);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#94: FILE: kernel/container.c:706:
+			if (retval) {
+				return retval;
+			}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#106: FILE: kernel/container.c:718:
+	 * hierarchy */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#112: FILE: kernel/container.c:724:
+			 * old to the new */

WARNING:BRACES: braces {} are not necessary for single statement blocks
#121: FILE: kernel/container.c:733:
+		if (ss->attach) {
+			ss->attach(ss, cont, oldcont, tsk);
+		}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#142: FILE: kernel/container.c:754:
+	if (sscanf(pidbuf, "%d", &pid) != 1)
+		return -EIO;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid'
#157: FILE: kernel/container.c:769:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->uid'
#157: FILE: kernel/container.c:769:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'current->euid != tsk->suid'
#157: FILE: kernel/container.c:769:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#158: FILE: kernel/container.c:770:
+		if ((current->euid) && (current->euid != tsk->uid)
+		    && (current->euid != tsk->suid)) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#193: FILE: kernel/container.c:806:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#237: FILE: kernel/container.c:1031:
+ * that referenced it. */

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#239: FILE: kernel/container.c:1033:
+int container_task_count(const struct container *cont) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#244: FILE: kernel/container.c:1038:
+	int subsys_id;
+	get_first_subsys(cont, &css, &subsys_id);

ERROR:SPACING: space prohibited before that '++' (ctx:WxO)
#249: FILE: kernel/container.c:1043:
+			count ++;
 			      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#290: FILE: kernel/container.c:1084:
+	int subsys_id;
+	get_first_subsys(cont, &css, &subsys_id);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#356: FILE: kernel/container.c:1150:
+	pidarray = kmalloc(npids * sizeof(pid_t), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#429: FILE: kernel/container.c:1224:
+	if ((err = container_add_file(cont, &cft_tasks)) < 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440026.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 4 checks, 376 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000440026.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
