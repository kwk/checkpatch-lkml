ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#61: FILE: drivers/staging/echo/bit_operations.h:44:
+		:[res] "=&r" (res)
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#62: FILE: drivers/staging/echo/bit_operations.h:45:
+		:[bits] "rm"(bits)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#85: FILE: drivers/staging/echo/bit_operations.h:60:
+		:[res] "=&r" (res)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#86: FILE: drivers/staging/echo/bit_operations.h:61:
+		:[bits] "rm"(bits)
 		^

CHECK:SPACING: No space is necessary after a cast
#240: FILE: drivers/staging/echo/bit_operations.h:180:
+	return (x & (-(int32_t) x));

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#336: FILE: drivers/staging/echo/echo.c:127:
+static void __inline__ lms_adapt_bg(struct oslec_state *ec, int clean,

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

WARNING:INLINE: plain inline is preferred over __inline__
#336: FILE: drivers/staging/echo/echo.c:127:
+static void __inline__ lms_adapt_bg(struct oslec_state *ec, int clean,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#393: FILE: drivers/staging/echo/echo.c:135:
+	int16_t *phist;

CHECK:SPACING: No space is necessary after a cast
#413: FILE: drivers/staging/echo/echo.c:155:
+		ec->fir_taps16[1][i] += (int16_t) ((exp + (1 << 14)) >> 15);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#418: FILE: drivers/staging/echo/echo.c:160:
+	/* Note the asm for the inner loop above generated by Blackfin gcc
+	   4.1.1 is pretty good (note even parallel instructions used):

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:INLINE: plain inline is preferred over __inline__
#444: FILE: drivers/staging/echo/echo.c:199:
+static __inline__ void lms_adapt_bg(struct oslec_state *ec, int clean,

CHECK:SPACING: No space is necessary after a cast
#493: FILE: drivers/staging/echo/echo.c:221:
+		ec->fir_taps16[1][i] += (int16_t) ((exp + (1 << 14)) >> 15);

CHECK:SPACING: No space is necessary after a cast
#497: FILE: drivers/staging/echo/echo.c:225:
+		ec->fir_taps16[1][i] += (int16_t) ((exp + (1 << 14)) >> 15);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#578: FILE: drivers/staging/echo/echo.c:253:
+	for (i = 0; i < 5; i++) {
+		ec->xvtx[i] = ec->yvtx[i] = ec->xvrx[i] = ec->yvrx[i] = 0;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#579: FILE: drivers/staging/echo/echo.c:254:
+		ec->xvtx[i] = ec->yvtx[i] = ec->xvrx[i] = ec->yvrx[i] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CAMELCASE: Avoid CamelCase: <Pstates>
#590: FILE: drivers/staging/echo/echo.c:265:
+	ec->Pstates = 0;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#591: FILE: drivers/staging/echo/echo.c:266:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Ltxacc>
#591: FILE: drivers/staging/echo/echo.c:266:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lrxacc>
#591: FILE: drivers/staging/echo/echo.c:266:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lcleanacc>
#591: FILE: drivers/staging/echo/echo.c:266:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lclean_bgacc>
#591: FILE: drivers/staging/echo/echo.c:266:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#592: FILE: drivers/staging/echo/echo.c:267:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Ltx>
#592: FILE: drivers/staging/echo/echo.c:267:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lrx>
#592: FILE: drivers/staging/echo/echo.c:267:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lclean>
#592: FILE: drivers/staging/echo/echo.c:267:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lclean_bg>
#592: FILE: drivers/staging/echo/echo.c:267:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#593: FILE: drivers/staging/echo/echo.c:268:
+	ec->tx_1 = ec->tx_2 = ec->rx_1 = ec->rx_2 = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#594: FILE: drivers/staging/echo/echo.c:269:
+	ec->Lbgn = ec->Lbgn_acc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lbgn>
#594: FILE: drivers/staging/echo/echo.c:269:
+	ec->Lbgn = ec->Lbgn_acc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lbgn_acc>
#594: FILE: drivers/staging/echo/echo.c:269:
+	ec->Lbgn = ec->Lbgn_acc = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Lbgn_upper>
#595: FILE: drivers/staging/echo/echo.c:270:
+	ec->Lbgn_upper = 200;

CHECK:CAMELCASE: Avoid CamelCase: <Lbgn_upper_acc>
#596: FILE: drivers/staging/echo/echo.c:271:
+	ec->Lbgn_upper_acc = ec->Lbgn_upper << 13;

WARNING:INDENTED_LABEL: labels should not be indented
#600: FILE: drivers/staging/echo/echo.c:275:
+      error_oom:

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#640: FILE: drivers/staging/echo/echo.c:310:
+	ec->Ltxacc = ec->Lrxacc = ec->Lcleanacc = ec->Lclean_bgacc = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#641: FILE: drivers/staging/echo/echo.c:311:
+	ec->Ltx = ec->Lrx = ec->Lclean = ec->Lclean_bg = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#642: FILE: drivers/staging/echo/echo.c:312:
+	ec->tx_1 = ec->tx_2 = ec->rx_1 = ec->rx_2 = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#647: FILE: drivers/staging/echo/echo.c:314:
+	ec->Lbgn = ec->Lbgn_acc = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#717: FILE: drivers/staging/echo/echo.c:344:
+	int32_t echo_value;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#722: FILE: drivers/staging/echo/echo.c:349:
+	/* Input scaling was found be required to prevent problems when tx
+	   starts clipping.  Another possible way to handle this would be the

WARNING:TYPO_SPELLING: 'coefficent' may be misspelled - perhaps 'coefficient'?
#723: FILE: drivers/staging/echo/echo.c:350:
+	   filter coefficent scaling. */
 	          ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#723: FILE: drivers/staging/echo/echo.c:350:
+	   filter coefficent scaling. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#731: FILE: drivers/staging/echo/echo.c:358:
+	/*
+	   Filter DC, 3dB point is 160Hz (I think), note 32 bit precision required

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#754: FILE: drivers/staging/echo/echo.c:376:
+		   impulse conditions, and it might roll to 32768 and need clipping on sustained peak

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#754: FILE: drivers/staging/echo/echo.c:376:
+		/* Make sure the gain of the HPF is 1.0. This can still saturate a little under
+		   impulse conditions, and it might roll to 32768 and need clipping on sustained peak

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#756: FILE: drivers/staging/echo/echo.c:378:
+		   any saturation should not markedly affect the downstream processing. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#886: FILE: drivers/staging/echo/echo.c:384:
+		/* hard limit filter to prevent clipping.  Note that at this stage
+		   rx should be limited to +/- 16383 due to right shift above */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#886: FILE: drivers/staging/echo/echo.c:384:
+		   rx should be limited to +/- 16383 due to right shift above */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#903: FILE: drivers/staging/echo/echo.c:395:
+	/* Block average of power in the filter states.  Used for
+	   adaption power calculation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#903: FILE: drivers/staging/echo/echo.c:395:
+	   adaption power calculation. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#942: FILE: drivers/staging/echo/echo.c:401:
+		/* efficient "out with the old and in with the new" algorithm so
+		   we don't have to recalculate over the whole block of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#943: FILE: drivers/staging/echo/echo.c:402:
+		   samples. */

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#944: FILE: drivers/staging/echo/echo.c:403:
+		new = (int)tx *(int)tx;
 		              ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1012: FILE: drivers/staging/echo/echo.c:437:
+	/* Almost always adap bg filter, just simple DT and energy
+	   detection to minimise adaption in cases of strong double talk.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ec->nonupdate_dwell == 0'
#1017: FILE: drivers/staging/echo/echo.c:442:
+	if ((ec->nonupdate_dwell == 0)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1021: FILE: drivers/staging/echo/echo.c:446:
+		/* Determine:
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1062: FILE: drivers/staging/echo/echo.c:487:
+	/* very simple DTD to make sure we dont try and adapt with strong
+	   near end speech */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1062: FILE: drivers/staging/echo/echo.c:487:
+	   near end speech */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ec->Lrx > MIN_RX_POWER_FOR_ADAPTION'
#1065: FILE: drivers/staging/echo/echo.c:490:
+	if ((ec->Lrx > MIN_RX_POWER_FOR_ADAPTION) && (ec->Lrx > ec->Ltx))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ec->Lrx > ec->Ltx'
#1065: FILE: drivers/staging/echo/echo.c:490:
+	if ((ec->Lrx > MIN_RX_POWER_FOR_ADAPTION) && (ec->Lrx > ec->Ltx))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1073: FILE: drivers/staging/echo/echo.c:498:
+	/* These conditions are from the dual path paper [1], I messed with
+	   them a bit to improve performance. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1073: FILE: drivers/staging/echo/echo.c:498:
+	   them a bit to improve performance. */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ec->nonupdate_dwell == 0'
#1075: FILE: drivers/staging/echo/echo.c:500:
+	if ((ec->adaption_mode & ECHO_CAN_USE_ADAPTION) &&
+	    (ec->nonupdate_dwell == 0) &&
+	    (8 * ec->Lclean_bg <
+	     7 * ec->Lclean) /* (ec->Lclean_bg < 0.875*ec->Lclean) */ &&
+	    (8 * ec->Lclean_bg <
+	     ec->Ltx) /* (ec->Lclean_bg < 0.125*ec->Ltx)    */ ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1075: FILE: drivers/staging/echo/echo.c:500:
+	if ((ec->adaption_mode & ECHO_CAN_USE_ADAPTION) &&
[...]
+	} else
[...]

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1080: FILE: drivers/staging/echo/echo.c:505:
+	     ec->Ltx) /* (ec->Lclean_bg < 0.125*ec->Ltx)    */ ) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1081: FILE: drivers/staging/echo/echo.c:506:
+		if (ec->cond_met == 6) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1086: FILE: drivers/staging/echo/echo.c:511:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#1088: FILE: drivers/staging/echo/echo.c:513:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1096: FILE: drivers/staging/echo/echo.c:521:
+		/* Non-linear processor - a fancy way to say "zap small signals, to avoid
+		   residual echo due to (uLaw/ALaw) non-linearity in the channel.". */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1096: FILE: drivers/staging/echo/echo.c:521:
+		   residual echo due to (uLaw/ALaw) non-linearity in the channel.". */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1100: FILE: drivers/staging/echo/echo.c:525:
+			/* Our e/c has improved echo by at least 24 dB (each factor of 2 is 6dB,
+			   so 2*2*2*2=16 is the same as 6+6+6+6=24dB) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1100: FILE: drivers/staging/echo/echo.c:525:
+			   so 2*2*2*2=16 is the same as 6+6+6+6=24dB) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1105: FILE: drivers/staging/echo/echo.c:530:
+				/* Very elementary comfort noise generation.  Just random
+				   numbers rolled off very vaguely Hoth-like.  DR: This

WARNING:TYPO_SPELLING: 'overlfow' may be misspelled - perhaps 'overflow'?
#1107: FILE: drivers/staging/echo/echo.c:532:
+				   are some overlfow issues in the filtering as it's too
 				            ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1128: FILE: drivers/staging/echo/echo.c:553:
+				/* just mute the residual, doesn't sound very good, used mainly
+				   in G168 tests */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1128: FILE: drivers/staging/echo/echo.c:553:
+				   in G168 tests */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1133: FILE: drivers/staging/echo/echo.c:558:
+			/* Background noise estimator.  I tried a few algorithms
+			   here without much luck.  This very simple one seems to

CHECK:SPACING: No space is necessary after a cast
#1157: FILE: drivers/staging/echo/echo.c:582:
+	return (int16_t) ec->clean_nlp << 1;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1169: FILE: drivers/staging/echo/echo.c:608:
+int16_t oslec_hpf_tx(struct oslec_state * ec, int16_t tx)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE_COMMENT: line length of 101 exceeds 100 columns
#1184: FILE: drivers/staging/echo/echo.c:616:
+		   impulse conditions, and it might roll to 32768 and need clipping on sustained peak

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1184: FILE: drivers/staging/echo/echo.c:616:
+		/* Make sure the gain of the HPF is 1.0. The first can still saturate a little under
+		   impulse conditions, and it might roll to 32768 and need clipping on sustained peak

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1186: FILE: drivers/staging/echo/echo.c:618:
+		   any saturation should not markedly affect the downstream processing. */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1226: FILE: drivers/staging/echo/echo.h:128:
+	int16_t tx, rx;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1246: FILE: drivers/staging/echo/fir.h:75:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1256: FILE: drivers/staging/echo/fir.h:87:
+typedef struct {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1266: FILE: drivers/staging/echo/fir.h:98:
+typedef struct {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1276: FILE: drivers/staging/echo/fir.h:105:
+static __inline__ const int16_t *fir16_create(fir16_state_t * fir,

WARNING:INLINE: plain inline is preferred over __inline__
#1276: FILE: drivers/staging/echo/fir.h:105:
+static __inline__ const int16_t *fir16_create(fir16_state_t * fir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1277: FILE: drivers/staging/echo/fir.h:106:
+					      const int16_t * coeffs, int taps)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's16' over 'int16_t'
#1277: FILE: drivers/staging/echo/fir.h:106:
+					      const int16_t * coeffs, int taps)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1292: FILE: drivers/staging/echo/fir.h:119:
+static __inline__ void fir16_flush(fir16_state_t * fir)

WARNING:INLINE: plain inline is preferred over __inline__
#1292: FILE: drivers/staging/echo/fir.h:119:
+static __inline__ void fir16_flush(fir16_state_t * fir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1304: FILE: drivers/staging/echo/fir.h:128:
+static __inline__ void fir16_free(fir16_state_t * fir)

WARNING:INLINE: plain inline is preferred over __inline__
#1304: FILE: drivers/staging/echo/fir.h:128:
+static __inline__ void fir16_free(fir16_state_t * fir)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1350: FILE: drivers/staging/echo/fir.h:151:
+		:"=&d"(dot)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1351: FILE: drivers/staging/echo/fir.h:152:
+		:"a"(x), "a"(y), "a"(len)
 		^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#1352: FILE: drivers/staging/echo/fir.h:153:
+		:"I0", "I1", "A1", "A0", "R0", "R1"
 		^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1360: FILE: drivers/staging/echo/fir.h:160:
+static __inline__ int16_t fir16(fir16_state_t * fir, int16_t sample)

WARNING:INLINE: plain inline is preferred over __inline__
#1360: FILE: drivers/staging/echo/fir.h:160:
+static __inline__ int16_t fir16(fir16_state_t * fir, int16_t sample)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1363: FILE: drivers/staging/echo/fir.h:162:
+	int32_t y;

CHECK:SPACING: No space is necessary after a cast
#1403: FILE: drivers/staging/echo/fir.h:171:
+	mmx_coeffs = (mmx_t *) fir->coeffs;

CHECK:SPACING: No space is necessary after a cast
#1404: FILE: drivers/staging/echo/fir.h:172:
+	mmx_hist = (mmx_t *) & fir->history[fir->curr_pos];

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1404: FILE: drivers/staging/echo/fir.h:172:
+	mmx_hist = (mmx_t *) & fir->history[fir->curr_pos];
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#1467: FILE: drivers/staging/echo/fir.h:202:
+	xmm_coeffs = (xmm_t *) fir->coeffs;

CHECK:SPACING: No space is necessary after a cast
#1468: FILE: drivers/staging/echo/fir.h:203:
+	xmm_hist = (xmm_t *) & fir->history[fir->curr_pos];

ERROR:SPACING: space prohibited after that '&' (ctx:WxW)
#1468: FILE: drivers/staging/echo/fir.h:203:
+	xmm_hist = (xmm_t *) & fir->history[fir->curr_pos];
 	                     ^

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: drivers/staging/echo/fir.h:230:
+	y = dot_asm((int16_t *) fir->coeffs, &fir->history[fir->curr_pos],

CHECK:SPACING: No space is necessary after a cast
#1535: FILE: drivers/staging/echo/fir.h:250:
+	return (int16_t) (y >> 15);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1541: FILE: drivers/staging/echo/fir.h:253:
+static __inline__ const int16_t *fir32_create(fir32_state_t * fir,

WARNING:INLINE: plain inline is preferred over __inline__
#1541: FILE: drivers/staging/echo/fir.h:253:
+static __inline__ const int16_t *fir32_create(fir32_state_t * fir,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1542: FILE: drivers/staging/echo/fir.h:254:
+					      const int32_t * coeffs, int taps)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1542: FILE: drivers/staging/echo/fir.h:254:
+					      const int32_t * coeffs, int taps)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1557: FILE: drivers/staging/echo/fir.h:263:
+static __inline__ void fir32_flush(fir32_state_t * fir)

WARNING:INLINE: plain inline is preferred over __inline__
#1557: FILE: drivers/staging/echo/fir.h:263:
+static __inline__ void fir32_flush(fir32_state_t * fir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1564: FILE: drivers/staging/echo/fir.h:268:
+static __inline__ void fir32_free(fir32_state_t * fir)

WARNING:INLINE: plain inline is preferred over __inline__
#1564: FILE: drivers/staging/echo/fir.h:268:
+static __inline__ void fir32_free(fir32_state_t * fir)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1571: FILE: drivers/staging/echo/fir.h:273:
+static __inline__ int16_t fir32(fir32_state_t * fir, int16_t sample)

WARNING:INLINE: plain inline is preferred over __inline__
#1571: FILE: drivers/staging/echo/fir.h:273:
+static __inline__ int16_t fir32(fir32_state_t * fir, int16_t sample)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#1591: FILE: drivers/staging/echo/fir.h:276:
+	int32_t y;

CHECK:SPACING: No space is necessary after a cast
#1606: FILE: drivers/staging/echo/fir.h:291:
+	return (int16_t) (y >> 15);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1629: FILE: drivers/staging/echo/mmx.h:30:
+typedef union {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213711.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 48 warnings, 50 checks, 1608 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213711.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
