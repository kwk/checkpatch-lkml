WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
 - Background write-out: memory.dirty_background_ratio, memory.dirty_background_bytes

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#76: FILE: include/linux/memcontrol.h:45:
+	MEMCG_NR_FILE_WRITEBACK_TEMP,	/* # of pages under writeback using
+					   temporary buffers */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#76: FILE: include/linux/memcontrol.h:45:
+					   temporary buffers */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#109: FILE: include/linux/memcontrol.h:163:
+extern bool mem_cgroup_has_dirty_limit(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/memcontrol.h:164:
+extern void get_vm_dirty_param(struct vm_dirty_param *param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/memcontrol.h:165:
+extern s64 mem_cgroup_page_stat(enum mem_cgroup_read_page_stat_item item);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/memcontrol.h:167:
+extern void mem_cgroup_update_page_stat(struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/linux/memcontrol.h:168:
+extern void mem_cgroup_update_page_stat(struct page *page,
+			enum mem_cgroup_write_page_stat_item idx, bool charge);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#117: FILE: include/linux/memcontrol.h:171:
+static inline void mem_cgroup_inc_page_stat(struct page *page,
+		enum mem_cgroup_write_page_stat_item idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#123: FILE: include/linux/memcontrol.h:177:
+static inline void mem_cgroup_dec_page_stat(struct page *page,
+		enum mem_cgroup_write_page_stat_item idx)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#152: FILE: include/linux/memcontrol.h:360:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: include/linux/memcontrol.h:364:
+static inline void mem_cgroup_inc_page_stat(struct page *page,
+			enum mem_cgroup_write_page_stat_item idx)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: include/linux/memcontrol.h:369:
+static inline void mem_cgroup_dec_page_stat(struct page *page,
+			enum mem_cgroup_write_page_stat_item idx)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#204: FILE: mm/memcontrol.c:95:
+	MEM_CGROUP_STAT_WRITEBACK_TEMP,   /* # of pages under writeback using
+						temporary buffers */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#204: FILE: mm/memcontrol.c:95:
+						temporary buffers */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: mm/memcontrol.c:1069:
+static void __mem_cgroup_get_dirty_param(struct vm_dirty_param *param,
+				struct mem_cgroup *mem)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#327: FILE: mm/memcontrol.c:1142:
+static s64 mem_cgroup_get_local_page_stat(struct mem_cgroup *memcg,
+				enum mem_cgroup_read_page_stat_item item)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: mm/memcontrol.c:1157:
+			mem_cgroup_read_stat(memcg,
+					MEM_CGROUP_STAT_UNSTABLE_NFS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/memcontrol.c:1165:
+			mem_cgroup_read_stat(memcg,
+				MEM_CGROUP_STAT_UNSTABLE_NFS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: mm/memcontrol.c:1168:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#406: FILE: mm/memcontrol.c:1221:
+	if (mem && !mem_cgroup_is_root(mem)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#420: FILE: mm/memcontrol.c:1235:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#440: FILE: mm/memcontrol.c:1554:
+static void __mem_cgroup_update_page_stat(struct page_cgroup *pc,
+				int idx, bool charge)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#541: FILE: mm/memcontrol.c:1655:
+void mem_cgroup_update_page_stat(struct page *page,
+			enum mem_cgroup_write_page_stat_item idx, bool charge)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: mm/memcontrol.c:1674:
+static void mem_cgroup_migrate_file_stat(struct page_cgroup *pc,
 	struct mem_cgroup *from, struct mem_cgroup *to)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#571: FILE: mm/memcontrol.c:1679:
+			__this_cpu_inc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#580: FILE: mm/memcontrol.c:1687:
+			__this_cpu_inc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#588: FILE: mm/memcontrol.c:1695:
+			__this_cpu_inc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#594: FILE: mm/memcontrol.c:1701:
+		__this_cpu_dec(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '['
#597: FILE: mm/memcontrol.c:1704:
+			__this_cpu_inc(to->stat->count[

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#605: FILE: mm/memcontrol.c:1712:
+			__this_cpu_inc(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#625: FILE: mm/memcontrol.c:1738:
+		__this_cpu_dec(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#721: FILE: mm/memcontrol.c:3934:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cgrp->parent"
#731: FILE: mm/memcontrol.c:3944:
+	if (cgrp->parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: mm/memcontrol.c:3947:
+	if ((type == MEM_CGROUP_DIRTY_RATIO ||
+		type == MEM_CGROUP_DIRTY_BACKGROUND_RATIO) && val > 100)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#758: FILE: mm/memcontrol.c:3971:
+		BUG();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 27 checks, 747 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000000185.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
