WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
  @SYM[+|-offs] : Fetch memory at SYM +|- offs (SYM should be a data symbol)

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#85: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'aliase' may be misspelled - perhaps 'aliases'?
#156: FILE: Documentation/trace/kprobetrace.txt:67:
+  You can write filtering rules of this event. And you can use both of aliase
                                                                        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: kernel/trace/trace_event_types.h:179:
+TRACE_EVENT_FORMAT(kprobe, TRACE_KPROBE, kprobe_trace_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#325: FILE: kernel/trace/trace_event_types.h:179:
+	TRACE_STRUCT(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: kernel/trace/trace_event_types.h:188:
+TRACE_EVENT_FORMAT(kretprobe, TRACE_KRETPROBE, kretprobe_trace_entry, ignore,
+	TRACE_STRUCT(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#334: FILE: kernel/trace/trace_event_types.h:188:
+	TRACE_STRUCT(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#349: FILE: kernel/trace/trace_kprobe.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#364: FILE: kernel/trace/trace_kprobe.c:16:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#365: FILE: kernel/trace/trace_kprobe.c:17:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#389: FILE: kernel/trace/trace_kprobe.c:41:
+	unsigned long (*func)(struct pt_regs *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#389: FILE: kernel/trace/trace_kprobe.c:41:
+	unsigned long (*func)(struct pt_regs *, void *);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sc)...) over kzalloc(sizeof(struct symbol_cache)...)
#465: FILE: kernel/trace/trace_kprobe.c:117:
+	sc = kzalloc(sizeof(struct symbol_cache), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#502: FILE: kernel/trace/trace_kprobe.c:154:
+	if (addr) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#505: FILE: kernel/trace/trace_kprobe.c:157:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#562: FILE: kernel/trace/trace_kprobe.c:214:
+	if (ff->func == fetch_argument)
[...]
+	else if (ff->func == fetch_register) {
[...]
+	} else if (ff->func == fetch_stack)
[...]
+	else if (ff->func == fetch_memory)
[...]
+	else if (ff->func == fetch_symbol) {
[...]
+	} else if (ff->func == fetch_retvalue)
[...]
+	else if (ff->func == fetch_ip)
[...]
+	else if (ff->func == fetch_indirect) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#566: FILE: kernel/trace/trace_kprobe.c:218:
+		const char *name;
+		name = regs_query_register_name((unsigned int)((long)ff->data));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#574: FILE: kernel/trace/trace_kprobe.c:226:
+		struct symbol_cache *sc = ff->data;
+		ret = snprintf(buf, n, "@%s%+ld", sc->symbol, sc->offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#582: FILE: kernel/trace/trace_kprobe.c:234:
+		size_t l = 0;
+		ret = snprintf(buf, n, "%+ld(", id->offset);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tp)...) over kzalloc(sizeof(struct trace_probe)...)
#610: FILE: kernel/trace/trace_kprobe.c:262:
+	tp = kzalloc(sizeof(struct trace_probe), GFP_KERNEL);

WARNING:SPLIT_STRING: quoted string split across lines
#692: FILE: kernel/trace/trace_kprobe.c:344:
+			pr_warning("Probing address(0x%p) is not an "
+				   "instruction boundary.\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'Faild' may be misspelled - perhaps 'Failed'?
#708: FILE: kernel/trace/trace_kprobe.c:360:
+			pr_warning("Faild to register probe event(%d)\n", ret);
 			            ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#731: FILE: kernel/trace/trace_kprobe.c:383:
+	if (tmp) {
[...]
+	} else
[...]

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#733: FILE: kernel/trace/trace_kprobe.c:385:
+		ret = strict_strtol(tmp + 1, 0, offset);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:BRACES: Unbalanced braces around else statement
#739: FILE: kernel/trace/trace_kprobe.c:391:
+	} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#756: FILE: kernel/trace/trace_kprobe.c:408:
+		ret = strict_strtoul(arg + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#757: FILE: kernel/trace/trace_kprobe.c:409:
+		if (ret || param > PARAM_MAX_ARGS)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#759: FILE: kernel/trace/trace_kprobe.c:411:
+		else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#765: FILE: kernel/trace/trace_kprobe.c:417:
+		if (is_return && arg[1] == 'v') {
[...]
+		} else if (is_return && arg[1] == 'a') {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#771: FILE: kernel/trace/trace_kprobe.c:423:
+		} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#783: FILE: kernel/trace/trace_kprobe.c:435:
+		ret = strict_strtoul(arg + 1, 10, &param);

CHECK:BRACES: braces {} should be used on all arms of this statement
#784: FILE: kernel/trace/trace_kprobe.c:436:
+		if (ret || param > PARAM_MAX_STACK)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#786: FILE: kernel/trace/trace_kprobe.c:438:
+		else {

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#793: FILE: kernel/trace/trace_kprobe.c:445:
+			ret = strict_strtoul(arg + 1, 0, &param);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: kernel/trace/trace_kprobe.c:455:
+			ff->data = alloc_symbol_cache(arg + 1,
+							      offset);

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#818: FILE: kernel/trace/trace_kprobe.c:470:
+		ret = strict_strtol(arg + 1, 0, &offset);

CHECK:BRACES: braces {} should be used on all arms of this statement
#825: FILE: kernel/trace/trace_kprobe.c:477:
+		if (tmp) {
[...]
+		} else
[...]

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*id)...) over kzalloc(sizeof(struct indirect_fetch_data)...)
#828: FILE: kernel/trace/trace_kprobe.c:480:
+			id = kzalloc(sizeof(struct indirect_fetch_data),

CHECK:BRACES: braces {} should be used on all arms of this statement
#834: FILE: kernel/trace/trace_kprobe.c:486:
+			if (ret)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#836: FILE: kernel/trace/trace_kprobe.c:488:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#840: FILE: kernel/trace/trace_kprobe.c:492:
+		} else

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#897: FILE: kernel/trace/trace_kprobe.c:549:
+		ret = strict_strtoul(&argv[0][2], 0, (unsigned long *)&addr);

CHECK:BRACES: braces {} should be used on all arms of this statement
#924: FILE: kernel/trace/trace_kprobe.c:576:
+	if (tp->symbol) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#927: FILE: kernel/trace/trace_kprobe.c:579:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#968: FILE: kernel/trace/trace_kprobe.c:620:
+
+

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1009: FILE: kernel/trace/trace_kprobe.c:661:
+	seq_printf(m, "\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1059: FILE: kernel/trace/trace_kprobe.c:711:
+	ret = done = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:SPLIT_STRING: quoted string split across lines
#1075: FILE: kernel/trace/trace_kprobe.c:727:
+			pr_warning("Line length is too long: "
+				   "Should be less than %d.", WRITE_BUFSIZE);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1237: FILE: kernel/trace/trace_kprobe.c:889:
+^I.type^I ^I= TRACE_KPROBE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1242: FILE: kernel/trace/trace_kprobe.c:894:
+^I.type^I ^I= TRACE_KRETPROBE,$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#1274: FILE: kernel/trace/trace_kprobe.c:926:
+#define DEFINE_FIELD(type, item, name, is_signed)			\
+	do {								\
+		ret = trace_define_field(event_call, #type, name,	\
+					 offsetof(typeof(field), item),	\
+					 sizeof(field.item), is_signed);\
+		if (ret)						\
+			return ret;					\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1274: FILE: kernel/trace/trace_kprobe.c:926:
+#define DEFINE_FIELD(type, item, name, is_signed)			\
+	do {								\
+		ret = trace_define_field(event_call, #type, name,	\
+					 offsetof(typeof(field), item),	\
+					 sizeof(field.item), is_signed);\
+		if (ret)						\
+			return ret;					\
+	} while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1299: FILE: kernel/trace/trace_kprobe.c:951:
+	DEFINE_FIELD(int, nargs, "nargs", 1);
+	for (i = 0; i < tp->nr_args; i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1329: FILE: kernel/trace/trace_kprobe.c:981:
+	DEFINE_FIELD(int, nargs, "nargs", 1);
+	for (i = 0; i < tp->nr_args; i++) {

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1378: FILE: kernel/trace/trace_kprobe.c:1030:
+#define SHOW_FIELD(type, item, name)					\
+	do {								\
+		ret = trace_seq_printf(s, "\tfield: " #type " %s;\t"	\
+				"offset:%u;tsize:%u;\n", name,		\
+				(unsigned int)offsetof(typeof(field), item),\
+				(unsigned int)sizeof(type));		\
+		if (!ret)						\
+			return 0;					\
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1391: FILE: kernel/trace/trace_kprobe.c:1043:
+	struct kprobe_trace_entry field __attribute__((unused));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#1412: FILE: kernel/trace/trace_kprobe.c:1064:
+	struct kretprobe_trace_entry field __attribute__((unused));

WARNING:TYPO_SPELLING: 'controling' may be misspelled - perhaps 'controlling'?
#1471: FILE: kernel/trace/trace_kprobe.c:1123:
+/* Make a debugfs interface for controling probe points */
                                 ^^^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#1498: FILE: kernel/trace/trace_kprobe.c:1150:
+		pr_warning("Could not create debugfs "
+			   "'kprobe_events' entry\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1503: FILE: kernel/trace/trace_kprobe.c:1155:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1515: FILE: kernel/trace/trace_kprobe.c:1167:
+	int (*target)(int, int, int, int, int, int);

WARNING:SPLIT_STRING: quoted string split across lines
#1522: FILE: kernel/trace/trace_kprobe.c:1174:
+	ret = command_trace_probe("p:testprobe kprobe_trace_selftest_target "
+				  "a1 a2 a3 a4 a5 a6");

WARNING:SPLIT_STRING: quoted string split across lines
#1527: FILE: kernel/trace/trace_kprobe.c:1179:
+	ret = command_trace_probe("r:testprobe2 kprobe_trace_selftest_target "
+				  "ra rv");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1535: FILE: kernel/trace/trace_kprobe.c:1187:
+	pr_cont("OK\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092841.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 38 warnings, 29 checks, 1424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092841.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
