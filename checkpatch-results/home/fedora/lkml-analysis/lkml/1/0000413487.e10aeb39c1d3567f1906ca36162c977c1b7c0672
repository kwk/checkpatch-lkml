CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#110: FILE: fs/dcache.c:1839:
+static inline int prepend(char **buffer, int *buflen, const char *str,
+					int namelen)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#112: FILE: fs/dcache.c:1841:
+	if ((*buflen -= namelen) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#124: FILE: fs/dcache.c:1853:
+char * dentry_path(struct dentry *dentry, char *buf, int buflen)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: fs/dcache.c:1855:
+	char * end = buf+buflen;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#126: FILE: fs/dcache.c:1855:
+	char * end = buf+buflen;
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#127: FILE: fs/dcache.c:1856:
+	char * retval;

CHECK:CAMELCASE: Avoid CamelCase: <Elong>
#133: FILE: fs/dcache.c:1862:
+			goto Elong;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#136: FILE: fs/dcache.c:1865:
+	retval = end-1;
 	            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#140: FILE: fs/dcache.c:1869:
+		struct dentry * parent;

WARNING:LINE_SPACING: Missing a blank line after declarations
#141: FILE: fs/dcache.c:1870:
+		struct dentry * parent;
+		if (IS_ROOT(dentry))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: fs/dcache.c:1877:
+		if (prepend(&end, &buflen, dentry->d_name.name,
+				dentry->d_name.len) ||

ERROR:CODE_INDENT: code indent should use tabs where possible
#149: FILE: fs/dcache.c:1878:
+^I            prepend(&end, &buflen, "/", 1))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: fs/namespace.c:396:
+		seq_printf(m, "%s:peer=%x ", "SHARED",
+				new_encode_dev((int)get_peer_same_ns(mnt)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#184: FILE: fs/namespace.c:399:
+			seq_printf(m, "%s:master=%x ", "SLAVE",
+				new_encode_dev((int)get_master_same_ns(mnt)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#188: FILE: fs/namespace.c:403:
+		seq_printf(m, "%s:master=%x ", "SLAVE",
+			new_encode_dev((int)get_master_same_ns(mnt)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#195: FILE: fs/namespace.c:410:
+	seq_printf(m, "mntid=%x fsid=%x:", new_encode_dev((int)mnt),
+				new_encode_dev((int)mnt->mnt_sb->s_dev));

WARNING:LINE_SPACING: Missing a blank line after declarations
#217: FILE: fs/seq_file.c:345:
+		char c = *p++;
+		if (!c) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#223: FILE: fs/seq_file.c:351:
+			break;
+		} else {

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#237: FILE: fs/seq_file.c:364:
*dentry,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#238: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: fs/seq_file.c:365:
+ ^I     char *esc)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: fs/seq_file.c:392:
+	char *p = NULL;
+	if (m->count < m->size) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#285: FILE: fs/seq_file.c:394:
+		char *s = m->buf + m->count;
+		p = dentry_path(dentry, s, m->size - m->count);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: fs/seq_file.c:408:
+EXPORT_SYMBOL(seq_dentry);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#312: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#312: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#312: FILE: include/linux/dcache.h:297:
+extern char * dentry_path(struct dentry *, char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#326: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#326: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#326: FILE: include/linux/seq_file.h:46:
+int seq_dentry(struct seq_file *, struct dentry *, char *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#343: FILE: fs/pnode.c:34:
+	struct vfsmount *m = mnt;
+	do {

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: fs/pnode.c:45:
+	struct vfsmount *tmp = m;
+	if (!m) return m;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#354: FILE: fs/pnode.c:45:
+	if (!m) return m;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#372: FILE: fs/pnode.h:37:
+struct vfsmount *get_master_same_ns(struct vfsmount *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#373: FILE: fs/pnode.h:38:
+struct vfsmount *get_peer_same_ns(struct vfsmount *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 18 warnings, 10 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000413487.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
