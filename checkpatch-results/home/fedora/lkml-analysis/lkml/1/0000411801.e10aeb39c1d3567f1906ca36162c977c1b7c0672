WARNING:TYPO_SPELLING: 'accessable' may be misspelled - perhaps 'accessible'?
#52: FILE: drivers/base/Kconfig:59:
+	analyze the reason for the failure. The traces are accessable from
 	                                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#72: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: drivers/base/dti.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#94: FILE: drivers/base/dti.c:18:
+extern void dti_remove_merged_views(struct dti_info *dti);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:CONST_STRUCT: struct file_operations should normally be const
#95: FILE: drivers/base/dti.c:19:
+struct file_operations level_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#101: FILE: drivers/base/dti.c:25:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#112: FILE: drivers/base/dti.c:36:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#139: FILE: drivers/base/dti.c:63:
+	if(!dti)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: drivers/base/dti.c:70:
+^I$

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#149: FILE: drivers/base/dti.c:73:
+	dti->level_ctrl = debugfs_create_file("level", 0,
+					      dti->trace->dir, dti,
+					      &level_fops);
Permission bits should use 4 digit octal permissions (like 0700 or 0444).
Avoid using any other base like decimal.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#153: FILE: drivers/base/dti.c:77:
+		printk("Couldn't create level control file\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#195: FILE: drivers/base/dti.c:119:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#242: FILE: drivers/base/dti.c:166:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: drivers/base/dti.c:199:
+^I$

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#283: FILE: drivers/base/dti.c:207:
+ *	@work: work struct that contains the the dti handle

ERROR:TRAILING_WHITESPACE: trailing whitespace
#314: FILE: drivers/base/dti.c:238:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#320: FILE: drivers/base/dti.c:244:
+^I^I$

ERROR:IN_ATOMIC: do not use in_atomic in drivers
#321: FILE: drivers/base/dti.c:245:
+	if (in_atomic() || irqs_disabled()) {

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#329: FILE: drivers/base/dti.c:253:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: drivers/base/dti.c:269:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#352: FILE: drivers/base/dti.c:276:
+^I$

CHECK:BRACES: braces {} should be used on all arms of this statement
#451: FILE: drivers/base/dti.c:375:
+	if (handle->info->trace->rchan)
[...]
+	else if (prio <= handle->info->level) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#480: FILE: drivers/base/dti.c:404:
+static int vprintk_normal(struct dti_info *dti, int prio, const char* fmt,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#521: FILE: drivers/base/dti.c:445:
+int __dti_printk(struct dti_info *dti, int prio, const char* fmt, ...)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#534: FILE: drivers/base/dti.c:458:
+static int vprintk_early(struct dti_handle *handle, int prio, const char* fmt,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#566: FILE: drivers/base/dti.c:490:
+			    const char* fmt, ...)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#584: FILE: drivers/base/dti.c:508:
+			int prio, const char* fmt, va_list args)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#603: FILE: drivers/base/dti.c:527:
+			 int prio, const char* fmt, va_list args)

CHECK:BRACES: braces {} should be used on all arms of this statement
#607: FILE: drivers/base/dti.c:531:
+	if (handle->info->trace->rchan)
[...]
+	else if (prio <= handle->info->level) {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#631: FILE: drivers/base/dti.c:555:
+		      const char* fmt, ...)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#637: FILE: drivers/base/dti.c:561:
+	rc = handle->printk(handle, prio, fmt, args);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#657: FILE: drivers/base/dti.c:581:
+		int prio, const void* buf, size_t len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#689: FILE: drivers/base/dti.c:613:
+			   int prio, const void* buf, size_t len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#720: FILE: drivers/base/dti.c:644:
+		       int prio, const void* buf, size_t len)

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#737: FILE: drivers/base/dti.c:661:
+			int prio, const void* buf, size_t len)

CHECK:BRACES: braces {} should be used on all arms of this statement
#741: FILE: drivers/base/dti.c:665:
+	if (handle->info->trace->rchan)
[...]
+	else if (prio <= handle->info->level) {
[...]

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#766: FILE: drivers/base/dti.c:690:
+		     int prio, const void* buf, size_t len)

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#774: FILE: drivers/base/dti.c:698:
+ *	@work: work struct that contains the the dti handle

ERROR:TRAILING_WHITESPACE: trailing whitespace
#810: FILE: drivers/base/dti.c:734:
+^I^I$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#833: FILE: drivers/base/dti.c:757:
+static int level_open(struct inode *inode, struct file *filp)
                                                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#839: FILE: drivers/base/dti.c:763:
+static ssize_t level_read(struct file *filp, char __user *buffer,
                                        ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#849: FILE: drivers/base/dti.c:773:
+static ssize_t level_write(struct file *filp, const char __user *buffer,
                                         ^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#866: FILE: drivers/base/dti.c:790:
+	if (strcmp(buf, DTI_LEVEL_DESTROY_STR) == 0)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#868: FILE: drivers/base/dti.c:792:
+	else {

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#869: FILE: drivers/base/dti.c:793:
+		new_level = simple_strtol(buf, &tmp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_level > DTI_LEVEL_MAX'
#872: FILE: drivers/base/dti.c:796:
+		if ((new_level > DTI_LEVEL_MAX) ||
+		    (new_level == DTI_LEVEL_DESTROY && !dti->handle) ||
+		    (new_level < DTI_LEVEL_DESTROY))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_level < DTI_LEVEL_DESTROY'
#872: FILE: drivers/base/dti.c:796:
+		if ((new_level > DTI_LEVEL_MAX) ||
+		    (new_level == DTI_LEVEL_DESTROY && !dti->handle) ||
+		    (new_level < DTI_LEVEL_DESTROY))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#877: FILE: drivers/base/dti.c:801:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#882: FILE: drivers/base/dti.c:806:
+^I^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#888: FILE: drivers/base/dti.c:812:
+struct file_operations level_fops = {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_level > DTI_LEVEL_MAX'
#901: FILE: drivers/base/dti.c:825:
+	if ((new_level > DTI_LEVEL_MAX) || (new_level < DTI_LEVEL_OFF))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_level < DTI_LEVEL_OFF'
#901: FILE: drivers/base/dti.c:825:
+	if ((new_level > DTI_LEVEL_MAX) || (new_level < DTI_LEVEL_OFF))

WARNING:SPLIT_STRING: quoted string split across lines
#910: FILE: drivers/base/dti.c:834:
+MODULE_AUTHOR("Tom Zanussi <zanussi@us.ibm.com>,"
+	      "Dave Wilder <wilder@us.ibm.com>,"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#911: FILE: drivers/base/dti.c:835:
+	      "Dave Wilder <wilder@us.ibm.com>,"
+	      "Michael Holzheu <holzheu@de.ibm.com>");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#919: FILE: drivers/base/dti_merged_view.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#933: FILE: drivers/base/dti_merged_view.c:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#934: FILE: drivers/base/dti_merged_view.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#955: FILE: drivers/base/dti_merged_view.c:37:
+        loff_t pos;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#955: FILE: drivers/base/dti_merged_view.c:37:
+        loff_t pos;$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#967: FILE: drivers/base/dti_merged_view.c:49:
+} __attribute__ ((packed));

WARNING:CONST_STRUCT: struct file_operations should normally be const
#969: FILE: drivers/base/dti_merged_view.c:51:
+struct file_operations dti_merged_view_fops;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#970: FILE: drivers/base/dti_merged_view.c:52:
+struct file_operations dti_merged_ts_view_fops;

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#979: FILE: drivers/base/dti_merged_view.c:61:
+	if (trace->merged_view)
+		debugfs_remove(trace->merged_view);

WARNING:NEEDLESS_IF: debugfs_remove(NULL) is safe and this check is probably not required
#983: FILE: drivers/base/dti_merged_view.c:65:
+	if (trace->merged_ts_view)
+		debugfs_remove(trace->merged_ts_view);

WARNING:TYPO_SPELLING: 'sucess' may be misspelled - perhaps 'success'?
#993: FILE: drivers/base/dti_merged_view.c:75:
+ * returns 0 on sucess.
                 ^^^^^^

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#999: FILE: drivers/base/dti_merged_view.c:81:
+	dti->merged_view = debugfs_create_file("merged", 0, parent, dti,
+					       &dti_merged_view_fops);
CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dti->merged_view"
#1002: FILE: drivers/base/dti_merged_view.c:84:
+	if (dti->merged_view == NULL ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1003: FILE: drivers/base/dti_merged_view.c:85:
+^I    dti->merged_view == (struct dentry *)-ENODEV) $

ERROR:NON_OCTAL_PERMISSIONS: Use 4 digit octal (0777) not decimal permissions
#1006: FILE: drivers/base/dti_merged_view.c:88:
+	dti->merged_ts_view = debugfs_create_file("merged-ts",
+						  0, parent, dti,
+						  &dti_merged_ts_view_fops);
CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!dti->merged_ts_view"
#1010: FILE: drivers/base/dti_merged_view.c:92:
+	if (dti->merged_ts_view == NULL ||

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1011: FILE: drivers/base/dti_merged_view.c:93:
+^I    dti->merged_ts_view == (struct dentry *)-ENODEV) $

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1021: FILE: drivers/base/dti_merged_view.c:103:
+static int dti_merged_view_open(struct inode *inode, struct file *filp)
                                                                   ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*view)...) over kzalloc(sizeof(struct dti_merged_view)...)
#1029: FILE: drivers/base/dti_merged_view.c:111:
+	view = kzalloc(sizeof(struct dti_merged_view), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1030: FILE: drivers/base/dti_merged_view.c:112:
+	if (!view )

ERROR:SPACING: space required before the open brace '{'
#1040: FILE: drivers/base/dti_merged_view.c:122:
+	for_each_online_cpu(i){

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1042: FILE: drivers/base/dti_merged_view.c:124:
+		if (!view->info[i].buf )

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1059: FILE: drivers/base/dti_merged_view.c:141:
+static int dti_merged_ts_view_open(struct inode *inode, struct file *filp)
                                                                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1064: FILE: drivers/base/dti_merged_view.c:146:
+	ret = dti_merged_view_open(inode, filp);
 	                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1073: FILE: drivers/base/dti_merged_view.c:155:
+static int dti_merged_view_close(struct inode *inode, struct file *filp)
                                                                    ^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1077: FILE: drivers/base/dti_merged_view.c:159:
+^I$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1079: FILE: drivers/base/dti_merged_view.c:161:
+                if (view->info[i].buf)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1079: FILE: drivers/base/dti_merged_view.c:161:
+                if (view->info[i].buf)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1081: FILE: drivers/base/dti_merged_view.c:163:
+        kfree(view);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: drivers/base/dti_merged_view.c:163:
+        kfree(view);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1088: FILE: drivers/base/dti_merged_view.c:170:
+        const struct dti_event *event1 = rec1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1088: FILE: drivers/base/dti_merged_view.c:170:
+        const struct dti_event *event1 = rec1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1089: FILE: drivers/base/dti_merged_view.c:171:
+        const struct dti_event *event2 = rec2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: drivers/base/dti_merged_view.c:171:
+        const struct dti_event *event2 = rec2;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1091: FILE: drivers/base/dti_merged_view.c:173:
+        if (event1->time < event2->time)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1091: FILE: drivers/base/dti_merged_view.c:173:
+        if (event1->time < event2->time)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1092: FILE: drivers/base/dti_merged_view.c:174:
+                return -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: drivers/base/dti_merged_view.c:174:
+                return -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1093: FILE: drivers/base/dti_merged_view.c:175:
+        else if (event1->time > event2->time)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: drivers/base/dti_merged_view.c:175:
+        else if (event1->time > event2->time)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1094: FILE: drivers/base/dti_merged_view.c:176:
+                return 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: drivers/base/dti_merged_view.c:176:
+                return 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1096: FILE: drivers/base/dti_merged_view.c:178:
+        return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: drivers/base/dti_merged_view.c:178:
+        return 0;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1103: FILE: drivers/base/dti_merged_view.c:185:
+^I$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1117: FILE: drivers/base/dti_merged_view.c:199:
+					  nanosec_rem/1000,
 					             ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1129: FILE: drivers/base/dti_merged_view.c:211:
+	if (bytes_left && bytes_left < sizeof(struct dti_event)) {
[...]
+	} else if (bytes_left && bytes_left < event->len)
[...]
+	else if (bytes_left)
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#1132: FILE: drivers/base/dti_merged_view.c:214:
+		void *header = view->info[cpu].buf + offset;
+		memcpy(view->info[cpu].buf, header, bytes_left);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1153: FILE: drivers/base/dti_merged_view.c:235:
+static void *next_smallest(int *smallest_cpu, struct dti_merged_view *view )

ERROR:CODE_INDENT: code indent should use tabs where possible
#1155: FILE: drivers/base/dti_merged_view.c:237:
+        int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1155: FILE: drivers/base/dti_merged_view.c:237:
+        int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1156: FILE: drivers/base/dti_merged_view.c:238:
+        void *next, *smallest = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1156: FILE: drivers/base/dti_merged_view.c:238:
+        void *next, *smallest = NULL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1162: FILE: drivers/base/dti_merged_view.c:244:
+                next = view->info[i].next_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1162: FILE: drivers/base/dti_merged_view.c:244:
+                next = view->info[i].next_event;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1163: FILE: drivers/base/dti_merged_view.c:245:
+                if (next) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1163: FILE: drivers/base/dti_merged_view.c:245:
+                if (next) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: drivers/base/dti_merged_view.c:246:
+                        if (!smallest) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: drivers/base/dti_merged_view.c:246:
+                        if (!smallest) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1165: FILE: drivers/base/dti_merged_view.c:247:
+                                smallest = next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1165: FILE: drivers/base/dti_merged_view.c:247:
+                                smallest = next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1166: FILE: drivers/base/dti_merged_view.c:248:
+                                *smallest_cpu = i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1166: FILE: drivers/base/dti_merged_view.c:248:
+                                *smallest_cpu = i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1167: FILE: drivers/base/dti_merged_view.c:249:
+                                continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1167: FILE: drivers/base/dti_merged_view.c:249:
+                                continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1168: FILE: drivers/base/dti_merged_view.c:250:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1168: FILE: drivers/base/dti_merged_view.c:250:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1169: FILE: drivers/base/dti_merged_view.c:251:
+                        if (compare_recs(next, smallest) < 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1169: FILE: drivers/base/dti_merged_view.c:251:
+                        if (compare_recs(next, smallest) < 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1170: FILE: drivers/base/dti_merged_view.c:252:
+                                smallest = next;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1170: FILE: drivers/base/dti_merged_view.c:252:
+                                smallest = next;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1171: FILE: drivers/base/dti_merged_view.c:253:
+                                *smallest_cpu = i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1171: FILE: drivers/base/dti_merged_view.c:253:
+                                *smallest_cpu = i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1172: FILE: drivers/base/dti_merged_view.c:254:
+                                continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1172: FILE: drivers/base/dti_merged_view.c:254:
+                                continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1173: FILE: drivers/base/dti_merged_view.c:255:
+                        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1173: FILE: drivers/base/dti_merged_view.c:255:
+                        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1174: FILE: drivers/base/dti_merged_view.c:256:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1174: FILE: drivers/base/dti_merged_view.c:256:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1175: FILE: drivers/base/dti_merged_view.c:257:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1175: FILE: drivers/base/dti_merged_view.c:257:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1177: FILE: drivers/base/dti_merged_view.c:259:
+        return smallest;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1177: FILE: drivers/base/dti_merged_view.c:259:
+        return smallest;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1180: FILE: drivers/base/dti_merged_view.c:262:
+static ssize_t dti_merged_view_read(struct file *filp, char __user *buffer,
                                                  ^^^^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1185: FILE: drivers/base/dti_merged_view.c:267:
+	int smallest_cpu=0;
 	                ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1195: FILE: drivers/base/dti_merged_view.c:277:
+^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1208: FILE: drivers/base/dti_merged_view.c:290:
+^Iif (header_bytes_left(view)) { $

ERROR:CODE_INDENT: code indent should use tabs where possible
#1213: FILE: drivers/base/dti_merged_view.c:295:
+                ^Ireturn -EFAULT;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1213: FILE: drivers/base/dti_merged_view.c:295:
+                ^Ireturn -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1213: FILE: drivers/base/dti_merged_view.c:295:
+                ^Ireturn -EFAULT;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1225: FILE: drivers/base/dti_merged_view.c:307:
+^I^Iif (copy_to_user(buffer, view->current_event, count)) $

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1237: FILE: drivers/base/dti_merged_view.c:319:
+struct file_operations dti_merged_view_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1244: FILE: drivers/base/dti_merged_view.c:326:
+struct file_operations dti_merged_ts_view_fops = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1257: FILE: include/linux/dti.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1314: FILE: include/linux/dti.h:58:
+	spinlock_t lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1317: FILE: include/linux/dti.h:61:
+        void *initbuf;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1317: FILE: include/linux/dti.h:61:
+        void *initbuf;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1319: FILE: include/linux/dti.h:63:
+        unsigned int initbuf_offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1319: FILE: include/linux/dti.h:63:
+        unsigned int initbuf_offset;$

WARNING:SPACING: Unnecessary space before function pointer arguments
#1323: FILE: include/linux/dti.h:67:
+	int (*printk) (struct dti_handle *handle,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1327: FILE: include/linux/dti.h:71:
+	int (*event) (struct dti_handle *handle,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1329: FILE: include/linux/dti.h:73:
+		      const void* buf,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1331: FILE: include/linux/dti.h:75:
+	void *(*reserve) (struct dti_handle *handle,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1343: FILE: include/linux/dti.h:87:
+}  __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#1348: FILE: include/linux/dti.h:92:
+}  __attribute__ ((packed));

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_handle' - possible side-effects?
#1354: FILE: include/linux/dti.h:98:
+#define DEFINE_DTI_KERNEL_HANDLE(_handle, _name, _size, _initlevel, _initbuf, _initbuf_size) \
+	struct dti_handle _handle = { 					\
+		.name = _name,						\
+		.printk = dti_printk_early_fn,				\
+		.event = dti_event_early_fn,				\
+		.reserve = dti_reserve_early_fn,			\
+		.size = _size,						\
+		.initlevel = _initlevel,				\
+		.lock = SPIN_LOCK_UNLOCKED,				\
+		.work = __DELAYED_WORK_INITIALIZER(_handle.work,	\
+			dti_register_work),				\
+                .initbuf = _initbuf,					\
+                .initbuf_size = _initbuf_size,				\
+                .initbuf_offset = 0,					\
+                .initbuf_pad = {0},					\
+                .initbuf_wrapped = 0,					\
+		.info = NULL,						\
+	};								\
+	static int _handle ## _dti_init(void)				\
+	{								\
+		INIT_DTI_HANDLE(_handle);				\
+		return 0;						\
+	}								\
+	postcore_initcall(_handle ## _dti_init)				\
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1355: FILE: include/linux/dti.h:99:
+^Istruct dti_handle _handle = { ^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1365: FILE: include/linux/dti.h:109:
+                .initbuf = _initbuf,^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1365: FILE: include/linux/dti.h:109:
+                .initbuf = _initbuf,^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1366: FILE: include/linux/dti.h:110:
+                .initbuf_size = _initbuf_size,^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1366: FILE: include/linux/dti.h:110:
+                .initbuf_size = _initbuf_size,^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1367: FILE: include/linux/dti.h:111:
+                .initbuf_offset = 0,^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1367: FILE: include/linux/dti.h:111:
+                .initbuf_offset = 0,^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1368: FILE: include/linux/dti.h:112:
+                .initbuf_pad = {0},^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1368: FILE: include/linux/dti.h:112:
+                .initbuf_pad = {0},^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1369: FILE: include/linux/dti.h:113:
+                .initbuf_wrapped = 0,^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1369: FILE: include/linux/dti.h:113:
+                .initbuf_wrapped = 0,^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_handle' - possible side-effects?
#1379: FILE: include/linux/dti.h:123:
+#define DEFINE_DTI_MODULE_HANDLE(_handle, _name, _size, _initlevel)	\
+	struct dti_handle _handle = { 					\
+		.name = _name,						\
+		.printk = dti_printk_normal_fn,				\
+		.event = dti_event_normal_fn,				\
+		.reserve = dti_reserve_normal_fn,			\
+		.size = _size,						\
+		.initlevel = _initlevel,				\
+		.lock = SPIN_LOCK_UNLOCKED,				\
+		.work = __DELAYED_WORK_INITIALIZER(_handle.work,	\
+			dti_register_work),				\
+		.info = NULL,						\
+	}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1380: FILE: include/linux/dti.h:124:
+^Istruct dti_handle _handle = { ^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_handle' - possible side-effects?
#1393: FILE: include/linux/dti.h:137:
+#define INIT_DTI_HANDLE(_handle)					\
+	do {								\
+		if(_handle.info)					\
+			break;						\
+		_handle.info = dti_register_level(_handle.name,	\
+					_handle.initlevel, &_handle);	\
+		if (!_handle.info)					\
+			return -ENOMEM;					\
+		_handle.printk = dti_printk_normal_fn;			\
+		_handle.event = dti_event_normal_fn;			\
+		_handle.reserve = dti_reserve_normal_fn;		\
+		if (_handle.initbuf)					\
+			dti_relog_initbuf(&_handle);			\
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1393: FILE: include/linux/dti.h:137:
+#define INIT_DTI_HANDLE(_handle)					\
+	do {								\
+		if(_handle.info)					\
+			break;						\
+		_handle.info = dti_register_level(_handle.name,	\
+					_handle.initlevel, &_handle);	\
+		if (!_handle.info)					\
+			return -ENOMEM;					\
+		_handle.printk = dti_printk_normal_fn;			\
+		_handle.event = dti_event_normal_fn;			\
+		_handle.reserve = dti_reserve_normal_fn;		\
+		if (_handle.initbuf)					\
+			dti_relog_initbuf(&_handle);			\
+	} while (0)

ERROR:SPACING: space required before the open parenthesis '('
#1395: FILE: include/linux/dti.h:139:
+		if(_handle.info)					\

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#1408: FILE: include/linux/dti.h:152:
+#define CLEANUP_DTI_HANDLE(_handle)					\
+	do {				 				\
+		dti_unregister(_handle.info);				\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1409: FILE: include/linux/dti.h:153:
+^Ido {^I^I^I^I ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_handle' - possible side-effects?
#1463: FILE: include/linux/dti.h:207:
+#define dti_assert(_handle, _expr)					\
+	do {				 				\
+		if (!(_expr) && _handle.info)				\
+			dti_set_level(_handle.info, DTI_LEVEL_OFF);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_handle' may be better as '(_handle)' to avoid precedence issues
#1463: FILE: include/linux/dti.h:207:
+#define dti_assert(_handle, _expr)					\
+	do {				 				\
+		if (!(_expr) && _handle.info)				\
+			dti_set_level(_handle.info, DTI_LEVEL_OFF);	\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1464: FILE: include/linux/dti.h:208:
+^Ido {^I^I^I^I ^I^I^I^I\$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1481: FILE: include/linux/dti.h:225:
+int __dti_printk(struct dti_info *trace, int prio, const char* fmt, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1482: FILE: include/linux/dti.h:226:
+int __dti_event(struct dti_info *trace, int prio, const void* buf, size_t len);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1491: FILE: include/linux/dti.h:235:
+}
+static inline struct dti_info *__dti_register(const char *name, int size,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1496: FILE: include/linux/dti.h:240:
+}
+static inline void dti_unregister(struct dti_info *trace) {}

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1498: FILE: include/linux/dti.h:242:
+			       const char* fmt, ...) { return 0; }

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1500: FILE: include/linux/dti.h:244:
+			      const void* buf, size_t len) { return 0; }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1505: FILE: include/linux/dti.h:249:
+}
+static inline void dti_set_level(struct dti_info *trace, int new_level) {}

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_info' - possible side-effects?
#1516: FILE: include/linux/dti.h:260:
+#define __dti_assert(_info, _expr)					\
+	do {				 				\
+		if (!(_expr) && _info)					\
+			dti_set_level(_info, DTI_LEVEL_OFF);		\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_info' may be better as '(_info)' to avoid precedence issues
#1516: FILE: include/linux/dti.h:260:
+#define __dti_assert(_info, _expr)					\
+	do {				 				\
+		if (!(_expr) && _info)					\
+			dti_set_level(_info, DTI_LEVEL_OFF);		\
+	} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1517: FILE: include/linux/dti.h:261:
+^Ido {^I^I^I^I ^I^I^I^I\$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1532: FILE: include/linux/dti.h:276:
+int dti_printk_handle(struct dti_handle *handle,int prio,
                                                ^

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1533: FILE: include/linux/dti.h:277:
+		      const char* fmt, ...);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1534: FILE: include/linux/dti.h:278:
+int dti_printk_early_fn(struct dti_handle *handle, int prio, const char* fmt,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1536: FILE: include/linux/dti.h:280:
+int dti_printk_normal_fn(struct dti_handle *handle, int prio, const char* fmt,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1538: FILE: include/linux/dti.h:282:
+int dti_event_handle(struct dti_handle *handle, int prio, const void* buf,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1540: FILE: include/linux/dti.h:284:
+int dti_event_early_fn(struct dti_handle *handle, int prio, const void* buf,

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1542: FILE: include/linux/dti.h:286:
+int dti_event_normal_fn(struct dti_handle *handle, int prio, const void* buf,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411801.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 93 errors, 80 warnings, 25 checks, 1485 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411801.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
