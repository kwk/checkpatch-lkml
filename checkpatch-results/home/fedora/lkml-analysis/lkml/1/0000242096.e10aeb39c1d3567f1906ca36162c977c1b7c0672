CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#64: FILE: drivers/ide/ide-atapi.c:66:
+int ide_io_buffers(ide_drive_t *drive, struct ide_atapi_pc *pc,
+		    unsigned int bcount, int write)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#96: FILE: drivers/ide/ide-atapi.c:98:
+			pc->sg = sg = sg_next(sg);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#102: FILE: drivers/ide/ide-atapi.c:104:
+		printk(KERN_ERR "%s: %d leftover bytes, %s\n", drive->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: drivers/ide/ide-atapi.c:105:
+		printk(KERN_ERR "%s: %d leftover bytes, %s\n", drive->name,
+			bcount, write ? "padding with zeros"

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#118: FILE: drivers/ide/ide-atapi.c:119:
+	int (*io_buffers)(ide_drive_t *, struct ide_atapi_pc *, unsigned, int))

CHECK:BRACES: Unbalanced braces around else statement
#136: FILE: drivers/ide/ide-atapi.c:279:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: drivers/ide/ide-tape.c:697:
+static int ide_tape_io_buffers(ide_drive_t *drive, struct ide_atapi_pc *pc,
 				unsigned int bcount, int write)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ide_drive_t *' should also have an identifier name
#298: FILE: include/linux/ide.h:1100:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ide_atapi_pc *' should also have an identifier name
#298: FILE: include/linux/ide.h:1100:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#298: FILE: include/linux/ide.h:1100:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#298: FILE: include/linux/ide.h:1100:
+int ide_io_buffers(ide_drive_t *, struct ide_atapi_pc *, unsigned int, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#309: FILE: include/linux/ide.h:1119:
+	int (*io_buffers)(ide_drive_t *, struct ide_atapi_pc *, unsigned int,
 			   int));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000242096.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 6 checks, 229 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000242096.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
