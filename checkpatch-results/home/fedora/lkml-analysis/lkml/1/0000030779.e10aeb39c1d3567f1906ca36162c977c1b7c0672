WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#51: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: include/linux/padata.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#72: FILE: include/linux/padata.h:17:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#73: FILE: include/linux/padata.h:18:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#95: FILE: include/linux/padata.h:40:
+	spinlock_t              lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#117: FILE: include/linux/padata.h:62:
+	spinlock_t              lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#125: FILE: include/linux/padata.h:70:
+	struct mutex		lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/padata.h:76:
+extern struct padata_instance *padata_alloc(const struct cpumask *cpumask,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#133: FILE: include/linux/padata.h:78:
+extern void padata_free(struct padata_instance *pinst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/padata.h:79:
+extern int padata_do_parallel(struct padata_instance *pinst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#136: FILE: include/linux/padata.h:81:
+extern void padata_do_serial(struct padata_priv *padata);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/padata.h:82:
+extern int padata_set_cpumask(struct padata_instance *pinst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/padata.h:84:
+extern int padata_add_cpu(struct padata_instance *pinst, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#140: FILE: include/linux/padata.h:85:
+extern int padata_remove_cpu(struct padata_instance *pinst, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/padata.h:86:
+extern void padata_start(struct padata_instance *pinst);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#142: FILE: include/linux/padata.h:87:
+extern void padata_stop(struct padata_instance *pinst);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: kernel/padata.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#191: FILE: kernel/padata.c:17:
+ * this program; if not, write to the Free Software Foundation, Inc.,$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#192: FILE: kernel/padata.c:18:
+ * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#204: FILE: kernel/padata.c:30:
+#define MAX_SEQ_NR INT_MAX - NR_CPUS

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#205: FILE: kernel/padata.c:31:
+#define MAX_OBJ_NUM 10000 * NR_CPUS

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: kernel/padata.c:191:
+			BUG_ON(calc_seq_nr != seq_nr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#372: FILE: kernel/padata.c:198:
+		if (next_nr < 0 || seq_nr < next_nr
+		    || (next_overrun && !overrun)) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pd)...) over kzalloc(sizeof(struct parallel_data)...)
#523: FILE: kernel/padata.c:349:
+	pd = kzalloc(sizeof(struct parallel_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#539: FILE: kernel/padata.c:365:
+		if (cpumask_test_cpu(cpu, cpumask)
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#540: FILE: kernel/padata.c:366:
+		if (cpumask_test_cpu(cpu, cpumask)
+		    && cpumask_test_cpu(cpu, cpu_active_mask)) {

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: kernel/padata.c:369:
+		} else

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#598: FILE: kernel/padata.c:424:
+		yield();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: kernel/padata.c:440:
+int padata_set_cpumask(struct padata_instance *pinst,
+			cpumask_var_t cpumask)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pinst)...) over kzalloc(sizeof(struct padata_instance)...)
#811: FILE: kernel/padata.c:637:
+	pinst = kzalloc(sizeof(struct padata_instance), GFP_KERNEL);

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#858: FILE: kernel/padata.c:684:
+		yield();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 6 warnings, 19 checks, 793 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030779.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
