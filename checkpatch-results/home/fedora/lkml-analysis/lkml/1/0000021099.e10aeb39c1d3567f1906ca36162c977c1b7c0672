WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#60: FILE: tools/perf/util/parse-events.c:67:
+static unsigned int ^Iextended_event_count;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#61: FILE: tools/perf/util/parse-events.c:68:
+static int ^I^I^Iextended_events_initialized;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#70: FILE: tools/perf/util/parse-events.c:251:
+static unsigned count_lines(const char *str, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#70: FILE: tools/perf/util/parse-events.c:251:
+static unsigned count_lines(const char *str, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#72: FILE: tools/perf/util/parse-events.c:253:
+	unsigned count = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#81: FILE: tools/perf/util/parse-events.c:262:
+/* returns the number of lines read;
+   on fail the return is negative and no memory is allocated

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#84: FILE: tools/perf/util/parse-events.c:265:
+   *size bytes are used for file contents
+ */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#85: FILE: tools/perf/util/parse-events.c:266:
+static int read_file(int fd, char **buf, unsigned *size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#87: FILE: tools/perf/util/parse-events.c:268:
+	unsigned bytes = BYTES_PER_CHUNK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#94: FILE: tools/perf/util/parse-events.c:275:
+		int ret = read(fd, ptr + *size, bytes - *size);
+		if (ret < 0) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#95: FILE: tools/perf/util/parse-events.c:276:
+			if (EINTR == errno)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:BRACES: braces {} should be used on all arms of this statement
#95: FILE: tools/perf/util/parse-events.c:276:
+			if (EINTR == errno)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#97: FILE: tools/perf/util/parse-events.c:278:
+			else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: tools/perf/util/parse-events.c:292:
+			char *tmp = realloc(ptr, bytes <<= 1);
+			if (!tmp) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#124: FILE: tools/perf/util/parse-events.c:305:
+static int parse_extevent_file(struct event_symbol *symbols,
+			unsigned lines, char *buf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#124: FILE: tools/perf/util/parse-events.c:305:
+			unsigned lines, char *buf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: tools/perf/util/parse-events.c:308:
+	unsigned offset = 0, count = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: tools/perf/util/parse-events.c:315:
+		items = sscanf(buf + offset + 2, "%llx",
+				&symbols[count].config);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#135: FILE: tools/perf/util/parse-events.c:316:
+		if (1 != items)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#141: FILE: tools/perf/util/parse-events.c:322:
+		name = description = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: tools/perf/util/parse-events.c:332:
+		items = sscanf(ptr, "%lld-%lld\t%n", &discard, &discard,
+			 &eaten);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#152: FILE: tools/perf/util/parse-events.c:333:
+		if (2 != items)

CHECK:BRACES: braces {} should be used on all arms of this statement
#157: FILE: tools/perf/util/parse-events.c:338:
+		if (end) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#160: FILE: tools/perf/util/parse-events.c:341:
+		} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#182: FILE: tools/perf/util/parse-events.c:363:
+	unsigned size = 0;

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#192: FILE: tools/perf/util/parse-events.c:373:
+	if (0 < lines) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#195: FILE: tools/perf/util/parse-events.c:376:
+		if (symbols) {
[...]
+		} else
[...]

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#198: FILE: tools/perf/util/parse-events.c:379:
+			if (0 < parsed_symbols) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#198: FILE: tools/perf/util/parse-events.c:379:
+			if (0 < parsed_symbols) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#201: FILE: tools/perf/util/parse-events.c:382:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: tools/perf/util/parse-events.c:384:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: tools/perf/util/parse-events.c:395:
+	unsigned int i;
+	for (i = 0; i < extended_event_count; ++i)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: tools/perf/util/parse-events.c:1125:
+    if (!extended_events_initialized)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#330: FILE: tools/perf/util/parse-events.c:1125:
+    if (!extended_events_initialized)
+		extended_events_initialized =

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: tools/perf/util/parse-events.c:1129:
+    if (0 < extended_events_initialized) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 16)
#334: FILE: tools/perf/util/parse-events.c:1129:
+    if (0 < extended_events_initialized) {
+		for (i = 0; i < extended_event_count; ++i)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#334: FILE: tools/perf/util/parse-events.c:1129:
+    if (0 < extended_events_initialized) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: tools/perf/util/parse-events.c:1132:
+			printf("  %-42s [%s]\n",
+				extended_event_symbols[i].symbol,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#341: FILE: tools/perf/util/parse-events.c:1136:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 14 checks, 292 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000021099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
