WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#103: 
      NFS: Clean-up: use correct type when converting NFS blocks to local blocks

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#142: 
      NFS: Don't mark a written page as uptodate until it is on disk
                                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nlm_lookup_host', this function's name, in a string
#256: FILE: fs/lockd/host.c:56:
+	dprintk("lockd: nlm_lookup_host("NIPQUAD_FMT"->"NIPQUAD_FMT

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#256: FILE: fs/lockd/host.c:56:
+	dprintk("lockd: nlm_lookup_host("NIPQUAD_FMT"->"NIPQUAD_FMT

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "clnt"
#293: FILE: fs/lockd/host.c:169:
+	if (clnt != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'nlm_bind_host', this function's name, in a string
#330: FILE: fs/lockd/host.c:210:
+	dprintk("lockd: nlm_bind_host("NIPQUAD_FMT"->"NIPQUAD_FMT")\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#330: FILE: fs/lockd/host.c:210:
+	dprintk("lockd: nlm_bind_host("NIPQUAD_FMT"->"NIPQUAD_FMT")\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/lockd/host.c:211:
+	dprintk("lockd: nlm_bind_host("NIPQUAD_FMT"->"NIPQUAD_FMT")\n",
+			NIPQUAD(host->h_saddr.sin_addr),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#460: FILE: fs/nfs/client.c:156:
+	BUG_ON(!RB_EMPTY_ROOT(&clp->cl_state_owners));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcu_dereference"
#532: FILE: fs/nfs/delegation.c:139:
+	if (rcu_dereference(nfsi->delegation) == NULL) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#597: FILE: fs/nfs/delegation.c:201:
+static struct nfs_delegation *nfs_detach_delegation_locked(struct nfs_inode *nfsi, const nfs4_stateid *stateid)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!delegation"
#601: FILE: fs/nfs/delegation.c:205:
+	if (delegation == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "stateid"
#603: FILE: fs/nfs/delegation.c:207:
+	if (stateid != NULL && memcmp(delegation->stateid.data, stateid->data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: fs/nfs/delegation.c:208:
+	if (stateid != NULL && memcmp(delegation->stateid.data, stateid->data,
+				sizeof(delegation->stateid.data)) != 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcu_dereference"
#621: FILE: fs/nfs/delegation.c:225:
+	if (rcu_dereference(nfsi->delegation) != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#625: FILE: fs/nfs/delegation.c:229:
+		if (delegation != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#650: FILE: fs/nfs/delegation.c:258:
+		if (delegation != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#707: FILE: fs/nfs/delegation.c:333:
+		if (delegation != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#729: FILE: fs/nfs/delegation.c:365:
+	if (delegation != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#802: FILE: fs/nfs/delegation.c:450:
+		if (delegation != NULL)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#856: FILE: fs/nfs/delegation.h:43:
+int nfs4_open_delegation_recall(struct nfs_open_context *ctx, struct nfs4_state *state, const nfs4_stateid *stateid);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#872: FILE: fs/nfs/delegation.h:55:
+	if (delegation != NULL && (delegation->type & flags) == flags)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1097: FILE: fs/nfs/inode.c:490:
+		struct inode *inode = ctx->path.dentry->d_inode;
+		spin_lock(&inode->i_lock);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx->state"
#1101: FILE: fs/nfs/inode.c:494:
+	if (ctx->state != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ctx->cred"
#1103: FILE: fs/nfs/inode.c:496:
+	if (ctx->cred != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1133: FILE: fs/nfs/inode.c:1076:
+	if (!nfs_have_delegation(inode, FMODE_READ) ||
+			(nfsi->cache_validity & NFS_INO_REVAL_FORCED))

WARNING:TYPO_SPELLING: 'thie' may be misspelled - perhaps 'the'?
#1247: FILE: fs/nfs/mount_clnt.c:36:
+ * @protocol: transport protocol to use for thie request
                                             ^^^^

CHECK:SPACING: No space is necessary after a cast
#1392: FILE: fs/nfs/mount_clnt.c:152:
+		.p_encode	= (kxdrproc_t) xdr_encode_dirpath,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#1393: FILE: fs/nfs/mount_clnt.c:153:
+		.p_decode	= (kxdrproc_t) xdr_decode_fhstatus,

CHECK:SPACING: No space is necessary after a cast
#1412: FILE: fs/nfs/mount_clnt.c:164:
+		.p_encode	= (kxdrproc_t) xdr_encode_dirpath,

CHECK:SPACING: No space is necessary after a cast
#1413: FILE: fs/nfs/mount_clnt.c:165:
+		.p_decode	= (kxdrproc_t) xdr_decode_fhstatus3,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1574: FILE: fs/nfs/nfs4_fs.h:91:
+	spinlock_t	     so_lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1624: FILE: fs/nfs/nfs4_fs.h:181:
+extern int nfs4_do_close(struct path *path, struct nfs4_state *state);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1640: FILE: fs/nfs/nfs4_fs.h:211:
+extern void nfs4_close_state(struct path *, struct nfs4_state *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct path *' should also have an identifier name
#1640: FILE: fs/nfs/nfs4_fs.h:211:
+extern void nfs4_close_state(struct path *, struct nfs4_state *, mode_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs4_state *' should also have an identifier name
#1640: FILE: fs/nfs/nfs4_fs.h:211:
+extern void nfs4_close_state(struct path *, struct nfs4_state *, mode_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mode_t' should also have an identifier name
#1640: FILE: fs/nfs/nfs4_fs.h:211:
+extern void nfs4_close_state(struct path *, struct nfs4_state *, mode_t);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1690: FILE: fs/nfs/nfs4proc.c:236:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1701: FILE: fs/nfs/nfs4proc.c:247:
+static struct nfs4_opendata *nfs4_opendata_alloc(struct path *path,
 		struct nfs4_state_owner *sp, int flags,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p->state"
#1765: FILE: fs/nfs/nfs4proc.c:301:
+	if (p->state != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#1785: FILE: fs/nfs/nfs4proc.c:312:
+	if (p != NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1798: FILE: fs/nfs/nfs4proc.c:330:
+	int ret = 0;
+	switch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1798: FILE: fs/nfs/nfs4proc.c:330:
+	switch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {
+		case FMODE_READ:
[...]
+		case FMODE_WRITE:
[...]
+		case FMODE_READ|FMODE_WRITE:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1798: FILE: fs/nfs/nfs4proc.c:330:
+	switch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1798: FILE: fs/nfs/nfs4proc.c:330:
+	switch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1807: FILE: fs/nfs/nfs4proc.c:339:
+		case FMODE_READ|FMODE_WRITE:
 		               ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#1834: FILE: fs/nfs/nfs4proc.c:369:
+static void nfs_set_open_stateid_locked(struct nfs4_state *state, nfs4_stateid *stateid, int open_flags)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1840: FILE: fs/nfs/nfs4proc.c:374:
+	switch (open_flags) {
+		case FMODE_READ:
[...]
+		case FMODE_WRITE:
[...]
+		case FMODE_READ|FMODE_WRITE:

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1847: FILE: fs/nfs/nfs4proc.c:381:
+		case FMODE_READ|FMODE_WRITE:
 		               ^

WARNING:LONG_LINE: line length of 130 exceeds 100 columns
#1859: FILE: fs/nfs/nfs4proc.c:393:
+static void update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *deleg_stateid, int open_flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "deleg_stateid"
#1868: FILE: fs/nfs/nfs4proc.c:401:
+	if (deleg_stateid != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "open_stateid"
#1872: FILE: fs/nfs/nfs4proc.c:405:
+	if (open_stateid != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!delegation"
#1890: FILE: fs/nfs/nfs4proc.c:419:
+	if (delegation == NULL || (delegation->type & open_flags) == open_flags) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1903: FILE: fs/nfs/nfs4proc.c:432:
+	int open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1903: FILE: fs/nfs/nfs4proc.c:432:
+	int open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL);
 	                                                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!delegation"
#1920: FILE: fs/nfs/nfs4proc.c:449:
+		if (delegation == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!delegation"
#1936: FILE: fs/nfs/nfs4proc.c:465:
+		if (delegation == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1992: FILE: fs/nfs/nfs4proc.c:516:
+			nfs_inode_set_delegation(state->inode,
+					data->owner->so_cred,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1996: FILE: fs/nfs/nfs4proc.c:520:
+			nfs_inode_reclaim_delegation(state->inode,
+					data->owner->so_cred,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#2001: FILE: fs/nfs/nfs4proc.c:525:
+	if (delegation != NULL)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#2009: FILE: fs/nfs/nfs4proc.c:533:
+	iput(inode);
 	^^^^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#2020: FILE: fs/nfs/nfs4proc.c:555:
+static int nfs4_open_recover_helper(struct nfs4_opendata *opendata, mode_t openflags, struct nfs4_state **res)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2055: FILE: fs/nfs/nfs4proc.c:584:
+		ret = nfs4_open_recover_helper(opendata, FMODE_READ|FMODE_WRITE, &newstate);
 		                                                   ^

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2114: FILE: fs/nfs/nfs4proc.c:609:
+	    memcmp(state->stateid.data, state->open_stateid.data, sizeof(state->stateid.data)) != 0) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2117: FILE: fs/nfs/nfs4proc.c:612:
+			memcpy(state->stateid.data, state->open_stateid.data, sizeof(state->stateid.data));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#2156: FILE: fs/nfs/nfs4proc.c:637:
+	if (delegation != NULL && (delegation->flags & NFS_DELEGATION_NEED_RECLAIM) != 0)

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#2189: FILE: fs/nfs/nfs4proc.c:673:
+static int _nfs4_open_delegation_recall(struct nfs_open_context *ctx, struct nfs4_state *state, const nfs4_stateid *stateid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2204: FILE: fs/nfs/nfs4proc.c:684:
+	memcpy(opendata->o_arg.u.delegation.data, stateid->data,
 			sizeof(opendata->o_arg.u.delegation.data));

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#2212: FILE: fs/nfs/nfs4proc.c:690:
+int nfs4_open_delegation_recall(struct nfs_open_context *ctx, struct nfs4_state *state, const nfs4_stateid *stateid)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "data->state"
#2279: FILE: fs/nfs/nfs4proc.c:809:
+	if (data->state != NULL) {

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#2282: FILE: fs/nfs/nfs4proc.c:812:
+		if (can_open_cached(data->state, data->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)))

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2282: FILE: fs/nfs/nfs4proc.c:812:
+		if (can_open_cached(data->state, data->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)))
 		                                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2282: FILE: fs/nfs/nfs4proc.c:812:
+		if (can_open_cached(data->state, data->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)))
 		                                                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "delegation"
#2286: FILE: fs/nfs/nfs4proc.c:816:
+		if (delegation != NULL &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2287: FILE: fs/nfs/nfs4proc.c:817:
+		if (delegation != NULL &&
+		   (delegation->flags & NFS_DELEGATION_NEED_RECLAIM) == 0) {

WARNING:LONG_LINE: line length of 142 exceeds 100 columns
#2546: FILE: fs/nfs/nfs4proc.c:1051:
+static int _nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred, struct nfs4_state **res)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path->dentry->d_inode"
#2562: FILE: fs/nfs/nfs4proc.c:1069:
+	if (path->dentry->d_inode != NULL)

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#2563: FILE: fs/nfs/nfs4proc.c:1070:
+		nfs4_return_incompatible_delegation(path->dentry->d_inode, flags & (FMODE_READ|FMODE_WRITE));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2563: FILE: fs/nfs/nfs4proc.c:1070:
+		nfs4_return_incompatible_delegation(path->dentry->d_inode, flags & (FMODE_READ|FMODE_WRITE));
 		                                                                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "path->dentry->d_inode"
#2571: FILE: fs/nfs/nfs4proc.c:1077:
+	if (path->dentry->d_inode != NULL)

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#2609: FILE: fs/nfs/nfs4proc.c:1108:
+static struct nfs4_state *nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2626: FILE: fs/nfs/nfs4proc.c:1130:
+			printk(KERN_WARNING "NFS: v4 server %s "

WARNING:SPLIT_STRING: quoted string split across lines
#2627: FILE: fs/nfs/nfs4proc.c:1131:
+			printk(KERN_WARNING "NFS: v4 server %s "
+					" returned a bad sequence-id error!\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2667: FILE: fs/nfs/nfs4proc.c:1246:
+			nfs_set_open_stateid(state, &calldata->res.stateid, calldata->arg.open_flags);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2685: FILE: fs/nfs/nfs4proc.c:1277:
+	mode = FMODE_READ|FMODE_WRITE;
 	                 ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2686: FILE: fs/nfs/nfs4proc.c:1278:
+	clear_rd = clear_wr = clear_rdwr = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2766: FILE: fs/nfs/nfs4proc.c:1362:
+static int nfs4_intent_set_file(struct nameidata *nd, struct path *path, struct nfs4_state *state)
                                                   ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2775: FILE: fs/nfs/nfs4proc.c:1370:
+		ret = _nfs4_do_access(state->inode,
+				state->owner->so_cred,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2780: FILE: fs/nfs/nfs4proc.c:1375:
+	filp = lookup_instantiate_filp(nd, path->dentry, NULL);
 	^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2780: FILE: fs/nfs/nfs4proc.c:1375:
+	filp = lookup_instantiate_filp(nd, path->dentry, NULL);
 	                               ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2789: FILE: fs/nfs/nfs4proc.c:1382:
+	ret = PTR_ERR(filp);
 	              ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2819: FILE: fs/nfs/nfs4proc.c:1423:
+	nfs4_intent_set_file(nd, &path, state);
 	                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2848: FILE: fs/nfs/nfs4proc.c:1456:
+		nfs4_intent_set_file(nd, &path, state);
 		                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2943: FILE: fs/nfs/nfs4proc.c:1901:
+		status = nfs4_intent_set_file(nd, &path, state);
 		                              ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#3040: FILE: fs/nfs/nfs4state.c:80:
+	for (pos = rb_first(&clp->cl_state_owners); pos != NULL; pos = rb_next(pos)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#3055: FILE: fs/nfs/nfs4state.c:96:
+	if (pos != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3063: FILE: fs/nfs/nfs4state.c:104:
+static void nfs_alloc_unique_id(struct rb_root *root, struct nfs_unique_id *new,
+		__u64 minval, int maxbits)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3081: FILE: fs/nfs/nfs4state.c:122:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#3103: FILE: fs/nfs/nfs4state.c:144:
+		if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3128: FILE: fs/nfs/nfs4state.c:166:
+	while (*p != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3145: FILE: fs/nfs/nfs4state.c:178:
+		if (cred < sp->so_cred)
[...]
+		else if (cred > sp->so_cred)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#3149: FILE: fs/nfs/nfs4state.c:182:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#3165: FILE: fs/nfs/nfs4state.c:198:
+	while (*p != NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3177: FILE: fs/nfs/nfs4state.c:210:
+		if (new->so_cred < sp->so_cred)
[...]
+		else if (new->so_cred > sp->so_cred)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3181: FILE: fs/nfs/nfs4state.c:214:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!new"
#3248: FILE: fs/nfs/nfs4state.c:285:
+	if (new == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3333: FILE: fs/nfs/nfs4state.c:450:
+	newstate = FMODE_READ|FMODE_WRITE;
 	                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3362: FILE: fs/nfs/nfs4state.c:468:
+	if (!call_close) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3365: FILE: fs/nfs/nfs4state.c:471:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "new"
#3399: FILE: fs/nfs/nfs4state.c:554:
+	if (new != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#3440: FILE: fs/nfs/nfs4state.c:674:
+			printk(KERN_WARNING "NFS: v4 server returned a bad"

WARNING:SPLIT_STRING: quoted string split across lines
#3441: FILE: fs/nfs/nfs4state.c:675:
+			printk(KERN_WARNING "NFS: v4 server returned a bad"
+					"sequence-id error on an"

WARNING:MISSING_SPACE: break quoted strings at a space character
#3441: FILE: fs/nfs/nfs4state.c:675:
+			printk(KERN_WARNING "NFS: v4 server returned a bad"
+					"sequence-id error on an"

WARNING:SPLIT_STRING: quoted string split across lines
#3442: FILE: fs/nfs/nfs4state.c:676:
+					"sequence-id error on an"
+					"unconfirmed sequence %p!\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#3442: FILE: fs/nfs/nfs4state.c:676:
+					"sequence-id error on an"
+					"unconfirmed sequence %p!\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#3475: FILE: fs/nfs/nfs4state.c:868:
+	for (pos = rb_first(&clp->cl_state_owners); pos != NULL; pos = rb_next(pos)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pos"
#3501: FILE: fs/nfs/nfs4state.c:938:
+	for (pos = rb_first(&clp->cl_state_owners); pos != NULL; pos = rb_next(pos)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3685: FILE: fs/nfs/nfs4xdr.c:830:
+		RESERVE_SPACE(4+NFS4_STATEID_SIZE+32);
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3685: FILE: fs/nfs/nfs4xdr.c:830:
+		RESERVE_SPACE(4+NFS4_STATEID_SIZE+32);
 		                                 ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3782: FILE: fs/nfs/nfs4xdr.c:3309:
+	uint32_t savewords, bmlen, i;

CHECK:SPACING: No space is necessary after a cast
#3818: FILE: fs/nfs/nfsroot.c:499:
+	status = nfs_mount((struct sockaddr *) &sin, sizeof(sin), NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3934: FILE: fs/nfs/pagelist.c:397:
+int nfs_scan_list(struct nfs_inode *nfsi,
 		struct list_head *dst, pgoff_t idx_start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3946: FILE: fs/nfs/pagelist.c:414:
+		found = radix_tree_gang_lookup_tag(&nfsi->nfs_page_tree,
 				(void **)&pgvec[0], idx_start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3962: FILE: fs/nfs/pagelist.c:426:
+				radix_tree_tag_clear(&nfsi->nfs_page_tree,
+						req->wb_index, tag);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3995: FILE: fs/nfs/read.c:167:
+	data->inode	  = inode = req->wb_context->path.dentry->d_inode;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4087: FILE: fs/nfs/super.c:61:
 
+

CHECK:CAMELCASE: Avoid CamelCase: <Opt_soft>
#4119: FILE: fs/nfs/super.c:93:
+	Opt_soft, Opt_hard,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_hard>
#4119: FILE: fs/nfs/super.c:93:
+	Opt_soft, Opt_hard,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_intr>
#4120: FILE: fs/nfs/super.c:94:
+	Opt_intr, Opt_nointr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nointr>
#4120: FILE: fs/nfs/super.c:94:
+	Opt_intr, Opt_nointr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_posix>
#4121: FILE: fs/nfs/super.c:95:
+	Opt_posix, Opt_noposix,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noposix>
#4121: FILE: fs/nfs/super.c:95:
+	Opt_posix, Opt_noposix,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_cto>
#4122: FILE: fs/nfs/super.c:96:
+	Opt_cto, Opt_nocto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nocto>
#4122: FILE: fs/nfs/super.c:96:
+	Opt_cto, Opt_nocto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_ac>
#4123: FILE: fs/nfs/super.c:97:
+	Opt_ac, Opt_noac,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noac>
#4123: FILE: fs/nfs/super.c:97:
+	Opt_ac, Opt_noac,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_lock>
#4124: FILE: fs/nfs/super.c:98:
+	Opt_lock, Opt_nolock,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nolock>
#4124: FILE: fs/nfs/super.c:98:
+	Opt_lock, Opt_nolock,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_v2>
#4125: FILE: fs/nfs/super.c:99:
+	Opt_v2, Opt_v3,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_v3>
#4125: FILE: fs/nfs/super.c:99:
+	Opt_v2, Opt_v3,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_udp>
#4126: FILE: fs/nfs/super.c:100:
+	Opt_udp, Opt_tcp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_tcp>
#4126: FILE: fs/nfs/super.c:100:
+	Opt_udp, Opt_tcp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acl>
#4127: FILE: fs/nfs/super.c:101:
+	Opt_acl, Opt_noacl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_noacl>
#4127: FILE: fs/nfs/super.c:101:
+	Opt_acl, Opt_noacl,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rdirplus>
#4128: FILE: fs/nfs/super.c:102:
+	Opt_rdirplus, Opt_nordirplus,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nordirplus>
#4128: FILE: fs/nfs/super.c:102:
+	Opt_rdirplus, Opt_nordirplus,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sharecache>
#4129: FILE: fs/nfs/super.c:103:
+	Opt_sharecache, Opt_nosharecache,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nosharecache>
#4129: FILE: fs/nfs/super.c:103:
+	Opt_sharecache, Opt_nosharecache,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#4132: FILE: fs/nfs/super.c:106:
+	Opt_port,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_rsize>
#4133: FILE: fs/nfs/super.c:107:
+	Opt_rsize, Opt_wsize, Opt_bsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_wsize>
#4133: FILE: fs/nfs/super.c:107:
+	Opt_rsize, Opt_wsize, Opt_bsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_bsize>
#4133: FILE: fs/nfs/super.c:107:
+	Opt_rsize, Opt_wsize, Opt_bsize,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_timeo>
#4134: FILE: fs/nfs/super.c:108:
+	Opt_timeo, Opt_retrans,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_retrans>
#4134: FILE: fs/nfs/super.c:108:
+	Opt_timeo, Opt_retrans,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acregmin>
#4135: FILE: fs/nfs/super.c:109:
+	Opt_acregmin, Opt_acregmax,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acregmax>
#4135: FILE: fs/nfs/super.c:109:
+	Opt_acregmin, Opt_acregmax,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acdirmin>
#4136: FILE: fs/nfs/super.c:110:
+	Opt_acdirmin, Opt_acdirmax,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_acdirmax>
#4136: FILE: fs/nfs/super.c:110:
+	Opt_acdirmin, Opt_acdirmax,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_actimeo>
#4137: FILE: fs/nfs/super.c:111:
+	Opt_actimeo,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_namelen>
#4138: FILE: fs/nfs/super.c:112:
+	Opt_namelen,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mountport>
#4139: FILE: fs/nfs/super.c:113:
+	Opt_mountport,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mountprog>
#4140: FILE: fs/nfs/super.c:114:
+	Opt_mountprog, Opt_mountvers,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mountvers>
#4140: FILE: fs/nfs/super.c:114:
+	Opt_mountprog, Opt_mountvers,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nfsprog>
#4141: FILE: fs/nfs/super.c:115:
+	Opt_nfsprog, Opt_nfsvers,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_nfsvers>
#4141: FILE: fs/nfs/super.c:115:
+	Opt_nfsprog, Opt_nfsvers,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec>
#4144: FILE: fs/nfs/super.c:118:
+	Opt_sec, Opt_proto, Opt_mountproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_proto>
#4144: FILE: fs/nfs/super.c:118:
+	Opt_sec, Opt_proto, Opt_mountproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mountproto>
#4144: FILE: fs/nfs/super.c:118:
+	Opt_sec, Opt_proto, Opt_mountproto,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_addr>
#4145: FILE: fs/nfs/super.c:119:
+	Opt_addr, Opt_mounthost, Opt_clientaddr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mounthost>
#4145: FILE: fs/nfs/super.c:119:
+	Opt_addr, Opt_mounthost, Opt_clientaddr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_clientaddr>
#4145: FILE: fs/nfs/super.c:119:
+	Opt_addr, Opt_mounthost, Opt_clientaddr,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_userspace>
#4148: FILE: fs/nfs/super.c:122:
+	Opt_userspace, Opt_deprecated,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_deprecated>
#4148: FILE: fs/nfs/super.c:122:
+	Opt_userspace, Opt_deprecated,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#4150: FILE: fs/nfs/super.c:124:
+	Opt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xprt_udp>
#4210: FILE: fs/nfs/super.c:184:
+	Opt_xprt_udp, Opt_xprt_tcp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xprt_tcp>
#4210: FILE: fs/nfs/super.c:184:
+	Opt_xprt_udp, Opt_xprt_tcp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_xprt_err>
#4212: FILE: fs/nfs/super.c:186:
+	Opt_xprt_err

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_none>
#4223: FILE: fs/nfs/super.c:197:
+	Opt_sec_none, Opt_sec_sys,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_sys>
#4223: FILE: fs/nfs/super.c:197:
+	Opt_sec_none, Opt_sec_sys,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_krb5>
#4224: FILE: fs/nfs/super.c:198:
+	Opt_sec_krb5, Opt_sec_krb5i, Opt_sec_krb5p,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_krb5i>
#4224: FILE: fs/nfs/super.c:198:
+	Opt_sec_krb5, Opt_sec_krb5i, Opt_sec_krb5p,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_krb5p>
#4224: FILE: fs/nfs/super.c:198:
+	Opt_sec_krb5, Opt_sec_krb5i, Opt_sec_krb5p,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_lkey>
#4225: FILE: fs/nfs/super.c:199:
+	Opt_sec_lkey, Opt_sec_lkeyi, Opt_sec_lkeyp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_lkeyi>
#4225: FILE: fs/nfs/super.c:199:
+	Opt_sec_lkey, Opt_sec_lkeyi, Opt_sec_lkeyp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_lkeyp>
#4225: FILE: fs/nfs/super.c:199:
+	Opt_sec_lkey, Opt_sec_lkeyi, Opt_sec_lkeyp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_spkm>
#4226: FILE: fs/nfs/super.c:200:
+	Opt_sec_spkm, Opt_sec_spkmi, Opt_sec_spkmp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_spkmi>
#4226: FILE: fs/nfs/super.c:200:
+	Opt_sec_spkm, Opt_sec_spkmi, Opt_sec_spkmp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_spkmp>
#4226: FILE: fs/nfs/super.c:200:
+	Opt_sec_spkm, Opt_sec_spkmi, Opt_sec_spkmp,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_sec_err>
#4228: FILE: fs/nfs/super.c:202:
+	Opt_sec_err

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4247: FILE: fs/nfs/super.c:221:
+
+

CHECK:SPACING: No space is necessary after a cast
#4307: FILE: fs/nfs/super.c:619:
+		struct sockaddr_in *sa = (struct sockaddr_in *) addr;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4308: FILE: fs/nfs/super.c:620:
+		struct sockaddr_in *sa = (struct sockaddr_in *) addr;
+		if (sa->sin_addr.s_addr != INADDR_ANY)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4543: FILE: fs/nfs/super.c:833:
+			if (string == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4618: FILE: fs/nfs/super.c:905:
+			if (string == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4643: FILE: fs/nfs/super.c:930:
+			if (string == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4662: FILE: fs/nfs/super.c:949:
+			if (string == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4671: FILE: fs/nfs/super.c:958:
+			if (string == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!string"
#4677: FILE: fs/nfs/super.c:964:
+			if (string == NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4711: FILE: fs/nfs/super.c:984:
+	printk(KERN_INFO "NFS: not enough memory to parse option\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4715: FILE: fs/nfs/super.c:988:
+	printk(KERN_INFO "NFS: unrecognized NFS version number\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4719: FILE: fs/nfs/super.c:992:
+	printk(KERN_INFO "NFS: unrecognized transport protocol\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4723: FILE: fs/nfs/super.c:996:
+	printk(KERN_INFO "NFS: unrecognized security flavor\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4727: FILE: fs/nfs/super.c:1000:
+	printk(KERN_INFO "NFS: unknown mount option: %s\n", p);

CHECK:BRACES: braces {} should be used on all arms of this statement
#4759: FILE: fs/nfs/super.c:1028:
+	if (args->mount_server.port == 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4767: FILE: fs/nfs/super.c:1036:
+	} else

CHECK:SPACING: No space is necessary after a cast
#4774: FILE: fs/nfs/super.c:1043:
+	status = nfs_mount((struct sockaddr *) &sin,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#4820: FILE: fs/nfs/super.c:1086:
+	if (data == NULL)

CHECK:SPACING: No space is necessary after a cast
#4872: FILE: fs/nfs/super.c:1138:
+		if (nfs_parse_mount_options((char *) *options, &args) == 0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#4876: FILE: fs/nfs/super.c:1142:
+		if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#4886: FILE: fs/nfs/super.c:1152:
+		if (c == NULL)

CHECK:SPACING: No space is necessary after a cast
#4938: FILE: fs/nfs/super.c:1200:
+	if (!nfs_verify_server_address((struct sockaddr *) &data->addr))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4978: FILE: fs/nfs/super.c:1321:
+	if (memcmp(&old->nfs_client->cl_addr,
+				&server->nfs_client->cl_addr,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4989: FILE: fs/nfs/super.c:1332:
+#define NFS_MS_MASK (MS_RDONLY|MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_SYNCHRONOUS)
                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4989: FILE: fs/nfs/super.c:1332:
+#define NFS_MS_MASK (MS_RDONLY|MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_SYNCHRONOUS)
                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4989: FILE: fs/nfs/super.c:1332:
+#define NFS_MS_MASK (MS_RDONLY|MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_SYNCHRONOUS)
                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4989: FILE: fs/nfs/super.c:1332:
+#define NFS_MS_MASK (MS_RDONLY|MS_NOSUID|MS_NODEV|MS_NOEXEC|MS_SYNCHRONOUS)
                                                            ^

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#4991: FILE: fs/nfs/super.c:1334:
+static int nfs_compare_mount_options(const struct super_block *s, const struct nfs_server *b, int flags)

CHECK:CAMELCASE: Avoid CamelCase: <Ebusy>
#4998: FILE: fs/nfs/super.c:1341:
+		goto Ebusy;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#5158: FILE: fs/nfs/super.c:1562:
+	if (data == NULL)

CHECK:SPACING: No space is necessary after a cast
#5169: FILE: fs/nfs/super.c:1573:
+		if (!nfs_verify_server_address((struct sockaddr *) addr))

CHECK:SPACING: No space is necessary after a cast
#5216: FILE: fs/nfs/super.c:1620:
+		if (nfs_parse_mount_options((char *) *options, &args) == 0)

CHECK:SPACING: No space is necessary after a cast
#5229: FILE: fs/nfs/super.c:1633:
+			*authflavour = (rpc_authflavor_t) args.auth_flavors[0];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#5240: FILE: fs/nfs/super.c:1644:
+		if (data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#5260: FILE: fs/nfs/super.c:1664:
+		if (c == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!hostname"
#5267: FILE: fs/nfs/super.c:1671:
+		if (*hostname == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mntpath"
#5276: FILE: fs/nfs/super.c:1680:
+		if (*mntpath == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5622: FILE: fs/nfs/write.c:465:
+	radix_tree_tag_set(&nfsi->nfs_page_tree,
+			req->wb_index,

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#5633: FILE: fs/nfs/write.c:529:
+	while (radix_tree_gang_lookup_tag(&nfsi->nfs_page_tree, (void **)&req, next, 1, NFS_PAGE_TAG_LOCKED)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5657: FILE: fs/nfs/write.c:581:
+		res = nfs_scan_list(nfsi, dst, idx_start, npages,
+				NFS_PAGE_TAG_COMMIT);

CHECK:BRACES: braces {} should be used on all arms of this statement
#5720: FILE: fs/nfs/write.c:752:
+	if (PageError(req->wb_page)) {
[...]
+	} else if (!nfs_reschedule_unstable_write(req)) {
[...]
 	} else
[...]

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5740: FILE: fs/nfs/write.c:792:
+	data->inode = inode = req->wb_context->path.dentry->d_inode;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5856: FILE: fs/nfs/write.c:1259:
+			nfs_mark_uptodate(req->wb_page, req->wb_pgbase,
+					req->wb_bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr *' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct nfs_fh *' should also have an identifier name
#6120: FILE: include/linux/nfs_fs.h:498:
+extern int  nfs_mount(struct sockaddr *, size_t, char *, char *,

CHECK:SPACING: No space is necessary after a cast
#6134: FILE: include/linux/nfs_fs.h:507:
+	if (size > (__u64) OFFSET_MAX - 1)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6246: FILE: include/linux/nfs_page.h:74:
+extern	int nfs_scan_list(struct nfs_inode *nfsi, struct list_head *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6257: FILE: include/linux/nfs_page.h:87:
+extern  void nfs_clear_page_tag_locked(struct nfs_page *req);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6355: FILE: include/linux/sunrpc/auth.h:40:
+	struct rpc_auth *	cr_auth;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#6370: FILE: include/linux/sunrpc/auth.h:53:
 };
+#define RPCAUTH_CRED_NEW	0

ERROR:POINTER_LOCATION: "foo __init		bar" should be "foo __init bar"
#6410: FILE: include/linux/sunrpc/auth.h:128:
+void __init		rpc_init_authunix(void);

ERROR:POINTER_LOCATION: "foo __init		bar" should be "foo __init bar"
#6411: FILE: include/linux/sunrpc/auth.h:129:
+void __init		rpcauth_init_module(void);

ERROR:POINTER_LOCATION: "foo __exit		bar" should be "foo __exit bar"
#6412: FILE: include/linux/sunrpc/auth.h:130:
+void __exit		rpcauth_remove_module(void);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rpc_authops *' should also have an identifier name
#6416: FILE: include/linux/sunrpc/auth.h:132:
+int			rpcauth_register(const struct rpc_authops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rpc_authops *' should also have an identifier name
#6417: FILE: include/linux/sunrpc/auth.h:133:
+int			rpcauth_unregister(const struct rpc_authops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#6420: FILE: include/linux/sunrpc/auth.h:135:
+void			rpcauth_release(struct rpc_auth *);

WARNING:LONG_LINE: line length of 134 exceeds 100 columns
#6422: FILE: include/linux/sunrpc/auth.h:137:
+void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred *' should also have an identifier name
#6422: FILE: include/linux/sunrpc/auth.h:137:
+void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct auth_cred *' should also have an identifier name
#6422: FILE: include/linux/sunrpc/auth.h:137:
+void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#6422: FILE: include/linux/sunrpc/auth.h:137:
+void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct rpc_credops *' should also have an identifier name
#6422: FILE: include/linux/sunrpc/auth.h:137:
+void			rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#6432: FILE: include/linux/sunrpc/auth.h:150:
+int			rpcauth_init_credcache(struct rpc_auth *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_auth *' should also have an identifier name
#6433: FILE: include/linux/sunrpc/auth.h:151:
+void			rpcauth_destroy_credcache(struct rpc_auth *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_cred_cache *' should also have an identifier name
#6434: FILE: include/linux/sunrpc/auth.h:152:
+void			rpcauth_clear_credcache(struct rpc_cred_cache *);

CHECK:BIT_MACRO: Prefer using the BIT macro
#6506: FILE: include/linux/sunrpc/clnt.h:114:
+#define RPC_CLNT_CREATE_NONPRIVPORT	(1UL << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#6507: FILE: include/linux/sunrpc/clnt.h:115:
+#define RPC_CLNT_CREATE_NOPING		(1UL << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#6508: FILE: include/linux/sunrpc/clnt.h:116:
+#define RPC_CLNT_CREATE_DISCRTRY	(1UL << 5)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_clnt *' should also have an identifier name
#6516: FILE: include/linux/sunrpc/clnt.h:122:
+void		rpc_shutdown_client(struct rpc_clnt *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sockaddr_in *' should also have an identifier name
#6521: FILE: include/linux/sunrpc/clnt.h:126:
+int		rpcb_getport_sync(struct sockaddr_in *, __u32, __u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#6521: FILE: include/linux/sunrpc/clnt.h:126:
+int		rpcb_getport_sync(struct sockaddr_in *, __u32, __u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__u32' should also have an identifier name
#6521: FILE: include/linux/sunrpc/clnt.h:126:
+int		rpcb_getport_sync(struct sockaddr_in *, __u32, __u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#6521: FILE: include/linux/sunrpc/clnt.h:126:
+int		rpcb_getport_sync(struct sockaddr_in *, __u32, __u32, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rpc_task *' should also have an identifier name
#6522: FILE: include/linux/sunrpc/clnt.h:127:
+void		rpcb_getport_async(struct rpc_task *);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6634: FILE: include/linux/sunrpc/xprt.h:201:
+	struct sockaddr *	srcaddr;	/* optional local address */

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6635: FILE: include/linux/sunrpc/xprt.h:202:
+	struct sockaddr *	dstaddr;	/* remote peer address */

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6637: FILE: include/linux/sunrpc/xprt.h:204:
+	struct rpc_timeout *	timeout;	/* optional timeout parameters */

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6647: FILE: include/linux/sunrpc/xprt.h:215:
+struct rpc_xprt *	xprt_create_transport(struct rpc_xprtsock_create *args);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6657: FILE: include/linux/sunrpc/xprt.h:253:
+struct rpc_xprt *	xs_setup_udp(struct rpc_xprtsock_create *args);

ERROR:POINTER_LOCATION: "foo *	bar" should be "foo *bar"
#6658: FILE: include/linux/sunrpc/xprt.h:254:
+struct rpc_xprt *	xs_setup_tcp(struct rpc_xprtsock_create *args);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!auth_flavors[flavor]"
#6707: FILE: net/sunrpc/auth.c:48:
+	if (auth_flavors[flavor] == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ops"
#6758: FILE: net/sunrpc/auth.c:90:
+	if (ops == NULL || !try_module_get(ops->owner)) {

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#6797: FILE: net/sunrpc/auth.c:128:
+	spinlock_t *cache_lock;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#6885: FILE: net/sunrpc/auth.c:204:
+/*
+ * Destroy the RPC credential cache

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#6918: FILE: net/sunrpc/auth.c:224:
+	spinlock_t *cache_lock;

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#6949: FILE: net/sunrpc/auth.c:249:
+/*
+ * Run memory cache shrinker.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cred"
#7025: FILE: net/sunrpc/auth.c:299:
+	if (cred != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#7051: FILE: net/sunrpc/auth.c:315:
+	if (cred == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred"
#7051: FILE: net/sunrpc/auth.c:315:
+	if (cred == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#7055: FILE: net/sunrpc/auth.c:319:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#7123: FILE: net/sunrpc/auth.c:402:
+	struct rpc_cred *cred = task->tk_msg.rpc_cred;
+	if (cred != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cred"
#7123: FILE: net/sunrpc/auth.c:402:
+	if (cred != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7126: FILE: net/sunrpc/auth.c:405:
+		dprintk("RPC: %5u holding %s cred %p\n", task->tk_pid,
+				cred->cr_auth->au_ops->au_name, cred);

CHECK:BRACES: braces {} should be used on all arms of this statement
#7148: FILE: net/sunrpc/auth.c:426:
+	if (test_bit(RPCAUTH_CRED_UPTODATE, &cred->cr_flags) == 0)
[...]
+	else if (test_bit(RPCAUTH_CRED_HASHED, &cred->cr_flags) != 0) {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred"
#7261: FILE: net/sunrpc/auth.c:542:
+	return cred == NULL ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7265: FILE: net/sunrpc/auth.c:546:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpc_cred_shrinker"
#7276: FILE: net/sunrpc/auth.c:557:
+	if (rpc_cred_shrinker != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gss_msg"
#7565: FILE: net/sunrpc/auth_gss/auth_gss.c:533:
+	if (gss_msg == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_pipe_downcall', this function's name, in a string
#7617: FILE: net/sunrpc/auth_gss/auth_gss.c:559:
+	dprintk("RPC:       gss_pipe_downcall returning %Zd\n", err);

WARNING:PRINTF_Z: %Zd is non-standard C, use %zd
#7617: FILE: net/sunrpc/auth_gss/auth_gss.c:559:
+	dprintk("RPC:       gss_pipe_downcall returning %Zd\n", err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7641: FILE: net/sunrpc/auth_gss/auth_gss.c:573:
+		gss_msg = list_entry(rpci->in_downcall.next,
 				struct gss_upcall_msg, list);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#7733: FILE: net/sunrpc/auth_gss/auth_gss.c:700:
+/*
+ * gss_destroying_context will cause the RPCSEC_GSS to send a NULL RPC call

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gss_cred->gc_ctx"
#7745: FILE: net/sunrpc/auth_gss/auth_gss.c:712:
+	if (gss_cred->gc_ctx == NULL ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7746: FILE: net/sunrpc/auth_gss/auth_gss.c:713:
+	if (gss_cred->gc_ctx == NULL ||
+			gss_cred->gc_ctx->gc_proc == RPC_GSS_PROC_DESTROY)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#7753: FILE: net/sunrpc/auth_gss/auth_gss.c:720:
+	 * by the RPC call or by the put_rpccred() below */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#7786: FILE: net/sunrpc/auth_gss/auth_gss.c:750:
+	struct gss_cl_ctx *ctx = container_of(head, struct gss_cl_ctx, gc_rcu);
+	gss_do_free_ctx(ctx);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_free_cred', this function's name, in a string
#7802: FILE: net/sunrpc/auth_gss/auth_gss.c:762:
+	dprintk("RPC:       gss_free_cred %p\n", gss_cred);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7810: FILE: net/sunrpc/auth_gss/auth_gss.c:770:
+	struct gss_cred *gss_cred = container_of(head, struct gss_cred, gc_base.cr_rcu);
+	gss_free_cred(gss_cred);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'gss_validate', this function's name, in a string
#7890: FILE: net/sunrpc/auth_gss/auth_gss.c:967:
+		dprintk("RPC: %5u gss_validate: gss_verify_mic returned"

WARNING:SPLIT_STRING: quoted string split across lines
#7891: FILE: net/sunrpc/auth_gss/auth_gss.c:968:
+		dprintk("RPC: %5u gss_validate: gss_verify_mic returned"
+				"error 0x%08x\n", task->tk_pid, maj_stat);

WARNING:MISSING_SPACE: break quoted strings at a space character
#7891: FILE: net/sunrpc/auth_gss/auth_gss.c:968:
+		dprintk("RPC: %5u gss_validate: gss_verify_mic returned"
+				"error 0x%08x\n", task->tk_pid, maj_stat);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'unx_free_cred', this function's name, in a string
#8168: FILE: net/sunrpc/auth_unix.c:95:
+	dprintk("RPC:       unx_free_cred %p\n", unx_cred);

WARNING:LINE_SPACING: Missing a blank line after declarations
#8176: FILE: net/sunrpc/auth_unix.c:103:
+	struct unx_cred *unx_cred = container_of(head, struct unx_cred, uc_base.cr_rcu);
+	unx_free_cred(unx_cred);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#8261: FILE: net/sunrpc/clnt.c:48:
+/*
+ * All RPC clients are linked into this list

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!args->servername"
#8368: FILE: net/sunrpc/clnt.c:254:
+	if (args->servername == NULL) {

CHECK:SPACING: No space is necessary after a cast
#8370: FILE: net/sunrpc/clnt.c:256:
+					(struct sockaddr_in *) &args->address;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8372: FILE: net/sunrpc/clnt.c:258:
+		snprintf(servername, sizeof(servername), NIPQUAD_FMT,
+			NIPQUAD(addr->sin_addr.s_addr));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8447: FILE: net/sunrpc/clnt.c:353:
+	dprintk("RPC:       shutting down %s client for %s\n",
+			clnt->cl_protname, clnt->cl_server);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#8462: FILE: net/sunrpc/clnt.c:358:
+			list_empty(&clnt->cl_tasks), 1*HZ);
 			                              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!clnt->cl_auth"
#8519: FILE: net/sunrpc/clnt.c:401:
+	if (clnt->cl_auth == NULL) {

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#8525: FILE: net/sunrpc/clnt.c:407:
+	/*
+	 * Note: RPCSEC_GSS may need to send NULL RPC calls in order to

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#8536: FILE: net/sunrpc/clnt.c:418:
+/*
+ * Release reference to the RPC client

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8564: FILE: net/sunrpc/clnt.c:520:
+struct rpc_task *rpc_do_run_task(struct rpc_clnt *clnt,
+		struct rpc_message *msg,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!task"
#8573: FILE: net/sunrpc/clnt.c:529:
+	if (task == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "msg"
#8580: FILE: net/sunrpc/clnt.c:536:
+	if (msg != NULL) {

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#8684: FILE: net/sunrpc/clnt.c:587:
+	task = rpc_do_run_task(clnt, msg, flags|RPC_TASK_ASYNC, tk_ops, data);
 	                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8699: FILE: net/sunrpc/clnt.c:602:
+struct rpc_task *rpc_run_task(struct rpc_clnt *clnt, int flags,
+					const struct rpc_call_ops *tk_ops,

WARNING:SPLIT_STRING: quoted string split across lines
#8747: FILE: net/sunrpc/clnt.c:1334:
+		dprintk("RPC: %5u %s: XDR representation not a multiple of"
+		       " 4 bytes: 0x%x\n", task->tk_pid, __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8747: FILE: net/sunrpc/clnt.c:1334:
+		       " 4 bytes: 0x%x\n", task->tk_pid, __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8758: FILE: net/sunrpc/clnt.c:1344:
+		dprintk("RPC: %5u %s: not an RPC reply: %x\n",
+				task->tk_pid, __FUNCTION__, n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8758: FILE: net/sunrpc/clnt.c:1344:
+				task->tk_pid, __FUNCTION__, n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8768: FILE: net/sunrpc/clnt.c:1396:
+			dprintk("RPC: %5u %s: unknown auth error: %x\n",
+					task->tk_pid, __FUNCTION__, n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8768: FILE: net/sunrpc/clnt.c:1396:
+					task->tk_pid, __FUNCTION__, n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8778: FILE: net/sunrpc/clnt.c:1405:
+		dprintk("RPC: %5u %s: auth check failed\n",
+				task->tk_pid, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8778: FILE: net/sunrpc/clnt.c:1405:
+				task->tk_pid, __FUNCTION__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8788: FILE: net/sunrpc/clnt.c:1445:
+		dprintk("RPC: %5u %s: server accept status: %x\n",
+				task->tk_pid, __FUNCTION__, n);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8788: FILE: net/sunrpc/clnt.c:1445:
+				task->tk_pid, __FUNCTION__, n);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8802: FILE: net/sunrpc/clnt.c:1464:
+	dprintk("RPC: %5u %s: call failed with error %d\n", task->tk_pid,
+			__FUNCTION__, error);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8802: FILE: net/sunrpc/clnt.c:1464:
+			__FUNCTION__, error);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8807: FILE: net/sunrpc/clnt.c:1468:
+	dprintk("RPC: %5u %s: server reply was truncated.\n", task->tk_pid,
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#8807: FILE: net/sunrpc/clnt.c:1468:
+			__FUNCTION__);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8844: FILE: net/sunrpc/clnt.c:1518:
+	printk("-pid- proc flgs status -client- -prog- --rqstp- -timeout "

WARNING:SPLIT_STRING: quoted string split across lines
#8845: FILE: net/sunrpc/clnt.c:1519:
+	printk("-pid- proc flgs status -client- -prog- --rqstp- -timeout "
+		"-rpcwait -action- ---ops--\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#8856: FILE: net/sunrpc/clnt.c:1530:
+			printk("%5u %04d %04x %6d %8p %6d %8p %8ld %8s %8p %8p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8857: FILE: net/sunrpc/clnt.c:1531:
+			printk("%5u %04d %04x %6d %8p %6d %8p %8ld %8s %8p %8p\n",
+				t->tk_pid,

WARNING:CONST_STRUCT: struct dentry_operations should normally be const
#8894: FILE: net/sunrpc/rpc_pipe.c:456:
+static struct dentry_operations rpc_dentry_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8915: FILE: net/sunrpc/rpc_pipe.c:531:
+		if (!dentry->d_inode ||
+				dentry->d_inode->i_ino < start ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9022: FILE: net/sunrpc/rpc_pipe.c:735:
+		if (rpci->private != private ||
+				rpci->ops != ops ||

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#9024: FILE: net/sunrpc/rpc_pipe.c:737:
+			dput (dentry);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9134: FILE: net/sunrpc/rpcb_clnt.c:283:
+		__FUNCTION__, NIPQUAD(sin->sin_addr.s_addr), prog, vers, prot);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9175: FILE: net/sunrpc/rpcb_clnt.c:321:
+		task->tk_pid, __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9186: FILE: net/sunrpc/rpcb_clnt.c:330:
+			task->tk_pid, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9196: FILE: net/sunrpc/rpcb_clnt.c:342:
+			task->tk_pid, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9206: FILE: net/sunrpc/rpcb_clnt.c:350:
+			task->tk_pid, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9214: FILE: net/sunrpc/rpcb_clnt.c:356:
+		task->tk_pid, __FUNCTION__, bind_version);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9222: FILE: net/sunrpc/rpcb_clnt.c:362:
+			task->tk_pid, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9233: FILE: net/sunrpc/rpcb_clnt.c:381:
+			task->tk_pid, __FUNCTION__, PTR_ERR(rpcb_clnt));

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#9244: FILE: net/sunrpc/rpcb_clnt.c:390:
+			task->tk_pid, __FUNCTION__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "clnt"
#9326: FILE: net/sunrpc/sched.c:280:
+	if (clnt != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpciod_workqueue"
#9508: FILE: net/sunrpc/sched.c:979:
+	if (rpciod_workqueue != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wq"
#9519: FILE: net/sunrpc/sched.c:987:
+	if (wq == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rpciod_workqueue"
#9549: FILE: net/sunrpc/sched.c:1008:
+	if (atomic_read(&rpciod_users) == 0 && rpciod_workqueue != NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'svc_tcp_accept', this function's name, in a string
#9680: FILE: net/sunrpc/svcsock.c:1083:
+		dprintk("svc_tcp_accept: kernel_getsockname error %d\n", -err);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xs_bind', this function's name, in a string
#9812: FILE: net/sunrpc/xprtsock.c:1177:
+	dprintk("RPC:       xs_bind "NIPQUAD_FMT":%u: %s (%d)\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#9812: FILE: net/sunrpc/xprtsock.c:1177:
+	dprintk("RPC:       xs_bind "NIPQUAD_FMT":%u: %s (%d)\n",

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#9882: FILE: net/sunrpc/xprtsock.c:1511:
+static struct rpc_xprt *xs_setup_xprt(struct rpc_xprtsock_create *args, unsigned int slot_table_size)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 115 warnings, 233 checks, 9078 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000408065.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
