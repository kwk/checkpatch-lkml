WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#63: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > udf_sb_partmap(sb, bloc.partitionReferenceNum)->s_partition_len) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <logicalBlockNum>
#63: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > udf_sb_partmap(sb, bloc.partitionReferenceNum)->s_partition_len) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <partitionReferenceNum>
#63: FILE: fs/udf/balloc.c:158:
+	    (bloc.logicalBlockNum + count) > udf_sb_partmap(sb, bloc.partitionReferenceNum)->s_partition_len) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#108: FILE: fs/udf/balloc.c:426:
+	    (bloc.logicalBlockNum + count) > udf_sb_partmap(sb, bloc.partitionReferenceNum)->s_partition_len) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#277: FILE: fs/udf/partition.c:57:
+	index = (sb->s_blocksize - map->s_type_specific.s_virtual.s_start_offset) / sizeof(uint32_t);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#302: FILE: fs/udf/partition.c:108:
+	uint32_t packet;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[i]"
#310: FILE: fs/udf/partition.c:114:
+		if (map->s_type_specific.s_sparing.s_spar_map[i] != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 105 exceeds 100 columns
#311: FILE: fs/udf/partition.c:115:
+			st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[i]->b_data;

CHECK:CAMELCASE: Avoid CamelCase: <sparingTable>
#311: FILE: fs/udf/partition.c:115:
+			st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[i]->b_data;

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#320: FILE: fs/udf/partition.c:126:
+					((block + offset) & (map->s_type_specific.s_sparing.s_packet_len - 1));

WARNING:LINE_SPACING: Missing a blank line after declarations
#341: FILE: fs/udf/partition.c:146:
+		struct udf_part_map *map = udf_sb_partmap(sb, i);
+		if (old_block > map->s_partition_root &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[j]"
#348: FILE: fs/udf/partition.c:152:
+				if (map->s_type_specific.s_sparing.s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#357: FILE: fs/udf/partition.c:172:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#362: FILE: fs/udf/partition.c:176:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#371: FILE: fs/udf/partition.c:197:
+						((old_block - map->s_partition_root) & (sdata->s_packet_len - 1));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: fs/udf/super.c:799:
+			lastblock = udf_sb_partmap(sb,
+					newfileset.partitionReferenceNum)->

CHECK:CAMELCASE: Avoid CamelCase: <partitionNumber>
#406: FILE: fs/udf/super.c:915:
+			  map->s_partition_num, le16_to_cpu(p->partitionNumber));

CHECK:CAMELCASE: Avoid CamelCase: <partitionLength>
#408: FILE: fs/udf/super.c:917:
+			map->s_partition_len = le32_to_cpu(p->partitionLength); /* blocks */

CHECK:CAMELCASE: Avoid CamelCase: <partitionStartingLocation>
#409: FILE: fs/udf/super.c:918:
+			map->s_partition_root = le32_to_cpu(p->partitionStartingLocation);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_uspace.s_bitmap"
#447: FILE: fs/udf/super.c:953:
+					if (map->s_uspace.s_bitmap != NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <s_extLength>
#448: FILE: fs/udf/super.c:954:
+						map->s_uspace.s_bitmap->s_extLength =

CHECK:CAMELCASE: Avoid CamelCase: <s_extPosition>
#451: FILE: fs/udf/super.c:956:
+						map->s_uspace.s_bitmap->s_extPosition =

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#454: FILE: fs/udf/super.c:958:
+						map->s_partition_flags |= UDF_PART_FLAG_UNALLOC_BITMAP;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_fspace.s_bitmap"
#483: FILE: fs/udf/super.c:983:
+					if (map->s_fspace.s_bitmap != NULL) {

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#490: FILE: fs/udf/super.c:988:
+						map->s_partition_flags |= UDF_PART_FLAG_FREED_BITMAP;

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: fs/udf/super.c:1027:
+^I     ^Istruct udf_part_map *map = udf_sb_partmap(sb, i);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#513: FILE: fs/udf/super.c:1027:
+^I     ^Istruct udf_part_map *map = udf_sb_partmap(sb, i);$

CHECK:CAMELCASE: Avoid CamelCase: <volSeqNum>
#522: FILE: fs/udf/super.c:1032:
+			map->s_volumeseqnum = le16_to_cpu(gpm1->volSeqNum);

CHECK:CAMELCASE: Avoid CamelCase: <partitionNum>
#523: FILE: fs/udf/super.c:1033:
+			map->s_partition_num = le16_to_cpu(gpm1->partitionNum);

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#548: FILE: fs/udf/super.c:1052:
+				map->s_type_specific.s_sparing.s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:CAMELCASE: Avoid CamelCase: <packetLength>
#548: FILE: fs/udf/super.c:1052:
+				map->s_type_specific.s_sparing.s_packet_len = le16_to_cpu(spm->packetLength);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "map->s_type_specific.s_sparing.s_spar_map[j]"
#556: FILE: fs/udf/super.c:1057:
+					if (map->s_type_specific.s_sparing.s_spar_map[j] != NULL) {

WARNING:LONG_LINE: line length of 129 exceeds 100 columns
#557: FILE: fs/udf/super.c:1058:
+						st = (struct sparingTable *)map->s_type_specific.s_sparing.s_spar_map[j]->b_data;

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#562: FILE: fs/udf/super.c:1061:
+							brelse(map->s_type_specific.s_sparing.s_spar_map[j]);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#563: FILE: fs/udf/super.c:1062:
+							map->s_type_specific.s_sparing.s_spar_map[j] = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#593: FILE: fs/udf/super.c:1332:
+		struct udf_part_map *map = udf_sb_partmap(sb, i);
+		switch (map->s_partition_type) {

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#609: FILE: fs/udf/super.c:1352:
+					ino.logicalBlockNum = udf_sb_last_block(sb) - map2->s_partition_root;

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#641: FILE: fs/udf/super.c:1381:
+				map->s_type_specific.s_virtual.s_num_entries = (udf_sb_vat_inode(sb)->i_size -

WARNING:LONG_LINE: line length of 124 exceeds 100 columns
#642: FILE: fs/udf/super.c:1382:
+									map->s_type_specific.s_virtual.s_start_offset) >> 2;

WARNING:LINE_SPACING: Missing a blank line after declarations
#673: FILE: fs/udf/super.c:1632:
+		struct udf_part_map *map = udf_sb_partmap(sb, udf_sb_partition(sb));
+		if (map->s_partition_flags & UDF_PART_FLAG_UNALLOC_TABLE)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#674: FILE: fs/udf/super.c:1633:
+			iput(map->s_uspace.s_table);
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#676: FILE: fs/udf/super.c:1635:
+			iput(map->s_fspace.s_table);
 			^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#700: FILE: fs/udf/super.c:1708:
+		struct udf_part_map *map = udf_sb_partmap(sb, udf_sb_partition(sb));
+		if (map->s_partition_flags & UDF_PART_FLAG_UNALLOC_TABLE)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#701: FILE: fs/udf/super.c:1709:
+			iput(map->s_uspace.s_table);
 			^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#703: FILE: fs/udf/super.c:1711:
+			iput(map->s_fspace.s_table);
 			^^^^

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#789: FILE: fs/udf/udf_sb.h:154:
+	int nr_groups = ((udf_sb_partmap((X),(Y))->s_partition_len + (sizeof(struct spaceBitmapDesc) << 3) +\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#789: FILE: fs/udf/udf_sb.h:154:
+	int nr_groups = ((udf_sb_partmap((X),(Y))->s_partition_len + (sizeof(struct spaceBitmapDesc) << 3) +\
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <spaceBitmapDesc>
#789: FILE: fs/udf/udf_sb.h:154:
+	int nr_groups = ((udf_sb_partmap((X),(Y))->s_partition_len + (sizeof(struct spaceBitmapDesc) << 3) +\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 27 warnings, 19 checks, 697 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000343810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
