WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
o I found an issue during test and that is if there is a mix of queue and group

WARNING:TYPO_SPELLING: 'lenghts' may be misspelled - perhaps 'lengths'?
#66: 
 history. Instead it provides slice lenghts according to prio and if in one
                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'lenght' may be misspelled - perhaps 'length'?
#70: 
 This does not work in hierarchical setups where group's slice lenght is
                                                               ^^^^^^

WARNING:TYPO_SPELLING: 'histroy' may be misspelled - perhaps 'history'?
#74: 
 Hence we need to keep track of histroy and assign a new vtime based on disk
                                ^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#159: FILE: block/elevator-fq.c:434:
+	if (sync && entity->vdisktime
+	    && vdisktime_gt(entity->vdisktime, st->min_vdisktime)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#197: FILE: block/elevator-fq.c:456:
+	if (parent) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#200: FILE: block/elevator-fq.c:459:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#255: FILE: block/elevator-fq.c:522:
+	while (*node != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: block/elevator-fq.c:526:
+		if (vdisktime_gt(entry->vdisktime, entity->vdisktime))
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#261: FILE: block/elevator-fq.c:528:
+		else {

ERROR:SPACING: space required before the open parenthesis '('
#322: FILE: block/elevator-fq.c:589:
+	while(st->rb_leftmost_idle) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#324: FILE: block/elevator-fq.c:591:
+		entity = rb_entry(st->rb_leftmost_idle, struct io_entity,
+					rb_node);

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: block/elevator-fq.c:3468:
+ ^I * This queue is still under service. Just mark it so that once all$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#449: FILE: block/elevator-fq.c:3468:
+ ^I * This queue is still under service. Just mark it so that once all$

ERROR:SPACING: space required before the open parenthesis '('
#455: FILE: block/elevator-fq.c:3474:
+	} else if(entity->on_idle_st) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#493: FILE: block/elevator-fq.h:37:
+        /* A cache of io entities which were served and expired */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#494: FILE: block/elevator-fq.h:38:
+        struct rb_root idle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#494: FILE: block/elevator-fq.h:38:
+        struct rb_root idle;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#495: FILE: block/elevator-fq.h:39:
+        struct rb_node *rb_leftmost_idle;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#495: FILE: block/elevator-fq.h:39:
+        struct rb_node *rb_leftmost_idle;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#517: FILE: block/elevator-fq.h:582:
+extern void elv_exit_ioq(struct io_queue *ioq);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 7 warnings, 8 checks, 382 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000074897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
