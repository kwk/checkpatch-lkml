WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Read-only log recovery allows a dirty journalled filesystem to be mounted and

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#211: FILE: fs/jbd/journal.c:1158:
 	if (journal->j_sb_buffer) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#300: FILE: fs/jbd/recovery.c:131:
+	bt_record_cache = kmem_cache_create(

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bt_record_cache"
#304: FILE: fs/jbd/recovery.c:135:
+	if (bt_record_cache == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#305: FILE: fs/jbd/recovery.c:136:
+		printk(KERN_EMERG "JBD: failed to create recover cache\n");

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#314: FILE: fs/jbd/recovery.c:145:
+	if (bt_record_cache) {
+		kmem_cache_destroy(bt_record_cache);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#320: FILE: fs/jbd/recovery.c:151:
+bool journal_translate_block(journal_t *journal, sector_t blocknr,
+	sector_t *retp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: fs/jbd/recovery.c:161:
+	hash = jbd_hash(blocknr, journal->j_bt_hash_bits,
+		1 << journal->j_bt_hash_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: fs/jbd/recovery.c:186:
+		hlist_for_each_entry_safe(jbt, node, tmp,
+			journal->j_bt_hash + ii, jbt_list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: fs/jbd/recovery.c:245:
+static int journal_record_bt(journal_t *journal, sector_t original,
+	sector_t target)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: fs/jbd/recovery.c:263:
+	hash = jbd_hash(original, journal->j_bt_hash_bits,
+		1 << journal->j_bt_hash_bits);

WARNING:LINE_SPACING: Missing a blank line after declarations
#420: FILE: fs/jbd/recovery.c:315:
+	int ii;
+	BUG_ON(journal->j_bt_hash);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#420: FILE: fs/jbd/recovery.c:315:
+	BUG_ON(journal->j_bt_hash);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*journal->j_bt_hash)...) over kmalloc(sizeof(struct hlist_head)...)
#424: FILE: fs/jbd/recovery.c:319:
+	journal->j_bt_hash = kmalloc(sizeof(struct hlist_head) *

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#465: FILE: fs/jbd/recovery.c:379:
+			printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#467: FILE: fs/jbd/recovery.c:381:
+				"JBD: out of memory allocating"
+				" journal block translation hash\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#483: FILE: fs/jbd/recovery.c:399:
+	if (write) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#485: FILE: fs/jbd/recovery.c:401:
+		 * any existing commit records in the log. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#529: FILE: fs/jbd/recovery.c:518:
+				 * report failure at the end. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#531: FILE: fs/jbd/recovery.c:520:
+				printk(KERN_ERR "JBD: IO error %d recovering "

WARNING:SPLIT_STRING: quoted string split across lines
#532: FILE: fs/jbd/recovery.c:521:
+				printk(KERN_ERR "JBD: IO error %d recovering "
+				       "block %ld in log\n", err, io_block);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "obh"
#535: FILE: fs/jbd/recovery.c:524:
+			J_ASSERT(obh != NULL);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#537: FILE: fs/jbd/recovery.c:526:
+			err = replay_data_block(

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#645: FILE: include/linux/jbd.h:939:
+extern int	   journal_load       (journal_t *journal, int);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#645: FILE: include/linux/jbd.h:939:
+extern int	   journal_load       (journal_t *journal, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#645: FILE: include/linux/jbd.h:939:
+extern int	   journal_load       (journal_t *journal, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#648: FILE: include/linux/jbd.h:941:
+extern int	   journal_recover    (journal_t *journal, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#648: FILE: include/linux/jbd.h:941:
+extern int	   journal_recover    (journal_t *journal, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#648: FILE: include/linux/jbd.h:941:
+extern int	   journal_recover    (journal_t *journal, int);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#652: FILE: include/linux/jbd.h:944:
+extern void	   journal_update_superblock	(journal_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: include/linux/jbd.h:944:
+extern void	   journal_update_superblock	(journal_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'journal_t *' should also have an identifier name
#652: FILE: include/linux/jbd.h:944:
+extern void	   journal_update_superblock	(journal_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#652: FILE: include/linux/jbd.h:944:
+extern void	   journal_update_superblock	(journal_t *, int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#652: FILE: include/linux/jbd.h:944:
+extern void	   journal_update_superblock	(journal_t *, int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#660: FILE: include/linux/jbd.h:993:
+extern bool	journal_translate_block(journal_t *journal, sector_t blocknr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#662: FILE: include/linux/jbd.h:995:
+extern void	journal_destroy_translations(journal_t *journal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#663: FILE: include/linux/jbd.h:996:
+extern int	journal_init_recover_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#664: FILE: include/linux/jbd.h:997:
+extern void	journal_destroy_recover_cache(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: include/linux/jbd.h:1021:
+    return ((block << (shift - 6)) ^$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 19 checks, 555 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310785.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
