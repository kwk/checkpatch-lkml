WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
Implement __assign_irq_vector_block() based closely on __assign_irq_vector().

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#58: FILE: arch/x86/kernel/io_apic_64.c:701:
+	static int current_offset = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#76: FILE: arch/x86/kernel/io_apic_64.c:784:
+	BUG_ON((unsigned)irq + count > NR_IRQS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#76: FILE: arch/x86/kernel/io_apic_64.c:784:
+	BUG_ON((unsigned)irq + count > NR_IRQS);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#83: FILE: arch/x86/kernel/io_apic_64.c:791:
+		if ((cfg->move_in_progress) || cfg->move_cleanup_count)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#91: FILE: arch/x86/kernel/io_apic_64.c:799:
+		cpumask_t tmp;
+		cpus_and(tmp, cfg->domain, mask);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'IA32_SYSCALL_VECTOR >= vector'
#114: FILE: arch/x86/kernel/io_apic_64.c:822:
+		if ((IA32_SYSCALL_VECTOR >= vector) &&
+		    (IA32_SYSCALL_VECTOR < vector + count))

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#114: FILE: arch/x86/kernel/io_apic_64.c:822:
+		if ((IA32_SYSCALL_VECTOR >= vector) &&

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#115: FILE: arch/x86/kernel/io_apic_64.c:823:
+		    (IA32_SYSCALL_VECTOR < vector + count))

WARNING:BRACES: braces {} are not necessary for single statement blocks
#226: FILE: arch/x86/kernel/io_apic_64.c:2036:
+	for (i = 0; i < count; i++) {
+		dynamic_irq_init(new + i);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: arch/x86/kernel/io_apic_64.c:2046:
+	int ret = create_irq_block(1);
+	if (ret < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: arch/x86/kernel/io_apic_64.c:2067:
+static int msi_compose_msg(struct pci_dev *pdev, unsigned int irq,
+				unsigned int count, struct msi_msg *msg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: arch/x86/kernel/io_apic_64.c:2201:
+		set_irq_chip_and_handler_name(base_irq + i, &msi_chip,
+						handle_edge_irq, "edge");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258670.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 8 warnings, 4 checks, 284 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258670.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
