WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#60: FILE: include/asm-x86/system.h:1:
+#ifndef _ASM_X86_SYSTEM_H_

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#72: FILE: include/asm-x86/system.h:13:
+#define _set_base(addr, base) do { unsigned long __pr; \
+__asm__ __volatile__ ("movw %%dx,%1\n\t" \
+	"rorl $16,%%edx\n\t" \
+	"movb %%dl,%2\n\t" \
+	"movb %%dh,%3" \
+	:"=&d" (__pr) \
+	:"m" (*((addr)+2)), \
+	 "m" (*((addr)+4)), \
+	 "m" (*((addr)+7)), \
+	 "0" (base) \
+	); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#77: FILE: include/asm-x86/system.h:18:
+	:"=&d" (__pr) \
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#78: FILE: include/asm-x86/system.h:19:
+	:"m" (*((addr)+2)), \
 	^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#78: FILE: include/asm-x86/system.h:19:
+	:"m" (*((addr)+2)), \
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#79: FILE: include/asm-x86/system.h:20:
+	 "m" (*((addr)+4)), \
 	              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#80: FILE: include/asm-x86/system.h:21:
+	 "m" (*((addr)+7)), \
 	              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#84: FILE: include/asm-x86/system.h:25:
+#define _set_limit(addr, limit) do { unsigned long __lr; \
+__asm__ __volatile__ ("movw %%dx,%1\n\t" \
+	"rorl $16,%%edx\n\t" \
+	"movb %2,%%dh\n\t" \
+	"andb $0xf0,%%dh\n\t" \
+	"orb %%dh,%%dl\n\t" \
+	"movb %%dl,%2" \
+	:"=&d" (__lr) \
+	:"m" (*(addr)), \
+	 "m" (*((addr)+6)), \
+	 "0" (limit) \
+	); } while (0)

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#91: FILE: include/asm-x86/system.h:32:
+	:"=&d" (__lr) \
 	^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#92: FILE: include/asm-x86/system.h:33:
+	:"m" (*(addr)), \
 	^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#93: FILE: include/asm-x86/system.h:34:
+	 "m" (*((addr)+6)), \
 	              ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#97: FILE: include/asm-x86/system.h:38:
+#define set_base(ldt, base) _set_base(((char *)&(ldt)) , (base))
                                                        ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#98: FILE: include/asm-x86/system.h:39:
+#define set_limit(ldt, limit) _set_limit(((char *)&(ldt)) , ((limit)-1))
                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#98: FILE: include/asm-x86/system.h:39:
+#define set_limit(ldt, limit) _set_limit(((char *)&(ldt)) , ((limit)-1))
                                                                     ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#103: FILE: include/asm-x86/system.h:44:
+#define savesegment(seg, value) \
+	asm volatile("mov %%" #seg ",%0":"=rm" (value))

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#104: FILE: include/asm-x86/system.h:45:
+	asm volatile("mov %%" #seg ",%0":"=rm" (value))
 	                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#109: FILE: include/asm-x86/system.h:50:
+	unsigned long __limit;
+	__asm__("lsll %1,%0"

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#110: FILE: include/asm-x86/system.h:51:
+		:"=r" (__limit):"r" (segment));
 		^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#110: FILE: include/asm-x86/system.h:51:
+		:"=r" (__limit):"r" (segment));
 		               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#111: FILE: include/asm-x86/system.h:52:
+	return __limit+1;
 	              ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'clflush', this function's name, in a string
#117: FILE: include/asm-x86/system.h:58:
+	asm volatile("clflush %0" : "+m" (*(char __force *)__p));

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#120: FILE: include/asm-x86/system.h:61:
+#define nop() __asm__ __volatile__ ("nop")

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#128: FILE: include/asm-x86/system.h:69:
+extern unsigned long arch_align_stack(unsigned long sp);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: include/asm-x86/system.h:70:
+extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#132: FILE: include/asm-x86/system.h:73:
+void __show_registers(struct pt_regs *, int all);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 4 warnings, 12 checks, 193 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000351054.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
