WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
> Rather than playing with the dangling operator format which seems to be a coding

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'head' may be better as '(head)' to avoid precedence issues
#175: FILE: drivers/block/floppy.c:314:
+#define PH_HEAD(floppy, head) (((((floppy)->stretch & 2) >> 1) ^ head) << 2)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: drivers/block/floppy.c:618:
+ static struct floppy_struct floppy_type[32] = {$

WARNING:TABSTOP: Statements should start on a tabstop
#565: FILE: drivers/block/floppy.c:619:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#577: FILE: drivers/block/floppy.c:631:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#589: FILE: drivers/block/floppy.c:643:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#601: FILE: drivers/block/floppy.c:655:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#613: FILE: drivers/block/floppy.c:667:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#625: FILE: drivers/block/floppy.c:679:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#637: FILE: drivers/block/floppy.c:691:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#649: FILE: drivers/block/floppy.c:703:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#661: FILE: drivers/block/floppy.c:715:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#673: FILE: drivers/block/floppy.c:727:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#685: FILE: drivers/block/floppy.c:739:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#697: FILE: drivers/block/floppy.c:751:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#709: FILE: drivers/block/floppy.c:763:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#721: FILE: drivers/block/floppy.c:775:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#733: FILE: drivers/block/floppy.c:787:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#745: FILE: drivers/block/floppy.c:799:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#757: FILE: drivers/block/floppy.c:811:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#769: FILE: drivers/block/floppy.c:823:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#781: FILE: drivers/block/floppy.c:835:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#793: FILE: drivers/block/floppy.c:847:
+	 {

WARNING:TABSTOP: Statements should start on a tabstop
#805: FILE: drivers/block/floppy.c:859:
+	 {

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#975: FILE: drivers/block/floppy.c:1039:
+#define CALL(x)		do { if ((x) == -EINTR) return -EINTR; } while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#976: FILE: drivers/block/floppy.c:1040:
+#define ECALL(x)	do { if ((ret = (x))) return ret; } while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#991: FILE: drivers/block/floppy.c:1071:
+				 * main command */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1032: FILE: drivers/block/floppy.c:1176:
+static void (*do_floppy)(void) = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1060: FILE: drivers/block/floppy.c:1226:
+#define INFBOUND(a, b) (a) = max_t(int, a, b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1060: FILE: drivers/block/floppy.c:1226:
+#define INFBOUND(a, b) (a) = max_t(int, a, b)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1061: FILE: drivers/block/floppy.c:1227:
+#define SUPBOUND(a, b) (a) = min_t(int, a, b)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#1061: FILE: drivers/block/floppy.c:1227:
+#define SUPBOUND(a, b) (a) = min_t(int, a, b)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#1105: FILE: drivers/block/floppy.c:1437:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#1105: FILE: drivers/block/floppy.c:1437:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1105: FILE: drivers/block/floppy.c:1437:
+#define LOCK_FDC(drive, interruptible)	    \
+	if (lock_fdc(drive, interruptible)) \
+		return -EINTR;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1149: FILE: drivers/block/floppy.c:1637:
+			pr_cont("%x,", raw_cmd->cmd[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1150: FILE: drivers/block/floppy.c:1638:
+		pr_cont("\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1253: FILE: drivers/block/floppy.c:1951:
+	pr_cont(": track %d, head %d, sector %d, size %d",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1261: FILE: drivers/block/floppy.c:1959:
+		pr_cont("Recalibrate failed!");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1263: FILE: drivers/block/floppy.c:1961:
+		pr_cont("data CRC error");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1266: FILE: drivers/block/floppy.c:1964:
+		pr_cont("CRC error");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1270: FILE: drivers/block/floppy.c:1968:
+		if (!probing) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1271: FILE: drivers/block/floppy.c:1969:
+			pr_cont("sector not found");

CHECK:BRACES: Unbalanced braces around else statement
#1273: FILE: drivers/block/floppy.c:1971:
+		} else

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1274: FILE: drivers/block/floppy.c:1972:
+			pr_cont("probe failed...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1276: FILE: drivers/block/floppy.c:1974:
+		pr_cont("wrong cylinder");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1278: FILE: drivers/block/floppy.c:1976:
+		pr_cont("bad cylinder");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1280: FILE: drivers/block/floppy.c:1978:
+		pr_cont("unknown error. ST[0..2] are: 0x%x 0x%x 0x%x",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1284: FILE: drivers/block/floppy.c:1982:
+	pr_cont("\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1395: FILE: drivers/block/floppy.c:2271:
+			pr_cont("repl[%d]=%x ", i, reply_buffer[i]);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1396: FILE: drivers/block/floppy.c:2272:
+	pr_cont("\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1552: FILE: drivers/block/floppy.c:2510:
+				 * drive/controller combinations */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'request_done', this function's name, in a string
#1594: FILE: drivers/block/floppy.c:2861:
+		pr_info("floppy.c: no request in request_done\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1681: FILE: drivers/block/floppy.c:3137:
+					 * points to end of transfer */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'do_fd_request', this function's name, in a string
#1828: FILE: drivers/block/floppy.c:3517:
+		pr_info("VFS: do_fd_request called on non-open device\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1903: FILE: drivers/block/floppy.c:3705:
+				long length = ptr->buffer_length - ptr->length;
+				ECALL(fd_copyout(ptr->data, ptr->kernel_data,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ptr)...) over kmalloc(sizeof(struct floppy_raw_cmd)...)
#1915: FILE: drivers/block/floppy.c:3742:
+		ptr = kmalloc(sizeof(struct floppy_raw_cmd), GFP_USER);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2001: FILE: drivers/block/floppy.c:4043:
+		 * non-Sparc architectures */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#2167: FILE: drivers/block/floppy.c:4126:
+		/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2227: FILE: drivers/block/floppy.c:4212:
+			pr_cont("%s fd%d is %s", prepend, drive, name);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2233: FILE: drivers/block/floppy.c:4217:
+		pr_cont("\n");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2350: FILE: drivers/block/floppy.c:4516:
+		return FDC_82077_ORIG;	/* Pre-1991 82077,
+					   doesn't know LOCK/UNLOCK */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2350: FILE: drivers/block/floppy.c:4516:
+					   doesn't know LOCK/UNLOCK */

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'config_params[i].param2'
#2619: FILE: drivers/block/floppy.c:4809:
+							    config_params[i].
+							    param2);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2629: FILE: drivers/block/floppy.c:4823:
+			pr_cont(" %s", config_params[i].name);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2630: FILE: drivers/block/floppy.c:4824:
+		pr_cont("\n");

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#2640: FILE: drivers/block/floppy.c:4843:
+DEVICE_ATTR(cmos, S_IRUGO, floppy_cmos_show, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2707: FILE: drivers/block/floppy.c:5098:
+	     * Unfortunately, Adaptec doesn't know this :-(, */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 58 warnings, 6 checks, 2632 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000041107.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
