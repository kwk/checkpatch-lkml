WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-fixes-for-linus

WARNING:REPEATED_WORD: Possible repeated word: 'top'
#49: 
  perf_counter tools: Allow perf top top users to switch between weighted and individual counter display

WARNING:TYPO_SPELLING: 'isnt' may be misspelled - perhaps 'isn't'?
#54: 
( This isnt even all the stuff - we do have a fair amount of stuff
       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'top'
#87: 
      perf_counter tools: Allow perf top top users to switch between weighted and individual counter display

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#285: FILE: kernel/perf_counter.c:2725:
+		WARN_ON_ONCE(size & (sizeof(u64)-1));
 		                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#404: FILE: kernel/perf_counter.c:3384:
+	old = val = atomic64_read(&hwc->period_left);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: kernel/perf_counter.c:3628:
+	if ((counter->attr.exclude_kernel || !data.regs) &&
+			!counter->attr.exclude_user)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: kernel/perf_counter.c:3795:
+	if ((counter->attr.sample_type & PERF_SAMPLE_RAW) &&
+			!capable(CAP_SYS_ADMIN))

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#665: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:LONG_LINE_STRING: line length of 111 exceeds 100 columns
#1081: FILE: tools/perf/builtin-record.c:530:
+			fprintf(stderr, "Error, output file %s exists, use -A to append or -f to overwrite.\n",

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: tools/perf/builtin-record.c:531:
+			fprintf(stderr, "Error, output file %s exists, use -A to append or -f to overwrite.\n",
+					output_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1198: FILE: tools/perf/builtin-report.c:969:
+	if (callchain_param.mode == CHAIN_GRAPH_REL &&
+		remaining && remaining != new_total) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1199: FILE: tools/perf/builtin-report.c:970:
+		remaining && remaining != new_total) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PRINTF_L: %Lu is non-standard C, use %llu
#1260: FILE: tools/perf/builtin-report.c:1761:
+	dprintf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1261: FILE: tools/perf/builtin-report.c:1762:
+	dprintf("%p [%p]: PERF_EVENT_READ: %d %d %s %Lu\n",
 			(void *)(offset + head),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1283: FILE: tools/perf/builtin-report.c:1880:
+	} else if (callchain_param.mode != CHAIN_NONE && !callchain) {
+			callchain = 1;

WARNING:SPLIT_STRING: quoted string split across lines
#1287: FILE: tools/perf/builtin-report.c:1884:
+				fprintf(stderr, "Can't register callchain"
+						" params\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1365: FILE: tools/perf/builtin-top.c:89:
+static char			*sym_filter			=  NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:GLOBAL_INITIALISERS: do not initialise globals to NULL
#1366: FILE: tools/perf/builtin-top.c:90:
+struct sym_entry		*sym_filter_entry		=  NULL;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1368: FILE: tools/perf/builtin-top.c:92:
+static int			sym_counter			=  0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1396: FILE: tools/perf/builtin-top.c:125:
+	char command[PATH_MAX*2], *path = vmlinux;
 	                     ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#1428: FILE: tools/perf/builtin-top.c:157:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", start, end, path);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#1428: FILE: tools/perf/builtin-top.c:157:
+	sprintf(command, "objdump --start-address=0x%016Lx --stop-address=0x%016Lx -dS %s", start, end, path);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "src"
#1442: FILE: tools/perf/builtin-top.c:171:
+		assert(src != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1458: FILE: tools/perf/builtin-top.c:187:
+		if (strlen(src->line)>8 && src->line[8] == ':') {
 		                     ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#1463: FILE: tools/perf/builtin-top.c:192:
+		if (strlen(src->line)>8 && src->line[16] == ':') {
 		                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1545: FILE: tools/perf/builtin-top.c:274:
+		float pcnt = 100.0*(float)line->count[sym_counter]/(float)total;
 		                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1545: FILE: tools/perf/builtin-top.c:274:
+		float pcnt = 100.0*(float)line->count[sym_counter]/(float)total;
 		                                                  ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1595: FILE: tools/perf/builtin-top.c:324:
+			else more++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1658: FILE: tools/perf/builtin-top.c:454:
+	else for (counter = 0; counter < nr_counters; counter++) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1658: FILE: tools/perf/builtin-top.c:454:
+	else for (counter = 0; counter < nr_counters; counter++) {

ERROR:SPACING: space required before the open parenthesis '('
#1709: FILE: tools/perf/builtin-top.c:532:
+	while(*p) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1764: FILE: tools/perf/builtin-top.c:587:
+	if (!found) {
[...]
+	} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1768: FILE: tools/perf/builtin-top.c:591:
+		return;
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#1768: FILE: tools/perf/builtin-top.c:591:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1780: FILE: tools/perf/builtin-top.c:603:
+		struct symbol *sym = (struct symbol *)(sym_filter_entry+1);
 		                                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1781: FILE: tools/perf/builtin-top.c:604:
+		struct symbol *sym = (struct symbol *)(sym_filter_entry+1);
+		name = sym->name;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 114 exceeds 100 columns
#1789: FILE: tools/perf/builtin-top.c:612:
+		fprintf(stdout, "\t[E]     active event counter.              \t(%s)\n", event_name(sym_counter));

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1794: FILE: tools/perf/builtin-top.c:617:
+		fprintf(stdout, "\t[F]     annotate display filter (percent). \t(%d%%)\n", sym_pcnt_filter);

WARNING:LONG_LINE_STRING: line length of 104 exceeds 100 columns
#1795: FILE: tools/perf/builtin-top.c:618:
+		fprintf(stdout, "\t[s]     annotate symbol.                   \t(%s)\n", name?: "NULL");

ERROR:SPACING: spaces required around that '?:' (ctx:VxW)
#1795: FILE: tools/perf/builtin-top.c:618:
+		fprintf(stdout, "\t[s]     annotate symbol.                   \t(%s)\n", name?: "NULL");
 		                                                                             ^

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#1800: FILE: tools/perf/builtin-top.c:623:
+		fprintf(stdout, "\t[w]     toggle display weighted/count[E]r. \t(%d)\n", display_weighted ? 1 : 0);

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1808: FILE: tools/perf/builtin-top.c:631:
+	switch (c) {
+		case 'd':
+		case 'e':
+		case 'f':
+		case 'z':
+		case 'q':
+		case 'Q':
[...]
+		case 'E':
+		case 'w':
[...]
+		case 'F':
+		case 's':
+		case 'S':

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#1853: FILE: tools/perf/builtin-top.c:676:
+	switch (c) {
+		case 'd':
[...]
+		case 'e':
[...]
+		case 'E':
[...]
+		case 'f':
[...]
+		case 'F':
[...]
+		case 'q':
+		case 'Q':
[...]
+		case 's':
[...]
+		case 'S':
[...]
+		case 'w':
[...]
+		case 'z':

CHECK:BRACES: braces {} should be used on all arms of this statement
#1861: FILE: tools/perf/builtin-top.c:684:
+			if (nr_counters > 1) {
[...]
+			} else sym_counter = 0;
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1871: FILE: tools/perf/builtin-top.c:694:
+					fprintf(stderr, "Sorry, no such event, using %s.\n", event_name(0));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1875: FILE: tools/perf/builtin-top.c:698:
+			} else sym_counter = 0;

WARNING:LONG_LINE_STRING: line length of 105 exceeds 100 columns
#1881: FILE: tools/perf/builtin-top.c:704:
+			prompt_percent(&sym_pcnt_filter, "Enter details display event filter (percent)");

CHECK:BRACES: braces {} should be used on all arms of this statement
#1891: FILE: tools/perf/builtin-top.c:714:
+			if (!sym_filter_entry)
[...]
+			else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1893: FILE: tools/perf/builtin-top.c:716:
+				break;
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#1893: FILE: tools/perf/builtin-top.c:716:
+			else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2018: FILE: tools/perf/builtin-top.c:1157:
+	OPT_STRING('s', "sym-annotate", &sym_filter, "symbol name",
+		    "symbol to annotate - requires -k option"),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2232: FILE: tools/perf/util/parse-events.c:130:
+	snprintf(evt_path, MAXPATHLEN, "%s/%s/%s/id", debugfs_path,
+			sys_dir->d_name, evt_dir->d_name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2278: FILE: tools/perf/util/parse-events.h:13:
+extern char *__event_name(int type, u64 config);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#2335: FILE: tools/perf/util/symbol.c:745:
+	if (self == NULL || self->origin == DSO__ORIG_NOT_FOUND)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000086265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 20 warnings, 22 checks, 2130 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000086265.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
