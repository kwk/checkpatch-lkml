WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
but also wide range of kernel, including VFS, MM, and process management, etc.

WARNING:TYPO_SPELLING: 'declarated' may be misspelled - perhaps 'declared'?
#111: 
   Some spinlocks are declarated with __cacheline_aligned_in_smp.
                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#117: 
#define P(spin) do {				    \

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#135: 
# Running sched/messaging benchmark...

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#136: 
# 20 sender and receiver processes per group

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#137: 
# 20 groups == 800 processes run

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#142: 
# 20 sender and receiver processes per group

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#143: 
# 20 groups == 800 processes run

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#163: 
# And I'm working of 'perf bench mem memcpy' concurrently :)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#176: FILE: fs/block_dev.c:415:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(bdev_lock);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bdev_lock' should also have an identifier name
#176: FILE: fs/block_dev.c:415:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(bdev_lock);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: fs/dcache.c:41:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(dcache_lock);$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#189: FILE: fs/dcache.c:41:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(dcache_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'dcache_lock' should also have an identifier name
#189: FILE: fs/dcache.c:41:
+ __cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(dcache_lock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#202: FILE: fs/file_table.c:34:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(files_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'files_lock' should also have an identifier name
#202: FILE: fs/file_table.c:34:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(files_lock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#215: FILE: fs/namespace.c:41:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(vfsmount_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'vfsmount_lock' should also have an identifier name
#215: FILE: fs/namespace.c:41:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(vfsmount_lock);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#228: FILE: include/asm-generic/vmlinux.lds.h:158:
+^IVMLINUX_SYMBOL(__lock_data_start) = .; ^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: include/asm-generic/vmlinux.lds.h:159:
+        *(.spinlock.data) ^I^I    ^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: include/asm-generic/vmlinux.lds.h:159:
+        *(.spinlock.data) ^I^I    ^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: include/asm-generic/vmlinux.lds.h:159:
+        *(.spinlock.data) ^I^I    ^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#230: FILE: include/asm-generic/vmlinux.lds.h:160:
+        VMLINUX_SYMBOL(__lock_data_end) = .;^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#230: FILE: include/asm-generic/vmlinux.lds.h:160:
+        VMLINUX_SYMBOL(__lock_data_end) = .;^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#415: FILE: include/linux/spinlock_types.h:76:
+          ^I^I^I.shortest = ATOMIC64_INIT(LONG_MAX),^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: include/linux/spinlock_types.h:76:
+          ^I^I^I.shortest = ATOMIC64_INIT(LONG_MAX),^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#415: FILE: include/linux/spinlock_types.h:76:
+          ^I^I^I.shortest = ATOMIC64_INIT(LONG_MAX),^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#424: FILE: include/linux/spinlock_types.h:103:
+#define DEFINE_SPINLOCK(x)	spinlock_t __section(.spinlock.data) x = __SPIN_LOCK_UNLOCKED(x)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#425: FILE: include/linux/spinlock_types.h:104:
+#define DEFINE_SPINLOCK_RAW(x)	spinlock_t x = __SPIN_LOCK_UNLOCKED(x)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#442: FILE: kernel/fork.c:418:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(mmlist_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'mmlist_lock' should also have an identifier name
#442: FILE: kernel/fork.c:418:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(mmlist_lock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#455: FILE: kernel/pid.c:113:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(pidmap_lock);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'pidmap_lock' should also have an identifier name
#455: FILE: kernel/pid.c:113:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(pidmap_lock);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#483: FILE: kernel/spinlock.c:397:
+extern char __lock_data_end;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#485: FILE: kernel/spinlock.c:399:
+extern spinlock_t bdev_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#486: FILE: kernel/spinlock.c:400:
+extern spinlock_t dcache_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#487: FILE: kernel/spinlock.c:401:
+extern spinlock_t files_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#488: FILE: kernel/spinlock.c:402:
+extern spinlock_t vfsmount_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#489: FILE: kernel/spinlock.c:403:
+extern spinlock_t mmlist_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#490: FILE: kernel/spinlock.c:404:
+extern spinlock_t pidmap_lock;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#491: FILE: kernel/spinlock.c:405:
+extern spinlock_t kernel_flag;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#496: FILE: kernel/spinlock.c:410:
+	spinlock_t *spin;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#499: FILE: kernel/spinlock.c:413:
+	seq_printf(m, "name: count longest shortest total average\n");

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#510: FILE: kernel/spinlock.c:424:
+		seq_printf(m, "%s: %ld %ld %ld %ld %ld\n", spin->dep_map.name, count, atomic64_read(&spin->longest),

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#511: FILE: kernel/spinlock.c:425:
+			   (shortest == LONG_MAX) ? 0 : shortest , total, count ? total / count : 0);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#511: FILE: kernel/spinlock.c:425:
+			   (shortest == LONG_MAX) ? 0 : shortest , total, count ? total / count : 0);
 			                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'spin' - possible side-effects?
#514: FILE: kernel/spinlock.c:428:
+#define P(spin) do {				    \
+		count = atomic64_read(&spin.count); \
+		total = atomic64_read(&spin.total); \
+		shortest = atomic64_read(&spin.shortest); \
+		seq_printf(m, "%s: %ld %ld %ld %ld %ld\n", spin.dep_map.name, count, atomic64_read(&spin.longest), \
+			  (shortest == LONG_MAX) ? 0 : shortest, total, count ? total / count : 0); \
+	}while(0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'spin' may be better as '(spin)' to avoid precedence issues
#514: FILE: kernel/spinlock.c:428:
+#define P(spin) do {				    \
+		count = atomic64_read(&spin.count); \
+		total = atomic64_read(&spin.total); \
+		shortest = atomic64_read(&spin.shortest); \
+		seq_printf(m, "%s: %ld %ld %ld %ld %ld\n", spin.dep_map.name, count, atomic64_read(&spin.longest), \
+			  (shortest == LONG_MAX) ? 0 : shortest, total, count ? total / count : 0); \
+	}while(0)

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#518: FILE: kernel/spinlock.c:432:
+		seq_printf(m, "%s: %ld %ld %ld %ld %ld\n", spin.dep_map.name, count, atomic64_read(&spin.longest), \

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#519: FILE: kernel/spinlock.c:433:
+			  (shortest == LONG_MAX) ? 0 : shortest, total, count ? total / count : 0); \

ERROR:SPACING: space required after that close brace '}'
#520: FILE: kernel/spinlock.c:434:
+	}while(0)

ERROR:SPACING: space required before the open parenthesis '('
#520: FILE: kernel/spinlock.c:434:
+	}while(0)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#535: FILE: kernel/spinlock.c:449:
+static int spinlock_stats_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#537: FILE: kernel/spinlock.c:451:
+	return single_open(filp, spinlock_stats_show, NULL);
 	                   ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#540: FILE: kernel/spinlock.c:454:
+static struct file_operations spinlock_stats_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: kernel/spinlock.c:464:
+	debugfs_create_file("spinlock_stats", 0644, NULL, NULL,
+			&spinlock_stats_fops);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#566: FILE: lib/kernel_lock.c:23:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(kernel_flag);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_flag' should also have an identifier name
#566: FILE: lib/kernel_lock.c:23:
+__cacheline_aligned_in_smp DEFINE_SPINLOCK_RAW(kernel_flag);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 46 warnings, 6 checks, 338 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000048913.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
