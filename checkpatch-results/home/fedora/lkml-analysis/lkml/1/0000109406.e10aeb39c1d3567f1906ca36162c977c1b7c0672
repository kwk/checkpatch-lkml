CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct elf_fdpic_params *' should also have an identifier name
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct elf32_phdr *' should also have an identifier name
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#60: FILE: arch/blackfin/include/asm/elf.h:130:
+extern int elf_fdpic_plat_process_phdr(struct mm_struct *, struct elf_fdpic_params *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#61: FILE: arch/blackfin/include/asm/elf.h:131:
+                                       struct elf32_phdr *, unsigned long *, unsigned long *);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#61: FILE: arch/blackfin/include/asm/elf.h:131:
+                                       struct elf32_phdr *, unsigned long *, unsigned long *);$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#79: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#84: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#96: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:13:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:17:
+                                struct elf_fdpic_params *params,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:17:
+                                struct elf_fdpic_params *params,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:18:
+                                struct elf32_phdr *phdr,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:18:
+                                struct elf32_phdr *phdr,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:19:
+                                unsigned long *maddr, unsigned long *disp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:19:
+                                unsigned long *maddr, unsigned long *disp)$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#115: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:32:
+	if (((e_flags & EF_BFIN_CODE_IN_L1) || p_vaddr == 0xffa00000) &&
+	    (p_flags & (PF_W | PF_X)) == PF_X)
+	{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#121: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:38:
+	} else if (((e_flags & EF_BFIN_DATA_IN_L1) ||
+	            p_vaddr == 0xff700000 ||
+	            p_vaddr == 0xff800000 ||
+	            p_vaddr == 0xff900000) &&
+	           (p_flags & (PF_X | PF_W)) == PF_W)
+	{

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:39:
+^I            p_vaddr == 0xff700000 ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:40:
+^I            p_vaddr == 0xff800000 ||$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:41:
+^I            p_vaddr == 0xff900000) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:42:
+^I           (p_flags & (PF_X | PF_W)) == PF_W)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#145: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:62:
+		void *sram_addr = sram_alloc_with_lsl(phdr->p_memsz, flag);
+		if (sram_addr == NULL) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sram_addr"
#145: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:62:
+		if (sram_addr == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#146: FILE: arch/blackfin/kernel/binfmt_elf_fdpic.c:63:
+			printk(KERN_ERR "elf_fdpic: not enough %s sram\n", type);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 13 warnings, 3 checks, 112 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109406.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
