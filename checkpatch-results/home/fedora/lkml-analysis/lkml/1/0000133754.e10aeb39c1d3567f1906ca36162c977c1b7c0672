WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#50: FILE: Makefile:4:
+EXTRAVERSION = .2
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#191: FILE: arch/x86/boot/memory.c:31:
+		/* Important: %edx and %esi are clobbered by some BIOSes,
+		   so they must be either used for the error output

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c:687:
+		static int print_once;
+		policy->cpuinfo.transition_latency = 20 * 1000;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#217: FILE: arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c:690:
+			printk(KERN_INFO "Capping off P-state tranision latency"

WARNING:SPLIT_STRING: quoted string split across lines
#218: FILE: arch/x86/kernel/cpu/cpufreq/acpi-cpufreq.c:691:
+			printk(KERN_INFO "Capping off P-state tranision latency"
+				" at 20 uS\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: arch/x86/kvm/i8254.c:609:
+		kvm_unregister_irq_mask_notifier(kvm, 0,
+					       &kvm->arch.vpit->mask_notifier);

WARNING:TYPO_SPELLING: 'sibiling' may be misspelled - perhaps 'sibling'?
#671: FILE: drivers/acpi/dock.c:1152:
+	list_for_each_entry_safe(dock_station, tmp, &dock_stations, sibiling)
 	                                                            ^^^^^^^^

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#760: FILE: drivers/char/vt.c:2274:
+				if ((!(vc->vc_utf && !vc->vc_disp_ctrl) || c < 128) && !(c & ~charmask)) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#808: FILE: drivers/gpu/drm/i915/i915_dma.c:61:
+			struct drm_i915_master_private *master_priv = dev->primary->master->driver_priv;

WARNING:LINE_SPACING: Missing a blank line after declarations
#809: FILE: drivers/gpu/drm/i915/i915_dma.c:62:
+			struct drm_i915_master_private *master_priv = dev->primary->master->driver_priv;
+			if (master_priv->sarea_priv)

CHECK:BIT_MACRO: Prefer using the BIT macro
#894: FILE: drivers/gpu/drm/i915/i915_reg.h:634:
+#define CRT_HOTPLUG_ACTIVATION_PERIOD_64	(1 << 8)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#896: FILE: drivers/gpu/drm/i915/i915_reg.h:636:
+#define CRT_HOTPLUG_DAC_ON_TIME_4M		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#898: FILE: drivers/gpu/drm/i915/i915_reg.h:638:
+#define CRT_HOTPLUG_VOLTAGE_COMPARE_50		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#903: FILE: drivers/gpu/drm/i915/i915_reg.h:643:
+#define CRT_HOTPLUG_DETECT_DELAY_2G		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#905: FILE: drivers/gpu/drm/i915/i915_reg.h:645:
+#define CRT_HOTPLUG_DETECT_VOLTAGE_475MV	(1 << 2)

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#962: FILE: drivers/gpu/drm/i915/intel_crt.c:166:
+			msleep(1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1014: FILE: drivers/gpu/drm/i915/intel_tv.c:1571:
+	if (property == dev->mode_config.tv_left_margin_property &&
+		tv_priv->margin[TV_MARGIN_LEFT] != val) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1052: FILE: drivers/gpu/drm/i915/intel_tv.c:1603:
+		drm_crtc_helper_set_mode(crtc, &crtc->mode, crtc->x,
+				crtc->y, crtc->fb);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1199: FILE: drivers/md/dm-bio-record.h:25:
+	unsigned bv_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1200: FILE: drivers/md/dm-bio-record.h:26:
+	unsigned bv_offset;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1215: FILE: drivers/md/dm-bio-record.h:41:
+	unsigned i;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1231: FILE: drivers/md/dm-bio-record.h:57:
+	unsigned i;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1406: FILE: drivers/md/dm-raid1.c:770:
+	ms->read_record_pool = mempool_create_slab_pool(MIN_READ_RECORDS,
+						_dm_raid1_read_record_cache);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1613: FILE: drivers/md/dm-table.c:413:
+	dd_new = dd_old = *dd;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1696: FILE: drivers/md/raid1.c:123:
+			bio->bi_vcnt = i+1;
 			                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1707: FILE: drivers/md/raid1.c:139:
+	for (j=0 ; j < pi->raid_disks; j++)
 	      ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1708: FILE: drivers/md/raid1.c:140:
+		for (i=0; i < r1_bio->bios[j]->bi_vcnt ; i++)
 		      ^

CHECK:CAMELCASE: Avoid CamelCase: <pCfg>
#1781: FILE: drivers/message/fusion/mptbase.c:5937:
+	init_timer_on_stack(&pCfg->timer);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1851: FILE: drivers/net/bonding/bond_sysfs.c:727:
+				for (j = i; (j < (BOND_MAX_ARP_TARGETS-1)) && targets[j+1]; j++)
 				                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1851: FILE: drivers/net/bonding/bond_sysfs.c:727:
+				for (j = i; (j < (BOND_MAX_ARP_TARGETS-1)) && targets[j+1]; j++)
 				                                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1852: FILE: drivers/net/bonding/bond_sysfs.c:728:
+					targets[j] = targets[j+1];
 					                      ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#1888: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:720:
+^I                       sizeof(struct ixgbe_ring), GFP_KERNEL);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:CODE_INDENT: code indent should use tabs where possible
#1902: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:732:
+^I^I^I                               &temp_tx_ring[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1908: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:737:
+^I^I^I^I^I                        &temp_tx_ring[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1934: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:747:
+^I                       sizeof(struct ixgbe_ring), GFP_KERNEL);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '!temp_rx_ring'
#1935: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:748:
+	if ((!temp_rx_ring) && (need_update)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#1952: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:762:
+^I^I^I                               &temp_rx_ring[i]);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1958: FILE: drivers/net/ixgbe/ixgbe_ethtool.c:767:
+^I^I^I^I^I                      &temp_rx_ring[i]);$

CHECK:CAMELCASE: Avoid CamelCase: <IntrMask>
#2021: FILE: drivers/net/r8169.c:2078:
+	RTL_W16(IntrMask, 0x0000);

CHECK:CAMELCASE: Avoid CamelCase: <IntrStatus>
#2029: FILE: drivers/net/r8169.c:2090:
+	RTL_W16(IntrStatus, 0xffff);

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#2315: FILE: drivers/platform/x86/acer-wmi.c:229:
+static struct dmi_system_id __devinitdata acer_blacklist[] = {

WARNING:MISPLACED_INIT: __devinitdata should be placed after acer_blacklist[]
#2315: FILE: drivers/platform/x86/acer-wmi.c:229:
+static struct dmi_system_id __devinitdata acer_blacklist[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2341: FILE: drivers/platform/x86/acer-wmi.c:1277:
+		printk(ACER_INFO "Blacklisted hardware detected - "

WARNING:SPLIT_STRING: quoted string split across lines
#2342: FILE: drivers/platform/x86/acer-wmi.c:1278:
+		printk(ACER_INFO "Blacklisted hardware detected - "
+				"not loading\n");

CHECK:CAMELCASE: Avoid CamelCase: <Sg_request>
#2422: FILE: drivers/scsi/sg.c:193:
+			int read_only, int sg_io_owned, Sg_request **o_srp);

CHECK:CAMELCASE: Avoid CamelCase: <Sg_device>
#2437: FILE: drivers/scsi/sg.c:207:
+static Sg_device *sg_lookup_dev(int dev);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2525: FILE: drivers/scsi/sg.c:565:
+		return sg_new_write(sfp, filp, buf, count,
 		                         ^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sfp"
#2650: FILE: drivers/scsi/sg.c:1265:
+	if (WARN_ON(sfp == NULL))

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2656: FILE: drivers/scsi/sg.c:1270:
+		printk(KERN_INFO "sg_rq_end_io: device detached\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2771: FILE: drivers/scsi/sg.c:1509:
+	SCSI_LOG_TIMEOUT(3,
+		printk("sg_device_destroy: %s\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2771: FILE: drivers/scsi/sg.c:1509:
+		printk("sg_device_destroy: %s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sg_device_destroy', this function's name, in a string
#2771: FILE: drivers/scsi/sg.c:1509:
+		printk("sg_device_destroy: %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2772: FILE: drivers/scsi/sg.c:1510:
+		printk("sg_device_destroy: %s\n",
+			sdp->disk->disk_name));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2794: FILE: drivers/scsi/sg.c:1526:
+	SCSI_LOG_TIMEOUT(3, printk("sg_remove: %s\n", sdp->disk->disk_name));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sg_remove', this function's name, in a string
#2794: FILE: drivers/scsi/sg.c:1526:
+	SCSI_LOG_TIMEOUT(3, printk("sg_remove: %s\n", sdp->disk->disk_name));

CHECK:BRACES: Unbalanced braces around else statement
#2877: FILE: drivers/scsi/sg.c:1694:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2958: FILE: drivers/scsi/sg.c:2093:
+		SCSI_LOG_TIMEOUT(6,
+			printk("sg_remove_sfp:    bufflen=%d, k_use_sg=%d\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2958: FILE: drivers/scsi/sg.c:2093:
+			printk("sg_remove_sfp:    bufflen=%d, k_use_sg=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2959: FILE: drivers/scsi/sg.c:2094:
+			printk("sg_remove_sfp:    bufflen=%d, k_use_sg=%d\n",
+				(int) sfp->reserve.bufflen,

CHECK:SPACING: No space is necessary after a cast
#2959: FILE: drivers/scsi/sg.c:2094:
+				(int) sfp->reserve.bufflen,

CHECK:SPACING: No space is necessary after a cast
#2960: FILE: drivers/scsi/sg.c:2095:
+				(int) sfp->reserve.k_use_sg));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2965: FILE: drivers/scsi/sg.c:2100:
+	SCSI_LOG_TIMEOUT(6,
+		printk("sg_remove_sfp: %s, sfp=0x%p\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2965: FILE: drivers/scsi/sg.c:2100:
+		printk("sg_remove_sfp: %s, sfp=0x%p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2966: FILE: drivers/scsi/sg.c:2101:
+		printk("sg_remove_sfp: %s, sfp=0x%p\n",
+			sdp->disk->disk_name,

CHECK:BRACES: braces {} should be used on all arms of this statement
#3075: FILE: drivers/scsi/sg.c:2195:
+	if (!sdp)
[...]
+	else if (sdp->detached) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3082: FILE: drivers/scsi/sg.c:2202:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fp"
#3144: FILE: drivers/scsi/sg.c:2521:
+	for (k = 0, fp = sdp->headfp; fp != NULL; ++k, fp = fp->nextfp) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "srp"
#3155: FILE: drivers/scsi/sg.c:2533:
+				srp != NULL;

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#3210: FILE: drivers/scsi/sg.c:2599:
+			seq_printf(s, "detached pending close ");

WARNING:SIZEOF_PARENTHESIS: sizeof x should be sizeof(x)
#3246: FILE: drivers/spi/spi.c:672:
+	memset(x, 0, sizeof x);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3366: FILE: drivers/usb/serial/ti_usb_3410_5052.c:1221:
+			usb_serial_debug_data(debug, dev, __func__,
+				urb->actual_length, urb->transfer_buffer);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3370: FILE: drivers/usb/serial/ti_usb_3410_5052.c:1225:
+				dbg("%s - port closed, dropping data",
+					__func__);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3373: FILE: drivers/usb/serial/ti_usb_3410_5052.c:1228:
+				ti_recv(&urb->dev->dev, tty,
 						urb->transfer_buffer,

ERROR:SPACING: space prohibited before that close parenthesis ')'
#3403: FILE: drivers/usb/storage/unusual_devs.h:1228:
+		US_FL_IGNORE_RESIDUE | US_FL_MAX_SECTORS_64 ),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3542: FILE: drivers/video/fbmem.c:1556:
 
+

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3589: FILE: drivers/virtio/virtio_balloon.c:193:
 					 (diff = towards_target(vb)) != 0
+					 || kthread_should_stop()

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3590: FILE: drivers/virtio/virtio_balloon.c:194:
+					 || kthread_should_stop()
+					 || freezing(current));

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3603: FILE: fs/dquot.c:796:
+		if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3603: FILE: fs/dquot.c:796:
+		if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 		                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3616: FILE: fs/drop_caches.c:21:
+		if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 		                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3616: FILE: fs/drop_caches.c:21:
+		if (inode->i_state & (I_FREEING|I_CLEAR|I_WILL_FREE))
 		                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3652: FILE: fs/fs-writeback.c:542:
+					(I_FREEING|I_CLEAR|I_WILL_FREE|I_NEW))
 					          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3652: FILE: fs/fs-writeback.c:542:
+					(I_FREEING|I_CLEAR|I_WILL_FREE|I_NEW))
 					                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3652: FILE: fs/fs-writeback.c:542:
+					(I_FREEING|I_CLEAR|I_WILL_FREE|I_NEW))
 					                              ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#3673: FILE: fs/hugetlbfs/inode.c:844:
+ ^Ireturn -EINVAL;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3673: FILE: fs/hugetlbfs/inode.c:844:
+ ^Ireturn -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3673: FILE: fs/hugetlbfs/inode.c:844:
+ ^Ireturn -EINVAL;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3687: FILE: fs/nfs/nfs3xdr.c:720:
+		req->rq_slen = xdr_adjust_iovec(req->rq_svec,
+				p + XDR_QUADLEN(args->len));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3836: FILE: include/linux/interrupt.h:277:
+extern void wakeup_softirqd(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BRACES: braces {} should be used on all arms of this statement
#3974: FILE: kernel/hrtimer.c:658:
+		if (wakeup) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3978: FILE: kernel/hrtimer.c:662:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4016: FILE: kernel/hrtimer.c:897:
+int __hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
+		unsigned long delta_ns, const enum hrtimer_mode mode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4045: FILE: kernel/hrtimer.c:958:
+int hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
+		unsigned long delta_ns, const enum hrtimer_mode mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4144: FILE: kernel/sched.c:247:
+		__hrtimer_start_range_ns(&rt_b->rt_period_timer, soft, delta,
+				HRTIMER_MODE_ABS, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4154: FILE: kernel/sched.c:1140:
+	__hrtimer_start_range_ns(&rq->hrtick_timer, ns_to_ktime(delay), 0,
+			HRTIMER_MODE_REL, 0);

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#4292: FILE: kernel/sysctl.c:1416:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

ERROR:CODE_INDENT: code indent should use tabs where possible
#4394: FILE: net/ipv4/netfilter/ip_tables.c:500:
+^I^I^I    ^I^I    IPT_STANDARD_TARGET) == 0) &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4394: FILE: net/ipv4/netfilter/ip_tables.c:500:
+^I^I^I    ^I^I    IPT_STANDARD_TARGET) == 0) &&$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4394: FILE: net/ipv4/netfilter/ip_tables.c:500:
+				if ((strcmp(t->target.u.user.name,
+			    		    IPT_STANDARD_TARGET) == 0) &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4424: FILE: net/netrom/af_netrom.c:1086:
+	/* Build a packet - the conventional user limit is 236 bytes. We can
+	   do ludicrously large NetROM frames but must not overflow */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4424: FILE: net/netrom/af_netrom.c:1086:
+	   do ludicrously large NetROM frames but must not overflow */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!value"
#4495: FILE: security/smack/smack_lsm.c:1435:
+	if (value == NULL || size > SMK_LABELLEN || size == 0)

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#4509: FILE: sound/pci/hda/hda_codec.c:2007:
+		/* parm may contain the verb stuff for get/set amp */
 		   ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#4510: FILE: sound/pci/hda/hda_codec.c:2008:
+		verb = verb | (parm >> 8);
 		               ^^^^

WARNING:TYPO_SPELLING: 'parm' may be misspelled - perhaps 'param'?
#4511: FILE: sound/pci/hda/hda_codec.c:2009:
+		parm &= 0xff;
 		^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4617: FILE: virt/kvm/kvm_main.c:586:
+		struct page *page = compound_head(pfn_to_page(pfn));
+		return PageReserved(page);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 39 warnings, 57 checks, 3871 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000133754.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
