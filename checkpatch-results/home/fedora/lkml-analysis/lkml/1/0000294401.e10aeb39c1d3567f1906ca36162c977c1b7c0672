WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#73: FILE: arch/ia64/kernel/mca.c:1192:
+ *
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#76: FILE: arch/ia64/kernel/mca.c:1195:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#85: FILE: arch/ia64/kernel/mca.c:1204:
+		p = &__per_cpu_idtrs[cpu][iord-1][i];
 		                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#151: FILE: arch/ia64/mm/tlb.c:29:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#184: FILE: arch/ia64/mm/tlb.c:221:
+		printk(KERN_ERR "ia64_pal_vm_summary=%ld\n", status);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: arch/ia64/mm/tlb.c:225:
+	per_cpu(ia64_tr_num, cpu) = vm_info_1.pal_vm_info_1_s.max_itr_entry+1;
 	                                                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#190: FILE: arch/ia64/mm/tlb.c:227:
+				(vm_info_1.pal_vm_info_1_s.max_dtr_entry+1))
 				                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#192: FILE: arch/ia64/mm/tlb.c:229:
+				vm_info_1.pal_vm_info_1_s.max_dtr_entry+1;
 				                                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#195: FILE: arch/ia64/mm/tlb.c:232:
+		printk(KERN_DEBUG"TR register number exceeds IA64_TR_ALLOC_MAX!"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#195: FILE: arch/ia64/mm/tlb.c:232:
+		printk(KERN_DEBUG"TR register number exceeds IA64_TR_ALLOC_MAX!"

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:SPLIT_STRING: quoted string split across lines
#196: FILE: arch/ia64/mm/tlb.c:233:
+		printk(KERN_DEBUG"TR register number exceeds IA64_TR_ALLOC_MAX!"
+			"IA64_TR_ALLOC_MAX should be extended\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#211: FILE: arch/ia64/mm/tlb.c:248:
+	u64 va_end = va + (1<<log_size) - 1;
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#216: FILE: arch/ia64/mm/tlb.c:253:
+	tr_end = p->ifa + (1<<tr_log_size) - 1;
 	                    ^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#222: FILE: arch/ia64/mm/tlb.c:259:
+
+}

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#229: FILE: arch/ia64/mm/tlb.c:266:
+ * va ^I: virtual address.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#230: FILE: arch/ia64/mm/tlb.c:267:
+ * pte ^I: pte entries inserted.$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#253: FILE: arch/ia64/mm/tlb.c:290:
+					printk(KERN_DEBUG"Overlapped Entry"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#253: FILE: arch/ia64/mm/tlb.c:290:
+					printk(KERN_DEBUG"Overlapped Entry"

WARNING:TYPO_SPELLING: 'Reigster' may be misspelled - perhaps 'Register'?
#254: FILE: arch/ia64/mm/tlb.c:291:
+						"Inserted for TR Reigster!!\n");
 						                 ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#254: FILE: arch/ia64/mm/tlb.c:291:
+					printk(KERN_DEBUG"Overlapped Entry"
+						"Inserted for TR Reigster!!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#254: FILE: arch/ia64/mm/tlb.c:291:
+					printk(KERN_DEBUG"Overlapped Entry"
+						"Inserted for TR Reigster!!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#265: FILE: arch/ia64/mm/tlb.c:302:
+					printk(KERN_DEBUG"Overlapped Entry"

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#265: FILE: arch/ia64/mm/tlb.c:302:
+					printk(KERN_DEBUG"Overlapped Entry"

WARNING:TYPO_SPELLING: 'Reigster' may be misspelled - perhaps 'Register'?
#266: FILE: arch/ia64/mm/tlb.c:303:
+						"Inserted for TR Reigster!!\n");
 						                 ^^^^^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#266: FILE: arch/ia64/mm/tlb.c:303:
+					printk(KERN_DEBUG"Overlapped Entry"
+						"Inserted for TR Reigster!!\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#266: FILE: arch/ia64/mm/tlb.c:303:
+					printk(KERN_DEBUG"Overlapped Entry"
+						"Inserted for TR Reigster!!\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: arch/ia64/mm/tlb.c:321:
+			if (!(__per_cpu_idtrs[cpu][0][i].pte & 0x1) &&
+				!(__per_cpu_idtrs[cpu][1][i].pte & 0x1))

WARNING:TYPO_SPELLING: 'hander' may be misspelled - perhaps 'handler'?
#298: FILE: arch/ia64/mm/tlb.c:335:
+	/*Record tr info for mca hander use!*/
 	                         ^^^^^^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#347: FILE: arch/ia64/mm/tlb.c:384:
+		if ((p->pte&0x1) && is_tr_overlap(p, p->ifa, p->itir>>2)) {
 		           ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#347: FILE: arch/ia64/mm/tlb.c:384:
+		if ((p->pte&0x1) && is_tr_overlap(p, p->ifa, p->itir>>2)) {
 		                                                    ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#349: FILE: arch/ia64/mm/tlb.c:386:
+			ia64_ptr(0x1, p->ifa, p->itir>>2);
 			                             ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#356: FILE: arch/ia64/mm/tlb.c:393:
+		if ((p->pte & 0x1) && is_tr_overlap(p, p->ifa, p->itir>>2)) {
 		                                                      ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#358: FILE: arch/ia64/mm/tlb.c:395:
+			ia64_ptr(0x2, p->ifa, p->itir>>2);
 			                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: arch/ia64/mm/tlb.c:402:
+		if ((__per_cpu_idtrs[cpu][0][i].pte & 0x1) ||
+				(__per_cpu_idtrs[cpu][1][i].pte & 0x1))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#379: FILE: include/asm-ia64/kregs.h:34:
+#define IA64_TR_ALLOC_BASE^I2 ^I/* itr&dtr: Base of dynamic TR resource*/$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#380: FILE: include/asm-ia64/kregs.h:35:
+#define IA64_TR_ALLOC_MAX^I32 ^I/* Max number for dynamic use*/$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: include/asm-ia64/tlb.h:74:
+extern int ia64_itr_entry(u64 target_mask, u64 va, u64 pte, u64 log_size);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: include/asm-ia64/tlb.h:75:
+extern void ia64_ptr_entry(u64 target_mask, int slot);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#406: FILE: include/asm-ia64/tlb.h:80:
+/*
+ region register macros

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#417: FILE: include/asm-ia64/tlb.h:91:
+#define RR_TO_RID(val) ^I((val >> 8) & 0xffffff)$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#417: FILE: include/asm-ia64/tlb.h:91:
+#define RR_TO_RID(val) 	((val >> 8) & 0xffffff)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 22 checks, 347 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294401.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
