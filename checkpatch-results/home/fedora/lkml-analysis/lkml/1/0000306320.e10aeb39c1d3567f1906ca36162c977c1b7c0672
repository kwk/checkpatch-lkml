WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#66: FILE: include/linux/memcontrol.h:41:
+#define PAGE_CGROUP_LOCK_BIT ^I0x0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#68: FILE: include/linux/memcontrol.h:43:
+#define PAGE_CGROUP_LOCK ^I(1 << PAGE_CGROUP_LOCK_BIT)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#68: FILE: include/linux/memcontrol.h:43:
+#define PAGE_CGROUP_LOCK 	(1 << PAGE_CGROUP_LOCK_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#86: FILE: include/linux/memcontrol.h:61:
+};
+#define PAGE_CGROUP_FLAG_CACHE	(0x1)	/* charged as cache */

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: include/linux/memcontrol.h:144:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/memcontrol.h:147:
+extern void mem_cgroup_move_lists(struct page *page, bool active);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/memcontrol.h:148:
+extern unsigned long mem_cgroup_isolate_pages(unsigned long nr_to_scan,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: include/linux/memcontrol.h:149:
+extern unsigned long mem_cgroup_isolate_pages(unsigned long nr_to_scan,
+					struct list_head *dst,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#185: FILE: include/linux/memcontrol.h:154:
+extern void mem_cgroup_out_of_memory(struct mem_cgroup *mem, gfp_t gfp_mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#194: FILE: include/linux/memcontrol.h:163:
+extern int mem_cgroup_calc_mapped_ratio(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#195: FILE: include/linux/memcontrol.h:164:
+extern long mem_cgroup_reclaim_imbalance(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#197: FILE: include/linux/memcontrol.h:166:
+extern int mem_cgroup_get_reclaim_priority(struct mem_cgroup *mem);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#198: FILE: include/linux/memcontrol.h:167:
+extern void mem_cgroup_note_reclaim_priority(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: include/linux/memcontrol.h:168:
+extern void mem_cgroup_note_reclaim_priority(struct mem_cgroup *mem,
+							int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#200: FILE: include/linux/memcontrol.h:169:
+extern void mem_cgroup_record_reclaim_priority(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: include/linux/memcontrol.h:170:
+extern void mem_cgroup_record_reclaim_priority(struct mem_cgroup *mem,
+							int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#203: FILE: include/linux/memcontrol.h:172:
+extern long mem_cgroup_calc_reclaim_active(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: include/linux/memcontrol.h:173:
+extern long mem_cgroup_calc_reclaim_active(struct mem_cgroup *mem,
+				struct zone *zone, int priority);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#205: FILE: include/linux/memcontrol.h:174:
+extern long mem_cgroup_calc_reclaim_inactive(struct mem_cgroup *mem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#206: FILE: include/linux/memcontrol.h:175:
+extern long mem_cgroup_calc_reclaim_inactive(struct mem_cgroup *mem,
+				struct zone *zone, int priority);

CHECK:SPACING: No space is necessary after a cast
#704: FILE: mm/memcontrol.c:809:
+	return (struct page_cgroup *) (page->page_cgroup & ~PAGE_CGROUP_LOCK);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: mm/memcontrol.c:824:
+static int mem_cgroup_charge_common(struct page *page, struct mm_struct *mm,
+				gfp_t gfp_mask, enum charge_type ctype)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*pc)...) over kzalloc(sizeof(struct page_cgroup)...)
#756: FILE: mm/memcontrol.c:861:
+	pc = kzalloc(sizeof(struct page_cgroup), gfp_mask);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pc"
#757: FILE: mm/memcontrol.c:862:
+	if (pc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#801: FILE: mm/memcontrol.c:906:
+		congestion_wait(WRITE, HZ/10);
 		                         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#857: FILE: mm/memcontrol.c:962:
+int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,
+				gfp_t gfp_mask)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pc->ref_cnt'
#890: FILE: mm/memcontrol.c:995:
+	if (--(pc->ref_cnt) == 0) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pc"
#931: FILE: mm/memcontrol.c:1036:
+	return pc != NULL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306320.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 26 checks, 914 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000306320.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
