WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: arch/x86/kernel/cpu/cpu.h:1:
+#ifdef CONFIG_X86_32

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#89: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: arch/x86/pci/amd_bus.c:1:
+#include <linux/init.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#110: FILE: arch/x86/pci/amd_bus.c:17:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#113: FILE: arch/x86/pci/amd_bus.c:20:
+ * so need to make sure have enought slot there, increase PCI_BUS_NUM_RESOURCES?
                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#224: FILE: arch/x86/pci/amd_bus.c:131:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#240: FILE: arch/x86/pci/amd_bus.c:147:
+				printk(KERN_ERR "run of slot in ranges\n");

WARNING:MINMAX: max() should probably be max_t(size_t, res->start, start)
#266: FILE: arch/x86/pci/amd_bus.c:173:
+		common_start = max((size_t)res->start, start);

WARNING:MINMAX: min() should probably be min_t(size_t, res->end, end)
#267: FILE: arch/x86/pci/amd_bus.c:174:
+		common_end = min((size_t)res->end, end);

WARNING:MINMAX: min() should probably be min_t(size_t, res->start, start)
#271: FILE: arch/x86/pci/amd_bus.c:178:
+		final_start = min((size_t)res->start, start);

WARNING:MINMAX: max() should probably be max_t(size_t, res->end, end)
#272: FILE: arch/x86/pci/amd_bus.c:179:
+		final_end = max((size_t)res->end, end);

WARNING:MISPLACED_INIT: __initdata should be placed after fam10h_mmconf_start
#308: FILE: arch/x86/pci/amd_bus.c:215:
+static u64 __initdata fam10h_mmconf_start;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after fam10h_mmconf_end
#309: FILE: arch/x86/pci/amd_bus.c:216:
+static u64 __initdata fam10h_mmconf_end;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#314: FILE: arch/x86/pci/amd_bus.c:221:
+	unsigned segn_busn_bits;

ERROR:CODE_INDENT: code indent should use tabs where possible
#317: FILE: arch/x86/pci/amd_bus.c:224:
+        if (boot_cpu_data.x86 < 0x10)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#317: FILE: arch/x86/pci/amd_bus.c:224:
+        if (boot_cpu_data.x86 < 0x10)$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#327: FILE: arch/x86/pci/amd_bus.c:234:
+	base = msr & (FAM10H_MMIO_CONF_BASE_MASK<<FAM10H_MMIO_CONF_BASE_SHIFT);
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#333: FILE: arch/x86/pci/amd_bus.c:240:
+	fam10h_mmconf_end = base + (1ULL<<(segn_busn_bits + 20)) - 1;
 	                                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#346: FILE: arch/x86/pci/amd_bus.c:253:
+	unsigned bus;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#347: FILE: arch/x86/pci/amd_bus.c:254:
+	unsigned slot;

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#381: FILE: arch/x86/pci/amd_bus.c:288:
+		device = (id>>16) & 0xffff;
 		            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#396: FILE: arch/x86/pci/amd_bus.c:303:
+		int max_bus;
+		reg = read_pci_config(bus, slot, 1, 0xe0 + (i << 2));

CHECK:SPACING: No space is necessary after a cast
#407: FILE: arch/x86/pci/amd_bus.c:314:
+			mp_bus_to_node[j] = (unsigned char) node;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#450: FILE: arch/x86/pci/amd_bus.c:357:
+		printk(KERN_DEBUG "node %d link %d: io port [%llx, %llx]\n",

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#479: FILE: arch/x86/pci/amd_bus.c:386:
+	range[0].end = (0xfdULL<<32) - 1;
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#485: FILE: arch/x86/pci/amd_bus.c:392:
+	printk(KERN_INFO "TOM: %016lx aka %ldM\n", end, end>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#485: FILE: arch/x86/pci/amd_bus.c:392:
+	printk(KERN_INFO "TOM: %016lx aka %ldM\n", end, end>>20);
 	                                                   ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#486: FILE: arch/x86/pci/amd_bus.c:393:
+	if (end < (1ULL<<32))
 	               ^

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#493: FILE: arch/x86/pci/amd_bus.c:400:
+		printk(KERN_DEBUG "Fam 10h mmconf [%llx, %llx]\n", fam10h_mmconf_start, fam10h_mmconf_end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#493: FILE: arch/x86/pci/amd_bus.c:400:
+		printk(KERN_DEBUG "Fam 10h mmconf [%llx, %llx]\n", fam10h_mmconf_start, fam10h_mmconf_end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#523: FILE: arch/x86/pci/amd_bus.c:430:
+		printk(KERN_DEBUG "node %d link %d: mmio [%llx, %llx]",

WARNING:LINE_SPACING: Missing a blank line after declarations
#532: FILE: arch/x86/pci/amd_bus.c:439:
+			u64 endx = 0;
+			if (start >= fam10h_mmconf_start &&

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#550: FILE: arch/x86/pci/amd_bus.c:457:
+				printk(KERN_CONT " ==> [%llx, %llx]", (u64)start, endx);

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#550: FILE: arch/x86/pci/amd_bus.c:457:
+				printk(KERN_CONT " ==> [%llx, %llx]", (u64)start, endx);

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#556: FILE: arch/x86/pci/amd_bus.c:463:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#556: FILE: arch/x86/pci/amd_bus.c:463:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#556: FILE: arch/x86/pci/amd_bus.c:463:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);
 					                                         ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#556: FILE: arch/x86/pci/amd_bus.c:463:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);
 					                                               ^

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#556: FILE: arch/x86/pci/amd_bus.c:463:
+					printk(KERN_CONT " %s [%llx, %llx]", endx?"and":"==>", (u64)start, (u64)end);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#558: FILE: arch/x86/pci/amd_bus.c:465:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#558: FILE: arch/x86/pci/amd_bus.c:465:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");
 					                             ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#558: FILE: arch/x86/pci/amd_bus.c:465:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");
 					                                ^

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#558: FILE: arch/x86/pci/amd_bus.c:465:
+					printk(KERN_CONT "%s\n", endx?"":" ==> none");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#566: FILE: arch/x86/pci/amd_bus.c:473:
+		printk(KERN_CONT "\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#566: FILE: arch/x86/pci/amd_bus.c:473:
+		printk(KERN_CONT "\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#574: FILE: arch/x86/pci/amd_bus.c:481:
+	if (val & (1<<21)) {
 	            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#579: FILE: arch/x86/pci/amd_bus.c:486:
+		printk(KERN_INFO "TOM2: %016lx aka %ldM\n", end, end>>20);

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#579: FILE: arch/x86/pci/amd_bus.c:486:
+		printk(KERN_INFO "TOM2: %016lx aka %ldM\n", end, end>>20);
 		                                                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#580: FILE: arch/x86/pci/amd_bus.c:487:
+		update_range(range, 1ULL<<32, end - 1);
 		                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#611: FILE: arch/x86/pci/amd_bus.c:518:
+		printk(KERN_DEBUG "bus: [%02x,%02x] on node %x link %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#615: FILE: arch/x86/pci/amd_bus.c:522:
+			printk(KERN_DEBUG "bus: %02x index %x %s: [%llx, %llx]\n",

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#617: FILE: arch/x86/pci/amd_bus.c:524:
+			       (res->flags & IORESOURCE_IO)?"io port":"mmio",
 			                                   ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#617: FILE: arch/x86/pci/amd_bus.c:524:
+			       (res->flags & IORESOURCE_IO)?"io port":"mmio",
 			                                             ^

CHECK:BIT_MACRO: Prefer using the BIT_ULL macro
#631: FILE: arch/x86/pci/amd_bus.c:538:
+#define ENABLE_CF8_EXT_CFG      (1ULL << 46)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LINE_SPACING: Missing a blank line after declarations
#636: FILE: arch/x86/pci/amd_bus.c:543:
+	u64 reg;
+	rdmsrl(MSR_AMD64_NB_CFG, reg);

ERROR:CODE_INDENT: code indent should use tabs where possible
#646: FILE: arch/x86/pci/amd_bus.c:553:
+        if (boot_cpu_data.x86 < 0x10)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#646: FILE: arch/x86/pci/amd_bus.c:553:
+        if (boot_cpu_data.x86 < 0x10)$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#679: FILE: arch/x86/pci/direct.c:25:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#679: FILE: arch/x86/pci/direct.c:25:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#679: FILE: arch/x86/pci/direct.c:25:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bus > 255'
#688: FILE: arch/x86/pci/direct.c:56:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'devfn > 255'
#688: FILE: arch/x86/pci/direct.c:56:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg > 4095'
#688: FILE: arch/x86/pci/direct.c:56:
+	if ((bus > 255) || (devfn > 255) || (reg > 4095))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#705: FILE: arch/x86/pci/direct.c:272:
+		printk(KERN_INFO "PCI: Using configuration type 1 "

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: arch/x86/pci/direct.c:273:
+		printk(KERN_INFO "PCI: Using configuration type 1 "
+		       "for extended access\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265669.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 38 warnings, 25 checks, 639 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000265669.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
