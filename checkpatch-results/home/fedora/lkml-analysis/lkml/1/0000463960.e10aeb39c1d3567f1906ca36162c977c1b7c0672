WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
git://git.kernel.org/pub/scm/linux/kernel/git/jgarzik/libata-dev.git upstream-fixes

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#128: FILE: drivers/ata/Kconfig:565:
+config PATA_SCC
+	tristate "Toshiba's Cell Reference Set IDE support"
+	depends on PCI && PPC_IBM_CELL_BLADE
+	help
+	  This option enables support for the built-in IDE controller on
+	  Toshiba Cell Reference Board.
+
+	  If unsure, say N.
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CODE_INDENT: code indent should use tabs where possible
#178: FILE: drivers/ata/ahci.c:1167:
+  ^I^I */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#178: FILE: drivers/ata/ahci.c:1167:
+  ^I^I */$

WARNING:SPLIT_STRING: quoted string split across lines
#189: FILE: drivers/ata/ahci.c:1171:
+		ata_ehi_push_desc(ehi, "spurious completion during NCQ "
+				  "issue=0x%x SAct=0x%x FIS=%08x:%08x",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#227: FILE: drivers/ata/libata-acpi.c:298:
+			       __FUNCTION__, ap->port_no);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#239: FILE: drivers/ata/libata-acpi.c:524:
+			       __FUNCTION__, ap->port_no);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#251: FILE: drivers/ata/libata-acpi.c:629:
+			       __FUNCTION__, ix, ap->port_no);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: drivers/ata/libata-acpi.c:686:
+				       __FUNCTION__, status);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ata_dev_select', this function's name, in a string
#315: FILE: drivers/ata/libata-core.c:894:
+		ata_port_printk(ap, KERN_INFO, "ata_dev_select: ENTER, "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#316: FILE: drivers/ata/libata-core.c:895:
+		ata_port_printk(ap, KERN_INFO, "ata_dev_select: ENTER, "
+				"device %u, wait %u\n", device, wait);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#326: FILE: drivers/ata/libata-core.c:1395:
+		ata_dev_printk(dev, KERN_DEBUG, "%s: ENTER\n", __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#347: FILE: drivers/ata/libata-core.c:1561:
+			       __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#354: FILE: drivers/ata/libata-core.c:1566:
+		ata_dev_printk(dev, KERN_DEBUG, "%s: ENTER\n", __FUNCTION__);

WARNING:TYPO_SPELLING: 'accessable' may be misspelled - perhaps 'accessible'?
#366: FILE: drivers/ata/libata-core.c:1612:
+					       "not be fully accessable.\n");
 					                     ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPLIT_STRING: quoted string split across lines
#366: FILE: drivers/ata/libata-core.c:1612:
+					       "supports DRM functions and may "
+					       "not be fully accessable.\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#474: FILE: drivers/ata/libata-core.c:2323:
+	xfer_mask = orig_mask = ata_pack_xfermask(dev->pio_mask,

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#517: FILE: drivers/ata/libata-core.c:2360:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPLIT_STRING: quoted string split across lines
#611: FILE: drivers/ata/libata-core.c:4332:
+			ata_port_printk(ap, KERN_WARNING, "DRQ=1 with device "
+					"error, dev_stat 0x%X\n", status);

WARNING:SPLIT_STRING: quoted string split across lines
#622: FILE: drivers/ata/libata-core.c:4390:
+				ata_port_printk(ap, KERN_WARNING, "DRQ=1 with "
+						"device error, dev_stat 0x%X\n",

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#790: FILE: drivers/ata/libata-eh.c:1177:
+		     (AC_ERR_DEV|AC_ERR_MEDIA|AC_ERR_INVALID)) == AC_ERR_DEV)
 		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#790: FILE: drivers/ata/libata-eh.c:1177:
+		     (AC_ERR_DEV|AC_ERR_MEDIA|AC_ERR_INVALID)) == AC_ERR_DEV)
 		                             ^

WARNING:REPEATED_WORD: Possible repeated word: 'is'
#839: FILE: drivers/ata/libata-eh.c:1214:
+ *	Cat-3 is is unclassified DEV error for known supported

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#961: FILE: drivers/ata/libata-eh.c:1312:
+			static const int dma_dnxfer_sel[] =
+				{ ATA_DNXFER_DMA, ATA_DNXFER_40C };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#963: FILE: drivers/ata/libata-eh.c:1314:
+			static const int pio_dnxfer_sel[] =
+				{ ATA_DNXFER_PIO, ATA_DNXFER_FORCE_PIO0 };

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->spdn_cnt >= 2'
#983: FILE: drivers/ata/libata-eh.c:1334:
+	if ((verdict & ATA_EH_SPDN_FALLBACK_TO_PIO) && (dev->spdn_cnt >= 2) &&
+	    (dev->ap->cbl != ATA_CBL_SATA) &&
+	    (dev->xfer_shift != ATA_SHIFT_PIO)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->ap->cbl != ATA_CBL_SATA'
#983: FILE: drivers/ata/libata-eh.c:1334:
+	if ((verdict & ATA_EH_SPDN_FALLBACK_TO_PIO) && (dev->spdn_cnt >= 2) &&
+	    (dev->ap->cbl != ATA_CBL_SATA) &&
+	    (dev->xfer_shift != ATA_SHIFT_PIO)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dev->xfer_shift != ATA_SHIFT_PIO'
#983: FILE: drivers/ata/libata-eh.c:1334:
+	if ((verdict & ATA_EH_SPDN_FALLBACK_TO_PIO) && (dev->spdn_cnt >= 2) &&
+	    (dev->ap->cbl != ATA_CBL_SATA) &&
+	    (dev->xfer_shift != ATA_SHIFT_PIO)) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1223: FILE: drivers/ata/libata.h:81:
+extern int ata_down_xfermask_limit(struct ata_device *dev, unsigned int sel);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1266: FILE: drivers/ata/pata_cs5520.c:351:
+ $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1266: FILE: drivers/ata/pata_cs5520.c:351:
+ $

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1377: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1416: FILE: drivers/ata/pata_sil680.c:160:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1420: FILE: drivers/ata/pata_sil680.c:163:
+^I$

WARNING:SPLIT_STRING: quoted string split across lines
#1563: FILE: drivers/ata/sata_mv.c:1279:
 	DPRINTK(KERN_ERR "ata%u: port error; EDMA err cause: 0x%08x "
+		"SERR: 0x%08x\n", ap->print_id, edma_err_cause, serr);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1572: FILE: drivers/ata/sata_mv.c:2055:
+	port->cmd_addr = port->bmdma_addr = port->scr_addr = NULL;

ERROR:SPACING: space required before the open parenthesis '('
#1641: FILE: drivers/ata/sata_nv.c:662:
+	if(tf->flags & ATA_TFLAG_ISADDR) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1642: FILE: drivers/ata/sata_nv.c:663:
+		if (tf->flags & ATA_TFLAG_LBA48) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1649: FILE: drivers/ata/sata_nv.c:670:
+		} else

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1651: FILE: drivers/ata/sata_nv.c:672:
+^I^I^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1662: FILE: drivers/ata/sata_nv.c:678:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1663: FILE: drivers/ata/sata_nv.c:679:
+	if(tf->flags & ATA_TFLAG_DEVICE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1667: FILE: drivers/ata/sata_nv.c:683:
+^I$

ERROR:SPACING: space required before the open parenthesis '('
#1668: FILE: drivers/ata/sata_nv.c:684:
+	while(idx < 12)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1680: FILE: drivers/ata/sata_nv.c:746:
+			/* Notifier bits set without a command may indicate the drive
+			   is misbehaving. Raise host state machine violation on this

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1681: FILE: drivers/ata/sata_nv.c:747:
+			   condition. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1683: FILE: drivers/ata/sata_nv.c:749:
+			ata_port_printk(ap, KERN_ERR, "notifier for tag %d with no command?\n",
+				cpb_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1716: FILE: drivers/ata/sata_nv.c:871:
+					error = nv_adma_check_cpb(ap, pos,
+						notifier_error & (1 << pos) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1716: FILE: drivers/ata/sata_nv.c:871:
+						notifier_error & (1 << pos) );

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1717: FILE: drivers/ata/sata_nv.c:872:
+					check_commands &= ~(1 << pos );

ERROR:SPACING: space required before the open parenthesis '('
#1794: FILE: drivers/ata/sata_nv.c:914:
+	if(pp->flags & NV_ADMA_PORT_REGISTER_MODE)

ERROR:SPACING: space prohibited after that open parenthesis '('
#1804: FILE: drivers/ata/sata_nv.c:984:
+	writew( (tmp & ~NV_ADMA_CTL_GO) | NV_ADMA_CTL_AIEN |

ERROR:SPACING: space prohibited after that open parenthesis '('
#1810: FILE: drivers/ata/sata_nv.c:989:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1810: FILE: drivers/ata/sata_nv.c:989:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1814: FILE: drivers/ata/sata_nv.c:992:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1814: FILE: drivers/ata/sata_nv.c:992:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1823: FILE: drivers/ata/sata_nv.c:1044:
+	writew( (tmp & ~NV_ADMA_CTL_GO) | NV_ADMA_CTL_AIEN |

ERROR:SPACING: space prohibited after that open parenthesis '('
#1829: FILE: drivers/ata/sata_nv.c:1049:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1829: FILE: drivers/ata/sata_nv.c:1049:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1833: FILE: drivers/ata/sata_nv.c:1052:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1833: FILE: drivers/ata/sata_nv.c:1052:
+	readw( mmio + NV_ADMA_CTL );	/* flush posted write */

WARNING:MEMORY_BARRIER: memory barrier without comment
#1873: FILE: drivers/ata/sata_nv.c:1176:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1875: FILE: drivers/ata/sata_nv.c:1178:
+	wmb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1883: FILE: drivers/ata/sata_nv.c:1202:
+	wmb();

ERROR:SPACING: space required before the open parenthesis '('
#1900: FILE: drivers/ata/sata_nv.c:1226:
+	if(curr_ncq != pp->last_issue_ncq) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#1901: FILE: drivers/ata/sata_nv.c:1227:
+^I   ^I/* Seems to need some delay before switching between NCQ and non-NCQ$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1901: FILE: drivers/ata/sata_nv.c:1227:
+^I   ^I/* Seems to need some delay before switching between NCQ and non-NCQ$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1902: FILE: drivers/ata/sata_nv.c:1228:
+	   	/* Seems to need some delay before switching between NCQ and non-NCQ
+		   commands, else we get command timeouts and such. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1902: FILE: drivers/ata/sata_nv.c:1228:
+		   commands, else we get command timeouts and such. */

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#1903: FILE: drivers/ata/sata_nv.c:1229:
+		udelay(20);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1914: FILE: drivers/ata/sata_nv.c:1405:
+^I^I$

ERROR:SPACING: space required before the open parenthesis '('
#1915: FILE: drivers/ata/sata_nv.c:1406:
+		if(ata_tag_valid(ap->active_tag) || ap->sactive) {

WARNING:SPLIT_STRING: quoted string split across lines
#1924: FILE: drivers/ata/sata_nv.c:1415:
+			ata_port_printk(ap, KERN_ERR, "EH in ADMA mode, notifier 0x%X "
+				"notifier_error 0x%X gen_ctl 0x%X status 0x%X "

WARNING:SPLIT_STRING: quoted string split across lines
#1925: FILE: drivers/ata/sata_nv.c:1416:
+				"notifier_error 0x%X gen_ctl 0x%X status 0x%X "
+				"next cpb count 0x%X next cpb idx 0x%x\n",

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {
 			      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {
 			        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {
 			          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {
 			                           ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {

ERROR:SPACING: space required before the open parenthesis '('
#1929: FILE: drivers/ata/sata_nv.c:1420:
+			for( i=0;i<NV_ADMA_MAX_CPBS;i++) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1931: FILE: drivers/ata/sata_nv.c:1422:
+				struct nv_adma_cpb *cpb = &pp->cpb[i];
+				if( (ata_tag_valid(ap->active_tag) && i == ap->active_tag) ||

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited after that open parenthesis '('
#1931: FILE: drivers/ata/sata_nv.c:1422:
+				if( (ata_tag_valid(ap->active_tag) && i == ap->active_tag) ||

ERROR:SPACING: space required before the open parenthesis '('
#1931: FILE: drivers/ata/sata_nv.c:1422:
+				if( (ata_tag_valid(ap->active_tag) && i == ap->active_tag) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1932: FILE: drivers/ata/sata_nv.c:1423:
+				if( (ata_tag_valid(ap->active_tag) && i == ap->active_tag) ||
+				    ap->sactive & (1 << i) )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1932: FILE: drivers/ata/sata_nv.c:1423:
+				    ap->sactive & (1 << i) )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1934: FILE: drivers/ata/sata_nv.c:1425:
+					ata_port_printk(ap, KERN_ERR,
+						"CPB %d: ctl_flags 0x%x, resp_flags 0x%x\n",

ERROR:SPACING: space prohibited after that open parenthesis '('
#1946: FILE: drivers/ata/sata_nv.c:1443:
+		readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1946: FILE: drivers/ata/sata_nv.c:1443:
+		readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited after that open parenthesis '('
#1950: FILE: drivers/ata/sata_nv.c:1446:
+		readw( mmio + NV_ADMA_CTL );	/* flush posted write */

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1950: FILE: drivers/ata/sata_nv.c:1446:
+		readw( mmio + NV_ADMA_CTL );	/* flush posted write */

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2083: FILE: drivers/ata/sata_via.c:435:
+		dev_printk(KERN_ERR, &pdev->dev, "failed to iomap PCI BAR 5\n");

WARNING:PREFER_DEV_LEVEL: Prefer dev_err(... to dev_printk(KERN_ERR, ...
#2098: FILE: drivers/ata/sata_via.c:470:
+			dev_printk(KERN_ERR, &pdev->dev,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2121: FILE: drivers/ata/sis.h:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2186: FILE: include/linux/libata.h:763:
+extern unsigned int ata_dev_try_classify(struct ata_port *, unsigned int, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ata_port *' should also have an identifier name
#2186: FILE: include/linux/libata.h:763:
+extern unsigned int ata_dev_try_classify(struct ata_port *, unsigned int, u8 *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#2186: FILE: include/linux/libata.h:763:
+extern unsigned int ata_dev_try_classify(struct ata_port *, unsigned int, u8 *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#2186: FILE: include/linux/libata.h:763:
+extern unsigned int ata_dev_try_classify(struct ata_port *, unsigned int, u8 *);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2195: FILE: include/linux/libata.h:895:
+	printk(lv"ata%u: "fmt, (ap)->print_id , ##args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2195: FILE: include/linux/libata.h:895:
+	printk(lv"ata%u: "fmt, (ap)->print_id , ##args)
 	                                      ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2195: FILE: include/linux/libata.h:895:
+	printk(lv"ata%u: "fmt, (ap)->print_id , ##args)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2199: FILE: include/linux/libata.h:898:
+	printk(lv"ata%u.%02u: "fmt, (dev)->ap->print_id, (dev)->devno , ##args)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#2199: FILE: include/linux/libata.h:898:
+	printk(lv"ata%u.%02u: "fmt, (dev)->ap->print_id, (dev)->devno , ##args)
 	                                                              ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2199: FILE: include/linux/libata.h:898:
+	printk(lv"ata%u.%02u: "fmt, (dev)->ap->print_id, (dev)->devno , ##args)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 44 errors, 41 warnings, 18 checks, 1852 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463960.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
