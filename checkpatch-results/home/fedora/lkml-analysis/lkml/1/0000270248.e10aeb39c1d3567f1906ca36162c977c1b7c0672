WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
block/blk-integrity.c                  |  385 ++++++++++++++++++++++++++++++++

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#385: FILE: block/Kconfig:84:
+config BLK_DEV_INTEGRITY
+	bool "Block layer data integrity support"
+	---help---
+	Some storage devices allow extra information to be
+	stored/retrieved to help protect the data.  The block layer
+	data integrity option provides hooks which can be used by
+	filesystems to ensure better data integrity.
+
+	Say yes here if you have a storage device that provides the
+	T10/SCSI Data Integrity Field or the T13/ATA External Path
+	Protection.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#436: FILE: block/blk-integrity.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#453: FILE: block/blk-integrity.c:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#484: FILE: block/blk-integrity.c:49:
+	rq_for_each_integrity_segment(iv, rq, iter) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#518: FILE: block/blk-integrity.c:83:
+	rq_for_each_integrity_segment(iv, rq, iter) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#526: FILE: block/blk-integrity.c:91:
+			if (!sg)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#528: FILE: block/blk-integrity.c:93:
+			else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: block/blk-integrity.c:128:
+	BUG_ON(bd1->bd_disk == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bd1->bd_disk"
#563: FILE: block/blk-integrity.c:128:
+	BUG_ON(bd1->bd_disk == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: block/blk-integrity.c:129:
+	BUG_ON(bd2->bd_disk == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bd2->bd_disk"
#564: FILE: block/blk-integrity.c:129:
+	BUG_ON(bd2->bd_disk == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#570: FILE: block/blk-integrity.c:135:
+		printk(KERN_ERR "%s: %s/%s sector sz %u != %u\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#577: FILE: block/blk-integrity.c:142:
+		printk(KERN_ERR "%s: %s/%s tuple sz %u != %u\n", __func__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'b1->tag_size != b2->tag_size'
#583: FILE: block/blk-integrity.c:148:
+	if (b1->tag_size && b2->tag_size && (b1->tag_size != b2->tag_size)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#584: FILE: block/blk-integrity.c:149:
+		printk(KERN_ERR "%s: %s/%s tag sz %u != %u\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#591: FILE: block/blk-integrity.c:156:
+		printk(KERN_ERR "%s: %s/%s type %s != %s\n", __func__,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#603: FILE: block/blk-integrity.c:168:
+	ssize_t (*show)(struct blk_integrity *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#603: FILE: block/blk-integrity.c:168:
+	ssize_t (*show)(struct blk_integrity *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#604: FILE: block/blk-integrity.c:169:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#604: FILE: block/blk-integrity.c:169:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#604: FILE: block/blk-integrity.c:169:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi"
#639: FILE: block/blk-integrity.c:204:
+	if (bi != NULL && bi->name != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->name"
#639: FILE: block/blk-integrity.c:204:
+	if (bi != NULL && bi->name != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi"
#647: FILE: block/blk-integrity.c:212:
+	if (bi != NULL)

CHECK:SPACING: No space is necessary after a cast
#656: FILE: block/blk-integrity.c:221:
+	char *p = (char *) page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#657: FILE: block/blk-integrity.c:222:
+	unsigned long val = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#676: FILE: block/blk-integrity.c:241:
+	char *p = (char *) page;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#677: FILE: block/blk-integrity.c:242:
+	unsigned long val = simple_strtoul(p, &p, 10);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#694: FILE: block/blk-integrity.c:259:
+	.attr = { .name = "format", .mode = S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#699: FILE: block/blk-integrity.c:264:
+	.attr = { .name = "tag_size", .mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#704: FILE: block/blk-integrity.c:269:
+	.attr = { .name = "read_verify", .mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#710: FILE: block/blk-integrity.c:275:
+	.attr = { .name = "write_generate", .mode = S_IRUGO | S_IWUSR },

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#723: FILE: block/blk-integrity.c:288:
+static struct sysfs_ops integrity_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#766: FILE: block/blk-integrity.c:331:
+	BUG_ON(disk == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!disk"
#766: FILE: block/blk-integrity.c:331:
+	BUG_ON(disk == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: block/blk-integrity.c:332:
+	BUG_ON(template == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!template"
#767: FILE: block/blk-integrity.c:332:
+	BUG_ON(template == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#769: FILE: block/blk-integrity.c:334:
+	if (disk->integrity == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!disk->integrity"
#769: FILE: block/blk-integrity.c:334:
+	if (disk->integrity == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#784: FILE: block/blk-integrity.c:349:
+	} else

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#843: FILE: block/blk.h:56:
+#define rq_for_each_integrity_segment(bvl, _rq, _iter)		\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bip_for_each_vec(bvl, _iter.bio->bi_integrity, _iter.i)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_iter' - possible side-effects?
#843: FILE: block/blk.h:56:
+#define rq_for_each_integrity_segment(bvl, _rq, _iter)		\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bip_for_each_vec(bvl, _iter.bio->bi_integrity, _iter.i)

CHECK:BIT_MACRO: Prefer using the BIT macro
#881: FILE: include/linux/blkdev.h:139:
+#define REQ_INTEGRITY	(1 << __REQ_INTEGRITY)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#924: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#924: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#924: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#925: FILE: include/linux/blkdev.h:907:
+extern void blk_integrity_unregister(struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#925: FILE: include/linux/blkdev.h:907:
+extern void blk_integrity_unregister(struct gendisk *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#926: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#926: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#926: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#927: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#927: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#927: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#928: FILE: include/linux/blkdev.h:910:
+extern int blk_rq_count_integrity_sg(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#928: FILE: include/linux/blkdev.h:910:
+extern int blk_rq_count_integrity_sg(struct request *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#932: FILE: include/linux/blkdev.h:914:
+	return (bi == NULL) ? 0 : bi->tuple_size;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#944: FILE: include/linux/blkdev.h:926:
+	return (bi == NULL) ? 0 : bi->tag_size;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#951: FILE: include/linux/blkdev.h:933:
+	if (bi == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->verify_fn"
#954: FILE: include/linux/blkdev.h:936:
+	if (rw == READ && bi->verify_fn != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->generate_fn"
#958: FILE: include/linux/blkdev.h:940:
+	if (rw == WRITE && bi->generate_fn != NULL &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#967: FILE: include/linux/blkdev.h:949:
+	BUG_ON(rq->bio == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq->bio"
#967: FILE: include/linux/blkdev.h:949:
+	BUG_ON(rq->bio == NULL);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#979: FILE: include/linux/blkdev.h:961:
+#define blk_integrity_unregister(a)		do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#983: FILE: include/linux/blkdev.h:965:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: exactly one space required after that #ifdef
#994: FILE: include/linux/genhd.h:144:
+#ifdef  CONFIG_BLK_DEV_INTEGRITY

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 33 warnings, 31 checks, 910 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270248.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
