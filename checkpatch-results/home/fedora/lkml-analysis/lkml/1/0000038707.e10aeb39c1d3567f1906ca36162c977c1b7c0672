WARNING:TYPO_SPELLING: 'doesnt' may be misspelled - perhaps 'doesn't'?
#58: FILE: include/linux/spinlock.h:83:
+ * Pull the arch_spin*() functions/declarations (UP-nondebug doesnt need them):
                                                              ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#69: FILE: include/linux/spinlock.h:92:
+  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#69: FILE: include/linux/spinlock.h:92:
+  extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#82: FILE: include/linux/spinlock.h:102:
+# define raw_spin_lock_init(lock)				\
+	do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#82: FILE: include/linux/spinlock.h:102:
+# define raw_spin_lock_init(lock)				\
+	do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: include/linux/spinlock.h:131:
+ extern void _raw_spin_lock(raw_spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/spinlock.h:131:
+ extern void _raw_spin_lock(raw_spinlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#120: FILE: include/linux/spinlock.h:133:
+ extern int _raw_spin_trylock(raw_spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/linux/spinlock.h:133:
+ extern int _raw_spin_trylock(raw_spinlock_t *lock);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: include/linux/spinlock.h:134:
+ extern void _raw_spin_unlock(raw_spinlock_t *lock);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: include/linux/spinlock.h:134:
+ extern void _raw_spin_unlock(raw_spinlock_t *lock);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#156: FILE: include/linux/spinlock.h:164:
+#define raw_spin_trylock(lock)		__cond_lock(lock, _spin_trylock(lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nest_lock' - possible side-effects?
#165: FILE: include/linux/spinlock.h:170:
+# define raw_spin_lock_nest_lock(lock, nest_lock)			\
 	 do {								\
 		 typecheck(struct lockdep_map *, &(nest_lock)->dep_map);\
 		 _spin_lock_nest_lock(lock, &(nest_lock)->dep_map);	\
 	 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lock' - possible side-effects?
#239: FILE: include/linux/spinlock.h:227:
+#define raw_spin_trylock_bh(lock)	__cond_lock(lock, _spin_trylock_bh(lock))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#251: FILE: include/linux/spinlock.h:236:
+#define raw_spin_trylock_irqsave(lock, flags) \
 ({ \
 	local_irq_save(flags); \
+	raw_spin_trylock(lock) ? \
 	1 : ({ local_irq_restore(flags); 0; }); \
 })

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_lock' - possible side-effects?
#286: FILE: include/linux/spinlock.h:270:
+#define spin_lock_init(_lock)				\
+do {							\
+	spinlock_check(_lock);				\
+	raw_spin_lock_init(&(_lock)->rlock);		\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#307: FILE: include/linux/spinlock.h:291:
+#define spin_lock_nested(lock, subclass)			\
+do {								\
+	raw_spin_lock_nested(spinlock_check(lock), subclass);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#312: FILE: include/linux/spinlock.h:296:
+#define spin_lock_nest_lock(lock, nest_lock)				\
+do {									\
+	raw_spin_lock_nest_lock(spinlock_check(lock), nest_lock);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#322: FILE: include/linux/spinlock.h:306:
+#define spin_lock_irqsave(lock, flags)				\
+do {								\
+	raw_spin_lock_irqsave(spinlock_check(lock), flags);	\
+} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#327: FILE: include/linux/spinlock.h:311:
+#define spin_lock_irqsave_nested(lock, flags, subclass)			\
+do {									\
+	raw_spin_lock_irqsave_nested(spinlock_check(lock), flags, subclass); \
+} while (0)

WARNING:USE_LOCKDEP: Where possible, use lockdep_assert_held instead of assertions based on spin_is_locked
#372: FILE: include/linux/spinlock.h:356:
+static inline int spin_is_locked(spinlock_t *lock)

lockdep_assert_held() annotations should be preferred over
assertions based on spin_is_locked()

See: https://www.kernel.org/doc/html/latest/locking/lockdep-design.html#annotations

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#427: FILE: include/linux/spinlock_api_smp.h:20:
+#define assert_raw_spin_locked(x)	BUG_ON(!raw_spin_is_locked(x))

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#564: FILE: include/linux/spinlock_api_up.h:19:
+#define assert_raw_spin_locked(lock)	do { (void)(lock); } while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#577: FILE: include/linux/spinlock_types.h:20:
+typedef struct raw_spinlock {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'lockname' - possible side-effects?
#611: FILE: include/linux/spinlock_types.h:53:
+#define __RAW_SPIN_LOCK_INITIALIZER(lockname)	\
+	{					\
+	.raw_lock = __ARCH_SPIN_LOCK_UNLOCKED,	\
+	SPIN_DEBUG_INIT(lockname)		\
+	SPIN_DEP_MAP_INIT(lockname) }

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#617: FILE: include/linux/spinlock_types.h:59:
+#define __RAW_SPIN_LOCK_UNLOCKED(lockname)	\
+	(raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)

CHECK:SPACING: No space is necessary after a cast
#618: FILE: include/linux/spinlock_types.h:60:
+	(raw_spinlock_t) __RAW_SPIN_LOCK_INITIALIZER(lockname)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#620: FILE: include/linux/spinlock_types.h:62:
+#define DEFINE_RAW_SPINLOCK(x)	raw_spinlock_t x = __RAW_SPIN_LOCK_UNLOCKED(x)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#622: FILE: include/linux/spinlock_types.h:64:
+typedef struct spinlock {

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#639: FILE: include/linux/spinlock_types.h:81:
+#define __SPIN_LOCK_UNLOCKED(lockname) \
+	(spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)

CHECK:SPACING: No space is necessary after a cast
#640: FILE: include/linux/spinlock_types.h:82:
+	(spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#640: FILE: include/linux/spinlock_types.h:82:
+	(spinlock_t ) __SPIN_LOCK_INITIALIZER(lockname)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#857: FILE: lib/spinlock_debug.c:32:
+EXPORT_SYMBOL(__raw_spin_lock_init);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038707.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 16 warnings, 14 checks, 807 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000038707.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
