CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#49: 
SUSE LINUX Products GmbH, Maxfeldstr. 5, 90409 Nürnberg
                                                ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#50: 
GF: Markus Rex, HRB 16746 (AG Nürnberg)
                               ^

CHECK:CAMELCASE: Avoid CamelCase: <CommandList_struct>
#89: FILE: drivers/block/cciss.c:1160:
+		CommandList_struct *c;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_len < 1'
#112: FILE: drivers/block/cciss.c:1183:
+		if ((hdr.dxfer_len < 1) &&
+		    (hdr.dxfer_direction != SG_DXFER_NONE))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_direction != SG_DXFER_NONE'
#112: FILE: drivers/block/cciss.c:1183:
+		if ((hdr.dxfer_len < 1) &&
+		    (hdr.dxfer_direction != SG_DXFER_NONE))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buff"
#118: FILE: drivers/block/cciss.c:1189:
+			if (buff == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_direction == SG_DXFER_TO_DEV'
#121: FILE: drivers/block/cciss.c:1192:
+		if ((hdr.dxfer_direction == SG_DXFER_TO_DEV) ||
+		    (hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV'
#121: FILE: drivers/block/cciss.c:1192:
+		if ((hdr.dxfer_direction == SG_DXFER_TO_DEV) ||
+		    (hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#121: FILE: drivers/block/cciss.c:1192:
+		if ((hdr.dxfer_direction == SG_DXFER_TO_DEV) ||
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#124: FILE: drivers/block/cciss.c:1195:
+			if (copy_from_user (buff, hdr.dxferp,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: drivers/block/cciss.c:1200:
+		} else

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#132: FILE: drivers/block/cciss.c:1203:
+		if ((c = cmd_alloc(host, 0)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <Request>
#138: FILE: drivers/block/cciss.c:1209:
+		if (copy_from_user(c->Request.CDB, hdr.cmdp, hdr.cmd_len))

CHECK:CAMELCASE: Avoid CamelCase: <Header>
#144: FILE: drivers/block/cciss.c:1215:
+		c->Header.ReplyQueue = 0;

CHECK:CAMELCASE: Avoid CamelCase: <ReplyQueue>
#144: FILE: drivers/block/cciss.c:1215:
+		c->Header.ReplyQueue = 0;

CHECK:CAMELCASE: Avoid CamelCase: <SGList>
#146: FILE: drivers/block/cciss.c:1217:
+			c->Header.SGList = 1;

CHECK:CAMELCASE: Avoid CamelCase: <SGTotal>
#147: FILE: drivers/block/cciss.c:1218:
+			c->Header.SGTotal = 1;

CHECK:CAMELCASE: Avoid CamelCase: <LogDev>
#153: FILE: drivers/block/cciss.c:1224:
+		c->Header.LUN.LogDev.VolId = drv->LunID & 0x3FFFFFFF;

CHECK:CAMELCASE: Avoid CamelCase: <VolId>
#153: FILE: drivers/block/cciss.c:1224:
+		c->Header.LUN.LogDev.VolId = drv->LunID & 0x3FFFFFFF;

CHECK:CAMELCASE: Avoid CamelCase: <LunID>
#153: FILE: drivers/block/cciss.c:1224:
+		c->Header.LUN.LogDev.VolId = drv->LunID & 0x3FFFFFFF;

CHECK:CAMELCASE: Avoid CamelCase: <Mode>
#154: FILE: drivers/block/cciss.c:1225:
+		c->Header.LUN.LogDev.Mode = 0x01; /* Logical volume */

CHECK:CAMELCASE: Avoid CamelCase: <Tag>
#155: FILE: drivers/block/cciss.c:1226:
+		c->Header.Tag.lower = c->busaddr;

CHECK:CAMELCASE: Avoid CamelCase: <CDBLen>
#158: FILE: drivers/block/cciss.c:1229:
+		c->Request.CDBLen = hdr.cmd_len;

CHECK:CAMELCASE: Avoid CamelCase: <Type>
#159: FILE: drivers/block/cciss.c:1230:
+		c->Request.Type.Type = TYPE_CMD;

CHECK:CAMELCASE: Avoid CamelCase: <Attribute>
#160: FILE: drivers/block/cciss.c:1231:
+		c->Request.Type.Attribute = ATTR_SIMPLE;

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#161: FILE: drivers/block/cciss.c:1232:
+		switch(hdr.dxfer_direction) {
+		    case SG_DXFER_NONE:
[...]
+		    case SG_DXFER_TO_DEV:
[...]
+		    case SG_DXFER_FROM_DEV:
[...]
+		    case SG_DXFER_TO_FROM_DEV:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required before the open parenthesis '('
#161: FILE: drivers/block/cciss.c:1232:
+		switch(hdr.dxfer_direction) {

WARNING:TABSTOP: Statements should start on a tabstop
#162: FILE: drivers/block/cciss.c:1233:
+		    case SG_DXFER_NONE:

CHECK:CAMELCASE: Avoid CamelCase: <Direction>
#163: FILE: drivers/block/cciss.c:1234:
+			c->Request.Type.Direction = XFER_NONE;

WARNING:TABSTOP: Statements should start on a tabstop
#165: FILE: drivers/block/cciss.c:1236:
+		    case SG_DXFER_TO_DEV:

WARNING:TABSTOP: Statements should start on a tabstop
#168: FILE: drivers/block/cciss.c:1239:
+		    case SG_DXFER_FROM_DEV:

WARNING:TABSTOP: Statements should start on a tabstop
#171: FILE: drivers/block/cciss.c:1242:
+		    case SG_DXFER_TO_FROM_DEV:

CHECK:CAMELCASE: Avoid CamelCase: <Timeout>
#175: FILE: drivers/block/cciss.c:1246:
+		c->Request.Timeout = hdr.timeout;

CHECK:CAMELCASE: Avoid CamelCase: <Addr>
#182: FILE: drivers/block/cciss.c:1253:
+			c->SG[0].Addr.lower = temp64.val32.lower;

CHECK:CAMELCASE: Avoid CamelCase: <Len>
#184: FILE: drivers/block/cciss.c:1255:
+			c->SG[0].Len = hdr.dxfer_len;

CHECK:CAMELCASE: Avoid CamelCase: <Ext>
#185: FILE: drivers/block/cciss.c:1256:
+			c->SG[0].Ext = 0;

CHECK:CAMELCASE: Avoid CamelCase: <reqQ>
#191: FILE: drivers/block/cciss.c:1262:
+		addQ(&host->reqQ, c);

CHECK:CAMELCASE: Avoid CamelCase: <Qdepth>
#192: FILE: drivers/block/cciss.c:1263:
+		host->Qdepth++;

CHECK:SPACING: No space is necessary after a cast
#201: FILE: drivers/block/cciss.c:1272:
+		pci_unmap_single(host->pdev, (dma_addr_t) temp64.val,

CHECK:CAMELCASE: Avoid CamelCase: <ScsiStatus>
#206: FILE: drivers/block/cciss.c:1277:
+		hdr.status = c->err_info->ScsiStatus;

CHECK:CAMELCASE: Avoid CamelCase: <SenseLen>
#207: FILE: drivers/block/cciss.c:1278:
+		if (c->err_info->SenseLen && hdr.mx_sb_len > 0) {

CHECK:CAMELCASE: Avoid CamelCase: <SenseInfo>
#213: FILE: drivers/block/cciss.c:1284:
+			if (copy_to_user(hdr.sbp, c->err_info->SenseInfo,

CHECK:CAMELCASE: Avoid CamelCase: <ResidualCnt>
#221: FILE: drivers/block/cciss.c:1292:
+		hdr.resid = c->err_info->ResidualCnt;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_direction == SG_DXFER_FROM_DEV'
#229: FILE: drivers/block/cciss.c:1300:
+		if ((hdr.dxfer_direction == SG_DXFER_FROM_DEV) ||
+		    (hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV'
#229: FILE: drivers/block/cciss.c:1300:
+		if ((hdr.dxfer_direction == SG_DXFER_FROM_DEV) ||
+		    (hdr.dxfer_direction == SG_DXFER_TO_FROM_DEV)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448418.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 5 warnings, 37 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448418.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
