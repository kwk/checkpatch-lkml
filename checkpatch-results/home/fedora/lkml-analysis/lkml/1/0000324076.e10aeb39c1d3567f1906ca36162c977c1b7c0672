WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#56: FILE: Documentation/mem_notify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#73: FILE: Documentation/mem_notify.c:18:
+int count = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void *do_alloc() should probably be void *do_alloc(void)
#76: FILE: Documentation/mem_notify.c:21:
+void *do_alloc()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: Documentation/mem_notify.c:23:
+        for(;;) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#78: FILE: Documentation/mem_notify.c:23:
+        for(;;) {$

ERROR:SPACING: space required before the open parenthesis '('
#78: FILE: Documentation/mem_notify.c:23:
+        for(;;) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: Documentation/mem_notify.c:24:
+                int *buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: Documentation/mem_notify.c:24:
+                int *buffer;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#80: FILE: Documentation/mem_notify.c:25:
+                buffer = mmap(NULL,  size*1024*1024,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#80: FILE: Documentation/mem_notify.c:25:
+                int *buffer;
+                buffer = mmap(NULL,  size*1024*1024,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#80: FILE: Documentation/mem_notify.c:25:
+                buffer = mmap(NULL,  size*1024*1024,$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#80: FILE: Documentation/mem_notify.c:25:
+                buffer = mmap(NULL,  size*1024*1024,
                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#80: FILE: Documentation/mem_notify.c:25:
+                buffer = mmap(NULL,  size*1024*1024,
                                               ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#81: FILE: Documentation/mem_notify.c:26:
+                              PROT_READ | PROT_WRITE,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#81: FILE: Documentation/mem_notify.c:26:
+                              PROT_READ | PROT_WRITE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: Documentation/mem_notify.c:27:
+                              MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#82: FILE: Documentation/mem_notify.c:27:
+                              MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: Documentation/mem_notify.c:28:
+                if (buffer == MAP_FAILED) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#83: FILE: Documentation/mem_notify.c:28:
+                if (buffer == MAP_FAILED) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: Documentation/mem_notify.c:29:
+                        perror("mmap");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#84: FILE: Documentation/mem_notify.c:29:
+                        perror("mmap");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: Documentation/mem_notify.c:30:
+                        exit(EXIT_FAILURE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: Documentation/mem_notify.c:30:
+                        exit(EXIT_FAILURE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: Documentation/mem_notify.c:31:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#86: FILE: Documentation/mem_notify.c:31:
+                }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: Documentation/mem_notify.c:32:
+                memset(buffer, 1 , size*1024*1024);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: Documentation/mem_notify.c:32:
+                memset(buffer, 1 , size*1024*1024);$

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#87: FILE: Documentation/mem_notify.c:32:
+                memset(buffer, 1 , size*1024*1024);
                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#87: FILE: Documentation/mem_notify.c:32:
+                memset(buffer, 1 , size*1024*1024);
                                        ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#87: FILE: Documentation/mem_notify.c:32:
+                memset(buffer, 1 , size*1024*1024);
                                             ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: Documentation/mem_notify.c:34:
+                printf("-");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: Documentation/mem_notify.c:34:
+                printf("-");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: Documentation/mem_notify.c:35:
+                fflush(stdout);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: Documentation/mem_notify.c:35:
+                fflush(stdout);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#92: FILE: Documentation/mem_notify.c:37:
+                count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#92: FILE: Documentation/mem_notify.c:37:
+                count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#93: FILE: Documentation/mem_notify.c:38:
+                sleep(1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#93: FILE: Documentation/mem_notify.c:38:
+                sleep(1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#94: FILE: Documentation/mem_notify.c:39:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#94: FILE: Documentation/mem_notify.c:39:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: Documentation/mem_notify.c:44:
+        int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: Documentation/mem_notify.c:44:
+        int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: Documentation/mem_notify.c:45:
+        read(pfd->fd, 0, 0);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#100: FILE: Documentation/mem_notify.c:45:
+        int ret;
+        read(pfd->fd, 0, 0);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: Documentation/mem_notify.c:45:
+        read(pfd->fd, 0, 0);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: Documentation/mem_notify.c:46:
+        ret = poll(pfd, 1, -1);              /* wake up when low memory */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: Documentation/mem_notify.c:46:
+        ret = poll(pfd, 1, -1);              /* wake up when low memory */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#102: FILE: Documentation/mem_notify.c:47:
+        if (ret == -1 && errno != EINTR) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#102: FILE: Documentation/mem_notify.c:47:
+        if (ret == -1 && errno != EINTR) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: Documentation/mem_notify.c:48:
+                perror("poll");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: Documentation/mem_notify.c:48:
+                perror("poll");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: Documentation/mem_notify.c:49:
+                exit(EXIT_FAILURE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: Documentation/mem_notify.c:49:
+                exit(EXIT_FAILURE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: Documentation/mem_notify.c:50:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: Documentation/mem_notify.c:50:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: Documentation/mem_notify.c:51:
+        return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: Documentation/mem_notify.c:51:
+        return ret;$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void do_free() should probably be void do_free(void)
#109: FILE: Documentation/mem_notify.c:54:
+void do_free()

ERROR:CODE_INDENT: code indent should use tabs where possible
#114: FILE: Documentation/mem_notify.c:59:
+        fd = open("/dev/mem_notify", O_RDONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#114: FILE: Documentation/mem_notify.c:59:
+        fd = open("/dev/mem_notify", O_RDONLY);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#115: FILE: Documentation/mem_notify.c:60:
+        if (fd == -1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#115: FILE: Documentation/mem_notify.c:60:
+        if (fd == -1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#116: FILE: Documentation/mem_notify.c:61:
+                perror("open");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#116: FILE: Documentation/mem_notify.c:61:
+                perror("open");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#117: FILE: Documentation/mem_notify.c:62:
+                exit(EXIT_FAILURE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#117: FILE: Documentation/mem_notify.c:62:
+                exit(EXIT_FAILURE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#118: FILE: Documentation/mem_notify.c:63:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#118: FILE: Documentation/mem_notify.c:63:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#121: FILE: Documentation/mem_notify.c:66:
+        pfd.events = POLLIN;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: Documentation/mem_notify.c:66:
+        pfd.events = POLLIN;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#122: FILE: Documentation/mem_notify.c:67:
+        for(;;)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#122: FILE: Documentation/mem_notify.c:67:
+        for(;;)$

ERROR:SPACING: space required before the open parenthesis '('
#122: FILE: Documentation/mem_notify.c:67:
+        for(;;)

ERROR:CODE_INDENT: code indent should use tabs where possible
#123: FILE: Documentation/mem_notify.c:68:
+                if (wait_for_notification(&pfd) > 0) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: Documentation/mem_notify.c:68:
+                if (wait_for_notification(&pfd) > 0) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#124: FILE: Documentation/mem_notify.c:69:
+                        printf("\nGot notification, allocated %d MB\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: Documentation/mem_notify.c:69:
+                        printf("\nGot notification, allocated %d MB\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#125: FILE: Documentation/mem_notify.c:70:
+                               size * count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: Documentation/mem_notify.c:70:
+                               size * count);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: Documentation/mem_notify.c:71:
+                        exit(EXIT_SUCCESS);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: Documentation/mem_notify.c:71:
+                        exit(EXIT_SUCCESS);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#127: FILE: Documentation/mem_notify.c:72:
+                }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#127: FILE: Documentation/mem_notify.c:72:
+                }$

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void do_free_signal() should probably be void do_free_signal(void)
#130: FILE: Documentation/mem_notify.c:75:
+void do_free_signal()

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: Documentation/mem_notify.c:80:
+        fd = open("/dev/mem_notify", O_RDONLY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: Documentation/mem_notify.c:80:
+        fd = open("/dev/mem_notify", O_RDONLY);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: Documentation/mem_notify.c:81:
+        if (fd == -1) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: Documentation/mem_notify.c:81:
+        if (fd == -1) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#137: FILE: Documentation/mem_notify.c:82:
+                perror("open");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#137: FILE: Documentation/mem_notify.c:82:
+                perror("open");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#138: FILE: Documentation/mem_notify.c:83:
+                exit(EXIT_FAILURE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#138: FILE: Documentation/mem_notify.c:83:
+                exit(EXIT_FAILURE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#139: FILE: Documentation/mem_notify.c:84:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#139: FILE: Documentation/mem_notify.c:84:
+        }$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#145: FILE: Documentation/mem_notify.c:90:
+	fcntl(fd, F_SETFL, flags|FASYNC); /* when low memory, receive SIGUSR1 */
 	                        ^

ERROR:SPACING: space required before the open parenthesis '('
#147: FILE: Documentation/mem_notify.c:92:
+	for(;;)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#151: FILE: Documentation/mem_notify.c:96:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#158: FILE: Documentation/mem_notify.c:103:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#162: FILE: Documentation/mem_notify.c:107:
+        pthread_t allocator;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: Documentation/mem_notify.c:107:
+        pthread_t allocator;$

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: Documentation/mem_notify.c:109:
+	if(argc == 2 && (strcmp(argv[1], "-sig") == 0)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 50 errors, 44 warnings, 7 checks, 120 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324076.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
