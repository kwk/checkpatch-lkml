WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git sched-core-for-linus

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#205: FILE: fs/proc/array.c:415:
+	seq_printf(m, "Cpus_allowed:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#207: FILE: fs/proc/array.c:417:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#208: FILE: fs/proc/array.c:418:
+	seq_printf(m, "Cpus_allowed_list:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#210: FILE: fs/proc/array.c:420:
+	seq_printf(m, "\n");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#277: FILE: fs/proc/stat.c:39:
+	guest = guest_nice = cputime64_zero;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: fs/proc/stat.c:55:
+		guest_nice = cputime64_add(guest_nice,
+			kstat_cpu(i).cpustat.guest_nice);

WARNING:SPLIT_STRING: quoted string split across lines
#296: FILE: fs/proc/stat.c:71:
+	seq_printf(p, "cpu  %llu %llu %llu %llu %llu %llu %llu %llu %llu "
+		"%llu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#318: FILE: fs/proc/stat.c:98:
+			"cpu%d %llu %llu %llu %llu %llu %llu %llu %llu %llu "
+			"%llu\n",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#340: FILE: include/linux/jiffies.h:310:
+extern unsigned long nsecs_to_jiffies(u64 n);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#416: FILE: include/linux/sched.h:1015:
+extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#452: FILE: include/linux/sched.h:1728:
+extern void task_times(struct task_struct *p, cputime_t *ut, cputime_t *st);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#453: FILE: include/linux/sched.h:1729:
+extern void thread_group_times(struct task_struct *p, cputime_t *ut, cputime_t *st);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: kernel/cpuset.c:541:
+static int generate_sched_domains(cpumask_var_t **domains,
 			struct sched_domain_attr **attributes)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#618: FILE: kernel/fork.c:888:
+	sig->prev_utime = sig->prev_stime = cputime_zero;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#736: FILE: kernel/sched.c:2448:
+		u64 max = 2*sysctl_sched_migration_cost;
 		           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#771: FILE: kernel/sched.c:2868:
+	if (likely(!mm)) {
[...]
 	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#909: FILE: kernel/sched.c:5221:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#952: FILE: kernel/sched.c:5248:
+	if (total) {
[...]
+		temp = (u64)(rtime * cputime.utime);
[...]

CHECK:BRACES: Unbalanced braces around else statement
#961: FILE: kernel/sched.c:5254:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1023: FILE: kernel/sched.c:7789:
+}
+early_param("sched_debug", sched_domain_debug_setup);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:DEPRECATED_API: Deprecated use of 'synchronize_sched', prefer 'synchronize_rcu' instead
#1042: FILE: kernel/sched.c:7959:
+	synchronize_sched();

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#1073: FILE: kernel/sched.c:8965:
+	doms = kmalloc(sizeof(*doms) * ndoms, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#1088: FILE: kernel/sched.c:8980:
+	unsigned int i;
+	for (i = 0; i < ndoms; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1186: FILE: kernel/sched.c:9116:
+		__build_sched_domains(doms_new[i],
 					dattr_new ? dattr_new + i : NULL);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1215: FILE: kernel/sched.c:9600:
+		rq->avg_idle = 2*sysctl_sched_migration_cost;
 		                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_isolated_map"
#1225: FILE: kernel/sched.c:9651:
+	if (cpu_isolated_map == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'n' may be better as '(n)' to avoid precedence issues
#1238: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1238: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1238: FILE: kernel/sched_debug.c:288:
+#define P64(n) SEQ_printf(m, "  .%-30s: %Ld\n", #n, rq->n);

WARNING:TYPO_SPELLING: 'elegible' may be misspelled - perhaps 'eligible'?
#1277: FILE: kernel/sched_fair.c:1366:
+	 * Otherwise, iterate the domain and find an elegible idle cpu.
 	                                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039738.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 18 checks, 1233 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039738.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
