CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#53: FILE: block/elevator-fq.c:46:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#53: FILE: block/elevator-fq.c:46:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = entity->parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#54: FILE: block/elevator-fq.c:47:
+	for (; entity != NULL; entity = entity->parent)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#56: FILE: block/elevator-fq.c:49:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#56: FILE: block/elevator-fq.c:49:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#56: FILE: block/elevator-fq.c:49:
+#define for_each_entity_safe(entity, parent) \
+	for (; entity && ({ parent = entity->parent; 1; }); entity = parent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#59: FILE: block/elevator-fq.c:52:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#61: FILE: block/elevator-fq.c:54:
+static struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#68: FILE: block/elevator-fq.c:61:
+	if (sd->active_entity != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "next_active"
#82: FILE: block/elevator-fq.c:75:
+	if (next_active != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#85: FILE: block/elevator-fq.c:78:
+		if (entity != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#95: FILE: block/elevator-fq.c:88:
+	BUG_ON(sd->next_active != entity);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#98: FILE: block/elevator-fq.c:91:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#98: FILE: block/elevator-fq.c:91:
+#define for_each_entity(entity)	\
+	for (; entity != NULL; entity = NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#99: FILE: block/elevator-fq.c:92:
+	for (; entity != NULL; entity = NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entity' - possible side-effects?
#101: FILE: block/elevator-fq.c:94:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'entity' may be better as '(entity)' to avoid precedence issues
#101: FILE: block/elevator-fq.c:94:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'parent' - possible side-effects?
#101: FILE: block/elevator-fq.c:94:
+#define for_each_entity_safe(entity, parent) \
+	for (parent = NULL; entity != NULL; entity = parent)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#102: FILE: block/elevator-fq.c:95:
+	for (parent = NULL; entity != NULL; entity = parent)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: block/elevator-fq.c:820:
+	BUG_ON(sd->next_active == entity);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->next_active"
#202: FILE: block/elevator-fq.c:846:
+		if (sd->next_active != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#245: FILE: block/elevator-fq.c:884:
+		BUG_ON(st->wsum == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd"
#261: FILE: block/elevator-fq.c:1281:
+	for (; sd != NULL; sd = entity->my_sched_data) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#270: FILE: block/elevator-fq.c:1290:
+		BUG_ON(!entity && extract);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#313: FILE: init/Kconfig:615:
+config GROUP_IOSCHED
+	bool "Group IO Scheduler"
+	depends on CGROUPS && ELV_FAIR_QUEUING
+	default n
+	---help---
+	  This feature lets IO scheduler recognize task groups and control
+	  disk bandwidth allocation to such task groups.
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 20 checks, 257 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000101068.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
