WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#86: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dent)...) over kmalloc(sizeof(struct v9fs_dentry)...)
#569: FILE: fs/9p/fid.c:51:
+		dent = kmalloc(sizeof(struct v9fs_dentry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#668: FILE: fs/9p/fid.c:113:
+ * ^Irelease it$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#767: FILE: fs/9p/fid.h:26:
+	spinlock_t lock;

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#804: FILE: fs/9p/v9fs.c:42:
global debug level  */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:CAMELCASE: Avoid CamelCase: <Opt_port>
#809: FILE: fs/9p/v9fs.c:46:
+	Opt_port, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_msize>
#809: FILE: fs/9p/v9fs.c:46:
+	Opt_port, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_uid>
#809: FILE: fs/9p/v9fs.c:46:
+	Opt_port, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_gid>
#809: FILE: fs/9p/v9fs.c:46:
+	Opt_port, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_afid>
#809: FILE: fs/9p/v9fs.c:46:
+	Opt_port, Opt_msize, Opt_uid, Opt_gid, Opt_afid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: fs/9p/v9fs.c:186:
+struct p9_fid *v9fs_session_init(struct v9fs_session_info *v9ses,
 		  const char *dev_name, char *data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#926: FILE: fs/9p/v9fs.c:232:
+	v9ses->clnt = p9_client_create(trans, v9ses->maxdata + P9_IOHDRSZ,
+		v9ses->extended);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct v9fs_session_info *' should also have an identifier name
#1112: FILE: fs/9p/v9fs.h:67:
+struct p9_fid *v9fs_session_init(struct v9fs_session_info *, const

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const
 har *' should also have an identifier name
#1112: FILE: fs/9p/v9fs.h:67:
+struct p9_fid *v9fs_session_init(struct v9fs_session_info *, const

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1112: FILE: fs/9p/v9fs.h:67:
+struct p9_fid *v9fs_session_init(struct v9fs_session_info *, const

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#1160: FILE: fs/9p/v9fs.h:80:
+	return (inode->i_sb->s_fs_info);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1337: FILE: fs/9p/vfs_dir.c:87:
+		over = filldir(dirent, st->name.str, st->name.len, filp->f_pos,
+			v9fs_qid2ino(&st->qid), dt_type(st));

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1445: FILE: fs/9p/vfs_dir.c:114:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode,
 	                                    ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1447: FILE: fs/9p/vfs_dir.c:115:
+	P9_DPRINTK(P9_DEBUG_VFS, "inode: %p filp: %p fid: %d\n", inode,
 	filemap_write_and_wait(inode->i_mapping);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#1509: FILE: fs/9p/vfs_file.c:71:
 	if (err < 0) {
+			p9_client_clunk(fid);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fid->qid.version'
#1528: FILE: fs/9p/vfs_file.c:78:
+	if((fid->qid.version) && (v9ses->cache)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'v9ses->cache'
#1528: FILE: fs/9p/vfs_file.c:78:
+	if((fid->qid.version) && (v9ses->cache)) {

ERROR:SPACING: space required before the open parenthesis '('
#1528: FILE: fs/9p/vfs_file.c:78:
+	if((fid->qid.version) && (v9ses->cache)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1782: FILE: fs/9p/vfs_inode.c:309:
+v9fs_inode_from_fid(struct v9fs_session_info *v9ses, struct p9_fid *fid,
 	struct super_block *sb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1894: FILE: fs/9p/vfs_inode.c:385:
+static struct p9_fid *v9fs_create(struct v9fs_session_info *v9ses,
+	struct dentry *dentry, char *extension, u32 perm, u8 mode)

CHECK:SPACING: No space is necessary after a cast
#1913: FILE: fs/9p/vfs_inode.c:395:
+	name = (char *) dentry->d_name.name;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1950: FILE: fs/9p/vfs_inode.c:417:
+	if (IS_ERR(fid)) {
[...]
-	}
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1955: FILE: fs/9p/vfs_inode.c:421:
+	} else

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1999: FILE: fs/9p/vfs_inode.c:458:
+ * @nd: path information
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2005: FILE: fs/9p/vfs_inode.c:464:
+		struct nameidata *nd)
 		                  ^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2012: FILE: fs/9p/vfs_inode.c:471:
+	struct file *filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2018: FILE: fs/9p/vfs_inode.c:477:
+	if (nd && nd->flags & LOOKUP_OPEN)
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#2031: FILE: fs/9p/vfs_inode.c:490:
+	if (nd && nd->flags & LOOKUP_OPEN) {
 	    ^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2031: FILE: fs/9p/vfs_inode.c:490:
+	if (nd && nd->flags & LOOKUP_OPEN) {
[...]

[...]

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#2036: FILE: fs/9p/vfs_inode.c:493:
+			err = PTR_ERR(filp);
 			              ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#2048: FILE: fs/9p/vfs_inode.c:498:
+	} else

ERROR:SPACING: space required before the open parenthesis '('
#2179: FILE: fs/9p/vfs_inode.c:565:
+	if(IS_ERR(dfid))

CHECK:SPACING: No space is necessary after a cast
#2182: FILE: fs/9p/vfs_inode.c:568:
+	name = (char *) dentry->d_name.name;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2519: FILE: fs/9p/vfs_inode.c:903:
+	P9_DPRINTK(P9_DEBUG_VFS, "%s -> %.*s (%s)\n", dentry->d_name.name,
+		st->extension.str, buffer);

CHECK:SPACING: No space is necessary after a cast
#2560: FILE: fs/9p/vfs_inode.c:1009:
+	fid = v9fs_create(v9ses, dir, dentry, (char *) extension, perm, P9_OREAD);

ERROR:SPACING: space required before the open parenthesis '('
#2561: FILE: fs/9p/vfs_inode.c:1010:
+	if(IS_ERR(fid))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2779: FILE: include/net/9p/client.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#2780: FILE: include/net/9p/client.h:2:
+ * include/net/9p/client.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2798: FILE: include/net/9p/client.h:20:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2807: FILE: include/net/9p/client.h:29:
+	spinlock_t lock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2838: FILE: include/net/9p/client.h:59:
+struct p9_fid *p9_client_attach(struct p9_client *clnt, struct p9_fid *afid,
+	char *uname, char *aname);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2841: FILE: include/net/9p/client.h:61:
+struct p9_fid *p9_client_auth(struct p9_client *clnt, char *uname,
+struct p9_fid *p9_client_walk(struct p9_fid *oldfid, int nwname, char **wnames,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2842: FILE: include/net/9p/client.h:62:
+struct p9_fid *p9_client_walk(struct p9_fid *oldfid, int nwname, char **wnames,
+	int clone);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2845: FILE: include/net/9p/client.h:65:
+int p9_client_fcreate(struct p9_fid *fid, char *name, u32 perm, int mode,
+	char *extension);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2866: FILE: net/9p/client.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#2885: FILE: net/9p/client.c:20:
+ *  51 Franklin Street, Fifth Floor$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2896: FILE: net/9p/client.c:31:
+#include <asm/uaccess.h>

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*clnt)...) over kmalloc(sizeof(struct p9_client)...)
#2917: FILE: net/9p/client.c:51:
+	clnt = kmalloc(sizeof(struct p9_client), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2922: FILE: net/9p/client.c:56:
+	P9_DPRINTK(P9_DEBUG_9P, "clnt %p trans %p msize %d dotu %d\n",
+		clnt, trans, msize, dotu);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2942: FILE: net/9p/client.c:76:
+	tc = p9_create_tversion(clnt->msize, clnt->dotu?"9P2000.u":"9P2000");
 	                                               ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2942: FILE: net/9p/client.c:76:
+	tc = p9_create_tversion(clnt->msize, clnt->dotu?"9P2000.u":"9P2000");
 	                                                          ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#2954: FILE: net/9p/client.c:88:
+	if (version->len == 8 && !memcmp(version->str, "9P2000.u", 8))
[...]
+	else if (version->len == 6 && !memcmp(version->str, "9P2000", 6))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2958: FILE: net/9p/client.c:92:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#3008: FILE: net/9p/client.c:142:
+	clnt->trans->status = Disconnected;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3014: FILE: net/9p/client.c:148:
+struct p9_fid *p9_client_attach(struct p9_client *clnt, struct p9_fid *afid,
+	char *uname, char *aname)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3021: FILE: net/9p/client.c:155:
+	P9_DPRINTK(P9_DEBUG_9P, "clnt %p afid %d uname %s aname %s\n",
+		clnt, afid?afid->fid:-1, uname, aname);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3021: FILE: net/9p/client.c:155:
+		clnt, afid?afid->fid:-1, uname, aname);
 		          ^

ERROR:SPACING: spaces required around that ':' (ctx:VxO)
#3021: FILE: net/9p/client.c:155:
+		clnt, afid?afid->fid:-1, uname, aname);
 		                    ^

ERROR:SPACING: space required before that '-' (ctx:OxV)
#3021: FILE: net/9p/client.c:155:
+		clnt, afid?afid->fid:-1, uname, aname);
 		                     ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3033: FILE: net/9p/client.c:167:
+	tc = p9_create_tattach(fid->fid, afid?afid->fid:P9_NOFID, uname, aname);
 	                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3033: FILE: net/9p/client.c:167:
+	tc = p9_create_tattach(fid->fid, afid?afid->fid:P9_NOFID, uname, aname);
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3102: FILE: net/9p/client.c:236:
+struct p9_fid *p9_client_walk(struct p9_fid *oldfid, int nwname, char **wnames,
+	int clone)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3110: FILE: net/9p/client.c:244:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d nwname %d wname[0] %s\n",
+		oldfid->fid, nwname, wnames?wnames[0]:NULL);

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#3110: FILE: net/9p/client.c:244:
+		oldfid->fid, nwname, wnames?wnames[0]:NULL);
 		                           ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#3110: FILE: net/9p/client.c:244:
+		oldfid->fid, nwname, wnames?wnames[0]:NULL);
 		                                     ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3115: FILE: net/9p/client.c:249:
+	if (clone) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3124: FILE: net/9p/client.c:258:
+	} else

ERROR:SPACING: spaces required around that '!=' (ctx:VxV)
#3173: FILE: net/9p/client.c:307:
+	if (fid && fid!=oldfid)
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3217: FILE: net/9p/client.c:351:
+int p9_client_fcreate(struct p9_fid *fid, char *name, u32 perm, int mode,
+		     char *extension)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3224: FILE: net/9p/client.c:358:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d name %s perm %d mode %d\n", fid->fid,
+		name, perm, mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3234: FILE: net/9p/client.c:368:
+	tc = p9_create_tcreate(fid->fid, name, perm, mode, extension,
+		clnt->dotu);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3333: FILE: net/9p/client.c:467:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3333: FILE: net/9p/client.c:467:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3364: FILE: net/9p/client.c:498:
+	} while (count>0 && n == rsize);
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3382: FILE: net/9p/client.c:516:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset %lld count %d\n", fid->fid, offset,
+		count);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3390: FILE: net/9p/client.c:524:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3390: FILE: net/9p/client.c:524:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3417: FILE: net/9p/client.c:551:
+	} while (count>0);
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3436: FILE: net/9p/client.c:569:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset %lld count %d\n", fid->fid, offset,
+		count);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3444: FILE: net/9p/client.c:577:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3444: FILE: net/9p/client.c:577:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3480: FILE: net/9p/client.c:613:
+	} while (count>0 && n == rsize);
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3499: FILE: net/9p/client.c:631:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset %lld count %d\n", fid->fid, offset,
+		count);

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3507: FILE: net/9p/client.c:639:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3507: FILE: net/9p/client.c:639:
+	if (!rsize || rsize>clnt->msize-P9_IOHDRSZ)
 	                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3534: FILE: net/9p/client.c:666:
+	} while (count>0);
 	              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3550: FILE: net/9p/client.c:682:
+	P9_DPRINTK(P9_DEBUG_9P, "fid %d offset %lld count %d\n", fid->fid, offset,
+		count);

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3658: FILE: net/9p/client.c:790:
+	if (offset<fid->rdir_fpos || (fid->rdir_fcall &&
 	          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3659: FILE: net/9p/client.c:791:
+	if (offset<fid->rdir_fpos || (fid->rdir_fcall &&
+		offset >= fid->rdir_fpos+fid->rdir_fcall->params.rread.count)) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3659: FILE: net/9p/client.c:791:
+		offset >= fid->rdir_fpos+fid->rdir_fcall->params.rread.count)) {
 		                        ^

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#3672: FILE: net/9p/client.c:804:
+		if (!n || n>clnt->msize-P9_IOHDRSZ)
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3672: FILE: net/9p/client.c:804:
+		if (!n || n>clnt->msize-P9_IOHDRSZ)
 		                       ^

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#3699: FILE: net/9p/client.c:831:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			          ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#3699: FILE: net/9p/client.c:831:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3699: FILE: net/9p/client.c:831:
+			if (offset>=fid->rdir_fpos && offset<fid->rdir_fpos+n)
 			                                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3711: FILE: net/9p/client.c:843:
+	n = p9_deserialize_stat(fid->rdir_fcall->params.rread.data + m,
+		fid->rdir_fcall->params.rread.count - m, &st, clnt->dotu);

CHECK:SPACING: No space is necessary after a cast
#3757: FILE: net/9p/client.c:889:
+	p = ((char *) ret) + sizeof(struct p9_stat);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fid)...) over kmalloc(sizeof(struct p9_fid)...)
#3781: FILE: net/9p/client.c:913:
+	fid = kmalloc(sizeof(struct p9_fid), GFP_KERNEL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 22 errors, 17 warnings, 64 checks, 3205 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434206.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
