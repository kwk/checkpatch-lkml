WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#189: FILE: drivers/isdn/gigaset/Kconfig:36:
+config GIGASET_M101
+	tristate "Gigaset M101 support"
+	depends on ISDN_DRV_GIGASET
+	help
+	  Say M here if you want to connect to the Gigaset base via DECT
+	  using a Gigaset M101 (Sinus 45 Data 1) RS232 DECT device.
+	  This will build a module called "ser_gigaset".
 

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#279: FILE: drivers/isdn/gigaset/ser-gigaset.c:1:
+/* This is the serial hardware link layer (HLL) for the Gigaset 307x isdn

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#317: FILE: drivers/isdn/gigaset/ser-gigaset.c:39:
+module_param(startmode, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#320: FILE: drivers/isdn/gigaset/ser-gigaset.c:42:
+module_param(cidmode, int, S_IRUGO);

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#329: FILE: drivers/isdn/gigaset/ser-gigaset.c:51:
+	struct mutex		dead_mutex;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'write_modem', this function's name, in a string
#361: FILE: drivers/isdn/gigaset/ser-gigaset.c:83:
+	gig_dbg(DEBUG_OUTPUT, "write_modem: sent %d", sent);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#373: FILE: drivers/isdn/gigaset/ser-gigaset.c:95:
+			(unsigned long) skb);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'send_cb', this function's name, in a string
#403: FILE: drivers/isdn/gigaset/ser-gigaset.c:125:
+			gig_dbg(DEBUG_OUTPUT, "send_cb: write error %d", sent);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'send_cb', this function's name, in a string
#409: FILE: drivers/isdn/gigaset/ser-gigaset.c:131:
+		gig_dbg(DEBUG_OUTPUT, "send_cb: sent %d, left %u, queued %u",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#417: FILE: drivers/isdn/gigaset/ser-gigaset.c:139:
+		cs->cmdbuf = cb = cb->next;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:SPACING: No space is necessary after a cast
#442: FILE: drivers/isdn/gigaset/ser-gigaset.c:164:
+	struct cardstate *cs = (struct cardstate *) data;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#446: FILE: drivers/isdn/gigaset/ser-gigaset.c:168:
+	if (!cs || !(bcs = cs->bcs)) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#459: FILE: drivers/isdn/gigaset/ser-gigaset.c:181:
+		if (!(bcs->tx_skb = skb_dequeue(&bcs->squeue)))

CHECK:SPACING: No space is necessary after a cast
#464: FILE: drivers/isdn/gigaset/ser-gigaset.c:186:
+			(unsigned long) bcs->tx_skb);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#490: FILE: drivers/isdn/gigaset/ser-gigaset.c:212:
+	cs->cmdbuf = cs->lastcmdbuf = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#491: FILE: drivers/isdn/gigaset/ser-gigaset.c:213:
+	cs->cmdbytes = cs->curlen = 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#501: FILE: drivers/isdn/gigaset/ser-gigaset.c:223:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: drivers/isdn/gigaset/ser-gigaset.c:238:
+                             int len, struct tasklet_struct *wake_tasklet)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: drivers/isdn/gigaset/ser-gigaset.c:238:
+                             int len, struct tasklet_struct *wake_tasklet)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#522: FILE: drivers/isdn/gigaset/ser-gigaset.c:244:
+^I                     DEBUG_TRANSCMD : DEBUG_LOCKCMD,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#523: FILE: drivers/isdn/gigaset/ser-gigaset.c:245:
+^I                   "CMD Transmit", len, buf);$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#528: FILE: drivers/isdn/gigaset/ser-gigaset.c:250:
+	if (!(cb = kmalloc(sizeof(struct cmdbuf_t) + len, GFP_ATOMIC))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cb)...) over kmalloc(sizeof(struct cmdbuf_t)...)
#528: FILE: drivers/isdn/gigaset/ser-gigaset.c:250:
+	if (!(cb = kmalloc(sizeof(struct cmdbuf_t) + len, GFP_ATOMIC))) {

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:BRACES: braces {} should be used on all arms of this statement
#541: FILE: drivers/isdn/gigaset/ser-gigaset.c:263:
+	if (cs->lastcmdbuf)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#543: FILE: drivers/isdn/gigaset/ser-gigaset.c:265:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: drivers/isdn/gigaset/ser-gigaset.c:290:
+	unsigned bytes;

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#629: FILE: drivers/isdn/gigaset/ser-gigaset.c:351:
+	bcs->hw.ser = NULL;
 	        ^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#659: FILE: drivers/isdn/gigaset/ser-gigaset.c:381:
+	if (!cs->hw.ser)
 	            ^^^

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#663: FILE: drivers/isdn/gigaset/ser-gigaset.c:385:
+	kfree(cs->hw.ser);
 	             ^^^

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#664: FILE: drivers/isdn/gigaset/ser-gigaset.c:386:
+	cs->hw.ser = NULL;
 	       ^^^

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#686: FILE: drivers/isdn/gigaset/ser-gigaset.c:408:
+	if (!(cs->hw.ser = kzalloc(sizeof(struct ser_cardstate), GFP_KERNEL))) {
 	             ^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#686: FILE: drivers/isdn/gigaset/ser-gigaset.c:408:
+	if (!(cs->hw.ser = kzalloc(sizeof(struct ser_cardstate), GFP_KERNEL))) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cs->hw.ser)...) over kzalloc(sizeof(struct ser_cardstate)...)
#686: FILE: drivers/isdn/gigaset/ser-gigaset.c:408:
+	if (!(cs->hw.ser = kzalloc(sizeof(struct ser_cardstate), GFP_KERNEL))) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#694: FILE: drivers/isdn/gigaset/ser-gigaset.c:416:
+	if ((rc = platform_device_register(&cs->hw.ser->dev)) != 0) {

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#696: FILE: drivers/isdn/gigaset/ser-gigaset.c:418:
+		kfree(cs->hw.ser);
 		             ^^^

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#697: FILE: drivers/isdn/gigaset/ser-gigaset.c:419:
+		cs->hw.ser = NULL;
 		       ^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: drivers/isdn/gigaset/ser-gigaset.c:425:
+^I             &gigaset_modem_fill, (unsigned long) cs);$

CHECK:SPACING: No space is necessary after a cast
#703: FILE: drivers/isdn/gigaset/ser-gigaset.c:425:
+	             &gigaset_modem_fill, (unsigned long) cs);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#715: FILE: drivers/isdn/gigaset/ser-gigaset.c:437:
+static int gigaset_set_modem_ctrl(struct cardstate *cs, unsigned old_state, unsigned new_state)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#715: FILE: drivers/isdn/gigaset/ser-gigaset.c:437:
+static int gigaset_set_modem_ctrl(struct cardstate *cs, unsigned old_state, unsigned new_state)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#730: FILE: drivers/isdn/gigaset/ser-gigaset.c:452:
+static int gigaset_baud_rate(struct cardstate *cs, unsigned cflag)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#735: FILE: drivers/isdn/gigaset/ser-gigaset.c:457:
+static int gigaset_set_line_ctrl(struct cardstate *cs, unsigned cflag)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#759: FILE: drivers/isdn/gigaset/ser-gigaset.c:481:
+
+

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#768: FILE: drivers/isdn/gigaset/ser-gigaset.c:490:
+	if (!cs || !cs->hw.ser) {
 	                   ^^^

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#801: FILE: drivers/isdn/gigaset/ser-gigaset.c:523:
+	/* allocate memory for our device state and intialize it */
 	                                            ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#802: FILE: drivers/isdn/gigaset/ser-gigaset.c:524:
+	if (!(cs = gigaset_initcs(driver, 1, 1, 0, cidmode,

WARNING:TYPO_SPELLING: 'ser' may be misspelled - perhaps 'set'?
#853: FILE: drivers/isdn/gigaset/ser-gigaset.c:575:
+	if (!cs->hw.ser)
 	            ^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#853: FILE: drivers/isdn/gigaset/ser-gigaset.c:575:
+	if (!cs->hw.ser)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#855: FILE: drivers/isdn/gigaset/ser-gigaset.c:577:
+	else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#984: FILE: drivers/isdn/gigaset/ser-gigaset.c:706:
+	unsigned tail, head, n;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#989: FILE: drivers/isdn/gigaset/ser-gigaset.c:711:
+	if (!(inbuf = cs->inbuf)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1002: FILE: drivers/isdn/gigaset/ser-gigaset.c:724:
+		n = min_t(unsigned, count, RBUFSIZE - tail);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1061: FILE: drivers/isdn/gigaset/ser-gigaset.c:783:
+
+

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1069: FILE: drivers/isdn/gigaset/ser-gigaset.c:791:
+	gig_dbg(DEBUG_INIT, "%s", __func__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1070: FILE: drivers/isdn/gigaset/ser-gigaset.c:792:
+	if ((rc = platform_driver_register(&device_driver)) != 0) {

WARNING:TYPO_SPELLING: 'intialize' may be misspelled - perhaps 'initialize'?
#1075: FILE: drivers/isdn/gigaset/ser-gigaset.c:797:
+	/* allocate memory for our driver state and intialize it */
 	                                            ^^^^^^^^^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1076: FILE: drivers/isdn/gigaset/ser-gigaset.c:798:
+	if (!(driver = gigaset_initdriver(GIGASET_MINOR, GIGASET_MINORS,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1081: FILE: drivers/isdn/gigaset/ser-gigaset.c:803:
+	if ((rc = tty_register_ldisc(N_GIGASET_M101, &gigaset_ldisc)) != 0) {

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#1101: FILE: drivers/isdn/gigaset/ser-gigaset.c:823:
+	gig_dbg(DEBUG_INIT, "%s", __func__);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1108: FILE: drivers/isdn/gigaset/ser-gigaset.c:830:
+	if ((rc = tty_unregister_ldisc(N_GIGASET_M101)) != 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 28 warnings, 17 checks, 1043 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000469654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
