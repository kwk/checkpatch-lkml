WARNING:TYPO_SPELLING: 'existince' may be misspelled - perhaps 'existence'?
#52: 
quite enough.  The existince of directories of the form /sys/ ... /net/
                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#61: 
  current_tag() - that returns a "void *" tag that identifies the context of

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: fs/sysfs/dir.c:141:
+			error = sysfs_make_dirent(parent->d_fsdata, *d, k, mode,
 								SYSFS_DIR);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'parent_sd->s_type == SYSFS_DIR'
#323: FILE: fs/sysfs/dir.c:554:
+			if ((parent_sd->s_type == SYSFS_DIR) &&
+			    (dentry->d_inode->i_op != &sysfs_dir_inode_operations))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'dentry->d_inode->i_op != &sysfs_dir_inode_operations'
#323: FILE: fs/sysfs/dir.c:554:
+			if ((parent_sd->s_type == SYSFS_DIR) &&
+			    (dentry->d_inode->i_op != &sysfs_dir_inode_operations))

WARNING:LINE_SPACING: Missing a blank line after declarations
#345: FILE: fs/sysfs/dir.c:648:
+		struct sysfs_shadow_dir *sdd;
+		sdd = sd->s_element;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#374: FILE: fs/sysfs/dir.c:677:
+		int found;
+		sdd = sd->s_element;

CHECK:BRACES: braces {} should be used on all arms of this statement
#463: FILE: fs/sysfs/dir.c:766:
+	if (!shadow_ops)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#465: FILE: fs/sysfs/dir.c:768:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#468: FILE: fs/sysfs/dir.c:771:
+		void *tag;
+		sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#471: FILE: fs/sysfs/dir.c:774:
+			struct sysfs_shadow_dir *sdd = sd->s_element;
+			dentry = sdd->kobj->dentry;

CHECK:BRACES: braces {} should be used on all arms of this statement
#489: FILE: fs/sysfs/dir.c:792:
+	if (!shadow_ops)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#491: FILE: fs/sysfs/dir.c:794:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: fs/sysfs/dir.c:797:
+		void *tag;
+		sd = dentry->d_fsdata;

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: fs/sysfs/dir.c:800:
+			struct sysfs_shadow_dir *sdd = sd->s_element;
+			dentry = sdd->kobj->dentry;

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#510: FILE: fs/sysfs/dir.c:813:
+static void *sysfs_shadow_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                                ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#520: FILE: fs/sysfs/dir.c:823:
+		struct inode *inode;
+		inode = dentry->d_inode;

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#535: FILE: fs/sysfs/dir.c:838:
+static struct inode_operations sysfs_shadow_inode_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#541: FILE: fs/sysfs/dir.c:844:
+
+

WARNING:TYPO_SPELLING: 'appopriate' may be misspelled - perhaps 'appropriate'?
#560: FILE: fs/sysfs/dir.c:863:
+ *	the kobject will be renamed so the appopriate sysfs data structures
   	                                   ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: fs/sysfs/dir.c:867:
+int sysfs_enable_shadowing(struct kobject *kobj,
+	const struct shadow_dir_operations *shadow_ops)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#620: FILE: fs/sysfs/group.c:20:
+static void remove_files(struct kobject *kobj, struct dentry * dir,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#627: FILE: fs/sysfs/group.c:26:
+		sysfs_hash_and_remove(kobj, dir,(*attr)->name);
 		                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#631: FILE: fs/sysfs/group.c:29:
+static int create_files(struct kobject *kobj, struct dentry * dir,

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#649: FILE: fs/sysfs/group.c:59:
+	if ((error = create_files(kobj, dir, grp))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#669: FILE: fs/sysfs/inode.c:193:
 	switch (sd->s_type) {
+		case SYSFS_SHADOW:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: fs/sysfs/inode.c:263:
+int sysfs_hash_and_remove(struct kobject *kobj, struct dentry * dir, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#679: FILE: fs/sysfs/inode.c:263:
+int sysfs_hash_and_remove(struct kobject *kobj, struct dentry * dir, const char * name)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#681: FILE: fs/sysfs/inode.c:265:
+	struct inode * inode;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#746: FILE: fs/sysfs/symlink.c:120:
+	sysfs_hash_and_remove(kobj, kobj->dentry,name);
 	                                        ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#758: FILE: fs/sysfs/sysfs.h:16:
+extern void sysfs_prune_shadow(struct dentry *shadow);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#759: FILE: fs/sysfs/sysfs.h:17:
+struct dentry *sysfs_resolve_for_create(struct kobject *, struct dentry *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#759: FILE: fs/sysfs/sysfs.h:17:
+struct dentry *sysfs_resolve_for_create(struct kobject *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#760: FILE: fs/sysfs/sysfs.h:18:
+struct dentry *sysfs_resolve_for_remove(struct kobject *, struct dentry *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#760: FILE: fs/sysfs/sysfs.h:18:
+struct dentry *sysfs_resolve_for_remove(struct kobject *, struct dentry *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#770: FILE: fs/sysfs/sysfs.h:28:
+extern int sysfs_hash_and_remove(struct kobject *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#770: FILE: fs/sysfs/sysfs.h:28:
+extern int sysfs_hash_and_remove(struct kobject *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct dentry *' should also have an identifier name
#770: FILE: fs/sysfs/sysfs.h:28:
+extern int sysfs_hash_and_remove(struct kobject *, struct dentry *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#770: FILE: fs/sysfs/sysfs.h:28:
+extern int sysfs_hash_and_remove(struct kobject *, struct dentry *, const char *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#791: FILE: fs/sysfs/sysfs.h:101:
+			struct sysfs_shadow_dir * sdd = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#792: FILE: fs/sysfs/sysfs.h:102:
+			struct sysfs_shadow_dir * sdd = sd->s_element;
+			kobj = kobject_get(sdd->kobj);

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#800: FILE: fs/sysfs/sysfs.h:119:
 	}
+	else if (sd->s_type & SYSFS_SHADOW) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#801: FILE: fs/sysfs/sysfs.h:120:
+		struct sysfs_shadow_dir * sdd = sd->s_element;

WARNING:LINE_SPACING: Missing a blank line after declarations
#802: FILE: fs/sysfs/sysfs.h:121:
+		struct sysfs_shadow_dir * sdd = sd->s_element;
+		kfree(sdd);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kobject *' should also have an identifier name
#833: FILE: include/linux/sysfs.h:133:
+int sysfs_enable_shadowing(struct kobject *, const struct shadow_dir_operations *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct shadow_dir_operations *' should also have an identifier name
#833: FILE: include/linux/sysfs.h:133:
+int sysfs_enable_shadowing(struct kobject *, const struct shadow_dir_operations *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#843: FILE: include/linux/sysfs.h:231:
+static inline int sysfs_enable_shadowing(struct kobject *kobj,
+				const struct shadow_dir_operations *shadow_ops)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 23 warnings, 12 checks, 681 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000447980.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
