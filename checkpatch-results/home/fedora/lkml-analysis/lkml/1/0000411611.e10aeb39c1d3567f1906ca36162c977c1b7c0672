WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#173: FILE: arch/i386/kernel/cpu/perfctr.c:47:
 void __devinit probe_performance_counters(void)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#297: FILE: arch/i386/kernel/cpu/perfctr.c:173:
+EXPORT_SYMBOL(avail_to_resrv_perfctr);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#299: FILE: arch/i386/kernel/cpu/perfctr.c:175:
+EXPORT_SYMBOL(reserve_perfctr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#300: FILE: arch/i386/kernel/cpu/perfctr.c:176:
+EXPORT_SYMBOL(release_perfctr);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#301: FILE: arch/i386/kernel/cpu/perfctr.c:177:
+EXPORT_SYMBOL(reserve_evntsel);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#302: FILE: arch/i386/kernel/cpu/perfctr.c:178:
+EXPORT_SYMBOL(release_evntsel);

ERROR:SPACING: space required before the open brace '{'
#387: FILE: arch/i386/oprofile/op_model_p4.c:416:
+		if (reserve_perfctr(addr)){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#554: FILE: arch/x86_64/kernel/time.c:263:
        for (i = 0; i < 4; i++)
+               if (avail_to_resrv_perfctr_bit(i))

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/x86_64/kernel/time.c:264:
+               if (avail_to_resrv_perfctr_bit(i))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/x86_64/kernel/time.c:264:
+               if (avail_to_resrv_perfctr_bit(i))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#556: FILE: arch/x86_64/kernel/time.c:264:
+               if (avail_to_resrv_perfctr_bit(i))
                        break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#563: FILE: arch/x86_64/kernel/time.c:272:
        } else {
+               reserve_perfctr(MSR_K7_PERFCTR0 + i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#566: FILE: arch/x86_64/kernel/time.c:273:
+               reserve_perfctr(MSR_K7_PERFCTR0 + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: arch/x86_64/kernel/time.c:273:
+               reserve_perfctr(MSR_K7_PERFCTR0 + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#567: FILE: arch/x86_64/kernel/time.c:274:
+               reserve_evntsel(MSR_K7_EVNTSEL0 + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: arch/x86_64/kernel/time.c:274:
+               reserve_evntsel(MSR_K7_EVNTSEL0 + i);$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#574: FILE: arch/x86_64/kernel/time.c:291:
        } else {
+               release_perfctr(MSR_K7_PERFCTR0 + i);

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/x86_64/kernel/time.c:292:
+               release_perfctr(MSR_K7_PERFCTR0 + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/x86_64/kernel/time.c:292:
+               release_perfctr(MSR_K7_PERFCTR0 + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/x86_64/kernel/time.c:293:
+               release_evntsel(MSR_K7_EVNTSEL0 + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#578: FILE: arch/x86_64/kernel/time.c:293:
+               release_evntsel(MSR_K7_EVNTSEL0 + i);$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#601: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#606: FILE: include/asm-i386/perfctr.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#607: FILE: include/asm-i386/perfctr.h:2:
+ *  linux/include/asm-i386/perfctr.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#612: FILE: include/asm-i386/perfctr.h:7:
+extern void probe_performance_counters(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#613: FILE: include/asm-i386/perfctr.h:8:
+extern int avail_to_resrv_perfctr_bit(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#613: FILE: include/asm-i386/perfctr.h:8:
+extern int avail_to_resrv_perfctr_bit(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#614: FILE: include/asm-i386/perfctr.h:9:
+extern int avail_to_resrv_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#614: FILE: include/asm-i386/perfctr.h:9:
+extern int avail_to_resrv_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#615: FILE: include/asm-i386/perfctr.h:10:
+extern int reserve_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#615: FILE: include/asm-i386/perfctr.h:10:
+extern int reserve_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: include/asm-i386/perfctr.h:11:
+extern void release_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#616: FILE: include/asm-i386/perfctr.h:11:
+extern void release_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#617: FILE: include/asm-i386/perfctr.h:12:
+extern int reserve_evntsel(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#617: FILE: include/asm-i386/perfctr.h:12:
+extern int reserve_evntsel(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#618: FILE: include/asm-i386/perfctr.h:13:
+extern void release_evntsel(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#618: FILE: include/asm-i386/perfctr.h:13:
+extern void release_evntsel(unsigned int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#645: FILE: include/asm-x86_64/perfctr.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#646: FILE: include/asm-x86_64/perfctr.h:2:
+ *  linux/include/asm-x86_64/perfctr.h

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#651: FILE: include/asm-x86_64/perfctr.h:7:
+extern void probe_performance_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#652: FILE: include/asm-x86_64/perfctr.h:8:
+extern int avail_to_resrv_perfctr_bit(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#652: FILE: include/asm-x86_64/perfctr.h:8:
+extern int avail_to_resrv_perfctr_bit(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#653: FILE: include/asm-x86_64/perfctr.h:9:
+extern int avail_to_resrv_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#653: FILE: include/asm-x86_64/perfctr.h:9:
+extern int avail_to_resrv_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#654: FILE: include/asm-x86_64/perfctr.h:10:
+extern int reserve_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#654: FILE: include/asm-x86_64/perfctr.h:10:
+extern int reserve_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#655: FILE: include/asm-x86_64/perfctr.h:11:
+extern void release_perfctr(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#655: FILE: include/asm-x86_64/perfctr.h:11:
+extern void release_perfctr(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: include/asm-x86_64/perfctr.h:12:
+extern int reserve_evntsel(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#656: FILE: include/asm-x86_64/perfctr.h:12:
+extern int reserve_evntsel(unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#657: FILE: include/asm-x86_64/perfctr.h:13:
+extern void release_evntsel(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#657: FILE: include/asm-x86_64/perfctr.h:13:
+extern void release_evntsel(unsigned int);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 32 warnings, 14 checks, 515 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000411611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
