WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#47: FILE: init/Kconfig:933:
+config TEST_CPUALLOC
+	tristate "Test alloc_percpu"
+	depends on DEBUG_KERNEL
+	help
+	  This tests the replacement alloc_percpu() implementation.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#67: FILE: init/test-cpualloc.c:1:
+/* Not a very informative test: it just crashes if something's wrong. */

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#79: FILE: init/test-cpualloc.c:13:
+	printk(KERN_INFO "Testing cpualloc for %u cpus\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: init/test-cpualloc.c:18:
+	BUG_ON(!p);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: init/test-cpualloc.c:24:
+		BUG_ON((unsigned long)per_cpu_ptr(p, i) % 128);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#93: FILE: init/test-cpualloc.c:27:
+			BUG_ON(((char *)per_cpu_ptr(p, i))[j]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#95: FILE: init/test-cpualloc.c:29:
+			BUG_ON(per_cpu_ptr(p, i) != thisp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: init/test-cpualloc.c:38:
+	BUG_ON(!p64);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#109: FILE: init/test-cpualloc.c:43:
+		BUG_ON((unsigned long)per_cpu_ptr(p64, i) % __alignof__(u64));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#111: FILE: init/test-cpualloc.c:45:
+		BUG_ON(*per_cpu_ptr(p64, i));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#113: FILE: init/test-cpualloc.c:47:
+			BUG_ON(per_cpu_ptr(p64, i) != thisp64);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#125: FILE: init/test-cpualloc.c:59:
+		BUG_ON((unsigned long)per_cpu_ptr(p64, i) % __alignof__(u64));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#127: FILE: init/test-cpualloc.c:61:
+		BUG_ON(*per_cpu_ptr(p64, i));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#129: FILE: init/test-cpualloc.c:63:
+			BUG_ON(per_cpu_ptr(p64, i) != thisp64);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203097.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 0 checks, 91 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000203097.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
