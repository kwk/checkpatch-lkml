WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: tests/slab_test.c:1:
+/* test-slab.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#98: FILE: tests/slab_test.c:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct test_struct *' should also have an identifier name
#121: FILE: tests/slab_test.c:33:
+	void (*test_p1)(struct test_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct test_struct *' should also have an identifier name
#122: FILE: tests/slab_test.c:34:
+	void (*test_p2)(struct test_struct *);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#127: FILE: tests/slab_test.c:39:
+} test[NR_CPUS];

CHECK:BRACES: braces {} should be used on all arms of this statement
#141: FILE: tests/slab_test.c:53:
+		if (smp_processor_id()) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#145: FILE: tests/slab_test.c:57:
+		} else

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: tests/slab_test.c:175:
+        cpu_set(t->cpu, newmask);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: tests/slab_test.c:175:
+        cpu_set(t->cpu, newmask);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: tests/slab_test.c:176:
+        set_cpus_allowed(current, newmask);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: tests/slab_test.c:176:
+        set_cpus_allowed(current, newmask);$

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#265: FILE: tests/slab_test.c:177:
+	t->v = kzalloc(t->count * sizeof(void *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#286: FILE: tests/slab_test.c:198:
+static void do_concurrent_test(void (*p1)(struct test_struct *),
+		void (*p2)(struct test_struct *),

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#311: FILE: tests/slab_test.c:223:
+			printk("Failed to start test func\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#338: FILE: tests/slab_test.c:250:
+	printk(KERN_ALERT "%s(%d):", name, size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#346: FILE: tests/slab_test.c:258:
+		printk(" %d=%lu", cpu, time1 / TEST_COUNT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#348: FILE: tests/slab_test.c:260:
+			printk("/%lu", time2 / TEST_COUNT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#350: FILE: tests/slab_test.c:262:
+	printk(" Average=%lu", sum1 / num_online_cpus() / TEST_COUNT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#352: FILE: tests/slab_test.c:264:
+		printk("/%lu", sum2 / num_online_cpus() / TEST_COUNT);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#353: FILE: tests/slab_test.c:265:
+	printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#366: FILE: tests/slab_test.c:278:
+	printk(KERN_ALERT "test init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#368: FILE: tests/slab_test.c:280:
+	printk(KERN_ALERT "Single thread testing\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#369: FILE: tests/slab_test.c:281:
+	printk(KERN_ALERT "=====================\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#370: FILE: tests/slab_test.c:282:
+	printk(KERN_ALERT "1. Kmalloc: Repeatedly allocate then free test\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#382: FILE: tests/slab_test.c:294:
+		printk(KERN_ALERT "%i times kmalloc(%d) ", i, size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#384: FILE: tests/slab_test.c:296:
+		printk("-> %llu cycles ", time);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#396: FILE: tests/slab_test.c:308:
+		printk("kfree ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#398: FILE: tests/slab_test.c:310:
+		printk("-> %llu cycles\n", time);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#401: FILE: tests/slab_test.c:313:
+	printk(KERN_ALERT "2. Kmalloc: alloc/free test\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#412: FILE: tests/slab_test.c:324:
+		printk(KERN_ALERT "%i times kmalloc(%d)/kfree ", i, size);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#414: FILE: tests/slab_test.c:326:
+		printk("-> %llu cycles\n", time);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#418: FILE: tests/slab_test.c:330:
+	printk(KERN_INFO "Concurrent allocs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#419: FILE: tests/slab_test.c:331:
+	printk(KERN_INFO "=================\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: tests/slab_test.c:334:
+		do_concurrent_test(kmalloc_alloc_then_free_test_p1,
+			kmalloc_alloc_then_free_test_p2,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: tests/slab_test.c:339:
+		do_concurrent_test(kmalloc_alloc_free_test_p1, NULL,
+			1 << i, "Kmalloc N*(alloc free)");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#430: FILE: tests/slab_test.c:342:
+	printk(KERN_INFO "Remote free test\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#431: FILE: tests/slab_test.c:343:
+	printk(KERN_INFO "================\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: tests/slab_test.c:346:
+		do_concurrent_test(remote_free_test_p1,
+				remote_free_test_p2,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#438: FILE: tests/slab_test.c:350:
+	printk(KERN_INFO "1 alloc N free test\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#439: FILE: tests/slab_test.c:351:
+	printk(KERN_INFO "===================\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#442: FILE: tests/slab_test.c:354:
+		do_concurrent_test(alloc_n_free_test_p1,
+				NULL,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#452: FILE: tests/slab_test.c:364:
+	printk(KERN_ALERT "test exit\n");

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#479: FILE: tests/Kconfig:1:
+menuconfig BENCHMARKS
+	bool "In kernel benchmarks"
+	def_bool n
+	help
+	  Includes in kernel benchmark modules in the build. These modules can
+	  be loaded later to trigger benchmarking kernel subsystems.
+	  Output will be generated in the system log.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#489: FILE: tests/Kconfig:11:
+config BENCHMARK_SLAB
+	tristate "Slab allocator Benchmark"
+	depends on m
+	default m
+	help
+	  A benchmark that measures slab allocator performance.
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059761.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 34 warnings, 8 checks, 413 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000059761.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
