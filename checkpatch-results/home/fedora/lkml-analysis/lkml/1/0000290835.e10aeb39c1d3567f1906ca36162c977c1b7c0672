WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
   git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-x86-pat.git for-linus

WARNING:TYPO_SPELLING: 'disasterous' may be misspelled - perhaps 'disastrous'?
#97: FILE: arch/x86/Kconfig.debug:16:
+	  obviously disasterous, but specific access can be used by people
 	            ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#160: FILE: arch/x86/mm/init_64.c:686:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#199: FILE: arch/x86/mm/ioremap.c:366:
+	return;
+}

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#220: FILE: arch/x86/mm/pat.c:25:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#255: FILE: arch/x86/mm/pat.c:222:
+			if (req_type == -1) {
[...]
+			} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: arch/x86/mm/pat.c:246:
+		u8 mtrr_type = mtrr_type_lookup(start, end);
+		if (mtrr_type == 0xFE) { /* MTRR match error */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#310: FILE: arch/x86/mm/pat.c:389:
+			printk(KERN_INFO "Overlap at 0x%Lx-0x%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#310: FILE: arch/x86/mm/pat.c:389:
+			printk(KERN_INFO "Overlap at 0x%Lx-0x%Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#319: FILE: arch/x86/mm/pat.c:399:
+		printk(KERN_INFO

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#334: FILE: arch/x86/mm/pat.c:415:
+		pr_debug(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#340: FILE: arch/x86/mm/pat.c:420:
+		pr_debug(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: arch/x86/mm/pat.c:457:
+		printk(KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n",

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#349: FILE: arch/x86/mm/pat.c:457:
+		printk(KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: arch/x86/mm/pat.c:458:
+		printk(KERN_INFO "%s:%d freeing invalid memtype %Lx-%Lx\n",
 			current->comm, current->pid, start, end);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'free_memtype', this function's name, in a string
#354: FILE: arch/x86/mm/pat.c:461:
+	pr_debug("free_memtype request 0x%Lx-0x%Lx\n", start, end);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#354: FILE: arch/x86/mm/pat.c:461:
+	pr_debug("free_memtype request 0x%Lx-0x%Lx\n", start, end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#358: FILE: arch/x86/mm/pat.c:465:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: arch/x86/mm/pat.c:475:
+pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
+				unsigned long size, pgprot_t vma_prot)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: arch/x86/mm/pat.c:481:
+int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
+				unsigned long size, pgprot_t *vma_prot)

CHECK:SPACING: No space is necessary after a cast
#376: FILE: arch/x86/mm/pat.c:483:
+	u64 offset = ((u64) pfn) << PAGE_SHIFT;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#381: FILE: arch/x86/mm/pat.c:488:
+	if (file->f_flags & O_SYNC) {
+		flags = _PAGE_CACHE_UC;
+	}

ERROR:SPACING: space prohibited after that '!' (ctx:ExW)
#395: FILE: arch/x86/mm/pat.c:502:
+	    ! ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||
 	    ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#395: FILE: arch/x86/mm/pat.c:502:
+	    ! ( test_bit(X86_FEATURE_MTRR, boot_cpu_data.x86_capability) ||

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#411: FILE: arch/x86/mm/pat.c:518:
+	if (flags != _PAGE_CACHE_UC_MINUS) {
[...]
+	} else {
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/x86/mm/pat.c:530:
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: arch/x86/mm/pat.c:530:
+	if (pfn <= max_pfn_mapped &&
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/x86/mm/pat.c:530:
+            ioremap_change_attr((unsigned long)__va(offset), size, flags) < 0) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#425: FILE: arch/x86/mm/pat.c:532:
+		printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#426: FILE: arch/x86/mm/pat.c:533:
+		"%s:%d /dev/mem ioremap_change_attr failed %s for %Lx-%Lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#446: FILE: arch/x86/mm/pat.c:553:
+		printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#447: FILE: arch/x86/mm/pat.c:554:
+		"%s:%d /dev/mem expected mapping type %s for %Lx-%Lx, got %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#517: FILE: drivers/char/mem.c:91:
+			printk(KERN_INFO

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#518: FILE: drivers/char/mem.c:92:
+		"Program %s tried to access /dev/mem between %Lx->%Lx.\n",

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#534: FILE: drivers/char/mem.c:108:
+void __attribute__((weak)) unxlate_dev_mem_ptr(unsigned long phys, void *addr)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#605: FILE: drivers/char/mem.c:257:
+int __attribute__((weak)) phys_mem_access_prot_allowed(struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/char/mem.c:258:
+int __attribute__((weak)) phys_mem_access_prot_allowed(struct file *file,
+	unsigned long pfn, unsigned long size, pgprot_t *vma_prot)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#618: FILE: drivers/char/mem.c:303:
+void __attribute__((weak))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#624: FILE: drivers/char/mem.c:309:
+void __attribute__((weak))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#633: FILE: drivers/char/mem.c:318:
+	map_devmem(vma->vm_pgoff,  vma->vm_end - vma->vm_start,
+			vma->vm_page_prot);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#639: FILE: drivers/char/mem.c:324:
+	unmap_devmem(vma->vm_pgoff,  vma->vm_end - vma->vm_start,
+			vma->vm_page_prot);

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#642: FILE: drivers/char/mem.c:327:
+static struct vm_operations_struct mmap_mem_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#658: FILE: drivers/char/mem.c:346:
+	if (!phys_mem_access_prot_allowed(file, vma->vm_pgoff, size,
+						&vma->vm_page_prot))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#700: FILE: include/asm-x86/io.h:1:
+#ifndef _ASM_X86_IO_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#711: FILE: include/asm-x86/io.h:12:
+extern void *xlate_dev_mem_ptr(unsigned long phys);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#712: FILE: include/asm-x86/io.h:13:
+extern void unxlate_dev_mem_ptr(unsigned long phys, void *addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/asm-x86/page.h:50:
+extern int devmem_is_allowed(unsigned long pagenr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: include/asm-x86/pgtable.h:296:
+                              unsigned long size, pgprot_t vma_prot);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: include/asm-x86/pgtable.h:296:
+                              unsigned long size, pgprot_t vma_prot);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: include/asm-x86/pgtable.h:298:
+                              unsigned long size, pgprot_t *vma_prot);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#779: FILE: include/asm-x86/pgtable.h:298:
+int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
+                              unsigned long size, pgprot_t *vma_prot);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: include/asm-x86/pgtable.h:298:
+                              unsigned long size, pgprot_t *vma_prot);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 29 warnings, 18 checks, 628 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
