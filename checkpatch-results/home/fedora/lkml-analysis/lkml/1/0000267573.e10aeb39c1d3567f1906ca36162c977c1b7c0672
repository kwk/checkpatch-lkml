WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
statements. Some of these methods include 'dprintk', 'pr_debug', 'dev_debug',

WARNING:REPEATED_WORD: Possible repeated word: 'how'
#37: 
I've attempted to standardize how how the kernel deals with debugging

ERROR:TRAILING_WHITESPACE: trailing whitespace
#83: FILE: Documentation/kernel-parameters.txt:1584:
+^I^I^IEnables pr_debug()/dev_dbg() calls if $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#84: FILE: Documentation/kernel-parameters.txt:1585:
+^I^I^ICONFIG_PRINK_DYNAMIC has been enabled. These can also $

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#127: FILE: include/linux/device.h:599:
+#define dev_dbg(dev, format, ...) do {^I^I^I^I    ^I     \$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dev' - possible side-effects?
#127: FILE: include/linux/device.h:599:
+#define dev_dbg(dev, format, ...) do {				    	     \
+	static char mod_name[]						     \
+	__attribute__((section("__verbose_strings")))			     \
+	 = KBUILD_MODNAME;						     \
+	static struct mod_debug foobar					     \
+	__used								     \
+	__attribute__((section("__verbose"), aligned(8))) =		     \
+	{ mod_name, mod_name, "0", "0", NULL };				     \
+	int hash = dynamic_name_hash(KBUILD_MODNAME);			     \
+	if (dynamic_printk_enabled[raw_smp_processor_id()] & (1 << hash))    \
+		dynamic_printk(KBUILD_MODNAME,				     \
+				KERN_DEBUG KBUILD_MODNAME ": %s %s: " format,\
+				dev_driver_string(dev), (dev)->bus_id,	     \
+				##__VA_ARGS__);				     \
+	} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#129: FILE: include/linux/device.h:601:
+	__attribute__((section("__verbose_strings")))			     \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#130: FILE: include/linux/device.h:602:
+	__attribute__((section("__verbose_strings")))			     \
+	 = KBUILD_MODNAME;						     \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#133: FILE: include/linux/device.h:605:
+	__attribute__((section("__verbose"), aligned(8))) =		     \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#133: FILE: include/linux/device.h:605:
+	__attribute__((section("__verbose"), aligned(8))) =		     \

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#146: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#151: FILE: include/linux/dynamic_printk.h:1:
+#ifndef _DYNAMIC_PRINTK_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#160: FILE: include/linux/dynamic_printk.h:10:
+#define DEBUG_HASH_TABLE_SIZE (1 << DYNAMIC_DEBUG_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#174: FILE: include/linux/dynamic_printk.h:24:
+} __attribute__((aligned(8)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/dynamic_printk.h:27:
+extern int unregister_debug_module(char *mod_name);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/linux/dynamic_printk.h:36:
+extern void dynamic_printk(char *, char *, ...);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#186: FILE: include/linux/dynamic_printk.h:36:
+extern void dynamic_printk(char *, char *, ...);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#186: FILE: include/linux/dynamic_printk.h:36:
+extern void dynamic_printk(char *, char *, ...);

WARNING:LINE_SPACING: Missing a blank line after declarations
#191: FILE: include/linux/dynamic_printk.h:41:
+	unsigned int hash = full_name_hash(name, strlen(name));
+	return (hash & ((1 << DYNAMIC_DEBUG_HASH_BITS) - 1));

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#196: FILE: include/linux/dynamic_printk.h:46:
+int register_debug_module(char *mod_name, int type, char *share_name,
+				int num_flags, char *flags);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#220: FILE: include/linux/kernel.h:294:
+^Istatic char bar[]^I           ^I^I   ^I   \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#221: FILE: include/linux/kernel.h:295:
+	__attribute__((section("__verbose_strings")))		   \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#222: FILE: include/linux/kernel.h:296:
+	__attribute__((section("__verbose_strings")))		   \
+	 = KBUILD_MODNAME;					   \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#223: FILE: include/linux/kernel.h:297:
+^Istatic struct mod_debug foobar ^I   ^I^I   ^I   \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#225: FILE: include/linux/kernel.h:299:
+	__attribute__((section("__verbose"), aligned(8))) =	   \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#225: FILE: include/linux/kernel.h:299:
+	__attribute__((section("__verbose"), aligned(8))) =	   \

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#226: FILE: include/linux/kernel.h:300:
+^I{ bar, bar, "0", "0", NULL };^I^I   ^I^I   \$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#236: FILE: include/linux/kernel.h:309:
+	 printk(KERN_DEBUG fmt, ##arg)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: include/linux/kernel.h:329:
+^Iint ret = 0;^I^I^I      ^I      \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#259: FILE: include/linux/kernel.h:332:
+	__attribute__((section("__verbose_strings"))) \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#260: FILE: include/linux/kernel.h:333:
+	__attribute__((section("__verbose_strings"))) \
+	= KBUILD_MODNAME;			      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#262: FILE: include/linux/kernel.h:335:
+	__attribute__((section("__verbose_strings"))) \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#263: FILE: include/linux/kernel.h:336:
+	__attribute__((section("__verbose_strings"))) \
+	= DYNAMIC_DEBUG_MODNAME;		      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#265: FILE: include/linux/kernel.h:338:
+	__attribute__((section("__verbose_strings"))) \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#266: FILE: include/linux/kernel.h:339:
+	__attribute__((section("__verbose_strings"))) \
+	= DYNAMIC_DEBUG_NUM_FLAGS;		      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#268: FILE: include/linux/kernel.h:341:
+	__attribute__((section("__verbose_strings"))) \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#269: FILE: include/linux/kernel.h:342:
+	__attribute__((section("__verbose_strings"))) \
+	= DYNAMIC_DEBUG_FLAG_NAMES;		      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose_strings") over __attribute__((section("__verbose_strings")))
#271: FILE: include/linux/kernel.h:344:
+	__attribute__((section("__verbose_strings"))) \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#272: FILE: include/linux/kernel.h:345:
+	__attribute__((section("__verbose_strings"))) \
+	= DYNAMIC_DEBUG_TYPE;			      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__verbose") over __attribute__((section("__verbose")))
#275: FILE: include/linux/kernel.h:348:
+	__attribute__((section("__verbose"), aligned(8)))		       \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#275: FILE: include/linux/kernel.h:348:
+	__attribute__((section("__verbose"), aligned(8)))		       \

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#276: FILE: include/linux/kernel.h:349:
+	__attribute__((section("__verbose"), aligned(8)))		       \
+	= { mod_name, logical_mod_name, register_type, num_flags, flag_names };\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#283: FILE: include/linux/kernel.h:356:
+#define dynamic_dbg_enabled(type, value, level) do { \
+	if (type == TYPE_LEVEL) {		 \
+		if (value < level)		 \
+			return 1;		 \
+	} else if (type == TYPE_FLAG) {		 \
+		if (value & level)		 \
+			return 1;		 \
+	} else if (type == TYPE_BOOLEAN)	 \
+		return 1;			 \
+	return 0;				 \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'value' may be better as '(value)' to avoid precedence issues
#283: FILE: include/linux/kernel.h:356:
+#define dynamic_dbg_enabled(type, value, level) do { \
+	if (type == TYPE_LEVEL) {		 \
+		if (value < level)		 \
+			return 1;		 \
+	} else if (type == TYPE_FLAG) {		 \
+		if (value & level)		 \
+			return 1;		 \
+	} else if (type == TYPE_BOOLEAN)	 \
+		return 1;			 \
+	return 0;				 \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'level' - possible side-effects?
#283: FILE: include/linux/kernel.h:356:
+#define dynamic_dbg_enabled(type, value, level) do { \
+	if (type == TYPE_LEVEL) {		 \
+		if (value < level)		 \
+			return 1;		 \
+	} else if (type == TYPE_FLAG) {		 \
+		if (value & level)		 \
+			return 1;		 \
+	} else if (type == TYPE_BOOLEAN)	 \
+		return 1;			 \
+	return 0;				 \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'level' may be better as '(level)' to avoid precedence issues
#283: FILE: include/linux/kernel.h:356:
+#define dynamic_dbg_enabled(type, value, level) do { \
+	if (type == TYPE_LEVEL) {		 \
+		if (value < level)		 \
+			return 1;		 \
+	} else if (type == TYPE_FLAG) {		 \
+		if (value & level)		 \
+			return 1;		 \
+	} else if (type == TYPE_BOOLEAN)	 \
+		return 1;			 \
+	return 0;				 \
+	} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#283: FILE: include/linux/kernel.h:356:
+#define dynamic_dbg_enabled(type, value, level) do { \
+	if (type == TYPE_LEVEL) {		 \
+		if (value < level)		 \
+			return 1;		 \
+	} else if (type == TYPE_FLAG) {		 \
+		if (value & level)		 \
+			return 1;		 \
+	} else if (type == TYPE_BOOLEAN)	 \
+		return 1;			 \
+	return 0;				 \
+	} while (0)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#380: FILE: kernel/module.c:2058:
+	for (value = (unsigned long)mod->start_verbose;
[...]
+			iter = (struct mod_debug *)value;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#386: FILE: kernel/module.c:2064:
+			register_debug_module(iter->modname,
+				simple_strtoul(iter->type, NULL, 10),

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#386: FILE: kernel/module.c:2064:
+				simple_strtoul(iter->type, NULL, 10),

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#388: FILE: kernel/module.c:2066:
+				simple_strtoul(iter->num_flags, NULL, 10),

ERROR:TRAILING_WHITESPACE: trailing whitespace
#409: FILE: lib/Kconfig.debug:641:
+^I $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#412: FILE: lib/Kconfig.debug:644:
+^I  enabled/disabled on a per module basis. This mechanism, implicitly $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#413: FILE: lib/Kconfig.debug:645:
+^I  enables all pr_debug() and dev_dbg() calls. It also introduces a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#414: FILE: lib/Kconfig.debug:646:
+^I  'dynamic_dbg_enabled()' function which allows subsystems to implement $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#415: FILE: lib/Kconfig.debug:647:
+^I  more complex dynamic debugging, including the use of per-subsystem $

WARNING:REPEATED_WORD: Possible repeated word: 'and'
#416: FILE: lib/Kconfig.debug:648:
+	  flags and and level controls. The impact of this compile option is a 

ERROR:TRAILING_WHITESPACE: trailing whitespace
#416: FILE: lib/Kconfig.debug:648:
+^I  flags and and level controls. The impact of this compile option is a $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#421: FILE: lib/Kconfig.debug:653:
+^I  Dynamic debugging is controlled by the debugfs file, $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#422: FILE: lib/Kconfig.debug:654:
+^I  dynamic_printk/modules. This file contains a list of the active $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#433: FILE: lib/Kconfig.debug:665:
+^I^Icpufreq_shared 0 flag 0 $

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#438: FILE: lib/Kconfig.debug:670:
+	  <enabled/disabled> : whether the the messages are enabled or not

ERROR:TRAILING_WHITESPACE: trailing whitespace
#455: FILE: lib/Kconfig.debug:687:
+^I  To set the level or flag value for type 'level' or 'flag': $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#460: FILE: lib/Kconfig.debug:692:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: lib/Kconfig.debug:699:
+^I  Finally, passing "dynamic_printk" at the command line enables all $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: lib/Kconfig.debug:701:
+^I$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#492: FILE: lib/dynamic_printk.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#493: FILE: lib/dynamic_printk.c:2:
+ * lib/dynamic_printk.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:REPEATED_WORD: Possible repeated word: 'their'
#496: FILE: lib/dynamic_printk.c:5:
+ * make pr_debug()/dev_dbg() calls runtime configurable based upon their
+ * their source module.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#514: FILE: lib/dynamic_printk.c:23:
+extern struct mod_debug __start___verbose[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#515: FILE: lib/dynamic_printk.c:24:
+extern struct mod_debug __stop___verbose[];

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#525: FILE: lib/dynamic_printk.c:34:
+static struct hlist_head module_table[DEBUG_HASH_TABLE_SIZE] =
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#525: FILE: lib/dynamic_printk.c:34:
+	{ [0 ... DEBUG_HASH_TABLE_SIZE-1] = HLIST_HEAD_INIT };
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new)...) over kzalloc(sizeof(struct debug_name)...)
#591: FILE: lib/dynamic_printk.c:100:
+	new = kzalloc(sizeof(struct debug_name), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: lib/dynamic_printk.c:110:
+	hlist_add_head_rcu(&new->hlist,
+				&module_table[dynamic_name_hash(new->name)]);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#639: FILE: lib/dynamic_printk.c:148:
+	if (element->name)
+		kfree(element->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#665: FILE: lib/dynamic_printk.c:174:
+int register_debug_module(char *mod_name, int type, char *share_name,
+				int num_flags, char *flags)

CHECK:BRACES: braces {} should be used on all arms of this statement
#677: FILE: lib/dynamic_printk.c:186:
+	if (strcmp(mod_name, share_name)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#689: FILE: lib/dynamic_printk.c:198:
+	} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elem->type_sharing == SHARING_MEMBER'
#692: FILE: lib/dynamic_printk.c:201:
+		if ((elem->type_sharing == SHARING_MEMBER) && elem->parent)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*elem->flags)...) over kzalloc(sizeof(struct flags_descriptor)...)
#694: FILE: lib/dynamic_printk.c:203:
+		elem->flags = kzalloc(sizeof(struct flags_descriptor),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: lib/dynamic_printk.c:204:
+		elem->flags = kzalloc(sizeof(struct flags_descriptor),
+					GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#696: FILE: lib/dynamic_printk.c:205:
+		elem->flags->flag_names = kmalloc(sizeof(char *) * num_flags,
+							GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#697: FILE: lib/dynamic_printk.c:206:
+		elem->flags->flag_names = kmalloc(sizeof(char *) * num_flags,
+							GFP_KERNEL);

WARNING:MEMORY_BARRIER: memory barrier without comment
#702: FILE: lib/dynamic_printk.c:211:
+		smp_wmb();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elem->type_sharing == SHARING_MEMBER'
#718: FILE: lib/dynamic_printk.c:227:
+		if ((elem->type_sharing == SHARING_MEMBER) && elem->parent)

CHECK:BRACES: braces {} should be used on all arms of this statement
#721: FILE: lib/dynamic_printk.c:230:
+			if (elem->type == TYPE_LEVEL) {
[...]
+			} else if (elem->type == TYPE_FLAG) {
[...]
+			} else if (elem->type == TYPE_BOOLEAN)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "module_table[i].first"
#761: FILE: lib/dynamic_printk.c:270:
+		if (module_table[i].first != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#771: FILE: lib/dynamic_printk.c:280:
+	for (i = 0; i < NR_CPUS; i++)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#788: FILE: lib/dynamic_printk.c:297:
+static ssize_t pr_debug_write(struct file *file, const char __user *buf,
+				size_t length, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#808: FILE: lib/dynamic_printk.c:317:
+	else if (buffer[PAGE_SIZE-1])
 	                         ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#829: FILE: lib/dynamic_printk.c:338:
+				for (i = 0; i < NR_CPUS; i++)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#846: FILE: lib/dynamic_printk.c:355:
+					for (i = 0; i < NR_CPUS; i++)

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#859: FILE: lib/dynamic_printk.c:368:
+			elem->level = simple_strtol(level, NULL, 10);

CHECK:SPACING: No space is necessary after a cast
#896: FILE: lib/dynamic_printk.c:405:
+	unsigned int i = *(loff_t *) v;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#905: FILE: lib/dynamic_printk.c:414:
+		seq_printf(s, "%s %d %s %d", elem->name, elem->enable,
+				type_to_string[elem->type], elem->level);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'elem->type == TYPE_FLAG'
#906: FILE: lib/dynamic_printk.c:415:
+		if ((elem->type == TYPE_FLAG) && elem->flags) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#909: FILE: lib/dynamic_printk.c:418:
+				seq_printf(s, " %s",
+						elem->flags->flag_names[j]);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#911: FILE: lib/dynamic_printk.c:420:
+		seq_printf(s, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#915: FILE: lib/dynamic_printk.c:424:
+				elem_shared = list_entry(p, struct debug_name,
+								shared_list);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#918: FILE: lib/dynamic_printk.c:427:
+			seq_printf(s, "\n");

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#925: FILE: lib/dynamic_printk.c:434:
+static struct seq_operations pr_debug_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#932: FILE: lib/dynamic_printk.c:441:
+static int pr_debug_open(struct inode *inode, struct file *filp)
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#934: FILE: lib/dynamic_printk.c:443:
+	return seq_open(filp, &pr_debug_seq_ops);
 	                ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#955: FILE: lib/dynamic_printk.c:464:
+	file = debugfs_create_file("modules", 0644, dir, NULL,
+					&pr_debug_operations);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#960: FILE: lib/dynamic_printk.c:469:
+	for (value = (unsigned long)__start___verbose;
[...]
+			iter = (struct mod_debug *)value;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#965: FILE: lib/dynamic_printk.c:474:
+			register_debug_module(iter->modname,
+				simple_strtoul(iter->type, NULL, 10),

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#965: FILE: lib/dynamic_printk.c:474:
+				simple_strtoul(iter->type, NULL, 10),

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#967: FILE: lib/dynamic_printk.c:476:
+				simple_strtoul(iter->num_flags, NULL, 10),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#982: FILE: lib/dynamic_printk.c:491:
+}
+/* Use early_param(), so we can get debug output as early as possible */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 16 errors, 53 warnings, 41 checks, 858 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000267573.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
