CHECK:BIT_MACRO: Prefer using the BIT macro
#50: FILE: arch/x86/include/asm/paravirt.h:15:
+#define CLBR_EDI  (1 << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#63: FILE: arch/x86/include/asm/paravirt.h:25:
+#define CLBR_RSI  (1 << 4)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#86: FILE: arch/x86/include/asm/paravirt.h:1541:
+#define COND_PUSH(set, mask, reg)			\
+	.if ((~set) & mask); push %reg; .endif

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'set' may be better as '(set)' to avoid precedence issues
#86: FILE: arch/x86/include/asm/paravirt.h:1541:
+#define COND_PUSH(set, mask, reg)			\
+	.if ((~set) & mask); push %reg; .endif

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#86: FILE: arch/x86/include/asm/paravirt.h:1541:
+#define COND_PUSH(set, mask, reg)			\
+	.if ((~set) & mask); push %reg; .endif

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#86: FILE: arch/x86/include/asm/paravirt.h:1541:
+#define COND_PUSH(set, mask, reg)			\
+	.if ((~set) & mask); push %reg; .endif

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#87: FILE: arch/x86/include/asm/paravirt.h:1542:
+	.if ((~set) & mask); push %reg; .endif
 	                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#87: FILE: arch/x86/include/asm/paravirt.h:1542:
+	.if ((~set) & mask); push %reg; .endif

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#88: FILE: arch/x86/include/asm/paravirt.h:1543:
+#define COND_POP(set, mask, reg)			\
+	.if ((~set) & mask); pop %reg; .endif

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'set' may be better as '(set)' to avoid precedence issues
#88: FILE: arch/x86/include/asm/paravirt.h:1543:
+#define COND_POP(set, mask, reg)			\
+	.if ((~set) & mask); pop %reg; .endif

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'mask' may be better as '(mask)' to avoid precedence issues
#88: FILE: arch/x86/include/asm/paravirt.h:1543:
+#define COND_POP(set, mask, reg)			\
+	.if ((~set) & mask); pop %reg; .endif

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'reg' may be better as '(reg)' to avoid precedence issues
#88: FILE: arch/x86/include/asm/paravirt.h:1543:
+#define COND_POP(set, mask, reg)			\
+	.if ((~set) & mask); pop %reg; .endif

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#89: FILE: arch/x86/include/asm/paravirt.h:1544:
+	.if ((~set) & mask); pop %reg; .endif
 	                         ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#89: FILE: arch/x86/include/asm/paravirt.h:1544:
+	.if ((~set) & mask); pop %reg; .endif

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#113: FILE: arch/x86/include/asm/paravirt.h:1548:
+#define PV_SAVE_REGS(set)			\
+	COND_PUSH(set, CLBR_RAX, rax);		\
+	COND_PUSH(set, CLBR_RCX, rcx);		\
+	COND_PUSH(set, CLBR_RDX, rdx);		\
+	COND_PUSH(set, CLBR_RSI, rsi);		\
+	COND_PUSH(set, CLBR_RDI, rdi);		\
+	COND_PUSH(set, CLBR_R8, r8);		\
+	COND_PUSH(set, CLBR_R9, r9);		\
+	COND_PUSH(set, CLBR_R10, r10);		\
+	COND_PUSH(set, CLBR_R11, r11)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#113: FILE: arch/x86/include/asm/paravirt.h:1548:
+#define PV_SAVE_REGS(set)			\
+	COND_PUSH(set, CLBR_RAX, rax);		\
+	COND_PUSH(set, CLBR_RCX, rcx);		\
+	COND_PUSH(set, CLBR_RDX, rdx);		\
+	COND_PUSH(set, CLBR_RSI, rsi);		\
+	COND_PUSH(set, CLBR_RDI, rdi);		\
+	COND_PUSH(set, CLBR_R8, r8);		\
+	COND_PUSH(set, CLBR_R9, r9);		\
+	COND_PUSH(set, CLBR_R10, r10);		\
+	COND_PUSH(set, CLBR_R11, r11)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#123: FILE: arch/x86/include/asm/paravirt.h:1558:
+#define PV_RESTORE_REGS(set)			\
+	COND_POP(set, CLBR_R11, r11);		\
+	COND_POP(set, CLBR_R10, r10);		\
+	COND_POP(set, CLBR_R9, r9);		\
+	COND_POP(set, CLBR_R8, r8);		\
+	COND_POP(set, CLBR_RDI, rdi);		\
+	COND_POP(set, CLBR_RSI, rsi);		\
+	COND_POP(set, CLBR_RDX, rdx);		\
+	COND_POP(set, CLBR_RCX, rcx);		\
+	COND_POP(set, CLBR_RAX, rax)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#123: FILE: arch/x86/include/asm/paravirt.h:1558:
+#define PV_RESTORE_REGS(set)			\
+	COND_POP(set, CLBR_R11, r11);		\
+	COND_POP(set, CLBR_R10, r10);		\
+	COND_POP(set, CLBR_R9, r9);		\
+	COND_POP(set, CLBR_R8, r8);		\
+	COND_POP(set, CLBR_RDI, rdi);		\
+	COND_POP(set, CLBR_RSI, rsi);		\
+	COND_POP(set, CLBR_RDX, rdx);		\
+	COND_POP(set, CLBR_RCX, rcx);		\
+	COND_POP(set, CLBR_RAX, rax)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#140: FILE: arch/x86/include/asm/paravirt.h:1573:
+#define PV_SAVE_REGS(set)			\
+	COND_PUSH(set, CLBR_EAX, eax);		\
+	COND_PUSH(set, CLBR_EDI, edi);		\
+	COND_PUSH(set, CLBR_ECX, ecx);		\
+	COND_PUSH(set, CLBR_EDX, edx)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#140: FILE: arch/x86/include/asm/paravirt.h:1573:
+#define PV_SAVE_REGS(set)			\
+	COND_PUSH(set, CLBR_EAX, eax);		\
+	COND_PUSH(set, CLBR_EDI, edi);		\
+	COND_PUSH(set, CLBR_ECX, ecx);		\
+	COND_PUSH(set, CLBR_EDX, edx)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#145: FILE: arch/x86/include/asm/paravirt.h:1578:
+#define PV_RESTORE_REGS(set)			\
+	COND_POP(set, CLBR_EDX, edx);		\
+	COND_POP(set, CLBR_ECX, ecx);		\
+	COND_POP(set, CLBR_EDI, edi);		\
+	COND_POP(set, CLBR_EAX, eax)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'set' - possible side-effects?
#145: FILE: arch/x86/include/asm/paravirt.h:1578:
+#define PV_RESTORE_REGS(set)			\
+	COND_POP(set, CLBR_EDX, edx);		\
+	COND_POP(set, CLBR_ECX, ecx);		\
+	COND_POP(set, CLBR_EDI, edi);		\
+	COND_POP(set, CLBR_EAX, eax)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#189: FILE: arch/x86/include/asm/paravirt.h:1641:
+		  call PARA_INDIRECT(pv_cpu_ops+PV_CPU_swapgs)		\
 		                               ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 0 warnings, 15 checks, 143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174880.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
