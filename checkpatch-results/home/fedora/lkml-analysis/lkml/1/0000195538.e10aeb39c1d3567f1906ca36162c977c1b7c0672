WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:TYPO_SPELLING: 'EXTRAVERSION' may be misspelled - perhaps 'EXTROVERSION'?
#80: FILE: Makefile:4:
+EXTRAVERSION = .8
 ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#101: FILE: arch/ia64/kernel/acpi.c:668:
+		printk(KERN_ERR PREFIX "Can't find MADT\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: arch/ia64/kernel/acpi.c:673:
+	ret = acpi_table_parse_madt(ACPI_MADT_TYPE_LOCAL_SAPIC,
+		acpi_parse_lsapic, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#106: FILE: arch/ia64/kernel/acpi.c:673:
+		acpi_parse_lsapic, NR_CPUS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#108: FILE: arch/ia64/kernel/acpi.c:675:
+		printk(KERN_ERR PREFIX

CHECK:LINE_SPACING: Please don't use multiple blank lines
#114: FILE: arch/ia64/kernel/acpi.c:681:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: arch/parisc/kernel/traps.c:54:
+static void parisc_show_stack(struct task_struct *task, unsigned long *sp,
 	struct pt_regs *regs);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#216: FILE: arch/parisc/kernel/traps.c:150:
+		printk("%s IAOQ[0]: " RFMT "\n", level, regs->iaoq[0]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#217: FILE: arch/parisc/kernel/traps.c:151:
+		printk("%s IAOQ[1]: " RFMT "\n", level, regs->iaoq[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#218: FILE: arch/parisc/kernel/traps.c:152:
+		printk("%s RP(r2): " RFMT "\n", level, regs->gr[2]);

CHECK:SPACING: No space is necessary after a cast
#220: FILE: arch/parisc/kernel/traps.c:154:
+		printk("%s IAOQ[0]: %pS\n", level, (void *) regs->iaoq[0]);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#220: FILE: arch/parisc/kernel/traps.c:154:
+		printk("%s IAOQ[0]: %pS\n", level, (void *) regs->iaoq[0]);

CHECK:SPACING: No space is necessary after a cast
#221: FILE: arch/parisc/kernel/traps.c:155:
+		printk("%s IAOQ[1]: %pS\n", level, (void *) regs->iaoq[1]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#221: FILE: arch/parisc/kernel/traps.c:155:
+		printk("%s IAOQ[1]: %pS\n", level, (void *) regs->iaoq[1]);

CHECK:SPACING: No space is necessary after a cast
#222: FILE: arch/parisc/kernel/traps.c:156:
+		printk("%s RP(r2): %pS\n", level, (void *) regs->gr[2]);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#222: FILE: arch/parisc/kernel/traps.c:156:
+		printk("%s RP(r2): %pS\n", level, (void *) regs->gr[2]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#240: FILE: arch/parisc/kernel/traps.c:180:
+			printk(KERN_CRIT " [<" RFMT ">] %pS\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: arch/parisc/kernel/traps.c:181:
+			printk(KERN_CRIT " [<" RFMT ">] %pS\n",
+				info->ip, (void *) info->ip);

CHECK:SPACING: No space is necessary after a cast
#241: FILE: arch/parisc/kernel/traps.c:181:
+				info->ip, (void *) info->ip);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#246: FILE: arch/parisc/kernel/traps.c:185:
+	printk(KERN_CRIT "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: arch/parisc/kernel/traps.c:189:
+static void parisc_show_stack(struct task_struct *task, unsigned long *sp,
 	struct pt_regs *regs)

WARNING:MISPLACED_INIT: __initdata should be placed after acpi_dmi_table_late[]
#293: FILE: arch/x86/kernel/acpi/boot.c:1600:
+static struct dmi_system_id __initdata acpi_dmi_table_late[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#351: FILE: arch/x86/kernel/cpu/cpufreq/powernow-k8.h:8:
 
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#413: FILE: arch/x86/kernel/early-quirks.c:149:
+	d &= ~(1<<8);
 	        ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#435: FILE: arch/x86/kernel/early-quirks.c:171:
+	if (!(d & (1<<14)))
 	            ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#439: FILE: arch/x86/kernel/early-quirks.c:175:
+		printk(KERN_INFO "SB600 revision 0x%x\n", rev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#440: FILE: arch/x86/kernel/early-quirks.c:176:
+		printk(KERN_INFO "Ignoring ACPI timer override.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#441: FILE: arch/x86/kernel/early-quirks.c:177:
+		printk(KERN_INFO "If you got timer trouble "

WARNING:SPLIT_STRING: quoted string split across lines
#442: FILE: arch/x86/kernel/early-quirks.c:178:
+		printk(KERN_INFO "If you got timer trouble "
+		       "try acpi_use_timer_override\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#505: FILE: arch/x86/mm/discontig_32.c:242:
+		printk(KERN_DEBUG "%s: node %d\n", __FUNCTION__, node);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#505: FILE: arch/x86/mm/discontig_32.c:242:
+		printk(KERN_DEBUG "%s: node %d\n", __FUNCTION__, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#514: FILE: arch/x86/mm/discontig_32.c:251:
+			set_pmd(pmd, pfn_pmd(start_pfn + pfn,
+						PAGE_KERNEL_LARGE_EXEC));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#516: FILE: arch/x86/mm/discontig_32.c:253:
+			printk(KERN_DEBUG "%s: %08lx -> pfn %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: arch/x86/mm/discontig_32.c:254:
+			printk(KERN_DEBUG "%s: %08lx -> pfn %08lx\n",
+				__FUNCTION__, vaddr, start_pfn + pfn);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#517: FILE: arch/x86/mm/discontig_32.c:254:
+				__FUNCTION__, vaddr, start_pfn + pfn);

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmzone.h> instead of <asm/mmzone.h>
#534: FILE: arch/x86/power/hibernate_32.c:15:
+#include <asm/mmzone.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:SPLIT_STRING: quoted string split across lines
#616: FILE: drivers/ata/libata-core.c:2433:
+		ata_dev_printk(dev, KERN_WARNING, "WARNING: device requires "
+			       "firmware update to be fully functional.\n");

WARNING:SPLIT_STRING: quoted string split across lines
#618: FILE: drivers/ata/libata-core.c:2435:
+		ata_dev_printk(dev, KERN_WARNING, "         contact the vendor "
+			       "or visit http://ata.wiki.kernel.org.\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: drivers/gpio/gpiolib.c:1053:
+		seq_printf(s, " gpio-%-3d (%-20.20s) %s %s",
 			gpio, gdesc->label,

WARNING:HOTPLUG_SECTION: Using __devinitdata is unnecessary
#1014: FILE: drivers/net/wireless/rtl8187_dev.c:33:
 static struct usb_device_id rtl8187_table[] __devinitdata = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1754: FILE: drivers/pci/hotplug/fakephp.c:175:
+		err("Problem unregistering a slot %s\n",
+			hotplug_slot_name(dslot->slot));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1915: FILE: drivers/pci/hotplug/pci_hotplug_core.c:555:
+int pci_hp_register(struct hotplug_slot *slot, struct pci_bus *bus, int slot_nr,
+			const char *name)

WARNING:SPLIT_STRING: quoted string split across lines
#2255: FILE: drivers/pci/hotplug/pciehp_ctrl.c:407:
 			info("PCI slot #%s - powering off due to button "
+			     "press.\n", slot_name(p_slot));

WARNING:SPLIT_STRING: quoted string split across lines
#2260: FILE: drivers/pci/hotplug/pciehp_ctrl.c:411:
 			info("PCI slot #%s - powering on due to button "
+			     "press.\n", slot_name(p_slot));

WARNING:SPLIT_STRING: quoted string split across lines
#2755: FILE: drivers/pci/hotplug/shpchp_ctrl.c:496:
 			info("PCI slot #%s - powering off due to button "
+			     "press.\n", slot_name(p_slot));

WARNING:SPLIT_STRING: quoted string split across lines
#2760: FILE: drivers/pci/hotplug/shpchp_ctrl.c:500:
 			info("PCI slot #%s - powering on due to button "
+			     "press.\n", slot_name(p_slot));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2897: FILE: drivers/pci/slot.c:96:
+		struct kobject *dup_slot;
+		dup_slot = kset_find_obj(pci_slots_kset, new_name);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3025: FILE: drivers/pci/slot.c:206:
+			if ((err = slot->hotplug ? -EBUSY : 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3026: FILE: drivers/pci/slot.c:207:
+			if ((err = slot->hotplug ? -EBUSY : 0)
+			     || (err = rename_slot(slot, name))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3118: FILE: drivers/spi/pxa2xx_spi.c:362:
+	drv_data->rx_dma = dma_map_single(dev, drv_data->rx,
 					drv_data->rx_map_len, DMA_FROM_DEVICE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3121: FILE: drivers/spi/pxa2xx_spi.c:365:
+		dma_unmap_single(dev, drv_data->tx_dma,
+					drv_data->tx_map_len, DMA_TO_DEVICE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x4386'
#3167: FILE: drivers/usb/host/ehci-pci.c:175:
+		if ((pdev->device == 0x4386) || (pdev->device == 0x4396)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x4396'
#3167: FILE: drivers/usb/host/ehci-pci.c:175:
+		if ((pdev->device == 0x4386) || (pdev->device == 0x4396)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pdev->device == 0x4386'
#3174: FILE: drivers/usb/host/ehci-pci.c:182:
+			if ((pdev->device == 0x4386) || (rev == 0x3a)
+			    || (rev == 0x3b)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rev == 0x3a'
#3174: FILE: drivers/usb/host/ehci-pci.c:182:
+			if ((pdev->device == 0x4386) || (rev == 0x3a)
+			    || (rev == 0x3b)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rev == 0x3b'
#3174: FILE: drivers/usb/host/ehci-pci.c:182:
+			if ((pdev->device == 0x4386) || (rev == 0x3a)
+			    || (rev == 0x3b)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3175: FILE: drivers/usb/host/ehci-pci.c:183:
+			if ((pdev->device == 0x4386) || (rev == 0x3a)
+			    || (rev == 0x3b)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3177: FILE: drivers/usb/host/ehci-pci.c:185:
+				u8 tmp;
+				ehci_info(ehci, "applying AMD SB600/SB700 USB "

WARNING:SPLIT_STRING: quoted string split across lines
#3178: FILE: drivers/usb/host/ehci-pci.c:186:
+				ehci_info(ehci, "applying AMD SB600/SB700 USB "
+					"freeze workaround\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3180: FILE: drivers/usb/host/ehci-pci.c:188:
+				pci_write_config_byte(pdev, 0x53, tmp | (1<<3));
 				                                          ^

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#3225: FILE: drivers/watchdog/hpwdt.c:43:
+#include <asm/cacheflush.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3234: FILE: drivers/watchdog/hpwdt.c:399:
+			set_memory_x((unsigned long)cru_rom_addr & PAGE_MASK,
+				smbios_cru64_ptr->double_length >> PAGE_SHIFT);

CHECK:CAMELCASE: Avoid CamelCase: <cifsSesInfo>
#3289: FILE: fs/cifs/cifs_debug.c:132:
+			ses = list_entry(tmp2, struct cifsSesInfo,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ses->serverDomain == NULL'
#3291: FILE: fs/cifs/cifs_debug.c:134:
+			if ((ses->serverDomain == NULL) ||
+				(ses->serverOS == NULL) ||
+				(ses->serverNOS == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ses->serverOS == NULL'
#3291: FILE: fs/cifs/cifs_debug.c:134:
+			if ((ses->serverDomain == NULL) ||
+				(ses->serverOS == NULL) ||
+				(ses->serverNOS == NULL)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ses->serverNOS == NULL'
#3291: FILE: fs/cifs/cifs_debug.c:134:
+			if ((ses->serverDomain == NULL) ||
+				(ses->serverOS == NULL) ||
+				(ses->serverNOS == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <serverDomain>
#3291: FILE: fs/cifs/cifs_debug.c:134:
+			if ((ses->serverDomain == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ses->serverDomain"
#3291: FILE: fs/cifs/cifs_debug.c:134:
+			if ((ses->serverDomain == NULL) ||

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3292: FILE: fs/cifs/cifs_debug.c:135:
+			if ((ses->serverDomain == NULL) ||
+				(ses->serverOS == NULL) ||

CHECK:CAMELCASE: Avoid CamelCase: <serverOS>
#3292: FILE: fs/cifs/cifs_debug.c:135:
+				(ses->serverOS == NULL) ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ses->serverOS"
#3292: FILE: fs/cifs/cifs_debug.c:135:
+				(ses->serverOS == NULL) ||

CHECK:CAMELCASE: Avoid CamelCase: <serverNOS>
#3293: FILE: fs/cifs/cifs_debug.c:136:
+				(ses->serverNOS == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ses->serverNOS"
#3293: FILE: fs/cifs/cifs_debug.c:136:
+				(ses->serverNOS == NULL)) {

CHECK:CAMELCASE: Avoid CamelCase: <serverName>
#3295: FILE: fs/cifs/cifs_debug.c:138:
+					   "displayed\n\t", i, ses->serverName);

WARNING:SPLIT_STRING: quoted string split across lines
#3295: FILE: fs/cifs/cifs_debug.c:138:
+				seq_printf(m, "\n%d) entry for %s not fully "
+					   "displayed\n\t", i, ses->serverName);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3298: FILE: fs/cifs/cifs_debug.c:141:
+				seq_printf(m,
+				    "\n%d) Name: %s  Domain: %s Uses: %d OS:"

WARNING:SPLIT_STRING: quoted string split across lines
#3299: FILE: fs/cifs/cifs_debug.c:142:
+				    "\n%d) Name: %s  Domain: %s Uses: %d OS:"
+				    " %s\n\tNOS: %s\tCapability: 0x%x\n\tSMB"

WARNING:SPLIT_STRING: quoted string split across lines
#3315: FILE: fs/cifs/cifs_debug.c:149:
 			seq_printf(m, "TCP status: %d\n\tLocal Users To "
+				   "Server: %d SecMode: 0x%x Req On Wire: %d",

CHECK:CAMELCASE: Avoid CamelCase: <tcpStatus>
#3316: FILE: fs/cifs/cifs_debug.c:150:
+				   server->tcpStatus, server->srv_count,

CHECK:CAMELCASE: Avoid CamelCase: <secMode>
#3317: FILE: fs/cifs/cifs_debug.c:151:
+				   server->secMode,

CHECK:CAMELCASE: Avoid CamelCase: <inFlight>
#3318: FILE: fs/cifs/cifs_debug.c:152:
+				   atomic_read(&server->inFlight));

CHECK:CAMELCASE: Avoid CamelCase: <inSend>
#3324: FILE: fs/cifs/cifs_debug.c:156:
+				atomic_read(&server->inSend),

CHECK:CAMELCASE: Avoid CamelCase: <cifsTconInfo>
#3332: FILE: fs/cifs/cifs_debug.c:163:
+				tcon = list_entry(tmp3, struct cifsTconInfo,

CHECK:CAMELCASE: Avoid CamelCase: <fsDevInfo>
#3335: FILE: fs/cifs/cifs_debug.c:166:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <DeviceType>
#3335: FILE: fs/cifs/cifs_debug.c:166:
+				dev_type = le32_to_cpu(tcon->fsDevInfo.DeviceType);

CHECK:CAMELCASE: Avoid CamelCase: <treeName>
#3337: FILE: fs/cifs/cifs_debug.c:168:
+					   tcon->treeName, tcon->tc_count);

CHECK:CAMELCASE: Avoid CamelCase: <nativeFileSystem>
#3338: FILE: fs/cifs/cifs_debug.c:169:
+				if (tcon->nativeFileSystem) {

WARNING:SPLIT_STRING: quoted string split across lines
#3343: FILE: fs/cifs/cifs_debug.c:174:
+				seq_printf(m, "DevInfo: 0x%x Attributes: 0x%x"
+					"\nPathComponentMax: %d Status: 0x%d",

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#3343: FILE: fs/cifs/cifs_debug.c:174:
+					"\nPathComponentMax: %d Status: 0x%d",

Prefixing 0x with decimal output is defective and should be corrected.

CHECK:CAMELCASE: Avoid CamelCase: <DeviceCharacteristics>
#3344: FILE: fs/cifs/cifs_debug.c:175:
+					le32_to_cpu(tcon->fsDevInfo.DeviceCharacteristics),

CHECK:CAMELCASE: Avoid CamelCase: <fsAttrInfo>
#3345: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <Attributes>
#3345: FILE: fs/cifs/cifs_debug.c:176:
+					le32_to_cpu(tcon->fsAttrInfo.Attributes),

CHECK:CAMELCASE: Avoid CamelCase: <MaxPathNameComponentLength>
#3346: FILE: fs/cifs/cifs_debug.c:177:
+					le32_to_cpu(tcon->fsAttrInfo.MaxPathNameComponentLength),

CHECK:CAMELCASE: Avoid CamelCase: <tidStatus>
#3347: FILE: fs/cifs/cifs_debug.c:178:
+					tcon->tidStatus);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3368: FILE: fs/cifs/cifs_debug.c:196:
+				mid_entry = list_entry(tmp3, struct mid_q_entry,
 					qhead);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3563: FILE: fs/cifs/cifs_debug.c:335:
+				seq_printf(m, "\nSMBs: %d Oplock Breaks: %d",
+					atomic_read(&tcon->num_smbs_sent),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3566: FILE: fs/cifs/cifs_debug.c:338:
+				seq_printf(m, "\nReads:  %d Bytes: %lld",
+					atomic_read(&tcon->num_reads),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3569: FILE: fs/cifs/cifs_debug.c:341:
+				seq_printf(m, "\nWrites: %d Bytes: %lld",
+					atomic_read(&tcon->num_writes),

WARNING:SPLIT_STRING: quoted string split across lines
#3572: FILE: fs/cifs/cifs_debug.c:344:
+				seq_printf(m, "\nLocks: %d HardLinks: %d "
+					      "Symlinks: %d",

WARNING:SPLIT_STRING: quoted string split across lines
#3577: FILE: fs/cifs/cifs_debug.c:349:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

WARNING:MISSING_SPACE: break quoted strings at a space character
#3577: FILE: fs/cifs/cifs_debug.c:349:
+				seq_printf(m, "\nOpens: %d Closes: %d"
+					      "Deletes: %d",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3582: FILE: fs/cifs/cifs_debug.c:354:
+				seq_printf(m, "\nMkdirs: %d Rmdirs: %d",
+					atomic_read(&tcon->num_mkdirs),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3585: FILE: fs/cifs/cifs_debug.c:357:
+				seq_printf(m, "\nRenames: %d T2 Renames %d",
+					atomic_read(&tcon->num_renames),

WARNING:SPLIT_STRING: quoted string split across lines
#3588: FILE: fs/cifs/cifs_debug.c:360:
+				seq_printf(m, "\nFindFirst: %d FNext %d "
+					      "FClose %d",

CHECK:CAMELCASE: Avoid CamelCase: <pTcon>
#3638: FILE: fs/cifs/cifsfs.c:971:
+			if (!pTcon->need_reconnect) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3666: FILE: fs/cifs/cifsfs.c:1002:
+			server = list_entry(tmp, struct TCP_Server_Info,
+					 tcp_ses_list);

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#3822: FILE: fs/cifs/cifsproto.h:39:
+			unsigned int /* length */ , struct sockaddr *, bool);
 			                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->need_reconnect'
#3839: FILE: fs/cifs/cifssmb.c:196:
+			if (!rc && (tcon->need_reconnect)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->need_reconnect'
#3852: FILE: fs/cifs/cifssmb.c:343:
+			if (!rc && (tcon->need_reconnect)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses == NULL'
#3903: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->ses->server == NULL'
#3903: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses"
#3903: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon->ses->server"
#3903: FILE: fs/cifs/cifssmb.c:747:
+	if ((tcon->ses == NULL) || (tcon->ses->server == NULL))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3940: FILE: fs/cifs/cifssmb.c:769:
+	   closed on server already e.g. due to tcp session crashing */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:CAMELCASE: Avoid CamelCase: <sesSem>
#3965: FILE: fs/cifs/cifssmb.c:792:
+	down(&ses->sesSem);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3968: FILE: fs/cifs/cifssmb.c:795:
+		goto session_already_dead; /* no need to send SMBlogoff if uid
+					      already closed due to reconnect */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3968: FILE: fs/cifs/cifssmb.c:795:
+					      already closed due to reconnect */

CHECK:CAMELCASE: Avoid CamelCase: <pSMB>
#3977: FILE: fs/cifs/cifssmb.c:802:
+	pSMB->hdr.Mid = GetNextMid(ses->server);

CHECK:CAMELCASE: Avoid CamelCase: <Mid>
#3977: FILE: fs/cifs/cifssmb.c:802:
+	pSMB->hdr.Mid = GetNextMid(ses->server);

CHECK:CAMELCASE: Avoid CamelCase: <GetNextMid>
#3977: FILE: fs/cifs/cifssmb.c:802:
+	pSMB->hdr.Mid = GetNextMid(ses->server);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#3980: FILE: fs/cifs/cifssmb.c:804:
+	if (ses->server->secMode &
[...]
 			pSMB->hdr.Flags2 |= SMBFLG2_SECURITY_SIGNATURE;

CHECK:CAMELCASE: Avoid CamelCase: <sockAddr6>
#4085: FILE: fs/cifs/connect.c:187:
+		if (server->addr.sockAddr6.sin6_family == AF_INET6) {

CHECK:CAMELCASE: Avoid CamelCase: <CifsExiting>
#4151: FILE: fs/cifs/connect.c:710:
+			ses->status = CifsExiting;

CHECK:SPACING: No space is necessary after a cast
#4228: FILE: fs/cifs/connect.c:1352:
+	struct sockaddr_in *addr4 = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#4229: FILE: fs/cifs/connect.c:1353:
+	struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) addr;

CHECK:CAMELCASE: Avoid CamelCase: <CifsNew>
#4241: FILE: fs/cifs/connect.c:1365:
+		if (server->tcpStatus == CifsNew)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'addr4->sin_addr.s_addr !=
 		     server->addr.sockAddr.sin_addr.s_addr'
#4248: FILE: fs/cifs/connect.c:1368:
+		if (addr->sa_family == AF_INET &&
+		    (addr4->sin_addr.s_addr !=
+		     server->addr.sockAddr.sin_addr.s_addr))

CHECK:CAMELCASE: Avoid CamelCase: <sockAddr>
#4250: FILE: fs/cifs/connect.c:1370:
+		     server->addr.sockAddr.sin_addr.s_addr))

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#4267: FILE: fs/cifs/connect.c:1379:
+		cFYI(1, ("Existing tcp session with server found"));

CHECK:CAMELCASE: Avoid CamelCase: <GlobalMid_Lock>
#4300: FILE: fs/cifs/connect.c:1400:
+	spin_lock(&GlobalMid_Lock);

CHECK:CAMELCASE: Avoid CamelCase: <userName>
#4328: FILE: fs/cifs/connect.c:1418:
+		if (strncmp(ses->userName, username, MAX_USERNAME_SIZE))

CHECK:CAMELCASE: Avoid CamelCase: <CifsGood>
#4366: FILE: fs/cifs/connect.c:1444:
+	if (ses->status == CifsGood) {

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#4367: FILE: fs/cifs/connect.c:1445:
+		xid = GetXid();

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBLogoff>
#4368: FILE: fs/cifs/connect.c:1446:
+		CIFSSMBLogoff(xid, ses);

CHECK:CAMELCASE: Avoid CamelCase: <_FreeXid>
#4369: FILE: fs/cifs/connect.c:1447:
+		_FreeXid(xid);

CHECK:CAMELCASE: Avoid CamelCase: <sesInfoFree>
#4371: FILE: fs/cifs/connect.c:1449:
+	sesInfoFree(ses);

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBTDis>
#4420: FILE: fs/cifs/connect.c:1491:
+	CIFSSMBTDis(xid, tcon);

CHECK:CAMELCASE: Avoid CamelCase: <DeleteTconOplockQEntries>
#4423: FILE: fs/cifs/connect.c:1494:
+	DeleteTconOplockQEntries(tcon);

CHECK:CAMELCASE: Avoid CamelCase: <tconInfoFree>
#4424: FILE: fs/cifs/connect.c:1495:
+	tconInfoFree(tcon);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4476: FILE: fs/cifs/connect.c:1725:
+ipv6_connect(struct sockaddr_in6 *psin_server, struct socket **csocket,
+		bool noblocksnd)

CHECK:CAMELCASE: Avoid CamelCase: <CIFSMaxBufSize>
#4496: FILE: fs/cifs/connect.c:1936:
+	if (pvolume_info->rsize > CIFSMaxBufSize) {

CHECK:CAMELCASE: Avoid CamelCase: <cERROR>
#4497: FILE: fs/cifs/connect.c:1937:
+		cERROR(1, ("rsize %d too large, using MaxBufSize",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4498: FILE: fs/cifs/connect.c:1938:
+		cERROR(1, ("rsize %d too large, using MaxBufSize",
+			pvolume_info->rsize));

CHECK:BRACES: braces {} should be used on all arms of this statement
#4506: FILE: fs/cifs/connect.c:1946:
+	if (pvolume_info->wsize > PAGEVEC_SIZE * PAGE_CACHE_SIZE) {
[...]
+	} else if (pvolume_info->wsize)
[...]
+	else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4508: FILE: fs/cifs/connect.c:1948:
+		cERROR(1, ("wsize %d too large, using 4096 instead",
+			  pvolume_info->wsize));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4514: FILE: fs/cifs/connect.c:1954:
+		cifs_sb->wsize = min_t(const int,
+					PAGEVEC_SIZE * PAGE_CACHE_SIZE,

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4515: FILE: fs/cifs/connect.c:1955:
+					127*1024);
 					   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4517: FILE: fs/cifs/connect.c:1957:
+		/* old default of CIFSMaxBufSize was too small now
+		   that SMB Write2 can send multiple pages in kvec.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4521: FILE: fs/cifs/connect.c:1961:
+		   page size  */

CHECK:BRACES: braces {} should be used on all arms of this statement
#4530: FILE: fs/cifs/connect.c:1970:
+	if (cifs_sb->prepath) {
[...]
+	} else
[...]

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4533: FILE: fs/cifs/connect.c:1973:
+		/* we can not convert the / to \ in the path
+		separators in the prefixpath yet because we do not

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4536: FILE: fs/cifs/connect.c:1976:
+		the / to \ after reset_cifs_unix_caps is called */

CHECK:BRACES: Unbalanced braces around else statement
#4538: FILE: fs/cifs/connect.c:1978:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4545: FILE: fs/cifs/connect.c:1985:
+	cFYI(1, ("file mode: 0x%x  dir mode: 0x%x",
+		cifs_sb->mnt_file_mode, cifs_sb->mnt_dir_mode));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pvolume_info->cifs_acl'
#4574: FILE: fs/cifs/connect.c:2014:
+	if ((pvolume_info->cifs_acl) && (pvolume_info->dynperm))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pvolume_info->dynperm'
#4574: FILE: fs/cifs/connect.c:2014:
+	if ((pvolume_info->cifs_acl) && (pvolume_info->dynperm))

WARNING:SPLIT_STRING: quoted string split across lines
#4576: FILE: fs/cifs/connect.c:2016:
+		cERROR(1, ("mount option dynperm ignored if cifsacl "
+			   "mount option supported"));

CHECK:SPACING: No space is necessary after a cast
#4590: FILE: fs/cifs/connect.c:2027:
+	struct sockaddr_in *sin_server = (struct sockaddr_in *) &addr;

CHECK:SPACING: No space is necessary after a cast
#4591: FILE: fs/cifs/connect.c:2028:
+	struct sockaddr_in6 *sin_server6 = (struct sockaddr_in6 *) &addr;

CHECK:CAMELCASE: Avoid CamelCase: <srvTcp>
#4653: FILE: fs/cifs/connect.c:2110:
+	srvTcp = cifs_find_tcp_session(&addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4666: FILE: fs/cifs/connect.c:2118:
+			rc = ipv6_connect(sin_server6, &csocket,
+					volume_info.noblocksnd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4670: FILE: fs/cifs/connect.c:2122:
+			rc = ipv4_connect(sin_server, &csocket,
+					volume_info.source_rfc1001_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4691: FILE: fs/cifs/connect.c:2145:
+				memcpy(&srvTcp->addr.sockAddr6, sin_server6,
+					sizeof(struct sockaddr_in6));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4694: FILE: fs/cifs/connect.c:2148:
+				memcpy(&srvTcp->addr.sockAddr, sin_server,
+					sizeof(struct sockaddr_in));

CHECK:CAMELCASE: Avoid CamelCase: <pSesInfo>
#4718: FILE: fs/cifs/connect.c:2191:
+	pSesInfo = cifs_find_smb_ses(srvTcp, volume_info.username);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pSesInfo"
#4739: FILE: fs/cifs/connect.c:2211:
+		if (pSesInfo == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#4769: FILE: fs/cifs/connect.c:2236:
+			int len = strlen(volume_info.domainname);
+			pSesInfo->domainName = kmalloc(len + 1, GFP_KERNEL);

CHECK:CAMELCASE: Avoid CamelCase: <domainName>
#4769: FILE: fs/cifs/connect.c:2236:
+			pSesInfo->domainName = kmalloc(len + 1, GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4772: FILE: fs/cifs/connect.c:2239:
+				strcpy(pSesInfo->domainName,
+					volume_info.domainname);

CHECK:CAMELCASE: Avoid CamelCase: <overrideSecFlg>
#4775: FILE: fs/cifs/connect.c:2242:
+		pSesInfo->overrideSecFlg = volume_info.secFlg;

CHECK:CAMELCASE: Avoid CamelCase: <secFlg>
#4775: FILE: fs/cifs/connect.c:2242:
+		pSesInfo->overrideSecFlg = volume_info.secFlg;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tcon"
#4918: FILE: fs/cifs/connect.c:2264:
+			if (tcon == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strchr"
#4956: FILE: fs/cifs/connect.c:2271:
+			if ((strchr(volume_info.UNC + 3, '\\') == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4957: FILE: fs/cifs/connect.c:2272:
+			if ((strchr(volume_info.UNC + 3, '\\') == NULL)
+			    && (strchr(volume_info.UNC + 3, '/') == NULL)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!strchr"
#4957: FILE: fs/cifs/connect.c:2272:
+			    && (strchr(volume_info.UNC + 3, '/') == NULL)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4965: FILE: fs/cifs/connect.c:2280:
+				 * we do on SessSetup and reconnect? */

CHECK:CAMELCASE: Avoid CamelCase: <CIFSTCon>
#4966: FILE: fs/cifs/connect.c:2281:
+				rc = CIFSTCon(xid, pSesInfo, volume_info.UNC,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4979: FILE: fs/cifs/connect.c:2294:
+		/* we can have only one retry value for a connection
+		   to a share so for resources mounted more than once

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4981: FILE: fs/cifs/connect.c:2296:
+		   for the retry flag is used */

WARNING:TYPO_SPELLING: 'accidently' may be misspelled - perhaps 'accidentally'?
#5056: FILE: fs/cifs/connect.c:2314:
+		/* up accidently freeing someone elses tcon struct */
 		      ^^^^^^^^^^

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBQFSDeviceInfo>
#5074: FILE: fs/cifs/connect.c:2327:
+		CIFSSMBQFSDeviceInfo(xid, tcon);

CHECK:CAMELCASE: Avoid CamelCase: <CIFSSMBQFSAttributeInfo>
#5075: FILE: fs/cifs/connect.c:2328:
+		CIFSSMBQFSAttributeInfo(xid, tcon);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5094: FILE: fs/cifs/connect.c:2334:
+		/* reset of caps checks mount to see if unix extensions
+		   disabled for just this mount */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5094: FILE: fs/cifs/connect.c:2334:
+		   disabled for just this mount */

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tcon->unix_ext == 0'
#5103: FILE: fs/cifs/connect.c:2343:
+	if ((tcon->unix_ext == 0) && (cifs_sb->rsize > (1024 * 127))) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5109: FILE: fs/cifs/connect.c:2349:
+		cifs_sb->wsize = min(cifs_sb->wsize,
+			       (tcon->ses->server->maxBuf - MAX_CIFS_HDR_SIZE));

CHECK:CAMELCASE: Avoid CamelCase: <maxBuf>
#5109: FILE: fs/cifs/connect.c:2349:
+			       (tcon->ses->server->maxBuf - MAX_CIFS_HDR_SIZE));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5112: FILE: fs/cifs/connect.c:2352:
+		cifs_sb->rsize = min(cifs_sb->rsize,
+			       (tcon->ses->server->maxBuf - MAX_CIFS_HDR_SIZE));

CHECK:BRACES: Unbalanced braces around else statement
#5205: FILE: fs/cifs/file.c:1399:
+		} else

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#5291: FILE: fs/cifs/misc.c:349:
+					list_for_each(temp_item, &treeCon->ses->server->smb_ses_list) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <treeCon>
#5291: FILE: fs/cifs/misc.c:349:
+					list_for_each(temp_item, &treeCon->ses->server->smb_ses_list) {

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#5292: FILE: fs/cifs/misc.c:350:
+						ses = list_entry(temp_item, struct cifsSesInfo, smb_ses_list);

CHECK:CAMELCASE: Avoid CamelCase: <cifsInodeInfo>
#5314: FILE: fs/cifs/misc.c:498:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <pCifsInode>
#5314: FILE: fs/cifs/misc.c:498:
+	struct cifsInodeInfo *pCifsInode;

CHECK:CAMELCASE: Avoid CamelCase: <Tid>
#5331: FILE: fs/cifs/misc.c:558:
+			if (tcon->tid != buf->Tid)

CHECK:CAMELCASE: Avoid CamelCase: <openFileList>
#5337: FILE: fs/cifs/misc.c:562:
+			list_for_each(tmp2, &tcon->openFileList) {

CHECK:CAMELCASE: Avoid CamelCase: <cifsFileInfo>
#5338: FILE: fs/cifs/misc.c:563:
+				netfile = list_entry(tmp2, struct cifsFileInfo,

CHECK:CAMELCASE: Avoid CamelCase: <Fid>
#5361: FILE: fs/cifs/misc.c:565:
+				if (pSMB->Fid != netfile->netfid)

CHECK:CAMELCASE: Avoid CamelCase: <pInode>
#5366: FILE: fs/cifs/misc.c:570:
+				pCifsInode = CIFS_I(netfile->pInode);

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheAll>
#5367: FILE: fs/cifs/misc.c:571:
+				pCifsInode->clientCanCacheAll = false;

CHECK:CAMELCASE: Avoid CamelCase: <OplockLevel>
#5368: FILE: fs/cifs/misc.c:572:
+				if (pSMB->OplockLevel == 0)

CHECK:CAMELCASE: Avoid CamelCase: <clientCanCacheRead>
#5369: FILE: fs/cifs/misc.c:573:
+					pCifsInode->clientCanCacheRead = false;

CHECK:CAMELCASE: Avoid CamelCase: <oplockPending>
#5370: FILE: fs/cifs/misc.c:574:
+				pCifsInode->oplockPending = true;

CHECK:CAMELCASE: Avoid CamelCase: <AllocOplockQEntry>
#5371: FILE: fs/cifs/misc.c:575:
+				AllocOplockQEntry(netfile->pInode,

CHECK:CAMELCASE: Avoid CamelCase: <oplockThread>
#5374: FILE: fs/cifs/misc.c:578:
+				if (oplockThread)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_len > 0'
#5464: FILE: fs/cifs/transport.c:326:
+	if ((total_len > 0) && (total_len != smb_buf_length + 4)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5466: FILE: fs/cifs/transport.c:328:
+		cFYI(1, ("partial send (%d remaining), terminating session",
+				total_len));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5468: FILE: fs/cifs/transport.c:330:
+		/* If we have only sent part of an SMB then the next SMB
+		   could be taken as the remainder of this one.  We need

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5470: FILE: fs/cifs/transport.c:332:
+		   SMB */

CHECK:CAMELCASE: Avoid CamelCase: <CifsNeedReconnect>
#5471: FILE: fs/cifs/transport.c:333:
+		server->tcpStatus = CifsNeedReconnect;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5484: FILE: fs/cifs/transport.c:543:
+	rc = smb_send2(ses->server, iov, n_vec,
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:SPACING: No space is necessary after a cast
#5484: FILE: fs/cifs/transport.c:543:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ses->server->addr.sockAddr
#5484: FILE: fs/cifs/transport.c:543:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:SPACING: No space is necessary after a cast
#5494: FILE: fs/cifs/transport.c:736:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ses->server->addr.sockAddr
#5494: FILE: fs/cifs/transport.c:736:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:SPACING: No space is necessary after a cast
#5504: FILE: fs/cifs/transport.c:877:
+		(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ses->server->addr.sockAddr
#5504: FILE: fs/cifs/transport.c:877:
+		(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:SPACING: No space is necessary after a cast
#5514: FILE: fs/cifs/transport.c:968:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around ses->server->addr.sockAddr
#5514: FILE: fs/cifs/transport.c:968:
+			(struct sockaddr *) &(ses->server->addr.sockAddr),

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#5675: FILE: fs/eventpoll.c:269:
+		.extra1		= &zero,

Commit d91bff3011cf ("proc/sysctl: add shared variables for range
check") added some shared const variables to be used instead of a local
copy in each source file.

Consider replacing the sysctl range checking value with the shared
one in include/linux/sysctl.h.  The following conversion scheme may
be used::

  &zero     ->  SYSCTL_ZERO
  &one      ->  SYSCTL_ONE
  &int_max  ->  SYSCTL_INT_MAX

See:

  1. https://lore.kernel.org/lkml/20190430180111.10688-1-mcroce@redhat.com/
  2. https://lore.kernel.org/lkml/20190531131422.14970-1-mcroce@redhat.com/

WARNING:DUPLICATED_SYSCTL_CONST: duplicated sysctl range checking value 'zero', consider using the shared one in include/linux/sysctl.h
#5683: FILE: fs/eventpoll.c:277:
+		.extra1		= &zero,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5821: FILE: fs/ext2/balloc.c:1298:
 	if (my_rsv && (free_blocks < windowsz)
+		&& (free_blocks > 0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5830: FILE: fs/ext2/balloc.c:1336:
+		if (my_rsv && (free_blocks <= (windowsz/2)))
 		                                       ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5842: FILE: fs/ext3/balloc.c:1550:
 	if (my_rsv && (free_blocks < windowsz)
+		&& (free_blocks > 0)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#5851: FILE: fs/ext3/balloc.c:1589:
+		if (my_rsv && (free_blocks <= (windowsz/2)))
 		                                       ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5878: FILE: fs/ext3/dir.c:457:
+		if (call_filldir(filp, dirent, filldir, info->extra_fname))
 		                 ^^^^

WARNING:INDENTED_LABEL: labels should not be indented
#5891: FILE: fs/ext3/dir.c:492:
+	next_node:

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5913: FILE: fs/ext3/resize.c:794:
+					     EXT3_FEATURE_COMPAT_RESIZE_INODE)
+		    || !le16_to_cpu(es->s_reserved_gdt_blocks)) {

WARNING:INDENTED_LABEL: labels should not be indented
#5945: FILE: fs/ext4/dir.c:494:
+	next_node:

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5988: FILE: fs/ext4/ext4.h:1087:
+extern int ext4_ext_migrate(struct inode *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#5988: FILE: fs/ext4/ext4.h:1087:
+extern int ext4_ext_migrate(struct inode *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#6013: FILE: fs/ext4/inode.c:2245:
+		/* now mark the buffer_heads as dirty and uptodate */
 		                                          ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6042: FILE: fs/ext4/ioctl.c:272:
+		int err;
+		if (!is_owner_or_cap(inode))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_mutex
#6054: FILE: fs/ext4/ioctl.c:284:
+		mutex_lock(&(inode->i_mutex));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around inode->i_mutex
#6056: FILE: fs/ext4/ioctl.c:286:
+		mutex_unlock(&(inode->i_mutex));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6111: FILE: fs/ext4/mballoc.c:2822:
+	printk(KERN_ERR "EXT4-fs: Unable to create %s\n", devname);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6177: FILE: fs/ext4/resize.c:934:
+		ext4_group_t flex_group;
+		flex_group = ext4_flex_group(sbi, input->group);

CHECK:BRACES: braces {} should be used on all arms of this statement
#6220: FILE: fs/ext4/super.c:2451:
+	if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA) {
[...]
+	} else if (test_opt(sb, DELALLOC))
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#6221: FILE: fs/ext4/super.c:2452:
+		printk(KERN_WARNING "EXT4-fs: Ignoring delalloc option - "

WARNING:SPLIT_STRING: quoted string split across lines
#6222: FILE: fs/ext4/super.c:2453:
+		printk(KERN_WARNING "EXT4-fs: Ignoring delalloc option - "
+				"requested data journaling mode\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#6225: FILE: fs/ext4/super.c:2456:
+		printk(KERN_INFO "EXT4-fs: delayed allocation enabled\n");

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#6230: FILE: fs/ext4/super.c:2461:
+		printk(KERN_ERR "EXT4-fs: failed to initalize mballoc (%d)\n",
 		                                    ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6230: FILE: fs/ext4/super.c:2461:
+		printk(KERN_ERR "EXT4-fs: failed to initalize mballoc (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6268: FILE: fs/ext4/super.c:2820:
+		printk(KERN_ERR "ext4: previous I/O error to "

WARNING:SPLIT_STRING: quoted string split across lines
#6269: FILE: fs/ext4/super.c:2821:
+		printk(KERN_ERR "ext4: previous I/O error to "
+		       "superblock detected for %s.\n", sb->s_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6282: FILE: fs/ext4/super.c:2833:
+			printk(KERN_ERR "ext4: I/O error while writing "

WARNING:SPLIT_STRING: quoted string split across lines
#6283: FILE: fs/ext4/super.c:2834:
+			printk(KERN_ERR "ext4: I/O error while writing "
+			       "superblock for %s.\n", sb->s_id);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6369: FILE: fs/inotify.c:112:
+	struct super_block *sb = watch->inode->i_sb;
+	spin_lock(&sb_lock);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6390: FILE: fs/inotify.c:144:
+	struct super_block *sb = watch->inode->i_sb;
+	put_inotify_watch(watch);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6497: FILE: fs/inotify.c:599:
+	struct super_block *sb = watch->inode->i_sb;
+	put_inotify_watch(watch);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "journal->j_checkpoint_transactions"
#6658: FILE: fs/jbd2/checkpoint.c:143:
+			int chkpt = journal->j_checkpoint_transactions != NULL;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6674: FILE: fs/jbd2/checkpoint.c:158:
+				printk(KERN_ERR "%s: needed %d blocks and "

WARNING:SPLIT_STRING: quoted string split across lines
#6675: FILE: fs/jbd2/checkpoint.c:159:
+				printk(KERN_ERR "%s: needed %d blocks and "
+				       "only had %d space available\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6677: FILE: fs/jbd2/checkpoint.c:161:
+				printk(KERN_ERR "%s: no way to get more "

WARNING:SPLIT_STRING: quoted string split across lines
#6678: FILE: fs/jbd2/checkpoint.c:162:
+				printk(KERN_ERR "%s: no way to get more "
+				       "journal space in %s\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6795: FILE: fs/jbd2/journal.c:1271:
+		printk(KERN_ERR "JBD2: previous I/O error detected "

WARNING:SPLIT_STRING: quoted string split across lines
#6796: FILE: fs/jbd2/journal.c:1272:
+		printk(KERN_ERR "JBD2: previous I/O error detected "
+		       "for journal superblock update for %s.\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#6810: FILE: fs/jbd2/journal.c:1289:
+	if (wait) {
[...]
+		}
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6814: FILE: fs/jbd2/journal.c:1292:
+			printk(KERN_ERR "JBD2: I/O error detected "

WARNING:SPLIT_STRING: quoted string split across lines
#6815: FILE: fs/jbd2/journal.c:1293:
+			printk(KERN_ERR "JBD2: I/O error detected "
+			       "when updating journal superblock for %s.\n",

CHECK:BRACES: Unbalanced braces around else statement
#6820: FILE: fs/jbd2/journal.c:1298:
+	} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6832: FILE: include/asm-x86/mmzone_32.h:37:
+extern void resume_map_numa_kva(pgd_t *pgd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6903: FILE: include/linux/inotify.h:137:
+extern int pin_inotify_watch(struct inotify_watch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#6903: FILE: include/linux/inotify.h:137:
+extern int pin_inotify_watch(struct inotify_watch *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6904: FILE: include/linux/inotify.h:138:
+extern void unpin_inotify_watch(struct inotify_watch *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inotify_watch *' should also have an identifier name
#6904: FILE: include/linux/inotify.h:138:
+extern void unpin_inotify_watch(struct inotify_watch *);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6934: FILE: include/linux/jbd2.h:854:
+	char			j_devname[BDEVNAME_SIZE+24];
 	    			                       ^

WARNING:TYPO_SPELLING: 'firwmare' may be misspelled - perhaps 'firmware'?
#6946: FILE: include/linux/libata.h:367:
+	ATA_HORKAGE_FIRMWARE_WARN = (1 << 12),	/* firwmare update warning */
 	                                      	   ^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7007: FILE: include/linux/pci_hotplug.h:170:
+extern int pci_hp_register(struct hotplug_slot *, struct pci_bus *, int nr,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7035: FILE: include/net/af_unix.h:12:
+extern void wait_for_unix_gc(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#7153: FILE: kernel/audit_tree.c:155:
+	struct audit_chunk *chunk = container_of(rcu, struct audit_chunk, head);
+	audit_put_chunk(chunk);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#7173: FILE: kernel/audit_tree.c:203:
+	int index = p->index & ~(1U<<31);
 	                           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#7174: FILE: kernel/audit_tree.c:204:
+	int index = p->index & ~(1U<<31);
+	p -= index;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#7359: FILE: kernel/cgroup.c:2053:
+	if (dentry->d_sb->s_op != &cgroup_ops ||
[...]
 		 goto err;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!doms"
#7396: FILE: kernel/cpuset.c:736:
+	if (doms == NULL)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7463: FILE: lib/idr.c:188:
+			new->layer = l-1;
 			              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#7479: FILE: lib/idr.c:242:
+		new->layer = layers-1;
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7491: FILE: lib/idr.c:502:
+	n = (p->layer+1) * IDR_BITS;
 	             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7498: FILE: lib/idr.c:509:
+	BUG_ON(n == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#7502: FILE: lib/idr.c:513:
+		BUG_ON(n != p->layer*IDR_BITS);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#7502: FILE: lib/idr.c:513:
+		BUG_ON(n != p->layer*IDR_BITS);
 		                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#7515: FILE: lib/idr.c:596:
+	n = (p->layer+1) * IDR_BITS;
 	             ^

ERROR:INITIALISED_STATIC: do not initialise statics to false
#7577: FILE: net/unix/garbage.c:271:
+static bool gc_in_progress = false;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:BOOL_COMPARISON: Using comparison to false is error prone
#7583: FILE: net/unix/garbage.c:275:
+	wait_event(unix_gc_wait, gc_in_progress == false);

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 99 warnings, 182 checks, 6673 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195538.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
