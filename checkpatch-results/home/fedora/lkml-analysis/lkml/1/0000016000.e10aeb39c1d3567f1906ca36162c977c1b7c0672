WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Subject: [PATCH] Staging: hv: fix various coding style issues in RingBuffer.c

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#38: 
 Signed-off-by: Craig Bartlett <c-bartlett@hotmail.co.uk>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:CAMELCASE: Avoid CamelCase: <GetNextWriteLocation>
#62: FILE: drivers/staging/hv/RingBuffer.c:71:
+GetNextWriteLocation(RING_BUFFER_INFO *RingInfo)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <RingInfo>
#62: FILE: drivers/staging/hv/RingBuffer.c:71:
+GetNextWriteLocation(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <SetNextWriteLocation>
#71: FILE: drivers/staging/hv/RingBuffer.c:90:
+SetNextWriteLocation(RING_BUFFER_INFO *RingInfo, u32 NextWriteLocation)

CHECK:CAMELCASE: Avoid CamelCase: <NextWriteLocation>
#71: FILE: drivers/staging/hv/RingBuffer.c:90:
+SetNextWriteLocation(RING_BUFFER_INFO *RingInfo, u32 NextWriteLocation)

CHECK:CAMELCASE: Avoid CamelCase: <GetNextReadLocation>
#80: FILE: drivers/staging/hv/RingBuffer.c:105:
+GetNextReadLocation(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetNextReadLocationWithOffset>
#89: FILE: drivers/staging/hv/RingBuffer.c:125:
+GetNextReadLocationWithOffset(RING_BUFFER_INFO *RingInfo, u32 Offset)

CHECK:CAMELCASE: Avoid CamelCase: <Offset>
#89: FILE: drivers/staging/hv/RingBuffer.c:125:
+GetNextReadLocationWithOffset(RING_BUFFER_INFO *RingInfo, u32 Offset)

CHECK:CAMELCASE: Avoid CamelCase: <SetNextReadLocation>
#98: FILE: drivers/staging/hv/RingBuffer.c:146:
+SetNextReadLocation(RING_BUFFER_INFO *RingInfo, u32 NextReadLocation)

CHECK:CAMELCASE: Avoid CamelCase: <NextReadLocation>
#98: FILE: drivers/staging/hv/RingBuffer.c:146:
+SetNextReadLocation(RING_BUFFER_INFO *RingInfo, u32 NextReadLocation)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBuffer>
#107: FILE: drivers/staging/hv/RingBuffer.c:162:
+GetRingBuffer(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferSize>
#116: FILE: drivers/staging/hv/RingBuffer.c:178:
+GetRingBufferSize(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferIndices>
#125: FILE: drivers/staging/hv/RingBuffer.c:193:
+GetRingBufferIndices(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <RingBuffer>
#128: FILE: drivers/staging/hv/RingBuffer.c:195:
+	return ((u64)RingInfo->RingBuffer->WriteIndex << 32)

CHECK:CAMELCASE: Avoid CamelCase: <WriteIndex>
#128: FILE: drivers/staging/hv/RingBuffer.c:195:
+	return ((u64)RingInfo->RingBuffer->WriteIndex << 32)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#129: FILE: drivers/staging/hv/RingBuffer.c:196:
+	return ((u64)RingInfo->RingBuffer->WriteIndex << 32)
+	|| RingInfo->RingBuffer->ReadIndex;

CHECK:CAMELCASE: Avoid CamelCase: <ReadIndex>
#129: FILE: drivers/staging/hv/RingBuffer.c:196:
+	|| RingInfo->RingBuffer->ReadIndex;

CHECK:CAMELCASE: Avoid CamelCase: <GetRingBufferAvailBytes>
#138: FILE: drivers/staging/hv/RingBuffer.c:214:
+	GetRingBufferAvailBytes(RingInfo,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#139: FILE: drivers/staging/hv/RingBuffer.c:215:
+	GetRingBufferAvailBytes(RingInfo,
+	&bytesAvailToRead,

CHECK:CAMELCASE: Avoid CamelCase: <bytesAvailToRead>
#139: FILE: drivers/staging/hv/RingBuffer.c:215:
+	&bytesAvailToRead,

CHECK:CAMELCASE: Avoid CamelCase: <bytesAvailToWrite>
#140: FILE: drivers/staging/hv/RingBuffer.c:216:
+	&bytesAvailToWrite);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: drivers/staging/hv/RingBuffer.c:219:
+	DPRINT(VMBUS,
+		DEBUG_RING_LVL,

WARNING:SPLIT_STRING: quoted string split across lines
#146: FILE: drivers/staging/hv/RingBuffer.c:221:
+		"%s <<ringinfo %p buffer %p avail write %u "
+		"avail read %u read idx %u write idx %u>>",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:CAMELCASE: Avoid CamelCase: <Src>
#155: FILE: drivers/staging/hv/RingBuffer.c:238:
+	void				*Src,

CHECK:CAMELCASE: Avoid CamelCase: <Dest>
#162: FILE: drivers/staging/hv/RingBuffer.c:244:
+	void				*Dest,

CHECK:CAMELCASE: Avoid CamelCase: <Buffer>
#191: FILE: drivers/staging/hv/RingBuffer.c:308:
+	RingInfo->RingBuffer = (RING_BUFFER *)Buffer;

CHECK:CAMELCASE: Avoid CamelCase: <RingBufferCleanup>
#200: FILE: drivers/staging/hv/RingBuffer.c:328:
+void RingBufferCleanup(RING_BUFFER_INFO *RingInfo)

CHECK:CAMELCASE: Avoid CamelCase: <totalBytesToWrite>
#213: FILE: drivers/staging/hv/RingBuffer.c:347:
+	u32 totalBytesToWrite = 0;

CHECK:CAMELCASE: Avoid CamelCase: <prevIndices>
#218: FILE: drivers/staging/hv/RingBuffer.c:351:
+	u64 prevIndices = 0;

CHECK:CAMELCASE: Avoid CamelCase: <OutRingInfo>
#227: FILE: drivers/staging/hv/RingBuffer.c:365:
+	GetRingBufferAvailBytes(OutRingInfo,

CHECK:CAMELCASE: Avoid CamelCase: <byteAvailToRead>
#228: FILE: drivers/staging/hv/RingBuffer.c:366:
+				&byteAvailToRead,

CHECK:CAMELCASE: Avoid CamelCase: <byteAvailToWrite>
#229: FILE: drivers/staging/hv/RingBuffer.c:367:
+				&byteAvailToWrite);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: drivers/staging/hv/RingBuffer.c:378:
+		DPRINT_DBG(VMBUS,
+			"No more space left on outbound ring buffer "

WARNING:SPLIT_STRING: quoted string split across lines
#245: FILE: drivers/staging/hv/RingBuffer.c:379:
+			"No more space left on outbound ring buffer "
+			"(needed %u, avail %u)",

CHECK:CAMELCASE: Avoid CamelCase: <nextReadLocation>
#256: FILE: drivers/staging/hv/RingBuffer.c:438:
+	u32 nextReadLocation = 0;

CHECK:CAMELCASE: Avoid CamelCase: <InRingInfo>
#262: FILE: drivers/staging/hv/RingBuffer.c:443:
+	GetRingBufferAvailBytes(InRingInfo,

CHECK:CAMELCASE: Avoid CamelCase: <BufferLen>
#270: FILE: drivers/staging/hv/RingBuffer.c:448:
+	if (bytesAvailToRead < BufferLen) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#272: FILE: drivers/staging/hv/RingBuffer.c:450:
+		/* DPRINT_DBG(VMBUS,
+			"got callback but not enough to read "

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#275: FILE: drivers/staging/hv/RingBuffer.c:453:
+			BufferLen); */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#321: FILE: drivers/staging/hv/RingBuffer.c:507:
+		DPRINT_DBG(VMBUS,
+			"got callback but not enough to read "

WARNING:SPLIT_STRING: quoted string split across lines
#322: FILE: drivers/staging/hv/RingBuffer.c:508:
+			"got callback but not enough to read "
+			"<avail to read %d read size %d>!!",

CHECK:CAMELCASE: Avoid CamelCase: <ringBuffer>
#364: FILE: drivers/staging/hv/RingBuffer.c:562:
+	void *ringBuffer = GetRingBuffer(RingInfo);

CHECK:CAMELCASE: Avoid CamelCase: <ringBufferSize>
#365: FILE: drivers/staging/hv/RingBuffer.c:563:
+	u32 ringBufferSize = GetRingBufferSize(RingInfo);

CHECK:CAMELCASE: Avoid CamelCase: <SrcLen>
#371: FILE: drivers/staging/hv/RingBuffer.c:567:
+	if (SrcLen > ringBufferSize - StartWriteOffset) {

CHECK:CAMELCASE: Avoid CamelCase: <StartWriteOffset>
#371: FILE: drivers/staging/hv/RingBuffer.c:567:
+	if (SrcLen > ringBufferSize - StartWriteOffset) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#371: FILE: drivers/staging/hv/RingBuffer.c:567:
+	if (SrcLen > ringBufferSize - StartWriteOffset) {
[...]
-	}
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#380: FILE: drivers/staging/hv/RingBuffer.c:573:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <DestLen>
#405: FILE: drivers/staging/hv/RingBuffer.c:606:
+	if (DestLen > ringBufferSize - StartReadOffset) {

CHECK:CAMELCASE: Avoid CamelCase: <StartReadOffset>
#405: FILE: drivers/staging/hv/RingBuffer.c:606:
+	if (DestLen > ringBufferSize - StartReadOffset) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#405: FILE: drivers/staging/hv/RingBuffer.c:606:
+	if (DestLen > ringBufferSize - StartReadOffset) {
[...]
-	}
[...]

CHECK:BRACES: Unbalanced braces around else statement
#415: FILE: drivers/staging/hv/RingBuffer.c:613:
+	} else

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016000.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 45 checks, 353 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016000.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
