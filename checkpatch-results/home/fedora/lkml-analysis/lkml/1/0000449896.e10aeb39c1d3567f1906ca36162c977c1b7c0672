WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
This patch adds module rsa.ko in the kernel (built-in or as a kernel module) 

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#75: FILE: crypto/Kconfig:457:
+	int "Size of the preallocated auxilliary operands"
 	                              ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#83: FILE: crypto/Kconfig:465:
+	  preallocated auxilliary operands. This size should be close to the key
 	               ^^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#105: FILE: crypto/rsa.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#147: FILE: crypto/rsa.c:43:
+	}
+	else {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#147: FILE: crypto/rsa.c:43:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#195: FILE: crypto/rsa.c:91:
+		return (l->sign)? -1 : 1;
 		                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#261: FILE: crypto/rsa.c:157:
+			buf[i] = (i + distance >= size)? 0 : buf[i + distance];
 			                               ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: crypto/rsa.c:183:
+	if (lz < bits) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#295: FILE: crypto/rsa.c:191:
+	}
+	else

WARNING:TYPO_SPELLING: 'presicion' may be misspelled - perhaps 'precision'?
#325: FILE: crypto/rsa.c:221:
+ * significant bits (single presicion modular inverse)
                             ^^^^^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#331: FILE: crypto/rsa.c:227:
+	pow1 = y = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: braces {} should be used on all arms of this statement
#441: FILE: crypto/rsa.c:337:
+		if (borrow) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#445: FILE: crypto/rsa.c:341:
+		}
+		else

CHECK:BRACES: Unbalanced braces around else statement
#449: FILE: crypto/rsa.c:345:
+	else {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#525: FILE: crypto/rsa.c:421:
+	tmp = buf = (*res)->data;

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#562: FILE: crypto/rsa.c:458:
+ * @n: pointer pointer to the allocated rsa_op

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*handle)...) over kmalloc(sizeof(struct rsa_op)...)
#576: FILE: crypto/rsa.c:472:
+	handle = kmalloc(sizeof(struct rsa_op), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#581: FILE: crypto/rsa.c:477:
+	handle->data = kzalloc(limbs * sizeof(u32), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#588: FILE: crypto/rsa.c:484:
+	handle->size = handle->limbs = limbs;

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#607: FILE: crypto/rsa.c:503:
+ * @n: pointer pointer to the allocated rsa_op

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#641: FILE: crypto/rsa.c:537:
+ * @n: pointer pointer to the allocated rsa_op

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#699: FILE: crypto/rsa.c:595:
+	printk("Operand @ 0x%x, %d limbs in size, %d limbs allocated, value = ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#703: FILE: crypto/rsa.c:599:
+	printk("%s", (n->sign)? "-" : " ");

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#703: FILE: crypto/rsa.c:599:
+	printk("%s", (n->sign)? "-" : " ");
 	                      ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#728: FILE: crypto/rsa.c:624:
+			byte += (byte <= 0x09)? '0' : 'a' - 0x0A;
 			                      ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#729: FILE: crypto/rsa.c:625:
+			printk("%c", byte);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#734: FILE: crypto/rsa.c:630:
+		printk("0");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#735: FILE: crypto/rsa.c:631:
+	printk("\n");

WARNING:REPEATED_WORD: Possible repeated word: 'pointer'
#740: FILE: crypto/rsa.c:636:
+ * @res: pointer pointer to the allocated result

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#773: FILE: crypto/rsa.c:669:
+	M = x = NULL;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#862: FILE: crypto/rsa.c:758:
+EXPORT_SYMBOL(rsa_op_alloc);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#863: FILE: crypto/rsa.c:759:
+EXPORT_SYMBOL(rsa_op_free);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#864: FILE: crypto/rsa.c:760:
+EXPORT_SYMBOL(rsa_op_init);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#865: FILE: crypto/rsa.c:761:
+EXPORT_SYMBOL(rsa_op_set);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#866: FILE: crypto/rsa.c:762:
+EXPORT_SYMBOL(rsa_op_copy);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#867: FILE: crypto/rsa.c:763:
+EXPORT_SYMBOL(rsa_op_print);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#868: FILE: crypto/rsa.c:764:
+EXPORT_SYMBOL(rsa_cipher);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#880: FILE: include/crypto/rsa.h:1:
+#ifndef _CRYPTO_RSA_H

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op **' should also have an identifier name
#897: FILE: include/crypto/rsa.h:18:
+int	rsa_op_alloc(struct rsa_op **, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#897: FILE: include/crypto/rsa.h:18:
+int	rsa_op_alloc(struct rsa_op **, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#899: FILE: include/crypto/rsa.h:20:
+void	rsa_op_free(struct rsa_op *);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#901: FILE: include/crypto/rsa.h:22:
+int ^Irsa_op_init(struct rsa_op **, u8 *, u32, u32);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op **' should also have an identifier name
#901: FILE: include/crypto/rsa.h:22:
+int 	rsa_op_init(struct rsa_op **, u8 *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#901: FILE: include/crypto/rsa.h:22:
+int 	rsa_op_init(struct rsa_op **, u8 *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#901: FILE: include/crypto/rsa.h:22:
+int 	rsa_op_init(struct rsa_op **, u8 *, u32, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#901: FILE: include/crypto/rsa.h:22:
+int 	rsa_op_init(struct rsa_op **, u8 *, u32, u32);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#903: FILE: include/crypto/rsa.h:24:
+int ^Irsa_op_set(struct rsa_op **, u8 *, u32);$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op **' should also have an identifier name
#903: FILE: include/crypto/rsa.h:24:
+int 	rsa_op_set(struct rsa_op **, u8 *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u8 *' should also have an identifier name
#903: FILE: include/crypto/rsa.h:24:
+int 	rsa_op_set(struct rsa_op **, u8 *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#903: FILE: include/crypto/rsa.h:24:
+int 	rsa_op_set(struct rsa_op **, u8 *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op **' should also have an identifier name
#905: FILE: include/crypto/rsa.h:26:
+int	rsa_op_copy(struct rsa_op **, struct rsa_op *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#905: FILE: include/crypto/rsa.h:26:
+int	rsa_op_copy(struct rsa_op **, struct rsa_op *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#907: FILE: include/crypto/rsa.h:28:
+void	rsa_op_print(struct rsa_op *, bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#907: FILE: include/crypto/rsa.h:28:
+void	rsa_op_print(struct rsa_op *, bool);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#909: FILE: include/crypto/rsa.h:30:
+int ^Irsa_cipher(struct rsa_op **, struct rsa_op *, struct rsa_op *,$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op **' should also have an identifier name
#909: FILE: include/crypto/rsa.h:30:
+int 	rsa_cipher(struct rsa_op **, struct rsa_op *, struct rsa_op *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#909: FILE: include/crypto/rsa.h:30:
+int 	rsa_cipher(struct rsa_op **, struct rsa_op *, struct rsa_op *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#909: FILE: include/crypto/rsa.h:30:
+int 	rsa_cipher(struct rsa_op **, struct rsa_op *, struct rsa_op *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct rsa_op *' should also have an identifier name
#909: FILE: include/crypto/rsa.h:30:
+int 	rsa_cipher(struct rsa_op **, struct rsa_op *, struct rsa_op *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 44 warnings, 9 checks, 840 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000449896.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
