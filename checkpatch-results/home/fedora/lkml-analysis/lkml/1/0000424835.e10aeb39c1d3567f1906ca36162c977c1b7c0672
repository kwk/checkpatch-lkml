WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#58: FILE: include/linux/rss_container.h:1:
+#ifndef __RSS_CONTAINER_H__

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#74: FILE: include/linux/rss_container.h:17:
+int container_rss_prepare(struct page *, struct vm_area_struct *vma,
+		struct page_container **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#76: FILE: include/linux/rss_container.h:19:
+void container_rss_add(struct page_container *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#77: FILE: include/linux/rss_container.h:20:
+void container_rss_del(struct page_container *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page_container *' should also have an identifier name
#78: FILE: include/linux/rss_container.h:21:
+void container_rss_release(struct page_container *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: include/linux/rss_container.h:33:
+static inline int container_rss_prepare(struct page *pg,
+		struct vm_area_struct *vma, struct page_container **pc)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: mm/rss_container.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: mm/rss_container.c:52:
+int container_rss_prepare(struct page *page, struct vm_area_struct *vma,
+		struct page_container **ppc)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pc)...) over kmalloc(sizeof(struct page_container)...)
#217: FILE: mm/rss_container.c:62:
+	pc = kmalloc(sizeof(struct page_container), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pc"
#218: FILE: mm/rss_container.c:63:
+	if (pc == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: mm/rss_container.c:129:
+static void rss_move_task(struct container_subsys *ss,
+		struct container *cont,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm"
#292: FILE: mm/rss_container.c:137:
+	if (mm == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: mm/rss_container.c:158:
+static inline void rss_container_attach(struct rss_container *rss,
+		struct container *cont)

CHECK:BRACES: braces {} should be used on all arms of this statement
#323: FILE: mm/rss_container.c:168:
+	if (unlikely(cont->parent == NULL)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cont->parent"
#323: FILE: mm/rss_container.c:168:
+	if (unlikely(cont->parent == NULL)) {

CHECK:BRACES: Unbalanced braces around else statement
#327: FILE: mm/rss_container.c:172:
+	} else

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rss)...) over kzalloc(sizeof(struct rss_container)...)
#328: FILE: mm/rss_container.c:173:
+		rss = kzalloc(sizeof(struct rss_container), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rss"
#330: FILE: mm/rss_container.c:175:
+	if (rss == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: mm/rss_container.c:186:
+static void rss_destroy(struct container_subsys *ss,
+		struct container *cont)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#346: FILE: mm/rss_container.c:191:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: mm/rss_container.c:193:
+static ssize_t rss_read(struct container *cont, struct cftype *cft,
+		struct file *file, char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#356: FILE: mm/rss_container.c:201:
+static ssize_t rss_write(struct container *cont, struct cftype *cft,
+		struct file *file, const char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#364: FILE: mm/rss_container.c:209:
+static ssize_t rss_read_reclaimed(struct container *cont, struct cftype *cft,
+		struct file *file, char __user *userbuf,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#376: FILE: mm/rss_container.c:221:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: mm/rss_container.c:247:
+static int rss_populate(struct container_subsys *ss,
+		struct container *cont)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#406: FILE: mm/rss_container.c:251:
+	if ((rc = container_add_file(cont, &rss_usage)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#408: FILE: mm/rss_container.c:253:
+	if ((rc = container_add_file(cont, &rss_failcnt)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#410: FILE: mm/rss_container.c:255:
+	if ((rc = container_add_file(cont, &rss_limit)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#412: FILE: mm/rss_container.c:257:
+	if ((rc = container_add_file(cont, &rss_reclaimed)) < 0)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 5 warnings, 20 checks, 367 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000424835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
