WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
master.kernel.org:/pub/scm/linux/kernel/git/jgarzik/netdev-2.6.git davem-next

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#161: 
Ilpo Järvinen (1):
      ^

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#265: FILE: drivers/net/8139too.c:2014:
+			skb_reserve (skb, NET_IP_ALIGN);	/* 16 byte align the IP fields. */

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#324: FILE: drivers/net/bonding/bond_main.c:3727:
+		if (!(iph->frag_off & htons(IP_MF|IP_OFFSET)) &&
 		                                 ^

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#424: FILE: drivers/net/e1000e/82571.c:380:
+		udelay(20);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#551: FILE: drivers/net/e1000e/82571.c:1057:
+		/*
+		 * If no link, then turn LED on by setting the invert bit

WARNING:TYPO_SPELLING: 'paramter' may be misspelled - perhaps 'parameter'?
#733: FILE: drivers/net/e1000e/e1000.h:65:
+/* Interrupt modes, as used by the IntMode paramter */
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:BIT_MACRO: Prefer using the BIT macro
#780: FILE: drivers/net/e1000e/e1000.h:325:
+#define FLAG_HAS_MSIX                     (1 << 10)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#788: FILE: drivers/net/e1000e/e1000.h:384:
+extern void e1000e_set_interrupt_capability(struct e1000_adapter *adapter);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#789: FILE: drivers/net/e1000e/e1000.h:385:
+extern void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#808: FILE: drivers/net/e1000e/e1000.h:470:
+extern s32 e1000e_phy_init_script_igp3(struct e1000_hw *hw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#813: FILE: drivers/net/e1000e/e1000.h:475:
+extern s32 e1000e_read_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 *data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#814: FILE: drivers/net/e1000e/e1000.h:476:
+extern s32 e1000e_write_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 data);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#828: FILE: drivers/net/e1000e/e1000.h:552:
+extern bool e1000e_check_mng_mode_generic(struct e1000_hw *hw);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->phy.type == e1000_phy_ife'
#962: FILE: drivers/net/e1000e/ethtool.c:1795:
+	if ((hw->phy.type == e1000_phy_ife) ||
+	    (hw->mac.type == e1000_82574)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->mac.type == e1000_82574'
#962: FILE: drivers/net/e1000e/ethtool.c:1795:
+	if ((hw->phy.type == e1000_phy_ife) ||
+	    (hw->mac.type == e1000_82574)) {

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_n' may be better as '(_n)' to avoid precedence issues
#1001: FILE: drivers/net/e1000e/hw.h:72:
+#define E1000_EITR_82574(_n) (E1000_EITR_82574_BASE + (_n << 2))

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct e1000_hw *' should also have an identifier name
#1050: FILE: drivers/net/e1000e/hw.h:711:
+	bool (*check_mng_mode)(struct e1000_hw *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1133: FILE: drivers/net/e1000e/ich8lan.c:942:
+		/*
+		 * Make sure the signature for bank 0 is valid,

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#1141: FILE: drivers/net/e1000e/ich8lan.c:950:
+			/*
+			 * find if segment 1 is valid by verifying

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->mac.type == e1000_ich10lan'
#1253: FILE: drivers/net/e1000e/ich8lan.c:2298:
+	if ((hw->mac.type == e1000_ich10lan) ||
+	    (hw->mac.type == e1000_ich9lan)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->mac.type == e1000_ich9lan'
#1253: FILE: drivers/net/e1000e/ich8lan.c:2298:
+	if ((hw->mac.type == e1000_ich10lan) ||
+	    (hw->mac.type == e1000_ich9lan)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->phy.type == e1000_phy_igp_3'
#1279: FILE: drivers/net/e1000e/ich8lan.c:2374:
+		if (((er32(EECD) & E1000_EECD_PRES) == 0) &&
+		    (hw->phy.type == e1000_phy_igp_3)) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1423: FILE: drivers/net/e1000e/netdev.c:1271:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1431: FILE: drivers/net/e1000e/netdev.c:1279:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1483: FILE: drivers/net/e1000e/netdev.c:1331:
+		u32 rfctl = er32(RFCTL);
+		rfctl |= E1000_RFCTL_ACK_DIS;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1547: FILE: drivers/net/e1000e/netdev.c:1395:
+	return;
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1560: FILE: drivers/net/e1000e/netdev.c:1408:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1566: FILE: drivers/net/e1000e/netdev.c:1414:
+			adapter->msix_entries = kcalloc(numvecs,
+						      sizeof(struct msix_entry),

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1578: FILE: drivers/net/e1000e/netdev.c:1426:
+			/* MSI-X failed, so fall through and try MSI */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPLIT_STRING: quoted string split across lines
#1580: FILE: drivers/net/e1000e/netdev.c:1428:
+			e_err("Failed to initialize MSI-X interrupts.  "
+			      "Falling back to MSI interrupts.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1584: FILE: drivers/net/e1000e/netdev.c:1432:
+		/* Fall through */

WARNING:SPLIT_STRING: quoted string split across lines
#1591: FILE: drivers/net/e1000e/netdev.c:1439:
+			e_err("Failed to initialize MSI interrupts.  Falling "
+			      "back to legacy interrupts.\n");

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1593: FILE: drivers/net/e1000e/netdev.c:1441:
+		/* Fall through */

WARNING:RETURN_VOID: void function return statements are not generally useful
#1600: FILE: drivers/net/e1000e/netdev.c:1448:
+	return;
+}

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1781: FILE: drivers/net/e1000e/netdev.c:1955:
+static int __devinit e1000_alloc_queues(struct e1000_adapter *adapter)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*adapter->tx_ring)...) over kzalloc(sizeof(struct e1000_ring)...)
#1783: FILE: drivers/net/e1000e/netdev.c:1957:
+	adapter->tx_ring = kzalloc(sizeof(struct e1000_ring), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*adapter->rx_ring)...) over kzalloc(sizeof(struct e1000_ring)...)
#1787: FILE: drivers/net/e1000e/netdev.c:1961:
+	adapter->rx_ring = kzalloc(sizeof(struct e1000_ring), GFP_KERNEL);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'hw->mac.autoneg == true'
#1931: FILE: drivers/net/e1000e/netdev.c:3517:
+			if ((hw->phy.type == e1000_phy_igp_3 ||
+			     hw->phy.type == e1000_phy_bm) &&
+			    (hw->mac.autoneg == true) &&
+			    (adapter->link_speed == SPEED_10 ||
+			     adapter->link_speed == SPEED_100) &&
+			    (adapter->link_duplex == HALF_DUPLEX)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'adapter->link_duplex == HALF_DUPLEX'
#1931: FILE: drivers/net/e1000e/netdev.c:3517:
+			if ((hw->phy.type == e1000_phy_igp_3 ||
+			     hw->phy.type == e1000_phy_bm) &&
+			    (hw->mac.autoneg == true) &&
+			    (adapter->link_speed == SPEED_10 ||
+			     adapter->link_speed == SPEED_100) &&
+			    (adapter->link_duplex == HALF_DUPLEX)) {

CHECK:BOOL_COMPARISON: Using comparison to true is error prone
#1933: FILE: drivers/net/e1000e/netdev.c:3519:
+			    (hw->mac.autoneg == true) &&

Comparisons of A to true and false are better written
as A and !A.

See: https://lore.kernel.org/lkml/1365563834.27174.12.camel@joe-AO722/

WARNING:SPLIT_STRING: quoted string split across lines
#1943: FILE: drivers/net/e1000e/netdev.c:3529:
+					e_info("Autonegotiated half duplex but"
+					       " link partner cannot autoneg. "

WARNING:SPLIT_STRING: quoted string split across lines
#1944: FILE: drivers/net/e1000e/netdev.c:3530:
+					       " link partner cannot autoneg. "
+					       " Try forcing full duplex if "

WARNING:SPLIT_STRING: quoted string split across lines
#1945: FILE: drivers/net/e1000e/netdev.c:3531:
+					       " Try forcing full duplex if "
+					       "link gets many collisions.\n");

CHECK:CAMELCASE: Avoid CamelCase: <IntMode>
#2047: FILE: drivers/net/e1000e/param.c:123:
+E1000_PARAM(IntMode, "Interrupt Mode");

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <num_IntMode>
#2067: FILE: drivers/net/e1000e/param.c:374:
+		if (num_IntMode > bd) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2069: FILE: drivers/net/e1000e/param.c:376:
+			unsigned int int_mode = IntMode[bd];
+			e1000_validate_option(&int_mode, &opt, adapter);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phy->type == e1000_phy_m88'
#2087: FILE: drivers/net/e1000e/phy.c:479:
+	if ((phy->type == e1000_phy_m88) &&
+	    (phy->revision < E1000_REVISION_4) &&
+	    (phy->id != BME1000_E_PHY_ID_R2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phy->revision < E1000_REVISION_4'
#2087: FILE: drivers/net/e1000e/phy.c:479:
+	if ((phy->type == e1000_phy_m88) &&
+	    (phy->revision < E1000_REVISION_4) &&
+	    (phy->id != BME1000_E_PHY_ID_R2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phy->id != BME1000_E_PHY_ID_R2'
#2087: FILE: drivers/net/e1000e/phy.c:479:
+	if ((phy->type == e1000_phy_m88) &&
+	    (phy->revision < E1000_REVISION_4) &&
+	    (phy->id != BME1000_E_PHY_ID_R2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phy->type == e1000_phy_bm'
#2097: FILE: drivers/net/e1000e/phy.c:509:
+	if ((phy->type == e1000_phy_bm) && (phy->id == BME1000_E_PHY_ID_R2)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phy->id == BME1000_E_PHY_ID_R2'
#2097: FILE: drivers/net/e1000e/phy.c:509:
+	if ((phy->type == e1000_phy_bm) && (phy->id == BME1000_E_PHY_ID_R2)) {

WARNING:TYPO_SPELLING: 'AFE' may be misspelled - perhaps 'SAFE'?
#2131: FILE: drivers/net/e1000e/phy.c:1752:
+	/* Bias trimming for ADC, AFE and Driver (Default) */
 	                          ^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2180: FILE: drivers/net/e1000e/phy.c:1801:
+	/*
+	 * Change cg_icount + enable integbp + change prop_factor_master

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2187: FILE: drivers/net/e1000e/phy.c:1808:
+	/*
+	 * Enable LPLU and disable AN to 1000 in non-D0a states,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2236: FILE: drivers/net/e1000e/phy.c:2099:
+	if (offset > MAX_PHY_MULTI_PAGE_REG) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2393: FILE: drivers/net/ixgbe/ixgbe.h:40:
+#if defined(CONFIG_DCA) || defined(CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2418: FILE: drivers/net/ixgbe/ixgbe.h:153:
+#if defined(CONFIG_DCA) || defined(CONFIG_DCA_MODULE)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2451: FILE: drivers/net/ixgbe/ixgbe.h:270:
+#define IXGBE_FLAG_RX_CSUM_ENABLED              (u32)(1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2452: FILE: drivers/net/ixgbe/ixgbe.h:271:
+#define IXGBE_FLAG_MSI_CAPABLE                  (u32)(1 << 1)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2453: FILE: drivers/net/ixgbe/ixgbe.h:272:
+#define IXGBE_FLAG_MSI_ENABLED                  (u32)(1 << 2)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2454: FILE: drivers/net/ixgbe/ixgbe.h:273:
+#define IXGBE_FLAG_MSIX_CAPABLE                 (u32)(1 << 3)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2455: FILE: drivers/net/ixgbe/ixgbe.h:274:
+#define IXGBE_FLAG_MSIX_ENABLED                 (u32)(1 << 4)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2456: FILE: drivers/net/ixgbe/ixgbe.h:275:
+#define IXGBE_FLAG_RX_1BUF_CAPABLE              (u32)(1 << 6)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2457: FILE: drivers/net/ixgbe/ixgbe.h:276:
+#define IXGBE_FLAG_RX_PS_CAPABLE                (u32)(1 << 7)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2458: FILE: drivers/net/ixgbe/ixgbe.h:277:
+#define IXGBE_FLAG_RX_PS_ENABLED                (u32)(1 << 8)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2459: FILE: drivers/net/ixgbe/ixgbe.h:278:
+#define IXGBE_FLAG_IN_NETPOLL                   (u32)(1 << 9)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2460: FILE: drivers/net/ixgbe/ixgbe.h:279:
+#define IXGBE_FLAG_DCA_ENABLED                  (u32)(1 << 10)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2461: FILE: drivers/net/ixgbe/ixgbe.h:280:
+#define IXGBE_FLAG_DCA_CAPABLE                  (u32)(1 << 11)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2462: FILE: drivers/net/ixgbe/ixgbe.h:281:
+#define IXGBE_FLAG_IMIR_ENABLED                 (u32)(1 << 12)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2463: FILE: drivers/net/ixgbe/ixgbe.h:282:
+#define IXGBE_FLAG_MQ_CAPABLE                   (u32)(1 << 13)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2464: FILE: drivers/net/ixgbe/ixgbe.h:283:
+#define IXGBE_FLAG_RSS_ENABLED                  (u32)(1 << 16)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2465: FILE: drivers/net/ixgbe/ixgbe.h:284:
+#define IXGBE_FLAG_RSS_CAPABLE                  (u32)(1 << 17)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2466: FILE: drivers/net/ixgbe/ixgbe.h:285:
+#define IXGBE_FLAG_VMDQ_CAPABLE                 (u32)(1 << 18)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2467: FILE: drivers/net/ixgbe/ixgbe.h:286:
+#define IXGBE_FLAG_VMDQ_ENABLED                 (u32)(1 << 19)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2468: FILE: drivers/net/ixgbe/ixgbe.h:287:
+#define IXGBE_FLAG_NEED_LINK_UPDATE             (u32)(1 << 22)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#2469: FILE: drivers/net/ixgbe/ixgbe.h:288:
+#define IXGBE_FLAG_IN_WATCHDOG_TASK             (u32)(1 << 23)

ERROR:CODE_INDENT: code indent should use tabs where possible
#2537: FILE: drivers/net/ixgbe/ixgbe_common.c:727:
+^I          addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2537: FILE: drivers/net/ixgbe/ixgbe_common.c:727:
+	hw_dbg(hw, " UC Addr = %.2X %.2X %.2X %.2X %.2X %.2X\n",
+	          addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2540: FILE: drivers/net/ixgbe/ixgbe_common.c:730:
+	/*
+	 * Place this address in the RAR if there is room,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ixgbe_add_uc_addr', this function's name, in a string
#2553: FILE: drivers/net/ixgbe/ixgbe_common.c:743:
+	hw_dbg(hw, "ixgbe_add_uc_addr Complete\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#2571: FILE: drivers/net/ixgbe/ixgbe_common.c:761:
+                              u32 addr_count, ixgbe_mc_addr_itr next)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2571: FILE: drivers/net/ixgbe/ixgbe_common.c:761:
+                              u32 addr_count, ixgbe_mc_addr_itr next)$

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#2581: FILE: drivers/net/ixgbe/ixgbe_common.c:771:
+	/*
+	 * Clear accounting of old secondary address list,

ERROR:CODE_INDENT: code indent should use tabs where possible
#2585: FILE: drivers/net/ixgbe/ixgbe_common.c:775:
+^I                 hw->addr_ctrl.mc_addr_in_rar_count - 1;$

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ixgbe_update_uc_addr_list', this function's name, in a string
#2621: FILE: drivers/net/ixgbe/ixgbe_common.c:811:
+	hw_dbg(hw, "ixgbe_update_uc_addr_list Complete\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2770: FILE: drivers/net/ixgbe/ixgbe_main.c:83:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2770: FILE: drivers/net/ixgbe/ixgbe_main.c:83:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2797: FILE: drivers/net/ixgbe/ixgbe_main.c:170:
+	 * check with the clearing of time_stamp and movement of eop */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'head != tail'
#2802: FILE: drivers/net/ixgbe/ixgbe_main.c:174:
+	if ((head != tail) &&
+	    tx_ring->tx_buffer_info[eop].time_stamp &&
 	    time_after(jiffies, tx_ring->tx_buffer_info[eop].time_stamp + HZ) &&
 	    !(IXGBE_READ_REG(&adapter->hw, IXGBE_TFCS) & IXGBE_TFCS_TXOFF)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2808: FILE: drivers/net/ixgbe/ixgbe_main.c:180:
+		union ixgbe_adv_tx_desc *tx_desc;
+		tx_desc = IXGBE_TX_DESC_ADV(*tx_ring, eop);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ring' - possible side-effects?
#2839: FILE: drivers/net/ixgbe/ixgbe_main.c:208:
+#define GET_TX_HEAD_FROM_RING(ring) (\
+	*(volatile u32 *) \
+	((union ixgbe_adv_tx_desc *)(ring)->desc + (ring)->count))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#2840: FILE: drivers/net/ixgbe/ixgbe_main.c:209:
+	*(volatile u32 *) \

ERROR:CODE_INDENT: code indent should use tabs where possible
#2851: FILE: drivers/net/ixgbe/ixgbe_main.c:219:
+                               struct ixgbe_ring *tx_ring)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2851: FILE: drivers/net/ixgbe/ixgbe_main.c:219:
+                               struct ixgbe_ring *tx_ring)$

WARNING:MEMORY_BARRIER: memory barrier without comment
#2867: FILE: drivers/net/ixgbe/ixgbe_main.c:230:
+	rmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#2896: FILE: drivers/net/ixgbe/ixgbe_main.c:247:
+^I^I^I^I            skb->len;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2904: FILE: drivers/net/ixgbe/ixgbe_main.c:253:
+^I^I^I                                 tx_buffer_info);$

WARNING:MEMORY_BARRIER: memory barrier without comment
#2926: FILE: drivers/net/ixgbe/ixgbe_main.c:264:
+		rmb();

ERROR:CODE_INDENT: code indent should use tabs where possible
#2940: FILE: drivers/net/ixgbe/ixgbe_main.c:276:
+^I             (IXGBE_DESC_UNUSED(tx_ring) >= TX_WAKE_THRESHOLD))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2960: FILE: drivers/net/ixgbe/ixgbe_main.c:292:
+^I^I^I        "tx hang %d detected, resetting adapter\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#2961: FILE: drivers/net/ixgbe/ixgbe_main.c:293:
+^I^I^I        adapter->tx_timeout_count + 1);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'total_packets >= tx_ring->work_limit'
#2969: FILE: drivers/net/ixgbe/ixgbe_main.c:299:
+	if ((total_packets >= tx_ring->work_limit) ||
+	    (count == tx_ring->count))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count == tx_ring->count'
#2969: FILE: drivers/net/ixgbe/ixgbe_main.c:299:
+	if ((total_packets >= tx_ring->work_limit) ||
+	    (count == tx_ring->count))

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2985: FILE: drivers/net/ixgbe/ixgbe_main.c:309:
+	return (total_packets ? true : false);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2989: FILE: drivers/net/ixgbe/ixgbe_main.c:312:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#2989: FILE: drivers/net/ixgbe/ixgbe_main.c:312:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3067: FILE: drivers/net/ixgbe/ixgbe_main.c:447:
+                                     u32 status_err, struct sk_buff *skb)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3067: FILE: drivers/net/ixgbe/ixgbe_main.c:447:
+                                     u32 status_err, struct sk_buff *skb)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3085: FILE: drivers/net/ixgbe/ixgbe_main.c:480:
+                                   struct ixgbe_ring *rx_ring,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3085: FILE: drivers/net/ixgbe/ixgbe_main.c:480:
+                                   struct ixgbe_ring *rx_ring,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3086: FILE: drivers/net/ixgbe/ixgbe_main.c:481:
+                                   int cleaned_count)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3086: FILE: drivers/net/ixgbe/ixgbe_main.c:481:
+                                   int cleaned_count)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3120: FILE: drivers/net/ixgbe/ixgbe_main.c:504:
+^I                                            PAGE_SIZE,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3120: FILE: drivers/net/ixgbe/ixgbe_main.c:504:
+			bi->page_dma = pci_map_page(pdev, bi->page, 0,
+	                                            PAGE_SIZE,

ERROR:CODE_INDENT: code indent should use tabs where possible
#3121: FILE: drivers/net/ixgbe/ixgbe_main.c:505:
+^I                                            PCI_DMA_FROMDEVICE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3141: FILE: drivers/net/ixgbe/ixgbe_main.c:525:
+^I^I^I                         PCI_DMA_FROMDEVICE);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3185: FILE: drivers/net/ixgbe/ixgbe_main.c:570:
+^I                       struct ixgbe_ring *rx_ring,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3186: FILE: drivers/net/ixgbe/ixgbe_main.c:571:
+^I                       int *work_done, int work_to_do)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3221: FILE: drivers/net/ixgbe/ixgbe_main.c:599:
+^I                       IXGBE_RXDADV_HDRBUFLEN_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3240: FILE: drivers/net/ixgbe/ixgbe_main.c:616:
+^I                                 rx_ring->rx_buf_len + NET_IP_ALIGN,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3241: FILE: drivers/net/ixgbe/ixgbe_main.c:617:
+^I                                 PCI_DMA_FROMDEVICE);$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around adapter->tx_ring[r_idx]
#3270: FILE: drivers/net/ixgbe/ixgbe_main.c:936:
+		tx_ring = &(adapter->tx_ring[r_idx]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3271: FILE: drivers/net/ixgbe/ixgbe_main.c:937:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3271: FILE: drivers/net/ixgbe/ixgbe_main.c:937:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around adapter->rx_ring[r_idx]
#3298: FILE: drivers/net/ixgbe/ixgbe_main.c:967:
+	rx_ring = &(adapter->rx_ring[r_idx]);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around adapter->rx_ring[r_idx]
#3321: FILE: drivers/net/ixgbe/ixgbe_main.c:1001:
+	rx_ring = &(adapter->rx_ring[r_idx]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3322: FILE: drivers/net/ixgbe/ixgbe_main.c:1002:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3322: FILE: drivers/net/ixgbe/ixgbe_main.c:1002:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3366: FILE: drivers/net/ixgbe/ixgbe_main.c:1388:
+		struct ixgbe_ring *ring = &adapter->tx_ring[i];
+		j = ring->reg_idx;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3371: FILE: drivers/net/ixgbe/ixgbe_main.c:1392:
+^I^I                (tdba & DMA_32BIT_MASK));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3374: FILE: drivers/net/ixgbe/ixgbe_main.c:1395:
+^I^I        (ring->count * sizeof(union ixgbe_adv_tx_desc));$

CHECK:SPACING: No space is necessary after a cast
#3407: FILE: drivers/net/ixgbe/ixgbe_main.c:1425:
+		mask = (unsigned long) adapter->ring_feature[RING_F_RSS].mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3407: FILE: drivers/net/ixgbe/ixgbe_main.c:1425:
+		long shift, len;
+		mask = (unsigned long) adapter->ring_feature[RING_F_RSS].mask;

CHECK:SPACING: No space is necessary after a cast
#3414: FILE: drivers/net/ixgbe/ixgbe_main.c:1432:
+		mask = (unsigned long) adapter->ring_feature[RING_F_RSS].mask;

ERROR:CODE_INDENT: code indent should use tabs where possible
#3437: FILE: drivers/net/ixgbe/ixgbe_main.c:1455:
+^I^I^I          IXGBE_SRRCTL_BSIZEPKT_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3440: FILE: drivers/net/ixgbe/ixgbe_main.c:1458:
+^I^I^I          IXGBE_SRRCTL_BSIZEPKT_SHIFT;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3456: FILE: drivers/net/ixgbe/ixgbe_main.c:1478:
+	if (!((ixgbe_get_pkt_info(rx_desc) & IXGBE_RXDADV_PKTTYPE_IPV4) &&
+	     (ixgbe_get_pkt_info(rx_desc) & IXGBE_RXDADV_PKTTYPE_TCP)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'S' - possible side-effects?
#3464: FILE: drivers/net/ixgbe/ixgbe_main.c:1490:
+#define PAGE_USE_COUNT(S) (((S) >> PAGE_SHIFT) + \
+			(((S) & (PAGE_SIZE - 1)) ? 1 : 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#3479: FILE: drivers/net/ixgbe/ixgbe_main.c:1508:
+^I                  0xA54F2BEC, 0xEA49AF7C, 0xE214AD3D, 0xB855AABE,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3480: FILE: drivers/net/ixgbe/ixgbe_main.c:1509:
+^I                  0x6A3E67EA, 0x14364D17, 0x3BED200D};$

WARNING:TYPO_SPELLING: 'Intitial' may be misspelled - perhaps 'Initial'?
#3567: FILE: drivers/net/ixgbe/ixgbe_main.c:1564:
+		/* Intitial LRO Settings */
 		   ^^^^^^^^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#3582: FILE: drivers/net/ixgbe/ixgbe_main.c:1579:
+	/*
+	 * For VMDq support of different descriptor types or

ERROR:CODE_INDENT: code indent should use tabs where possible
#3722: FILE: drivers/net/ixgbe/ixgbe_main.c:1760:
+^I                          ixgbe_addr_list_itr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3729: FILE: drivers/net/ixgbe/ixgbe_main.c:1767:
+^I                          ixgbe_addr_list_itr);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3764: FILE: drivers/net/ixgbe/ixgbe_main.c:2105:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3764: FILE: drivers/net/ixgbe/ixgbe_main.c:2105:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3776: FILE: drivers/net/ixgbe/ixgbe_main.c:2117:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3776: FILE: drivers/net/ixgbe/ixgbe_main.c:2117:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3781: FILE: drivers/net/ixgbe/ixgbe_main.c:2122:
+		 * in the CB driver */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3794: FILE: drivers/net/ixgbe/ixgbe_main.c:2181:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#3794: FILE: drivers/net/ixgbe/ixgbe_main.c:2181:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#3824: FILE: drivers/net/ixgbe/ixgbe_main.c:2595:
+                             struct ixgbe_ring *tx_ring)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3824: FILE: drivers/net/ixgbe/ixgbe_main.c:2595:
+                             struct ixgbe_ring *tx_ring)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3855: FILE: drivers/net/ixgbe/ixgbe_main.c:2608:
+^I                sizeof(u32);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3862: FILE: drivers/net/ixgbe/ixgbe_main.c:2612:
+^I                                     &tx_ring->dma);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#3875: FILE: drivers/net/ixgbe/ixgbe_main.c:2625:
+^I                    "descriptor ring\n");$

WARNING:SPLIT_STRING: quoted string split across lines
#3875: FILE: drivers/net/ixgbe/ixgbe_main.c:2625:
+	DPRINTK(PROBE, ERR, "Unable to allocate memory for the transmit "
+	                    "descriptor ring\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#3954: FILE: drivers/net/ixgbe/ixgbe_main.c:2689:
+                                    struct ixgbe_ring *tx_ring)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3954: FILE: drivers/net/ixgbe/ixgbe_main.c:2689:
+                                    struct ixgbe_ring *tx_ring)$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4036: FILE: drivers/net/ixgbe/ixgbe_main.c:3751:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4036: FILE: drivers/net/ixgbe/ixgbe_main.c:3751:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4045: FILE: drivers/net/ixgbe/ixgbe_main.c:3801:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4045: FILE: drivers/net/ixgbe/ixgbe_main.c:3801:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4054: FILE: drivers/net/ixgbe/ixgbe_main.c:3934:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4054: FILE: drivers/net/ixgbe/ixgbe_main.c:3934:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4063: FILE: drivers/net/ixgbe/ixgbe_main.c:3951:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4063: FILE: drivers/net/ixgbe/ixgbe_main.c:3951:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#4070: FILE: drivers/net/ixgbe/ixgbe_main.c:3957:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#4070: FILE: drivers/net/ixgbe/ixgbe_main.c:3957:
+#if defined(CONFIG_DCA) || defined (CONFIG_DCA_MODULE)

ERROR:CODE_INDENT: code indent should use tabs where possible
#4185: FILE: drivers/net/ixgbe/ixgbe_type.h:1246:
+                                  u32 *vmdq);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4185: FILE: drivers/net/ixgbe/ixgbe_type.h:1246:
+                                  u32 *vmdq);$

CHECK:BIT_MACRO: Prefer using the BIT macro
#4297: FILE: drivers/net/r8169.c:243:
+#define	FIX_NAK_1			(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4298: FILE: drivers/net/r8169.c:244:
+#define	FIX_NAK_2			(1 << 3)

CHECK:CAMELCASE: Avoid CamelCase: <Speed_down>
#4311: FILE: drivers/net/r8169.c:303:
+	Speed_down	= (1 << 4),

CHECK:CAMELCASE: Avoid CamelCase: <Beacon_en>
#4322: FILE: drivers/net/r8169.c:316:
+	Beacon_en	= (1 << 0),	/* 8168 only. Reserved in the 8168b */

CHECK:CAMELCASE: Avoid CamelCase: <EnableBist>
#4331: FILE: drivers/net/r8169.c:334:
+	EnableBist	= (1 << 15),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Mac_dbgo_oe>
#4332: FILE: drivers/net/r8169.c:335:
+	Mac_dbgo_oe	= (1 << 14),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Normal_mode>
#4333: FILE: drivers/net/r8169.c:336:
+	Normal_mode	= (1 << 13),	// unused

CHECK:CAMELCASE: Avoid CamelCase: <Force_half_dup>
#4334: FILE: drivers/net/r8169.c:337:
+	Force_half_dup	= (1 << 12),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Force_rxflow_en>
#4335: FILE: drivers/net/r8169.c:338:
+	Force_rxflow_en	= (1 << 11),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Force_txflow_en>
#4336: FILE: drivers/net/r8169.c:339:
+	Force_txflow_en	= (1 << 10),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Cxpl_dbg_sel>
#4337: FILE: drivers/net/r8169.c:340:
+	Cxpl_dbg_sel	= (1 << 9),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <PktCntrDisable>
#4339: FILE: drivers/net/r8169.c:342:
+	PktCntrDisable	= (1 << 7),	// 8168 8101

CHECK:CAMELCASE: Avoid CamelCase: <Mac_dbgo_sel>
#4340: FILE: drivers/net/r8169.c:343:
+	Mac_dbgo_sel	= 0x001c,	// 8168

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct net_device *' should also have an identifier name
#4361: FILE: drivers/net/r8169.c:458:
+	int (*get_settings)(struct net_device *, struct ethtool_cmd *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ethtool_cmd *' should also have an identifier name
#4361: FILE: drivers/net/r8169.c:458:
+	int (*get_settings)(struct net_device *, struct ethtool_cmd *);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4410: FILE: drivers/net/r8169.c:569:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4426: FILE: drivers/net/r8169.c:585:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4443: FILE: drivers/net/r8169.c:602:
+		udelay(10);

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#4460: FILE: drivers/net/r8169.c:619:
+		udelay(10);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_07'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_08'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_09'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_10'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_13'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_14'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_15'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tp->mac_version == RTL_GIGA_MAC_VER_16'
#4476: FILE: drivers/net/r8169.c:849:
+	if ((tp->mac_version == RTL_GIGA_MAC_VER_07) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_08) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_09) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_10) ||
+	    (tp->mac_version == RTL_GIGA_MAC_VER_13) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_14) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_15) ||
 	    (tp->mac_version == RTL_GIGA_MAC_VER_16)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4625: FILE: drivers/net/r8169.c:1654:
+	unsigned features;

CHECK:CAMELCASE: Avoid CamelCase: <PCIMulRW>
#4778: FILE: drivers/net/r8169.c:2310:
+	PCIMulRW)

CHECK:CAMELCASE: Avoid CamelCase: <Config1>
#4800: FILE: drivers/net/r8169.c:2332:
+	RTL_W8(Config1,

CHECK:CAMELCASE: Avoid CamelCase: <PMEnable>
#4801: FILE: drivers/net/r8169.c:2333:
+	       LEDS1 | LEDS0 | Speed_down | MEMMAP | IOMAP | VPD | PMEnable);

CHECK:CAMELCASE: Avoid CamelCase: <Config3>
#4802: FILE: drivers/net/r8169.c:2334:
+	RTL_W8(Config3, RTL_R8(Config3) & ~Beacon_en);

CHECK:CAMELCASE: Avoid CamelCase: <CPlusCmd>
#4808: FILE: drivers/net/r8169.c:2340:
+	RTL_W16(CPlusCmd, RTL_R16(CPlusCmd) & ~R810X_CPCMD_QUIRK_MASK);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'width' - possible side-effects?
#4890: FILE: drivers/net/sfc/bitfield.h:55:
+#define EFX_MASK64(width)			\
+	((width) == 64 ? ~((u64) 0) :		\
+	 (((((u64) 1) << (width))) - 1))

CHECK:SPACING: No space is necessary after a cast
#4891: FILE: drivers/net/sfc/bitfield.h:56:
+	((width) == 64 ? ~((u64) 0) :		\

CHECK:SPACING: No space is necessary after a cast
#4892: FILE: drivers/net/sfc/bitfield.h:57:
+	 (((((u64) 1) << (width))) - 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'width' - possible side-effects?
#4903: FILE: drivers/net/sfc/bitfield.h:66:
+#define EFX_MASK32(width)			\
+	((width) == 32 ? ~((u32) 0) :		\
+	 (((((u32) 1) << (width))) - 1))

CHECK:SPACING: No space is necessary after a cast
#4904: FILE: drivers/net/sfc/bitfield.h:67:
+	((width) == 32 ? ~((u32) 0) :		\

CHECK:SPACING: No space is necessary after a cast
#4905: FILE: drivers/net/sfc/bitfield.h:68:
+	 (((((u32) 1) << (width))) - 1))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#4944: FILE: drivers/net/sfc/bitfield.h:161:
+#define EFX_EXTRACT_DWORD(dword, low, high)			\
+	(EFX_EXTRACT32((dword).u32[0], 0, 31, low, high) &	\
+	 EFX_MASK32(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#4944: FILE: drivers/net/sfc/bitfield.h:161:
+#define EFX_EXTRACT_DWORD(dword, low, high)			\
+	(EFX_EXTRACT32((dword).u32[0], 0, 31, low, high) &	\
+	 EFX_MASK32(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#4951: FILE: drivers/net/sfc/bitfield.h:165:
+#define EFX_OWORD_FIELD64(oword, field)				\
+	EFX_EXTRACT_OWORD64(oword, EFX_LOW_BIT(field),		\
+			    EFX_HIGH_BIT(field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#4958: FILE: drivers/net/sfc/bitfield.h:169:
+#define EFX_QWORD_FIELD64(qword, field)				\
+	EFX_EXTRACT_QWORD64(qword, EFX_LOW_BIT(field),		\
+			    EFX_HIGH_BIT(field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#4965: FILE: drivers/net/sfc/bitfield.h:173:
+#define EFX_OWORD_FIELD32(oword, field)				\
+	EFX_EXTRACT_OWORD32(oword, EFX_LOW_BIT(field),		\
+			    EFX_HIGH_BIT(field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#4972: FILE: drivers/net/sfc/bitfield.h:177:
+#define EFX_QWORD_FIELD32(qword, field)				\
+	EFX_EXTRACT_QWORD32(qword, EFX_LOW_BIT(field),		\
+			    EFX_HIGH_BIT(field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#4979: FILE: drivers/net/sfc/bitfield.h:181:
+#define EFX_DWORD_FIELD(dword, field)				\
+	EFX_EXTRACT_DWORD(dword, EFX_LOW_BIT(field),		\
+			  EFX_HIGH_BIT(field))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oword' - possible side-effects?
#4997: FILE: drivers/net/sfc/bitfield.h:424:
+#define EFX_AND_OWORD(oword, from, mask)			\
+	do {							\
+		(oword).u64[0] = (from).u64[0] & (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] & (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#4997: FILE: drivers/net/sfc/bitfield.h:424:
+#define EFX_AND_OWORD(oword, from, mask)			\
+	do {							\
+		(oword).u64[0] = (from).u64[0] & (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] & (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#4997: FILE: drivers/net/sfc/bitfield.h:424:
+#define EFX_AND_OWORD(oword, from, mask)			\
+	do {							\
+		(oword).u64[0] = (from).u64[0] & (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] & (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oword' - possible side-effects?
#5003: FILE: drivers/net/sfc/bitfield.h:430:
+#define EFX_OR_OWORD(oword, from, mask)				\
+	do {							\
+		(oword).u64[0] = (from).u64[0] | (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] | (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'from' - possible side-effects?
#5003: FILE: drivers/net/sfc/bitfield.h:430:
+#define EFX_OR_OWORD(oword, from, mask)				\
+	do {							\
+		(oword).u64[0] = (from).u64[0] | (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] | (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#5003: FILE: drivers/net/sfc/bitfield.h:430:
+#define EFX_OR_OWORD(oword, from, mask)				\
+	do {							\
+		(oword).u64[0] = (from).u64[0] | (mask).u64[0];	\
+		(oword).u64[1] = (from).u64[1] | (mask).u64[1];	\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5021: FILE: drivers/net/sfc/bitfield.h:442:
+#define EFX_INPLACE_MASK64(min, max, low, high)				\
+	EFX_INSERT64(min, max, low, high, EFX_MASK64(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5021: FILE: drivers/net/sfc/bitfield.h:442:
+#define EFX_INPLACE_MASK64(min, max, low, high)				\
+	EFX_INSERT64(min, max, low, high, EFX_MASK64(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5025: FILE: drivers/net/sfc/bitfield.h:445:
+#define EFX_INPLACE_MASK32(min, max, low, high)				\
+	EFX_INSERT32(min, max, low, high, EFX_MASK32(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5025: FILE: drivers/net/sfc/bitfield.h:445:
+#define EFX_INPLACE_MASK32(min, max, low, high)				\
+	EFX_INSERT32(min, max, low, high, EFX_MASK32(high + 1 - low))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oword' - possible side-effects?
#5028: FILE: drivers/net/sfc/bitfield.h:448:
+#define EFX_SET_OWORD64(oword, low, high, value) do {			\
 	(oword).u64[0] = (((oword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0,  63, low, high))	\
+			  | EFX_INSERT64(0,  63, low, high, value));	\
 	(oword).u64[1] = (((oword).u64[1] 				\
+			   & ~EFX_INPLACE_MASK64(64, 127, low, high))	\
+			  | EFX_INSERT64(64, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5028: FILE: drivers/net/sfc/bitfield.h:448:
+#define EFX_SET_OWORD64(oword, low, high, value) do {			\
 	(oword).u64[0] = (((oword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0,  63, low, high))	\
+			  | EFX_INSERT64(0,  63, low, high, value));	\
 	(oword).u64[1] = (((oword).u64[1] 				\
+			   & ~EFX_INPLACE_MASK64(64, 127, low, high))	\
+			  | EFX_INSERT64(64, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5028: FILE: drivers/net/sfc/bitfield.h:448:
+#define EFX_SET_OWORD64(oword, low, high, value) do {			\
 	(oword).u64[0] = (((oword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0,  63, low, high))	\
+			  | EFX_INSERT64(0,  63, low, high, value));	\
 	(oword).u64[1] = (((oword).u64[1] 				\
+			   & ~EFX_INPLACE_MASK64(64, 127, low, high))	\
+			  | EFX_INSERT64(64, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#5028: FILE: drivers/net/sfc/bitfield.h:448:
+#define EFX_SET_OWORD64(oword, low, high, value) do {			\
 	(oword).u64[0] = (((oword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0,  63, low, high))	\
+			  | EFX_INSERT64(0,  63, low, high, value));	\
 	(oword).u64[1] = (((oword).u64[1] 				\
+			   & ~EFX_INPLACE_MASK64(64, 127, low, high))	\
+			  | EFX_INSERT64(64, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qword' - possible side-effects?
#5042: FILE: drivers/net/sfc/bitfield.h:457:
+#define EFX_SET_QWORD64(qword, low, high, value) do {			\
 	(qword).u64[0] = (((qword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0, 63, low, high))	\
+			  | EFX_INSERT64(0, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5042: FILE: drivers/net/sfc/bitfield.h:457:
+#define EFX_SET_QWORD64(qword, low, high, value) do {			\
 	(qword).u64[0] = (((qword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0, 63, low, high))	\
+			  | EFX_INSERT64(0, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5042: FILE: drivers/net/sfc/bitfield.h:457:
+#define EFX_SET_QWORD64(qword, low, high, value) do {			\
 	(qword).u64[0] = (((qword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0, 63, low, high))	\
+			  | EFX_INSERT64(0, 63, low, high, value));	\
 	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#5042: FILE: drivers/net/sfc/bitfield.h:457:
+#define EFX_SET_QWORD64(qword, low, high, value) do {			\
 	(qword).u64[0] = (((qword).u64[0] 				\
+			   & ~EFX_INPLACE_MASK64(0, 63, low, high))	\
+			  | EFX_INSERT64(0, 63, low, high, value));	\
 	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'oword' - possible side-effects?
#5051: FILE: drivers/net/sfc/bitfield.h:463:
+#define EFX_SET_OWORD32(oword, low, high, value) do {			\
 	(oword).u32[0] = (((oword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(oword).u32[1] = (((oword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	(oword).u32[2] = (((oword).u32[2] 				\
+			   & ~EFX_INPLACE_MASK32(64, 95, low, high))	\
+			  | EFX_INSERT32(64, 95, low, high, value));	\
 	(oword).u32[3] = (((oword).u32[3] 				\
+			   & ~EFX_INPLACE_MASK32(96, 127, low, high))	\
+			  | EFX_INSERT32(96, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5051: FILE: drivers/net/sfc/bitfield.h:463:
+#define EFX_SET_OWORD32(oword, low, high, value) do {			\
 	(oword).u32[0] = (((oword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(oword).u32[1] = (((oword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	(oword).u32[2] = (((oword).u32[2] 				\
+			   & ~EFX_INPLACE_MASK32(64, 95, low, high))	\
+			  | EFX_INSERT32(64, 95, low, high, value));	\
 	(oword).u32[3] = (((oword).u32[3] 				\
+			   & ~EFX_INPLACE_MASK32(96, 127, low, high))	\
+			  | EFX_INSERT32(96, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5051: FILE: drivers/net/sfc/bitfield.h:463:
+#define EFX_SET_OWORD32(oword, low, high, value) do {			\
 	(oword).u32[0] = (((oword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(oword).u32[1] = (((oword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	(oword).u32[2] = (((oword).u32[2] 				\
+			   & ~EFX_INPLACE_MASK32(64, 95, low, high))	\
+			  | EFX_INSERT32(64, 95, low, high, value));	\
 	(oword).u32[3] = (((oword).u32[3] 				\
+			   & ~EFX_INPLACE_MASK32(96, 127, low, high))	\
+			  | EFX_INSERT32(96, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#5051: FILE: drivers/net/sfc/bitfield.h:463:
+#define EFX_SET_OWORD32(oword, low, high, value) do {			\
 	(oword).u32[0] = (((oword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(oword).u32[1] = (((oword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	(oword).u32[2] = (((oword).u32[2] 				\
+			   & ~EFX_INPLACE_MASK32(64, 95, low, high))	\
+			  | EFX_INSERT32(64, 95, low, high, value));	\
 	(oword).u32[3] = (((oword).u32[3] 				\
+			   & ~EFX_INPLACE_MASK32(96, 127, low, high))	\
+			  | EFX_INSERT32(96, 127, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'qword' - possible side-effects?
#5075: FILE: drivers/net/sfc/bitfield.h:478:
+#define EFX_SET_QWORD32(qword, low, high, value) do {			\
 	(qword).u32[0] = (((qword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(qword).u32[1] = (((qword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5075: FILE: drivers/net/sfc/bitfield.h:478:
+#define EFX_SET_QWORD32(qword, low, high, value) do {			\
 	(qword).u32[0] = (((qword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(qword).u32[1] = (((qword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5075: FILE: drivers/net/sfc/bitfield.h:478:
+#define EFX_SET_QWORD32(qword, low, high, value) do {			\
 	(qword).u32[0] = (((qword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(qword).u32[1] = (((qword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'value' - possible side-effects?
#5075: FILE: drivers/net/sfc/bitfield.h:478:
+#define EFX_SET_QWORD32(qword, low, high, value) do {			\
 	(qword).u32[0] = (((qword).u32[0] 				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	(qword).u32[1] = (((qword).u32[1] 				\
+			   & ~EFX_INPLACE_MASK32(32, 63, low, high))	\
+			  | EFX_INSERT32(32, 63, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dword' - possible side-effects?
#5092: FILE: drivers/net/sfc/bitfield.h:487:
+#define EFX_SET_DWORD32(dword, low, high, value) do {			\
+	(dword).u32[0] = (((dword).u32[0]				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'low' - possible side-effects?
#5092: FILE: drivers/net/sfc/bitfield.h:487:
+#define EFX_SET_DWORD32(dword, low, high, value) do {			\
+	(dword).u32[0] = (((dword).u32[0]				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'high' - possible side-effects?
#5092: FILE: drivers/net/sfc/bitfield.h:487:
+#define EFX_SET_DWORD32(dword, low, high, value) do {			\
+	(dword).u32[0] = (((dword).u32[0]				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#5092: FILE: drivers/net/sfc/bitfield.h:487:
+#define EFX_SET_DWORD32(dword, low, high, value) do {			\
+	(dword).u32[0] = (((dword).u32[0]				\
+			   & ~EFX_INPLACE_MASK32(0, 31, low, high))	\
+			  | EFX_INSERT32(0, 31, low, high, value));	\
 	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#5098: FILE: drivers/net/sfc/bitfield.h:493:
+#define EFX_SET_OWORD_FIELD64(oword, field, value)			\
+	EFX_SET_OWORD64(oword, EFX_LOW_BIT(field),			\
+			 EFX_HIGH_BIT(field), value)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#5102: FILE: drivers/net/sfc/bitfield.h:497:
+#define EFX_SET_QWORD_FIELD64(qword, field, value)			\
+	EFX_SET_QWORD64(qword, EFX_LOW_BIT(field),			\
+			 EFX_HIGH_BIT(field), value)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#5106: FILE: drivers/net/sfc/bitfield.h:501:
+#define EFX_SET_OWORD_FIELD32(oword, field, value)			\
+	EFX_SET_OWORD32(oword, EFX_LOW_BIT(field),			\
+			 EFX_HIGH_BIT(field), value)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#5110: FILE: drivers/net/sfc/bitfield.h:505:
+#define EFX_SET_QWORD_FIELD32(qword, field, value)			\
+	EFX_SET_QWORD32(qword, EFX_LOW_BIT(field),			\
+			 EFX_HIGH_BIT(field), value)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#5114: FILE: drivers/net/sfc/bitfield.h:509:
+#define EFX_SET_DWORD_FIELD(dword, field, value)			\
+	EFX_SET_DWORD32(dword, EFX_LOW_BIT(field),			\
+			 EFX_HIGH_BIT(field), value)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5118: FILE: drivers/net/sfc/bitfield.h:513:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5127: FILE: drivers/net/sfc/bitfield.h:543:
 
+

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#5130: FILE: drivers/net/sfc/bitfield.h:546:
+	{ .u32 = { __constant_cpu_to_le32(a), __constant_cpu_to_le32(b), \

Use of __constant_<foo> form is discouraged for the following functions::

  __constant_cpu_to_be[x]
  __constant_cpu_to_le[x]
  __constant_be[x]_to_cpu
  __constant_le[x]_to_cpu
  __constant_htons
  __constant_ntohs

Using any of these outside of include/uapi/ is not preferred as using the
function without __constant_ is identical when the argument is a
constant.

In big endian systems, the macros like __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to the same expression::

  #define __constant_cpu_to_be32(x) ((__force __be32)(__u32)(x))
  #define __cpu_to_be32(x)          ((__force __be32)(__u32)(x))

In little endian systems, the macros __constant_cpu_to_be32(x) and
cpu_to_be32(x) expand to __constant_swab32 and __swab32.  __swab32
has a __builtin_constant_p check::

  #define __swab32(x)				\
    (__builtin_constant_p((__u32)(x)) ?	\
    ___constant_swab32(x) :			\
    __fswab32(x))

So ultimately they have a special case for constants.
Similar is the case with all of the macros in the list.  Thus
using the __constant_... forms are unnecessarily verbose and
not preferred outside of include/uapi.

See: https://lore.kernel.org/lkml/1400106425.12666.6.camel@joe-AO725/

WARNING:CONSTANT_CONVERSION: __constant_cpu_to_le32 should be cpu_to_le32
#5131: FILE: drivers/net/sfc/bitfield.h:547:
+		   __constant_cpu_to_le32(c), __constant_cpu_to_le32(d) } }

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5499: FILE: drivers/net/sfc/efx.c:811:
+ * interrupts across them. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5924: FILE: drivers/net/sfc/efx.c:1521:
+	BUG_ON(netdev_priv(efx->net_dev) != efx);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5935: FILE: drivers/net/sfc/efx.c:1542:
+ * before reset.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5943: FILE: drivers/net/sfc/efx.c:1550:
+	 * if a fetch is pending over reset. Serialise against it. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5973: FILE: drivers/net/sfc/efx.c:1569:
+ * engines are not restarted, pending a RESET_DISABLE. */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6207: FILE: drivers/net/sfc/efx.h:36:
+extern void efx_flush_queues(struct efx_nic *efx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6211: FILE: drivers/net/sfc/efx.h:40:
+extern void __efx_reconfigure_port(struct efx_nic *efx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6214: FILE: drivers/net/sfc/efx.h:43:
+extern void efx_reset_down(struct efx_nic *efx, struct ethtool_cmd *ecmd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6215: FILE: drivers/net/sfc/efx.h:44:
+extern int efx_reset_up(struct efx_nic *efx, struct ethtool_cmd *ecmd,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6225: FILE: drivers/net/sfc/efx.h:59:
+extern void efx_port_dummy_op_blink(struct efx_nic *efx, bool blink);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_mask' - possible side-effects?
#6254: FILE: drivers/net/sfc/enum.h:58:
+#define LOOPBACK_OUT_OF(_from, _to, _mask)				\
+	((LOOPBACK_MASK(_from) & (_mask)) && !(LOOPBACK_MASK(_to) & (_mask)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#6690: FILE: drivers/net/sfc/falcon.c:473:
+		int csum = tx_queue->queue == EFX_TX_QUEUE_OFFLOAD_CSUM;
+		EFX_SET_OWORD_FIELD(tx_desc_ptr, TX_IP_CHKSM_DIS_B0, !csum);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6860: FILE: drivers/net/sfc/falcon.c:853:
+	unsigned rx_ev_pkt_type;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "out"
#7208: FILE: drivers/net/sfc/falcon.c:1625:
+	bool reading = (out != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "in"
#7232: FILE: drivers/net/sfc/falcon.c:1645:
+	if (in != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "out"
#7262: FILE: drivers/net/sfc/falcon.c:1668:
+	if (out != NULL) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7284: FILE: drivers/net/sfc/falcon.c:1690:
+
+

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#7292: FILE: drivers/net/sfc/falcon.c:1698:
+		udelay(20);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7436: FILE: drivers/net/sfc/falcon.c:2226:
 
+

CHECK:SPACING: No space is necessary after a cast
#7479: FILE: drivers/net/sfc/falcon.c:2269:
+		limit = (__le16 *) (nvconfig + 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7503: FILE: drivers/net/sfc/falcon.c:2293:
+	unsigned address;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#7549: FILE: drivers/net/sfc/falcon.c:2339:
+	unsigned address = 0, i, j;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#7557: FILE: drivers/net/sfc/falcon.c:2347:
+		mask = imask = efx_test_registers[i].mask;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#7594: FILE: drivers/net/sfc/falcon.c:2384:
+	EFX_ERR(efx, "wrote "EFX_OWORD_FMT" read "EFX_OWORD_FMT

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#7595: FILE: drivers/net/sfc/falcon.c:2385:
+		" at address 0x%x mask "EFX_OWORD_FMT"\n", EFX_OWORD_VAL(reg),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7638: FILE: drivers/net/sfc/falcon.c:2558:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#7716: FILE: drivers/net/sfc/falcon.c:2598:
+			__le32 ee = v3->spi_device_type[EE_SPI_EEPROM];
+			rc = falcon_spi_device_init(efx, &efx->spi_flash,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7900: FILE: drivers/net/sfc/falcon.h:43:
+extern void falcon_init_tx(struct efx_tx_queue *tx_queue);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7908: FILE: drivers/net/sfc/falcon.h:50:
+extern void falcon_init_rx(struct efx_rx_queue *rx_queue);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7916: FILE: drivers/net/sfc/falcon.h:57:
+extern void falcon_init_eventq(struct efx_channel *channel);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7920: FILE: drivers/net/sfc/falcon.h:60:
+extern int falcon_process_eventq(struct efx_channel *channel, int rx_quota);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7929: FILE: drivers/net/sfc/falcon.h:68:
+extern bool falcon_xaui_link_ok(struct efx_nic *efx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7939: FILE: drivers/net/sfc/falcon.h:98:
+extern int falcon_read_nvram(struct efx_nic *efx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7941: FILE: drivers/net/sfc/falcon.h:100:
+extern int falcon_test_registers(struct efx_nic *efx);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'field' - possible side-effects?
#8134: FILE: drivers/net/sfc/falcon_hwdefs.h:1150:
+#define SPI_DEV_TYPE_FIELD(type, field)					\
+	(((type) >> EFX_LOW_BIT(field)) & EFX_MASK32(EFX_WIDTH(field)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#8860: FILE: drivers/net/sfc/mdio_10g.h:234:
+extern bool mdio_clause45_links_ok(struct efx_nic *efx,

WARNING:SPACING: Unnecessary space before function pointer arguments
#9001: FILE: drivers/net/sfc/net_driver.h:427:
+	void (*set_fault_led) (struct efx_nic *efx, bool state);

WARNING:SPACING: Unnecessary space before function pointer arguments
#9002: FILE: drivers/net/sfc/net_driver.h:428:
+	void (*blink) (struct efx_nic *efx, bool start);

WARNING:SPACING: Unnecessary space before function pointer arguments
#9020: FILE: drivers/net/sfc/net_driver.h:517:
+	int (*test) (struct efx_nic *efx);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9224: FILE: drivers/net/sfc/net_driver.h:893:
+static inline void set_bit_le(unsigned nr, unsigned char *addr)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9231: FILE: drivers/net/sfc/net_driver.h:899:
+static inline void clear_bit_le(unsigned nr, unsigned char *addr)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#9252: FILE: drivers/net/sfc/phy.h:18:
+extern void tenxpress_phy_blink(struct efx_nic *efx, bool blink);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid1 == 0x0000'
#9551: FILE: drivers/net/sfc/selftest.c:100:
+	if ((physid1 == 0x0000) || (physid1 == 0xffff) ||
+	    (physid2 == 0x0000) || (physid2 == 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid1 == 0xffff'
#9551: FILE: drivers/net/sfc/selftest.c:100:
+	if ((physid1 == 0x0000) || (physid1 == 0xffff) ||
+	    (physid2 == 0x0000) || (physid2 == 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid2 == 0x0000'
#9551: FILE: drivers/net/sfc/selftest.c:100:
+	if ((physid1 == 0x0000) || (physid1 == 0xffff) ||
+	    (physid2 == 0x0000) || (physid2 == 0xffff)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'physid2 == 0xffff'
#9551: FILE: drivers/net/sfc/selftest.c:100:
+	if ((physid1 == 0x0000) || (physid1 == 0xffff) ||
+	    (physid2 == 0x0000) || (physid2 == 0xffff)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#9759: FILE: drivers/net/sfc/selftest.c:449:
+	 * synchronously */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#9813: FILE: drivers/net/sfc/selftest.c:541:
+		 * prepared to wait up to 100 ms. */

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#9814: FILE: drivers/net/sfc/selftest.c:542:
+		msleep(1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#9881: FILE: drivers/net/sfc/selftest.c:578:
+	 * "flushing" so all inflight packets are dropped */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!state"
#9883: FILE: drivers/net/sfc/selftest.c:580:
+	if (state == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9885: FILE: drivers/net/sfc/selftest.c:582:
+	BUG_ON(efx->loopback_selftest);

WARNING:MEMORY_BARRIER: memory barrier without comment
#9933: FILE: drivers/net/sfc/selftest.c:647:
+	wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#10013: FILE: drivers/net/sfc/selftest.c:719:
+	 * state, AN is disabled, and the phy is powered, and out of loopback */

WARNING:TYPO_SPELLING: 'AFE' may be misspelled - perhaps 'SAFE'?
#10266: FILE: drivers/net/sfc/sfe4001.c:197:
+		/* In flash config mode, DSP does not turn on AFE, so
 		                                              ^^^

WARNING:TYPO_SPELLING: 'AFE' may be misspelled - perhaps 'SAFE'?
#10277: FILE: drivers/net/sfc/sfe4001.c:208:
+			/* Check DSP has asserted AFE power line */
 			                          ^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#10313: FILE: drivers/net/sfc/sfe4001.c:233:
+	struct efx_nic *efx = pci_get_drvdata(to_pci_dev(dev));
+	return sprintf(buf, "%d\n", !!(efx->phy_mode & PHY_MODE_SPECIAL));

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'show_phy_flash_cfg' to 'phy_flash_cfg_show' 'set_phy_flash_cfg' to 'phy_flash_cfg_store'
#10345: FILE: drivers/net/sfc/sfe4001.c:262:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:TRACING_LOGGING: Unnecessary ftrace-like logging - prefer using ftrace
#10351: FILE: drivers/net/sfc/sfe4001.c:268:
+	EFX_INFO(efx, "%s\n", __func__);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#10396: FILE: drivers/net/sfc/sfe4001.c:313:
+	 * blink code. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#10999: FILE: drivers/net/sfc/tx.c:560:
+	unsigned out_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11001: FILE: drivers/net/sfc/tx.c:562:
+	unsigned ipv4_id;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11028: FILE: drivers/net/sfc/tx.c:567:
+	unsigned in_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11029: FILE: drivers/net/sfc/tx.c:568:
+	unsigned unmap_len;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11033: FILE: drivers/net/sfc/tx.c:572:
+	unsigned header_len;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#11053: FILE: drivers/net/sfc/tx.c:589:
+		 * and transport header based on that. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#11055: FILE: drivers/net/sfc/tx.c:591:
+		struct vlan_ethhdr *veh = (struct vlan_ethhdr *)skb->data;
+		protocol = veh->h_vlan_encapsulated_proto;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#11127: FILE: drivers/net/sfc/tx.c:789:
+			       struct efx_tso_header *tsoh, unsigned len)

ERROR:SPACING: space prohibited after that open parenthesis '('
#11579: FILE: drivers/net/sky2.c:3739:
+	while ( (sky2_pci_read16(hw, cap + PCI_VPD_ADDR) & PCI_VPD_ADDR_F) == busy) {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#11581: FILE: drivers/net/sky2.c:3741:
+		if (time_after(jiffies, start + HZ/4)) {
 		                                  ^

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#11712: FILE: drivers/net/sky2.c:4195:
+/*
+ * Read and parse the first part of Vital Product Data

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#11717: FILE: drivers/net/sky2.c:4200:
+static void __devinit sky2_vpd_info(struct sky2_hw *hw)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#11763: FILE: drivers/net/sky2.c:4246:
+				printk(KERN_DEBUG " %s: %.*s\n",

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 55 errors, 118 warnings, 157 checks, 10874 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000232180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
