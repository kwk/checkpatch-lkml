CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct proc_mounts)...)
#242: FILE: fs/proc/base.c:542:
+	p = kmalloc(sizeof(struct proc_mounts), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: fs/proc/base.c:571:
+	struct proc_mounts *p = file->private_data;
+	path_put(&p->root);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#299: FILE: fs/seq_file.c:399:
+	int err = -ENAMETOOLONG;
+	if (m->count < m->size) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: include/linux/dcache.h:305:
+extern char *__d_path(struct path *path, struct path *root, char *, int, bool);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#331: FILE: include/linux/dcache.h:305:
+extern char *__d_path(struct path *path, struct path *root, char *, int, bool);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#331: FILE: include/linux/dcache.h:305:
+extern char *__d_path(struct path *path, struct path *root, char *, int, bool);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'bool' should also have an identifier name
#331: FILE: include/linux/dcache.h:305:
+extern char *__d_path(struct path *path, struct path *root, char *, int, bool);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/pnode.c:98:
+static bool is_path_reachable(struct vfsmount *mnt, struct dentry *dentry,
+			 const struct path *root)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vfsmount *' should also have an identifier name
#439: FILE: fs/pnode.h:37:
+int get_dominator_id_same_root(struct vfsmount *, const struct path *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct path *' should also have an identifier name
#439: FILE: fs/pnode.h:37:
+int get_dominator_id_same_root(struct vfsmount *, const struct path *);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000307637.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 3 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000307637.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
