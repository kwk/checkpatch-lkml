WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'currectly' may be misspelled - perhaps 'correctly'?
#75: FILE: Documentation/filesystems/fsnotify.txt:19:
+The mark->refcnt tells how many "things" in the kernel currectly are
                                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#79: FILE: Documentation/filesystems/fsnotify.txt:23:
+and the object itself is guarenteed to survive until the reference is dropped.
                          ^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: fs/notify/fsnotify.h:18:
+extern void fsnotify_clear_marks_by_group(struct fsnotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#333: FILE: fs/notify/fsnotify.h:19:
+extern void fsnotify_clear_marks_by_inode(struct inode *inode);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#390: FILE: fs/notify/inode_mark.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#405: FILE: fs/notify/inode_mark.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#416: FILE: fs/notify/inode_mark.c:27:
+#include <asm/atomic.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#474: FILE: fs/notify/inode_mark.c:85:
+	BUG_ON(group && !inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#475: FILE: fs/notify/inode_mark.c:86:
+	BUG_ON(!group && inode);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#485: FILE: fs/notify/inode_mark.c:96:
+		BUG();

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#546: FILE: fs/notify/inode_mark.c:157:
+struct fsnotify_mark_entry *fsnotify_find_mark_entry(struct fsnotify_group *group, struct inode *inode)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#562: FILE: fs/notify/inode_mark.c:173:
+void fsnotify_init_mark(struct fsnotify_mark_entry *entry, void (*free_mark)(struct fsnotify_mark_entry *entry))

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#574: FILE: fs/notify/inode_mark.c:185:
+int fsnotify_add_mark(struct fsnotify_mark_entry *entry, struct fsnotify_group *group, struct inode *inode)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#722: FILE: include/linux/fsnotify_backend.h:136:
+	 * in kernel that found and may be using this mark. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/fsnotify_backend.h:152:
+extern void __fsnotify_inode_delete(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#742: FILE: include/linux/fsnotify_backend.h:156:
+extern void fsnotify_recalc_group_mask(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#751: FILE: include/linux/fsnotify_backend.h:166:
+extern void fsnotify_recalc_inode_mask(struct inode *inode);

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#752: FILE: include/linux/fsnotify_backend.h:167:
+extern void fsnotify_init_mark(struct fsnotify_mark_entry *entry, void (*free_mark)(struct fsnotify_mark_entry *entry));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#752: FILE: include/linux/fsnotify_backend.h:167:
+extern void fsnotify_init_mark(struct fsnotify_mark_entry *entry, void (*free_mark)(struct fsnotify_mark_entry *entry));

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#753: FILE: include/linux/fsnotify_backend.h:168:
+extern struct fsnotify_mark_entry *fsnotify_find_mark_entry(struct fsnotify_group *group, struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#753: FILE: include/linux/fsnotify_backend.h:168:
+extern struct fsnotify_mark_entry *fsnotify_find_mark_entry(struct fsnotify_group *group, struct inode *inode);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#754: FILE: include/linux/fsnotify_backend.h:169:
+extern int fsnotify_add_mark(struct fsnotify_mark_entry *entry, struct fsnotify_group *group, struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#754: FILE: include/linux/fsnotify_backend.h:169:
+extern int fsnotify_add_mark(struct fsnotify_mark_entry *entry, struct fsnotify_group *group, struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#755: FILE: include/linux/fsnotify_backend.h:170:
+extern void fsnotify_destroy_mark_by_entry(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#756: FILE: include/linux/fsnotify_backend.h:171:
+extern void fsnotify_get_mark(struct fsnotify_mark_entry *entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/linux/fsnotify_backend.h:172:
+extern void fsnotify_put_mark(struct fsnotify_mark_entry *entry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 15 warnings, 11 checks, 658 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152473.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
