WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters-fixes-for-linus

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#124: FILE: arch/x86/kernel/cpu/perf_counter.c:76:
+  [PERF_COUNT_HW_CACHE_REFERENCES]^I= 0x0f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#125: FILE: arch/x86/kernel/cpu/perf_counter.c:77:
+  [PERF_COUNT_HW_CACHE_MISSES]^I^I= 0x012e,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#287: FILE: include/linux/perf_counter.h:134:
+ * ^I{ u64^I^Ivalue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: include/linux/perf_counter.h:135:
+ * ^I  { u64^I^Itime_enabled; } && PERF_FORMAT_ENABLED$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#289: FILE: include/linux/perf_counter.h:136:
+ * ^I  { u64^I^Itime_running; } && PERF_FORMAT_RUNNING$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#290: FILE: include/linux/perf_counter.h:137:
+ * ^I  { u64^I^Iid;           } && PERF_FORMAT_ID$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#291: FILE: include/linux/perf_counter.h:138:
+ * ^I} && !PERF_FORMAT_GROUP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: include/linux/perf_counter.h:140:
+ * ^I{ u64^I^Inr;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: include/linux/perf_counter.h:141:
+ * ^I  { u64^I^Itime_enabled; } && PERF_FORMAT_ENABLED$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#295: FILE: include/linux/perf_counter.h:142:
+ * ^I  { u64^I^Itime_running; } && PERF_FORMAT_RUNNING$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#296: FILE: include/linux/perf_counter.h:143:
+ * ^I  { u64^I^Ivalue;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#297: FILE: include/linux/perf_counter.h:144:
+ * ^I    { u64^Iid;           } && PERF_FORMAT_ID$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#298: FILE: include/linux/perf_counter.h:145:
+ * ^I  }^I^Icntr[nr];$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#299: FILE: include/linux/perf_counter.h:146:
+ * ^I} && PERF_FORMAT_GROUP$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#309: FILE: include/linux/perf_counter.h:155:
+^IPERF_FORMAT_MAX = 1U << 4, ^I^I/* non-ABI */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#322: FILE: include/linux/perf_counter.h:363:
+^I * ^Istruct read_format^I^Ivalues;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#337: FILE: include/linux/perf_counter.h:386:
+^I * ^I#$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#338: FILE: include/linux/perf_counter.h:387:
+^I * ^I# The RAW record below is opaque data wrt the ABI$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#339: FILE: include/linux/perf_counter.h:388:
+^I * ^I#$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#340: FILE: include/linux/perf_counter.h:389:
+^I * ^I# That is, the ABI doesn't make any promises wrt to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#341: FILE: include/linux/perf_counter.h:390:
+^I * ^I# the stability of its content, it may vary depending$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#342: FILE: include/linux/perf_counter.h:391:
+^I * ^I# on event, hardware, kernel version and phase of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#343: FILE: include/linux/perf_counter.h:392:
+^I * ^I# the moon.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#344: FILE: include/linux/perf_counter.h:393:
+^I * ^I#$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#345: FILE: include/linux/perf_counter.h:394:
+^I * ^I# In other words, PERF_SAMPLE_RAW contents are not an ABI.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#346: FILE: include/linux/perf_counter.h:395:
+^I * ^I#$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#355: FILE: include/linux/perf_counter.h:722:
+extern void perf_counter_output(struct perf_counter *counter, int nmi,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#469: FILE: kernel/perf_counter.c:1784:
+		err = perf_counter_read_entry(counter, read_format,
+				buf + size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: kernel/perf_counter.c:2761:
+static void perf_output_read_group(struct perf_output_handle *handle,
+			    struct perf_counter *counter)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#641: FILE: kernel/perf_counter.c:2809:
+void perf_counter_output(struct perf_counter *counter, int nmi,
 				struct perf_sample_data *data)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#922: FILE: tools/perf/builtin-record.c:37:
+static int			raw_samples			= 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fd"
#953: FILE: tools/perf/builtin-record.c:222:
+	if (fd == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fgets"
#981: FILE: tools/perf/builtin-record.c:233:
+		if (fgets(bf, sizeof(bf), fp) == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#986: FILE: tools/perf/builtin-record.c:238:
+			char *name = bf + 5;
+			while (*name && isspace(*name))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#992: FILE: tools/perf/builtin-record.c:244:
+			char *tgids = bf + 5;
+			while (*tgids && isspace(*tgids))

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#994: FILE: tools/perf/builtin-record.c:246:
+			tgid = comm_ev.pid = atoi(tgids);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1109: FILE: tools/perf/builtin-record.c:588:
+		pid_t tgid = pid_synthesize_comm_event(pid, 0);
+		pid_synthesize_mmap_samples(pid, tgid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1124: FILE: tools/perf/builtin-record.c:663:
+	OPT_INTEGER('C', "profile_cpu", &profile_cpu,
+			    "CPU to profile on"),

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#1137: FILE: tools/perf/builtin-report.c:1529:
+	dprintf("%p [%p]: PERF_EVENT_SAMPLE (IP, %d): %d/%d: %p period: %Ld\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "strstr"
#1233: FILE: tools/perf/util/symbol.c:804:
+	if (ret < 0 && strstr(self->name, " (deleted)") != NULL)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1247: FILE: tools/perf/util/symbol.h:11:
+extern char *cplus_demangle(const char *, int);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1266: FILE: tools/perf/util/symbol.h:30:
+#define DMGL_PARAMS      (1 << 0)       /* Include function args */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1267: FILE: tools/perf/util/symbol.h:31:
+#define DMGL_ANSI        (1 << 1)       /* Include const, volatile, etc */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 31 warnings, 12 checks, 1084 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000084897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
