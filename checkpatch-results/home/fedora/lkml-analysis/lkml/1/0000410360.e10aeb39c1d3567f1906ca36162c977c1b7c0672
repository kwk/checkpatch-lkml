WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
This patch enables the receive side processing to aggregate TCP packets within

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#86: FILE: drivers/net/ehea/ehea.h:360:
+^Iu16 tcp_saw_tstamp; ^I^I/* timestamps enabled */$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#132: FILE: drivers/net/ehea/ehea_main.c:56:
+static int use_lro = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPLIT_STRING: quoted string split across lines
#153: FILE: drivers/net/ehea/ehea_main.c:88:
+MODULE_PARM_DESC(use_lro, " Large Receive Offload, 1: enable, 0: disable, "
+		 "Default = 0");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'iph' - possible side-effects?
#198: FILE: drivers/net/ehea/ehea_main.c:429:
+#define TCP_PAYLOAD_LENGTH(iph, tcph) \
+(ntohs(iph->tot_len) - (iph->ihl << 2) - (tcph->doff << 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'iph' may be better as '(iph)' to avoid precedence issues
#198: FILE: drivers/net/ehea/ehea_main.c:429:
+#define TCP_PAYLOAD_LENGTH(iph, tcph) \
+(ntohs(iph->tot_len) - (iph->ihl << 2) - (tcph->doff << 2))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tcph' may be better as '(tcph)' to avoid precedence issues
#198: FILE: drivers/net/ehea/ehea_main.c:429:
+#define TCP_PAYLOAD_LENGTH(iph, tcph) \
+(ntohs(iph->tot_len) - (iph->ihl << 2) - (tcph->doff << 2))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#215: FILE: drivers/net/ehea/ehea_main.c:446:
+	if (tcph->cwr || tcph->ece || tcph->urg || !tcph->ack || tcph->psh
+	    || tcph->rst || tcph->syn || tcph->fin)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#222: FILE: drivers/net/ehea/ehea_main.c:453:
+	if (tcph->doff != TCPH_LEN_WO_OPTIONS
+	    && tcph->doff != TCPH_LEN_W_TIMESTAMP)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#258: FILE: drivers/net/ehea/ehea_main.c:489:
+		*(p+2) = lro->tcp_rcv_tsecr;
 		   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#282: FILE: drivers/net/ehea/ehea_main.c:513:
+		ptr = (u32 *)(tcph+1);
 		                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#284: FILE: drivers/net/ehea/ehea_main.c:515:
+		lro->tcp_rcv_tsval = *(ptr+1);
 		                          ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#285: FILE: drivers/net/ehea/ehea_main.c:516:
+		lro->tcp_rcv_tsecr = *(ptr+2);
 		                          ^

CHECK:SPACING: No space is necessary after a cast
#315: FILE: drivers/net/ehea/ehea_main.c:546:
+		topt = (u32 *) (tcph + 1);

WARNING:RETURN_VOID: void function return statements are not generally useful
#334: FILE: drivers/net/ehea/ehea_main.c:565:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#337: FILE: drivers/net/ehea/ehea_main.c:568:
+static int check_tcp_conn(struct ehea_lro *lro, struct iphdr *iph,
+			 struct tcphdr *tcph)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro->iph->saddr != iph->saddr'
#339: FILE: drivers/net/ehea/ehea_main.c:570:
+	if ((lro->iph->saddr != iph->saddr) || (lro->iph->daddr != iph->daddr) ||
+	    (lro->tcph->source != tcph->source) || (lro->tcph->dest != tcph->dest))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro->iph->daddr != iph->daddr'
#339: FILE: drivers/net/ehea/ehea_main.c:570:
+	if ((lro->iph->saddr != iph->saddr) || (lro->iph->daddr != iph->daddr) ||
+	    (lro->tcph->source != tcph->source) || (lro->tcph->dest != tcph->dest))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro->tcph->source != tcph->source'
#339: FILE: drivers/net/ehea/ehea_main.c:570:
+	if ((lro->iph->saddr != iph->saddr) || (lro->iph->daddr != iph->daddr) ||
+	    (lro->tcph->source != tcph->source) || (lro->tcph->dest != tcph->dest))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lro->tcph->dest != tcph->dest'
#339: FILE: drivers/net/ehea/ehea_main.c:570:
+	if ((lro->iph->saddr != iph->saddr) || (lro->iph->daddr != iph->daddr) ||
+	    (lro->tcph->source != tcph->source) || (lro->tcph->dest != tcph->dest))

ERROR:SPACING: space required before the open parenthesis '('
#387: FILE: drivers/net/ehea/ehea_main.c:618:
+		if(!pr->lro[i].active) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#398: FILE: drivers/net/ehea/ehea_main.c:629:
+static void ehea_proc_skb(struct ehea_port_res *pr, struct ehea_cqe *cqe,
+		     struct sk_buff *skb)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 4 warnings, 16 checks, 453 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000410360.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
