WARNING:TYPO_SPELLING: 'previsouly' may be misspelled - perhaps 'previously'?
#173: FILE: Documentation/auto_tune.txt:117:
+- tunable_addr: address of the tunable structure previsouly declared.
                                                  ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#408: FILE: include/linux/akt.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#430: FILE: include/linux/akt.h:23:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#431: FILE: include/linux/akt.h:24:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: include/linux/akt.h:33:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#448: FILE: include/linux/akt.h:41:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#456: FILE: include/linux/akt.h:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#465: FILE: include/linux/akt.h:58:
+
+

WARNING:TYPO_SPELLING: 'stucture' may be misspelled - perhaps 'structure'?
#484: FILE: include/linux/akt.h:77:
+	spinlock_t tunable_lck; /* serializes access to the stucture fields */
 	                                                    ^^^^^^^^

WARNING:TYPO_SPELLING: 'susbsystem' may be misspelled - perhaps 'subsystem'?
#486: FILE: include/linux/akt.h:79:
+				/* calling kernel susbsystem. If NULL, the */
 				                  ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#508: FILE: include/linux/akt.h:101:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#514: FILE: include/linux/akt.h:107:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#523: FILE: include/linux/akt.h:116:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: include/linux/akt.h:119:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: include/linux/akt.h:138:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#549: FILE: include/linux/akt.h:142:
+#define set_tunable_min_max(s, _min, _max)	\
+	do {					\
+		(s).min.value = _min;		\
+		(s).max.value = _max;		\
+	} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#555: FILE: include/linux/akt.h:148:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#556: FILE: include/linux/akt.h:149:
+extern int register_tunable(struct auto_tune *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#557: FILE: include/linux/akt.h:150:
+extern int unregister_tunable(struct auto_tune *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct auto_tune *' should also have an identifier name
#557: FILE: include/linux/akt.h:150:
+extern int unregister_tunable(struct auto_tune *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#559: FILE: include/linux/akt.h:152:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#562: FILE: include/linux/akt.h:155:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#571: FILE: include/linux/akt.h:164:
+extern void fork_late_init(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#579: FILE: include/linux/akt_ops.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#601: FILE: include/linux/akt_ops.h:23:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#602: FILE: include/linux/akt_ops.h:24:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#608: FILE: include/linux/akt_ops.h:30:
+
+

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'direction' may be better as '(direction)' to avoid precedence issues
#644: FILE: include/linux/akt_ops.h:66:
+#define __default_auto_tuning(direction, p, type)			\
+( {									\
+	int __rc;							\
+	ulong _chk = (ulong) *((type *) p->checked);			\
+	ulong _tun = (ulong) *((type *) p->tunable);			\
+	ulong _thr = p->threshold;					\
+	ulong _min = p->min.value;					\
+	ulong _max = p->max.value;					\
+									\
+	if (direction == AKT_UP) {					\
+		if ((_chk >= (_tun * _thr) / 100) && (_tun < _max)) {	\
+			ulong ___x = (_tun * (200 - _thr)) / 100;	\
+			*((type *) p->tunable) = min((type) _max,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	} else {							\
+		if ((_chk < (_tun * _thr) / (200 - _thr)) && (_tun>_min)) { \
+			ulong ___x = (_tun * 100) / (200 - _thr);	\
+			*((type *) p->tunable) = max((type) _min,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	}								\
+	__rc;								\
+} )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#644: FILE: include/linux/akt_ops.h:66:
+#define __default_auto_tuning(direction, p, type)			\
+( {									\
+	int __rc;							\
+	ulong _chk = (ulong) *((type *) p->checked);			\
+	ulong _tun = (ulong) *((type *) p->tunable);			\
+	ulong _thr = p->threshold;					\
+	ulong _min = p->min.value;					\
+	ulong _max = p->max.value;					\
+									\
+	if (direction == AKT_UP) {					\
+		if ((_chk >= (_tun * _thr) / 100) && (_tun < _max)) {	\
+			ulong ___x = (_tun * (200 - _thr)) / 100;	\
+			*((type *) p->tunable) = min((type) _max,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	} else {							\
+		if ((_chk < (_tun * _thr) / (200 - _thr)) && (_tun>_min)) { \
+			ulong ___x = (_tun * 100) / (200 - _thr);	\
+			*((type *) p->tunable) = max((type) _min,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	}								\
+	__rc;								\
+} )

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#644: FILE: include/linux/akt_ops.h:66:
+#define __default_auto_tuning(direction, p, type)			\
+( {									\
+	int __rc;							\
+	ulong _chk = (ulong) *((type *) p->checked);			\
+	ulong _tun = (ulong) *((type *) p->tunable);			\
+	ulong _thr = p->threshold;					\
+	ulong _min = p->min.value;					\
+	ulong _max = p->max.value;					\
+									\
+	if (direction == AKT_UP) {					\
+		if ((_chk >= (_tun * _thr) / 100) && (_tun < _max)) {	\
+			ulong ___x = (_tun * (200 - _thr)) / 100;	\
+			*((type *) p->tunable) = min((type) _max,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	} else {							\
+		if ((_chk < (_tun * _thr) / (200 - _thr)) && (_tun>_min)) { \
+			ulong ___x = (_tun * 100) / (200 - _thr);	\
+			*((type *) p->tunable) = max((type) _min,	\
+							(type) ___x);	\
+			__rc = 1;					\
+		} else							\
+			__rc = 0;					\
+	}								\
+	__rc;								\
+} )

ERROR:SPACING: space prohibited after that open parenthesis '('
#645: FILE: include/linux/akt_ops.h:67:
+( {									\

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#647: FILE: include/linux/akt_ops.h:69:
+	ulong _chk = (ulong) *((type *) p->checked);			\

CHECK:SPACING: No space is necessary after a cast
#648: FILE: include/linux/akt_ops.h:70:
+	ulong _tun = (ulong) *((type *) p->tunable);			\

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_tun < _max'
#654: FILE: include/linux/akt_ops.h:76:
+		if ((_chk >= (_tun * _thr) / 100) && (_tun < _max)) {	\

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#656: FILE: include/linux/akt_ops.h:78:
+			*((type *) p->tunable) = min((type) _max,	\

CHECK:SPACING: No space is necessary after a cast
#657: FILE: include/linux/akt_ops.h:79:
+							(type) ___x);	\

ERROR:SPACING: spaces required around that '>' (ctx:VxV)
#662: FILE: include/linux/akt_ops.h:84:
+		if ((_chk < (_tun * _thr) / (200 - _thr)) && (_tun>_min)) { \
 		                                                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around '_tun>_min'
#662: FILE: include/linux/akt_ops.h:84:
+		if ((_chk < (_tun * _thr) / (200 - _thr)) && (_tun>_min)) { \

CHECK:SPACING: No space is necessary after a cast
#664: FILE: include/linux/akt_ops.h:86:
+			*((type *) p->tunable) = max((type) _min,	\

CHECK:SPACING: No space is necessary after a cast
#665: FILE: include/linux/akt_ops.h:87:
+							(type) ___x);	\

ERROR:SPACING: space prohibited before that close parenthesis ')'
#671: FILE: include/linux/akt_ops.h:93:
+} )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#683: FILE: include/linux/akt_ops.h:105:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#769: FILE: kernel/autotune/akt.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#770: FILE: kernel/autotune/akt.c:2:
+ * linux/kernel/autotune/akt.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#789: FILE: kernel/autotune/akt.c:21:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#790: FILE: kernel/autotune/akt.c:22:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#804: FILE: kernel/autotune/akt.c:36:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun"
#821: FILE: kernel/autotune/akt.c:53:
+	if (tun == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#822: FILE: kernel/autotune/akt.c:54:
+		printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#828: FILE: kernel/autotune/akt.c:60:
+		printk(KERN_ERR "AKT: Bad threshold (%d) value - should be in"

WARNING:SPLIT_STRING: quoted string split across lines
#829: FILE: kernel/autotune/akt.c:61:
+		printk(KERN_ERR "AKT: Bad threshold (%d) value - should be in"
+			" the [1-99] interval\n", tun->threshold);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun->tunable"
#833: FILE: kernel/autotune/akt.c:65:
+	if (tun->tunable == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#834: FILE: kernel/autotune/akt.c:66:
+		printk(KERN_ERR "AKT: Bad tunable pointer (NULL)\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tun->checked"
#838: FILE: kernel/autotune/akt.c:70:
+	if (tun->checked == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#839: FILE: kernel/autotune/akt.c:71:
+		printk(KERN_ERR "AKT: Bad checked value pointer (NULL)\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#847: FILE: kernel/autotune/akt.c:79:
+		printk(KERN_ERR "AKT: Bad min / max values\n");

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#854: FILE: kernel/autotune/akt.c:86:
+EXPORT_SYMBOL_GPL(register_tunable);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#856: FILE: kernel/autotune/akt.c:88:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!reg_tun"
#871: FILE: kernel/autotune/akt.c:103:
+	if (reg_tun == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#872: FILE: kernel/autotune/akt.c:104:
+		printk(KERN_ERR "AKT: Bad tunable address (NULL)\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#878: FILE: kernel/autotune/akt.c:110:
+	BUG_ON(!is_tunable_registered(reg_tun));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#887: FILE: kernel/autotune/akt.c:119:
+EXPORT_SYMBOL_GPL(unregister_tunable);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#922: FILE: kernel/fork.c:75:
+DEFINE_TUNABLE(max_threads_akt, THREADTHRESH, 0, 0, &max_threads,
+		&nr_threads, int);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#942: FILE: kernel/fork.c:175:
+		printk(KERN_WARNING

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 19 warnings, 36 checks, 839 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000473235.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
