ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#83: FILE: init/main.c:709:
sequence */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#106: FILE: drivers/base/dd.c:225:
+static inline int real_device_attach(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#112: FILE: drivers/base/dd.c:231:
+		if (ret == 0)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#114: FILE: drivers/base/dd.c:233:
+		else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: drivers/base/dd.c:239:
+		ret = bus_for_each_drv(dev->bus, NULL, dev,
+	}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around devices_subsys.list
#172: FILE: drivers/base/dd.c:405:
+	list_for_each_entry(kobj, &(devices_subsys.list), entry) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: braces {} should be used on all arms of this statement
#176: FILE: drivers/base/dd.c:409:
+		if (dev->class || !dev->parent) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#179: FILE: drivers/base/dd.c:412:
+		} else

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#191: FILE: drivers/base/dd.c:424:
+struct find_device_data
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#202: FILE: drivers/base/dd.c:435:
+	if (dev->is_checking)
[...]
+	else if (dev->is_matched || dev->is_checked) {
[...]
+	} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: drivers/base/dd.c:441:
+			device_for_each_child(dev, data,
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: drivers/base/dd.c:441:
+			device_for_each_child(dev, data,
find_next_device_to_check_in_tree);

CHECK:BRACES: braces {} should be used on all arms of this statement
#214: FILE: drivers/base/dd.c:446:
+		if (!depend || depend->is_matched || depend->is_checked)
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#218: FILE: drivers/base/dd.c:449:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around devices_subsys.list
#238: FILE: drivers/base/dd.c:469:
+	list_for_each_entry(kobj, &(devices_subsys.list), entry) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: drivers/base/dd.c:493:
+	printk("dev: %s - begin\n", dev->bus_id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#265: FILE: drivers/base/dd.c:496:
+	printk("dev: %s - end\n", dev->bus_id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#282: FILE: drivers/base/dd.c:513:
+		if (result == FIND_DEVICE_FOUND) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#286: FILE: drivers/base/dd.c:516:
+		} else

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#287: FILE: drivers/base/dd.c:517:
+			yield();

WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#315: FILE: drivers/base/dd.c:543:
+ *	is reenabled afterwards.
   	   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#325: FILE: drivers/base/dd.c:553:
+		thread = dev_match_thread_default > 0 ? \

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*threads_complete)...) over kmalloc(sizeof(struct completion)...)
#327: FILE: drivers/base/dd.c:555:
+	threads_complete = kmalloc(sizeof(struct completion) * thread,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#327: FILE: drivers/base/dd.c:555:
+	threads_complete = kmalloc(sizeof(struct completion) * thread,
+				   GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#348: FILE: drivers/base/dd.c:576:
+__setup("dev_match_thread=", dev_match_thread);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#350: FILE: drivers/base/dd.c:578:
+EXPORT_SYMBOL_GPL(device_match_freeze);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#351: FILE: drivers/base/dd.c:579:
+EXPORT_SYMBOL_GPL(device_match_thaw);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#380: FILE: include/linux/device.h:533:
+extern void device_match_freeze(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#381: FILE: include/linux/device.h:534:
+extern void device_match_thaw(int thread);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000420339.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 8 warnings, 18 checks, 296 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000420339.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
