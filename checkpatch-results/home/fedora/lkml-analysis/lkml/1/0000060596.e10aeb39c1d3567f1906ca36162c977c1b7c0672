WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#33: 
It was suggested to me recently that we support a mechanism by which we can set

WARNING:TYPO_SPELLING: 'programatically' may be misspelled - perhaps 'programmatically'?
#77: FILE: Documentation/filesystems/proc.txt:1416:
+Normally this information is only available programatically via the
                                             ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dyanmically' may be misspelled - perhaps 'dynamically'?
#79: FILE: Documentation/filesystems/proc.txt:1418:
+dyanmically see their values.  This file contains lines of the form:
 ^^^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#81: FILE: Documentation/filesystems/proc.txt:1420:
+Limit     Set String     Soft Limit     Hard Limit     Units $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/proc/base.c:485:
+static ssize_t proc_pid_limit_read(struct file *file, char __user *buf,
+		size_t count, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: fs/proc/base.c:496:
+	bufptr = kzalloc((RLIM_NLIMITS+1)*90, GFP_KERNEL);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#169: FILE: fs/proc/base.c:496:
+	bufptr = kzalloc((RLIM_NLIMITS+1)*90, GFP_KERNEL);
 	                                 ^

ERROR:SPACING: space prohibited before that ',' (ctx:WxV)
#193: FILE: fs/proc/base.c:515:
+					lnames[i].name ,lnames[i].match,
 					               ^

ERROR:SPACING: space required after that ',' (ctx:WxV)
#193: FILE: fs/proc/base.c:515:
+					lnames[i].name ,lnames[i].match,
 					               ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#221: FILE: fs/proc/base.c:535:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: fs/proc/base.c:535:
+ $

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#222: FILE: fs/proc/base.c:536:
+	ccount = min(count, (size_t)(bcount-(*ppos)));
 	                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: fs/proc/base.c:547:
+static ssize_t proc_pid_limit_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#243: FILE: fs/proc/base.c:557:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: fs/proc/base.c:557:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: fs/proc/base.c:558:
+ $

CHECK:LINE_SPACING: Please don't use multiple blank lines
#244: FILE: fs/proc/base.c:558:
+ 
+ 

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#244: FILE: fs/proc/base.c:558:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#247: FILE: fs/proc/base.c:561:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#247: FILE: fs/proc/base.c:561:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#251: FILE: fs/proc/base.c:565:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#251: FILE: fs/proc/base.c:565:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#254: FILE: fs/proc/base.c:568:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: fs/proc/base.c:568:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#258: FILE: fs/proc/base.c:572:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#258: FILE: fs/proc/base.c:572:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#261: FILE: fs/proc/base.c:575:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#261: FILE: fs/proc/base.c:575:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#265: FILE: fs/proc/base.c:579:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: fs/proc/base.c:579:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#267: FILE: fs/proc/base.c:581:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: fs/proc/base.c:581:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#270: FILE: fs/proc/base.c:584:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: fs/proc/base.c:584:
+ $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#274: FILE: fs/proc/base.c:588:
+		new_rlim.rlim_cur = simple_strtoul(vmc, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_WHITESPACE: trailing whitespace
#275: FILE: fs/proc/base.c:589:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: fs/proc/base.c:589:
+ $

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#279: FILE: fs/proc/base.c:593:
+		new_rlim.rlim_max = simple_strtoul(vmm, NULL, 10);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#280: FILE: fs/proc/base.c:594:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#280: FILE: fs/proc/base.c:594:
+ $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#283: FILE: fs/proc/base.c:597:
+		if (!strncmp(element, lnames[i].match,
+		     strlen(lnames[i].match))) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#288: FILE: fs/proc/base.c:602:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: fs/proc/base.c:602:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#291: FILE: fs/proc/base.c:605:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: fs/proc/base.c:605:
+ $

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index >= 0'
#292: FILE: fs/proc/base.c:606:
+	if ((index >= 0) && (index < RLIM_NLIMITS))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index < RLIM_NLIMITS'
#292: FILE: fs/proc/base.c:606:
+	if ((index >= 0) && (index < RLIM_NLIMITS))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#294: FILE: fs/proc/base.c:608:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: fs/proc/base.c:608:
+ $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#296: FILE: fs/proc/base.c:610:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: fs/proc/base.c:610:
+ $

WARNING:INDENTED_LABEL: labels should not be indented
#297: FILE: fs/proc/base.c:611:
+  out_free:

WARNING:INDENTED_LABEL: labels should not be indented
#302: FILE: fs/proc/base.c:616:
+  out:

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#321: FILE: fs/proc/base.c:2606:
+	REG("limits",	  S_IRUSR|S_IWUSR, proc_limit_operations),
 	             	         ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#321: FILE: fs/proc/base.c:2606:
+	REG("limits",	  S_IRUSR|S_IWUSR, proc_limit_operations),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#330: FILE: fs/proc/base.c:2941:
+	REG("limits",	 S_IRUSR|S_IWUSR, proc_limit_operations),
 	             	        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#330: FILE: fs/proc/base.c:2941:
+	REG("limits",	 S_IRUSR|S_IWUSR, proc_limit_operations),

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#342: FILE: include/linux/sched.h:675:
+extern int do_setrlimit(unsigned int resource, struct rlimit *new_rlim,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#369: FILE: kernel/sys.c:1247:
 
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'new_rlim->rlim_max > old_rlim->rlim_max'
#376: FILE: kernel/sys.c:1252:
+	if ((new_rlim->rlim_max > old_rlim->rlim_max) &&
 	    !capable(CAP_SYS_RESOURCE))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000060596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 20 errors, 26 warnings, 14 checks, 357 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000060596.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
