WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: block/Kconfig:84:
+config BLK_DEV_INTEGRITY
+	bool "Block layer data integrity support"
+	---help---
+	Some storage devices allow extra information to be
+	stored/retrieved to help protect the data.  The block layer
+	data integrity option provides hooks which can be used by
+	filesystems to ensure better data integrity.
+
+	Say yes here if you have a storage device that provides the
+	T10/SCSI Data Integrity Field or the T13/ATA External Path
+	Protection.  If in doubt, say N.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#112: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: block/blk-integrity.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#133: FILE: block/blk-integrity.c:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#164: FILE: block/blk-integrity.c:49:
+	rq_for_each_integrity_segment(iv, rq, iter) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#196: FILE: block/blk-integrity.c:81:
+	rq_for_each_integrity_segment(iv, rq, iter) {
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: block/blk-integrity.c:89:
+			if (!sg)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: block/blk-integrity.c:91:
+			else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#241: FILE: block/blk-integrity.c:126:
+	BUG_ON(bd1->bd_disk == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bd1->bd_disk"
#241: FILE: block/blk-integrity.c:126:
+	BUG_ON(bd1->bd_disk == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#242: FILE: block/blk-integrity.c:127:
+	BUG_ON(bd2->bd_disk == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bd2->bd_disk"
#242: FILE: block/blk-integrity.c:127:
+	BUG_ON(bd2->bd_disk == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#248: FILE: block/blk-integrity.c:133:
+		printk(KERN_ERR "%s: %s/%s sector sz %u != %u\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#255: FILE: block/blk-integrity.c:140:
+		printk(KERN_ERR "%s: %s/%s tuple sz %u != %u\n", __func__,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'b1->tag_size != b2->tag_size'
#261: FILE: block/blk-integrity.c:146:
+	if (b1->tag_size && b2->tag_size && (b1->tag_size != b2->tag_size)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#262: FILE: block/blk-integrity.c:147:
+		printk(KERN_ERR "%s: %s/%s tag sz %u != %u\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#269: FILE: block/blk-integrity.c:154:
+		printk(KERN_ERR "%s: %s/%s type %s != %s\n", __func__,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#281: FILE: block/blk-integrity.c:166:
+	ssize_t (*show)(struct blk_integrity *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#281: FILE: block/blk-integrity.c:166:
+	ssize_t (*show)(struct blk_integrity *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#282: FILE: block/blk-integrity.c:167:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#282: FILE: block/blk-integrity.c:167:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#282: FILE: block/blk-integrity.c:167:
+	ssize_t (*store)(struct blk_integrity *, const char *, size_t);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi"
#313: FILE: block/blk-integrity.c:198:
+	if (bi != NULL && bi->name != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->name"
#313: FILE: block/blk-integrity.c:198:
+	if (bi != NULL && bi->name != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi"
#321: FILE: block/blk-integrity.c:206:
+	if (bi != NULL)

CHECK:SPACING: No space is necessary after a cast
#330: FILE: block/blk-integrity.c:215:
+	char *p = (char *) page;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#331: FILE: block/blk-integrity.c:216:
+	unsigned long val = simple_strtoul(p, &p, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#350: FILE: block/blk-integrity.c:235:
+	char *p = (char *) page;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#351: FILE: block/blk-integrity.c:236:
+	unsigned long val = simple_strtoul(p, &p, 10);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#368: FILE: block/blk-integrity.c:253:
+	.attr = { .name = "format", .mode = S_IRUGO },

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#373: FILE: block/blk-integrity.c:258:
+	.attr = { .name = "tag_size", .mode = S_IRUGO },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#378: FILE: block/blk-integrity.c:263:
+	.attr = { .name = "read_verify", .mode = S_IRUGO | S_IWUSR },

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#384: FILE: block/blk-integrity.c:269:
+	.attr = { .name = "write_generate", .mode = S_IRUGO | S_IWUSR },

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#397: FILE: block/blk-integrity.c:282:
+static struct sysfs_ops integrity_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#440: FILE: block/blk-integrity.c:325:
+	BUG_ON(disk == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!disk"
#440: FILE: block/blk-integrity.c:325:
+	BUG_ON(disk == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#441: FILE: block/blk-integrity.c:326:
+	BUG_ON(template == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!template"
#441: FILE: block/blk-integrity.c:326:
+	BUG_ON(template == NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#443: FILE: block/blk-integrity.c:328:
+	if (disk->integrity == NULL) {
[...]
+	} else
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!disk->integrity"
#443: FILE: block/blk-integrity.c:328:
+	if (disk->integrity == NULL) {

CHECK:BRACES: Unbalanced braces around else statement
#460: FILE: block/blk-integrity.c:345:
+	} else

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#520: FILE: block/blk.h:56:
+#define rq_for_each_integrity_segment(bvl, _rq, _iter)		\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bip_for_each_vec(bvl, _iter.bio->bi_integrity, _iter.i)

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_iter' - possible side-effects?
#520: FILE: block/blk.h:56:
+#define rq_for_each_integrity_segment(bvl, _rq, _iter)		\
+	__rq_for_each_bio(_iter.bio, _rq)			\
+		bip_for_each_vec(bvl, _iter.bio->bi_integrity, _iter.i)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#559: FILE: fs/bio-integrity.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#576: FILE: fs/bio-integrity.c:18:
+ * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,$

WARNING:LONG_LINE: line length of 131 exceeds 100 columns
#600: FILE: fs/bio-integrity.c:42:
+struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *bio, gfp_t gfp_mask, unsigned int nr_vecs, struct bio_set *bs)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#606: FILE: fs/bio-integrity.c:48:
+	BUG_ON(bio == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bio"
#606: FILE: fs/bio-integrity.c:48:
+	BUG_ON(bio == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#609: FILE: fs/bio-integrity.c:51:
+	if (unlikely(bip == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#610: FILE: fs/bio-integrity.c:52:
+		printk(KERN_ERR "%s: could not alloc bip\n", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iv"
#617: FILE: fs/bio-integrity.c:59:
+	if (unlikely(iv == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#618: FILE: fs/bio-integrity.c:60:
+		printk(KERN_ERR "%s: could not alloc bip_vec\n", __func__);

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#642: FILE: fs/bio-integrity.c:84:
+struct bio_integrity_payload *bio_integrity_alloc(struct bio *bio, gfp_t gfp_mask, unsigned int nr_vecs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#660: FILE: fs/bio-integrity.c:102:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#660: FILE: fs/bio-integrity.c:102:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bip->bip_buf"
#663: FILE: fs/bio-integrity.c:105:
+	if (!bio_flagged(bio, BIO_CLONED) && bip->bip_buf != NULL)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#689: FILE: fs/bio-integrity.c:131:
+		printk(KERN_ERR "%s: bip_vec full\n", __func__);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#694: FILE: fs/bio-integrity.c:136:
+	BUG_ON(iv == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iv"
#694: FILE: fs/bio-integrity.c:136:
+	BUG_ON(iv == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#695: FILE: fs/bio-integrity.c:137:
+	BUG_ON(iv->bv_page != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "iv->bv_page"
#695: FILE: fs/bio-integrity.c:137:
+	BUG_ON(iv->bv_page != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#756: FILE: fs/bio-integrity.c:198:
+	BUG_ON(bio->bi_size == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#768: FILE: fs/bio-integrity.c:210:
+	BUG_ON(bip->bip_buf == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip->bip_buf"
#768: FILE: fs/bio-integrity.c:210:
+	BUG_ON(bip->bip_buf == NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#776: FILE: fs/bio-integrity.c:218:
+		printk(KERN_ERR "%s: tag too big for bio: %u > %u\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#802: FILE: fs/bio-integrity.c:244:
+	BUG_ON(bio_data_dir(bio) != WRITE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#820: FILE: fs/bio-integrity.c:262:
+	BUG_ON(bio_data_dir(bio) != READ);

WARNING:LINE_SPACING: Missing a blank line after declarations
#850: FILE: fs/bio-integrity.c:292:
+		void *kaddr = kmap_atomic(bv->bv_page, KM_USER0);
+		bix.data_buf = kaddr + bv->bv_offset;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#861: FILE: fs/bio-integrity.c:303:
+		BUG_ON(total > bio->bi_integrity->bip_size);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#891: FILE: fs/bio-integrity.c:333:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#891: FILE: fs/bio-integrity.c:333:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#892: FILE: fs/bio-integrity.c:334:
+	BUG_ON(bio_integrity(bio));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf"
#899: FILE: fs/bio-integrity.c:341:
+	if (unlikely(buf == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#900: FILE: fs/bio-integrity.c:342:
+		printk(KERN_ERR "could not allocate integrity buffer\n");

CHECK:SPACING: No space is necessary after a cast
#904: FILE: fs/bio-integrity.c:346:
+	end = (((unsigned long) buf) + len + PAGE_SIZE - 1) >> PAGE_SHIFT;

CHECK:SPACING: No space is necessary after a cast
#905: FILE: fs/bio-integrity.c:347:
+	start = ((unsigned long) buf) >> PAGE_SHIFT;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#910: FILE: fs/bio-integrity.c:352:
+	if (unlikely(bip == NULL)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#911: FILE: fs/bio-integrity.c:353:
+		printk(KERN_ERR "could not allocate data integrity bioset\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#924: FILE: fs/bio-integrity.c:366:
+		int ret;
+		bytes = PAGE_SIZE - offset;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#977: FILE: fs/bio-integrity.c:419:
+	ret = total = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#983: FILE: fs/bio-integrity.c:425:
+		void *kaddr = kmap_atomic(bv->bv_page, KM_USER0);
+		bix.data_buf = kaddr + bv->bv_offset;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#999: FILE: fs/bio-integrity.c:441:
+		BUG_ON(total > bio->bi_integrity->bip_size);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1017: FILE: fs/bio-integrity.c:459:
+^Istruct bio_integrity_payload *bip = $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1050: FILE: fs/bio-integrity.c:492:
+	BUG_ON(bip->bip_bio != bio);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: fs/bio-integrity.c:563:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#1121: FILE: fs/bio-integrity.c:563:
+	BUG_ON(bip == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1122: FILE: fs/bio-integrity.c:564:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#1122: FILE: fs/bio-integrity.c:564:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1146: FILE: fs/bio-integrity.c:588:
+	BUG_ON(bip == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#1146: FILE: fs/bio-integrity.c:588:
+	BUG_ON(bip == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1147: FILE: fs/bio-integrity.c:589:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#1147: FILE: fs/bio-integrity.c:589:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1148: FILE: fs/bio-integrity.c:590:
+	BUG_ON(!bio_flagged(bio, BIO_CLONED));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1175: FILE: fs/bio-integrity.c:617:
+	BUG_ON(bi == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#1175: FILE: fs/bio-integrity.c:617:
+	BUG_ON(bi == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1176: FILE: fs/bio-integrity.c:618:
+	BUG_ON(bip->bip_vcnt != 1);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1196: FILE: fs/bio-integrity.c:638:
+	bp->bip1.bip_vcnt = bp->bip2.bip_vcnt = 1;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1197: FILE: fs/bio-integrity.c:639:
+	bp->bip1.bip_idx = bp->bip2.bip_idx = 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1214: FILE: fs/bio-integrity.c:656:
+	BUG_ON(bip_src == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip_src"
#1214: FILE: fs/bio-integrity.c:656:
+	BUG_ON(bip_src == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bip"
#1218: FILE: fs/bio-integrity.c:660:
+	if (bip == NULL)

WARNING:NEEDLESS_IF: mempool_destroy(NULL) is safe and this check is probably not required
#1246: FILE: fs/bio-integrity.c:688:
+	if (bs->bio_integrity_pool)
+		mempool_destroy(bs->bio_integrity_pool);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1253: FILE: fs/bio-integrity.c:695:
+					SLAB_HWCACHE_ALIGN|SLAB_PANIC);
 					                  ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around bip->bip_vec[(idx)]
#1445: FILE: include/linux/bio.h:450:
+#define bip_vec_idx(bip, idx)	(&(bip->bip_vec[(idx)]))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'bip' may be better as '(bip)' to avoid precedence issues
#1445: FILE: include/linux/bio.h:450:
+#define bip_vec_idx(bip, idx)	(&(bip->bip_vec[(idx)]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bvl' - possible side-effects?
#1448: FILE: include/linux/bio.h:453:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bip' - possible side-effects?
#1448: FILE: include/linux/bio.h:453:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#1448: FILE: include/linux/bio.h:453:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'start_idx' - possible side-effects?
#1448: FILE: include/linux/bio.h:453:
+#define __bip_for_each_vec(bvl, bip, i, start_idx)			\
+	for (bvl = bip_vec_idx((bip), (start_idx)), i = (start_idx);	\
+	     i < (bip)->bip_vcnt;					\
+	     bvl++, i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bip' - possible side-effects?
#1453: FILE: include/linux/bio.h:458:
+#define bip_for_each_vec(bvl, bip, i)					\
+	__bip_for_each_vec(bvl, bip, i, (bip)->bip_idx)

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1458: FILE: include/linux/bio.h:463:
+extern struct bio_integrity_payload *bio_integrity_alloc_bioset(struct bio *, gfp_t, unsigned int, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1459: FILE: include/linux/bio.h:464:
+extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1459: FILE: include/linux/bio.h:464:
+extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#1459: FILE: include/linux/bio.h:464:
+extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1459: FILE: include/linux/bio.h:464:
+extern struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1460: FILE: include/linux/bio.h:465:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1460: FILE: include/linux/bio.h:465:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1460: FILE: include/linux/bio.h:465:
+extern void bio_integrity_free(struct bio *, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1461: FILE: include/linux/bio.h:466:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1461: FILE: include/linux/bio.h:466:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#1461: FILE: include/linux/bio.h:466:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1461: FILE: include/linux/bio.h:466:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1461: FILE: include/linux/bio.h:466:
+extern int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1462: FILE: include/linux/bio.h:467:
+extern int bio_integrity_enabled(struct bio *bio);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1463: FILE: include/linux/bio.h:468:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1463: FILE: include/linux/bio.h:468:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1463: FILE: include/linux/bio.h:468:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1463: FILE: include/linux/bio.h:468:
+extern int bio_integrity_set_tag(struct bio *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1464: FILE: include/linux/bio.h:469:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1464: FILE: include/linux/bio.h:469:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1464: FILE: include/linux/bio.h:469:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1464: FILE: include/linux/bio.h:469:
+extern int bio_integrity_get_tag(struct bio *, void *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1465: FILE: include/linux/bio.h:470:
+extern int bio_integrity_prep(struct bio *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1465: FILE: include/linux/bio.h:470:
+extern int bio_integrity_prep(struct bio *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: include/linux/bio.h:471:
+extern void bio_integrity_endio(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1466: FILE: include/linux/bio.h:471:
+extern void bio_integrity_endio(struct bio *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1466: FILE: include/linux/bio.h:471:
+extern void bio_integrity_endio(struct bio *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: include/linux/bio.h:472:
+extern void bio_integrity_advance(struct bio *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1467: FILE: include/linux/bio.h:472:
+extern void bio_integrity_advance(struct bio *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1467: FILE: include/linux/bio.h:472:
+extern void bio_integrity_advance(struct bio *, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1468: FILE: include/linux/bio.h:473:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1468: FILE: include/linux/bio.h:473:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1468: FILE: include/linux/bio.h:473:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1468: FILE: include/linux/bio.h:473:
+extern void bio_integrity_trim(struct bio *, unsigned int, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1469: FILE: include/linux/bio.h:474:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1469: FILE: include/linux/bio.h:474:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_pair *' should also have an identifier name
#1469: FILE: include/linux/bio.h:474:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1469: FILE: include/linux/bio.h:474:
+extern void bio_integrity_split(struct bio *, struct bio_pair *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1470: FILE: include/linux/bio.h:475:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1470: FILE: include/linux/bio.h:475:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio *' should also have an identifier name
#1470: FILE: include/linux/bio.h:475:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1470: FILE: include/linux/bio.h:475:
+extern int bio_integrity_clone(struct bio *, struct bio *, struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1471: FILE: include/linux/bio.h:476:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1471: FILE: include/linux/bio.h:476:
+extern int bioset_integrity_create(struct bio_set *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1471: FILE: include/linux/bio.h:476:
+extern int bioset_integrity_create(struct bio_set *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1472: FILE: include/linux/bio.h:477:
+extern void bioset_integrity_free(struct bio_set *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bio_set *' should also have an identifier name
#1472: FILE: include/linux/bio.h:477:
+extern void bioset_integrity_free(struct bio_set *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1473: FILE: include/linux/bio.h:478:
+extern void bio_integrity_init_slab(void);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1511: FILE: include/linux/blkdev.h:139:
+#define REQ_INTEGRITY	(1 << __REQ_INTEGRITY)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1554: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#1554: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct blk_integrity *' should also have an identifier name
#1554: FILE: include/linux/blkdev.h:906:
+extern int blk_integrity_register(struct gendisk *, struct blk_integrity *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1555: FILE: include/linux/blkdev.h:907:
+extern void blk_integrity_unregister(struct gendisk *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct gendisk *' should also have an identifier name
#1555: FILE: include/linux/blkdev.h:907:
+extern void blk_integrity_unregister(struct gendisk *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1556: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1556: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1556: FILE: include/linux/blkdev.h:908:
+extern int blk_integrity_compare(struct block_device *, struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1557: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1557: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scatterlist *' should also have an identifier name
#1557: FILE: include/linux/blkdev.h:909:
+extern int blk_rq_map_integrity_sg(struct request *, struct scatterlist *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1558: FILE: include/linux/blkdev.h:910:
+extern int blk_rq_count_integrity_sg(struct request *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1558: FILE: include/linux/blkdev.h:910:
+extern int blk_rq_count_integrity_sg(struct request *);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bi"
#1587: FILE: include/linux/blkdev.h:939:
+	if (bi == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->verify_fn"
#1590: FILE: include/linux/blkdev.h:942:
+	if (rw == READ && bi->verify_fn != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bi->generate_fn"
#1594: FILE: include/linux/blkdev.h:946:
+	if (rw == WRITE && bi->generate_fn != NULL &&

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1603: FILE: include/linux/blkdev.h:955:
+	BUG_ON(rq->bio == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rq->bio"
#1603: FILE: include/linux/blkdev.h:955:
+	BUG_ON(rq->bio == NULL);

WARNING:DO_WHILE_MACRO_WITH_TRAILING_SEMICOLON: do {} while (0) macros should not be semicolon terminated
#1617: FILE: include/linux/blkdev.h:969:
+#define blk_integrity_unregister(a)		do { } while (0);

do {} while(0) macros should not have a trailing semicolon.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1621: FILE: include/linux/blkdev.h:973:
+
+

ERROR:SPACING: exactly one space required after that #ifdef
#1632: FILE: include/linux/genhd.h:144:
+#ifdef  CONFIG_BLK_DEV_INTEGRITY

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 104 warnings, 76 checks, 1512 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000266501.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
