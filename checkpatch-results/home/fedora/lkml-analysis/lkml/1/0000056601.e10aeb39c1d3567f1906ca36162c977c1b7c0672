WARNING:BAD_SIGN_OFF: 'Not-signed-off-by:' is the preferred signature form
#77: 
Not-Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#285: FILE: kernel/trace/ftrace.c:2612:
+	trace_create_file("set_ftrace_filter", 0644, NULL,
 			NULL, &ftrace_filter_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: kernel/trace/ftrace.c:2615:
+	trace_create_file("set_ftrace_notrace", 0644, NULL,
 				    NULL, &ftrace_notrace_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#294: FILE: kernel/trace/ftrace.c:2619:
+	trace_create_file("set_graph_function", 0444, NULL,
 				    NULL,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: kernel/trace/ftrace.c:2942:
+	trace_create_file("set_ftrace_pid", 0644, NULL,
 			    NULL, &ftrace_pid_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#383: FILE: kernel/trace/ring_buffer.c:3828:
+	trace_create_file("tracing_on", 0644, NULL,
 			    &ring_buffer_flags, &rb_simple_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#554: FILE: kernel/trace/trace.c:4128:
+	trace_create_file("tracing_enabled", 0644, NULL,
 			&global_trace, &tracing_ctrl_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#558: FILE: kernel/trace/trace.c:4131:
+	trace_create_file("trace_options", 0644, NULL,
 			NULL, &tracing_iter_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: kernel/trace/trace.c:4134:
+	trace_create_file("tracing_cpumask", 0644, NULL,
 			NULL, &tracing_cpumask_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#566: FILE: kernel/trace/trace.c:4137:
+	trace_create_file("trace", 0644, NULL,
 			(void *) TRACE_PIPE_ALL_CPU, &tracing_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: kernel/trace/trace.c:4140:
+	trace_create_file("available_tracers", 0444, NULL,
 			&global_trace, &show_traces_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#574: FILE: kernel/trace/trace.c:4143:
+	trace_create_file("current_tracer", 0644, NULL,
 			&global_trace, &set_tracer_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#579: FILE: kernel/trace/trace.c:4147:
+	trace_create_file("tracing_max_latency", 0644, NULL,
 			&tracing_max_latency, &tracing_max_lat_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: kernel/trace/trace.c:4150:
+	trace_create_file("tracing_thresh", 0644, NULL,
 			&tracing_thresh, &tracing_max_lat_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#588: FILE: kernel/trace/trace.c:4154:
+	trace_create_file("README", 0444, NULL,
 			NULL, &tracing_readme_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#592: FILE: kernel/trace/trace.c:4157:
+	trace_create_file("trace_pipe", 0444, NULL,
 			(void *) TRACE_PIPE_ALL_CPU, &tracing_pipe_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#596: FILE: kernel/trace/trace.c:4160:
+	trace_create_file("buffer_size_kb", 0644, NULL,
 			&global_trace, &tracing_entries_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#600: FILE: kernel/trace/trace.c:4163:
+	trace_create_file("trace_marker", 0220, NULL,
 			NULL, &tracing_mark_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#604: FILE: kernel/trace/trace.c:4166:
+	trace_create_file("saved_cmdlines", 0444, NULL,
 			NULL, &tracing_saved_cmdlines_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#613: FILE: kernel/trace/trace.c:4173:
+	trace_create_file("dyn_ftrace_total_info", 0444, NULL,
 			&ftrace_update_tot_cnt, &tracing_dyn_info_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#940: FILE: kernel/trace/trace_printk.c:234:
+	trace_create_file("printk_formats", 0444, NULL,
 				    NULL, &ftrace_formats_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: kernel/trace/trace_stack.c:338:
+	trace_create_file("stack_max_size", 0644, NULL,
 			&max_stack_size, &stack_max_size_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1002: FILE: kernel/trace/trace_stack.c:341:
+	trace_create_file("stack_trace", 0444, NULL,
 			NULL, &stack_trace_fops);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1079: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1084: FILE: kernel/trace/tracefs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1122: FILE: kernel/trace/tracefs.c:39:
+static ssize_t default_write_file(struct file *file, const char __user *buf,
+				   size_t count, loff_t *ppos)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1141: FILE: kernel/trace/tracefs.c:58:
+static void *tracefs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1143: FILE: kernel/trace/tracefs.c:60:
+	nd_set_link(nd, dentry->d_inode->i_private);
 	            ^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1158: FILE: kernel/trace/tracefs.c:75:
+		inode->i_atime = inode->i_mtime = inode->i_ctime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1174: FILE: kernel/trace/tracefs.c:91:
+			 * (for "." entry) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#1205: FILE: kernel/trace/tracefs.c:122:
+	mode = (mode & (S_IRWXUGO | S_ISVTX)) | S_IFDIR;

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1264: FILE: kernel/trace/tracefs.c:181:
+^I * We need the root dentry to do this, which is in the super $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1269: FILE: kernel/trace/tracefs.c:186:
+		if (tracefs_mount && tracefs_mount->mnt_sb) {
+			parent = tracefs_mount->mnt_sb->s_root;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#1281: FILE: kernel/trace/tracefs.c:198:
+	if (!IS_ERR(*dentry)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1294: FILE: kernel/trace/tracefs.c:211:
+	} else

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#1306: FILE: kernel/trace/tracefs.c:223:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

WARNING:TYPO_SPELLING: 'createing' may be misspelled - perhaps 'creating'?
#1315: FILE: kernel/trace/tracefs.c:232:
+ * wide range of flexibility in createing a file, or a directory (if you
                                 ^^^^^^^^^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1334: FILE: kernel/trace/tracefs.c:251:
+	pr_debug("tracefs: creating file '%s'\n",name);
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'paramater' may be misspelled - perhaps 'parameter'?
#1364: FILE: kernel/trace/tracefs.c:281:
+ *          directory dentry if set.  If this paramater is NULL, then the
                                               ^^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1379: FILE: kernel/trace/tracefs.c:296:
+^Ireturn tracefs_create_file(name, $

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXU | S_IRUGO | S_IXUGO' are not preferred. Consider using octal permissions '0755'.
#1380: FILE: kernel/trace/tracefs.c:297:
+				   S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1398: FILE: kernel/trace/tracefs.c:315:
+				/* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1481: FILE: kernel/trace/tracefs.c:398:
+		child = list_entry(parent->d_subdirs.next, struct dentry,
+				d_u.d_child);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1572: FILE: kernel/trace/tracefs.h:1:
+/*

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1588: FILE: kernel/trace/tracefs.h:17:
+struct file_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 15 warnings, 27 checks, 1325 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056601.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
