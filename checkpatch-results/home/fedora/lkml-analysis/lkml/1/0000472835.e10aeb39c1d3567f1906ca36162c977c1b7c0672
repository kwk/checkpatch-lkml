WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#32: 
#define CLOCKSOURCE_NOT_CONTINUOUS      1

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#33: 
#define CLOCKSOURCE_UNSTABLE            2

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#34: 
#define CLOCKSOURCE_NOT_ATOMIC          4

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#35: 
#define CLOCKSOURCE_UNDER_32BITS        8

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#36: 
#define CLOCKSOURCE_64BITS              16

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#37: 
#define CLOCKSOURCE_PM_AFFECTED         32

WARNING:BAD_SIGN_OFF: 'Signed-off-by:' is the preferred signature form
#50: 
Signed-Off-By: Daniel Walker <dwalker@mvista.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: include/linux/clocksource.h:249:
+extern void clocksource_mark_unstable(struct clocksource *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct clocksource *' should also have an identifier name
#110: FILE: include/linux/clocksource.h:249:
+extern void clocksource_mark_unstable(struct clocksource *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: include/linux/clocksource.h:250:
+extern struct clocksource *clocksource_get_unstable(void);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#115: FILE: include/linux/clocksource.h:253:
+extern struct clocksource * clocksource_get_clock(char*, unsigned long);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: include/linux/clocksource.h:253:
+extern struct clocksource * clocksource_get_clock(char*, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char*' should also have an identifier name
#115: FILE: include/linux/clocksource.h:253:
+extern struct clocksource * clocksource_get_clock(char*, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#115: FILE: include/linux/clocksource.h:253:
+extern struct clocksource * clocksource_get_clock(char*, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#117: FILE: include/linux/clocksource.h:255:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#126: FILE: include/linux/clocksource.h:264:
+static inline struct clocksource * clocksource_get_masked_clock(unsigned long mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: kernel/time/clocksource.c:55:
+struct clocksource * __is_registered(char * name, unsigned long mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#152: FILE: kernel/time/clocksource.c:55:
+struct clocksource * __is_registered(char * name, unsigned long mask)

CHECK:BRACES: braces {} should be used on all arms of this statement
#161: FILE: kernel/time/clocksource.c:63:
+		if (name) {
[...]
+		} else if (!(src->flags & mask))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: kernel/time/clocksource.c:83:
+static inline struct clocksource * __get_clock(char * name, unsigned long mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#174: FILE: kernel/time/clocksource.c:83:
+static inline struct clocksource * __get_clock(char * name, unsigned long mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: kernel/time/clocksource.c:104:
+struct clocksource * clocksource_get_clock(char * name, unsigned long mask)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#198: FILE: kernel/time/clocksource.c:104:
+struct clocksource * clocksource_get_clock(char * name, unsigned long mask)

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#297: FILE: kernel/time/timekeeping.c:235:
 	switch (op) {
[...]
+		case CLOCKSOURCE_NOTIFY_UNSTABLE:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 10 warnings, 5 checks, 214 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472835.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
