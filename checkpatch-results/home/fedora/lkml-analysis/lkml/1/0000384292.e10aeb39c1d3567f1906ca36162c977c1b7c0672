WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#160: FILE: fs/unionfs/commonfops.c:128:
+			printk(KERN_ERR "unionfs: no superblock for "

WARNING:SPLIT_STRING: quoted string split across lines
#161: FILE: fs/unionfs/commonfops.c:129:
+			printk(KERN_ERR "unionfs: no superblock for "
+			       "file %p\n", file);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: fs/unionfs/commonfops.c:249:
+	BUG_ON(!S_ISREG(dentry->d_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bstart <= fbstart(file)'
#239: FILE: fs/unionfs/commonfops.c:262:
+	if (err || (bstart <= fbstart(file)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#253: FILE: fs/unionfs/commonfops.c:276:
+			BUG_ON(!dentry->d_inode);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#254: FILE: fs/unionfs/commonfops.c:277:
+			iput(unionfs_lower_inode_idx(dentry->d_inode, bindex));
 			^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#340: FILE: fs/unionfs/copyup.c:129:
+		printk(KERN_WARNING

WARNING:LINE_SPACING: Missing a blank line after declarations
#442: FILE: fs/unionfs/copyup.c:501:
+			struct inode *inode = new_lower_dentry->d_inode;
+			atomic_inc(&inode->i_count);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#649: FILE: fs/unionfs/copyup.c:789:
+				iput(inode);
 				^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: fs/unionfs/copyup.c:850:
+	BUG_ON(S_ISDIR(dentry->d_inode->i_mode));

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#756: FILE: fs/unionfs/copyup.c:851:
+	for (bindex=dbstart(dentry)+1; bindex<=dbend(dentry); bindex++) {
 	           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#756: FILE: fs/unionfs/copyup.c:851:
+	for (bindex=dbstart(dentry)+1; bindex<=dbend(dentry); bindex++) {
 	                           ^

ERROR:SPACING: spaces required around that '<=' (ctx:VxV)
#756: FILE: fs/unionfs/copyup.c:851:
+	for (bindex=dbstart(dentry)+1; bindex<=dbend(dentry); bindex++) {
 	                                     ^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#764: FILE: fs/unionfs/copyup.c:859:
+			iput(unionfs_lower_inode_idx(dentry->d_inode, bindex));
 			^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#959: FILE: fs/unionfs/union.h:278:
+extern int copyup_dentry(struct inode *dir, struct dentry *dentry,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#963: FILE: fs/unionfs/union.h:282:
+extern void unionfs_postcopyup_setmnt(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#964: FILE: fs/unionfs/union.h:283:
+extern void unionfs_postcopyup_release(struct dentry *dentry);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384292.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 10 warnings, 5 checks, 864 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384292.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
