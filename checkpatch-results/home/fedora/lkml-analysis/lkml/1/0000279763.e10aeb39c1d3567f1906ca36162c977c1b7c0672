CHECK:CAMELCASE: Avoid CamelCase: <Active>
#118: FILE: include/linux/page-flags.h:161:
+	TESTCLEARFLAG(Active, active)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Noreclaim>
#127: FILE: include/linux/page-flags.h:199:
+PAGEFLAG(Noreclaim, noreclaim) __CLEARPAGEFLAG(Noreclaim, noreclaim)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageNoreclaim>
#133: FILE: include/linux/page-flags.h:205:
+#define __ClearPageNoreclaim(page)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#171: FILE: include/linux/mmzone.h:142:
+#define for_each_reclaimable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#266: FILE: include/linux/mm_inline.h:115:
+	} else {
+		 if (PageActive(page)) {

WARNING:TABSTOP: Statements should start on a tabstop
#267: FILE: include/linux/mm_inline.h:116:
+		 if (PageActive(page)) {

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageActive>
#268: FILE: include/linux/mm_inline.h:117:
+			__ClearPageActive(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#293: FILE: include/linux/swap.h:215:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: include/linux/swap.h:244:
+extern int page_reclaimable(struct page *page, struct vm_area_struct *vma);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: include/linux/swap.h:247:
+static inline int page_reclaimable(struct page *page,
+						struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#345: FILE: mm/swap.c:109:
+	if (PageNoreclaim(page))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#347: FILE: mm/swap.c:111:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: mm/swap.c:141:
+		if (PageLRU(page) && !PageActive(page) &&
+					!PageNoreclaim(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#389: FILE: mm/swap.c:216:
+	if (!PageActive(page) && !PageNoreclaim(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#440: FILE: mm/migrate.c:343:
+	if (TestClearPageActive(page)) {
[...]
+	} else if (TestClearPageNoreclaim(page))
[...]

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#672: FILE: mm/vmscan.c:2265:
+{
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 13 checks, 527 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000279763.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
