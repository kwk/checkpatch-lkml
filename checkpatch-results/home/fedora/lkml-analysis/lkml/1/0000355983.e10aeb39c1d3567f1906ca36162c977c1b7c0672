CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#68: FILE: arch/s390/kernel/traps.c:219:
+	seq_printf(m, "task: %p, ksp: %p\n",
 		       task, (void *)task->thread.ksp);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: arch/s390/kernel/traps.c:221:
+	seq_printf(m, "User PSW : %p %p\n",
 		       (void *) regs->psw.mask, (void *)regs->psw.addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#75: FILE: arch/s390/kernel/traps.c:224:
+	seq_printf(m, "User GPRS: " FOURLONG,
 			  regs->gprs[0], regs->gprs[1],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: arch/s390/kernel/traps.c:227:
+	seq_printf(m, "           " FOURLONG,
 			  regs->gprs[4], regs->gprs[5],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: arch/s390/kernel/traps.c:230:
+	seq_printf(m, "           " FOURLONG,
 			  regs->gprs[8], regs->gprs[9],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#87: FILE: arch/s390/kernel/traps.c:233:
+	seq_printf(m, "           " FOURLONG,
 			  regs->gprs[12], regs->gprs[13],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: arch/s390/kernel/traps.c:236:
+	seq_printf(m, "User ACRS: %08x %08x %08x %08x\n",
 			  task->thread.acrs[0], task->thread.acrs[1],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#95: FILE: arch/s390/kernel/traps.c:239:
+	seq_printf(m, "           %08x %08x %08x %08x\n",
 			  task->thread.acrs[4], task->thread.acrs[5],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#99: FILE: arch/s390/kernel/traps.c:242:
+	seq_printf(m, "           %08x %08x %08x %08x\n",
 			  task->thread.acrs[8], task->thread.acrs[9],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#103: FILE: arch/s390/kernel/traps.c:245:
+	seq_printf(m, "           %08x %08x %08x %08x\n",
 			  task->thread.acrs[12], task->thread.acrs[13],

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#130: FILE: fs/proc/array.c:103:
+	seq_printf(m, "Name:\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#164: FILE: fs/proc/array.c:128:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#174: FILE: fs/proc/array.c:165:
+static inline void task_state(struct seq_file *m, struct pid_namespace *ns,
+				struct pid *pid, struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: fs/proc/array.c:178:
+	seq_printf(m,
 		"State:\t%s\n"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: fs/proc/array.c:196:
+	seq_printf(m,
 		"FDSize:\t%d\n"

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#221: FILE: fs/proc/array.c:209:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#248: FILE: fs/proc/array.c:230:
+	seq_printf(m, "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: fs/proc/array.c:297:
+static inline void task_context_switch_counts(struct seq_file *m,
+						struct task_struct *p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: fs/proc/array.c:306:
+int proc_pid_status(struct seq_file *m, struct pid_namespace *ns, struct pid *pid,
+			struct task_struct *task)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#360: FILE: fs/proc/base.c:2225:
+	ONE("status",     S_IRUGO, pid_status),

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#369: FILE: fs/proc/base.c:2546:
+	ONE("status",    S_IRUGO, pid_status),

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#382: FILE: fs/proc/internal.h:51:
+extern int proc_pid_status(struct seq_file *m, struct pid_namespace *ns, struct pid *pid, struct task_struct *task);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#382: FILE: fs/proc/internal.h:51:
+extern int proc_pid_status(struct seq_file *m, struct pid_namespace *ns, struct pid *pid, struct task_struct *task);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#411: FILE: fs/proc/task_mmu.c:38:
+^Iseq_printf(m, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: fs/proc/task_mmu.c:39:
+	seq_printf(m, 
 		"VmPeak:\t%8lu kB\n"

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#445: FILE: include/asm-s390/processor.h:183:
+extern void task_show_regs(struct seq_file *m, struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#459: FILE: include/linux/cpuset.h:61:
+extern void cpuset_task_status_allowed(struct seq_file *m, struct task_struct *task);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#469: FILE: include/linux/cpuset.h:130:
+static inline void cpuset_task_status_allowed(struct seq_file *m, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#470: FILE: include/linux/cpuset.h:131:
+static inline void cpuset_task_status_allowed(struct seq_file *m, 
+						struct task_struct *task)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct seq_file *' should also have an identifier name
#485: FILE: include/linux/proc_fs.h:117:
+void task_mem(struct seq_file *, struct mm_struct *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#485: FILE: include/linux/proc_fs.h:117:
+void task_mem(struct seq_file *, struct mm_struct *);

WARNING:LINE_SPACING: Missing a blank line after declarations
#508: FILE: kernel/cpuset.c:2225:
+	int len;
+	seq_printf(m, "Cpus_allowed:\t");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#508: FILE: kernel/cpuset.c:2225:
+	seq_printf(m, "Cpus_allowed:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#511: FILE: kernel/cpuset.c:2228:
+	seq_printf(m, "\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#512: FILE: kernel/cpuset.c:2229:
+	seq_printf(m, "Mems_allowed:\t");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#515: FILE: kernel/cpuset.c:2232:
+	seq_printf(buffer, "\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 20 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000355983.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
