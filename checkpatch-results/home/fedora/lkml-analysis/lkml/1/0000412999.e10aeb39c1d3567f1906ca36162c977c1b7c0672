WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#77: FILE: security/apparmor/apparmor.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#119: FILE: security/apparmor/apparmor.h:43:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#121: FILE: security/apparmor/apparmor.h:45:
+ * via /sys/kernel/security/apparmor/control */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_profile' - possible side-effects?
#128: FILE: security/apparmor/apparmor.h:52:
+#define PROFILE_COMPLAIN(_profile) \
+	(apparmor_complain == 1 || ((_profile) && (_profile)->flags.complain))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cxt' - possible side-effects?
#131: FILE: security/apparmor/apparmor.h:55:
+#define APPARMOR_COMPLAIN(_cxt) \
+	(apparmor_complain == 1 || \
+	 ((_cxt) && (_cxt)->profile && (_cxt)->profile->flags.complain))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_profile' - possible side-effects?
#135: FILE: security/apparmor/apparmor.h:59:
+#define PROFILE_AUDIT(_profile) \
+	(apparmor_audit == 1 || ((_profile) && (_profile)->flags.audit))

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_cxt' - possible side-effects?
#138: FILE: security/apparmor/apparmor.h:62:
+#define APPARMOR_AUDIT(_cxt) \
+	(apparmor_audit == 1 || \
+	 ((_cxt) && (_cxt)->profile && (_cxt)->profile->flags.audit))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#150: FILE: security/apparmor/apparmor.h:74:
+			printk(KERN_DEBUG "AppArmor: " fmt, ##args);	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#153: FILE: security/apparmor/apparmor.h:77:
+#define AA_ERROR(fmt, args...)	printk(KERN_ERR "AppArmor: " fmt, ##args)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#188: FILE: security/apparmor/apparmor.h:112:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#261: FILE: security/apparmor/apparmor.h:185:
+extern int alloc_null_complain_profile(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#262: FILE: security/apparmor/apparmor.h:186:
+extern void free_null_complain_profile(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#263: FILE: security/apparmor/apparmor.h:187:
+extern int attach_nullprofile(struct aa_profile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#264: FILE: security/apparmor/apparmor.h:188:
+extern int aa_audit_message(struct aa_profile *profile, struct aa_audit *sa,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#269: FILE: security/apparmor/apparmor.h:193:
+extern int aa_audit_syscallreject(struct aa_profile *profile, gfp_t gfp,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#269: FILE: security/apparmor/apparmor.h:193:
+extern int aa_audit_syscallreject(struct aa_profile *profile, gfp_t gfp,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#271: FILE: security/apparmor/apparmor.h:195:
+extern int aa_audit(struct aa_profile *profile, struct aa_audit *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct aa_audit *' should also have an identifier name
#271: FILE: security/apparmor/apparmor.h:195:
+extern int aa_audit(struct aa_profile *profile, struct aa_audit *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#273: FILE: security/apparmor/apparmor.h:197:
+extern int aa_attr(struct aa_profile *profile, struct dentry *dentry,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#275: FILE: security/apparmor/apparmor.h:199:
+extern int aa_perm_xattr(struct aa_profile *profile, const char *operation,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#278: FILE: security/apparmor/apparmor.h:202:
+extern int aa_capability(struct aa_task_context *cxt, int cap);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: security/apparmor/apparmor.h:203:
+extern int aa_perm(struct aa_profile *profile, const char *operation,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: security/apparmor/apparmor.h:206:
+extern int aa_perm_dir(struct aa_profile *profile, const char *operation,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: security/apparmor/apparmor.h:209:
+extern int aa_perm_path(struct aa_profile *, const char *operation,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct aa_profile *' should also have an identifier name
#285: FILE: security/apparmor/apparmor.h:209:
+extern int aa_perm_path(struct aa_profile *, const char *operation,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#285: FILE: security/apparmor/apparmor.h:209:
+extern int aa_perm_path(struct aa_profile *, const char *operation,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: security/apparmor/apparmor.h:211:
+extern int aa_link(struct aa_profile *profile,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: security/apparmor/apparmor.h:214:
+extern int aa_clone(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: security/apparmor/apparmor.h:215:
+extern int aa_register(struct linux_binprm *bprm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: security/apparmor/apparmor.h:216:
+extern void aa_release(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: security/apparmor/apparmor.h:217:
+extern int aa_change_hat(const char *id, u64 hat_magic);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: security/apparmor/apparmor.h:218:
+extern int aa_change_profile(const char *name, u64 cookie);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: security/apparmor/apparmor.h:219:
+extern struct aa_profile *__aa_find_profile(const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: security/apparmor/apparmor.h:221:
+extern struct aa_profile *__aa_replace_profile(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: security/apparmor/apparmor.h:223:
+extern struct aa_task_context *lock_task_and_profiles(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: security/apparmor/apparmor.h:225:
+extern void unlock_task_and_profiles(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: security/apparmor/apparmor.h:228:
+extern void aa_change_task_context(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#308: FILE: security/apparmor/apparmor.h:232:
+extern int aa_may_ptrace(struct aa_task_context *cxt,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: security/apparmor/apparmor.h:236:
+extern void aa_profilelist_release(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#315: FILE: security/apparmor/apparmor.h:239:
+extern ssize_t aa_add_profile(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#315: FILE: security/apparmor/apparmor.h:239:
+extern ssize_t aa_add_profile(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#315: FILE: security/apparmor/apparmor.h:239:
+extern ssize_t aa_add_profile(void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#316: FILE: security/apparmor/apparmor.h:240:
+extern ssize_t aa_replace_profile(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#316: FILE: security/apparmor/apparmor.h:240:
+extern ssize_t aa_replace_profile(void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#316: FILE: security/apparmor/apparmor.h:240:
+extern ssize_t aa_replace_profile(void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#317: FILE: security/apparmor/apparmor.h:241:
+extern ssize_t aa_remove_profile(const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#317: FILE: security/apparmor/apparmor.h:241:
+extern ssize_t aa_remove_profile(const char *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#317: FILE: security/apparmor/apparmor.h:241:
+extern ssize_t aa_remove_profile(const char *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: security/apparmor/apparmor.h:242:
+extern struct aa_profile *alloc_aa_profile(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: security/apparmor/apparmor.h:243:
+extern void free_aa_profile(struct aa_profile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: security/apparmor/apparmor.h:244:
+extern void free_aa_profile_kref(struct kref *kref);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#321: FILE: security/apparmor/apparmor.h:245:
+extern void aa_unconfine_tasks(struct aa_profile *profile);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#324: FILE: security/apparmor/apparmor.h:248:
+extern int aa_getprocattr(struct aa_profile *profile, char **string,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#325: FILE: security/apparmor/apparmor.h:249:
+			  unsigned *len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#326: FILE: security/apparmor/apparmor.h:250:
+extern int aa_setprocattr_changehat(char *args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#327: FILE: security/apparmor/apparmor.h:251:
+extern int aa_setprocattr_changeprofile(char *args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#328: FILE: security/apparmor/apparmor.h:252:
+extern int aa_setprocattr_setprofile(struct task_struct *task, char *args);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#331: FILE: security/apparmor/apparmor.h:255:
+extern int create_apparmorfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#332: FILE: security/apparmor/apparmor.h:256:
+extern void destroy_apparmorfs(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#335: FILE: security/apparmor/apparmor.h:259:
+extern struct aa_dfa *aa_match_alloc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#336: FILE: security/apparmor/apparmor.h:260:
+extern void aa_match_free(struct aa_dfa *dfa);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#337: FILE: security/apparmor/apparmor.h:261:
+extern int unpack_dfa(struct aa_dfa *dfa, void *blob, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#338: FILE: security/apparmor/apparmor.h:262:
+extern int verify_dfa(struct aa_dfa *dfa);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#339: FILE: security/apparmor/apparmor.h:263:
+extern unsigned int aa_dfa_match(struct aa_dfa *dfa, const char *str);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#345: FILE: security/apparmor/apparmorfs.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#360: FILE: security/apparmor/apparmorfs.c:16:
+#include <asm/uaccess.h>

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: security/apparmor/apparmorfs.c:42:
+		struct aa_audit sa;
+		memset(&sa, 0, sizeof(sa));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!data"
#396: FILE: security/apparmor/apparmorfs.c:52:
+	if (data == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#412: FILE: security/apparmor/apparmorfs.c:68:
+extern struct seq_operations apparmorfs_profiles_op;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: security/apparmor/apparmorfs.c:75:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#425: FILE: security/apparmor/apparmorfs.c:81:
+static struct file_operations apparmorfs_profiles_fops = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#434: FILE: security/apparmor/apparmorfs.c:90:
+static ssize_t aa_matching_read(struct file *file, char __user *buf,
+			       size_t size, loff_t *ppos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#442: FILE: security/apparmor/apparmorfs.c:98:
+static struct file_operations apparmorfs_matching_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#443: FILE: security/apparmor/apparmorfs.c:99:
+^I.read = ^Iaa_matching_read,$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#464: FILE: security/apparmor/apparmorfs.c:120:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#465: FILE: security/apparmor/apparmorfs.c:121:
+static struct file_operations apparmorfs_profile_load = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: security/apparmor/apparmorfs.c:144:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#489: FILE: security/apparmor/apparmorfs.c:145:
+static struct file_operations apparmorfs_profile_replace = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: security/apparmor/apparmorfs.c:151:
+static ssize_t aa_profile_remove(struct file *f, const char __user *buf,
+				  size_t size, loff_t *pos)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#517: FILE: security/apparmor/apparmorfs.c:173:
+static struct file_operations apparmorfs_profile_remove = {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#563: FILE: security/apparmor/apparmorfs.c:219:
+		AA_ERROR("%s: AppArmor securityfs already exists\n",
+			__FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#563: FILE: security/apparmor/apparmorfs.c:219:
+			__FUNCTION__);

ERROR:CODE_INDENT: code indent should use tabs where possible
#571: FILE: security/apparmor/apparmorfs.c:227:
+ ^I^Igoto error;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#571: FILE: security/apparmor/apparmorfs.c:227:
+ ^I^Igoto error;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: security/apparmor/apparmorfs.c:227:
+ ^I^Igoto error;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#600: FILE: security/apparmor/inline.h:1:
+/*

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around p->count
#631: FILE: security/apparmor/inline.h:32:
+		kref_get(&(p->count));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#786: FILE: security/apparmor/inline.h:187:
+^I^I^I^I        struct aa_profile *profile2)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#786: FILE: security/apparmor/inline.h:187:
+static inline void unlock_both_profiles(struct aa_profile *profile1,
+				        struct aa_profile *profile2)

ERROR:CODE_INDENT: code indent should use tabs where possible
#807: FILE: security/apparmor/inline.h:208:
+^I        return dfa ? aa_dfa_match(dfa, pathname) : 0;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#814: FILE: security/apparmor/list.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: security/apparmor/list.c:83:
+	struct aa_profile *profile = (struct aa_profile *)v;
+	seq_printf(f, "%s (%s)\n", profile->name,

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#902: FILE: security/apparmor/list.c:89:
+struct seq_operations apparmorfs_profiles_op = {

WARNING:TYPO_SPELLING: 'guarenteed' may be misspelled - perhaps 'guaranteed'?
#950: FILE: security/apparmor/locking.txt:40:
+references is only guarenteed to exist for the rcu cycle.  Where
                    ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#982: FILE: security/apparmor/procattr.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#996: FILE: security/apparmor/procattr.c:15:
+int aa_getprocattr(struct aa_profile *profile, char **string, unsigned *len)

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#1037: FILE: security/apparmor/procattr.c:56:
+	*cookie = simple_strtoull(args, &name, 16);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'name == args'
#1038: FILE: security/apparmor/procattr.c:57:
+	if ((name == args) || *name != '^') {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1064: FILE: security/apparmor/procattr.c:83:
+		 __FUNCTION__, cookie, hat ? hat : NULL);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1092: FILE: security/apparmor/procattr.c:111:
+		 __FUNCTION__, current->pid);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1095: FILE: security/apparmor/procattr.c:114:
+	if (strcmp(args, "unconfined") == 0)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#1097: FILE: security/apparmor/procattr.c:116:
+	else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 38 warnings, 61 checks, 1067 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412999.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
