WARNING:TYPO_SPELLING: 'formated' may be misspelled - perhaps 'formatted'?
#160: 
Description: Prepare a newly formated 400GB disk as follows: create
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#216: FILE: fs/ext3/balloc.c:714:
+	BUG_ON(start > maxblocks);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: fs/ext3/balloc.c:879:
+	BUG_ON(grp_goal >= 0 && start != grp_goal);

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: fs/ext3/balloc.c:885:
+^I ^I * If there is an overlap with metacluster range, adjust our$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#245: FILE: fs/ext3/balloc.c:885:
+^I ^I * If there is an overlap with metacluster range, adjust our$

ERROR:CODE_INDENT: code indent should use tabs where possible
#248: FILE: fs/ext3/balloc.c:888:
+^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#248: FILE: fs/ext3/balloc.c:888:
+^I ^I */$

CHECK:BRACES: braces {} should be used on all arms of this statement
#250: FILE: fs/ext3/balloc.c:890:
+			if (mc_start <= start)
[...]
+			else if (mc_end >= end)
[...]
+			else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#254: FILE: fs/ext3/balloc.c:894:
+			else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#408: FILE: fs/ext3/balloc.c:1556:
+	BUG_ON(goal < le32_to_cpu(es->s_first_data_block) ||

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#476: FILE: fs/ext3/balloc.c:1803:
+int ext3_new_indirect_blocks(handle_t *handle, struct inode *inode,
+			unsigned long group_no, unsigned long *count,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#490: FILE: fs/ext3/balloc.c:1817:
+	BUG_ON(*count > 3);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#494: FILE: fs/ext3/balloc.c:1821:
+		printk(KERN_INFO "ext3_new_indirect_blocks: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_new_indirect_blocks', this function's name, in a string
#494: FILE: fs/ext3/balloc.c:1821:
+		printk(KERN_INFO "ext3_new_indirect_blocks: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#495: FILE: fs/ext3/balloc.c:1822:
+		printk(KERN_INFO "ext3_new_indirect_blocks: "
+			"nonexistent device");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#498: FILE: fs/ext3/balloc.c:1825:
+	BUG_ON(!test_opt(sb, METACLUSTER));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#552: FILE: fs/ext3/balloc.c:1879:
+			blk = bitmap_search_next_usable_block(blk, bitmap_bh,
+								mc_end);

ERROR:CODE_INDENT: code indent should use tabs where possible
#560: FILE: fs/ext3/balloc.c:1887:
+^I^I ^I * The block was allocated by another thread, or it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#560: FILE: fs/ext3/balloc.c:1887:
+^I^I ^I * The block was allocated by another thread, or it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: fs/ext3/balloc.c:1889:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#562: FILE: fs/ext3/balloc.c:1889:
+^I^I ^I */$

WARNING:NEW_TYPEDEFS: do not add new typedefs
#625: FILE: fs/ext3/inode.c:42:
+typedef struct {

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#629: FILE: fs/ext3/inode.c:46:
+} Indirect;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#642: FILE: fs/ext3/inode.c:59:
+# define EXT3_IND_READ_MAX     ^I(32)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: fs/ext3/inode.c:63:
+static Indirect *ext3_read_indblocks(struct inode *inode, int iblock,
+					int depth, int offsets[4],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#757: FILE: fs/ext3/inode.c:558:
+	BUG_ON(blks <= 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#761: FILE: fs/ext3/inode.c:562:
+		printk(KERN_INFO "ext3_alloc_blocks: nonexistent device");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#798: FILE: fs/ext3/inode.c:602:
+			printk(KERN_ERR "ext3_alloc_blocks failed to allocate "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ext3_alloc_blocks', this function's name, in a string
#798: FILE: fs/ext3/inode.c:602:
+			printk(KERN_ERR "ext3_alloc_blocks failed to allocate "

WARNING:SPLIT_STRING: quoted string split across lines
#799: FILE: fs/ext3/inode.c:603:
+			printk(KERN_ERR "ext3_alloc_blocks failed to allocate "
+				"indirect blocks: %d", *err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#802: FILE: fs/ext3/inode.c:606:
+			BUG_ON(count == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#809: FILE: fs/ext3/inode.c:613:
+			BUG_ON(index > indirect_blks);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#850: FILE: fs/ext3/inode.c:889:
+	BUG_ON(!create &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#851: FILE: fs/ext3/inode.c:890:
+	BUG_ON(!create &&
+		iblock >= (inode->i_size + inode->i_sb->s_blocksize - 1) >>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#884: FILE: fs/ext3/inode.c:961:
+		partial = ext3_get_branch(inode, depth, offsets, chain, 0,
+					&err);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#905: FILE: fs/ext3/inode.c:3396:
+ * ^Ibio callback for read IO issued from ext3_read_indblocks.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#906: FILE: fs/ext3/inode.c:3397:
+ * ^IWill be called only once, when all I/O has completed.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#907: FILE: fs/ext3/inode.c:3398:
+ * ^IFrees read_info and bio.$

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#913: FILE: fs/ext3/inode.c:3404:
+	int uptodate = !err && test_bit(BIO_UPTODATE, &bio->bi_flags);
 	    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#916: FILE: fs/ext3/inode.c:3407:
+	BUG_ON(read_info->count <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#923: FILE: fs/ext3/inode.c:3414:
+		BUG_ON(bh == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bh"
#923: FILE: fs/ext3/inode.c:3414:
+		BUG_ON(bh == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#928: FILE: fs/ext3/inode.c:3419:
+		if (uptodate) {
 		    ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#929: FILE: fs/ext3/inode.c:3420:
+			BUG_ON(buffer_uptodate(bh));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#930: FILE: fs/ext3/inode.c:3421:
+			BUG_ON(ext3_buffer_prefetch(bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#946: FILE: fs/ext3/inode.c:3437:
+ * ^I@inode: inode of file.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#947: FILE: fs/ext3/inode.c:3438:
+ * ^I@block: block number in file (starting from zero).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#948: FILE: fs/ext3/inode.c:3439:
+ * ^I@offset_in_dind_block: offset of the indirect block inside it's$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#949: FILE: fs/ext3/inode.c:3440:
+ * ^Iparent doubly-indirect block.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#958: FILE: fs/ext3/inode.c:3449:
+static inline unsigned long ext3_get_max_read(const struct inode *inode,
+						  int block,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#974: FILE: fs/ext3/inode.c:3465:
+	BUG_ON(block >= blocks_in_file);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#979: FILE: fs/ext3/inode.c:3470:
+	BUG_ON(max_read < 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#985: FILE: fs/ext3/inode.c:3476:
+static void ext3_read_indblocks_submit(struct bio **pbio,
+					struct ext3_ind_read_info **pread_info,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#991: FILE: fs/ext3/inode.c:3482:
+	BUG_ON(*read_cnt < 1);

WARNING:TYPO_SPELLING: 'upto' may be misspelled - perhaps 'up to'?
#1016: FILE: fs/ext3/inode.c:3507:
+ *      Issue a single bio request to read upto count buffers identified in
                                            ^^^^

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1018: FILE: fs/ext3/inode.c:3509:
+ *      - If a buffer is found to be uptodate and it's prefetch bit is set, we
                                      ^^^^^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#1020: FILE: fs/ext3/inode.c:3510:
the cache.

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:TYPO_SPELLING: 'uptodate' may be misspelled - perhaps 'up-to-date'?
#1032: FILE: fs/ext3/inode.c:3522:
+ *      it's already uptodate.
                      ^^^^^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1047: FILE: fs/ext3/inode.c:3537:
+	BUG_ON(count < 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1050: FILE: fs/ext3/inode.c:3540:
+	 * be imposed at the last moment. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1077: FILE: fs/ext3/inode.c:3567:
+			ext3_read_indblocks_submit(&bio, &read_info,
+						&read_cnt, seq_prefetch);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#1176: FILE: fs/ext3/inode.c:3666:
+	if (read_info)
+		kfree(read_info);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1209: FILE: fs/ext3/inode.c:3699:
+	BUG_ON(count < 1);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1210: FILE: fs/ext3/inode.c:3700:
+	BUG_ON(!first_bh);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1228: FILE: fs/ext3/inode.c:3718:
+	BUG_ON(ext3_buffer_prefetch(first_bh));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1236: FILE: fs/ext3/inode.c:3726:
+ * ^I@inode: inode of file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1237: FILE: fs/ext3/inode.c:3727:
+ * ^I@iblock: block number inside file (starting from 0).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1238: FILE: fs/ext3/inode.c:3728:
+ * ^I@depth: depth of path from inode to data block.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1239: FILE: fs/ext3/inode.c:3729:
+ * ^I@offsets: array of offsets within blocks identified in 'chain'.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1240: FILE: fs/ext3/inode.c:3730:
+ * ^I@chain: array of Indirect with info about all levels of blocks until$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1241: FILE: fs/ext3/inode.c:3731:
+ * ^Ithe data block.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1242: FILE: fs/ext3/inode.c:3732:
+ * ^I@err: error pointer.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1244: FILE: fs/ext3/inode.c:3734:
+ * ^IThis function is called after reading all metablocks leading to 'iblock'$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1245: FILE: fs/ext3/inode.c:3735:
+ * ^Iexcept the (singly) indirect block. It reads the indirect block if not$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1246: FILE: fs/ext3/inode.c:3736:
+ * ^Ialready in the cache and may also prefetch next few indirect blocks.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1247: FILE: fs/ext3/inode.c:3737:
+ * ^IIt uses a combination of synchronous and asynchronous requests to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1248: FILE: fs/ext3/inode.c:3738:
+ * ^Iaccomplish this. We do prefetching even for random reads by reading$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1249: FILE: fs/ext3/inode.c:3739:
+ * ^Iahead one indirect block since reads of size >=512KB have at least 12%$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1250: FILE: fs/ext3/inode.c:3740:
+ * ^Ichance of spanning two indirect blocks.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1263: FILE: fs/ext3/inode.c:3753:
+	BUG_ON(depth <= 2);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1264: FILE: fs/ext3/inode.c:3754:
+	BUG_ON(!chain[depth-2].key);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1264: FILE: fs/ext3/inode.c:3754:
+	BUG_ON(!chain[depth-2].key);
 	                   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1269: FILE: fs/ext3/inode.c:3759:
+	ind_blocks = chain[depth-2].p;
 	                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1272: FILE: fs/ext3/inode.c:3762:
+		printk(KERN_ERR "Failed to get block %u for sb %p\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1277: FILE: fs/ext3/inode.c:3767:
+	BUG_ON(first_bh->b_size != sb->s_blocksize);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1297: FILE: fs/ext3/inode.c:3787:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1323: FILE: fs/ext3/inode.c:3813:
+					     offsets[depth-2]);
 					                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1325: FILE: fs/ext3/inode.c:3815:
+		if ((ind_blocks - (__le32 *)chain[depth-2].bh->b_data) >= 1) {
 		                                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1336: FILE: fs/ext3/inode.c:3826:
+				*err = ext3_read_indblocks_sync(sb, ind_blocks,
+							 max_read, first_bh, 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1357: FILE: fs/ext3/inode.c:3847:
+					ext3_read_indblocks_async(sb,
+							&ind_blocks[1],

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1386: FILE: fs/ext3/inode.c:3876:
+		  (__le32*)first_bh->b_data + offsets[depth - 1]);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1391: FILE: fs/ext3/inode.c:3881:
+	BUG_ON(!buffer_uptodate(first_bh));

CHECK:BRACES: braces {} should be used on all arms of this statement
#1400: FILE: fs/ext3/inode.c:3890:
+	if (*err) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1403: FILE: fs/ext3/inode.c:3893:
+	} else

CHECK:CAMELCASE: Avoid CamelCase: <Opt_grpquota>
#1426: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:CAMELCASE: Avoid CamelCase: <Opt_metacluster>
#1426: FILE: fs/ext3/super.c:764:
+	Opt_grpquota, Opt_metacluster

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1511: FILE: include/linux/ext3_fs.h:780:
+extern int ext3_new_indirect_blocks(handle_t *handle, struct inode *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1511: FILE: include/linux/ext3_fs.h:780:
+extern int ext3_new_indirect_blocks(handle_t *handle, struct inode *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1511: FILE: include/linux/ext3_fs.h:780:
+extern int ext3_new_indirect_blocks(handle_t *handle, struct inode *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: include/linux/ext3_fs.h:781:
+extern int ext3_new_indirect_blocks(handle_t *handle, struct inode *,
+				unsigned long group_no, unsigned long *,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1524: FILE: include/linux/ext3_fs.h:904:
+ * ^IDetermines metacluster block range for all block groups of the file$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1525: FILE: include/linux/ext3_fs.h:905:
+ * ^Isystem.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1527: FILE: include/linux/ext3_fs.h:907:
+ * ^INumber of metacluster blocks = blocks_per_group/128. This allows us$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1528: FILE: include/linux/ext3_fs.h:908:
+ * ^Ito fit all indirect blocks in a block group with average file size of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1529: FILE: include/linux/ext3_fs.h:909:
+ * ^I256KB into the group's metacluster. We want to avoid having large$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1530: FILE: include/linux/ext3_fs.h:910:
+ * ^Imetaclusters because then we'll run of data blocks sooner and when$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1531: FILE: include/linux/ext3_fs.h:911:
+ * ^Iout of data blocks metaclustering goes for a toss.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1532: FILE: include/linux/ext3_fs.h:912:
+ * ^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1532: FILE: include/linux/ext3_fs.h:912:
+ * ^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1536: FILE: include/linux/ext3_fs.h:916:
+ext3_get_grp_metacluster(struct super_block *sb,
+				ext3_grpblk_t *mc_start,

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1540: FILE: include/linux/ext3_fs.h:920:
+	if (test_opt(sb, METACLUSTER)) {
[...]
+	} else {
[...]

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000357028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 78 warnings, 26 checks, 1285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000357028.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
