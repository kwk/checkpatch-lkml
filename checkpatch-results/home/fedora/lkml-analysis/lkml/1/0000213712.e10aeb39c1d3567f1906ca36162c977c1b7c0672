WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#80: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#85: FILE: drivers/staging/poch/Kconfig:1:
+config POCH
+	tristate "Redrapids Pocket Change CardBus support"
+	depends on PCI && UIO
+	default N
+	---help---
+	  Enable support for Redrapids Pocket Change CardBus devices.

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#117: FILE: drivers/staging/poch/poch.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#142: FILE: drivers/staging/poch/poch.c:26:
+#include <asm/cacheflush.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: drivers/staging/poch/poch.c:101:
+#define FPGA_DMA_INT_RX		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#218: FILE: drivers/staging/poch/poch.c:102:
+#define FPGA_DMA_INT_TX		(1 << 1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#329: FILE: drivers/staging/poch/poch.c:213:
+	spinlock_t *iomem_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#336: FILE: drivers/staging/poch/poch.c:220:
+	spinlock_t counters_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#356: FILE: drivers/staging/poch/poch.c:240:
+	spinlock_t iomem_lock;

WARNING:NAKED_SSCANF: unchecked sscanf return value
#372: FILE: drivers/staging/poch/poch.c:256:
+	sscanf(buf, "%lu", &block_size);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#372: FILE: drivers/staging/poch/poch.c:256:
+	sscanf(buf, "%lu", &block_size);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUSR|S_IWGRP' used
#376: FILE: drivers/staging/poch/poch.c:260:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#377: FILE: drivers/staging/poch/poch.c:261:
+static DEVICE_ATTR(block_size, S_IWUSR|S_IWGRP, NULL, store_block_size);
                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#377: FILE: drivers/staging/poch/poch.c:261:
+static DEVICE_ATTR(block_size, S_IWUSR|S_IWGRP, NULL, store_block_size);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:NAKED_SSCANF: unchecked sscanf return value
#386: FILE: drivers/staging/poch/poch.c:270:
+	sscanf(buf, "%lu", &group_size);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#386: FILE: drivers/staging/poch/poch.c:270:
+	sscanf(buf, "%lu", &group_size);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUSR|S_IWGRP' used
#390: FILE: drivers/staging/poch/poch.c:274:
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#391: FILE: drivers/staging/poch/poch.c:275:
+static DEVICE_ATTR(group_size, S_IWUSR|S_IWGRP, NULL, store_group_size);
                                       ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#391: FILE: drivers/staging/poch/poch.c:275:
+static DEVICE_ATTR(group_size, S_IWUSR|S_IWGRP, NULL, store_group_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: drivers/staging/poch/poch.c:278:
+static ssize_t store_group_count(struct device *dev,
+				struct device_attribute *attr,

WARNING:NAKED_SSCANF: unchecked sscanf return value
#400: FILE: drivers/staging/poch/poch.c:284:
+	sscanf(buf, "%lu", &group_count);

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#400: FILE: drivers/staging/poch/poch.c:284:
+	sscanf(buf, "%lu", &group_count);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUSR|S_IWGRP' used
#404: FILE: drivers/staging/poch/poch.c:288:
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#405: FILE: drivers/staging/poch/poch.c:289:
+static DEVICE_ATTR(group_count, S_IWUSR|S_IWGRP, NULL, store_group_count);
                                        ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR|S_IWGRP' are not preferred. Consider using octal permissions '0220'.
#405: FILE: drivers/staging/poch/poch.c:289:
+static DEVICE_ATTR(group_count, S_IWUSR|S_IWGRP, NULL, store_group_count);

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR|S_IRGRP' used
#415: FILE: drivers/staging/poch/poch.c:299:
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#416: FILE: drivers/staging/poch/poch.c:300:
+static DEVICE_ATTR(dir, S_IRUSR|S_IRGRP, show_direction, NULL);
                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#416: FILE: drivers/staging/poch/poch.c:300:
+static DEVICE_ATTR(dir, S_IRUSR|S_IRGRP, show_direction, NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#429: FILE: drivers/staging/poch/poch.c:313:
+	/* FIXME: We do not have to add 1, if group_size a multiple of
+	   PAGE_SIZE. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#429: FILE: drivers/staging/poch/poch.c:313:
+	   PAGE_SIZE. */

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IRUSR|S_IRGRP' used
#437: FILE: drivers/staging/poch/poch.c:321:
+}

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#438: FILE: drivers/staging/poch/poch.c:322:
+static DEVICE_ATTR(mmap_size, S_IRUSR|S_IRGRP, show_mmap_size, NULL);
                                      ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IRGRP' are not preferred. Consider using octal permissions '0440'.
#438: FILE: drivers/staging/poch/poch.c:322:
+static DEVICE_ATTR(mmap_size, S_IRUSR|S_IRGRP, show_mmap_size, NULL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#503: FILE: drivers/staging/poch/poch.c:387:
+		printk(KERN_INFO PFX "%ld: user_offset: 0x%lx dma: 0x%x\n", i,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#550: FILE: drivers/staging/poch/poch.c:434:
+	printk(KERN_WARNING "block_size, group_size, group_count\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#583: FILE: drivers/staging/poch/poch.c:467:
+		printk(KERN_INFO PFX "%ld: read dma_addr: 0x%x\n", i,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#588: FILE: drivers/staging/poch/poch.c:472:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#655: FILE: drivers/staging/poch/poch.c:539:
+	printk(KERN_WARNING "channel_latch_attr\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#670: FILE: drivers/staging/poch/poch.c:554:
+	printk(KERN_WARNING "poch_channel_alloc_groups\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#692: FILE: drivers/staging/poch/poch.c:576:
+	printk(KERN_WARNING "poch_channel_init_header\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#714: FILE: drivers/staging/poch/poch.c:598:
+	printk(KERN_WARNING "poch_wait_fpg_prog\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#716: FILE: drivers/staging/poch/poch.c:600:
+	printk(KERN_INFO PFX "programming fpga ...\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#724: FILE: drivers/staging/poch/poch.c:608:
+			printk(KERN_INFO PFX "programming done\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#728: FILE: drivers/staging/poch/poch.c:612:
+			printk(KERN_ERR PFX

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#811: FILE: drivers/staging/poch/poch.c:695:
+static int poch_open(struct inode *inode, struct file *filp)
                                                        ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#836: FILE: drivers/staging/poch/poch.c:720:
+	printk(KERN_WARNING "poch_card_power_on\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#844: FILE: drivers/staging/poch/poch.c:728:
+	printk(KERN_INFO "CardBus Bridge Revision: %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#846: FILE: drivers/staging/poch/poch.c:730:
+	printk(KERN_INFO "CardBus Interface Revision: %x\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#852: FILE: drivers/staging/poch/poch.c:736:
+	printk(KERN_WARNING "poch_channel_init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#860: FILE: drivers/staging/poch/poch.c:744:
+	printk(KERN_WARNING "channel_dma_init\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#864: FILE: drivers/staging/poch/poch.c:748:
+	printk(KERN_WARNING "poch_channel_analog_on\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#867: FILE: drivers/staging/poch/poch.c:751:
+		printk(KERN_WARNING "setting up DMA\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#916: FILE: drivers/staging/poch/poch.c:800:
+static int poch_release(struct inode *inode, struct file *filp)
                                                           ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#926: FILE: drivers/staging/poch/poch.c:810:
+		printk(KERN_WARNING "poch_card_power_off\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#942: FILE: drivers/staging/poch/poch.c:826:
+static int poch_mmap(struct file *filp, struct vm_area_struct *vma)
                                   ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#959: FILE: drivers/staging/poch/poch.c:843:
+	printk(KERN_WARNING "poch_mmap\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'poch_mmap', this function's name, in a string
#959: FILE: drivers/staging/poch/poch.c:843:
+	printk(KERN_WARNING "poch_mmap\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#962: FILE: drivers/staging/poch/poch.c:846:
+		printk(KERN_WARNING PFX "page offset: %lu\n", vma->vm_pgoff);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#972: FILE: drivers/staging/poch/poch.c:856:
+		printk(KERN_WARNING PFX "required %lu bytes\n", size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#981: FILE: drivers/staging/poch/poch.c:865:
+		printk(KERN_DEBUG PFX "page_count: %d\n", page_count(pg));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#982: FILE: drivers/staging/poch/poch.c:866:
+		printk(KERN_DEBUG PFX "%d: header: 0x%lx\n", pg_num, start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#985: FILE: drivers/staging/poch/poch.c:869:
+			printk(KERN_DEBUG "vm_insert 1 failed at %lx\n", start);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#994: FILE: drivers/staging/poch/poch.c:878:
+			printk(KERN_DEBUG PFX "%d: group %d: 0x%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#998: FILE: drivers/staging/poch/poch.c:882:
+				printk(KERN_DEBUG PFX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1023: FILE: drivers/staging/poch/poch.c:907:
+		if (channel->dir == CHANNEL_DIR_RX
+		    && channel->header->group_offsets[i] == -1) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1029: FILE: drivers/staging/poch/poch.c:913:
+		if (channel->dir == CHANNEL_DIR_TX
+		    && channel->header->group_offsets[i] != -1) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1040: FILE: drivers/staging/poch/poch.c:924:
+static unsigned int poch_poll(struct file *filp, poll_table *pt)
                                            ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1045: FILE: drivers/staging/poch/poch.c:929:
+	poll_wait(filp, &channel->wq, pt);
 	          ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1057: FILE: drivers/staging/poch/poch.c:941:
+static int poch_ioctl(struct inode *inode, struct file *filp,
                                                         ^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1072: FILE: drivers/staging/poch/poch.c:956:
+			printk(KERN_INFO PFX "ioctl: Tx start\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1082: FILE: drivers/staging/poch/poch.c:966:
+			printk(KERN_INFO PFX "ioctl: Rx start\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1091: FILE: drivers/staging/poch/poch.c:975:
+			printk(KERN_INFO PFX "ioctl: Tx stop\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1097: FILE: drivers/staging/poch/poch.c:981:
+			printk(KERN_INFO PFX "ioctl: Rx stop\n");

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1124: FILE: drivers/staging/poch/poch.c:1008:
+		if (vms->vm_file != filp)
 		                    ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1134: FILE: drivers/staging/poch/poch.c:1018:
+static struct file_operations poch_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#1219: FILE: drivers/staging/poch/poch.c:1103:
+			if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1220: FILE: drivers/staging/poch/poch.c:1104:
+				printk(KERN_WARNING PFX "PLL unlocked\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!poch_dev->dev"
#1252: FILE: drivers/staging/poch/poch.c:1136:
+	if (poch_dev->dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(poch_class_attrs)
#1262: FILE: drivers/staging/poch/poch.c:1146:
+		nattrs = sizeof(poch_class_attrs)/sizeof(poch_class_attrs[0]);

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1262: FILE: drivers/staging/poch/poch.c:1146:
+		nattrs = sizeof(poch_class_attrs)/sizeof(poch_class_attrs[0]);
 		                                 ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1272: FILE: drivers/staging/poch/poch.c:1156:
+static int __devinit poch_class_dev_register(struct poch_dev *poch_dev,

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(poch_class_attrs)
#1306: FILE: drivers/staging/poch/poch.c:1190:
+		nattrs = sizeof(poch_class_attrs)/sizeof(poch_class_attrs[0]);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1306: FILE: drivers/staging/poch/poch.c:1190:
+		nattrs = sizeof(poch_class_attrs)/sizeof(poch_class_attrs[0]);
 		                                 ^

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1321: FILE: drivers/staging/poch/poch.c:1205:
+static int __devinit poch_pci_probe(struct pci_dev *pdev,

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*poch_dev)...) over kzalloc(sizeof(struct poch_dev)...)
#1331: FILE: drivers/staging/poch/poch.c:1215:
+	poch_dev = kzalloc(sizeof(struct poch_dev), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1333: FILE: drivers/staging/poch/poch.c:1217:
+	if (!poch_dev) {
+		dev_err(dev, "error allocating priv. data memory\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!poch_dev->bridge_iomem"
#1387: FILE: drivers/staging/poch/poch.c:1271:
+	if (poch_dev->bridge_iomem == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!poch_dev->fpga_iomem"
#1395: FILE: drivers/staging/poch/poch.c:1279:
+	if (poch_dev->fpga_iomem == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1504: FILE: drivers/staging/poch/poch.c:1388:
+		printk(KERN_ERR PFX "error allocating device no.");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1516: FILE: drivers/staging/poch/poch.c:1400:
+		printk(KERN_ERR PFX "error register PCI device");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1548: FILE: drivers/staging/poch/poch.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 71 warnings, 20 checks, 1478 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213712.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
