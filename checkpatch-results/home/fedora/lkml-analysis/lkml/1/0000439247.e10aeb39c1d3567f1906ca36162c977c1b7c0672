WARNING:TYPO_SPELLING: 'peform' may be misspelled - perhaps 'perform'?
#34: 
__pa_symbol needs to peform an extra variable read to resolve
                     ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'addesses' may be misspelled - perhaps 'addresses'?
#38: 
__pa_vsymbol for finding the physical addesses of vsyscall pages.
                                      ^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#104: FILE: arch/i386/mm/init.c:778:
+		struct page *page = pfn_to_page(addr >> PAGE_SHIFT);
+		ClearPageReserved(page);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#175: FILE: arch/x86_64/kernel/setup.c:249:
+	code_resource.end = __pa_symbol(&_etext)-1;
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#177: FILE: arch/x86_64/kernel/setup.c:251:
+	data_resource.end = __pa_symbol(&_edata)-1;
 	                                        ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#203: FILE: arch/x86_64/kernel/vsyscall.c:49:
+^I({unsigned long v;  ^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#204: FILE: arch/x86_64/kernel/vsyscall.c:50:
+^Iextern char __vsyscall_0; ^I\$

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#204: FILE: arch/x86_64/kernel/vsyscall.c:50:
+	extern char __vsyscall_0; 	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LINE_SPACING: Missing a blank line after declarations
#237: FILE: arch/x86_64/mm/init.c:569:
+		struct page *page = pfn_to_page(addr >> PAGE_SHIFT);
+		ClearPageReserved(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: arch/x86_64/mm/pageattr.c:142:
+			split = split_large_page(pfn << PAGE_SHIFT, prot,
+							ref_prot2);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn >= phys_base_pfn'
#343: FILE: arch/x86_64/mm/pageattr.c:194:
+		if ((pfn >= phys_base_pfn) &&
+			((pfn - phys_base_pfn) < (KERNEL_TEXT_SIZE >> PAGE_SHIFT))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: arch/x86_64/mm/pageattr.c:195:
+		if ((pfn >= phys_base_pfn) &&
+			((pfn - phys_base_pfn) < (KERNEL_TEXT_SIZE >> PAGE_SHIFT))) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 5 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000439247.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
