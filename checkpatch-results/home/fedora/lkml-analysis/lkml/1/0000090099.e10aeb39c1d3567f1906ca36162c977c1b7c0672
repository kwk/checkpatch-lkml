ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#69: FILE: arch/x86/include/asm/hugetlb.h:40:
addr,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: arch/x86/include/asm/hugetlb.h:43:
+    mm_track_pmd((pmd_t *)ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#79: FILE: arch/x86/include/asm/hugetlb.h:50:
+    mm_track_pmd((pmd_t *)ptep);$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#90: FILE: arch/x86/include/asm/mm_track.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: arch/x86/include/asm/mm_track.h:19:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#109: FILE: arch/x86/include/asm/mm_track.h:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: arch/x86/include/asm/mm_track.h:20:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#126: FILE: arch/x86/include/asm/mm_track.h:36:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#129: FILE: arch/x86/include/asm/mm_track.h:39:
+  * elements of the structure are available for use.  Each time $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: arch/x86/include/asm/mm_track.h:55:
+    int active;        /* non-zero if this structure in use */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: arch/x86/include/asm/mm_track.h:56:
+    atomic_t count;        /* number of pages tracked by mm_track() */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: arch/x86/include/asm/mm_track.h:57:
+    unsigned long *vector;    /* bit vector of modified pages */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#149: FILE: arch/x86/include/asm/mm_track.h:58:
+    unsigned long bitcnt;    /* number of bits in vector */$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#151: FILE: arch/x86/include/asm/mm_track.h:60:
+};
+extern struct mm_tracker mm_tracking_struct;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#153: FILE: arch/x86/include/asm/mm_track.h:62:
+extern void do_mm_track_pte(void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#153: FILE: arch/x86/include/asm/mm_track.h:62:
+extern void do_mm_track_pte(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: arch/x86/include/asm/mm_track.h:63:
+extern void do_mm_track_pmd(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#154: FILE: arch/x86/include/asm/mm_track.h:63:
+extern void do_mm_track_pmd(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: arch/x86/include/asm/mm_track.h:64:
+extern void do_mm_track_pud(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#155: FILE: arch/x86/include/asm/mm_track.h:64:
+extern void do_mm_track_pud(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#156: FILE: arch/x86/include/asm/mm_track.h:65:
+extern void do_mm_track_pgd(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#156: FILE: arch/x86/include/asm/mm_track.h:65:
+extern void do_mm_track_pgd(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#157: FILE: arch/x86/include/asm/mm_track.h:66:
+extern void do_mm_track_phys(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#157: FILE: arch/x86/include/asm/mm_track.h:66:
+extern void do_mm_track_phys(void *);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: arch/x86/include/asm/mm_track.h:73:
+    if (unlikely(mm_tracking_struct.active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: arch/x86/include/asm/mm_track.h:74:
+        do_mm_track_pte(ptep);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#165: FILE: arch/x86/include/asm/mm_track.h:74:
+        do_mm_track_pte(ptep);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#167: FILE: arch/x86/include/asm/mm_track.h:76:
+}
+static inline void mm_track_pmd(pmd_t *pmdp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: arch/x86/include/asm/mm_track.h:78:
+    if (unlikely(mm_tracking_struct.active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: arch/x86/include/asm/mm_track.h:79:
+        do_mm_track_pmd(pmdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: arch/x86/include/asm/mm_track.h:79:
+        do_mm_track_pmd(pmdp);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#172: FILE: arch/x86/include/asm/mm_track.h:81:
+}
+static inline void mm_track_pud(pud_t *pudp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: arch/x86/include/asm/mm_track.h:83:
+    if (unlikely(mm_tracking_struct.active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: arch/x86/include/asm/mm_track.h:84:
+        do_mm_track_pud(pudp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: arch/x86/include/asm/mm_track.h:84:
+        do_mm_track_pud(pudp);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#177: FILE: arch/x86/include/asm/mm_track.h:86:
+}
+static inline void mm_track_pgd(pgd_t *pgdp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: arch/x86/include/asm/mm_track.h:88:
+    if (unlikely(mm_tracking_struct.active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#180: FILE: arch/x86/include/asm/mm_track.h:89:
+        do_mm_track_pgd(pgdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: arch/x86/include/asm/mm_track.h:89:
+        do_mm_track_pgd(pgdp);$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#182: FILE: arch/x86/include/asm/mm_track.h:91:
+}
+static inline void mm_track_phys(void *physp)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: arch/x86/include/asm/mm_track.h:93:
+    if (unlikely(mm_tracking_struct.active))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#185: FILE: arch/x86/include/asm/mm_track.h:94:
+        do_mm_track_phys(physp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: arch/x86/include/asm/mm_track.h:94:
+        do_mm_track_phys(physp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#200: FILE: arch/x86/include/asm/pgtable-2level.h:16:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#206: FILE: arch/x86/include/asm/pgtable-2level.h:22:
+    mm_track_pmd(pmdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: arch/x86/include/asm/pgtable-2level.h:39:
+    mm_track_pte(xp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: arch/x86/include/asm/pgtable-2level.h:46:
+    mm_track_pte(xp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#249: FILE: arch/x86/include/asm/pgtable-3level.h:29:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#257: FILE: arch/x86/include/asm/pgtable-3level.h:37:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: arch/x86/include/asm/pgtable-3level.h:43:
+    mm_track_pmd(pmdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: arch/x86/include/asm/pgtable-3level.h:49:
+    mm_track_pud(pudp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: arch/x86/include/asm/pgtable-3level.h:61:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: arch/x86/include/asm/pgtable-3level.h:71:
+    mm_track_pmd(pmd);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: arch/x86/include/asm/pgtable-3level.h:82:
+    mm_track_pud(pudp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#305: FILE: arch/x86/include/asm/pgtable-3level.h:106:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: arch/x86/include/asm/pgtable_64.h:50:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: arch/x86/include/asm/pgtable_64.h:56:
+    mm_track_pte(ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: arch/x86/include/asm/pgtable_64.h:67:
+    mm_track_pte(xp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#351: FILE: arch/x86/include/asm/pgtable_64.h:81:
+    mm_track_pmd(pmdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: arch/x86/include/asm/pgtable_64.h:92:
+    mm_track_pud(pudp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#367: FILE: arch/x86/include/asm/pgtable_64.h:103:
+    mm_track_pgd(pgdp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: arch/x86/include/asm/pgtable.h:94:
+    return pte_flags(pte) & (_PAGE_DIRTY | _PAGE_SOFTDIRTY);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#391: FILE: arch/x86/include/asm/pgtable.h:161:
+    return pte_clear_flags(pte, (_PAGE_DIRTY | _PAGE_SOFTDIRTY));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#423: FILE: arch/x86/include/asm/pgtable_types.h:74:
+             _PAGE_SPECIAL | _PAGE_ACCESSED | _PAGE_DIRTY | \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: arch/x86/include/asm/pgtable_types.h:74:
+             _PAGE_SPECIAL | _PAGE_ACCESSED | _PAGE_DIRTY | \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#424: FILE: arch/x86/include/asm/pgtable_types.h:75:
+             _PAGE_SOFTDIRTY)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#424: FILE: arch/x86/include/asm/pgtable_types.h:75:
+             _PAGE_SOFTDIRTY)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#472: FILE: arch/x86/mm/track.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#489: FILE: arch/x86/mm/track.c:18:
+ * along with this program; if not, write to the Free Software$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#490: FILE: arch/x86/mm/track.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  $

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#490: FILE: arch/x86/mm/track.c:19:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  $

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#497: FILE: arch/x86/mm/track.c:25:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#499: FILE: arch/x86/mm/track.c:27:
+#include <asm/pgtable.h>

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: arch/x86/mm/track.c:37:
+    pte_t *ptep = (pte_t *)val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#510: FILE: arch/x86/mm/track.c:38:
+    unsigned long pfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: arch/x86/mm/track.c:40:
+    if (!pte_present(*ptep))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#513: FILE: arch/x86/mm/track.c:41:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: arch/x86/mm/track.c:41:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: arch/x86/mm/track.c:43:
+    if (!pte_val(*ptep) & _PAGE_DIRTY)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#516: FILE: arch/x86/mm/track.c:44:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: arch/x86/mm/track.c:44:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: arch/x86/mm/track.c:46:
+    pfn = pte_pfn(*ptep);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: arch/x86/mm/track.c:48:
+    if (pfn >= mm_tracking_struct.bitcnt)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#521: FILE: arch/x86/mm/track.c:49:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: arch/x86/mm/track.c:49:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#524: FILE: arch/x86/mm/track.c:52:
+    pfn = pfn_to_mfn(pfn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: arch/x86/mm/track.c:55:
+    if (!test_and_set_bit(pfn, mm_tracking_struct.vector))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#528: FILE: arch/x86/mm/track.c:56:
+        atomic_inc(&mm_tracking_struct.count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: arch/x86/mm/track.c:56:
+        atomic_inc(&mm_tracking_struct.count);$

CHECK:BIT_MACRO: Prefer using the BIT macro
#532: FILE: arch/x86/mm/track.c:60:
+#define LARGE_PMD_SIZE    (1 << PMD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: arch/x86/mm/track.c:64:
+    int i;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: arch/x86/mm/track.c:65:
+    pte_t *pte;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: arch/x86/mm/track.c:66:
+    pmd_t *pmd = (pmd_t *)val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#540: FILE: arch/x86/mm/track.c:68:
+    if (!pmd_present(*pmd))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#541: FILE: arch/x86/mm/track.c:69:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: arch/x86/mm/track.c:69:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: arch/x86/mm/track.c:71:
+    if (unlikely(pmd_large(*pmd))) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#544: FILE: arch/x86/mm/track.c:72:
+        unsigned long addr, end;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: arch/x86/mm/track.c:72:
+        unsigned long addr, end;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#546: FILE: arch/x86/mm/track.c:74:
+        if (!pte_val(*(pte_t *)val) & _PAGE_DIRTY)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: arch/x86/mm/track.c:74:
+        if (!pte_val(*(pte_t *)val) & _PAGE_DIRTY)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#546: FILE: arch/x86/mm/track.c:74:
+        if (!pte_val(*(pte_t *)val) & _PAGE_DIRTY)
+            return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#547: FILE: arch/x86/mm/track.c:75:
+            return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: arch/x86/mm/track.c:75:
+            return;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#549: FILE: arch/x86/mm/track.c:77:
+        addr = pte_pfn(*(pte_t *)val) << PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: arch/x86/mm/track.c:77:
+        addr = pte_pfn(*(pte_t *)val) << PAGE_SHIFT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#550: FILE: arch/x86/mm/track.c:78:
+        end = addr + LARGE_PMD_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: arch/x86/mm/track.c:78:
+        end = addr + LARGE_PMD_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#552: FILE: arch/x86/mm/track.c:80:
+        while (addr < end) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#552: FILE: arch/x86/mm/track.c:80:
+        while (addr < end) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#552: FILE: arch/x86/mm/track.c:80:
+        while (addr < end) {
+            do_mm_track_phys((void *)addr);

ERROR:CODE_INDENT: code indent should use tabs where possible
#553: FILE: arch/x86/mm/track.c:81:
+            do_mm_track_phys((void *)addr);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#553: FILE: arch/x86/mm/track.c:81:
+            do_mm_track_phys((void *)addr);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#554: FILE: arch/x86/mm/track.c:82:
+            addr +=  PAGE_SIZE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: arch/x86/mm/track.c:82:
+            addr +=  PAGE_SIZE;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#555: FILE: arch/x86/mm/track.c:83:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#555: FILE: arch/x86/mm/track.c:83:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#556: FILE: arch/x86/mm/track.c:84:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#556: FILE: arch/x86/mm/track.c:84:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: arch/x86/mm/track.c:85:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: arch/x86/mm/track.c:87:
+    pte = pte_offset_kernel(pmd, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: arch/x86/mm/track.c:89:
+    for (i = 0; i < PTRS_PER_PTE; i++, pte++)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#562: FILE: arch/x86/mm/track.c:90:
+        do_mm_track_pte(pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: arch/x86/mm/track.c:90:
+        do_mm_track_pte(pte);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: arch/x86/mm/track.c:96:
+    unsigned long pfn = pte_pfn(*(pte_t *)val);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#569: FILE: arch/x86/mm/track.c:97:
+    unsigned long pfn = pte_pfn(*(pte_t *)val);
+    if (pfn >= mm_tracking_struct.bitcnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: arch/x86/mm/track.c:97:
+    if (pfn >= mm_tracking_struct.bitcnt)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: arch/x86/mm/track.c:98:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: arch/x86/mm/track.c:98:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: arch/x86/mm/track.c:101:
+    pfn = pfn_to_mfn(pfn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/x86/mm/track.c:104:
+    if (!test_and_set_bit(pfn, mm_tracking_struct.vector))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/x86/mm/track.c:105:
+        atomic_inc(&mm_tracking_struct.count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: arch/x86/mm/track.c:105:
+        atomic_inc(&mm_tracking_struct.count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: arch/x86/mm/track.c:110:
+    track_as_pte(val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: arch/x86/mm/track.c:116:
+    track_as_pte(val);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: arch/x86/mm/track.c:122:
+    unsigned long pfn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: arch/x86/mm/track.c:124:
+    pfn = (unsigned long)val >> PAGE_SHIFT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: arch/x86/mm/track.c:126:
+    if (pfn >= mm_tracking_struct.bitcnt)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: arch/x86/mm/track.c:127:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: arch/x86/mm/track.c:127:
+        return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: arch/x86/mm/track.c:130:
+    pfn = pfn_to_mfn(pfn);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: arch/x86/mm/track.c:133:
+    if (!test_and_set_bit(pfn, mm_tracking_struct.vector))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: arch/x86/mm/track.c:134:
+        atomic_inc(&mm_tracking_struct.count);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: arch/x86/mm/track.c:134:
+        atomic_inc(&mm_tracking_struct.count);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#610: FILE: arch/x86/mm/track.c:138:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: arch/x86/mm/track.c:145:
+    mm_tracking_struct.vector = vmalloc((num_pages + 7)/8);$

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#617: FILE: arch/x86/mm/track.c:145:
+    mm_tracking_struct.vector = vmalloc((num_pages + 7)/8);
                                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: arch/x86/mm/track.c:146:
+    if (mm_tracking_struct.vector == NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm_tracking_struct.vector"
#618: FILE: arch/x86/mm/track.c:146:
+    if (mm_tracking_struct.vector == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: arch/x86/mm/track.c:147:
+        printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: arch/x86/mm/track.c:147:
+        printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#619: FILE: arch/x86/mm/track.c:147:
+        printk(KERN_WARNING

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#619: FILE: arch/x86/mm/track.c:147:
+    if (mm_tracking_struct.vector == NULL) {
+        printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: arch/x86/mm/track.c:148:
+               "%s: failed to allocate bit vector\n", __func__);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: arch/x86/mm/track.c:148:
+               "%s: failed to allocate bit vector\n", __func__);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: arch/x86/mm/track.c:149:
+        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: arch/x86/mm/track.c:149:
+        return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: arch/x86/mm/track.c:150:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: arch/x86/mm/track.c:152:
+    mm_tracking_struct.bitcnt = num_pages;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/x86/mm/track.c:154:
+    return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: arch/x86/mm/track.c:167:
+    mm_tracking_struct.active = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: arch/x86/mm/track.c:168:
+    mm_tracking_struct.bitcnt = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: arch/x86/mm/track.c:170:
+    if (mm_tracking_struct.vector != NULL)$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mm_tracking_struct.vector"
#642: FILE: arch/x86/mm/track.c:170:
+    if (mm_tracking_struct.vector != NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#643: FILE: arch/x86/mm/track.c:171:
+        vfree(mm_tracking_struct.vector);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: arch/x86/mm/track.c:171:
+        vfree(mm_tracking_struct.vector);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 39 errors, 109 warnings, 18 checks, 502 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090099.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
