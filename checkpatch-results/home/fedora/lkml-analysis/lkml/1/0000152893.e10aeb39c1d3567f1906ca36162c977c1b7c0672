WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#48: FILE: drivers/dma/dmatest.c:42:
+module_param(xor_sources, uint, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#50: FILE: drivers/dma/dmatest.c:44:
+MODULE_PARM_DESC(xor_sources,
+		"Number of xor source buffers (default: 3)");

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#90: FILE: drivers/dma/dmatest.c:117:
+				| (~i & PATTERN_COUNT_MASK);;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: drivers/dma/dmatest.c:167:
+static unsigned int dmatest_verify(u8 **bufs, unsigned int start,
 		unsigned int end, unsigned int counter, u8 pattern,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#183: FILE: drivers/dma/dmatest.c:224:
+^Ienum dma_ctrl_flags ^Iflags;$

CHECK:BRACES: braces {} should be used on all arms of this statement
#201: FILE: drivers/dma/dmatest.c:236:
+	if (thread->type == DMA_MEMCPY)
[...]
+	else if (thread->type == DMA_XOR) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#202: FILE: drivers/dma/dmatest.c:237:
+		src_cnt = dst_cnt = 1;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:BRACES: Unbalanced braces around else statement
#206: FILE: drivers/dma/dmatest.c:241:
+	} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#209: FILE: drivers/dma/dmatest.c:244:
+	thread->srcs = kcalloc(src_cnt+1, sizeof(u8 *), GFP_KERNEL);
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#219: FILE: drivers/dma/dmatest.c:254:
+	thread->dsts = kcalloc(dst_cnt+1, sizeof(u8 *), GFP_KERNEL);
 	                              ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#305: FILE: drivers/dma/dmatest.c:337:
+			status = dma_async_is_tx_complete(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: drivers/dma/dmatest.c:447:
+		thread->task = kthread_run(dmatest_func, thread, "%s-%s%u",
+				dma_chan_name(chan), op, i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#418: FILE: drivers/dma/dmatest.c:450:
+			pr_warning("dmatest: Failed to run thread %s-%s%u\n",
+					dma_chan_name(chan), op, i);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*dtc)...) over kmalloc(sizeof(struct dmatest_chan)...)
#437: FILE: drivers/dma/dmatest.c:470:
+	dtc = kmalloc(sizeof(struct dmatest_chan), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#439: FILE: drivers/dma/dmatest.c:472:
+	if (!dtc) {
+		pr_warning("dmatest: No memory for %s\n", dma_chan_name(chan));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152893.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 11 checks, 405 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152893.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
