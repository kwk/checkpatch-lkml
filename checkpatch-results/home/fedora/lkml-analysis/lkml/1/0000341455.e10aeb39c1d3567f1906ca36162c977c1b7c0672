WARNING:BAD_SIGN_OFF: email address 'linux-mm@kvack.org, lee.schermerhorn@hp.com' might be better as 'linux-mm@kvack.org lee.schermerhorn@hp.com'
#31: 
Cc: linux-mm@kvack.org, lee.schermerhorn@hp.com

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:BAD_SIGN_OFF: Unexpected content after email: 'linux-mm@kvack.org, lee.schermerhorn@hp.com', should be: 'linux-mm@kvack.org (lee.schermerhorn@hp.com)'
#31: 
Cc: linux-mm@kvack.org, lee.schermerhorn@hp.com

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#110: FILE: mm/internal.h:37:
+extern int isolate_lru_page(struct page *page);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: mm/internal.h:46:
+extern void putback_lru_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#124: FILE: mm/internal.h:51:
+extern int is_mlocked_vma(struct vm_area_struct *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#124: FILE: mm/internal.h:51:
+extern int is_mlocked_vma(struct vm_area_struct *, struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#124: FILE: mm/internal.h:51:
+extern int is_mlocked_vma(struct vm_area_struct *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#129: FILE: mm/internal.h:56:
+extern void mlock_vma_page(struct page *page);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: mm/internal.h:58:
+extern int __mlock_vma_pages_range(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#132: FILE: mm/internal.h:59:
+extern int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: mm/internal.h:64:
+extern int mlock_vma_pages_range(struct vm_area_struct *vma,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: mm/internal.h:65:
+extern int mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#145: FILE: mm/internal.h:72:
+static inline int munlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#154: FILE: mm/internal.h:81:
+extern void clear_page_mlock(struct page *page);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#161: FILE: mm/internal.h:88:
+}
+static inline void clear_page_mlock(struct page *page) { }

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#164: FILE: mm/internal.h:91:
+static inline int mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end) { return 0; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: mm/internal.h:93:
+static inline int munlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end) { return 0; }

CHECK:BRACES: braces {} should be used on all arms of this statement
#256: FILE: mm/migrate.c:354:
+	if (TestClearPageActive(page)) {
[...]
+	} else if (TestClearPageNoreclaim(page))
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#300: FILE: mm/migrate.c:857:
+		if (err) {
[...]
+			/*
[...]

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: mm/migrate.c:865:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#598: FILE: mm/vmscan.c:877:
+			int lru = LRU_BASE;
+			ret = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: mm/vmscan.c:965:
+		__mod_zone_page_state(zone, NR_ACTIVE_FILE,
+						-count[LRU_ACTIVE_FILE]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: mm/vmscan.c:967:
+		__mod_zone_page_state(zone, NR_INACTIVE_FILE,
+						-count[LRU_INACTIVE_FILE]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#690: FILE: mm/vmscan.c:969:
+		__mod_zone_page_state(zone, NR_ACTIVE_ANON,
+						-count[LRU_ACTIVE_ANON]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: mm/vmscan.c:971:
+		__mod_zone_page_state(zone, NR_INACTIVE_ANON,
+						-count[LRU_INACTIVE_ANON]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#972: FILE: mm/vmscan.c:1176:
+			__mod_zone_page_state(zone, NR_INACTIVE_ANON + lru,
+								pgmoved);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1006: FILE: mm/vmscan.c:1207:
+			__mod_zone_page_state(zone, NR_INACTIVE_ANON + lru,
+								pgmoved);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1016: FILE: mm/vmscan.c:1217:
+	if (file) {
[...]
+	} else {
[...]

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: mm/vmscan.c:1260:
+static unsigned long shrink_list(enum lru_list lru, unsigned long nr_to_scan,
+	struct zone *zone, struct scan_control *sc, int priority)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1085: FILE: mm/vmscan.c:1285:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: mm/vmscan.c:1286:
+static void get_scan_ratio(struct zone *zone, struct scan_control * sc,
+					unsigned long *percent)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1138: FILE: mm/vmscan.c:1338:
+
+

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#1199: FILE: mm/vmscan.c:1367:
+		} else {
[...]
+		nr[l] = mem_cgroup_calc_reclaim(sc->mem_cgroup, zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: mm/vmscan.c:1374:
+		nr[l] = mem_cgroup_calc_reclaim(sc->mem_cgroup, zone,
+							priority, l);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1215: FILE: mm/vmscan.c:1379:
+	while (nr[LRU_INACTIVE_ANON] || nr[LRU_ACTIVE_FILE] ||
+					nr[LRU_INACTIVE_FILE]) {

WARNING:MINMAX: min() should probably be min_t(unsigned long, nr[l], sc->swap_cluster_max)
#1218: FILE: mm/vmscan.c:1382:
+				nr_to_scan = min(nr[l],
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1219: FILE: mm/vmscan.c:1383:
+				nr_to_scan = min(nr[l],
 					(unsigned long)sc->swap_cluster_max);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1266: FILE: mm/vmscan.c:1689:
+				shrink_active_list(SWAP_CLUSTER_MAX, zone,
+							&sc, priority, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1321: FILE: mm/vmscan.c:1923:
+			if (pass == 0 &&
+				(l == LRU_ACTIVE_ANON || l == LRU_ACTIVE_FILE))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1418: FILE: mm/vmscan.c:2287:
+{
+

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1440: FILE: mm/vmscan.c:2309:
+static void check_move_noreclaim_page(struct page *page, struct zone* zone)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1442: FILE: mm/vmscan.c:2311:
+{
+

ERROR:SPACING: space required before the open parenthesis '('
#1444: FILE: mm/vmscan.c:2313:
+	if(page_reclaimable(page, NULL)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1446: FILE: mm/vmscan.c:2315:
+		enum lru_list l = LRU_INACTIVE_ANON + page_file_cache(page);
+		__dec_zone_state(zone, NR_NORECLAIM);

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#1481: FILE: mm/vmscan.c:2350:
+			struct page* page = lru_to_page(l_noreclaim);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1499: FILE: mm/vmscan.c:2368:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1540: FILE: mm/vmscan.c:2409:
+	while (next < end &&
+		pagevec_lookup(&pvec, mapping, next, PAGEVEC_SIZE)) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1569: FILE: mm/vmscan.c:2438:
+
+		}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1575: FILE: mm/vmscan.c:2444:
+
+}

ERROR:SPACING: space prohibited after that open parenthesis '('
#1583: FILE: mm/vmscan.c:2452:
+int scan_noreclaim_handler( struct ctl_table *table, int write,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1607: FILE: mm/vmscan.c:2476:
+                                       const char *buf, size_t count)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1607: FILE: mm/vmscan.c:2476:
+static ssize_t write_scan_noreclaim_node(struct sys_device *dev,
+                                       const char *buf, size_t count)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1607: FILE: mm/vmscan.c:2476:
+                                       const char *buf, size_t count)$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1611: FILE: mm/vmscan.c:2480:
+	unsigned long req = simple_strtoul(buf, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1624: FILE: mm/vmscan.c:2493:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#1625: FILE: mm/vmscan.c:2494:
+static SYSDEV_ATTR(scan_noreclaim_pages, S_IRUGO | S_IWUSR,

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1639: FILE: mm/vmscan.c:2508:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1701: FILE: mm/swap.c:122:
+^I ^Iif (PageLRU(page) && !PageActive(page) && \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1701: FILE: mm/swap.c:122:
+^I ^Iif (PageLRU(page) && !PageActive(page) && \$

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1701: FILE: mm/swap.c:122:
+	 	if (PageLRU(page) && !PageActive(page) && \

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1705: FILE: mm/swap.c:126:
+				list_move_tail(&page->lru,
+						&zone->list[LRU_INACTIVE_FILE]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1708: FILE: mm/swap.c:129:
+				list_move_tail(&page->lru,
+						&zone->list[LRU_INACTIVE_ANON]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1730: FILE: mm/swap.c:185:
+		int lru = LRU_BASE;
+		lru += page_file_cache(page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1746: FILE: mm/swap.c:207:
+	if (!PageActive(page) && !PageNoreclaim(page) &&
+			PageReferenced(page) && PageLRU(page)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1816: FILE: mm/swap.c:275:
+void fastcall lru_cache_add_active_or_noreclaim(struct page *page,
+					struct vm_area_struct *vma)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1818: FILE: mm/swap.c:277:
+	if (page_reclaimable(page, vma)) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1823: FILE: mm/swap.c:282:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1835: FILE: mm/swap.c:294:
+void fastcall lru_cache_add_active_or_noreclaim(struct page *page,
+					struct vm_area_struct *vma)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageLRU>
#1911: FILE: mm/swap.c:424:
+				__ClearPageLRU(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1946: FILE: mm/swap.c:514:
+EXPORT_SYMBOL(__pagevec_lru_add_file);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2117: FILE: include/linux/mm_inline.h:1:
+#ifndef LINUX_MM_INLINE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#2136: FILE: include/linux/mm_inline.h:18:
+	struct address_space * mapping = page_mapping(page);

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageNoreclaim>
#2249: FILE: include/linux/mm_inline.h:122:
+		__ClearPageNoreclaim(page);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2332: FILE: include/linux/page-flags.h:97:
 
+

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageSwapBacked>
#2361: FILE: include/linux/page-flags.h:228:
+#define __ClearPageSwapBacked(page)	__clear_bit(PG_swapbacked, &(page)->flags)

CHECK:CAMELCASE: Avoid CamelCase: <__ClearPageMlocked>
#2381: FILE: include/linux/page-flags.h:281:
+#define __ClearPageMlocked(page) __clear_bit(PG_mlocked, &(page)->flags)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2497: FILE: mm/page_alloc.c:494:
+//  ^I^I^I1 << PG_mlocked |$

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2532: FILE: mm/page_alloc.c:667:
+			1 << PG_mlocked );

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2541: FILE: mm/page_alloc.c:1909:
+	printk("Active_anon:%lu active_file:%lu inactive_anon%lu\n"

WARNING:SPLIT_STRING: quoted string split across lines
#2567: FILE: mm/page_alloc.c:1946:
 			" high:%lukB"
+			" active_anon:%lukB"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#2568: FILE: mm/page_alloc.c:1947:
+			" active_anon:%lukB"
+			" inactive_anon:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#2569: FILE: mm/page_alloc.c:1948:
+			" inactive_anon:%lukB"
+			" active_file:%lukB"

WARNING:SPLIT_STRING: quoted string split across lines
#2570: FILE: mm/page_alloc.c:1949:
+			" active_file:%lukB"
+			" inactive_file:%lukB"

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2693: FILE: include/linux/mmzone.h:93:
+	NR_NORECLAIM=NR_ACTIVE_FILE,	/* avoid compiler errors in dead code */
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2694: FILE: include/linux/mmzone.h:94:
+	NR_MLOCK=NR_ACTIVE_FILE,	/* avoid compiler errors... */
 	        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#2736: FILE: include/linux/mmzone.h:138:
+	LRU_NORECLAIM=LRU_ACTIVE_FILE,	/* avoid compiler errors in dead code */
 	             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#2741: FILE: include/linux/mmzone.h:143:
+#define for_each_lru(l) for (l = 0; l < NR_LRU_LISTS; l++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'l' - possible side-effects?
#2743: FILE: include/linux/mmzone.h:145:
+#define for_each_reclaimable_lru(l) for (l = 0; l <= LRU_ACTIVE_FILE; l++)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2748: FILE: include/linux/mmzone.h:150:
+	return (l/2 == 1);
 	         ^

WARNING:SPLIT_STRING: quoted string split across lines
#2811: FILE: mm/vmstat.c:761:
 		   "\n        high     %lu"
+		   "\n        scanned  %lu (aa: %lu ia: %lu af: %lu if: %lu)"

WARNING:SPLIT_STRING: quoted string split across lines
#2832: FILE: mm/vmstat.c:809:
 		   "\n  prev_priority:     %i"
+		   "\n  start_pfn:         %lu"

WARNING:SPLIT_STRING: quoted string split across lines
#2833: FILE: mm/vmstat.c:810:
+		   "\n  start_pfn:         %lu"
+		   "\n  inactive_ratio:    %u",

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3181: FILE: include/linux/vmstat.h:152:
+extern unsigned long global_lru_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3238: FILE: include/linux/swap.h:175:
+extern void FASTCALL(lru_cache_add_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3238: FILE: include/linux/swap.h:175:
+extern void FASTCALL(lru_cache_add_file(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3239: FILE: include/linux/swap.h:176:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3239: FILE: include/linux/swap.h:176:
+extern void FASTCALL(lru_cache_add_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3240: FILE: include/linux/swap.h:177:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3240: FILE: include/linux/swap.h:177:
+extern void FASTCALL(lru_cache_add_active_file(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3241: FILE: include/linux/swap.h:178:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#3241: FILE: include/linux/swap.h:178:
+extern void FASTCALL(lru_cache_add_active_anon(struct page *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3242: FILE: include/linux/swap.h:179:
+extern void FASTCALL(lru_cache_add_active_or_noreclaim(struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3243: FILE: include/linux/swap.h:180:
+extern void FASTCALL(lru_cache_add_active_or_noreclaim(struct page *page,
+						struct vm_area_struct *vma));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3245: FILE: include/linux/swap.h:182:
+extern void FASTCALL(lru_cache_add_noreclaim(struct page *page));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3257: FILE: include/linux/swap.h:198:
+extern int __isolate_lru_page(struct page *page, int mode, int file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3266: FILE: include/linux/swap.h:218:
+extern int page_reclaimable(struct page *page, struct vm_area_struct *vma);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3267: FILE: include/linux/swap.h:219:
+extern void scan_zone_noreclaim_pages(struct zone *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct zone *' should also have an identifier name
#3267: FILE: include/linux/swap.h:219:
+extern void scan_zone_noreclaim_pages(struct zone *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3268: FILE: include/linux/swap.h:220:
+extern void scan_all_zones_noreclaim_pages(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3269: FILE: include/linux/swap.h:221:
+extern void scan_mapping_noreclaim_pages(struct address_space *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#3269: FILE: include/linux/swap.h:221:
+extern void scan_mapping_noreclaim_pages(struct address_space *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#3271: FILE: include/linux/swap.h:223:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3272: FILE: include/linux/swap.h:224:
+extern int scan_noreclaim_handler(struct ctl_table *, int, struct file *,
+					void __user *, size_t *, loff_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3273: FILE: include/linux/swap.h:225:
+extern int scan_noreclaim_register_node(struct node *node);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3274: FILE: include/linux/swap.h:226:
+extern void scan_noreclaim_unregister_node(struct node *node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3277: FILE: include/linux/swap.h:229:
+static inline int page_reclaimable(struct page *page,
+						struct vm_area_struct *vma)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3281: FILE: include/linux/swap.h:233:
+}
+static inline void scan_zone_noreclaim_pages(struct zone *z) { }

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3286: FILE: include/linux/swap.h:238:
+}
+static inline int scan_noreclaim_register_node(struct node *node)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3290: FILE: include/linux/swap.h:242:
+}
+static inline void scan_noreclaim_unregister_node(struct node *node) { }

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3317: FILE: include/linux/memcontrol.h:72:
+extern long mem_cgroup_calc_reclaim(struct mem_cgroup *mem, struct zone *zone,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3318: FILE: include/linux/memcontrol.h:73:
+extern long mem_cgroup_calc_reclaim(struct mem_cgroup *mem, struct zone *zone,
+					int priority, enum lru_list lru);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3335: FILE: include/linux/memcontrol.h:172:
+static inline long mem_cgroup_calc_reclaim(struct mem_cgroup *mem,
+					struct zone *zone, int priority,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3512: FILE: mm/memcontrol.c:463:
+long mem_cgroup_calc_reclaim(struct mem_cgroup *mem, struct zone *zone,
+				int priority, enum lru_list lru)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3643: FILE: mm/memcontrol.c:976:
+		inactive_anon = mem_cgroup_get_all_zonestat(mem_cont,
+						LRU_INACTIVE_ANON);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3645: FILE: mm/memcontrol.c:978:
+		active_anon = mem_cgroup_get_all_zonestat(mem_cont,
+						LRU_ACTIVE_ANON);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3647: FILE: mm/memcontrol.c:980:
+		inactive_file = mem_cgroup_get_all_zonestat(mem_cont,
+						LRU_INACTIVE_FILE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3649: FILE: mm/memcontrol.c:982:
+		active_file = mem_cgroup_get_all_zonestat(mem_cont,
+						LRU_ACTIVE_FILE);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#3792: FILE: drivers/block/brd.c:380:
+static int brd_open(struct inode *inode, struct file *filp)
                                                       ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3860: FILE: mm/mlock.c:61:
+	BUG_ON(!PageLocked(page));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3875: FILE: mm/mlock.c:76:
+	BUG_ON(!PageLocked(page));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3901: FILE: mm/mlock.c:102:
+	BUG_ON(!PageLocked(page));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3951: FILE: mm/mlock.c:152:
+int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3960: FILE: mm/mlock.c:161:
+	BUG_ON(start & ~PAGE_MASK || end & ~PAGE_MASK);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3980: FILE: mm/mlock.c:181:
+		ret = get_user_pages(current, mm, addr,
+				min_t(int, nr_pages, ARRAY_SIZE(pages)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4032: FILE: mm/mlock.c:233:
+int mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4055: FILE: mm/mlock.c:256:
+int __mlock_vma_pages_range(struct vm_area_struct *vma,
+			unsigned long start, unsigned long end, int lock)

CHECK:BRACES: braces {} should be used on all arms of this statement
#4293: FILE: mm/rmap.c:914:
+		if (TRY_TO_UNLOCK && unlikely(unlock)) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4298: FILE: mm/rmap.c:919:
+			break;			/* no need to look further */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#4298: FILE: mm/rmap.c:919:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#4357: FILE: mm/rmap.c:975:
+		if (TRY_TO_UNLOCK && unlikely(unlock)) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#4362: FILE: mm/rmap.c:980:
+			break;			/* no need to look further */
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#4362: FILE: mm/rmap.c:980:
+		} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#4499: FILE: mm/mmap.c:1899:
+		struct vm_area_struct *tmp = vma;
+		while (tmp && tmp->vm_start < end) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4502: FILE: mm/mmap.c:1902:
+				munlock_vma_pages_range(tmp,
+						 tmp->vm_start, tmp->vm_end);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4537: FILE: mm/mmap.c:2066:
+				munlock_vma_pages_range(vma,
+						vma->vm_start, vma->vm_end);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4544: FILE: mm/mmap.c:2073:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4568: FILE: mm/mremap.c:238:
+			mlock_vma_pages_range(vma, new_addr + old_len,
+						   new_addr + new_len);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4578: FILE: mm/mremap.c:379:
+				mlock_vma_pages_range(vma, addr + old_len,
 						   addr + new_len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341455.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 46 warnings, 96 checks, 4201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341455.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
