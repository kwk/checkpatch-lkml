WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#37: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#42: FILE: fs/unionfs/lookup.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#87: FILE: fs/unionfs/lookup.c:46:
+	BUG_ON(!S_ISDIR(lower_inode->i_mode));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#128: FILE: fs/unionfs/lookup.c:87:
+				      struct nameidata *nd, int lookupmode)
 				                        ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#157: FILE: fs/unionfs/lookup.c:116:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "UNIONFS_D"
#157: FILE: fs/unionfs/lookup.c:116:
+		BUG_ON(UNIONFS_D(dentry) != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#202: FILE: fs/unionfs/lookup.c:161:
+	BUG_ON(bstart < 0);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bopaque < bend'
#211: FILE: fs/unionfs/lookup.c:170:
+		if ((bopaque != -1) && (bopaque < bend))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#219: FILE: fs/unionfs/lookup.c:178:
+		BUG_ON(lower_dentry != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "lower_dentry"
#219: FILE: fs/unionfs/lookup.c:178:
+		BUG_ON(lower_dentry != NULL);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#235: FILE: fs/unionfs/lookup.c:194:
+			if (unlikely(IS_ERR(whname))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#260: FILE: fs/unionfs/lookup.c:219:
+			printk(KERN_ERR "unionfs: EIO: invalid whiteout "

WARNING:SPLIT_STRING: quoted string split across lines
#261: FILE: fs/unionfs/lookup.c:220:
+			printk(KERN_ERR "unionfs: EIO: invalid whiteout "
+			       "entry type %d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#330: FILE: fs/unionfs/lookup.c:289:
+			BUG_ON(!S_ISDIR(unionfs_lower_dentry(dentry)->

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#389: FILE: fs/unionfs/lookup.c:348:
+		BUG_ON(dentry->d_inode != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "dentry->d_inode"
#389: FILE: fs/unionfs/lookup.c:348:
+		BUG_ON(dentry->d_inode != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#396: FILE: fs/unionfs/lookup.c:355:
+	BUG_ON(dentry_count <= 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#458: FILE: fs/unionfs/lookup.c:417:
+		BUG_ON(dbend(dentry) > UNIONFS_D(dentry)->bcount);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: fs/unionfs/lookup.c:418:
+		BUG_ON(dbend(dentry) > sbmax(dentry->d_sb));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'lookupmode == INTERPOSE_LOOKUP'
#473: FILE: fs/unionfs/lookup.c:432:
+	if (err && (lookupmode == INTERPOSE_LOOKUP))

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#491: FILE: fs/unionfs/lookup.c:450:
+	struct nameidata nd = { .flags = 0 };
 	                 ^^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#492: FILE: fs/unionfs/lookup.c:451:
+	int err = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#494: FILE: fs/unionfs/lookup.c:453:
+	tmp = unionfs_lookup_backend(dentry, &nd, INTERPOSE_PARTIAL);
 	                                      ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#504: FILE: fs/unionfs/lookup.c:463:
+	BUG_ON(tmp != dentry);

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#518: FILE: fs/unionfs/lookup.c:477:
+	return (unionfs_dentry_cachep ? 0 : -ENOMEM);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

WARNING:NEEDLESS_IF: kmem_cache_destroy(NULL) is safe and this check is probably not required
#524: FILE: fs/unionfs/lookup.c:483:
+	if (unionfs_dentry_cachep)
+		kmem_cache_destroy(unionfs_dentry_cachep);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#541: FILE: fs/unionfs/lookup.c:500:
+	BUG_ON(!info);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#555: FILE: fs/unionfs/lookup.c:514:
+	atomic_set(&info->generation,
+			atomic_read(&UNIONFS_SB(dentry->d_sb)->generation));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#578: FILE: fs/unionfs/lookup.c:537:
+	BUG_ON(info);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#623: FILE: fs/unionfs/lookup.c:582:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#627: FILE: fs/unionfs/lookup.c:586:
+ * Inside that nd structure, this function may also return an allocated
                ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#628: FILE: fs/unionfs/lookup.c:587:
+ * struct file (for open intents).  The caller, when done with this nd, must
                                                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#636: FILE: fs/unionfs/lookup.c:595:
+int init_lower_nd(struct nameidata *nd, unsigned int flags)
                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#648: FILE: fs/unionfs/lookup.c:607:
+	memset(nd, 0, sizeof(struct nameidata));
 	       ^^

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#655: FILE: fs/unionfs/lookup.c:614:
+		/* fall through: shared code for create/open cases */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*file)...) over kzalloc(sizeof(struct file)...)
#660: FILE: fs/unionfs/lookup.c:619:
+		file = kzalloc(sizeof(struct file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: fs/unionfs/lookup.c:636:
+		BUG();

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#684: FILE: fs/unionfs/lookup.c:643:
+void release_lower_nd(struct nameidata *nd, int err)
                                         ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#689: FILE: fs/unionfs/lookup.c:648:
+		release_open_intent(nd);
 		                    ^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 30 warnings, 8 checks, 652 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349155.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
