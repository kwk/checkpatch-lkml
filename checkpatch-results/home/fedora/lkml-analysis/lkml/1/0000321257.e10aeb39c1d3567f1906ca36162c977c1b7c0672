WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#98: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'occuring' may be misspelled - perhaps 'occurring'?
#142: FILE: Documentation/kmemcheck.txt:40:
+faults from occuring, however, but marks the object in question as being
             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#210: FILE: arch/x86/Kconfig.debug:163:
+config KMEMCHECK_BITOPS_OK
+	bool "kmemcheck: allow bit-field manipulation"
+	depends on KMEMCHECK
+	default n
+	help
+	  This option silences warnings that would be generated for bit-field
+	  accesses where not all the bits are initialized at the same time.
+	  This may also hide some real bugs.
+
  #
  # IO delay types:
  #

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#241: FILE: arch/x86/kernel/kmemcheck_32.c:1:
+/**

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#259: FILE: arch/x86/kernel/kmemcheck_32.c:19:
+#include <asm/cacheflush.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/kdebug.h> instead of <asm/kdebug.h>
#260: FILE: arch/x86/kernel/kmemcheck_32.c:20:
+#include <asm/kdebug.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#262: FILE: arch/x86/kernel/kmemcheck_32.c:22:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#263: FILE: arch/x86/kernel/kmemcheck_32.c:23:
+#include <asm/string.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#277: FILE: arch/x86/kernel/kmemcheck_32.c:37:
+	uint32_t		address;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#332: FILE: arch/x86/kernel/kmemcheck_32.c:92:
+error_save(enum shadow state, uint32_t address, unsigned int size,
+	struct pt_regs *regs)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#334: FILE: arch/x86/kernel/kmemcheck_32.c:94:
+	static uint32_t prev_ip;

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#368: FILE: arch/x86/kernel/kmemcheck_32.c:128:
+	static const char *desc[] = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#381: FILE: arch/x86/kernel/kmemcheck_32.c:141:
+	printk(KERN_ALERT "kmemcheck: Caught %d-bit read from %s memory\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: arch/x86/kernel/kmemcheck_32.c:142:
+	printk(KERN_ALERT "kmemcheck: Caught %d-bit read from %s memory\n",
+		e->size, desc[e->state]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#383: FILE: arch/x86/kernel/kmemcheck_32.c:143:
+	printk(KERN_ALERT "=> address %08x\n", e->address);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#410: FILE: arch/x86/kernel/kmemcheck_32.c:170:
+	printk(KERN_INFO "kmemcheck: \"Bugs, beware!\"\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#413: FILE: arch/x86/kernel/kmemcheck_32.c:173:
+	t = kthread_create(&kmemcheck_thread_run, NULL,
+		"kmemcheck");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#415: FILE: arch/x86/kernel/kmemcheck_32.c:175:
+		printk(KERN_ERR "kmemcheck: Couldn't start output thread\n");

CHECK:SPACING: No space is necessary after a cast
#448: FILE: arch/x86/kernel/kmemcheck_32.c:208:
+	return (void *) address + (PAGE_SIZE << (compound_order(head) - 1));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#461: FILE: arch/x86/kernel/kmemcheck_32.c:221:
+	BUG_ON(!pte);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#462: FILE: arch/x86/kernel/kmemcheck_32.c:222:
+	BUG_ON(level != PG_LEVEL_4K);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: arch/x86/kernel/kmemcheck_32.c:239:
+	BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#480: FILE: arch/x86/kernel/kmemcheck_32.c:240:
+	BUG_ON(level != PG_LEVEL_4K);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: arch/x86/kernel/kmemcheck_32.c:263:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#512: FILE: arch/x86/kernel/kmemcheck_32.c:272:
+	BUG_ON(!__get_cpu_var(kmemcheck_addr1)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#513: FILE: arch/x86/kernel/kmemcheck_32.c:273:
+	BUG_ON(!__get_cpu_var(kmemcheck_addr1)
+		&& !__get_cpu_var(kmemcheck_addr2));

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#520: FILE: arch/x86/kernel/kmemcheck_32.c:280:
+	 * this is not an error. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#549: FILE: arch/x86/kernel/kmemcheck_32.c:309:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#596: FILE: arch/x86/kernel/kmemcheck_32.c:356:
+	BUG_ON(!head);

CHECK:SPACING: No space is necessary after a cast
#605: FILE: arch/x86/kernel/kmemcheck_32.c:365:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#607: FILE: arch/x86/kernel/kmemcheck_32.c:367:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#608: FILE: arch/x86/kernel/kmemcheck_32.c:368:
+		BUG_ON(level != PG_LEVEL_4K);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#623: FILE: arch/x86/kernel/kmemcheck_32.c:383:
+	BUG_ON(!head);

CHECK:SPACING: No space is necessary after a cast
#632: FILE: arch/x86/kernel/kmemcheck_32.c:392:
+		address = (unsigned long) page_address(&p[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: arch/x86/kernel/kmemcheck_32.c:394:
+		BUG_ON(!pte);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#635: FILE: arch/x86/kernel/kmemcheck_32.c:395:
+		BUG_ON(level != PG_LEVEL_4K);

CHECK:SPACING: No space is necessary after a cast
#648: FILE: arch/x86/kernel/kmemcheck_32.c:408:
+	shadow = address_get_shadow((unsigned long) address);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#707: FILE: arch/x86/kernel/kmemcheck_32.c:467:
+		/* Group 2 */
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#708: FILE: arch/x86/kernel/kmemcheck_32.c:468:
+		|| b == 0x2e || b == 0x36 || b == 0x3e || b == 0x26
+		|| b == 0x64 || b == 0x65 || b == 0x2e || b == 0x3e

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#710: FILE: arch/x86/kernel/kmemcheck_32.c:470:
+		/* Group 3 */
+		|| b == 0x66

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#712: FILE: arch/x86/kernel/kmemcheck_32.c:472:
+		/* Group 4 */
+		|| b == 0x67;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#718: FILE: arch/x86/kernel/kmemcheck_32.c:478:
+ * should be shot. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#748: FILE: arch/x86/kernel/kmemcheck_32.c:508:
+	for (; opcode_is_prefix(*op); ++op);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#755: FILE: arch/x86/kernel/kmemcheck_32.c:515:
+	uint8_t *x;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#799: FILE: arch/x86/kernel/kmemcheck_32.c:559:
+	uint8_t *x;

WARNING:RETURN_VOID: void function return statements are not generally useful
#814: FILE: arch/x86/kernel/kmemcheck_32.c:574:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#850: FILE: arch/x86/kernel/kmemcheck_32.c:610:
+kmemcheck_access(struct pt_regs *regs,
+	unsigned long fallback_address, enum kmemcheck_method fallback_method)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#852: FILE: arch/x86/kernel/kmemcheck_32.c:612:
+	const uint8_t *insn;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#853: FILE: arch/x86/kernel/kmemcheck_32.c:613:
+	const uint8_t *insn_primary;

CHECK:SPACING: No space is necessary after a cast
#863: FILE: arch/x86/kernel/kmemcheck_32.c:623:
+	insn = (const uint8_t *) regs->ip;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#912: FILE: arch/x86/kernel/kmemcheck_32.c:672:
+		 * addresses, but we only get one page fault. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#933: FILE: arch/x86/kernel/kmemcheck_32.c:693:
+	 * access. */

CHECK:SPACING: No space is necessary after a cast
#963: FILE: arch/x86/kernel/kmemcheck_32.c:723:
+		__memset((void *) s, c, n);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#968: FILE: arch/x86/kernel/kmemcheck_32.c:728:
+	 * should be able to change them. */

CHECK:SPACING: No space is necessary after a cast
#972: FILE: arch/x86/kernel/kmemcheck_32.c:732:
+	__memset((void *) s, c, n);

CHECK:SPACING: No space is necessary after a cast
#973: FILE: arch/x86/kernel/kmemcheck_32.c:733:
+	__memset((void *) x, SHADOW_INITIALIZED, n);

CHECK:SPACING: No space is necessary after a cast
#995: FILE: arch/x86/kernel/kmemcheck_32.c:755:
+		__memset((void *) s, c, n);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1004: FILE: arch/x86/kernel/kmemcheck_32.c:764:
+		 * need one memset(). */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#1021: FILE: arch/x86/kernel/kmemcheck_32.c:781:
+EXPORT_SYMBOL(kmemcheck_memset);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1028: FILE: include/asm-x86/kmemcheck.h:1:
+#ifdef CONFIG_X86_32

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1037: FILE: include/asm-x86/kmemcheck_32.h:1:
+#ifndef ASM_X86_KMEMCHECK_32_H

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1041: FILE: include/asm-x86/kmemcheck_32.h:5:
+#include <asm/pgtable.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1055: FILE: include/asm-x86/kmemcheck_32.h:19:
+void kmemcheck_access(struct pt_regs *regs,
+	unsigned long address, enum kmemcheck_method method);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1080: FILE: include/asm-x86/pgtable.h:42:
+#define _PAGE_HIDDEN	(_AC(1, L)<<_PAGE_BIT_HIDDEN)
                     	          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1117: FILE: include/linux/kmemcheck.h:1:
+#ifndef LINUX_KMEMCHECK_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1155: FILE: include/linux/page-flags.h:305:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 31 checks, 1000 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000321257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
