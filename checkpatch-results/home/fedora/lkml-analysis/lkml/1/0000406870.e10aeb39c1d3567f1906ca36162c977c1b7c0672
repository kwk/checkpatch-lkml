ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#50: FILE: Documentation/filesystems/romfs.txt:6:
kernel, with a

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/romfs/inode.c:102:
+	return (struct romfs_fs_info *) sb->s_fs_info;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#208: FILE: fs/romfs/inode.c:145:
+	struct romfs_fs_info * rom_info = NULL;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#218: FILE: fs/romfs/inode.c:155:
+		printk ("romfs: unable to read superblock\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#218: FILE: fs/romfs/inode.c:155:
+		printk ("romfs: unable to read superblock\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#226: FILE: fs/romfs/inode.c:162:
+	if (rsb->word0 != ROMSB_WORD0
+	   ||   (rsb->word1 != ROMSB_WORD1

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#227: FILE: fs/romfs/inode.c:163:
+	   ||   (rsb->word1 != ROMSB_WORD1
+	      && rsb->word1 != ROM2SB_WORD1)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#244: FILE: fs/romfs/inode.c:178:
+	rom_info = kmalloc (sizeof(struct romfs_fs_info), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*rom_info)...) over kmalloc(sizeof(struct romfs_fs_info)...)
#244: FILE: fs/romfs/inode.c:178:
+	rom_info = kmalloc (sizeof(struct romfs_fs_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#246: FILE: fs/romfs/inode.c:180:
+		printk ("romfs: not enough memory\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#246: FILE: fs/romfs/inode.c:180:
+		printk ("romfs: not enough memory\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#246: FILE: fs/romfs/inode.c:180:
+	if (!rom_info) {
+		printk ("romfs: not enough memory\n");

WARNING:BRACES: braces {} are not necessary for single statement blocks
#253: FILE: fs/romfs/inode.c:187:
+	if (rsb->word1 == ROM2SB_WORD1) {
+		rom_info->version = ROMFS_VERSION_2;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	                         ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#257: FILE: fs/romfs/inode.c:191:
+	sz=ROMFH_SIZE+((ROMFH_PAD+strnlen(rsb->name,ROMFS_MAXFN)+1)&ROMFH_MASK);
 	                                                           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#288: FILE: fs/romfs/inode.c:219:
+romfs_put_super(struct super_block * sb)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: fs/romfs/inode.c:294:
+		info_len = ((ROMFH_SIZE+info_len+1+ROMFH_PAD)&ROMFH_MASK);
 		                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: fs/romfs/inode.c:294:
+		info_len = ((ROMFH_SIZE+info_len+1+ROMFH_PAD)&ROMFH_MASK);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: fs/romfs/inode.c:294:
+		info_len = ((ROMFH_SIZE+info_len+1+ROMFH_PAD)&ROMFH_MASK);
 		                                  ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#314: FILE: fs/romfs/inode.c:294:
+		info_len = ((ROMFH_SIZE+info_len+1+ROMFH_PAD)&ROMFH_MASK);
 		                                             ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#321: FILE: fs/romfs/inode.c:301:
+	if (get_romfs_priv(inode->i_sb)->version > ROMFS_VERSION_1
+	&& is_regular) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#325: FILE: fs/romfs/inode.c:305:
+				       inode->i_ino+romfs_inode->i_metasize)+1;
 				                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#325: FILE: fs/romfs/inode.c:305:
+				       inode->i_ino+romfs_inode->i_metasize)+1;
 				                                            ^

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#327: FILE: fs/romfs/inode.c:307:
+		/* Data is on 16 byte boundry after header */
 		                      ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#328: FILE: fs/romfs/inode.c:308:
+		romfs_inode->i_dataoffset = info_len+(inode->i_ino&ROMFH_MASK);
 		                                    ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#328: FILE: fs/romfs/inode.c:308:
+		romfs_inode->i_dataoffset = info_len+(inode->i_ino&ROMFH_MASK);
 		                                                  ^

ERROR:SPACING: space prohibited after that open parenthesis '('
#342: FILE: fs/romfs/inode.c:319:
+	if (unlikely(	offset >= maxsize

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#343: FILE: fs/romfs/inode.c:320:
+	if (unlikely(	offset >= maxsize
+		     || count > maxsize

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#344: FILE: fs/romfs/inode.c:321:
+		     || count > maxsize
+		     || offset + count > maxsize))

WARNING:LINE_SPACING: Missing a blank line after declarations
#386: FILE: fs/romfs/inode.c:545:
+	sector_t disk_block = iblock + ROMFS_I(inode)->i_dataoffset;
+	map_bh(bh_result, inode->i_sb, disk_block);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#390: FILE: fs/romfs/inode.c:549:
+
+

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#392: FILE: fs/romfs/inode.c:551:
+rom2fs_readpage(struct file *file, struct page * page)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#398: FILE: fs/romfs/inode.c:557:
+rom2fs_readpages(struct file *file, struct address_space * addr_space,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#412: FILE: fs/romfs/inode.c:571:
+rom2fs_direct_IO(int rw, struct kiocb *iocb, const struct iovec *iov,
+			loff_t offset, unsigned long nr_segs)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#431: FILE: fs/romfs/inode.c:590:
+^I.readpage ^I= rom2fs_readpage,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#432: FILE: fs/romfs/inode.c:591:
+^I.readpages ^I= rom2fs_readpages,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#433: FILE: fs/romfs/inode.c:592:
+^I.bmap ^I^I= rom2fs_bmap,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: fs/romfs/inode.c:593:
+^I.direct_IO ^I= rom2fs_direct_IO,$

ERROR:SWITCH_CASE_INDENT_LEVEL: switch and case should be at the same indent
#461: FILE: fs/romfs/inode.c:647:
 	switch (nextfh & ROMFH_TYPE) {
+		case ROMFH_DIR:

switch should be at the same indent as case.
Example::

  switch (suffix) {
  case 'G':
  case 'g':
          mem <<= 30;
          break;
  case 'M':
  case 'm':
          mem <<= 20;
          break;
  case 'K':
  case 'k':
          mem <<= 10;
          fallthrough;
  default:
          break;
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/linux/romfs_fs.h:18:
+#define ROM2SB_WORD1 __mk4('2','f','s','-')
                               ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/linux/romfs_fs.h:18:
+#define ROM2SB_WORD1 __mk4('2','f','s','-')
                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#513: FILE: include/linux/romfs_fs.h:18:
+#define ROM2SB_WORD1 __mk4('2','f','s','-')
                                       ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 13 warnings, 21 checks, 435 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000406870.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
