WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 048/148] include/asm-x86/io_64.h: checkpatch cleanups - formatting only

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#58: FILE: include/asm-x86/io_64.h:72:
+#define __OUT(s, s1, x)							\
+	__OUT1(s, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port));	\
+	}								\
+	__OUT1(s##_p, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port)); \
+	slow_down_io();							\
+}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#58: FILE: include/asm-x86/io_64.h:72:
+#define __OUT(s, s1, x)							\
+	__OUT1(s, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port));	\
+	}								\
+	__OUT1(s##_p, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port)); \
+	slow_down_io();							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#58: FILE: include/asm-x86/io_64.h:72:
+#define __OUT(s, s1, x)							\
+	__OUT1(s, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port));	\
+	}								\
+	__OUT1(s##_p, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port)); \
+	slow_down_io();							\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#58: FILE: include/asm-x86/io_64.h:72:
+#define __OUT(s, s1, x)							\
+	__OUT1(s, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port));	\
+	}								\
+	__OUT1(s##_p, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port)); \
+	slow_down_io();							\
+}

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#59: FILE: include/asm-x86/io_64.h:73:
+	__OUT1(s, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port));	\
 	                                                  ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#61: FILE: include/asm-x86/io_64.h:75:
+	__OUT1(s##_p, x) __OUT2(s, s1, "w") : : "a" (value), "Nd" (port)); \
 	                                                      ^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#67: FILE: include/asm-x86/io_64.h:79:
+#define __IN1(s)							\
+static inline RETURN_TYPE in##s(unsigned short port)			\
+{									\
+	RETURN_TYPE _v;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#67: FILE: include/asm-x86/io_64.h:79:
+#define __IN1(s)							\
+static inline RETURN_TYPE in##s(unsigned short port)			\
+{									\
+	RETURN_TYPE _v;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#81: FILE: include/asm-x86/io_64.h:87:
+#define __IN(s, s1, i...)						\
+	__IN1(s) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	return _v;							\
+	}								\
+	__IN1(s##_p) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	slow_down_io(); \
+	return _v; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's' - possible side-effects?
#81: FILE: include/asm-x86/io_64.h:87:
+#define __IN(s, s1, i...)						\
+	__IN1(s) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	return _v;							\
+	}								\
+	__IN1(s##_p) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	slow_down_io(); \
+	return _v; }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 's1' - possible side-effects?
#81: FILE: include/asm-x86/io_64.h:87:
+#define __IN(s, s1, i...)						\
+	__IN1(s) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	return _v;							\
+	}								\
+	__IN1(s##_p) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
+	slow_down_io(); \
+	return _v; }

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#82: FILE: include/asm-x86/io_64.h:88:
+	__IN1(s) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
 	                                          ^^

WARNING:TYPO_SPELLING: 'Nd' may be misspelled - perhaps 'And'?
#85: FILE: include/asm-x86/io_64.h:91:
+	__IN1(s##_p) __IN2(s, s1, "w") : "=a" (_v) : "Nd" (port), ##i);	\
 	                                              ^^

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#137: FILE: include/asm-x86/io_64.h:129:
+__OUT(l, , int)
          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#146: FILE: include/asm-x86/io_64.h:150:
+static inline unsigned long virt_to_phys(volatile void *address)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#214: FILE: include/asm-x86/io_64.h:278:
+void __memcpy_fromio(void *, unsigned long, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#214: FILE: include/asm-x86/io_64.h:278:
+void __memcpy_fromio(void *, unsigned long, unsigned);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#214: FILE: include/asm-x86/io_64.h:278:
+void __memcpy_fromio(void *, unsigned long, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#214: FILE: include/asm-x86/io_64.h:278:
+void __memcpy_fromio(void *, unsigned long, unsigned);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#215: FILE: include/asm-x86/io_64.h:279:
+void __memcpy_toio(unsigned long, const void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#215: FILE: include/asm-x86/io_64.h:279:
+void __memcpy_toio(unsigned long, const void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#215: FILE: include/asm-x86/io_64.h:279:
+void __memcpy_toio(unsigned long, const void *, unsigned);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#215: FILE: include/asm-x86/io_64.h:279:
+void __memcpy_toio(unsigned long, const void *, unsigned);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#218: FILE: include/asm-x86/io_64.h:281:
+static inline void memcpy_fromio(void *to, const volatile void __iomem *from,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#219: FILE: include/asm-x86/io_64.h:282:
+				 unsigned len)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#226: FILE: include/asm-x86/io_64.h:287:
+static inline void memcpy_toio(volatile void __iomem *to, const void *from,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#227: FILE: include/asm-x86/io_64.h:288:
+			       unsigned len)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 20 warnings, 5 checks, 202 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304481.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
