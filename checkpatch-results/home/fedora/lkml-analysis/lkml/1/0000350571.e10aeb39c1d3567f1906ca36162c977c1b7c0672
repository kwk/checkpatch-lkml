WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
Change current->fs[ug]id to current_fs[ug]id() so that fsgid and fsuid can be

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));
                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));
                                                                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));
                                                                                                     ^

CHECK:CAMELCASE: Avoid CamelCase: <GetXid>
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <_GetXid>
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

CHECK:CAMELCASE: Avoid CamelCase: <cFYI>
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#286: FILE: fs/cifs/cifsproto.h:42:
+#define GetXid() (int)_GetXid(); cFYI(1,("CIFS VFS: in %s as Xid: %d with uid: %d",__FUNCTION__, xid,current_fsuid()));

CHECK:CAMELCASE: Avoid CamelCase: <treeCon>
#363: FILE: fs/cifs/misc.c:354:
+				if (current_fsuid() != treeCon->ses->linux_uid) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#370: FILE: fs/cifs/misc.c:360:
+						if (ses->linux_uid == current_fsuid()) {

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

CHECK:BRACES: braces {} should be used on all arms of this statement
#384: FILE: fs/coda/cache.c:35:
+	if (cii->c_uid != current_fsuid()) {
[...]
         } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: fs/hugetlbfs/inode.c:584:
+	inode = hugetlbfs_get_inode(dir->i_sb, current_fsuid(),
 					gid, S_IFLNK|S_IRWXUGO, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: fs/hugetlbfs/inode.c:937:
+	inode = hugetlbfs_get_inode(root->d_sb, current_fsuid(),
+				current_fsgid(), S_IFREG | S_IRWXUGO, 0);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#768: FILE: fs/hugetlbfs/inode.c:937:
+				current_fsgid(), S_IFREG | S_IRWXUGO, 0);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1350: FILE: security/commoncap.c:339:
+	current->suid = current->euid = current_fsuid() = bprm->e_uid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1351: FILE: security/commoncap.c:340:
+	current->sgid = current->egid = current_fsgid() = bprm->e_gid;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 6 warnings, 9 checks, 975 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350571.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
