WARNING:UNNECESSARY_BREAK: break is not useful after a return
#77: FILE: arch/x86_64/kernel/e820.c:126:
+					return 1;
+					break;

WARNING:LINE_SPACING: Missing a blank line after declarations
#97: FILE: arch/x86_64/kernel/e820.c:185:
+		unsigned long map_start, map_end, last;
+		for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#107: FILE: arch/x86_64/kernel/e820.c:195:
+			while (bad_addr(&map_start, size) && map_start+size <= map_end)
 			                                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#114: FILE: arch/x86_64/kernel/e820.c:202:
+^I^Ireturn -1UL;^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#124: FILE: arch/x86_64/kernel/e820.c:242:
+	printk("e820_end_of_ram: end_pfn_map = %lu\n", end_pfn_map);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'e820_end_of_ram', this function's name, in a string
#124: FILE: arch/x86_64/kernel/e820.c:242:
+	printk("e820_end_of_ram: end_pfn_map = %lu\n", end_pfn_map);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:LINE_SPACING: Missing a blank line after declarations
#135: FILE: arch/x86_64/kernel/e820.c:368:
+		void *p;
+		for (p = memmap.map; p < memmap.map_end; p += memmap.desc_size) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#165: FILE: arch/x86_64/kernel/e820.c:677:
+^I$

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#193: FILE: arch/x86_64/kernel/e820.c:778:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#201: FILE: arch/x86_64/kernel/e820.c:783:
+		unsigned long end;
+		if (efi_enabled) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#210: FILE: arch/x86_64/kernel/e820.c:792:
+^I^I$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#258: FILE: arch/x86_64/kernel/setup.c:74:
+int efi_enabled = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:BRACES: Unbalanced braces around else statement
#301: FILE: arch/x86_64/kernel/setup.c:422:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#302: FILE: arch/x86_64/kernel/setup.c:423:
+^I^Ie820_reserve_resources(); $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#375: FILE: arch/x86_64/mm/init.c:300:
+^I^Iif (!after_bootmem && !efi_enabled && $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: arch/x86_64/mm/init.c:301:
+		if (!after_bootmem && !efi_enabled && 
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/x86_64/mm/init.c:301:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#376: FILE: arch/x86_64/mm/init.c:301:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                          ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#376: FILE: arch/x86_64/mm/init.c:301:
+			!e820_any_mapped(addr,addr+PUD_SIZE,0)) {
 			                                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#384: FILE: arch/x86_64/mm/init.c:663:
+		printk(KERN_ERR "reserve_bootmem: pfn (%lx) end_pfn_map (%u)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: arch/x86_64/mm/init.c:664:
+		printk(KERN_ERR "reserve_bootmem: pfn (%lx) end_pfn_map (%u)\n",
+			pfn,end_pfn_map);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#385: FILE: arch/x86_64/mm/init.c:664:
+			pfn,end_pfn_map);
 			   ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000436825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 7 warnings, 5 checks, 314 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000436825.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
