CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#73: FILE: net/ipv4/ah4.c:205:
+	struct ip_auth_hdr *ah = (struct ip_auth_hdr *)(skb->data+(iph->ihl<<2));
 	                                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#73: FILE: net/ipv4/ah4.c:205:
+	struct ip_auth_hdr *ah = (struct ip_auth_hdr *)(skb->data+(iph->ihl<<2));
 	                                                                   ^

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#120: FILE: net/ipv4/arp.c:830:
+					arp_send(ARPOP_REPLY, ETH_P_ARP, sip, dev, tip, sha, dev->dev_addr, sha);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#129: FILE: net/ipv4/arp.c:845:
+					arp_send(ARPOP_REPLY, ETH_P_ARP, sip, dev, tip, sha, dev->dev_addr, sha);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#160: FILE: net/ipv4/devinet.c:1265:
+			     struct file *filp, void __user *buffer,
 			                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#169: FILE: net/ipv4/devinet.c:1337:
+				  struct file *filp, void __user *buffer,
 				               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#178: FILE: net/ipv4/devinet.c:1366:
+			 struct file *filp, void __user *buffer,
 			              ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#193: FILE: net/ipv4/esp4.c:417:
+	struct ip_esp_hdr *esph = (struct ip_esp_hdr *)(skb->data+(iph->ihl<<2));
 	                                                         ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#193: FILE: net/ipv4/esp4.c:417:
+	struct ip_esp_hdr *esph = (struct ip_esp_hdr *)(skb->data+(iph->ihl<<2));
 	                                                                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#304: FILE: net/ipv4/fib_semantics.c:66:
+for (nhsel=0, nh = (struct fib_nh *)((fi)->fib_nh); nhsel < (fi)->fib_nhs; nh++, nhsel++)
           ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#311: FILE: net/ipv4/fib_semantics.c:72:
+#define for_nexthops(fi) { int nhsel = 0; const struct fib_nh * nh = (fi)->fib_nh; \

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#315: FILE: net/ipv4/fib_semantics.c:75:
+#define change_nexthops(fi) { int nhsel = 0; struct fib_nh * nh = (struct fib_nh *)((fi)->fib_nh); \

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#367: FILE: net/ipv4/igmp.c:361:
+	return sizeof(struct igmpv3_grec) + 4*igmp_scount(pmc, type, gdel, sdel);
 	                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#376: FILE: net/ipv4/igmp.c:656:
+	skb = alloc_skb(IGMP_SIZE+LL_ALLOCATED_SPACE(dev), GFP_ATOMIC);
 	                         ^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#507: FILE: net/ipv4/inetpeer.c:147:
+#define lookup(_daddr, _stack) ^I^I^I^I^I\$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_stack' may be better as '(_stack)' to avoid precedence issues
#507: FILE: net/ipv4/inetpeer.c:147:
+#define lookup(_daddr, _stack) 					\
 ({								\
 	struct inet_peer *u, **v;				\
 	if (_stack != NULL) {					\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#578: FILE: net/ipv4/ip_gre.c:965:
+				unsigned nflags = 0;

CHECK:SPACING: No space is necessary after a cast
#587: FILE: net/ipv4/ip_gre.c:1107:
+	struct iphdr *iph = (struct iphdr *) skb_mac_header(skb);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#600: FILE: net/ipv4/ip_input.c:345:
+		st[idx&0xFF].o_bytes += skb->len;
 		      ^

CHECK:CAMELCASE: Avoid CamelCase: <xFF>
#600: FILE: net/ipv4/ip_input.c:345:
+		st[idx&0xFF].o_bytes += skb->len;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#603: FILE: net/ipv4/ip_input.c:347:
+		st[(idx>>16)&0xFF].i_bytes += skb->len;
 		       ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#603: FILE: net/ipv4/ip_input.c:347:
+		st[(idx>>16)&0xFF].i_bytes += skb->len;
 		            ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#647: FILE: net/ipv4/ip_sockglue.c:97:
+	struct ip_options * opt = (struct ip_options *)optbuf;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#742: FILE: net/ipv4/ip_sockglue.c:987:
+		struct ip_options * opt = (struct ip_options *)optbuf;

WARNING:LINE_SPACING: Missing a blank line after declarations
#841: FILE: net/ipv4/ipmr.c:526:
+	struct mfc_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_KERNEL);
+	if (c == NULL)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#841: FILE: net/ipv4/ipmr.c:526:
+	if (c == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#852: FILE: net/ipv4/ipmr.c:535:
+	struct mfc_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_ATOMIC);
+	if (c == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#852: FILE: net/ipv4/ipmr.c:535:
+	if (c == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#870: FILE: net/ipv4/ipmr.c:640:
+	igmp=(struct igmphdr *)skb_put(skb, sizeof(struct igmphdr));
 	    ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#879: FILE: net/ipv4/ipmr.c:656:
+	if ((ret = sock_queue_rcv_skb(mroute_socket, skb))<0) {
 	                                                  ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#879: FILE: net/ipv4/ipmr.c:656:
+	if ((ret = sock_queue_rcv_skb(mroute_socket, skb))<0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#888: FILE: net/ipv4/ipmr.c:688:
+		if (atomic_read(&cache_resolve_queue_len) >= 10 ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!c"
#926: FILE: net/ipv4/ipmr.c:791:
+	if (c == NULL)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#943: FILE: net/ipv4/ipmr.c:849:
+	for (i=0; i<MFC_LINES; i++) {
 	      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#943: FILE: net/ipv4/ipmr.c:849:
+	for (i=0; i<MFC_LINES; i++) {
 	           ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1035: FILE: net/ipv4/ipmr.c:1037:
+	if (optname != MRT_VERSION &&
 #ifdef CONFIG_IP_PIMSM

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1114: FILE: net/ipv4/ipmr.c:1133:
+	for (ct=0; ct<maxvif; ct++,v++) {
 	       ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1114: FILE: net/ipv4/ipmr.c:1133:
+	for (ct=0; ct<maxvif; ct++,v++) {
 	             ^

ERROR:SPACING: space required after that ',' (ctx:OxV)
#1114: FILE: net/ipv4/ipmr.c:1133:
+	for (ct=0; ct<maxvif; ct++,v++) {
 	                          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache"
#1168: FILE: net/ipv4/ipmr.c:1431:
+	if (cache == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cache"
#1193: FILE: net/ipv4/ipmr.c:1637:
+	if (cache == NULL) {

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#1215: FILE: net/ipv4/raw.c:468:
+		struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;
 		                    ^^^^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1468: FILE: net/ipv4/tcp_yeah.c:227:
+		reduction = max(tp->snd_cwnd>>1, 2U);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1510: FILE: net/ipv4/udp.c:330:
+	struct udphdr *uh = (struct udphdr *)(skb->data+(iph->ihl<<2));
 	                                               ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1510: FILE: net/ipv4/udp.c:330:
+	struct udphdr *uh = (struct udphdr *)(skb->data+(iph->ihl<<2));
 	                                                         ^

WARNING:TYPO_SPELLING: 'usin' may be misspelled - perhaps 'using'?
#1528: FILE: net/ipv4/udp.c:564:
+		struct sockaddr_in * usin = (struct sockaddr_in *)msg->msg_name;
 		                     ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1528: FILE: net/ipv4/udp.c:564:
+		struct sockaddr_in * usin = (struct sockaddr_in *)msg->msg_name;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 15 errors, 11 warnings, 21 checks, 1286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000209334.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
