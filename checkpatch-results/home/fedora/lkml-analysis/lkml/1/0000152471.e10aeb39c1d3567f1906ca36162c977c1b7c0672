CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#52: FILE: fs/notify/fsnotify.h:18:
+extern void fsnotify_flush_notif(struct fsnotify_group *group);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#104: FILE: fs/notify/notification.c:48:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->mask == new->mask'
#141: FILE: fs/notify/notification.c:84:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->to_tell == new->to_tell'
#141: FILE: fs/notify/notification.c:84:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->data_type == new->data_type'
#141: FILE: fs/notify/notification.c:84:
+	if ((old->mask == new->mask) &&
+	    (old->to_tell == new->to_tell) &&
+	    (old->data_type == new->data_type)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->path.mnt == new->path.mnt'
#150: FILE: fs/notify/notification.c:93:
+			if ((old->path.mnt == new->path.mnt) &&
+			    (old->path.dentry == new->path.dentry))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'old->path.dentry == new->path.dentry'
#150: FILE: fs/notify/notification.c:93:
+			if ((old->path.mnt == new->path.mnt) &&
+			    (old->path.dentry == new->path.dentry))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: fs/notify/notification.c:176:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#239: FILE: fs/notify/notification.c:178:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#265: FILE: fs/notify/notification.c:204:
+	BUG_ON(!mutex_is_locked(&group->notification_mutex));

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#267: FILE: fs/notify/notification.c:206:
+	holder = list_first_entry(&group->notification_list, struct fsnotify_event_holder, event_list);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#313: FILE: fs/notify/notification.c:252:
+struct fsnotify_event *fsnotify_create_event(struct inode *to_tell, __u32 mask, void *data, int data_type)

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#329: FILE: fs/notify/notification.c:297:
+	event_holder_kmem_cache = kmem_cache_create("fsnotify_event_holder", sizeof(struct fsnotify_event_holder), 0, SLAB_PANIC, NULL);

WARNING:LONG_LINE_COMMENT: line length of 112 exceeds 100 columns
#346: FILE: include/linux/fsnotify_backend.h:100:
+	struct list_head notification_list;	/* list of event_holder this group needs to send to userspace */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE_COMMENT: line length of 106 exceeds 100 columns
#347: FILE: include/linux/fsnotify_backend.h:101:
+	wait_queue_head_t notification_waitq;	/* read() on the notification file blocks on this waitq */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#401: FILE: include/linux/fsnotify_backend.h:236:
+extern int fsnotify_add_notif_event(struct fsnotify_group *group, struct fsnotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#402: FILE: include/linux/fsnotify_backend.h:237:
+extern int fsnotify_check_notif_queue(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#403: FILE: include/linux/fsnotify_backend.h:238:
+extern struct fsnotify_event *fsnotify_peek_notif_event(struct fsnotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#404: FILE: include/linux/fsnotify_backend.h:239:
+extern struct fsnotify_event *fsnotify_remove_notif_event(struct fsnotify_group *group);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152471.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 10 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152471.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
