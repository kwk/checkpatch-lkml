WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
Tie current IPI references to either XPC's notify IRQ or channel control flags.

WARNING:SPACING: Unnecessary space before function pointer arguments
#188: FILE: drivers/misc/sgi-xp/xpc.h:668:
+extern u64 (*xpc_get_chctl_all_flags) (struct xpc_partition *);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#188: FILE: drivers/misc/sgi-xp/xpc.h:668:
+extern u64 (*xpc_get_chctl_all_flags) (struct xpc_partition *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:SPACING: Unnecessary space before function pointer arguments
#191: FILE: drivers/misc/sgi-xp/xpc.h:670:
+extern void (*xpc_process_msg_chctl_flags) (struct xpc_partition *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#191: FILE: drivers/misc/sgi-xp/xpc.h:670:
+extern void (*xpc_process_msg_chctl_flags) (struct xpc_partition *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#191: FILE: drivers/misc/sgi-xp/xpc.h:670:
+extern void (*xpc_process_msg_chctl_flags) (struct xpc_partition *, int);

WARNING:SPACING: Unnecessary space before function pointer arguments
#202: FILE: drivers/misc/sgi-xp/xpc.h:689:
+extern void (*xpc_send_chctl_closerequest) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#202: FILE: drivers/misc/sgi-xp/xpc.h:689:
+extern void (*xpc_send_chctl_closerequest) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#202: FILE: drivers/misc/sgi-xp/xpc.h:689:
+extern void (*xpc_send_chctl_closerequest) (struct xpc_channel *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#207: FILE: drivers/misc/sgi-xp/xpc.h:691:
+extern void (*xpc_send_chctl_closereply) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#207: FILE: drivers/misc/sgi-xp/xpc.h:691:
+extern void (*xpc_send_chctl_closereply) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#207: FILE: drivers/misc/sgi-xp/xpc.h:691:
+extern void (*xpc_send_chctl_closereply) (struct xpc_channel *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#209: FILE: drivers/misc/sgi-xp/xpc.h:693:
+extern void (*xpc_send_chctl_openrequest) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#209: FILE: drivers/misc/sgi-xp/xpc.h:693:
+extern void (*xpc_send_chctl_openrequest) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#209: FILE: drivers/misc/sgi-xp/xpc.h:693:
+extern void (*xpc_send_chctl_openrequest) (struct xpc_channel *,

WARNING:SPACING: Unnecessary space before function pointer arguments
#211: FILE: drivers/misc/sgi-xp/xpc.h:695:
+extern void (*xpc_send_chctl_openreply) (struct xpc_channel *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#211: FILE: drivers/misc/sgi-xp/xpc.h:695:
+extern void (*xpc_send_chctl_openreply) (struct xpc_channel *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#211: FILE: drivers/misc/sgi-xp/xpc.h:695:
+extern void (*xpc_send_chctl_openreply) (struct xpc_channel *, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#220: FILE: drivers/misc/sgi-xp/xpc.h:739:
+extern void xpc_process_sent_chctl_flags(struct xpc_partition *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_partition *' should also have an identifier name
#220: FILE: drivers/misc/sgi-xp/xpc.h:739:
+extern void xpc_process_sent_chctl_flags(struct xpc_partition *);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#365: FILE: drivers/misc/sgi-xp/xpc_channel.c:419:
+				    XPC_CHCTL_OPENREQUEST) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#402: FILE: drivers/misc/sgi-xp/xpc_channel.c:466:
+		dev_dbg(xpc_chan, "XPC_CHCTL_CLOSEREPLY received from partid="
+			"%d, channel=%d\n", ch->partid, ch->number);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#463: FILE: drivers/misc/sgi-xp/xpc_channel.c:557:
+		dev_dbg(xpc_chan, "XPC_CHCTL_OPENREPLY (local_msgqueue_pa="
+			"0x%lx, local_nentries=%d, remote_nentries=%d) "

WARNING:SPLIT_STRING: quoted string split across lines
#464: FILE: drivers/misc/sgi-xp/xpc_channel.c:558:
+			"0x%lx, local_nentries=%d, remote_nentries=%d) "
+			"received from partid=%d, channel=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: drivers/misc/sgi-xp/xpc_channel.c:727:
+			xpc_process_openclose_chctl_flags(part, ch_number,
+							chctl.flags[ch_number]);

WARNING:SPACING: Unnecessary space before function pointer arguments
#605: FILE: drivers/misc/sgi-xp/xpc_main.c:188:
+u64 (*xpc_get_chctl_all_flags) (struct xpc_partition *part);

WARNING:SPACING: Unnecessary space before function pointer arguments
#606: FILE: drivers/misc/sgi-xp/xpc_main.c:189:
+void (*xpc_process_msg_chctl_flags) (struct xpc_partition *part, int ch_number);

WARNING:SPACING: Unnecessary space before function pointer arguments
#617: FILE: drivers/misc/sgi-xp/xpc_main.c:209:
+void (*xpc_send_chctl_closerequest) (struct xpc_channel *ch,

WARNING:SPACING: Unnecessary space before function pointer arguments
#622: FILE: drivers/misc/sgi-xp/xpc_main.c:211:
+void (*xpc_send_chctl_closereply) (struct xpc_channel *ch,

WARNING:SPACING: Unnecessary space before function pointer arguments
#624: FILE: drivers/misc/sgi-xp/xpc_main.c:213:
+void (*xpc_send_chctl_openrequest) (struct xpc_channel *ch,

WARNING:SPACING: Unnecessary space before function pointer arguments
#626: FILE: drivers/misc/sgi-xp/xpc_main.c:215:
+void (*xpc_send_chctl_openreply) (struct xpc_channel *ch,

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part->sn.sn2.local_chctl_amo_va'
#794: FILE: drivers/misc/sgi-xp/xpc_sn2.c:213:
+	chctl.all_flags = xpc_receive_IRQ_amo_sn2(part->sn.sn2.
+						  local_chctl_amo_va);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:SPLIT_STRING: quoted string split across lines
#808: FILE: drivers/misc/sgi-xp/xpc_sn2.c:222:
+	dev_dbg(xpc_chan, "received notify IRQ from partid=%d, chctl.all_flags="
+		"0x%lx\n", XPC_PARTID(part), chctl.all_flags);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part->sn.sn2.local_chctl_amo_va->variable'
#932: FILE: drivers/misc/sgi-xp/xpc_sn2.c:328:
+	FETCHOP_STORE_OP(TO_AMO((u64)&part->sn.sn2.local_chctl_amo_va->
+				variable), FETCHOP_OR, chctl.all_flags);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 31 warnings, 3 checks, 1345 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000270498.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
