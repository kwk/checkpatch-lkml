WARNING:TYPO_SPELLING: 'implemnt' may be misspelled - perhaps 'implement'?
#34: 
Add the frame work for multiple readers and implemnt the code for
                                            ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'mulitple' may be misspelled - perhaps 'multiple'?
#41: 
rwlocks). This patch is just the ground work. It simply allows for mulitple
                                                                   ^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "owners.owner"
#96: FILE: include/linux/rt_lock.h:230:
+# define rt_rwsem_is_locked(rws)	((rws)->owners.owner != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: kernel/rtmutex.c:84:
+# define rt_rwlock_cmpxchg(rwm,c,n)	(cmpxchg(&(rwm)->owner, c, n) == c)
                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#108: FILE: kernel/rtmutex.c:84:
+# define rt_rwlock_cmpxchg(rwm,c,n)	(cmpxchg(&(rwm)->owner, c, n) == c)
                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#108: FILE: kernel/rtmutex.c:84:
+# define rt_rwlock_cmpxchg(rwm,c,n)	(cmpxchg(&(rwm)->owner, c, n) == c)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#116: FILE: kernel/rtmutex.c:93:
 }
+#ifdef CONFIG_PREEMPT_RT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#119: FILE: kernel/rtmutex.c:96:
+	unsigned long owner, *p = (unsigned long *) &rwm->owner;

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: kernel/rtmutex.c:105:
+# define rt_rwlock_cmpxchg(l,c,n)	({ (void)c; (void)n; 0; })
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#128: FILE: kernel/rtmutex.c:105:
+# define rt_rwlock_cmpxchg(l,c,n)	({ (void)c; (void)n; 0; })
                               ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#134: FILE: kernel/rtmutex.c:111:
 }
+#ifdef CONFIG_PREEMPT_RT

WARNING:TYPO_SPELLING: 'reaquire' may be misspelled - perhaps 'reacquire'?
#442: FILE: kernel/rtmutex.c:1154:
+	/* Must we reaquire the BKL? */
 	           ^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#454: FILE: kernel/rtmutex.c:1166:
+	if (likely(rt_rwlock_cmpxchg(rwm, NULL, current))) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#466: FILE: kernel/rtmutex.c:1178:
+	} else

CHECK:LINE_SPACING: Please don't use multiple blank lines
#475: FILE: kernel/rtmutex.c:1187:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#499: FILE: kernel/rtmutex.c:1211:
+	if (likely(rt_rwlock_cmpxchg(rwm, NULL, current))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#512: FILE: kernel/rtmutex.c:1224:
+	} else

WARNING:TYPO_SPELLING: 'reaquire' may be misspelled - perhaps 'reacquire'?
#598: FILE: kernel/rtmutex.c:1310:
+	/* Must we reaquire the BKL? */
 	           ^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#606: FILE: kernel/rtmutex.c:1318:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#614: FILE: kernel/rtmutex.c:1326:
+	if (likely(rt_rwlock_cmpxchg(rwm, NULL, val))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#617: FILE: kernel/rtmutex.c:1329:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: kernel/rtmutex.c:1358:
+rt_write_fasttrylock(struct rw_mutex *rwm,
+		    int fastcall (*slowfn)(struct rw_mutex *rwm))

CHECK:BRACES: braces {} should be used on all arms of this statement
#650: FILE: kernel/rtmutex.c:1362:
+	if (likely(rt_rwlock_cmpxchg(rwm, NULL, val))) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#654: FILE: kernel/rtmutex.c:1366:
+	} else

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#663: FILE: kernel/rtmutex.c:1375:
+static void fastcall noinline __sched

The inline keyword should sit between storage class and type.

For example, the following segment::

  inline static int example_function(void)
  {
          ...
  }

should be::

  static inline int example_function(void)
  {
          ...
  }

ERROR:INLINE_LOCATION: inline keyword should sit between storage class and type
#754: FILE: kernel/rtmutex.c:1466:
+static void fastcall noinline __sched

WARNING:TYPO_SPELLING: 'incase' may be misspelled - perhaps 'in case'?
#839: FILE: kernel/rtmutex.c:1551:
+		/* delete incase we didn't go through the loop */
 		          ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#856: FILE: kernel/rtmutex.c:1568:
+rt_write_fastunlock(struct rw_mutex *rwm,
+		   void fastcall (*slowfn)(struct rw_mutex *rwm))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#934: FILE: kernel/rtmutex_common.h:127:
+#define RT_RW_READER		(struct task_struct *)0x100

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#938: FILE: kernel/rtmutex_common.h:131:
+#define RT_RW_PENDING_READ	(struct task_struct *)0x200

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#940: FILE: kernel/rtmutex_common.h:133:
+#define RT_RW_PENDING_WRITE	(struct task_struct *)0x400

WARNING:LINE_SPACING: Missing a blank line after declarations
#948: FILE: kernel/rtmutex_common.h:141:
+	unsigned long owner = (unsigned long)rwm->owner;
+	return (owner & RT_RW_PENDING_MASK) == owner;

WARNING:LINE_SPACING: Missing a blank line after declarations
#954: FILE: kernel/rtmutex_common.h:147:
+	unsigned long owner = (unsigned long)rwm->owner;
+	return rt_rwlock_pending(rwm) &&

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#969: FILE: kernel/rtmutex_common.h:162:
+extern void rt_mutex_up_write(struct rw_mutex *rwm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#970: FILE: kernel/rtmutex_common.h:163:
+extern void rt_mutex_up_read(struct rw_mutex *rwm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#971: FILE: kernel/rtmutex_common.h:164:
+extern int rt_mutex_down_write_trylock(struct rw_mutex *rwm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#972: FILE: kernel/rtmutex_common.h:165:
+extern void rt_mutex_down_write(struct rw_mutex *rwm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#973: FILE: kernel/rtmutex_common.h:166:
+extern int rt_mutex_down_read_trylock(struct rw_mutex *rwm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#974: FILE: kernel/rtmutex_common.h:167:
+extern void rt_mutex_down_read(struct rw_mutex *rwm);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#975: FILE: kernel/rtmutex_common.h:168:
+extern void rt_mutex_rwsem_init(struct rw_mutex *rwm, const char *name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_lock' - possible side-effects?
#1114: FILE: include/linux/lockdep.h:386:
+#define LOCK_CONTENDED_RT_RW(_lock, f_try, f_lock)		\
+do {								\
+	if (!f_try(&(_lock)->owners)) {				\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		f_lock(&(_lock)->owners);			\
+	}							\
+	lock_acquired(&(_lock)->dep_map);			\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f_try' may be better as '(f_try)' to avoid precedence issues
#1114: FILE: include/linux/lockdep.h:386:
+#define LOCK_CONTENDED_RT_RW(_lock, f_try, f_lock)		\
+do {								\
+	if (!f_try(&(_lock)->owners)) {				\
+		lock_contended(&(_lock)->dep_map, _RET_IP_);	\
+		f_lock(&(_lock)->owners);			\
+	}							\
+	lock_acquired(&(_lock)->dep_map);			\
+} while (0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1123: FILE: include/linux/lockdep.h:395:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 7 warnings, 27 checks, 1037 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290554.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
