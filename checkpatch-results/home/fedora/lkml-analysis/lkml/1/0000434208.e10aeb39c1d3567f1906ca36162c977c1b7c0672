WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#90: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3207: FILE: net/9p/conv.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3208: FILE: net/9p/conv.c:2:
+ * net/9p/conv.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3228: FILE: net/9p/conv.c:22:
+ *  51 Franklin Street, Fifth Floor$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#3238: FILE: net/9p/conv.c:32:
+#include <asm/uaccess.h>

WARNING:NETWORKING_BLOCK_COMMENT_STYLE: networking block comments don't use an empty /* line, use /* Comment...
#3242: FILE: net/9p/conv.c:36:
+/*
+ * Buffer to help with string parsing

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3252: FILE: net/9p/conv.c:46:
+	buf->sp = buf->p = data;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3266: FILE: net/9p/conv.c:60:
+			P9_EPRINTK(KERN_ERR, "buffer overflow: want %d has %d\n",
+				len, (int)(buf->ep - buf->p));

CHECK:SPACING: No space is necessary after a cast
#3300: FILE: net/9p/conv.c:94:
+		*(__le16 *) buf->p = cpu_to_le16(val);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!wstat"
#3419: FILE: net/9p/conv.c:213:
+	if (wstat == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#3458: FILE: net/9p/conv.c:252:
+ * buf_get_stat - safely decode a recieved metadata (stat) structure
                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3503: FILE: net/9p/conv.c:297:
+p9_deserialize_stat(void *buf, u32 buflen, struct p9_stat *stat,
+		int dotu)

WARNING:TYPO_SPELLING: 'recieved' may be misspelled - perhaps 'received'?
#3522: FILE: net/9p/conv.c:316:
+ * @buf: recieved buffer
          ^^^^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3524: FILE: net/9p/conv.c:318:
+ * @rcall: fcall structure to populate
     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#3531: FILE: net/9p/conv.c:325:
+p9_deserialize_fcall(void *buf, u32 buflen, struct p9_fcall *rcall,
                                                              ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3532: FILE: net/9p/conv.c:326:
+p9_deserialize_fcall(void *buf, u32 buflen, struct p9_fcall *rcall,
+		       int dotu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#3534: FILE: net/9p/conv.c:328:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3546: FILE: net/9p/conv.c:340:
+	P9_DPRINTK(P9_DEBUG_CONV, "size %d id %d tag %d\n", rcall->size, rcall->id,
+		rcall->tag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3567: FILE: net/9p/conv.c:361:
+			P9_EPRINTK(KERN_ERR, "Rwalk with more than %d qids: %d\n",
+				P9_MAXWELEM, rcall->params.rwalk.nwqid);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3616: FILE: net/9p/conv.c:410:
+static inline void p9_put_int8(struct cbuf *bufp, u8 val, u8 * p)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3622: FILE: net/9p/conv.c:416:
+static inline void p9_put_int16(struct cbuf *bufp, u16 val, u16 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3628: FILE: net/9p/conv.c:422:
+static inline void p9_put_int32(struct cbuf *bufp, u32 val, u32 * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3634: FILE: net/9p/conv.c:428:
+static inline void p9_put_int64(struct cbuf *bufp, u64 val, u64 * p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3660: FILE: net/9p/conv.c:454:
+p9_put_data(struct cbuf *bufp, const char *data, int count,
+		   unsigned char **pdata)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3668: FILE: net/9p/conv.c:462:
+p9_put_user_data(struct cbuf *bufp, const char __user * data, int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3669: FILE: net/9p/conv.c:463:
+p9_put_user_data(struct cbuf *bufp, const char __user * data, int count,
+		   unsigned char **pdata)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3677: FILE: net/9p/conv.c:471:
+p9_put_wstat(struct cbuf *bufp, struct p9_wstat *wstat,
+	       struct p9_stat *stat, int statsz, int dotu)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*fc)...) over kmalloc(sizeof(struct p9_fcall)...)
#3709: FILE: net/9p/conv.c:503:
+	fc = kmalloc(sizeof(struct p9_fcall) + size, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: No space is necessary after a cast
#3726: FILE: net/9p/conv.c:520:
+	*(__le16 *) (fc->sdata + 5) = cpu_to_le16(tag);

WARNING:INDENTED_LABEL: labels should not be indented
#3749: FILE: net/9p/conv.c:543:
+      error:

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#3762: FILE: net/9p/conv.c:555:
uname[s] aname[s] */

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3763: FILE: net/9p/conv.c:556:
+	size = 4 + 2 + strlen(uname) + 2 + strlen(aname);	/* afid[4]
+	fc = p9_create_common(bufp, size, P9_TAUTH);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3790: FILE: net/9p/conv.c:582:
+	size = 4 + 4 + 2 + strlen(uname) + 2 + strlen(aname);	/* fid[4]
+	fc = p9_create_common(bufp, size, P9_TATTACH);

WARNING:INDENTED_LABEL: labels should not be indented
#3822: FILE: net/9p/conv.c:614:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3828: FILE: net/9p/conv.c:620:
+struct p9_fcall *p9_create_twalk(u32 fid, u32 newfid, u16 nwname,
+				     char **wnames)

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3841: FILE: net/9p/conv.c:633:
+	for (i = 0; i < nwname; i++) {
+		size += 2 + strlen(wnames[i]);	/* wname[s] */
+	}

WARNING:BRACES: braces {} are not necessary for single statement blocks
#3852: FILE: net/9p/conv.c:644:
+	for (i = 0; i < nwname; i++) {
+		p9_put_str(bufp, wnames[i], &fc->params.twalk.wnames[i]);
+	}

WARNING:INDENTED_LABEL: labels should not be indented
#3860: FILE: net/9p/conv.c:652:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#3884: FILE: net/9p/conv.c:676:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3890: FILE: net/9p/conv.c:682:
+struct p9_fcall *p9_create_tcreate(u32 fid, char *name, u32 perm, u8 mode,
+	char *extension, int dotu)

CHECK:SPACING: No space is necessary after a cast
#3897: FILE: net/9p/conv.c:689:
+	size = 4 + 2 + strlen(name) + 4 + 1;	/* fid[4] name[s] perm[4] mode[1] */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!extension"
#3900: FILE: net/9p/conv.c:692:
+		    (extension == NULL ? 0 : strlen(extension));

WARNING:INDENTED_LABEL: labels should not be indented
#3918: FILE: net/9p/conv.c:710:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#3943: FILE: net/9p/conv.c:735:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3949: FILE: net/9p/conv.c:741:
+struct p9_fcall *p9_create_twrite(u32 fid, u64 offset, u32 count,
+				      const char *data)

WARNING:INDENTED_LABEL: labels should not be indented
#3974: FILE: net/9p/conv.c:766:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3980: FILE: net/9p/conv.c:772:
+struct p9_fcall *p9_create_twrite_u(u32 fid, u64 offset, u32 count,
+				      const char __user * data)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#3980: FILE: net/9p/conv.c:772:
+				      const char __user * data)

WARNING:INDENTED_LABEL: labels should not be indented
#4005: FILE: net/9p/conv.c:797:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#4028: FILE: net/9p/conv.c:820:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#4051: FILE: net/9p/conv.c:843:
+      error:

WARNING:INDENTED_LABEL: labels should not be indented
#4074: FILE: net/9p/conv.c:866:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4080: FILE: net/9p/conv.c:872:
+struct p9_fcall *p9_create_twstat(u32 fid, struct p9_wstat *wstat,
+				      int dotu)

WARNING:INDENTED_LABEL: labels should not be indented
#4101: FILE: net/9p/conv.c:893:
+      error:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4111: FILE: net/9p/error.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4135: FILE: net/9p/error.c:25:
+ *  51 Franklin Street, Fifth Floor$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#4195: FILE: net/9p/error.c:85:
+	{"Function not implemented", ENOSYS},

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "c->name"
#4305: FILE: net/9p/error.c:195:
+	for (c = errmap; c->name != NULL; c++) {

ERROR:SPACING: spaces required around that '==' (ctx:VxV)
#4334: FILE: net/9p/error.c:224:
+		if (c->namelen==len && !memcmp(c->name, errstr, len)) {
 		              ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4343: FILE: net/9p/error.c:233:
+		printk(KERN_ERR "%s: errstr :%s: not found\n", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#4343: FILE: net/9p/error.c:233:
+		printk(KERN_ERR "%s: errstr :%s: not found\n", __FUNCTION__,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4357: FILE: net/9p/fcprint.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#4358: FILE: net/9p/fcprint.c:2:
+ *  net/9p/fcprint.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4376: FILE: net/9p/fcprint.c:20:
+ *  51 Franklin Street, Fifth Floor$

CHECK:SPACING: No space is necessary after a cast
#4409: FILE: net/9p/fcprint.c:53:
+	return scnprintf(buf, buflen, "(%.16llx %x %s)", (long long int) q->path,

WARNING:UNNECESSARY_INT: Prefer 'long long' over 'long long int' as the int is unnecessary
#4409: FILE: net/9p/fcprint.c:53:
+	return scnprintf(buf, buflen, "(%.16llx %x %s)", (long long int) q->path,

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#4440: FILE: net/9p/fcprint.c:84:
+	return scnprintf(buf, buflen, "%s%03o", b, perm&077);
 	                                               ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4449: FILE: net/9p/fcprint.c:93:
+	n = scnprintf(buf, buflen, "'%.*s' '%.*s'", st->name.len,
+		st->name.str, st->uid.len, st->uid.str);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4451: FILE: net/9p/fcprint.c:95:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_uid);
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4451: FILE: net/9p/fcprint.c:95:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_uid);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4453: FILE: net/9p/fcprint.c:97:
+	n += scnprintf(buf+n, buflen-n, " '%.*s'", st->gid.len, st->gid.str);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4453: FILE: net/9p/fcprint.c:97:
+	n += scnprintf(buf+n, buflen-n, " '%.*s'", st->gid.len, st->gid.str);
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4455: FILE: net/9p/fcprint.c:99:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_gid);
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4455: FILE: net/9p/fcprint.c:99:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_gid);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4457: FILE: net/9p/fcprint.c:101:
+	n += scnprintf(buf+n, buflen-n, " '%.*s'", st->muid.len, st->muid.str);
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4457: FILE: net/9p/fcprint.c:101:
+	n += scnprintf(buf+n, buflen-n, " '%.*s'", st->muid.len, st->muid.str);
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4459: FILE: net/9p/fcprint.c:103:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_muid);
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4459: FILE: net/9p/fcprint.c:103:
+		n += scnprintf(buf+n, buflen-n, "(%d)", st->n_muid);
 		                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4461: FILE: net/9p/fcprint.c:105:
+	n += scnprintf(buf+n, buflen-n, " q ");
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4461: FILE: net/9p/fcprint.c:105:
+	n += scnprintf(buf+n, buflen-n, " q ");
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4462: FILE: net/9p/fcprint.c:106:
+	n += p9_printqid(buf+n, buflen-n, &st->qid);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4462: FILE: net/9p/fcprint.c:106:
+	n += p9_printqid(buf+n, buflen-n, &st->qid);
 	                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4463: FILE: net/9p/fcprint.c:107:
+	n += scnprintf(buf+n, buflen-n, " m ");
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4463: FILE: net/9p/fcprint.c:107:
+	n += scnprintf(buf+n, buflen-n, " m ");
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4464: FILE: net/9p/fcprint.c:108:
+	n += p9_printperm(buf+n, buflen-n, st->mode);
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4464: FILE: net/9p/fcprint.c:108:
+	n += p9_printperm(buf+n, buflen-n, st->mode);
 	                               ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4465: FILE: net/9p/fcprint.c:109:
+	n += scnprintf(buf+n, buflen-n, " at %d mt %d l %lld",
 	                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4465: FILE: net/9p/fcprint.c:109:
+	n += scnprintf(buf+n, buflen-n, " at %d mt %d l %lld",
 	                            ^

CHECK:SPACING: No space is necessary after a cast
#4466: FILE: net/9p/fcprint.c:110:
+		st->atime, st->mtime, (long long int) st->length);

WARNING:UNNECESSARY_INT: Prefer 'long long' over 'long long int' as the int is unnecessary
#4466: FILE: net/9p/fcprint.c:110:
+		st->atime, st->mtime, (long long int) st->length);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4469: FILE: net/9p/fcprint.c:113:
+		n += scnprintf(buf+n, buflen-n, " ext '%.*s'",
 		                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4469: FILE: net/9p/fcprint.c:113:
+		n += scnprintf(buf+n, buflen-n, " ext '%.*s'",
 		                            ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4480: FILE: net/9p/fcprint.c:124:
+	i = n = 0;

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#4483: FILE: net/9p/fcprint.c:127:
+		if (i%4 == 3)
 		     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#4485: FILE: net/9p/fcprint.c:129:
+		if (i%32 == 31)
 		     ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#4498: FILE: net/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                             ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#4498: FILE: net/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                                ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#4498: FILE: net/9p/fcprint.c:142:
+	return p9_dumpdata(buf, buflen, data, datalen<16?datalen:16);
 	                                                        ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4515: FILE: net/9p/fcprint.c:159:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4515: FILE: net/9p/fcprint.c:159:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4522: FILE: net/9p/fcprint.c:166:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4522: FILE: net/9p/fcprint.c:166:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4529: FILE: net/9p/fcprint.c:173:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4529: FILE: net/9p/fcprint.c:173:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4537: FILE: net/9p/fcprint.c:181:
+		ret += scnprintf(buf+ret, buflen-ret, "Rauth tag %u qid ", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4537: FILE: net/9p/fcprint.c:181:
+		ret += scnprintf(buf+ret, buflen-ret, "Rauth tag %u qid ", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4538: FILE: net/9p/fcprint.c:182:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rauth.qid);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4538: FILE: net/9p/fcprint.c:182:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rauth.qid);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4542: FILE: net/9p/fcprint.c:186:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4542: FILE: net/9p/fcprint.c:186:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4550: FILE: net/9p/fcprint.c:194:
+		ret += scnprintf(buf+ret, buflen-ret, "Rattach tag %u qid ", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4550: FILE: net/9p/fcprint.c:194:
+		ret += scnprintf(buf+ret, buflen-ret, "Rattach tag %u qid ", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4551: FILE: net/9p/fcprint.c:195:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rattach.qid);
 		               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4551: FILE: net/9p/fcprint.c:195:
+		p9_printqid(buf+ret, buflen-ret, &fc->params.rattach.qid);
 		                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4555: FILE: net/9p/fcprint.c:199:
+		ret += scnprintf(buf+ret, buflen-ret, "Rerror tag %u ename '%.*s'",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4555: FILE: net/9p/fcprint.c:199:
+		ret += scnprintf(buf+ret, buflen-ret, "Rerror tag %u ename '%.*s'",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4559: FILE: net/9p/fcprint.c:203:
+			ret += scnprintf(buf+ret, buflen-ret, " ecode %d\n",
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4559: FILE: net/9p/fcprint.c:203:
+			ret += scnprintf(buf+ret, buflen-ret, " ecode %d\n",
 			                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4564: FILE: net/9p/fcprint.c:208:
+		ret += scnprintf(buf+ret, buflen-ret, "Tflush tag %u oldtag %u",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4564: FILE: net/9p/fcprint.c:208:
+		ret += scnprintf(buf+ret, buflen-ret, "Tflush tag %u oldtag %u",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4569: FILE: net/9p/fcprint.c:213:
+		ret += scnprintf(buf+ret, buflen-ret, "Rflush tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4569: FILE: net/9p/fcprint.c:213:
+		ret += scnprintf(buf+ret, buflen-ret, "Rflush tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4573: FILE: net/9p/fcprint.c:217:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4573: FILE: net/9p/fcprint.c:217:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

ERROR:SPACING: space required before the open parenthesis '('
#4577: FILE: net/9p/fcprint.c:221:
+		for(i = 0; i < fc->params.twalk.nwname; i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4578: FILE: net/9p/fcprint.c:222:
+			ret += scnprintf(buf+ret, buflen-ret," '%.*s'",
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4578: FILE: net/9p/fcprint.c:222:
+			ret += scnprintf(buf+ret, buflen-ret," '%.*s'",
 			                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4578: FILE: net/9p/fcprint.c:222:
+			ret += scnprintf(buf+ret, buflen-ret," '%.*s'",
 			                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4584: FILE: net/9p/fcprint.c:228:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwalk tag %u nwqid %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4584: FILE: net/9p/fcprint.c:228:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwalk tag %u nwqid %d",
 		                                ^

ERROR:SPACING: space required before the open parenthesis '('
#4586: FILE: net/9p/fcprint.c:230:
+		for(i = 0; i < fc->params.rwalk.nwqid; i++)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4587: FILE: net/9p/fcprint.c:231:
+			ret += p9_printqid(buf+ret, buflen-ret,
 			                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4587: FILE: net/9p/fcprint.c:231:
+			ret += p9_printqid(buf+ret, buflen-ret,
 			                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4592: FILE: net/9p/fcprint.c:236:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4592: FILE: net/9p/fcprint.c:236:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4598: FILE: net/9p/fcprint.c:242:
+		ret += scnprintf(buf+ret, buflen-ret, "Ropen tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4598: FILE: net/9p/fcprint.c:242:
+		ret += scnprintf(buf+ret, buflen-ret, "Ropen tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4599: FILE: net/9p/fcprint.c:243:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.ropen.qid);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4599: FILE: net/9p/fcprint.c:243:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.ropen.qid);
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4600: FILE: net/9p/fcprint.c:244:
+		ret += scnprintf(buf+ret, buflen-ret," iounit %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4600: FILE: net/9p/fcprint.c:244:
+		ret += scnprintf(buf+ret, buflen-ret," iounit %d",
 		                                ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#4600: FILE: net/9p/fcprint.c:244:
+		ret += scnprintf(buf+ret, buflen-ret," iounit %d",
 		                                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4605: FILE: net/9p/fcprint.c:249:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4605: FILE: net/9p/fcprint.c:249:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4610: FILE: net/9p/fcprint.c:254:
+		ret += p9_printperm(buf+ret, buflen-ret, fc->params.tcreate.perm);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4610: FILE: net/9p/fcprint.c:254:
+		ret += p9_printperm(buf+ret, buflen-ret, fc->params.tcreate.perm);
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4611: FILE: net/9p/fcprint.c:255:
+		ret += scnprintf(buf+ret, buflen-ret, " mode %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4611: FILE: net/9p/fcprint.c:255:
+		ret += scnprintf(buf+ret, buflen-ret, " mode %d",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4616: FILE: net/9p/fcprint.c:260:
+		ret += scnprintf(buf+ret, buflen-ret, "Rcreate tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4616: FILE: net/9p/fcprint.c:260:
+		ret += scnprintf(buf+ret, buflen-ret, "Rcreate tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4617: FILE: net/9p/fcprint.c:261:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.rcreate.qid);
 		                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4617: FILE: net/9p/fcprint.c:261:
+		ret += p9_printqid(buf+ret, buflen-ret, &fc->params.rcreate.qid);
 		                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4618: FILE: net/9p/fcprint.c:262:
+		ret += scnprintf(buf+ret, buflen-ret, " iounit %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4618: FILE: net/9p/fcprint.c:262:
+		ret += scnprintf(buf+ret, buflen-ret, " iounit %d",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4623: FILE: net/9p/fcprint.c:267:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4623: FILE: net/9p/fcprint.c:267:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#4626: FILE: net/9p/fcprint.c:270:
+			(long long int) fc->params.tread.offset,

WARNING:UNNECESSARY_INT: Prefer 'long long' over 'long long int' as the int is unnecessary
#4626: FILE: net/9p/fcprint.c:270:
+			(long long int) fc->params.tread.offset,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4631: FILE: net/9p/fcprint.c:275:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4631: FILE: net/9p/fcprint.c:275:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4634: FILE: net/9p/fcprint.c:278:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.rread.data,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4634: FILE: net/9p/fcprint.c:278:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.rread.data,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4639: FILE: net/9p/fcprint.c:283:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4639: FILE: net/9p/fcprint.c:283:
+		ret += scnprintf(buf+ret, buflen-ret,
 		                                ^

CHECK:SPACING: No space is necessary after a cast
#4642: FILE: net/9p/fcprint.c:286:
+			(long long int) fc->params.twrite.offset,

WARNING:UNNECESSARY_INT: Prefer 'long long' over 'long long int' as the int is unnecessary
#4642: FILE: net/9p/fcprint.c:286:
+			(long long int) fc->params.twrite.offset,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4644: FILE: net/9p/fcprint.c:288:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.twrite.data,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4644: FILE: net/9p/fcprint.c:288:
+		ret += p9_printdata(buf+ret, buflen-ret, fc->params.twrite.data,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4649: FILE: net/9p/fcprint.c:293:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwrite tag %u count %u",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4649: FILE: net/9p/fcprint.c:293:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwrite tag %u count %u",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4654: FILE: net/9p/fcprint.c:298:
+		ret += scnprintf(buf+ret, buflen-ret, "Tclunk tag %u fid %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4654: FILE: net/9p/fcprint.c:298:
+		ret += scnprintf(buf+ret, buflen-ret, "Tclunk tag %u fid %d",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4659: FILE: net/9p/fcprint.c:303:
+		ret += scnprintf(buf+ret, buflen-ret, "Rclunk tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4659: FILE: net/9p/fcprint.c:303:
+		ret += scnprintf(buf+ret, buflen-ret, "Rclunk tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4663: FILE: net/9p/fcprint.c:307:
+		ret += scnprintf(buf+ret, buflen-ret, "Tremove tag %u fid %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4663: FILE: net/9p/fcprint.c:307:
+		ret += scnprintf(buf+ret, buflen-ret, "Tremove tag %u fid %d",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4668: FILE: net/9p/fcprint.c:312:
+		ret += scnprintf(buf+ret, buflen-ret, "Rremove tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4668: FILE: net/9p/fcprint.c:312:
+		ret += scnprintf(buf+ret, buflen-ret, "Rremove tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4672: FILE: net/9p/fcprint.c:316:
+		ret += scnprintf(buf+ret, buflen-ret, "Tstat tag %u fid %d",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4672: FILE: net/9p/fcprint.c:316:
+		ret += scnprintf(buf+ret, buflen-ret, "Tstat tag %u fid %d",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4677: FILE: net/9p/fcprint.c:321:
+		ret += scnprintf(buf+ret, buflen-ret, "Rstat tag %u ", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4677: FILE: net/9p/fcprint.c:321:
+		ret += scnprintf(buf+ret, buflen-ret, "Rstat tag %u ", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4678: FILE: net/9p/fcprint.c:322:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.rstat.stat,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4678: FILE: net/9p/fcprint.c:322:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.rstat.stat,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4683: FILE: net/9p/fcprint.c:327:
+		ret += scnprintf(buf+ret, buflen-ret, "Twstat tag %u fid %d ",
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4683: FILE: net/9p/fcprint.c:327:
+		ret += scnprintf(buf+ret, buflen-ret, "Twstat tag %u fid %d ",
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4685: FILE: net/9p/fcprint.c:329:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.twstat.stat,
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4685: FILE: net/9p/fcprint.c:329:
+		ret += p9_printstat(buf+ret, buflen-ret, &fc->params.twstat.stat,
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4690: FILE: net/9p/fcprint.c:334:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwstat tag %u", tag);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4690: FILE: net/9p/fcprint.c:334:
+		ret += scnprintf(buf+ret, buflen-ret, "Rwstat tag %u", tag);
 		                                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4694: FILE: net/9p/fcprint.c:338:
+		ret += scnprintf(buf+ret, buflen-ret, "unknown type %d", type);
 		                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4694: FILE: net/9p/fcprint.c:338:
+		ret += scnprintf(buf+ret, buflen-ret, "unknown type %d", type);
 		                                ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#4709: FILE: net/9p/fcprint.c:353:
+EXPORT_SYMBOL(p9_printfcall);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4716: FILE: net/9p/mod.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4737: FILE: net/9p/mod.c:22:
+ *  51 Franklin Street, Fifth Floor$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#4747: FILE: net/9p/mod.c:32:
+unsigned int p9_debug_level = 0;		/* feature-rific global debug level  */

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4754: FILE: net/9p/mod.c:39:
+extern int p9_mux_global_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4755: FILE: net/9p/mod.c:40:
+extern void p9_mux_global_exit(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4756: FILE: net/9p/mod.c:41:
+extern int p9_sysctl_register(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#4757: FILE: net/9p/mod.c:42:
+extern void p9_sysctl_unregister(void);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#4768: FILE: net/9p/mod.c:53:
+	printk(KERN_INFO "Installing 9P2000 support\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4771: FILE: net/9p/mod.c:56:
+		printk(KERN_WARNING "9p: starting mux failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4777: FILE: net/9p/mod.c:62:
+		printk(KERN_WARNING "9p: registering sysctl failed\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4808: FILE: net/9p/mux.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#4809: FILE: net/9p/mux.c:2:
+ * net/9p/mux.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#4828: FILE: net/9p/mux.c:21:
+ *  51 Franklin Street, Fifth Floor$

CHECK:CAMELCASE: Avoid CamelCase: <Rworksched>
#4849: FILE: net/9p/mux.c:42:
+	Rworksched = 1,		/* read work scheduled or running */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Rpending>
#4850: FILE: net/9p/mux.c:43:
+	Rpending = 2,		/* can read */

CHECK:CAMELCASE: Avoid CamelCase: <Wworksched>
#4851: FILE: net/9p/mux.c:44:
+	Wworksched = 4,		/* write work scheduled or running */

CHECK:CAMELCASE: Avoid CamelCase: <Wpending>
#4852: FILE: net/9p/mux.c:45:
+	Wpending = 8,		/* can write */

CHECK:CAMELCASE: Avoid CamelCase: <None>
#4856: FILE: net/9p/mux.c:49:
+	None,

CHECK:CAMELCASE: Avoid CamelCase: <Flushing>
#4857: FILE: net/9p/mux.c:50:
+	Flushing,

CHECK:CAMELCASE: Avoid CamelCase: <Flushed>
#4858: FILE: net/9p/mux.c:51:
+	Flushed,

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4864: FILE: net/9p/mux.c:57:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#4867: FILE: net/9p/mux.c:60:
+	struct p9_fcall *rcall;
 	                 ^^^^^

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4876: FILE: net/9p/mux.c:69:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#4887: FILE: net/9p/mux.c:80:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#4911: FILE: net/9p/mux.c:104:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#4918: FILE: net/9p/mux.c:111:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                                      ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4918: FILE: net/9p/mux.c:111:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4919: FILE: net/9p/mux.c:112:
+static void p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
+			  poll_table * p);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#4919: FILE: net/9p/mux.c:112:
+			  poll_table * p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#4939: FILE: net/9p/mux.c:132:
+		printk(KERN_WARNING "v9fs: mux: creating workqueue failed\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4980: FILE: net/9p/mux.c:173:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p muxnum %d procnum %d\n", m, p9_mux_num,
+		p9_mux_poll_task_num);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p9_mux_poll_tasks[i].task"
#4986: FILE: net/9p/mux.c:179:
+			if (p9_mux_poll_tasks[i].task == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4990: FILE: net/9p/mux.c:183:
+				pproc = kthread_create(p9_poll_proc, vpt,
+						   "v9fs-poll");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "vpt->task"
#5013: FILE: net/9p/mux.c:206:
+		if (vpt->task != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!vptlast"
#5028: FILE: net/9p/mux.c:221:
+		if (vptlast == NULL)

ERROR:SPACING: space required before the open parenthesis '('
#5053: FILE: net/9p/mux.c:246:
+	for(i = 0; i < ARRAY_SIZE(m->poll_waddr); i++) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "m->poll_waddr[i]"
#5054: FILE: net/9p/mux.c:247:
+		if (m->poll_waddr[i] != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5079: FILE: net/9p/mux.c:272:
+struct p9_conn *p9_conn_create(struct p9_transport *trans, int msize,
+				    unsigned char *extended)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m)...) over kmalloc(sizeof(struct p9_conn)...)
#5085: FILE: net/9p/mux.c:278:
+	m = kmalloc(sizeof(struct p9_conn), GFP_KERNEL);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5104: FILE: net/9p/mux.c:297:
+	m->rcall = NULL;
 	   ^^^^^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5107: FILE: net/9p/mux.c:300:
+	m->wpos = m->wsize = 0;

ERROR:SPACING: space required before the open parenthesis '('
#5129: FILE: net/9p/mux.c:322:
+	for(i = 0; i < ARRAY_SIZE(m->poll_waddr); i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5149: FILE: net/9p/mux.c:342:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p prev %p next %p\n", m,
+		m->mux_list.prev, m->mux_list.next);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5155: FILE: net/9p/mux.c:348:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p waiting for empty request queue\n",
+			m);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5158: FILE: net/9p/mux.c:351:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p request queue empty: %d\n", m,
+			list_empty(&m->req_list));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5170: FILE: net/9p/mux.c:363:
+ * ^Ito files wait queue$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5173: FILE: net/9p/mux.c:366:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
                          ^^^^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5173: FILE: net/9p/mux.c:366:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5174: FILE: net/9p/mux.c:367:
+p9_pollwait(struct file *filp, wait_queue_head_t * wait_address,
+	      poll_table * p)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#5174: FILE: net/9p/mux.c:367:
+	      poll_table * p)

ERROR:SPACING: space required before the open parenthesis '('
#5180: FILE: net/9p/mux.c:373:
+	for(i = 0; i < ARRAY_SIZE(m->poll_waddr); i++)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!m->poll_waddr[i]"
#5181: FILE: net/9p/mux.c:374:
+		if (m->poll_waddr[i] == NULL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#5232: FILE: net/9p/mux.c:425:
+		if ((m->wsize || !list_empty(&m->unsent_req_list))
+		    && !test_and_set_bit(Wworksched, &m->wsched)) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5241: FILE: net/9p/mux.c:434:
+ * ^Ithe appropriate work to the work queue$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5291: FILE: net/9p/mux.c:484:
+		req = list_entry(m->unsent_req_list.next, struct p9_req,
+			       req_list);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5316: FILE: net/9p/mux.c:509:
+		m->wpos = m->wsize = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#5318: FILE: net/9p/mux.c:511:
+	if (m->wsize == 0 && !list_empty(&m->unsent_req_list)) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#5324: FILE: net/9p/mux.c:517:
+		if (n & POLLOUT) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5327: FILE: net/9p/mux.c:520:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#5329: FILE: net/9p/mux.c:522:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#5334: FILE: net/9p/mux.c:527:
+      error:

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5357: FILE: net/9p/mux.c:550:
+				PRINT_FCALL_ERROR("unknown error", req->rcall);
 				                                        ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5365: FILE: net/9p/mux.c:558:
+		P9_DPRINTK(P9_DEBUG_ERROR, "fcall mismatch: expected %d, got %d\n",
+			req->tcall->id + 1, req->rcall->id);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5379: FILE: net/9p/mux.c:572:
+	struct p9_fcall *rcall;
 	                 ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5387: FILE: net/9p/mux.c:580:
+	rcall = NULL;
 	^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5390: FILE: net/9p/mux.c:583:
+	if (!m->rcall) {
 	        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5391: FILE: net/9p/mux.c:584:
+		m->rcall =
 		   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5393: FILE: net/9p/mux.c:586:
+		if (!m->rcall) {
 		        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5398: FILE: net/9p/mux.c:591:
+		m->rbuf = (char *)m->rcall + sizeof(struct p9_fcall);
 		                     ^^^^^

CHECK:SPACING: No space is necessary after a cast
#5415: FILE: net/9p/mux.c:608:
+		n = le32_to_cpu(*(__le32 *) m->rbuf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5418: FILE: net/9p/mux.c:611:
+			P9_DPRINTK(P9_DEBUG_ERROR,
+				"requested packet size too big: %d\n", n);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5427: FILE: net/9p/mux.c:620:
+		    p9_deserialize_fcall(m->rbuf, n, m->rcall, *m->extended);
 		                                        ^^^^^

WARNING:BRACES: braces {} are not necessary for single statement blocks
#5428: FILE: net/9p/mux.c:621:
+		if (err < 0) {
+			goto error;
+		}

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5433: FILE: net/9p/mux.c:626:
+		if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 		                   ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5436: FILE: net/9p/mux.c:629:
+			p9_printfcall(buf, sizeof(buf), m->rcall,
 			                                   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5437: FILE: net/9p/mux.c:630:
+			p9_printfcall(buf, sizeof(buf), m->rcall,
+				*m->extended);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#5438: FILE: net/9p/mux.c:631:
+			printk(KERN_NOTICE ">>> %p %s\n", m, buf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5442: FILE: net/9p/mux.c:635:
+		rcall = m->rcall;
 		^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5442: FILE: net/9p/mux.c:635:
+		rcall = m->rcall;
 		           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5445: FILE: net/9p/mux.c:638:
+			m->rcall = kmalloc(sizeof(struct p9_fcall) + m->msize,
 			   ^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*m->rcall)...) over kmalloc(sizeof(struct p9_fcall)...)
#5445: FILE: net/9p/mux.c:638:
+			m->rcall = kmalloc(sizeof(struct p9_fcall) + m->msize,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5447: FILE: net/9p/mux.c:640:
+			if (!m->rcall) {
 			        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5452: FILE: net/9p/mux.c:645:
+			m->rbuf = (char *)m->rcall + sizeof(struct p9_fcall);
 			                     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5456: FILE: net/9p/mux.c:649:
+			m->rcall = NULL;
 			   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5462: FILE: net/9p/mux.c:655:
+		P9_DPRINTK(P9_DEBUG_MUX, "mux %p fcall id %d tag %d\n", m, rcall->id,
+			rcall->tag);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5477: FILE: net/9p/mux.c:670:
+			req->rcall = rcall;
 			     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5477: FILE: net/9p/mux.c:670:
+			req->rcall = rcall;
 			             ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5484: FILE: net/9p/mux.c:677:
+					kfree(req->rcall);
 					           ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5491: FILE: net/9p/mux.c:684:
+				P9_DPRINTK(P9_DEBUG_ERROR,
+					"unexpected response mux %p id %d tag %d\n",

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5493: FILE: net/9p/mux.c:686:
+			kfree(rcall);
 			      ^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#5497: FILE: net/9p/mux.c:690:
+	if (!list_empty(&m->req_list)) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#5503: FILE: net/9p/mux.c:696:
+		if (n & POLLIN) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#5506: FILE: net/9p/mux.c:699:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#5508: FILE: net/9p/mux.c:701:
+	} else

WARNING:INDENTED_LABEL: labels should not be indented
#5513: FILE: net/9p/mux.c:706:
+      error:

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5531: FILE: net/9p/mux.c:724:
+static struct p9_req *p9_send_request(struct p9_conn *m,
+					  struct p9_fcall *tc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5538: FILE: net/9p/mux.c:731:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p task %p tcall %p id %d\n", m, current,
+		tc, tc->id);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*req)...) over kmalloc(sizeof(struct p9_req)...)
#5542: FILE: net/9p/mux.c:735:
+	req = kmalloc(sizeof(struct p9_req), GFP_KERNEL);

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#5557: FILE: net/9p/mux.c:750:
+	if ((p9_debug_level&P9_DEBUG_FCALL) == P9_DEBUG_FCALL) {
 	                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#5561: FILE: net/9p/mux.c:754:
+		printk(KERN_NOTICE "<<< %p %s\n", m, buf);

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5568: FILE: net/9p/mux.c:761:
+	req->rcall = NULL;
 	     ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5604: FILE: net/9p/mux.c:797:
+		freq->tcall, freq->rcall, freq->err,
 		                   ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5604: FILE: net/9p/mux.c:797:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p tc %p rc %p err %d oldtag %d\n", m,
+		freq->tcall, freq->rcall, freq->err,

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5628: FILE: net/9p/mux.c:821:
+			kfree(req->rcall);
 			           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5634: FILE: net/9p/mux.c:827:
+	kfree(freq->rcall);
 	            ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5648: FILE: net/9p/mux.c:841:
+	if (req->rcall || req->err) {
 	         ^^^^^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5662: FILE: net/9p/mux.c:854:
+			P9_DPRINTK(P9_DEBUG_MUX, "mux %p req %p request is not sent yet\n", m, req);
 			                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5662: FILE: net/9p/mux.c:854:
+			P9_DPRINTK(P9_DEBUG_MUX, "mux %p req %p request is not sent yet\n", m, req);
 			                                     ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5684: FILE: net/9p/mux.c:876:
+	P9_DPRINTK(P9_DEBUG_MUX, "req %p r %p\n", req, a);
 	                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5684: FILE: net/9p/mux.c:876:
+	P9_DPRINTK(P9_DEBUG_MUX, "req %p r %p\n", req, a);
 	                                   ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5686: FILE: net/9p/mux.c:878:
+	r->rcall = req->rcall;
 	   ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5686: FILE: net/9p/mux.c:878:
+	r->rcall = req->rcall;
 	                ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5696: FILE: net/9p/mux.c:888:
+ * p9_mux_rpc - sends 9P request and waits until a response is available.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5697: FILE: net/9p/mux.c:889:
+ *^IThe function can be interrupted.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5698: FILE: net/9p/mux.c:890:
+ * @m: mux data$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5699: FILE: net/9p/mux.c:891:
+ * @tc: request to be sent$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5700: FILE: net/9p/mux.c:892:
+ * @rc: pointer where a pointer to the response is stored$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5701: FILE: net/9p/mux.c:893:
+ */$

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5713: FILE: net/9p/mux.c:905:
+	r.rcall = NULL;
 	  ^^^^^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5729: FILE: net/9p/mux.c:921:
+		P9_DPRINTK(P9_DEBUG_MUX, "error %d\n", err);
 		                                ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5733: FILE: net/9p/mux.c:925:
+	err = wait_event_interruptible(r.wqueue, r.rcall != NULL || r.err < 0);
 	                                           ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5743: FILE: net/9p/mux.c:935:
+					r.rcall || r.err);
 					  ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5744: FILE: net/9p/mux.c:936:
+			} while (!r.rcall && !r.err && err==-ERESTARTSYS &&
 			            ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5759: FILE: net/9p/mux.c:951:
+		*rc = r.rcall;
 		        ^^^^^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5761: FILE: net/9p/mux.c:953:
+		kfree(r.rcall);
 		        ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5773: FILE: net/9p/mux.c:965:
+ * p9_conn_rpcnb - sends 9P request without waiting for response.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5774: FILE: net/9p/mux.c:966:
+ * @m: mux data$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5775: FILE: net/9p/mux.c:967:
+ * @tc: request to be sent$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5776: FILE: net/9p/mux.c:968:
+ * @cb: callback function to be called when response arrives$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5777: FILE: net/9p/mux.c:969:
+ * @cba: value to pass to the callback function$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5778: FILE: net/9p/mux.c:970:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5788: FILE: net/9p/mux.c:980:
+		P9_DPRINTK(P9_DEBUG_MUX, "error %d\n", err);
 		                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5792: FILE: net/9p/mux.c:984:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p tc %p tag %d\n", m, tc, req->tag);
 	                              ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5792: FILE: net/9p/mux.c:984:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p tc %p tag %d\n", m, tc, req->tag);
 	                                    ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5792: FILE: net/9p/mux.c:984:
+	P9_DPRINTK(P9_DEBUG_MUX, "mux %p tc %p tag %d\n", m, tc, req->tag);
 	                                           ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5799: FILE: net/9p/mux.c:991:
+ * p9_conn_cancel - cancel all pending requests with error$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5800: FILE: net/9p/mux.c:992:
+ * @m: mux data$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5801: FILE: net/9p/mux.c:993:
+ * @err: error code$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5802: FILE: net/9p/mux.c:994:
+ */$

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5808: FILE: net/9p/mux.c:1000:
+	P9_DPRINTK(P9_DEBUG_ERROR, "mux %p err %d\n", m, err);
 	                                ^

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#5808: FILE: net/9p/mux.c:1000:
+	P9_DPRINTK(P9_DEBUG_ERROR, "mux %p err %d\n", m, err);
 	                                       ^

WARNING:TYPO_SPELLING: 'rcall' may be misspelled - perhaps 'recall'?
#5827: FILE: net/9p/mux.c:1019:
+			kfree(req->rcall);
 			           ^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5856: FILE: net/9p/sysctl.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#5857: FILE: net/9p/sysctl.c:2:
+ *  net/9p/sysctl.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5875: FILE: net/9p/sysctl.c:20:
+ *  51 Franklin Street, Fifth Floor$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5948: FILE: net/9p/trans_fd.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5970: FILE: net/9p/trans_fd.c:23:
+ *  51 Franklin Street, Fifth Floor$

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#5982: FILE: net/9p/trans_fd.c:35:
+#include <asm/uaccess.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6001: FILE: net/9p/trans_fd.c:54:
+static unsigned int p9_fd_poll(struct p9_transport *trans,
+	struct poll_table_struct *pt);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#6012: FILE: net/9p/trans_fd.c:65:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6037: FILE: net/9p/trans_fd.c:90:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_tcp: problem connecting socket to %s\n",

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#6065: FILE: net/9p/trans_fd.c:118:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6076: FILE: net/9p/trans_fd.c:129:
+		P9_EPRINTK(KERN_ERR, "p9_trans_unix: address too long: %s\n",
+			addr);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6088: FILE: net/9p/trans_fd.c:141:
+		P9_EPRINTK(KERN_ERR,
+			"p9_trans_unix: problem connecting socket: %s: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6114: FILE: net/9p/trans_fd.c:167:
+		printk(KERN_ERR "v9fs: Insufficient options for proto=fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*trans)...) over kmalloc(sizeof(struct p9_transport)...)
#6118: FILE: net/9p/trans_fd.c:171:
+	trans = kmalloc(sizeof(struct p9_transport), GFP_KERNEL);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'p9_socket_open', this function's name, in a string
#6146: FILE: net/9p/trans_fd.c:199:
+		P9_EPRINTK(KERN_ERR, "p9_socket_open: failed to map fd\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'p9_socket_open', this function's name, in a string
#6152: FILE: net/9p/trans_fd.c:205:
+		P9_EPRINTK(KERN_ERR, "p9_socket_open: failed to open fd\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ts)...) over kmalloc(sizeof(struct p9_trans_fd)...)
#6164: FILE: net/9p/trans_fd.c:217:
+	struct p9_trans_fd *ts = kmalloc(sizeof(struct p9_trans_fd),

CHECK:CAMELCASE: Avoid CamelCase: <Connected>
#6181: FILE: net/9p/trans_fd.c:234:
+	trans->status = Connected;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6198: FILE: net/9p/trans_fd.c:251:
+	if (!trans || trans->status == Disconnected || !(ts = trans->priv))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:CAMELCASE: Avoid CamelCase: <Disconnected>
#6198: FILE: net/9p/trans_fd.c:251:
+	if (!trans || trans->status == Disconnected || !(ts = trans->priv))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6223: FILE: net/9p/trans_fd.c:276:
+	if (!trans || trans->status == Disconnected || !(ts = trans->priv))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#6247: FILE: net/9p/trans_fd.c:300:
+	if (!trans || trans->status != Connected || !(ts = trans->priv))

WARNING:INDENTED_LABEL: labels should not be indented
#6272: FILE: net/9p/trans_fd.c:325:
+      end:

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6308: FILE: net/9p/util.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#6309: FILE: net/9p/util.c:2:
+ *  net/9p/util.c

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#6329: FILE: net/9p/util.c:22:
+ *  51 Franklin Street, Fifth Floor$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*p)...) over kmalloc(sizeof(struct p9_idpool)...)
#6351: FILE: net/9p/util.c:44:
+	p = kmalloc(sizeof(struct p9_idpool), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "idr_find"
#6430: FILE: net/9p/util.c:123:
+	return idr_find(&p->pool, id) != NULL;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434208.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 32 errors, 119 warnings, 212 checks, 3264 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000434208.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
