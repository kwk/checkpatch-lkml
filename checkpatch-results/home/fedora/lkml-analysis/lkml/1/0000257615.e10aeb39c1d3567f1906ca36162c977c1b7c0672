WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#76: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#81: FILE: include/asm-microblaze/page.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#97: FILE: include/asm-microblaze/page.h:17:
+#define PAGE_SIZE	(1UL << PAGE_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#98: FILE: include/asm-microblaze/page.h:18:
+#define PAGE_MASK	(~(PAGE_SIZE-1))
                  	            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NEW_TYPEDEFS: do not add new typedefs
#119: FILE: include/asm-microblaze/page.h:39:
+typedef struct { unsigned long	pte; }		pte_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#120: FILE: include/asm-microblaze/page.h:40:
+typedef struct { unsigned long	ste[64]; }	pmd_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#121: FILE: include/asm-microblaze/page.h:41:
+typedef struct { pmd_t		pue[1]; }	pud_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#122: FILE: include/asm-microblaze/page.h:42:
+typedef struct { pud_t		pge[1]; }	pgd_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#123: FILE: include/asm-microblaze/page.h:43:
+typedef struct { unsigned long	pgprot; }	pgprot_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#124: FILE: include/asm-microblaze/page.h:44:
+typedef struct page *pgtable_t;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#138: FILE: include/asm-microblaze/page.h:58:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#138: FILE: include/asm-microblaze/page.h:58:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#138: FILE: include/asm-microblaze/page.h:58:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#138: FILE: include/asm-microblaze/page.h:58:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))
                              	                              ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'size' - possible side-effects?
#138: FILE: include/asm-microblaze/page.h:58:
+#define _ALIGN_UP(addr, size)	(((addr)+((size)-1))&(~((size)-1)))

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#139: FILE: include/asm-microblaze/page.h:59:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#139: FILE: include/asm-microblaze/page.h:59:
+#define _ALIGN_DOWN(addr, size)	((addr)&(~((size)-1)))
                                	                 ^

CHECK:SPACING: No space is necessary after a cast
#168: FILE: include/asm-microblaze/page.h:88:
+#define __pa(vaddr)		((unsigned long) (vaddr))

CHECK:SPACING: No space is necessary after a cast
#169: FILE: include/asm-microblaze/page.h:89:
+#define __va(paddr)		((void *) (paddr))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#184: FILE: include/asm-microblaze/page.h:104:
+#define pfn_valid(pfn)		((pfn) >= min_low_pfn && (pfn) < max_mapnr)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: include/asm-microblaze/segment.h:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#216: FILE: include/asm-microblaze/segment.h:14:
+typedef struct {

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#234: FILE: include/asm-microblaze/segment.h:32:
+#define set_fs(x) \
+		do { current_thread_info()->addr_limit = (x); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#248: FILE: include/asm-microblaze/unaligned.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257615.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 12 checks, 174 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000257615.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
