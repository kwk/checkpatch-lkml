CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#90: FILE: fs/ext4/balloc.c:1927:
+ext4_fsblk_t ext4_new_meta_block(handle_t *handle, struct inode *inode,
 		ext4_fsblk_t goal, int *errp)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#97: FILE: fs/ext4/balloc.c:1945:
 }
+ext4_fsblk_t ext4_new_meta_blocks(handle_t *handle, struct inode *inode,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#98: FILE: fs/ext4/balloc.c:1946:
+ext4_fsblk_t ext4_new_meta_blocks(handle_t *handle, struct inode *inode,
+		ext4_fsblk_t goal, unsigned long *count, int *errp)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#155: FILE: fs/ext4/ext4.h:973:
+extern ext4_fsblk_t ext4_new_meta_block(handle_t *handle, struct inode *inode,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#156: FILE: fs/ext4/ext4.h:974:
+extern ext4_fsblk_t ext4_new_meta_block(handle_t *handle, struct inode *inode,
 			ext4_fsblk_t goal, int *errp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#158: FILE: fs/ext4/ext4.h:975:
+extern ext4_fsblk_t ext4_new_meta_blocks(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#159: FILE: fs/ext4/ext4.h:976:
+extern ext4_fsblk_t ext4_new_meta_blocks(handle_t *handle, struct inode *inode,
 			ext4_fsblk_t goal, unsigned long *count, int *errp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#160: FILE: fs/ext4/ext4.h:977:
+extern ext4_fsblk_t ext4_new_blocks(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#161: FILE: fs/ext4/ext4.h:978:
+extern ext4_fsblk_t ext4_new_blocks(handle_t *handle, struct inode *inode,
+					ext4_lblk_t iblock, ext4_fsblk_t goal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#213: FILE: fs/ext4/inode.c:535:
+		current_block = ext4_new_meta_blocks(handle, inode,
+							goal, &count, err);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#229: FILE: fs/ext4/inode.c:551:
+			printk(KERN_INFO "%s returned more blocks than "

WARNING:SPLIT_STRING: quoted string split across lines
#230: FILE: fs/ext4/inode.c:552:
+			printk(KERN_INFO "%s returned more blocks than "
+						"requested\n", __func__);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPACING: space prohibited before semicolon
#239: FILE: fs/ext4/inode.c:558:
+	target = blks - count ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#247: FILE: fs/ext4/inode.c:566:
+	current_block = ext4_new_blocks(handle, inode, iblock,
+						goal, &count, err);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'target == blks'
#248: FILE: fs/ext4/inode.c:567:
+	if (*err && (target == blks)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <Indirect>
#280: FILE: fs/ext4/inode.c:623:
+				ext4_lblk_t *offsets, Indirect *branch)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: fs/ext4/inode.c:894:
+	err = ext4_alloc_branch(handle, inode, iblock, indirect_blks,
+					&count, goal,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 3 warnings, 14 checks, 206 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258607.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
