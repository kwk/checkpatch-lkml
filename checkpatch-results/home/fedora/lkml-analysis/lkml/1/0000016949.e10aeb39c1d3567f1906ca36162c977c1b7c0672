WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#84: FILE: arch/x86/Kconfig.debug:118:
+config DEBUG_SET_MODULE_RONX
+	bool "Set loadable kernel module data as NX and text as RO"
+	default n
+	depends on X86 && MODULES
+	---help---
+	  This option helps to catch unintended modifications to loadable
+	  kernel module's text and read-only data. It also prevents execution
+	  of LKM's data. Such protection may interfere with run-time code
+	  patching and dynamic kernel tracing.
+	  If in doubt, say "N".
+

Kconfig symbols should have a help text which fully describes
it.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#154: FILE: include/linux/module.h:667:
module_get_iter_tracepoints(struct tracepoint_iter *iter)

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_rw() should probably be void set_all_modules_text_rw(void)
#158: FILE: include/linux/module.h:671:
+static inline void set_all_modules_text_rw()

Function declarations without arguments like::

  int foo()

should be::

  int foo(void)

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_ro() should probably be void set_all_modules_text_ro(void)
#162: FILE: include/linux/module.h:675:
+static inline void set_all_modules_text_ro()

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'BASE' - possible side-effects?
#199: FILE: kernel/module.c:90:
+#define NUMBER_OF_PAGES(BASE, SIZE) (((SIZE) > 0) ?		\
+		(PFN_DOWN((unsigned long)(BASE) + (SIZE) - 1) -	\
+			 PFN_DOWN((unsigned long)BASE) + 1)	\
+		: (0UL))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'SIZE' - possible side-effects?
#199: FILE: kernel/module.c:90:
+#define NUMBER_OF_PAGES(BASE, SIZE) (((SIZE) > 0) ?		\
+		(PFN_DOWN((unsigned long)(BASE) + (SIZE) - 1) -	\
+			 PFN_DOWN((unsigned long)BASE) + 1)	\
+		: (0UL))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#217: FILE: kernel/module.c:1402:
+void set_page_attributes(void *start, void *end,
+		void (*set)(unsigned long start, int num_pages))

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: kernel/module.c:1406:
+	unsigned long end_pfn = PFN_DOWN((unsigned long)end);
+	if (end_pfn > begin_pfn)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#226: FILE: kernel/module.c:1411:
+static void set_section_ro_nx(void *base,
+			unsigned long text_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/module.c:1426:
+		set_page_attributes((unsigned long)base,
+					(unsigned long)base + ro_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#255: FILE: kernel/module.c:1440:
+			set_memory_nx(begin_pfn << PAGE_SHIFT,
+						end_pfn - begin_pfn);

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_rw() should probably be void set_all_modules_text_rw(void)
#279: FILE: kernel/module.c:1464:
+void set_all_modules_text_rw()

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->module_core'
#285: FILE: kernel/module.c:1470:
+		if ((mod->module_core) && (mod->core_text_size)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->core_text_size'
#285: FILE: kernel/module.c:1470:
+		if ((mod->module_core) && (mod->core_text_size)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#287: FILE: kernel/module.c:1472:
+			set_page_attributes((unsigned long)mod->module_core,
+						(unsigned long)mod->module_core

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->module_init'
#291: FILE: kernel/module.c:1476:
+		if ((mod->module_init) && (mod->init_text_size)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->init_text_size'
#291: FILE: kernel/module.c:1476:
+		if ((mod->module_init) && (mod->init_text_size)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: kernel/module.c:1478:
+			set_page_attributes((unsigned long)mod->module_init,
+						(unsigned long)mod->module_init

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_ro() should probably be void set_all_modules_text_ro(void)
#302: FILE: kernel/module.c:1487:
+void set_all_modules_text_ro()

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->module_core'
#308: FILE: kernel/module.c:1493:
+		if ((mod->module_core) && (mod->core_text_size)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->core_text_size'
#308: FILE: kernel/module.c:1493:
+		if ((mod->module_core) && (mod->core_text_size)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: kernel/module.c:1495:
+			set_page_attributes((unsigned long)mod->module_core,
+						(unsigned long)mod->module_core

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->module_init'
#314: FILE: kernel/module.c:1499:
+		if ((mod->module_init) && (mod->init_text_size)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mod->init_text_size'
#314: FILE: kernel/module.c:1499:
+		if ((mod->module_init) && (mod->init_text_size)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: kernel/module.c:1501:
+			set_page_attributes((unsigned long)mod->module_init,
+						(unsigned long)mod->module_init

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#324: FILE: kernel/module.c:1509:
+static void set_section_ro_nx(void *base,
+			unsigned long text_size,
+			unsigned long ro_size,
+			unsigned long total_size) { }

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#325: FILE: kernel/module.c:1510:
+static void set_section_ro_nx(void *base,
+			unsigned long text_size,

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_rw() should probably be void set_all_modules_text_rw(void)
#330: FILE: kernel/module.c:1515:
+void set_all_modules_text_rw() { }

ERROR:FUNCTION_WITHOUT_ARGS: Bad function definition - void set_all_modules_text_ro() should probably be void set_all_modules_text_ro(void)
#331: FILE: kernel/module.c:1516:
+void set_all_modules_text_ro() { }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: kernel/module.c:2555:
+	set_section_ro_nx(mod->module_core,
+				mod->core_text_size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#408: FILE: kernel/module.c:2561:
+	set_section_ro_nx(mod->module_init,
+				mod->init_text_size,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016949.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 2 warnings, 21 checks, 316 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000016949.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
