ERROR:OPEN_BRACE: that open brace { should be on the previous line
#70: FILE: drivers/base/class.c:813:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#71: FILE: drivers/base/class.c:814:
+int class_for_each_device(struct class *class, void *data,
+			   int (*fn)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#81: FILE: drivers/base/class.c:824:
+		if (dev) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#84: FILE: drivers/base/class.c:827:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#112: FILE: drivers/base/class.c:855:
+struct device *class_find_device(struct class *class, void *data,
+				   int (*match)(struct device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#123: FILE: drivers/base/class.c:866:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#124: FILE: drivers/base/class.c:867:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#127: FILE: drivers/base/class.c:870:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#127: FILE: drivers/base/class.c:870:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#129: FILE: drivers/base/class.c:872:
+		} else

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#150: FILE: drivers/base/class.c:893:
+int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *))
+{

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#151: FILE: drivers/base/class.c:894:
+int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#161: FILE: drivers/base/class.c:904:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#164: FILE: drivers/base/class.c:907:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: drivers/base/class.c:935:
+struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *))

CHECK:BRACES: braces {} should be used on all arms of this statement
#203: FILE: drivers/base/class.c:946:
+		if (dev) {
[...]
+		} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#204: FILE: drivers/base/class.c:947:
+			if (match(dev, data)) {
[...]
+			} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#207: FILE: drivers/base/class.c:950:
+				break;
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: drivers/base/class.c:950:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#209: FILE: drivers/base/class.c:952:
+		} else

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#237: FILE: include/linux/device.h:201:
+extern int class_for_each_device(struct class *class, void *data,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#238: FILE: include/linux/device.h:202:
+extern int class_for_each_device(struct class *class, void *data,
+				int (*fn)(struct device *dev, void *data));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#239: FILE: include/linux/device.h:203:
+extern struct device *class_find_device(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#240: FILE: include/linux/device.h:204:
+extern struct device *class_find_device(struct class *class, void *data,
+				   int (*match)(struct device *, void *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#241: FILE: include/linux/device.h:205:
+extern int class_for_each_child(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: include/linux/device.h:206:
+extern int class_for_each_child(struct class *class, void *data,
+			   int (*fn)(struct class_device *, void *));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#243: FILE: include/linux/device.h:207:
+extern struct class_device *class_find_child(struct class *class, void *data,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#244: FILE: include/linux/device.h:208:
+extern struct class_device *class_find_child(struct class *class, void *data,
+				   int (*match)(struct class_device *, void *));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 24 checks, 188 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000336611.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
