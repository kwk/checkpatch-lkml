WARNING:TYPO_SPELLING: 'reenabled' may be misspelled - perhaps 're-enabled'?
#46: 
> > iret would cause NMIs to be reenabled prematurely. x86_32 uses popf 
                                ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#153: FILE: arch/x86/kernel/traps_32.c:794:
+void default_do_nmi(struct pt_regs * regs)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: arch/x86/kernel/traps_32.c:802:
+ ^I/* int3 disabled */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#161: FILE: arch/x86/kernel/traps_32.c:802:
+ ^I/* int3 disabled */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: arch/x86/kernel/traps_32.c:802:
+ ^I/* int3 disabled */$

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#172: FILE: arch/x86/kernel/traps_32.c:1296:
+long debugo_eip, debugo_cs, debugo_eflags, debugo_extra, debugo_extra2, debugo_extra3, debugo_extra4;

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#173: FILE: arch/x86/kernel/traps_32.c:1297:
+EXPORT_SYMBOL(debug_eip);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#174: FILE: arch/x86/kernel/traps_32.c:1298:
+EXPORT_SYMBOL(debug_cs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#175: FILE: arch/x86/kernel/traps_32.c:1299:
+EXPORT_SYMBOL(debug_eflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#176: FILE: arch/x86/kernel/traps_32.c:1300:
+EXPORT_SYMBOL(debug_extra);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#177: FILE: arch/x86/kernel/traps_32.c:1301:
+EXPORT_SYMBOL(debug_extra2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#178: FILE: arch/x86/kernel/traps_32.c:1302:
+EXPORT_SYMBOL(debug_extra3);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#179: FILE: arch/x86/kernel/traps_32.c:1303:
+EXPORT_SYMBOL(debug_extra4);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#180: FILE: arch/x86/kernel/traps_32.c:1304:
+EXPORT_SYMBOL(debugo_eip);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#181: FILE: arch/x86/kernel/traps_32.c:1305:
+EXPORT_SYMBOL(debugo_cs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#182: FILE: arch/x86/kernel/traps_32.c:1306:
+EXPORT_SYMBOL(debugo_eflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#183: FILE: arch/x86/kernel/traps_32.c:1307:
+EXPORT_SYMBOL(debugo_extra);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#184: FILE: arch/x86/kernel/traps_32.c:1308:
+EXPORT_SYMBOL(debugo_extra2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#185: FILE: arch/x86/kernel/traps_32.c:1309:
+EXPORT_SYMBOL(debugo_extra3);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#186: FILE: arch/x86/kernel/traps_32.c:1310:
+EXPORT_SYMBOL(debugo_extra4);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#203: FILE: samples/kprobes/kprobe_nmi.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#219: FILE: samples/kprobes/kprobe_nmi.c:17:
+extern long debug_eip, debug_cs, debug_eflags, debug_extra, debug_extra2, debug_extra3, debug_extra4;

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#220: FILE: samples/kprobes/kprobe_nmi.c:18:
+extern long debugo_eip, debugo_cs, debugo_eflags, debugo_extra, debugo_extra2, debugo_extra3, debugo_extra4;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#220: FILE: samples/kprobes/kprobe_nmi.c:18:
+extern long debugo_eip, debugo_cs, debugo_eflags, debugo_extra, debugo_extra2, debugo_extra3, debugo_extra4;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#234: FILE: samples/kprobes/kprobe_nmi.c:32:
+	printk(KERN_INFO "pre_handler: p->addr = 0x%p, ip = %lx,"

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: samples/kprobes/kprobe_nmi.c:33:
+	printk(KERN_INFO "pre_handler: p->addr = 0x%p, ip = %lx,"
+			" flags = 0x%lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#239: FILE: samples/kprobes/kprobe_nmi.c:37:
+	printk(KERN_INFO "pre_handler: p->addr = 0x%p, nip = 0x%lx,"

WARNING:SPLIT_STRING: quoted string split across lines
#240: FILE: samples/kprobes/kprobe_nmi.c:38:
+	printk(KERN_INFO "pre_handler: p->addr = 0x%p, nip = 0x%lx,"
+			" msr = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: samples/kprobes/kprobe_nmi.c:48:
+static void handler_post(struct kprobe *p, struct pt_regs *regs,
+				unsigned long flags)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#255: FILE: samples/kprobes/kprobe_nmi.c:53:
+	printk(KERN_INFO "post_handler: p->addr = 0x%p, flags = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: samples/kprobes/kprobe_nmi.c:54:
+	printk(KERN_INFO "post_handler: p->addr = 0x%p, flags = 0x%lx\n",
+		p->addr, regs->flags);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#259: FILE: samples/kprobes/kprobe_nmi.c:57:
+	printk(KERN_INFO "post_handler: p->addr = 0x%p, msr = 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#260: FILE: samples/kprobes/kprobe_nmi.c:58:
+	printk(KERN_INFO "post_handler: p->addr = 0x%p, msr = 0x%lx\n",
+		p->addr, regs->msr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#274: FILE: samples/kprobes/kprobe_nmi.c:72:
+	printk(KERN_INFO "fault_handler: p->addr = 0x%p, trap #%dn",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: samples/kprobes/kprobe_nmi.c:73:
+	printk(KERN_INFO "fault_handler: p->addr = 0x%p, trap #%dn",
+		p->addr, trapnr);

WARNING:LINE_SPACING: Missing a blank line after declarations
#283: FILE: samples/kprobes/kprobe_nmi.c:81:
+	int ret;
+	kp.pre_handler = handler_pre;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#292: FILE: samples/kprobes/kprobe_nmi.c:90:
+	printk(KERN_INFO "Planted kprobe at %p\n", kp.addr);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#298: FILE: samples/kprobes/kprobe_nmi.c:96:
+	printk("debug data:  eip 0x%lX, cs 0x%lX, eflags 0x%lX, "

WARNING:SPLIT_STRING: quoted string split across lines
#299: FILE: samples/kprobes/kprobe_nmi.c:97:
+	printk("debug data:  eip 0x%lX, cs 0x%lX, eflags 0x%lX, "
+		"extra 0x%lX 0x%lX 0x%lX 0x%lX\n",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#302: FILE: samples/kprobes/kprobe_nmi.c:100:
+	printk("debugo data: eip 0x%lX, cs 0x%lX, eflags 0x%lX, "

WARNING:SPLIT_STRING: quoted string split across lines
#303: FILE: samples/kprobes/kprobe_nmi.c:101:
+	printk("debugo data: eip 0x%lX, cs 0x%lX, eflags 0x%lX, "
+		"extra 0x%lX 0x%lX 0x%lX 0x%lX\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#307: FILE: samples/kprobes/kprobe_nmi.c:105:
+	printk(KERN_INFO "kprobe at %p unregistered\n", kp.addr);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#431: FILE: arch/x86/kernel/traps_64.c:1231:
+long debugo_eip, debugo_cs, debugo_eflags, debugo_extra, debugo_extra2, debugo_extra3, debugo_extra4;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#432: FILE: arch/x86/kernel/traps_64.c:1232:
+EXPORT_SYMBOL(debug_eip);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#433: FILE: arch/x86/kernel/traps_64.c:1233:
+EXPORT_SYMBOL(debug_cs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#434: FILE: arch/x86/kernel/traps_64.c:1234:
+EXPORT_SYMBOL(debug_eflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#435: FILE: arch/x86/kernel/traps_64.c:1235:
+EXPORT_SYMBOL(debug_extra);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#436: FILE: arch/x86/kernel/traps_64.c:1236:
+EXPORT_SYMBOL(debug_extra2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#437: FILE: arch/x86/kernel/traps_64.c:1237:
+EXPORT_SYMBOL(debug_extra3);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#438: FILE: arch/x86/kernel/traps_64.c:1238:
+EXPORT_SYMBOL(debug_extra4);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#439: FILE: arch/x86/kernel/traps_64.c:1239:
+EXPORT_SYMBOL(debugo_eip);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#440: FILE: arch/x86/kernel/traps_64.c:1240:
+EXPORT_SYMBOL(debugo_cs);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#441: FILE: arch/x86/kernel/traps_64.c:1241:
+EXPORT_SYMBOL(debugo_eflags);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#442: FILE: arch/x86/kernel/traps_64.c:1242:
+EXPORT_SYMBOL(debugo_extra);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#443: FILE: arch/x86/kernel/traps_64.c:1243:
+EXPORT_SYMBOL(debugo_extra2);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#444: FILE: arch/x86/kernel/traps_64.c:1244:
+EXPORT_SYMBOL(debugo_extra3);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#445: FILE: arch/x86/kernel/traps_64.c:1245:
+EXPORT_SYMBOL(debugo_extra4);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294910.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 51 warnings, 4 checks, 406 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000294910.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
