CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#74: FILE: arch/i386/kernel/smp.c:26:
+#include <asm/mmu_context.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#146: FILE: arch/i386/xen/enlighten.c:29:
+#include <asm/smp.h>

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#177: FILE: arch/i386/xen/enlighten.c:319:
+static void xen_convert_trap_info(const struct Xgt_desc_struct *desc,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#180: FILE: arch/i386/xen/enlighten.c:322:
+	unsigned in, out, count;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#183: FILE: arch/i386/xen/enlighten.c:325:
+	BUG_ON(count > 256);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#185: FILE: arch/i386/xen/enlighten.c:327:
+	for(in = out = 0; in < count; in++) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#262: FILE: arch/i386/xen/enlighten.c:456:
+	BUG_ON(cpus_empty(cpumask));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#263: FILE: arch/i386/xen/enlighten.c:457:
+	BUG_ON(cpu_isset(smp_processor_id(), cpumask));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#264: FILE: arch/i386/xen/enlighten.c:458:
+	BUG_ON(!mm);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: arch/i386/xen/enlighten.c:475:
+		BUG();

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#326: FILE: arch/i386/xen/enlighten.c:790:
+static const struct smp_ops xen_smp_ops __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#359: FILE: arch/i386/xen/events.c:28:
+static DEFINE_PER_CPU(int, ipi_to_irq[XEN_NR_IPIS]) = {[0 ... XEN_NR_IPIS-1] = -1};
                                                                          ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#390: FILE: arch/i386/xen/events.c:257:
+	if ((irq = per_cpu(ipi_to_irq, cpu)[ipi]) == -1) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#391: FILE: arch/i386/xen/events.c:258:
+		if ((irq = find_unbound_irq()) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#401: FILE: arch/i386/xen/events.c:268:
+			BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#419: FILE: arch/i386/xen/events.c:286:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#459: FILE: arch/i386/xen/events.c:426:
+	int irq = per_cpu(ipi_to_irq, cpu)[vector];
+	BUG_ON(irq < 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: arch/i386/xen/events.c:426:
+	BUG_ON(irq < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#487: FILE: arch/i386/xen/mmu.c:440:
 
+

WARNING:REPEATED_WORD: Possible repeated word: 'need'
#500: FILE: arch/i386/xen/mmu.c:453:
+ * pagetable because of lazy tlb flushing.  This means we need need to

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#565: FILE: arch/i386/xen/mmu.h:11:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#565: FILE: arch/i386/xen/mmu.h:11:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#565: FILE: arch/i386/xen/mmu.h:11:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#566: FILE: arch/i386/xen/mmu.h:12:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#566: FILE: arch/i386/xen/mmu.h:12:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr3' - possible side-effects?
#566: FILE: arch/i386/xen/mmu.h:12:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#599: FILE: arch/i386/xen/smp.c:1:
+#include <linux/sched.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/smp.h> instead of <asm/smp.h>
#603: FILE: arch/i386/xen/smp.c:5:
+#include <asm/smp.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#605: FILE: arch/i386/xen/smp.c:7:
+#include <asm/pgtable.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#631: FILE: arch/i386/xen/smp.c:33:
+	void (*func) (void *info);

WARNING:MEMORY_BARRIER: memory barrier without comment
#687: FILE: arch/i386/xen/smp.c:89:
+	wmb();

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#702: FILE: arch/i386/xen/smp.c:104:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#702: FILE: arch/i386/xen/smp.c:104:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#713: FILE: arch/i386/xen/smp.c:115:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#713: FILE: arch/i386/xen/smp.c:115:
+				    IRQF_DISABLED|IRQF_PERCPU|IRQF_NOBALANCING,
 				                             ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#734: FILE: arch/i386/xen/smp.c:136:
+	for_each_possible_cpu(i)
+	    if (i != smp_processor_id())

WARNING:TABSTOP: Statements should start on a tabstop
#735: FILE: arch/i386/xen/smp.c:137:
+	    if (i != smp_processor_id())

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#738: FILE: arch/i386/xen/smp.c:140:
+	for (i = 0; i < NR_CPUS; i++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: arch/i386/xen/smp.c:151:
+	BUG_ON(smp_processor_id() != 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#755: FILE: arch/i386/xen/smp.c:157:
+	/* We've switched to the "real" per-cpu gdt, so make sure the
+	   old memory can be recycled */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#755: FILE: arch/i386/xen/smp.c:157:
+	   old memory can be recycled */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#758: FILE: arch/i386/xen/smp.c:160:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#768: FILE: arch/i386/xen/smp.c:170:
+	unsigned cpu;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#770: FILE: arch/i386/xen/smp.c:172:
+	for (cpu = 0; cpu < NR_CPUS; cpu++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#779: FILE: arch/i386/xen/smp.c:181:
+		BUG();

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#785: FILE: arch/i386/xen/smp.c:187:
+		for (cpu = NR_CPUS-1; !cpu_isset(cpu, cpu_possible_map); cpu--)
 		                  ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#785: FILE: arch/i386/xen/smp.c:187:
+		for (cpu = NR_CPUS-1; !cpu_isset(cpu, cpu_possible_map); cpu--)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#790: FILE: arch/i386/xen/smp.c:192:
+	for_each_possible_cpu (cpu) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ctxt"
#816: FILE: arch/i386/xen/smp.c:218:
+	if (ctxt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: arch/i386/xen/smp.c:236:
+	BUG_ON((unsigned long)gdt->gdt & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#855: FILE: arch/i386/xen/smp.c:257:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#866: FILE: arch/i386/xen/smp.c:268:
+#if 0

WARNING:MEMORY_BARRIER: memory barrier without comment
#890: FILE: arch/i386/xen/smp.c:292:
+	wmb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: arch/i386/xen/smp.c:303:
+	BUG_ON(rc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#919: FILE: arch/i386/xen/smp.c:321:
+	BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#925: FILE: arch/i386/xen/smp.c:327:
+	cpumask_t mask = cpu_online_map;
+	cpu_clear(smp_processor_id(), mask);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#934: FILE: arch/i386/xen/smp.c:336:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#937: FILE: arch/i386/xen/smp.c:339:
+	unsigned cpu;

WARNING:SPACING: Unnecessary space before function pointer arguments
#947: FILE: arch/i386/xen/smp.c:349:
+	void (*func) (void *info) = call_data->func;

WARNING:MEMORY_BARRIER: memory barrier without comment
#965: FILE: arch/i386/xen/smp.c:367:
+		mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#1000: FILE: arch/i386/xen/smp.c:402:
+	mb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1006: FILE: arch/i386/xen/smp.c:408:
+	/* Make sure other vcpus get a chance to run.
+	   XXX too severe?  Maybe we should check the other CPU's states? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1006: FILE: arch/i386/xen/smp.c:408:
+	   XXX too severe?  Maybe we should check the other CPU's states? */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1080: FILE: arch/i386/xen/xen-ops.h:49:
+int xen_smp_call_function (void (*func) (void *info), void *info, int nonatomic,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1117: FILE: include/asm-i386/mmu_context.h:42:
+static inline void leave_mm (unsigned long cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1121: FILE: include/asm-i386/mmu_context.h:46:
+		BUG();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1135: FILE: include/asm-i386/processor.h:755:
+extern void init_gdt(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442057.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 45 warnings, 18 checks, 1046 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000442057.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
