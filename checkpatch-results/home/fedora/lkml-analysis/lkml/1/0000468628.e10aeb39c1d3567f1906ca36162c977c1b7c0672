WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#52: FILE: net/sunrpc/sunrpc_syms.c:139:
+extern struct cache_detail ip_map_cache, unix_gid_cache;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 14)
#68: FILE: net/sunrpc/sunrpc_syms.c:173:
+	if (cache_unregister(&unix_gid_cache))
+	      printk(KERN_ERR "sunrpc: failed to unregister unix_gid cache\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#69: FILE: net/sunrpc/sunrpc_syms.c:174:
+	      printk(KERN_ERR "sunrpc: failed to unregister unix_gid cache\n");

WARNING:PATCH_PREFIX: patch prefix '.' exists, appears to be a -p0 patch

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#87: FILE: net/sunrpc/svcauth_unix.c:427:
+#define	GID_HASHMAX	(1<<GID_HASHBITS)
        	           	  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#87: FILE: net/sunrpc/svcauth_unix.c:427:
+#define	GID_HASHMAX	(1<<GID_HASHBITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#95: FILE: net/sunrpc/svcauth_unix.c:435:
+};
+static struct cache_head	*gid_table[GID_HASHMAX];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#101: FILE: net/sunrpc/svcauth_unix.c:441:
+	struct unix_gid *ug = container_of(item, struct unix_gid, h);
+	if (test_bit(CACHE_VALID, &item->flags) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#111: FILE: net/sunrpc/svcauth_unix.c:451:
+	struct unix_gid *new = container_of(cnew, struct unix_gid, h);
+	return orig->uid == new->uid;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#113: FILE: net/sunrpc/svcauth_unix.c:453:
+}
+static void unix_gid_init(struct cache_head *cnew, struct cache_head *citem)

WARNING:LINE_SPACING: Missing a blank line after declarations
#117: FILE: net/sunrpc/svcauth_unix.c:457:
+	struct unix_gid *item = container_of(citem, struct unix_gid, h);
+	new->uid = item->uid;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#119: FILE: net/sunrpc/svcauth_unix.c:459:
+}
+static void unix_gid_update(struct cache_head *cnew, struct cache_head *citem)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#127: FILE: net/sunrpc/svcauth_unix.c:467:
+}
+static struct cache_head *unix_gid_alloc(void)

WARNING:LINE_SPACING: Missing a blank line after declarations
#130: FILE: net/sunrpc/svcauth_unix.c:470:
+	struct unix_gid *g = kmalloc(sizeof(*g), GFP_KERNEL);
+	if (g)

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#149: FILE: net/sunrpc/svcauth_unix.c:489:
+extern struct cache_detail unix_gid_cache;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: net/sunrpc/svcauth_unix.c:492:
+static int unix_gid_parse(struct cache_detail *cd,
+			char *mesg, int mlen)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#163: FILE: net/sunrpc/svcauth_unix.c:503:
+	if (mlen <= 0 || mesg[mlen-1] != '\n')
 	                          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#165: FILE: net/sunrpc/svcauth_unix.c:505:
+	mesg[mlen-1] = 0;
 	         ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#186: FILE: net/sunrpc/svcauth_unix.c:526:
+		int gid;
+		rv = get_int(&mesg, &gid);

CHECK:BRACES: braces {} should be used on all arms of this statement
#194: FILE: net/sunrpc/svcauth_unix.c:534:
+	if (ugp) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#196: FILE: net/sunrpc/svcauth_unix.c:536:
+		struct cache_head *ch;
+		ug.h.flags = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#201: FILE: net/sunrpc/svcauth_unix.c:541:
+		if (!ch)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#203: FILE: net/sunrpc/svcauth_unix.c:543:
+		else {

CHECK:BRACES: Unbalanced braces around else statement
#207: FILE: net/sunrpc/svcauth_unix.c:547:
+	} else

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!h"
#223: FILE: net/sunrpc/svcauth_unix.c:563:
+	if (h == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#237: FILE: net/sunrpc/svcauth_unix.c:577:
+	seq_printf(m, "\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#274: FILE: net/sunrpc/svcauth_unix.c:614:
+	struct unix_gid *ug = unix_gid_lookup(uid);
+	if (!ug)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->cr_group_info"
#304: FILE: net/sunrpc/svcauth_unix.c:757:
+	if (cred->cr_group_info == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cred->cr_group_info"
#306: FILE: net/sunrpc/svcauth_unix.c:759:
+		if (cred->cr_group_info == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468628.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 16 checks, 261 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000468628.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
