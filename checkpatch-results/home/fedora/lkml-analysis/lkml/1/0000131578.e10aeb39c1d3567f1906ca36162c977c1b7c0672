WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#80: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#85: FILE: include/asm-generic/bugs.h:1:
+#ifndef __ASM_GENERIC_BUGS_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#101: FILE: include/asm-generic/current.h:1:
+#ifndef __ASM_GENERIC_CURRENT_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#116: FILE: include/asm-generic/delay.h:1:
+#ifndef __ASM_GENERIC_DELAY_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#119: FILE: include/asm-generic/delay.h:4:
+extern void __udelay(unsigned long usecs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#120: FILE: include/asm-generic/delay.h:5:
+extern void __delay(unsigned long loops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#131: FILE: include/asm-generic/fb.h:1:
+#ifndef __ASM_GENERIC_FB_H_

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#149: FILE: include/asm-generic/hardirq.h:1:
+#ifndef __ASM_GENERIC_HARDIRQ_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#156: FILE: include/asm-generic/hardirq.h:8:
+typedef struct {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#178: FILE: include/asm-generic/hardirq.h:30:
+	printk(KERN_CRIT "unexpected IRQ trap at vector %02x\n", irq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#189: FILE: include/asm-generic/irq.h:1:
+#ifndef __ASM_GENERIC_IRQ_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#213: FILE: include/asm-generic/irqflags.h:1:
+#ifndef __ASM_GENERIC_IRQFLAGS_H

WARNING:LINE_SPACING: Missing a blank line after declarations
#240: FILE: include/asm-generic/irqflags.h:28:
+	unsigned long flags;
+	flags = __raw_local_save_flags();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#278: FILE: include/asm-generic/irqflags.h:66:
+#define raw_local_save_flags(flags) \
+	do { (flags) = __raw_local_save_flags(); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#281: FILE: include/asm-generic/irqflags.h:69:
+#define raw_local_irq_save(flags) \
+	do { (flags) = __raw_local_irq_save(); } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#291: FILE: include/asm-generic/kmap_types.h:1:
+#ifndef __ASM_GENERIC_KMAP_TYPES_H

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#295: FILE: include/asm-generic/kmap_types.h:5:
+# define D(n) __KM_FENCE_##n ,
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#295: FILE: include/asm-generic/kmap_types.h:5:
+# define D(n) __KM_FENCE_##n ,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#326: FILE: include/asm-generic/linkage.h:1:
+#ifndef __ASM_GENERIC_LINKAGE_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#340: FILE: include/asm-generic/module.h:1:
+#ifndef __ASM_GENERIC_MODULE_H

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#348: FILE: include/asm-generic/module.h:9:
+struct mod_arch_specific
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Shdr>
#352: FILE: include/asm-generic/module.h:13:
+#define Elf_Shdr Elf64_Shdr

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Shdr>
#352: FILE: include/asm-generic/module.h:13:
+#define Elf_Shdr Elf64_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Sym>
#353: FILE: include/asm-generic/module.h:14:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Sym>
#353: FILE: include/asm-generic/module.h:14:
+#define Elf_Sym Elf64_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Ehdr>
#354: FILE: include/asm-generic/module.h:15:
+#define Elf_Ehdr Elf64_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#354: FILE: include/asm-generic/module.h:15:
+#define Elf_Ehdr Elf64_Ehdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Shdr>
#356: FILE: include/asm-generic/module.h:17:
+#define Elf_Shdr Elf32_Shdr

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Sym>
#357: FILE: include/asm-generic/module.h:18:
+#define Elf_Sym Elf32_Sym

CHECK:CAMELCASE: Avoid CamelCase: <Elf32_Ehdr>
#358: FILE: include/asm-generic/module.h:19:
+#define Elf_Ehdr Elf32_Ehdr

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#368: FILE: include/asm-generic/mutex.h:1:
+#ifndef __ASM_GENERIC_MUTEX_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#383: FILE: include/asm-generic/scatterlist.h:1:
+#ifndef __ASM_GENERIC_SCATTERLIST_H

WARNING:TYPO_SPELLING: 'differnt' may be misspelled - perhaps 'different'?
#410: FILE: include/asm-generic/scatterlist.h:28:
+ * machines. Architectures that are differnt should override this.
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_SG_CHAIN' is wrong - use Kconfig variables or standard guards instead
#423: FILE: include/asm-generic/scatterlist.h:41:
+#define ARCH_HAS_SG_CHAIN

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#432: FILE: include/asm-generic/spinlock.h:1:
+#ifndef __ASM_GENERIC_SPINLOCK_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#449: FILE: include/asm-generic/string.h:1:
+#ifndef __ASM_GENERIC_STRING_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#465: FILE: include/asm-generic/syscalls.h:1:
+#ifndef __ASM_GENERIC_SYSCALLS_H

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: include/asm-generic/syscalls.h:13:
+asmlinkage long sys_clone(unsigned long clone_flags, unsigned long newsp,
+			void __user *parent_tid, void __user *child_tid,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#491: FILE: include/asm-generic/syscalls.h:27:
+asmlinkage long sys_execve(char __user *filename, char __user * __user *argv,
+			char __user * __user *envp, struct pt_regs *regs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: include/asm-generic/syscalls.h:32:
+asmlinkage long sys_mmap2(unsigned long addr, unsigned long len,
+			unsigned long prot, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#502: FILE: include/asm-generic/syscalls.h:38:
+asmlinkage long sys_mmap(unsigned long addr, unsigned long len,
+			unsigned long prot, unsigned long flags,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#508: FILE: include/asm-generic/syscalls.h:44:
+asmlinkage long sys_sigaltstack(const stack_t __user *, stack_t __user *,
+			struct pt_regs *);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: include/asm-generic/syscalls.h:57:
+asmlinkage long sys_rt_sigaction(int sig, const struct sigaction __user *act,
+			 struct sigaction __user *oact, size_t sigsetsize);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#531: FILE: include/asm-generic/system.h:1:
+/* Generic system definitions, based on MN10300 definitions.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#558: FILE: include/asm-generic/system.h:28:
+extern struct task_struct *__switch_to(struct task_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#558: FILE: include/asm-generic/system.h:28:
+extern struct task_struct *__switch_to(struct task_struct *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#558: FILE: include/asm-generic/system.h:28:
+extern struct task_struct *__switch_to(struct task_struct *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#559: FILE: include/asm-generic/system.h:29:
+extern struct task_struct *__switch_to(struct task_struct *,
+		struct task_struct *);

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#560: FILE: include/asm-generic/system.h:30:
+#define switch_to(prev, next, last)					\
+	do {								\
+		((last) = __switch_to((prev), (next)));			\
+	} while (0)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#567: FILE: include/asm-generic/system.h:37:
+#define nop() asm volatile ("nop")

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#579: FILE: include/asm-generic/system.h:49:
+#define mb()	asm volatile ("": : :"memory")
             	                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#579: FILE: include/asm-generic/system.h:49:
+#define mb()	asm volatile ("": : :"memory")
             	                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#579: FILE: include/asm-generic/system.h:49:
+#define mb()	asm volatile ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#579: FILE: include/asm-generic/system.h:49:
+#define mb()	asm volatile ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#580: FILE: include/asm-generic/system.h:50:
+#define rmb()	mb()

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#581: FILE: include/asm-generic/system.h:51:
+#define wmb()	asm volatile ("": : :"memory")
              	                ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#581: FILE: include/asm-generic/system.h:51:
+#define wmb()	asm volatile ("": : :"memory")
              	                    ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#581: FILE: include/asm-generic/system.h:51:
+#define wmb()	asm volatile ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#581: FILE: include/asm-generic/system.h:51:
+#define wmb()	asm volatile ("": : :"memory")

WARNING:MEMORY_BARRIER: memory barrier without comment
#584: FILE: include/asm-generic/system.h:54:
+#define smp_mb()	mb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#585: FILE: include/asm-generic/system.h:55:
+#define smp_rmb()	rmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#586: FILE: include/asm-generic/system.h:56:
+#define smp_wmb()	wmb()

WARNING:MEMORY_BARRIER: memory barrier without comment
#588: FILE: include/asm-generic/system.h:58:
+#define smp_mb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#589: FILE: include/asm-generic/system.h:59:
+#define smp_rmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#590: FILE: include/asm-generic/system.h:60:
+#define smp_wmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#593: FILE: include/asm-generic/system.h:63:
+#define set_mb(var, value)  do { var = value;  mb(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#594: FILE: include/asm-generic/system.h:64:
+#define set_wmb(var, value) do { var = value; wmb(); } while (0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#605: FILE: include/asm-generic/system.h:75:
+ *    if something tries to do an invalid xchg().  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#606: FILE: include/asm-generic/system.h:76:
+extern void __xchg_called_with_bad_pointer(void);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#609: FILE: include/asm-generic/system.h:79:
+unsigned long __xchg(unsigned long x, volatile void *ptr, int size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#619: FILE: include/asm-generic/system.h:89:
+		ret = *(volatile u8 *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#620: FILE: include/asm-generic/system.h:90:
+		*(volatile u8 *)ptr = x;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#630: FILE: include/asm-generic/system.h:100:
+		ret = *(volatile u16 *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#631: FILE: include/asm-generic/system.h:101:
+		*(volatile u16 *)ptr = x;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#641: FILE: include/asm-generic/system.h:111:
+		ret = *(volatile u32 *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#642: FILE: include/asm-generic/system.h:112:
+		*(volatile u32 *)ptr = x;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#653: FILE: include/asm-generic/system.h:123:
+		ret = *(volatile u64 *)ptr;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#654: FILE: include/asm-generic/system.h:124:
+		*(volatile u64 *)ptr = x;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#666: FILE: include/asm-generic/system.h:136:
+#define xchg(ptr, x) \
+	((__typeof__(*(ptr))) __xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#669: FILE: include/asm-generic/system.h:139:
+static inline unsigned long __cmpxchg(volatile unsigned long *m,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#683: FILE: include/asm-generic/system.h:153:
+#define cmpxchg(ptr, o, n)					\
+	((__typeof__(*(ptr))) __cmpxchg((unsigned long *)(ptr), \
+					(unsigned long)(o),	\
+					(unsigned long)(n)))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#698: FILE: include/asm-generic/user.h:1:
+#ifndef __ASM_GENERIC_USER_H

WARNING:REPEATED_WORD: Possible repeated word: 'it'
#701: FILE: include/asm-generic/user.h:4:
+ * This file may define a 'struct user' structure. However, it it only

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131578.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 50 warnings, 22 checks, 525 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000131578.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
