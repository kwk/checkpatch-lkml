WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: include/linux/memctlr.h:1:
+/* memctlr.h - Memory Controller for containers

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#81: FILE: init/Kconfig:309:
+config CONTAINER_MEMCTLR
+	bool "A simple RSS based memory controller"
+	select CONTAINERS
+	help
+	  Provides a simple Resource Controller for monitoring and
+	  controlling the total Resident Set Size of the tasks in a container
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#103: FILE: mm/memctlr.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#123: FILE: mm/memctlr.c:21:
+#include <asm/uaccess.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#130: FILE: mm/memctlr.c:28:
+^I^I^I^I/* counted ^I^I^I^I   */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#137: FILE: mm/memctlr.c:35:
+^Istruct res_counter ^I^Icounter;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#138: FILE: mm/memctlr.c:36:
+^Ispinlock_t ^I^I^Ilock;$

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#138: FILE: mm/memctlr.c:36:
+	spinlock_t 			lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#157: FILE: mm/memctlr.c:55:
+	struct memctlr *mem = kzalloc(sizeof(*mem), GFP_KERNEL);
+	if (!mem)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#166: FILE: mm/memctlr.c:64:
+static void memctlr_destroy(struct container_subsys *ss,
+				struct container *cont)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#172: FILE: mm/memctlr.c:70:
+static ssize_t memctlr_write(struct container *cont, struct cftype *cft,
+				struct file *file, const char __user *userbuf,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#180: FILE: mm/memctlr.c:78:
+	BUG_ON(!mem);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#181: FILE: mm/memctlr.c:79:
+	if ((buffer = kmalloc(nbytes + 1, GFP_KERNEL)) == 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#196: FILE: mm/memctlr.c:94:
+	limit = simple_strtoul(buffer, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#216: FILE: mm/memctlr.c:114:
+static ssize_t memctlr_read(struct container *cont, struct cftype *cft,
+				struct file *file, char __user *userbuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: mm/memctlr.c:143:
+static int memctlr_populate(struct container_subsys *ss,
+				struct container *cont)

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: mm/memctlr.c:146:
+	int rc;
+	if ((rc = container_add_file(cont, &memctlr_usage)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#248: FILE: mm/memctlr.c:146:
+	if ((rc = container_add_file(cont, &memctlr_usage)) < 0)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#250: FILE: mm/memctlr.c:148:
+	if ((rc = container_add_file(cont, &memctlr_limit)) < 0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#267: FILE: mm/memctlr.c:165:
+	printk("Initializing memctlr version %s, id %d\n", version, id);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465879.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 12 warnings, 5 checks, 208 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000465879.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
