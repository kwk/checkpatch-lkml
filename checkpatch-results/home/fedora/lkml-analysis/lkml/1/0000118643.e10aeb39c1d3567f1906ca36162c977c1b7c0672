WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
Gitweb:     http://git.kernel.org/tip/a2928c42a5d69328c3578b41bd4d72f6658cf7dc

CHECK:BRACES: braces {} should be used on all arms of this statement
#557: FILE: Documentation/perf_counter/builtin-report.c:133:
+	if (err) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#560: FILE: Documentation/perf_counter/builtin-report.c:136:
+	} else

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#592: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#597: FILE: Documentation/perf_counter/util/symbol.c:1:
+#include "util.h"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#605: FILE: Documentation/perf_counter/util/symbol.c:9:
+static struct symbol *symbol__new(uint64_t start, uint64_t len,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#610: FILE: Documentation/perf_counter/util/symbol.c:14:
+	if (self != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "self"
#634: FILE: Documentation/perf_counter/util/symbol.c:38:
+	if (self != NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#664: FILE: Documentation/perf_counter/util/symbol.c:68:
+	const uint64_t ip = sym->start;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#667: FILE: Documentation/perf_counter/util/symbol.c:71:
+	while (*p != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!self"
#683: FILE: Documentation/perf_counter/util/symbol.c:87:
+	if (self == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#706: FILE: Documentation/perf_counter/util/symbol.c:110:
+	struct rb_node *nd;
 	                ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: Documentation/perf_counter/util/symbol.c:111:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: Documentation/perf_counter/util/symbol.c:111:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: Documentation/perf_counter/util/symbol.c:111:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#707: FILE: Documentation/perf_counter/util/symbol.c:111:
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {
 	                                                  ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#707: FILE: Documentation/perf_counter/util/symbol.c:111:
+	struct rb_node *nd;
+	for (nd = rb_first(&self->syms); nd; nd = rb_next(nd)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#708: FILE: Documentation/perf_counter/util/symbol.c:112:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
 		                              ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#709: FILE: Documentation/perf_counter/util/symbol.c:113:
+		struct symbol *pos = rb_entry(nd, struct symbol, rb_node);
+		ret += symbol__fprintf(pos, fp);

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#750: FILE: Documentation/perf_counter/util/symbol.c:154:
+	struct rb_node *nd, *prevnd;
 	                ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!file"
#755: FILE: Documentation/perf_counter/util/symbol.c:159:
+	if (file == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sym"
#790: FILE: Documentation/perf_counter/util/symbol.c:194:
+		if (sym == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prevnd"
#802: FILE: Documentation/perf_counter/util/symbol.c:206:
+	if (prevnd == NULL)

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#805: FILE: Documentation/perf_counter/util/symbol.c:209:
+	for (nd = rb_next(prevnd); nd; nd = rb_next(nd)) {
 	     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#805: FILE: Documentation/perf_counter/util/symbol.c:209:
+	for (nd = rb_next(prevnd); nd; nd = rb_next(nd)) {
 	                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#805: FILE: Documentation/perf_counter/util/symbol.c:209:
+	for (nd = rb_next(prevnd); nd; nd = rb_next(nd)) {
 	                               ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#805: FILE: Documentation/perf_counter/util/symbol.c:209:
+	for (nd = rb_next(prevnd); nd; nd = rb_next(nd)) {
 	                                            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#807: FILE: Documentation/perf_counter/util/symbol.c:211:
+			      *curr = rb_entry(nd, struct symbol, rb_node);
 			                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#810: FILE: Documentation/perf_counter/util/symbol.c:214:
+		prevnd = nd;
 		         ^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'syms' - possible side-effects?
#831: FILE: Documentation/perf_counter/util/symbol.c:235:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'nr_syms' may be better as '(nr_syms)' to avoid precedence issues
#831: FILE: Documentation/perf_counter/util/symbol.c:235:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#831: FILE: Documentation/perf_counter/util/symbol.c:235:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sym' - possible side-effects?
#831: FILE: Documentation/perf_counter/util/symbol.c:235:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'sym' may be better as '(sym)' to avoid precedence issues
#831: FILE: Documentation/perf_counter/util/symbol.c:235:
+#define elf_symtab__for_each_symbol(syms, nr_syms, index, sym) \
+	for (index = 0, gelf_getsym(syms, index, &sym);\
+	     index < nr_syms; \
+	     index++, gelf_getsym(syms, index, &sym))

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Sym>
#836: FILE: Documentation/perf_counter/util/symbol.c:240:
+static inline uint8_t elf_sym__type(const GElf_Sym *sym)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Data>
#850: FILE: Documentation/perf_counter/util/symbol.c:254:
+					const Elf_Data *symstrs)

CHECK:CAMELCASE: Avoid CamelCase: <Elf_Scn>
#855: FILE: Documentation/perf_counter/util/symbol.c:259:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <Elf>
#855: FILE: Documentation/perf_counter/util/symbol.c:259:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Ehdr>
#855: FILE: Documentation/perf_counter/util/symbol.c:259:
+static Elf_Scn *elf_section_by_name(Elf *elf, GElf_Ehdr *ep,

CHECK:CAMELCASE: Avoid CamelCase: <GElf_Shdr>
#856: FILE: Documentation/perf_counter/util/symbol.c:260:
+				    GElf_Shdr *shp, const char *name,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#881: FILE: Documentation/perf_counter/util/symbol.c:285:
+	uint32_t nr_syms;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#883: FILE: Documentation/perf_counter/util/symbol.c:287:
+	uint32_t index;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!elf"
#893: FILE: Documentation/perf_counter/util/symbol.c:297:
+	if (elf == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gelf_getehdr"
#899: FILE: Documentation/perf_counter/util/symbol.c:303:
+	if (gelf_getehdr(elf, &ehdr) == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#905: FILE: Documentation/perf_counter/util/symbol.c:309:
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#908: FILE: Documentation/perf_counter/util/symbol.c:312:
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!syms"
#912: FILE: Documentation/perf_counter/util/symbol.c:316:
+	if (syms == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sec"
#916: FILE: Documentation/perf_counter/util/symbol.c:320:
+	if (sec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symstrs"
#920: FILE: Documentation/perf_counter/util/symbol.c:324:
+	if (symstrs == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1024: FILE: Documentation/perf_counter/util/symbol.h:1:
+#ifndef _PERF_SYMBOL_

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000118643.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 31 checks, 968 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000118643.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
