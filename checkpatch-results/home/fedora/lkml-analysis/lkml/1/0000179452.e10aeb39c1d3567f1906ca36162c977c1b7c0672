WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
people to use it without any required userspace tools, using sysfs to setup the

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#48: 
# tracer: blk

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#49: 
#

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#50: 
# DEV   CPU TIMESTAMP     PID ACT FLG

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#51: 
#  |     |     |           |   |   |

ERROR:POINTER_LOCATION: "foo __read_mostly  bar" should be "foo __read_mostly bar"
#154: FILE: block/blktrace.c:33:
+static int __read_mostly  blk_tracer_enabled;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Blktrace_running>
#191: FILE: block/blktrace.c:151:
+	if (unlikely(bt->trace_state != Blktrace_running || !blk_tracer_enabled))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:TRAILING_WHITESPACE: trailing whitespace
#213: FILE: block/blktrace.c:186:
+^I^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: block/blktrace.c:935:
+        int i = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: block/blktrace.c:935:
+        int i = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: block/blktrace.c:937:
+        if (t->action & BLK_TC_DISCARD)^I   rwbs[i++] = 'D';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#262: FILE: block/blktrace.c:937:
+        if (t->action & BLK_TC_DISCARD)^I   rwbs[i++] = 'D';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#262: FILE: block/blktrace.c:937:
+        if (t->action & BLK_TC_DISCARD)	   rwbs[i++] = 'D';

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: block/blktrace.c:938:
+        else if (t->action & BLK_TC_WRITE) rwbs[i++] = 'W';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#263: FILE: block/blktrace.c:938:
+        else if (t->action & BLK_TC_WRITE) rwbs[i++] = 'W';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#263: FILE: block/blktrace.c:938:
+        else if (t->action & BLK_TC_WRITE) rwbs[i++] = 'W';

ERROR:CODE_INDENT: code indent should use tabs where possible
#264: FILE: block/blktrace.c:939:
+        else if (t->bytes)^I^I   rwbs[i++] = 'R';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#264: FILE: block/blktrace.c:939:
+        else if (t->bytes)^I^I   rwbs[i++] = 'R';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#264: FILE: block/blktrace.c:939:
+        else if (t->bytes)		   rwbs[i++] = 'R';

ERROR:CODE_INDENT: code indent should use tabs where possible
#265: FILE: block/blktrace.c:940:
+        else^I^I^I^I   rwbs[i++] = 'N';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#265: FILE: block/blktrace.c:940:
+        else^I^I^I^I   rwbs[i++] = 'N';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#265: FILE: block/blktrace.c:940:
+        else				   rwbs[i++] = 'N';

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: block/blktrace.c:942:
+        if (t->action & BLK_TC_AHEAD)^I   rwbs[i++] = 'A';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: block/blktrace.c:942:
+        if (t->action & BLK_TC_AHEAD)^I   rwbs[i++] = 'A';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: block/blktrace.c:942:
+        if (t->action & BLK_TC_AHEAD)	   rwbs[i++] = 'A';

ERROR:CODE_INDENT: code indent should use tabs where possible
#268: FILE: block/blktrace.c:943:
+        if (t->action & BLK_TC_BARRIER)^I   rwbs[i++] = 'B';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#268: FILE: block/blktrace.c:943:
+        if (t->action & BLK_TC_BARRIER)^I   rwbs[i++] = 'B';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: block/blktrace.c:943:
+        if (t->action & BLK_TC_BARRIER)	   rwbs[i++] = 'B';

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: block/blktrace.c:944:
+        if (t->action & BLK_TC_SYNC)^I   rwbs[i++] = 'S';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: block/blktrace.c:944:
+        if (t->action & BLK_TC_SYNC)^I   rwbs[i++] = 'S';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#269: FILE: block/blktrace.c:944:
+        if (t->action & BLK_TC_SYNC)	   rwbs[i++] = 'S';

ERROR:CODE_INDENT: code indent should use tabs where possible
#270: FILE: block/blktrace.c:945:
+        if (t->action & BLK_TC_META)^I   rwbs[i++] = 'M';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: block/blktrace.c:945:
+        if (t->action & BLK_TC_META)^I   rwbs[i++] = 'M';$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#270: FILE: block/blktrace.c:945:
+        if (t->action & BLK_TC_META)	   rwbs[i++] = 'M';

ERROR:CODE_INDENT: code indent should use tabs where possible
#272: FILE: block/blktrace.c:947:
+        rwbs[i] = '\0';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: block/blktrace.c:947:
+        rwbs[i] = '\0';$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#308: FILE: block/blktrace.c:983:
+	unsigned secs		= (unsigned long)ts;

WARNING:LINE_SPACING: Missing a blank line after declarations
#321: FILE: block/blktrace.c:996:
+	int ret = blk_log_action(iter, t, act);
+	if (ret) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: block/blktrace.c:1013:
+	int ret = blk_log_action(iter, t, act);
+	if (ret) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#354: FILE: block/blktrace.c:1029:
+	int ret = blk_log_action(iter, t, "A");
+	if (ret) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#370: FILE: block/blktrace.c:1045:
+	int ret = blk_log_action(iter, t, "P");
+	if (ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#380: FILE: block/blktrace.c:1055:
+	int ret = blk_log_action(iter, t, act);
+	if (ret)

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: block/blktrace.c:1066:
+	int ret = blk_log_action(iter, t, act);
+	if (ret)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#417: FILE: block/blktrace.c:1092:
+	case __BLK_TA_ISSUE:	    ret = blk_log_generic(iter, t, "D"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: block/blktrace.c:1093:
+	case __BLK_TA_INSERT:	    ret = blk_log_generic(iter, t, "I"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#419: FILE: block/blktrace.c:1094:
+	case __BLK_TA_QUEUE:	    ret = blk_log_generic(iter, t, "Q"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#420: FILE: block/blktrace.c:1095:
+	case __BLK_TA_BOUNCE:	    ret = blk_log_generic(iter, t, "B"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#421: FILE: block/blktrace.c:1096:
+	case __BLK_TA_BACKMERGE:    ret = blk_log_generic(iter, t, "M"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#422: FILE: block/blktrace.c:1097:
+	case __BLK_TA_FRONTMERGE:   ret = blk_log_generic(iter, t, "F"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#423: FILE: block/blktrace.c:1098:
+	case __BLK_TA_GETRQ:	    ret = blk_log_generic(iter, t, "G"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#424: FILE: block/blktrace.c:1099:
+	case __BLK_TA_SLEEPRQ:	    ret = blk_log_generic(iter, t, "S"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#425: FILE: block/blktrace.c:1100:
+	case __BLK_TA_REQUEUE:	    ret = blk_log_with_err(iter, t, "R"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#426: FILE: block/blktrace.c:1101:
+	case __BLK_TA_COMPLETE:	    ret = blk_log_with_err(iter, t, "C"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#427: FILE: block/blktrace.c:1102:
+	case __BLK_TA_PLUG:	    ret = blk_log_plug(iter, t); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#428: FILE: block/blktrace.c:1103:
+	case __BLK_TA_UNPLUG_IO:    ret = blk_log_unplug(iter, t, "U"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#429: FILE: block/blktrace.c:1104:
+	case __BLK_TA_UNPLUG_TIMER: ret = blk_log_unplug(iter, t, "UT"); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#430: FILE: block/blktrace.c:1105:
+	case __BLK_TA_REMAP:	    ret = blk_log_remap(iter, t); break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#431: FILE: block/blktrace.c:1106:
+	case __BLK_TA_SPLIT:	    ret = blk_log_split(iter, t, "X"); break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bt"
#512: FILE: block/blktrace.c:1187:
+	if (bt == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_bt"
#538: FILE: block/blktrace.c:1213:
+	if (old_bt != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "bdev"
#562: FILE: block/blktrace.c:1237:
+	if (bdev != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "q"
#565: FILE: block/blktrace.c:1240:
+		if (q != NULL) {

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#588: FILE: block/blktrace.c:1263:
+	if (count == 0 || sscanf(buf, "%d", &value) != 1)
+		goto out;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bdev"
#594: FILE: block/blktrace.c:1269:
+	if (bdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#598: FILE: block/blktrace.c:1273:
+	if (q == NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#625: FILE: block/blktrace.c:1300:
+	DEVICE_ATTR(_name, S_IRUGO | S_IWUSR, \

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'sysfs_blk_trace_enable_show' to 'enable_show' 'sysfs_blk_trace_enable_store' to 'enable_store'
#629: FILE: block/blktrace.c:1304:
+static DEVICE_ATTR(enable, S_IRUGO | S_IWUSR,

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#629: FILE: block/blktrace.c:1304:
+static DEVICE_ATTR(enable, S_IRUGO | S_IWUSR,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!copy"
#655: FILE: block/blktrace.c:1330:
+	if (copy == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sep"
#663: FILE: block/blktrace.c:1338:
+		if (sep != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sep"
#687: FILE: block/blktrace.c:1362:
+		if (sep == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bdev"
#708: FILE: block/blktrace.c:1383:
+	if (bdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#712: FILE: block/blktrace.c:1387:
+	if (q == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q->blk_trace"
#715: FILE: block/blktrace.c:1390:
+	if (q->blk_trace == NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#746: FILE: block/blktrace.c:1421:
+	if (attr == &dev_attr_act_mask) {
[...]
+	} else if (sscanf(buf, "%llu", &value) != 1)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#747: FILE: block/blktrace.c:1422:
+		if (sscanf(buf, "%llx", &value) != 1) {
+			/* Assume it is a list of trace category names */
+			value = blk_str2act_mask(buf);
+			if (value < 0)
+				goto out;
+		}

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#753: FILE: block/blktrace.c:1428:
+	} else if (sscanf(buf, "%llu", &value) != 1)
+		goto out;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bdev"
#759: FILE: block/blktrace.c:1434:
+	if (bdev == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q"
#763: FILE: block/blktrace.c:1438:
+	if (q == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!q->blk_trace"
#768: FILE: block/blktrace.c:1443:
+	if (q->blk_trace == NULL)

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'part_partition_show' to 'partition_show'
#800: FILE: fs/partitions/check.c:273:
+#endif

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 35 errors, 29 warnings, 17 checks, 657 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000179452.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
