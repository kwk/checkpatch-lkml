WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#16: 
Subject: [PATCH 1/2] [Target_Core_Mod/Persistent_Reservations]: Add implict
                                                                    ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
Subject: [PATCH 1/2] [Target_Core_Mod/Persistent_Reservations]: Add implict PR RELEASE+UNREGISTER for LUN acl removal

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#39: 
Subject: [PATCH 1/2] [Target_Core_Mod/Persistent_Reservations]: Add implict PR RELEASE+UNREGISTER for LUN acl removal
                                                                    ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#44: 
instead of each time a LUN ACL was explict removed through configfs. The function that
                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'orginally' may be misspelled - perhaps 'originally'?
#59: 
orginally callers have been updated to use the new __* prefixed functions.
^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#118: FILE: drivers/lio-core/target_core_pr.c:48:
+static void __core_scsi3_complete_pro_release(se_device_t *, se_node_acl_t *,
+			t10_pr_registration_t *g, int);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#129: FILE: drivers/lio-core/target_core_pr.c:339:
+#if 0

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#130: FILE: drivers/lio-core/target_core_pr.c:340:
+		printk(KERN_INFO "Allowing explict CDB: 0x%02x for %s"
 		                           ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#130: FILE: drivers/lio-core/target_core_pr.c:340:
+		printk(KERN_INFO "Allowing explict CDB: 0x%02x for %s"

WARNING:SPLIT_STRING: quoted string split across lines
#131: FILE: drivers/lio-core/target_core_pr.c:341:
+		printk(KERN_INFO "Allowing explict CDB: 0x%02x for %s"
+			" reservation holder\n", cdb[0],

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#142: FILE: drivers/lio-core/target_core_pr.c:456:
+static int core_scsi3_alloc_registration(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#204: FILE: drivers/lio-core/target_core_pr.c:535:
+static void core_scsi3_check_implict_release(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder != NULL'
#216: FILE: drivers/lio-core/target_core_pr.c:544:
+	if ((pr_res_holder != NULL) && (pr_res_holder == pr_reg)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder == pr_reg'
#216: FILE: drivers/lio-core/target_core_pr.c:544:
+	if ((pr_res_holder != NULL) && (pr_res_holder == pr_reg)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pr_res_holder"
#216: FILE: drivers/lio-core/target_core_pr.c:544:
+	if ((pr_res_holder != NULL) && (pr_res_holder == pr_reg)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#246: FILE: drivers/lio-core/target_core_pr.c:568:
+static void __core_scsi3_free_registration(

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: drivers/lio-core/target_core_pr.c:593:
+		printk("SPC-3 PR [%s] waiting for pr_res_holders\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#272: FILE: drivers/lio-core/target_core_pr.c:594:
+		printk("SPC-3 PR [%s] waiting for pr_res_holders\n",
+				tfo->get_fabric_name());

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#273: FILE: drivers/lio-core/target_core_pr.c:595:
+		msleep(10);

WARNING:SPLIT_STRING: quoted string split across lines
#279: FILE: drivers/lio-core/target_core_pr.c:600:
 	printk(KERN_INFO "SPC-3 PR [%s] Service Action: UNREGISTER Initiator"
+		" Node: %s\n", tfo->get_fabric_name(),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#295: FILE: drivers/lio-core/target_core_pr.c:615:
+void core_scsi3_free_pr_reg_from_nacl(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder != NULL'
#307: FILE: drivers/lio-core/target_core_pr.c:627:
+	if ((pr_res_holder != NULL) &&
+	    (pr_res_holder->pr_reg_nacl == nacl))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pr_res_holder->pr_reg_nacl == nacl'
#307: FILE: drivers/lio-core/target_core_pr.c:627:
+	if ((pr_res_holder != NULL) &&
+	    (pr_res_holder->pr_reg_nacl == nacl))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pr_res_holder"
#307: FILE: drivers/lio-core/target_core_pr.c:627:
+	if ((pr_res_holder != NULL) &&

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: drivers/lio-core/target_core_pr.c:636:
+	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
+			&pr_tmpl->registration_list, pr_reg_list) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#317: FILE: drivers/lio-core/target_core_pr.c:637:
+			&pr_tmpl->registration_list, pr_reg_list) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pr_res_holder"
#335: FILE: drivers/lio-core/target_core_pr.c:654:
+	if (pr_res_holder != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#337: FILE: drivers/lio-core/target_core_pr.c:656:
+		se_node_acl_t *pr_res_nacl = pr_res_holder->pr_reg_nacl;
+		__core_scsi3_complete_pro_release(dev, pr_res_nacl,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: drivers/lio-core/target_core_pr.c:657:
+		__core_scsi3_complete_pro_release(dev, pr_res_nacl,
+				pr_res_holder, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#375: FILE: drivers/lio-core/target_core_pr.c:722:
+			ret = core_scsi3_alloc_registration(SE_DEV(cmd),
 					se_sess->se_node_acl, se_deve,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#493: FILE: drivers/lio-core/target_core_pr.c:1015:
+static void __core_scsi3_complete_pro_release(

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#497: FILE: drivers/lio-core/target_core_pr.c:1019:
+	int explict)
 	    ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#505: FILE: drivers/lio-core/target_core_pr.c:1027:
+	printk(KERN_INFO "SPC-3 PR [%s] Service Action: %s RELEASE cleared"

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: drivers/lio-core/target_core_pr.c:1028:
+	printk(KERN_INFO "SPC-3 PR [%s] Service Action: %s RELEASE cleared"
+		" reservation holder TYPE: %s ALL_TG_PT: %d\n",

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#507: FILE: drivers/lio-core/target_core_pr.c:1029:
+		tfo->get_fabric_name(), (explict) ? "explict" : "implict",
 		                         ^^^^^^^

WARNING:TYPO_SPELLING: 'explict' may be misspelled - perhaps 'explicit'?
#507: FILE: drivers/lio-core/target_core_pr.c:1029:
+		tfo->get_fabric_name(), (explict) ? "explict" : "implict",
 		                                     ^^^^^^^

WARNING:TYPO_SPELLING: 'implict' may be misspelled - perhaps 'implicit'?
#507: FILE: drivers/lio-core/target_core_pr.c:1029:
+		tfo->get_fabric_name(), (explict) ? "explict" : "implict",
 		                                                 ^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#510: FILE: drivers/lio-core/target_core_pr.c:1032:
+	printk(KERN_INFO "SPC-3 PR [%s] RELEASE Node: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#511: FILE: drivers/lio-core/target_core_pr.c:1033:
+	printk(KERN_INFO "SPC-3 PR [%s] RELEASE Node: %s\n",
+		tfo->get_fabric_name(),

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#516: FILE: drivers/lio-core/target_core_pr.c:1038:
+	pr_reg->pr_res_holder = pr_reg->pr_res_type = pr_reg->pr_res_scope = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#571: FILE: drivers/lio-core/target_core_pr.c:1141:
+	__core_scsi3_complete_pro_release(dev, se_sess->se_node_acl,
+			pr_reg, 1);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#601: FILE: drivers/lio-core/target_core_pr.c:1618:
+static int core_pt_seq_non_holder(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#616: FILE: drivers/lio-core/target_core_pr.h:45:
+extern void core_scsi3_free_pr_reg_from_nacl(struct se_device_s *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_device_s *' should also have an identifier name
#616: FILE: drivers/lio-core/target_core_pr.h:45:
+extern void core_scsi3_free_pr_reg_from_nacl(struct se_device_s *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_node_acl_s *' should also have an identifier name
#616: FILE: drivers/lio-core/target_core_pr.h:45:
+extern void core_scsi3_free_pr_reg_from_nacl(struct se_device_s *,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 23 checks, 501 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152650.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
