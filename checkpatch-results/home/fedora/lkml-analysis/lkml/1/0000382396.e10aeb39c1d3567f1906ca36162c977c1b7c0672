WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#59: FILE: fs/ext3/dir.c:107:
+	unsigned tail = sb->s_blocksize;

ERROR:CODE_INDENT: code indent should use tabs where possible
#72: FILE: fs/ext3/dir.c:175:
+                if (filp->f_version != inode->i_version) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#72: FILE: fs/ext3/dir.c:175:
+                if (filp->f_version != inode->i_version) {$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#82: FILE: fs/ext3/dir.c:197:
 		while (!error && filp->f_pos < inode->i_size
+		       && offset < tail) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#102: FILE: fs/ext3/namei.c:265:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#109: FILE: fs/ext3/namei.c:271:
+	while ((char *) de < base + tail)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#117: FILE: fs/ext3/namei.c:684:
+	unsigned tail = size;

CHECK:SPACING: No space is necessary after a cast
#123: FILE: fs/ext3/namei.c:689:
+	while ((char *) de < base + tail)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#131: FILE: fs/ext3/namei.c:786:
+	unsigned tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#135: FILE: fs/ext3/namei.c:789:
+	if (tail > EXT3_DIR_MAX_REC_LEN) {
+		tail = EXT3_DIR_MAX_REC_LEN;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#159: FILE: fs/ext3/namei.c:1199:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#160: FILE: fs/ext3/namei.c:1200:
+		de2->rec_len = cpu_to_le16(data2 + blocksize - (char *) de2);

CHECK:SPACING: No space is necessary after a cast
#163: FILE: fs/ext3/namei.c:1203:
+							(char *) de);

CHECK:SPACING: No space is necessary after a cast
#165: FILE: fs/ext3/namei.c:1205:
+							(char *) de2);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#174: FILE: fs/ext3/namei.c:1261:
+	unsigned	tail = dir->i_sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#176: FILE: fs/ext3/namei.c:1263:
+	if (tail > EXT3_DIR_MAX_REC_LEN) {
+		tail = EXT3_DIR_MAX_REC_LEN;
+	}

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#192: FILE: fs/ext3/namei.c:1383:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#193: FILE: fs/ext3/namei.c:1384:
+		len = ((char *) root) + blocksize - (char *) de;

CHECK:SPACING: No space is necessary after a cast
#195: FILE: fs/ext3/namei.c:1386:
+		len = ((char *) root) + EXT3_DIR_MAX_REC_LEN - (char *) de;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#203: FILE: fs/ext3/namei.c:1393:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: No space is necessary after a cast
#204: FILE: fs/ext3/namei.c:1394:
+		de->rec_len = cpu_to_le16(data1 + blocksize - (char *) de);

CHECK:SPACING: No space is necessary after a cast
#206: FILE: fs/ext3/namei.c:1396:
+		de->rec_len = cpu_to_le16(data1 + EXT3_DIR_MAX_REC_LEN - (char *) de);

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#216: FILE: fs/ext3/namei.c:1487:
+	if (blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#242: FILE: fs/ext3/namei.c:1648:
+	unsigned tail = bh->b_size;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#260: FILE: fs/ext3/namei.c:1816:
+	if (inode->i_sb->s_blocksize < EXT3_DIR_MAX_REC_LEN) {
[...]
+	} else {
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#261: FILE: fs/ext3/namei.c:1817:
+		de->rec_len = cpu_to_le16(inode->i_sb->s_blocksize-EXT3_DIR_REC_LEN(1));
 		                                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#263: FILE: fs/ext3/namei.c:1819:
+		de->rec_len = cpu_to_le16(EXT3_DIR_MAX_REC_LEN-EXT3_DIR_REC_LEN(1));
 		                                              ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: fs/ext3/namei.c:1855:
+	struct super_block * sb = inode->i_sb;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#275: FILE: fs/ext3/namei.c:1857:
+	unsigned tail = sb->s_blocksize;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#285: FILE: fs/ext3/namei.c:1885:
+	if (offset == EXT3_DIR_MAX_REC_LEN) {
+		offset += sb->s_blocksize - EXT3_DIR_MAX_REC_LEN;
+	}

CHECK:SPACING: No space is necessary after a cast
#296: FILE: fs/ext3/namei.c:1895:
+			(void *) de >= (void *) (bh->b_data + tail)) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offs' - possible side-effects?
#321: FILE: include/linux/ext3_fs.h:668:
+#define EXT3_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bsize' - possible side-effects?
#321: FILE: include/linux/ext3_fs.h:668:
+#define EXT3_DIR_ADJUST_TAIL_OFFS(offs, bsize) \
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#322: FILE: include/linux/ext3_fs.h:669:
+	((((offs) & ((bsize) -1)) == EXT3_DIR_MAX_REC_LEN) ? \
 	                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#323: FILE: include/linux/ext3_fs.h:670:
+	((offs) + (bsize) - EXT3_DIR_MAX_REC_LEN):(offs))
 	                                         ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 15 warnings, 18 checks, 251 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000382396.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
