WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#119: FILE: arch/x86_64/kernel/smp.c:253:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#205: FILE: include/asm-generic/pgalloc.h:1:
+#ifndef _ASM_GENERIC_PGALLOC_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: include/asm-generic/pgalloc.h:4:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#235: FILE: include/asm-generic/pgalloc.h:31:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#240: FILE: include/asm-generic/pgalloc.h:36:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#259: FILE: include/asm-generic/pgtable.h:205:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#261: FILE: include/asm-generic/pgtable.h:207:
+/* Used to rewalk the page tables if after we grab the appropriate lock,
+   we end up with a page that's just waiting to go away. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#261: FILE: include/asm-generic/pgtable.h:207:
+   we end up with a page that's just waiting to go away. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#263: FILE: include/asm-generic/pgtable.h:209:
+static inline pgd_t *walk_page_table_pgd(struct mm_struct *mm,
+					  unsigned long addr)

WARNING:LINE_SPACING: Missing a blank line after declarations
#271: FILE: include/asm-generic/pgtable.h:217:
+	pgd_t *pgd;
+	pgd = walk_page_table_pgd(mm, addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: include/asm-generic/pgtable.h:218:
+	BUG_ON(!pgd);

WARNING:LINE_SPACING: Missing a blank line after declarations
#280: FILE: include/asm-generic/pgtable.h:226:
+	pud_t *pud;
+	pud = walk_page_table_pud(mm, addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#281: FILE: include/asm-generic/pgtable.h:227:
+	BUG_ON(!pud);

WARNING:LINE_SPACING: Missing a blank line after declarations
#289: FILE: include/asm-generic/pgtable.h:235:
+	pmd_t *pmd;
+	pmd = walk_page_table_pmd(mm, addr);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#290: FILE: include/asm-generic/pgtable.h:236:
+	BUG_ON(!pmd);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#307: FILE: include/asm-generic/tlbflush.h:1:
+/* include/asm-generic/tlbflush.h

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#307: FILE: include/asm-generic/tlbflush.h:1:
+/* include/asm-generic/tlbflush.h

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#324: FILE: include/asm-generic/tlbflush.h:18:
+#include <asm/mmu_context.h>

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#327: FILE: include/asm-generic/tlbflush.h:21:
+/* flush an mm that we messed with earlier, but delayed the flush
+   assuming that we would muck with it a whole lot more. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#327: FILE: include/asm-generic/tlbflush.h:21:
+   assuming that we would muck with it a whole lot more. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#344: FILE: include/asm-generic/tlbflush.h:38:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#404: FILE: include/asm-generic/tlbflush.h:98:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#407: FILE: include/asm-generic/tlbflush.h:101:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#476: FILE: include/asm-mips/tlbflush.h:53:
 }
+#include <asm-generic/tlbflush.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#611: FILE: include/asm-x86_64/pgalloc.h:53:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#611: FILE: include/asm-x86_64/pgalloc.h:53:
+	BUG_ON((unsigned long)pgd & (PAGE_SIZE-1));
 	                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#617: FILE: include/asm-x86_64/pgalloc.h:59:
+/* Should really implement gc for free page table pages. This could be
+   done with a reference count in struct page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#617: FILE: include/asm-x86_64/pgalloc.h:59:
+   done with a reference count in struct page. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#621: FILE: include/asm-x86_64/pgalloc.h:63:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#621: FILE: include/asm-x86_64/pgalloc.h:63:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));
 	                                      ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#636: FILE: include/asm-x86_64/pgalloc.h:78:
+#if 1

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#643: FILE: include/asm-x86_64/pgalloc.h:85:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#643: FILE: include/asm-x86_64/pgalloc.h:85:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#655: FILE: include/asm-x86_64/pgalloc.h:97:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#655: FILE: include/asm-x86_64/pgalloc.h:97:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#665: FILE: include/asm-x86_64/pgalloc.h:107:
+	return (pud_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#671: FILE: include/asm-x86_64/pgalloc.h:113:
+	return (pmd_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#676: FILE: include/asm-x86_64/pgalloc.h:118:
+#if 1

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#679: FILE: include/asm-x86_64/pgalloc.h:121:
+	unsigned boundary;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#683: FILE: include/asm-x86_64/pgalloc.h:125:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT, 0);
 	                                        ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#715: FILE: include/asm-x86_64/pgalloc.h:167:
+#if 1

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#722: FILE: include/asm-x86_64/pgalloc.h:174:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#722: FILE: include/asm-x86_64/pgalloc.h:174:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#737: FILE: include/asm-x86_64/pgalloc.h:186:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#737: FILE: include/asm-x86_64/pgalloc.h:186:
+	page = alloc_pages_node(node, GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#801: FILE: include/asm-x86_64/pgalloc.h:238:
+	return (pud_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#806: FILE: include/asm-x86_64/pgalloc.h:243:
+	return (pmd_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#811: FILE: include/asm-x86_64/pgalloc.h:248:
+	unsigned boundary;

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#812: FILE: include/asm-x86_64/pgalloc.h:249:
+	pgd_t *pgd = (pgd_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
 	                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#813: FILE: include/asm-x86_64/pgalloc.h:250:
+	pgd_t *pgd = (pgd_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT);
+	if (!pgd)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#832: FILE: include/asm-x86_64/pgalloc.h:269:
+	return (pte_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#838: FILE: include/asm-x86_64/pgalloc.h:275:
+	void *p = (void *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#839: FILE: include/asm-x86_64/pgalloc.h:276:
+	void *p = (void *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
+	if (!p)

ERROR:DEFINE_ARCH_HAS: #define of 'ARCH_HAS_RELOAD_TLB' is wrong - use Kconfig variables or standard guards instead
#856: FILE: include/asm-x86_64/tlbflush.h:9:
+#define ARCH_HAS_RELOAD_TLB

The ARCH_HAS_xyz and ARCH_HAVE_xyz patterns are wrong.

For big conceptual features use Kconfig symbols instead.  And for
smaller things where we have compatibility fallback functions but
want architectures able to override them with optimized ones, we
should either use weak functions (appropriate for some cases), or
the symbol that protects them should be the same symbol we use.

See: https://lore.kernel.org/lkml/CA+55aFycQ9XJvEOsiM3txHL5bjUc8CeKWJNR_H+MiicaddB42Q@mail.gmail.com/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#886: FILE: include/asm-x86_64/tlbflush.h:89:
+extern void reload_tlb_mm(struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1118: FILE: include/linux/migrate.h:9:
+typedef struct page *new_page_table_t(struct mm_struct *,

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1132: FILE: include/linux/mm.h:17:
+#include <asm/pgtable.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1149: FILE: include/linux/mm.h:966:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1152: FILE: include/linux/mm.h:969:
+static inline void delimbo_pte(pte_t **pte, spinlock_t **ptl,  pmd_t **pmd,
+			  struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1173: FILE: include/linux/mm.h:990:
+static inline void delimbo_pte_nested(pte_t **pte, spinlock_t **ptl,
+				pmd_t **pmd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1195: FILE: include/linux/mm.h:1012:
+static inline void delimbo_pud(pud_t **pud,  struct mm_struct *mm,
+			  unsigned long addr) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1196: FILE: include/linux/mm.h:1013:
+			  unsigned long addr) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1205: FILE: include/linux/mm.h:1022:
+			       unsigned long addr) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1272: FILE: include/linux/sched.h:373:
+					 * lock held. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1405: FILE: mm/memory.c:2237:
+	/* Unless of course the cpu might be looking at an old
+	   copy of the pte. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1405: FILE: mm/memory.c:2237:
+	   copy of the pte. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1424: FILE: mm/memory.c:2303:
+	/* Unless of course the cpu might be looking at an old
+	   copy of the pte. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1424: FILE: mm/memory.c:2303:
+	   copy of the pte. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1435: FILE: mm/memory.c:2460:
+		/* Unless of course the cpu could be looking at an old page
+		   table entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1435: FILE: mm/memory.c:2460:
+		   table entry. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1464: FILE: mm/memory.c:2650:
+	/* if the cpu could be looking at an old page table, we need to
+	   flush out everything. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1464: FILE: mm/memory.c:2650:
+	   flush out everything. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1467: FILE: mm/memory.c:2653:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1494: FILE: mm/mempolicy.c:104:
 
+

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1495: FILE: mm/mempolicy.c:105:
+int migrate_page_tables_mm(struct mm_struct *mm,  int source,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1499: FILE: mm/mempolicy.c:109:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1514: FILE: mm/mempolicy.c:613:
+	struct page *p;
+	p = alloc_page_table_node(mm, addr, node, level);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1585: FILE: mm/migrate.c:1059:
+	struct page *page = container_of(head, struct page, rcu);
+	INIT_LIST_HEAD(&page->lru);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1618: FILE: mm/migrate.c:1092:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1648: FILE: mm/migrate.c:1122:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1654: FILE: mm/migrate.c:1128:
+	spinlock_t *ptl;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1662: FILE: mm/migrate.c:1136:
+	/* this could happen if the page table has been swapped out and we
+	   were looking at the old one. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1662: FILE: mm/migrate.c:1136:
+	   were looking at the old one. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1728: FILE: mm/migrate.c:1202:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1770: FILE: mm/migrate.c:1244:
+		int ret;
+		ret = migrate_page_tables_pmd(pmd_offset(pud, *address), mm,

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1815: FILE: mm/migrate.c:1289:
+
+	}

WARNING:LINE_SPACING: Missing a blank line after declarations
#1819: FILE: mm/migrate.c:1293:
+		int ret;
+		ret = migrate_page_tables_pud(pud_offset(pgd, *address), mm,

WARNING:TYPO_SPELLING: 'similiar' may be misspelled - perhaps 'similar'?
#1845: FILE: mm/migrate.c:1319:
+/* similiar to migrate pages, but migrates the page tables. */
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mm->pgd"
#1860: FILE: mm/migrate.c:1334:
+	if (mm->pgd == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1885: FILE: mm/migrate.c:1359:
+		not_migrated = migrate_top_level_page_table(mm, new_page,
+							&old_pages);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 46 warnings, 44 checks, 1698 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000305927.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
