CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/io.h> instead of <asm/io.h>
#64: FILE: arch/x86/kernel/numaq_32.c:311:
+#include <asm/io.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#76: FILE: arch/x86/kernel/numaq_32.c:323:
+void default_send_IPI_mask_allbutself(const struct cpumask *mask, int vector);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#110: FILE: arch/x86/kernel/numaq_32.c:357:
+	printk("Storing NMI vector\n");

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#112: FILE: arch/x86/kernel/numaq_32.c:359:
+	  *((volatile unsigned short *)phys_to_virt(NUMAQ_TRAMPOLINE_PHYS_HIGH));

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#114: FILE: arch/x86/kernel/numaq_32.c:361:
+	  *((volatile unsigned short *)phys_to_virt(NUMAQ_TRAMPOLINE_PHYS_LOW));

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'apicid' may be better as '(apicid)' to avoid precedence issues
#133: FILE: arch/x86/kernel/numaq_32.c:380:
+#define apicid_cluster(apicid) (apicid & 0xF0)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#147: FILE: arch/x86/kernel/numaq_32.c:394:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#148: FILE: arch/x86/kernel/numaq_32.c:395:
+	printk("Enabling APIC mode:  %s.  Using %d I/O APICs\n",
+		"NUMA-Q", nr_ioapics);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#189: FILE: arch/x86/kernel/numaq_32.c:436:
+static inline int numaq_apicid_to_node(int logical_apicid) $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#199: FILE: arch/x86/kernel/numaq_32.c:446:
+	return physid_mask_of_physid(cpu + 4*node);
 	                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#230: FILE: arch/x86/kernel/numaq_32.c:477:
+}
+static int __numaq_mps_oem_check(struct mpc_table *mpc, char *oem, char *productid)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'desitination' may be misspelled - perhaps 'destination'?
#250: FILE: arch/x86/kernel/numaq_32.c:497:
+	 * hyperthread was specified in the interrupt desitination.
 	                                              ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: arch/x86/kernel/numaq_32.c:507:
+       ^I^Ireturn;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#260: FILE: arch/x86/kernel/numaq_32.c:507:
+       ^I^Ireturn;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#260: FILE: arch/x86/kernel/numaq_32.c:507:
+       ^I^Ireturn;$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#262: FILE: arch/x86/kernel/numaq_32.c:509:
+	printk("Remapping cross-quad port I/O for %d quads\n", num_quads);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#263: FILE: arch/x86/kernel/numaq_32.c:510:
+	xquad_portio = ioremap(XQUAD_PORTIO_BASE, num_quads*XQUAD_PORTIO_QUAD);
 	                                                   ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#264: FILE: arch/x86/kernel/numaq_32.c:511:
+	printk("xquad_portio vaddr 0x%08lx, len %08lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#265: FILE: arch/x86/kernel/numaq_32.c:512:
+	printk("xquad_portio vaddr 0x%08lx, len %08lx\n",
+		(u_long) xquad_portio, (u_long) num_quads*XQUAD_PORTIO_QUAD);

CHECK:SPACING: No space is necessary after a cast
#265: FILE: arch/x86/kernel/numaq_32.c:512:
+		(u_long) xquad_portio, (u_long) num_quads*XQUAD_PORTIO_QUAD);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#265: FILE: arch/x86/kernel/numaq_32.c:512:
+		(u_long) xquad_portio, (u_long) num_quads*XQUAD_PORTIO_QUAD);
 		                                         ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#269: FILE: arch/x86/kernel/numaq_32.c:516:
+struct genapic apic_numaq = {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#275: FILE: arch/x86/kernel/numaq_32.c:522:
+	.irq_delivery_mode		= dest_LowestPrio,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#336: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 11 warnings, 11 checks, 286 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000174750.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
