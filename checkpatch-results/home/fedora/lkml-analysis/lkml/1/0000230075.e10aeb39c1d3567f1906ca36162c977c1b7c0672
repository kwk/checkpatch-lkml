WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#96: FILE: drivers/input/lirc/Kconfig:15:
+config LIRC_DEV
+	tristate "LIRC device loadable module support"
+	default n
+	help
+	  LIRC device loadable module support, required for most LIRC drivers
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#114: FILE: drivers/input/lirc/Makefile:6:
+EXTRA_CFLAGS =-DIRCTL_DEV_MAJOR=61 -DLIRC_SERIAL_TRANSMITTER -I$(src)

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#123: FILE: drivers/input/lirc/lirc.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#141: FILE: drivers/input/lirc/lirc.h:19:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#154: FILE: drivers/input/lirc/lirc.h:32:
+
+

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#184: FILE: drivers/input/lirc/lirc.h:62:
+#define LIRC_CAN_SEND(x) ((x)&LIRC_CAN_SEND_MASK)
                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#185: FILE: drivers/input/lirc/lirc.h:63:
+#define LIRC_CAN_REC(x) ((x)&LIRC_CAN_REC_MASK)
                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: drivers/input/lirc/lirc.h:94:
+/* to set a range use
+   LIRC_SET_REC_DUTY_CYCLE_RANGE/LIRC_SET_REC_CARRIER_RANGE with the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#218: FILE: drivers/input/lirc/lirc.h:96:
+   LIRC_SET_REC_DUTY_CYCLE/LIRC_SET_REC_CARRIER with the upper bound */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#232: FILE: drivers/input/lirc/lirc_dev.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#248: FILE: drivers/input/lirc/lirc_dev.c:17:
+ *  along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#249: FILE: drivers/input/lirc/lirc_dev.c:18:
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#282: FILE: drivers/input/lirc/lirc_dev.c:51:
+			printk(KERN_DEBUG fmt, ## args);	\

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#295: FILE: drivers/input/lirc/lirc_dev.c:64:
+	struct mutex buffer_lock;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#306: FILE: drivers/input/lirc/lirc_dev.c:75:
+static struct file_operations fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:REPEATED_WORD: Possible repeated word: 'buffer'
#344: FILE: drivers/input/lirc/lirc_dev.c:113:
+ *  reads key codes from plugin and puts them into buffer
+ *  buffer free space is checked and locking performed

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#397: FILE: drivers/input/lirc/lirc_dev.c:166:
+				interruptible_sleep_on(

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#407: FILE: drivers/input/lirc/lirc_dev.c:176:
+			schedule_timeout(HZ/2);
 			                   ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#425: FILE: drivers/input/lirc/lirc_dev.c:194:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#425: FILE: drivers/input/lirc/lirc_dev.c:194:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#426: FILE: drivers/input/lirc/lirc_dev.c:195:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+		       "plugin pointer must be not NULL!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#431: FILE: drivers/input/lirc/lirc_dev.c:200:
+	if (MAX_IRCTL_DEVICES <= p->minor) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#432: FILE: drivers/input/lirc/lirc_dev.c:201:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#432: FILE: drivers/input/lirc/lirc_dev.c:201:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#433: FILE: drivers/input/lirc/lirc_dev.c:202:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+		       "\"minor\" must be between 0 and %d (%d)!\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#434: FILE: drivers/input/lirc/lirc_dev.c:203:
+		       MAX_IRCTL_DEVICES-1, p->minor);
 		                        ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#439: FILE: drivers/input/lirc/lirc_dev.c:208:
+	if (1 > p->code_length || (BUFLEN * 8) < p->code_length) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#440: FILE: drivers/input/lirc/lirc_dev.c:209:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#440: FILE: drivers/input/lirc/lirc_dev.c:209:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#441: FILE: drivers/input/lirc/lirc_dev.c:210:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+		       "code length in bits for minor (%d) "

WARNING:SPLIT_STRING: quoted string split across lines
#442: FILE: drivers/input/lirc/lirc_dev.c:211:
+		       "code length in bits for minor (%d) "
+		       "must be less than %d!\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#448: FILE: drivers/input/lirc/lirc_dev.c:217:
+	printk(KERN_INFO "lirc_dev: lirc_register_plugin: sample_rate: %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#448: FILE: drivers/input/lirc/lirc_dev.c:217:
+	printk(KERN_INFO "lirc_dev: lirc_register_plugin: sample_rate: %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#449: FILE: drivers/input/lirc/lirc_dev.c:218:
+	printk(KERN_INFO "lirc_dev: lirc_register_plugin: sample_rate: %d\n",
+		p->sample_rate);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#452: FILE: drivers/input/lirc/lirc_dev.c:221:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#452: FILE: drivers/input/lirc/lirc_dev.c:221:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#453: FILE: drivers/input/lirc/lirc_dev.c:222:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+			       "sample_rate must be between 2 and %d!\n", HZ);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#458: FILE: drivers/input/lirc/lirc_dev.c:227:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#458: FILE: drivers/input/lirc/lirc_dev.c:227:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#459: FILE: drivers/input/lirc/lirc_dev.c:228:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+			       "add_to_buf cannot be NULL when "

WARNING:SPLIT_STRING: quoted string split across lines
#460: FILE: drivers/input/lirc/lirc_dev.c:229:
+			       "add_to_buf cannot be NULL when "
+			       "sample_rate is set\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#465: FILE: drivers/input/lirc/lirc_dev.c:234:
+	} else if (!(p->fops && p->fops->read)
+		   && !p->get_queue && !p->rbuf) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#466: FILE: drivers/input/lirc/lirc_dev.c:235:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#466: FILE: drivers/input/lirc/lirc_dev.c:235:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#467: FILE: drivers/input/lirc/lirc_dev.c:236:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+		       "fops->read, get_queue and rbuf "

WARNING:SPLIT_STRING: quoted string split across lines
#468: FILE: drivers/input/lirc/lirc_dev.c:237:
+		       "fops->read, get_queue and rbuf "
+		       "cannot all be NULL!\n");

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#473: FILE: drivers/input/lirc/lirc_dev.c:242:
+		if (!(p->fops && p->fops->read && p->fops->poll)
+		    || (!p->fops->ioctl && !p->ioctl)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#474: FILE: drivers/input/lirc/lirc_dev.c:243:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#474: FILE: drivers/input/lirc/lirc_dev.c:243:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#475: FILE: drivers/input/lirc/lirc_dev.c:244:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+			       "neither read, poll nor ioctl can be NULL!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p->owner"
#481: FILE: drivers/input/lirc/lirc_dev.c:250:
+	if (p->owner == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#482: FILE: drivers/input/lirc/lirc_dev.c:251:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#482: FILE: drivers/input/lirc/lirc_dev.c:251:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#483: FILE: drivers/input/lirc/lirc_dev.c:252:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+				    "no module owner registered\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#492: FILE: drivers/input/lirc/lirc_dev.c:261:
+	if (0 > minor) {

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#497: FILE: drivers/input/lirc/lirc_dev.c:266:
+		if (MAX_IRCTL_DEVICES == minor) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#498: FILE: drivers/input/lirc/lirc_dev.c:267:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#498: FILE: drivers/input/lirc/lirc_dev.c:267:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#499: FILE: drivers/input/lirc/lirc_dev.c:268:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+			       "no free slots for plugins!\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#504: FILE: drivers/input/lirc/lirc_dev.c:273:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#504: FILE: drivers/input/lirc/lirc_dev.c:273:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#505: FILE: drivers/input/lirc/lirc_dev.c:274:
+		printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+		       "minor (%d) just registered!\n", minor);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#520: FILE: drivers/input/lirc/lirc_dev.c:289:
+	p->name[sizeof(p->name)-1] = '\0';
 	                       ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#522: FILE: drivers/input/lirc/lirc_dev.c:291:
+	bytes_in_key = p->code_length/8 + (p->code_length%8 ? 1 : 0);
 	                             ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#522: FILE: drivers/input/lirc/lirc_dev.c:291:
+	bytes_in_key = p->code_length/8 + (p->code_length%8 ? 1 : 0);
 	                                                 ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*ir->buf)...) over kmalloc(sizeof(struct lirc_buffer)...)
#527: FILE: drivers/input/lirc/lirc_dev.c:296:
+		ir->buf = kmalloc(sizeof(struct lirc_buffer), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#533: FILE: drivers/input/lirc/lirc_dev.c:302:
+				     BUFLEN/bytes_in_key) != 0) {
 				           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#555: FILE: drivers/input/lirc/lirc_dev.c:324:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_register_plugin', this function's name, in a string
#555: FILE: drivers/input/lirc/lirc_dev.c:324:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#556: FILE: drivers/input/lirc/lirc_dev.c:325:
+			printk(KERN_ERR "lirc_dev: lirc_register_plugin: "
+			       "cannot run poll thread for minor = %d\n",

WARNING:TYPO_SPELLING: 'autmatically' may be misspelled - perhaps 'automatically'?
#566: FILE: drivers/input/lirc/lirc_dev.c:335:
+ * Recent kernels should handle this autmatically by increasing/decreasing
                                      ^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#567: FILE: drivers/input/lirc/lirc_dev.c:336:
+ * use count when a dependant module is loaded/unloaded.
                     ^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#590: FILE: drivers/input/lirc/lirc_dev.c:359:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_unregister_plugin', this function's name, in a string
#590: FILE: drivers/input/lirc/lirc_dev.c:359:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#591: FILE: drivers/input/lirc/lirc_dev.c:360:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "
+		       "\"minor\" must be between 0 and %d!\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#592: FILE: drivers/input/lirc/lirc_dev.c:361:
+		       MAX_IRCTL_DEVICES-1);
 		                        ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#601: FILE: drivers/input/lirc/lirc_dev.c:370:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lirc_unregister_plugin', this function's name, in a string
#601: FILE: drivers/input/lirc/lirc_dev.c:370:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "

WARNING:SPLIT_STRING: quoted string split across lines
#602: FILE: drivers/input/lirc/lirc_dev.c:371:
+		printk(KERN_ERR "lirc_dev: lirc_unregister_plugin: "
+		       "minor (%d) device not registered!", minor);

CHECK:BRACES: braces {} should be used on all arms of this statement
#617: FILE: drivers/input/lirc/lirc_dev.c:386:
+	if (ir->open) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#625: FILE: drivers/input/lirc/lirc_dev.c:394:
+	} else

WARNING:TYPO_SPELLING: 'autmatically' may be misspelled - perhaps 'automatically'?
#630: FILE: drivers/input/lirc/lirc_dev.c:399:
+ * Recent kernels should handle this autmatically by increasing/decreasing
                                      ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#631: FILE: drivers/input/lirc/lirc_dev.c:400:
+ * use count when a dependant module is loaded/unloaded.
                     ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ir->p.owner"
#685: FILE: drivers/input/lirc/lirc_dev.c:454:
+	if (ir->p.owner != NULL && try_module_get(ir->p.owner)) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ir->p.owner"
#694: FILE: drivers/input/lirc/lirc_dev.c:463:
+		if (ir->p.owner == NULL)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#762: FILE: drivers/input/lirc/lirc_dev.c:531:
+	ret = lirc_buffer_empty(ir->buf) ? 0 : (POLLIN|POLLRDNORM);
 	                                              ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#805: FILE: drivers/input/lirc/lirc_dev.c:574:
+		if (!(ir->p.features&LIRC_CAN_REC_MASK))
 		                    ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#806: FILE: drivers/input/lirc/lirc_dev.c:575:
+			return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#809: FILE: drivers/input/lirc/lirc_dev.c:578:
+				  (ir->p.features&LIRC_CAN_REC_MASK),
 				                 ^

CHECK:SPACING: spaces preferred around that '&' (ctx:VxV)
#813: FILE: drivers/input/lirc/lirc_dev.c:582:
+		if (!(ir->p.features&LIRC_CAN_REC_MASK))
 		                    ^

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#814: FILE: drivers/input/lirc/lirc_dev.c:583:
+			return -ENOSYS;

WARNING:TYPO_SPELLING: 'beetwen' may be misspelled - perhaps 'between'?
#874: FILE: drivers/input/lirc/lirc_dev.c:643:
+	 * beetwen while condition checking and scheduling)
 	   ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#888: FILE: drivers/input/lirc/lirc_dev.c:657:
+			 * -ERESTARTSYS */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#907: FILE: drivers/input/lirc/lirc_dev.c:676:
+			ret = copy_to_user((void *)buffer+written, buf,
 			                                 ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#923: FILE: drivers/input/lirc/lirc_dev.c:692:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#931: FILE: drivers/input/lirc/lirc_dev.c:700:
+		struct irctl *ir;
+		ir = &irctls[MINOR(file->f_dentry->d_inode->i_rdev)];

CHECK:LINE_SPACING: Please don't use multiple blank lines
#939: FILE: drivers/input/lirc/lirc_dev.c:708:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#957: FILE: drivers/input/lirc/lirc_dev.c:726:
+
+

WARNING:CONST_STRUCT: struct file_operations should normally be const
#958: FILE: drivers/input/lirc/lirc_dev.c:727:
+static struct file_operations fops = {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#967: FILE: drivers/input/lirc/lirc_dev.c:736:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#976: FILE: drivers/input/lirc/lirc_dev.c:745:
+		printk(KERN_ERR "lirc_dev: register_chrdev failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#982: FILE: drivers/input/lirc/lirc_dev.c:751:
+		printk(KERN_ERR "lirc_dev: class_create failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#986: FILE: drivers/input/lirc/lirc_dev.c:755:
+	printk(KERN_INFO "lirc_dev: IR Remote Control driver registered, "

WARNING:SPLIT_STRING: quoted string split across lines
#987: FILE: drivers/input/lirc/lirc_dev.c:756:
+	printk(KERN_INFO "lirc_dev: IR Remote Control driver registered, "
+	       "major %d \n", IRCTL_DEV_MAJOR);

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#987: FILE: drivers/input/lirc/lirc_dev.c:756:
+	       "major %d \n", IRCTL_DEV_MAJOR);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1047: FILE: drivers/input/lirc/lirc_dev.h:1:
+/*

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1072: FILE: drivers/input/lirc/lirc_dev.h:26:
+	spinlock_t lock;

WARNING:TYPO_SPELLING: 'tunning' may be misspelled - perhaps 'tuning'?
#1080: FILE: drivers/input/lirc/lirc_dev.h:34:
+	 * And should allow for some performance fine tunning later */
 	                                              ^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1080: FILE: drivers/input/lirc/lirc_dev.h:34:
+	 * And should allow for some performance fine tunning later */

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1082: FILE: drivers/input/lirc/lirc_dev.h:36:
+};
+static inline void _lirc_buffer_clear(struct lirc_buffer *buf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1088: FILE: drivers/input/lirc/lirc_dev.h:42:
+}
+static inline int lirc_buffer_init(struct lirc_buffer *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1089: FILE: drivers/input/lirc/lirc_dev.h:43:
+static inline int lirc_buffer_init(struct lirc_buffer *buf,
+				    unsigned int chunk_size,

WARNING:TYPO_SPELLING: 'inconditional' may be misspelled - perhaps 'unconditional'?
#1093: FILE: drivers/input/lirc/lirc_dev.h:47:
+	 * inconditional LIRC_BUFF_POWER_OF_2 optimization */
 	   ^^^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1093: FILE: drivers/input/lirc/lirc_dev.h:47:
+	 * inconditional LIRC_BUFF_POWER_OF_2 optimization */

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1099: FILE: drivers/input/lirc/lirc_dev.h:53:
+	buf->data = kmalloc(size*chunk_size, GFP_KERNEL);
 	                        ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buf->data"
#1100: FILE: drivers/input/lirc/lirc_dev.h:54:
+	if (buf->data == NULL)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1102: FILE: drivers/input/lirc/lirc_dev.h:56:
+	memset(buf->data, 0, size*chunk_size);
 	                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1105: FILE: drivers/input/lirc/lirc_dev.h:59:
+}
+static inline void lirc_buffer_free(struct lirc_buffer *buf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1115: FILE: drivers/input/lirc/lirc_dev.h:69:
+}
+static inline int  lirc_buffer_full(struct lirc_buffer *buf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1119: FILE: drivers/input/lirc/lirc_dev.h:73:
+}
+static inline int  lirc_buffer_empty(struct lirc_buffer *buf)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1123: FILE: drivers/input/lirc/lirc_dev.h:77:
+}
+static inline int  lirc_buffer_available(struct lirc_buffer *buf)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: drivers/input/lirc/lirc_dev.h:79:
+    return buf->size - buf->fill;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1127: FILE: drivers/input/lirc/lirc_dev.h:81:
+}
+static inline void lirc_buffer_lock(struct lirc_buffer *buf,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1132: FILE: drivers/input/lirc/lirc_dev.h:86:
+}
+static inline void lirc_buffer_unlock(struct lirc_buffer *buf,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1137: FILE: drivers/input/lirc/lirc_dev.h:91:
+}
+static inline void lirc_buffer_clear(struct lirc_buffer *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1140: FILE: drivers/input/lirc/lirc_dev.h:94:
+	unsigned long flags;
+	lirc_buffer_lock(buf, &flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1144: FILE: drivers/input/lirc/lirc_dev.h:98:
+}
+static inline void _lirc_buffer_remove_1(struct lirc_buffer *buf)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1146: FILE: drivers/input/lirc/lirc_dev.h:100:
+	buf->head = mod(buf->head+1, buf->size);
 	                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1149: FILE: drivers/input/lirc/lirc_dev.h:103:
+}
+static inline void lirc_buffer_remove_1(struct lirc_buffer *buf)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1152: FILE: drivers/input/lirc/lirc_dev.h:106:
+	unsigned long flags;
+	lirc_buffer_lock(buf, &flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1156: FILE: drivers/input/lirc/lirc_dev.h:110:
+}
+static inline void _lirc_buffer_read_1(struct lirc_buffer *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1157: FILE: drivers/input/lirc/lirc_dev.h:111:
+static inline void _lirc_buffer_read_1(struct lirc_buffer *buf,
+				     unsigned char *dest)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1159: FILE: drivers/input/lirc/lirc_dev.h:113:
+	memcpy(dest, &buf->data[buf->head*buf->chunk_size], buf->chunk_size);
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1160: FILE: drivers/input/lirc/lirc_dev.h:114:
+	buf->head = mod(buf->head+1, buf->size);
 	                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1163: FILE: drivers/input/lirc/lirc_dev.h:117:
+}
+static inline void lirc_buffer_read_1(struct lirc_buffer *buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1167: FILE: drivers/input/lirc/lirc_dev.h:121:
+	unsigned long flags;
+	lirc_buffer_lock(buf, &flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1171: FILE: drivers/input/lirc/lirc_dev.h:125:
+}
+static inline void _lirc_buffer_write_1(struct lirc_buffer *buf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1172: FILE: drivers/input/lirc/lirc_dev.h:126:
+static inline void _lirc_buffer_write_1(struct lirc_buffer *buf,
+				      unsigned char *orig)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1174: FILE: drivers/input/lirc/lirc_dev.h:128:
+	memcpy(&buf->data[buf->tail*buf->chunk_size], orig, buf->chunk_size);
 	                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1175: FILE: drivers/input/lirc/lirc_dev.h:129:
+	buf->tail = mod(buf->tail+1, buf->size);
 	                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1178: FILE: drivers/input/lirc/lirc_dev.h:132:
+}
+static inline void lirc_buffer_write_1(struct lirc_buffer *buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1182: FILE: drivers/input/lirc/lirc_dev.h:136:
+	unsigned long flags;
+	lirc_buffer_lock(buf, &flags);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1186: FILE: drivers/input/lirc/lirc_dev.h:140:
+}
+static inline void _lirc_buffer_write_n(struct lirc_buffer *buf,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1194: FILE: drivers/input/lirc/lirc_dev.h:148:
+}
+static inline void lirc_buffer_write_n(struct lirc_buffer *buf,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1208: FILE: drivers/input/lirc/lirc_dev.h:162:
+		_lirc_buffer_write_n(buf, orig+(space1*buf->chunk_size),
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1208: FILE: drivers/input/lirc/lirc_dev.h:162:
+		_lirc_buffer_write_n(buf, orig+(space1*buf->chunk_size),
 		                                      ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1209: FILE: drivers/input/lirc/lirc_dev.h:163:
+				     count-space1);
 				          ^

WARNING:SPACING: Unnecessary space before function pointer arguments
#1223: FILE: drivers/input/lirc/lirc_dev.h:177:
+	int (*add_to_buf) (void *data, struct lirc_buffer *buf);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1224: FILE: drivers/input/lirc/lirc_dev.h:178:
+	wait_queue_head_t* (*get_queue) (void *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1226: FILE: drivers/input/lirc/lirc_dev.h:180:
+	int (*set_use_inc) (void *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1227: FILE: drivers/input/lirc/lirc_dev.h:181:
+	void (*set_use_dec) (void *data);

WARNING:SPACING: Unnecessary space before function pointer arguments
#1228: FILE: drivers/input/lirc/lirc_dev.h:182:
+	int (*ioctl) (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#1228: FILE: drivers/input/lirc/lirc_dev.h:182:
+	int (*ioctl) (struct inode *, struct file *, unsigned int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1228: FILE: drivers/input/lirc/lirc_dev.h:182:
+	int (*ioctl) (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#1228: FILE: drivers/input/lirc/lirc_dev.h:182:
+	int (*ioctl) (struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1228: FILE: drivers/input/lirc/lirc_dev.h:182:
+	int (*ioctl) (struct inode *, struct file *, unsigned int,

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1230: FILE: drivers/input/lirc/lirc_dev.h:184:
+	struct file_operations *fops;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1234: FILE: drivers/input/lirc/lirc_dev.h:188:
+};
+/* name:

WARNING:TYPO_SPELLING: 'forwared' may be misspelled - perhaps 'forwarded'?
#1279: FILE: drivers/input/lirc/lirc_dev.h:233:
+ * forwared here if not NULL and only handled if it returns
    ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1290: FILE: drivers/input/lirc/lirc_dev.h:244:
+
+

WARNING:TYPO_SPELLING: 'contens' may be misspelled - perhaps 'contents'?
#1295: FILE: drivers/input/lirc/lirc_dev.h:249:
+ * contens of the structure pointed by p is copied
    ^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1297: FILE: drivers/input/lirc/lirc_dev.h:251:
+extern int lirc_register_plugin(struct lirc_plugin *p);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1300: FILE: drivers/input/lirc/lirc_dev.h:254:
+/* returns negative value on error or 0 if success
+*/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1301: FILE: drivers/input/lirc/lirc_dev.h:255:
+extern int lirc_unregister_plugin(int minor);

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1319: FILE: MAINTAINERS:2585:
+P:	Jarod Wilson
+M:	jarod@redhat.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#1321: FILE: MAINTAINERS:2587:
+P:	Christoph Bartelmus
+M:	lirc@bartelmus.de

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'L:' before 'W:'
#1323: FILE: MAINTAINERS:2589:
+W:	http://www.lirc.org/
+L:	lirc-list@lists.sourceforge.net

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230075.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 98 warnings, 67 checks, 1231 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000230075.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
