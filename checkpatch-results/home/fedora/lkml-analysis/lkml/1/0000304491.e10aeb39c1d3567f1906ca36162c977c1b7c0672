WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#16: 
Subject: [PATCH 124/148] include/asm-x86/system.h: checkpatch cleanups - formatting only

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: include/asm-x86/system.h:60:
+^I^I       ^I^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#86: FILE: include/asm-x86/system.h:60:
+^I^I       ^I^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/asm-x86/system.h:64:
+^I^I       ^I^I^I^I^I^I^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#90: FILE: include/asm-x86/system.h:64:
+^I^I       ^I^I^I^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#195: FILE: include/asm-x86/system.h:122:
+#define _set_base(addr, base)				\
+do {							\
+	unsigned long __pr;				\
+	asm volatile ("movw %%dx,%1\n\t"		\
+		      "rorl $16,%%edx\n\t"		\
+		      "movb %%dl,%2\n\t"		\
+		      "movb %%dh,%3"			\
+		      : "=&d" (__pr)			\
+		      : "m" (*((addr)+2)),		\
+			"m" (*((addr)+4)),		\
+			"m" (*((addr)+7)),		\
+			"0" (base));			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#203: FILE: include/asm-x86/system.h:130:
+		      : "m" (*((addr)+2)),		\
 		                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#204: FILE: include/asm-x86/system.h:131:
+			"m" (*((addr)+4)),		\
 			             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#205: FILE: include/asm-x86/system.h:132:
+			"m" (*((addr)+7)),		\
 			             ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#209: FILE: include/asm-x86/system.h:136:
+#define _set_limit(addr, limit)				\
+do {							\
+	unsigned long __lr;				\
+	asm volatile ("movw %%dx,%1\n\t"		\
+		      "rorl $16,%%edx\n\t"		\
+		      "movb %2,%%dh\n\t"		\
+		      "andb $0xf0,%%dh\n\t"		\
+		      "orb %%dh,%%dl\n\t"		\
+		      "movb %%dl,%2"			\
+		      : "=&d" (__lr)			\
+		      : "m" (*(addr)),			\
+			"m" (*((addr)+6)),		\
+			"0" (limit));			\
+} while (0)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#220: FILE: include/asm-x86/system.h:147:
+			"m" (*((addr)+6)),		\
 			             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#251: FILE: include/asm-x86/system.h:170:
+		     _ASM_EXTABLE(1b,3b)	\
 		                    ^

ERROR:SPACING: spaces required around that ':' (ctx:WxV)
#252: FILE: include/asm-x86/system.h:171:
+		     : :"r" (value), "r" (0))
 		       ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#259: FILE: include/asm-x86/system.h:177:
+#define savesegment(seg, value)				\
 	asm volatile("mov %%" #seg ",%0":"=rm" (value))

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#291: FILE: include/asm-x86/system.h:210:
+	asm volatile("mov %0,%%cr0": : "r" (val), "m" (__force_order));
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#305: FILE: include/asm-x86/system.h:222:
+	asm volatile("mov %0,%%cr2": : "r" (val), "m" (__force_order));
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#319: FILE: include/asm-x86/system.h:234:
+	asm volatile("mov %0,%%cr3": : "r" (val), "m" (__force_order));
 	                           ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#344: FILE: include/asm-x86/system.h:262:
+	asm volatile("mov %0,%%cr4": : "r" (val), "m" (__force_order));
 	                           ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#361: FILE: include/asm-x86/system.h:316:
+#define nop() asm volatile ("nop")

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'var' may be better as '(var)' to avoid precedence issues
#370: FILE: include/asm-x86/system.h:415:
+#define set_mb(var, value) do { (void)xchg(&var, value); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#370: FILE: include/asm-x86/system.h:415:
+#define set_mb(var, value) do { (void)xchg(&var, value); } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 5 warnings, 7 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000304491.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
