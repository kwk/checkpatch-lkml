WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
about the virtual adapter (subchannel). In order to collect this information

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#44: 
 /sys/class/scsi_host/host<n>/seconds_active
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#45: 
 /sys/class/scsi_host/host<n>/requests
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#46: 
 /sys/class/scsi_host/host<n>/megabytes
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#47: 
 /sys/class/scsi_host/host<n>/utilization
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#53: 
 /sys/class/scsi_device/<H:C:T:L>/device/cmd_latency
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#54: 
 /sys/class/scsi_device/<H:C:T:L>/device/read_latency
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#55: 
 /sys/class/scsi_device/<H:C:T:L>/device/write_latency
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#69: 
    struct scsi_host_template {
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#70: 
            ...
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#71: 
            .shost_attrs = zfcp_a_stats_attrs,
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#72: 
            .sdev_attrs  = zfcp_sysfs_sdev_attrs,
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#73: 
            ...
^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#74: 
    };
^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#209: FILE: drivers/s390/scsi/zfcp_fsf.h:330:
+} __attribute__ ((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#231: FILE: drivers/s390/scsi/zfcp_fsf.h:358:
+} __attribute__ ((packed));

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: drivers/s390/scsi/zfcp_scsi.c:808:
+#define ZFCP_DEFINE_LATENCY_ATTR(_name) ^I^I^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_name' - possible side-effects?
#293: FILE: drivers/s390/scsi/zfcp_scsi.c:808:
+#define ZFCP_DEFINE_LATENCY_ATTR(_name) 				\
+static ssize_t 								\
+zfcp_sysfs_unit_##_name##_latency_show(struct device *dev,		\
+				       struct device_attribute *attr,	\
+				       char *buf) {			\
+	struct scsi_device *sdev = to_scsi_device(dev);			\
+	struct zfcp_unit *unit = sdev->hostdata;			\
+	struct zfcp_latencies *lat = &unit->latencies;			\
+	struct zfcp_adapter *adapter = unit->port->adapter;		\
+									\
+	return sprintf(buf, "%u %u %u\n",				\
+		       lat->_name.fabric * adapter->timer_ticks / 1000, \
+		       lat->_name.channel * adapter->timer_ticks / 1000,\
+		       lat->_name.counter);				\
+}									\
+static DEVICE_ATTR(_name##_latency, S_IRUGO,				\
+		   zfcp_sysfs_unit_##_name##_latency_show, NULL);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_name' may be better as '(_name)' to avoid precedence issues
#293: FILE: drivers/s390/scsi/zfcp_scsi.c:808:
+#define ZFCP_DEFINE_LATENCY_ATTR(_name) 				\
+static ssize_t 								\
+zfcp_sysfs_unit_##_name##_latency_show(struct device *dev,		\
+				       struct device_attribute *attr,	\
+				       char *buf) {			\
+	struct scsi_device *sdev = to_scsi_device(dev);			\
+	struct zfcp_unit *unit = sdev->hostdata;			\
+	struct zfcp_latencies *lat = &unit->latencies;			\
+	struct zfcp_adapter *adapter = unit->port->adapter;		\
+									\
+	return sprintf(buf, "%u %u %u\n",				\
+		       lat->_name.fabric * adapter->timer_ticks / 1000, \
+		       lat->_name.channel * adapter->timer_ticks / 1000,\
+		       lat->_name.counter);				\
+}									\
+static DEVICE_ATTR(_name##_latency, S_IRUGO,				\
+		   zfcp_sysfs_unit_##_name##_latency_show, NULL);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#293: FILE: drivers/s390/scsi/zfcp_scsi.c:808:
+#define ZFCP_DEFINE_LATENCY_ATTR(_name) 				\
+static ssize_t 								\
+zfcp_sysfs_unit_##_name##_latency_show(struct device *dev,		\
+				       struct device_attribute *attr,	\
+				       char *buf) {			\
+	struct scsi_device *sdev = to_scsi_device(dev);			\
+	struct zfcp_unit *unit = sdev->hostdata;			\
+	struct zfcp_latencies *lat = &unit->latencies;			\
+	struct zfcp_adapter *adapter = unit->port->adapter;		\
+									\
+	return sprintf(buf, "%u %u %u\n",				\
+		       lat->_name.fabric * adapter->timer_ticks / 1000, \
+		       lat->_name.channel * adapter->timer_ticks / 1000,\
+		       lat->_name.counter);				\
+}									\
+static DEVICE_ATTR(_name##_latency, S_IRUGO,				\
+		   zfcp_sysfs_unit_##_name##_latency_show, NULL);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: drivers/s390/scsi/zfcp_scsi.c:809:
+static ssize_t ^I^I^I^I^I^I^I^I\$

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#308: FILE: drivers/s390/scsi/zfcp_scsi.c:823:
+static DEVICE_ATTR(_name##_latency, S_IRUGO,				\

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#328: FILE: drivers/s390/scsi/zfcp_scsi.c:866:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#332: FILE: drivers/s390/scsi/zfcp_scsi.c:870:
+	struct Scsi_Host *scsi_host = class_to_shost(cdev);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPLIT_STRING: quoted string split across lines
#340: FILE: drivers/s390/scsi/zfcp_scsi.c:878:
+		ZFCP_LOG_NORMAL("error: Enhanced measurement feature not "
+				"supported");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qtcb_port)...) over kzalloc(sizeof(struct fsf_qtcb_bottom_port)...)
#344: FILE: drivers/s390/scsi/zfcp_scsi.c:882:
+	qtcb_port = kzalloc(sizeof(struct fsf_qtcb_bottom_port), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#357: FILE: drivers/s390/scsi/zfcp_scsi.c:895:
+CLASS_DEVICE_ATTR(utilization, S_IRUGO, zfcp_sysfs_adapter_utilization_show,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#358: FILE: drivers/s390/scsi/zfcp_scsi.c:896:
+CLASS_DEVICE_ATTR(utilization, S_IRUGO, zfcp_sysfs_adapter_utilization_show,
+		   NULL);

WARNING:SPLIT_STRING: quoted string split across lines
#370: FILE: drivers/s390/scsi/zfcp_scsi.c:908:
+		ZFCP_LOG_NORMAL("error: Enhanced measurement feature not "
+				"supported");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*qtcb_config)...) over kzalloc(sizeof(struct fsf_qtcb_bottom_config)...)
#374: FILE: drivers/s390/scsi/zfcp_scsi.c:912:
+	*qtcb_config = kzalloc(sizeof(struct fsf_qtcb_bottom_config),

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#400: FILE: drivers/s390/scsi/zfcp_scsi.c:938:
+static CLASS_DEVICE_ATTR(requests, S_IRUGO, zfcp_sysfs_adapter_request_show,

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#420: FILE: drivers/s390/scsi/zfcp_scsi.c:958:
+static CLASS_DEVICE_ATTR(megabytes, S_IRUGO, zfcp_sysfs_adapter_mb_show, NULL);

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#437: FILE: drivers/s390/scsi/zfcp_scsi.c:975:
+static CLASS_DEVICE_ATTR(seconds_active, S_IRUGO,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#440: FILE: drivers/s390/scsi/zfcp_scsi.c:978:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362719.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 21 checks, 329 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000362719.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
