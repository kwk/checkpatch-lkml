WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#86: FILE: arch/blackfin/include/asm/atomic.h:16:
+typedef struct { volatile int counter; } atomic_t;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#97: FILE: arch/blackfin/include/asm/atomic.h:25:
+asmlinkage int __raw_uncached_fetch_asm(const volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#99: FILE: arch/blackfin/include/asm/atomic.h:27:
+asmlinkage int __raw_atomic_update_asm(volatile int *ptr, int value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#101: FILE: arch/blackfin/include/asm/atomic.h:29:
+asmlinkage int __raw_atomic_clear_asm(volatile int *ptr, int value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#103: FILE: arch/blackfin/include/asm/atomic.h:31:
+asmlinkage int __raw_atomic_set_asm(volatile int *ptr, int value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#105: FILE: arch/blackfin/include/asm/atomic.h:33:
+asmlinkage int __raw_atomic_xor_asm(volatile int *ptr, int value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#107: FILE: arch/blackfin/include/asm/atomic.h:35:
+asmlinkage int __raw_atomic_test_asm(const volatile int *ptr, int value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#129: FILE: arch/blackfin/include/asm/atomic.h:57:
+static inline void atomic_inc(volatile atomic_t *v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#134: FILE: arch/blackfin/include/asm/atomic.h:62:
+static inline void atomic_dec(volatile atomic_t *v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#201: FILE: arch/blackfin/include/asm/atomic.h:138:
+static inline void atomic_inc(volatile atomic_t *v)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#223: FILE: arch/blackfin/include/asm/atomic.h:147:
+static inline void atomic_dec(volatile atomic_t *v)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#258: FILE: arch/blackfin/include/asm/atomic.h:189:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'u' - possible side-effects?
#258: FILE: arch/blackfin/include/asm/atomic.h:189:
+#define atomic_add_unless(v, a, u)				\
+({								\
+	int c, old;						\
+	c = atomic_read(v);					\
+	while (c != (u) && (old = atomic_cmpxchg((v), c, c + (a))) != c) \
+		c = old;					\
+	c != (u);						\
+})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#279: FILE: arch/blackfin/include/asm/bfin-global.h:50:
+extern void bfin_setup_caches(unsigned int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#280: FILE: arch/blackfin/include/asm/bfin-global.h:51:
+extern void bfin_setup_cpudata(unsigned int cpu);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#315: FILE: arch/blackfin/include/asm/bitops.h:26:
+asmlinkage int __raw_bit_set_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#317: FILE: arch/blackfin/include/asm/bitops.h:28:
+asmlinkage int __raw_bit_clear_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#319: FILE: arch/blackfin/include/asm/bitops.h:30:
+asmlinkage int __raw_bit_toggle_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#321: FILE: arch/blackfin/include/asm/bitops.h:32:
+asmlinkage int __raw_bit_test_set_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#323: FILE: arch/blackfin/include/asm/bitops.h:34:
+asmlinkage int __raw_bit_test_clear_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#325: FILE: arch/blackfin/include/asm/bitops.h:36:
+asmlinkage int __raw_bit_test_toggle_asm(volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#327: FILE: arch/blackfin/include/asm/bitops.h:38:
+asmlinkage int __raw_bit_test_asm(const volatile unsigned long *addr, int nr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#329: FILE: arch/blackfin/include/asm/bitops.h:40:
+static inline void set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#334: FILE: arch/blackfin/include/asm/bitops.h:42:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: arch/blackfin/include/asm/bitops.h:43:
+	volatile unsigned long *a = addr + (nr >> 5);
+	__raw_bit_set_asm(a, nr & 0x1f);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#343: FILE: arch/blackfin/include/asm/bitops.h:46:
+static inline void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#345: FILE: arch/blackfin/include/asm/bitops.h:48:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#346: FILE: arch/blackfin/include/asm/bitops.h:49:
+	volatile unsigned long *a = addr + (nr >> 5);
+	__raw_bit_clear_asm(a, nr & 0x1f);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#350: FILE: arch/blackfin/include/asm/bitops.h:52:
+static inline void change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#354: FILE: arch/blackfin/include/asm/bitops.h:54:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#355: FILE: arch/blackfin/include/asm/bitops.h:55:
+	volatile unsigned long *a = addr + (nr >> 5);
+	__raw_bit_toggle_asm(a, nr & 0x1f);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#361: FILE: arch/blackfin/include/asm/bitops.h:58:
+static inline int test_bit(int nr, const volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#363: FILE: arch/blackfin/include/asm/bitops.h:60:
+	volatile const unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#364: FILE: arch/blackfin/include/asm/bitops.h:61:
+	volatile const unsigned long *a = addr + (nr >> 5);
+	return __raw_bit_test_asm(a, nr & 0x1f) != 0;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#372: FILE: arch/blackfin/include/asm/bitops.h:64:
+static inline int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#374: FILE: arch/blackfin/include/asm/bitops.h:66:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: arch/blackfin/include/asm/bitops.h:67:
+	volatile unsigned long *a = addr + (nr >> 5);
+	return __raw_bit_test_set_asm(a, nr & 0x1f);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#379: FILE: arch/blackfin/include/asm/bitops.h:70:
+static inline int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#381: FILE: arch/blackfin/include/asm/bitops.h:72:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#382: FILE: arch/blackfin/include/asm/bitops.h:73:
+	volatile unsigned long *a = addr + (nr >> 5);
+	return __raw_bit_test_clear_asm(a, nr & 0x1f);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#385: FILE: arch/blackfin/include/asm/bitops.h:76:
+static inline int test_and_change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#387: FILE: arch/blackfin/include/asm/bitops.h:78:
+	volatile unsigned long *a = addr + (nr >> 5);

WARNING:LINE_SPACING: Missing a blank line after declarations
#388: FILE: arch/blackfin/include/asm/bitops.h:79:
+	volatile unsigned long *a = addr + (nr >> 5);
+	return __raw_bit_test_toggle_asm(a, nr & 0x1f);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#395: FILE: arch/blackfin/include/asm/bitops.h:86:
+static inline void set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#409: FILE: arch/blackfin/include/asm/bitops.h:98:
+static inline void clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#423: FILE: arch/blackfin/include/asm/bitops.h:110:
+static inline void change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#442: FILE: arch/blackfin/include/asm/bitops.h:122:
+static inline int test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#451: FILE: arch/blackfin/include/asm/bitops.h:138:
+static inline int test_and_clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#469: FILE: arch/blackfin/include/asm/bitops.h:154:
+static inline int test_and_change_bit(int nr, volatile unsigned long *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#489: FILE: arch/blackfin/include/asm/bitops.h:173:
+#define test_bit(nr,addr) \
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'nr' - possible side-effects?
#489: FILE: arch/blackfin/include/asm/bitops.h:173:
+#define test_bit(nr,addr) \
+(__builtin_constant_p(nr) ? \
+ __constant_test_bit((nr), (addr)) : \
+ __test_bit((nr), (addr)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'addr' - possible side-effects?
#489: FILE: arch/blackfin/include/asm/bitops.h:173:
+#define test_bit(nr,addr) \
+(__builtin_constant_p(nr) ? \
+ __constant_test_bit((nr), (addr)) : \
+ __test_bit((nr), (addr)))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: arch/blackfin/include/asm/bitops.h:175:
+ __constant_test_bit((nr), (addr)) : \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#492: FILE: arch/blackfin/include/asm/bitops.h:176:
+ __test_bit((nr), (addr)))$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#502: FILE: arch/blackfin/include/asm/bitops.h:186:
+static inline void __set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#512: FILE: arch/blackfin/include/asm/bitops.h:196:
+static inline void __clear_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#522: FILE: arch/blackfin/include/asm/bitops.h:206:
+static inline void __change_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#532: FILE: arch/blackfin/include/asm/bitops.h:216:
+static inline int __test_and_set_bit(int nr, volatile unsigned long *addr)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#546: FILE: arch/blackfin/include/asm/bitops.h:228:
+static inline int __test_and_clear_bit(int nr, volatile unsigned long *addr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#564: FILE: arch/blackfin/include/asm/bitops.h:241:
+static inline int __test_and_change_bit(int nr,
 					    volatile unsigned long *addr)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: arch/blackfin/include/asm/cache.h:37:
+    !defined(CONFIG_BFIN_CACHE_COHERENT) && \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: arch/blackfin/include/asm/cache.h:38:
+    defined(CONFIG_BFIN_DCACHE)$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#637: FILE: arch/blackfin/include/asm/cache.h:48:
+}
+static inline void smp_check_barrier(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#646: FILE: arch/blackfin/include/asm/cache.h:57:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#656: FILE: arch/blackfin/include/asm/cacheflush.h:38:
+extern void blackfin_invalidate_entire_dcache(void);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dst' - possible side-effects?
#696: FILE: arch/blackfin/include/asm/cacheflush.h:79:
+#define copy_to_user_page(vma, page, vaddr, dst, src, len)		\
+do { memcpy(dst, src, len);						\
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));	\
+     flush_icache_range_others((unsigned long) (dst), (unsigned long) (dst) + (len));\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'len' - possible side-effects?
#696: FILE: arch/blackfin/include/asm/cacheflush.h:79:
+#define copy_to_user_page(vma, page, vaddr, dst, src, len)		\
+do { memcpy(dst, src, len);						\
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));	\
+     flush_icache_range_others((unsigned long) (dst), (unsigned long) (dst) + (len));\
 } while (0)

CHECK:SPACING: No space is necessary after a cast
#698: FILE: arch/blackfin/include/asm/cacheflush.h:81:
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));	\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: arch/blackfin/include/asm/cacheflush.h:81:
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: arch/blackfin/include/asm/cacheflush.h:81:
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));	\

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#698: FILE: arch/blackfin/include/asm/cacheflush.h:81:
+     flush_icache_range((unsigned) (dst), (unsigned) (dst) + (len));	\

CHECK:SPACING: No space is necessary after a cast
#699: FILE: arch/blackfin/include/asm/cacheflush.h:82:
+     flush_icache_range_others((unsigned long) (dst), (unsigned long) (dst) + (len));\

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: arch/blackfin/include/asm/cacheflush.h:82:
+     flush_icache_range_others((unsigned long) (dst), (unsigned long) (dst) + (len));\$

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#739: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#744: FILE: arch/blackfin/include/asm/cpu.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#745: FILE: arch/blackfin/include/asm/cpu.h:2:
+ * File:         arch/blackfin/include/asm/cpu.h.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#763: FILE: arch/blackfin/include/asm/cpu.h:20:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#806: FILE: arch/blackfin/include/asm/mutex-dec.h:1:
+/*

WARNING:MEMORY_BARRIER: memory barrier without comment
#831: FILE: arch/blackfin/include/asm/mutex-dec.h:26:
+		smp_mb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#847: FILE: arch/blackfin/include/asm/mutex-dec.h:42:
+	if (unlikely(atomic_dec_return(count) < 0))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#849: FILE: arch/blackfin/include/asm/mutex-dec.h:44:
+		return fail_fn(count);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#849: FILE: arch/blackfin/include/asm/mutex-dec.h:44:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#850: FILE: arch/blackfin/include/asm/mutex-dec.h:45:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#871: FILE: arch/blackfin/include/asm/mutex-dec.h:66:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#908: FILE: arch/blackfin/include/asm/mutex-dec.h:103:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#939: FILE: arch/blackfin/include/asm/mutex.h:22:
+		smp_mb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#945: FILE: arch/blackfin/include/asm/mutex.h:28:
+	if (unlikely(atomic_dec_return(count) < 0))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#947: FILE: arch/blackfin/include/asm/mutex.h:30:
+		return fail_fn(count);
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#947: FILE: arch/blackfin/include/asm/mutex.h:30:
+	else {

WARNING:MEMORY_BARRIER: memory barrier without comment
#948: FILE: arch/blackfin/include/asm/mutex.h:31:
+		smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#956: FILE: arch/blackfin/include/asm/mutex.h:39:
+	smp_mb();

WARNING:MEMORY_BARRIER: memory barrier without comment
#978: FILE: arch/blackfin/include/asm/mutex.h:61:
+		smp_mb();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#996: FILE: arch/blackfin/include/asm/pda.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#997: FILE: arch/blackfin/include/asm/pda.h:2:
+ * File:         arch/blackfin/include/asm/pda.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1015: FILE: arch/blackfin/include/asm/pda.h:20:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1095: FILE: arch/blackfin/include/asm/processor.h:109:
+#define cpu_relax()    ^Ismp_mb()$

WARNING:MEMORY_BARRIER: memory barrier without comment
#1095: FILE: arch/blackfin/include/asm/processor.h:109:
+#define cpu_relax()    	smp_mb()

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1118: FILE: arch/blackfin/include/asm/rwlock.h:1:
+#ifndef _ASM_BLACKFIN_RWLOCK_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1130: FILE: arch/blackfin/include/asm/smp.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1131: FILE: arch/blackfin/include/asm/smp.h:2:
+ * File:         arch/blackfin/include/asm/smp.h

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1149: FILE: arch/blackfin/include/asm/smp.h:20:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#1181: FILE: arch/blackfin/include/asm/spinlock.h:4:
+#include <asm/atomic.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1184: FILE: arch/blackfin/include/asm/spinlock.h:6:
+asmlinkage int __raw_spin_is_locked_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1185: FILE: arch/blackfin/include/asm/spinlock.h:7:
+asmlinkage void __raw_spin_lock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1186: FILE: arch/blackfin/include/asm/spinlock.h:8:
+asmlinkage int __raw_spin_trylock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1187: FILE: arch/blackfin/include/asm/spinlock.h:9:
+asmlinkage void __raw_spin_unlock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1188: FILE: arch/blackfin/include/asm/spinlock.h:10:
+asmlinkage void __raw_read_lock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1189: FILE: arch/blackfin/include/asm/spinlock.h:11:
+asmlinkage int __raw_read_trylock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1190: FILE: arch/blackfin/include/asm/spinlock.h:12:
+asmlinkage void __raw_read_unlock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1191: FILE: arch/blackfin/include/asm/spinlock.h:13:
+asmlinkage void __raw_write_lock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1192: FILE: arch/blackfin/include/asm/spinlock.h:14:
+asmlinkage int __raw_write_trylock_asm(volatile int *ptr);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1193: FILE: arch/blackfin/include/asm/spinlock.h:15:
+asmlinkage void __raw_write_unlock_asm(volatile int *ptr);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1263: FILE: arch/blackfin/include/asm/spinlock.h:85:
+#define _raw_spin_relax(lock)  ^Icpu_relax()$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1274: FILE: arch/blackfin/include/asm/spinlock_types.h:1:
+#ifndef __ASM_SPINLOCK_TYPES_H

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1283: FILE: arch/blackfin/include/asm/spinlock_types.h:10:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1284: FILE: arch/blackfin/include/asm/spinlock_types.h:11:
+	volatile unsigned int lock;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1289: FILE: arch/blackfin/include/asm/spinlock_types.h:16:
+typedef struct {

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1290: FILE: arch/blackfin/include/asm/spinlock_types.h:17:
+	volatile unsigned int lock;

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#1305: FILE: arch/blackfin/include/asm/system.h:41:
+#include <asm/processor.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1337: FILE: arch/blackfin/include/asm/system.h:71:
+#define local_irq_enable() \
+	__asm__ __volatile__( \
+		"sti %0;" \
+		: \
+		: "d" (irq_flags) \
+	)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1358: FILE: arch/blackfin/include/asm/system.h:143:
+asmlinkage unsigned long __raw_xchg_1_asm(volatile void *ptr, unsigned long value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1359: FILE: arch/blackfin/include/asm/system.h:144:
+asmlinkage unsigned long __raw_xchg_2_asm(volatile void *ptr, unsigned long value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1360: FILE: arch/blackfin/include/asm/system.h:145:
+asmlinkage unsigned long __raw_xchg_4_asm(volatile void *ptr, unsigned long value);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1361: FILE: arch/blackfin/include/asm/system.h:146:
+asmlinkage unsigned long __raw_cmpxchg_1_asm(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1362: FILE: arch/blackfin/include/asm/system.h:147:
+asmlinkage unsigned long __raw_cmpxchg_1_asm(volatile void *ptr,
+					unsigned long new, unsigned long old);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1363: FILE: arch/blackfin/include/asm/system.h:148:
+asmlinkage unsigned long __raw_cmpxchg_2_asm(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1364: FILE: arch/blackfin/include/asm/system.h:149:
+asmlinkage unsigned long __raw_cmpxchg_2_asm(volatile void *ptr,
+					unsigned long new, unsigned long old);

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1365: FILE: arch/blackfin/include/asm/system.h:150:
+asmlinkage unsigned long __raw_cmpxchg_4_asm(volatile void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1366: FILE: arch/blackfin/include/asm/system.h:151:
+asmlinkage unsigned long __raw_cmpxchg_4_asm(volatile void *ptr,
+					unsigned long new, unsigned long old);

WARNING:MEMORY_BARRIER: memory barrier without comment
#1369: FILE: arch/blackfin/include/asm/system.h:154:
+# define smp_mb()	do { barrier(); smp_check_barrier(); smp_mark_barrier(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1370: FILE: arch/blackfin/include/asm/system.h:155:
+# define smp_rmb()	do { barrier(); smp_check_barrier(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1371: FILE: arch/blackfin/include/asm/system.h:156:
+# define smp_wmb()	do { barrier(); smp_mark_barrier(); } while (0)

WARNING:MEMORY_BARRIER: memory barrier without comment
#1373: FILE: arch/blackfin/include/asm/system.h:158:
+# define smp_mb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#1374: FILE: arch/blackfin/include/asm/system.h:159:
+# define smp_rmb()	barrier()

WARNING:MEMORY_BARRIER: memory barrier without comment
#1375: FILE: arch/blackfin/include/asm/system.h:160:
+# define smp_wmb()	barrier()

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1378: FILE: arch/blackfin/include/asm/system.h:163:
+static inline unsigned long __xchg(unsigned long x, volatile void *ptr,

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#1403: FILE: arch/blackfin/include/asm/system.h:188:
+static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1422: FILE: arch/blackfin/include/asm/system.h:207:
+}
+#define cmpxchg(ptr, o, n) \

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1422: FILE: arch/blackfin/include/asm/system.h:207:
+#define cmpxchg(ptr, o, n) \
+	((__typeof__(*(ptr)))__cmpxchg((ptr), (unsigned long)(o), \
+		(unsigned long)(n), sizeof(*(ptr))))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#1450: FILE: arch/blackfin/include/asm/system.h:272:
+#define xchg(ptr, x) ((__typeof__(*(ptr)))__xchg((unsigned long)(x), (ptr), sizeof(*(ptr))))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1924: FILE: arch/blackfin/mach-common/smp.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1944: FILE: arch/blackfin/mach-common/smp.c:21:
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/atomic.h> instead of <asm/atomic.h>
#1961: FILE: arch/blackfin/mach-common/smp.c:38:
+#include <asm/atomic.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#1962: FILE: arch/blackfin/mach-common/smp.c:39:
+#include <asm/cacheflush.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1963: FILE: arch/blackfin/mach-common/smp.c:40:
+#include <asm/mmu_context.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1964: FILE: arch/blackfin/mach-common/smp.c:41:
+#include <asm/pgtable.h>

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#1966: FILE: arch/blackfin/mach-common/smp.c:43:
+#include <asm/processor.h>

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".l2.bss") over __attribute__((__section__(".l2.bss")))
#1971: FILE: arch/blackfin/mach-common/smp.c:48:
+struct corelock_slot corelock __attribute__ ((__section__(".l2.bss")));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1994: FILE: arch/blackfin/mach-common/smp.c:71:
+
+

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#2015: FILE: arch/blackfin/mach-common/smp.c:92:
+	spinlock_t lock;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2024: FILE: arch/blackfin/mach-common/smp.c:101:
+	printk(KERN_CRIT "CPU%u: stopping\n", cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2052: FILE: arch/blackfin/mach-common/smp.c:129:
+	void *info;
+	func = msg->call_struct.func;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2080: FILE: arch/blackfin/mach-common/smp.c:157:
+			 * return_from_int. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2091: FILE: arch/blackfin/mach-common/smp.c:168:
+			printk(KERN_CRIT "CPU%u: Unknown IPI message \

WARNING:LINE_CONTINUATIONS: Avoid line continuations in quoted strings
#2091: FILE: arch/blackfin/mach-common/smp.c:168:
+			printk(KERN_CRIT "CPU%u: Unknown IPI message \

WARNING:LINE_SPACING: Missing a blank line after declarations
#2105: FILE: arch/blackfin/mach-common/smp.c:182:
+	struct ipi_message_queue *msg_queue;
+	for_each_possible_cpu(cpu) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2144: FILE: arch/blackfin/mach-common/smp.c:221:
+			blackfin_dcache_invalidate_range(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2154: FILE: arch/blackfin/mach-common/smp.c:231:
+int smp_call_function_single(int cpuid, void (*func) (void *info), void *info,
+				int wait)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2184: FILE: arch/blackfin/mach-common/smp.c:261:
+			blackfin_dcache_invalidate_range(

WARNING:RETURN_VOID: void function return statements are not generally useful
#2214: FILE: arch/blackfin/mach-common/smp.c:291:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2242: FILE: arch/blackfin/mach-common/smp.c:319:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2251: FILE: arch/blackfin/mach-common/smp.c:328:
+		printk(KERN_ERR "CPU%u: fork() failed\n", cpu);

WARNING:MEMORY_BARRIER: memory barrier without comment
#2256: FILE: arch/blackfin/mach-common/smp.c:333:
+	smp_wmb();

CHECK:BRACES: braces {} should be used on all arms of this statement
#2260: FILE: arch/blackfin/mach-common/smp.c:337:
+	if (ret) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#2262: FILE: arch/blackfin/mach-common/smp.c:339:
+		printk(KERN_CRIT "CPU%u: processor failed to boot (%d)\n", cpu, ret);

CHECK:BRACES: Unbalanced braces around else statement
#2264: FILE: arch/blackfin/mach-common/smp.c:341:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2290: FILE: arch/blackfin/mach-common/smp.c:367:
+	 * programmed by the boot CPU.  */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2313: FILE: arch/blackfin/mach-common/smp.c:390:
+		printk(KERN_EMERG "CoreB Recovering from DOUBLE FAULT event\n");

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#2314: FILE: arch/blackfin/mach-common/smp.c:391:
+#ifdef CONFIG_DEBUG_DOUBLEFAULT
+		printk(KERN_EMERG " While handling exception (EXCAUSE = 0x%x) at %pF\n",
+			(int)init_saved_seqstat_coreb & SEQSTAT_EXCAUSE, init_saved_retx_coreb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#2315: FILE: arch/blackfin/mach-common/smp.c:392:
+		printk(KERN_EMERG " While handling exception (EXCAUSE = 0x%x) at %pF\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2316: FILE: arch/blackfin/mach-common/smp.c:393:
+		printk(KERN_EMERG " While handling exception (EXCAUSE = 0x%x) at %pF\n",
+			(int)init_saved_seqstat_coreb & SEQSTAT_EXCAUSE, init_saved_retx_coreb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2317: FILE: arch/blackfin/mach-common/smp.c:394:
+		printk(KERN_NOTICE "   DCPLB_FAULT_ADDR: %pF\n", init_saved_dcplb_fault_addr_coreb);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#2317: FILE: arch/blackfin/mach-common/smp.c:394:
+		printk(KERN_NOTICE "   DCPLB_FAULT_ADDR: %pF\n", init_saved_dcplb_fault_addr_coreb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2318: FILE: arch/blackfin/mach-common/smp.c:395:
+		printk(KERN_NOTICE "   ICPLB_FAULT_ADDR: %pF\n", init_saved_icplb_fault_addr_coreb);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#2318: FILE: arch/blackfin/mach-common/smp.c:395:
+		printk(KERN_NOTICE "   ICPLB_FAULT_ADDR: %pF\n", init_saved_icplb_fault_addr_coreb);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#2319: FILE: arch/blackfin/mach-common/smp.c:396:
+#endif
+		printk(KERN_NOTICE " The instruction at %pF caused a double exception\n",
+			init_retx_coreb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2320: FILE: arch/blackfin/mach-common/smp.c:397:
+		printk(KERN_NOTICE " The instruction at %pF caused a double exception\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2321: FILE: arch/blackfin/mach-common/smp.c:398:
+		printk(KERN_NOTICE " The instruction at %pF caused a double exception\n",
+			init_retx_coreb);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2339: FILE: arch/blackfin/mach-common/smp.c:416:
+	BUG_ON(current->mm);	/* Can't be, but better be safe than sorry. */

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2371: FILE: arch/blackfin/mach-common/smp.c:448:
+	printk(KERN_INFO "SMP: Total of %d processors activated "

WARNING:SPLIT_STRING: quoted string split across lines
#2372: FILE: arch/blackfin/mach-common/smp.c:449:
+	printk(KERN_INFO "SMP: Total of %d processors activated "
+	       "(%lu.%02lu BogoMIPS).\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2374: FILE: arch/blackfin/mach-common/smp.c:451:
+	       bogosum / (500000/HZ),
 	                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2375: FILE: arch/blackfin/mach-common/smp.c:452:
+	       (bogosum / (5000/HZ)) % 100);
 	                       ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2384: FILE: arch/blackfin/mach-common/smp.c:461:
+		printk(KERN_WARNING "SMP: failed to run I-cache flush request on other CPUs\n");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".l2.bss") over __attribute__((__section__(".l2.bss")))
#2389: FILE: arch/blackfin/mach-common/smp.c:466:
+unsigned long barrier_mask __attribute__ ((__section__(".l2.bss")));

WARNING:LINE_SPACING: Missing a blank line after declarations
#2394: FILE: arch/blackfin/mach-common/smp.c:471:
+	unsigned int cpu = get_cpu();
+	blackfin_invalidate_entire_dcache();

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 138 warnings, 42 checks, 2155 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000202636.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
