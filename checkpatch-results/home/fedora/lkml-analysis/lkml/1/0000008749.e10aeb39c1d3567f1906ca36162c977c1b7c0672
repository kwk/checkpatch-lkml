WARNING:SPLIT_STRING: quoted string split across lines
#162: FILE: tools/perf/builtin-probe.c:181:
+		"[EVENT=]FUNC[+OFF|%return|:RL|;PT][@SRC]|SRC:AL|SRC;PT"
+		" [ARG ...]",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#235: FILE: tools/perf/util/probe-event.c:173:
+				semantic_error("There is non-digit char"
+					       " in line number.");

WARNING:SPLIT_STRING: quoted string split across lines
#272: FILE: tools/perf/util/probe-event.c:211:
+		semantic_error("File always requires line number or "
+			       "lazy pattern.");

WARNING:SPLIT_STRING: quoted string split across lines
#284: FILE: tools/perf/util/probe-event.c:221:
+		semantic_error("Offset/Line/Lazy pattern can't be used with "
+			       "return probe.");

WARNING:SPACING: space prohibited before semicolon
#335: FILE: tools/perf/util/probe-finder.c:122:
+			return ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ln"
#342: FILE: tools/perf/util/probe-finder.c:129:
+	DIE_IF(ln == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#371: FILE: tools/perf/util/probe-finder.c:158:
+	struct line_node *ln;
+	while (!list_empty(head)) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Die>
#381: FILE: tools/perf/util/probe-finder.c:168:
+static const char *cu_find_realpath(Dwarf_Die *cu_die, const char *fname)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fbuf"
#433: FILE: tools/perf/util/probe-finder.c:509:
+	DIE_IF(fbuf == NULL);

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Lines>
#456: FILE: tools/perf/util/probe-finder.c:532:
+	Dwarf_Lines *lines;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Line>
#457: FILE: tools/perf/util/probe-finder.c:533:
+	Dwarf_Line *line;

CHECK:CAMELCASE: Avoid CamelCase: <Dwarf_Addr>
#459: FILE: tools/perf/util/probe-finder.c:535:
+	Dwarf_Addr addr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#515: FILE: tools/perf/util/probe-finder.c:587:
+	if (pp->lazy_line)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#517: FILE: tools/perf/util/probe-finder.c:589:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#547: FILE: tools/perf/util/probe-finder.c:620:
+		if (pp->lazy_line)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#549: FILE: tools/perf/util/probe-finder.c:622:
+		else {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 6 warnings, 10 checks, 634 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000008749.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
