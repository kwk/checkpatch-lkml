CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#38: 
From: Daniel Glöckner <dg@emlix.com>
               ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#58: 
Signed-off-by: Daniel Glöckner <dg@emlix.com>
                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#175: FILE: drivers/gpio/gpiolib.c:326:
+static int gpio_setup_irq(struct gpio_desc *desc, struct device *dev,
+		unsigned long gpio_flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: drivers/gpio/gpiolib.c:370:
+				ret = idr_get_new_above(&pdesc_idr,
+						pdesc, 1, &id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: drivers/gpio/gpiolib.c:393:
+	ret = request_irq(irq, gpio_sysfs_irq, irq_flags,
+			"gpiolib", &pdesc->work);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#271: FILE: drivers/gpio/gpiolib.c:422:
+static ssize_t gpio_edge_show(struct device *dev,
+		struct device_attribute *attr, char *buf)

CHECK:BRACES: braces {} should be used on all arms of this statement
#278: FILE: drivers/gpio/gpiolib.c:429:
+	if (!test_bit(FLAG_EXPORT, &desc->flags))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#280: FILE: drivers/gpio/gpiolib.c:431:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: drivers/gpio/gpiolib.c:449:
+static ssize_t gpio_edge_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#312: FILE: drivers/gpio/gpiolib.c:463:
+	if (!test_bit(FLAG_EXPORT, &desc->flags))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#314: FILE: drivers/gpio/gpiolib.c:465:
+	else {

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'gpio_edge_show' to 'edge_show' 'gpio_edge_store' to 'edge_store'
#323: FILE: drivers/gpio/gpiolib.c:474:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#345: FILE: drivers/gpio/gpiolib.c:673:
+			if (!status && gpio_to_irq(gpio) >= 0
+					&& (direction_may_change

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#346: FILE: drivers/gpio/gpiolib.c:674:
+					&& (direction_may_change
+						|| !test_bit(FLAG_IS_OUT,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#349: FILE: drivers/gpio/gpiolib.c:677:
+				status = device_create_file(dev,
+						&dev_attr_edge);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 14 checks, 287 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000078774.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
