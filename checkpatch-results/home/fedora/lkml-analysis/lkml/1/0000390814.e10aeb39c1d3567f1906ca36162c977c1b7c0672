CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: include/linux/rcupreempt.h:62:
+extern void rcu_offline_cpu_rt(int cpu);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: include/linux/rcupreempt.h:63:
+extern void rcu_online_cpu_rt(int cpu);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'srclist' - possible side-effects?
#158: FILE: kernel/rcupreempt.c:590:
+#define rcu_offline_cpu_rt_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'srctail' - possible side-effects?
#158: FILE: kernel/rcupreempt.c:590:
+#define rcu_offline_cpu_rt_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dsttail' - possible side-effects?
#158: FILE: kernel/rcupreempt.c:590:
+#define rcu_offline_cpu_rt_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dsttail' may be better as '(dsttail)' to avoid precedence issues
#158: FILE: kernel/rcupreempt.c:590:
+#define rcu_offline_cpu_rt_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "srclist"
#160: FILE: kernel/rcupreempt.c:592:
+		if (srclist != NULL) { \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:TRAILING_WHITESPACE: trailing whitespace
#166: FILE: kernel/rcupreempt.c:598:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#167: FILE: kernel/rcupreempt.c:599:
+	
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#195: FILE: kernel/rcupreempt.c:627:
+			   /*  seen -after- acknowledgement. */
 			                    ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#218: FILE: kernel/rcupreempt.c:650:
+void __devinit rcu_online_cpu_rt(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#233: FILE: kernel/rcupreempt.c:665:
+void __devinit rcu_online_cpu_rt(int cpu)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 3 warnings, 8 checks, 172 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000390814.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
