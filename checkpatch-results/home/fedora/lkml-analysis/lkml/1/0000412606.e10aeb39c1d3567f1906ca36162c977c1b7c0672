WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#175: FILE: include/linux/tasklet.h:1:
+#ifndef _LINUX_TASKLET_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#179: FILE: include/linux/tasklet.h:5:
+/* Tasklets --- multithreaded analogue of BHs.
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:TYPO_SPELLING: 'excecution' may be misspelled - perhaps 'execution'?
#189: FILE: include/linux/tasklet.h:15:
+   * If the tasklet is already scheduled, but its excecution is still not
                                                   ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#199: FILE: include/linux/tasklet.h:25:
+struct tasklet_struct
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#203: FILE: include/linux/tasklet.h:29:
+	void (*func)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#213: FILE: include/linux/tasklet.h:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#215: FILE: include/linux/tasklet.h:41:
+enum
+{

ERROR:TRAILING_WHITESPACE: trailing whitespace
#228: FILE: include/linux/tasklet.h:54:
+^Ismp_mb__before_clear_bit(); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#234: FILE: include/linux/tasklet.h:60:
+	while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#234: FILE: include/linux/tasklet.h:60:
+	while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { barrier(); }

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#242: FILE: include/linux/tasklet.h:68:
+extern void FASTCALL(__tasklet_schedule(struct tasklet_struct *t));

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#250: FILE: include/linux/tasklet.h:76:
+extern void FASTCALL(__tasklet_hi_schedule(struct tasklet_struct *t));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: include/linux/tasklet.h:84:
+
+

WARNING:MEMORY_BARRIER: memory barrier without comment
#269: FILE: include/linux/tasklet.h:95:
+	smp_mb();

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: include/linux/tasklet.h:110:
+extern void tasklet_kill(struct tasklet_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: include/linux/tasklet.h:111:
+extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#286: FILE: include/linux/tasklet.h:112:
+extern void tasklet_init(struct tasklet_struct *t,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#520: FILE: kernel/tasklet.c:1:
+/*

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#534: FILE: kernel/tasklet.c:15:
+struct tasklet_head
+{

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#539: FILE: kernel/tasklet.c:20:
+/* Some compilers disobey section attribute on statics when not
+   initialized -- RR */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#539: FILE: kernel/tasklet.c:20:
+   initialized -- RR */

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#554: FILE: kernel/tasklet.c:35:
+EXPORT_SYMBOL(__tasklet_schedule);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#567: FILE: kernel/tasklet.c:48:
+EXPORT_SYMBOL(__tasklet_hi_schedule);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#586: FILE: kernel/tasklet.c:67:
+					BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#619: FILE: kernel/tasklet.c:100:
+					BUG();

CHECK:LINE_SPACING: Please don't use multiple blank lines
#635: FILE: kernel/tasklet.c:116:
+
+

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#646: FILE: kernel/tasklet.c:127:
+EXPORT_SYMBOL(tasklet_init);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#651: FILE: kernel/tasklet.c:132:
+		printk("Attempt to kill tasklet from interrupt\n");

WARNING:YIELD: Using yield() is generally wrong. See yield() kernel-doc (sched/core.c)
#655: FILE: kernel/tasklet.c:136:
+			yield();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#662: FILE: kernel/tasklet.c:143:
+EXPORT_SYMBOL(tasklet_kill);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#684: FILE: kernel/tasklet.c:165:
+	BUG_ON(cpu_online(cpu));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#685: FILE: kernel/tasklet.c:166:
+	BUG_ON(test_bit(TASKLET_STATE_RUN, &t->state));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#697: FILE: kernel/tasklet.c:178:
+	BUG();

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#708: FILE: kernel/tasklet.c:189:
+	for (i = &__get_cpu_var(tasklet_vec).list; *i; i = &(*i)->next);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#713: FILE: kernel/tasklet.c:194:
+	for (i = &__get_cpu_var(tasklet_hi_vec).list; *i; i = &(*i)->next);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#722: FILE: kernel/tasklet.c:203:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 20 warnings, 9 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000412606.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
