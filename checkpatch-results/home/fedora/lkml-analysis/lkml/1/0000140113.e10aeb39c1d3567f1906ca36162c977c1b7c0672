WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#39: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Notificiation' may be misspelled - perhaps 'Notification'?
#45: FILE: Documentation/cgroups/mem_notify.txt:2:
+Memory Limit Notificiation
              ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'paramaters' may be misspelled - perhaps 'parameters'?
#152: FILE: Documentation/cgroups/mem_notify.txt:109:
+memory in use so the cgroup paramaters may continue to be dynamically
                             ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'notificaton' may be misspelled - perhaps 'notification'?
#153: FILE: Documentation/cgroups/mem_notify.txt:110:
+modified without the need to modify the notificaton parameters.
                                         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'notificaton' may be misspelled - perhaps 'notification'?
#157: FILE: Documentation/cgroups/mem_notify.txt:114:
+The cgroup file semantics are not well suited for this type of notificaton
                                                                ^^^^^^^^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#182: FILE: include/linux/memcontrol.h:121:
+extern void test_and_wakeup_notify(struct mem_cgroup *mcg,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#183: FILE: include/linux/memcontrol.h:122:
+extern void test_and_wakeup_notify(struct mem_cgroup *mcg,
+				unsigned long long newlimit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#184: FILE: include/linux/memcontrol.h:123:
+extern unsigned long compute_usage_percent(unsigned long long usage,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: include/linux/memcontrol.h:124:
+extern unsigned long compute_usage_percent(unsigned long long usage,
+				unsigned long long limit);

WARNING:TYPO_SPELLING: 'extenstion' may be misspelled - perhaps 'extension'?
#204: FILE: init/Kconfig:596:
+	  It is an extenstion to the memory resource controller, since it
 	           ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: mm/memcontrol.c:954:
+		usage_pct = compute_usage_percent(mem->res.usage + PAGE_SIZE,
+								mem->res.limit);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage_pct >= mem->notify_limit_percent'
#251: FILE: mm/memcontrol.c:955:
+		if ((usage_pct >= mem->notify_limit_percent) &&
+		    waitqueue_active(&mem->notify_limit_wait))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#252: FILE: mm/memcontrol.c:956:
+		    waitqueue_active(&mem->notify_limit_wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#289: FILE: mm/memcontrol.c:2260:
+unsigned long compute_usage_percent(unsigned long long usage,
+					unsigned long long limit)

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#307: FILE: mm/memcontrol.c:2278:
+	/* Check to see if the new limit should cause notification.
+	*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage_pct >= mcg->notify_limit_percent'
#310: FILE: mm/memcontrol.c:2281:
+	if ((usage_pct >= mcg->notify_limit_percent) &&
+	    waitqueue_active(&mcg->notify_limit_wait))

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#311: FILE: mm/memcontrol.c:2282:
+	    waitqueue_active(&mcg->notify_limit_wait))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: mm/memcontrol.c:2287:
+static ssize_t notify_limit_read(struct cgroup *cgrp, struct cftype *cft,
+			       struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: mm/memcontrol.c:2301:
+static int notify_limit_write(struct cgroup *cgrp, struct cftype *cft,
+			    const char *buffer)

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#336: FILE: mm/memcontrol.c:2307:
+	val = simple_strtoul(buffer, &endptr, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#343: FILE: mm/memcontrol.c:2314:
+	/* Check to see if the new percentage limit should cause notification.
+	*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: mm/memcontrol.c:2321:
+static ssize_t notify_limit_usage_read(struct cgroup *cgrp, struct cftype *cft,
+			       struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: mm/memcontrol.c:2338:
+static ssize_t notify_limit_lowait(struct cgroup *cgrp, struct cftype *cft,
+			       struct file *file,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#385: FILE: mm/memcontrol.c:2356:
+	if (likely(mem->res.usage != 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: mm/memcontrol.c:2358:
+		prepare_to_wait(&mem->notify_limit_wait, &notify_lowait,
+							TASK_INTERRUPTIBLE);

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#393: FILE: mm/memcontrol.c:2364:
+			/* Compute percentage we have now and return it.
+			*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#395: FILE: mm/memcontrol.c:2366:
+			usage_pct = compute_usage_percent(mem->res.usage,
+							mem->res.limit);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_cont->parent"
#471: FILE: mm/memcontrol.c:2710:
+	if (old_cont->parent != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140113.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 16 checks, 412 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000140113.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
