WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-apic-for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#242: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: arch/x86/include/asm/hw_irq.h:101:
+extern struct irq_cfg *irq_cfg(unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#292: FILE: arch/x86/include/asm/hw_irq.h:101:
+extern struct irq_cfg *irq_cfg(unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#293: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_cfg *' should also have an identifier name
#293: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cpumask *' should also have an identifier name
#293: FILE: arch/x86/include/asm/hw_irq.h:102:
+extern int assign_irq_vector(int, struct irq_cfg *, const struct cpumask *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern void send_cleanup_vector(struct irq_cfg *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_cfg *' should also have an identifier name
#294: FILE: arch/x86/include/asm/hw_irq.h:103:
+extern void send_cleanup_vector(struct irq_cfg *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#297: FILE: arch/x86/include/asm/hw_irq.h:106:
+extern unsigned int set_desc_affinity(struct irq_desc *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct irq_desc *' should also have an identifier name
#297: FILE: arch/x86/include/asm/hw_irq.h:106:
+extern unsigned int set_desc_affinity(struct irq_desc *, const struct cpumask *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct cpumask *' should also have an identifier name
#297: FILE: arch/x86/include/asm/hw_irq.h:106:
+extern unsigned int set_desc_affinity(struct irq_desc *, const struct cpumask *);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#298: FILE: arch/x86/include/asm/hw_irq.h:107:
+extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin, struct io_apic_irq_attr *irq_attr);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: arch/x86/include/asm/hw_irq.h:107:
+extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin, struct io_apic_irq_attr *irq_attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#310: FILE: arch/x86/include/asm/irq.h:37:
+extern void irq_force_complete_move(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#310: FILE: arch/x86/include/asm/irq.h:37:
+extern void irq_force_complete_move(int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#362: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern int uv_irq_2_mmr_info(int, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#362: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern int uv_irq_2_mmr_info(int, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#362: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern int uv_irq_2_mmr_info(int, unsigned long *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#362: FILE: arch/x86/include/asm/uv/uv_irq.h:34:
+extern int uv_irq_2_mmr_info(int, unsigned long *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#363: FILE: arch/x86/include/asm/uv/uv_irq.h:35:
+extern int uv_setup_irq(char *, int, int, unsigned long, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#364: FILE: arch/x86/include/asm/uv/uv_irq.h:36:
+extern void uv_teardown_irq(unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#364: FILE: arch/x86/include/asm/uv/uv_irq.h:36:
+extern void uv_teardown_irq(unsigned int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#450: FILE: arch/x86/kernel/apic/apic_noop.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/acpi.h> instead of <asm/acpi.h>
#479: FILE: arch/x86/kernel/apic/apic_noop.c:30:
+#include <asm/acpi.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:CAMELCASE: Avoid CamelCase: <dest_LowestPrio>
#589: FILE: arch/x86/kernel/apic/apic_noop.c:140:
+	.irq_delivery_mode		= dest_LowestPrio,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#923: FILE: arch/x86/kernel/apic/io_apic.c:1807:
+__apicdebuginit(void) print_local_APICs(int maxcpu)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <print_local_APICs>
#923: FILE: arch/x86/kernel/apic/io_apic.c:1807:
+__apicdebuginit(void) print_local_APICs(int maxcpu)

WARNING:MISPLACED_INIT: __initdata should be placed after show_lapic
#954: FILE: arch/x86/kernel/apic/io_apic.c:1855:
+static int __initdata show_lapic = 1;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#969: FILE: arch/x86/kernel/apic/io_apic.c:1870:
+__setup("show_lapic=", setup_show_lapic);

CHECK:SPACING: No space is necessary after a cast
#971: FILE: arch/x86/kernel/apic/io_apic.c:1872:
+__apicdebuginit(int) print_ICs(void)

CHECK:CAMELCASE: Avoid CamelCase: <print_ICs>
#971: FILE: arch/x86/kernel/apic/io_apic.c:1872:
+__apicdebuginit(int) print_ICs(void)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1009: FILE: arch/x86/kernel/apic/io_apic.c:2068:
+		if (apic->check_apicid_used(&phys_id_present_map,
 					mp_ioapics[apic_id].apicid)) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1082: FILE: arch/x86/kernel/apic/io_apic.c:2459:
+static void __irq_complete_move(struct irq_desc **descp, unsigned vector)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1087: FILE: arch/x86/kernel/apic/io_apic.c:2463:
+	unsigned me;

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#1133: FILE: arch/x86/kernel/apic/io_apic.c:2516:
+ * mode to edge and then back to level, with RTE being masked during this.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1394: FILE: arch/x86/kernel/apic/io_apic.c:4135:
+		apic_printk(APIC_VERBOSE, "mapped IOAPIC to %08lx (%08lx)\n",
+			__fix_to_virt(idx) + (ioapic_phys & ~PAGE_MASK),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1445: FILE: arch/x86/kernel/apic/numaq_32.c:409:
+	physid_set_mask_of_physid(cpu + 4*node, retmap);
 	                                 ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1597: FILE: arch/x86/kernel/irq.c:334:
+			printk("Broke affinity for irq %i\n", irq);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1599: FILE: arch/x86/kernel/irq.c:336:
+			printk("Cannot set affinity for irq %i\n", irq);

WARNING:SPACING: missing space after struct definition
#1791: FILE: arch/x86/kernel/uv_irq.c:20:
+struct uv_irq_2_mmr_pnode{

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1816: FILE: arch/x86/kernel/uv_irq.c:64:
+static int uv_set_irq_2_mmr_info(int irq, unsigned long offset, unsigned blade)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*n)...) over kmalloc_node(sizeof(struct uv_irq_2_mmr_pnode)...)
#1824: FILE: arch/x86/kernel/uv_irq.c:72:
+	n = kmalloc_node(sizeof(struct uv_irq_2_mmr_pnode), GFP_KERNEL,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1825: FILE: arch/x86/kernel/uv_irq.c:73:
+	n = kmalloc_node(sizeof(struct uv_irq_2_mmr_pnode), GFP_KERNEL,
+				uv_blade_to_memory_nid(blade));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1895: FILE: arch/x86/kernel/uv_irq.c:143:
+arch_enable_uv_irq(char *irq_name, unsigned int irq, int cpu, int mmr_blade,
+		       unsigned long mmr_offset, int restrict)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1968: FILE: arch/x86/kernel/uv_irq.c:216:
+	unsigned mmr_pnode;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2019: FILE: arch/x86/kernel/uv_irq.c:261:
+	ret = arch_enable_uv_irq(irq_name, irq, cpu, mmr_blade, mmr_offset,
+		restrict);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2079: FILE: arch/x86/mm/srat_64.c:139:
+	printk(KERN_INFO "SRAT: PXM %u -> APIC 0x%04x -> Node %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2088: FILE: arch/x86/mm/srat_64.c:173:
+	printk(KERN_INFO "SRAT: PXM %u -> APIC 0x%02x -> Node %u\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2102: FILE: drivers/misc/sgi-xp/xpc_uv.c:110:
+	mq->irq = uv_setup_irq(irq_name, cpu, mq->mmr_blade, mq->mmr_offset,
+			UV_AFFINITY_CPU);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 24 checks, 1739 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039734.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
