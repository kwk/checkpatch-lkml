WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:TYPO_SPELLING: 'Notificiation' may be misspelled - perhaps 'Notification'?
#55: FILE: Documentation/cgroups/mem_notify.txt:2:
+Memory Limit Notificiation
              ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'resouce' may be misspelled - perhaps 'resource'?
#78: FILE: Documentation/cgroups/mem_notify.txt:25:
+resouce controller limit (memory.limit_in_bytes). The threshold
 ^^^^^^^

WARNING:TYPO_SPELLING: 'paramaters' may be misspelled - perhaps 'parameters'?
#172: FILE: Documentation/cgroups/mem_notify.txt:119:
+memory not in use so the cgroup paramaters may continue to be dynamically
                                 ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'notificaton' may be misspelled - perhaps 'notification'?
#173: FILE: Documentation/cgroups/mem_notify.txt:120:
+modified without the need to modify the notificaton parameters.
                                         ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'notificaton' may be misspelled - perhaps 'notification'?
#177: FILE: Documentation/cgroups/mem_notify.txt:124:
+The cgroup file semantics are not well suited for this type of notificaton
                                                                ^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: include/linux/memcontrol.h:124:
+void mem_cgroup_notify_test_and_wakeup(struct mem_cgroup *mcg,
+			unsigned long long usage, unsigned long long limit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#207: FILE: include/linux/memcontrol.h:126:
+void mem_cgroup_notify_new_limit(struct mem_cgroup *mcg,
+						unsigned long long newlimit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#211: FILE: include/linux/memcontrol.h:130:
+static inline void mem_cgroup_notify_test_and_wakeup(struct mem_cgroup *mcg,
+			unsigned long long usage, unsigned long long limit)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#214: FILE: include/linux/memcontrol.h:133:
+}
+static inline void mem_cgroup_notify_new_limit(struct mem_cgroup *mcg,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: include/linux/memcontrol.h:134:
+static inline void mem_cgroup_notify_new_limit(struct mem_cgroup *mcg,
+						unsigned long long newlimit)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#218: FILE: include/linux/memcontrol.h:137:
+}
+static inline void mem_cgroup_notify_move_task(struct cgroup *old_cont)

WARNING:TYPO_SPELLING: 'extenstion' may be misspelled - perhaps 'extension'?
#239: FILE: init/Kconfig:602:
+	  It is an extenstion to the memory resource controller, since it
 	           ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: mm/memcontrol.c:1012:
+	mem_cgroup_notify_test_and_wakeup(mem, mem->res.usage + PAGE_SIZE,
+							mem->res.limit);

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#317: FILE: mm/memcontrol.c:2346:
+	    waitqueue_active(&mcg->notify_threshold_wait))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#320: FILE: mm/memcontrol.c:2349:
+}
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#338: FILE: mm/memcontrol.c:2367:
+	struct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);
+	return memcg->notify_threshold_bytes;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#362: FILE: mm/memcontrol.c:2391:
+	mem_cgroup_notify_test_and_wakeup(memcg, memcg->res.usage,
+							memcg->res.limit);

WARNING:LINE_SPACING: Missing a blank line after declarations
#371: FILE: mm/memcontrol.c:2400:
+	struct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);
+	return memcg->res.limit - memcg->res.usage;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#390: FILE: mm/memcontrol.c:2419:
+	if (likely(mem->res.usage != 0)) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#392: FILE: mm/memcontrol.c:2421:
+		prepare_to_wait(&mem->notify_threshold_wait, &notify_lowait,
+							TASK_INTERRUPTIBLE);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "old_cont->parent"
#432: FILE: mm/memcontrol.c:2461:
+	if (old_cont->parent != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 12 checks, 408 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099156.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
