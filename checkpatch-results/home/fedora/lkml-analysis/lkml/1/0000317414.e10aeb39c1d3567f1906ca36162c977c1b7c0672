WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#78: FILE: pl2303.c:16:
+ *	Back-port pl2303.c from linux-2.6.24.1. davidn@davidnewall.com.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#88: FILE: pl2303.c:40:
+ * TODO suggests this might be on all even opens of device. dn. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#100: FILE: pl2303.c:70:
+#define PL2303_CLOSING_WAIT	(30*HZ)
                            	   ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*pb)...) over kmalloc(sizeof(struct pl2303_buf)...)
#221: FILE: pl2303.c:207:
+	pb = kmalloc(sizeof(struct pl2303_buf), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#222: FILE: pl2303.c:208:
+	if (pb == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb->buf_buf"
#226: FILE: pl2303.c:212:
+	if (pb->buf_buf == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#232: FILE: pl2303.c:218:
+	pb->buf_get = pb->buf_put = pb->buf_buf;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "pb"
#257: FILE: pl2303.c:243:
+	if (pb != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#270: FILE: pl2303.c:256:
+	if (pb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#284: FILE: pl2303.c:270:
+	if (pb == NULL)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#290: FILE: pl2303.c:276:
+static int copy(char *dest, int from_user, const char *source, unsigned count)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#293: FILE: pl2303.c:279:
+		memcpy (dest, source, count);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#294: FILE: pl2303.c:280:
+	else if (copy_from_user (dest, source, count))

WARNING:REPEATED_WORD: Possible repeated word: 'data'
#302: FILE: pl2303.c:288:
+ * Copy data data from a user buffer and put it into the circular buffer.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#312: FILE: pl2303.c:298:
+	if (pb == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#326: FILE: pl2303.c:311:
+		    copy(pb->buf_buf, from_user, buf+len, count - len) < 0)
 		                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pb"
#354: FILE: pl2303.c:339:
+	if (pb == NULL)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#367: FILE: pl2303.c:352:
+		memcpy(buf+len, pb->buf_buf, count - len);
 		          ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!priv->buf"
#393: FILE: pl2303.c:388:
+		if (priv->buf == NULL) {

ERROR:SPACING: spaces required around that '>=' (ctx:VxV)
#404: FILE: pl2303.c:399:
+	for (--i; i>=0; --i) {
 	           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#437: FILE: pl2303.c:425:
+	dbg("%s - port %d", __FUNCTION__, port->number);

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#485: FILE: pl2303.c:457:
+	wake_up_interruptible(&port->tty->write_wait);	/* this, at very least, wakes up pl2303_close */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#494: FILE: pl2303.c:466:
+	dbg("%s - port %d, %d bytes", __FUNCTION__, port->number, count);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#515: FILE: pl2303.c:486:
+	dbg("%s - port %d", __FUNCTION__, port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#521: FILE: pl2303.c:492:
+	dbg("%s - returns %d", __FUNCTION__, room);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#531: FILE: pl2303.c:502:
+	dbg("%s - port %d", __FUNCTION__, port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#537: FILE: pl2303.c:508:
+	dbg("%s - returns %d", __FUNCTION__, chars);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#634: FILE: pl2303.c:639:
+	dbg("0xa1:0x21:0:0  %d - %x %x %x %x %x %x %x", i,
 	     buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6]);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#655: FILE: pl2303.c:659:
+		dbg ("0x40:0x1:0x0:0x0  %d", i);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#668: FILE: pl2303.c:669:
+static void pl2303_close(struct usb_serial_port *port, struct file *filp)
                                                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#678: FILE: pl2303.c:679:
+	if (port_paranoia_check (port, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#678: FILE: pl2303.c:679:
+	if (port_paranoia_check (port, __FUNCTION__))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#680: FILE: pl2303.c:681:
+	serial = get_usb_serial (port, __FUNCTION__);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#680: FILE: pl2303.c:681:
+	serial = get_usb_serial (port, __FUNCTION__);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#683: FILE: pl2303.c:684:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#684: FILE: pl2303.c:685:
+	dbg("%s - port %d", __FUNCTION__, port->number);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#715: FILE: pl2303.c:716:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: pl2303.c:716:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#715: FILE: pl2303.c:716:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                           ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#715: FILE: pl2303.c:716:
+		timeout = max((HZ*2560)/bps,HZ/10);
 		                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#717: FILE: pl2303.c:718:
+		timeout = 2*HZ;
 		           ^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#734: FILE: pl2303.c:735:
+		dbg("%s - shutting down urbs", __FUNCTION__);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#735: FILE: pl2303.c:736:
+		result = usb_unlink_urb (port->write_urb);

WARNING:SPLIT_STRING: quoted string split across lines
#738: FILE: pl2303.c:739:
+			dbg("%s - usb_unlink_urb (write_urb)"
+			    " failed with reason: %d", __FUNCTION__,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#738: FILE: pl2303.c:739:
+			    " failed with reason: %d", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#741: FILE: pl2303.c:742:
+		result = usb_unlink_urb (port->read_urb);

WARNING:SPLIT_STRING: quoted string split across lines
#744: FILE: pl2303.c:745:
+			dbg("%s - usb_unlink_urb (read_urb) "
+			    "failed with reason: %d", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#744: FILE: pl2303.c:745:
+			    "failed with reason: %d", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#747: FILE: pl2303.c:748:
+		result = usb_unlink_urb (port->interrupt_in_urb);

WARNING:SPLIT_STRING: quoted string split across lines
#750: FILE: pl2303.c:751:
+			dbg("%s - usb_unlink_urb (interrupt_in_urb)"
+			    " failed with reason: %d", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#750: FILE: pl2303.c:751:
+			    " failed with reason: %d", __FUNCTION__,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#755: FILE: pl2303.c:756:
+static int pl2303_open(struct usb_serial_port *port, struct file *filp)
                                                                   ^^^^

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#931: FILE: pl2303.c:868:
+	dbg("%s (%d)", __FUNCTION__, port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1003: FILE: pl2303.c:937:
+			dbg("%s (%d) TIOCMBIS", __FUNCTION__,  port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1009: FILE: pl2303.c:943:
+			dbg("%s (%d) TIOCMBIC", __FUNCTION__,  port->number);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1017: FILE: pl2303.c:949:
+			dbg("%s (%d) TIOCMSET", __FUNCTION__,  port->number);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1021: FILE: pl2303.c:953:
+			/* turn off RTS and DTR and then only turn
+			   on what was asked to */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1021: FILE: pl2303.c:953:
+			   on what was asked to */

CHECK:SPACING: spaces preferred around that '^' (ctx:VxV)
#1022: FILE: pl2303.c:954:
+			return pl2303_tiocmset(port, file, value, value^(TIOCM_RTS|TIOCM_DTR));
 			                                               ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1022: FILE: pl2303.c:954:
+			return pl2303_tiocmset(port, file, value, value^(TIOCM_RTS|TIOCM_DTR));
 			                                                          ^

CHECK:CAMELCASE: Avoid CamelCase: <idVendor>
#1087: FILE: pl2303.c:1016:
+	idv = le16_to_cpu(port->serial->dev->descriptor.idVendor);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <idProduct>
#1088: FILE: pl2303.c:1017:
+	idp = le16_to_cpu(port->serial->dev->descriptor.idProduct);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1096: FILE: pl2303.c:1024:
+		    idp == SIEMENS_PRODUCT_ID_X75) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1105: FILE: pl2303.c:1033:
+        /* Save off the uart status for others to look at */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1136: FILE: pl2303.c:1058:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__,

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1145: FILE: pl2303.c:1062:
+		dbg("%s - nonzero urb status received: %d", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1190: FILE: pl2303.c:1086:
+	if (!get_usb_serial (port, __FUNCTION__)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1190: FILE: pl2303.c:1086:
+	if (!get_usb_serial (port, __FUNCTION__)) {

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1198: FILE: pl2303.c:1092:
+		dbg("%s - urb status = %d", __FUNCTION__, status);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1210: FILE: pl2303.c:1099:
+			 * the read */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1212: FILE: pl2303.c:1101:
+			    __FUNCTION__);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1231: FILE: pl2303.c:1125:
+	if (line_status & UART_BREAK_ERROR )

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1297: FILE: pl2303.c:1178:
+		dbg("%s - urb shutting down with status: %d", __FUNCTION__,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1304: FILE: pl2303.c:1184:
+		if (serial_paranoia_check (port->serial, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1304: FILE: pl2303.c:1184:
+		if (serial_paranoia_check (port->serial, __FUNCTION__))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#1309: FILE: pl2303.c:1187:
+		dbg("%s - nonzero write bulk status received: %d", __FUNCTION__,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000317414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 48 warnings, 23 checks, 1300 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000317414.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
