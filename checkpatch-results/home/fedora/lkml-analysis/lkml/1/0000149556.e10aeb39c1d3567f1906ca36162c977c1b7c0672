WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#55: FILE: drivers/net/Kconfig:966:
+config ETHOC
+	tristate "OpenCores 10/100 Mbps Ethernet MAC support"
+	depends on NET_ETHERNET
+	select PHYLIB
+	help
+	  Say Y here if you want to use the OpenCores 10/100 Mbps Ethernet MAC.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: drivers/net/ethoc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#84: FILE: drivers/net/ethoc.c:2:
+ * linux/drivers/net/ethoc.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:BIT_MACRO: Prefer using the BIT macro
#128: FILE: drivers/net/ethoc.c:46:
+#define	MODER_RXEN	(1 <<  0) /* receive enable */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#129: FILE: drivers/net/ethoc.c:47:
+#define	MODER_TXEN	(1 <<  1) /* transmit enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#130: FILE: drivers/net/ethoc.c:48:
+#define	MODER_NOPRE	(1 <<  2) /* no preamble */

CHECK:BIT_MACRO: Prefer using the BIT macro
#131: FILE: drivers/net/ethoc.c:49:
+#define	MODER_BRO	(1 <<  3) /* broadcast address */

CHECK:BIT_MACRO: Prefer using the BIT macro
#132: FILE: drivers/net/ethoc.c:50:
+#define	MODER_IAM	(1 <<  4) /* individual address mode */

CHECK:BIT_MACRO: Prefer using the BIT macro
#133: FILE: drivers/net/ethoc.c:51:
+#define	MODER_PRO	(1 <<  5) /* promiscuous mode */

CHECK:BIT_MACRO: Prefer using the BIT macro
#134: FILE: drivers/net/ethoc.c:52:
+#define	MODER_IFG	(1 <<  6) /* interframe gap for incoming frames */

CHECK:BIT_MACRO: Prefer using the BIT macro
#135: FILE: drivers/net/ethoc.c:53:
+#define	MODER_LOOP	(1 <<  7) /* loopback */

CHECK:BIT_MACRO: Prefer using the BIT macro
#136: FILE: drivers/net/ethoc.c:54:
+#define	MODER_NBO	(1 <<  8) /* no back-off */

CHECK:BIT_MACRO: Prefer using the BIT macro
#137: FILE: drivers/net/ethoc.c:55:
+#define	MODER_EDE	(1 <<  9) /* excess defer enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#138: FILE: drivers/net/ethoc.c:56:
+#define	MODER_FULLD	(1 << 10) /* full duplex */

CHECK:BIT_MACRO: Prefer using the BIT macro
#139: FILE: drivers/net/ethoc.c:57:
+#define	MODER_RESET	(1 << 11) /* FIXME: reset (undocumented) */

CHECK:BIT_MACRO: Prefer using the BIT macro
#140: FILE: drivers/net/ethoc.c:58:
+#define	MODER_DCRC	(1 << 12) /* delayed CRC enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: drivers/net/ethoc.c:59:
+#define	MODER_CRC	(1 << 13) /* CRC enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#142: FILE: drivers/net/ethoc.c:60:
+#define	MODER_HUGE	(1 << 14) /* huge packets enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#143: FILE: drivers/net/ethoc.c:61:
+#define	MODER_PAD	(1 << 15) /* padding enabled */

CHECK:BIT_MACRO: Prefer using the BIT macro
#144: FILE: drivers/net/ethoc.c:62:
+#define	MODER_RSM	(1 << 16) /* receive small packets */

CHECK:BIT_MACRO: Prefer using the BIT macro
#147: FILE: drivers/net/ethoc.c:65:
+#define	INT_MASK_TXF	(1 << 0) /* transmit frame */

CHECK:BIT_MACRO: Prefer using the BIT macro
#148: FILE: drivers/net/ethoc.c:66:
+#define	INT_MASK_TXE	(1 << 1) /* transmit error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#149: FILE: drivers/net/ethoc.c:67:
+#define	INT_MASK_RXF	(1 << 2) /* receive frame */

CHECK:BIT_MACRO: Prefer using the BIT macro
#150: FILE: drivers/net/ethoc.c:68:
+#define	INT_MASK_RXE	(1 << 3) /* receive error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#151: FILE: drivers/net/ethoc.c:69:
+#define	INT_MASK_BUSY	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#152: FILE: drivers/net/ethoc.c:70:
+#define	INT_MASK_TXC	(1 << 5) /* transmit control frame */

CHECK:BIT_MACRO: Prefer using the BIT macro
#153: FILE: drivers/net/ethoc.c:71:
+#define	INT_MASK_RXC	(1 << 6) /* receive control frame */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#172: FILE: drivers/net/ethoc.c:90:
+#define	TX_BD_NUM_VAL(x)	(((x) <= 0x80) ? (x) : 0x80)

CHECK:BIT_MACRO: Prefer using the BIT macro
#175: FILE: drivers/net/ethoc.c:93:
+#define	CTRLMODER_PASSALL	(1 << 0) /* pass all receive frames */

CHECK:BIT_MACRO: Prefer using the BIT macro
#176: FILE: drivers/net/ethoc.c:94:
+#define	CTRLMODER_RXFLOW	(1 << 1) /* receive control flow */

CHECK:BIT_MACRO: Prefer using the BIT macro
#177: FILE: drivers/net/ethoc.c:95:
+#define	CTRLMODER_TXFLOW	(1 << 2) /* transmit control flow */

CHECK:BIT_MACRO: Prefer using the BIT macro
#181: FILE: drivers/net/ethoc.c:99:
+#define	MIIMODER_NOPRE		(1 << 8) /* no preamble */

CHECK:BIT_MACRO: Prefer using the BIT macro
#184: FILE: drivers/net/ethoc.c:102:
+#define	MIICOMMAND_SCAN		(1 << 0) /* scan status */

CHECK:BIT_MACRO: Prefer using the BIT macro
#185: FILE: drivers/net/ethoc.c:103:
+#define	MIICOMMAND_READ		(1 << 1) /* read status */

CHECK:BIT_MACRO: Prefer using the BIT macro
#186: FILE: drivers/net/ethoc.c:104:
+#define	MIICOMMAND_WRITE	(1 << 2) /* write control data */

CHECK:BIT_MACRO: Prefer using the BIT macro
#201: FILE: drivers/net/ethoc.c:119:
+#define	MIISTATUS_LINKFAIL	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#202: FILE: drivers/net/ethoc.c:120:
+#define	MIISTATUS_BUSY		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#203: FILE: drivers/net/ethoc.c:121:
+#define	MIISTATUS_INVALID	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#206: FILE: drivers/net/ethoc.c:124:
+#define	TX_BD_CS		(1 <<  0) /* carrier sense lost */

CHECK:BIT_MACRO: Prefer using the BIT macro
#207: FILE: drivers/net/ethoc.c:125:
+#define	TX_BD_DF		(1 <<  1) /* defer indication */

CHECK:BIT_MACRO: Prefer using the BIT macro
#208: FILE: drivers/net/ethoc.c:126:
+#define	TX_BD_LC		(1 <<  2) /* late collision */

CHECK:BIT_MACRO: Prefer using the BIT macro
#209: FILE: drivers/net/ethoc.c:127:
+#define	TX_BD_RL		(1 <<  3) /* retransmission limit */

CHECK:BIT_MACRO: Prefer using the BIT macro
#212: FILE: drivers/net/ethoc.c:130:
+#define	TX_BD_UR		(1 <<  8) /* transmitter underrun */

CHECK:BIT_MACRO: Prefer using the BIT macro
#213: FILE: drivers/net/ethoc.c:131:
+#define	TX_BD_CRC		(1 << 11) /* TX CRC enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#214: FILE: drivers/net/ethoc.c:132:
+#define	TX_BD_PAD		(1 << 12) /* pad enable for short packets */

CHECK:BIT_MACRO: Prefer using the BIT macro
#215: FILE: drivers/net/ethoc.c:133:
+#define	TX_BD_WRAP		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#216: FILE: drivers/net/ethoc.c:134:
+#define	TX_BD_IRQ		(1 << 14) /* interrupt request enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#217: FILE: drivers/net/ethoc.c:135:
+#define	TX_BD_READY		(1 << 15) /* TX buffer ready */

CHECK:BIT_MACRO: Prefer using the BIT macro
#225: FILE: drivers/net/ethoc.c:143:
+#define	RX_BD_LC	(1 <<  0) /* late collision */

CHECK:BIT_MACRO: Prefer using the BIT macro
#226: FILE: drivers/net/ethoc.c:144:
+#define	RX_BD_CRC	(1 <<  1) /* RX CRC error */

CHECK:BIT_MACRO: Prefer using the BIT macro
#227: FILE: drivers/net/ethoc.c:145:
+#define	RX_BD_SF	(1 <<  2) /* short frame */

CHECK:BIT_MACRO: Prefer using the BIT macro
#228: FILE: drivers/net/ethoc.c:146:
+#define	RX_BD_TL	(1 <<  3) /* too long */

CHECK:BIT_MACRO: Prefer using the BIT macro
#229: FILE: drivers/net/ethoc.c:147:
+#define	RX_BD_DN	(1 <<  4) /* dribble nibble */

CHECK:BIT_MACRO: Prefer using the BIT macro
#230: FILE: drivers/net/ethoc.c:148:
+#define	RX_BD_IS	(1 <<  5) /* invalid symbol */

CHECK:BIT_MACRO: Prefer using the BIT macro
#231: FILE: drivers/net/ethoc.c:149:
+#define	RX_BD_OR	(1 <<  6) /* receiver overrun */

CHECK:BIT_MACRO: Prefer using the BIT macro
#232: FILE: drivers/net/ethoc.c:150:
+#define	RX_BD_MISS	(1 <<  7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#233: FILE: drivers/net/ethoc.c:151:
+#define	RX_BD_CF	(1 <<  8) /* control frame */

CHECK:BIT_MACRO: Prefer using the BIT macro
#234: FILE: drivers/net/ethoc.c:152:
+#define	RX_BD_WRAP	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#235: FILE: drivers/net/ethoc.c:153:
+#define	RX_BD_IRQ	(1 << 14) /* interrupt request enable */

CHECK:BIT_MACRO: Prefer using the BIT macro
#236: FILE: drivers/net/ethoc.c:154:
+#define	RX_BD_EMPTY	(1 << 15)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#266: FILE: drivers/net/ethoc.c:184:
+	spinlock_t rx_lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#267: FILE: drivers/net/ethoc.c:185:
+	spinlock_t lock;

WARNING:LINE_SPACING: Missing a blank line after declarations
#294: FILE: drivers/net/ethoc.c:212:
+	loff_t offset = ETHOC_BD_BASE + (index * sizeof(struct ethoc_bd));
+	bd->stat = ethoc_read(dev, offset + 0);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: drivers/net/ethoc.c:217:
+static void ethoc_write_bd(struct ethoc *dev, int index,
+		const struct ethoc_bd *bd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#302: FILE: drivers/net/ethoc.c:220:
+	loff_t offset = ETHOC_BD_BASE + (index * sizeof(struct ethoc_bd));
+	ethoc_write(dev, offset + 0, bd->stat);

WARNING:LINE_SPACING: Missing a blank line after declarations
#309: FILE: drivers/net/ethoc.c:227:
+	u32 imask = ethoc_read(dev, INT_MASK);
+	imask |= mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#316: FILE: drivers/net/ethoc.c:234:
+	u32 imask = ethoc_read(dev, INT_MASK);
+	imask &= ~mask;

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: drivers/net/ethoc.c:246:
+	u32 mode = ethoc_read(dev, MODER);
+	mode |= MODER_RXEN | MODER_TXEN;

WARNING:LINE_SPACING: Missing a blank line after declarations
#335: FILE: drivers/net/ethoc.c:253:
+	u32 mode = ethoc_read(dev, MODER);
+	mode &= ~(MODER_RXEN | MODER_TXEN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#402: FILE: drivers/net/ethoc.c:320:
+static unsigned int ethoc_update_rx_stats(struct ethoc *dev,
+		struct ethoc_bd *bd)

WARNING:LINE_SPACING: Missing a blank line after declarations
#465: FILE: drivers/net/ethoc.c:383:
+			struct sk_buff *skb = netdev_alloc_skb(dev, size);
+			if (likely(skb)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#467: FILE: drivers/net/ethoc.c:385:
+				void *src = priv->membase + bd.addr;
+				memcpy_fromio(skb_put(skb, size), src, size);

WARNING:SPLIT_STRING: quoted string split across lines
#476: FILE: drivers/net/ethoc.c:394:
+					dev_warn(&dev->dev, "low on memory - "
+							"packet dropped\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#631: FILE: drivers/net/ethoc.c:549:
+		u32 status = ethoc_read(priv, MIISTATUS);
+		if (!(status & MIISTATUS_BUSY)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#655: FILE: drivers/net/ethoc.c:573:
+		u32 stat = ethoc_read(priv, MIISTATUS);
+		if (!(stat & MIISTATUS_BUSY))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/net/ethoc.c:618:
+	phy = phy_connect(dev, phy->dev.bus_id, &ethoc_mdio_poll, 0,
+			PHY_INTERFACE_MODE_GMII);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: drivers/net/ethoc.c:637:
+	ret = request_irq(dev->irq, ethoc_interrupt, IRQF_SHARED,
+			dev->name, dev);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: drivers/net/ethoc.c:665:
+		dev_info(&dev->dev, "I/O: %08lx Memory: %08lx-%08lx\n",
+				dev->base_addr, dev->mem_start, dev->mem_end);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#798: FILE: drivers/net/ethoc.c:716:
+	return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#804: FILE: drivers/net/ethoc.c:722:
+	return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#854: FILE: drivers/net/ethoc.c:772:
+			int bit = (crc >> 26) & 0x3f;
+			hash[bit >> 5] |= 1 << (bit & 0x1f);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#864: FILE: drivers/net/ethoc.c:782:
+	return -ENOSYS;

WARNING:LINE_SPACING: Missing a blank line after declarations
#871: FILE: drivers/net/ethoc.c:789:
+	u32 pending = ethoc_read(priv, INT_SOURCE);
+	if (likely(pending))

WARNING:LINE_SPACING: Missing a blank line after declarations
#878: FILE: drivers/net/ethoc.c:796:
+	struct ethoc *priv = netdev_priv(dev);
+	return &priv->stats;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#972: FILE: drivers/net/ethoc.c:890:
+	mmio = devm_request_mem_region(&pdev->dev, res->start,
+			res->end - res->start + 1, res->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#990: FILE: drivers/net/ethoc.c:908:
+	mem = devm_request_mem_region(&pdev->dev, res->start,
+			res->end - res->start + 1, res->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1015: FILE: drivers/net/ethoc.c:933:
+	priv->iobase = devm_ioremap_nocache(&pdev->dev, netdev->base_addr,
+			mmio->end - mmio->start + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1023: FILE: drivers/net/ethoc.c:941:
+	priv->membase = devm_ioremap_nocache(&pdev->dev, netdev->mem_start,
+			mem->end - mem->start + 1);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1039: FILE: drivers/net/ethoc.c:957:
+	 * current MAC from the controller. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1044: FILE: drivers/net/ethoc.c:962:
+	 * program a random one. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1060: FILE: drivers/net/ethoc.c:978:
+	snprintf(priv->mdio->id, MII_BUS_ID_SIZE, "%s-%d",
+			priv->mdio->name, pdev->id);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1154: FILE: drivers/net/ethoc.c:1072:
+	return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1159: FILE: drivers/net/ethoc.c:1077:
+	return -ENOSYS;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1199: FILE: include/net/ethoc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1200: FILE: include/net/ethoc.h:2:
+ * linux/include/net/ethoc.h

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 27 warnings, 69 checks, 1152 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000149556.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
