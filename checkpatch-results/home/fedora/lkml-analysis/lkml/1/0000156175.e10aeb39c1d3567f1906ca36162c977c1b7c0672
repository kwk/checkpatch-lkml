WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#20: 
Subject: [PATCH] x86: seperate mtrr cleanup/mtrr_e820 trim to seperated file
                      ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'seperated' may be misspelled - perhaps 'separated'?
#20: 
Subject: [PATCH] x86: seperate mtrr cleanup/mtrr_e820 trim to seperated file
                                                              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#32: 
mtrr main.c is too big, try to seperate mtrr cleanup and mtrr e820 trim
                               ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1120: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:93:
+extern int mtrr_cleanup(unsigned address_bits);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1120: FILE: arch/x86/kernel/cpu/mtrr/mtrr.h:93:
+extern int mtrr_cleanup(unsigned address_bits);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1135: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1:
+/*  MTRR (Memory Type Range Register) cleanup

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1136: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:2:
+/*  MTRR (Memory Type Range Register) cleanup
+

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1150: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:16:
+    License along with this library; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1151: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:17:
+    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1164: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:30:
+#include <asm/uaccess.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#1165: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:31:
+#include <asm/processor.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:46:
+add_range(struct res_range *range, int nr_range, unsigned long start,
+			      unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1196: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:62:
+add_range_with_merge(struct res_range *range, int nr_range, unsigned long start,
+			      unsigned long end)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1246: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:112:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1263: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:129:
+				printk(KERN_ERR "run of slot in ranges\n");

WARNING:MISPLACED_INIT: __initdata should be placed after range_state[RANGE_NUM]
#1289: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:155:
+static struct var_mtrr_range_state __initdata range_state[RANGE_NUM];

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __initdata should be placed after debug_print
#1290: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:156:
+static int __initdata debug_print;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1310: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:176:
+		printk(KERN_DEBUG "After WB checking\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1312: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:178:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1313: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:179:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+				 range[i].start, range[i].end + 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1330: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:196:
+		subtract_range(range, extra_remove_base,
+				 extra_remove_base + extra_remove_size  - 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1340: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:206:
+		printk(KERN_DEBUG "After UC checking\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1342: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:208:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1343: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:209:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+				 range[i].start, range[i].end + 1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1349: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:215:
+		printk(KERN_DEBUG "After sorting\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1351: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:217:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1352: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:218:
+			printk(KERN_DEBUG "MTRR MAP PFN: %016lx - %016lx\n",
+				 range[i].start, range[i].end + 1);

WARNING:MISPLACED_INIT: __initdata should be placed after range[RANGE_NUM]
#1362: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:228:
+static struct res_range __initdata range[RANGE_NUM];

WARNING:MISPLACED_INIT: __initdata should be placed after nr_range
#1363: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:229:
+static int __initdata nr_range;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1387: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:253:
+}
+early_param("disable_mtrr_cleanup", disable_mtrr_cleanup_setup);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1394: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:260:
+}
+early_param("enable_mtrr_cleanup", enable_mtrr_cleanup_setup);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1401: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:267:
+}
+early_param("mtrr_cleanup_debug", mtrr_cleanup_debug_setup);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1413: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:279:
+set_var_mtrr(unsigned int reg, unsigned long basek, unsigned long sizek,
+		unsigned char type, unsigned int address_bits)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1431: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:297:
+	base_lo = base & ((1ULL<<32) - 1);
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1434: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:300:
+	mask_lo = mask & ((1ULL<<32) - 1);
 	                       ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1442: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:308:
+save_var_mtrr(unsigned int reg, unsigned long basek, unsigned long sizek,
+		unsigned char type)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1470: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:336:
+	if (base & ((1<<10) - 1)) {
 	              ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1473: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:339:
+	} else if (base & ((1<<20) - 1)) {
 	                     ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'reg >= num_var_ranges'
#1490: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:356:
+	if (!range_sizek || (reg >= num_var_ranges))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1512: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:378:
+			start_base = to_size_factor(range_startk,
+							 &start_factor),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1515: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:381:
+			printk(KERN_DEBUG "Setting variable MTRR %d, "

WARNING:SPLIT_STRING: quoted string split across lines
#1516: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:382:
+			printk(KERN_DEBUG "Setting variable MTRR %d, "
+				"base: %ld%cB, range: %ld%cB, type %s\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'range_basek > basek'
#1552: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:418:
+	if ((range_basek > basek) && basek)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1571: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:437:
+			printk(KERN_DEBUG "rangeX: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1572: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:438:
+			printk(KERN_DEBUG "rangeX: %016lx - %016lx\n",
+				range0_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1572: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:438:
+				range0_basek<<10,
 				            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1573: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:439:
+				(range0_basek + state->range_sizek)<<10);
 				                                   ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1575: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:441:
+		state->reg = range_to_mtrr(state->reg, range0_basek,
+				state->range_sizek, MTRR_TYPE_WRBACK);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1600: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:466:
+	if (range0_sizek > state->range_sizek) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1617: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:483:
+			printk(KERN_DEBUG "range0: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1618: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:484:
+			printk(KERN_DEBUG "range0: %016lx - %016lx\n",
+				range0_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1618: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:484:
+				range0_basek<<10,
 				            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1619: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:485:
+				(range0_basek + range0_sizek)<<10);
 				                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1621: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:487:
+		state->reg = range_to_mtrr(state->reg, range0_basek,
+				range0_sizek, MTRR_TYPE_WRBACK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1629: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:495:
+			printk(KERN_DEBUG "range: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1630: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:496:
+			printk(KERN_DEBUG "range: %016lx - %016lx\n",
+				 range_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1630: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:496:
+				 range_basek<<10,
 				            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1631: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:497:
+				 (range_basek + range_sizek)<<10);
 				                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1633: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:499:
+		state->reg = range_to_mtrr(state->reg, range_basek,
+				 range_sizek, MTRR_TYPE_WRBACK);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1639: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:505:
+			printk(KERN_DEBUG "hole: %016lx - %016lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1640: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:506:
+			printk(KERN_DEBUG "hole: %016lx - %016lx\n",
+				 hole_basek<<10,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1640: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:506:
+				 hole_basek<<10,
 				           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1641: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:507:
+				 (hole_basek + hole_sizek)<<10);
 				                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1643: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:509:
+		state->reg = range_to_mtrr(state->reg, hole_basek,
+				 hole_sizek, MTRR_TYPE_UNCACHABLE);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'basek <= 1024'
#1663: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:529:
+	if ((basek <= 1024) ||
+	    (state->range_startk + state->range_sizek == basek)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1666: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:532:
+		unsigned long endk = basek + sizek;
+		state->range_sizek = endk - state->range_startk;

WARNING:TYPO_SPELLING: 'mininum' may be misspelled - perhaps 'minimum'?
#1678: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:544:
+/* mininum size of mtrr block that can take hole */
    ^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:545:
+static u64 mtrr_chunk_size __initdata = (256ULL<<20);
                                                ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1688: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:554:
+}
+early_param("mtrr_chunk_size", parse_mtrr_chunk_size_opt);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1700: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:566:
+}
+early_param("mtrr_gran_size", parse_mtrr_gran_size_opt);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1708: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:574:
+		nr_mtrr_spare_reg = simple_strtoul(arg, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:MISPLACED_INIT: __initdata should be placed after result[NUM_RESULT]
#1765: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:631:
+static struct mtrr_cleanup_result __initdata result[NUM_RESULT];

WARNING:MISPLACED_INIT: __initdata should be placed after min_loss_pfn[RANGE_NUM]
#1766: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:632:
+static unsigned long __initdata min_loss_pfn[RANGE_NUM];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1776: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:642:
+	for (i = 0; i < num_var_ranges; i++) {
+

WARNING:SUSPECT_COMMA_SEMICOLON: Possible comma where semicolon could be used
#1783: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:649:
+		start_base = to_size_factor(start_base, &start_factor),
+		type = range_state[i].type;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1786: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:652:
+		printk(KERN_DEBUG "reg %d, base: %ld%cB, range: %ld%cB, type %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1787: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:653:
+		printk(KERN_DEBUG "reg %d, base: %ld%cB, range: %ld%cB, type %s\n",
+			i, start_base, start_factor,

WARNING:MISPLACED_INIT: __initdata should be placed after range_sums
#1830: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:696:
+static unsigned long __initdata range_sums;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1843: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:709:
+	num_reg = x86_setup_var_mtrrs(range, nr_range,
+						chunk_size, gran_size);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1848: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:714:
+	nr_range_new = x86_get_mtrr_mem_range(range_new, 0,
+				extra_remove_base, extra_remove_size);

CHECK:BRACES: Unbalanced braces around else statement
#1858: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:724:
+	} else

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 32)
#1864: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:730:
+		if (nr_range_new != nr_range ||
[...]
+				result[i].bad = 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1865: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:731:
+		if (nr_range_new != nr_range ||
+			memcmp(range, range_new, sizeof(range)))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1884: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:750:
+	printk(KERN_INFO "%sgran_size: %ld%c \tchunk_size: %ld%c \t",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1885: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:751:
+	printk(KERN_INFO "%sgran_size: %ld%c \tchunk_size: %ld%c \t",
+			result[i].bad ? "*BAD*" : " ",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#1887: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:753:
+	printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ld%c\n",

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#1887: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:753:
+	printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ld%c\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1888: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:754:
+	printk(KERN_CONT "num_reg: %d  \tlose cover RAM: %s%ld%c\n",
+			result[i].num_reg, result[i].bad ? "-" : "",

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1921: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:787:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1922: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:788:
+int __init mtrr_cleanup(unsigned address_bits)

CHECK:CAMELCASE: Avoid CamelCase: <MTRRdefType_MSR>
#1933: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:799:
+	rdmsr(MTRRdefType_MSR, def, dummy);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1952: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:818:
+	printk(KERN_DEBUG "original variable MTRRs\n");

WARNING:TYPO_SPELLING: 'coverred' may be misspelled - perhaps 'covered'?
#1964: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:830:
+	 * [0, 1M) should always be coverred by var mtrr with WB
 	                            ^^^^^^^^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1968: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:834:
+					(1ULL<<(20 - PAGE_SHIFT)) - 1);
 					     ^

WARNING:TYPO_SPELLING: 'coverred' may be misspelled - perhaps 'covered'?
#1973: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:839:
+	printk(KERN_INFO "total RAM coverred: %ldM\n",
 	                            ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1973: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:839:
+	printk(KERN_INFO "total RAM coverred: %ldM\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1985: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:851:
+			printk(KERN_DEBUG "New variable MTRRs\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1989: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:855:
+		printk(KERN_INFO "invalid mtrr_gran_size or mtrr_chunk_size, "

WARNING:SPLIT_STRING: quoted string split across lines
#1990: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:856:
+		printk(KERN_INFO "invalid mtrr_gran_size or mtrr_chunk_size, "
+		       "will find optimal one\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1996: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:862:
+	for (gran_size = (1ULL<<16); gran_size < (1ULL<<32); gran_size <<= 1) {
 	                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1996: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:862:
+	for (gran_size = (1ULL<<16); gran_size < (1ULL<<32); gran_size <<= 1) {
 	                                              ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1997: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:863:
+	for (gran_size = (1ULL<<16); gran_size < (1ULL<<32); gran_size <<= 1) {
+

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1998: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:864:
+		for (chunk_size = gran_size; chunk_size < (1ULL<<32);
 		                                               ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2000: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:866:
+		     chunk_size <<= 1) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2005: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:871:
+			mtrr_calc_range_state(chunk_size, gran_size,
+				      extra_remove_base, extra_remove_size, i);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2008: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:874:
+				printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2019: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:885:
+		printk(KERN_INFO "Found optimal setting for mtrr clean up\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2030: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:896:
+		printk(KERN_DEBUG "New variable MTRRs\n");

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2033: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:899:
+		return 1;
+	} else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2039: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:905:
+	printk(KERN_INFO "mtrr_cleanup: can not find optimal value\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'mtrr_cleanup', this function's name, in a string
#2039: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:905:
+	printk(KERN_INFO "mtrr_cleanup: can not find optimal value\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2040: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:906:
+	printk(KERN_INFO "please specify mtrr_gran_size/mtrr_chunk_size\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2045: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:911:
+int __init mtrr_cleanup(unsigned address_bits)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2058: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:924:
+}
+early_param("disable_mtrr_trim", disable_mtrr_trim_setup);

CHECK:CAMELCASE: Avoid CamelCase: <Tom2Enabled>
#2066: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:932:
+#define Tom2Enabled (1U << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2066: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:932:
+#define Tom2Enabled (1U << 21)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <Tom2ForceMemTypeWB>
#2067: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:933:
+#define Tom2ForceMemTypeWB (1U << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2067: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:933:
+#define Tom2ForceMemTypeWB (1U << 22)

WARNING:LINE_SPACING: Missing a blank line after declarations
#2094: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:960:
+	u64 trim_start, trim_size;
+	trim_start = start_pfn;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2103: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:969:
+}
+/**

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2155: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1021:
+		printk(KERN_INFO "CPU MTRRs all blank - virtualized system.\n");

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2183: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1049:
+		range[nr_range].start = (1ULL<<(32 - PAGE_SHIFT));
 		                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2197: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1063:
+		if (range[i].end + 1 < range[i+1].start)
 		                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2199: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1065:
+							    range[i+1].start);
 							           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2208: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1074:
+		printk(KERN_WARNING "WARNING: BIOS bug: CPU MTRRs don't cover"

WARNING:SPLIT_STRING: quoted string split across lines
#2209: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1075:
+		printk(KERN_WARNING "WARNING: BIOS bug: CPU MTRRs don't cover"
+			" all of memory, losing %lluMB of RAM.\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2215: FILE: arch/x86/kernel/cpu/mtrr/cleanup.c:1081:
+		printk(KERN_INFO "update e820 for mtrr\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 56 warnings, 69 checks, 2160 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156175.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
