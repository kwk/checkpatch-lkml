WARNING:UNKNOWN_COMMIT_ID: Unknown commit id '457b6eb3bf3341d2e143518a0bb99ffbb8d754c4', maybe rebased or not pulled?
#32: 
commit 457b6eb3bf3341d2e143518a0bb99ffbb8d754c4

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#53: 
    The bulk of the changes are #2 and #3, which are interrelated.  #1 could

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#57: 
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#242: FILE: arch/i386/pci/common.c:126:
+static int __devinit set_bf_sort(const struct dmi_system_id *d)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#251: FILE: arch/i386/pci/common.c:139:
+static int __devinit assign_all_busses(const struct dmi_system_id *d)

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#325: FILE: drivers/acpi/thermal.c:1363:
+static int thermal_act(const struct dmi_system_id *d) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#334: FILE: drivers/acpi/thermal.c:1372:
 }
+static int thermal_nocrt(const struct dmi_system_id *d) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#334: FILE: drivers/acpi/thermal.c:1372:
+static int thermal_nocrt(const struct dmi_system_id *d) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#342: FILE: drivers/acpi/thermal.c:1379:
 }
+static int thermal_tzp(const struct dmi_system_id *d) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#342: FILE: drivers/acpi/thermal.c:1379:
+static int thermal_tzp(const struct dmi_system_id *d) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#351: FILE: drivers/acpi/thermal.c:1388:
 }
+static int thermal_psv(const struct dmi_system_id *d) {

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#351: FILE: drivers/acpi/thermal.c:1388:
+static int thermal_psv(const struct dmi_system_id *d) {

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#441: FILE: drivers/char/ipmi/ipmi_si_intf.c:1968:
+static int __devinit decode_dmi(const struct dmi_header *dm,

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#451: FILE: drivers/char/ipmi/ipmi_si_intf.c:2092:
 static void __devinit dmi_find_bmc(void)

CHECK:SPACING: No space is necessary after a cast
#461: FILE: drivers/char/ipmi/ipmi_si_intf.c:2100:
+		rv = decode_dmi((const struct dmi_header *) dev->device_data,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#478: FILE: drivers/firmware/dmi_scan.c:13:
+	const u8 *bp = ((u8 *) dm) + dm->length;

CHECK:SPACING: No space is necessary after a cast
#518: FILE: drivers/firmware/dmi_scan.c:95:
+	const char *d = (const char*) dm;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#518: FILE: drivers/firmware/dmi_scan.c:95:
+	const char *d = (const char*) dm;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#531: FILE: drivers/firmware/dmi_scan.c:110:
+	const u8 *d = (u8*) dm + index;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#531: FILE: drivers/firmware/dmi_scan.c:110:
+	const u8 *d = (u8*) dm + index;

CHECK:SPACING: No space is necessary after a cast
#543: FILE: drivers/firmware/dmi_scan.c:139:
+	const u8 *d = (u8*) dm + index;

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#543: FILE: drivers/firmware/dmi_scan.c:139:
+	const u8 *d = (u8*) dm + index;

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#639: FILE: drivers/firmware/dmi_scan.c:424:
+const struct dmi_device * dmi_find_device(int type, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: drivers/firmware/dmi_scan.c:425:
+const struct dmi_device * dmi_find_device(int type, const char *name,
+				    const struct dmi_device *from)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct dmi_system_id *' should also have an identifier name
#886: FILE: include/linux/dmi.h:57:
+	int (*callback)(const struct dmi_system_id *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#898: FILE: include/linux/dmi.h:74:
+extern int dmi_check_system(const struct dmi_system_id *list);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#899: FILE: include/linux/dmi.h:75:
+extern const char * dmi_get_system_info(int field);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#899: FILE: include/linux/dmi.h:75:
+extern const char * dmi_get_system_info(int field);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#900: FILE: include/linux/dmi.h:76:
+extern const struct dmi_device * dmi_find_device(int type, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#900: FILE: include/linux/dmi.h:76:
+extern const struct dmi_device * dmi_find_device(int type, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: include/linux/dmi.h:77:
+extern const struct dmi_device * dmi_find_device(int type, const char *name,
+	const struct dmi_device *from);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: include/linux/dmi.h:80:
+extern int dmi_name_in_vendors(const char *str);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#914: FILE: include/linux/dmi.h:85:
+static inline const char * dmi_get_system_info(int field) { return NULL; }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#915: FILE: include/linux/dmi.h:86:
+static inline const struct dmi_device * dmi_find_device(int type, const char *name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#916: FILE: include/linux/dmi.h:87:
+static inline const struct dmi_device * dmi_find_device(int type, const char *name,
+	const struct dmi_device *from) { return NULL; }

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 8 warnings, 15 checks, 636 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000384721.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
