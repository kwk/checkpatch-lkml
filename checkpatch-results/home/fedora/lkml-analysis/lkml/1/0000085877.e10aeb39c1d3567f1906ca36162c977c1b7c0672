ERROR:CODE_INDENT: code indent should use tabs where possible
#97: FILE: arch/mips/jz4740/board-qi_lb60.c:101:
+        unsigned int i;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#97: FILE: arch/mips/jz4740/board-qi_lb60.c:101:
+        unsigned int i;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#98: FILE: arch/mips/jz4740/board-qi_lb60.c:102:
+        for (i = 0; i < 8; i++) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#98: FILE: arch/mips/jz4740/board-qi_lb60.c:102:
+        unsigned int i;
+        for (i = 0; i < 8; i++) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#98: FILE: arch/mips/jz4740/board-qi_lb60.c:102:
+        for (i = 0; i < 8; i++) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#99: FILE: arch/mips/jz4740/board-qi_lb60.c:103:
+                __gpio_as_output(GPIO_KEYOUT_BASE + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: arch/mips/jz4740/board-qi_lb60.c:103:
+                __gpio_as_output(GPIO_KEYOUT_BASE + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#100: FILE: arch/mips/jz4740/board-qi_lb60.c:104:
+                __gpio_set_pin(GPIO_KEYOUT_BASE + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#100: FILE: arch/mips/jz4740/board-qi_lb60.c:104:
+                __gpio_set_pin(GPIO_KEYOUT_BASE + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#101: FILE: arch/mips/jz4740/board-qi_lb60.c:105:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#101: FILE: arch/mips/jz4740/board-qi_lb60.c:105:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#103: FILE: arch/mips/jz4740/board-qi_lb60.c:107:
+        for (i = 0; i < 7; i++){$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: arch/mips/jz4740/board-qi_lb60.c:107:
+        for (i = 0; i < 7; i++){$

ERROR:SPACING: space required before the open brace '{'
#103: FILE: arch/mips/jz4740/board-qi_lb60.c:107:
+        for (i = 0; i < 7; i++){

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#104: FILE: arch/mips/jz4740/board-qi_lb60.c:108:
+                __gpio_as_input(GPIO_KEYIN_BASE + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: arch/mips/jz4740/board-qi_lb60.c:108:
+                __gpio_as_input(GPIO_KEYIN_BASE + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#105: FILE: arch/mips/jz4740/board-qi_lb60.c:109:
+                __gpio_enable_pull(GPIO_KEYIN_BASE + i);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: arch/mips/jz4740/board-qi_lb60.c:109:
+                __gpio_enable_pull(GPIO_KEYIN_BASE + i);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#106: FILE: arch/mips/jz4740/board-qi_lb60.c:110:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#106: FILE: arch/mips/jz4740/board-qi_lb60.c:110:
+        }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#108: FILE: arch/mips/jz4740/board-qi_lb60.c:112:
+        __gpio_as_input(GPIO_KEYIN_8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#108: FILE: arch/mips/jz4740/board-qi_lb60.c:112:
+        __gpio_as_input(GPIO_KEYIN_8);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#109: FILE: arch/mips/jz4740/board-qi_lb60.c:113:
+        __gpio_enable_pull(GPIO_KEYIN_8);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: arch/mips/jz4740/board-qi_lb60.c:113:
+        __gpio_enable_pull(GPIO_KEYIN_8);$

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#126: FILE: drivers/input/keyboard/Kconfig:202:
+config KEYBOARD_MATRIX
+       tristate "GPIO driven matrix keypad support"
+	depends on JZSOC
+       help
+         Enable support for GPIO driven matrix keypad.
+
+         To compile this driver as a module, choose M here: the
+         module will be called matrix_keypad.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#151: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#156: FILE: drivers/input/keyboard/matrix_keypad.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#157: FILE: drivers/input/keyboard/matrix_keypad.c:2:
+ * drivers/input/keyboard/matrix_keypad.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#186: FILE: drivers/input/keyboard/matrix_keypad.c:31:
+	uint32_t last_key_state[MATRIX_MAX_COLS];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#187: FILE: drivers/input/keyboard/matrix_keypad.c:32:
+	uint32_t *keycodes;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#195: FILE: drivers/input/keyboard/matrix_keypad.c:40:
+	uint32_t *key;

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#198: FILE: drivers/input/keyboard/matrix_keypad.c:43:
+	keypad->keycodes = kzalloc(MATRIX_MAX_KEYS * sizeof(int), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:TRAILING_WHITESPACE: trailing whitespace
#217: FILE: drivers/input/keyboard/matrix_keypad.c:62:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#220: FILE: drivers/input/keyboard/matrix_keypad.c:65:
+		gpio_set_value(pdata->col_gpios[i],
+			(on) ? !pdata->active_low : pdata->active_low);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#227: FILE: drivers/input/keyboard/matrix_keypad.c:72:
+	gpio_set_value(pdata->col_gpios[col],
+			(on) ? !pdata->active_low : pdata->active_low);

ERROR:CODE_INDENT: code indent should use tabs where possible
#263: FILE: drivers/input/keyboard/matrix_keypad.c:108:
+^I       ^Icontainer_of(work, struct matrix_keypad, work.work);$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#263: FILE: drivers/input/keyboard/matrix_keypad.c:108:
+^I       ^Icontainer_of(work, struct matrix_keypad, work.work);$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#265: FILE: drivers/input/keyboard/matrix_keypad.c:110:
+	uint32_t new_state[MATRIX_MAX_COLS];

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#275: FILE: drivers/input/keyboard/matrix_keypad.c:120:
+	for (col = 0; col < pdata->num_col_gpios; col++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#285: FILE: drivers/input/keyboard/matrix_keypad.c:130:
+		uint32_t bits_changed;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#286: FILE: drivers/input/keyboard/matrix_keypad.c:131:
+^I^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#296: FILE: drivers/input/keyboard/matrix_keypad.c:141:
+			input_report_key(keypad->input_dev,
+					lookup_keycode(keypad, row, col),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: drivers/input/keyboard/matrix_keypad.c:158:
+	schedule_delayed_work(&keypad->work,
+			msecs_to_jiffies(keypad->pdata->debounce_ms));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#319: FILE: drivers/input/keyboard/matrix_keypad.c:164:
+static int matrix_keypad_suspend(struct platform_device *pdev,
+pm_message_t state)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#349: FILE: drivers/input/keyboard/matrix_keypad.c:194:
+static int __devinit init_matrix_gpio(struct matrix_keypad *keypad)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: drivers/input/keyboard/matrix_keypad.c:204:
+			pr_err("failed to request GPIO%d for COL%d\n",
+					pdata->col_gpios[i], i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: drivers/input/keyboard/matrix_keypad.c:215:
+			pr_err("failed to request GPIO%d for ROW%d\n",
+					pdata->row_gpios[i], i);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: drivers/input/keyboard/matrix_keypad.c:224:
+		err = request_irq(gpio_to_irq(pdata->row_gpios[i]),
+				matrix_keypad_interrupt, IRQF_DISABLED |

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#384: FILE: drivers/input/keyboard/matrix_keypad.c:229:
+			pr_err("Unable to acquire interrupt for GPIO line %i\n",
+				pdata->row_gpios[i]);

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#405: FILE: drivers/input/keyboard/matrix_keypad.c:250:
+static int __devinit matrix_keypad_probe(struct platform_device *pdev)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#412: FILE: drivers/input/keyboard/matrix_keypad.c:257:
+	if ((pdata = pdev->dev.platform_data) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*keypad)...) over kzalloc(sizeof(struct matrix_keypad)...)
#417: FILE: drivers/input/keyboard/matrix_keypad.c:262:
+	keypad = kzalloc(sizeof(struct matrix_keypad), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!keypad"
#418: FILE: drivers/input/keyboard/matrix_keypad.c:263:
+	if (keypad == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#486: FILE: drivers/input/keyboard/matrix_keypad.c:331:
+static int __devinit matrix_keypad_init(void)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#509: FILE: drivers/input/keyboard/qi_lb60_keypad.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/gpio.h> instead of <asm/gpio.h>
#532: FILE: drivers/input/keyboard/qi_lb60_keypad.c:24:
+#include <asm/gpio.h>

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#536: FILE: drivers/input/keyboard/qi_lb60_keypad.c:28:
+static const uint32_t qi_lb60_keymap[] = {

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: drivers/input/keyboard/qi_lb60_keypad.c:82:
+        KEY(7, 0, KEY_4),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: drivers/input/keyboard/qi_lb60_keypad.c:82:
+        KEY(7, 0, KEY_4),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: drivers/input/keyboard/qi_lb60_keypad.c:83:
+        KEY(7, 1, KEY_5),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: drivers/input/keyboard/qi_lb60_keypad.c:83:
+        KEY(7, 1, KEY_5),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#592: FILE: drivers/input/keyboard/qi_lb60_keypad.c:84:
+        KEY(7, 2, KEY_6),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#592: FILE: drivers/input/keyboard/qi_lb60_keypad.c:84:
+        KEY(7, 2, KEY_6),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: drivers/input/keyboard/qi_lb60_keypad.c:85:
+        KEY(7, 3, KEY_7),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#593: FILE: drivers/input/keyboard/qi_lb60_keypad.c:85:
+        KEY(7, 3, KEY_7),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: drivers/input/keyboard/qi_lb60_keypad.c:86:
+        KEY(7, 4, KEY_8),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: drivers/input/keyboard/qi_lb60_keypad.c:86:
+        KEY(7, 4, KEY_8),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: drivers/input/keyboard/qi_lb60_keypad.c:87:
+        KEY(7, 5, KEY_9),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: drivers/input/keyboard/qi_lb60_keypad.c:87:
+        KEY(7, 5, KEY_9),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: drivers/input/keyboard/qi_lb60_keypad.c:88:
+        KEY(7, 6, KEY_LEFT),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: drivers/input/keyboard/qi_lb60_keypad.c:88:
+        KEY(7, 6, KEY_LEFT),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: drivers/input/keyboard/qi_lb60_keypad.c:89:
+        KEY(7, 7, KEY_DOWN),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: drivers/input/keyboard/qi_lb60_keypad.c:89:
+        KEY(7, 7, KEY_DOWN),$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#643: FILE: include/linux/input/matrix_keypad.h:1:
+#ifndef _MATRIX_KEYPAD_H

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#654: FILE: include/linux/input/matrix_keypad.h:12:
+	uint32_t	*key_map;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#657: FILE: include/linux/input/matrix_keypad.h:15:
+	unsigned	row_gpios[MATRIX_MAX_ROWS];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#658: FILE: include/linux/input/matrix_keypad.h:16:
+	unsigned	col_gpios[MATRIX_MAX_COLS];

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'val' may be better as '(val)' to avoid precedence issues
#669: FILE: include/linux/input/matrix_keypad.h:27:
+#define KEY(row, col, val)	((((row) & (MATRIX_MAX_ROWS - 1)) << 28) |\
+				 (((col) & (MATRIX_MAX_COLS - 1)) << 24) |\
+				 (val & 0xffffff))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000085877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 34 warnings, 20 checks, 589 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000085877.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
