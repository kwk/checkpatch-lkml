WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#70: 
------------------------------------------------------------------------------

WARNING:TYPO_SPELLING: 'continously' may be misspelled - perhaps 'continuously'?
#101: 
KernelTop does not have to be started/stopped - it will continously 
                                                        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#230: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#385: FILE: arch/x86/include/asm/hw_irq.h:33:
+extern void perf_counter_interrupt(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:BIT_MACRO: Prefer using the BIT macro
#412: FILE: arch/x86/include/asm/intel_arch_perfmon.h:10:
+#define ARCH_PERFMON_EVENTSEL0_ENABLE			  (1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#413: FILE: arch/x86/include/asm/intel_arch_perfmon.h:11:
+#define ARCH_PERFMON_EVENTSEL_INT			  (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#414: FILE: arch/x86/include/asm/intel_arch_perfmon.h:12:
+#define ARCH_PERFMON_EVENTSEL_OS			  (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#415: FILE: arch/x86/include/asm/intel_arch_perfmon.h:13:
+#define ARCH_PERFMON_EVENTSEL_USR			  (1 << 16)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#422: FILE: arch/x86/include/asm/intel_arch_perfmon.h:17:
+#define ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX ^I^I 0$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#436: FILE: arch/x86/include/asm/intel_arch_perfmon.h:34:
+extern void init_hw_perf_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#437: FILE: arch/x86/include/asm/intel_arch_perfmon.h:35:
+extern void perf_counters_lapic_init(int nmi);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#488: FILE: arch/x86/include/asm/pda.h:33:
+	unsigned apic_perf_irqs;

CHECK:BIT_MACRO: Prefer using the BIT macro
#508: FILE: arch/x86/include/asm/thread_info.h:107:
+#define _TIF_PERF_COUNTERS	(1 << TIF_PERF_COUNTERS)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#517: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#517: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#517: FILE: arch/x86/include/asm/thread_info.h:140:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#622: FILE: arch/x86/kernel/cpu/perf_counter.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#666: FILE: arch/x86/kernel/cpu/perf_counter.c:45:
+const int intel_perfmon_event_map[] =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#667: FILE: arch/x86/kernel/cpu/perf_counter.c:46:
+  [PERF_COUNT_CYCLES]^I^I^I= 0x003c,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#668: FILE: arch/x86/kernel/cpu/perf_counter.c:47:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x4f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#670: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x412e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: arch/x86/kernel/cpu/perf_counter.c:50:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

CHECK:SPACING: No space is necessary after a cast
#716: FILE: arch/x86/kernel/cpu/perf_counter.c:95:
+	hwc->next_count = -((s32) hwc->irq_period);

CHECK:SPACING: No space is necessary after a cast
#818: FILE: arch/x86/kernel/cpu/perf_counter.c:197:
+		(u64) atomic_read(counter->count32 + 1) << 32;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#880: FILE: arch/x86/kernel/cpu/perf_counter.c:259:
+	printk(KERN_INFO "\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#881: FILE: arch/x86/kernel/cpu/perf_counter.c:260:
+	printk(KERN_INFO "CPU#%d: ctrl:       %016llx\n", cpu, ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#882: FILE: arch/x86/kernel/cpu/perf_counter.c:261:
+	printk(KERN_INFO "CPU#%d: status:     %016llx\n", cpu, status);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#883: FILE: arch/x86/kernel/cpu/perf_counter.c:262:
+	printk(KERN_INFO "CPU#%d: overflow:   %016llx\n", cpu, overflow);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#894: FILE: arch/x86/kernel/cpu/perf_counter.c:273:
+		printk(KERN_INFO "CPU#%d: PMC%d ctrl:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#895: FILE: arch/x86/kernel/cpu/perf_counter.c:274:
+		printk(KERN_INFO "CPU#%d: PMC%d ctrl:  %016llx\n",
+			cpu, idx, pmc_ctrl);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#896: FILE: arch/x86/kernel/cpu/perf_counter.c:275:
+		printk(KERN_INFO "CPU#%d: PMC%d count: %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: arch/x86/kernel/cpu/perf_counter.c:276:
+		printk(KERN_INFO "CPU#%d: PMC%d count: %016llx\n",
+			cpu, idx, pmc_count);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#898: FILE: arch/x86/kernel/cpu/perf_counter.c:277:
+		printk(KERN_INFO "CPU#%d: PMC%d next:  %016llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: arch/x86/kernel/cpu/perf_counter.c:278:
+		printk(KERN_INFO "CPU#%d: PMC%d next:  %016llx\n",
+			cpu, idx, next_count);

CHECK:SPACING: No space is necessary after a cast
#933: FILE: arch/x86/kernel/cpu/perf_counter.c:312:
+	val32 = (s32) val;

CHECK:SPACING: No space is necessary after a cast
#945: FILE: arch/x86/kernel/cpu/perf_counter.c:324:
+		u64 *p = (u64 *) &irqdata->data[irqdata->len];

CHECK:SPACING: No space is necessary after a cast
#986: FILE: arch/x86/kernel/cpu/perf_counter.c:365:
+			if (!test_bit(bit, (unsigned long *) overflown) ||

CHECK:SPACING: No space is necessary after a cast
#987: FILE: arch/x86/kernel/cpu/perf_counter.c:366:
+			    test_bit(bit, (unsigned long *) status)) {

CHECK:SPACING: No space is necessary after a cast
#988: FILE: arch/x86/kernel/cpu/perf_counter.c:367:
+				clear_bit(bit, (unsigned long *) status);

CHECK:SPACING: No space is necessary after a cast
#1021: FILE: arch/x86/kernel/cpu/perf_counter.c:400:
+	for_each_bit(bit, (unsigned long *) &status, nr_hw_counters) {

CHECK:SPACING: No space is necessary after a cast
#1024: FILE: arch/x86/kernel/cpu/perf_counter.c:403:
+		clear_bit(bit, (unsigned long *) &status);

WARNING:TYPO_SPELLING: 'initate' may be misspelled - perhaps 'initiate'?
#1046: FILE: arch/x86/kernel/cpu/perf_counter.c:425:
+		 * wakeup_pending and initate a wakeup callback:
 		                      ^^^^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1066: FILE: arch/x86/kernel/cpu/perf_counter.c:445:
+	 * Do not reenable when global enable is off:
 	          ^^^^^^^^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around eax.full
#1168: FILE: arch/x86/kernel/cpu/perf_counter.c:547:
+	cpuid(10, &(eax.full), &ebx, &unused, &unused);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1172: FILE: arch/x86/kernel/cpu/perf_counter.c:551:
+	printk(KERN_INFO "Intel Performance Monitoring support detected.\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1174: FILE: arch/x86/kernel/cpu/perf_counter.c:553:
+	printk(KERN_INFO "... version:      %d\n", eax.split.version_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1175: FILE: arch/x86/kernel/cpu/perf_counter.c:554:
+	printk(KERN_INFO "... num_counters: %d\n", eax.split.num_counters);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#1179: FILE: arch/x86/kernel/cpu/perf_counter.c:558:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1180: FILE: arch/x86/kernel/cpu/perf_counter.c:559:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",
+			nr_hw_counters, MAX_HW_COUNTERS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1185: FILE: arch/x86/kernel/cpu/perf_counter.c:564:
+	printk(KERN_INFO "... bit_width:    %d\n", eax.split.bit_width);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1186: FILE: arch/x86/kernel/cpu/perf_counter.c:565:
+	printk(KERN_INFO "... mask_length:  %d\n", eax.split.mask_length);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1218: FILE: arch/x86/kernel/irq.c:59:
+	seq_printf(p, "CNT: ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1221: FILE: arch/x86/kernel/irq.c:62:
+	seq_printf(p, "  Performance counter interrupts\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1355: FILE: include/linux/perf_counter.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1370: FILE: include/linux/perf_counter.h:16:
+#include <asm/atomic.h>

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1507: FILE: include/linux/perf_counter.h:153:
+extern void perf_counter_task_sched_in(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1508: FILE: include/linux/perf_counter.h:154:
+extern void perf_counter_task_sched_out(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1509: FILE: include/linux/perf_counter.h:155:
+extern void perf_counter_task_tick(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1510: FILE: include/linux/perf_counter.h:156:
+extern void perf_counter_init_task(struct task_struct *task);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1511: FILE: include/linux/perf_counter.h:157:
+extern void perf_counter_notify(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1512: FILE: include/linux/perf_counter.h:158:
+extern void perf_counter_print_debug(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1553: FILE: include/linux/sched.h:2293:
+extern void task_oncpu_function_call(struct task_struct *p,

WARNING:SPACING: Unnecessary space before function pointer arguments
#1554: FILE: include/linux/sched.h:2294:
+				     void (*func) (void *info), void *info);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1556: FILE: include/linux/sched.h:2296:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1645: FILE: kernel/perf_counter.c:1:
+/*

CHECK:SPACING: No space is necessary after a cast
#1704: FILE: kernel/perf_counter.c:60:
+	return (u64) atomic64_read(&counter->count);

CHECK:SPACING: No space is necessary after a cast
#1725: FILE: kernel/perf_counter.c:81:
+	return cntl | ((u64) cnth) << 32;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1782: FILE: kernel/perf_counter.c:138:
+
+

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#1799: FILE: kernel/perf_counter.c:155:
+		 * the removal is always sucessful.
 		                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'preformance' may be misspelled - perhaps 'performance'?
#1834: FILE: kernel/perf_counter.c:190:
+ * Cross CPU call to install and enable a preformance counter
                                           ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#1898: FILE: kernel/perf_counter.c:254:
+		 * the install is always sucessful.
 		                         ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#2091: FILE: kernel/perf_counter.c:447:
+			(unsigned long) counter->usrdata);

CHECK:SPACING: No space is necessary after a cast
#2229: FILE: kernel/perf_counter.c:585:
+	return put_user(cntval, (u64 __user *) buf) ? -EFAULT : sizeof(cntval);

WARNING:MINMAX: min() should probably be min_t(size_t, count, usrdata->len)
#2238: FILE: kernel/perf_counter.c:594:
+	count = min(count, (size_t)usrdata->len);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2452: FILE: kernel/perf_counter.c:808:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2453: FILE: kernel/perf_counter.c:809:
+}
+static void perf_exit_cpu(int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2467: FILE: kernel/perf_counter.c:823:
+	switch (action) {
+

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after perf_cpu_nb
#2485: FILE: kernel/perf_counter.c:841:
+static struct notifier_block __cpuinitdata perf_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2513: FILE: kernel/perf_counter.c:869:
+	err = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#2545: FILE: kernel/perf_counter.c:901:
+	err = strict_strtoul(buf, 10, &val);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2558: FILE: kernel/perf_counter.c:914:
+static SYSDEV_CLASS_ATTR(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2565: FILE: kernel/perf_counter.c:921:
+static SYSDEV_CLASS_ATTR(

WARNING:SPACING: Unnecessary space before function pointer arguments
#2608: FILE: kernel/sched.c:2225:
+			      void (*func) (void *info), void *info)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 41 warnings, 43 checks, 2243 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000195066.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
