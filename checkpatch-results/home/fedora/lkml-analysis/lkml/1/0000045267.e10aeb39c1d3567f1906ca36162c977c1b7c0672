WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/journal.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/journal.c:2:
+ * fs/logfs/journal.c	- journal handling code

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#89: FILE: fs/logfs/journal.c:56:
+	err = btree_insert32(head, seg_no(sb, super->s_sb_ofs[0]), (void *)1,
+			GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: fs/logfs/journal.c:57:
+	BUG_ON(err);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#93: FILE: fs/logfs/journal.c:60:
+	err = btree_insert32(head, seg_no(sb, super->s_sb_ofs[1]), (void *)1,
+			GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#94: FILE: fs/logfs/journal.c:61:
+	BUG_ON(err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#100: FILE: fs/logfs/journal.c:67:
+		err = btree_insert32(head, super->s_journal_seg[i], (void *)1,
+				GFP_KERNEL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#101: FILE: fs/logfs/journal.c:68:
+		BUG_ON(err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#106: FILE: fs/logfs/journal.c:73:
+static void read_dynsb(struct super_block *sb,
+		struct logfs_je_dynsb *dynsb)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#120: FILE: fs/logfs/journal.c:87:
+static void read_anchor(struct super_block *sb,
+		struct logfs_je_anchor *da)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#138: FILE: fs/logfs/journal.c:105:
+static void read_erasecount(struct super_block *sb,
+		struct logfs_je_journal_ec *ec)

CHECK:BRACES: braces {} should be used on all arms of this statement
#183: FILE: fs/logfs/journal.c:150:
+	if (jh->h_compr == COMPR_NONE)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#185: FILE: fs/logfs/journal.c:152:
+	else {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#187: FILE: fs/logfs/journal.c:154:
+		BUG_ON(err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#193: FILE: fs/logfs/journal.c:160:
+static int __read_je_header(struct super_block *sb, u64 ofs,
+		struct logfs_journal_header *jh)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type < JE_FIRST'
#210: FILE: fs/logfs/journal.c:177:
+	if ((type < JE_FIRST) || (type > JE_LAST))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'type > JE_LAST'
#210: FILE: fs/logfs/journal.c:177:
+	if ((type < JE_FIRST) || (type > JE_LAST))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#218: FILE: fs/logfs/journal.c:185:
+static int __read_je_payload(struct super_block *sb, u64 ofs,
+		struct logfs_journal_header *jh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#245: FILE: fs/logfs/journal.c:212:
+static int __read_je(struct super_block *sb, u64 ofs,
+		struct logfs_journal_header *jh)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: fs/logfs/journal.c:251:
+		err = logfs_load_object_aliases(sb, unpack(jh, scratch),
+				datalen);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'datalen > sizeof(super->s_je_array)'
#315: FILE: fs/logfs/journal.c:282:
+		if ((datalen > sizeof(super->s_je_array)) ||
+				(datalen % sizeof(__be64)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#316: FILE: fs/logfs/journal.c:283:
+		if ((datalen > sizeof(super->s_je_array)) ||
+				(datalen % sizeof(__be64)))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#328: FILE: fs/logfs/journal.c:295:
+	BUG_ON(err); /* We should have caught it in the scan loop already */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#409: FILE: fs/logfs/journal.c:376:
+		log_journal("Journal now at %x (ec %x)\n", area->a_segno,
+				area->a_erase_count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#412: FILE: fs/logfs/journal.c:379:
+	BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#418: FILE: fs/logfs/journal.c:385:
+	 * journal_get_free_segment() - nothing to do here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#450: FILE: fs/logfs/journal.c:417:
+static size_t __logfs_write_header(struct logfs_super *super,
+		struct logfs_journal_header *jh, size_t len, size_t datalen,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#466: FILE: fs/logfs/journal.c:433:
+static size_t logfs_write_header(struct logfs_super *super,
+		struct logfs_journal_header *jh, size_t datalen, u16 type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: fs/logfs/journal.c:446:
+static void *logfs_write_erasecount(struct super_block *sb, void *_ec,
+		u16 *type, size_t *len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: fs/logfs/journal.c:460:
+static void account_shadow(void *_shadow, unsigned long _sb, u64 ignore,
+		size_t ignore2)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'account_shadow', this function's name, in a string
#512: FILE: fs/logfs/journal.c:479:
+	log_journal("account_shadow(%llx, %llx, %x) %llx->%llx %x->%x\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#513: FILE: fs/logfs/journal.c:480:
+	log_journal("account_shadow(%llx, %llx, %x) %llx->%llx %x->%x\n",
+			shadow->ino, shadow->bix, shadow->gc_level,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#538: FILE: fs/logfs/journal.c:505:
+	BUG_ON((s64)li->li_used_bytes < 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#542: FILE: fs/logfs/journal.c:509:
+static void *__logfs_write_anchor(struct super_block *sb, void *_da,
+		u16 *type, size_t *len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: fs/logfs/journal.c:529:
+static void *logfs_write_dynsb(struct super_block *sb, void *_dynsb,
+		u16 *type, size_t *len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#580: FILE: fs/logfs/journal.c:547:
+static void write_wbuf(struct super_block *sb, struct logfs_area *area,
+		void *wbuf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#590: FILE: fs/logfs/journal.c:557:
+	ofs = dev_ofs(sb, area->a_segno,
+			area->a_used_bytes & ~(super->s_writesize - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#595: FILE: fs/logfs/journal.c:562:
+	BUG_ON(!page);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#601: FILE: fs/logfs/journal.c:568:
+static void *logfs_write_area(struct super_block *sb, void *_a,
+		u16 *type, size_t *len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: fs/logfs/journal.c:587:
+static void *logfs_write_commit(struct super_block *sb, void *h,
+		u16 *type, size_t *len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: fs/logfs/journal.c:597:
+static size_t __logfs_write_je(struct super_block *sb, void *buf, u16 type,
+		size_t len)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#643: FILE: fs/logfs/journal.c:610:
+		BUG_ON(len > sb->s_blocksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: fs/logfs/journal.c:623:
+static s64 logfs_get_free_bytes(struct logfs_area *area, size_t *bytes,
+		int must_pad)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: fs/logfs/journal.c:645:
+static int logfs_write_je_buf(struct super_block *sb, void *buf, u16 type,
+		size_t buf_len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: fs/logfs/journal.c:667:
+static int logfs_write_je(struct super_block *sb,
+		void* (*write)(struct super_block *sb, void *scratch,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#701: FILE: fs/logfs/journal.c:668:
+		void* (*write)(struct super_block *sb, void *scratch,
+			u16 *type, size_t *len))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: fs/logfs/journal.c:679:
+int write_alias_journal(struct super_block *sb, u64 ino, u64 bix,
+		level_t level, int child_no, __be64 val)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#719: FILE: fs/logfs/journal.c:686:
+	log_aliases("logfs_write_obj_aliases #%x(%llx, %llx, %x, %x) %llx\n",
+			fill, ino, bix, level, child_no, be64_to_cpu(val));

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'logfs_write_obj_aliases', this function's name, in a string
#740: FILE: fs/logfs/journal.c:707:
+	log_journal("logfs_write_obj_aliases: %d aliases to write\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: fs/logfs/journal.c:708:
+	log_journal("logfs_write_obj_aliases: %d aliases to write\n",
+			super->s_no_object_aliases);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#749: FILE: fs/logfs/journal.c:716:
+		err = logfs_write_je_buf(sb, super->s_je, JE_OBJ_ALIAS,
+				super->s_je_fill

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: fs/logfs/journal.c:734:
+	BUG_ON(logfs_super(sb)->s_flags & LOGFS_SB_FLAG_SHUTDOWN);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#819: FILE: fs/logfs/journal.c:786:
+	log_journal("Write commit to %llx\n",
+			be64_to_cpu(super->s_je_array[super->s_no_je - 1]));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#821: FILE: fs/logfs/journal.c:788:
+	BUG_ON(area->a_used_bytes != area->a_written_bytes);

WARNING:RETURN_VOID: void function return statements are not generally useful
#826: FILE: fs/logfs/journal.c:793:
+	return;
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#840: FILE: fs/logfs/journal.c:807:
+			logfs_set_segment_unreserved(sb,
+					super->s_journal_seg[i],

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#860: FILE: fs/logfs/journal.c:827:
+	BUG_ON(err);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 39 checks, 879 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045267.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
