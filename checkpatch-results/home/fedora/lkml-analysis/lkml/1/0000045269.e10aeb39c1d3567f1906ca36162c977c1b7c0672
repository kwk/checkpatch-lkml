WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#29: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#34: FILE: fs/logfs/gc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#35: FILE: fs/logfs/gc.c:2:
+ * fs/logfs/gc.c	- garbage collection code

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#77: FILE: fs/logfs/gc.c:44:
+	case 0: /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#78: FILE: fs/logfs/gc.c:45:
+	case 1: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#79: FILE: fs/logfs/gc.c:46:
+	case 2: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#83: FILE: fs/logfs/gc.c:50:
+	case 6: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#84: FILE: fs/logfs/gc.c:51:
+	case 7: /* fall through */

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#85: FILE: fs/logfs/gc.c:52:
+	case 8: /* fall through */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#90: FILE: fs/logfs/gc.c:57:
+		printk(KERN_ERR"LOGFS: segment of unknown level %x found\n",

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#90: FILE: fs/logfs/gc.c:57:
+		printk(KERN_ERR"LOGFS: segment of unknown level %x found\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: fs/logfs/gc.c:58:
+		printk(KERN_ERR"LOGFS: segment of unknown level %x found\n",
+				gc_level);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#121: FILE: fs/logfs/gc.c:88:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#129: FILE: fs/logfs/gc.c:96:
+static u32 logfs_valid_bytes(struct super_block *sb, u32 segno, u32 *ec,
+		gc_level_t *gc_level)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#136: FILE: fs/logfs/gc.c:103:
+	if (se.ec_level == cpu_to_be32(BADSEG) ||
+			se.valid == cpu_to_be32(RESERVED))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#146: FILE: fs/logfs/gc.c:113:
+static void logfs_cleanse_block(struct super_block *sb, u64 ofs, u64 ino,
+		u64 bix, gc_level_t gc_level)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#153: FILE: fs/logfs/gc.c:120:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#171: FILE: fs/logfs/gc.c:138:
+	BUG_ON(err);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#181: FILE: fs/logfs/gc.c:148:
+			seg_ofs + sizeof(oh) < super->s_segsize; ) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#185: FILE: fs/logfs/gc.c:152:
+		BUG_ON(err);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#215: FILE: fs/logfs/gc.c:182:
+static struct gc_candidate *add_list(struct gc_candidate *cand,
+		struct candidate_list *list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#271: FILE: fs/logfs/gc.c:238:
+	BUG_ON(list->count == 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: fs/logfs/gc.c:275:
+		log_gc_noisy("add reserve segment %x (ec %x) at %llx\n",
+				cand->segno, cand->erase_count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#313: FILE: fs/logfs/gc.c:280:
+			log_gc_noisy("add free segment %x (ec %x) at %llx\n",
+					cand->segno, cand->erase_count,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#322: FILE: fs/logfs/gc.c:289:
+		 * segments that were recently written get ignored */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/logfs/gc.c:298:
+static int add_candidate(struct super_block *sb, u32 segno, u32 valid, u32 ec,
+		u8 dist)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#433: FILE: fs/logfs/gc.c:400:
+	log_gc("GC segment #%02x at %llx, %x required, %x free, %x valid, %llx free\n",
+			segno, (u64)segno << super->s_segshift,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: fs/logfs/gc.c:405:
+	log_gc("GC segment #%02x complete - now %x valid\n", segno,
+			valid - cleaned);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#439: FILE: fs/logfs/gc.c:406:
+	BUG_ON(cleaned != valid);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: fs/logfs/gc.c:462:
+	if (no_free_segments(sb) >= target &&
+			super->s_no_object_aliases < MAX_OBJ_ALIASES)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using '__logfs_gc_pass', this function's name, in a string
#498: FILE: fs/logfs/gc.c:465:
+	log_gc("__logfs_gc_pass(%x)\n", target);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#504: FILE: fs/logfs/gc.c:471:
+		 * diverged */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#535: FILE: fs/logfs/gc.c:502:
+		block = list_entry(super->s_object_alias.next,
+				struct logfs_block, alias_list);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#620: FILE: fs/logfs/gc.c:587:
+			min_journal_ec = min(min_journal_ec,
+					super->s_journal_ec[i]);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#634: FILE: fs/logfs/gc.c:601:
+	if (min_journal_ec > max_reserve_ec + 2 * WL_DELTA) {
+		do_logfs_journal_wl_pass(sb);
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#680: FILE: fs/logfs/gc.c:647:
+			printk(KERN_INFO "interrupted header at %llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#681: FILE: fs/logfs/gc.c:648:
+			printk(KERN_INFO "interrupted header at %llx\n",
+					dev_ofs(sb, segno, ofs));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#686: FILE: fs/logfs/gc.c:653:
+		printk(KERN_INFO "%x bytes unaccounted data found at %llx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#687: FILE: fs/logfs/gc.c:654:
+		printk(KERN_INFO "%x bytes unaccounted data found at %llx\n",
+				ofs - area->a_used_bytes,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: fs/logfs/gc.c:674:
+static void logfs_init_candlist(struct candidate_list *list, int maxcount,
+		int sort_by_ec)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#723: FILE: fs/logfs/gc.c:690:
+	logfs_init_candlist(&super->s_reserve_list,
+			super->s_bad_seg_reserve, 1);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: fs/logfs/gc.c:698:
+static void logfs_cleanup_list(struct super_block *sb,
+		struct candidate_list *list)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#741: FILE: fs/logfs/gc.c:708:
+	BUG_ON(list->rb_tree.rb_node);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 24 warnings, 19 checks, 730 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000045269.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
