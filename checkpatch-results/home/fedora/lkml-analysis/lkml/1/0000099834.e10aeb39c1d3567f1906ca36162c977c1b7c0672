WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
but otherwise is uninteresting.  Last patch converts a couple of filesystems

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: fs/attr.c:103:
+			if (inode->i_op->ftruncate) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#139: FILE: fs/attr.c:104:
+				struct file *filp = NULL;
 				             ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#143: FILE: fs/attr.c:108:
+					filp = attr->ia_file;
 					^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#146: FILE: fs/attr.c:111:
+				error = inode->i_op->ftruncate(filp, open,
 				                               ^^^^

CHECK:BRACES: Unbalanced braces around else statement
#148: FILE: fs/attr.c:113:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#165: FILE: fs/libfs.c:333:
+int simple_ftruncate(struct file *file, int open,
+			struct inode *inode, loff_t offset)

WARNING:SPACING: Unnecessary space before function pointer arguments
#200: FILE: include/linux/fs.h:1530:
+	int (*ftruncate) (struct file *, int, struct inode *, loff_t);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#200: FILE: include/linux/fs.h:1530:
+	int (*ftruncate) (struct file *, int, struct inode *, loff_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#200: FILE: include/linux/fs.h:1530:
+	int (*ftruncate) (struct file *, int, struct inode *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#200: FILE: include/linux/fs.h:1530:
+	int (*ftruncate) (struct file *, int, struct inode *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#200: FILE: include/linux/fs.h:1530:
+	int (*ftruncate) (struct file *, int, struct inode *, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#208: FILE: include/linux/fs.h:2336:
+extern int simple_ftruncate(struct file *file, int open,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#209: FILE: include/linux/fs.h:2337:
+extern int simple_ftruncate(struct file *file, int open,
+			struct inode *inode, loff_t offset);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#217: FILE: include/linux/fs.h:2373:
+extern int inode_truncate_ok(struct inode *, loff_t offset);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#217: FILE: include/linux/fs.h:2373:
+extern int inode_truncate_ok(struct inode *, loff_t offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#229: FILE: include/linux/mm.h:808:
+extern void truncate_pagecache(struct inode * inode, loff_t old, loff_t new);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#229: FILE: include/linux/mm.h:808:
+extern void truncate_pagecache(struct inode * inode, loff_t old, loff_t new);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#231: FILE: include/linux/mm.h:810:
+extern int truncate_blocks(struct inode *inode, loff_t offset);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#450: FILE: mm/truncate.c:478:
+void truncate_pagecache(struct inode * inode, loff_t old, loff_t new)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#489: FILE: mm/truncate.c:517:
+int vmtruncate(struct inode * inode, loff_t offset)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 10 warnings, 8 checks, 418 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000099834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
