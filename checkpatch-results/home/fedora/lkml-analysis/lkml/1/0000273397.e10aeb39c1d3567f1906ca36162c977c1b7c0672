WARNING:TYPO_SPELLING: 'arcitecture' may be misspelled - perhaps 'architecture'?
#28: 
If the arcitecture defines this type to something at least as large as u64
       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
The overall code size increase is minute, as can be guessed from the diffstat

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#96: FILE: include/asm-frv/futex.h:10:
+extern int futex_atomic_op_inuser(int encoded_op, int __user *uaddr, int flags);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#109: FILE: include/asm-generic/futex.h:9:
+futex_atomic_op_inuser (int encoded_op, int __user *uaddr, int flags)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#122: FILE: include/asm-ia64/futex.h:49:
+futex_atomic_op_inuser (int encoded_op, int __user *uaddr, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#148: FILE: include/asm-parisc/futex.h:11:
+futex_atomic_op_inuser (int encoded_op, int __user *uaddr, int flags)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#161: FILE: include/asm-powerpc/futex.h:33:
+static inline int futex_atomic_op_inuser (int encoded_op, int __user *uaddr,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#175: FILE: include/asm-s390/futex.h:10:
+static inline int futex_atomic_op_inuser (int encoded_op, int __user *uaddr,

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#240: FILE: include/linux/futex.h:42:
+#define FUTEX_64_P(op) \
+	(sizeof(futex_val_t) >= sizeof(u64) && (op & FUTEX_64_FLAG))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#282: FILE: include/linux/syscalls.h:178:
+asmlinkage long sys_futex(void __user *uaddr, int op, unsigned long val,
+			struct timespec __user *utime, void __user *uaddr2,

CHECK:SPACING: No space is necessary after a cast
#368: FILE: kernel/futex.c:326:
+		ret = __copy_from_user_inatomic(dest, (u64 __user *) from,

CHECK:SPACING: No space is necessary after a cast
#371: FILE: kernel/futex.c:329:
+		ret = __copy_from_user_inatomic(dest, (u32 __user *) from,

CHECK:BRACES: Unbalanced braces around else statement
#373: FILE: kernel/futex.c:331:
+	else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#375: FILE: kernel/futex.c:333:
+		ret = __copy_from_user_inatomic(&d32, (u32 __user *) from,

WARNING:LINE_SPACING: Missing a blank line after declarations
#375: FILE: kernel/futex.c:333:
+		u32 d32;
+		ret = __copy_from_user_inatomic(&d32, (u32 __user *) from,

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#457: FILE: kernel/futex.c:862:
+		ret = get_user(dummy, (u32 __user *) uaddr2);

CHECK:SPACING: No space is necessary after a cast
#514: FILE: kernel/futex.c:954:
+			ret = get_user(curval, (u32 __user *) uaddr1);

CHECK:SPACING: No space is necessary after a cast
#601: FILE: kernel/futex.c:1239:
+		ret = get_user(uval, (u32 __user *) uaddr);

WARNING:TABSTOP: Statements should start on a tabstop
#677: FILE: kernel/futex.c:1489:
+		  if (get_futex_value_locked(&curval, uaddr, 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (18, 32)
#677: FILE: kernel/futex.c:1489:
+		  if (get_futex_value_locked(&curval, uaddr, 0))
 				goto uaddr_faulted;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#799: FILE: kernel/futex.c:2023:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#813: FILE: kernel/futex_compat.c:180:
+	/* The compatibility interface is used for 32-bit entry points.
+	   Therefore it is not possible to support 64-bit futexes here.  */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#813: FILE: kernel/futex_compat.c:180:
+	   Therefore it is not possible to support 64-bit futexes here.  */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#815: FILE: kernel/futex_compat.c:182:
+		return -ENOSYS;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 10 checks, 634 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000273397.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
