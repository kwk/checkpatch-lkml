WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#53: FILE: ip/iplink_can.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#78: FILE: ip/iplink_can.c:26:
+^I        "\t[ bitrate BITRATE [ sample-point SAMPLE-POINT] ] | \n"$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#78: FILE: ip/iplink_can.c:26:
+	        "\t[ bitrate BITRATE [ sample-point SAMPLE-POINT] ] | \n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#79: FILE: ip/iplink_can.c:27:
+^I        "\t[ tq TQ prop-seg PROP_SEG phase-seg1 PHASE-SEG1\n "$

WARNING:SPLIT_STRING: quoted string split across lines
#80: FILE: ip/iplink_can.c:28:
+	        "\t[ tq TQ prop-seg PROP_SEG phase-seg1 PHASE-SEG1\n "
+		"\t  phase-seg2 PHASE-SEG2 [ sjw SJW ] ]\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#82: FILE: ip/iplink_can.c:30:
+^I        "\t[ loopback { on | off } ]\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#83: FILE: ip/iplink_can.c:31:
+^I        "\t[ listen-only { on | off } ]\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#84: FILE: ip/iplink_can.c:32:
+^I        "\t[ triple-sampling { on | off } ]\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#86: FILE: ip/iplink_can.c:34:
+^I        "\t[ restart-ms TIME-MS ]\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: ip/iplink_can.c:35:
+^I        "\t[ restart ]\n"$

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#114: FILE: ip/iplink_can.c:62:
+static void set_ctrlmode(char* name, char *arg,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#131: FILE: ip/iplink_can.c:79:
+#define _PF(cmflag, cmname)					\
+	if (cm & cmflag) {					\
+		cm &= ~cmflag;					\
+		fprintf(f, "%s%s", cmname, cm ? "," : "");	\
+	}

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cmflag' - possible side-effects?
#131: FILE: ip/iplink_can.c:79:
+#define _PF(cmflag, cmname)					\
+	if (cm & cmflag) {					\
+		cm &= ~cmflag;					\
+		fprintf(f, "%s%s", cmname, cm ? "," : "");	\
+	}

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cmflag' may be better as '(cmflag)' to avoid precedence issues
#131: FILE: ip/iplink_can.c:79:
+#define _PF(cmflag, cmname)					\
+	if (cm & cmflag) {					\
+		cm &= ~cmflag;					\
+		fprintf(f, "%s%s", cmname, cm ? "," : "");	\
+	}

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#211: FILE: ip/iplink_can.c:159:
+			return -1;
+		} else {

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#227: FILE: ip/iplink_can.c:175:
+static const char *can_state_names[] = {

WARNING:SPLIT_STRING: quoted string split across lines
#265: FILE: ip/iplink_can.c:213:
+		fprintf(f, "\n    "
+			"bitrate %d sample-point %.3f ",

ERROR:CODE_INDENT: code indent should use tabs where possible
#266: FILE: ip/iplink_can.c:214:
+^I^I        bt->bitrate, (float)bt->sample_point / 1000.);$

WARNING:SPLIT_STRING: quoted string split across lines
#268: FILE: ip/iplink_can.c:216:
+		fprintf(f, "\n    "
+			"tq %d prop-seg %d phase-seg1 %d phase-seg2 %d sjw %d",

WARNING:SPLIT_STRING: quoted string split across lines
#278: FILE: ip/iplink_can.c:226:
+		fprintf(f, "\n    "
+			"%s: tseg1 %d..%d tseg2 %d..%d "

WARNING:SPLIT_STRING: quoted string split across lines
#279: FILE: ip/iplink_can.c:227:
+			"%s: tseg1 %d..%d tseg2 %d..%d "
+			"sjw 1..%d brp %d..%d brp-inc %d",

ERROR:CODE_INDENT: code indent should use tabs where possible
#280: FILE: ip/iplink_can.c:228:
+^I^I        btc->name, btc->tseg1_min, btc->tseg1_max,$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#291: FILE: ip/iplink_can.c:239:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#301: FILE: ip/iplink_can.c:249:
+		fprintf(f, "\n    "
+			"re-started bus-errors arbit-lost "

WARNING:SPLIT_STRING: quoted string split across lines
#302: FILE: ip/iplink_can.c:250:
+			"re-started bus-errors arbit-lost "
+			"error-warn error-pass bus-off");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#315: FILE: ip/iplink_can.c:263:
+^I.print_xstats ^I= can_print_xstats,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#335: FILE: include/linux/can/netlink.h:1:
+/*

WARNING:TYPO_SPELLING: 'futher' may be misspelled - perhaps 'further'?
#354: FILE: include/linux/can/netlink.h:20:
+ * For futher information, please read chapter "8 BIT TIMING
        ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'segement' may be misspelled - perhaps 'segment'?
#376: FILE: include/linux/can/netlink.h:42:
+	__u32 tseg1_min;	/* Time segement 1 = prop_seg + phase_seg1 */
 	                	        ^^^^^^^^

WARNING:TYPO_SPELLING: 'segement' may be misspelled - perhaps 'segment'?
#378: FILE: include/linux/can/netlink.h:44:
+	__u32 tseg2_min;	/* Time segement 2 = phase_seg2 */
 	                	        ^^^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#415: FILE: include/linux/can/netlink.h:81:
+#define CAN_CTRLMODE_LISTENONLY^I0x2 ^I/* Listen-only mode */$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000126256.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 18 warnings, 3 checks, 393 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000126256.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
