WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
[ Fix a return code in dlmglue.c and change the error translation table into

CHECK:MACRO_ARG_PRECEDENCE: Macro argument '_lockres' may be better as '(_lockres)' to avoid precedence issues
#59: FILE: fs/ocfs2/dlmglue.c:332:
+#define ocfs2_log_dlm_error(_func, _err, _lockres) do {			\
+	mlog(ML_ERROR, "DLM error %d while calling %s on resource %s\n", \
+	     _err, _func, _lockres->l_name);				\
 } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#59: FILE: fs/ocfs2/dlmglue.c:332:
+#define ocfs2_log_dlm_error(_func, _err, _lockres) do {			\
+	mlog(ML_ERROR, "DLM error %d while calling %s on resource %s\n", \
+	     _err, _func, _lockres->l_name);				\
 } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:SPLIT_STRING: quoted string split across lines
#187: FILE: fs/ocfs2/dlmglue.c:2595:
+		mlog(ML_ERROR, "Dlm passes error %d for lock %s, "
+		     "unlock_action %d\n", error, lockres->l_name,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#349: FILE: fs/ocfs2/stackglue.c:141:
+};
+static int dlm_status_to_errno(enum dlm_status status)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:ARRAY_SIZE: Prefer ARRAY_SIZE(status_map)
#351: FILE: fs/ocfs2/stackglue.c:143:
+	BUG_ON(status > (sizeof(status_map) / sizeof(status_map[0])));

The ARRAY_SIZE(foo) macro should be preferred over
sizeof(foo)/sizeof(foo[0]) for finding number of elements in an
array.

The macro is defined in include/linux/kernel.h::

  #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#351: FILE: fs/ocfs2/stackglue.c:143:
+	BUG_ON(status > (sizeof(status_map) / sizeof(status_map[0])));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#358: FILE: fs/ocfs2/stackglue.c:150:
+	BUG_ON(lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lproto"
#358: FILE: fs/ocfs2/stackglue.c:150:
+	BUG_ON(lproto == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#365: FILE: fs/ocfs2/stackglue.c:157:
+	BUG_ON(lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lproto"
#365: FILE: fs/ocfs2/stackglue.c:157:
+	BUG_ON(lproto == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#374: FILE: fs/ocfs2/stackglue.c:166:
+	BUG_ON(lproto == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lproto"
#374: FILE: fs/ocfs2/stackglue.c:166:
+	BUG_ON(lproto == NULL);

WARNING:TYPO_SPELLING: 'succeded' may be misspelled - perhaps 'succeeded'?
#380: FILE: fs/ocfs2/stackglue.c:172:
+	 * unlock_ast() whether the cancel succeded or not.
 	                                   ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#427: FILE: fs/ocfs2/stackglue.c:216:
+	status = dlmlock(dlm, o2dlm_mode, lksb, o2dlm_flags, name, namelen,
+		       o2dlm_lock_ast_wrapper, astarg,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#448: FILE: fs/ocfs2/stackglue.c:234:
+	status = dlmunlock(dlm, lksb, o2dlm_flags,
+			 o2dlm_unlock_ast_wrapper, astarg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 9 warnings, 7 checks, 403 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000310823.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
