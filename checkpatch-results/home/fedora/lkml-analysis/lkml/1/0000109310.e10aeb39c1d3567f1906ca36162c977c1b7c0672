WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#52: FILE: drivers/md/dm-ioband-rangebw.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#81: FILE: drivers/md/dm-ioband-rangebw.c:30:
+static void range_bw_timer_register(struct timer_list *,
+					 unsigned long, unsigned long);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#97: FILE: drivers/md/dm-ioband-rangebw.c:46:
+#define NO_IO_MODE ^I        4$

CHECK:BRACES: braces {} should be used on all arms of this statement
#138: FILE: drivers/md/dm-ioband-rangebw.c:87:
+	if (gp_io_mode == MINBW_IO_MODE)
[...]
+	else if (gp_io_mode == RANGE_IO_MODE)
[...]
+	else if (gp_io_mode == DEFAULT_IO_MODE)
[...]
+	else if (gp_io_mode == NO_IO_MODE) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#198: FILE: drivers/md/dm-ioband-rangebw.c:147:
+	if (gp == dp->g_running_gp) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#200: FILE: drivers/md/dm-ioband-rangebw.c:149:
+		if (gp->c_time_slice_expired == TIME_SLICE_EXPIRED) {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#212: FILE: drivers/md/dm-ioband-rangebw.c:161:
+
+	}

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#242: FILE: drivers/md/dm-ioband-rangebw.c:191:
+		if (waitqueue_active(&p->c_max_bw_over_waitq))

WARNING:TYPO_SPELLING: 'guranteeing' may be misspelled - perhaps 'guaranteeing'?
#250: FILE: drivers/md/dm-ioband-rangebw.c:199:
+ * for guranteeing the range-bw. and check the expiration of local and
        ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'valuse' may be misspelled - perhaps 'values'?
#345: FILE: drivers/md/dm-ioband-rangebw.c:294:
+ * Convert the bw valuse to the number of bw token
                   ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#361: FILE: drivers/md/dm-ioband-rangebw.c:310:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#371: FILE: drivers/md/dm-ioband-rangebw.c:320:
+	list_for_each_entry(p, &dp->g_groups, c_list) {
+

WARNING:RETURN_VOID: void function return statements are not generally useful
#422: FILE: drivers/md/dm-ioband-rangebw.c:371:
+	return;
+}

WARNING:RETURN_VOID: void function return statements are not generally useful
#459: FILE: drivers/md/dm-ioband-rangebw.c:408:
+	return;
+}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#479: FILE: drivers/md/dm-ioband-rangebw.c:428:
+
+}

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#489: FILE: drivers/md/dm-ioband-rangebw.c:438:
+	dp->g_carryover = val/dp->g_token_bucket;
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: drivers/md/dm-ioband-rangebw.c:443:
+static int policy_range_bw_param(struct ioband_group *gp,
+							char *cmd, char *value)

CHECK:BRACES: braces {} should be used on all arms of this statement
#505: FILE: drivers/md/dm-ioband-rangebw.c:454:
+		if (!min || !max)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#507: FILE: drivers/md/dm-ioband-rangebw.c:456:
+		else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#508: FILE: drivers/md/dm-ioband-rangebw.c:457:
+			err1 = strict_strtol(min, 0, &min_val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#509: FILE: drivers/md/dm-ioband-rangebw.c:458:
+			err2 = strict_strtol(max, 0, &max_val);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*gp->c_timer)...) over kmalloc(sizeof(struct timer_list)...)
#562: FILE: drivers/md/dm-ioband-rangebw.c:511:
+	gp->c_timer = kmalloc(sizeof(struct timer_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gp->c_timer"
#563: FILE: drivers/md/dm-ioband-rangebw.c:512:
+	if (gp->c_timer == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gp->c_timer"
#582: FILE: drivers/md/dm-ioband-rangebw.c:531:
+	if (gp->c_timer != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#589: FILE: drivers/md/dm-ioband-rangebw.c:538:
+static void policy_range_bw_show(struct ioband_group *gp, int *szp,
+					char *result, unsigned int maxlen)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: drivers/md/dm-ioband-rangebw.c:546:
+	DMEMIT(" %d :%d:%d", dp->g_token_bucket * dp->g_carryover,
+						gp->c_min_bw, gp->c_max_bw);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: drivers/md/dm-ioband-rangebw.c:556:
+static int range_bw_prepare_token(struct ioband_group *gp,
+						struct bio *bio, int flag)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#630: FILE: drivers/md/dm-ioband-rangebw.c:579:
+void range_bw_timer_register(struct timer_list *ptimer,
+				unsigned long timeover, unsigned long  gp)

WARNING:WAITQUEUE_ACTIVE: waitqueue_active without comment
#658: FILE: drivers/md/dm-ioband-rangebw.c:607:
+	if (waitqueue_active(&group->c_max_bw_over_waitq))

WARNING:TYPO_SPELLING: 'initalize' may be misspelled - perhaps 'initialize'?
#683: FILE: drivers/md/dm-ioband-rangebw.c:632:
+ * g_group_ctr    : To initalize the policy own members of struct ioband_group.
                        ^^^^^^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#699: FILE: drivers/md/dm-ioband-rangebw.c:648:
+	if (argc < 1)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#701: FILE: drivers/md/dm-ioband-rangebw.c:650:
+	else {

WARNING:CONSIDER_KSTRTO: strict_strtol is obsolete, use kstrtol instead
#702: FILE: drivers/md/dm-ioband-rangebw.c:651:
+		r = strict_strtol(argv[0], 0, &val);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 21 checks, 777 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000109310.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
