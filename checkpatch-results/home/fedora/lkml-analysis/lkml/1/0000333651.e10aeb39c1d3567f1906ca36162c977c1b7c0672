CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#73: FILE: include/linux/compiler-gcc.h:60:
+	(__builtin_types_compatible_p(typeof(arg), char)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned char)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#74: FILE: include/linux/compiler-gcc.h:61:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned char)	\
+	 || __builtin_types_compatible_p(typeof(arg), signed char)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#75: FILE: include/linux/compiler-gcc.h:62:
+	 || __builtin_types_compatible_p(typeof(arg), signed char)	\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned short)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#76: FILE: include/linux/compiler-gcc.h:63:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned short)	\
+	 || __builtin_types_compatible_p(typeof(arg), short)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#77: FILE: include/linux/compiler-gcc.h:64:
+	 || __builtin_types_compatible_p(typeof(arg), short)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned int)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#78: FILE: include/linux/compiler-gcc.h:65:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned int)	\
+	 || __builtin_types_compatible_p(typeof(arg), int)		\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#79: FILE: include/linux/compiler-gcc.h:66:
+	 || __builtin_types_compatible_p(typeof(arg), int)		\
+	 || __builtin_types_compatible_p(typeof(arg), unsigned long)	\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#80: FILE: include/linux/compiler-gcc.h:67:
+	 || __builtin_types_compatible_p(typeof(arg), unsigned long)	\
+	 || __builtin_types_compatible_p(typeof(arg), long))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#117: FILE: include/linux/compiler-gcc.h:104:
+#define typesafe_fn_and_arg(fn, arg, ulongtype, safetype, voidtype)	\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((voidtype)(fn)),					\
+		      (fn)),						\
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						   ulongtype),		\
+		      ((void *)(long)(arg)), (arg))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fn' - possible side-effects?
#117: FILE: include/linux/compiler-gcc.h:104:
+#define typesafe_fn_and_arg(fn, arg, ulongtype, safetype, voidtype)	\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((voidtype)(fn)),					\
+		      (fn)),						\
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						   ulongtype),		\
+		      ((void *)(long)(arg)), (arg))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'arg' - possible side-effects?
#117: FILE: include/linux/compiler-gcc.h:104:
+#define typesafe_fn_and_arg(fn, arg, ulongtype, safetype, voidtype)	\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((voidtype)(fn)),					\
+		      (fn)),						\
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						   ulongtype),		\
+		      ((void *)(long)(arg)), (arg))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ulongtype' - possible side-effects?
#117: FILE: include/linux/compiler-gcc.h:104:
+#define typesafe_fn_and_arg(fn, arg, ulongtype, safetype, voidtype)	\
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
+							  safetype)),	\
+		      ((voidtype)(fn)),					\
+		      (fn)),						\
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
+						   ulongtype),		\
+		      ((void *)(long)(arg)), (arg))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#119: FILE: include/linux/compiler-gcc.h:106:
+__builtin_choose_expr((ulong_compatible(arg)				\
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#119: FILE: include/linux/compiler-gcc.h:106:
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 		                                               ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#119: FILE: include/linux/compiler-gcc.h:106:
+		       && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 		                                                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#121: FILE: include/linux/compiler-gcc.h:108:
+						       ulongtype))	\
+		      || (!ulong_compatible(arg)			\

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#122: FILE: include/linux/compiler-gcc.h:109:
+		      || (!ulong_compatible(arg)			\
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#122: FILE: include/linux/compiler-gcc.h:109:
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 			                                          ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#122: FILE: include/linux/compiler-gcc.h:109:
+			  && __builtin_types_compatible_p(typeof(1?(fn):NULL), \
 			                                               ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#126: FILE: include/linux/compiler-gcc.h:113:
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
                                                            ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#126: FILE: include/linux/compiler-gcc.h:113:
+__builtin_choose_expr(__builtin_types_compatible_p(typeof(1?(fn):NULL), \
                                                                 ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#138: FILE: include/linux/compiler-intel.h:33:
+#define typesafe_fn_and_arg(fn, arg, ulongtype, safetype, fntype) \
+	((fntype)(fn)), ((void *)arg)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rettype' - possible side-effects?
#162: FILE: include/linux/kernel.h:397:
+#define callback_and_arg(fn, arg, rettype)		\
+	typesafe_fn_and_arg((fn), (arg),		\
+			    rettype (*)(unsigned long),	\
+			    rettype (*)(typeof(arg)),	\
+			    rettype (*)(void *))

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#164: FILE: include/linux/kernel.h:399:
+			    rettype (*)(unsigned long),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#165: FILE: include/linux/kernel.h:400:
+			    rettype (*)(typeof(arg)),	\

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#166: FILE: include/linux/kernel.h:401:
+			    rettype (*)(void *))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 3 warnings, 21 checks, 97 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333651.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
