CHECK:BIT_MACRO: Prefer using the BIT macro
#76: FILE: arch/arm/mach-pxa/sharpsl_pm.c:79:
+#define MAXCTRL_PD0      (1u << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#77: FILE: arch/arm/mach-pxa/sharpsl_pm.c:80:
+#define MAXCTRL_PD1      (1u << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#78: FILE: arch/arm/mach-pxa/sharpsl_pm.c:81:
+#define MAXCTRL_SGL      (1u << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#79: FILE: arch/arm/mach-pxa/sharpsl_pm.c:82:
+#define MAXCTRL_UNI      (1u << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#82: FILE: arch/arm/mach-pxa/sharpsl_pm.c:84:
+#define MAXCTRL_STR      (1u << 7)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#91: FILE: arch/arm/mach-pxa/sharpsl_pm.c:92:
+	if (machine_is_tosa())
 	    return 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#132: FILE: arch/arm/mach-pxa/sharpsl_pm.c:183:
+	   creeping back up so we try to avoid this here */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sharpsl_pm.battstat.ac_status == APM_AC_ONLINE'
#133: FILE: arch/arm/mach-pxa/sharpsl_pm.c:184:
+	if ((sharpsl_pm.battstat.ac_status == APM_AC_ONLINE)
+	    || (apm_status == APM_BATTERY_STATUS_HIGH)
+	    || percent <= sharpsl_pm.battstat.mainbat_percent) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'apm_status == APM_BATTERY_STATUS_HIGH'
#133: FILE: arch/arm/mach-pxa/sharpsl_pm.c:184:
+	if ((sharpsl_pm.battstat.ac_status == APM_AC_ONLINE)
+	    || (apm_status == APM_BATTERY_STATUS_HIGH)
+	    || percent <= sharpsl_pm.battstat.mainbat_percent) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#134: FILE: arch/arm/mach-pxa/sharpsl_pm.c:185:
+	if ((sharpsl_pm.battstat.ac_status == APM_AC_ONLINE)
+	    || (apm_status == APM_BATTERY_STATUS_HIGH)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#135: FILE: arch/arm/mach-pxa/sharpsl_pm.c:186:
+	    || (apm_status == APM_BATTERY_STATUS_HIGH)
+	    || percent <= sharpsl_pm.battstat.mainbat_percent) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#145: FILE: arch/arm/mach-pxa/sharpsl_pm.c:198:
 	if ((sharpsl_pm.battstat.ac_status != APM_AC_ONLINE)
+	    && ((sharpsl_pm.battstat.mainbat_status == APM_BATTERY_STATUS_LOW)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#146: FILE: arch/arm/mach-pxa/sharpsl_pm.c:199:
+	    && ((sharpsl_pm.battstat.mainbat_status == APM_BATTERY_STATUS_LOW)
+	    || (sharpsl_pm.battstat.mainbat_status == APM_BATTERY_STATUS_CRITICAL))) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#156: FILE: arch/arm/mach-pxa/sharpsl_pm.c:212:
 	if ((sharpsl_pm.battstat.ac_status != APM_AC_ONLINE)
+	     && (sharpsl_pm.battstat.mainbat_status == APM_BATTERY_STATUS_CRITICAL)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#157: FILE: arch/arm/mach-pxa/sharpsl_pm.c:213:
+	     && (sharpsl_pm.battstat.mainbat_status == APM_BATTERY_STATUS_CRITICAL)
+	     && !(sharpsl_pm.flags & SHARPSL_APM_QUEUED)) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#184: FILE: arch/arm/mach-pxa/sharpsl_pm.c:393:
+		for (i = 0; i < (SHARPSL_CNV_VALUE_NUM-1); i++)
 		                                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#231: FILE: arch/arm/mach-pxa/sharpsl_pm.c:437:
+	return sum/3;
 	          ^

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#281: FILE: arch/arm/mach-pxa/sharpsl_pm.c:549:
+	dev_dbg(sharpsl_pm.dev, "Offline Charge Activate = %d\n", sharpsl_pm.flags & SHARPSL_DO_OFFLINE_CHRG);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#312: FILE: arch/arm/mach-pxa/sharpsl_pm.c:586:
+	if (!sharpsl_pm.machinfo->should_wakeup(!(sharpsl_pm.flags & SHARPSL_ALARM_ACTIVE) && alarm_enable)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#328: FILE: arch/arm/mach-pxa/sharpsl_pm.c:619:
+	while (corgi_enter_suspend(alarm_time, alarm_status, state))
 		{}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056666.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 15 checks, 334 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056666.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
