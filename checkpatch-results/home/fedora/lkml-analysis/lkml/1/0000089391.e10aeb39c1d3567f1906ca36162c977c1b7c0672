WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#55: 
 - Rename lzo_decompress to unlzo to match the prototype in decompress/unlzo.h

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#78: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#83: FILE: include/linux/decompress/unlzo.h:1:
+#ifndef DECOMPRESS_UNLZO_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: include/linux/decompress/unlzo.h:5:
+          int(*fill)(void*, unsigned int),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: include/linux/decompress/unlzo.h:5:
+          int(*fill)(void*, unsigned int),$

WARNING:SPACING: missing space after return type
#87: FILE: include/linux/decompress/unlzo.h:5:
+          int(*fill)(void*, unsigned int),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#88: FILE: include/linux/decompress/unlzo.h:6:
+          int(*flush)(void*, unsigned int),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#88: FILE: include/linux/decompress/unlzo.h:6:
+          int(*flush)(void*, unsigned int),$

WARNING:SPACING: missing space after return type
#88: FILE: include/linux/decompress/unlzo.h:6:
+          int(*flush)(void*, unsigned int),

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: include/linux/decompress/unlzo.h:7:
+          unsigned char *output,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: include/linux/decompress/unlzo.h:7:
+          unsigned char *output,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#90: FILE: include/linux/decompress/unlzo.h:8:
+          int *pos,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#90: FILE: include/linux/decompress/unlzo.h:8:
+          int *pos,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: include/linux/decompress/unlzo.h:9:
+          void(*error)(char *x));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: include/linux/decompress/unlzo.h:9:
+          void(*error)(char *x));$

WARNING:SPACING: missing space after return type
#91: FILE: include/linux/decompress/unlzo.h:9:
+          void(*error)(char *x));

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#128: FILE: init/Kconfig:169:
+config KERNEL_LZO
+	bool "LZO"
+	depends on HAVE_KERNEL_LZO
+	help
+	  Its compression ratio is the poorest among the 4. The kernel
+	  size is about about 10% bigger than gzip; however its speed
+	  (both compression and decompression) is the fastest.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:REPEATED_WORD: Possible repeated word: 'about'
#133: FILE: init/Kconfig:174:
+	  size is about about 10% bigger than gzip; however its speed

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#145: FILE: lib/decompress_unlzo.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#169: FILE: lib/decompress_unlzo.c:25:
+ * If not, write to the Free Software Foundation, Inc.,$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#170: FILE: lib/decompress_unlzo.c:26:
+ * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#192: FILE: lib/decompress_unlzo.c:48:
+    { 0x89, 0x4c, 0x5a, 0x4f, 0x00, 0x0d, 0x0a, 0x1a, 0x0a };$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#192: FILE: lib/decompress_unlzo.c:48:
+static const unsigned char lzop_magic[] =
+    { 0x89, 0x4c, 0x5a, 0x4f, 0x00, 0x0d, 0x0a, 0x1a, 0x0a };

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#194: FILE: lib/decompress_unlzo.c:50:
+#define LZO_BLOCK_SIZE        (256*1024l)
                                   ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#211: FILE: lib/decompress_unlzo.c:67:
+	 * method (1) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: lib/decompress_unlzo.c:91:
+                             int (*fill) (void *, unsigned int),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#235: FILE: lib/decompress_unlzo.c:91:
+                             int (*fill) (void *, unsigned int),$

WARNING:SPACING: Unnecessary space before function pointer arguments
#235: FILE: lib/decompress_unlzo.c:91:
+                             int (*fill) (void *, unsigned int),

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: lib/decompress_unlzo.c:92:
+                             int (*flush) (void *, unsigned int),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#236: FILE: lib/decompress_unlzo.c:92:
+                             int (*flush) (void *, unsigned int),$

WARNING:SPACING: Unnecessary space before function pointer arguments
#236: FILE: lib/decompress_unlzo.c:92:
+                             int (*flush) (void *, unsigned int),

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: lib/decompress_unlzo.c:93:
+                             u8 *output, int *posp,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: lib/decompress_unlzo.c:93:
+                             u8 *output, int *posp,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#238: FILE: lib/decompress_unlzo.c:94:
+                             void (*error_fn) (char *x))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#238: FILE: lib/decompress_unlzo.c:94:
+                             void (*error_fn) (char *x))$

WARNING:SPACING: Unnecessary space before function pointer arguments
#238: FILE: lib/decompress_unlzo.c:94:
+                             void (*error_fn) (char *x))

CHECK:BRACES: braces {} should be used on all arms of this statement
#248: FILE: lib/decompress_unlzo.c:104:
+	if (output)
[...]
+	else if (!flush) {
[...]
+	else if (!(out_buf = malloc(LZO_BLOCK_SIZE))) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#254: FILE: lib/decompress_unlzo.c:110:
+	else if (!(out_buf = malloc(LZO_BLOCK_SIZE))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#254: FILE: lib/decompress_unlzo.c:110:
+	}
+	else if (!(out_buf = malloc(LZO_BLOCK_SIZE))) {

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#259: FILE: lib/decompress_unlzo.c:115:
+	if (input && fill) {
[...]
+	else if (input)
[...]
+	else if (!fill || !posp) {
[...]
+	else if (!(in_buf = malloc(lzo1x_worst_compress(LZO_BLOCK_SIZE)))) {
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#263: FILE: lib/decompress_unlzo.c:119:
+	}
+	else if (input)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#269: FILE: lib/decompress_unlzo.c:125:
+	else if (!(in_buf = malloc(lzo1x_worst_compress(LZO_BLOCK_SIZE)))) {

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#269: FILE: lib/decompress_unlzo.c:125:
+	}
+	else if (!(in_buf = malloc(lzo1x_worst_compress(LZO_BLOCK_SIZE)))) {

CHECK:SPACING: No space is necessary after a cast
#318: FILE: lib/decompress_unlzo.c:174:
+		r = lzo1x_decompress_safe((u8 *) in_buf, src_len, out_buf, &tmp);

CHECK:BRACES: braces {} should be used on all arms of this statement
#332: FILE: lib/decompress_unlzo.c:188:
+		if (fill) {
[...]
+		else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#336: FILE: lib/decompress_unlzo.c:192:
+		}
+		else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#376: FILE: lib/lzo/lzo1x_decompress.c:249:
 }
+#ifndef STATIC

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 23 warnings, 6 checks, 289 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000089391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
