WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#46: 
This patch adds the buffered FILEIO subsystem plugin for accessing struct file

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#49: 
It also includes AIO kernel code and O_DIRECT (needs seperate kernel patch for non buffered kernel file I/O),
                                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#54: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#59: FILE: drivers/target/target_core_file.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#82: FILE: drivers/target/target_core_file.c:24:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#83: FILE: drivers/target/target_core_file.c:25:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#87: FILE: drivers/target/target_core_file.c:29:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#117: FILE: drivers/target/target_core_file.c:59:
+		printk(KERN_ERR "Unable to allocate memory for fd_host_t\n");

CHECK:SPACING: No space is necessary after a cast
#125: FILE: drivers/target/target_core_file.c:67:
+	hba->hba_ptr = (void *) fd_host;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#128: FILE: drivers/target/target_core_file.c:70:
+	printk(KERN_INFO "CORE_HBA[%d] - %s FILEIO HBA Driver %s on Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#129: FILE: drivers/target/target_core_file.c:71:
+	printk(KERN_INFO "CORE_HBA[%d] - %s FILEIO HBA Driver %s on Generic"
+		" Target Core Stack %s\n", hba->hba_id,

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#131: FILE: drivers/target/target_core_file.c:73:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached FILEIO HBA: %u to Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#132: FILE: drivers/target/target_core_file.c:74:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached FILEIO HBA: %u to Generic"
+		" Target Core with TCQ Depth: %d MaxSectors: %u\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#148: FILE: drivers/target/target_core_file.c:90:
+		printk(KERN_ERR "hba->hba_ptr is NULL!\n");

CHECK:SPACING: No space is necessary after a cast
#151: FILE: drivers/target/target_core_file.c:93:
+	fd_host = (fd_host_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#153: FILE: drivers/target/target_core_file.c:95:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached FILEIO HBA: %u from Generic"

WARNING:SPLIT_STRING: quoted string split across lines
#154: FILE: drivers/target/target_core_file.c:96:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached FILEIO HBA: %u from Generic"
+		" Target Core\n", hba->hba_id, fd_host->fd_host_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#171: FILE: drivers/target/target_core_file.c:113:
+		printk(KERN_INFO "FILEIO: Using previously claimed %p Major"

WARNING:SPLIT_STRING: quoted string split across lines
#172: FILE: drivers/target/target_core_file.c:114:
+		printk(KERN_INFO "FILEIO: Using previously claimed %p Major"
+			":Minor - %d:%d\n", fd_dev->fd_bd, fd_dev->fd_major,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#175: FILE: drivers/target/target_core_file.c:117:
+		printk(KERN_INFO "FILEIO: Claiming %p Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#176: FILE: drivers/target/target_core_file.c:118:
+		printk(KERN_INFO "FILEIO: Claiming %p Major:Minor - %d:%d\n",
+			fd_dev, fd_dev->fd_major, fd_dev->fd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#179: FILE: drivers/target/target_core_file.c:121:
+		bd = linux_blockdevice_claim(fd_dev->fd_major,
+				fd_dev->fd_minor, (void *)fd_dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#198: FILE: drivers/target/target_core_file.c:140:
+		printk(KERN_INFO "FILEIO: Calling blkdev_put() for Major:Minor"

WARNING:SPLIT_STRING: quoted string split across lines
#199: FILE: drivers/target/target_core_file.c:141:
+		printk(KERN_INFO "FILEIO: Calling blkdev_put() for Major:Minor"
+			" - %d:%d\n", fd_dev->fd_major, fd_dev->fd_minor);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#202: FILE: drivers/target/target_core_file.c:144:
+		printk(KERN_INFO "FILEIO: Releasing Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#203: FILE: drivers/target/target_core_file.c:145:
+		printk(KERN_INFO "FILEIO: Releasing Major:Minor - %d:%d\n",
+			fd_dev->fd_major, fd_dev->fd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: drivers/target/target_core_file.c:147:
+		linux_blockdevice_release(fd_dev->fd_major, fd_dev->fd_minor,
+			(struct block_device *)fd_dev->fd_bd);

CHECK:SPACING: No space is necessary after a cast
#215: FILE: drivers/target/target_core_file.c:157:
+	fd_host_t *fd_host = (fd_host_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#219: FILE: drivers/target/target_core_file.c:161:
+		printk(KERN_ERR "Unable to allocate memory for fd_dev_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#225: FILE: drivers/target/target_core_file.c:167:
+	printk(KERN_INFO "FILEIO: Allocated fd_dev for %p\n", name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#234: FILE: drivers/target/target_core_file.c:176:
+se_device_t *fd_create_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#241: FILE: drivers/target/target_core_file.c:183:
+	fd_dev_t *fd_dev = (fd_dev_t *) p;

CHECK:SPACING: No space is necessary after a cast
#242: FILE: drivers/target/target_core_file.c:184:
+	fd_host_t *fd_host = (fd_host_t *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#257: FILE: drivers/target/target_core_file.c:199:
+		printk(KERN_ERR "getname(%s) failed: %lu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#258: FILE: drivers/target/target_core_file.c:200:
+		printk(KERN_ERR "getname(%s) failed: %lu\n",
+			fd_dev->fd_dev_name, IS_ERR(dev_p));

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#261: FILE: drivers/target/target_core_file.c:203:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#274: FILE: drivers/target/target_core_file.c:216:
+		printk(KERN_ERR "filp_open(%s) failed\n", dev_p);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#286: FILE: drivers/target/target_core_file.c:228:
+		printk(KERN_ERR "FILEIO: Unable to locate struct inode from"

WARNING:SPLIT_STRING: quoted string split across lines
#287: FILE: drivers/target/target_core_file.c:229:
+		printk(KERN_ERR "FILEIO: Unable to locate struct inode from"
+			" struct file\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#297: FILE: drivers/target/target_core_file.c:239:
+			printk(KERN_ERR "FILEIO: Unable to locate struct"

WARNING:SPLIT_STRING: quoted string split across lines
#298: FILE: drivers/target/target_core_file.c:240:
+			printk(KERN_ERR "FILEIO: Unable to locate struct"
+				" block_device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#304: FILE: drivers/target/target_core_file.c:246:
+		printk(KERN_INFO "FILEIO: Claiming %p Major:Minor - %d:%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: drivers/target/target_core_file.c:247:
+		printk(KERN_INFO "FILEIO: Claiming %p Major:Minor - %d:%d\n",
+			fd_dev, fd_dev->fd_major, fd_dev->fd_minor);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#308: FILE: drivers/target/target_core_file.c:250:
+		bd = linux_blockdevice_claim(fd_dev->fd_bd->bd_disk->major,
+					fd_dev->fd_bd->bd_disk->first_minor,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#311: FILE: drivers/target/target_core_file.c:253:
+			printk(KERN_ERR "FILEIO: Unable to claim"

WARNING:SPLIT_STRING: quoted string split across lines
#312: FILE: drivers/target/target_core_file.c:254:
+			printk(KERN_ERR "FILEIO: Unable to claim"
+				" struct block_device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#327: FILE: drivers/target/target_core_file.c:269:
+		printk(KERN_INFO "FILEIO: Using size: %llu bytes from struct"

WARNING:SPLIT_STRING: quoted string split across lines
#328: FILE: drivers/target/target_core_file.c:270:
+		printk(KERN_INFO "FILEIO: Using size: %llu bytes from struct"
+			" block_device blocks: %llu logical_block_size: %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#333: FILE: drivers/target/target_core_file.c:275:
+			printk(KERN_ERR "FILEIO: Missing fd_dev_size="

WARNING:SPLIT_STRING: quoted string split across lines
#334: FILE: drivers/target/target_core_file.c:276:
+			printk(KERN_ERR "FILEIO: Missing fd_dev_size="
+				" parameter, and no backing struct"

WARNING:SPLIT_STRING: quoted string split across lines
#335: FILE: drivers/target/target_core_file.c:277:
+				" parameter, and no backing struct"
+				" block_device\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: drivers/target/target_core_file.c:290:
+	dev = transport_add_device_to_core_hba(hba, &fileio_template,
+				se_dev, dev_flags, (void *)fd_dev);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#355: FILE: drivers/target/target_core_file.c:297:
+	printk(KERN_INFO "CORE_FILE[%u] - Added LIO FILEIO Device ID: %u at %s,"

WARNING:SPLIT_STRING: quoted string split across lines
#356: FILE: drivers/target/target_core_file.c:298:
+	printk(KERN_INFO "CORE_FILE[%u] - Added LIO FILEIO Device ID: %u at %s,"
+		" %llu total bytes\n", fd_host->fd_host_id, fd_dev->fd_dev_id,

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#359: FILE: drivers/target/target_core_file.c:301:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#371: FILE: drivers/target/target_core_file.c:313:
+		iput(inode);
 		^^^^

CHECK:SPACING: No space is necessary after a cast
#382: FILE: drivers/target/target_core_file.c:324:
+	fd_dev_t *fd_dev = (fd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#385: FILE: drivers/target/target_core_file.c:327:
+	printk(KERN_INFO "CORE_FILE[%u] - Activating Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#386: FILE: drivers/target/target_core_file.c:328:
+	printk(KERN_INFO "CORE_FILE[%u] - Activating Device with TCQ: %d at"
+		" FILEIO Device ID: %d\n", fd_host->fd_host_id,

CHECK:SPACING: No space is necessary after a cast
#398: FILE: drivers/target/target_core_file.c:340:
+	fd_dev_t *fd_dev = (fd_dev_t *) dev->dev_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#401: FILE: drivers/target/target_core_file.c:343:
+	printk(KERN_INFO "CORE_FILE[%u] - Deactivating Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#402: FILE: drivers/target/target_core_file.c:344:
+	printk(KERN_INFO "CORE_FILE[%u] - Deactivating Device with TCQ: %d at"
+		" FILEIO Device ID: %d\n", fd_host->fd_host_id,

WARNING:RETURN_VOID: void function return statements are not generally useful
#406: FILE: drivers/target/target_core_file.c:348:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#414: FILE: drivers/target/target_core_file.c:356:
+	fd_dev_t *fd_dev = (fd_dev_t *) p;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#437: FILE: drivers/target/target_core_file.c:379:
+void *fd_allocate_request(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#445: FILE: drivers/target/target_core_file.c:387:
+		printk(KERN_ERR "Unable to allocate fd_request_t\n");

CHECK:SPACING: No space is necessary after a cast
#449: FILE: drivers/target/target_core_file.c:391:
+	fd_req->fd_dev = (fd_dev_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#462: FILE: drivers/target/target_core_file.c:404:
+	fd_dev_t *fdev = (fd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#481: FILE: drivers/target/target_core_file.c:423:
+	fd_dev_t *fd_dev = (fd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#494: FILE: drivers/target/target_core_file.c:436:
+	fd_dev_t *fd_dev = (fd_dev_t *) task->se_dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#510: FILE: drivers/target/target_core_file.c:452:
+	fd_request_t *fd_req = (fd_request_t *) task->transport_req;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#524: FILE: drivers/target/target_core_file.c:466:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				fd_req->fd_scsi_cdb, fd_req->fd_buf, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#531: FILE: drivers/target/target_core_file.c:473:
+		ret = transport_generic_emulate_modesense(TASK_CMD(task),
+				fd_req->fd_scsi_cdb, fd_req->fd_buf, 1,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#539: FILE: drivers/target/target_core_file.c:481:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#540: FILE: drivers/target/target_core_file.c:482:
+			printk(KERN_ERR "Unsupported SA: 0x%02x\n",
+				T_TASK(cmd)->t_task_cdb[1] & 0x1f);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#549: FILE: drivers/target/target_core_file.c:491:
+		ret = transport_generic_emulate_request_sense(cmd,
+				T_TASK(cmd)->t_task_cdb);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#569: FILE: drivers/target/target_core_file.c:511:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for FILEIO\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#570: FILE: drivers/target/target_core_file.c:512:
+		printk(KERN_ERR "Unsupported SCSI Opcode: 0x%02x for FILEIO\n",
+				fd_req->fd_scsi_cdb[0]);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*req->fd_iovs)...) over kzalloc(sizeof(struct iovec)...)
#582: FILE: drivers/target/target_core_file.c:524:
+	req->fd_iovs = kzalloc(sizeof(struct iovec) * req->fd_sg_count,

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#582: FILE: drivers/target/target_core_file.c:524:
+	req->fd_iovs = kzalloc(sizeof(struct iovec) * req->fd_sg_count,
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: drivers/target/target_core_file.c:525:
+	req->fd_iovs = kzalloc(sizeof(struct iovec) * req->fd_sg_count,
+				GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#585: FILE: drivers/target/target_core_file.c:527:
+		printk(KERN_ERR "Unable to allocate req->fd_iovs\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#592: FILE: drivers/target/target_core_file.c:534:
+static inline int fd_seek(

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#607: FILE: drivers/target/target_core_file.c:549:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#608: FILE: drivers/target/target_core_file.c:550:
+	printk(KERN_INFO "lba: %llu : block_size: %d\n", lba, block_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#609: FILE: drivers/target/target_core_file.c:551:
+	printk(KERN_INFO "offset from llseek: %llu\n", offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#610: FILE: drivers/target/target_core_file.c:552:
+	printk(KERN_INFO "(lba * block_size): %llu\n", (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#613: FILE: drivers/target/target_core_file.c:555:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: drivers/target/target_core_file.c:556:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",
+			offset, (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#646: FILE: drivers/target/target_core_file.c:588:
+		printk(KERN_ERR "vfs_readv() returned %d\n", ret);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#653: FILE: drivers/target/target_core_file.c:595:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#659: FILE: drivers/target/target_core_file.c:601:
+	printk(KERN_INFO "Got AIO_READ Response: task: %p\n", task);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#667: FILE: drivers/target/target_core_file.c:609:
+	printk(KERN_WARNING "fd_aio_retry() called for %p\n", kcb);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'fd_aio_retry', this function's name, in a string
#667: FILE: drivers/target/target_core_file.c:609:
+	printk(KERN_WARNING "fd_aio_retry() called for %p\n", kcb);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#676: FILE: drivers/target/target_core_file.c:618:
+	unsigned long long offset, lba = req->fd_lba;;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#694: FILE: drivers/target/target_core_file.c:636:
+	printk(KERN_INFO "lba: %llu : block_size: %d\n", lba, block_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#695: FILE: drivers/target/target_core_file.c:637:
+	printk(KERN_INFO "offset from llseek: %llu\n", offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#696: FILE: drivers/target/target_core_file.c:638:
+	printk(KERN_INFO "(lba * block_size): %llu\n", (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#699: FILE: drivers/target/target_core_file.c:641:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#700: FILE: drivers/target/target_core_file.c:642:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",
+				offset, (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#703: FILE: drivers/target/target_core_file.c:645:
+	printk(KERN_INFO "req->fd_lba: %llu\n", req->fd_lba);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#707: FILE: drivers/target/target_core_file.c:649:
+		printk(KERN_INFO "sg->length: %d sg->page: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#708: FILE: drivers/target/target_core_file.c:650:
+		printk(KERN_INFO "sg->length: %d sg->page: %p\n",
+				sg[i].length, sg[i].page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#712: FILE: drivers/target/target_core_file.c:654:
+		printk(KERN_INFO "iov_iov_len: %d iov_iov_base: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#713: FILE: drivers/target/target_core_file.c:655:
+		printk(KERN_INFO "iov_iov_len: %d iov_iov_base: %p\n",
+			iov->iov_len, iov->iov_base);

CHECK:SPACING: No space is necessary after a cast
#719: FILE: drivers/target/target_core_file.c:661:
+	req->fd_iocb.private = (void *) task;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#723: FILE: drivers/target/target_core_file.c:665:
+	printk(KERN_INFO "Launching AIO_READ: %p iovecs: %p total length:"

WARNING:SPLIT_STRING: quoted string split across lines
#724: FILE: drivers/target/target_core_file.c:666:
+	printk(KERN_INFO "Launching AIO_READ: %p iovecs: %p total length:"
+		" %u\n", &req->fd_iocb, &req->fd_iovs[0], length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#725: FILE: drivers/target/target_core_file.c:667:
+	printk(KERN_INFO "fd->f_pos: %d\n", fd->f_pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#726: FILE: drivers/target/target_core_file.c:668:
+	printk(KERN_INFO "req->fd_iocb.ki_pos: %d\n", req->fd_iocb.ki_pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#731: FILE: drivers/target/target_core_file.c:673:
+	ret = __generic_file_aio_read(&req->fd_iocb, &req->fd_iovs[0],
+			req->fd_sg_count, &fd->f_pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#734: FILE: drivers/target/target_core_file.c:676:
+	printk(KERN_INFO"__generic_file_aio_read() returned %d\n", ret);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#734: FILE: drivers/target/target_core_file.c:676:
+	printk(KERN_INFO"__generic_file_aio_read() returned %d\n", ret);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#740: FILE: drivers/target/target_core_file.c:682:
+		printk(KERN_ERR "ret [%d] != LENGTH [%d]\n", ret, length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#747: FILE: drivers/target/target_core_file.c:689:
+	printk(KERN_INFO "Release reference to pages now..\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#750: FILE: drivers/target/target_core_file.c:692:
+static int fd_sendactor(

CHECK:SPACING: No space is necessary after a cast
#758: FILE: drivers/target/target_core_file.c:700:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#761: FILE: drivers/target/target_core_file.c:703:
+	printk(KERN_INFO "page: %p offset: %lu size: %lu\n", page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: drivers/target/target_core_file.c:704:
+	printk(KERN_INFO "page: %p offset: %lu size: %lu\n", page,
+			offset, size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#766: FILE: drivers/target/target_core_file.c:708:
+	printk(KERN_INFO "page_address(page): %p\n", page_address(page));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#771: FILE: drivers/target/target_core_file.c:713:
+	printk(KERN_INFO "sg[%d:%p].page %p length: %d\n", req->fd_cur_offset,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#772: FILE: drivers/target/target_core_file.c:714:
+	printk(KERN_INFO "sg[%d:%p].page %p length: %d\n", req->fd_cur_offset,
+		&sg[req->fd_cur_offset], sg[req->fd_cur_offset].page,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#776: FILE: drivers/target/target_core_file.c:718:
+	printk(KERN_INFO "fd_cur_size: %u\n", req->fd_cur_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#799: FILE: drivers/target/target_core_file.c:741:
+		printk(KERN_ERR "fd->f_op->sendfile() returned %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#832: FILE: drivers/target/target_core_file.c:774:
+		printk(KERN_ERR "vfs_writev() returned %d\n", ret);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#839: FILE: drivers/target/target_core_file.c:781:
+#if 0

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#864: FILE: drivers/target/target_core_file.c:806:
+	printk(KERN_INFO "lba: %llu : block_size: %d\n", lba, block_size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#865: FILE: drivers/target/target_core_file.c:807:
+	printk(KERN_INFO "offset from llseek: %llu\n", offset);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#866: FILE: drivers/target/target_core_file.c:808:
+	printk(KERN_INFO "(lba * block_size): %llu\n", (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#869: FILE: drivers/target/target_core_file.c:811:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#870: FILE: drivers/target/target_core_file.c:812:
+		printk(KERN_ERR "offset: %llu not equal to LBA: %llu\n",
+			offset, (lba * block_size));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#876: FILE: drivers/target/target_core_file.c:818:
+		printk(KERN_INFO "sg->length: %d sg->page: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/target/target_core_file.c:819:
+		printk(KERN_INFO "sg->length: %d sg->page: %p\n",
+			sg[i].length, sg[i].page);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#882: FILE: drivers/target/target_core_file.c:824:
+		printk(KERN_INFO "iov_iov_len: %d iov_iov_base: %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#883: FILE: drivers/target/target_core_file.c:825:
+		printk(KERN_INFO "iov_iov_len: %d iov_iov_base: %p\n",
+			iov->iov_len, iov->iov_base);

CHECK:SPACING: No space is necessary after a cast
#889: FILE: drivers/target/target_core_file.c:831:
+	req->fd_iocb.private = (void *) task;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#893: FILE: drivers/target/target_core_file.c:835:
+	printk(KERN_INFO "Launching AIO_WRITE: %p iovecs: %p total length:"

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: drivers/target/target_core_file.c:836:
+	printk(KERN_INFO "Launching AIO_WRITE: %p iovecs: %p total length:"
+		" %u\n", &req->fd_iocb, &req->fd_iovs[0], length);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#895: FILE: drivers/target/target_core_file.c:837:
+	printk(KERN_INFO "fd->f_pos: %d\n", fd->f_pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#896: FILE: drivers/target/target_core_file.c:838:
+	printk(KERN_INFO "req->fd_iocb.ki_pos: %d\n", req->fd_iocb.ki_pos);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#901: FILE: drivers/target/target_core_file.c:843:
+	ret = generic_file_aio_write_nolock(&req->fd_iocb, &req->fd_iovs[0],
+			req->fd_sg_count, &fd->f_pos);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#904: FILE: drivers/target/target_core_file.c:846:
+	printk(KERN_INFO "generic_file_aio_write_nolock() returned %d\n", ret);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#910: FILE: drivers/target/target_core_file.c:852:
+		printk(KERN_ERR "ret [%d] != WRITE LENGTH [%d]\n", ret, length);

CHECK:SPACING: No space is necessary after a cast
#919: FILE: drivers/target/target_core_file.c:861:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#955: FILE: drivers/target/target_core_file.c:897:
+	req = (fd_request_t *) task->transport_req;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#961: FILE: drivers/target/target_core_file.c:903:
+ssize_t fd_set_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#966: FILE: drivers/target/target_core_file.c:908:
+	fd_dev_t *fd_dev = (fd_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#972: FILE: drivers/target/target_core_file.c:914:
+		printk(KERN_ERR "Unable to allocate memory for"

WARNING:SPLIT_STRING: quoted string split across lines
#973: FILE: drivers/target/target_core_file.c:915:
+		printk(KERN_ERR "Unable to allocate memory for"
+				" temporary buffer\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#992: FILE: drivers/target/target_core_file.c:934:
+			snprintf(fd_dev->fd_dev_name, FD_MAX_DEV_NAME,
+					"%s", ptr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#993: FILE: drivers/target/target_core_file.c:935:
+			printk(KERN_INFO "FILEIO: Referencing Path: %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#994: FILE: drivers/target/target_core_file.c:936:
+			printk(KERN_INFO "FILEIO: Referencing Path: %s\n",
+					fd_dev->fd_dev_name);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1000: FILE: drivers/target/target_core_file.c:942:
+		if (ptr2) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#1002: FILE: drivers/target/target_core_file.c:944:
+			if (strict_strtoull(ptr, 0, &fd_dev->fd_dev_size) < 0) {

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1003: FILE: drivers/target/target_core_file.c:945:
+				printk(KERN_ERR "strict_strtoull() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#1004: FILE: drivers/target/target_core_file.c:946:
+				printk(KERN_ERR "strict_strtoull() failed for"
+						" fd_dev_size=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1007: FILE: drivers/target/target_core_file.c:949:
+			printk(KERN_INFO "FILEIO: Referencing Size: %llu"

WARNING:SPLIT_STRING: quoted string split across lines
#1008: FILE: drivers/target/target_core_file.c:950:
+			printk(KERN_INFO "FILEIO: Referencing Size: %llu"
+					" bytes\n", fd_dev->fd_dev_size);

CHECK:BRACES: Unbalanced braces around else statement
#1012: FILE: drivers/target/target_core_file.c:954:
+		} else

CHECK:SPACING: No space is necessary after a cast
#1023: FILE: drivers/target/target_core_file.c:965:
+	fd_dev_t *fd_dev = (fd_dev_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1026: FILE: drivers/target/target_core_file.c:968:
+		printk(KERN_ERR "Missing fd_dev_name=\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1033: FILE: drivers/target/target_core_file.c:975:
+ssize_t fd_show_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#1038: FILE: drivers/target/target_core_file.c:980:
+	fd_dev_t *fd_dev = (fd_dev_t *) se_dev->se_dev_su_ptr;

CHECK:SPACING: No space is necessary after a cast
#1062: FILE: drivers/target/target_core_file.c:1004:
+	fd_dev_t *fd_dev = (fd_dev_t *) dev->dev_ptr;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1073: FILE: drivers/target/target_core_file.c:1015:
+	if (fd_dev->fd_bd) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1080: FILE: drivers/target/target_core_file.c:1022:
+	} else

CHECK:SPACING: No space is necessary after a cast
#1091: FILE: drivers/target/target_core_file.c:1033:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1094: FILE: drivers/target/target_core_file.c:1036:
+	req->fd_buf		= (void *) T_TASK(cmd)->t_task_buf;

CHECK:SPACING: No space is necessary after a cast
#1104: FILE: drivers/target/target_core_file.c:1046:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1117: FILE: drivers/target/target_core_file.c:1059:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1131: FILE: drivers/target/target_core_file.c:1073:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1147: FILE: drivers/target/target_core_file.c:1089:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1161: FILE: drivers/target/target_core_file.c:1103:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1175: FILE: drivers/target/target_core_file.c:1117:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1189: FILE: drivers/target/target_core_file.c:1131:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1212: FILE: drivers/target/target_core_file.c:1154:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#1223: FILE: drivers/target/target_core_file.c:1165:
+	fd_request_t *req = (fd_request_t *) task->transport_req;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1292: FILE: include/target/target_core_file.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1316: FILE: include/target/target_core_file.h:25:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1317: FILE: include/target/target_core_file.h:26:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1321: FILE: include/target/target_core_file.h:30:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1340: FILE: include/target/target_core_file.h:49:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1340: FILE: include/target/target_core_file.h:49:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1340: FILE: include/target/target_core_file.h:49:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1340: FILE: include/target/target_core_file.h:49:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1340: FILE: include/target/target_core_file.h:49:
+extern struct block_device *__linux_blockdevice_claim(int, int, void *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1341: FILE: include/target/target_core_file.h:50:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1341: FILE: include/target/target_core_file.h:50:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1341: FILE: include/target/target_core_file.h:50:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1341: FILE: include/target/target_core_file.h:50:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1342: FILE: include/target/target_core_file.h:51:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1342: FILE: include/target/target_core_file.h:51:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1342: FILE: include/target/target_core_file.h:51:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1342: FILE: include/target/target_core_file.h:51:
+extern int linux_blockdevice_release(int, int, struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1343: FILE: include/target/target_core_file.h:52:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1343: FILE: include/target/target_core_file.h:52:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1343: FILE: include/target/target_core_file.h:52:
+extern int linux_blockdevice_check(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1346: FILE: include/target/target_core_file.h:55:
+extern int fd_CDB_inquiry(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1347: FILE: include/target/target_core_file.h:56:
+extern int fd_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1347: FILE: include/target/target_core_file.h:56:
+extern int fd_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1347: FILE: include/target/target_core_file.h:56:
+extern int fd_CDB_none(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1348: FILE: include/target/target_core_file.h:57:
+extern int fd_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1348: FILE: include/target/target_core_file.h:57:
+extern int fd_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1348: FILE: include/target/target_core_file.h:57:
+extern int fd_CDB_read_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1349: FILE: include/target/target_core_file.h:58:
+extern int fd_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1349: FILE: include/target/target_core_file.h:58:
+extern int fd_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1349: FILE: include/target/target_core_file.h:58:
+extern int fd_CDB_read_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1350: FILE: include/target/target_core_file.h:59:
+extern int fd_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1350: FILE: include/target/target_core_file.h:59:
+extern int fd_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1350: FILE: include/target/target_core_file.h:59:
+extern int fd_CDB_write_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1351: FILE: include/target/target_core_file.h:60:
+extern int fd_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1351: FILE: include/target/target_core_file.h:60:
+extern int fd_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1351: FILE: include/target/target_core_file.h:60:
+extern int fd_CDB_write_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1353: FILE: include/target/target_core_file.h:62:
+extern int fd_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1353: FILE: include/target/target_core_file.h:62:
+extern int fd_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1353: FILE: include/target/target_core_file.h:62:
+extern int fd_attach_hba(se_hba_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1354: FILE: include/target/target_core_file.h:63:
+extern int fd_detach_hba(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1354: FILE: include/target/target_core_file.h:63:
+extern int fd_detach_hba(se_hba_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1355: FILE: include/target/target_core_file.h:64:
+extern int fd_claim_phydevice(se_hba_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1355: FILE: include/target/target_core_file.h:64:
+extern int fd_claim_phydevice(se_hba_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1355: FILE: include/target/target_core_file.h:64:
+extern int fd_claim_phydevice(se_hba_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1356: FILE: include/target/target_core_file.h:65:
+extern int fd_release_phydevice(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1356: FILE: include/target/target_core_file.h:65:
+extern int fd_release_phydevice(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1357: FILE: include/target/target_core_file.h:66:
+extern void *fd_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1357: FILE: include/target/target_core_file.h:66:
+extern void *fd_allocate_virtdevice(se_hba_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1357: FILE: include/target/target_core_file.h:66:
+extern void *fd_allocate_virtdevice(se_hba_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1358: FILE: include/target/target_core_file.h:67:
+extern se_device_t *fd_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1358: FILE: include/target/target_core_file.h:67:
+extern se_device_t *fd_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1358: FILE: include/target/target_core_file.h:67:
+extern se_device_t *fd_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1358: FILE: include/target/target_core_file.h:67:
+extern se_device_t *fd_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1359: FILE: include/target/target_core_file.h:68:
+extern se_device_t *fd_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,
+					void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1360: FILE: include/target/target_core_file.h:69:
+extern int fd_activate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1360: FILE: include/target/target_core_file.h:69:
+extern int fd_activate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1361: FILE: include/target/target_core_file.h:70:
+extern void fd_deactivate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1361: FILE: include/target/target_core_file.h:70:
+extern void fd_deactivate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1362: FILE: include/target/target_core_file.h:71:
+extern void fd_free_device(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1362: FILE: include/target/target_core_file.h:71:
+extern void fd_free_device(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1363: FILE: include/target/target_core_file.h:72:
+extern int fd_transport_complete(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1363: FILE: include/target/target_core_file.h:72:
+extern int fd_transport_complete(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1364: FILE: include/target/target_core_file.h:73:
+extern void *fd_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1364: FILE: include/target/target_core_file.h:73:
+extern void *fd_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1364: FILE: include/target/target_core_file.h:73:
+extern void *fd_allocate_request(se_task_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1365: FILE: include/target/target_core_file.h:74:
+extern int fd_do_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1365: FILE: include/target/target_core_file.h:74:
+extern int fd_do_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1366: FILE: include/target/target_core_file.h:75:
+extern void fd_free_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1366: FILE: include/target/target_core_file.h:75:
+extern void fd_free_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1367: FILE: include/target/target_core_file.h:76:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1367: FILE: include/target/target_core_file.h:76:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1367: FILE: include/target/target_core_file.h:76:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1367: FILE: include/target/target_core_file.h:76:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#1367: FILE: include/target/target_core_file.h:76:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1368: FILE: include/target/target_core_file.h:77:
+extern ssize_t fd_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+					const char *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1369: FILE: include/target/target_core_file.h:78:
+extern ssize_t fd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1369: FILE: include/target/target_core_file.h:78:
+extern ssize_t fd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1369: FILE: include/target/target_core_file.h:78:
+extern ssize_t fd_check_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1370: FILE: include/target/target_core_file.h:79:
+extern ssize_t fd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1370: FILE: include/target/target_core_file.h:79:
+extern ssize_t fd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1370: FILE: include/target/target_core_file.h:79:
+extern ssize_t fd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1370: FILE: include/target/target_core_file.h:79:
+extern ssize_t fd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1371: FILE: include/target/target_core_file.h:80:
+extern ssize_t fd_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+					char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1372: FILE: include/target/target_core_file.h:81:
+extern void fd_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1372: FILE: include/target/target_core_file.h:81:
+extern void fd_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1372: FILE: include/target/target_core_file.h:81:
+extern void fd_get_plugin_info(void *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1372: FILE: include/target/target_core_file.h:81:
+extern void fd_get_plugin_info(void *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1373: FILE: include/target/target_core_file.h:82:
+extern void fd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1373: FILE: include/target/target_core_file.h:82:
+extern void fd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1373: FILE: include/target/target_core_file.h:82:
+extern void fd_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1373: FILE: include/target/target_core_file.h:82:
+extern void fd_get_hba_info(se_hba_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1374: FILE: include/target/target_core_file.h:83:
+extern void fd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1374: FILE: include/target/target_core_file.h:83:
+extern void fd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1374: FILE: include/target/target_core_file.h:83:
+extern void fd_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1374: FILE: include/target/target_core_file.h:83:
+extern void fd_get_dev_info(se_device_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1375: FILE: include/target/target_core_file.h:84:
+extern int fd_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1375: FILE: include/target/target_core_file.h:84:
+extern int fd_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1375: FILE: include/target/target_core_file.h:84:
+extern int fd_check_lba(unsigned long long, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1376: FILE: include/target/target_core_file.h:85:
+extern int fd_check_for_SG(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1376: FILE: include/target/target_core_file.h:85:
+extern int fd_check_for_SG(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1377: FILE: include/target/target_core_file.h:86:
+extern unsigned char *fd_get_cdb(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1377: FILE: include/target/target_core_file.h:86:
+extern unsigned char *fd_get_cdb(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1378: FILE: include/target/target_core_file.h:87:
+extern u32 fd_get_blocksize(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1378: FILE: include/target/target_core_file.h:87:
+extern u32 fd_get_blocksize(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1379: FILE: include/target/target_core_file.h:88:
+extern u32 fd_get_device_rev(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1379: FILE: include/target/target_core_file.h:88:
+extern u32 fd_get_device_rev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1380: FILE: include/target/target_core_file.h:89:
+extern u32 fd_get_device_type(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1380: FILE: include/target/target_core_file.h:89:
+extern u32 fd_get_device_type(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1381: FILE: include/target/target_core_file.h:90:
+extern u32 fd_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1381: FILE: include/target/target_core_file.h:90:
+extern u32 fd_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1381: FILE: include/target/target_core_file.h:90:
+extern u32 fd_get_dma_length(u32, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1382: FILE: include/target/target_core_file.h:91:
+extern u32 fd_get_max_sectors(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1382: FILE: include/target/target_core_file.h:91:
+extern u32 fd_get_max_sectors(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1383: FILE: include/target/target_core_file.h:92:
+extern u32 fd_get_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1383: FILE: include/target/target_core_file.h:92:
+extern u32 fd_get_queue_depth(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1384: FILE: include/target/target_core_file.h:93:
+extern u32 fd_get_max_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1384: FILE: include/target/target_core_file.h:93:
+extern u32 fd_get_max_queue_depth(se_device_t *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1390: FILE: include/target/target_core_file.h:99:
+typedef struct fd_request_s {

WARNING:TYPO_SPELLING: 'contingous' may be misspelled - perhaps 'contiguous'?
#1410: FILE: include/target/target_core_file.h:119:
+	/* Data buffer containing scatterlists(s) or contingous
 	                                             ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1411: FILE: include/target/target_core_file.h:120:
+	/* Data buffer containing scatterlists(s) or contingous
+	   memory segments */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1411: FILE: include/target/target_core_file.h:120:
+	   memory segments */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1417: FILE: include/target/target_core_file.h:126:
+typedef struct fd_dev_sg_table_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1427: FILE: include/target/target_core_file.h:136:
+typedef struct fd_dev_s {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1447: FILE: include/target/target_core_file.h:156:
+extern void __fd_get_dev_info(struct fd_dev_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fd_dev_s *' should also have an identifier name
#1447: FILE: include/target/target_core_file.h:156:
+extern void __fd_get_dev_info(struct fd_dev_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1447: FILE: include/target/target_core_file.h:156:
+extern void __fd_get_dev_info(struct fd_dev_s *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1447: FILE: include/target/target_core_file.h:156:
+extern void __fd_get_dev_info(struct fd_dev_s *, char *, int *);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1449: FILE: include/target/target_core_file.h:158:
+typedef struct fd_host_s {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1470: FILE: include/target/target_core_file.h:179:
+/*#warning FIXME v2.8: transport_type for FILEIO will need to change
+  with DIRECT_IO to blockdevs */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1470: FILE: include/target/target_core_file.h:179:
+  with DIRECT_IO to blockdevs */

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 186 warnings, 117 checks, 1447 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073422.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
