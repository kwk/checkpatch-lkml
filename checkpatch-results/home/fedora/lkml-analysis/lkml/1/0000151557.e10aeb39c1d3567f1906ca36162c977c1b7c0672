WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#41: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git perfcounters/core

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#262: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#447: FILE: arch/powerpc/include/asm/hw_irq.h:159:
+extern void perf_counter_do_pending(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#481: FILE: arch/powerpc/include/asm/perf_counter.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#646: FILE: arch/powerpc/kernel/perf_counter.c:1:
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#676: FILE: arch/powerpc/kernel/perf_counter.c:31:
+};
+DEFINE_PER_CPU(struct cpu_hw_counters, cpu_hw_counters);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#726: FILE: arch/powerpc/kernel/perf_counter.c:81:
+		printk(KERN_ERR "oops trying to read PMC%d\n", idx);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#763: FILE: arch/powerpc/kernel/perf_counter.c:118:
+		printk(KERN_ERR "oops trying to write PMC%d\n", idx);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#796: FILE: arch/powerpc/kernel/perf_counter.c:151:
+	value = mask = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#821: FILE: arch/powerpc/kernel/perf_counter.c:176:
+	value = mask = nv = 0;

WARNING:MEMORY_BARRIER: memory barrier without comment
#959: FILE: arch/powerpc/kernel/perf_counter.c:314:
+		mb();

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#989: FILE: arch/powerpc/kernel/perf_counter.c:344:
+	 * Just reenable the PMU with the current MMCR* settings
 	        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1007: FILE: arch/powerpc/kernel/perf_counter.c:362:
+		printk(KERN_ERR "oops compute_mmcr failed\n");

CHECK:CAMELCASE: Avoid CamelCase: <MMCR0_PMCjCE>
#1033: FILE: arch/powerpc/kernel/perf_counter.c:388:
+	mtspr(SPRN_MMCR0, (cpuhw->mmcr[0] & ~(MMCR0_PMC1CE | MMCR0_PMCjCE))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:MEMORY_BARRIER: memory barrier without comment
#1066: FILE: arch/powerpc/kernel/perf_counter.c:421:
+	mb();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1113: FILE: arch/powerpc/kernel/perf_counter.c:468:
+int hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1215: FILE: arch/powerpc/kernel/perf_counter.c:570:
+				cpuhw->counter[i-1] = cpuhw->counter[i];
 				                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1268: FILE: arch/powerpc/kernel/perf_counter.c:623:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1421: FILE: arch/powerpc/kernel/perf_counter.c:776:
+extern struct power_pmu ppc970_pmu;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1422: FILE: arch/powerpc/kernel/perf_counter.c:777:
+extern struct power_pmu power5_pmu;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1423: FILE: arch/powerpc/kernel/perf_counter.c:778:
+extern struct power_pmu power5p_pmu;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1424: FILE: arch/powerpc/kernel/perf_counter.c:779:
+extern struct power_pmu power6_pmu;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1431: FILE: arch/powerpc/kernel/perf_counter.c:786:
+		printk(KERN_ERR "Couldn't init performance monitor subsystem\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1474: FILE: arch/powerpc/kernel/power4-pmu.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1580: FILE: arch/powerpc/kernel/power4-pmu.c:107:
+ * ^I  \SMPL^I        ||\TTC3SEL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1581: FILE: arch/powerpc/kernel/power4-pmu.c:108:
+ * ^I^I        |\TTC_IFU_SEL$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1582: FILE: arch/powerpc/kernel/power4-pmu.c:109:
+ * ^I^I        \TTM2SEL0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1608: FILE: arch/powerpc/kernel/power4-pmu.c:135:
+ *     ^I   1 = ISU2 events needed 0x0400_0000_0000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1612: FILE: arch/powerpc/kernel/power4-pmu.c:139:
+ *     ^I   1 = IFU.L events needed 0x0200_0000_0000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1616: FILE: arch/powerpc/kernel/power4-pmu.c:143:
+ *     ^I   1 = LSU1.L events needed 0x0100_0000_0000$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1628: FILE: arch/powerpc/kernel/power4-pmu.c:155:
+ *     ^I   1 = FPU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1629: FILE: arch/powerpc/kernel/power4-pmu.c:156:
+ * ^I   2 = ISU1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1630: FILE: arch/powerpc/kernel/power4-pmu.c:157:
+ * ^I   3 = IFU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1631: FILE: arch/powerpc/kernel/power4-pmu.c:158:
+ * ^I   4 = IDU0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1632: FILE: arch/powerpc/kernel/power4-pmu.c:159:
+ * ^I   7 = ISU2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1633: FILE: arch/powerpc/kernel/power4-pmu.c:160:
+ * ^I   9 = LSU0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1634: FILE: arch/powerpc/kernel/power4-pmu.c:161:
+ * ^I   c = LSU1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1635: FILE: arch/powerpc/kernel/power4-pmu.c:162:
+ * ^I   f = GPS$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1662: FILE: arch/powerpc/kernel/power4-pmu.c:189:
+	[PM_ISU1_ALT] =
+		    { 0x20080000000000ull, 0x88000000000000ull, PM_ISU1, 0 },

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1665: FILE: arch/powerpc/kernel/power4-pmu.c:192:
+	[PM_IFU_ALT] =
+		    { 0x02200000000000ull, 0x08820000000000ull, PM_IFU, 41 },

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1674: FILE: arch/powerpc/kernel/power4-pmu.c:201:
+	(1<<2) | (1<<3),	/* PMC1: PM_MRK_GRP_DISP, PM_MRK_ST_CMPL */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1674: FILE: arch/powerpc/kernel/power4-pmu.c:201:
+	(1<<2) | (1<<3),	/* PMC1: PM_MRK_GRP_DISP, PM_MRK_ST_CMPL */
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1675: FILE: arch/powerpc/kernel/power4-pmu.c:202:
+	(1<<3) | (1<<5),	/* PMC2: PM_THRESH_TIMEO, PM_MRK_BRU_FIN */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1675: FILE: arch/powerpc/kernel/power4-pmu.c:202:
+	(1<<3) | (1<<5),	/* PMC2: PM_THRESH_TIMEO, PM_MRK_BRU_FIN */
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1676: FILE: arch/powerpc/kernel/power4-pmu.c:203:
+	(1<<3),			/* PMC3: PM_MRK_ST_CMPL_INT */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1677: FILE: arch/powerpc/kernel/power4-pmu.c:204:
+	(1<<4) | (1<<5),	/* PMC4: PM_MRK_GRP_CMPL, PM_MRK_CRU_FIN */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1677: FILE: arch/powerpc/kernel/power4-pmu.c:204:
+	(1<<4) | (1<<5),	/* PMC4: PM_MRK_GRP_CMPL, PM_MRK_CRU_FIN */
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1678: FILE: arch/powerpc/kernel/power4-pmu.c:205:
+	(1<<4) | (1<<5),	/* PMC5: PM_MRK_GRP_TIMEO */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1678: FILE: arch/powerpc/kernel/power4-pmu.c:205:
+	(1<<4) | (1<<5),	/* PMC5: PM_MRK_GRP_TIMEO */
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: arch/powerpc/kernel/power4-pmu.c:206:
+	(1<<3) | (1<<4) | (1<<5),
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: arch/powerpc/kernel/power4-pmu.c:206:
+	(1<<3) | (1<<4) | (1<<5),
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1679: FILE: arch/powerpc/kernel/power4-pmu.c:206:
+	(1<<3) | (1<<4) | (1<<5),
 	                    ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1681: FILE: arch/powerpc/kernel/power4-pmu.c:208:
+	(1<<4) | (1<<5),	/* PMC7: PM_MRK_FPU_FIN, PM_MRK_INST_FIN */
 	  ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1681: FILE: arch/powerpc/kernel/power4-pmu.c:208:
+	(1<<4) | (1<<5),	/* PMC7: PM_MRK_FPU_FIN, PM_MRK_INST_FIN */
 	           ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1682: FILE: arch/powerpc/kernel/power4-pmu.c:209:
+	(1<<4),			/* PMC8: PM_MRK_LSU_FIN */
 	  ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#1696: FILE: arch/powerpc/kernel/power4-pmu.c:223:
+	if (pmc) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#1700: FILE: arch/powerpc/kernel/power4-pmu.c:227:
+			bit = (pmc <= 4)? pmc - 1: 8 - pmc;
 			                ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1700: FILE: arch/powerpc/kernel/power4-pmu.c:227:
+			bit = (pmc <= 4)? pmc - 1: 8 - pmc;
 			                         ^

CHECK:BRACES: Unbalanced braces around else statement
#1705: FILE: arch/powerpc/kernel/power4-pmu.c:232:
+	} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1845: FILE: arch/powerpc/kernel/power4-pmu.c:372:
+	pmc_grp_use[0] = pmc_grp_use[1] = 0;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1932: FILE: arch/powerpc/kernel/power4-pmu.c:459:
+			mmcr1 |= (u64)ttm << (MMCR1_TD_CP_DBG0SEL_SH - 2*byte);
 			                                                ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2037: FILE: arch/powerpc/kernel/power5+-pmu.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2165: FILE: arch/powerpc/kernel/power5+-pmu.c:129:
+static u64 unit_cons[PM_LASTUNIT+1][2] = {
                                 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2206: FILE: arch/powerpc/kernel/power5+-pmu.c:170:
+			fmask = (bit == 6)? 7: 3;
 			                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2206: FILE: arch/powerpc/kernel/power5+-pmu.c:170:
+			fmask = (bit == 6)? 7: 3;
 			                     ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2473: FILE: arch/powerpc/kernel/power5+-pmu.c:437:
+^I[PERF_COUNT_BRANCH_INSTRUCTIONS] = 0x230e4,^I/* BR_ISSUED */ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2495: FILE: arch/powerpc/kernel/power5-pmu.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2627: FILE: arch/powerpc/kernel/power5-pmu.c:133:
+static u64 unit_cons[PM_LASTUNIT+1][2] = {
                                 ^

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#2673: FILE: arch/powerpc/kernel/power5-pmu.c:179:
+			fmask = (bit == 6)? 7: 3;
 			                  ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#2673: FILE: arch/powerpc/kernel/power5-pmu.c:179:
+			fmask = (bit == 6)? 7: 3;
 			                     ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2804: FILE: arch/powerpc/kernel/power5-pmu.c:310:
+	pmc_grp_use[0] = pmc_grp_use[1] = 0;

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2954: FILE: arch/powerpc/kernel/power5-pmu.c:460:
+^I[PERF_COUNT_BRANCH_INSTRUCTIONS] = 0x230e4,^I/* BR_ISSUED */ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2976: FILE: arch/powerpc/kernel/power6-pmu.c:1:
+/*

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#3080: FILE: arch/powerpc/kernel/power6-pmu.c:105:
+			if (0x30 <= psel && psel <= 0x3d) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

ERROR:SPACING: spaces required around that '?' (ctx:VxW)
#3226: FILE: arch/powerpc/kernel/power6-pmu.c:251:
+				((pmc > 2? pmc - 2: pmc + 2) << PM_PMC_SH);
 				         ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#3226: FILE: arch/powerpc/kernel/power6-pmu.c:251:
+				((pmc > 2? pmc - 2: pmc + 2) << PM_PMC_SH);
 				                  ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3243: FILE: arch/powerpc/kernel/power6-pmu.c:268:
+^I[PERF_COUNT_BRANCH_INSTRUCTIONS] = 0x410a0,^I/* BR_PRED */ $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3265: FILE: arch/powerpc/kernel/ppc970-pmu.c:1:
+/*

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3394: FILE: arch/powerpc/kernel/ppc970-pmu.c:130:
+static u64 unit_cons[PM_LASTUNIT+1][2] = {
                                 ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#3458: FILE: arch/powerpc/kernel/ppc970-pmu.c:194:
+^I^I$

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                      ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                            ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#3472: FILE: arch/powerpc/kernel/ppc970-pmu.c:208:
+	unsigned char unitmap[] = { 0, 0<<3, 3<<3, 1<<3, 2<<3, 0|4, 3|4 };
 	                                                             ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3481: FILE: arch/powerpc/kernel/ppc970-pmu.c:217:
+	pmc_grp_use[0] = pmc_grp_use[1] = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3519: FILE: arch/powerpc/kernel/ppc970-pmu.c:255:
+	ttmuse[0] = ttmuse[1] = 0;

CHECK:BRACES: braces {} should be used on all arms of this statement
#3536: FILE: arch/powerpc/kernel/ppc970-pmu.c:272:
+		if (unit <= PM_STS)
[...]
+		else if (unit == PM_LSU0)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#3540: FILE: arch/powerpc/kernel/ppc970-pmu.c:276:
+		else {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#3729: FILE: arch/x86/include/asm/atomic_32.h:252:
+typedef struct {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3747: FILE: arch/x86/include/asm/atomic_32.h:270:
+	asm volatile(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'cmpxchg8b', this function's name, in a string
#3749: FILE: arch/x86/include/asm/atomic_32.h:272:
+		LOCK_PREFIX "cmpxchg8b (%[ptr])\n"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3967: FILE: arch/x86/include/asm/hw_irq.h:32:
+extern void perf_counter_interrupt(void);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4015: FILE: arch/x86/include/asm/perf_counter.h:1:
+#ifndef _ASM_X86_PERF_COUNTER_H

CHECK:BIT_MACRO: Prefer using the BIT macro
#4035: FILE: arch/x86/include/asm/perf_counter.h:21:
+#define ARCH_PERFMON_EVENTSEL0_ENABLE			  (1 << 22)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#4036: FILE: arch/x86/include/asm/perf_counter.h:22:
+#define ARCH_PERFMON_EVENTSEL_INT			  (1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4037: FILE: arch/x86/include/asm/perf_counter.h:23:
+#define ARCH_PERFMON_EVENTSEL_OS			  (1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#4038: FILE: arch/x86/include/asm/perf_counter.h:24:
+#define ARCH_PERFMON_EVENTSEL_USR			  (1 << 16)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4047: FILE: arch/x86/include/asm/perf_counter.h:33:
+#define ARCH_PERFMON_UNHALTED_CORE_CYCLES_INDEX ^I^I 0$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4075: FILE: arch/x86/include/asm/perf_counter.h:61:
+
+

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4101: FILE: arch/x86/include/asm/perf_counter.h:87:
+#define set_perf_counter_pending()	\
+		set_tsk_thread_flag(current, TIF_PERF_COUNTERS);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4105: FILE: arch/x86/include/asm/perf_counter.h:91:
+extern void init_hw_perf_counters(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4106: FILE: arch/x86/include/asm/perf_counter.h:92:
+extern void perf_counters_lapic_init(int nmi);

CHECK:BIT_MACRO: Prefer using the BIT macro
#4129: FILE: arch/x86/include/asm/thread_info.h:110:
+#define _TIF_PERF_COUNTERS	(1 << TIF_PERF_COUNTERS)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4138: FILE: arch/x86/include/asm/thread_info.h:144:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4138: FILE: arch/x86/include/asm/thread_info.h:144:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4138: FILE: arch/x86/include/asm/thread_info.h:144:
+	(_TIF_SIGPENDING|_TIF_MCE_NOTIFY|_TIF_PERF_COUNTERS|_TIF_NOTIFY_RESUME)
 	                                                   ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4267: FILE: arch/x86/kernel/cpu/perf_counter.c:1:
+/*

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4314: FILE: arch/x86/kernel/cpu/perf_counter.c:48:
+	void		(*restore_all)(u64);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4315: FILE: arch/x86/kernel/cpu/perf_counter.c:49:
+	u64		(*get_status)(u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4316: FILE: arch/x86/kernel/cpu/perf_counter.c:50:
+	void		(*ack_status)(u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4317: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+	void		(*enable)(int, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4317: FILE: arch/x86/kernel/cpu/perf_counter.c:51:
+	void		(*enable)(int, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4318: FILE: arch/x86/kernel/cpu/perf_counter.c:52:
+	void		(*disable)(int, u64);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4318: FILE: arch/x86/kernel/cpu/perf_counter.c:52:
+	void		(*disable)(int, u64);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4319: FILE: arch/x86/kernel/cpu/perf_counter.c:53:
+	unsigned	eventsel;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4320: FILE: arch/x86/kernel/cpu/perf_counter.c:54:
+	unsigned	perfctr;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#4321: FILE: arch/x86/kernel/cpu/perf_counter.c:55:
+	u64		(*event_map)(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#4322: FILE: arch/x86/kernel/cpu/perf_counter.c:56:
+	u64		(*raw_event)(u64);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#4338: FILE: arch/x86/kernel/cpu/perf_counter.c:72:
+static const u64 intel_perfmon_event_map[] =
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4339: FILE: arch/x86/kernel/cpu/perf_counter.c:73:
+  [PERF_COUNT_CPU_CYCLES]^I^I= 0x003c,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4340: FILE: arch/x86/kernel/cpu/perf_counter.c:74:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4341: FILE: arch/x86/kernel/cpu/perf_counter.c:75:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x4f2e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4342: FILE: arch/x86/kernel/cpu/perf_counter.c:76:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x412e,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4343: FILE: arch/x86/kernel/cpu/perf_counter.c:77:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4344: FILE: arch/x86/kernel/cpu/perf_counter.c:78:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4345: FILE: arch/x86/kernel/cpu/perf_counter.c:79:
+  [PERF_COUNT_BUS_CYCLES]^I^I= 0x013c,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4359: FILE: arch/x86/kernel/cpu/perf_counter.c:93:
+#define CORE_EVNTSEL_MASK ^I^I\$

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#4371: FILE: arch/x86/kernel/cpu/perf_counter.c:105:
+static const u64 amd_perfmon_event_map[] =
+{

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4372: FILE: arch/x86/kernel/cpu/perf_counter.c:106:
+  [PERF_COUNT_CPU_CYCLES]^I^I= 0x0076,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4373: FILE: arch/x86/kernel/cpu/perf_counter.c:107:
+  [PERF_COUNT_INSTRUCTIONS]^I^I= 0x00c0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4374: FILE: arch/x86/kernel/cpu/perf_counter.c:108:
+  [PERF_COUNT_CACHE_REFERENCES]^I^I= 0x0080,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4375: FILE: arch/x86/kernel/cpu/perf_counter.c:109:
+  [PERF_COUNT_CACHE_MISSES]^I^I= 0x0081,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4376: FILE: arch/x86/kernel/cpu/perf_counter.c:110:
+  [PERF_COUNT_BRANCH_INSTRUCTIONS]^I= 0x00c4,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4377: FILE: arch/x86/kernel/cpu/perf_counter.c:111:
+  [PERF_COUNT_BRANCH_MISSES]^I^I= 0x00c5,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4422: FILE: arch/x86/kernel/cpu/perf_counter.c:156:
+	if (atomic64_cmpxchg(&hwc->prev_count, prev_raw_count,
+					new_raw_count) != prev_raw_count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4544: FILE: arch/x86/kernel/cpu/perf_counter.c:278:
+}
+/*

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4582: FILE: arch/x86/kernel/cpu/perf_counter.c:316:
+}
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4644: FILE: arch/x86/kernel/cpu/perf_counter.c:378:
+	wrmsrl(MSR_ARCH_PERFMON_EVENTSEL0 + idx,
+			config | ARCH_PERFMON_EVENTSEL0_ENABLE);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4678: FILE: arch/x86/kernel/cpu/perf_counter.c:412:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4705: FILE: arch/x86/kernel/cpu/perf_counter.c:439:
+__pmc_generic_disable(struct perf_counter *counter,
+			   struct hw_perf_counter *hwc, unsigned int idx)

WARNING:TYPO_SPELLING: 'reasoable' may be misspelled - perhaps 'reasonable'?
#4728: FILE: arch/x86/kernel/cpu/perf_counter.c:462:
+	 * If we are way outside a reasoable range then just skip forward:
 	                           ^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4749: FILE: arch/x86/kernel/cpu/perf_counter.c:483:
+	err = checking_wrmsrl(hwc->counter_base + idx,
+			     (u64)(-left) & counter_value_mask);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4781: FILE: arch/x86/kernel/cpu/perf_counter.c:515:
+__pmc_generic_enable(struct perf_counter *counter,
+			  struct hw_perf_counter *hwc, int idx)

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4962: FILE: arch/x86/kernel/cpu/perf_counter.c:696:
+#define PERFMON_MAX_INTERRUPTS (100000/HZ)
                                       ^

CHECK:SPACING: No space is necessary after a cast
#4988: FILE: arch/x86/kernel/cpu/perf_counter.c:722:
+		clear_bit(bit, (unsigned long *) &status);

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#5006: FILE: arch/x86/kernel/cpu/perf_counter.c:740:
+	 * Restore - do not reenable when global enable is off or throttled:
 	                    ^^^^^^^^

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#5026: FILE: arch/x86/kernel/cpu/perf_counter.c:760:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5027: FILE: arch/x86/kernel/cpu/perf_counter.c:761:
+			printk(KERN_WARNING "PERFMON: max interrupts exceeded!\n");

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#5210: FILE: arch/x86/kernel/cpu/perf_counter.c:944:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5211: FILE: arch/x86/kernel/cpu/perf_counter.c:945:
+		WARN(1, KERN_ERR "hw perf counters %d > max(%d), clipping!",
+			nr_counters_generic, X86_PMC_MAX_GENERIC);

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5216: FILE: arch/x86/kernel/cpu/perf_counter.c:950:
+	pr_info("... value mask:      %016Lx\n", counter_value_mask);

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#5220: FILE: arch/x86/kernel/cpu/perf_counter.c:954:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5221: FILE: arch/x86/kernel/cpu/perf_counter.c:955:
+		WARN(1, KERN_ERR "hw perf counters fixed %d > max(%d), clipping!",
+			nr_counters_fixed, X86_PMC_MAX_FIXED);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5225: FILE: arch/x86/kernel/cpu/perf_counter.c:959:
+	perf_counter_mask |= ((1LL << nr_counters_fixed)-1) << X86_PMC_IDX_FIXED;
 	                                                ^

WARNING:PRINTF_L: %Lx is non-standard C, use %llx
#5227: FILE: arch/x86/kernel/cpu/perf_counter.c:961:
+	pr_info("... counter mask:    %016Lx\n", perf_counter_mask);

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#5295: FILE: arch/x86/kernel/irq.c:61:
+	seq_printf(p, "CNT: ");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#5298: FILE: arch/x86/kernel/irq.c:64:
+	seq_printf(p, "  Performance counter interrupts\n");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#5374: FILE: arch/x86/kernel/irqinit_32.c:181:
+void init_IRQ(void) __attribute__((weak, alias("native_init_IRQ")));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __alias("native_init_IRQ") over __attribute__((alias("native_init_IRQ")))
#5374: FILE: arch/x86/kernel/irqinit_32.c:181:
+void init_IRQ(void) __attribute__((weak, alias("native_init_IRQ")));

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tsk' - possible side-effects?
#5686: FILE: include/linux/init_task.h:124:
+# define INIT_PERF_COUNTERS(tsk)					\
+	.perf_counter_ctx.counter_list =				\
+		LIST_HEAD_INIT(tsk.perf_counter_ctx.counter_list),	\
+	.perf_counter_ctx.event_list =					\
+		LIST_HEAD_INIT(tsk.perf_counter_ctx.event_list),	\
+	.perf_counter_ctx.lock =					\
+		__SPIN_LOCK_UNLOCKED(tsk.perf_counter_ctx.lock),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5716: FILE: include/linux/kernel_stat.h:84:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5720: FILE: include/linux/kernel_stat.h:88:
+extern void curr_rq_lock_irq_save(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5721: FILE: include/linux/kernel_stat.h:89:
+extern void curr_rq_unlock_irq_restore(unsigned long *flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5722: FILE: include/linux/kernel_stat.h:90:
+extern unsigned long long __task_delta_exec(struct task_struct *tsk, int update);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5734: FILE: include/linux/perf_counter.h:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#5889: FILE: include/linux/perf_counter.h:156:
+#include <asm/atomic.h>

WARNING:SPACING: Unnecessary space before function pointer arguments
#5938: FILE: include/linux/perf_counter.h:205:
+	int (*enable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5939: FILE: include/linux/perf_counter.h:206:
+	void (*disable)			(struct perf_counter *counter);

WARNING:SPACING: Unnecessary space before function pointer arguments
#5940: FILE: include/linux/perf_counter.h:207:
+	void (*read)			(struct perf_counter *counter);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#5975: FILE: include/linux/perf_counter.h:242:
+	struct file			*filp;
 	           			 ^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct perf_counter *' should also have an identifier name
#5996: FILE: include/linux/perf_counter.h:263:
+	void (*destroy)(struct perf_counter *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6049: FILE: include/linux/perf_counter.h:316:
+extern void perf_counter_task_sched_in(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6050: FILE: include/linux/perf_counter.h:317:
+extern void perf_counter_task_sched_out(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6051: FILE: include/linux/perf_counter.h:318:
+extern void perf_counter_task_tick(struct task_struct *task, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6052: FILE: include/linux/perf_counter.h:319:
+extern void perf_counter_init_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6053: FILE: include/linux/perf_counter.h:320:
+extern void perf_counter_exit_task(struct task_struct *child);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6054: FILE: include/linux/perf_counter.h:321:
+extern void perf_counter_notify(struct pt_regs *regs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6055: FILE: include/linux/perf_counter.h:322:
+extern void perf_counter_print_debug(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6056: FILE: include/linux/perf_counter.h:323:
+extern void perf_counter_unthrottle(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6057: FILE: include/linux/perf_counter.h:324:
+extern u64 hw_perf_save_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6058: FILE: include/linux/perf_counter.h:325:
+extern void hw_perf_restore(u64 ctrl);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6059: FILE: include/linux/perf_counter.h:326:
+extern int perf_counter_task_disable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6060: FILE: include/linux/perf_counter.h:327:
+extern int perf_counter_task_enable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6061: FILE: include/linux/perf_counter.h:328:
+extern int hw_perf_group_sched_in(struct perf_counter *group_leader,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6062: FILE: include/linux/perf_counter.h:329:
+extern int hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6065: FILE: include/linux/perf_counter.h:332:
+extern void perf_counter_output(struct perf_counter *counter,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6076: FILE: include/linux/perf_counter.h:343:
+extern void perf_swcounter_event(u32, u64, int, struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6129: FILE: include/linux/sched.h:140:
+extern u64 cpu_nr_migrations(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6160: FILE: include/linux/sched.h:2387:
+extern void task_oncpu_function_call(struct task_struct *p,

WARNING:SPACING: Unnecessary space before function pointer arguments
#6161: FILE: include/linux/sched.h:2388:
+				     void (*func) (void *info), void *info);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6163: FILE: include/linux/sched.h:2390:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6183: FILE: include/linux/syscalls.h:754:
 
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6184: FILE: include/linux/syscalls.h:755:
+asmlinkage long sys_perf_counter_open(

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#6224: FILE: init/Kconfig:948:
+config EVENT_PROFILE
+	bool "Tracepoint profile sources"
+	depends on PERF_COUNTERS && EVENT_TRACER
+	default y
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6302: FILE: kernel/perf_counter.c:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6357: FILE: kernel/perf_counter.c:56:
+int __weak hw_perf_group_sched_in(struct perf_counter *group_leader,
+	       struct perf_cpu_context *cpuctx,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#6398: FILE: kernel/perf_counter.c:97:
+				 &counter->sibling_list, list_entry) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6497: FILE: kernel/perf_counter.c:196:
+
+

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#6514: FILE: kernel/perf_counter.c:213:
+		 * the removal is always sucessful.
 		                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'sucessful' may be misspelled - perhaps 'successful'?
#6817: FILE: kernel/perf_counter.c:516:
+		 * the install is always sucessful.
 		                         ^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#7348: FILE: kernel/perf_counter.c:1047:
+			(unsigned long) counter->usrdata);

CHECK:SPACING: No space is necessary after a cast
#7509: FILE: kernel/perf_counter.c:1208:
+	return put_user(cntval, (u64 __user *) buf) ? -EFAULT : sizeof(cntval);

WARNING:MINMAX: min() should probably be min_t(size_t, count, usrdata->len)
#7518: FILE: kernel/perf_counter.c:1217:
+	count = min(count, (size_t)usrdata->len);

CHECK:SPACING: No space is necessary after a cast
#7668: FILE: kernel/perf_counter.c:1367:
+		u64 *p = (u64 *) &irqdata->data[irqdata->len];

CHECK:BRACES: braces {} should be used on all arms of this statement
#7704: FILE: kernel/perf_counter.c:1403:
+	if (nmi) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#7707: FILE: kernel/perf_counter.c:1406:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7767: FILE: kernel/perf_counter.c:1466:
+	if ((counter->hw_event.exclude_kernel || !regs) &&
+			!counter->hw_event.exclude_user)

WARNING:LINE_SPACING: Missing a blank line after declarations
#7815: FILE: kernel/perf_counter.c:1514:
+	int neg = atomic64_add_negative(nr, &counter->hw.count);
+	if (counter->hw.irq_period && !neg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7844: FILE: kernel/perf_counter.c:1543:
+		perf_swcounter_ctx_event(cpuctx->task_ctx, type, event,
+				nr, nmi, regs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7903: FILE: kernel/perf_counter.c:1602:
+		__hrtimer_start_range_ns(&hwc->hrtimer,
+				ns_to_ktime(hwc->irq_period), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7967: FILE: kernel/perf_counter.c:1666:
+		__hrtimer_start_range_ns(&hwc->hrtimer,
+				ns_to_ktime(hwc->irq_period), 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7978: FILE: kernel/perf_counter.c:1677:
+	task_clock_perf_counter_update(counter,
+			task_clock_perf_counter_val(counter, 0));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#7984: FILE: kernel/perf_counter.c:1683:
+	task_clock_perf_counter_update(counter,
+			task_clock_perf_counter_val(counter, 1));

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#8057: FILE: kernel/perf_counter.c:1756:
+extern void ftrace_profile_disable(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#8057: FILE: kernel/perf_counter.c:1756:
+extern void ftrace_profile_disable(int);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#8188: FILE: kernel/perf_counter.c:1887:
+	else switch (hw_event->type) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8292: FILE: kernel/perf_counter.c:1991:
+	counter->filp = counter_file;
 	         ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8333: FILE: kernel/perf_counter.c:2032:
+inherit_counter(struct perf_counter *parent_counter,
+	      struct task_struct *parent,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8344: FILE: kernel/perf_counter.c:2043:
+	 * which has a filp for sure, which we use as the reference
 	               ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8370: FILE: kernel/perf_counter.c:2069:
+	 * Get a reference to the parent filp - we will fput it
 	                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8372: FILE: kernel/perf_counter.c:2071:
+	 * we are in the parent and we know that the filp still
 	                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8399: FILE: kernel/perf_counter.c:2098:
+static int inherit_group(struct perf_counter *parent_counter,
+	      struct task_struct *parent,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8443: FILE: kernel/perf_counter.c:2142:
+	fput(parent_counter->filp);
 	                     ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#8599: FILE: kernel/perf_counter.c:2298:
+}
+static void perf_counter_exit_cpu(int cpu)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8618: FILE: kernel/perf_counter.c:2317:
+	switch (action) {
+

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after perf_cpu_nb
#8636: FILE: kernel/perf_counter.c:2335:
+static struct notifier_block __cpuinitdata perf_cpu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#8664: FILE: kernel/perf_counter.c:2363:
+	err = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#8696: FILE: kernel/perf_counter.c:2395:
+	err = strict_strtoul(buf, 10, &val);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8709: FILE: kernel/perf_counter.c:2408:
+static SYSDEV_CLASS_ATTR(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#8716: FILE: kernel/perf_counter.c:2415:
+static SYSDEV_CLASS_ATTR(

WARNING:SPACING: Unnecessary space before function pointer arguments
#8820: FILE: kernel/sched.c:2352:
+			      void (*func) (void *info), void *info)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 18 errors, 103 warnings, 112 checks, 8295 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000151557.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
