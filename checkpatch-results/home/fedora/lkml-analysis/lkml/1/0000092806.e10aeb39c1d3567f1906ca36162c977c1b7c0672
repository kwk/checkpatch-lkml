WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#31: 
This is core of the BFQ(B-WF2Q+) scheduler originally implemented by Paolo and

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#84: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#89: FILE: block/elevator-fq.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#100: FILE: block/elevator-fq.c:12:
+ * ^I              Nauman Rafique <nauman@google.com>$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#150: FILE: block/elevator-fq.c:62:
+static inline void bfq_calc_finish(struct io_entity *entity,
+					unsigned long service)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#152: FILE: block/elevator-fq.c:64:
+	BUG_ON(entity->weight == 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#161: FILE: block/elevator-fq.c:73:
+	BUG_ON(entity == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity"
#161: FILE: block/elevator-fq.c:73:
+	BUG_ON(entity == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!entity->my_sched_data"
#162: FILE: block/elevator-fq.c:74:
+	if (entity->my_sched_data == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#180: FILE: block/elevator-fq.c:92:
+	if (node != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#193: FILE: block/elevator-fq.c:105:
+	BUG_ON(entity->tree != root);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#205: FILE: block/elevator-fq.c:117:
+static void bfq_idle_remove(struct io_service_tree *st,
+				struct io_entity *entity)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#209: FILE: block/elevator-fq.c:121:
+	BUG_ON(entity->tree != &st->idle);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#238: FILE: block/elevator-fq.c:150:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#238: FILE: block/elevator-fq.c:150:
+	BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#240: FILE: block/elevator-fq.c:152:
+	while (*node != NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#267: FILE: block/elevator-fq.c:179:
+static inline void bfq_update_min(struct io_entity *entity,
+					struct rb_node *node)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#271: FILE: block/elevator-fq.c:183:
+	if (node != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#313: FILE: block/elevator-fq.c:225:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_right"
#316: FILE: block/elevator-fq.c:228:
+	if (node == parent->rb_left && parent->rb_right != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent->rb_left"
#318: FILE: block/elevator-fq.c:230:
+	else if (parent->rb_left != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#336: FILE: block/elevator-fq.c:248:
+static void bfq_active_insert(struct io_service_tree *st,
+					struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#342: FILE: block/elevator-fq.c:254:
+	if (node->rb_left != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_right"
#344: FILE: block/elevator-fq.c:256:
+	else if (node->rb_right != NULL)

CHECK:BRACES: braces {} should be used on all arms of this statement
#376: FILE: block/elevator-fq.c:288:
+	if (node->rb_right == NULL && node->rb_left == NULL)
[...]
+	else if (node->rb_right == NULL)
[...]
+	else if (node->rb_left == NULL)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#376: FILE: block/elevator-fq.c:288:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#376: FILE: block/elevator-fq.c:288:
+	if (node->rb_right == NULL && node->rb_left == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_right"
#378: FILE: block/elevator-fq.c:290:
+	else if (node->rb_right == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!node->rb_left"
#380: FILE: block/elevator-fq.c:292:
+	else if (node->rb_left == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#382: FILE: block/elevator-fq.c:294:
+	else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "deepest->rb_right"
#384: FILE: block/elevator-fq.c:296:
+		if (deepest->rb_right != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#399: FILE: block/elevator-fq.c:311:
+static void bfq_active_remove(struct io_service_tree *st,
+				struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#406: FILE: block/elevator-fq.c:318:
+	if (node != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: block/elevator-fq.c:328:
+static void bfq_idle_insert(struct io_service_tree *st,
+					struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first_idle"
#421: FILE: block/elevator-fq.c:333:
+	if (first_idle == NULL || bfq_gt(first_idle->finish, entity->finish))

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!last_idle"
#423: FILE: block/elevator-fq.c:335:
+	if (last_idle == NULL || bfq_gt(entity->finish, last_idle->finish))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: block/elevator-fq.c:351:
+static void bfq_forget_entity(struct io_service_tree *st,
+				struct io_entity *entity)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#443: FILE: block/elevator-fq.c:355:
+	BUG_ON(!entity->on_st);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "last_idle"
#476: FILE: block/elevator-fq.c:388:
+	if (RB_EMPTY_ROOT(&st->active) && last_idle != NULL &&

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first_idle"
#487: FILE: block/elevator-fq.c:399:
+	if (first_idle != NULL && !bfq_gt(first_idle->finish, st->vtime))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#491: FILE: block/elevator-fq.c:403:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: block/elevator-fq.c:406:
+__bfq_entity_update_prio(struct io_service_tree *old_st,
+				struct io_entity *entity)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node"
#577: FILE: block/elevator-fq.c:489:
+	while (node != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#583: FILE: block/elevator-fq.c:495:
+		BUG_ON(bfq_gt(entry->min_start, st->vtime));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "node->rb_left"
#585: FILE: block/elevator-fq.c:497:
+		if (node->rb_left != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "first"
#593: FILE: block/elevator-fq.c:505:
+		if (first != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#598: FILE: block/elevator-fq.c:510:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!first"
#598: FILE: block/elevator-fq.c:510:
+	BUG_ON(first == NULL && !RB_EMPTY_ROOT(&st->active));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#618: FILE: block/elevator-fq.c:530:
+	BUG_ON(bfq_gt(entity->start, st->vtime));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#635: FILE: block/elevator-fq.c:547:
+static struct io_entity *bfq_lookup_next_entity(struct io_sched_data *sd,
+						 int extract)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#645: FILE: block/elevator-fq.c:557:
+	BUG_ON(sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sd->active_entity"
#645: FILE: block/elevator-fq.c:557:
+	BUG_ON(sd->active_entity != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#649: FILE: block/elevator-fq.c:561:
+		if (entity != NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#677: FILE: block/elevator-fq.c:589:
+		BUG_ON(entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#677: FILE: block/elevator-fq.c:589:
+		BUG_ON(entity->tree != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#711: FILE: block/elevator-fq.c:623:
+		BUG_ON(entity->on_st);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#750: FILE: block/elevator-fq.c:662:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#750: FILE: block/elevator-fq.c:662:
+	BUG_ON(was_active && entity->tree != NULL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#752: FILE: block/elevator-fq.c:664:
+	if (was_active) {
[...]
+	} else if (entity->tree == &st->active)
[...]
+	else if (entity->tree == &st->idle)
[...]
+	else if (entity->tree != NULL)
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity->tree"
#759: FILE: block/elevator-fq.c:671:
+	else if (entity->tree != NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#760: FILE: block/elevator-fq.c:672:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: block/elevator-fq.c:679:
+	BUG_ON(sd->active_entity == entity);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#788: FILE: block/elevator-fq.c:700:
+	BUG_ON(st->wsum == 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "entity"
#801: FILE: block/elevator-fq.c:713:
+	for (; entity != NULL; entity = st->first_idle)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#810: FILE: block/elevator-fq.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#821: FILE: block/elevator-fq.h:12:
+ * ^I              Nauman Rafique <nauman@google.com>$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#976: FILE: block/elevator-fq.h:167:
+	BUG_ON(idx >= IO_IOPRIO_CLASSES);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#977: FILE: block/elevator-fq.h:168:
+	BUG_ON(sched_data == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sched_data"
#977: FILE: block/elevator-fq.h:168:
+	BUG_ON(sched_data == NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 24 warnings, 45 checks, 887 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000092806.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
