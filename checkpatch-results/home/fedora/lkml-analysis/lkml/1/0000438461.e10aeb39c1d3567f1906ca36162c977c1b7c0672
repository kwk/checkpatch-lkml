WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: lib/inflate.c:309:
+  struct {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#167: FILE: lib/inflate.c:310:
+    unsigned c[BMAX+1];           /* bit length count table */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#167: FILE: lib/inflate.c:310:
+    unsigned c[BMAX+1];           /* bit length count table */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#167: FILE: lib/inflate.c:310:
+    unsigned c[BMAX+1];           /* bit length count table */
                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#168: FILE: lib/inflate.c:311:
+    struct huft *u[BMAX];         /* table stack */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#169: FILE: lib/inflate.c:312:
+    unsigned v[N_MAX];            /* values in order of bit length */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#169: FILE: lib/inflate.c:312:
+    unsigned v[N_MAX];            /* values in order of bit length */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: lib/inflate.c:313:
+    unsigned x[BMAX+1];           /* bit offsets, then code stack */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#170: FILE: lib/inflate.c:313:
+    unsigned x[BMAX+1];           /* bit offsets, then code stack */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#170: FILE: lib/inflate.c:313:
+    unsigned x[BMAX+1];           /* bit offsets, then code stack */
                    ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: lib/inflate.c:314:
+  } *stk;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#172: FILE: lib/inflate.c:315:
+  unsigned *c, *v, *x;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#172: FILE: lib/inflate.c:315:
+  unsigned *c, *v, *x;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#173: FILE: lib/inflate.c:316:
+  struct huft **u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: lib/inflate.c:317:
+  int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#178: FILE: lib/inflate.c:321:
+  stk = malloc(sizeof(*stk));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#179: FILE: lib/inflate.c:322:
+  if (stk == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#179: FILE: lib/inflate.c:322:
+  if (stk == NULL)
+    return 3;			/* out of memory */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!stk"
#179: FILE: lib/inflate.c:322:
+  if (stk == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: lib/inflate.c:323:
+    return 3;^I^I^I/* out of memory */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: lib/inflate.c:325:
+  c = stk->c;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: lib/inflate.c:326:
+  v = stk->v;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: lib/inflate.c:327:
+  x = stk->x;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: lib/inflate.c:328:
+  u = stk->u;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: lib/inflate.c:331:
+  memzero(stk->c, sizeof(stk->c));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: lib/inflate.c:343:
+    ret = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#199: FILE: lib/inflate.c:344:
+    goto out;$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#206: FILE: lib/inflate.c:368:
   for (y = 1 << j; j < i; j++, y <<= 1)
+    if ((y -= c[j]) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#211: FILE: lib/inflate.c:369:
+    if ((y -= c[j]) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (4, 6)
#211: FILE: lib/inflate.c:369:
+    if ((y -= c[j]) < 0) {
+      ret = 2;                 /* bad input: more codes than bits */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#211: FILE: lib/inflate.c:369:
+    if ((y -= c[j]) < 0) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#212: FILE: lib/inflate.c:370:
+      ret = 2;                 /* bad input: more codes than bits */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: lib/inflate.c:371:
+      goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: lib/inflate.c:372:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: lib/inflate.c:373:
+  if ((y -= c[i]) < 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#215: FILE: lib/inflate.c:373:
+  if ((y -= c[i]) < 0) {
+    ret = 2;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#215: FILE: lib/inflate.c:373:
+  if ((y -= c[i]) < 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: lib/inflate.c:374:
+    ret = 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: lib/inflate.c:375:
+    goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: lib/inflate.c:376:
+  }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: lib/inflate.c:450:
+          ret = 3;             /* not enough memory */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: lib/inflate.c:450:
+          ret = 3;             /* not enough memory */$

WARNING:TABSTOP: Statements should start on a tabstop
#228: FILE: lib/inflate.c:451:
+	  goto out;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#237: FILE: lib/inflate.c:515:
+  ret = y != 0 && g != 1;$

WARNING:INDENTED_LABEL: labels should not be indented
#239: FILE: lib/inflate.c:517:
+  out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: lib/inflate.c:518:
+  free(stk);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: lib/inflate.c:519:
+  return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#250: FILE: lib/inflate.c:732:
+  unsigned *l;          /* length list for huft_build */$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#250: FILE: lib/inflate.c:732:
+  unsigned *l;          /* length list for huft_build */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#254: FILE: lib/inflate.c:736:
+  l = malloc(sizeof(*l) * 288);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#255: FILE: lib/inflate.c:737:
+  if (l == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#255: FILE: lib/inflate.c:737:
+  if (l == NULL)
+    return 3;			/* out of memory */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!l"
#255: FILE: lib/inflate.c:737:
+  if (l == NULL)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#256: FILE: lib/inflate.c:738:
+    return 3;^I^I^I/* out of memory */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#266: FILE: lib/inflate.c:750:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#266: FILE: lib/inflate.c:750:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0) {
+    free(l);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#266: FILE: lib/inflate.c:750:
+  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: lib/inflate.c:751:
+    free(l);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: lib/inflate.c:753:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: lib/inflate.c:762:
+    free(l);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#287: FILE: lib/inflate.c:770:
+  if (inflate_codes(tl, td, bl, bd)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (2, 4)
#287: FILE: lib/inflate.c:770:
+  if (inflate_codes(tl, td, bl, bd)) {
+    free(l);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#288: FILE: lib/inflate.c:771:
+    free(l);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#291: FILE: lib/inflate.c:773:
+  }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#294: FILE: lib/inflate.c:776:
+  free(l);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 57 warnings, 4 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000438461.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
