WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#58: 
> > Actually I think we took the wrong direction with the original patch and

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#99: FILE: include/synaptics.h:137:
+    Bool clickpad;^I^I^I    /* clickpad mode */$

CHECK:CAMELCASE: Avoid CamelCase: <Bool>
#99: FILE: include/synaptics.h:137:
+    Bool clickpad;			    /* clickpad mode */

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#109: FILE: src/synaptics.c:502:
+    pars->clickpad = xf86SetBoolOption(opts, "Clickpad", FALSE);$

CHECK:CAMELCASE: Avoid CamelCase: <xf86SetBoolOption>
#109: FILE: src/synaptics.c:502:
+    pars->clickpad = xf86SetBoolOption(opts, "Clickpad", FALSE);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#120: FILE: src/synaptics.c:1909:
+#define CLICKPAD_LEFT_BTN_X(p)				\
+    (((p)->maxx - (p)->minx) * 2 / 5 + (p)->minx)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#121: FILE: src/synaptics.c:1910:
+    (((p)->maxx - (p)->minx) * 2 / 5 + (p)->minx)$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'p' - possible side-effects?
#122: FILE: src/synaptics.c:1911:
+#define CLICKPAD_RIGHT_BTN_X(p)				\
+    (((p)->maxx - (p)->minx) * 3 / 5 + (p)->minx)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#123: FILE: src/synaptics.c:1912:
+    (((p)->maxx - (p)->minx) * 3 / 5 + (p)->minx)$

CHECK:CAMELCASE: Avoid CamelCase: <MangleClickpad>
#126: FILE: src/synaptics.c:1915:
+MangleClickpad(SynapticsPrivate *priv, struct SynapticsHwState *hw)

CHECK:CAMELCASE: Avoid CamelCase: <SynapticsPrivate>
#126: FILE: src/synaptics.c:1915:
+MangleClickpad(SynapticsPrivate *priv, struct SynapticsHwState *hw)

CHECK:CAMELCASE: Avoid CamelCase: <SynapticsHwState>
#126: FILE: src/synaptics.c:1915:
+MangleClickpad(SynapticsPrivate *priv, struct SynapticsHwState *hw)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#128: FILE: src/synaptics.c:1917:
+    SynapticsSHM *para = priv->synpara;$

CHECK:CAMELCASE: Avoid CamelCase: <SynapticsSHM>
#128: FILE: src/synaptics.c:1917:
+    SynapticsSHM *para = priv->synpara;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#131: FILE: src/synaptics.c:1920:
+    if (hw->y > priv->maxy) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#135: FILE: src/synaptics.c:1924:
+	if (hw->left || hw->middle || hw->right) { /* clicked? */
+	    hw->left = hw->middle = hw->right = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#136: FILE: src/synaptics.c:1925:
+	    hw->left = hw->middle = hw->right = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TABSTOP: Statements should start on a tabstop
#137: FILE: src/synaptics.c:1926:
+	    if (hw->x < CLICKPAD_LEFT_BTN_X(priv));

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#137: FILE: src/synaptics.c:1926:
+	    if (hw->x < CLICKPAD_LEFT_BTN_X(priv));
+		hw->left = 1;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#137: FILE: src/synaptics.c:1926:
+	    if (hw->x < CLICKPAD_LEFT_BTN_X(priv));

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TABSTOP: Statements should start on a tabstop
#139: FILE: src/synaptics.c:1928:
+	    else if (hw->x > CLICKPAD_RIGHT_BTN_X(priv))

WARNING:TABSTOP: Statements should start on a tabstop
#141: FILE: src/synaptics.c:1930:
+	    else

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#148: FILE: src/synaptics.c:1937:
+    } else if (hw->left || hw->middle || hw->right) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#153: FILE: src/synaptics.c:1942:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#162: FILE: src/synaptics.c:1966:
+    if (para->clickpad)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: src/synapticsstr.h:157:
+    Bool clickpad;^I^I^I/* clickpad mode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: tools/synclient.c:212:
+    DEFINE_PAR("Clickpad",             clickpad,                PT_BOOL,   0, 1,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#199: FILE: tools/synclient.c:213:
+    DEFINE_PAR("Clickpad",             clickpad,                PT_BOOL,   0, 1,
+		SYNAPTICS_PROP_CLICKPAD,	8,	0),

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033748.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 17 warnings, 10 checks, 100 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033748.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
