CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#226: FILE: arch/x86/include/asm/debugreg.h:93:
+extern void hw_breakpoint_restore(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: arch/x86/include/asm/hw_breakpoint.h:49:
+extern int arch_validate_hwbkpt_settings(struct perf_event *bp,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#306: FILE: arch/x86/include/asm/hw_breakpoint.h:54:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#316: FILE: arch/x86/include/asm/hw_breakpoint.h:64:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#316: FILE: arch/x86/include/asm/hw_breakpoint.h:64:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#318: FILE: arch/x86/include/asm/hw_breakpoint.h:66:
+extern int arch_bp_generic_fields(int x86_len, int x86_type,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#422: FILE: arch/x86/kernel/hw_breakpoint.c:76:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#422: FILE: arch/x86/kernel/hw_breakpoint.c:76:
+int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#661: FILE: arch/x86/kernel/hw_breakpoint.c:264:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#708: FILE: arch/x86/kernel/hw_breakpoint.c:308:
+}
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#718: FILE: arch/x86/kernel/hw_breakpoint.c:318:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#732: FILE: arch/x86/kernel/hw_breakpoint.c:332:
+		if ((!arch_check_va_in_userspace(info->address, info->len)) &&
+			info->len != X86_BREAKPOINT_EXECUTE)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around function pointer (bp->callback)
#894: FILE: arch/x86/kernel/hw_breakpoint.c:477:
+		(bp->callback)(bp, args->regs);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around current->thread
#1124: FILE: arch/x86/kernel/ptrace.c:449:
+	struct thread_struct *thread = &(current->thread);

WARNING:TYPO_SPELLING: 'shoud' may be misspelled - perhaps 'should'?
#1214: FILE: arch/x86/kernel/ptrace.c:526:
+		 * We shoud have at least an inactive breakpoint at this
 		      ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1271: FILE: arch/x86/kernel/ptrace.c:584:
+		struct perf_event *bp;
+		bp = thread->ptrace_bps[n];

WARNING:TABSTOP: Statements should start on a tabstop
#1279: FILE: arch/x86/kernel/ptrace.c:590:
+	 } else if (n == 7) {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1644: FILE: include/linux/hw_breakpoint.h:76:
+extern int register_perf_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1645: FILE: include/linux/hw_breakpoint.h:77:
+extern int __register_perf_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1646: FILE: include/linux/hw_breakpoint.h:78:
+extern void unregister_hw_breakpoint(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1647: FILE: include/linux/hw_breakpoint.h:79:
+extern void unregister_wide_hw_breakpoint(struct perf_event **cpu_events);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1649: FILE: include/linux/hw_breakpoint.h:81:
+extern int reserve_bp_slot(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1650: FILE: include/linux/hw_breakpoint.h:82:
+extern void release_bp_slot(struct perf_event *bp);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1652: FILE: include/linux/hw_breakpoint.h:84:
+extern void flush_ptrace_hw_breakpoint(struct task_struct *tsk);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1685: FILE: include/linux/hw_breakpoint.h:117:
+register_perf_hw_breakpoint(struct perf_event *bp)	{ return -ENOSYS; }

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1687: FILE: include/linux/hw_breakpoint.h:119:
+__register_perf_hw_breakpoint(struct perf_event *bp) ^I{ return -ENOSYS; }$

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1687: FILE: include/linux/hw_breakpoint.h:119:
+__register_perf_hw_breakpoint(struct perf_event *bp) 	{ return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1692: FILE: include/linux/hw_breakpoint.h:124:
+reserve_bp_slot(struct perf_event *bp)			{return -ENOSYS; }

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1693: FILE: include/linux/hw_breakpoint.h:125:
+static inline void release_bp_slot(struct perf_event *bp) ^I^I{ }$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1776: FILE: include/linux/perf_event.h:855:
+extern void perf_bp_event(struct perf_event *event, void *data);

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2221: FILE: kernel/hw_breakpoint.c:224:
+	struct perf_event **cpu_events, **pevent, *bp;
 	                                  ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2233: FILE: kernel/hw_breakpoint.c:233:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2235: FILE: kernel/hw_breakpoint.c:235:
+		bp = register_kernel_hw_breakpoint_cpu(addr, len, type,
+					triggered, cpu, active);

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2238: FILE: kernel/hw_breakpoint.c:237:
+		*pevent = bp;
 		 ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2259: FILE: kernel/hw_breakpoint.c:249:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2260: FILE: kernel/hw_breakpoint.c:250:
+		if (IS_ERR(*pevent) || !*pevent)
 		            ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2260: FILE: kernel/hw_breakpoint.c:250:
+		if (IS_ERR(*pevent) || !*pevent)
 		                         ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2262: FILE: kernel/hw_breakpoint.c:252:
+		unregister_hw_breakpoint(*pevent);
 		                          ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2290: FILE: kernel/hw_breakpoint.c:266:
+	struct perf_event **pevent;
 	                    ^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2297: FILE: kernel/hw_breakpoint.c:269:
+		pevent = per_cpu_ptr(cpu_events, cpu);
 		^^^^^^

WARNING:TYPO_SPELLING: 'pevent' may be misspelled - perhaps 'prevent'?
#2298: FILE: kernel/hw_breakpoint.c:270:
+		unregister_hw_breakpoint(*pevent);
 		                          ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2327: FILE: kernel/hw_breakpoint.c:288:
+
+

WARNING:TYPO_SPELLING: 'trigerred' may be misspelled - perhaps 'triggered'?
#2362: FILE: kernel/perf_event.c:4245:
+	 * FIXME: manage to get trigerred to NULL if it comes from syscalls
 	                        ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2406: FILE: kernel/perf_event.c:4428:
+
+

ERROR:SPACING: space prohibited after that open parenthesis '('
#2449: FILE: kernel/trace/trace_entries.h:376:
+		__field(	unsigned long,  addr			  )

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#2449: FILE: kernel/trace/trace_entries.h:376:
+		__field(	unsigned long,  addr			  )

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2454: FILE: kernel/trace/trace_entries.h:380:
+	F_printk("ip: %pF type: %d ksym_name: %pS cmd: %s",
 		(void *)__entry->ip, (unsigned int)__entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2581: FILE: kernel/trace/trace_ksym.c:200:
+	entry->ksym_hbp = register_wide_hw_breakpoint(entry->ksym_addr,
+					entry->len, entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2661: FILE: kernel/trace/trace_ksym.c:335:
+				register_wide_hw_breakpoint(entry->ksym_addr,
+					entry->len, entry->type,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2683: FILE: kernel/trace/trace_ksym.c:412:
+	ret = trace_seq_printf(s, "%11s-%-5d [%03d] %pS", field->cmd,
+				entry->pid, iter->cpu, (char *)field->addr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 23 warnings, 25 checks, 2385 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000050654.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
