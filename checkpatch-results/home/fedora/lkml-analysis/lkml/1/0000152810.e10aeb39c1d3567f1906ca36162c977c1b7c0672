WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#91: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#96: FILE: arch/microblaze/include/asm/string.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: arch/microblaze/include/asm/string.h:18:
+extern void *memset(void *, int, __kernel_size_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#113: FILE: arch/microblaze/include/asm/string.h:18:
+extern void *memset(void *, int, __kernel_size_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#113: FILE: arch/microblaze/include/asm/string.h:18:
+extern void *memset(void *, int, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#113: FILE: arch/microblaze/include/asm/string.h:18:
+extern void *memset(void *, int, __kernel_size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#114: FILE: arch/microblaze/include/asm/string.h:19:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#114: FILE: arch/microblaze/include/asm/string.h:19:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#114: FILE: arch/microblaze/include/asm/string.h:19:
+extern void *memcpy(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#114: FILE: arch/microblaze/include/asm/string.h:19:
+extern void *memcpy(void *, const void *, __kernel_size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#115: FILE: arch/microblaze/include/asm/string.h:20:
+extern void *memmove(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#115: FILE: arch/microblaze/include/asm/string.h:20:
+extern void *memmove(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const void *' should also have an identifier name
#115: FILE: arch/microblaze/include/asm/string.h:20:
+extern void *memmove(void *, const void *, __kernel_size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument '__kernel_size_t' should also have an identifier name
#115: FILE: arch/microblaze/include/asm/string.h:20:
+extern void *memmove(void *, const void *, __kernel_size_t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#126: FILE: arch/microblaze/include/asm/thread_info.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#141: FILE: arch/microblaze/include/asm/thread_info.h:16:
+#define THREAD_SIZE		(1 << THREAD_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#146: FILE: arch/microblaze/include/asm/thread_info.h:21:
+# include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:TYPO_SPELLING: 'preemptable' may be misspelled - perhaps 'preemptible'?
#194: FILE: arch/microblaze/include/asm/thread_info.h:69:
+	__s32			preempt_count; /* 0 => preemptable,< 0 => BUG*/
 	     			                       ^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'tsk' may be better as '(tsk)' to avoid precedence issues
#206: FILE: arch/microblaze/include/asm/thread_info.h:81:
+#define INIT_THREAD_INFO(tsk)			\
+{						\
+	.task		= &tsk,			\
+	.exec_domain	= &default_exec_domain,	\
+	.flags		= 0,			\
+	.cpu		= 0,			\
+	.preempt_count	= 1,			\
+	.addr_limit	= KERNEL_DS,		\
+	.restart_block = {			\
+		.fn = do_no_restart_syscall,	\
+	},					\
+}

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#227: FILE: arch/microblaze/include/asm/thread_info.h:102:
+	return (struct thread_info *)(sp & ~(THREAD_SIZE-1));
 	                                                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#253: FILE: arch/microblaze/include/asm/thread_info.h:128:
+#define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#253: FILE: arch/microblaze/include/asm/thread_info.h:128:
+#define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#254: FILE: arch/microblaze/include/asm/thread_info.h:129:
+#define _TIF_NOTIFY_RESUME	(1<<TIF_NOTIFY_RESUME)
                           	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#254: FILE: arch/microblaze/include/asm/thread_info.h:129:
+#define _TIF_NOTIFY_RESUME	(1<<TIF_NOTIFY_RESUME)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#255: FILE: arch/microblaze/include/asm/thread_info.h:130:
+#define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#255: FILE: arch/microblaze/include/asm/thread_info.h:130:
+#define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#256: FILE: arch/microblaze/include/asm/thread_info.h:131:
+#define _TIF_NEED_RESCHED	(1<<TIF_NEED_RESCHED)
                          	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#256: FILE: arch/microblaze/include/asm/thread_info.h:131:
+#define _TIF_NEED_RESCHED	(1<<TIF_NEED_RESCHED)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#257: FILE: arch/microblaze/include/asm/thread_info.h:132:
+#define _TIF_SINGLESTEP		(1<<TIF_SINGLESTEP)
                        		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#257: FILE: arch/microblaze/include/asm/thread_info.h:132:
+#define _TIF_SINGLESTEP		(1<<TIF_SINGLESTEP)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#258: FILE: arch/microblaze/include/asm/thread_info.h:133:
+#define _TIF_IRET		(1<<TIF_IRET)
                  		  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#258: FILE: arch/microblaze/include/asm/thread_info.h:133:
+#define _TIF_IRET		(1<<TIF_IRET)

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#259: FILE: arch/microblaze/include/asm/thread_info.h:134:
+#define _TIF_POLLING_NRFLAG	(1<<TIF_POLLING_NRFLAG)
                            	  ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#259: FILE: arch/microblaze/include/asm/thread_info.h:134:
+#define _TIF_POLLING_NRFLAG	(1<<TIF_POLLING_NRFLAG)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 13 warnings, 21 checks, 176 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152810.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
