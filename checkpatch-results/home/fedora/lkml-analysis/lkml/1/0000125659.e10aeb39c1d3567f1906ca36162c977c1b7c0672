WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#40: 
    Signed-off-by: Michal Nazarewicz <m.nazarewicz@samsung.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#43: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#48: FILE: include/linux/pmm.h:1:
+#ifndef __KERNEL_PMM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Managment' may be misspelled - perhaps 'Management'?
#52: FILE: include/linux/pmm.h:5:
+ * Physical Memory Managment module
                    ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#57: FILE: include/linux/pmm.h:10:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#60: FILE: include/linux/pmm.h:13:
+
+

WARNING:TYPO_SPELLING: 'dependend' may be misspelled - perhaps 'dependent'?
#63: FILE: include/linux/pmm.h:16:
+   /* Definition of platform dependend memory types. */
                              ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#75: FILE: include/linux/pmm.h:28:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#85: FILE: include/linux/pmm.h:38:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#89: FILE: include/linux/pmm.h:42:
+	unsigned magic;      /**< Magic number (must be PMM_MAGIC) */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: include/linux/pmm.h:44:
+	unsigned type;       /**< Memory's type */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#92: FILE: include/linux/pmm.h:45:
+	unsigned flags;      /**< Flags (unused as of yet) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#99: FILE: include/linux/pmm.h:52:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#111: FILE: include/linux/pmm.h:64:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#114: FILE: include/linux/pmm.h:67:
+	unsigned magic;      /**< Magic number (must be PMM_MAGIC) */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#122: FILE: include/linux/pmm.h:75:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#124: FILE: include/linux/pmm.h:77:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#127: FILE: include/linux/pmm.h:80:
+
+

WARNING:TYPO_SPELLING: 'sucesfully' may be misspelled - perhaps 'successfully'?
#152: FILE: include/linux/pmm.h:105:
+ * If the area is allocated sucesfully \a info is filled with
                             ^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#161: FILE: include/linux/pmm.h:114:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#178: FILE: include/linux/pmm.h:131:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#183: FILE: include/linux/pmm.h:136:
+                                   unsigned type, unsigned flags);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#183: FILE: include/linux/pmm.h:136:
+                                   unsigned type, unsigned flags);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: include/linux/pmm.h:136:
+                                   unsigned type, unsigned flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#183: FILE: include/linux/pmm.h:136:
+                                   unsigned type, unsigned flags);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#190: FILE: include/linux/pmm.h:143:
+
+

CHECK:BRACES: Unbalanced braces around else statement
#245: FILE: ipc/shm.c:1031:
+			} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'defins' may be misspelled - perhaps 'defines'?
#263: FILE: mm/Kconfig:223:
+# If platform defins it's own pmm_module_platform_init() function it
               ^^^^^^

WARNING:TYPO_SPELLING: 'throught' may be misspelled - perhaps 'thought'?
#308: FILE: mm/Kconfig:268:
+	  This options makes PMM register a "pmm" misc device throught
 	                                                      ^^^^^^^^

WARNING:TYPO_SPELLING: 'usefull' may be misspelled - perhaps 'useful'?
#318: FILE: mm/Kconfig:278:
+	  a SysV shared memory ids.  This may be usefull for
 	                                         ^^^^^^^

WARNING:TYPO_SPELLING: 'throught' may be misspelled - perhaps 'thought'?
#319: FILE: mm/Kconfig:279:
+	  X applications which share memory throught a shared momey id
 	                                    ^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#362: FILE: mm/pmm-init.c:1:
+/*

WARNING:TYPO_SPELLING: 'Managment' may be misspelled - perhaps 'Management'?
#363: FILE: mm/pmm-init.c:2:
+ * Physical Memory Managment initialisation code
                    ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#372: FILE: mm/pmm-init.c:11:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#379: FILE: mm/pmm-init.c:18:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#393: FILE: mm/pmm-init.c:32:
+		printk(KERN_CRIT "pmm: %llx: not page aligned\n", size);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#398: FILE: mm/pmm-init.c:37:
+		printk(KERN_CRIT "pmm: %llx: more then 1GiB? Come on...\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#405: FILE: mm/pmm-init.c:44:
+		printk(KERN_ERR "pmm: alloc_bootmem_low_pages failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#413: FILE: mm/pmm-init.c:52:
+		printk(KERN_ERR "pmm: request_resource failed: %d\n", ret);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#417: FILE: mm/pmm-init.c:56:
+__setup("pmm=", pmm_platform_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#424: FILE: mm/pmm.c:1:
+/*

WARNING:TYPO_SPELLING: 'Managment' may be misspelled - perhaps 'Management'?
#425: FILE: mm/pmm.c:2:
+ * Physical Memory Managment
                    ^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#472: FILE: mm/pmm.c:49:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#478: FILE: mm/pmm.c:55:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#485: FILE: mm/pmm.c:62:
+	printk(KERN_INFO "pmm debug: " fmt "\n", ##__VA_ARGS__)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#490: FILE: mm/pmm.c:67:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#496: FILE: mm/pmm.c:73:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#503: FILE: mm/pmm.c:80:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#510: FILE: mm/pmm.c:87:
+	/* Keep size as the first element! Several functions assume it is
+	   there! */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#510: FILE: mm/pmm.c:87:
+	   there! */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#513: FILE: mm/pmm.c:90:
+	unsigned       flags;          /**< Undocummented as of yet. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#515: FILE: mm/pmm.c:92:
+	unsigned       type;           /**< Memory type. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#540: FILE: mm/pmm.c:117:
+
+

WARNING:TYPO_SPELLING: 'throught' may be misspelled - perhaps 'thought'?
#542: FILE: mm/pmm.c:119:
+/** Mutex used throught all the module. */
                ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#545: FILE: mm/pmm.c:122:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#551: FILE: mm/pmm.c:128:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#555: FILE: mm/pmm.c:132:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#557: FILE: mm/pmm.c:134:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#563: FILE: mm/pmm.c:140:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#564: FILE: mm/pmm.c:141:
+static        void __pmm_item_insert_by_size (struct pmm_item *item);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#565: FILE: mm/pmm.c:142:
+static inline void __pmm_item_erase_by_size  (struct pmm_item *item);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#567: FILE: mm/pmm.c:144:
+static inline void __pmm_item_erase_by_start (struct pmm_item *item);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#569: FILE: mm/pmm.c:146:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: mm/pmm.c:158:
+                                        size_t size, size_t alignment);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: mm/pmm.c:158:
+                                        size_t size, size_t alignment);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#583: FILE: mm/pmm.c:160:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: mm/pmm.c:175:
+                                   struct rb_node *next_node);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: mm/pmm.c:175:
+                                   struct rb_node *next_node);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#600: FILE: mm/pmm.c:177:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: mm/pmm.c:189:
+                                    size_t size, size_t alignment);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: mm/pmm.c:189:
+                                    size_t size, size_t alignment);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#614: FILE: mm/pmm.c:191:
+
+

WARNING:REPEATED_WORD: Possible repeated word: 'start'
#617: FILE: mm/pmm.c:194:
+ * @param  start start address.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#622: FILE: mm/pmm.c:199:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#630: FILE: mm/pmm.c:207:
+	unsigned i = 0, mask = 1;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#644: FILE: mm/pmm.c:221:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#651: FILE: mm/pmm.c:228:
+^I^I^I                   info->size, info->alignment);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#656: FILE: mm/pmm.c:233:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#675: FILE: mm/pmm.c:252:
+	struct pmm_item *area = pmm_alloc_internal(info);
+	return area ? area->start : 0;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#697: FILE: mm/pmm.c:274:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#724: FILE: mm/pmm.c:301:
+			printk(KERN_ERR "pmm: pmm_put_int: item at 0x%08x is a hole\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#739: FILE: mm/pmm.c:316:
+		struct pmm_item *area;
+		mutex_lock(&pmm_mutex);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#751: FILE: mm/pmm.c:328:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#753: FILE: mm/pmm.c:330:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#764: FILE: mm/pmm.c:341:
+                          unsigned cmd, unsigned long arg);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: mm/pmm.c:341:
+                          unsigned cmd, unsigned long arg);$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#764: FILE: mm/pmm.c:341:
+                          unsigned cmd, unsigned long arg);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#779: FILE: mm/pmm.c:356:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#788: FILE: mm/pmm.c:365:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#799: FILE: mm/pmm.c:376:
+
+

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#831: FILE: mm/pmm.c:408:
+	shp->shm_perm.mode = (shmflg & S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#864: FILE: mm/pmm.c:441:
+	shp->shm_atim   = shp->shm_dtim = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#885: FILE: mm/pmm.c:462:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#888: FILE: mm/pmm.c:465:
+                          unsigned cmd, unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: mm/pmm.c:465:
+                          unsigned cmd, unsigned long arg)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#888: FILE: mm/pmm.c:465:
+                          unsigned cmd, unsigned long arg)

WARNING:LINE_SPACING: Missing a blank line after declarations
#896: FILE: mm/pmm.c:473:
+		struct pmm_item     *area;
+		if (!arg)

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#900: FILE: mm/pmm.c:477:
+		if (copy_from_user(&info, (void *)arg, sizeof info))

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#907: FILE: mm/pmm.c:484:
+		if (copy_to_user((void *)arg, &info, sizeof info)) {

WARNING:SIZEOF_PARENTHESIS: sizeof info should be sizeof(info)
#926: FILE: mm/pmm.c:503:
+		if (copy_from_user(&info, (void *)arg, sizeof info))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#939: FILE: mm/pmm.c:516:
+		/* We can set those two to NULL since thanks to IPC_CREAT |
+		   IPC_EXCL flags util.c never reffer to those functions. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#939: FILE: mm/pmm.c:516:
+		   IPC_EXCL flags util.c never reffer to those functions. */

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#945: FILE: mm/pmm.c:522:
+		return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LINE_SPACING: Please don't use multiple blank lines
#954: FILE: mm/pmm.c:531:
+
+

WARNING:TYPO_SPELLING: 'treate' may be misspelled - perhaps 'treat'?
#958: FILE: mm/pmm.c:535:
+   some kernel code may check if fault is set and treate situantion
                                                   ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#958: FILE: mm/pmm.c:535:
+/* We add a dummy vm_operations_struct with a dummy fault handler as
+   some kernel code may check if fault is set and treate situantion

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#961: FILE: mm/pmm.c:538:
+   never happen (the pages are always in memory). */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#973: FILE: mm/pmm.c:550:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#977: FILE: mm/pmm.c:554:
+	int ret = -EBADFD;
+	DEBUG("pmm_file_mmap(%p, %p)", (void *)file, (void *)vma);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmm_file_mmap', this function's name, in a string
#977: FILE: mm/pmm.c:554:
+	DEBUG("pmm_file_mmap(%p, %p)", (void *)file, (void *)vma);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#988: FILE: mm/pmm.c:565:
+		printk(KERN_INFO

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: mm/pmm.c:570:
+^I^I                      area->start >> PAGE_SHIFT + pgoff,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: mm/pmm.c:571:
+^I^I                      length, vma->vm_page_prot);$

WARNING:TYPO_SPELLING: 'Unfortunatelly' may be misspelled - perhaps 'Unfortunately'?
#1009: FILE: mm/pmm.c:586:
+		 * Unfortunatelly, this brakes shmdt() when PMM area
 		   ^^^^^^^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1020: FILE: mm/pmm.c:597:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1023: FILE: mm/pmm.c:600:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1025: FILE: mm/pmm.c:602:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1035: FILE: mm/pmm.c:612:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1036: FILE: mm/pmm.c:613:
+static int     pmm_debugfs_items_open (struct inode *, struct file *);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: mm/pmm.c:615:
+                                      (struct inode *, struct file *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: mm/pmm.c:615:
+                                      (struct inode *, struct file *);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1039: FILE: mm/pmm.c:616:
+static int     pmm_debugfs_release    (struct inode *, struct file *);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1040: FILE: mm/pmm.c:617:
+static ssize_t pmm_debugfs_read       (struct file *, char __user *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1041: FILE: mm/pmm.c:618:
+                                       size_t, loff_t *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1041: FILE: mm/pmm.c:618:
+                                       size_t, loff_t *);$

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1042: FILE: mm/pmm.c:619:
+static loff_t  pmm_debugfs_llseek     (struct file *, loff_t, int);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1044: FILE: mm/pmm.c:621:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1065: FILE: mm/pmm.c:642:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: mm/pmm.c:651:
+                    void *data, size_t size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: mm/pmm.c:651:
+                    void *data, size_t size);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1076: FILE: mm/pmm.c:653:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1078: FILE: mm/pmm.c:655:
+
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1085: FILE: mm/pmm.c:662:
+	unsigned i;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1090: FILE: mm/pmm.c:667:
+	dir = pmm_debugfs_dir = debugfs_create_dir("pmm", 0);

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#1102: FILE: mm/pmm.c:679:
+	debugfs_create_u8("count", 0440, dir, (u8*)&pmm_memory_types);

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#1106: FILE: mm/pmm.c:683:
+^I^I                    pmm_mem_types + i,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1107: FILE: mm/pmm.c:684:
+^I^I                    &pmm_debugfs_fops.holes_per_type);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1111: FILE: mm/pmm.c:688:
+
+

WARNING:NEEDLESS_IF: debugfs_remove_recursive(NULL) is safe and this check is probably not required
#1115: FILE: mm/pmm.c:692:
+	if (pmm_debugfs_dir) {
+		debugfs_remove_recursive(pmm_debugfs_dir);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1120: FILE: mm/pmm.c:697:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1121: FILE: mm/pmm.c:698:
+static int     pmm_debugfs__open      (struct inode *i, struct file *f,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1122: FILE: mm/pmm.c:699:
+                                       struct rb_root *root, int by_start)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: mm/pmm.c:699:
+                                       struct rb_root *root, int by_start)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1135: FILE: mm/pmm.c:712:
+		struct pmm_item *item;
+		item = by_start

ERROR:CODE_INDENT: code indent should use tabs where possible
#1139: FILE: mm/pmm.c:716:
+^I^I               item->flags & PMM_HOLE ? 'f' : 'a',$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1140: FILE: mm/pmm.c:717:
+^I^I               item->start, item->start + item->size,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1141: FILE: mm/pmm.c:718:
+^I^I               item->size, item->flags, PMM_TYPE(item));$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1155: FILE: mm/pmm.c:732:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1157: FILE: mm/pmm.c:734:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1158: FILE: mm/pmm.c:735:
+static int     pmm_debugfs_items_open (struct inode *i, struct file *f)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1164: FILE: mm/pmm.c:741:
+                                      (struct inode *i, struct file *f)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1164: FILE: mm/pmm.c:741:
+                                      (struct inode *i, struct file *f)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1169: FILE: mm/pmm.c:746:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1171: FILE: mm/pmm.c:748:
+static int     pmm_debugfs_release    (struct inode *i, struct file *f)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1177: FILE: mm/pmm.c:754:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1178: FILE: mm/pmm.c:755:
+static ssize_t pmm_debugfs_read       (struct file *f, char __user *user_buf,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1179: FILE: mm/pmm.c:756:
+                                       size_t size, loff_t *offp)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1179: FILE: mm/pmm.c:756:
+                                       size_t size, loff_t *offp)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1196: FILE: mm/pmm.c:773:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1197: FILE: mm/pmm.c:774:
+static loff_t  pmm_debugfs_llseek     (struct file *f, loff_t offset,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1198: FILE: mm/pmm.c:775:
+                                       int whence)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1198: FILE: mm/pmm.c:775:
+                                       int whence)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1212: FILE: mm/pmm.c:789:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1214: FILE: mm/pmm.c:791:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1217: FILE: mm/pmm.c:794:
+                    void *data, size_t size)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1217: FILE: mm/pmm.c:794:
+                    void *data, size_t size)$

WARNING:SIZEOF_PARENTHESIS: sizeof *buf should be sizeof(*buf)
#1221: FILE: mm/pmm.c:798:
+		const size_t tmp = (buf ? buf->size : 0) + size + sizeof *buf;

WARNING:SIZEOF_PARENTHESIS: sizeof *buf should be sizeof(*buf)
#1222: FILE: mm/pmm.c:799:
+		size_t s = (buf ? buf->capacity + sizeof *buf : 128);

WARNING:SIZEOF_PARENTHESIS: sizeof *buf should be sizeof(*buf)
#1238: FILE: mm/pmm.c:815:
+		buf->capacity = s - sizeof *buf;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1247: FILE: mm/pmm.c:824:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1250: FILE: mm/pmm.c:827:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1252: FILE: mm/pmm.c:829:
+
+

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#1268: FILE: mm/pmm.c:845:
+static const char banner[] __initdata =

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1271: FILE: mm/pmm.c:848:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1274: FILE: mm/pmm.c:851:
+                                  unsigned type, unsigned flags)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1274: FILE: mm/pmm.c:851:
+                                  unsigned type, unsigned flags)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1274: FILE: mm/pmm.c:851:
+                                  unsigned type, unsigned flags)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1274: FILE: mm/pmm.c:851:
+                                  unsigned type, unsigned flags)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1281: FILE: mm/pmm.c:858:
+		printk(KERN_ERR "pmm: invalid memory type: %u\n", type);

WARNING:SIZEOF_PARENTHESIS: sizeof *hole should be sizeof(*hole)
#1285: FILE: mm/pmm.c:862:
+	hole = kmalloc(sizeof *hole, GFP_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1287: FILE: mm/pmm.c:864:
+		printk(KERN_ERR "pmm: not enough memory to add region\n");

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#1287: FILE: mm/pmm.c:864:
+	if (!hole) {
+		printk(KERN_ERR "pmm: not enough memory to add region\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'pmm_add_region', this function's name, in a string
#1291: FILE: mm/pmm.c:868:
+	DEBUG("pmm_add_region(%8x, %8x, %d, %04x)", paddr, size, type, flags);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1302: FILE: mm/pmm.c:879:
+	__pmm_item_insert_by_size (hole);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1310: FILE: mm/pmm.c:887:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1322: FILE: mm/pmm.c:899:
+
+

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1323: FILE: mm/pmm.c:900:
+	printk(banner);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1326: FILE: mm/pmm.c:903:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1332: FILE: mm/pmm.c:909:
+^I^I               pmm_mem_resource.end - pmm_mem_resource.start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1333: FILE: mm/pmm.c:910:
+^I^I               PMM_MEM_GENERAL, 0);$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1338: FILE: mm/pmm.c:915:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1348: FILE: mm/pmm.c:925:
+		printk(KERN_WARNING

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1355: FILE: mm/pmm.c:932:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1360: FILE: mm/pmm.c:937:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1366: FILE: mm/pmm.c:943:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1378: FILE: mm/pmm.c:955:
+	printk(KERN_INFO "PMM driver module exit\n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1382: FILE: mm/pmm.c:959:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1386: FILE: mm/pmm.c:963:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1388: FILE: mm/pmm.c:965:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1394: FILE: mm/pmm.c:971:
+static        void __pmm_item_insert_by_size (struct pmm_item *item)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1398: FILE: mm/pmm.c:975:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1401: FILE: mm/pmm.c:978:
+	unsigned type = item->type;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1402: FILE: mm/pmm.c:979:
+	unsigned type = item->type;
+	while (n < PMM_MEMORY_TYPES && (type >>= 1))

WARNING:LINE_SPACING: Missing a blank line after declarations
#1409: FILE: mm/pmm.c:986:
+		struct pmm_item *h;
+		parent = *link;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1419: FILE: mm/pmm.c:996:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1420: FILE: mm/pmm.c:997:
+static inline void __pmm_item_erase_by_size  (struct pmm_item *item)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1422: FILE: mm/pmm.c:999:
+	unsigned n = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1424: FILE: mm/pmm.c:1001:
+	unsigned type = item->type;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1425: FILE: mm/pmm.c:1002:
+	unsigned type = item->type;
+	while (n < PMM_MEMORY_TYPES && (type >>= 1))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1431: FILE: mm/pmm.c:1008:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1440: FILE: mm/pmm.c:1017:
+		struct pmm_item *h;
+		parent = *link;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1450: FILE: mm/pmm.c:1027:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1451: FILE: mm/pmm.c:1028:
+static inline void __pmm_item_erase_by_start (struct pmm_item *item)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1456: FILE: mm/pmm.c:1033:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1458: FILE: mm/pmm.c:1035:
+                                        size_t size, size_t alignment)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1458: FILE: mm/pmm.c:1035:
+                                        size_t size, size_t alignment)$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1463: FILE: mm/pmm.c:1040:
+	/* There are three cases:
+	   1. the area takes the whole hole,

WARNING:TYPO_SPELLING: 'begining' may be misspelled - perhaps 'beginning'?
#1464: FILE: mm/pmm.c:1041:
+	   2. the area is at the begining or at the end of the hole, or
 	                         ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1465: FILE: mm/pmm.c:1042:
+	   3. the area is in the middle of the hole. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1467: FILE: mm/pmm.c:1044:
+
+

WARNING:TYPO_SPELLING: 'spliting' may be misspelled - perhaps 'splitting'?
#1473: FILE: mm/pmm.c:1050:
+		/* A PMM_ITEM_LAST flag is set if we are spliting last hole */
 		                                         ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1477: FILE: mm/pmm.c:1054:
+
+

WARNING:SIZEOF_PARENTHESIS: sizeof *area should be sizeof(*area)
#1479: FILE: mm/pmm.c:1056:
+	area = kmalloc(sizeof *area, GFP_KERNEL);

WARNING:TYPO_SPELLING: 'spliting' may be misspelled - perhaps 'splitting'?
#1488: FILE: mm/pmm.c:1065:
+	/* A PMM_ITEM_LAST flag is set if we are spliting last hole */
 	                                         ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1491: FILE: mm/pmm.c:1068:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1493: FILE: mm/pmm.c:1070:
+	/* If there is to be space before the area or this is a last item
+	   in given region try allocating area at the end.  As a side

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1495: FILE: mm/pmm.c:1072:
+	   don't care. ;) */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1497: FILE: mm/pmm.c:1074:
+	if ((area->start != hole->start || (hole->flags & PMM_ITEM_LAST))
+	    && area->start + area->size != hole->start + hole->size) {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1504: FILE: mm/pmm.c:1081:
+
+

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1510: FILE: mm/pmm.c:1087:
+		__pmm_item_erase_by_size (hole);

CHECK:BRACES: braces {} should be used on all arms of this statement
#1514: FILE: mm/pmm.c:1091:
+		if (area->start == hole->start) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1517: FILE: mm/pmm.c:1094:
+		} else

WARNING:SIZEOF_PARENTHESIS: sizeof *next should be sizeof(*next)
#1522: FILE: mm/pmm.c:1099:
+		struct pmm_item *next = kmalloc(sizeof *next, GFP_KERNEL);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1543: FILE: mm/pmm.c:1120:
+		__pmm_item_insert_by_size (next);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1547: FILE: mm/pmm.c:1124:
+		/* Since there is a hole after this area it (the area) is not
+		   last so clear the flag. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1547: FILE: mm/pmm.c:1124:
+		   last so clear the flag. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1551: FILE: mm/pmm.c:1128:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1557: FILE: mm/pmm.c:1134:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1559: FILE: mm/pmm.c:1136:
+                                   struct rb_node *next_node)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1559: FILE: mm/pmm.c:1136:
+                                   struct rb_node *next_node)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1563: FILE: mm/pmm.c:1140:
+		struct pmm_item *prev, *next;
+		prev = rb_entry(prev_node, struct pmm_item, by_start);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1569: FILE: mm/pmm.c:1146:
+			__pmm_item_erase_by_size (prev);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1575: FILE: mm/pmm.c:1152:
+			__pmm_item_erase_by_size (next);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1583: FILE: mm/pmm.c:1160:
+			/* Since we are deleting previous hole adding it to the
+			   next the PMM_ITEM_LAST flag is preserved. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1583: FILE: mm/pmm.c:1160:
+			   next the PMM_ITEM_LAST flag is preserved. */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1588: FILE: mm/pmm.c:1165:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#1590: FILE: mm/pmm.c:1167:
+                                    size_t size, size_t alignment)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1590: FILE: mm/pmm.c:1167:
+                                    size_t size, size_t alignment)$

CHECK:BRACES: Unbalanced braces around else statement
#1601: FILE: mm/pmm.c:1178:
+		else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1610: FILE: mm/pmm.c:1187:
+		const size_t start = ALIGN(hole->start, alignment);
+		if (start >=  hole->start &&    /* just in case of overflows */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1623: FILE: mm/pmm.c:1200:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1646: FILE: mm/pmm.c:1223:
+		printk(KERN_ERR "pmm: %s: area at 0x%08x does not exist\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1653: FILE: mm/pmm.c:1230:
+		printk(KERN_ERR "pmm: %s: item at 0x%08x is a hole\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#1677: FILE: mm/shmem.c:2591:
+                                       unsigned long flags, int pmm_area)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1677: FILE: mm/shmem.c:2591:
+                                       unsigned long flags, int pmm_area)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1736: FILE: mm/shmem.c:2666:
 
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125659.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 132 warnings, 93 checks, 1667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000125659.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
