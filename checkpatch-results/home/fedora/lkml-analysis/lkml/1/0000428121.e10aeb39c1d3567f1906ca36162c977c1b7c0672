WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#319: FILE: arch/i386/xen/enlighten.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/processor.h> instead of <asm/processor.h>
#354: FILE: arch/i386/xen/enlighten.c:36:
+#include <asm/processor.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#357: FILE: arch/i386/xen/enlighten.c:39:
+#include <asm/pgtable.h>

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#362: FILE: arch/i386/xen/enlighten.c:44:
+EXPORT_SYMBOL_GPL(hypercall_page);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#380: FILE: arch/i386/xen/enlighten.c:62:
+	printk(KERN_INFO "Booting paravirtualized kernel on %s\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#382: FILE: arch/i386/xen/enlighten.c:64:
+	printk(KERN_INFO "Hypervisor signature: %s\n", xen_start_info->magic);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#388: FILE: arch/i386/xen/enlighten.c:70:
+	unsigned maskedx = ~0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#430: FILE: arch/i386/xen/enlighten.c:112:
+	/* convert to IF type flag
+	   -0 -> 0x00000000

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: braces {} should be used on all arms of this statement
#447: FILE: arch/i386/xen/enlighten.c:129:
+	if (flags == 0) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#449: FILE: arch/i386/xen/enlighten.c:131:
+		/* Unmask then check (avoid races).  We're only protecting
+		   against updates by this CPU, so there's no need for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#450: FILE: arch/i386/xen/enlighten.c:132:
+		   anything stronger. */

CHECK:BRACES: Unbalanced braces around else statement
#456: FILE: arch/i386/xen/enlighten.c:138:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#463: FILE: arch/i386/xen/enlighten.c:145:
+	struct vcpu_info *vcpu;
+	preempt_disable();

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#478: FILE: arch/i386/xen/enlighten.c:160:
+	/* Unmask then check (avoid races).  We're only protecting
+	   against updates by this CPU, so there's no need for

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#479: FILE: arch/i386/xen/enlighten.c:161:
+	   anything stronger. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#491: FILE: arch/i386/xen/enlighten.c:173:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

ERROR:SPACING: space required before the open parenthesis '('
#504: FILE: arch/i386/xen/enlighten.c:186:
+	switch(mode) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#506: FILE: arch/i386/xen/enlighten.c:188:
+		BUG_ON(x86_read_percpu(xen_lazy_mode) == PARAVIRT_LAZY_NONE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#511: FILE: arch/i386/xen/enlighten.c:193:
+		BUG_ON(x86_read_percpu(xen_lazy_mode) != PARAVIRT_LAZY_NONE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#530: FILE: arch/i386/xen/enlighten.c:212:
+static void xen_set_ldt(const void *addr, unsigned entries)

WARNING:LINE_SPACING: Missing a blank line after declarations
#541: FILE: arch/i386/xen/enlighten.c:223:
+		xmaddr_t maddr;
+		maddr = arbitrary_virt_to_machine((unsigned long)addr);

CHECK:CAMELCASE: Avoid CamelCase: <Xgt_desc_struct>
#552: FILE: arch/i386/xen/enlighten.c:234:
+static void xen_load_gdt(const struct Xgt_desc_struct *dtr)

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#557: FILE: arch/i386/xen/enlighten.c:239:
+	unsigned pages = (size + PAGE_SIZE - 1) / PAGE_SIZE;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#562: FILE: arch/i386/xen/enlighten.c:244:
+	/* A GDT can be up to 64k in size, which corresponds to 8192
+	   8-byte entries, or 16 4k pages.. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#562: FILE: arch/i386/xen/enlighten.c:244:
+	   8-byte entries, or 16 4k pages.. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#564: FILE: arch/i386/xen/enlighten.c:246:
+	BUG_ON(size > 65536);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#565: FILE: arch/i386/xen/enlighten.c:247:
+	BUG_ON(va & ~PAGE_MASK);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#584: FILE: arch/i386/xen/enlighten.c:266:
+	xmaddr_t maddr = virt_to_machine(&gdt[GDT_ENTRY_TLS_MIN+i]);
 	                                                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: arch/i386/xen/enlighten.c:291:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#637: FILE: arch/i386/xen/enlighten.c:319:
+/* Set an IDT entry.  If the entry is part of the current IDT, then
+   also update Xen. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#637: FILE: arch/i386/xen/enlighten.c:319:
+   also update Xen. */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#640: FILE: arch/i386/xen/enlighten.c:322:
+{
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: arch/i386/xen/enlighten.c:339:
+				BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#662: FILE: arch/i386/xen/enlighten.c:344:
+/* Load a new IDT into Xen.  In principle this can be per-CPU, so we
+   hold a spinlock to protect the static traps[] array (static because

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#663: FILE: arch/i386/xen/enlighten.c:345:
+   it avoids allocation, and saves stack space). */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#670: FILE: arch/i386/xen/enlighten.c:352:
+	unsigned in, out, count;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#674: FILE: arch/i386/xen/enlighten.c:356:
+	count = (desc->size+1) / 8;
 	                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#675: FILE: arch/i386/xen/enlighten.c:357:
+	BUG_ON(count > 256);

ERROR:SPACING: space required before the open parenthesis '('
#678: FILE: arch/i386/xen/enlighten.c:360:
+	for(in = out = 0; in < count; in++) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#688: FILE: arch/i386/xen/enlighten.c:370:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#694: FILE: arch/i386/xen/enlighten.c:376:
+/* Write a GDT descriptor entry.  Ignore LDT descriptors, since
+   they're handled differently. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#694: FILE: arch/i386/xen/enlighten.c:376:
+   they're handled differently. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#709: FILE: arch/i386/xen/enlighten.c:391:
+			BUG();

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#712: FILE: arch/i386/xen/enlighten.c:394:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#716: FILE: arch/i386/xen/enlighten.c:398:
+static void xen_load_esp0(struct tss_struct *tss,
+				   struct thread_struct *thread)

WARNING:LINE_SPACING: Missing a blank line after declarations
#719: FILE: arch/i386/xen/enlighten.c:401:
+	struct multicall_space mcs = xen_mc_entry(0);
+	MULTI_stack_switch(mcs.mc, __KERNEL_DS, thread->esp0);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#723: FILE: arch/i386/xen/enlighten.c:405:
+static void xen_set_iopl_mask(unsigned mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#749: FILE: arch/i386/xen/enlighten.c:431:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#759: FILE: arch/i386/xen/enlighten.c:441:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#782: FILE: arch/i386/xen/enlighten.c:464:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#782: FILE: arch/i386/xen/enlighten.c:464:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pfn' - possible side-effects?
#782: FILE: arch/i386/xen/enlighten.c:464:
+#define xen_pfn_to_cr3(pfn) (((unsigned)(pfn) << 12) | ((unsigned)(pfn) >> 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#783: FILE: arch/i386/xen/enlighten.c:465:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#783: FILE: arch/i386/xen/enlighten.c:465:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cr3' - possible side-effects?
#783: FILE: arch/i386/xen/enlighten.c:465:
+#define xen_cr3_to_pfn(cr3) (((unsigned)(cr3) >> 12) | ((unsigned)(cr3) << 20))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#800: FILE: arch/i386/xen/enlighten.c:482:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#838: FILE: arch/i386/xen/enlighten.c:520:
+static void xen_alloc_pd_clone(u32 pfn, u32 clonepfn,
+					u32 start, u32 count)

ERROR:SPACING: space required before the open parenthesis '('
#862: FILE: arch/i386/xen/enlighten.c:544:
+		for(i = 0; i < PTRS_PER_PGD; i++) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#863: FILE: arch/i386/xen/enlighten.c:545:
+			if (pgd_val_ma(xen_pgd[i]) & _PAGE_PRESENT) {
[...]
+			} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#872: FILE: arch/i386/xen/enlighten.c:554:
+			} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#896: FILE: arch/i386/xen/enlighten.c:578:
+#if 0

CHECK:BRACES: Unbalanced braces around else statement
#905: FILE: arch/i386/xen/enlighten.c:587:
+	} else

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#909: FILE: arch/i386/xen/enlighten.c:591:
+#if 0

ERROR:INIT_ATTRIBUTE: Use of const init definition must use __initconst
#916: FILE: arch/i386/xen/enlighten.c:598:
+static const struct paravirt_ops xen_paravirt_ops __initdata = {

Const init definitions should use __initconst instead of
__initdata.

Similarly init definitions without const require a separate
use of const.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1018: FILE: arch/i386/xen/enlighten.c:700:
+	BUG_ON(memcmp(xen_start_info->magic, "xen-3.0", 7) != 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1031: FILE: arch/i386/xen/enlighten.c:713:
+	init_pg_tables_end = __pa(pgd) + xen_start_info->nr_pt_frames*PAGE_SIZE;
 	                                                             ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1064: FILE: arch/i386/xen/features.c:1:
+/******************************************************************************

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1089: FILE: arch/i386/xen/features.c:26:
+		for (j=0; j<32; j++)
 		      ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1089: FILE: arch/i386/xen/features.c:26:
+		for (j=0; j<32; j++)
 		           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1090: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1090: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			                 ^

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1090: FILE: arch/i386/xen/features.c:27:
+			xen_features[i*32+j] = !!(fi.submap & 1<<j);
 			                                       ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1097: FILE: arch/i386/xen/multicalls.c:1:
+/*

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1130: FILE: arch/i386/xen/multicalls.c:34:
+	unsigned mcidx, argidx;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1143: FILE: arch/i386/xen/multicalls.c:47:
+	/* Disable interrupts in case someone comes in and queues
+	   something in the middle */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1143: FILE: arch/i386/xen/multicalls.c:47:
+	   something in the middle */

CHECK:BRACES: braces {} should be used on all arms of this statement
#1146: FILE: arch/i386/xen/multicalls.c:50:
+	if (b->mcidx) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1150: FILE: arch/i386/xen/multicalls.c:54:
+			BUG();

ERROR:SPACING: space required before the open parenthesis '('
#1151: FILE: arch/i386/xen/multicalls.c:55:
+		for(i = 0; i < b->mcidx; i++)

CHECK:BRACES: Unbalanced braces around else statement
#1156: FILE: arch/i386/xen/multicalls.c:60:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1157: FILE: arch/i386/xen/multicalls.c:61:
+		BUG_ON(b->argidx != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1162: FILE: arch/i386/xen/multicalls.c:66:
+	BUG_ON(ret);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1169: FILE: arch/i386/xen/multicalls.c:73:
+	unsigned argspace = (args + sizeof(u64) - 1) / sizeof(u64);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: arch/i386/xen/multicalls.c:75:
+	BUG_ON(argspace > MC_ARGS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1190: FILE: arch/i386/xen/multicalls.h:1:
+#ifndef _XEN_MULTICALLS_H

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#1197: FILE: arch/i386/xen/multicalls.h:8:
+struct multicall_space
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1208: FILE: arch/i386/xen/multicalls.h:19:
+/* Call to start a batch of multiple __xen_mc_entry()s.  Must be
+   paired with xen_mc_issue() */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1208: FILE: arch/i386/xen/multicalls.h:19:
+   paired with xen_mc_issue() */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1225: FILE: arch/i386/xen/multicalls.h:36:
+static inline void xen_mc_issue(unsigned mode)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1239: FILE: arch/i386/xen/setup.c:1:
+/*

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/elf.h> instead of <asm/elf.h>
#1249: FILE: arch/i386/xen/setup.c:11:
+#include <asm/elf.h>

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1262: FILE: arch/i386/xen/setup.c:24:
+extern const char xen_failsafe_callback[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:MISPLACED_INIT: __initdata should be placed after init_shared
#1264: FILE: arch/i386/xen/setup.c:26:
+static __initdata struct shared_info init_shared;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:BRACES: braces {} should be used on all arms of this statement
#1293: FILE: arch/i386/xen/setup.c:55:
+	if (need_resched())
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1295: FILE: arch/i386/xen/setup.c:57:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1320: FILE: arch/i386/xen/setup.c:82:
+		printk(KERN_INFO "physdev_op failed %d\n", rc);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1324: FILE: arch/i386/xen/setup.c:86:
+		printk(KERN_INFO "ACPI in unprivileged domain disabled\n");

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#1330: FILE: arch/i386/xen/setup.c:92:
+	       MAX_GUEST_CMDLINE > COMMAND_LINE_SIZE ?

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1339: FILE: arch/i386/xen/xen-head.S:1:
+/* Xen-specific pieces of head.S, intended to be included in the right

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1379: FILE: arch/i386/xen/xen-ops.h:1:
+#ifndef XEN_OPS_H

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1403: FILE: arch/i386/xen/xen-ops.h:25:
+static inline unsigned xen_get_lazy_mode(void)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1408: FILE: arch/i386/xen/xen-ops.h:30:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1451: FILE: include/xen/features.h:1:
+/******************************************************************************

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1478: FILE: include/xen/page.h:1:
+#ifndef __XEN_PAGE_H

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1483: FILE: include/xen/page.h:6:
+#include <asm/uaccess.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1489: FILE: include/xen/page.h:12:
+typedef struct xmaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1494: FILE: include/xen/page.h:17:
+typedef struct xpaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1499: FILE: include/xen/page.h:22:
+typedef struct xmaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1504: FILE: include/xen/page.h:27:
+typedef struct xpaddr {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1514: FILE: include/xen/page.h:37:
+#define FOREIGN_FRAME_BIT	(1UL<<31)
                          	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1514: FILE: include/xen/page.h:37:
+#define FOREIGN_FRAME_BIT	(1UL<<31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1543: FILE: include/xen/page.h:66:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1561: FILE: include/xen/page.h:84:
+	unsigned offset = phys.paddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1562: FILE: include/xen/page.h:85:
+	unsigned offset = phys.paddr & ~PAGE_MASK;
+	return XMADDR(PFN_PHYS((u64)pfn_to_mfn(PFN_DOWN(phys.paddr))) | offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1567: FILE: include/xen/page.h:90:
+	unsigned offset = machine.maddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1568: FILE: include/xen/page.h:91:
+	unsigned offset = machine.maddr & ~PAGE_MASK;
+	return XPADDR(PFN_PHYS((u64)mfn_to_pfn(PFN_DOWN(machine.maddr))) | offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1595: FILE: include/xen/page.h:118:
+	unsigned long pfn = mfn_to_pfn(mfn);
+	if ((pfn < max_mapnr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < max_mapnr'
#1595: FILE: include/xen/page.h:118:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_to_machine_mapping[pfn] != mfn'
#1595: FILE: include/xen/page.h:118:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1596: FILE: include/xen/page.h:119:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1597: FILE: include/xen/page.h:120:
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1605: FILE: include/xen/page.h:128:
+		BUG_ON(pfn != mfn && mfn != INVALID_P2M_ENTRY);

CHECK:MACRO_ARG_REUSE: Macro argument reuse '_pte' - possible side-effects?
#1617: FILE: include/xen/page.h:140:
+#define pte_mfn(_pte) (((_pte).pte_low >> PAGE_SHIFT) |\
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))

ERROR:CODE_INDENT: code indent should use tabs where possible
#1618: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1618: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1618: FILE: include/xen/page.h:141:
+                       (((_pte).pte_high & 0xfff) << (32-PAGE_SHIFT)))
                                                         ^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1636: FILE: include/xen/page.h:159:
+}
+#define pmd_val_ma(v) ((v).pmd)

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1638: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                   ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1638: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                                  ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#1638: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )
                    	                                      ^

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1638: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#1638: FILE: include/xen/page.h:161:
+#define __pte_ma(x)	((pte_t) { .pte_low=(x), .pte_high=(x)>>32 } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1639: FILE: include/xen/page.h:162:
+#define __pmd_ma(x)	((pmd_t) { (x) } )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1645: FILE: include/xen/page.h:168:
+#define __pte_ma(x)	((pte_t) { (x) } )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1650: FILE: include/xen/page.h:173:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 82 warnings, 39 checks, 1408 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000428121.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
