WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
statment. This allows us to create a 'no-op' fastpath, which can subsequently

WARNING:TYPO_SPELLING: 'statment' may be misspelled - perhaps 'statement'?
#28: 
statment. This allows us to create a 'no-op' fastpath, which can subsequently
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#65: FILE: include/asm-generic/vmlinux.lds.h:210:
+		*(__jump_strings)/* Jump: strings */	\
 		^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#83: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#88: FILE: include/linux/jump_label.h:1:
+#ifndef _LINUX_JUMP_LABEL_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#109: FILE: include/linux/jump_label.h:22:
+#define DEFINE_JUMP_LABEL(name)						\
+	const char __jlstrtab_##name[]					\
+	__used __attribute__((section("__jump_strings")))  = #name;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__jump_strings") over __attribute__((section("__jump_strings")))
#111: FILE: include/linux/jump_label.h:24:
+	__used __attribute__((section("__jump_strings")))  = #name;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#113: FILE: include/linux/jump_label.h:26:
+extern void arch_jump_label_transform(struct jump_entry *entry,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: include/linux/jump_label.h:27:
+extern void arch_jump_label_transform(struct jump_entry *entry,
+				 enum jump_label_type type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#116: FILE: include/linux/jump_label.h:29:
+extern int jump_label_update(const char *name, enum jump_label_type type);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#118: FILE: include/linux/jump_label.h:31:
+#define enable_jump_label(name) \
+	jump_label_update(name, JUMP_LABEL_ENABLE);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#121: FILE: include/linux/jump_label.h:34:
+#define disable_jump_label(name) \
+	jump_label_update(name, JUMP_LABEL_DISABLE);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#128: FILE: include/linux/jump_label.h:41:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#128: FILE: include/linux/jump_label.h:41:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#128: FILE: include/linux/jump_label.h:41:
+#define JUMP_LABEL(tag, label, cond)		\
+	if (unlikely(cond))			\
+		goto label;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#164: FILE: kernel/jump_label.c:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#181: FILE: kernel/jump_label.c:18:
+#define JUMP_LABEL_TABLE_SIZE (1 << JUMP_LABEL_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#184: FILE: kernel/jump_label.c:21:
+/* mutex to protect coming/going of the the jump_label table */

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#240: FILE: kernel/jump_label.c:77:
+static struct jump_label_entry *add_jump_label_entry(const char *name, int nr_entries, struct jump_entry *table)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#246: FILE: kernel/jump_label.c:83:
+	u32 hash = jhash(name, name_len-1, 0);
 	                               ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*e)...) over kmalloc(sizeof(struct jump_label_entry)...)
#253: FILE: kernel/jump_label.c:90:
+	e = kmalloc(sizeof(struct jump_label_entry) + name_len, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around e->modules
#259: FILE: kernel/jump_label.c:96:
+	INIT_HLIST_HEAD(&(e->modules));

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#278: FILE: kernel/jump_label.c:115:
+			while ((iter < stop) &&
+				(strcmp(iter->name, iter_begin->name) == 0)) {

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#288: FILE: kernel/jump_label.c:125:
+		WARN(1, KERN_ERR "build_jump_hashtable: unexpected entry!\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000024713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 14 warnings, 9 checks, 258 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000024713.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
