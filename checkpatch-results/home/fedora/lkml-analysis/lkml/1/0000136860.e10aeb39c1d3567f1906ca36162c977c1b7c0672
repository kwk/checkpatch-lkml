WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
So far, creating and removing STGT virtual target HBAs in through ConfigFS is

WARNING:TYPO_SPELLING: 'assoicate' may be misspelled - perhaps 'associate'?
#45: 
in drivers/target/target_core_stgt.c to assoicate the userspace backstore
                                        ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Initalization' may be misspelled - perhaps 'Initialization'?
#126: 
CORE_STGT[0]: Bus Initalization complete
                  ^^^^^^^^^^^^^

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#198: FILE: drivers/target/Makefile:56:
+EXTRA_CFLAGS				+=	-DSTGT_PLUGIN

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#204: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#209: FILE: drivers/target/target_core_stgt.c:1:
+/*******************************************************************************

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#230: FILE: drivers/target/target_core_stgt.c:22:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#231: FILE: drivers/target/target_core_stgt.c:23:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#235: FILE: drivers/target/target_core_stgt.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#269: FILE: drivers/target/target_core_stgt.c:61:
+static int stgt_host_no_cnt = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'a' - possible side-effects?
#271: FILE: drivers/target/target_core_stgt.c:63:
+#define ISPRINT(a)  ((a >= ' ') && (a <= '~'))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'a' may be better as '(a)' to avoid precedence issues
#271: FILE: drivers/target/target_core_stgt.c:63:
+#define ISPRINT(a)  ((a >= ' ') && (a <= '~'))

WARNING:RETURN_VOID: void function return statements are not generally useful
#297: FILE: drivers/target/target_core_stgt.c:89:
+	return;
+}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#305: FILE: drivers/target/target_core_stgt.c:97:
+^I.name^I^I= STGT_NAME,^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#318: FILE: drivers/target/target_core_stgt.c:110:
+static void stgt_release_adapter(struct device * dev)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#332: FILE: drivers/target/target_core_stgt.c:124:
+		printk(KERN_ERR "device_register() failed for stgt_primary\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#338: FILE: drivers/target/target_core_stgt.c:130:
+		printk(KERN_ERR "bus_register() failed for stgt_ldd_bus\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#344: FILE: drivers/target/target_core_stgt.c:136:
+		printk(KERN_ERR "driver_register() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#345: FILE: drivers/target/target_core_stgt.c:137:
+		printk(KERN_ERR "driver_register() failed for"
+			" stgt_driverfs_driver\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'Initalization' may be misspelled - perhaps 'Initialization'?
#349: FILE: drivers/target/target_core_stgt.c:141:
+	printk(KERN_INFO "CORE_STGT[0]: Bus Initalization complete\n");
 	                                    ^^^^^^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#349: FILE: drivers/target/target_core_stgt.c:141:
+	printk(KERN_INFO "CORE_STGT[0]: Bus Initalization complete\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#362: FILE: drivers/target/target_core_stgt.c:154:
+        bus_unregister(&stgt_lld_bus);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: drivers/target/target_core_stgt.c:154:
+        bus_unregister(&stgt_lld_bus);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#363: FILE: drivers/target/target_core_stgt.c:155:
+        device_unregister(&stgt_primary);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: drivers/target/target_core_stgt.c:155:
+        device_unregister(&stgt_primary);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#365: FILE: drivers/target/target_core_stgt.c:157:
+	printk(KERN_INFO "CORE_STGT[0]: Bus release complete\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#378: FILE: drivers/target/target_core_stgt.c:170:
+		printk("Unable to allocate stgt_hba_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#390: FILE: drivers/target/target_core_stgt.c:182:
+		printk(KERN_ERR "device_register() for stgt_hba failed: %d\n", err);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#398: FILE: drivers/target/target_core_stgt.c:190:
+
+

CHECK:CAMELCASE: Avoid CamelCase: <Scsi_Host>
#403: FILE: drivers/target/target_core_stgt.c:195:
+	struct Scsi_Host *sh;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#410: FILE: drivers/target/target_core_stgt.c:202:
+		printk(KERN_ERR "scsi_host_alloc() failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#426: FILE: drivers/target/target_core_stgt.c:218:
+		printk(KERN_ERR "scsi_add_host() failed with err: %d\n", err);

CHECK:SPACING: No space is necessary after a cast
#441: FILE: drivers/target/target_core_stgt.c:233:
+	hba->hba_ptr = (void *) sh;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#444: FILE: drivers/target/target_core_stgt.c:236:
+	printk(KERN_INFO "CORE_HBA[%d] - %s STGT HBA Driver %s on"

WARNING:SPLIT_STRING: quoted string split across lines
#445: FILE: drivers/target/target_core_stgt.c:237:
+	printk(KERN_INFO "CORE_HBA[%d] - %s STGT HBA Driver %s on"
+		" Generic Target Core Stack %s\n", hba->hba_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#447: FILE: drivers/target/target_core_stgt.c:239:
+	printk(KERN_INFO "CORE_HBA[%d] - %s\n", hba->hba_id, (sh->hostt->name) ?

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#449: FILE: drivers/target/target_core_stgt.c:241:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached STGT HBA to Generic"

WARNING:UNNECESSARY_MODIFIER: Integer promotion: Using 'h' in '%hu' is unnecessary
#449: FILE: drivers/target/target_core_stgt.c:241:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached STGT HBA to Generic"
+		" Target Core with TCQ Depth: %d MaxSectors: %hu\n",
+		hba->hba_id, atomic_read(&hba->max_queue_depth), max_sectors);

WARNING:SPLIT_STRING: quoted string split across lines
#450: FILE: drivers/target/target_core_stgt.c:242:
+	printk(KERN_INFO "CORE_HBA[%d] - Attached STGT HBA to Generic"
+		" Target Core with TCQ Depth: %d MaxSectors: %hu\n",

CHECK:SPACING: No space is necessary after a cast
#476: FILE: drivers/target/target_core_stgt.c:268:
+	struct Scsi_Host *scsi_host = (struct Scsi_Host *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#479: FILE: drivers/target/target_core_stgt.c:271:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached STGT HBA: %s from"

WARNING:SPLIT_STRING: quoted string split across lines
#480: FILE: drivers/target/target_core_stgt.c:272:
+	printk(KERN_INFO "CORE_HBA[%d] - Detached STGT HBA: %s from"
+		" Generic Target Core\n", hba->hba_id,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#496: FILE: drivers/target/target_core_stgt.c:288:
+		printk(KERN_ERR "Unable to allocate memory for stgt_dev_virt_t\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#501: FILE: drivers/target/target_core_stgt.c:293:
+	printk(KERN_INFO "STGT: Allocated sdv: %p for %s\n", sdv, name);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#506: FILE: drivers/target/target_core_stgt.c:298:
+se_device_t *stgt_create_virtdevice(

CHECK:SPACING: No space is necessary after a cast
#512: FILE: drivers/target/target_core_stgt.c:304:
+	struct Scsi_Host *sh = (struct Scsi_Host *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#515: FILE: drivers/target/target_core_stgt.c:307:
+		printk(KERN_ERR "Unable to locate stgt_dev_virt_t"

WARNING:SPLIT_STRING: quoted string split across lines
#516: FILE: drivers/target/target_core_stgt.c:308:
+		printk(KERN_ERR "Unable to locate stgt_dev_virt_t"
+				" parameter\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#520: FILE: drivers/target/target_core_stgt.c:312:
+	printk(KERN_ERR "Unable to locate %d:%d:%d:%d\n", sh->host_no,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#521: FILE: drivers/target/target_core_stgt.c:313:
+	printk(KERN_ERR "Unable to locate %d:%d:%d:%d\n", sh->host_no,
+		sdv->sdv_channel_id,  sdv->sdv_target_id, sdv->sdv_lun_id);

CHECK:SPACING: No space is necessary after a cast
#532: FILE: drivers/target/target_core_stgt.c:324:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#533: FILE: drivers/target/target_core_stgt.c:325:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#536: FILE: drivers/target/target_core_stgt.c:328:
+	printk(KERN_INFO "CORE_STGT[%d] - Activating %s Device with TCQ: %d at"

WARNING:SPLIT_STRING: quoted string split across lines
#537: FILE: drivers/target/target_core_stgt.c:329:
+	printk(KERN_INFO "CORE_STGT[%d] - Activating %s Device with TCQ: %d at"
+		" SCSI Location (Channel/Target/LUN) %d/%d/%d\n", sh->host_no,

CHECK:SPACING: No space is necessary after a cast
#550: FILE: drivers/target/target_core_stgt.c:342:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#551: FILE: drivers/target/target_core_stgt.c:343:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#554: FILE: drivers/target/target_core_stgt.c:346:
+	printk(KERN_INFO "CORE_STGT[%d] - Deactivating %s Device with TCQ: %d"

WARNING:SPLIT_STRING: quoted string split across lines
#555: FILE: drivers/target/target_core_stgt.c:347:
+	printk(KERN_INFO "CORE_STGT[%d] - Deactivating %s Device with TCQ: %d"
+		" at SCSI Location (Channel/Target/LUN) %d/%d/%d\n",

CHECK:SPACING: No space is necessary after a cast
#566: FILE: drivers/target/target_core_stgt.c:358:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) p;

CHECK:SPACING: No space is necessary after a cast
#567: FILE: drivers/target/target_core_stgt.c:359:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->type == TYPE_DISK'
#573: FILE: drivers/target/target_core_stgt.c:365:
+		if ((sd->type == TYPE_DISK) || (sd->type == TYPE_ROM))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sd->type == TYPE_ROM'
#573: FILE: drivers/target/target_core_stgt.c:365:
+		if ((sd->type == TYPE_DISK) || (sd->type == TYPE_ROM))

CHECK:SPACING: No space is necessary after a cast
#588: FILE: drivers/target/target_core_stgt.c:380:
+	stgt_plugin_task_t *st = (stgt_plugin_task_t *) task->transport_req;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#602: FILE: drivers/target/target_core_stgt.c:394:
+void *stgt_allocate_request(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#610: FILE: drivers/target/target_core_stgt.c:402:
+		printk(KERN_ERR "Unable to allocate stgt_plugin_task_t\n");

CHECK:SPACING: No space is necessary after a cast
#623: FILE: drivers/target/target_core_stgt.c:415:
+	stgt_plugin_task_t *st = (stgt_plugin_task_t *) task->transport_req;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#630: FILE: drivers/target/target_core_stgt.c:422:
+		printk(KERN_ERR "Unable to allocate memory for struct"

WARNING:SPLIT_STRING: quoted string split across lines
#631: FILE: drivers/target/target_core_stgt.c:423:
+		printk(KERN_ERR "Unable to allocate memory for struct"
+			" scsi_cmnd\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#640: FILE: drivers/target/target_core_stgt.c:432:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#642: FILE: drivers/target/target_core_stgt.c:434:
+#if 0

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#644: FILE: drivers/target/target_core_stgt.c:436:
+	err = scsi_tgt_queue_command(sc, itn_id, (struct scsi_lun *)&cmd->lun,
+			cmd->tag);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#646: FILE: drivers/target/target_core_stgt.c:438:
+		printk(KERN_INFO "scsi_tgt_queue_command() failed for sc:"

WARNING:SPLIT_STRING: quoted string split across lines
#647: FILE: drivers/target/target_core_stgt.c:439:
+		printk(KERN_INFO "scsi_tgt_queue_command() failed for sc:"
+			" %p\n", sc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#666: FILE: drivers/target/target_core_stgt.c:458:
+ssize_t stgt_set_configfs_dev_params(se_hba_t *hba,
+	se_subsystem_dev_t *se_dev,

CHECK:SPACING: No space is necessary after a cast
#670: FILE: drivers/target/target_core_stgt.c:462:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) se_dev->se_dev_su_ptr;

CHECK:SPACING: No space is necessary after a cast
#671: FILE: drivers/target/target_core_stgt.c:463:
+	struct Scsi_Host *sh = (struct Scsi_Host *) hba->hba_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#677: FILE: drivers/target/target_core_stgt.c:469:
+		printk(KERN_ERR "Unable to allocate memory for temporary"

WARNING:SPLIT_STRING: quoted string split across lines
#678: FILE: drivers/target/target_core_stgt.c:470:
+		printk(KERN_ERR "Unable to allocate memory for temporary"
+				" buffer\n");

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#695: FILE: drivers/target/target_core_stgt.c:487:
+			ret = strict_strtoul(ptr, 0,

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#696: FILE: drivers/target/target_core_stgt.c:488:
+			ret = strict_strtoul(ptr, 0,
+				(unsigned long *)&sdv->sdv_channel_id);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#698: FILE: drivers/target/target_core_stgt.c:490:
+				printk(KERN_ERR "strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: drivers/target/target_core_stgt.c:491:
+				printk(KERN_ERR "strict_strtoul() failed for"
+					" scsi_channel_id=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#702: FILE: drivers/target/target_core_stgt.c:494:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI Channel"

WARNING:SPLIT_STRING: quoted string split across lines
#703: FILE: drivers/target/target_core_stgt.c:495:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI Channel"
+				" ID: %d\n",  sh->host_no, sdv->sdv_channel_id);

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#711: FILE: drivers/target/target_core_stgt.c:503:
+			ret = strict_strtoul(ptr, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: drivers/target/target_core_stgt.c:504:
+			ret = strict_strtoul(ptr, 0,
+				(unsigned long *)&sdv->sdv_target_id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#714: FILE: drivers/target/target_core_stgt.c:506:
+				printk("strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#715: FILE: drivers/target/target_core_stgt.c:507:
+				printk("strict_strtoul() failed for"
+					" strict_strtoul()\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#718: FILE: drivers/target/target_core_stgt.c:510:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI Target"

WARNING:SPLIT_STRING: quoted string split across lines
#719: FILE: drivers/target/target_core_stgt.c:511:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI Target"
+				" ID: %d\n", sh->host_no, sdv->sdv_target_id);

CHECK:BRACES: braces {} should be used on all arms of this statement
#725: FILE: drivers/target/target_core_stgt.c:517:
+		if ((ptr2)) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#727: FILE: drivers/target/target_core_stgt.c:519:
+			ret = strict_strtoul(ptr, 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#728: FILE: drivers/target/target_core_stgt.c:520:
+			ret = strict_strtoul(ptr, 0,
+				(unsigned long *)&sdv->sdv_lun_id);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#730: FILE: drivers/target/target_core_stgt.c:522:
+				printk("strict_strtoul() failed for"

WARNING:SPLIT_STRING: quoted string split across lines
#731: FILE: drivers/target/target_core_stgt.c:523:
+				printk("strict_strtoul() failed for"
+					" scsi_lun_id=\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#734: FILE: drivers/target/target_core_stgt.c:526:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI LUN ID:"

WARNING:SPLIT_STRING: quoted string split across lines
#735: FILE: drivers/target/target_core_stgt.c:527:
+			printk(KERN_INFO "STGT[%d]: Referencing SCSI LUN ID:"
+				" %d\n", sh->host_no, sdv->sdv_lun_id);

CHECK:BRACES: Unbalanced braces around else statement
#738: FILE: drivers/target/target_core_stgt.c:530:
+		} else

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#747: FILE: drivers/target/target_core_stgt.c:539:
+ssize_t stgt_check_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#751: FILE: drivers/target/target_core_stgt.c:543:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) se_dev->se_dev_su_ptr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#756: FILE: drivers/target/target_core_stgt.c:548:
+		printk(KERN_ERR "Missing scsi_channel_id=, scsi_target_id= and"

WARNING:SPLIT_STRING: quoted string split across lines
#757: FILE: drivers/target/target_core_stgt.c:549:
+		printk(KERN_ERR "Missing scsi_channel_id=, scsi_target_id= and"
+			" scsi_lun_id= parameters\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#764: FILE: drivers/target/target_core_stgt.c:556:
+ssize_t stgt_show_configfs_dev_params(

CHECK:SPACING: No space is necessary after a cast
#769: FILE: drivers/target/target_core_stgt.c:561:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) se_dev->se_dev_su_ptr;

CHECK:SPACING: No space is necessary after a cast
#784: FILE: drivers/target/target_core_stgt.c:576:
+	struct Scsi_Host *sh = (struct Scsi_Host *) hba->hba_ptr;

CHECK:SPACING: No space is necessary after a cast
#794: FILE: drivers/target/target_core_stgt.c:586:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#802: FILE: drivers/target/target_core_stgt.c:594:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

WARNING:SPLIT_STRING: quoted string split across lines
#805: FILE: drivers/target/target_core_stgt.c:597:
+	*bl += sprintf(b + *bl, "STGT SCSI Device Bus Location:"
+		" Channel ID: %d Target ID: %d LUN: %d\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#832: FILE: drivers/target/target_core_stgt.c:624:
+		if (sd->type == TYPE_DISK) {
[...]
+		} else
[...]

CHECK:SPACING: No space is necessary after a cast
#835: FILE: drivers/target/target_core_stgt.c:627:
+			struct gendisk *disk = (struct gendisk *) sdisk->disk;

CHECK:BRACES: Unbalanced braces around else statement
#844: FILE: drivers/target/target_core_stgt.c:636:
+		} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#849: FILE: drivers/target/target_core_stgt.c:641:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#875: FILE: drivers/target/target_core_stgt.c:667:
+	stgt_plugin_task_t *st = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#883: FILE: drivers/target/target_core_stgt.c:675:
+	stgt_plugin_task_t *st = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#895: FILE: drivers/target/target_core_stgt.c:687:
+	stgt_plugin_task_t *pt = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#907: FILE: drivers/target/target_core_stgt.c:699:
+	stgt_plugin_task_t *pt = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#923: FILE: drivers/target/target_core_stgt.c:715:
+	stgt_plugin_task_t *pt = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#935: FILE: drivers/target/target_core_stgt.c:727:
+	stgt_plugin_task_t *st = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#969: FILE: drivers/target/target_core_stgt.c:761:
+	stgt_plugin_task_t *pt = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#980: FILE: drivers/target/target_core_stgt.c:772:
+	stgt_plugin_task_t *pt = (stgt_plugin_task_t *) task->transport_req;

CHECK:SPACING: No space is necessary after a cast
#991: FILE: drivers/target/target_core_stgt.c:783:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#992: FILE: drivers/target/target_core_stgt.c:784:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

CHECK:SPACING: No space is necessary after a cast
#1003: FILE: drivers/target/target_core_stgt.c:795:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#1004: FILE: drivers/target/target_core_stgt.c:796:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

CHECK:SPACING: No space is necessary after a cast
#1015: FILE: drivers/target/target_core_stgt.c:807:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#1016: FILE: drivers/target/target_core_stgt.c:808:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

CHECK:SPACING: No space is necessary after a cast
#1036: FILE: drivers/target/target_core_stgt.c:828:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#1037: FILE: drivers/target/target_core_stgt.c:829:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1038: FILE: drivers/target/target_core_stgt.c:830:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;
+	return (sd->host->max_sectors > sd->request_queue->max_sectors) ?

CHECK:SPACING: No space is necessary after a cast
#1048: FILE: drivers/target/target_core_stgt.c:840:
+	stgt_dev_virt_t *sdv = (stgt_dev_virt_t *) dev->dev_ptr;

CHECK:SPACING: No space is necessary after a cast
#1049: FILE: drivers/target/target_core_stgt.c:841:
+	struct scsi_device *sd = (struct scsi_device *) sdv->sdv_sd;

WARNING:RETURN_VOID: void function return statements are not generally useful
#1057: FILE: drivers/target/target_core_stgt.c:849:
+	return;
+}

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1063: FILE: drivers/target/target_core_stgt.c:855:
+static inline void stgt_process_SAM_status(

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task->task_scsi_status'
#1068: FILE: drivers/target/target_core_stgt.c:860:
+	if ((task->task_scsi_status)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1070: FILE: drivers/target/target_core_stgt.c:862:
+		printk(KERN_INFO "PSCSI Status Byte exception at task: %p CDB:"

WARNING:SPLIT_STRING: quoted string split across lines
#1071: FILE: drivers/target/target_core_stgt.c:863:
+		printk(KERN_INFO "PSCSI Status Byte exception at task: %p CDB:"
+			" 0x%02x Result: 0x%08x\n", task, st->stgt_cdb[0],

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1080: FILE: drivers/target/target_core_stgt.c:872:
+		printk(KERN_INFO "PSCSI Host Byte exception at task: %p CDB:"

WARNING:SPLIT_STRING: quoted string split across lines
#1081: FILE: drivers/target/target_core_stgt.c:873:
+		printk(KERN_INFO "PSCSI Host Byte exception at task: %p CDB:"
+			" 0x%02x Result: 0x%08x\n", task, st->stgt_cdb[0],

WARNING:RETURN_VOID: void function return statements are not generally useful
#1092: FILE: drivers/target/target_core_stgt.c:884:
+	return;
+}

CHECK:CAMELCASE: Avoid CamelCase: <SCp>
#1102: FILE: drivers/target/target_core_stgt.c:894:
+	se_task_t *task = (se_task_t *)sc->SCp.ptr;

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1106: FILE: drivers/target/target_core_stgt.c:898:
+		printk("se_task_t is NULL!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1107: FILE: drivers/target/target_core_stgt.c:899:
+		BUG();

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1111: FILE: drivers/target/target_core_stgt.c:903:
+		printk("stgt_plugin_task_t is NULL!\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1112: FILE: drivers/target/target_core_stgt.c:904:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1118: FILE: drivers/target/target_core_stgt.c:910:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1162: FILE: include/target/target_core_stgt.h:1:
+/*******************************************************************************

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1184: FILE: include/target/target_core_stgt.h:23:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1185: FILE: include/target/target_core_stgt.h:24:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1189: FILE: include/target/target_core_stgt.h:28:
+
+

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1200: FILE: include/target/target_core_stgt.h:39:
+#define PS_TIMEOUT_DISK		(15*HZ)
                        		   ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1201: FILE: include/target/target_core_stgt.h:40:
+#define PS_TIMEOUT_OTHER	(500*HZ)
                         	    ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1204: FILE: include/target/target_core_stgt.h:43:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1204: FILE: include/target/target_core_stgt.h:43:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1204: FILE: include/target/target_core_stgt.h:43:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1204: FILE: include/target/target_core_stgt.h:43:
+extern struct block_device *linux_blockdevice_claim(int, int, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1205: FILE: include/target/target_core_stgt.h:44:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1205: FILE: include/target/target_core_stgt.h:44:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1205: FILE: include/target/target_core_stgt.h:44:
+extern int linux_blockdevice_release(int, int, struct block_device *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct block_device *' should also have an identifier name
#1205: FILE: include/target/target_core_stgt.h:44:
+extern int linux_blockdevice_release(int, int, struct block_device *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1206: FILE: include/target/target_core_stgt.h:45:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1206: FILE: include/target/target_core_stgt.h:45:
+extern int linux_blockdevice_check(int, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1206: FILE: include/target/target_core_stgt.h:45:
+extern int linux_blockdevice_check(int, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1208: FILE: include/target/target_core_stgt.h:47:
+extern int stgt_CDB_inquiry(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1208: FILE: include/target/target_core_stgt.h:47:
+extern int stgt_CDB_inquiry(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1208: FILE: include/target/target_core_stgt.h:47:
+extern int stgt_CDB_inquiry(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1209: FILE: include/target/target_core_stgt.h:48:
+extern int stgt_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1209: FILE: include/target/target_core_stgt.h:48:
+extern int stgt_CDB_none(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1209: FILE: include/target/target_core_stgt.h:48:
+extern int stgt_CDB_none(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1210: FILE: include/target/target_core_stgt.h:49:
+extern int stgt_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1210: FILE: include/target/target_core_stgt.h:49:
+extern int stgt_CDB_read_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1210: FILE: include/target/target_core_stgt.h:49:
+extern int stgt_CDB_read_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1211: FILE: include/target/target_core_stgt.h:50:
+extern int stgt_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1211: FILE: include/target/target_core_stgt.h:50:
+extern int stgt_CDB_read_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1211: FILE: include/target/target_core_stgt.h:50:
+extern int stgt_CDB_read_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1212: FILE: include/target/target_core_stgt.h:51:
+extern int stgt_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1212: FILE: include/target/target_core_stgt.h:51:
+extern int stgt_CDB_write_non_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1212: FILE: include/target/target_core_stgt.h:51:
+extern int stgt_CDB_write_non_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1213: FILE: include/target/target_core_stgt.h:52:
+extern int stgt_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1213: FILE: include/target/target_core_stgt.h:52:
+extern int stgt_CDB_write_SG(se_task_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1213: FILE: include/target/target_core_stgt.h:52:
+extern int stgt_CDB_write_SG(se_task_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1216: FILE: include/target/target_core_stgt.h:55:
+extern int stgt_plugin_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1217: FILE: include/target/target_core_stgt.h:56:
+extern void stgt_plugin_free(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1218: FILE: include/target/target_core_stgt.h:57:
+extern int stgt_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1218: FILE: include/target/target_core_stgt.h:57:
+extern int stgt_attach_hba(se_hba_t *, u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1218: FILE: include/target/target_core_stgt.h:57:
+extern int stgt_attach_hba(se_hba_t *, u32);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1219: FILE: include/target/target_core_stgt.h:58:
+extern int stgt_detach_hba(se_hba_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1219: FILE: include/target/target_core_stgt.h:58:
+extern int stgt_detach_hba(se_hba_t *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1220: FILE: include/target/target_core_stgt.h:59:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1221: FILE: include/target/target_core_stgt.h:60:
+extern int pscsi_claim_phydevice(se_hba_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1222: FILE: include/target/target_core_stgt.h:61:
+extern int pscsi_release_phydevice(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1222: FILE: include/target/target_core_stgt.h:61:
+extern int pscsi_release_phydevice(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1224: FILE: include/target/target_core_stgt.h:63:
+extern void *stgt_allocate_virtdevice(se_hba_t *, const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1225: FILE: include/target/target_core_stgt.h:64:
+extern se_device_t *stgt_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1225: FILE: include/target/target_core_stgt.h:64:
+extern se_device_t *stgt_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1225: FILE: include/target/target_core_stgt.h:64:
+extern se_device_t *stgt_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1225: FILE: include/target/target_core_stgt.h:64:
+extern se_device_t *stgt_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1226: FILE: include/target/target_core_stgt.h:65:
+extern se_device_t *stgt_create_virtdevice(se_hba_t *, se_subsystem_dev_t *,
+					void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1227: FILE: include/target/target_core_stgt.h:66:
+extern int stgt_activate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1227: FILE: include/target/target_core_stgt.h:66:
+extern int stgt_activate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1228: FILE: include/target/target_core_stgt.h:67:
+extern void stgt_deactivate_device(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1228: FILE: include/target/target_core_stgt.h:67:
+extern void stgt_deactivate_device(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1229: FILE: include/target/target_core_stgt.h:68:
+extern void stgt_free_device(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#1229: FILE: include/target/target_core_stgt.h:68:
+extern void stgt_free_device(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1230: FILE: include/target/target_core_stgt.h:69:
+extern int stgt_transport_complete(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1230: FILE: include/target/target_core_stgt.h:69:
+extern int stgt_transport_complete(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1231: FILE: include/target/target_core_stgt.h:70:
+extern void *stgt_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1231: FILE: include/target/target_core_stgt.h:70:
+extern void *stgt_allocate_request(se_task_t *, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1231: FILE: include/target/target_core_stgt.h:70:
+extern void *stgt_allocate_request(se_task_t *, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1232: FILE: include/target/target_core_stgt.h:71:
+extern int stgt_do_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1232: FILE: include/target/target_core_stgt.h:71:
+extern int stgt_do_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1233: FILE: include/target/target_core_stgt.h:72:
+extern void stgt_free_task(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1233: FILE: include/target/target_core_stgt.h:72:
+extern void stgt_free_task(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1234: FILE: include/target/target_core_stgt.h:73:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1234: FILE: include/target/target_core_stgt.h:73:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1234: FILE: include/target/target_core_stgt.h:73:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#1234: FILE: include/target/target_core_stgt.h:73:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'ssize_t' should also have an identifier name
#1234: FILE: include/target/target_core_stgt.h:73:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1235: FILE: include/target/target_core_stgt.h:74:
+extern ssize_t stgt_set_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						const char *, ssize_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1236: FILE: include/target/target_core_stgt.h:75:
+extern ssize_t stgt_check_configfs_dev_params(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1236: FILE: include/target/target_core_stgt.h:75:
+extern ssize_t stgt_check_configfs_dev_params(se_hba_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1236: FILE: include/target/target_core_stgt.h:75:
+extern ssize_t stgt_check_configfs_dev_params(se_hba_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1237: FILE: include/target/target_core_stgt.h:76:
+extern ssize_t stgt_check_configfs_dev_params(se_hba_t *,
+						se_subsystem_dev_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1238: FILE: include/target/target_core_stgt.h:77:
+extern ssize_t stgt_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1238: FILE: include/target/target_core_stgt.h:77:
+extern ssize_t stgt_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_subsystem_dev_t *' should also have an identifier name
#1238: FILE: include/target/target_core_stgt.h:77:
+extern ssize_t stgt_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1238: FILE: include/target/target_core_stgt.h:77:
+extern ssize_t stgt_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: include/target/target_core_stgt.h:78:
+extern ssize_t stgt_show_configfs_dev_params(se_hba_t *, se_subsystem_dev_t *,
+						char *);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1240: FILE: include/target/target_core_stgt.h:79:
+#if 0

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1241: FILE: include/target/target_core_stgt.h:80:
+extern se_device_t *scsi_create_virtdevice_from_fd(se_subsystem_dev_t *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: include/target/target_core_stgt.h:81:
+extern se_device_t *scsi_create_virtdevice_from_fd(se_subsystem_dev_t *,
+						const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1244: FILE: include/target/target_core_stgt.h:83:
+extern void stgt_get_plugin_info(void *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1245: FILE: include/target/target_core_stgt.h:84:
+extern void stgt_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_hba_t *' should also have an identifier name
#1245: FILE: include/target/target_core_stgt.h:84:
+extern void stgt_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1245: FILE: include/target/target_core_stgt.h:84:
+extern void stgt_get_hba_info(se_hba_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1245: FILE: include/target/target_core_stgt.h:84:
+extern void stgt_get_hba_info(se_hba_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1246: FILE: include/target/target_core_stgt.h:85:
+extern void stgt_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1246: FILE: include/target/target_core_stgt.h:85:
+extern void stgt_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1246: FILE: include/target/target_core_stgt.h:85:
+extern void stgt_get_dev_info(se_device_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1246: FILE: include/target/target_core_stgt.h:85:
+extern void stgt_get_dev_info(se_device_t *, char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1247: FILE: include/target/target_core_stgt.h:86:
+extern int stgt_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long long' should also have an identifier name
#1247: FILE: include/target/target_core_stgt.h:86:
+extern int stgt_check_lba(unsigned long long, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1247: FILE: include/target/target_core_stgt.h:86:
+extern int stgt_check_lba(unsigned long long, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1248: FILE: include/target/target_core_stgt.h:87:
+extern int stgt_check_for_SG(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1248: FILE: include/target/target_core_stgt.h:87:
+extern int stgt_check_for_SG(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1249: FILE: include/target/target_core_stgt.h:88:
+extern unsigned char *stgt_get_cdb(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1249: FILE: include/target/target_core_stgt.h:88:
+extern unsigned char *stgt_get_cdb(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1250: FILE: include/target/target_core_stgt.h:89:
+extern unsigned char *stgt_get_sense_buffer(se_task_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_task_t *' should also have an identifier name
#1250: FILE: include/target/target_core_stgt.h:89:
+extern unsigned char *stgt_get_sense_buffer(se_task_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1251: FILE: include/target/target_core_stgt.h:90:
+extern u32 stgt_get_blocksize(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1251: FILE: include/target/target_core_stgt.h:90:
+extern u32 stgt_get_blocksize(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1252: FILE: include/target/target_core_stgt.h:91:
+extern u32 stgt_get_device_rev(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1252: FILE: include/target/target_core_stgt.h:91:
+extern u32 stgt_get_device_rev(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1253: FILE: include/target/target_core_stgt.h:92:
+extern u32 stgt_get_device_type(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1253: FILE: include/target/target_core_stgt.h:92:
+extern u32 stgt_get_device_type(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1254: FILE: include/target/target_core_stgt.h:93:
+extern u32 stgt_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1254: FILE: include/target/target_core_stgt.h:93:
+extern u32 stgt_get_dma_length(u32, se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1254: FILE: include/target/target_core_stgt.h:93:
+extern u32 stgt_get_dma_length(u32, se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1255: FILE: include/target/target_core_stgt.h:94:
+extern u32 stgt_get_max_sectors(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1255: FILE: include/target/target_core_stgt.h:94:
+extern u32 stgt_get_max_sectors(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1256: FILE: include/target/target_core_stgt.h:95:
+extern u32 stgt_get_queue_depth(se_device_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'se_device_t *' should also have an identifier name
#1256: FILE: include/target/target_core_stgt.h:95:
+extern u32 stgt_get_queue_depth(se_device_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1257: FILE: include/target/target_core_stgt.h:96:
+extern void stgt_shutdown_hba(struct se_hba_s *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct se_hba_s *' should also have an identifier name
#1257: FILE: include/target/target_core_stgt.h:96:
+extern void stgt_shutdown_hba(struct se_hba_s *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1258: FILE: include/target/target_core_stgt.h:97:
+extern void stgt_req_done(struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request *' should also have an identifier name
#1258: FILE: include/target/target_core_stgt.h:97:
+extern void stgt_req_done(struct request *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#1258: FILE: include/target/target_core_stgt.h:97:
+extern void stgt_req_done(struct request *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1259: FILE: include/target/target_core_stgt.h:98:
+extern int stgt_transfer_response(struct scsi_cmnd *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#1259: FILE: include/target/target_core_stgt.h:98:
+extern int stgt_transfer_response(struct scsi_cmnd *,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1260: FILE: include/target/target_core_stgt.h:99:
+^I^I^I          void (*done)(struct scsi_cmnd *));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1260: FILE: include/target/target_core_stgt.h:99:
+extern int stgt_transfer_response(struct scsi_cmnd *,
+			          void (*done)(struct scsi_cmnd *));

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct scsi_cmnd *' should also have an identifier name
#1260: FILE: include/target/target_core_stgt.h:99:
+			          void (*done)(struct scsi_cmnd *));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1269: FILE: include/target/target_core_stgt.h:108:
+typedef struct stgt_plugin_task_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1284: FILE: include/target/target_core_stgt.h:123:
+typedef struct stgt_dev_virt_s {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1295: FILE: include/target/target_core_stgt.h:134:
+typedef struct stgt_hba_s {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1301: FILE: include/target/target_core_stgt.h:140:
+extern void __stgt_get_dev_info(stgt_dev_virt_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'stgt_dev_virt_t *' should also have an identifier name
#1301: FILE: include/target/target_core_stgt.h:140:
+extern void __stgt_get_dev_info(stgt_dev_virt_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#1301: FILE: include/target/target_core_stgt.h:140:
+extern void __stgt_get_dev_info(stgt_dev_virt_t *, char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#1301: FILE: include/target/target_core_stgt.h:140:
+extern void __stgt_get_dev_info(stgt_dev_virt_t *, char *, int *);

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1319: FILE: include/target/target_core_stgt.h:158:
+	.name			= "stgt",			\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000136860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 154 warnings, 115 checks, 1167 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000136860.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
