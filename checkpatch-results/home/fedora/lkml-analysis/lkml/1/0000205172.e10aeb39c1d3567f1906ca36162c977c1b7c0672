WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#39: 
  This patch adds a tree control for siblings of driver data(cfq_driver_data).

WARNING:BAD_SIGN_OFF: Do not use whitespace before Signed-off-by:
#44: 
    Signed-off-by: Satoshi UCHIDA <s-uchida@ap.jp.nec.com>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#72: FILE: block/cfq-cgroup.c:44:
+static void cfq_cgroup_init_driver_data_opt(struct cfq_driver_data *cfqdd,
+					      struct cfq_data *cfqd)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: block/cfq-cgroup.c:51:
+static void cfq_driver_sibling_tree_add(struct cfq_driver_data *cfqdd,
+					     struct cfq_data *cfqd)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#84: FILE: block/cfq-cgroup.c:56:
+	BUG_ON(!RB_EMPTY_NODE(&cfqd->sib_node));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:LINE_SPACING: Please don't use multiple blank lines
#139: FILE: block/cfq-cgroup.c:124:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#144: FILE: block/cfq-cgroup.c:129:
+static void cfq_cgroup_erase_driver_siblings(struct cfq_driver_data *cfqdd,
+						 struct cfq_data *cfqd)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#182: FILE: block/cfq-cgroup.c:167:
 
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#193: FILE: block/cfq-cgroup.c:264:
 
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: block/cfq-iosched.c:2178:
+cfq_init_driver_data(struct request_queue *q, struct cfq_data *cfqd,
+			struct cfq_ops *op)

WARNING:TYPO_SPELLING: 'dependend' may be misspelled - perhaps 'dependent'?
#265: FILE: block/cfq-iosched.c:2199:
+	/* module dependend initialization */
 	          ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: block/cfq-iosched.c:2208:
+struct cfq_data *cfq_init_cfq_data(struct request_queue *q,
+			struct cfq_driver_data *cfqdd, struct cfq_ops *op)

CHECK:BRACES: braces {} should be used on all arms of this statement
#287: FILE: block/cfq-iosched.c:2216:
+	if (cfqdd)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#289: FILE: block/cfq-iosched.c:2218:
+	else {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#371: FILE: include/linux/cfq-iosched.h:108:
 
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#373: FILE: include/linux/cfq-iosched.h:110:
+extern struct cfq_data *cfq_init_cfq_data(struct request_queue *,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct request_queue *' should also have an identifier name
#373: FILE: include/linux/cfq-iosched.h:110:
+extern struct cfq_data *cfq_init_cfq_data(struct request_queue *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_driver_data *' should also have an identifier name
#373: FILE: include/linux/cfq-iosched.h:110:
+extern struct cfq_data *cfq_init_cfq_data(struct request_queue *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cfq_ops *' should also have an identifier name
#373: FILE: include/linux/cfq-iosched.h:110:
+extern struct cfq_data *cfq_init_cfq_data(struct request_queue *,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: include/linux/cfq-iosched.h:111:
+extern struct cfq_data *cfq_init_cfq_data(struct request_queue *,
+				struct cfq_driver_data *, struct cfq_ops *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#375: FILE: include/linux/cfq-iosched.h:112:
+extern void cfq_free_cfq_data(struct cfq_data *cfqd);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205172.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 7 warnings, 14 checks, 299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000205172.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
