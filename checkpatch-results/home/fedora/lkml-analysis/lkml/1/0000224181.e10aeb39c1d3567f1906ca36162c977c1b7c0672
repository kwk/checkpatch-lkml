WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#65: FILE: include/linux/ring_buffer.h:1:
+#ifndef _LINUX_RING_BUFFER_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((__packed__))
#80: FILE: include/linux/ring_buffer.h:16:
+} __attribute__((__packed__));

CHECK:BIT_MACRO: Prefer using the BIT macro
#110: FILE: include/linux/ring_buffer.h:46:
+#define RB_ALIGNMENT		(1 << RB_ALIGNMENT_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#125: FILE: include/linux/ring_buffer.h:61:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#145: FILE: include/linux/ring_buffer.h:81:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#174: FILE: include/linux/ring_buffer.h:110:
+	BUG_ON(event->type != RB_TYPE_DATA);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#189: FILE: include/linux/ring_buffer.h:125:
+ring_buffer_alloc(unsigned long size, unsigned flags);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#245: FILE: kernel/trace/ring_buffer.c:1:
+/*

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#263: FILE: kernel/trace/ring_buffer.c:19:
+#define sdr_print(x, y...) printk("%s:%d " x "\n", __FUNCTION__, __LINE__, y)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#263: FILE: kernel/trace/ring_buffer.c:19:
+#define sdr_print(x, y...) printk("%s:%d " x "\n", __FUNCTION__, __LINE__, y)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#272: FILE: kernel/trace/ring_buffer.c:28:
+}
+void ring_buffer_normalize_time_stamp(int cpu, u64 *ts)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#322: FILE: kernel/trace/ring_buffer.c:78:
+	unsigned		pages;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#323: FILE: kernel/trace/ring_buffer.c:79:
+	unsigned		flags;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#327: FILE: kernel/trace/ring_buffer.c:83:
+	spinlock_t		lock;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#328: FILE: kernel/trace/ring_buffer.c:84:
+	struct mutex		mutex;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#397: FILE: kernel/trace/ring_buffer.c:153:
+ring_buffer_alloc(unsigned long size, unsigned flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#479: FILE: kernel/trace/ring_buffer.c:235:
+rb_page_body(struct ring_buffer_per_cpu *cpu_buffer,
+		      unsigned long page, unsigned index)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#479: FILE: kernel/trace/ring_buffer.c:235:
+		      unsigned long page, unsigned index)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#487: FILE: kernel/trace/ring_buffer.c:243:
+	return rb_page_body(cpu_buffer,cpu_buffer->head_page,
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: kernel/trace/ring_buffer.c:324:
+			 unsigned type, unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#568: FILE: kernel/trace/ring_buffer.c:324:
+			 unsigned type, unsigned length)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#579: FILE: kernel/trace/ring_buffer.c:335:
+			(RB_LEN_TIME_EXTENT + (RB_ALIGNMENT-1))
 			                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#585: FILE: kernel/trace/ring_buffer.c:341:
+			(RB_LEN_TIME_STAMP + (RB_ALIGNMENT-1))
 			                                  ^

CHECK:BRACES: Unbalanced braces around else statement
#594: FILE: kernel/trace/ring_buffer.c:350:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#596: FILE: kernel/trace/ring_buffer.c:352:
+				(length + (RB_ALIGNMENT-1))
 				                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#600: FILE: kernel/trace/ring_buffer.c:356:
+		BUG();

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: kernel/trace/ring_buffer.c:360:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: kernel/trace/ring_buffer.c:360:
+static inline unsigned rb_calculate_event_length(unsigned length)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#623: FILE: kernel/trace/ring_buffer.c:379:
+			   unsigned type, unsigned long length, u64 *ts)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#633: FILE: kernel/trace/ring_buffer.c:389:
+	BUG_ON(tail_page >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#634: FILE: kernel/trace/ring_buffer.c:390:
+	BUG_ON(head_page >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#666: FILE: kernel/trace/ring_buffer.c:422:
+	BUG_ON(tail_page >= buffer->pages);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#667: FILE: kernel/trace/ring_buffer.c:423:
+	BUG_ON(tail + length > BUF_PAGE_SIZE);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#678: FILE: kernel/trace/ring_buffer.c:434:
+			       unsigned type, unsigned long length)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#887: FILE: kernel/trace/ring_buffer.c:643:
+	for (cpu = 0; cpu < buffer->cpus; cpu++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#904: FILE: kernel/trace/ring_buffer.c:660:
+	for (cpu = buffer->cpus - 1; cpu >= 0; cpu--) {
+

WARNING:TYPO_SPELLING: 'truely' may be misspelled - perhaps 'truly'?
#929: FILE: kernel/trace/ring_buffer.c:685:
+ * to truely enable the writing (much like preempt_disable).
       ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1043: FILE: kernel/trace/ring_buffer.c:799:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1054: FILE: kernel/trace/ring_buffer.c:810:
+		BUG_ON(cpu_buffer->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1066: FILE: kernel/trace/ring_buffer.c:822:
+	BUG_ON((cpu_buffer->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu_buffer->head_page != cpu_buffer->tail_page'
#1073: FILE: kernel/trace/ring_buffer.c:829:
+	if (ring_buffer_null_event(event) &&
+	    (cpu_buffer->head_page != cpu_buffer->tail_page))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1084: FILE: kernel/trace/ring_buffer.c:840:
+	unsigned length;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1099: FILE: kernel/trace/ring_buffer.c:855:
+		BUG_ON(iter->head_page == cpu_buffer->tail_page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1111: FILE: kernel/trace/ring_buffer.c:867:
+	BUG_ON((iter->head_page == cpu_buffer->tail_page) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'iter->head_page != cpu_buffer->tail_page'
#1118: FILE: kernel/trace/ring_buffer.c:874:
+	if (ring_buffer_null_event(event) &&
+	    (iter->head_page != cpu_buffer->tail_page))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1171: FILE: kernel/trace/ring_buffer.c:927:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1230: FILE: kernel/trace/ring_buffer.c:986:
+		BUG();

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1349: FILE: kernel/trace/ring_buffer.c:1105:
+	cpu_buffer->head_page = cpu_buffer->tail_page = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1350: FILE: kernel/trace/ring_buffer.c:1106:
+	cpu_buffer->head = cpu_buffer->tail = 0;

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1471: FILE: kernel/trace/Kconfig:18:
+config RING_BUFFER
+	bool "ring buffer"
+

Kconfig symbols should have a help text which fully describes
it.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 34 warnings, 15 checks, 1409 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000224181.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
