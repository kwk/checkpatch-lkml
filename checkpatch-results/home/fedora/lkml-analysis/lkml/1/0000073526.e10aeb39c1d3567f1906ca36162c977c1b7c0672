WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#38: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git x86-paravirt-for-linus

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#802: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#807: FILE: arch/x86/include/asm/paravirt_types.h:1:
+#ifndef _ASM_X86_PARAVIRT_TYPES_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:BIT_MACRO: Prefer using the BIT macro
#812: FILE: arch/x86/include/asm/paravirt_types.h:6:
+#define CLBR_EAX  (1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#813: FILE: arch/x86/include/asm/paravirt_types.h:7:
+#define CLBR_ECX  (1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#814: FILE: arch/x86/include/asm/paravirt_types.h:8:
+#define CLBR_EDX  (1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#815: FILE: arch/x86/include/asm/paravirt_types.h:9:
+#define CLBR_EDI  (1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#829: FILE: arch/x86/include/asm/paravirt_types.h:23:
+#define CLBR_RSI  (1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#830: FILE: arch/x86/include/asm/paravirt_types.h:24:
+#define CLBR_R8   (1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#831: FILE: arch/x86/include/asm/paravirt_types.h:25:
+#define CLBR_R9   (1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#832: FILE: arch/x86/include/asm/paravirt_types.h:26:
+#define CLBR_R10  (1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#833: FILE: arch/x86/include/asm/paravirt_types.h:27:
+#define CLBR_R11  (1 << 8)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#885: FILE: arch/x86/include/asm/paravirt_types.h:79:
+	unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#886: FILE: arch/x86/include/asm/paravirt_types.h:80:
+			  unsigned long addr, unsigned len);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#897: FILE: arch/x86/include/asm/paravirt_types.h:91:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#909: FILE: arch/x86/include/asm/paravirt_types.h:103:
+	int (*set_wallclock)(unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#923: FILE: arch/x86/include/asm/paravirt_types.h:117:
+	void (*write_cr0)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#927: FILE: arch/x86/include/asm/paravirt_types.h:121:
+	void (*write_cr4)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#931: FILE: arch/x86/include/asm/paravirt_types.h:125:
+	void (*write_cr8)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct desc_ptr *' should also have an identifier name
#936: FILE: arch/x86/include/asm/paravirt_types.h:130:
+	void (*load_gdt)(const struct desc_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct desc_ptr *' should also have an identifier name
#937: FILE: arch/x86/include/asm/paravirt_types.h:131:
+	void (*load_idt)(const struct desc_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_ptr *' should also have an identifier name
#938: FILE: arch/x86/include/asm/paravirt_types.h:132:
+	void (*store_gdt)(struct desc_ptr *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_ptr *' should also have an identifier name
#939: FILE: arch/x86/include/asm/paravirt_types.h:133:
+	void (*store_idt)(struct desc_ptr *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#940: FILE: arch/x86/include/asm/paravirt_types.h:134:
+	void (*set_ldt)(const void *desc, unsigned entries);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct desc_struct *' should also have an identifier name
#948: FILE: arch/x86/include/asm/paravirt_types.h:142:
+	void (*write_gdt_entry)(struct desc_struct *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gate_desc *' should also have an identifier name
#950: FILE: arch/x86/include/asm/paravirt_types.h:144:
+	void (*write_idt_entry)(gate_desc *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#952: FILE: arch/x86/include/asm/paravirt_types.h:146:
+	void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#953: FILE: arch/x86/include/asm/paravirt_types.h:147:
+	void (*free_ldt)(struct desc_struct *ldt, unsigned entries);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#957: FILE: arch/x86/include/asm/paravirt_types.h:151:
+	void (*set_iopl_mask)(unsigned mask);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#967: FILE: arch/x86/include/asm/paravirt_types.h:161:
+	/* MSR, PMC and TSR operations.
+	   err = 0/-EFAULT.  wrmsr returns 0/-EFAULT. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#967: FILE: arch/x86/include/asm/paravirt_types.h:161:
+	   err = 0/-EFAULT.  wrmsr returns 0/-EFAULT. */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#970: FILE: arch/x86/include/asm/paravirt_types.h:164:
+	int (*write_msr)(unsigned int msr, unsigned low, unsigned high);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#970: FILE: arch/x86/include/asm/paravirt_types.h:164:
+	int (*write_msr)(unsigned int msr, unsigned low, unsigned high);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1001: FILE: arch/x86/include/asm/paravirt_types.h:195:
+	/* Normal iret.  Jump to this with the standard iret stack
+	   frame set up. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1001: FILE: arch/x86/include/asm/paravirt_types.h:195:
+	   frame set up. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1057: FILE: arch/x86/include/asm/paravirt_types.h:251:
+	void (*write_cr2)(unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#1060: FILE: arch/x86/include/asm/paravirt_types.h:254:
+	void (*write_cr3)(unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1072: FILE: arch/x86/include/asm/paravirt_types.h:266:
+
+

WARNING:LONG_LINE: line length of 117 exceeds 100 columns
#1091: FILE: arch/x86/include/asm/paravirt_types.h:285:
+	void (*alloc_pmd_clone)(unsigned long pfn, unsigned long clonepfn, unsigned long start, unsigned long count);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1149: FILE: arch/x86/include/asm/paravirt_types.h:343:
+	/* Sometimes the physical address is a pfn, and sometimes its
+	   an mfn.  We can tell which is which from the index. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1149: FILE: arch/x86/include/asm/paravirt_types.h:343:
+	   an mfn.  We can tell which is which from the index. */

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned' should also have an identifier name
#1150: FILE: arch/x86/include/asm/paravirt_types.h:344:
+	void (*set_fixmap)(unsigned /* enum fixed_addresses */ idx,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1166: FILE: arch/x86/include/asm/paravirt_types.h:360:
+ * what to patch. */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#1189: FILE: arch/x86/include/asm/paravirt_types.h:383:
+#define paravirt_type(op)				\
+	[paravirt_typenum] "i" (PARAVIRT_PATCH(op)),	\
+	[paravirt_opptr] "i" (&(op))

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1200: FILE: arch/x86/include/asm/paravirt_types.h:394:
+	"771:\n\t" insn_string "\n" "772:\n"		\

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1214: FILE: arch/x86/include/asm/paravirt_types.h:408:
+#define DEF_NATIVE(ops, name, code) ^I^I^I^I^I\$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1218: FILE: arch/x86/include/asm/paravirt_types.h:412:
+unsigned paravirt_patch_nop(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1219: FILE: arch/x86/include/asm/paravirt_types.h:413:
+unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1219: FILE: arch/x86/include/asm/paravirt_types.h:413:
+unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1220: FILE: arch/x86/include/asm/paravirt_types.h:414:
+unsigned paravirt_patch_ident_64(void *insnbuf, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1220: FILE: arch/x86/include/asm/paravirt_types.h:414:
+unsigned paravirt_patch_ident_64(void *insnbuf, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1221: FILE: arch/x86/include/asm/paravirt_types.h:415:
+unsigned paravirt_patch_ignore(unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1221: FILE: arch/x86/include/asm/paravirt_types.h:415:
+unsigned paravirt_patch_ignore(unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1222: FILE: arch/x86/include/asm/paravirt_types.h:416:
+unsigned paravirt_patch_call(void *insnbuf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1225: FILE: arch/x86/include/asm/paravirt_types.h:419:
+			     unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1226: FILE: arch/x86/include/asm/paravirt_types.h:420:
+unsigned paravirt_patch_jmp(void *insnbuf, const void *target,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1227: FILE: arch/x86/include/asm/paravirt_types.h:421:
+			    unsigned long addr, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1228: FILE: arch/x86/include/asm/paravirt_types.h:422:
+unsigned paravirt_patch_default(u8 type, u16 clobbers, void *insnbuf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1229: FILE: arch/x86/include/asm/paravirt_types.h:423:
+				unsigned long addr, unsigned len);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1231: FILE: arch/x86/include/asm/paravirt_types.h:425:
+unsigned paravirt_patch_insns(void *insnbuf, unsigned len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1231: FILE: arch/x86/include/asm/paravirt_types.h:425:
+unsigned paravirt_patch_insns(void *insnbuf, unsigned len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1234: FILE: arch/x86/include/asm/paravirt_types.h:428:
+unsigned native_patch(u8 type, u16 clobbers, void *ibuf,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1235: FILE: arch/x86/include/asm/paravirt_types.h:429:
+		      unsigned long addr, unsigned len);

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#1313: FILE: arch/x86/include/asm/paravirt_types.h:507:
+	unsigned long __eax = __eax, __edx = __edx, __ecx = __ecx

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#1331: FILE: arch/x86/include/asm/paravirt_types.h:525:
+	unsigned long __edi = __edi, __esi = __esi,	\

WARNING:SELF_ASSIGNMENT: Do not use self-assignments to avoid compiler warnings
#1332: FILE: arch/x86/include/asm/paravirt_types.h:526:
+		__edx = __edx, __ecx = __ecx

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1333: FILE: arch/x86/include/asm/paravirt_types.h:527:
+#define PVOP_CALL_ARGS		PVOP_VCALL_ARGS, __eax

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1343: FILE: arch/x86/include/asm/paravirt_types.h:537:
+#define PVOP_CALL_CLOBBERS	PVOP_VCALL_CLOBBERS, "=a" (__eax)

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1348: FILE: arch/x86/include/asm/paravirt_types.h:542:
+#define EXTRA_CLOBBERS	 , "r8", "r9", "r10", "r11"
                       	 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#1349: FILE: arch/x86/include/asm/paravirt_types.h:543:
+#define VEXTRA_CLOBBERS	 , "rax", "r8", "r9", "r10", "r11"
                        	 ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1353: FILE: arch/x86/include/asm/paravirt_types.h:547:
+#define PVOP_TEST_NULL(op)	BUG_ON(op == NULL)

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'op' may be better as '(op)' to avoid precedence issues
#1353: FILE: arch/x86/include/asm/paravirt_types.h:547:
+#define PVOP_TEST_NULL(op)	BUG_ON(op == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!op"
#1353: FILE: arch/x86/include/asm/paravirt_types.h:547:
+#define PVOP_TEST_NULL(op)	BUG_ON(op == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'rettype' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'clbr' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'call_clbr' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'extra_clbr' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pre' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'post' - possible side-effects?
#1358: FILE: arch/x86/include/asm/paravirt_types.h:552:
+#define ____PVOP_CALL(rettype, op, clbr, call_clbr, extra_clbr,		\
+		      pre, post, ...)					\
+	({								\
+		rettype __ret;						\
+		PVOP_CALL_ARGS;						\
+		PVOP_TEST_NULL(op);					\
+		/* This is 32-bit specific, but is okay in 64-bit */	\
+		/* since this condition will never hold */		\
+		if (sizeof(rettype) > sizeof(unsigned long)) {		\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)((((u64)__edx) << 32) | __eax); \
+		} else {						\
+			asm volatile(pre				\
+				     paravirt_alt(PARAVIRT_CALL)	\
+				     post				\
+				     : call_clbr			\
+				     : paravirt_type(op),		\
+				       paravirt_clobber(clbr),		\
+				       ##__VA_ARGS__			\
+				     : "memory", "cc" extra_clbr);	\
+			__ret = (rettype)__eax;				\
+		}							\
+		__ret;							\
+	})

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1396: FILE: arch/x86/include/asm/paravirt_types.h:590:
+		      PVOP_CALLEE_CLOBBERS, ,				\
 		                            ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1399: FILE: arch/x86/include/asm/paravirt_types.h:593:
+
+

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#1400: FILE: arch/x86/include/asm/paravirt_types.h:594:
+#define ____PVOP_VCALL(op, clbr, call_clbr, extra_clbr, pre, post, ...)	\
+	({								\
+		PVOP_VCALL_ARGS;					\
+		PVOP_TEST_NULL(op);					\
+		asm volatile(pre					\
+			     paravirt_alt(PARAVIRT_CALL)		\
+			     post					\
+			     : call_clbr				\
+			     : paravirt_type(op),			\
+			       paravirt_clobber(clbr),			\
+			       ##__VA_ARGS__				\
+			     : "memory", "cc" extra_clbr);		\
+	})

ERROR:SPACING: space prohibited before that ',' (ctx:WxE)
#1421: FILE: arch/x86/include/asm/paravirt_types.h:615:
+		      PVOP_VCALLEE_CLOBBERS, ,				\
 		                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1424: FILE: arch/x86/include/asm/paravirt_types.h:618:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1436: FILE: arch/x86/include/asm/paravirt_types.h:630:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1447: FILE: arch/x86/include/asm/paravirt_types.h:641:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1462: FILE: arch/x86/include/asm/paravirt_types.h:656:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u32' should also have an identifier name
#1508: FILE: arch/x86/include/asm/paravirt_types.h:702:
+u32 _paravirt_ident_32(u32);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'u64' should also have an identifier name
#1509: FILE: arch/x86/include/asm/paravirt_types.h:703:
+u64 _paravirt_ident_64(u64);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1515: FILE: arch/x86/include/asm/paravirt_types.h:709:
+^Iu8 *instr; ^I^I/* original instructions */$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073526.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 58 warnings, 27 checks, 1459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000073526.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
