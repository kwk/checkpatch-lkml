WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
Any string data in TOMOYO Linux consists with ASCII printable characters (0x21 to 0x7E)

WARNING:TYPO_SPELLING: 'carrige' may be misspelled - perhaps 'carriage'?
#31: 
so that userland application can separate monotonically using whitespaces and carrige returns.
                                                                              ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: security/tomoyo/common.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#47: FILE: security/tomoyo/common.c:2:
+ * security/tomoyo/common.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#62: FILE: security/tomoyo/common.c:17:
+#include <asm/uaccess.h>

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#70: FILE: security/tomoyo/common.c:25:
+#if defined (CONFIG_TOMOYO_MAX_ACCEPT_ENTRY)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#81: FILE: security/tomoyo/common.c:36:
+int sbin_init_started = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#112: FILE: security/tomoyo/common.c:67:
+__setup("TOMOYO_QUIET", tomoyo_quiet_setup);

WARNING:LINE_SPACING: Missing a blank line after declarations
#129: FILE: security/tomoyo/common.c:84:
+	int first = 1;
+	while (*sp && (*sp <= ' ' || *sp >= 127)) sp++;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#129: FILE: security/tomoyo/common.c:84:
+	while (*sp && (*sp <= ' ' || *sp >= 127)) sp++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#131: FILE: security/tomoyo/common.c:86:
+		if (!first) *dp++ = ' ';

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#133: FILE: security/tomoyo/common.c:88:
+		while (*sp > ' ' && *sp < 127) *dp++ = *sp++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#134: FILE: security/tomoyo/common.c:89:
+		while (*sp && (*sp <= ' ' || *sp >= 127)) sp++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#144: FILE: security/tomoyo/common.c:99:
+                           const int start_type,$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#144: FILE: security/tomoyo/common.c:99:
+                           const int start_type,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#145: FILE: security/tomoyo/common.c:100:
+                           const int pattern_type,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#145: FILE: security/tomoyo/common.c:100:
+                           const int pattern_type,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#146: FILE: security/tomoyo/common.c:101:
+                           const int end_type,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#146: FILE: security/tomoyo/common.c:101:
+                           const int end_type,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#147: FILE: security/tomoyo/common.c:102:
+                           const char *function)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#147: FILE: security/tomoyo/common.c:102:
+                           const char *function)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#152: FILE: security/tomoyo/common.c:107:
+	const char *original_filename = filename;
+	if (!filename) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#152: FILE: security/tomoyo/common.c:107:
+	if (!filename) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#155: FILE: security/tomoyo/common.c:110:
+		if (c != '/') goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: security/tomoyo/common.c:112:
+		if (c == '/') goto out;

ERROR:SPACING: space prohibited after that '*' (ctx:WxW)
#159: FILE: security/tomoyo/common.c:114:
+	if (c) c = * (strchr(filename, '\0') - 1);
 	           ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#159: FILE: security/tomoyo/common.c:114:
+	if (c) c = * (strchr(filename, '\0') - 1);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#161: FILE: security/tomoyo/common.c:116:
+		if (c != '/') goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#163: FILE: security/tomoyo/common.c:118:
+		if (c == '/') goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#180: FILE: security/tomoyo/common.c:135:
+				if (pattern_type == -1) break; /* Must not contain pattern */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#187: FILE: security/tomoyo/common.c:142:
+				if ((d = *filename++) >= '0' &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#192: FILE: security/tomoyo/common.c:147:
+						(((unsigned char) (c - '0')) << 6) +

CHECK:SPACING: No space is necessary after a cast
#193: FILE: security/tomoyo/common.c:148:
+						(((unsigned char) (d - '0')) << 3) +

CHECK:SPACING: No space is necessary after a cast
#194: FILE: security/tomoyo/common.c:149:
+						(((unsigned char) (e - '0')));

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#205: FILE: security/tomoyo/common.c:160:
+		if (!contains_pattern) goto out;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#209: FILE: security/tomoyo/common.c:164:
+	printk(KERN_DEBUG "%s: Invalid pathname '%s'\n", function, original_filename);

WARNING:LINE_SPACING: Missing a blank line after declarations
#221: FILE: security/tomoyo/common.c:176:
+	const char *org_domainname = domainname;
+	if (!domainname || strncmp(domainname, TOMOYO_ROOT_NAME, TOMOYO_ROOT_NAME_LEN)) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#221: FILE: security/tomoyo/common.c:176:
+	if (!domainname || strncmp(domainname, TOMOYO_ROOT_NAME, TOMOYO_ROOT_NAME_LEN)) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#223: FILE: security/tomoyo/common.c:178:
+	if (!*domainname) return 1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#225: FILE: security/tomoyo/common.c:180:
+		if (*domainname++ != ' ') goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#226: FILE: security/tomoyo/common.c:181:
+		if (*domainname++ != '/') goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#237: FILE: security/tomoyo/common.c:192:
+					if ((d = *domainname++) >= '0' &&

CHECK:SPACING: No space is necessary after a cast
#242: FILE: security/tomoyo/common.c:197:
+							(((unsigned char) (c - '0')) << 6) +

CHECK:SPACING: No space is necessary after a cast
#243: FILE: security/tomoyo/common.c:198:
+							(((unsigned char) (d - '0')) << 3) +

CHECK:SPACING: No space is necessary after a cast
#244: FILE: security/tomoyo/common.c:199:
+							(((unsigned char) (e - '0')));

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#245: FILE: security/tomoyo/common.c:200:
+						if (f && (f <= ' ' || f >= 127))

Indentation with 6 or more tabs usually indicate overly indented
code.

It is suggested to refactor excessive indentation of
if/else/for/do/while/switch statements.

See: https://lore.kernel.org/lkml/1328311239.21255.24.camel@joe2Laptop/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#257: FILE: security/tomoyo/common.c:212:
+	printk(KERN_DEBUG "%s: Invalid domainname '%s'\n", function, org_domainname);

WARNING:LINE_SPACING: Missing a blank line after declarations
#264: FILE: security/tomoyo/common.c:219:
+	int i = 0;
+	if (pathname) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#266: FILE: security/tomoyo/common.c:221:
+		char *ep = strchr(pathname, '\0');
+		if (pathname < ep--) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#267: FILE: security/tomoyo/common.c:222:
+			if (*ep != '/') i++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#268: FILE: security/tomoyo/common.c:223:
+			while (pathname <= ep) if (*ep-- == '/') i += 2;

WARNING:LINE_SPACING: Missing a blank line after declarations
#277: FILE: security/tomoyo/common.c:232:
+	int len = 0;
+	if (filename) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: security/tomoyo/common.c:234:
+		char c;
+		while ((c = *filename++) != '\0') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#292: FILE: security/tomoyo/common.c:247:
+				if ((c = *filename++) >= '0' &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#310: FILE: security/tomoyo/common.c:265:
+	const int len = strlen(name);
+	ptr->total_len = len;

ERROR:CODE_INDENT: code indent should use tabs where possible
#319: FILE: security/tomoyo/common.c:274:
+                                           const char *filename_end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#319: FILE: security/tomoyo/common.c:274:
+                                           const char *filename_end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#320: FILE: security/tomoyo/common.c:275:
+                                           const char *pattern,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#320: FILE: security/tomoyo/common.c:275:
+                                           const char *pattern,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#321: FILE: security/tomoyo/common.c:276:
+                                           const char *pattern_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#321: FILE: security/tomoyo/common.c:276:
+                                           const char *pattern_end)$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#325: FILE: security/tomoyo/common.c:280:
+			if (*filename++ != *pattern++) return 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: security/tomoyo/common.c:283:
+			char c = *filename;
+			pattern++;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#334: FILE: security/tomoyo/common.c:289:
+					if ((c = filename[1]) == '\\') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#336: FILE: security/tomoyo/common.c:291:
+					} else if (c >= '0' &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#337: FILE: security/tomoyo/common.c:292:
+^I^I^I^I^I           c <= '3' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#338: FILE: security/tomoyo/common.c:293:
+^I^I^I^I^I           (c = filename[2]) >= '0' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#339: FILE: security/tomoyo/common.c:294:
+^I^I^I^I^I           c <= '7' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#340: FILE: security/tomoyo/common.c:295:
+^I^I^I^I^I           (c = filename[3]) >= '0' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#341: FILE: security/tomoyo/common.c:296:
+^I^I^I^I^I           c <= '7') {$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#349: FILE: security/tomoyo/common.c:304:
+				if (c != '\\') return 0;

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#350: FILE: security/tomoyo/common.c:305:
+				if (*++filename != '\\') return 0; /* safe because *filename != '\0' */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#350: FILE: security/tomoyo/common.c:305:
+				if (*++filename != '\\') return 0; /* safe because *filename != '\0' */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#353: FILE: security/tomoyo/common.c:308:
+				if (c < '0' || c > '9') return 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: security/tomoyo/common.c:312:
+				if (!((c >= '0' && c <= '9') ||
+				    (c >= 'A' && c <= 'F') ||

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#362: FILE: security/tomoyo/common.c:317:
+				if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) return 0;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#368: FILE: security/tomoyo/common.c:323:
+				if (c == '\\' &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#387: FILE: security/tomoyo/common.c:342:
+					int i;
+					for (i = 0; i <= filename_end - filename; i++) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#388: FILE: security/tomoyo/common.c:343:
+						if (tomoyo_file_matches_to_pattern2(filename + i,

ERROR:CODE_INDENT: code indent should use tabs where possible
#389: FILE: security/tomoyo/common.c:344:
+^I^I^I^I^I^I                                    filename_end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#390: FILE: security/tomoyo/common.c:345:
+^I^I^I^I^I^I                                    pattern + 1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#391: FILE: security/tomoyo/common.c:346:
+^I^I^I^I^I^I                                    pattern_end))$

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#393: FILE: security/tomoyo/common.c:348:
+						if ((c = filename[i]) == '.' && *pattern == '@')

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#393: FILE: security/tomoyo/common.c:348:
+						if ((c = filename[i]) == '.' && *pattern == '@')

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#395: FILE: security/tomoyo/common.c:350:
+						if (c == '\\') {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#396: FILE: security/tomoyo/common.c:351:
+							if ((c = filename[i + 1]) == '\\') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#396: FILE: security/tomoyo/common.c:351:
+							if ((c = filename[i + 1]) == '\\') {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#399: FILE: security/tomoyo/common.c:354:
+							} else if (c >= '0' &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#399: FILE: security/tomoyo/common.c:354:
+							} else if (c >= '0' &&

ERROR:CODE_INDENT: code indent should use tabs where possible
#400: FILE: security/tomoyo/common.c:355:
+^I^I^I^I^I^I^I           c <= '3' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#401: FILE: security/tomoyo/common.c:356:
+^I^I^I^I^I^I^I           (c = filename[i + 2]) >= '0' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#402: FILE: security/tomoyo/common.c:357:
+^I^I^I^I^I^I^I           c <= '7' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#403: FILE: security/tomoyo/common.c:358:
+^I^I^I^I^I^I^I           (c = filename[i + 3]) >= '0' &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#404: FILE: security/tomoyo/common.c:359:
+^I^I^I^I^I^I^I           c <= '7') {$

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#407: FILE: security/tomoyo/common.c:362:
+							} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#417: FILE: security/tomoyo/common.c:372:
+					int i, j = 0;
+					if ((c = *pattern) == '$') {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#417: FILE: security/tomoyo/common.c:372:
+					if ((c = *pattern) == '$') {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#418: FILE: security/tomoyo/common.c:373:
+						while ((c = filename[j]) >= '0' && c <= '9') j++;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#418: FILE: security/tomoyo/common.c:373:
+						while ((c = filename[j]) >= '0' && c <= '9') j++;

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#420: FILE: security/tomoyo/common.c:375:
+						while (((c = filename[j]) >= '0' && c <= '9') ||

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#425: FILE: security/tomoyo/common.c:380:
+						while (((c = filename[j]) >= 'A' && c <= 'Z') ||

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#430: FILE: security/tomoyo/common.c:385:
+						if (tomoyo_file_matches_to_pattern2(filename + i,

ERROR:CODE_INDENT: code indent should use tabs where possible
#431: FILE: security/tomoyo/common.c:386:
+^I^I^I^I^I^I                                    filename_end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#432: FILE: security/tomoyo/common.c:387:
+^I^I^I^I^I^I                                    pattern + 1,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#433: FILE: security/tomoyo/common.c:388:
+^I^I^I^I^I^I                                    pattern_end))$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#443: FILE: security/tomoyo/common.c:398:
+	while (*pattern == '\\' && (*(pattern + 1) == '*' || *(pattern + 1) == '@')) pattern += 2;

ERROR:CODE_INDENT: code indent should use tabs where possible
#448: FILE: security/tomoyo/common.c:403:
+                                          const char *filename_end,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#448: FILE: security/tomoyo/common.c:403:
+                                          const char *filename_end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#449: FILE: security/tomoyo/common.c:404:
+                                          const char *pattern,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: security/tomoyo/common.c:404:
+                                          const char *pattern,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: security/tomoyo/common.c:405:
+                                          const char *pattern_end)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: security/tomoyo/common.c:405:
+                                          const char *pattern_end)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#455: FILE: security/tomoyo/common.c:410:
+	int result;
+	while (pattern < pattern_end - 1) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#456: FILE: security/tomoyo/common.c:411:
+		if (*pattern++ != '\\' || *pattern++ != '-') continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#458: FILE: security/tomoyo/common.c:413:
+^I^I                                         filename_end,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#459: FILE: security/tomoyo/common.c:414:
+^I^I                                         pattern_start,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#460: FILE: security/tomoyo/common.c:415:
+^I^I                                         pattern - 2);$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#461: FILE: security/tomoyo/common.c:416:
+		if (first) result = !result;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#462: FILE: security/tomoyo/common.c:417:
+		if (result) return 0;

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#466: FILE: security/tomoyo/common.c:421:
+	result = tomoyo_file_matches_to_pattern2(filename, filename_end, pattern_start, pattern_end);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: security/tomoyo/common.c:445:
+                                   const struct path_info *pattern0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: security/tomoyo/common.c:445:
+                                   const struct path_info *pattern0)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#494: FILE: security/tomoyo/common.c:449:
+	const int len = pattern0->const_len;
+	if (!pattern0->is_patterned) return !tomoyo_pathcmp(pathname0, pattern0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#494: FILE: security/tomoyo/common.c:449:
+	if (!pattern0->is_patterned) return !tomoyo_pathcmp(pathname0, pattern0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#495: FILE: security/tomoyo/common.c:450:
+	if (pathname0->depth != pattern0->depth) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#496: FILE: security/tomoyo/common.c:451:
+	if (strncmp(pathname, pattern, len)) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#502: FILE: security/tomoyo/common.c:457:
+		if (!pathname_delimiter) pathname_delimiter = strchr(pathname, '\0');

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#503: FILE: security/tomoyo/common.c:458:
+		if (!pattern_delimiter) pattern_delimiter = strchr(pattern, '\0');

ERROR:CODE_INDENT: code indent should use tabs where possible
#505: FILE: security/tomoyo/common.c:460:
+^I^I                                    pathname_delimiter,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#506: FILE: security/tomoyo/common.c:461:
+^I^I                                    pattern,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#507: FILE: security/tomoyo/common.c:462:
+^I^I                                    pattern_delimiter))$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#512: FILE: security/tomoyo/common.c:467:
+	while (*pattern == '\\' && (*(pattern + 1) == '*' || *(pattern + 1) == '@')) pattern += 2;

WARNING:LINE_SPACING: Missing a blank line after declarations
#525: FILE: security/tomoyo/common.c:480:
+	int len, pos = head->read_avail, size = head->readbuf_size - pos;
+	if (size <= 0) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#525: FILE: security/tomoyo/common.c:480:
+	if (size <= 0) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#529: FILE: security/tomoyo/common.c:484:
+	if (pos + len >= head->readbuf_size) return -ENOMEM;

WARNING:LONG_LINE_COMMENT: line length of 103 exceeds 100 columns
#536: FILE: security/tomoyo/common.c:491:
+ * This function uses tomoyo_alloc(), so caller must tomoyo_free() if this function didn't return NULL.

WARNING:LINE_SPACING: Missing a blank line after declarations
#542: FILE: security/tomoyo/common.c:497:
+		struct vm_area_struct *vma = current->mm->mmap;
+		while (vma) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#545: FILE: security/tomoyo/common.c:500:
+^I^I^I^I                                   vma->vm_file->f_vfsmnt);$

CHECK:SPACING: No space is necessary after a cast
#566: FILE: security/tomoyo/common.c:521:
+	const u8 profile = ((struct tomoyo_security *) current->security)->domain_info->profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#567: FILE: security/tomoyo/common.c:522:
+	const u8 profile = ((struct tomoyo_security *) current->security)->domain_info->profile;
+	return sbin_init_started && index < TOMOYO_MAX_CONTROL_INDEX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#569: FILE: security/tomoyo/common.c:524:
+#if TOMOYO_MAX_PROFILES != 256
+		&& profile < TOMOYO_MAX_PROFILES

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#571: FILE: security/tomoyo/common.c:526:
+#endif
+		&& profile_ptr[profile] ? profile_ptr[profile]->value[index] : 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#595: FILE: security/tomoyo/common.c:550:
+	struct profile *ptr = NULL;
+	down(&profile_lock);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#596: FILE: security/tomoyo/common.c:551:
+	if (profile < TOMOYO_MAX_PROFILES && (ptr = profile_ptr[profile]) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#597: FILE: security/tomoyo/common.c:552:
+		if ((ptr = tomoyo_alloc_element(sizeof(*ptr))) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#599: FILE: security/tomoyo/common.c:554:
+			int i;
+			for (i = 0; i < TOMOYO_MAX_CONTROL_INDEX; i++)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#609: FILE: security/tomoyo/common.c:564:
+static int profile_loaded = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#617: FILE: security/tomoyo/common.c:572:
+	struct profile *profile;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#617: FILE: security/tomoyo/common.c:572:
+	if (!tomoyo_is_root()) return -EPERM;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#618: FILE: security/tomoyo/common.c:573:
+	i = simple_strtoul(data, &cp, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#620: FILE: security/tomoyo/common.c:575:
+		if (*cp != '-') return -EINVAL;

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#621: FILE: security/tomoyo/common.c:576:
+		data= cp + 1;
 		    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#624: FILE: security/tomoyo/common.c:579:
+	if (!profile) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#626: FILE: security/tomoyo/common.c:581:
+	if (!cp) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#634: FILE: security/tomoyo/common.c:589:
+	if (sscanf(cp + 1, "%u", &value) != 1) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#636: FILE: security/tomoyo/common.c:591:
+		if (strcmp(data, ccs_control_array[i].keyword)) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#637: FILE: security/tomoyo/common.c:592:
+		if (value > ccs_control_array[i].max_value) value = ccs_control_array[i].max_value;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#647: FILE: security/tomoyo/common.c:602:
+		if (!tomoyo_is_root()) return -EPERM;

WARNING:LINE_SPACING: Missing a blank line after declarations
#650: FILE: security/tomoyo/common.c:605:
+			int step;
+			for (step = head->read_step;

WARNING:LINE_SPACING: Missing a blank line after declarations
#656: FILE: security/tomoyo/common.c:611:
+				const struct profile *profile = profile_ptr[i];
+				head->read_step = step;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#657: FILE: security/tomoyo/common.c:612:
+				if (!profile) continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: security/tomoyo/common.c:615:
+^I^I^I^I^I                     "%u-%s=%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: security/tomoyo/common.c:616:
+^I^I^I^I^I                     i,$

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#662: FILE: security/tomoyo/common.c:617:
+					                     ccs_control_array[TOMOYO_PROFILE_COMMENT].keyword,

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: security/tomoyo/common.c:617:
+^I^I^I^I^I                     ccs_control_array[TOMOYO_PROFILE_COMMENT].keyword,$

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#663: FILE: security/tomoyo/common.c:618:
+					                     profile->comment ? profile->comment->name : ""))

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: security/tomoyo/common.c:618:
+^I^I^I^I^I                     profile->comment ? profile->comment->name : ""))$

ERROR:CODE_INDENT: code indent should use tabs where possible
#667: FILE: security/tomoyo/common.c:622:
+^I^I^I^I^I                     "%u-%s=%u\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#668: FILE: security/tomoyo/common.c:623:
+^I^I^I^I^I                     i,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: security/tomoyo/common.c:624:
+^I^I^I^I^I                     ccs_control_array[j].keyword,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#670: FILE: security/tomoyo/common.c:625:
+^I^I^I^I^I                     profile->value[j]))$

WARNING:BRACES: braces {} are not necessary for single statement blocks
#679: FILE: security/tomoyo/common.c:634:
+		if (head->read_var2) {
+			head->read_eof = 1;
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#695: FILE: security/tomoyo/common.c:650:
+static struct policy_manager_entry *policy_manager_list = NULL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#704: FILE: security/tomoyo/common.c:659:
+	u8 is_domain = 0;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#704: FILE: security/tomoyo/common.c:659:
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#706: FILE: security/tomoyo/common.c:661:
+		if (!tomoyo_is_correct_domain(manager, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#706: FILE: security/tomoyo/common.c:661:
+		if (!tomoyo_is_correct_domain(manager, __FUNCTION__)) return -EINVAL;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#709: FILE: security/tomoyo/common.c:664:
+		if (!tomoyo_is_correct_path(manager, 1, -1, -1, __FUNCTION__)) return -EINVAL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#709: FILE: security/tomoyo/common.c:664:
+		if (!tomoyo_is_correct_path(manager, 1, -1, -1, __FUNCTION__)) return -EINVAL;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#711: FILE: security/tomoyo/common.c:666:
+	if ((saved_manager = tomoyo_save_name(manager)) == NULL) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#711: FILE: security/tomoyo/common.c:666:
+	if ((saved_manager = tomoyo_save_name(manager)) == NULL) return -ENOMEM;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#724: FILE: security/tomoyo/common.c:679:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#724: FILE: security/tomoyo/common.c:679:
+	if ((new_entry = tomoyo_alloc_element(sizeof(*new_entry))) == NULL) goto out;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#728: FILE: security/tomoyo/common.c:683:
+	if ((ptr = policy_manager_list) != NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#738: FILE: security/tomoyo/common.c:693:
+	if (!error) tomoyo_update_counter(TOMOYO_UPDATES_COUNTER_MANAGER);

WARNING:LINE_SPACING: Missing a blank line after declarations
#746: FILE: security/tomoyo/common.c:701:
+	int is_delete = 0;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#746: FILE: security/tomoyo/common.c:701:
+	if (!tomoyo_is_root()) return -EPERM;

WARNING:LINE_SPACING: Missing a blank line after declarations
#758: FILE: security/tomoyo/common.c:713:
+		struct policy_manager_entry *ptr = head->read_var2;
+		if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#758: FILE: security/tomoyo/common.c:713:
+		if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#759: FILE: security/tomoyo/common.c:714:
+		if (!ptr) ptr = policy_manager_list;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#766: FILE: security/tomoyo/common.c:721:
+		if (!ptr) head->read_eof = 1;

CHECK:SPACING: No space is necessary after a cast
#777: FILE: security/tomoyo/common.c:732:
+		((struct tomoyo_security *) current->security)->domain_info->domainname;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#778: FILE: security/tomoyo/common.c:733:
+	if (!sbin_init_started) return 1;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#783: FILE: security/tomoyo/common.c:738:
+	if ((exe = tomoyo_get_exe()) == NULL) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#783: FILE: security/tomoyo/common.c:738:
+	if ((exe = tomoyo_get_exe()) == NULL) return 0;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#789: FILE: security/tomoyo/common.c:744:
+		static pid_t last_pid = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#791: FILE: security/tomoyo/common.c:746:
+		const pid_t pid = current->pid;
+		if (last_pid != pid) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#792: FILE: security/tomoyo/common.c:747:
+			printk("%s is not permitted to update policies.\n", exe);

WARNING:LINE_SPACING: Missing a blank line after declarations
#808: FILE: security/tomoyo/common.c:763:
+	unsigned int profile;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#808: FILE: security/tomoyo/common.c:763:
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#834: FILE: security/tomoyo/common.c:789:
+	if (!domain) return -EINVAL;

CHECK:SPACING: No space is necessary after a cast
#837: FILE: security/tomoyo/common.c:792:
+		if (profile_ptr[profile] || !sbin_init_started) domain->profile = (u8) profile;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#837: FILE: security/tomoyo/common.c:792:
+		if (profile_ptr[profile] || !sbin_init_started) domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#848: FILE: security/tomoyo/common.c:803:
+		struct domain_info *domain = head->read_var1;
+		switch (head->read_step) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#849: FILE: security/tomoyo/common.c:804:
+		case 0: break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#850: FILE: security/tomoyo/common.c:805:
+		case 1: goto step1;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#851: FILE: security/tomoyo/common.c:806:
+		case 2: goto step2;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#852: FILE: security/tomoyo/common.c:807:
+		case 3: goto step3;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#855: FILE: security/tomoyo/common.c:810:
+		if (!tomoyo_is_root()) return -EPERM;

WARNING:LINE_SPACING: Missing a blank line after declarations
#858: FILE: security/tomoyo/common.c:813:
+			struct acl_info *ptr;
+			if (domain->is_deleted) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#858: FILE: security/tomoyo/common.c:813:
+			if (domain->is_deleted) continue;

WARNING:INDENTED_LABEL: labels should not be indented
#862: FILE: security/tomoyo/common.c:817:
+		step1:

ERROR:CODE_INDENT: code indent should use tabs where possible
#864: FILE: security/tomoyo/common.c:819:
+^I^I^I                     "%s\n" TOMOYO_KEYWORD_USE_PROFILE "%u\n%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#865: FILE: security/tomoyo/common.c:820:
+^I^I^I                     domain->domainname->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#866: FILE: security/tomoyo/common.c:821:
+^I^I^I                     domain->profile,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#867: FILE: security/tomoyo/common.c:822:
+^I^I^I                     domain->quota_warned ? "quota_exceeded\n" : ""))$

WARNING:INDENTED_LABEL: labels should not be indented
#871: FILE: security/tomoyo/common.c:826:
+		step2:

WARNING:LINE_SPACING: Missing a blank line after declarations
#875: FILE: security/tomoyo/common.c:830:
+				const int pos = head->read_avail;
+				head->read_var2 = ptr;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#876: FILE: security/tomoyo/common.c:831:
+				if (ptr->is_deleted) continue;

WARNING:LINE_SPACING: Missing a blank line after declarations
#879: FILE: security/tomoyo/common.c:834:
+					const unsigned char b = ptr->u.b[1];
+					if (tomoyo_io_printf(head,

ERROR:CODE_INDENT: code indent should use tabs where possible
#880: FILE: security/tomoyo/common.c:835:
+^I^I^I^I^I                     "%d %s%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#881: FILE: security/tomoyo/common.c:836:
+^I^I^I^I^I                     ptr->u.b[0],$

ERROR:CODE_INDENT: code indent should use tabs where possible
#882: FILE: security/tomoyo/common.c:837:
+^I^I^I^I^I                     b ? "@" : "",$

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#883: FILE: security/tomoyo/common.c:838:
+					                     b ? ((struct file_acl_record *) ptr)->u.group->group_name->name :

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: security/tomoyo/common.c:838:
+^I^I^I^I^I                     b ? ((struct file_acl_record *) ptr)->u.group->group_name->name :$

CHECK:SPACING: No space is necessary after a cast
#883: FILE: security/tomoyo/common.c:838:
+					                     b ? ((struct file_acl_record *) ptr)->u.group->group_name->name :

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#884: FILE: security/tomoyo/common.c:839:
+					                         ((struct file_acl_record *) ptr)->u.filename->name)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#884: FILE: security/tomoyo/common.c:839:
+^I^I^I^I^I                         ((struct file_acl_record *) ptr)->u.filename->name)) {$

CHECK:SPACING: No space is necessary after a cast
#884: FILE: security/tomoyo/common.c:839:
+					                         ((struct file_acl_record *) ptr)->u.filename->name)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#890: FILE: security/tomoyo/common.c:845:
+					const char *keyword = tomoyo_acltype2keyword(acl_type);
+					if (keyword) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#891: FILE: security/tomoyo/common.c:846:
+						if (tomoyo_acltype2paths(acl_type) == 2) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#893: FILE: security/tomoyo/common.c:848:
+							const u8 b0 = ptr->u.b[0], b1 = ptr->u.b[1];
+							if (tomoyo_io_printf(head,

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#893: FILE: security/tomoyo/common.c:848:
+							if (tomoyo_io_printf(head,

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: security/tomoyo/common.c:849:
+^I^I^I^I^I^I^I                     "allow_%s %s%s %s%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#895: FILE: security/tomoyo/common.c:850:
+^I^I^I^I^I^I^I                     keyword,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#896: FILE: security/tomoyo/common.c:851:
+^I^I^I^I^I^I^I                     b0 ? "@" : "",$

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#897: FILE: security/tomoyo/common.c:852:
+							                     b0 ? ((struct double_acl_record *) ptr)->u1.group1->group_name->name :

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: security/tomoyo/common.c:852:
+^I^I^I^I^I^I^I                     b0 ? ((struct double_acl_record *) ptr)->u1.group1->group_name->name :$

CHECK:SPACING: No space is necessary after a cast
#897: FILE: security/tomoyo/common.c:852:
+							                     b0 ? ((struct double_acl_record *) ptr)->u1.group1->group_name->name :

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#898: FILE: security/tomoyo/common.c:853:
+							                          ((struct double_acl_record *) ptr)->u1.filename1->name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#898: FILE: security/tomoyo/common.c:853:
+^I^I^I^I^I^I^I                          ((struct double_acl_record *) ptr)->u1.filename1->name,$

CHECK:SPACING: No space is necessary after a cast
#898: FILE: security/tomoyo/common.c:853:
+							                          ((struct double_acl_record *) ptr)->u1.filename1->name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#899: FILE: security/tomoyo/common.c:854:
+^I^I^I^I^I^I^I                     b1 ? "@" : "",$

WARNING:LONG_LINE: line length of 147 exceeds 100 columns
#900: FILE: security/tomoyo/common.c:855:
+							                     b1 ? ((struct double_acl_record *) ptr)->u2.group2->group_name->name :

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: security/tomoyo/common.c:855:
+^I^I^I^I^I^I^I                     b1 ? ((struct double_acl_record *) ptr)->u2.group2->group_name->name :$

CHECK:SPACING: No space is necessary after a cast
#900: FILE: security/tomoyo/common.c:855:
+							                     b1 ? ((struct double_acl_record *) ptr)->u2.group2->group_name->name :

WARNING:LONG_LINE: line length of 140 exceeds 100 columns
#901: FILE: security/tomoyo/common.c:856:
+							                          ((struct double_acl_record *) ptr)->u2.filename2->name)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: security/tomoyo/common.c:856:
+^I^I^I^I^I^I^I                          ((struct double_acl_record *) ptr)->u2.filename2->name)) {$

CHECK:SPACING: No space is necessary after a cast
#901: FILE: security/tomoyo/common.c:856:
+							                          ((struct double_acl_record *) ptr)->u2.filename2->name)) {

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#905: FILE: security/tomoyo/common.c:860:
+						} else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#907: FILE: security/tomoyo/common.c:862:
+							const u8 b = ptr->u.b[0];
+							if (tomoyo_io_printf(head,

WARNING:DEEP_INDENTATION: Too many leading tabs - consider code refactoring
#907: FILE: security/tomoyo/common.c:862:
+							if (tomoyo_io_printf(head,

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: security/tomoyo/common.c:863:
+^I^I^I^I^I^I^I                     "allow_%s %s%s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: security/tomoyo/common.c:864:
+^I^I^I^I^I^I^I                     keyword,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: security/tomoyo/common.c:865:
+^I^I^I^I^I^I^I                     b ? "@" : "",$

WARNING:LONG_LINE: line length of 144 exceeds 100 columns
#911: FILE: security/tomoyo/common.c:866:
+							                     b ? ((struct single_acl_record *) ptr)->u.group->group_name->name :

ERROR:CODE_INDENT: code indent should use tabs where possible
#911: FILE: security/tomoyo/common.c:866:
+^I^I^I^I^I^I^I                     b ? ((struct single_acl_record *) ptr)->u.group->group_name->name :$

CHECK:SPACING: No space is necessary after a cast
#911: FILE: security/tomoyo/common.c:866:
+							                     b ? ((struct single_acl_record *) ptr)->u.group->group_name->name :

WARNING:LONG_LINE: line length of 137 exceeds 100 columns
#912: FILE: security/tomoyo/common.c:867:
+							                         ((struct single_acl_record *) ptr)->u.filename->name)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#912: FILE: security/tomoyo/common.c:867:
+^I^I^I^I^I^I^I                         ((struct single_acl_record *) ptr)->u.filename->name)) {$

CHECK:SPACING: No space is necessary after a cast
#912: FILE: security/tomoyo/common.c:867:
+							                         ((struct single_acl_record *) ptr)->u.filename->name)) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#920: FILE: security/tomoyo/common.c:875:
+			if (ptr) break;

WARNING:INDENTED_LABEL: labels should not be indented
#923: FILE: security/tomoyo/common.c:878:
+		step3:

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#924: FILE: security/tomoyo/common.c:879:
+			if (tomoyo_io_printf(head, "\n")) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#926: FILE: security/tomoyo/common.c:881:
+		if (!domain) head->read_eof = 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: security/tomoyo/common.c:890:
+		struct domain_info *domain;
+		if (head->read_step == 0) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#939: FILE: security/tomoyo/common.c:894:
+		if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#941: FILE: security/tomoyo/common.c:896:
+			if (domain->is_deleted) continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#944: FILE: security/tomoyo/common.c:899:
+^I^I^I                     "%u %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: security/tomoyo/common.c:900:
+^I^I^I                     domain->profile,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#946: FILE: security/tomoyo/common.c:901:
+^I^I^I                     domain->domainname->name))$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#949: FILE: security/tomoyo/common.c:904:
+		if (!domain) head->read_eof = 1;

CHECK:SPACING: No space is necessary after a cast
#956: FILE: security/tomoyo/common.c:911:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#956: FILE: security/tomoyo/common.c:911:
+	head->read_step = (int) simple_strtoul(head->write_buf, NULL, 10);

WARNING:LINE_SPACING: Missing a blank line after declarations
#972: FILE: security/tomoyo/common.c:927:
+			struct tomoyo_security *tmp = p->security;
+			if (tmp) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#974: FILE: security/tomoyo/common.c:929:
+				if (!domain) domain = &KERNEL_DOMAIN;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#979: FILE: security/tomoyo/common.c:934:
+		if (domain) tomoyo_io_printf(head,

ERROR:CODE_INDENT: code indent should use tabs where possible
#980: FILE: security/tomoyo/common.c:935:
+^I^I                             "%d %u %s",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#981: FILE: security/tomoyo/common.c:936:
+^I^I                             pid,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#982: FILE: security/tomoyo/common.c:937:
+^I^I                             domain->profile,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#983: FILE: security/tomoyo/common.c:938:
+^I^I                             domain->domainname->name);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#995: FILE: security/tomoyo/common.c:950:
+	unsigned int profile;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#995: FILE: security/tomoyo/common.c:950:
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#996: FILE: security/tomoyo/common.c:951:
+	if (!cp) return -EINVAL;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#999: FILE: security/tomoyo/common.c:954:
+	profile = simple_strtoul(data, NULL, 10);

CHECK:SPACING: No space is necessary after a cast
#1001: FILE: security/tomoyo/common.c:956:
+		domain->profile = (u8) profile;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1012: FILE: security/tomoyo/common.c:967:
+	int is_delete = 0;
+	if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1012: FILE: security/tomoyo/common.c:967:
+	if (!tomoyo_is_root()) return -EPERM;

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1018: FILE: security/tomoyo/common.c:973:
+	if (strncmp(data, TOMOYO_KEYWORD_KEEP_DOMAIN, TOMOYO_KEYWORD_KEEP_DOMAIN_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_KEEP_DOMAIN, TOMOYO_KEYWORD_NO_KEEP_DOMAIN_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_INITIALIZE_DOMAIN, TOMOYO_KEYWORD_INITIALIZE_DOMAIN_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_INITIALIZE_DOMAIN, TOMOYO_KEYWORD_NO_INITIALIZE_DOMAIN_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_INITIALIZER, TOMOYO_KEYWORD_INITIALIZER_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_INITIALIZER, TOMOYO_KEYWORD_NO_INITIALIZER_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_ALIAS, TOMOYO_KEYWORD_ALIAS_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_AGGREGATOR, TOMOYO_KEYWORD_AGGREGATOR_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_ALLOW_READ, TOMOYO_KEYWORD_ALLOW_READ_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_FILE_PATTERN, TOMOYO_KEYWORD_FILE_PATTERN_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_PATH_GROUP, TOMOYO_KEYWORD_PATH_GROUP_LEN) == 0) {
[...]
+	} else if (strncmp(data, TOMOYO_KEYWORD_DENY_REWRITE, TOMOYO_KEYWORD_DENY_REWRITE_LEN) == 0) {
[...]

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1019: FILE: security/tomoyo/common.c:974:
+		return tomoyo_add_domain_keeper_policy(data + TOMOYO_KEYWORD_KEEP_DOMAIN_LEN, 0, is_delete);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1020: FILE: security/tomoyo/common.c:975:
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_KEEP_DOMAIN, TOMOYO_KEYWORD_NO_KEEP_DOMAIN_LEN) == 0) {

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#1021: FILE: security/tomoyo/common.c:976:
+		return tomoyo_add_domain_keeper_policy(data + TOMOYO_KEYWORD_NO_KEEP_DOMAIN_LEN, 1, is_delete);

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#1022: FILE: security/tomoyo/common.c:977:
+	} else if (strncmp(data, TOMOYO_KEYWORD_INITIALIZE_DOMAIN, TOMOYO_KEYWORD_INITIALIZE_DOMAIN_LEN) == 0) {

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#1023: FILE: security/tomoyo/common.c:978:
+		return tomoyo_add_domain_initializer_policy(data + TOMOYO_KEYWORD_INITIALIZE_DOMAIN_LEN, 0, is_delete, 0);

WARNING:LONG_LINE: line length of 118 exceeds 100 columns
#1024: FILE: security/tomoyo/common.c:979:
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_INITIALIZE_DOMAIN, TOMOYO_KEYWORD_NO_INITIALIZE_DOMAIN_LEN) == 0) {

WARNING:LONG_LINE: line length of 125 exceeds 100 columns
#1025: FILE: security/tomoyo/common.c:980:
+		return tomoyo_add_domain_initializer_policy(data + TOMOYO_KEYWORD_NO_INITIALIZE_DOMAIN_LEN, 1, is_delete, 0);

WARNING:LONG_LINE: line length of 116 exceeds 100 columns
#1027: FILE: security/tomoyo/common.c:982:
+		return tomoyo_add_domain_initializer_policy(data + TOMOYO_KEYWORD_INITIALIZER_LEN, 0, is_delete, 1);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1028: FILE: security/tomoyo/common.c:983:
+	} else if (strncmp(data, TOMOYO_KEYWORD_NO_INITIALIZER, TOMOYO_KEYWORD_NO_INITIALIZER_LEN) == 0) {

WARNING:LONG_LINE: line length of 119 exceeds 100 columns
#1029: FILE: security/tomoyo/common.c:984:
+		return tomoyo_add_domain_initializer_policy(data + TOMOYO_KEYWORD_NO_INITIALIZER_LEN, 1, is_delete, 1);

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#1033: FILE: security/tomoyo/common.c:988:
+		return tomoyo_add_aggregator_policy(data + TOMOYO_KEYWORD_AGGREGATOR_LEN, is_delete);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#1035: FILE: security/tomoyo/common.c:990:
+		return tomoyo_add_globally_readable_policy(data + TOMOYO_KEYWORD_ALLOW_READ_LEN, is_delete);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1036: FILE: security/tomoyo/common.c:991:
+	} else if (strncmp(data, TOMOYO_KEYWORD_FILE_PATTERN, TOMOYO_KEYWORD_FILE_PATTERN_LEN) == 0) {

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1040: FILE: security/tomoyo/common.c:995:
+	} else if (strncmp(data, TOMOYO_KEYWORD_DENY_REWRITE, TOMOYO_KEYWORD_DENY_REWRITE_LEN) == 0) {

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1041: FILE: security/tomoyo/common.c:996:
+		return tomoyo_add_no_rewrite_policy(data + TOMOYO_KEYWORD_DENY_REWRITE_LEN, is_delete);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1051: FILE: security/tomoyo/common.c:1006:
+			if (!tomoyo_is_root()) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1055: FILE: security/tomoyo/common.c:1010:
+			if (tomoyo_read_domain_keeper_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1059: FILE: security/tomoyo/common.c:1014:
+			if (tomoyo_read_globally_readable_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1063: FILE: security/tomoyo/common.c:1018:
+			if (tomoyo_read_domain_initializer_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1067: FILE: security/tomoyo/common.c:1022:
+			if (tomoyo_read_alias_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1071: FILE: security/tomoyo/common.c:1026:
+			if (tomoyo_read_aggregator_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1075: FILE: security/tomoyo/common.c:1030:
+			if (tomoyo_read_pattern_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1079: FILE: security/tomoyo/common.c:1034:
+			if (tomoyo_read_no_rewrite_policy(head)) break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1083: FILE: security/tomoyo/common.c:1038:
+			if (tomoyo_read_group_policy(head)) break;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#1098: FILE: security/tomoyo/common.c:1053:
+static const char *ccs_loader = NULL;

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#1106: FILE: security/tomoyo/common.c:1061:
+__setup("TOMOYO_loader=", tomoyo_loader_setup);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1110: FILE: security/tomoyo/common.c:1065:
+	if (sbin_init_started) return;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1117: FILE: security/tomoyo/common.c:1072:
+	if (strcmp(filename, "/sbin/init") != 0 && strcmp(filename, "/sbin/ccs-start") != 0) return;

WARNING:TYPO_SPELLING: 'everytime' may be misspelled - perhaps 'every time'?
#1122: FILE: security/tomoyo/common.c:1077:
+	 * So let do_execve() call this function everytime.
 	                                         ^^^^^^^^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1125: FILE: security/tomoyo/common.c:1080:
+		struct nameidata nd;
 		                 ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1126: FILE: security/tomoyo/common.c:1081:
+		struct nameidata nd;
+		if (!ccs_loader) ccs_loader = "/.init";

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1126: FILE: security/tomoyo/common.c:1081:
+		if (!ccs_loader) ccs_loader = "/.init";

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1127: FILE: security/tomoyo/common.c:1082:
+		if (path_lookup(ccs_loader, LOOKUP_FOLLOW, &nd)) {
 		                                            ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1128: FILE: security/tomoyo/common.c:1083:
+			printk("Not activating Mandatory Access Control now since %s doesn't exist.\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1132: FILE: security/tomoyo/common.c:1087:
+		path_release(&nd);
 		              ^^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1135: FILE: security/tomoyo/common.c:1090:
+	printk("TOMOYO: 2.0   2007/06/05\n");

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1136: FILE: security/tomoyo/common.c:1091:
+	if (!profile_loaded) panic("No profiles loaded. Run policy loader using 'init=' option.\n");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1137: FILE: security/tomoyo/common.c:1092:
+	printk("Mandatory Access Control activated.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#1142: FILE: security/tomoyo/common.c:1097:
+		struct domain_info *domain;
+		for (domain = &KERNEL_DOMAIN; domain; domain = domain->next) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1144: FILE: security/tomoyo/common.c:1099:
+			const u8 profile = domain->profile;
+			if (!profile_ptr[profile])

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1147: FILE: security/tomoyo/common.c:1102:
+^I^I^I^I      domain->domainname->name); $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1152: FILE: security/tomoyo/common.c:1107:
+
+

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1176: FILE: security/tomoyo/common.c:1131:
+	static unsigned int serial = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1178: FILE: security/tomoyo/common.c:1133:
+	struct query_entry *query_entry;
+	if (!tomoyo_check_flags(TOMOYO_ALLOW_ENFORCE_GRACE)) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1178: FILE: security/tomoyo/common.c:1133:
+	if (!tomoyo_check_flags(TOMOYO_ALLOW_ENFORCE_GRACE)) return -EPERM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1179: FILE: security/tomoyo/common.c:1134:
+	if (!atomic_read(&queryd_watcher)) return -EPERM;

CHECK:SPACING: No space is necessary after a cast
#1181: FILE: security/tomoyo/common.c:1136:
+	len = vsnprintf((char *) &pos, sizeof(pos) - 1, fmt, args) + 32;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1183: FILE: security/tomoyo/common.c:1138:
+	if ((query_entry = tomoyo_alloc(sizeof(*query_entry))) == NULL ||

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1183: FILE: security/tomoyo/common.c:1138:
+	if ((query_entry = tomoyo_alloc(sizeof(*query_entry))) == NULL ||
+		(query_entry->query = tomoyo_alloc(len)) == NULL) goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1184: FILE: security/tomoyo/common.c:1139:
+	if ((query_entry = tomoyo_alloc(sizeof(*query_entry))) == NULL ||
+		(query_entry->query = tomoyo_alloc(len)) == NULL) goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1205: FILE: security/tomoyo/common.c:1160:
+^I     ^Itomoyo_check_flags(TOMOYO_ALLOW_ENFORCE_GRACE) &&$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1205: FILE: security/tomoyo/common.c:1160:
+^I     ^Itomoyo_check_flags(TOMOYO_ALLOW_ENFORCE_GRACE) &&$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1206: FILE: security/tomoyo/common.c:1161:
+^I     ^Iquery_entry->timer < 100;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1206: FILE: security/tomoyo/common.c:1161:
+^I     ^Iquery_entry->timer < 100;$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1211: FILE: security/tomoyo/common.c:1166:
+		if (query_entry->answer) break;

WARNING:SPACING: space prohibited before semicolon
#1231: FILE: security/tomoyo/common.c:1186:
+ out: ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1232: FILE: security/tomoyo/common.c:1187:
+	if (query_entry) tomoyo_free(query_entry->query);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1245: FILE: security/tomoyo/common.c:1200:
+	if (found) return POLLIN | POLLRDNORM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1252: FILE: security/tomoyo/common.c:1207:
+	if (found) return POLLIN | POLLRDNORM;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1261: FILE: security/tomoyo/common.c:1216:
+	char *buf;
+	if (head->read_avail) return 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1261: FILE: security/tomoyo/common.c:1216:
+	if (head->read_avail) return 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1271: FILE: security/tomoyo/common.c:1226:
+		struct query_entry *ptr = list_entry(tmp, struct query_entry, list);
+		if (pos++ == head->read_step) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1282: FILE: security/tomoyo/common.c:1237:
+	if ((buf = tomoyo_alloc(len)) != NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1288: FILE: security/tomoyo/common.c:1243:
+			struct query_entry *ptr = list_entry(tmp, struct query_entry, list);
+			if (pos++ == head->read_step) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1291: FILE: security/tomoyo/common.c:1246:
+				if (len == ptr->query_len) memmove(buf, ptr->query, len);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1298: FILE: security/tomoyo/common.c:1253:
+			head->readbuf_size = head->read_avail = len;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LINE_SPACING: Missing a blank line after declarations
#1317: FILE: security/tomoyo/common.c:1272:
+		struct query_entry *ptr = list_entry(tmp, struct query_entry, list);
+		ptr->timer = 0;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1321: FILE: security/tomoyo/common.c:1276:
+	if (sscanf(data, "A%u=%u", &serial, &answer) != 2) return -EINVAL;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1326: FILE: security/tomoyo/common.c:1281:
+		struct query_entry *ptr = list_entry(tmp, struct query_entry, list);
+		if (ptr->serial != serial) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1326: FILE: security/tomoyo/common.c:1281:
+		if (ptr->serial != serial) continue;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1327: FILE: security/tomoyo/common.c:1282:
+		if (!ptr->answer) ptr->answer = answer;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1345: FILE: security/tomoyo/common.c:1300:
+	if (index < TOMOYO_MAX_UPDATES_COUNTER) updates_counter[index]++;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1361: FILE: security/tomoyo/common.c:1316:
+		tomoyo_io_printf(head,
+				  "/proc/ccs/policy/domain_policy:    %10u\n"

ERROR:CODE_INDENT: code indent should use tabs where possible
#1380: FILE: security/tomoyo/common.c:1335:
+^I^I          private = tomoyo_get_memory_used_for_elements(),$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1381: FILE: security/tomoyo/common.c:1336:
+^I^I          dynamic = tomoyo_get_memory_used_for_dynamic();$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1383: FILE: security/tomoyo/common.c:1338:
+^I^I                     "Shared:  %10u\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1384: FILE: security/tomoyo/common.c:1339:
+^I^I                     "Private: %10u\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1385: FILE: security/tomoyo/common.c:1340:
+^I^I                     "Dynamic: %10u\n"$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1386: FILE: security/tomoyo/common.c:1341:
+^I^I                     "Total:   %10u\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1387: FILE: security/tomoyo/common.c:1342:
+^I^I                     shared,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1388: FILE: security/tomoyo/common.c:1343:
+^I^I                     private,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1389: FILE: security/tomoyo/common.c:1344:
+^I^I                     dynamic,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1390: FILE: security/tomoyo/common.c:1345:
+^I^I                     shared + private + dynamic) == 0)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1399: FILE: security/tomoyo/common.c:1354:
+	struct io_buffer *head = tomoyo_alloc(sizeof(*head));
+	if (!head) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1399: FILE: security/tomoyo/common.c:1354:
+	if (!head) return -ENOMEM;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1423: FILE: security/tomoyo/common.c:1378:
+		if (!sbin_init_started) head->write = tomoyo_set_permission_mapping;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1448: FILE: security/tomoyo/common.c:1403:
+		if (!head->readbuf_size) head->readbuf_size = PAGE_SIZE * 2;

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1449: FILE: security/tomoyo/common.c:1404:
+		if ((head->read_buf = tomoyo_alloc(head->readbuf_size)) == NULL) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1456: FILE: security/tomoyo/common.c:1411:
+		if ((head->write_buf = tomoyo_alloc(head->writebuf_size)) == NULL) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1463: FILE: security/tomoyo/common.c:1418:
+	if (type == TOMOYO_INFO_SELFDOMAIN) tomoyo_read_control(file, NULL, 0);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1464: FILE: security/tomoyo/common.c:1419:
+	else if (head->write == tomoyo_write_answer) atomic_inc(&queryd_watcher);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1468: FILE: security/tomoyo/common.c:1423:
+static int tomoyo_copy_to_user(struct io_buffer *head, char __user * buffer, int buffer_len)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1472: FILE: security/tomoyo/common.c:1427:
+	char *cp = head->read_buf;
+	if (len > buffer_len) len = buffer_len;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1472: FILE: security/tomoyo/common.c:1427:
+	if (len > buffer_len) len = buffer_len;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1474: FILE: security/tomoyo/common.c:1429:
+		if (copy_to_user(buffer, cp, len)) return -EFAULT;

CHECK:SPACING: No space is necessary after a cast
#1483: FILE: security/tomoyo/common.c:1438:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1484: FILE: security/tomoyo/common.c:1439:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;
+	if (!head->poll) return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1484: FILE: security/tomoyo/common.c:1439:
+	if (!head->poll) return -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1484: FILE: security/tomoyo/common.c:1439:
+	if (!head->poll) return -ENOSYS;

CHECK:SPACING: No space is necessary after a cast
#1491: FILE: security/tomoyo/common.c:1446:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1492: FILE: security/tomoyo/common.c:1447:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;
+	if (!head->read) return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1492: FILE: security/tomoyo/common.c:1447:
+	if (!head->read) return -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1492: FILE: security/tomoyo/common.c:1447:
+	if (!head->read) return -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1493: FILE: security/tomoyo/common.c:1448:
+	if (!access_ok(VERIFY_WRITE, buffer, buffer_len)) return -EFAULT;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1494: FILE: security/tomoyo/common.c:1449:
+	if (down_interruptible(&head->read_sem)) return -EINTR;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1496: FILE: security/tomoyo/common.c:1451:
+	if (len >= 0) len = tomoyo_copy_to_user(head, buffer, buffer_len);

CHECK:SPACING: No space is necessary after a cast
#1503: FILE: security/tomoyo/common.c:1458:
+	struct io_buffer *head = (struct io_buffer *) file->private_data;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1507: FILE: security/tomoyo/common.c:1462:
+	char *cp0 = head->write_buf;
+	if (!head->write) return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1507: FILE: security/tomoyo/common.c:1462:
+	if (!head->write) return -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1507: FILE: security/tomoyo/common.c:1462:
+	if (!head->write) return -ENOSYS;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1508: FILE: security/tomoyo/common.c:1463:
+	if (!access_ok(VERIFY_READ, buffer, buffer_len)) return -EFAULT;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1509: FILE: security/tomoyo/common.c:1464:
+	if (!tomoyo_is_root()) return -EPERM;

WARNING:BRACES: braces {} are not necessary for single statement blocks
#1510: FILE: security/tomoyo/common.c:1465:
+	if (head->write != tomoyo_write_pid && !tomoyo_is_policy_manager()) {
+		return -EPERM; /* Forbid updating policies for non manager programs. */
+	}

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1513: FILE: security/tomoyo/common.c:1468:
+	if (down_interruptible(&head->write_sem)) return -EINTR;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1516: FILE: security/tomoyo/common.c:1471:
+		char c;
+		if (head->write_avail >= head->writebuf_size - 1) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1526: FILE: security/tomoyo/common.c:1481:
+		if (c != '\n') continue;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1536: FILE: security/tomoyo/common.c:1491:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1540: FILE: security/tomoyo/common.c:1495:
+	struct io_buffer *head = file->private_data;
+	if (head->write == tomoyo_write_answer) atomic_dec(&queryd_watcher);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1540: FILE: security/tomoyo/common.c:1495:
+	if (head->write == tomoyo_write_answer) atomic_dec(&queryd_watcher);

CHECK:SPACING: No space is necessary after a cast
#1553: FILE: security/tomoyo/common.c:1508:
+	return tomoyo_open_control(((u8 *) PDE(inode)->data) - ((u8 *) NULL), file);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1576: FILE: security/tomoyo/common.c:1531:
+static struct file_operations ccs_operations = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:INDENTED_LABEL: labels should not be indented
#1577: FILE: security/tomoyo/common.c:1532:
+	open:    tomoyo_open,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1578: FILE: security/tomoyo/common.c:1533:
+	release: tomoyo_release,
 	       ^

WARNING:INDENTED_LABEL: labels should not be indented
#1578: FILE: security/tomoyo/common.c:1533:
+	release: tomoyo_release,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1579: FILE: security/tomoyo/common.c:1534:
+	poll:    tomoyo_poll,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1579: FILE: security/tomoyo/common.c:1534:
+	poll:    tomoyo_poll,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1580: FILE: security/tomoyo/common.c:1535:
+	read:    tomoyo_read,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#1580: FILE: security/tomoyo/common.c:1535:
+	read:    tomoyo_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#1581: FILE: security/tomoyo/common.c:1536:
+	write:   tomoyo_write
 	     ^

WARNING:INDENTED_LABEL: labels should not be indented
#1581: FILE: security/tomoyo/common.c:1536:
+	write:   tomoyo_write

ERROR:CODE_INDENT: code indent should use tabs where possible
#1585: FILE: security/tomoyo/common.c:1540:
+                                const mode_t mode,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1585: FILE: security/tomoyo/common.c:1540:
+                                const mode_t mode,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1586: FILE: security/tomoyo/common.c:1541:
+                                struct proc_dir_entry *parent,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1586: FILE: security/tomoyo/common.c:1541:
+                                struct proc_dir_entry *parent,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1587: FILE: security/tomoyo/common.c:1542:
+                                const int key)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1587: FILE: security/tomoyo/common.c:1542:
+                                const int key)$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1590: FILE: security/tomoyo/common.c:1545:
+	struct proc_dir_entry *entry = create_proc_entry(name, mode, parent);
+	if (entry) {

CHECK:SPACING: No space is necessary after a cast
#1592: FILE: security/tomoyo/common.c:1547:
+		entry->data = ((u8 *) NULL) + key;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1598: FILE: security/tomoyo/common.c:1553:
+	static int initialized = 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1601: FILE: security/tomoyo/common.c:1556:
+	struct proc_dir_entry *policy_dir, *info_dir;
+	extern void tomoyo_realpath_init(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1601: FILE: security/tomoyo/common.c:1556:
+	extern void tomoyo_realpath_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 243 errors, 152 warnings, 35 checks, 1576 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000418616.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
