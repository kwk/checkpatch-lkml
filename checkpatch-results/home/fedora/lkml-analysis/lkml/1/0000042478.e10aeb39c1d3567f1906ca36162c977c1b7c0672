WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#39: 
I'm refering to
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#79: 
This also happens when booting with rdinit=/bin/sh, i.e. only running busybox sh

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#152: 
Info for the NP-Q45 from Jérémie Huchet <jeremie@lamah.info>
                          ^

CHECK:INVALID_UTF8: Invalid UTF-8, patch and commit message should be encoded in UTF-8
#158: 
Cc: Jérémie Huchet <jeremie@lamah.info>
     ^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#176: FILE: drivers/platform/x86/Kconfig:429:
+config SAMSUNG_LAPTOP
+	tristate "Samsung Laptop driver"
+	depends on BACKLIGHT_CLASS_DEVICE
+	depends on DMI
+	---help---
+	  This driver adds support to control the backlight on a number of
+	  Samsung laptops, like the N130, and control for some of the LEDs
+
+	  It will only be loaded on laptops that properly need it, so it is
+	  safe to say Y here.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#198: FILE: drivers/platform/x86/samsung-laptop.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#270: FILE: drivers/platform/x86/samsung-laptop.c:73:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#303: FILE: drivers/platform/x86/samsung-laptop.c:106:
+module_param(debug, bool, S_IRUGO | S_IWUSR);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#343: FILE: drivers/platform/x86/samsung-laptop.c:146:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: drivers/platform/x86/samsung-laptop.c:147:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",
+		command, readb(sabi_iface + SABI_IFACE_COMPLETE),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#351: FILE: drivers/platform/x86/samsung-laptop.c:154:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#381: FILE: drivers/platform/x86/samsung-laptop.c:184:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: drivers/platform/x86/samsung-laptop.c:185:
+	printk(KERN_WARNING "SABI command 0x%02x failed with completion flag 0x%02x and output 0x%02x\n",
+		command, readb(sabi_iface + SABI_IFACE_COMPLETE),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#395: FILE: drivers/platform/x86/samsung-laptop.c:198:
+	printk(KERN_DEBUG "backlight = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#398: FILE: drivers/platform/x86/samsung-laptop.c:201:
+	printk(KERN_DEBUG "backlight should be off\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#401: FILE: drivers/platform/x86/samsung-laptop.c:204:
+	printk(KERN_DEBUG "backlight = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#406: FILE: drivers/platform/x86/samsung-laptop.c:209:
+	printk(KERN_DEBUG "backlight should be on\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#409: FILE: drivers/platform/x86/samsung-laptop.c:212:
+	printk(KERN_DEBUG "backlight = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#417: FILE: drivers/platform/x86/samsung-laptop.c:220:
+	printk(KERN_DEBUG "wireless led = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#420: FILE: drivers/platform/x86/samsung-laptop.c:223:
+	printk(KERN_DEBUG "wireless led should be off\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#423: FILE: drivers/platform/x86/samsung-laptop.c:226:
+	printk(KERN_DEBUG "wireless led = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#428: FILE: drivers/platform/x86/samsung-laptop.c:231:
+	printk(KERN_DEBUG "wireless led should be on\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#431: FILE: drivers/platform/x86/samsung-laptop.c:234:
+	printk(KERN_DEBUG "wireless led = 0x%02x\n", sretval.retval[0]);

WARNING:CONST_STRUCT: struct backlight_ops should normally be const
#469: FILE: drivers/platform/x86/samsung-laptop.c:272:
+static struct backlight_ops backlight_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINUX_VERSION_CODE: LINUX_VERSION_CODE should be avoided, code should be for the version to which it is merged
#474: FILE: drivers/platform/x86/samsung-laptop.c:277:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: drivers/platform/x86/samsung-laptop.c:277:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)
                                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required after that ',' (ctx:VxV)
#474: FILE: drivers/platform/x86/samsung-laptop.c:277:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)
                                             ^

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#474: FILE: drivers/platform/x86/samsung-laptop.c:277:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,31)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:DEVICE_ATTR_PERMS: DEVICE_ATTR unusual permissions 'S_IWUGO | S_IRUGO' used
#594: FILE: drivers/platform/x86/samsung-laptop.c:397:
+}

The permissions used in DEVICE_ATTR are unusual.
Typically only three permissions are used - 0644 (RW), 0444 (RO)
and 0200 (WO).

See: https://www.kernel.org/doc/html/latest/filesystems/sysfs.html#attributes

WARNING:EXPORTED_WORLD_WRITABLE: Exporting world writable files is usually an error. Consider more restrictive permissions.
#595: FILE: drivers/platform/x86/samsung-laptop.c:398:
+static DEVICE_ATTR(silent, S_IWUGO | S_IRUGO,

Exporting world writable sysfs/debugfs files is usually a bad thing.
When done arbitrarily they can introduce serious security bugs.
In the past, some of the debugfs vulnerabilities would seemingly allow
any local user to write arbitrary values into device registers - a
situation from which little good can be expected to emerge.

See: https://lore.kernel.org/linux-arm-kernel/cover.1296818921.git.segoon@openwall.com/

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUGO | S_IRUGO' are not preferred. Consider using octal permissions '0666'.
#595: FILE: drivers/platform/x86/samsung-laptop.c:398:
+static DEVICE_ATTR(silent, S_IWUGO | S_IRUGO,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#598: FILE: drivers/platform/x86/samsung-laptop.c:401:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#601: FILE: drivers/platform/x86/samsung-laptop.c:404:
+	printk(KERN_INFO KBUILD_MODNAME ": found laptop model '%s'\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#602: FILE: drivers/platform/x86/samsung-laptop.c:405:
+	printk(KERN_INFO KBUILD_MODNAME ": found laptop model '%s'\n",
+		id->ident);

WARNING:MISPLACED_INIT: __initdata should be placed after samsung_dmi_table[]
#606: FILE: drivers/platform/x86/samsung-laptop.c:409:
+static struct dmi_system_id __initdata samsung_dmi_table[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:CAMELCASE: Avoid CamelCase: <testStr>
#632: FILE: drivers/platform/x86/samsung-laptop.c:435:
+	const char *testStr = "SECLINUX";

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <pStr>
#635: FILE: drivers/platform/x86/samsung-laptop.c:438:
+	int pStr;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#646: FILE: drivers/platform/x86/samsung-laptop.c:449:
+		printk(KERN_ERR "Can't map the segment at 0xf0000\n");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#657: FILE: drivers/platform/x86/samsung-laptop.c:460:
+			if (pStr == strlen(testStr)-1)
 			                           ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#665: FILE: drivers/platform/x86/samsung-laptop.c:468:
+		printk(KERN_ERR "This computer does not support SABI\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#674: FILE: drivers/platform/x86/samsung-laptop.c:477:
+		printk(KERN_DEBUG "This computer supports SABI==%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#675: FILE: drivers/platform/x86/samsung-laptop.c:478:
+		printk(KERN_DEBUG "This computer supports SABI==%x\n",
+			loca + 0xf0000 - 6);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#676: FILE: drivers/platform/x86/samsung-laptop.c:479:
+		printk(KERN_DEBUG "SABI header:\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#677: FILE: drivers/platform/x86/samsung-laptop.c:480:
+		printk(KERN_DEBUG " SMI Port Number = 0x%04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/platform/x86/samsung-laptop.c:481:
+		printk(KERN_DEBUG " SMI Port Number = 0x%04x\n",
+			readw(sabi + SABI_HEADER_PORT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#679: FILE: drivers/platform/x86/samsung-laptop.c:482:
+		printk(KERN_DEBUG " SMI Interface Function = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#680: FILE: drivers/platform/x86/samsung-laptop.c:483:
+		printk(KERN_DEBUG " SMI Interface Function = 0x%02x\n",
+			readb(sabi + SABI_HEADER_IFACEFUNC));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#681: FILE: drivers/platform/x86/samsung-laptop.c:484:
+		printk(KERN_DEBUG " SMI enable memory buffer = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: drivers/platform/x86/samsung-laptop.c:485:
+		printk(KERN_DEBUG " SMI enable memory buffer = 0x%02x\n",
+			readb(sabi + SABI_HEADER_EN_MEM));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#683: FILE: drivers/platform/x86/samsung-laptop.c:486:
+		printk(KERN_DEBUG " SMI restore memory buffer = 0x%02x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#684: FILE: drivers/platform/x86/samsung-laptop.c:487:
+		printk(KERN_DEBUG " SMI restore memory buffer = 0x%02x\n",
+			readb(sabi + SABI_HEADER_RE_MEM));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#685: FILE: drivers/platform/x86/samsung-laptop.c:488:
+		printk(KERN_DEBUG " SABI data offset = 0x%04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: drivers/platform/x86/samsung-laptop.c:489:
+		printk(KERN_DEBUG " SABI data offset = 0x%04x\n",
+			readw(sabi + SABI_HEADER_DATA_OFFSET));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#687: FILE: drivers/platform/x86/samsung-laptop.c:490:
+		printk(KERN_DEBUG " SABI data segment = 0x%04x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: drivers/platform/x86/samsung-laptop.c:491:
+		printk(KERN_DEBUG " SABI data segment = 0x%04x\n",
+			readw(sabi + SABI_HEADER_DATA_SEGMENT));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#696: FILE: drivers/platform/x86/samsung-laptop.c:499:
+		printk(KERN_ERR "Can't remap %x\n", ifaceP);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#700: FILE: drivers/platform/x86/samsung-laptop.c:503:
+		printk(KERN_DEBUG "ifaceP = 0x%08x\n", ifaceP);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#701: FILE: drivers/platform/x86/samsung-laptop.c:504:
+		printk(KERN_DEBUG "sabi_iface = %p\n", sabi_iface);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#707: FILE: drivers/platform/x86/samsung-laptop.c:510:
+		printk(KERN_DEBUG "brightness = 0x%02x\n", sretval.retval[0]);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#713: FILE: drivers/platform/x86/samsung-laptop.c:516:
+		printk(KERN_ERR KBUILD_MODNAME ": Linux mode was not set!\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 40 warnings, 18 checks, 602 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000042478.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
