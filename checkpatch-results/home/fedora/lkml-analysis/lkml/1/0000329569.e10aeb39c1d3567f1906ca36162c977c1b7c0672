WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#37: 
help to test it if anybody has VIA/Cyrix and Transmeta Crusoe. This patch just

WARNING:TYPO_SPELLING: 'syste' may be misspelled - perhaps 'system'?
#39: 
/sys/devices/syste/cpu/cpu*/cpuid/* without using any userspace application.
             ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#43: 
the root cause is that cpuid module doesn't decide wether a cpuid level
                                                   ^^^^^^

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuid_info *' should also have an identifier name
#124: FILE: arch/x86/kernel/cpuid.c:190:
+	ssize_t (*show)(struct cpuid_info *, char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#124: FILE: arch/x86/kernel/cpuid.c:190:
+	ssize_t (*show)(struct cpuid_info *, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cpuid_info *' should also have an identifier name
#125: FILE: arch/x86/kernel/cpuid.c:191:
+	ssize_t (*store)(struct cpuid_info *, const char *, size_t count);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#125: FILE: arch/x86/kernel/cpuid.c:191:
+	ssize_t (*store)(struct cpuid_info *, const char *, size_t count);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#154: FILE: arch/x86/kernel/cpuid.c:220:
+static ssize_t store_cur_level(struct cpuid_info *cpuid_info_p,
+				const char *buf, size_t count)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count > len'
#161: FILE: arch/x86/kernel/cpuid.c:227:
+	if ((count > len) || (count <= 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'count <= 0'
#161: FILE: arch/x86/kernel/cpuid.c:227:
+	if ((count > len) || (count <= 0))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 17)
#165: FILE: arch/x86/kernel/cpuid.c:231:
+	if (buf[count-1] == '\n')
+		 len--;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#165: FILE: arch/x86/kernel/cpuid.c:231:
+	if (buf[count-1] == '\n')
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#170: FILE: arch/x86/kernel/cpuid.c:236:
+	val = simple_strtoul(tmpbuf, &p, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val >= cpuid_info_p->min_level'
#174: FILE: arch/x86/kernel/cpuid.c:240:
+	if (((val >= cpuid_info_p->min_level)
+		&& (val <= cpuid_info_p->max_level))
+		|| ((val >= cpuid_info_p->min_ext_level)
+		&& (val <= cpuid_info_p->max_ext_level))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val <= cpuid_info_p->max_level'
#174: FILE: arch/x86/kernel/cpuid.c:240:
+	if (((val >= cpuid_info_p->min_level)
+		&& (val <= cpuid_info_p->max_level))
+		|| ((val >= cpuid_info_p->min_ext_level)
+		&& (val <= cpuid_info_p->max_ext_level))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val >= cpuid_info_p->min_ext_level'
#174: FILE: arch/x86/kernel/cpuid.c:240:
+	if (((val >= cpuid_info_p->min_level)
+		&& (val <= cpuid_info_p->max_level))
+		|| ((val >= cpuid_info_p->min_ext_level)
+		&& (val <= cpuid_info_p->max_ext_level))) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'val <= cpuid_info_p->max_ext_level'
#174: FILE: arch/x86/kernel/cpuid.c:240:
+	if (((val >= cpuid_info_p->min_level)
+		&& (val <= cpuid_info_p->max_level))
+		|| ((val >= cpuid_info_p->min_ext_level)
+		&& (val <= cpuid_info_p->max_ext_level))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#174: FILE: arch/x86/kernel/cpuid.c:240:
+	if (((val >= cpuid_info_p->min_level)
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#175: FILE: arch/x86/kernel/cpuid.c:241:
+	if (((val >= cpuid_info_p->min_level)
+		&& (val <= cpuid_info_p->max_level))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#176: FILE: arch/x86/kernel/cpuid.c:242:
+		&& (val <= cpuid_info_p->max_level))
+		|| ((val >= cpuid_info_p->min_ext_level)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#177: FILE: arch/x86/kernel/cpuid.c:243:
+		|| ((val >= cpuid_info_p->min_ext_level)
+		&& (val <= cpuid_info_p->max_ext_level))) {

CHECK:BRACES: Unbalanced braces around else statement
#180: FILE: arch/x86/kernel/cpuid.c:246:
+	} else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#225: FILE: arch/x86/kernel/cpuid.c:291:
+};
+#define to_cpuid_info(k) container_of(k, struct cpuid_info, kobj)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#233: FILE: arch/x86/kernel/cpuid.c:299:
+	if (cpu >= NR_CPUS || !cpu_online(cpu))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#242: FILE: arch/x86/kernel/cpuid.c:308:
+static ssize_t cpuid_show(struct kobject *kobj, struct attribute *attr,
+				char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#256: FILE: arch/x86/kernel/cpuid.c:322:
+static ssize_t cpuid_store(struct kobject *kobj, struct attribute *attr,
+				const char *buf, size_t count)

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#274: FILE: arch/x86/kernel/cpuid.c:340:
+static struct sysfs_ops cpuid_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cpu_sys_dev"
#293: FILE: arch/x86/kernel/cpuid.c:359:
+	if (cpu_sys_dev == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cpuid_infos[cpu].kobj
#297: FILE: arch/x86/kernel/cpuid.c:363:
+	kobject_set_name(&(cpuid_infos[cpu].kobj), "%s", "cpuid");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cpuid_infos[cpu].kobj
#315: FILE: arch/x86/kernel/cpuid.c:381:
+	retval = kobject_register(&(cpuid_infos[cpu].kobj));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cpuid_infos[cpu].kobj
#328: FILE: arch/x86/kernel/cpuid.c:394:
+		kobject_unregister(&(cpuid_infos[cpu].kobj));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#334: FILE: arch/x86/kernel/cpuid.c:400:
+static int __init_refok cpuid_sysfs_cpu_callback(struct notifier_block *nfb,
+					      unsigned long action,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329569.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 11 warnings, 21 checks, 285 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000329569.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
