WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/pci/pcie/aer/aer_inject.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'Debuging' may be misspelled - perhaps 'Debugging'?
#83: FILE: drivers/pci/pcie/aer/aer_inject.c:4:
+ * Debuging PCIE AER code is quite difficult because it is hard to
    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#104: FILE: drivers/pci/pcie/aer/aer_inject.c:25:
+#include <asm/uaccess.h>

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#108: FILE: drivers/pci/pcie/aer/aer_inject.c:29:
+struct aer_error_inj
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#121: FILE: drivers/pci/pcie/aer/aer_inject.c:42:
+struct aer_error
+{

ERROR:OPEN_BRACE: open brace '{' following struct go on the same line
#138: FILE: drivers/pci/pcie/aer/aer_inject.c:59:
+struct pci_bus_ops
+{

CHECK:BRACES: braces {} should be used on all arms of this statement
#196: FILE: drivers/pci/pcie/aer/aer_inject.c:117:
+	if (list_empty(&pci_bus_ops_list))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#198: FILE: drivers/pci/pcie/aer/aer_inject.c:119:
+	else {

WARNING:LINE_SPACING: Missing a blank line after declarations
#200: FILE: drivers/pci/pcie/aer/aer_inject.c:121:
+		struct list_head *lh = pci_bus_ops_list.next;
+		list_del(lh);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#228: FILE: drivers/pci/pcie/aer/aer_inject.c:149:
+	case PCI_ERR_HEADER_LOG+4:
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#231: FILE: drivers/pci/pcie/aer/aer_inject.c:152:
+	case PCI_ERR_HEADER_LOG+8:
 	                       ^

ERROR:CODE_INDENT: code indent should use tabs where possible
#232: FILE: drivers/pci/pcie/aer/aer_inject.c:153:
+^I        target = &err->header_log2;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#234: FILE: drivers/pci/pcie/aer/aer_inject.c:155:
+	case PCI_ERR_HEADER_LOG+12:
 	                       ^

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#341: FILE: drivers/pci/pcie/aer/aer_inject.c:262:
+	if (bus_ops)
+		kfree(bus_ops);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*err_alloc)...) over kzalloc(sizeof(struct aer_error)...)
#413: FILE: drivers/pci/pcie/aer/aer_inject.c:334:
+	err_alloc =  kzalloc(sizeof(struct aer_error), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*rperr_alloc)...) over kzalloc(sizeof(struct aer_error)...)
#418: FILE: drivers/pci/pcie/aer/aer_inject.c:339:
+	rperr_alloc =  kzalloc(sizeof(struct aer_error), GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#459: FILE: drivers/pci/pcie/aer/aer_inject.c:380:
+		if (sever & einj->uncor_status) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#463: FILE: drivers/pci/pcie/aer/aer_inject.c:384:
+		} else

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#484: FILE: drivers/pci/pcie/aer/aer_inject.c:405:
+	if (err_alloc)
+		kfree(err_alloc);

WARNING:NEEDLESS_IF: kfree(NULL) is safe and this check is probably not required
#486: FILE: drivers/pci/pcie/aer/aer_inject.c:407:
+	if (rperr_alloc)
+		kfree(rperr_alloc);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#491: FILE: drivers/pci/pcie/aer/aer_inject.c:412:
+static ssize_t aer_inject_write(struct file *filp, const char __user *ubuf,
                                              ^^^^

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#560: FILE: drivers/pci/pcie/aer/Kconfig:14:
+source "drivers/pci/pcie/aer/Kconfig.debug"

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:TYPO_SPELLING: 'Debuging' may be misspelled - perhaps 'Debugging'?
#583: FILE: drivers/pci/pcie/aer/Kconfig.debug:13:
+	  Debuging PCIE AER code is quite difficult because it is hard
 	  ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000111695.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 10 warnings, 9 checks, 500 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000111695.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
