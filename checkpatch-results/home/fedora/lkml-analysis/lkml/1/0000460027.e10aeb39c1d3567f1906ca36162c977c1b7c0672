WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#100: FILE: arch/i386/kernel/cpu/common.c:601:
 struct pt_regs * __devinit idle_regs(struct pt_regs *regs)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#125: FILE: arch/i386/kernel/cpu/common.c:611:
+	/* Set %fs for this CPU's per-cpu area.  Memory clobber is to
+	   create a barrier with respect to any per-cpu operations, so the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#126: FILE: arch/i386/kernel/cpu/common.c:612:
+	   compiler doesn't move any before here. */

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#377: FILE: arch/i386/lguest/core.c:305:
+		asm("sgdt %0":"=m"(lg->state->host.gdt));
 		             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#417: FILE: include/asm-i386/current.h:5:
+#include <asm/percpu.h>

WARNING:INCLUDE_LINUX: Use #include <linux/percpu.h> instead of <asm/percpu.h>
#444: FILE: include/asm-i386/irq_regs.h:10:
+#include <asm/percpu.h>

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#599: FILE: include/asm-i386/percpu.h:19:
+#define PER_CPU(var, reg)			\
+	movl %fs:per_cpu__this_cpu_off, reg;		\
+	addl $per_cpu__##var, reg

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'reg' - possible side-effects?
#599: FILE: include/asm-i386/percpu.h:19:
+#define PER_CPU(var, reg)			\
+	movl %fs:per_cpu__this_cpu_off, reg;		\
+	addl $per_cpu__##var, reg

CHECK:SPACING: spaces preferred around that '%' (ctx:WxV)
#600: FILE: include/asm-i386/percpu.h:20:
+	movl %fs:per_cpu__this_cpu_off, reg;		\
 	     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#600: FILE: include/asm-i386/percpu.h:20:
+	movl %fs:per_cpu__this_cpu_off, reg;		\
 	        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#605: FILE: include/asm-i386/percpu.h:23:
+#define PER_CPU(var, reg) \
+	movl $per_cpu__##var, reg

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#619: FILE: include/asm-i386/percpu.h:37:
+#define DECLARE_PER_CPU(type, name) extern __typeof__(type) per_cpu__##name

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#620: FILE: include/asm-i386/percpu.h:38:
+#define DEFINE_PER_CPU(type, name) \
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: include/asm-i386/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section(".data.percpu") over __attribute__((__section__(".data.percpu")))
#621: FILE: include/asm-i386/percpu.h:39:
+    __attribute__((__section__(".data.percpu"))) __typeof__(type) per_cpu__##name

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#628: FILE: include/asm-i386/percpu.h:46:
+	extern int simple_indentifier_##var(void);	\

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#632: FILE: include/asm-i386/percpu.h:50:
+	extern int simple_indentifier_##var(void);			\

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#643: FILE: include/asm-i386/percpu.h:61:
+		memcpy((pcpudst)+__per_cpu_offset[__i],		\
 		                ^

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#647: FILE: include/asm-i386/percpu.h:65:
+#define EXPORT_PER_CPU_SYMBOL(var) EXPORT_SYMBOL(per_cpu__##var)

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#648: FILE: include/asm-i386/percpu.h:66:
+#define EXPORT_PER_CPU_SYMBOL_GPL(var) EXPORT_SYMBOL_GPL(per_cpu__##var)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#658: FILE: include/asm-i386/percpu.h:76:
+ * don't give an lvalue though). */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/asm-i386/percpu.h:77:
+extern void __bad_percpu_size(void);

ERROR:SPACING: space required after that ',' (ctx:VxV)
#661: FILE: include/asm-i386/percpu.h:79:
+#define percpu_to_op(op,var,val)				\
                        ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#661: FILE: include/asm-i386/percpu.h:79:
+#define percpu_to_op(op,var,val)				\
                            ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#661: FILE: include/asm-i386/percpu.h:79:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#661: FILE: include/asm-i386/percpu.h:79:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#661: FILE: include/asm-i386/percpu.h:79:
+#define percpu_to_op(op,var,val)				\
+	do {							\
+		typedef typeof(var) T__;			\
+		if (0) { T__ tmp__; tmp__ = (val); }		\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 2:						\
+			asm(op "w %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		case 4:						\
+			asm(op "l %1,"__percpu_seg"%0"		\
+			    : "+m" (var)			\
+			    :"ri" ((T__)val));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+	} while (0)

WARNING:NEW_TYPEDEFS: do not add new typedefs
#663: FILE: include/asm-i386/percpu.h:81:
+		typedef typeof(var) T__;			\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#664: FILE: include/asm-i386/percpu.h:82:
+		if (0) { T__ tmp__; tmp__ = (val); }		\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#667: FILE: include/asm-i386/percpu.h:85:
+			asm(op "b %1,"__percpu_seg"%0"		\

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#669: FILE: include/asm-i386/percpu.h:87:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#672: FILE: include/asm-i386/percpu.h:90:
+			asm(op "w %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#674: FILE: include/asm-i386/percpu.h:92:
+			    :"ri" ((T__)val));			\
 			    ^

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#677: FILE: include/asm-i386/percpu.h:95:
+			asm(op "l %1,"__percpu_seg"%0"		\

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#679: FILE: include/asm-i386/percpu.h:97:
+			    :"ri" ((T__)val));			\
 			    ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#681: FILE: include/asm-i386/percpu.h:99:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#685: FILE: include/asm-i386/percpu.h:103:
+#define percpu_from_op(op,var)					\
                          ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'op' - possible side-effects?
#685: FILE: include/asm-i386/percpu.h:103:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'var' - possible side-effects?
#685: FILE: include/asm-i386/percpu.h:103:
+#define percpu_from_op(op,var)					\
+	({							\
+		typeof(var) ret__;				\
+		switch (sizeof(var)) {				\
+		case 1:						\
+			asm(op "b "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 2:						\
+			asm(op "w "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		case 4:						\
+			asm(op "l "__percpu_seg"%1,%0"		\
+			    : "=r" (ret__)			\
+			    : "m" (var));			\
+			break;					\
+		default: __bad_percpu_size();			\
+		}						\
+		ret__; })

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#690: FILE: include/asm-i386/percpu.h:108:
+			asm(op "b "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#695: FILE: include/asm-i386/percpu.h:113:
+			asm(op "w "__percpu_seg"%1,%0"		\

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#700: FILE: include/asm-i386/percpu.h:118:
+			asm(op "l "__percpu_seg"%1,%0"		\

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#704: FILE: include/asm-i386/percpu.h:122:
+		default: __bad_percpu_size();			\

ERROR:SPACING: space required after that ',' (ctx:VxV)
#709: FILE: include/asm-i386/percpu.h:127:
+#define x86_write_percpu(var,val) percpu_to_op("mov", per_cpu__##var, val)
                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#710: FILE: include/asm-i386/percpu.h:128:
+#define x86_add_percpu(var,val) percpu_to_op("add", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#711: FILE: include/asm-i386/percpu.h:129:
+#define x86_sub_percpu(var,val) percpu_to_op("sub", per_cpu__##var, val)
                           ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#712: FILE: include/asm-i386/percpu.h:130:
+#define x86_or_percpu(var,val) percpu_to_op("or", per_cpu__##var, val)
                          ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 17 errors, 11 warnings, 19 checks, 532 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000460027.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
