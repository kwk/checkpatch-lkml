WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: fs/exofs/mkexofs.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#109: FILE: fs/exofs/mkexofs.c:24:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#110: FILE: fs/exofs/mkexofs.c:25:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#125: FILE: fs/exofs/mkexofs.c:40:
+static int format(uint64_t lun_capacity, struct osd_dev *dev, int timeout)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#128: FILE: fs/exofs/mkexofs.c:43:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#133: FILE: fs/exofs/mkexofs.c:48:
+	if (req == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#148: FILE: fs/exofs/mkexofs.c:63:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#179: FILE: fs/exofs/mkexofs.c:94:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#182: FILE: fs/exofs/mkexofs.c:97:
+	uint64_t total_matches;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#183: FILE: fs/exofs/mkexofs.c:98:
+	uint64_t total_ret;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#184: FILE: fs/exofs/mkexofs.c:99:
+	uint64_t *id_list;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#186: FILE: fs/exofs/mkexofs.c:101:
+	uint64_t cont;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#187: FILE: fs/exofs/mkexofs.c:102:
+	uint32_t more;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#199: FILE: fs/exofs/mkexofs.c:114:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#227: FILE: fs/exofs/mkexofs.c:142:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#233: FILE: fs/exofs/mkexofs.c:148:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#249: FILE: fs/exofs/mkexofs.c:164:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#267: FILE: fs/exofs/mkexofs.c:182:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#283: FILE: fs/exofs/mkexofs.c:198:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: fs/exofs/mkexofs.c:205:
+	req = prepare_osd_read(dev, p_id, EXOFS_SUPER_ID,
+				sizeof(struct exofs_fscb), 0, 0,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#293: FILE: fs/exofs/mkexofs.c:208:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#315: FILE: fs/exofs/mkexofs.c:230:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#316: FILE: fs/exofs/mkexofs.c:231:
+	uint64_t off = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#325: FILE: fs/exofs/mkexofs.c:240:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#341: FILE: fs/exofs/mkexofs.c:256:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#342: FILE: fs/exofs/mkexofs.c:257:
+	uint64_t off = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#351: FILE: fs/exofs/mkexofs.c:266:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#366: FILE: fs/exofs/mkexofs.c:281:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#374: FILE: fs/exofs/mkexofs.c:289:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#396: FILE: fs/exofs/mkexofs.c:311:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#398: FILE: fs/exofs/mkexofs.c:313:
+	uint64_t off = 0;

CHECK:SPACING: No space is necessary after a cast
#421: FILE: fs/exofs/mkexofs.c:336:
+	dir = (struct exofs_dir_entry *) (buf + dir->rec_len);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#426: FILE: fs/exofs/mkexofs.c:341:
+	if (newfile) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#429: FILE: fs/exofs/mkexofs.c:344:
+	} else

CHECK:SPACING: No space is necessary after a cast
#435: FILE: fs/exofs/mkexofs.c:350:
+		dir = (struct exofs_dir_entry *) (buf + done);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#450: FILE: fs/exofs/mkexofs.c:365:
+	if (req == NULL) {

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#463: FILE: fs/exofs/mkexofs.c:378:
+		     uint64_t o_id, uint16_t mode)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#466: FILE: fs/exofs/mkexofs.c:381:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#469: FILE: fs/exofs/mkexofs.c:384:
+	uint32_t i_generation;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#473: FILE: fs/exofs/mkexofs.c:388:
+	inode->i_uid = inode->i_gid = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#475: FILE: fs/exofs/mkexofs.c:390:
+	inode->i_ctime = inode->i_atime = inode->i_mtime =

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#488: FILE: fs/exofs/mkexofs.c:403:
+	if (req == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#494: FILE: fs/exofs/mkexofs.c:409:
+	prepare_set_attr_list_add_entry(req,
+			OSD_PAGE_NUM_IBM_UOBJ_FS_DATA,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#510: FILE: fs/exofs/mkexofs.c:425:
+	uint8_t cred_a[OSD_CAP_LEN];

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#513: FILE: fs/exofs/mkexofs.c:428:
+	uint32_t page = OSD_PAGE_NUM_IBM_UOBJ_FS_DATA;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#514: FILE: fs/exofs/mkexofs.c:429:
+	uint32_t attr = OSD_ATTR_NUM_IBM_UOBJ_FS_DATA_INODE;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#515: FILE: fs/exofs/mkexofs.c:430:
+	uint16_t expected = EXOFS_INO_ATTR_SIZE;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#516: FILE: fs/exofs/mkexofs.c:431:
+	uint8_t *buf;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!req"
#522: FILE: fs/exofs/mkexofs.c:437:
+	if (req == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: fs/exofs/mkexofs.c:443:
+	prepare_get_attr_list_add_entry(req,
+			OSD_PAGE_NUM_IBM_UOBJ_FS_DATA,

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mkfs>
#699: FILE: fs/exofs/super.c:58:
+	{Opt_mkfs, "mkfs=%u"},

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_format>
#700: FILE: fs/exofs/super.c:59:
+	{Opt_format, "format=%u"},

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192053.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 2 warnings, 49 checks, 656 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000192053.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
