WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
kernel thread.  There can be multiple of them in the process of executing for a

WARNING:REPEATED_WORD: Possible repeated word: 'on'
#35: 
I focused more on on getting it going and representative of the concept than on

ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#59: 
--- a/arch/i386/kernel/process.c	Mon Jan 29 15:36:13 2007 -0800

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

WARNING:TYPO_SPELLING: 'analagous' may be misspelled - perhaps 'analogous'?
#72: FILE: arch/i386/kernel/process.c:708:
+ * first execute something analagous to schedule_tail(). Maybe that's
                            ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prev' - possible side-effects?
#106: FILE: include/asm-i386/system.h:43:
+#define switch_to_fibril(prev, next, ti) do {				\
+	unsigned long esi,edi;						\
+	asm volatile("pushfl\n\t"		/* Save flags */	\
+		     "pushl %%ebp\n\t"					\
+		     "movl %%esp,%0\n\t"	/* save ESP */		\
+		     "movl %4,%%esp\n\t"	/* restore ESP */	\
+		     "movl $1f,%1\n\t"		/* save EIP */		\
+		     "pushl %5\n\t"		/* restore EIP */	\
+		     "jmp __switch_to_fibril\n"				\
+		     "1:\t"						\
+		     "popl %%ebp\n\t"					\
+		     "popfl"						\
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
+		      "=S" (esi),"=D" (edi)				\
+		     :"m" (next->esp),"m" (next->eip),			\
+		      "d" (prev), "a" (ti));				\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'prev' may be better as '(prev)' to avoid precedence issues
#106: FILE: include/asm-i386/system.h:43:
+#define switch_to_fibril(prev, next, ti) do {				\
+	unsigned long esi,edi;						\
+	asm volatile("pushfl\n\t"		/* Save flags */	\
+		     "pushl %%ebp\n\t"					\
+		     "movl %%esp,%0\n\t"	/* save ESP */		\
+		     "movl %4,%%esp\n\t"	/* restore ESP */	\
+		     "movl $1f,%1\n\t"		/* save EIP */		\
+		     "pushl %5\n\t"		/* restore EIP */	\
+		     "jmp __switch_to_fibril\n"				\
+		     "1:\t"						\
+		     "popl %%ebp\n\t"					\
+		     "popfl"						\
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
+		      "=S" (esi),"=D" (edi)				\
+		     :"m" (next->esp),"m" (next->eip),			\
+		      "d" (prev), "a" (ti));				\
 } while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'next' - possible side-effects?
#106: FILE: include/asm-i386/system.h:43:
+#define switch_to_fibril(prev, next, ti) do {				\
+	unsigned long esi,edi;						\
+	asm volatile("pushfl\n\t"		/* Save flags */	\
+		     "pushl %%ebp\n\t"					\
+		     "movl %%esp,%0\n\t"	/* save ESP */		\
+		     "movl %4,%%esp\n\t"	/* restore ESP */	\
+		     "movl $1f,%1\n\t"		/* save EIP */		\
+		     "pushl %5\n\t"		/* restore EIP */	\
+		     "jmp __switch_to_fibril\n"				\
+		     "1:\t"						\
+		     "popl %%ebp\n\t"					\
+		     "popfl"						\
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
+		      "=S" (esi),"=D" (edi)				\
+		     :"m" (next->esp),"m" (next->eip),			\
+		      "d" (prev), "a" (ti));				\
 } while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'next' may be better as '(next)' to avoid precedence issues
#106: FILE: include/asm-i386/system.h:43:
+#define switch_to_fibril(prev, next, ti) do {				\
+	unsigned long esi,edi;						\
+	asm volatile("pushfl\n\t"		/* Save flags */	\
+		     "pushl %%ebp\n\t"					\
+		     "movl %%esp,%0\n\t"	/* save ESP */		\
+		     "movl %4,%%esp\n\t"	/* restore ESP */	\
+		     "movl $1f,%1\n\t"		/* save EIP */		\
+		     "pushl %5\n\t"		/* restore EIP */	\
+		     "jmp __switch_to_fibril\n"				\
+		     "1:\t"						\
+		     "popl %%ebp\n\t"					\
+		     "popfl"						\
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
+		      "=S" (esi),"=D" (edi)				\
+		     :"m" (next->esp),"m" (next->eip),			\
+		      "d" (prev), "a" (ti));				\
 } while (0)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#107: FILE: include/asm-i386/system.h:44:
+	unsigned long esi,edi;						\
 	                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#118: FILE: include/asm-i386/system.h:55:
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
 		     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#118: FILE: include/asm-i386/system.h:55:
+		     :"=m" (prev->esp),"=m" (prev->eip),		\
 		                      ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#119: FILE: include/asm-i386/system.h:56:
+		      "=S" (esi),"=D" (edi)				\
 		                ^

ERROR:SPACING: spaces required around that ':' (ctx:ExV)
#120: FILE: include/asm-i386/system.h:57:
+		     :"m" (next->esp),"m" (next->eip),			\
 		     ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#120: FILE: include/asm-i386/system.h:57:
+		     :"m" (next->esp),"m" (next->eip),			\
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#137: FILE: include/asm-i386/thread_info.h:99:
+	return (struct pt_regs *)(KSTK_TOP(info)-8) - 1;
 	                                        ^

WARNING:TYPO_SPELLING: 'Chosing' may be misspelled - perhaps 'Choosing'?
#171: FILE: include/linux/sched.h:818:
+ * (Chosing a weird new name avoided yet more overloading of 'task', 'call',
     ^^^^^^^

WARNING:TYPO_SPELLING: 'schduler' may be misspelled - perhaps 'scheduler'?
#174: FILE: include/linux/sched.h:821:
+ * This structure is used by the schduler to track multiple executing stacks
                                  ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#232: FILE: kernel/exit.c:858:
+^I/* $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#237: FILE: kernel/exit.c:863:
+	BUG_ON(!list_empty(&current->runnable_fibrils));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#282: FILE: kernel/sched.c:3431:
+	BUG_ON(!list_empty(&fibril->run_list));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#311: FILE: kernel/sched.c:3460:
+	BUG_ON(tsk->lock_depth >= 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#314: FILE: kernel/sched.c:3463:
+	next = list_entry(current->runnable_fibrils.next, struct fibril,
+			 run_list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#316: FILE: kernel/sched.c:3465:
+	BUG_ON(next->state != TASK_RUNNING);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#329: FILE: kernel/sched.c:3478:
+			BUG_ON(!list_empty(&prev->run_list));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#345: FILE: kernel/sched.c:3494:
+^I/* $

ERROR:TRAILING_WHITESPACE: trailing whitespace
#378: FILE: kernel/sched.c:3581:
+^I^I/* $

WARNING:TYPO_SPELLING: 'premption' may be misspelled - perhaps 'preemption'?
#380: FILE: kernel/sched.c:3583:
+		 * premption, but the popfl disables interrupts again.  Watch
 		   ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 10 errors, 11 warnings, 6 checks, 299 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000472978.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
