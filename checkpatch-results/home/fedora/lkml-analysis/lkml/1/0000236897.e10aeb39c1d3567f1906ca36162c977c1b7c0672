WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#49: 
Subject: [PATCH] kernel/rcuclassic.c: state machine based rcu implementation.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: include/linux/rcuclassic.h:93:
+^Ilong            newqlen; ^I /* # of queued callbacks */$

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#212: FILE: include/linux/rcuclassic.h:98:
+	/* objects that are in rcu grace processing. The actual
+	* state depends on rcu_cpumask_getstate(&rgs->cpus);

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#213: FILE: include/linux/rcuclassic.h:99:
+	* state depends on rcu_cpumask_getstate(&rgs->cpus);
+	 */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: include/linux/rcuclassic.h:133:
+extern long rcu_batches_completed(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: include/linux/rcuclassic.h:134:
+extern long rcu_batches_completed_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#319: FILE: include/linux/rcuclassic.h:193:
+extern void rcu_enter_nohz(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#320: FILE: include/linux/rcuclassic.h:194:
+extern void rcu_exit_nohz(void);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#339: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#344: FILE: include/linux/rcucpumask.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#358: FILE: include/linux/rcucpumask.h:15:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#359: FILE: include/linux/rcucpumask.h:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:REPEATED_WORD: Possible repeated word: 'Bla'
#375: FILE: include/linux/rcucpumask.h:32:
+Bla Bla Bla

WARNING:REPEATED_WORD: Possible repeated word: 'Bla'
#375: FILE: include/linux/rcucpumask.h:32:
+Bla Bla Bla

CHECK:CAMELCASE: Avoid CamelCase: <Bla>
#375: FILE: include/linux/rcucpumask.h:32:
+Bla Bla Bla

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#377: FILE: include/linux/rcucpumask.h:34:
+#elif (NR_CPUS > 1)

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#387: FILE: include/linux/rcucpumask.h:44:
+	spinlock_t lock;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#412: FILE: include/linux/rcucpumask.h:69:
+extern void rcu_cpumask_init(struct rcu_cpumask *rcm, int newstate, int setupcpus);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#422: FILE: include/linux/rcucpumask.h:79:
+extern int rcu_cpumask_clear_and_test(struct rcu_cpumask *rcm, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#434: FILE: include/linux/rcucpumask.h:91:
+extern int rcu_cpumask_addcpu(struct rcu_cpumask *rcm, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#448: FILE: include/linux/rcucpumask.h:105:
+extern int rcu_cpumask_removecpu(struct rcu_cpumask *rcm, int cpu);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#470: FILE: include/linux/rcucpumask.h:127:
+}
+static inline int rcu_cpumask_clear_and_test(struct rcu_cpumask *rcm, int cpu)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#474: FILE: include/linux/rcucpumask.h:131:
+}
+static inline int rcu_cpumask_addcpu(struct rcu_cpumask *rcm, int cpu)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#529: FILE: kernel/rcuclassic.c:55:
 
+

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#654: FILE: kernel/rcuclassic.c:120:
+	unsigned seq;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#657: FILE: kernel/rcuclassic.c:123:
+	BUG_ON(!irqs_disabled());

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: kernel/rcuclassic.c:130:
+			BUG_ON(rcu_cpumask_getstate(&rgs->cpus) == RCU_STATE_DESTROY);

ERROR:SPACING: space required before the open parenthesis '('
#670: FILE: kernel/rcuclassic.c:136:
+		switch(rcu_cpumask_getstate(&rgs->cpus)) {

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:MEMORY_BARRIER: memory barrier without comment
#677: FILE: kernel/rcuclassic.c:143:
+			smp_wmb();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#678: FILE: kernel/rcuclassic.c:144:
+			BUG_ON(rgs->start_immediately);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#681: FILE: kernel/rcuclassic.c:147:
+			BUG();

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#690: FILE: kernel/rcuclassic.c:156:
+#define RCU_MAX_DELAY	(HZ/30+1)
                      	   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#690: FILE: kernel/rcuclassic.c:156:
+#define RCU_MAX_DELAY	(HZ/30+1)
                      	      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#695: FILE: kernel/rcuclassic.c:160:
+	BUG_ON(!irqs_disabled());

WARNING:BRACES: braces {} are not necessary for single statement blocks
#696: FILE: kernel/rcuclassic.c:161:
+	if (unlikely(rcs->newqlen == 0)) {
+		rcs->timeout = jiffies + RCU_MAX_DELAY;
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#699: FILE: kernel/rcuclassic.c:164:
+	if ((rcs->newqlen < qlowmark) && (rcs->newqlen+inc >= qlowmark))
 	                                              ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rcs->newqlen < qlowmark'
#699: FILE: kernel/rcuclassic.c:164:
+	if ((rcs->newqlen < qlowmark) && (rcs->newqlen+inc >= qlowmark))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#728: FILE: kernel/rcuclassic.c:173:
+	WARN_ON( (rcs->newqlen >= qlowmark) && (rcu_cpumask_getstate(&rgs->cpus) == RCU_STATE_DESTROY));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

ERROR:SPACING: space prohibited after that open parenthesis '('
#728: FILE: kernel/rcuclassic.c:173:
+	WARN_ON( (rcs->newqlen >= qlowmark) && (rcu_cpumask_getstate(&rgs->cpus) == RCU_STATE_DESTROY));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: kernel/rcuclassic.c:178:
+static void __call_rcu(struct rcu_head *head, struct rcu_global_state *rgs,
+		struct rcu_cpu_state *rcs)

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#741: FILE: kernel/rcuclassic.c:180:
+	if (rcs->new == NULL) {
[...]
+	} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcs->new"
#741: FILE: kernel/rcuclassic.c:180:
+	if (rcs->new == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#810: FILE: kernel/rcuclassic.c:249:
+	BUG_ON(!irqs_disabled());

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#826: FILE: kernel/rcuclassic.c:257:
+		rcd->batchcount = rcd->batchcount*RCU_BATCH_INCFACTOR;
 		                                 ^

WARNING:TABSTOP: Statements should start on a tabstop
#827: FILE: kernel/rcuclassic.c:258:
+	 else

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#828: FILE: kernel/rcuclassic.c:259:
+		rcd->batchcount = rcd->batchcount-rcd->batchcount/RCU_BATCH_DECFACTOR;
 		                                 ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#828: FILE: kernel/rcuclassic.c:259:
+		rcd->batchcount = rcd->batchcount-rcd->batchcount/RCU_BATCH_DECFACTOR;
 		                                                 ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rcs->old"
#832: FILE: kernel/rcuclassic.c:263:
+	if (rcs->old != NULL) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#833: FILE: kernel/rcuclassic.c:264:
+		if (rcd->dead == NULL) {
[...]
+		} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcd->dead"
#833: FILE: kernel/rcuclassic.c:264:
+		if (rcd->dead == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#889: FILE: kernel/rcuclassic.c:284:
+static void __rcu_state_machine(struct rcu_global_state *rgs, struct rcu_cpu_state *rcs,
+					int global_state, int is_quiet, int do_raise, int cpu)

WARNING:TYPO_SPELLING: 'chages' may be misspelled - perhaps 'changes'?
#905: FILE: kernel/rcuclassic.c:291:
+	 * But: important chages (i.e. from COLLECT to GRACE,
 	                  ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#917: FILE: kernel/rcuclassic.c:303:
+	if (global_state == RCU_STATE_DESTROY && rcs->newqlen > 0 &&
[...]
+printk(KERN_ERR" delayed rcu start for %p: %ld entries (cpu %d, ptr %p).\n", rgs, rcs->newqlen, cpu, rcs);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#918: FILE: kernel/rcuclassic.c:304:
+	if (global_state == RCU_STATE_DESTROY && rcs->newqlen > 0 &&
+		time_after(jiffies, rcs->timeout) && do_raise) {

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#919: FILE: kernel/rcuclassic.c:305:
+printk(KERN_ERR" delayed rcu start for %p: %ld entries (cpu %d, ptr %p).\n", rgs, rcs->newqlen, cpu, rcs);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#919: FILE: kernel/rcuclassic.c:305:
+printk(KERN_ERR" delayed rcu start for %p: %ld entries (cpu %d, ptr %p).\n", rgs, rcs->newqlen, cpu, rcs);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#919: FILE: kernel/rcuclassic.c:305:
+printk(KERN_ERR" delayed rcu start for %p: %ld entries (cpu %d, ptr %p).\n", rgs, rcs->newqlen, cpu, rcs);

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

ERROR:SPACING: space required before the open parenthesis '('
#964: FILE: kernel/rcuclassic.c:311:
+		switch(global_state) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#992: FILE: kernel/rcuclassic.c:339:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1025: FILE: kernel/rcuclassic.c:347:
+		BUG_ON(rcu_cpumask_getstate(&rgs->cpus) != rcs->state);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1026: FILE: kernel/rcuclassic.c:348:
+		BUG_ON(global_state != rcu_cpumask_getstate(&rgs->cpus));

ERROR:SPACING: space required before the open parenthesis '('
#1040: FILE: kernel/rcuclassic.c:354:
+		switch(rcu_cpumask_getstate(&rgs->cpus)) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1046: FILE: kernel/rcuclassic.c:360:
+			if (rgs->start_immediately) {
[...]
+			} else {
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1054: FILE: kernel/rcuclassic.c:368:
+			BUG();

WARNING:LONG_LINE: line length of 109 exceeds 100 columns
#1067: FILE: kernel/rcuclassic.c:375:
+static void rcu_state_machine(struct rcu_global_state *rgs, struct rcu_cpu_state *rcs, int is_quiet, int cpu)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1099: FILE: kernel/rcuclassic.c:384:
+#if defined(CONFIG_HOTPLUG_CPU) || defined (CONFIG_NO_HZ)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1110: FILE: kernel/rcuclassic.c:389:
+	unsigned seq;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1115: FILE: kernel/rcuclassic.c:391:
+	BUG_ON(!irqs_disabled());

WARNING:TYPO_SPELLING: 'stil' may be misspelled - perhaps 'still'?
#1121: FILE: kernel/rcuclassic.c:397:
+	 * the entries stil in the queues.
 	               ^^^^

WARNING:LONG_LINE: line length of 135 exceeds 100 columns
#1164: FILE: kernel/rcuclassic.c:425:
+static void rcu_bulk_add(struct rcu_global_state *rgs, struct rcu_cpu_state *rcs, struct rcu_head *h, struct rcu_head **htail, int len)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1167: FILE: kernel/rcuclassic.c:427:
 {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1168: FILE: kernel/rcuclassic.c:428:
+	BUG_ON(irqs_disabled());

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1175: FILE: kernel/rcuclassic.c:432:
+		if (rcs->new == NULL) {
[...]
+		} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!rcs->new"
#1175: FILE: kernel/rcuclassic.c:432:
+		if (rcs->new == NULL) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1193: FILE: kernel/rcuclassic.c:446:
+static void __rcu_offline_cpu(struct rcu_global_state *rgs, struct rcu_cpu_state *this_rcs,
+					struct rcu_cpu_state *other_rcs, int cpu)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1240: FILE: kernel/rcuclassic.c:470:
+	BUG_ON(irqs_disabled());

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: kernel/rcuclassic.c:474:
+	__rcu_offline_cpu(&rcu_global_state_normal, this_rcs_normal,
+					&per_cpu(rcu_cpudata_normal, cpu), cpu);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1249: FILE: kernel/rcuclassic.c:476:
+	__rcu_offline_cpu(&rcu_global_state_bh, this_rcs_bh,
+					&per_cpu(rcu_cpudata_bh, cpu), cpu);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "other_rcd->dead"
#1267: FILE: kernel/rcuclassic.c:484:
+	if (other_rcd->dead != NULL) {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#1296: FILE: kernel/rcuclassic.c:486:
+		if (this_rcd->dead == NULL) {
[...]
+		} else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!this_rcd->dead"
#1296: FILE: kernel/rcuclassic.c:486:
+		if (this_rcd->dead == NULL) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1324: FILE: kernel/rcuclassic.c:498:
+	BUG_ON(rcu_needs_cpu(cpu));

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#1446: FILE: kernel/rcuclassic.c:564:
+ * cpu and with disabled local interupts. It's a prerequisite for
                                ^^^^^^^^^

WARNING:TYPO_SPELLING: 'interupts' may be misspelled - perhaps 'interrupts'?
#1447: FILE: kernel/rcuclassic.c:565:
+ * rcu_nohz_enter() that rcu_needs_cpu() return 0. Local interupts must not
                                                          ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1459: FILE: kernel/rcuclassic.c:575:
+	int ret;
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1459: FILE: kernel/rcuclassic.c:575:
+	BUG_ON(!irqs_disabled());

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1464: FILE: kernel/rcuclassic.c:580:
+printk(KERN_ERR" rcu_needs cpu %d: %d.\n", cpu, ret);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1464: FILE: kernel/rcuclassic.c:580:
+printk(KERN_ERR" rcu_needs cpu %d: %d.\n", cpu, ret);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1501: FILE: kernel/rcuclassic.c:611:
+		rcu_state_machine(&rcu_global_state_normal, &per_cpu(rcu_cpudata_normal, cpu), 1, cpu);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1514: FILE: kernel/rcuclassic.c:622:
+		rcu_state_machine(&rcu_global_state_normal, &per_cpu(rcu_cpudata_normal, cpu), 0, cpu);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#1521: FILE: kernel/rcuclassic.c:629:
+		rcu_state_machine(&rcu_global_state_normal, &per_cpu(rcu_cpudata_normal, cpu), 0, cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1538: FILE: kernel/rcuclassic.c:646:
+	BUG_ON(irqs_disabled());

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1548: FILE: kernel/rcuclassic.c:656:
+		for (i=0;i<count;i++)
 		      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1548: FILE: kernel/rcuclassic.c:656:
+		for (i=0;i<count;i++)
 		        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1548: FILE: kernel/rcuclassic.c:656:
+		for (i=0;i<count;i++)
 		          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1548: FILE: kernel/rcuclassic.c:656:
+		for (i=0;i<count;i++)
 		                ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1560: FILE: kernel/rcuclassic.c:668:
+	BUG_ON(rcd->deadqlen < 0);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#1566: FILE: kernel/rcuclassic.c:674:
+	for (i=0;i<count;i++) {
 	      ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1566: FILE: kernel/rcuclassic.c:674:
+	for (i=0;i<count;i++) {
 	        ^

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#1566: FILE: kernel/rcuclassic.c:674:
+	for (i=0;i<count;i++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:VxV)
#1566: FILE: kernel/rcuclassic.c:674:
+	for (i=0;i<count;i++) {
 	                ^

WARNING:REPEATED_WORD: Possible repeated word: 'the'
#1623: FILE: kernel/rcuclassic.c:715:
+	 * the the work that we need to do.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1625: FILE: kernel/rcuclassic.c:717:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1628: FILE: kernel/rcuclassic.c:720:
+	BUG_ON(*pmode != RCU_CPUMODE_DELAYED);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1637: FILE: kernel/rcuclassic.c:729:
+	BUG_ON(rcu_needs_cpu(cpu));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1638: FILE: kernel/rcuclassic.c:730:
+printk(KERN_ERR" enter_nohz %d.\n", cpu);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1638: FILE: kernel/rcuclassic.c:730:
+printk(KERN_ERR" enter_nohz %d.\n", cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1646: FILE: kernel/rcuclassic.c:738:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1649: FILE: kernel/rcuclassic.c:741:
+	BUG_ON(*pmode != 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1658: FILE: kernel/rcuclassic.c:750:
+printk(KERN_ERR" exit_nohz %d.\n", cpu);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1658: FILE: kernel/rcuclassic.c:750:
+printk(KERN_ERR" exit_nohz %d.\n", cpu);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1665: FILE: kernel/rcuclassic.c:757:
+	BUG_ON(!irqs_disabled());

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1668: FILE: kernel/rcuclassic.c:760:
+	if (unlikely(*pmode != RCU_CPUMODE_DELAYED)) {
+printk(KERN_ERR" irq enter %d, %d.\n", smp_processor_id(), *pmode);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1669: FILE: kernel/rcuclassic.c:761:
+printk(KERN_ERR" irq enter %d, %d.\n", smp_processor_id(), *pmode);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1669: FILE: kernel/rcuclassic.c:761:
+printk(KERN_ERR" irq enter %d, %d.\n", smp_processor_id(), *pmode);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#1677: FILE: kernel/rcuclassic.c:769:
+			__rcu_add_cpu(&rcu_global_state_normal,&get_cpu_var(rcu_cpudata_normal), cpu);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1677: FILE: kernel/rcuclassic.c:769:
+			__rcu_add_cpu(&rcu_global_state_normal,&get_cpu_var(rcu_cpudata_normal), cpu);
 			                                      ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1677: FILE: kernel/rcuclassic.c:769:
+			__rcu_add_cpu(&rcu_global_state_normal,&get_cpu_var(rcu_cpudata_normal), cpu);
 			                                       ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1679: FILE: kernel/rcuclassic.c:771:
+			__rcu_add_cpu(&rcu_global_state_bh,&get_cpu_var(rcu_cpudata_bh), cpu);
 			                                  ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1679: FILE: kernel/rcuclassic.c:771:
+			__rcu_add_cpu(&rcu_global_state_bh,&get_cpu_var(rcu_cpudata_bh), cpu);
 			                                   ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1691: FILE: kernel/rcuclassic.c:783:
+	BUG_ON(!irqs_disabled());

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1694: FILE: kernel/rcuclassic.c:786:
+	if (unlikely(*pmode != RCU_CPUMODE_DELAYED)) {
[...]
+printk(KERN_ERR" irq exit %d, %d.\n", smp_processor_id(), *pmode);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1695: FILE: kernel/rcuclassic.c:787:
+	if (unlikely(*pmode != RCU_CPUMODE_DELAYED)) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1696: FILE: kernel/rcuclassic.c:788:
+printk(KERN_ERR" irq exit %d, %d.\n", smp_processor_id(), *pmode);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1696: FILE: kernel/rcuclassic.c:788:
+printk(KERN_ERR" irq exit %d, %d.\n", smp_processor_id(), *pmode);

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#1711: FILE: kernel/rcuclassic.c:803:
+			__rcu_remove_cpu(&rcu_global_state_normal,&per_cpu(rcu_cpudata_normal, cpu), cpu);

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1711: FILE: kernel/rcuclassic.c:803:
+			__rcu_remove_cpu(&rcu_global_state_normal,&per_cpu(rcu_cpudata_normal, cpu), cpu);
 			                                         ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1711: FILE: kernel/rcuclassic.c:803:
+			__rcu_remove_cpu(&rcu_global_state_normal,&per_cpu(rcu_cpudata_normal, cpu), cpu);
 			                                          ^

ERROR:SPACING: space required after that ',' (ctx:VxO)
#1712: FILE: kernel/rcuclassic.c:804:
+			__rcu_remove_cpu(&rcu_global_state_bh,&per_cpu(rcu_cpudata_bh, cpu), cpu);
 			                                     ^

ERROR:SPACING: space required before that '&' (ctx:OxV)
#1712: FILE: kernel/rcuclassic.c:804:
+			__rcu_remove_cpu(&rcu_global_state_bh,&per_cpu(rcu_cpudata_bh, cpu), cpu);
 			                                      ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 8)
#1714: FILE: kernel/rcuclassic.c:806:
+			if (rcu_needs_cpu(cpu)) {
[...]
+	printk(KERN_ERR" irq exit %d - need resched .\n", cpu);

WARNING:TYPO_SPELLING: 'interupt' may be misspelled - perhaps 'interrupt'?
#1716: FILE: kernel/rcuclassic.c:808:
+				 * task 2: Someone did a call_rcu() in the interupt.
 				                                           ^^^^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1727: FILE: kernel/rcuclassic.c:819:
+	printk(KERN_ERR" irq exit %d - need resched .\n", cpu);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1727: FILE: kernel/rcuclassic.c:819:
+	printk(KERN_ERR" irq exit %d - need resched .\n", cpu);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1740: FILE: kernel/rcuclassic.c:832:
+	rcs->new = rcs->old = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1741: FILE: kernel/rcuclassic.c:833:
+	rcs->newqlen = rcs->oldqlen = 0;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1774: FILE: kernel/rcuclassic.c:868:
+		/* fall-through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1799: FILE: kernel/rcucpumask.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1813: FILE: kernel/rcucpumask.c:15:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#1814: FILE: kernel/rcucpumask.c:16:
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1826: FILE: kernel/rcucpumask.c:28:
+	BUG_ON(!irqs_disabled());

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1834: FILE: kernel/rcucpumask.c:36:
+		bitmap_copy(cpus_addr(rcm->mask_cpu_open), cpus_addr(rcm->mask_cpu_total), NR_CPUS);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1846: FILE: kernel/rcucpumask.c:48:
+	BUG_ON(!irqs_disabled());

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1850: FILE: kernel/rcucpumask.c:52:
+	BUG_ON(!cpu_isset(cpu, rcm->mask_cpu_open));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1855: FILE: kernel/rcucpumask.c:57:
+	printk(KERN_ERR" rcm %p cpu %d state %d.\n", rcm, cpu, rcm->state);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1855: FILE: kernel/rcucpumask.c:57:
+	printk(KERN_ERR" rcm %p cpu %d state %d.\n", rcm, cpu, rcm->state);

ERROR:SPACING: space required before the open parenthesis '('
#1856: FILE: kernel/rcucpumask.c:58:
+for(;;);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1856: FILE: kernel/rcucpumask.c:58:
+for(;;);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1858: FILE: kernel/rcucpumask.c:60:
+}
+	ret = rcm->cpus_open;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 0)
#1859: FILE: kernel/rcucpumask.c:61:
+	if (ret == 0) {
+if (!cpus_empty(rcm->mask_cpu_open)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1861: FILE: kernel/rcucpumask.c:63:
+	printk(KERN_ERR" rcm %p cpu %d state %d.\n", rcm, cpu, rcm->state);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1861: FILE: kernel/rcucpumask.c:63:
+	printk(KERN_ERR" rcm %p cpu %d state %d.\n", rcm, cpu, rcm->state);

ERROR:SPACING: space required before the open parenthesis '('
#1862: FILE: kernel/rcucpumask.c:64:
+for(;;);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1862: FILE: kernel/rcucpumask.c:64:
+for(;;);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1864: FILE: kernel/rcucpumask.c:66:
+}
+	}

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1865: FILE: kernel/rcucpumask.c:67:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1882: FILE: kernel/rcucpumask.c:84:
+	BUG_ON(cpu_isset(cpu, rcm->mask_cpu_total));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1887: FILE: kernel/rcucpumask.c:89:
+^I$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1900: FILE: kernel/rcucpumask.c:102:
+	BUG_ON(!cpu_isset(cpu, rcm->mask_cpu_total));

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1905: FILE: kernel/rcucpumask.c:107:
+^I$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 31 errors, 82 warnings, 47 checks, 1784 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000236897.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
