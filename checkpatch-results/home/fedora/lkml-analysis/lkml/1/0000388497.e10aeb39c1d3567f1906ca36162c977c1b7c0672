WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
This adds a VT notifier that such modules can use to get console output events:

WARNING:LINE_SPACING: Missing a blank line after declarations
#73: FILE: drivers/char/vt.c:246:
+	struct vt_notifier_param param = { .vc = vc, unicode = unicode };
+	atomic_notifier_call_chain(&vt_notifier_list, VT_WRITE, &param);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#79: FILE: drivers/char/vt.c:252:
+	struct vt_notifier_param param = { .vc = vc };
+	atomic_notifier_call_chain(&vt_notifier_list, VT_UPDATE, &param);

WARNING:TABSTOP: Statements should start on a tabstop
#90: FILE: drivers/char/vt.c:751:
+	    struct vt_notifier_param param;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#99: FILE: drivers/char/vt.c:763:
+	    param.vc = vc = kzalloc(sizeof(struct vc_data), GFP_KERNEL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*vc)...) over kzalloc(sizeof(struct vc_data)...)
#99: FILE: drivers/char/vt.c:763:
+	    param.vc = vc = kzalloc(sizeof(struct vc_data), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LINE_SPACING: Missing a blank line after declarations
#116: FILE: drivers/char/vt.c:938:
+		struct vt_notifier_param param = { .vc = vc };
+		atomic_notifier_call_chain(&vt_notifier_list, VT_DEALLOCATE, &param);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#224: FILE: include/linux/vt.h:12:
+extern int register_vt_notifier(struct notifier_block *nb);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#225: FILE: include/linux/vt.h:13:
+extern int unregister_vt_notifier(struct notifier_block *nb);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388497.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 5 warnings, 4 checks, 164 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000388497.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
