WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#42: 
>> enables to reduce the iteration of reading /etc/security/capability.conf.

WARNING:TYPO_SPELLING: 'seconf' may be misspelled - perhaps 'second'?
#53: 
kill the seconf read of the configuration file.
         ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'Followings' may be misspelled - perhaps 'Following'?
#56: 
Followings are detailed explanation and the patch.
^^^^^^^^^^

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#81: 
# kaigai get cap_net_raw and cap_kill, tak get cap_sys_pacct pI.

Commit log lines starting with a '#' are ignored by git as
comments.  To solve this problem addition of a single space
infront of the log line is enough.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#82: 
# We can omit "i:" in the head of each line.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#86: 
# ymj and tak lost cap_sys_chroot from cap_bset

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#89: 
# Any user within webadm group get cap_net_bind_service pI.

WARNING:COMMIT_COMMENT_SYMBOL: Commit log lines starting with '#' are dropped by git as comments
#92: 
# Any user within users group lost cap_sys_module from cap_bset

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#167: FILE: pam_cap/pam_cap.c:35:
+extern char const *_cap_names[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#174: FILE: pam_cap/pam_cap.c:42:
+    cap_t result;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#175: FILE: pam_cap/pam_cap.c:43:
+    int do_set_inh : 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#176: FILE: pam_cap/pam_cap.c:44:
+    int do_set_bset : 1;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#183: FILE: pam_cap/pam_cap.c:48:
+static int read_capabilities_for_user(struct pam_cap_s *pcs)
  {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#187: FILE: pam_cap/pam_cap.c:50:
+    char buffer[CAP_FILE_BUFFER_SIZE];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#189: FILE: pam_cap/pam_cap.c:52:
+    struct passwd *pwd;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#190: FILE: pam_cap/pam_cap.c:53:
+    int line_num = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#191: FILE: pam_cap/pam_cap.c:54:
+    int rc = -1;^I/* PAM_(AUTH|CRED|SESSION)_ERR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#193: FILE: pam_cap/pam_cap.c:56:
+    pwd = getpwnam(pcs->user);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#194: FILE: pam_cap/pam_cap.c:57:
+    if (!pwd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#197: FILE: pam_cap/pam_cap.c:60:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#203: FILE: pam_cap/pam_cap.c:62:
+    cap_file = fopen(pcs->conf_filename, "r");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#204: FILE: pam_cap/pam_cap.c:63:
+    if (!cap_file) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#205: FILE: pam_cap/pam_cap.c:64:
+	if (errno == ENOENT) {
+	    syslog(LOG_NOTICE, "%s is not found",

WARNING:TABSTOP: Statements should start on a tabstop
#208: FILE: pam_cap/pam_cap.c:67:
+	    return PAM_IGNORE;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#209: FILE: pam_cap/pam_cap.c:68:
+	} else {
+	    syslog(LOG_ERR, "unable to open '%s' (%s)",

WARNING:TABSTOP: Statements should start on a tabstop
#212: FILE: pam_cap/pam_cap.c:71:
+	    return rc;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: pam_cap/pam_cap.c:75:
+    pcs->result = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: pam_cap/pam_cap.c:76:
+    while (fgets(buffer, CAP_FILE_BUFFER_SIZE, cap_file) != NULL) {$

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "fgets"
#220: FILE: pam_cap/pam_cap.c:76:
+    while (fgets(buffer, CAP_FILE_BUFFER_SIZE, cap_file) != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#236: FILE: pam_cap/pam_cap.c:85:
+	if (pos)
+	    *pos = '\0';

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#241: FILE: pam_cap/pam_cap.c:90:
+	if (!cap_text)
  	    continue;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#244: FILE: pam_cap/pam_cap.c:93:
+	if (!strncmp(cap_text, "b:", 2)) {
[...]
+	    line_ops = CAP_PERMITTED;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#248: FILE: pam_cap/pam_cap.c:97:
+	} else if (!strncmp(cap_text, "i:", 2)) {
+	    cap_text += 2;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#254: FILE: pam_cap/pam_cap.c:102:
+	while ((pos = strtok(NULL, CAP_FILE_DELIMITERS)) != NULL) {
[...]
+	    if (!strcmp("*", pos)) {

WARNING:TABSTOP: Statements should start on a tabstop
#256: FILE: pam_cap/pam_cap.c:104:
+	    if (!strcmp("*", pos)) {

WARNING:TABSTOP: Statements should start on a tabstop
#259: FILE: pam_cap/pam_cap.c:107:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#266: FILE: pam_cap/pam_cap.c:110:
+	    if (*pos == '@') {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#272: FILE: pam_cap/pam_cap.c:116:
+		if (!grp) {
+		    if (pcs->debug)

WARNING:TABSTOP: Statements should start on a tabstop
#273: FILE: pam_cap/pam_cap.c:117:
+		    if (pcs->debug)

WARNING:TABSTOP: Statements should start on a tabstop
#276: FILE: pam_cap/pam_cap.c:120:
+		    continue;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#279: FILE: pam_cap/pam_cap.c:123:
+		if (pwd->pw_gid == grp->gr_gid) {
+		    if (pcs->debug)

WARNING:TABSTOP: Statements should start on a tabstop
#280: FILE: pam_cap/pam_cap.c:124:
+		    if (pcs->debug)

WARNING:TABSTOP: Statements should start on a tabstop
#284: FILE: pam_cap/pam_cap.c:128:
+		    break;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#287: FILE: pam_cap/pam_cap.c:131:
+		for (i=0; grp->gr_mem[i]; i++) {
+		    if (!strcmp(pcs->user, grp->gr_mem[i])) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#287: FILE: pam_cap/pam_cap.c:131:
+		for (i=0; grp->gr_mem[i]; i++) {
 		      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TABSTOP: Statements should start on a tabstop
#288: FILE: pam_cap/pam_cap.c:132:
+		    if (!strcmp(pcs->user, grp->gr_mem[i])) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (24, 28)
#289: FILE: pam_cap/pam_cap.c:133:
+			if (pcs->debug)
+			    syslog(LOG_DEBUG, "user %s matched with group %s at line:%d",

WARNING:TABSTOP: Statements should start on a tabstop
#294: FILE: pam_cap/pam_cap.c:138:
+		    }

WARNING:TABSTOP: Statements should start on a tabstop
#297: FILE: pam_cap/pam_cap.c:141:
+	    } else if (!strcmp(pcs->user, pos)) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#298: FILE: pam_cap/pam_cap.c:142:
+		if (pcs->debug)
+		    syslog(LOG_DEBUG, "user '%s' matched at line:%d",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#306: FILE: pam_cap/pam_cap.c:150:
+	if (matched) {
+	    char tmpbuf[CAP_FILE_BUFFER_SIZE];

WARNING:TABSTOP: Statements should start on a tabstop
#308: FILE: pam_cap/pam_cap.c:152:
+	    cap_t tmp;

WARNING:TABSTOP: Statements should start on a tabstop
#309: FILE: pam_cap/pam_cap.c:153:
+	    cap_value_t value;

WARNING:TABSTOP: Statements should start on a tabstop
#310: FILE: pam_cap/pam_cap.c:154:
+	    cap_flag_value_t code;

WARNING:TABSTOP: Statements should start on a tabstop
#312: FILE: pam_cap/pam_cap.c:156:
+	    if (!pcs->result) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#314: FILE: pam_cap/pam_cap.c:158:
+		if (!pcs->result) {
+		    syslog(LOG_ERR, "unable to allocate cap_t object (%s)",

WARNING:TABSTOP: Statements should start on a tabstop
#317: FILE: pam_cap/pam_cap.c:161:
+		    goto out;

WARNING:TABSTOP: Statements should start on a tabstop
#319: FILE: pam_cap/pam_cap.c:163:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#325: FILE: pam_cap/pam_cap.c:165:
+	    switch (line_ops) {

WARNING:TABSTOP: Statements should start on a tabstop
#326: FILE: pam_cap/pam_cap.c:166:
+	    case CAP_INHERITABLE:

WARNING:TABSTOP: Statements should start on a tabstop
#329: FILE: pam_cap/pam_cap.c:169:
+	    case CAP_PERMITTED:

WARNING:TABSTOP: Statements should start on a tabstop
#335: FILE: pam_cap/pam_cap.c:174:
+	    if (!strcmp(cap_text, "none"))

WARNING:TABSTOP: Statements should start on a tabstop
#340: FILE: pam_cap/pam_cap.c:179:
+	    if (!tmp) {

WARNING:TABSTOP: Statements should start on a tabstop
#346: FILE: pam_cap/pam_cap.c:185:
+	    }

WARNING:TABSTOP: Statements should start on a tabstop
#348: FILE: pam_cap/pam_cap.c:187:
+	    for (value=0; ;value++) {

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#348: FILE: pam_cap/pam_cap.c:187:
+	    for (value=0; ;value++) {
 	              ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#348: FILE: pam_cap/pam_cap.c:187:
+	    for (value=0; ;value++) {
 	                  ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#349: FILE: pam_cap/pam_cap.c:188:
+		if (cap_get_flag(tmp, value, CAP_PERMITTED, &code) < 0)
+		    break;	/* If value == __CAP_BITS, we get EINVAL */

WARNING:TABSTOP: Statements should start on a tabstop
#350: FILE: pam_cap/pam_cap.c:189:
+		    break;	/* If value == __CAP_BITS, we get EINVAL */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#351: FILE: pam_cap/pam_cap.c:190:
+		if (code == CAP_SET)
+		    cap_set_flag(pcs->result, line_ops, 1, &value, CAP_SET);

WARNING:TABSTOP: Statements should start on a tabstop
#353: FILE: pam_cap/pam_cap.c:192:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: pam_cap/pam_cap.c:195:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: pam_cap/pam_cap.c:197:
+    if (pcs->debug) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: pam_cap/pam_cap.c:204:
+    rc = PAM_SUCCESS;$

WARNING:INDENTED_LABEL: labels should not be indented
#373: FILE: pam_cap/pam_cap.c:206:
+  out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: pam_cap/pam_cap.c:209:
+    return rc;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#390: FILE: pam_cap/pam_cap.c:218:
+static int set_capabilities(struct pam_cap_s *pcs)
  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: pam_cap/pam_cap.c:220:
+    cap_value_t value;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: pam_cap/pam_cap.c:221:
+    cap_flag_value_t code;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#476: FILE: pam_cap/pam_cap.c:222:
+    int rc = -1;^I/* PAM_(AUTH|CRED|SESSION)_ERR */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: pam_cap/pam_cap.c:225:
+    if (pcs->do_set_inh) {$

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: pam_cap/pam_cap.c:227:
+	cap_t cap_s = cap_get_proc();
+	if (!cap_s) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#481: FILE: pam_cap/pam_cap.c:227:
+	if (!cap_s) {
+	    syslog(LOG_ERR, "your kernel is capability challenged - upgrade: %s",

WARNING:TABSTOP: Statements should start on a tabstop
#484: FILE: pam_cap/pam_cap.c:230:
+	    goto out;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#486: FILE: pam_cap/pam_cap.c:232:
+	for (value=0; ;value++) {
+	    if (cap_get_flag(pcs->result, value, CAP_INHERITABLE, &code))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#486: FILE: pam_cap/pam_cap.c:232:
+	for (value=0; ;value++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#486: FILE: pam_cap/pam_cap.c:232:
+	for (value=0; ;value++) {
 	              ^

WARNING:TABSTOP: Statements should start on a tabstop
#487: FILE: pam_cap/pam_cap.c:233:
+	    if (cap_get_flag(pcs->result, value, CAP_INHERITABLE, &code))

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#491: FILE: pam_cap/pam_cap.c:237:
+	if (cap_set_proc(cap_s) < 0) {
+	    if (errno == EPERM)

WARNING:TABSTOP: Statements should start on a tabstop
#492: FILE: pam_cap/pam_cap.c:238:
+	    if (errno == EPERM)

WARNING:TABSTOP: Statements should start on a tabstop
#497: FILE: pam_cap/pam_cap.c:243:
+	    goto out;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#499: FILE: pam_cap/pam_cap.c:245:
+	if (pcs->debug) {
+	    char *tmp = cap_to_text(cap_s, NULL);

WARNING:TABSTOP: Statements should start on a tabstop
#500: FILE: pam_cap/pam_cap.c:246:
+	    char *tmp = cap_to_text(cap_s, NULL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#512: FILE: pam_cap/pam_cap.c:255:
+    if (pcs->do_set_bset) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#513: FILE: pam_cap/pam_cap.c:256:
+	for (value=0; ;value++) {
+	    if (cap_get_flag(pcs->result, value, CAP_PERMITTED, &code))

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#513: FILE: pam_cap/pam_cap.c:256:
+	for (value=0; ;value++) {
 	          ^

ERROR:SPACING: space required after that ';' (ctx:WxV)
#513: FILE: pam_cap/pam_cap.c:256:
+	for (value=0; ;value++) {
 	              ^

WARNING:TABSTOP: Statements should start on a tabstop
#514: FILE: pam_cap/pam_cap.c:257:
+	    if (cap_get_flag(pcs->result, value, CAP_PERMITTED, &code))

WARNING:TABSTOP: Statements should start on a tabstop
#516: FILE: pam_cap/pam_cap.c:259:
+	    if (code == CAP_SET) {

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#517: FILE: pam_cap/pam_cap.c:260:
+		if (prctl(PR_CAPBSET_DROP, value) < 0) {
+		    syslog(LOG_ERR, "unable to drop capability b-set %u (%s)",

WARNING:TABSTOP: Statements should start on a tabstop
#520: FILE: pam_cap/pam_cap.c:263:
+		    goto out;

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 20)
#522: FILE: pam_cap/pam_cap.c:265:
+		if (pcs->debug)
+		    syslog(LOG_DEBUG, "%s drops capability %s from bounding set",

WARNING:TABSTOP: Statements should start on a tabstop
#525: FILE: pam_cap/pam_cap.c:268:
+	    }

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: pam_cap/pam_cap.c:270:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: pam_cap/pam_cap.c:271:
+    rc = PAM_SUCCESS;$

WARNING:INDENTED_LABEL: labels should not be indented
#538: FILE: pam_cap/pam_cap.c:273:
+  out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: pam_cap/pam_cap.c:274:
+    cap_free(pcs->result);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: pam_cap/pam_cap.c:276:
+    return rc;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#550: FILE: pam_cap/pam_cap.c:279:
+static int init_pam_cap(pam_handle_t *pamh, int argc, const char **argv,
+			struct pam_cap_s *pcs)
  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#554: FILE: pam_cap/pam_cap.c:282:
+    int ctrl, rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#557: FILE: pam_cap/pam_cap.c:285:
+    memset(pcs, 0, sizeof(struct pam_cap_s));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: pam_cap/pam_cap.c:286:
+    pcs->conf_filename = USER_CAP_FILE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: pam_cap/pam_cap.c:287:
+    rc = pam_get_user(pamh, &pcs->user, NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#560: FILE: pam_cap/pam_cap.c:288:
+    if (rc == PAM_CONV_AGAIN) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: pam_cap/pam_cap.c:291:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: pam_cap/pam_cap.c:292:
+    if (rc != PAM_SUCCESS) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: pam_cap/pam_cap.c:295:
+    }$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#576: FILE: pam_cap/pam_cap.c:303:
  	} else {
+	    syslog(LOG_ERR, "unknown option: %s", *argv);

WARNING:TABSTOP: Statements should start on a tabstop
#579: FILE: pam_cap/pam_cap.c:305:
+	    return -1;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: pam_cap/pam_cap.c:307:
+    }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: pam_cap/pam_cap.c:308:
+    return PAM_SUCCESS;$

CHECK:SPACING: No space is necessary after a cast
#587: FILE: pam_cap/pam_cap.c:313:
+    struct pam_cap_s *pcs = (struct pam_cap_s *) data;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: pam_cap/pam_cap.c:313:
+    struct pam_cap_s *pcs = (struct pam_cap_s *) data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#589: FILE: pam_cap/pam_cap.c:315:
+    if (pcs) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#590: FILE: pam_cap/pam_cap.c:316:
+	if (pcs->result)
+	    cap_free(pcs->result);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: pam_cap/pam_cap.c:325:
+    struct pam_cap_s *pcs = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#603: FILE: pam_cap/pam_cap.c:326:
+    int rc = PAM_BUF_ERR;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: pam_cap/pam_cap.c:328:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#606: FILE: pam_cap/pam_cap.c:328:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: pam_cap/pam_cap.c:330:
+    pcs = malloc(sizeof(struct pam_cap_s));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: pam_cap/pam_cap.c:331:
+    if (!pcs)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: pam_cap/pam_cap.c:334:
+    rc = init_pam_cap(pamh, argc, argv, pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: pam_cap/pam_cap.c:335:
+    if (rc != PAM_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: pam_cap/pam_cap.c:338:
+    rc = read_capabilities_for_user(pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: pam_cap/pam_cap.c:339:
+    if (rc != PAM_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: pam_cap/pam_cap.c:342:
+    rc = pam_set_data(pamh, MODULE_NAME, pcs, cleanup_pam_cap);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#632: FILE: pam_cap/pam_cap.c:343:
+    if (rc == PAM_SUCCESS) {$

WARNING:INDENTED_LABEL: labels should not be indented
#648: FILE: pam_cap/pam_cap.c:349:
+  error:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: pam_cap/pam_cap.c:350:
+    cleanup_pam_cap(pamh, pcs, rc);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: pam_cap/pam_cap.c:351:
+    closelog();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#651: FILE: pam_cap/pam_cap.c:352:
+    return rc < 0 ? PAM_AUTH_ERR : rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: pam_cap/pam_cap.c:358:
+    struct pam_cap_s *pcs = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: pam_cap/pam_cap.c:359:
+    int rc = PAM_IGNORE;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#666: FILE: pam_cap/pam_cap.c:361:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#666: FILE: pam_cap/pam_cap.c:361:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: pam_cap/pam_cap.c:363:
+    if (!(flags & PAM_ESTABLISH_CRED))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#673: FILE: pam_cap/pam_cap.c:366:
+    rc = pam_get_data(pamh, MODULE_NAME, (void *)&pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#674: FILE: pam_cap/pam_cap.c:367:
+    if (rc != PAM_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#679: FILE: pam_cap/pam_cap.c:370:
+    rc = set_capabilities(pcs);$

WARNING:INDENTED_LABEL: labels should not be indented
#682: FILE: pam_cap/pam_cap.c:372:
+  out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#683: FILE: pam_cap/pam_cap.c:373:
+    closelog();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#684: FILE: pam_cap/pam_cap.c:374:
+    return rc < 0 ? PAM_CRED_ERR : rc;$

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#689: FILE: pam_cap/pam_cap.c:377:
+int pam_sm_open_session(pam_handle_t *pamh, int flags,
+			int argc, const char **argv)
  {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: pam_cap/pam_cap.c:381:
+    int rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: pam_cap/pam_cap.c:383:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#700: FILE: pam_cap/pam_cap.c:383:
+    openlog(MODULE_NAME, LOG_CONS|LOG_PID, LOG_AUTHPRIV);
                                  ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: pam_cap/pam_cap.c:385:
+    rc = init_pam_cap(pamh, argc, argv, &pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: pam_cap/pam_cap.c:386:
+    if (rc != PAM_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: pam_cap/pam_cap.c:389:
+    rc = read_capabilities_for_user(&pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: pam_cap/pam_cap.c:390:
+    if (rc != PAM_SUCCESS)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: pam_cap/pam_cap.c:393:
+    rc = set_capabilities(&pcs);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: pam_cap/pam_cap.c:395:
+    if (rc == PAM_SUCCESS) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#720: FILE: pam_cap/pam_cap.c:397:
+	if (pcs.result)
+	    cap_free(pcs.result);

WARNING:INDENTED_LABEL: labels should not be indented
#725: FILE: pam_cap/pam_cap.c:401:
+  out:

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: pam_cap/pam_cap.c:402:
+    if (pcs.result)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: pam_cap/pam_cap.c:404:
+    closelog();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: pam_cap/pam_cap.c:406:
+    return rc < 0 ? PAM_SESSION_ERR : rc;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: pam_cap/pam_cap.c:412:
+    return PAM_SUCCESS; /* do nothing */$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 11 errors, 152 warnings, 5 checks, 614 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000350327.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
