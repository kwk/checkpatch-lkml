CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#57: FILE: arch/x86/kernel/traps_32.c:136:
+static inline int valid_stack_ptr(struct thread_info *tinfo,
+			void *p, unsigned int size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/x86/kernel/traps_64.c:237:
+print_context_stack(struct thread_info *tinfo,
+		unsigned long *stack, unsigned long bp,

CHECK:SPACING: No space is necessary after a cast
#336: FILE: arch/x86/kernel/traps_64.c:288:
+			bp = *(unsigned long *) task->thread.sp;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: arch/x86/kernel/traps_64.c:392:
+_show_stack(struct task_struct *task, struct pt_regs *regs,
+		unsigned long *sp, unsigned long bp)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#446: FILE: arch/x86/kernel/traps_64.c:580:
+	if (notify_die(DIE_OOPS, str, regs, err,
+			current->thread.trap_no, SIGSEGV) == NOTIFY_STOP)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#457: FILE: arch/x86/kernel/traps_64.c:594:
+void die(const char * str, struct pt_regs *regs, long err)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#493: FILE: arch/x86/kernel/traps_64.c:680:
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'trapnr' - possible side-effects?
#515: FILE: arch/x86/kernel/traps_64.c:689:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'signr' - possible side-effects?
#515: FILE: arch/x86/kernel/traps_64.c:689:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'str' - possible side-effects?
#515: FILE: arch/x86/kernel/traps_64.c:689:
+#define DO_ERROR_INFO(trapnr, signr, str, name, sicode, siaddr)		\
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\
+{									\
+	siginfo_t info;							\
+	info.si_signo = signr;						\
+	info.si_errno = 0;						\
+	info.si_code = sicode;						\
+	info.si_addr = (void __user *)siaddr;				\
+	trace_hardirqs_fixup();						\
+	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr)	\
+							== NOTIFY_STOP)	\
+		return;							\
 	conditional_sti(regs);						\
+	do_trap(trapnr, signr, str, regs, error_code, &info);		\
 }

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#516: FILE: arch/x86/kernel/traps_64.c:690:
+asmlinkage void do_##name(struct pt_regs * regs, long error_code)	\

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: arch/x86/kernel/traps_64.c:1189:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#839: FILE: arch/x86/kernel/traps_64.c:1189:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: arch/x86/kernel/traps_64.c:1189:
+ ^Iset_system_gate_ist(3, &int3, DEBUG_STACK); /* int3 can be called from all */$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#894: FILE: arch/x86/kernel/traps_64.c:1236:
+	kstack_depth_to_print = simple_strtoul(s, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 3 warnings, 8 checks, 805 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000260154.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
