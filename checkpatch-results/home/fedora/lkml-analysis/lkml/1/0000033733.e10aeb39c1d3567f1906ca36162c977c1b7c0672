WARNING:EMAIL_SUBJECT: A patch subject line should describe the change not the tool that found it
#15: 
Subject: [PATCH 02/14] kernel.h: Checkpatch cleaning

Naming the tool that found the issue is not very useful in the
subject line.  A good subject line summarizes the change that
the patch brings.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'mask' - possible side-effects?
#67: FILE: include/linux/kernel.h:37:
+#define __ALIGN_MASK(x, mask)	(((x) + (mask)) & ~(mask))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'f' may be better as '(f)' to avoid precedence issues
#75: FILE: include/linux/kernel.h:43:
+#define FIELD_SIZEOF(t, f)	(sizeof(((t *)0)->f))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#82: FILE: include/linux/kernel.h:45:
+#define roundup(x, y)		((((x) + ((y) - 1)) / (y)) * (y))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'd' - possible side-effects?
#83: FILE: include/linux/kernel.h:46:
+#define DIV_ROUND_UP(n, d)	(((n) + (d) - 1) / (d))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#94: FILE: include/linux/kernel.h:53:
+#define _RET_IP_	(unsigned long)__builtin_return_address(0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#109: FILE: include/linux/kernel.h:60:
+# define sector_div(n, b)	\
+({				\
+	int _res;		\
+	_res = (n) % (b);	\
+	(n) /= (b);		\
+	_res;			\
+})

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#109: FILE: include/linux/kernel.h:60:
+# define sector_div(n, b)	\
+({				\
+	int _res;		\
+	_res = (n) % (b);	\
+	(n) /= (b);		\
+	_res;			\
+})

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#177: FILE: include/linux/kernel.h:143:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#177: FILE: include/linux/kernel.h:143:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#177: FILE: include/linux/kernel.h:143:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#177: FILE: include/linux/kernel.h:143:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#177: FILE: include/linux/kernel.h:143:
+extern unsigned long simple_strtoul(const char *, char **, unsigned int);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#178: FILE: include/linux/kernel.h:144:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#178: FILE: include/linux/kernel.h:144:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#178: FILE: include/linux/kernel.h:144:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#178: FILE: include/linux/kernel.h:144:
+extern long simple_strtol(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#178: FILE: include/linux/kernel.h:144:
+extern long simple_strtol(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#179: FILE: include/linux/kernel.h:145:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#179: FILE: include/linux/kernel.h:145:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#179: FILE: include/linux/kernel.h:145:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#179: FILE: include/linux/kernel.h:145:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#179: FILE: include/linux/kernel.h:145:
+extern unsigned long long simple_strtoull(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/kernel.h:146:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#180: FILE: include/linux/kernel.h:146:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#180: FILE: include/linux/kernel.h:146:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#180: FILE: include/linux/kernel.h:146:
+extern long long simple_strtoll(const char *, char **, unsigned int);

WARNING:CONSIDER_KSTRTO: simple_strtoll is obsolete, use kstrtoll instead
#180: FILE: include/linux/kernel.h:146:
+extern long long simple_strtoll(const char *, char **, unsigned int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#186: FILE: include/linux/kernel.h:151:
+extern int sprintf(char *buf, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#191: FILE: include/linux/kernel.h:155:
+extern int snprintf(char *buf, size_t size, const char *fmt, ...)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#196: FILE: include/linux/kernel.h:159:
+extern int scnprintf(char *buf, size_t size, const char *fmt, ...)

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#254: FILE: include/linux/kernel.h:341:
+	const typeof(((type *)0)->member) *__mptr = (ptr);	\
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#273: FILE: include/linux/kernel.h:407:
+asmlinkage int printk(const char *fmt, ...)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_emerg([subsystem]dev, ... then dev_emerg(dev, ... then pr_emerg(...  to printk(KERN_EMERG ...
#293: FILE: include/linux/kernel.h:497:
+	printk(KERN_EMERG pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_alert([subsystem]dev, ... then dev_alert(dev, ... then pr_alert(...  to printk(KERN_ALERT ...
#296: FILE: include/linux/kernel.h:499:
+	printk(KERN_ALERT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_crit([subsystem]dev, ... then dev_crit(dev, ... then pr_crit(...  to printk(KERN_CRIT ...
#299: FILE: include/linux/kernel.h:501:
+	printk(KERN_CRIT pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#302: FILE: include/linux/kernel.h:503:
+	printk(KERN_ERR pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#305: FILE: include/linux/kernel.h:505:
+	printk(KERN_WARNING pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#308: FILE: include/linux/kernel.h:507:
+	printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#311: FILE: include/linux/kernel.h:509:
+	printk(KERN_INFO pr_fmt(fmt), ##__VA_ARGS__)

ERROR:SPACING: space required before that '-' (ctx:OxO)
#328: FILE: include/linux/kernel.h:748:
+#define BUILD_BUG_ON_ZERO(e)	(sizeof(struct { int:-!!(e); }))
                             	                     ^

ERROR:SPACING: space required before that '-' (ctx:OxO)
#329: FILE: include/linux/kernel.h:749:
+#define BUILD_BUG_ON_NULL(e)	((void *)sizeof(struct { int:-!!(e); }))
                             	                             ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 25 warnings, 14 checks, 278 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000033733.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
