WARNING:TYPO_SPELLING: 'foramt' may be misspelled - perhaps 'format'?
#49: 
What have been changed for the foramt file after this fix applied:
                               ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#284: FILE: kernel/trace/trace_event_types.h:64:
+TRACE_EVENT_FORMAT(special, TRACE_SPECIAL, special_entry, ignore,
 	TRACE_STRUCT(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#313: FILE: kernel/trace/trace_event_types.h:128:
+		TRACE_FIELD_ARRAY(char, func, TRACE_FUNC_SIZE+1, func)
 		                                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#314: FILE: kernel/trace/trace_event_types.h:129:
+		TRACE_FIELD_ARRAY(char, file, TRACE_FUNC_SIZE+1, file)
 		                                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#391: FILE: kernel/trace/trace_events.c:555:
+		const char *array_descriptor = strchr(field->type, '[');
+		if (!array_descriptor) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: kernel/trace/trace_events.c:578:
+		r = trace_seq_printf(s, "\nprint fmt: %s\n",
+				call->print_fmt);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#520: FILE: kernel/trace/trace_export.c:44:
+#define TRACE_FIELD_ARRAY(type_item, item, len, cmd)	\
 	cmd;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#569: FILE: kernel/trace/trace_export.c:83:
+#define TRACE_FIELD_ARRAY(type, item, len, cmd)				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0);		\

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#569: FILE: kernel/trace/trace_export.c:83:
+#define TRACE_FIELD_ARRAY(type, item, len, cmd)				\
 	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
 				 offsetof(typeof(field), item),		\
 				 sizeof(field.item), 0);		\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#580: FILE: kernel/trace/trace_export.c:99:
+#define TRACE_FIELD_DYNAMIC_ARRAY(type, item)				\
+	ret = trace_define_field(event_call, #type "[]", #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type));		\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#580: FILE: kernel/trace/trace_export.c:99:
+#define TRACE_FIELD_DYNAMIC_ARRAY(type, item)				\
+	ret = trace_define_field(event_call, #type "[]", #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type));		\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#580: FILE: kernel/trace/trace_export.c:99:
+#define TRACE_FIELD_DYNAMIC_ARRAY(type, item)				\
+	ret = trace_define_field(event_call, #type "[]", #item,		\
+				 offsetof(typeof(field), item),		\
+				 0, is_signed_type(type));		\
+	if (ret)							\
+		return ret;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 5 checks, 459 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000090740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
