CHECK:CAMELCASE: Avoid CamelCase: <UcodeRegs>
#127: FILE: drivers/staging/sxg/sxg.c:2740:
+	PSXG_UCODE_REGS sxg_regs = adapter->UcodeRegs;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <MacFilter>
#130: FILE: drivers/staging/sxg/sxg.c:2743:
+		  adapter->netdev->name, (unsigned int)adapter->MacFilter,

CHECK:CAMELCASE: Avoid CamelCase: <MulticastMask>
#131: FILE: drivers/staging/sxg/sxg.c:2744:
+		  adapter->MulticastMask);

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#138: FILE: drivers/staging/sxg/sxg.c:2751:
+/*              DBG_ERROR("sxg: %s macopts = MAC_ALLMCAST | MAC_PROMISC\n      SLUT MODE!!!\n",__func__); */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <McastLow>
#139: FILE: drivers/staging/sxg/sxg.c:2752:
+		WRITE_REG(sxg_regs->McastLow, 0xFFFFFFFF, FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <McastHigh>
#140: FILE: drivers/staging/sxg/sxg.c:2753:
+		WRITE_REG(sxg_regs->McastHigh, 0xFFFFFFFF, FLUSH);

WARNING:LONG_LINE_COMMENT: line length of 117 exceeds 100 columns
#141: FILE: drivers/staging/sxg/sxg.c:2754:
+/*        DBG_ERROR("%s (%s) WRITE to slic_regs slic_mcastlow&high 0xFFFFFFFF\n",__func__, adapter->netdev->name); */

CHECK:SPACING: No space is necessary after a cast
#149: FILE: drivers/staging/sxg/sxg.c:2762:
+			  ((ulong) (adapter->MulticastMask & 0xFFFFFFFF)),

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#154: FILE: drivers/staging/sxg/sxg.c:2767:
+			  (u32) (adapter->MulticastMask & 0xFFFFFFFF), FLUSH);

CHECK:SPACING: No space is necessary after a cast
#156: FILE: drivers/staging/sxg/sxg.c:2769:
+			  (u32) ((adapter->

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'adapter->MulticastMask'
#157: FILE: drivers/staging/sxg/sxg.c:2770:
+			  (u32) ((adapter->
+				  MulticastMask >> 32) & 0xFFFFFFFF), FLUSH);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#174: FILE: drivers/staging/sxg/sxg.c:2787:
+		if (equaladdr) {
+			return (STATUS_SUCCESS);
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#175: FILE: drivers/staging/sxg/sxg.c:2788:
+			return (STATUS_SUCCESS);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mcaddr"
#182: FILE: drivers/staging/sxg/sxg.c:2795:
+	if (mcaddr == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#190: FILE: drivers/staging/sxg/sxg.c:2803:
+	return (STATUS_SUCCESS);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213708.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 4 warnings, 9 checks, 226 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000213708.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
