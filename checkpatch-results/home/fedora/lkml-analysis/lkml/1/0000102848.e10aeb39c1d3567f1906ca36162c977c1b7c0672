WARNING:TYPO_SPELLING: 'neccessary' may be misspelled - perhaps 'necessary'?
#33: 
removed stuff not strictly neccessary, and did a bit of cleanups. It
                           ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#48: FILE: drivers/mmc/host/Kconfig:216:
+config MMC_MSM7X00A
+	tristate "Qualcomm MSM 7X00A SDCC Controller Support"
+	depends on MMC && ARCH_MSM
+	help
+	  This provides support for the SD/MMC cell found in the
+          MSM 7X00A controllers from Qualcomm.

Kconfig symbols should have a help text which fully describes
it.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#65: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#70: FILE: drivers/mmc/host/msm_sdcc.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#71: FILE: drivers/mmc/host/msm_sdcc.c:2:
+ *  linux/drivers/mmc/host/msm_sdcc.c - Qualcomm MSM 7X00A SDCC Driver

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#106: FILE: drivers/mmc/host/msm_sdcc.c:37:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#115: FILE: drivers/mmc/host/msm_sdcc.c:46:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#130: FILE: drivers/mmc/host/msm_sdcc.c:61:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#141: FILE: drivers/mmc/host/msm_sdcc.c:72:
+	BUG_ON(host->curr.data);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#165: FILE: drivers/mmc/host/msm_sdcc.c:96:
+	host->curr.got_dataend = host->curr.got_datablkend = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#178: FILE: drivers/mmc/host/msm_sdcc.c:109:
+		return MSM_SDC4_PHYS + MMCIFIFO;
+	else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#179: FILE: drivers/mmc/host/msm_sdcc.c:110:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#196: FILE: drivers/mmc/host/msm_sdcc.c:127:
+	BUG_ON(!mrq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#199: FILE: drivers/mmc/host/msm_sdcc.c:130:
+		printk(KERN_ERR "msmsdcc: Invalid DataMover result\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#208: FILE: drivers/mmc/host/msm_sdcc.c:139:
+			printk(KERN_ERR "%s: DMA error (0x%.8x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#211: FILE: drivers/mmc/host/msm_sdcc.c:142:
+			printk(KERN_ERR "%s: DMA channel flushed (0x%.8x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#214: FILE: drivers/mmc/host/msm_sdcc.c:145:
+			printk(KERN_ERR

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#236: FILE: drivers/mmc/host/msm_sdcc.c:167:
+	if ((host->curr.got_dataend && host->curr.got_datablkend)
+	     || mrq->data->error) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#237: FILE: drivers/mmc/host/msm_sdcc.c:168:
+	     || mrq->data->error) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: braces {} should be used on all arms of this statement
#246: FILE: drivers/mmc/host/msm_sdcc.c:177:
+		if (!mrq->data->stop || mrq->cmd->error) {
[...]
+		} else
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#255: FILE: drivers/mmc/host/msm_sdcc.c:186:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#255: FILE: drivers/mmc/host/msm_sdcc.c:186:
+		} else

WARNING:RETURN_VOID: void function return statements are not generally useful
#262: FILE: drivers/mmc/host/msm_sdcc.c:193:
+	return;
+}

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#280: FILE: drivers/mmc/host/msm_sdcc.c:211:
+	uint32_t rows;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#281: FILE: drivers/mmc/host/msm_sdcc.c:212:
+	uint32_t crci;

CHECK:BRACES: braces {} should be used on all arms of this statement
#295: FILE: drivers/mmc/host/msm_sdcc.c:226:
+	if (host->pdev_id == 1)
[...]
+	else if (host->pdev_id == 2)
[...]
+	else if (host->pdev_id == 3)
[...]
+	else if (host->pdev_id == 4)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#303: FILE: drivers/mmc/host/msm_sdcc.c:234:
+	else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: drivers/mmc/host/msm_sdcc.c:248:
+	n = dma_map_sg(mmc_dev(host->mmc), host->dma.sg,
+			host->dma.num_ents, host->dma.dir);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#320: FILE: drivers/mmc/host/msm_sdcc.c:251:
+		printk(KERN_ERR "%s: Unable to map in all sg elements\n",

WARNING:SPACING: space prohibited before semicolon
#335: FILE: drivers/mmc/host/msm_sdcc.c:266:
+			(sg_dma_len(sg) / MCI_FIFOSIZE) ;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#363: FILE: drivers/mmc/host/msm_sdcc.c:294:
+	BUG_ON(host->dma.cmd_busaddr & 0x07);

CHECK:BRACES: braces {} should be used on all arms of this statement
#399: FILE: drivers/mmc/host/msm_sdcc.c:330:
+	if (!msmsdcc_config_dma(host, data))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#401: FILE: drivers/mmc/host/msm_sdcc.c:332:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#406: FILE: drivers/mmc/host/msm_sdcc.c:337:
+		if (data->flags & MMC_DATA_READ) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#410: FILE: drivers/mmc/host/msm_sdcc.c:341:
+		} else

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->opcode == 17'
#444: FILE: drivers/mmc/host/msm_sdcc.c:375:
+	if ((((cmd->opcode == 17) || (cmd->opcode == 18))  ||
+	     ((cmd->opcode == 24) || (cmd->opcode == 25))) ||
+	      (cmd->opcode == 53))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->opcode == 18'
#444: FILE: drivers/mmc/host/msm_sdcc.c:375:
+	if ((((cmd->opcode == 17) || (cmd->opcode == 18))  ||
+	     ((cmd->opcode == 24) || (cmd->opcode == 25))) ||
+	      (cmd->opcode == 53))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->opcode == 24'
#444: FILE: drivers/mmc/host/msm_sdcc.c:375:
+	if ((((cmd->opcode == 17) || (cmd->opcode == 18))  ||
+	     ((cmd->opcode == 24) || (cmd->opcode == 25))) ||
+	      (cmd->opcode == 53))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->opcode == 25'
#444: FILE: drivers/mmc/host/msm_sdcc.c:375:
+	if ((((cmd->opcode == 17) || (cmd->opcode == 18))  ||
+	     ((cmd->opcode == 24) || (cmd->opcode == 25))) ||
+	      (cmd->opcode == 53))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cmd->opcode == 53'
#444: FILE: drivers/mmc/host/msm_sdcc.c:375:
+	if ((((cmd->opcode == 17) || (cmd->opcode == 18))  ||
+	     ((cmd->opcode == 24) || (cmd->opcode == 25))) ||
+	      (cmd->opcode == 53))

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#465: FILE: drivers/mmc/host/msm_sdcc.c:396:
+		printk(KERN_ERR "%s: Data CRC error\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#467: FILE: drivers/mmc/host/msm_sdcc.c:398:
+		printk(KERN_ERR "%s: opcode 0x%.8x\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#469: FILE: drivers/mmc/host/msm_sdcc.c:400:
+		printk(KERN_ERR "%s: blksz %d, blocks %d\n", __func__,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#473: FILE: drivers/mmc/host/msm_sdcc.c:404:
+		printk(KERN_ERR "%s: Data timeout\n", mmc_hostname(host->mmc));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#476: FILE: drivers/mmc/host/msm_sdcc.c:407:
+		printk(KERN_ERR "%s: RX overrun\n", mmc_hostname(host->mmc));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#479: FILE: drivers/mmc/host/msm_sdcc.c:410:
+		printk(KERN_ERR "%s: TX underrun\n", mmc_hostname(host->mmc));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#482: FILE: drivers/mmc/host/msm_sdcc.c:413:
+		printk(KERN_ERR "%s: Unknown error (0x%.8x)\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/mmc/host/msm_sdcc.c:414:
+		printk(KERN_ERR "%s: Unknown error (0x%.8x)\n",
+		      mmc_hostname(host->mmc), status);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#488: FILE: drivers/mmc/host/msm_sdcc.c:419:
+
+

CHECK:SPACING: No space is necessary after a cast
#493: FILE: drivers/mmc/host/msm_sdcc.c:424:
+	uint32_t	*ptr = (uint32_t *) buffer;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#493: FILE: drivers/mmc/host/msm_sdcc.c:424:
+	uint32_t	*ptr = (uint32_t *) buffer;

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#497: FILE: drivers/mmc/host/msm_sdcc.c:428:
+	while (readl(base + MMCISTATUS) & MCI_RXDATAAVLBL) {
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#553: FILE: drivers/mmc/host/msm_sdcc.c:484:
+	uint32_t		status;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#638: FILE: drivers/mmc/host/msm_sdcc.c:569:
+		printk(KERN_ERR "%s: Command CRC error\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#643: FILE: drivers/mmc/host/msm_sdcc.c:574:
+	if (!cmd->data || cmd->error) {
[...]
+	} else if (!(cmd->data->flags & MMC_DATA_READ))
[...]

CHECK:BRACES: Unbalanced braces around else statement
#650: FILE: drivers/mmc/host/msm_sdcc.c:581:
+		} else /* host->data == NULL */

WARNING:LINE_SPACING: Missing a blank line after declarations
#669: FILE: drivers/mmc/host/msm_sdcc.c:600:
+		struct mmc_data *data;
+		status = readl(base + MMCISTATUS);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#678: FILE: drivers/mmc/host/msm_sdcc.c:609:
+			if (status & (MCI_DATACRCFAIL|MCI_DATATIMEOUT|
 			                             ^

CHECK:SPACING: space preferred before that '|' (ctx:VxE)
#678: FILE: drivers/mmc/host/msm_sdcc.c:609:
+			if (status & (MCI_DATACRCFAIL|MCI_DATATIMEOUT|
 			                                             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#679: FILE: drivers/mmc/host/msm_sdcc.c:610:
+				      MCI_TXUNDERRUN|MCI_RXOVERRUN)) {
 				                    ^

CHECK:BRACES: Unbalanced braces around else statement
#685: FILE: drivers/mmc/host/msm_sdcc.c:616:
+				else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: drivers/mmc/host/msm_sdcc.c:623:
+						msmsdcc_start_command(host,
+								     data->stop,

WARNING:TYPO_SPELLING: 'theres' may be misspelled - perhaps 'there's'?
#720: FILE: drivers/mmc/host/msm_sdcc.c:651:
+					 * Check to see if theres still data
 					                   ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#737: FILE: drivers/mmc/host/msm_sdcc.c:668:
+						msmsdcc_start_command(host,
+							      data->stop, 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "host->curr.mrq"
#772: FILE: drivers/mmc/host/msm_sdcc.c:703:
+	WARN_ON(host->curr.mrq != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: braces {} should be used on all arms of this statement
#780: FILE: drivers/mmc/host/msm_sdcc.c:711:
+		if (mrq->data && !(mrq->data->flags & MMC_DATA_READ)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#784: FILE: drivers/mmc/host/msm_sdcc.c:715:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#800: FILE: drivers/mmc/host/msm_sdcc.c:731:
+	if (host->cmdpoll && !msmsdcc_spin_on_status(host,
+				MCI_CMDRESPEND|MCI_CMDCRCFAIL|MCI_CMDTIMEOUT,

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#800: FILE: drivers/mmc/host/msm_sdcc.c:731:
+				MCI_CMDRESPEND|MCI_CMDCRCFAIL|MCI_CMDTIMEOUT,
 				              ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#800: FILE: drivers/mmc/host/msm_sdcc.c:731:
+				MCI_CMDRESPEND|MCI_CMDCRCFAIL|MCI_CMDTIMEOUT,
 				                             ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#802: FILE: drivers/mmc/host/msm_sdcc.c:733:
+		uint32_t status = readl(host->base + MMCISTATUS);

WARNING:LINE_SPACING: Missing a blank line after declarations
#803: FILE: drivers/mmc/host/msm_sdcc.c:734:
+		uint32_t status = readl(host->base + MMCISTATUS);
+		msmsdcc_do_cmdirq(host, status);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#822: FILE: drivers/mmc/host/msm_sdcc.c:753:
+	if (ios->clock) {
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#831: FILE: drivers/mmc/host/msm_sdcc.c:762:
+				printk(KERN_ERR

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#920: FILE: drivers/mmc/host/msm_sdcc.c:851:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#941: FILE: drivers/mmc/host/msm_sdcc.c:872:
+	printk(KERN_DEBUG "%s: %d\n", __func__, irq);

CHECK:SPACING: No space is necessary after a cast
#942: FILE: drivers/mmc/host/msm_sdcc.c:873:
+	msmsdcc_check_status((unsigned long) host);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#951: FILE: drivers/mmc/host/msm_sdcc.c:882:
+	printk(KERN_DEBUG "%s: card_present %d\n", mmc_hostname(host->mmc),

CHECK:SPACING: No space is necessary after a cast
#953: FILE: drivers/mmc/host/msm_sdcc.c:884:
+	msmsdcc_check_status((unsigned long) host);

CHECK:SPACING: No space is necessary after a cast
#964: FILE: drivers/mmc/host/msm_sdcc.c:895:
+	struct msmsdcc_host	*host = (struct msmsdcc_host *) _data;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#972: FILE: drivers/mmc/host/msm_sdcc.c:903:
+		printk(KERN_INFO "%s: Command expiry misfire\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#978: FILE: drivers/mmc/host/msm_sdcc.c:909:
+	printk(KERN_ERR "%s: Command timeout (%p %p %p %p)\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!host->dma.nc"
#1008: FILE: drivers/mmc/host/msm_sdcc.c:939:
+	if (host->dma.nc == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1009: FILE: drivers/mmc/host/msm_sdcc.c:940:
+		printk(KERN_ERR "Unable to allocate DMA buffer\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1052: FILE: drivers/mmc/host/msm_sdcc.c:983:
+		printk(KERN_ERR "%s: Platform data not available\n", __func__);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pdev->resource"
#1060: FILE: drivers/mmc/host/msm_sdcc.c:991:
+	if (pdev->resource == NULL || pdev->num_resources < 2) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1061: FILE: drivers/mmc/host/msm_sdcc.c:992:
+		printk(KERN_ERR "%s: Invalid resource\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1075: FILE: drivers/mmc/host/msm_sdcc.c:1006:
+		printk(KERN_ERR "%s: Invalid resource\n", __func__);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1143: FILE: drivers/mmc/host/msm_sdcc.c:1074:
+		printk(KERN_ERR "%s: Clock rate set failed (%d)\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#1186: FILE: drivers/mmc/host/msm_sdcc.c:1117:
+	if (stat_irqres && !(stat_irqres->flags & IORESOURCE_DISABLED)) {
[...]
+	} else if (plat->register_status_notify) {
[...]
+	} else if (!plat->status)
[...]
+	else {
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1197: FILE: drivers/mmc/host/msm_sdcc.c:1128:
+			printk(KERN_ERR "Unable to get slot IRQ %d (%d)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1204: FILE: drivers/mmc/host/msm_sdcc.c:1135:
+		printk(KERN_ERR "%s: No card detect facilities available\n",

CHECK:BRACES: Unbalanced braces around else statement
#1206: FILE: drivers/mmc/host/msm_sdcc.c:1137:
+	else {

CHECK:SPACING: No space is necessary after a cast
#1224: FILE: drivers/mmc/host/msm_sdcc.c:1155:
+	host->command_timer.data = (unsigned long) host;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1240: FILE: drivers/mmc/host/msm_sdcc.c:1171:
+	printk(KERN_INFO

CHECK:SPACING: No space is necessary after a cast
#1243: FILE: drivers/mmc/host/msm_sdcc.c:1174:
+	       (unsigned int) cmd_irqres->start,

CHECK:SPACING: No space is necessary after a cast
#1244: FILE: drivers/mmc/host/msm_sdcc.c:1175:
+	       (unsigned int) host->stat_irq, host->dma.channel);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1245: FILE: drivers/mmc/host/msm_sdcc.c:1176:
+	printk(KERN_INFO "%s: 4 bit data mode %s\n", mmc_hostname(mmc),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1247: FILE: drivers/mmc/host/msm_sdcc.c:1178:
+	printk(KERN_INFO "%s: MMC clock %u -> %u Hz, PCLK %u Hz\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1249: FILE: drivers/mmc/host/msm_sdcc.c:1180:
+	printk(KERN_INFO "%s: Slot eject status = %d\n", mmc_hostname(mmc),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1251: FILE: drivers/mmc/host/msm_sdcc.c:1182:
+	printk(KERN_INFO "%s: Power save feature enable = %d\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1255: FILE: drivers/mmc/host/msm_sdcc.c:1186:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1258: FILE: drivers/mmc/host/msm_sdcc.c:1189:
+		printk(KERN_INFO

CHECK:BRACES: Unbalanced braces around else statement
#1262: FILE: drivers/mmc/host/msm_sdcc.c:1193:
+	} else

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1263: FILE: drivers/mmc/host/msm_sdcc.c:1194:
+		printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1266: FILE: drivers/mmc/host/msm_sdcc.c:1197:
+		printk(KERN_INFO "%s: Polling status mode enabled\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1377: FILE: drivers/mmc/host/msm_sdcc.h:1:
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#1401: FILE: drivers/mmc/host/msm_sdcc.h:25:
+#define MCI_OD			(1 << 6)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#1404: FILE: drivers/mmc/host/msm_sdcc.h:28:
+#define MCI_CLK_ENABLE		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1405: FILE: drivers/mmc/host/msm_sdcc.h:29:
+#define MCI_CLK_PWRSAVE		(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1406: FILE: drivers/mmc/host/msm_sdcc.h:30:
+#define MCI_CLK_WIDEBUS		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1407: FILE: drivers/mmc/host/msm_sdcc.h:31:
+#define MCI_CLK_FLOWENA		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1408: FILE: drivers/mmc/host/msm_sdcc.h:32:
+#define MCI_CLK_INVERTOUT	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1409: FILE: drivers/mmc/host/msm_sdcc.h:33:
+#define MCI_CLK_SELECTIN	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1413: FILE: drivers/mmc/host/msm_sdcc.h:37:
+#define MCI_CPSM_RESPONSE	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1414: FILE: drivers/mmc/host/msm_sdcc.h:38:
+#define MCI_CPSM_LONGRSP	(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1415: FILE: drivers/mmc/host/msm_sdcc.h:39:
+#define MCI_CPSM_INTERRUPT	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1416: FILE: drivers/mmc/host/msm_sdcc.h:40:
+#define MCI_CPSM_PENDING	(1 << 9)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1417: FILE: drivers/mmc/host/msm_sdcc.h:41:
+#define MCI_CPSM_ENABLE		(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1418: FILE: drivers/mmc/host/msm_sdcc.h:42:
+#define MCI_CPSM_PROGENA	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1419: FILE: drivers/mmc/host/msm_sdcc.h:43:
+#define MCI_CSPM_DATCMD		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1420: FILE: drivers/mmc/host/msm_sdcc.h:44:
+#define MCI_CSPM_MCIABORT	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1421: FILE: drivers/mmc/host/msm_sdcc.h:45:
+#define MCI_CSPM_CCSENABLE	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1422: FILE: drivers/mmc/host/msm_sdcc.h:46:
+#define MCI_CSPM_CCSDISABLE	(1 << 15)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1424: FILE: drivers/mmc/host/msm_sdcc.h:48:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1434: FILE: drivers/mmc/host/msm_sdcc.h:58:
+#define MCI_DPSM_ENABLE		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1435: FILE: drivers/mmc/host/msm_sdcc.h:59:
+#define MCI_DPSM_DIRECTION	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1436: FILE: drivers/mmc/host/msm_sdcc.h:60:
+#define MCI_DPSM_MODE		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1437: FILE: drivers/mmc/host/msm_sdcc.h:61:
+#define MCI_DPSM_DMAENABLE	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1441: FILE: drivers/mmc/host/msm_sdcc.h:65:
+#define MCI_CMDCRCFAIL		(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1442: FILE: drivers/mmc/host/msm_sdcc.h:66:
+#define MCI_DATACRCFAIL		(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1443: FILE: drivers/mmc/host/msm_sdcc.h:67:
+#define MCI_CMDTIMEOUT		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1444: FILE: drivers/mmc/host/msm_sdcc.h:68:
+#define MCI_DATATIMEOUT		(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1445: FILE: drivers/mmc/host/msm_sdcc.h:69:
+#define MCI_TXUNDERRUN		(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1446: FILE: drivers/mmc/host/msm_sdcc.h:70:
+#define MCI_RXOVERRUN		(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1447: FILE: drivers/mmc/host/msm_sdcc.h:71:
+#define MCI_CMDRESPEND		(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1448: FILE: drivers/mmc/host/msm_sdcc.h:72:
+#define MCI_CMDSENT		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1449: FILE: drivers/mmc/host/msm_sdcc.h:73:
+#define MCI_DATAEND		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1450: FILE: drivers/mmc/host/msm_sdcc.h:74:
+#define MCI_DATABLOCKEND	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1451: FILE: drivers/mmc/host/msm_sdcc.h:75:
+#define MCI_CMDACTIVE		(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1452: FILE: drivers/mmc/host/msm_sdcc.h:76:
+#define MCI_TXACTIVE		(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1453: FILE: drivers/mmc/host/msm_sdcc.h:77:
+#define MCI_RXACTIVE		(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1454: FILE: drivers/mmc/host/msm_sdcc.h:78:
+#define MCI_TXFIFOHALFEMPTY	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1455: FILE: drivers/mmc/host/msm_sdcc.h:79:
+#define MCI_RXFIFOHALFFULL	(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1456: FILE: drivers/mmc/host/msm_sdcc.h:80:
+#define MCI_TXFIFOFULL		(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1457: FILE: drivers/mmc/host/msm_sdcc.h:81:
+#define MCI_RXFIFOFULL		(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1458: FILE: drivers/mmc/host/msm_sdcc.h:82:
+#define MCI_TXFIFOEMPTY		(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1459: FILE: drivers/mmc/host/msm_sdcc.h:83:
+#define MCI_RXFIFOEMPTY		(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1460: FILE: drivers/mmc/host/msm_sdcc.h:84:
+#define MCI_TXDATAAVLBL		(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1461: FILE: drivers/mmc/host/msm_sdcc.h:85:
+#define MCI_RXDATAAVLBL		(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1462: FILE: drivers/mmc/host/msm_sdcc.h:86:
+#define MCI_SDIOINTR		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1463: FILE: drivers/mmc/host/msm_sdcc.h:87:
+#define MCI_PROGDONE		(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1464: FILE: drivers/mmc/host/msm_sdcc.h:88:
+#define MCI_ATACMDCOMPL		(1 << 24)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1465: FILE: drivers/mmc/host/msm_sdcc.h:89:
+#define MCI_SDIOINTOPER		(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1466: FILE: drivers/mmc/host/msm_sdcc.h:90:
+#define MCI_CCSTIMEOUT		(1 << 26)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1469: FILE: drivers/mmc/host/msm_sdcc.h:93:
+#define MCI_CMDCRCFAILCLR	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1470: FILE: drivers/mmc/host/msm_sdcc.h:94:
+#define MCI_DATACRCFAILCLR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1471: FILE: drivers/mmc/host/msm_sdcc.h:95:
+#define MCI_CMDTIMEOUTCLR	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1472: FILE: drivers/mmc/host/msm_sdcc.h:96:
+#define MCI_DATATIMEOUTCLR	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1473: FILE: drivers/mmc/host/msm_sdcc.h:97:
+#define MCI_TXUNDERRUNCLR	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1474: FILE: drivers/mmc/host/msm_sdcc.h:98:
+#define MCI_RXOVERRUNCLR	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1475: FILE: drivers/mmc/host/msm_sdcc.h:99:
+#define MCI_CMDRESPENDCLR	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1476: FILE: drivers/mmc/host/msm_sdcc.h:100:
+#define MCI_CMDSENTCLR		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1477: FILE: drivers/mmc/host/msm_sdcc.h:101:
+#define MCI_DATAENDCLR		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1478: FILE: drivers/mmc/host/msm_sdcc.h:102:
+#define MCI_DATABLOCKENDCLR	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1481: FILE: drivers/mmc/host/msm_sdcc.h:105:
+#define MCI_CMDCRCFAILMASK	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1482: FILE: drivers/mmc/host/msm_sdcc.h:106:
+#define MCI_DATACRCFAILMASK	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1483: FILE: drivers/mmc/host/msm_sdcc.h:107:
+#define MCI_CMDTIMEOUTMASK	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1484: FILE: drivers/mmc/host/msm_sdcc.h:108:
+#define MCI_DATATIMEOUTMASK	(1 << 3)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1485: FILE: drivers/mmc/host/msm_sdcc.h:109:
+#define MCI_TXUNDERRUNMASK	(1 << 4)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1486: FILE: drivers/mmc/host/msm_sdcc.h:110:
+#define MCI_RXOVERRUNMASK	(1 << 5)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1487: FILE: drivers/mmc/host/msm_sdcc.h:111:
+#define MCI_CMDRESPENDMASK	(1 << 6)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1488: FILE: drivers/mmc/host/msm_sdcc.h:112:
+#define MCI_CMDSENTMASK		(1 << 7)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1489: FILE: drivers/mmc/host/msm_sdcc.h:113:
+#define MCI_DATAENDMASK		(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1490: FILE: drivers/mmc/host/msm_sdcc.h:114:
+#define MCI_DATABLOCKENDMASK	(1 << 10)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1491: FILE: drivers/mmc/host/msm_sdcc.h:115:
+#define MCI_CMDACTIVEMASK	(1 << 11)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1492: FILE: drivers/mmc/host/msm_sdcc.h:116:
+#define MCI_TXACTIVEMASK	(1 << 12)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1493: FILE: drivers/mmc/host/msm_sdcc.h:117:
+#define MCI_RXACTIVEMASK	(1 << 13)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1494: FILE: drivers/mmc/host/msm_sdcc.h:118:
+#define MCI_TXFIFOHALFEMPTYMASK	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1495: FILE: drivers/mmc/host/msm_sdcc.h:119:
+#define MCI_RXFIFOHALFFULLMASK	(1 << 15)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1496: FILE: drivers/mmc/host/msm_sdcc.h:120:
+#define MCI_TXFIFOFULLMASK	(1 << 16)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1497: FILE: drivers/mmc/host/msm_sdcc.h:121:
+#define MCI_RXFIFOFULLMASK	(1 << 17)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1498: FILE: drivers/mmc/host/msm_sdcc.h:122:
+#define MCI_TXFIFOEMPTYMASK	(1 << 18)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1499: FILE: drivers/mmc/host/msm_sdcc.h:123:
+#define MCI_RXFIFOEMPTYMASK	(1 << 19)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1500: FILE: drivers/mmc/host/msm_sdcc.h:124:
+#define MCI_TXDATAAVLBLMASK	(1 << 20)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1501: FILE: drivers/mmc/host/msm_sdcc.h:125:
+#define MCI_RXDATAAVLBLMASK	(1 << 21)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1502: FILE: drivers/mmc/host/msm_sdcc.h:126:
+#define MCI_SDIOINTMASK		(1 << 22)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1503: FILE: drivers/mmc/host/msm_sdcc.h:127:
+#define MCI_PROGDONEMASK	(1 << 23)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1504: FILE: drivers/mmc/host/msm_sdcc.h:128:
+#define MCI_ATACMDCOMPLMASK	(1 << 24)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1505: FILE: drivers/mmc/host/msm_sdcc.h:129:
+#define MCI_SDIOINTOPERMASK	(1 << 25)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1506: FILE: drivers/mmc/host/msm_sdcc.h:130:
+#define MCI_CCSTIMEOUTMASK	(1 << 26)

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1515: FILE: drivers/mmc/host/msm_sdcc.h:139:
+	(MCI_CMDCRCFAILMASK|MCI_DATACRCFAILMASK|MCI_CMDTIMEOUTMASK|	\
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1515: FILE: drivers/mmc/host/msm_sdcc.h:139:
+	(MCI_CMDCRCFAILMASK|MCI_DATACRCFAILMASK|MCI_CMDTIMEOUTMASK|	\
 	                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1515: FILE: drivers/mmc/host/msm_sdcc.h:139:
+	(MCI_CMDCRCFAILMASK|MCI_DATACRCFAILMASK|MCI_CMDTIMEOUTMASK|	\
 	                                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1516: FILE: drivers/mmc/host/msm_sdcc.h:140:
+	MCI_DATATIMEOUTMASK|MCI_TXUNDERRUNMASK|MCI_RXOVERRUNMASK|	\
 	                   ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1516: FILE: drivers/mmc/host/msm_sdcc.h:140:
+	MCI_DATATIMEOUTMASK|MCI_TXUNDERRUNMASK|MCI_RXOVERRUNMASK|	\
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1516: FILE: drivers/mmc/host/msm_sdcc.h:140:
+	MCI_DATATIMEOUTMASK|MCI_TXUNDERRUNMASK|MCI_RXOVERRUNMASK|	\
 	                                                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1517: FILE: drivers/mmc/host/msm_sdcc.h:141:
+	MCI_CMDRESPENDMASK|MCI_CMDSENTMASK|MCI_DATAENDMASK)
 	                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1517: FILE: drivers/mmc/host/msm_sdcc.h:141:
+	MCI_CMDRESPENDMASK|MCI_CMDSENTMASK|MCI_DATAENDMASK)
 	                                  ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1522: FILE: drivers/mmc/host/msm_sdcc.h:146:
+#define MCI_FIFOSIZE	(16*4)
                     	   ^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#1532: FILE: drivers/mmc/host/msm_sdcc.h:156:
+	uint32_t	cmdptr;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#1596: FILE: drivers/mmc/host/msm_sdcc.h:220:
+	spinlock_t		lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 53 warnings, 149 checks, 1554 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000102848.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
