CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#77: FILE: fs/exofs/exofs.h:61:
+	uint64_t pid;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#104: FILE: fs/exofs/exofs.h:160:
+extern int exofs_write_inode(struct inode *, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#104: FILE: fs/exofs/exofs.h:160:
+extern int exofs_write_inode(struct inode *, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#104: FILE: fs/exofs/exofs.h:160:
+extern int exofs_write_inode(struct inode *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#105: FILE: fs/exofs/exofs.h:161:
+extern void exofs_delete_inode(struct inode *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#105: FILE: fs/exofs/exofs.h:161:
+extern void exofs_delete_inode(struct inode *);

CHECK:BRACES: braces {} should be used on all arms of this statement
#175: FILE: fs/exofs/inode.c:1159:
+	if (S_ISCHR(inode->i_mode) || S_ISBLK(inode->i_mode)) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#186: FILE: fs/exofs/inode.c:1170:
+	} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_update_inode', this function's name, in a string
#191: FILE: fs/exofs/inode.c:1175:
+		EXOFS_ERR("exofs_update_inode: osd_start_request failed.\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#204: FILE: fs/exofs/inode.c:1188:
+		BUG_ON(!obj_2bcreated(oi));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LINE_SPACING: Missing a blank line after declarations
#254: FILE: fs/exofs/inode.c:1238:
+	struct exofs_sb_info *sbi;
+	osd_end_request(or);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_delete_inode', this function's name, in a string
#289: FILE: fs/exofs/inode.c:1273:
+		EXOFS_ERR("exofs_delete_inode: osd_start_request failed\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#297: FILE: fs/exofs/inode.c:1281:
+		BUG_ON(!obj_2bcreated(oi));

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#303: FILE: fs/exofs/inode.c:1287:
+		EXOFS_ERR(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_delete_inode', this function's name, in a string
#304: FILE: fs/exofs/inode.c:1288:
+		       "ERROR: @exofs_delete_inode exofs_async_op failed\n");

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#316: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#321: FILE: fs/exofs/super.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#352: FILE: fs/exofs/super.c:32:
+ * along with exofs; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#353: FILE: fs/exofs/super.c:33:
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA$

CHECK:CAMELCASE: Avoid CamelCase: <Opt_pid>
#370: FILE: fs/exofs/super.c:50:
+enum { Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Opt_to>
#370: FILE: fs/exofs/super.c:50:
+enum { Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_mkfs>
#370: FILE: fs/exofs/super.c:50:
+enum { Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_format>
#370: FILE: fs/exofs/super.c:50:
+enum { Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

CHECK:CAMELCASE: Avoid CamelCase: <Opt_err>
#370: FILE: fs/exofs/super.c:50:
+enum { Opt_pid, Opt_to, Opt_mkfs, Opt_format, Opt_err };

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'parse_options', this function's name, in a string
#394: FILE: fs/exofs/super.c:74:
+	EXOFS_DBGMSG("parse_options %s\n", options);

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#409: FILE: fs/exofs/super.c:89:
+			if (0 == match_strlcpy(str, &args[0], sizeof(str)))

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:CONSIDER_KSTRTO: simple_strtoull is obsolete, use kstrtoull instead
#411: FILE: fs/exofs/super.c:91:
+			opts->pid = simple_strtoull(str, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TYPO_SPELLING: 'Timout' may be misspelled - perhaps 'Timeout'?
#423: FILE: fs/exofs/super.c:103:
+				EXOFS_ERR("Timout must be > 0");
 				           ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: fs/exofs/super.c:168:
+	exofs_inode_cachep = kmem_cache_create("exofs_inode_cache",
+				sizeof(struct exofs_i_info), 0,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!exofs_inode_cachep"
#491: FILE: fs/exofs/super.c:171:
+	if (exofs_inode_cachep == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fscb)...) over kzalloc(sizeof(struct exofs_fscb)...)
#519: FILE: fs/exofs/super.c:199:
+	fscb = kzalloc(sizeof(struct exofs_fscb), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_write_super', this function's name, in a string
#521: FILE: fs/exofs/super.c:201:
+		EXOFS_ERR("exofs_write_super: memory allocation failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_write_super', this function's name, in a string
#534: FILE: fs/exofs/super.c:214:
+		EXOFS_ERR("exofs_write_super: osd_start_request failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_write_super', this function's name, in a string
#542: FILE: fs/exofs/super.c:222:
+		EXOFS_ERR("exofs_write_super: osd_req_write_kern failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_write_super', this function's name, in a string
#548: FILE: fs/exofs/super.c:228:
+		EXOFS_ERR("exofs_write_super: exofs_sync_op failed.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#573: FILE: fs/exofs/super.c:253:
+		wait_queue_head_t wq;
+		init_waitqueue_head(&wq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: fs/exofs/super.c:255:
+		wait_event_timeout(wq,
+				  (atomic_read(&sbi->s_curr_pending) == 0),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#630: FILE: fs/exofs/super.c:310:
+			EXOFS_ERR(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_fill_super', this function's name, in a string
#631: FILE: fs/exofs/super.c:311:
+			       "exofs_fill_super: osd_start_request failed.\n");

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#638: FILE: fs/exofs/super.c:318:
+			EXOFS_ERR(

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_fill_super', this function's name, in a string
#639: FILE: fs/exofs/super.c:319:
+			       "exofs_fill_super: osd_req_read_kern failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_fill_super', this function's name, in a string
#647: FILE: fs/exofs/super.c:327:
+			EXOFS_ERR("exofs_fill_super: exofs_sync_op failed.\n");

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#678: FILE: fs/exofs/super.c:358:
+		iput(root);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: fs/exofs/super.c:368:
+		EXOFS_ERR("ERROR: corrupt root inode (mode = %hd)\n",
+		       root->i_mode);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#709: FILE: fs/exofs/super.c:389:
+static int exofs_get_sb(struct file_system_type *type,
+			  int flags, const char *dev_name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#734: FILE: fs/exofs/super.c:414:
+		ATTR_DEF(OSD_APAGE_PARTITION_QUOTAS,
+			OSD_ATTR_PQ_CAPACITY_QUOTA, sizeof(__be64)),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: fs/exofs/super.c:416:
+		ATTR_DEF(OSD_APAGE_PARTITION_INFORMATION,
+			OSD_ATTR_PI_USED_CAPACITY, sizeof(__be64)),

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#738: FILE: fs/exofs/super.c:418:
+	uint64_t capacity = ~0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#739: FILE: fs/exofs/super.c:419:
+	uint64_t used = ~0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#741: FILE: fs/exofs/super.c:421:
+	uint8_t cred_a[OSD_CAP_LEN];

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_statfs', this function's name, in a string
#749: FILE: fs/exofs/super.c:429:
+		EXOFS_DBGMSG("exofs_statfs: osd_start_request failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_statfs', this function's name, in a string
#763: FILE: fs/exofs/super.c:443:
+		EXOFS_DBGMSG("exofs_statfs: get capacity failed.\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'exofs_statfs', this function's name, in a string
#769: FILE: fs/exofs/super.c:449:
+		EXOFS_DBGMSG("exofs_statfs: get used-space failed.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 27 warnings, 24 checks, 763 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000152933.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
