CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#81: FILE: arch/i386/kernel/irq.c:151:
+};
+static DEFINE_PER_CPU(struct irq_stack_info, softirq_stack_info);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#134: FILE: arch/i386/kernel/irq.c:192:
+		info->stack = __alloc_bootmem(THREAD_SIZE, THREAD_SIZE,
 						__pa(MAX_DMA_ADDRESS));

CHECK:BRACES: braces {} should be used on all arms of this statement
#141: FILE: arch/i386/kernel/irq.c:199:
+		if (!cpu)
[...]
+		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#143: FILE: arch/i386/kernel/irq.c:201:
+		else {

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#189: FILE: arch/i386/kernel/irq.c:238:
+					ilog2(THREAD_SIZE/PAGE_SIZE));
 					                 ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#192: FILE: arch/i386/kernel/irq.c:241:
+		info->stack = __alloc_bootmem(THREAD_SIZE, THREAD_SIZE,
 						__pa(MAX_DMA_ADDRESS));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#194: FILE: arch/i386/kernel/irq.c:243:
+		BUG_ON(!info->stack);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#203: FILE: arch/i386/kernel/irq.c:250:
+		free_pages((unsigned long)info->stack, ilog2(THREAD_SIZE/PAGE_SIZE));
 		                                                        ^

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#233: FILE: arch/i386/kernel/irq.c:283:
+	irqctx = (union irq_ctx*)per_cpu(hardirq_stack_info, cpu).stack;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#242: FILE: arch/i386/kernel/irq.c:292:
+	irqctx = (union irq_ctx*)per_cpu(softirq_stack_info, cpu).stack;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#264: FILE: arch/i386/kernel/process.c:330:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#286: FILE: arch/i386/kernel/process.c:342:
+	info = vmap(pages, THREAD_SIZE/PAGE_SIZE, VM_IOREMAP, PAGE_KERNEL);
 	                              ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#301: FILE: arch/i386/kernel/process.c:354:
+	struct page *pages[THREAD_SIZE/PAGE_SIZE];
 	                              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#307: FILE: arch/i386/kernel/process.c:358:
+		pages[i] = vmalloc_to_page(p + PAGE_SIZE*i);
 		                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#309: FILE: arch/i386/kernel/process.c:360:
+	for (i = 0; i < THREAD_SIZE/PAGE_SIZE; ++i)
 	                           ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000436634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 1 warnings, 12 checks, 239 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000436634.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
