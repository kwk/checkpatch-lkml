WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#29: 
There are existing "struct dev_info" declarations as well as local variables

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#63: FILE: drivers/base/core.c:1762:
+	return printk("%s%s %s: %pV",

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'function' - possible side-effects?
#81: FILE: drivers/base/core.c:1780:
+#define declare_dev_level(function, level)			\
+int function(const struct device *dev, const char *fmt, ...)	\
+{								\
+	int r;							\
+        va_list args;						\
+								\
+        va_start(args, fmt);					\
+	r = __dev_printk(level, dev, fmt, args);		\
+        va_end(args);						\
+								\
+        return r;						\
+}								\
+EXPORT_SYMBOL(function)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#81: FILE: drivers/base/core.c:1780:
+#define declare_dev_level(function, level)			\
+int function(const struct device *dev, const char *fmt, ...)	\
+{								\
+	int r;							\
+        va_list args;						\
+								\
+        va_start(args, fmt);					\
+	r = __dev_printk(level, dev, fmt, args);		\
+        va_end(args);						\
+								\
+        return r;						\
+}								\
+EXPORT_SYMBOL(function)

ERROR:CODE_INDENT: code indent should use tabs where possible
#85: FILE: drivers/base/core.c:1784:
+        va_list args;^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#85: FILE: drivers/base/core.c:1784:
+        va_list args;^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#87: FILE: drivers/base/core.c:1786:
+        va_start(args, fmt);^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#87: FILE: drivers/base/core.c:1786:
+        va_start(args, fmt);^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#89: FILE: drivers/base/core.c:1788:
+        va_end(args);^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#89: FILE: drivers/base/core.c:1788:
+        va_end(args);^I^I^I^I^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#91: FILE: drivers/base/core.c:1790:
+        return r;^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#91: FILE: drivers/base/core.c:1790:
+        return r;^I^I^I^I^I^I\$

WARNING:REPEATED_WORD: Possible repeated word: 'with'
#102: FILE: drivers/base/core.c:1801:
+/* Not dev_info because it conflicts with with existing "struct dev_info" */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#134: FILE: include/linux/device.h:596:
+extern int dev_printk(const char *level, const struct device *dev,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#136: FILE: include/linux/device.h:598:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#137: FILE: include/linux/device.h:599:
+extern int dev_emerg(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#138: FILE: include/linux/device.h:600:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#139: FILE: include/linux/device.h:601:
+extern int dev_alert(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#140: FILE: include/linux/device.h:602:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#141: FILE: include/linux/device.h:603:
+extern int dev_crit(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#142: FILE: include/linux/device.h:604:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#143: FILE: include/linux/device.h:605:
+extern int dev_err(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#144: FILE: include/linux/device.h:606:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#145: FILE: include/linux/device.h:607:
+extern int dev_warn(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#146: FILE: include/linux/device.h:608:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#147: FILE: include/linux/device.h:609:
+extern int dev_notice(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#148: FILE: include/linux/device.h:610:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#149: FILE: include/linux/device.h:611:
+extern int _dev_info(const struct device *dev, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#150: FILE: include/linux/device.h:612:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#155: FILE: include/linux/device.h:617:
+static inline int dev_printk(const char *level, const struct device *dev,
+		      const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#156: FILE: include/linux/device.h:618:
+	__attribute__ ((format (printf, 3, 4)));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/device.h:620:
+static inline int dev_printk(const char *level, const struct device *dev,
+		      const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#162: FILE: include/linux/device.h:624:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#166: FILE: include/linux/device.h:628:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#170: FILE: include/linux/device.h:632:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#174: FILE: include/linux/device.h:636:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#178: FILE: include/linux/device.h:640:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#182: FILE: include/linux/device.h:644:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#186: FILE: include/linux/device.h:648:
+	__attribute__ ((format (printf, 2, 3)));

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#198: FILE: include/linux/device.h:659:
+	dev_printk(KERN_DEBUG, dev, format, ##arg)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#201: FILE: include/linux/device.h:661:
+#define dev_dbg(dev, format, ...)		     \
+do {						     \
 	dynamic_dev_dbg(dev, format, ##__VA_ARGS__); \
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#212: FILE: include/linux/device.h:669:
+		dev_printk(KERN_DEBUG, dev, format, ##arg);	\

WARNING:PREFER_DEV_LEVEL: Prefer dev_dbg(... to dev_printk(KERN_DEBUG, ...
#226: FILE: include/linux/device.h:680:
+		dev_printk(KERN_DEBUG, dev, format, ##arg);	\

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 28 warnings, 11 checks, 181 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000003838.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
