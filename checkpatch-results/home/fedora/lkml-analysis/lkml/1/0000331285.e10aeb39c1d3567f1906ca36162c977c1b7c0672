WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#49: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#54: FILE: arch/microblaze/lib/memcpy.c:1:
+/* Filename: memcpy.c

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#62: FILE: arch/microblaze/lib/memcpy.c:9:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#81: FILE: arch/microblaze/lib/memcpy.c:28:
+#include <asm/string.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#88: FILE: arch/microblaze/lib/memcpy.c:35:
+#define BYTE_BLIT_INIT(s, h, o) \
+	(h) = *((unsigned *)(s))++ << (o)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#89: FILE: arch/microblaze/lib/memcpy.c:36:
+	(h) = *((unsigned *)(s))++ << (o)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#91: FILE: arch/microblaze/lib/memcpy.c:38:
+#define BYTE_BLIT_STEP(d, s, h, o) \
+	{ register unsigned _v_; _v_ = *((unsigned *)(s))++; \
+	 *((unsigned *)(d))++ = (h) | _v_ >> (32-(o)); \
+	 (h) = _v_ << (o); \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o' - possible side-effects?
#91: FILE: arch/microblaze/lib/memcpy.c:38:
+#define BYTE_BLIT_STEP(d, s, h, o) \
+	{ register unsigned _v_; _v_ = *((unsigned *)(s))++; \
+	 *((unsigned *)(d))++ = (h) | _v_ >> (32-(o)); \
+	 (h) = _v_ << (o); \
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#92: FILE: arch/microblaze/lib/memcpy.c:39:
+	{ register unsigned _v_; _v_ = *((unsigned *)(s))++; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#92: FILE: arch/microblaze/lib/memcpy.c:39:
+	{ register unsigned _v_; _v_ = *((unsigned *)(s))++; \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#93: FILE: arch/microblaze/lib/memcpy.c:40:
+	 *((unsigned *)(d))++ = (h) | _v_ >> (32-(o)); \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#93: FILE: arch/microblaze/lib/memcpy.c:40:
+	 *((unsigned *)(d))++ = (h) | _v_ >> (32-(o)); \
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:IF_1: Consider removing the #if 1 and its #endif
#99: FILE: arch/microblaze/lib/memcpy.c:46:
+#if 1

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#109: FILE: arch/microblaze/lib/memcpy.c:56:
+	while (c--) *dst++ = *src++;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#123: FILE: arch/microblaze/lib/memcpy.c:70:
+		unsigned x, a, h, align;

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#125: FILE: arch/microblaze/lib/memcpy.c:72:
+		/* Align the destination to a word boundry. */
 		                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#126: FILE: arch/microblaze/lib/memcpy.c:73:
+		/* This is done in an endian independant manner. */
 		                             ^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#127: FILE: arch/microblaze/lib/memcpy.c:74:
+		switch ((unsigned) d & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#127: FILE: arch/microblaze/lib/memcpy.c:74:
+		switch ((unsigned) d & 3) {

CHECK:SPACING: No space is necessary after a cast
#129: FILE: arch/microblaze/lib/memcpy.c:76:
+			*((char *) d)++ = *((char *) s)++;

CHECK:SPACING: No space is necessary after a cast
#132: FILE: arch/microblaze/lib/memcpy.c:79:
+			*((char *) d)++ = *((char *) s)++;

CHECK:SPACING: No space is necessary after a cast
#135: FILE: arch/microblaze/lib/memcpy.c:82:
+			*((char *) d)++ = *((char *) s)++;

CHECK:SPACING: No space is necessary after a cast
#140: FILE: arch/microblaze/lib/memcpy.c:87:
+		switch ((unsigned) s & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#140: FILE: arch/microblaze/lib/memcpy.c:87:
+		switch ((unsigned) s & 3) {

CHECK:SPACING: No space is necessary after a cast
#144: FILE: arch/microblaze/lib/memcpy.c:91:
+				*((unsigned *) d)++ = *((unsigned *) s)++;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#144: FILE: arch/microblaze/lib/memcpy.c:91:
+				*((unsigned *) d)++ = *((unsigned *) s)++;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#144: FILE: arch/microblaze/lib/memcpy.c:91:
+				*((unsigned *) d)++ = *((unsigned *) s)++;

CHECK:SPACING: No space is necessary after a cast
#150: FILE: arch/microblaze/lib/memcpy.c:97:
+			a = (unsigned) s & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#150: FILE: arch/microblaze/lib/memcpy.c:97:
+			a = (unsigned) s & ~3;

CHECK:SPACING: No space is necessary after a cast
#159: FILE: arch/microblaze/lib/memcpy.c:106:
+			(unsigned) s = a - 3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#159: FILE: arch/microblaze/lib/memcpy.c:106:
+			(unsigned) s = a - 3;

CHECK:SPACING: No space is necessary after a cast
#164: FILE: arch/microblaze/lib/memcpy.c:111:
+			a = (unsigned) s & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#164: FILE: arch/microblaze/lib/memcpy.c:111:
+			a = (unsigned) s & ~3;

CHECK:SPACING: No space is necessary after a cast
#173: FILE: arch/microblaze/lib/memcpy.c:120:
+			(unsigned) s = a - 2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#173: FILE: arch/microblaze/lib/memcpy.c:120:
+			(unsigned) s = a - 2;

CHECK:SPACING: No space is necessary after a cast
#178: FILE: arch/microblaze/lib/memcpy.c:125:
+			a = (unsigned) s & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#178: FILE: arch/microblaze/lib/memcpy.c:125:
+			a = (unsigned) s & ~3;

CHECK:SPACING: No space is necessary after a cast
#187: FILE: arch/microblaze/lib/memcpy.c:134:
+			(unsigned) s = a - 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#187: FILE: arch/microblaze/lib/memcpy.c:134:
+			(unsigned) s = a - 1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#191: FILE: arch/microblaze/lib/memcpy.c:138:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#194: FILE: arch/microblaze/lib/memcpy.c:141:
+	/* simple fast copy, ... unless a cache boundry is crossed */
 	                                        ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#197: FILE: arch/microblaze/lib/memcpy.c:144:
+		*((char *) d)++ = *((char *) s)++;

CHECK:SPACING: No space is necessary after a cast
#199: FILE: arch/microblaze/lib/memcpy.c:146:
+		*((char *) d)++ = *((char *) s)++;

CHECK:SPACING: No space is necessary after a cast
#201: FILE: arch/microblaze/lib/memcpy.c:148:
+		*((char *) d)++ = *((char *) s)++;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#208: FILE: arch/microblaze/lib/memcpy.c:155:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#219: FILE: arch/microblaze/lib/memmove.c:1:
+/* Filename: memmove.c

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#227: FILE: arch/microblaze/lib/memmove.c:9:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#246: FILE: arch/microblaze/lib/memmove.c:28:
+#include <asm/string.h>

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#252: FILE: arch/microblaze/lib/memmove.c:34:
+#define BYTE_BLIT_INIT(s, h, o) \
+	(h) = *(--(unsigned *)(s)) >> (32-(o))

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#253: FILE: arch/microblaze/lib/memmove.c:35:
+	(h) = *(--(unsigned *)(s)) >> (32-(o))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#253: FILE: arch/microblaze/lib/memmove.c:35:
+	(h) = *(--(unsigned *)(s)) >> (32-(o))
 	                                 ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#255: FILE: arch/microblaze/lib/memmove.c:37:
+#define BYTE_BLIT_STEP(d, s, h, o) \
+	{ register unsigned _v_; _v_ = *(--(unsigned *)(s)); \
+	 *(--(unsigned *)(d)) = _v_ << (o) | (h); \
+	 (h) = _v_ >> (32-(o)); \
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'o' - possible side-effects?
#255: FILE: arch/microblaze/lib/memmove.c:37:
+#define BYTE_BLIT_STEP(d, s, h, o) \
+	{ register unsigned _v_; _v_ = *(--(unsigned *)(s)); \
+	 *(--(unsigned *)(d)) = _v_ << (o) | (h); \
+	 (h) = _v_ >> (32-(o)); \
+	}

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#256: FILE: arch/microblaze/lib/memmove.c:38:
+	{ register unsigned _v_; _v_ = *(--(unsigned *)(s)); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#256: FILE: arch/microblaze/lib/memmove.c:38:
+	{ register unsigned _v_; _v_ = *(--(unsigned *)(s)); \

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#257: FILE: arch/microblaze/lib/memmove.c:39:
+	 *(--(unsigned *)(d)) = _v_ << (o) | (h); \

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#258: FILE: arch/microblaze/lib/memmove.c:40:
+	 (h) = _v_ >> (32-(o)); \
 	                 ^

WARNING:IF_1: Consider removing the #if 1 and its #endif
#263: FILE: arch/microblaze/lib/memmove.c:45:
+#if 1

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#272: FILE: arch/microblaze/lib/memmove.c:54:
+		return memcpy(d, s, c);
+	} else {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#280: FILE: arch/microblaze/lib/memmove.c:62:
+		while (c--) *--dst = *--src;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#303: FILE: arch/microblaze/lib/memmove.c:85:
+		unsigned x, a, h, align;

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#305: FILE: arch/microblaze/lib/memmove.c:87:
+		/* Align the destination to a word boundry. */
 		                                   ^^^^^^^

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#306: FILE: arch/microblaze/lib/memmove.c:88:
+		/* This is done in an endian independant manner. */
 		                             ^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#307: FILE: arch/microblaze/lib/memmove.c:89:
+		switch ((unsigned) d & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: arch/microblaze/lib/memmove.c:89:
+		switch ((unsigned) d & 3) {

CHECK:SPACING: No space is necessary after a cast
#309: FILE: arch/microblaze/lib/memmove.c:91:
+			*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#312: FILE: arch/microblaze/lib/memmove.c:94:
+			*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#315: FILE: arch/microblaze/lib/memmove.c:97:
+			*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#320: FILE: arch/microblaze/lib/memmove.c:102:
+		switch ((unsigned) s & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#320: FILE: arch/microblaze/lib/memmove.c:102:
+		switch ((unsigned) s & 3) {

CHECK:SPACING: No space is necessary after a cast
#324: FILE: arch/microblaze/lib/memmove.c:106:
+				*(--(unsigned *) d) = *(--(unsigned *) s);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#324: FILE: arch/microblaze/lib/memmove.c:106:
+				*(--(unsigned *) d) = *(--(unsigned *) s);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#324: FILE: arch/microblaze/lib/memmove.c:106:
+				*(--(unsigned *) d) = *(--(unsigned *) s);

CHECK:SPACING: No space is necessary after a cast
#330: FILE: arch/microblaze/lib/memmove.c:112:
+			a = (unsigned) (s + 4) & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#330: FILE: arch/microblaze/lib/memmove.c:112:
+			a = (unsigned) (s + 4) & ~3;

CHECK:SPACING: No space is necessary after a cast
#339: FILE: arch/microblaze/lib/memmove.c:121:
+			(unsigned) s = a + 1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#339: FILE: arch/microblaze/lib/memmove.c:121:
+			(unsigned) s = a + 1;

CHECK:SPACING: No space is necessary after a cast
#344: FILE: arch/microblaze/lib/memmove.c:126:
+			a = (unsigned) (s + 4) & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#344: FILE: arch/microblaze/lib/memmove.c:126:
+			a = (unsigned) (s + 4) & ~3;

CHECK:SPACING: No space is necessary after a cast
#353: FILE: arch/microblaze/lib/memmove.c:135:
+			(unsigned) s = a + 2;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#353: FILE: arch/microblaze/lib/memmove.c:135:
+			(unsigned) s = a + 2;

CHECK:SPACING: No space is necessary after a cast
#358: FILE: arch/microblaze/lib/memmove.c:140:
+			a = (unsigned) (s + 4) & ~3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#358: FILE: arch/microblaze/lib/memmove.c:140:
+			a = (unsigned) (s + 4) & ~3;

CHECK:SPACING: No space is necessary after a cast
#367: FILE: arch/microblaze/lib/memmove.c:149:
+			(unsigned) s = a + 3;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#367: FILE: arch/microblaze/lib/memmove.c:149:
+			(unsigned) s = a + 3;

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#371: FILE: arch/microblaze/lib/memmove.c:153:
+#if 0

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#377: FILE: arch/microblaze/lib/memmove.c:159:
+
+	}

WARNING:TYPO_SPELLING: 'boundry' may be misspelled - perhaps 'boundary'?
#379: FILE: arch/microblaze/lib/memmove.c:161:
+	/* simple fast copy, ... unless a cache boundry is crossed */
 	                                        ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#382: FILE: arch/microblaze/lib/memmove.c:164:
+		*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#384: FILE: arch/microblaze/lib/memmove.c:166:
+		*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#386: FILE: arch/microblaze/lib/memmove.c:168:
+		*(--(char *) d) = *(--(char *) s);

CHECK:SPACING: No space is necessary after a cast
#388: FILE: arch/microblaze/lib/memmove.c:170:
+		*(--(char *) d) = *(--(char *) s);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#399: FILE: arch/microblaze/lib/memset.c:1:
+/* Filename: memset.c

WARNING:TYPO_SPELLING: 'unsuccesfully' may be misspelled - perhaps 'unsuccessfully'?
#407: FILE: arch/microblaze/lib/memset.c:9:
+ * Attempts were made, unsuccesfully, to contact the original
                        ^^^^^^^^^^^^^

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/string.h> instead of <asm/string.h>
#442: FILE: arch/microblaze/lib/memset.c:44:
+#include <asm/string.h>

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#450: FILE: arch/microblaze/lib/memset.c:52:
+	w32 = c = (c & 0xFF);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:TYPO_SPELLING: 'independant' may be misspelled - perhaps 'independent'?
#459: FILE: arch/microblaze/lib/memset.c:61:
+		/* This is done in an endian independant manner. */
 		                             ^^^^^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#460: FILE: arch/microblaze/lib/memset.c:62:
+		switch ((unsigned) s & 3) {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#460: FILE: arch/microblaze/lib/memset.c:62:
+		switch ((unsigned) s & 3) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#461: FILE: arch/microblaze/lib/memset.c:63:
+		case 1: *(char *)s = c; s = (char *)s+1; n--;
 		                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#461: FILE: arch/microblaze/lib/memset.c:63:
+		case 1: *(char *)s = c; s = (char *)s+1; n--;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#462: FILE: arch/microblaze/lib/memset.c:64:
+		case 2: *(char *)s = c; s = (char *)s+1; n--;
 		                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#462: FILE: arch/microblaze/lib/memset.c:64:
+		case 2: *(char *)s = c; s = (char *)s+1; n--;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#463: FILE: arch/microblaze/lib/memset.c:65:
+		case 3: *(char *)s = c; s = (char *)s+1; n--;
 		                                     ^

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#463: FILE: arch/microblaze/lib/memset.c:65:
+		case 3: *(char *)s = c; s = (char *)s+1; n--;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#468: FILE: arch/microblaze/lib/memset.c:70:
+			*(unsigned *)s = w32;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#469: FILE: arch/microblaze/lib/memset.c:71:
+			s = (unsigned *)s + 1;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#472: FILE: arch/microblaze/lib/memset.c:74:
+
+	}

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#477: FILE: arch/microblaze/lib/memset.c:79:
+		s = (char *)s+1;
 		             ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 51 warnings, 51 checks, 416 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000331285.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
