WARNING:TYPO_SPELLING: 'refering' may be misspelled - perhaps 'referring'?
#30: 
snet is using the term 'ticket' for refering to a structure which keeps
                                    ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#31: 
informations about verdict, coming from userspace.
^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#33: 
generic informations:
        ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#39: 
protocol-dependant informations : (so some infos may not be used)
                   ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'informations' may be misspelled - perhaps 'information'?
#56: 
   attached to the task_struct, with the filled informations, and a
                                                ^^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#58: 
   then before asking userspace, kernel mecanism is checking existing
                                        ^^^^^^^^

WARNING:TYPO_SPELLING: 'mecanism' may be misspelled - perhaps 'mechanism'?
#64: 
   this is the same mecanism as 1, but every time a ticket is matched
                    ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#81: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#86: FILE: security/snet/snet_ticket.c:1:
+#include <linux/slab.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#106: FILE: security/snet/snet_ticket.c:21:
+	tsec = (struct snet_task_security*) current_security();

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#106: FILE: security/snet/snet_ticket.c:21:
+	tsec = (struct snet_task_security*) current_security();

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#131: FILE: security/snet/snet_ticket.c:46:
+	struct snet_ticket *st = (struct snet_ticket*)arg;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'snet_ticket_timeout', this function's name, in a string
#133: FILE: security/snet/snet_ticket.c:48:
+	pr_debug("snet_ticket_timeout: ticket=%p tsec=%p\n", st, st->tsec);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:RETURN_VOID: void function return statements are not generally useful
#140: FILE: security/snet/snet_ticket.c:55:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*st)...) over kzalloc(sizeof(struct snet_ticket)...)
#146: FILE: security/snet/snet_ticket.c:61:
+	st = kzalloc(sizeof(struct snet_ticket), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st"
#147: FILE: security/snet/snet_ticket.c:62:
+	if (st == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around st->tsec->hash[h]
#163: FILE: security/snet/snet_ticket.c:78:
+	l = &(st->tsec->hash[h]);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around st->tsec->lock
#168: FILE: security/snet/snet_ticket.c:83:
+	write_lock_bh(&(st->tsec->lock));

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around st->tsec->lock
#170: FILE: security/snet/snet_ticket.c:85:
+	write_unlock_bh(&(st->tsec->lock));

WARNING:RETURN_VOID: void function return statements are not generally useful
#172: FILE: security/snet/snet_ticket.c:87:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#182: FILE: security/snet/snet_ticket.c:97:
+	tsec = (struct snet_task_security*) current_security();

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#182: FILE: security/snet/snet_ticket.c:97:
+	tsec = (struct snet_task_security*) current_security();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!st"
#185: FILE: security/snet/snet_ticket.c:100:
+	if (st == NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct snet_task_security)...)
#201: FILE: security/snet/snet_ticket.c:116:
+	tsec = kzalloc(sizeof(struct snet_task_security), gfp);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsec"
#202: FILE: security/snet/snet_ticket.c:117:
+	if (tsec == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#225: FILE: security/snet/snet_ticket.c:140:
+		struct snet_ticket *st, *tmp;
+		list_for_each_entry_safe(st, tmp, &tsec->hash[index], list) {

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:RETURN_VOID: void function return statements are not generally useful
#238: FILE: security/snet/snet_ticket.c:153:
+	return;
+}

CHECK:SPACING: No space is necessary after a cast
#243: FILE: security/snet/snet_ticket.c:158:
+	struct cred *cred = (struct cred *) current->real_cred;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*tsec)...) over kzalloc(sizeof(struct snet_task_security)...)
#246: FILE: security/snet/snet_ticket.c:161:
+	tsec = kzalloc(sizeof(struct snet_task_security), GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tsec"
#247: FILE: security/snet/snet_ticket.c:162:
+	if (tsec == NULL)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#263: FILE: security/snet/snet_ticket.h:1:
+#ifndef _SNET_TICKET_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#306: FILE: security/snet/snet_ticket_helper.c:1:
+#include <linux/sched.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->src.u3.ip == info->src.u3.ip'
#321: FILE: security/snet/snet_ticket_helper.c:16:
+		if ((st->src.u3.ip == info->src.u3.ip) &&
+		    (st->src.u.port == info->src.u.port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->src.u.port == info->src.u.port'
#321: FILE: security/snet/snet_ticket_helper.c:16:
+		if ((st->src.u3.ip == info->src.u3.ip) &&
+		    (st->src.u.port == info->src.u.port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->src.u.port == info->src.u.port'
#326: FILE: security/snet/snet_ticket_helper.c:21:
+		if ((!memcmp(&st->src.u3.ip6, &info->src.u3.ip6,
+			     sizeof(info->src.u3.ip6))) &&
+		    (st->src.u.port == info->src.u.port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->dst.u3.ip == info->dst.u3.ip'
#341: FILE: security/snet/snet_ticket_helper.c:36:
+		if ((st->dst.u3.ip == info->dst.u3.ip) &&
+		    (st->dst.u.port == info->dst.u.port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->dst.u.port == info->dst.u.port'
#341: FILE: security/snet/snet_ticket_helper.c:36:
+		if ((st->dst.u3.ip == info->dst.u3.ip) &&
+		    (st->dst.u.port == info->dst.u.port))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->dst.u.port == info->dst.u.port'
#346: FILE: security/snet/snet_ticket_helper.c:41:
+		if ((!memcmp(&st->dst.u3.ip6, &info->dst.u3.ip6,
+			     sizeof(info->dst.u3.ip6))) &&
+		    (st->dst.u.port == info->dst.u.port))

CHECK:BRACES: braces {} should be used on all arms of this statement
#382: FILE: security/snet/snet_ticket_helper.c:77:
+	if (info->syscall >= SNET_NR_SOCKET_TYPES)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#384: FILE: security/snet/snet_ticket_helper.c:79:
+		return 0;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#384: FILE: security/snet/snet_ticket_helper.c:79:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->syscall == info->syscall'
#385: FILE: security/snet/snet_ticket_helper.c:80:
+		if ((st->syscall == info->syscall) &&
+		    (st->protocol == info->protocol) &&
+		    (st->family == info->family) &&
+		    ticket_df[info->syscall](st, info))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->protocol == info->protocol'
#385: FILE: security/snet/snet_ticket_helper.c:80:
+		if ((st->syscall == info->syscall) &&
+		    (st->protocol == info->protocol) &&
+		    (st->family == info->family) &&
+		    ticket_df[info->syscall](st, info))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'st->family == info->family'
#385: FILE: security/snet/snet_ticket_helper.c:80:
+		if ((st->syscall == info->syscall) &&
+		    (st->protocol == info->protocol) &&
+		    (st->family == info->family) &&
+		    ticket_df[info->syscall](st, info))

WARNING:SPLIT_STRING: quoted string split across lines
#410: FILE: security/snet/snet_ticket_helper.c:105:
+		pr_debug("ticket=%p [syscall=%s protocol=%u "
+			 "family=%u %pI4:%u->%pI4:%u] verdict=%s | tsec=%p pid=%u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#422: FILE: security/snet/snet_ticket_helper.c:117:
+		pr_debug("ticket=%p [syscall=%s protocol=%u "
+			 "family=%u %pI6:%u->%pI6:%u] verdict=%s | tsec=%p pid=%u\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#432: FILE: security/snet/snet_ticket_helper.c:127:
+	return;
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#439: FILE: security/snet/snet_ticket_helper.h:1:
+#ifndef _SNET_TICKET_HELPER_H

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005328.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 21 warnings, 24 checks, 343 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000005328.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
