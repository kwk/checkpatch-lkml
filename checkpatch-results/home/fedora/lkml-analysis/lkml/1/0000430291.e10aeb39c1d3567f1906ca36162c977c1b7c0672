WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#26: 
Targeted reclaim allows to target a single slab for reclaim. This is done by

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#123: FILE: include/linux/slab.h:49:
+^I * ^I^INo reference was obtained.$

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#125: FILE: include/linux/slab.h:51:
+	int (*get)(struct kmem_cache *, void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#125: FILE: include/linux/slab.h:51:
+	int (*get)(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#132: FILE: include/linux/slab.h:58:
+	void (*put)(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#132: FILE: include/linux/slab.h:58:
+	void (*put)(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#141: FILE: include/linux/slab.h:67:
+	int (*kick)(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#141: FILE: include/linux/slab.h:67:
+	int (*kick)(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#156: FILE: include/linux/slab.h:89:
+int kmem_cache_vacate(struct page *);

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#195: FILE: mm/slub.c:1074:
+	__SetPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SetSlabDebug>
#198: FILE: mm/slub.c:1077:
+		SetSlabDebug(page);

ERROR:CODE_INDENT: code indent should use tabs where possible
#201: FILE: mm/slub.c:1080:
+ ^Iif (flags & __GFP_WAIT)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#201: FILE: mm/slub.c:1080:
+ ^Iif (flags & __GFP_WAIT)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#201: FILE: mm/slub.c:1080:
+ ^Iif (flags & __GFP_WAIT)$

ERROR:CODE_INDENT: code indent should use tabs where possible
#202: FILE: mm/slub.c:1081:
+ ^I^Ilocal_irq_disable();$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#202: FILE: mm/slub.c:1081:
+ ^I^Ilocal_irq_disable();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#202: FILE: mm/slub.c:1081:
+ ^I^Ilocal_irq_disable();$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#254: FILE: mm/slub.c:2378:
+static int __kmem_cache_vacate(struct kmem_cache *s,
+		struct page *page, unsigned long flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: mm/slub.c:2423:
+					if (test_bit(slab_index(p, s, addr),
+								map))

CHECK:CAMELCASE: Avoid CamelCase: <SetSlabFrozen>
#363: FILE: mm/slub.c:2487:
+	SetSlabFrozen(page);

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#367: FILE: mm/slub.c:2491:
+ * Attempt to free objects in a page. Return 1 if succesful.
                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:CAMELCASE: Avoid CamelCase: <SlabFrozen>
#399: FILE: mm/slub.c:2523:
+	if (!PageSlab(page) || SlabFrozen(page) || !page->inuse)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#419: FILE: mm/slub.c:2543:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430291.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 7 checks, 424 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000430291.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
