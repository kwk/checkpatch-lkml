WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
I plan to submit my vmap rewrite to -mm. Although I am not planning to submit

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#207: FILE: mm/vmalloc.c:27:
+#include <asm/atomic.h>

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#300: FILE: mm/vmalloc.c:115:
+static int vmap_pmd_range(pud_t *pud, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page **pages, int *nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#318: FILE: mm/vmalloc.c:132:
+static int vmap_pud_range(pgd_t *pgd, unsigned long addr,
+		unsigned long end, pgprot_t prot, struct page **pages, int *nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: mm/vmalloc.c:149:
+static int vmap_page_range(unsigned long addr, unsigned long end,
+				pgprot_t prot, struct page **pages)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#393: FILE: mm/vmalloc.c:205:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#452: FILE: mm/vmalloc.c:262:
+			BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#460: FILE: mm/vmalloc.c:270:
+	if (tmp) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#462: FILE: mm/vmalloc.c:272:
+		struct vmap_area *prev;
+		prev = rb_entry(tmp, struct vmap_area, rb_node);

CHECK:BRACES: Unbalanced braces around else statement
#464: FILE: mm/vmalloc.c:274:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#471: FILE: mm/vmalloc.c:281:
+static struct vmap_area *alloc_vmap_area(unsigned long size, unsigned long align,
+				unsigned long vstart, unsigned long vend,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#479: FILE: mm/vmalloc.c:289:
+	BUG_ON(size & ~PAGE_MASK);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*va)...) over kmalloc_node(sizeof(struct vmap_area)...)
#483: FILE: mm/vmalloc.c:293:
+	va = kmalloc_node(sizeof(struct vmap_area),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#484: FILE: mm/vmalloc.c:294:
+	va = kmalloc_node(sizeof(struct vmap_area),
+			gfp_mask & GFP_RECLAIM_MASK, node);

WARNING:LINE_SPACING: Missing a blank line after declarations
#497: FILE: mm/vmalloc.c:307:
+			struct vmap_area *tmp;
+			tmp = rb_entry(n, struct vmap_area, rb_node);

WARNING:PRINTK_RATELIMITED: Prefer printk_ratelimited or pr_<level>_ratelimited to printk_ratelimit
#537: FILE: mm/vmalloc.c:347:
+		if (printk_ratelimit())

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#538: FILE: mm/vmalloc.c:348:
+			printk(KERN_WARNING "vmap allocation failed: "

WARNING:SPLIT_STRING: quoted string split across lines
#539: FILE: mm/vmalloc.c:349:
+			printk(KERN_WARNING "vmap allocation failed: "
+				 "use vmalloc=<size> to increase size.\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#543: FILE: mm/vmalloc.c:353:
+	BUG_ON(addr & (align-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#543: FILE: mm/vmalloc.c:353:
+	BUG_ON(addr & (align-1));
 	                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#563: FILE: mm/vmalloc.c:373:
+	BUG_ON(RB_EMPTY_NODE(&va->rb_node));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#583: FILE: mm/vmalloc.c:393:
+#define LAZY_MAX (64*1024*1024 / PAGE_SIZE)
                     ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#583: FILE: mm/vmalloc.c:393:
+#define LAZY_MAX (64*1024*1024 / PAGE_SIZE)
                          ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: mm/vmalloc.c:397:
+static void __purge_vmap_area_lazy(unsigned long *start, unsigned long *end,
+					int sync, int force_flush)

CHECK:BRACES: braces {} should be used on all arms of this statement
#594: FILE: mm/vmalloc.c:404:
+	if (!sync && !force_flush) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#597: FILE: mm/vmalloc.c:407:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#617: FILE: mm/vmalloc.c:427:
+		BUG_ON(nr > atomic_read(&vmap_lazy_nr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#664: FILE: mm/vmalloc.c:474:
+	BUG_ON(!va);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#668: FILE: mm/vmalloc.c:478:
+
+

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#675: FILE: mm/vmalloc.c:485:
+#if 0 /* constant vmalloc space size */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#676: FILE: mm/vmalloc.c:486:
+#define VMALLOC_SPACE		(VMALLOC_END-VMALLOC_START)
                      		            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#679: FILE: mm/vmalloc.c:489:
+#define VMALLOC_SPACE		(128*1024*1024)
                      		    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#679: FILE: mm/vmalloc.c:489:
+#define VMALLOC_SPACE		(128*1024*1024)
                      		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#681: FILE: mm/vmalloc.c:491:
+#define VMALLOC_SPACE		(128*1024*1024*1024)
                      		    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#681: FILE: mm/vmalloc.c:491:
+#define VMALLOC_SPACE		(128*1024*1024*1024)
                      		         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#681: FILE: mm/vmalloc.c:491:
+#define VMALLOC_SPACE		(128*1024*1024*1024)
                      		              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#688: FILE: mm/vmalloc.c:498:
+#define VMAP_BBMAP_BITS_MIN	(VMAP_MAX_ALLOC*2)
                            	               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#689: FILE: mm/vmalloc.c:499:
+#define VMAP_MIN(x, y)		((x) < (y) ? (x) : (y)) /* can't use min() */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#689: FILE: mm/vmalloc.c:499:
+#define VMAP_MIN(x, y)		((x) < (y) ? (x) : (y)) /* can't use min() */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#690: FILE: mm/vmalloc.c:500:
+#define VMAP_MAX(x, y)		((x) > (y) ? (x) : (y)) /* can't use max() */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'y' - possible side-effects?
#690: FILE: mm/vmalloc.c:500:
+#define VMAP_MAX(x, y)		((x) > (y) ? (x) : (y)) /* can't use max() */

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#691: FILE: mm/vmalloc.c:501:
+#define VMAP_BBMAP_BITS		VMAP_MIN(VMAP_BBMAP_BITS_MAX, VMAP_MAX(VMAP_BBMAP_BITS_MIN, VMALLOC_PAGES / NR_CPUS / 16))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#696: FILE: mm/vmalloc.c:506:
+	spinlock_t lock;

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#703: FILE: mm/vmalloc.c:513:
+	spinlock_t lock;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#726: FILE: mm/vmalloc.c:536:
+	addr -= VMALLOC_START & ~(VMAP_BLOCK_SIZE-1);
 	                                         ^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc_node(sizeof(*vb)...) over kmalloc_node(sizeof(struct vmap_block)...)
#740: FILE: mm/vmalloc.c:550:
+	vb = kmalloc_node(sizeof(struct vmap_block),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#741: FILE: mm/vmalloc.c:551:
+	vb = kmalloc_node(sizeof(struct vmap_block),
+			gfp_mask & GFP_RECLAIM_MASK, node);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#746: FILE: mm/vmalloc.c:556:
+	va = alloc_vmap_area(VMAP_BLOCK_SIZE, VMAP_BLOCK_SIZE,
+					VMALLOC_START, VMALLOC_END,

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#748: FILE: mm/vmalloc.c:558:
+	if (unlikely(IS_ERR(va))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#772: FILE: mm/vmalloc.c:582:
+	BUG_ON(err);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#806: FILE: mm/vmalloc.c:616:
+	BUG_ON(tmp != vb);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#813: FILE: mm/vmalloc.c:623:
+static void *vb_alloc(unsigned long size,
+			gfp_t gfp_mask)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#820: FILE: mm/vmalloc.c:630:
+	BUG_ON(size & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#821: FILE: mm/vmalloc.c:631:
+	BUG_ON(size > PAGE_SIZE*VMAP_MAX_ALLOC);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#821: FILE: mm/vmalloc.c:631:
+	BUG_ON(size > PAGE_SIZE*VMAP_MAX_ALLOC);
 	                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#835: FILE: mm/vmalloc.c:645:
+			BUG_ON(addr_to_vb_idx(addr) != addr_to_vb_idx(vb->va->va_start));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#866: FILE: mm/vmalloc.c:676:
+	BUG_ON(size & ~PAGE_MASK);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#867: FILE: mm/vmalloc.c:677:
+	BUG_ON(size > PAGE_SIZE*VMAP_MAX_ALLOC);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#867: FILE: mm/vmalloc.c:677:
+	BUG_ON(size > PAGE_SIZE*VMAP_MAX_ALLOC);
 	                       ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#875: FILE: mm/vmalloc.c:685:
+	BUG_ON(!vb);

CHECK:BRACES: braces {} should be used on all arms of this statement
#885: FILE: mm/vmalloc.c:695:
+	if (vb->dirty == VMAP_BBMAP_BITS) {
[...]
+	} else
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#886: FILE: mm/vmalloc.c:696:
+		BUG_ON(vb->free || !list_empty(&vb->free_list));

CHECK:BRACES: Unbalanced braces around else statement
#889: FILE: mm/vmalloc.c:699:
+	} else

ERROR:SPACING: space required before the open brace '{'
#910: FILE: mm/vmalloc.c:720:
+			  i = find_next_bit(vb->dirty_map, VMAP_BBMAP_BITS, i)){

WARNING:LINE_SPACING: Missing a blank line after declarations
#913: FILE: mm/vmalloc.c:723:
+				int j;
+				j = find_next_zero_bit(vb->dirty_map,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: mm/vmalloc.c:724:
+				j = find_next_zero_bit(vb->dirty_map,
+					VMAP_BBMAP_BITS, i);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#941: FILE: mm/vmalloc.c:751:
+	BUG_ON(!addr || addr < VMALLOC_START || addr > VMALLOC_END || (addr & (PAGE_SIZE-1)));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#941: FILE: mm/vmalloc.c:751:
+	BUG_ON(!addr || addr < VMALLOC_START || addr > VMALLOC_END || (addr & (PAGE_SIZE-1)));
 	                                                                                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#964: FILE: mm/vmalloc.c:774:
+		struct vmap_area *va;
+		va = alloc_vmap_area(size, PAGE_SIZE, VMALLOC_START, VMALLOC_END, node, GFP_KERNEL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#996: FILE: mm/vmalloc.c:806:
+	unsigned long end = addr + size;
+	vunmap_page_range(addr, end);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1004: FILE: mm/vmalloc.c:814:
+	int err;
+	err = vmap_page_range(addr, addr + area->size- PAGE_SIZE, prot, *pages);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxW)
#1004: FILE: mm/vmalloc.c:814:
+	err = vmap_page_range(addr, addr + area->size- PAGE_SIZE, prot, *pages);
 	                                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1019: FILE: mm/vmalloc.c:829:
+static struct vm_struct *__get_vm_area_node(unsigned long size,
+		unsigned long flags, unsigned long start, unsigned long end,

WARNING:LINE_SPACING: Missing a blank line after declarations
#1169: FILE: mm/vmalloc.c:954:
+		struct vm_struct *tmp, **p;
+		free_unmap_vmap_area(va);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1279: FILE: include/linux/vmalloc.h:39:
+extern void vm_unmap_ram(const void *mem, unsigned int count);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1280: FILE: include/linux/vmalloc.h:40:
+extern void *vm_map_ram(struct page **pages, unsigned int count,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1281: FILE: include/linux/vmalloc.h:41:
+extern void *vm_map_ram(struct page **pages, unsigned int count,
+				int node, pgprot_t prot);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1282: FILE: include/linux/vmalloc.h:42:
+extern void vm_unmap_aliases(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1295: FILE: init/main.c:92:
+extern void vmalloc_init(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 32 warnings, 46 checks, 1108 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248834.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
