WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git core/rcu-for-linus

ERROR:TRAILING_WHITESPACE: trailing whitespace
#240: FILE: Documentation/RCU/RTFP.txt:714:
+^I6. RCU is a Way of Waiting for Things to Finish $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'affinitied' may be misspelled - perhaps 'affinities'?
#489: FILE: Documentation/RCU/torture.txt:53:
+		The number of seconds to keep the test threads affinitied
 		                                               ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#620: FILE: crypto/async_tx/async_tx.c:23:
  * 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1125: FILE: include/linux/rcuclassic.h:154:
+#define call_rcu_sched(head, func) call_rcu(head, func)

Usage of a deprecated RCU API is detected.  It is recommended to replace
old flavourful RCU APIs by their new vanilla-RCU counterparts.

The full list of available RCU APIs can be viewed from the kernel docs.

See: https://www.kernel.org/doc/html/latest/RCU/whatisRCU.html#full-list-of-rcu-apis

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1155: FILE: include/linux/rculist.h:19:
+static inline void __list_add_rcu(struct list_head *new,
+		struct list_head *prev, struct list_head *next)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1201: FILE: include/linux/rculist.h:65:
+static inline void list_add_tail_rcu(struct list_head *new,
+					struct list_head *head)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1245: FILE: include/linux/rculist.h:109:
+static inline void list_replace_rcu(struct list_head *old,
+				struct list_head *new)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1318: FILE: include/linux/rculist.h:182:
+#define list_for_each_rcu(pos, head) \
+	for (pos = rcu_dereference((head)->next); \
+		prefetch(pos->next), pos != (head); \
+		pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1318: FILE: include/linux/rculist.h:182:
+#define list_for_each_rcu(pos, head) \
+	for (pos = rcu_dereference((head)->next); \
+		prefetch(pos->next), pos != (head); \
+		pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1323: FILE: include/linux/rculist.h:187:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = rcu_dereference((head)->next); \
+		pos != (head); \
+		pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1323: FILE: include/linux/rculist.h:187:
+#define __list_for_each_rcu(pos, head) \
+	for (pos = rcu_dereference((head)->next); \
+		pos != (head); \
+		pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1338: FILE: include/linux/rculist.h:202:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry(rcu_dereference((head)->next), typeof(*pos), member); \
+		prefetch(pos->member.next), &pos->member != (head); \
+		pos = list_entry(rcu_dereference(pos->member.next), typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'head' - possible side-effects?
#1338: FILE: include/linux/rculist.h:202:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry(rcu_dereference((head)->next), typeof(*pos), member); \
+		prefetch(pos->member.next), &pos->member != (head); \
+		pos = list_entry(rcu_dereference(pos->member.next), typeof(*pos), member))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'member' - possible side-effects?
#1338: FILE: include/linux/rculist.h:202:
+#define list_for_each_entry_rcu(pos, head, member) \
+	for (pos = list_entry(rcu_dereference((head)->next), typeof(*pos), member); \
+		prefetch(pos->member.next), &pos->member != (head); \
+		pos = list_entry(rcu_dereference(pos->member.next), typeof(*pos), member))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1343: FILE: include/linux/rculist.h:207:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1355: FILE: include/linux/rculist.h:219:
+#define list_for_each_continue_rcu(pos, head) \
+	for ((pos) = rcu_dereference((pos)->next); \
+		prefetch((pos)->next), (pos) != (head); \
+		(pos) = rcu_dereference((pos)->next))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1393: FILE: include/linux/rculist.h:257:
+static inline void hlist_replace_rcu(struct hlist_node *old,
+					struct hlist_node *new)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1425: FILE: include/linux/rculist.h:289:
+static inline void hlist_add_head_rcu(struct hlist_node *n,
+					struct hlist_head *h)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around n->pprev
#1459: FILE: include/linux/rculist.h:323:
+	rcu_assign_pointer(*(n->pprev), n);

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'tpos' - possible side-effects?
#1502: FILE: include/linux/rculist.h:366:
+#define hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
+	for (pos = rcu_dereference((head)->first);			 \
+		pos && ({ prefetch(pos->next); 1; }) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); \
+		pos = rcu_dereference(pos->next))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'pos' - possible side-effects?
#1502: FILE: include/linux/rculist.h:366:
+#define hlist_for_each_entry_rcu(tpos, pos, head, member)		 \
+	for (pos = rcu_dereference((head)->first);			 \
+		pos && ({ prefetch(pos->next); 1; }) &&			 \
+		({ tpos = hlist_entry(pos, typeof(*tpos), member); 1; }); \
+		pos = rcu_dereference(pos->next))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1534: FILE: include/linux/rcupdate.h:179:
+extern void wakeme_after_rcu(struct rcu_head  *head);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1557: FILE: include/linux/rcupdate.h:249:
+extern void rcu_barrier_bh(void);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_bh', prefer 'rcu_barrier' instead
#1557: FILE: include/linux/rcupdate.h:249:
+extern void rcu_barrier_bh(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1558: FILE: include/linux/rcupdate.h:250:
+extern void rcu_barrier_sched(void);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#1558: FILE: include/linux/rcupdate.h:250:
+extern void rcu_barrier_sched(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1601: FILE: include/linux/rcupreempt.h:73:
+extern void call_rcu_sched(struct rcu_head *head,

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1601: FILE: include/linux/rcupreempt.h:73:
+extern void call_rcu_sched(struct rcu_head *head,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1611: FILE: include/linux/rcupreempt.h:87:
+extern void rcu_init_sched(void);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1684: FILE: kernel/rcuclassic.c:523:
 				hardirq_count() <= (1 << HARDIRQ_SHIFT))) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1705: FILE: kernel/rcuclassic.c:543:
+	} else if (!in_softirq()) {
+

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_bh', prefer 'call_rcu' instead
#1790: FILE: kernel/rcupdate.c:103:
+		call_rcu_bh(head, rcu_barrier_callback);

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#1793: FILE: kernel/rcupdate.c:106:
+		call_rcu_sched(head, rcu_barrier_callback);

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_bh', prefer 'rcu_barrier' instead
#1832: FILE: kernel/rcupdate.c:149:
+void rcu_barrier_bh(void)

WARNING:DEPRECATED_API: Deprecated use of 'rcu_barrier_sched', prefer 'rcu_barrier' instead
#1841: FILE: kernel/rcupdate.c:158:
+void rcu_barrier_sched(void)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'curr == snap'
#2134: FILE: kernel/rcupreempt.c:667:
+	if ((curr == snap) && ((curr & 0x1) == 0))

ERROR:CODE_INDENT: code indent should use tabs where possible
#2215: FILE: kernel/rcupreempt.c:940:
+^I     ^Ircu_qsctr_inc(cpu);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2215: FILE: kernel/rcupreempt.c:940:
+^I     ^Ircu_qsctr_inc(cpu);$

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#2295: FILE: kernel/rcupreempt.c:1135:
+void call_rcu_sched(struct rcu_head *head, void (*func)(struct rcu_head *rcu))

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2309: FILE: kernel/rcupreempt.c:1149:
+	if (rdp->rcu_sched_sleeping) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2317: FILE: kernel/rcupreempt.c:1157:
+	if (wake_gp) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2406: FILE: kernel/rcupreempt.c:1237:
+		for_each_online_cpu(cpu) {
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#2422: FILE: kernel/rcupreempt.c:1253:
+			if (rdp->waitschedlist != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#2431: FILE: kernel/rcupreempt.c:1262:
+			if (rdp->nextschedlist != NULL) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#2459: FILE: kernel/rcupreempt.c:1290:
+		if (rcu_ctrlblk.sched_sleep != rcu_sched_sleep_prep) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2475: FILE: kernel/rcupreempt.c:1306:
+		__wait_event_interruptible(rcu_ctrlblk.sched_wq,
+			rcu_ctrlblk.sched_sleep != rcu_sched_sleeping,

ERROR:RETURN_PARENTHESES: return is not a function, parentheses are not required
#2488: FILE: kernel/rcupreempt.c:1319:
+	return (0);

return is not a function and as such doesn't need parentheses::

  return (bar);

can simply be::

  return bar;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#2499: FILE: kernel/rcupreempt.c:1337:
+		rdp->nextlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#2500: FILE: kernel/rcupreempt.c:1338:
+		rdp->nextschedlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#2501: FILE: kernel/rcupreempt.c:1339:
+		rdp->waitschedlist != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextlist"
#2510: FILE: kernel/rcupreempt.c:1350:
+	    rdp->nextlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->nextschedlist"
#2511: FILE: kernel/rcupreempt.c:1351:
+	    rdp->nextschedlist != NULL ||

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "rdp->waitschedlist"
#2512: FILE: kernel/rcupreempt.c:1352:
+	    rdp->waitschedlist != NULL)

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2597: FILE: kernel/rcutorture.c:127:
+static long n_rcu_torture_timers = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#2600: FILE: kernel/rcutorture.c:130:
+static int stutter_pause_test = 0;

WARNING:DEPRECATED_API: Deprecated use of 'call_rcu_sched', prefer 'call_rcu' instead
#2693: FILE: kernel/rcutorture.c:525:
+	call_rcu_sched(&p->rtort_rcu, rcu_torture_cb);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2766: FILE: kernel/rcutorture.c:650:
+	if (p == NULL) {

WARNING:SPLIT_STRING: quoted string split across lines
#2834: FILE: kernel/rcutorture.c:767:
 		       "rtc: %p ver: %ld tfle: %d rta: %d rtaf: %d rtf: %d "
+		       "rtmbe: %d nt: %ld",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stutter', this function's name, in a string
#2864: FILE: kernel/rcutorture.c:913:
+	VERBOSE_PRINTK_STRING("rcu_torture_stutter task started");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'rcu_torture_stutter', this function's name, in a string
#2872: FILE: kernel/rcutorture.c:921:
+	VERBOSE_PRINTK_STRING("rcu_torture_stutter task stopping");

WARNING:SPLIT_STRING: quoted string split across lines
#2883: FILE: kernel/rcutorture.c:931:
 		"stat_interval=%d verbose=%d test_no_idle_hz=%d "
+		"shuffle_interval=%d stutter=%d irqreader=%d\n",

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cur_ops->cb_barrier"
#2909: FILE: kernel/rcutorture.c:995:
+	if (cur_ops->cb_barrier != NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2932: FILE: kernel/rcutorture.c:1141:
+		stutter_task = kthread_run(rcu_torture_stutter, NULL,
+					  "rcu_torture_stutter");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 17 warnings, 41 checks, 2746 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000255019.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
