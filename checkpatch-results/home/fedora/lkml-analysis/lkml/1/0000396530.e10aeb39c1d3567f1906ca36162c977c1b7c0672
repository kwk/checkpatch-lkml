WARNING:TYPO_SPELLING: 'enought' may be misspelled - perhaps 'enough'?
#30: 
multiple context and/or are plenty enought that the percpu_counter overhead
                                   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#83: FILE: include/linux/proportions.h:83:
+void prop_fraction_percpu(struct prop_global *pg, struct prop_local_percpu *pl,
+		long *numerator, long *denominator);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#121: FILE: include/linux/proportions.h:121:
+void prop_fraction_single(struct prop_global *pg, struct prop_local_single *pl,
 		long *numerator, long *denominator);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#131: FILE: include/linux/proportions.h:131:
+extern int __bad_prop_local(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_local' - possible side-effects?
#133: FILE: include/linux/proportions.h:133:
+#define prop_local_init(prop_local)					\
+({	int err;							\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		err = prop_local_init_percpu(				\
+			(struct prop_local_percpu *)(prop_local));	\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		err = prop_local_init_single(				\
+			(struct prop_local_single *)(prop_local));	\
+	else __bad_prop_local();					\
+	err;								\
+})

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#141: FILE: include/linux/proportions.h:141:
+	else __bad_prop_local();					\

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_local' - possible side-effects?
#145: FILE: include/linux/proportions.h:145:
+#define prop_local_destroy(prop_local)					\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		prop_local_destroy_percpu(				\
+			(struct prop_local_percpu *)(prop_local));	\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		prop_local_destroy_single(				\
+			(struct prop_local_single *)(prop_local));	\
+	else __bad_prop_local();					\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#153: FILE: include/linux/proportions.h:153:
+	else __bad_prop_local();					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_global' - possible side-effects?
#156: FILE: include/linux/proportions.h:156:
+#define __prop_inc(prop_global, prop_local)				\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		__prop_inc_percpu(prop_global,				\
+			(struct prop_local_percpu *)(prop_local)); 	\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		__prop_inc_single(prop_global,				\
+			(struct prop_local_single *)(prop_local)); 	\
+	else __bad_prop_local();					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_local' - possible side-effects?
#156: FILE: include/linux/proportions.h:156:
+#define __prop_inc(prop_global, prop_local)				\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		__prop_inc_percpu(prop_global,				\
+			(struct prop_local_percpu *)(prop_local)); 	\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		__prop_inc_single(prop_global,				\
+			(struct prop_local_single *)(prop_local)); 	\
+	else __bad_prop_local();					\
+} while (0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#160: FILE: include/linux/proportions.h:160:
+^I^I^I(struct prop_local_percpu *)(prop_local)); ^I\$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#163: FILE: include/linux/proportions.h:163:
+^I^I^I(struct prop_local_single *)(prop_local)); ^I\$

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#164: FILE: include/linux/proportions.h:164:
+	else __bad_prop_local();					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_global' - possible side-effects?
#167: FILE: include/linux/proportions.h:167:
+#define prop_fraction(prop_global, prop_local, num, denom)		\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		prop_fraction_percpu(prop_global,			\
+			(struct prop_local_percpu *)(prop_local),	\
+			num, denom);					\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		prop_fraction_single(prop_global,			\
+			(struct prop_local_single *)(prop_local),	\
+			num, denom);					\
+	else __bad_prop_local();					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_local' - possible side-effects?
#167: FILE: include/linux/proportions.h:167:
+#define prop_fraction(prop_global, prop_local, num, denom)		\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		prop_fraction_percpu(prop_global,			\
+			(struct prop_local_percpu *)(prop_local),	\
+			num, denom);					\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		prop_fraction_single(prop_global,			\
+			(struct prop_local_single *)(prop_local),	\
+			num, denom);					\
+	else __bad_prop_local();					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'num' - possible side-effects?
#167: FILE: include/linux/proportions.h:167:
+#define prop_fraction(prop_global, prop_local, num, denom)		\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		prop_fraction_percpu(prop_global,			\
+			(struct prop_local_percpu *)(prop_local),	\
+			num, denom);					\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		prop_fraction_single(prop_global,			\
+			(struct prop_local_single *)(prop_local),	\
+			num, denom);					\
+	else __bad_prop_local();					\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'denom' - possible side-effects?
#167: FILE: include/linux/proportions.h:167:
+#define prop_fraction(prop_global, prop_local, num, denom)		\
+do {									\
+	if (TYPE_EQUAL(*(prop_local), struct prop_local_percpu))	\
+		prop_fraction_percpu(prop_global,			\
+			(struct prop_local_percpu *)(prop_local),	\
+			num, denom);					\
+	else if (TYPE_EQUAL(*(prop_local), struct prop_local_single))	\
+		prop_fraction_single(prop_global,			\
+			(struct prop_local_single *)(prop_local),	\
+			num, denom);					\
+	else __bad_prop_local();					\
+} while (0)

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#177: FILE: include/linux/proportions.h:177:
+	else __bad_prop_local();					\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'prop_local' - possible side-effects?
#211: FILE: lib/proportions.c:177:
+#define prop_adjust_shift(prop_local, pg_shift)			\
+	__prop_adjust_shift(&(prop_local)->shift,		\
+			    &(prop_local)->period, pg_shift)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#248: FILE: lib/proportions.c:259:
+void prop_fraction_percpu(struct prop_global *pg, struct prop_local_percpu *pl,
 		long *numerator, long *denominator)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: lib/proportions.c:354:
+void prop_fraction_single(struct prop_global *pg, struct prop_local_single *pl,
+		long *numerator, long *denominator)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000396530.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 3 warnings, 14 checks, 304 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000396530.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
