CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#63: FILE: fs/unionfs/union.h:187:
+extern void unionfs_destroy_filldir_cache(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#64: FILE: fs/unionfs/union.h:188:
+extern int unionfs_init_filldir_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#65: FILE: fs/unionfs/union.h:189:
+extern int unionfs_init_inode_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#66: FILE: fs/unionfs/union.h:190:
+extern void unionfs_destroy_inode_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#67: FILE: fs/unionfs/union.h:191:
+extern int unionfs_init_dentry_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#68: FILE: fs/unionfs/union.h:192:
+extern void unionfs_destroy_dentry_cache(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#82: FILE: fs/unionfs/union.h:195:
+extern int init_rdstate(struct file *file);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#83: FILE: fs/unionfs/union.h:196:
+extern struct unionfs_dir_state *alloc_rdstate(struct inode *inode, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#84: FILE: fs/unionfs/union.h:197:
+extern struct unionfs_dir_state *find_rdstate(struct inode *inode, loff_t fpos);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#85: FILE: fs/unionfs/union.h:198:
+extern void free_rdstate(struct unionfs_dir_state *state);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#86: FILE: fs/unionfs/union.h:199:
+extern int add_filldir_node(struct unionfs_dir_state *rdstate, const char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#88: FILE: fs/unionfs/union.h:201:
+extern struct filldir_node *find_filldir_node(struct unionfs_dir_state *rdstate,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#91: FILE: fs/unionfs/union.h:204:
+extern struct dentry **alloc_new_dentries(int objs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#92: FILE: fs/unionfs/union.h:205:
+extern struct unionfs_data *alloc_new_data(int objs);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#102: FILE: fs/unionfs/union.h:239:
+extern void free_dentry_private_data(struct unionfs_dentry_info *udi);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#103: FILE: fs/unionfs/union.h:240:
+extern void update_bstart(struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#111: FILE: fs/unionfs/union.h:249:
+extern int make_dir_opaque(struct dentry *dir, int bindex);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#121: FILE: fs/unionfs/union.h:308:
+extern int unionfs_unlink(struct inode *dir, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#122: FILE: fs/unionfs/union.h:309:
+extern int unionfs_rmdir(struct inode *dir, struct dentry *dentry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#125: FILE: fs/unionfs/union.h:311:
+extern int __unionfs_d_revalidate_chain(struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#126: FILE: fs/unionfs/union.h:312:
+					struct nameidata *nd);
 					                  ^^

Some words may have been misspelled.  Consider reviewing them.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 1 warnings, 20 checks, 90 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000427391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
