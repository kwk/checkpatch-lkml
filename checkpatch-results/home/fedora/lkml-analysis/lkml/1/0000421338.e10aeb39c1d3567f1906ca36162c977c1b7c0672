WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#91: FILE: ipc/util.h:47:
+void __ipc_init ipc_init_ids(struct ipc_ids *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#101: FILE: ipc/util.h:60:
+struct kern_ipc_perm *ipc_findkey(struct ipc_ids *, key_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'key_t' should also have an identifier name
#101: FILE: ipc/util.h:60:
+struct kern_ipc_perm *ipc_findkey(struct ipc_ids *, key_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ipc_ids *' should also have an identifier name
#102: FILE: ipc/util.h:61:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kern_ipc_perm *' should also have an identifier name
#102: FILE: ipc/util.h:61:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#102: FILE: ipc/util.h:61:
+int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#219: FILE: ipc/util.c:260:
+		nb_ipcs = radix_tree_gang_lookup(&ids->id_tree,
+			(void **) ipcs, next_id, IPCS_MAX_SCAN_ENTRIES);

CHECK:SPACING: No space is necessary after a cast
#219: FILE: ipc/util.c:260:
+			(void **) ipcs, next_id, IPCS_MAX_SCAN_ENTRIES);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#226: FILE: ipc/util.c:267:
+				BUG_ON(ipc->key != key);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#252: FILE: ipc/util.c:280:
+ *^Iipc_set_max_id ^I-^Iset the last assigned id$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#286: FILE: ipc/util.c:295:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#311: FILE: ipc/util.c:312:
+		next_zero = find_next_zero_bit(ids->in_use_bitmap,
+						ids->max_id, next_bit);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#315: FILE: ipc/util.c:316:
+			return;
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#315: FILE: ipc/util.c:316:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#317: FILE: ipc/util.c:318:
+			next_bit = find_next_bit(ids->in_use_bitmap,
+					ids->max_id, next_zero);

CHECK:BRACES: Unbalanced braces around else statement
#371: FILE: ipc/util.c:366:
+	} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: ipc/util.c:368:
+		ids->first_free = find_next_zero_bit(ids->in_use_bitmap,
+			ids->max_id, id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#391: FILE: ipc/util.c:401:
+	BUG_ON(lid > ids->max_id);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#401: FILE: ipc/util.c:408:
+	BUG_ON(p == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#401: FILE: ipc/util.c:408:
+	BUG_ON(p == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#403: FILE: ipc/util.c:410:
+	BUG_ON(ids->in_use <= 0);

CHECK:SPACING: No space is necessary after a cast
#489: FILE: ipc/util.c:789:
+	nb_ipcs = radix_tree_gang_lookup(&ids->id_tree, (void **) ipcs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#490: FILE: ipc/util.c:790:
+	nb_ipcs = radix_tree_gang_lookup(&ids->id_tree, (void **) ipcs,
+					*pos, 1);

CHECK:SPACING: No space is necessary after a cast
#527: FILE: ipc/util.c:833:
+	nb_ipcs = radix_tree_gang_lookup(&ids->id_tree, (void **) ipcs,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#528: FILE: ipc/util.c:834:
+	nb_ipcs = radix_tree_gang_lookup(&ids->id_tree, (void **) ipcs,
+					*pos - 1, 1);

CHECK:BRACES: Unbalanced braces around else statement
#618: FILE: ipc/msg.c:267:
+	else  {

CHECK:SPACING: No space is necessary after a cast
#619: FILE: ipc/msg.c:268:
+		msq = (struct msg_queue *) ipc_findkey(&msg_ids(ns), key);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!msq"
#620: FILE: ipc/msg.c:269:
+		if (msq == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#632: FILE: ipc/msg.c:278:
+			if (msgflg & IPC_CREAT && msgflg & IPC_EXCL)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#634: FILE: ipc/msg.c:280:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#635: FILE: ipc/msg.c:281:
+				if (ipcperms(&msq->q_perm, msgflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#637: FILE: ipc/msg.c:283:
+				else {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#638: FILE: ipc/msg.c:284:
+					ret = security_msg_queue_associate(

CHECK:BRACES: Unbalanced braces around else statement
#668: FILE: ipc/msg.c:464:
+		else {

CHECK:SPACING: No space is necessary after a cast
#749: FILE: ipc/sem.c:275:
+		sma = (struct sem_array *) ipc_findkey(&sem_ids(ns), key);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!sma"
#750: FILE: ipc/sem.c:276:
+		if (sma == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#759: FILE: ipc/sem.c:285:
+			if (semflg & IPC_CREAT && semflg & IPC_EXCL)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#761: FILE: ipc/sem.c:287:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#762: FILE: ipc/sem.c:288:
+				if (nsems > sma->sem_nsems)
[...]
+				else if (ipcperms(&sma->sem_perm, semflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#766: FILE: ipc/sem.c:292:
+				else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: ipc/sem.c:294:
+					err = security_sem_associate(sma,
+								semflg);

CHECK:SPACING: No space is necessary after a cast
#906: FILE: ipc/shm.c:425:
+		shp = (struct shmid_kernel *) ipc_findkey(&shm_ids(ns), key);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shp"
#907: FILE: ipc/shm.c:426:
+		if (shp == NULL) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#915: FILE: ipc/shm.c:434:
+			if ((shmflg & IPC_CREAT) && (shmflg & IPC_EXCL))
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#917: FILE: ipc/shm.c:436:
+			else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#918: FILE: ipc/shm.c:437:
+				if (shp->shm_segsz < size)
[...]
+				else if (ipcperms(&shp->shm_perm, shmflg))
[...]
+				else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#922: FILE: ipc/shm.c:441:
+				else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: ipc/shm.c:443:
+					err = security_shm_associate(shp,
+								shmflg);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 12 warnings, 36 checks, 873 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000421338.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
