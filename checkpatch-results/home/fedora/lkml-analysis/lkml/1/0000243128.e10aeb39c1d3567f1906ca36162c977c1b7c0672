CHECK:LINE_SPACING: Please don't use multiple blank lines
#82: FILE: ckpt/ckpt_hdr.h:70:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#107: FILE: ckpt/ckpt_mem.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#167: FILE: ckpt/ckpt_mem.c:61:
+		free_pages((unsigned long) ctx->pgarr->addrs, CR_ORDER_PGARR);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#168: FILE: ckpt/ckpt_mem.c:62:
+		free_pages((unsigned long) ctx->pgarr->pages, CR_ORDER_PGARR);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#184: FILE: ckpt/ckpt_mem.c:78:
+	if ((pgarr = kzalloc(sizeof(*pgarr), GFP_KERNEL))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:SPACING: No space is necessary after a cast
#196: FILE: ckpt/ckpt_mem.c:90:
+			free_pages((unsigned long) pgarr->addrs,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#248: FILE: ckpt/ckpt_mem.c:142:
+		* only need FOLL_TOUCH, and (for now) ignore fault stats */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#248: FILE: ckpt/ckpt_mem.c:142:
+		/* simplified version of get_user_pages(): already have vma,
+		* only need FOLL_TOUCH, and (for now) ignore fault stats */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#259: FILE: ckpt/ckpt_mem.c:153:
+					BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#272: FILE: ckpt/ckpt_mem.c:166:
+		else if (cow && page_mapping(page) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Unbalanced braces around else statement
#274: FILE: ckpt/ckpt_mem.c:168:
+		else {

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#313: FILE: ckpt/ckpt_mem.c:207:
+		if (!(pgarr = cr_pgarr_prep(ctx)))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#315: FILE: ckpt/ckpt_mem.c:209:
+		if ((nr = cr_vma_fill_pgarr(ctx, pgarr, vma, &addr)) < 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#341: FILE: ckpt/ckpt_mem.c:235:
+		ret = cr_kwrite(ctx, pgarr->addrs,
+			       pgarr->nused * sizeof(*pgarr->addrs));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#382: FILE: ckpt/ckpt_mem.c:276:
+		printk(KERN_WARNING "CR: unknown VMA %#lx\n", vma->vm_flags);

CHECK:BRACES: braces {} should be used on all arms of this statement
#391: FILE: ckpt/ckpt_mem.c:285:
+	if (vma->vm_file) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#399: FILE: ckpt/ckpt_mem.c:293:
+	} else

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#414: FILE: ckpt/ckpt_mem.c:308:
+	 * (and a reference to each page) on the checkpoint ctx */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#433: FILE: ckpt/ckpt_mem.c:327:
+	 * the checkpoint ctx) followed by the contents of all pages */

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#481: FILE: ckpt/ckpt_mem.c:375:
+		if ((ret = cr_write_vma(ctx, vma)) < 0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#499: FILE: ckpt/ckpt_mem.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#526: FILE: ckpt/ckpt_mem.h:28:
+extern void _cr_pgarr_release(struct cr_ctx *ctx, struct cr_pgarr *pgarr);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#527: FILE: ckpt/ckpt_mem.h:29:
+extern void cr_pgarr_release(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#528: FILE: ckpt/ckpt_mem.h:30:
+extern void cr_pgarr_free(struct cr_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#529: FILE: ckpt/ckpt_mem.h:31:
+extern struct cr_pgarr *cr_pgarr_alloc(struct cr_ctx *ctx, struct cr_pgarr **pgnew);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#530: FILE: ckpt/ckpt_mem.h:32:
+extern struct cr_pgarr *cr_pgarr_prep(struct cr_ctx *ctx);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#542: FILE: ckpt/rstr_mem.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#563: FILE: ckpt/rstr_mem.c:22:
+#include <asm/cacheflush.h>

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#587: FILE: ckpt/rstr_mem.c:46:
+		if (!(pgarr = cr_pgarr_prep(ctx)))

CHECK:SPACING: No space is necessary after a cast
#589: FILE: ckpt/rstr_mem.c:48:
+		nr = min(npages, (int) pgarr->nleft);

WARNING:MINMAX: min() should probably be min_t(int, npages, pgarr->nleft)
#589: FILE: ckpt/rstr_mem.c:48:
+		nr = min(npages, (int) pgarr->nleft);

CHECK:SPACING: No space is necessary after a cast
#616: FILE: ckpt/rstr_mem.c:75:
+			ret = cr_uread(ctx, (void *) *(addrs++), PAGE_SIZE);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#626: FILE: ckpt/rstr_mem.c:85:
+ * this is useful when restoring the memory of a read-only vma */

CHECK:SPACING: No space is necessary after a cast
#744: FILE: ckpt/rstr_mem.c:203:
+		  (unsigned long) hh->vm_start, (unsigned long) hh->vm_end,

CHECK:SPACING: No space is necessary after a cast
#745: FILE: ckpt/rstr_mem.c:204:
+		  (int) hh->npages, (int) hh->namelen);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#767: FILE: ckpt/rstr_mem.c:226:
+	switch (hh->how) {
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#772: FILE: ckpt/rstr_mem.c:231:
+		/* vm_pgoff for anonymous mapping is the "global" page
+		   offset (namely from addr 0x0), so we force a zero */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#772: FILE: ckpt/rstr_mem.c:231:
+		   offset (namely from addr 0x0), so we force a zero */

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#790: FILE: ckpt/rstr_mem.c:249:
+
+	}

CHECK:SPACING: No space is necessary after a cast
#792: FILE: ckpt/rstr_mem.c:251:
+	addr = do_mmap_pgoff(file, (unsigned long) hh->vm_start,

CHECK:SPACING: No space is necessary after a cast
#801: FILE: ckpt/rstr_mem.c:260:
+	if (IS_ERR((void*) addr))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#801: FILE: ckpt/rstr_mem.c:260:
+	if (IS_ERR((void*) addr))

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#802: FILE: ckpt/rstr_mem.c:261:
+		return (PTR_ERR((void *) addr));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#838: FILE: ckpt/rstr_mem.c:297:
+		ret = do_munmap(mm, vma->vm_start, vma->vm_end-vma->vm_start);
 		                                              ^

WARNING:TYPO_SPELLING: 'inclue' may be misspelled - perhaps 'include'?
#975: FILE: ckpt/x86.c:316:
+	 * user_desc' with reverse logic of inclue/asm/desc.h:fill_ldt() */
 	                                    ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#975: FILE: ckpt/x86.c:316:
+	 * user_desc' with reverse logic of inclue/asm/desc.h:fill_ldt() */

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#994: FILE: ckpt/x86.c:335:
+		info.useable = desc.avl;
 		     ^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 17 warnings, 24 checks, 944 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243128.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
