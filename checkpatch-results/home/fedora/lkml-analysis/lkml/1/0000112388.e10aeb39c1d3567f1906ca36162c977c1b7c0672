WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git tracing-for-linus

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#103: 
      Revert "x86, bts: reenable ptrace branch trace support"
                        ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#181: 
      x86, bts: reenable ptrace branch trace support
                ^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#552: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#595: FILE: Documentation/DocBook/tracepoint.tmpl:39:
+     License along with this program; if not, write to the Free$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#596: FILE: Documentation/DocBook/tracepoint.tmpl:40:
+     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,$

WARNING:TYPO_SPELLING: 'Iinclude' may be misspelled - perhaps 'Include'?
#642: FILE: Documentation/DocBook/tracepoint.tmpl:86:
+!Iinclude/trace/events/irq.h
  ^^^^^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#676: FILE: Documentation/kernel-parameters.txt:766:
+^I^I^Itracing directory. $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'eanble' may be misspelled - perhaps 'enable'?
#782: FILE: Documentation/trace/events.txt:75:
+To eanble all events:
    ^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#842: FILE: arch/x86/Kconfig.debug:170:
+config X86_DS_SELFTEST
+    bool "DS selftest"
+    default y
+    depends on DEBUG_KERNEL
+    depends on X86_DS
+	---help---
+	  Perform Debug Store selftests at boot time.
+	  If in doubt, say "N".
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#894: FILE: arch/x86/include/asm/ds.h:98:
+extern struct bts_tracer *ds_request_bts_task(struct task_struct *task,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#898: FILE: arch/x86/include/asm/ds.h:102:
+extern struct bts_tracer *ds_request_bts_cpu(int cpu, void *base, size_t size,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#901: FILE: arch/x86/include/asm/ds.h:105:
+extern struct pebs_tracer *ds_request_pebs_task(struct task_struct *task,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#905: FILE: arch/x86/include/asm/ds.h:109:
+extern struct pebs_tracer *ds_request_pebs_cpu(int cpu,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#938: FILE: arch/x86/include/asm/ds.h:144:
+extern int ds_release_bts_noirq(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#939: FILE: arch/x86/include/asm/ds.h:145:
+extern int ds_suspend_bts_noirq(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#940: FILE: arch/x86/include/asm/ds.h:146:
+extern int ds_resume_bts_noirq(struct bts_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#941: FILE: arch/x86/include/asm/ds.h:147:
+extern int ds_release_pebs_noirq(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#942: FILE: arch/x86/include/asm/ds.h:148:
+extern int ds_suspend_pebs_noirq(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#943: FILE: arch/x86/include/asm/ds.h:149:
+extern int ds_resume_pebs_noirq(struct pebs_tracer *tracer);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#983: FILE: arch/x86/include/asm/ds.h:280:
+extern int ds_set_pebs_reset(struct pebs_tracer *tracer,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1083: FILE: arch/x86/include/asm/ptrace.h:239:
+extern void ptrace_bts_untrace(struct task_struct *tsk);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1190: FILE: arch/x86/kernel/ds.c:53:
 };
+static struct ds_configuration ds_cfg __read_mostly;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1192: FILE: arch/x86/kernel/ds.c:55:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#1204: FILE: arch/x86/kernel/ds.c:63:
+#define DS_ALIGNMENT		(1 << 3)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

ERROR:SPACING: space prohibited after that open parenthesis '('
#1217: FILE: arch/x86/kernel/ds.c:73:
+	( ds_cfg.ctl[dsf_bts]			| \

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space prohibited before that close parenthesis ')'
#1220: FILE: arch/x86/kernel/ds.c:76:
+	  ds_cfg.ctl[dsf_bts_overflow] )

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1309: FILE: arch/x86/kernel/ds.c:175:
+       unsigned long value)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1414: FILE: arch/x86/kernel/ds.c:270:
 
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task != current'
#1495: FILE: arch/x86/kernel/ds.c:342:
+	if (task && (task != current))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Unbalanced braces around else statement
#1522: FILE: arch/x86/kernel/ds.c:369:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#1618: FILE: arch/x86/kernel/ds.c:520:
+	base += (ds_cfg.sizeof_ptr_field * field);;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task != current'
#1947: FILE: arch/x86/kernel/ds.c:883:
+	if (task && (task != current))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer->ds.context->cpu != smp_processor_id()'
#1981: FILE: arch/x86/kernel/ds.c:917:
+	if (!task &&
+	    (tracer->ds.context->cpu != smp_processor_id()))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task != current'
#1986: FILE: arch/x86/kernel/ds.c:922:
+	if (task && (task != current))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu != smp_processor_id()'
#2063: FILE: arch/x86/kernel/ds.c:989:
+	if (!task && (cpu != smp_processor_id()))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpu != smp_processor_id()'
#2148: FILE: arch/x86/kernel/ds.c:1065:
+	if (!task && (cpu != smp_processor_id()))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'tracer->ds.context->cpu != smp_processor_id()'
#2208: FILE: arch/x86/kernel/ds.c:1124:
+	if (!task &&
+	    (tracer->ds.context->cpu != smp_processor_id()))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'task != current'
#2213: FILE: arch/x86/kernel/ds.c:1129:
+	if (task && (task != current))

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2329: FILE: arch/x86/kernel/ds.c:1247:
+};
+static const struct ds_configuration ds_cfg_core_i7 = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2344: FILE: arch/x86/kernel/ds.c:1261:
+	printk(KERN_INFO "[ds] using %s configuration\n", cfg->name);

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#2346: FILE: arch/x86/kernel/ds.c:1263:
+#ifdef __i386__

Architecture specific defines should be avoided wherever
possible.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2371: FILE: arch/x86/kernel/ds.c:1288:
+			printk(KERN_INFO

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2400: FILE: arch/x86/kernel/ds.c:1313:
+	printk(KERN_INFO "[ds] sizes: address: %u bit, ",

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2402: FILE: arch/x86/kernel/ds.c:1315:
+	printk("bts/pebs record: %u/%u bytes\n",

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2406: FILE: arch/x86/kernel/ds.c:1318:
+	WARN_ON_ONCE(MAX_PEBS_COUNTERS < ds_cfg.nr_counter_reset);

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2565: FILE: arch/x86/kernel/ds_selftest.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2582: FILE: arch/x86/kernel/ds_selftest.c:18:
+
+

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bts_tracer *' should also have an identifier name
#2589: FILE: arch/x86/kernel/ds_selftest.c:25:
+	int (*suspend)(struct bts_tracer *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct bts_tracer *' should also have an identifier name
#2590: FILE: arch/x86/kernel/ds_selftest.c:26:
+	int (*resume)(struct bts_tracer *);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2598: FILE: arch/x86/kernel/ds_selftest.c:34:
+		printk(KERN_CONT "failed to access trace...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2598: FILE: arch/x86/kernel/ds_selftest.c:34:
+		printk(KERN_CONT "failed to access trace...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2604: FILE: arch/x86/kernel/ds_selftest.c:40:
+		printk(KERN_CONT "bts read not available...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2604: FILE: arch/x86/kernel/ds_selftest.c:40:
+		printk(KERN_CONT "bts read not available...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2610: FILE: arch/x86/kernel/ds_selftest.c:46:
+		printk(KERN_CONT "empty bts buffer...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2610: FILE: arch/x86/kernel/ds_selftest.c:46:
+		printk(KERN_CONT "empty bts buffer...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2614: FILE: arch/x86/kernel/ds_selftest.c:50:
+		printk(KERN_CONT "bad bts trace setup...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2614: FILE: arch/x86/kernel/ds_selftest.c:50:
+		printk(KERN_CONT "bad bts trace setup...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2619: FILE: arch/x86/kernel/ds_selftest.c:55:
+		printk(KERN_CONT "bad bts buffer setup...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2619: FILE: arch/x86/kernel/ds_selftest.c:55:
+		printk(KERN_CONT "bad bts buffer setup...");

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->ds.top < trace->ds.begin'
#2627: FILE: arch/x86/kernel/ds_selftest.c:63:
+	if ((trace->ds.top < trace->ds.begin) ||
+	    (trace->ds.end < trace->ds.top)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'trace->ds.end < trace->ds.top'
#2627: FILE: arch/x86/kernel/ds_selftest.c:63:
+	if ((trace->ds.top < trace->ds.begin) ||
+	    (trace->ds.end < trace->ds.top)) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2629: FILE: arch/x86/kernel/ds_selftest.c:65:
+		printk(KERN_CONT "bts top out of bounds...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2629: FILE: arch/x86/kernel/ds_selftest.c:65:
+		printk(KERN_CONT "bts top out of bounds...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2671: FILE: arch/x86/kernel/ds_selftest.c:107:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2671: FILE: arch/x86/kernel/ds_selftest.c:107:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2680: FILE: arch/x86/kernel/ds_selftest.c:116:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2680: FILE: arch/x86/kernel/ds_selftest.c:116:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2690: FILE: arch/x86/kernel/ds_selftest.c:126:
+			printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2690: FILE: arch/x86/kernel/ds_selftest.c:126:
+			printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2710: FILE: arch/x86/kernel/ds_selftest.c:146:
+		printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2710: FILE: arch/x86/kernel/ds_selftest.c:146:
+		printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2735: FILE: arch/x86/kernel/ds_selftest.c:171:
+		printk(KERN_CONT "no trace/overflow...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2735: FILE: arch/x86/kernel/ds_selftest.c:171:
+		printk(KERN_CONT "no trace/overflow...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2757: FILE: arch/x86/kernel/ds_selftest.c:193:
+		printk(KERN_CONT "suspend not working...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2757: FILE: arch/x86/kernel/ds_selftest.c:193:
+		printk(KERN_CONT "suspend not working...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2784: FILE: arch/x86/kernel/ds_selftest.c:220:
+		printk(KERN_CONT

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2784: FILE: arch/x86/kernel/ds_selftest.c:220:
+		printk(KERN_CONT

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2840: FILE: arch/x86/kernel/ds_selftest.c:276:
+			printk(KERN_CONT "release on wrong cpu...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2840: FILE: arch/x86/kernel/ds_selftest.c:276:
+			printk(KERN_CONT "release on wrong cpu...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2862: FILE: arch/x86/kernel/ds_selftest.c:298:
+		printk(KERN_CONT "cpu/task tracing overlap...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2862: FILE: arch/x86/kernel/ds_selftest.c:298:
+		printk(KERN_CONT "cpu/task tracing overlap...");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2874: FILE: arch/x86/kernel/ds_selftest.c:310:
+	tracer = ds_request_bts_task(current, buffer, BUFFER_SIZE, NULL,
+				    (size_t)-1, BTS_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2882: FILE: arch/x86/kernel/ds_selftest.c:318:
+		printk(KERN_CONT "task/cpu tracing overlap...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2882: FILE: arch/x86/kernel/ds_selftest.c:318:
+		printk(KERN_CONT "task/cpu tracing overlap...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2894: FILE: arch/x86/kernel/ds_selftest.c:330:
+	printk(KERN_INFO "[ds] bts selftest...");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2951: FILE: arch/x86/kernel/ds_selftest.c:387:
+		ds_request_bts_task(current, small_buffer, SMALL_BUFFER_SIZE,
+				   NULL, (size_t)-1, BTS_KERNEL);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#2964: FILE: arch/x86/kernel/ds_selftest.c:400:
+	printk(KERN_CONT "%s.\n", (conf.error ? "failed" : "passed"));

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#2964: FILE: arch/x86/kernel/ds_selftest.c:400:
+	printk(KERN_CONT "%s.\n", (conf.error ? "failed" : "passed"));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2979: FILE: arch/x86/kernel/ds_selftest.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2988: FILE: arch/x86/kernel/ds_selftest.h:10:
+extern int ds_selftest_bts(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2989: FILE: arch/x86/kernel/ds_selftest.h:11:
+extern int ds_selftest_pebs(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3201: FILE: arch/x86/kernel/ptrace.c:680:
+	struct bts_context *context = kzalloc(sizeof(*context), GFP_KERNEL);
+	if (context) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg.size != context->size'
#3341: FILE: arch/x86/kernel/ptrace.c:799:
+	if ((cfg.flags & PTRACE_BTS_O_ALLOC) && (cfg.size != context->size)) {

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#3372: FILE: arch/x86/kernel/ptrace.c:820:
+	if (unlikely(IS_ERR(context->tracer))) {

CHECK:BRACES: Unbalanced braces around else statement
#3577: FILE: arch/x86/mm/kmmio.c:117:
+	} else	/* presume this has been called with clear==true previously */

CHECK:BRACES: Unbalanced braces around else statement
#3593: FILE: arch/x86/mm/kmmio.c:128:
+	} else	/* presume this has been called with clear==true previously */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3663: FILE: arch/x86/mm/kmmio.c:320:
+		pr_warning("kmmio: unexpected debug trap on CPU %d.\n",
 							smp_processor_id());

WARNING:LINE_SPACING: Missing a blank line after declarations
#3677: FILE: arch/x86/mm/kmmio.c:449:
+	struct kmmio_fault_page *f = dr->release_list;
+	while (f) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3679: FILE: arch/x86/mm/kmmio.c:451:
+		struct kmmio_fault_page *next = f->release_next;
+		BUG_ON(f->count);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3679: FILE: arch/x86/mm/kmmio.c:451:
+		BUG_ON(f->count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE_STRING: line length of 115 exceeds 100 columns
#3746: FILE: arch/x86/mm/kmmio.c:570:
+			KERN_ERR "kmmio_page_table not empty at cleanup, any further tracing will leak memory.\n");

A string starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3746: FILE: arch/x86/mm/kmmio.c:570:
+		WARN_ONCE(!list_empty(&kmmio_page_table[i]),
+			KERN_ERR "kmmio_page_table not empty at cleanup, any further tracing will leak memory.\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3989: FILE: include/linux/blktrace_api.h:168:
+extern int do_blk_trace_setup(struct request_queue *q, char *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4003: FILE: include/linux/blktrace_api.h:201:
+extern int blk_trace_init_sysfs(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4038: FILE: include/linux/blktrace_api.h:228:
+extern void blk_dump_cmd(char *buf, struct request *rq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4039: FILE: include/linux/blktrace_api.h:229:
+extern void blk_fill_rwbs(char *rwbs, u32 rw, int bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4040: FILE: include/linux/blktrace_api.h:230:
+extern void blk_fill_rwbs_rq(char *rwbs, struct request *rq);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4112: FILE: include/linux/ftrace_event.h:1:
+#ifndef _LINUX_FTRACE_EVENT_H

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#4163: FILE: include/linux/ftrace_event.h:52:
+	struct mutex		mutex;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4179: FILE: include/linux/ftrace_event.h:68:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4192: FILE: include/linux/ftrace_event.h:81:
+extern int register_ftrace_event(struct trace_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4193: FILE: include/linux/ftrace_event.h:82:
+extern int unregister_ftrace_event(struct trace_event *event);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4203: FILE: include/linux/ftrace_event.h:92:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4210: FILE: include/linux/ftrace_event.h:99:
+void trace_nowake_buffer_unlock_commit(struct ring_buffer_event *event,
+					unsigned long flags, int pc);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#4235: FILE: include/linux/ftrace_event.h:124:
+	int		(*profile_enable)(struct ftrace_event_call *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ftrace_event_call *' should also have an identifier name
#4236: FILE: include/linux/ftrace_event.h:125:
+	void		(*profile_disable)(struct ftrace_event_call *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4243: FILE: include/linux/ftrace_event.h:132:
+extern int init_preds(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4244: FILE: include/linux/ftrace_event.h:133:
+extern void destroy_preds(struct ftrace_event_call *call);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4245: FILE: include/linux/ftrace_event.h:134:
+extern int filter_match_preds(struct ftrace_event_call *call, void *rec);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4246: FILE: include/linux/ftrace_event.h:135:
+extern int filter_current_check_discard(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4250: FILE: include/linux/ftrace_event.h:139:
+extern int trace_define_field(struct ftrace_event_call *call, char *type,

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ip' - possible side-effects?
#4262: FILE: include/linux/ftrace_event.h:151:
+#define event_trace_printk(ip, fmt, args...)				\
+do {									\
+	__trace_printk_check_format(fmt, ##args);			\
+	tracing_record_cmdline(current);				\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__trace_bprintk(ip, trace_printk_fmt, ##args);		\
+	} else								\
+		__trace_printk(ip, fmt, ##args);			\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'fmt' - possible side-effects?
#4262: FILE: include/linux/ftrace_event.h:151:
+#define event_trace_printk(ip, fmt, args...)				\
+do {									\
+	__trace_printk_check_format(fmt, ##args);			\
+	tracing_record_cmdline(current);				\
+	if (__builtin_constant_p(fmt)) {				\
+		static const char *trace_printk_fmt			\
+		  __attribute__((section("__trace_printk_fmt"))) =	\
+			__builtin_constant_p(fmt) ? fmt : NULL;		\
+									\
+		__trace_bprintk(ip, trace_printk_fmt, ##args);		\
+	} else								\
+		__trace_printk(ip, fmt, ##args);			\
+} while (0)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__trace_printk_fmt") over __attribute__((section("__trace_printk_fmt")))
#4268: FILE: include/linux/ftrace_event.h:157:
+		  __attribute__((section("__trace_printk_fmt"))) =	\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#4276: FILE: include/linux/ftrace_event.h:165:
+#define __common_field(type, item, is_signed)				\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item), is_signed);	\
+	if (ret)							\
+		return ret;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#4276: FILE: include/linux/ftrace_event.h:165:
+#define __common_field(type, item, is_signed)				\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item), is_signed);	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#4276: FILE: include/linux/ftrace_event.h:165:
+#define __common_field(type, item, is_signed)				\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item), is_signed);	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#4276: FILE: include/linux/ftrace_event.h:165:
+#define __common_field(type, item, is_signed)				\
+	ret = trace_define_field(event_call, #type, "common_" #item,	\
+				 offsetof(typeof(field.ent), item),	\
+				 sizeof(field.ent.item), is_signed);	\
+	if (ret)							\
+		return ret;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4302: FILE: include/linux/kmemtrace.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4316: FILE: include/linux/kmemtrace.h:15:
+extern void kmemtrace_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4346: FILE: include/linux/mm.h:1323:
+extern int account_locked_memory(struct mm_struct *mm, struct rlimit *rlim,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4348: FILE: include/linux/mm.h:1325:
+extern void refund_locked_memory(struct mm_struct *mm, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4359: FILE: include/linux/mmiotrace.h:33:
+extern int kmmio_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4360: FILE: include/linux/mmiotrace.h:34:
+extern void kmmio_cleanup(void);

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#4473: FILE: include/linux/ring_buffer.h:79:
+ * the event is commited. But in that case it would be better to
                 ^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4503: FILE: include/linux/ring_buffer.h:108:
+__ring_buffer_alloc(unsigned long size, unsigned flags, struct lock_class_key *key);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4589: FILE: include/linux/sched.h:1999:
+extern void wait_task_context_switch(struct task_struct *p);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4628: FILE: include/linux/trace_seq.h:1:
+#ifndef _LINUX_TRACE_SEQ_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4655: FILE: include/linux/trace_seq.h:28:
+extern int trace_seq_printf(struct trace_seq *s, const char *fmt, ...)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 3) over __attribute__((format(printf, 2, 3)))
#4656: FILE: include/linux/trace_seq.h:29:
+	__attribute__ ((format (printf, 2, 3)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4657: FILE: include/linux/trace_seq.h:30:
+extern int trace_seq_vprintf(struct trace_seq *s, const char *fmt, va_list args)

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(2, 0) over __attribute__((format(printf, 2, 0)))
#4658: FILE: include/linux/trace_seq.h:31:
+	__attribute__ ((format (printf, 2, 0)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4661: FILE: include/linux/trace_seq.h:34:
+extern void trace_print_seq(struct seq_file *m, struct trace_seq *s);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4662: FILE: include/linux/trace_seq.h:35:
+extern ssize_t trace_seq_to_user(struct trace_seq *s, char __user *ubuf,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4664: FILE: include/linux/trace_seq.h:37:
+extern int trace_seq_puts(struct trace_seq *s, const char *str);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4665: FILE: include/linux/trace_seq.h:38:
+extern int trace_seq_putc(struct trace_seq *s, unsigned char c);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4666: FILE: include/linux/trace_seq.h:39:
+extern int trace_seq_putmem(struct trace_seq *s, const void *mem, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4667: FILE: include/linux/trace_seq.h:40:
+extern int trace_seq_putmem_hex(struct trace_seq *s, const void *mem,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4669: FILE: include/linux/trace_seq.h:42:
+extern void *trace_seq_reserve(struct trace_seq *s, size_t len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4670: FILE: include/linux/trace_seq.h:43:
+extern int trace_seq_path(struct trace_seq *s, struct path *path);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4677: FILE: include/linux/trace_seq.h:50:
+}
+static inline int

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4686: FILE: include/linux/trace_seq.h:59:
+}
+static inline ssize_t trace_seq_to_user(struct trace_seq *s, char __user *ubuf,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4687: FILE: include/linux/trace_seq.h:60:
+static inline ssize_t trace_seq_to_user(struct trace_seq *s, char __user *ubuf,
+				 size_t cnt)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4691: FILE: include/linux/trace_seq.h:64:
+}
+static inline int trace_seq_puts(struct trace_seq *s, const char *str)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4695: FILE: include/linux/trace_seq.h:68:
+}
+static inline int trace_seq_putc(struct trace_seq *s, unsigned char c)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4699: FILE: include/linux/trace_seq.h:72:
+}
+static inline int

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4704: FILE: include/linux/trace_seq.h:77:
+}
+static inline int trace_seq_putmem_hex(struct trace_seq *s, const void *mem,

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4709: FILE: include/linux/trace_seq.h:82:
+}
+static inline void *trace_seq_reserve(struct trace_seq *s, size_t len)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4713: FILE: include/linux/trace_seq.h:86:
+}
+static inline int trace_seq_path(struct trace_seq *s, struct path *path)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4848: FILE: include/trace/define_trace.h:1:
+/*

WARNING:TYPO_SPELLING: 'creationg' may be misspelled - perhaps 'creation'?
#4849: FILE: include/trace/define_trace.h:2:
+ * Trace files that want to automate creationg of all tracepoints defined
                                      ^^^^^^^^^

ERROR:SPACING: spaces required around that '<' (ctx:WxV)
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>
                                  ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>
                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>
                                               ^

ERROR:SPACING: spaces required around that '>' (ctx:VxE)
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>
                                                        ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'system' may be better as '(system)' to avoid precedence issues
#4889: FILE: include/trace/define_trace.h:42:
+# define __TRACE_INCLUDE(system) <trace/events/system.h>

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4892: FILE: include/trace/define_trace.h:45:
+# define __TRACE_INCLUDE(system) __stringify(TRACE_INCLUDE_PATH/system.h)
                                                                ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'system' may be better as '(system)' to avoid precedence issues
#4892: FILE: include/trace/define_trace.h:45:
+# define __TRACE_INCLUDE(system) __stringify(TRACE_INCLUDE_PATH/system.h)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4929: FILE: include/trace/events/block.h:1:
+#if !defined(_TRACE_BLOCK_H) || defined(TRACE_HEADER_MULTI_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4940: FILE: include/trace/events/block.h:12:
+TRACE_EVENT(block_rq_abort,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4945: FILE: include/trace/events/block.h:17:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#4946: FILE: include/trace/events/block.h:18:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4946: FILE: include/trace/events/block.h:18:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4947: FILE: include/trace/events/block.h:19:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4947: FILE: include/trace/events/block.h:19:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4948: FILE: include/trace/events/block.h:20:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4948: FILE: include/trace/events/block.h:20:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4949: FILE: include/trace/events/block.h:21:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4949: FILE: include/trace/events/block.h:21:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4950: FILE: include/trace/events/block.h:22:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4950: FILE: include/trace/events/block.h:22:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4951: FILE: include/trace/events/block.h:23:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4951: FILE: include/trace/events/block.h:23:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4954: FILE: include/trace/events/block.h:26:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4973: FILE: include/trace/events/block.h:45:
+TRACE_EVENT(block_rq_insert,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4978: FILE: include/trace/events/block.h:50:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#4979: FILE: include/trace/events/block.h:51:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4979: FILE: include/trace/events/block.h:51:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4980: FILE: include/trace/events/block.h:52:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4980: FILE: include/trace/events/block.h:52:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4981: FILE: include/trace/events/block.h:53:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4981: FILE: include/trace/events/block.h:53:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4982: FILE: include/trace/events/block.h:54:
+		__field(  unsigned int,	bytes			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4982: FILE: include/trace/events/block.h:54:
+		__field(  unsigned int,	bytes			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4983: FILE: include/trace/events/block.h:55:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4983: FILE: include/trace/events/block.h:55:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#4984: FILE: include/trace/events/block.h:56:
+		__array(  char,         comm,   TASK_COMM_LEN   )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4984: FILE: include/trace/events/block.h:56:
+		__array(  char,         comm,   TASK_COMM_LEN   )

ERROR:SPACING: space prohibited after that open parenthesis '('
#4985: FILE: include/trace/events/block.h:57:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4985: FILE: include/trace/events/block.h:57:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4988: FILE: include/trace/events/block.h:60:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5008: FILE: include/trace/events/block.h:80:
+TRACE_EVENT(block_rq_issue,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5013: FILE: include/trace/events/block.h:85:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5014: FILE: include/trace/events/block.h:86:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5014: FILE: include/trace/events/block.h:86:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5015: FILE: include/trace/events/block.h:87:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5015: FILE: include/trace/events/block.h:87:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5016: FILE: include/trace/events/block.h:88:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5016: FILE: include/trace/events/block.h:88:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5017: FILE: include/trace/events/block.h:89:
+		__field(  unsigned int,	bytes			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5017: FILE: include/trace/events/block.h:89:
+		__field(  unsigned int,	bytes			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5018: FILE: include/trace/events/block.h:90:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5018: FILE: include/trace/events/block.h:90:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5019: FILE: include/trace/events/block.h:91:
+		__array(  char,		comm,   TASK_COMM_LEN   )

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5019: FILE: include/trace/events/block.h:91:
+		__array(  char,		comm,   TASK_COMM_LEN   )

ERROR:SPACING: space prohibited after that open parenthesis '('
#5020: FILE: include/trace/events/block.h:92:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5020: FILE: include/trace/events/block.h:92:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5023: FILE: include/trace/events/block.h:95:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5043: FILE: include/trace/events/block.h:115:
+TRACE_EVENT(block_rq_requeue,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5048: FILE: include/trace/events/block.h:120:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5049: FILE: include/trace/events/block.h:121:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5049: FILE: include/trace/events/block.h:121:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5050: FILE: include/trace/events/block.h:122:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5050: FILE: include/trace/events/block.h:122:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5051: FILE: include/trace/events/block.h:123:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5051: FILE: include/trace/events/block.h:123:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5052: FILE: include/trace/events/block.h:124:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5052: FILE: include/trace/events/block.h:124:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5053: FILE: include/trace/events/block.h:125:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5053: FILE: include/trace/events/block.h:125:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5054: FILE: include/trace/events/block.h:126:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5054: FILE: include/trace/events/block.h:126:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5057: FILE: include/trace/events/block.h:129:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5076: FILE: include/trace/events/block.h:148:
+TRACE_EVENT(block_rq_complete,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5081: FILE: include/trace/events/block.h:153:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5082: FILE: include/trace/events/block.h:154:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5082: FILE: include/trace/events/block.h:154:
+		__field(  dev_t,	dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5083: FILE: include/trace/events/block.h:155:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5083: FILE: include/trace/events/block.h:155:
+		__field(  sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5084: FILE: include/trace/events/block.h:156:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5084: FILE: include/trace/events/block.h:156:
+		__field(  unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5085: FILE: include/trace/events/block.h:157:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5085: FILE: include/trace/events/block.h:157:
+		__field(  int,		errors			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5086: FILE: include/trace/events/block.h:158:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5086: FILE: include/trace/events/block.h:158:
+		__array(  char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5087: FILE: include/trace/events/block.h:159:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5087: FILE: include/trace/events/block.h:159:
+		__dynamic_array( char,	cmd,	blk_cmd_buf_len(rq)	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5090: FILE: include/trace/events/block.h:162:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5108: FILE: include/trace/events/block.h:180:
+TRACE_EVENT(block_bio_bounce,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5113: FILE: include/trace/events/block.h:185:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5114: FILE: include/trace/events/block.h:186:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5114: FILE: include/trace/events/block.h:186:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5115: FILE: include/trace/events/block.h:187:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5115: FILE: include/trace/events/block.h:187:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5116: FILE: include/trace/events/block.h:188:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5116: FILE: include/trace/events/block.h:188:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5117: FILE: include/trace/events/block.h:189:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5117: FILE: include/trace/events/block.h:189:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5118: FILE: include/trace/events/block.h:190:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5118: FILE: include/trace/events/block.h:190:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5121: FILE: include/trace/events/block.h:193:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5136: FILE: include/trace/events/block.h:208:
+TRACE_EVENT(block_bio_complete,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5141: FILE: include/trace/events/block.h:213:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5142: FILE: include/trace/events/block.h:214:
+		__field( dev_t,		dev		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5142: FILE: include/trace/events/block.h:214:
+		__field( dev_t,		dev		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5143: FILE: include/trace/events/block.h:215:
+		__field( sector_t,	sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5143: FILE: include/trace/events/block.h:215:
+		__field( sector_t,	sector		)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5144: FILE: include/trace/events/block.h:216:
+		__field( unsigned,	nr_sector	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5144: FILE: include/trace/events/block.h:216:
+		__field( unsigned,	nr_sector	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5144: FILE: include/trace/events/block.h:216:
+		__field( unsigned,	nr_sector	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5145: FILE: include/trace/events/block.h:217:
+		__field( int,		error		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5145: FILE: include/trace/events/block.h:217:
+		__field( int,		error		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5146: FILE: include/trace/events/block.h:218:
+		__array( char,		rwbs,	6	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5146: FILE: include/trace/events/block.h:218:
+		__array( char,		rwbs,	6	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5149: FILE: include/trace/events/block.h:221:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5163: FILE: include/trace/events/block.h:235:
+TRACE_EVENT(block_bio_backmerge,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5168: FILE: include/trace/events/block.h:240:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5169: FILE: include/trace/events/block.h:241:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5169: FILE: include/trace/events/block.h:241:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5170: FILE: include/trace/events/block.h:242:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5170: FILE: include/trace/events/block.h:242:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5171: FILE: include/trace/events/block.h:243:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5171: FILE: include/trace/events/block.h:243:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5172: FILE: include/trace/events/block.h:244:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5172: FILE: include/trace/events/block.h:244:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5173: FILE: include/trace/events/block.h:245:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5173: FILE: include/trace/events/block.h:245:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5176: FILE: include/trace/events/block.h:248:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5191: FILE: include/trace/events/block.h:263:
+TRACE_EVENT(block_bio_frontmerge,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5196: FILE: include/trace/events/block.h:268:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5197: FILE: include/trace/events/block.h:269:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5197: FILE: include/trace/events/block.h:269:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5198: FILE: include/trace/events/block.h:270:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5198: FILE: include/trace/events/block.h:270:
+		__field( sector_t,	sector			)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5199: FILE: include/trace/events/block.h:271:
+		__field( unsigned,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5199: FILE: include/trace/events/block.h:271:
+		__field( unsigned,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5199: FILE: include/trace/events/block.h:271:
+		__field( unsigned,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5200: FILE: include/trace/events/block.h:272:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5200: FILE: include/trace/events/block.h:272:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5201: FILE: include/trace/events/block.h:273:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5201: FILE: include/trace/events/block.h:273:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5204: FILE: include/trace/events/block.h:276:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5219: FILE: include/trace/events/block.h:291:
+TRACE_EVENT(block_bio_queue,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5224: FILE: include/trace/events/block.h:296:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5225: FILE: include/trace/events/block.h:297:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5225: FILE: include/trace/events/block.h:297:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5226: FILE: include/trace/events/block.h:298:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5226: FILE: include/trace/events/block.h:298:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5227: FILE: include/trace/events/block.h:299:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5227: FILE: include/trace/events/block.h:299:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5228: FILE: include/trace/events/block.h:300:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5228: FILE: include/trace/events/block.h:300:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5229: FILE: include/trace/events/block.h:301:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5229: FILE: include/trace/events/block.h:301:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5232: FILE: include/trace/events/block.h:304:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5247: FILE: include/trace/events/block.h:319:
+TRACE_EVENT(block_getrq,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5252: FILE: include/trace/events/block.h:324:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5253: FILE: include/trace/events/block.h:325:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5253: FILE: include/trace/events/block.h:325:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5254: FILE: include/trace/events/block.h:326:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5254: FILE: include/trace/events/block.h:326:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5255: FILE: include/trace/events/block.h:327:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5255: FILE: include/trace/events/block.h:327:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5256: FILE: include/trace/events/block.h:328:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5256: FILE: include/trace/events/block.h:328:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5257: FILE: include/trace/events/block.h:329:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5257: FILE: include/trace/events/block.h:329:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:CODE_INDENT: code indent should use tabs where possible
#5258: FILE: include/trace/events/block.h:330:
+        ),$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5258: FILE: include/trace/events/block.h:330:
+        ),$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5260: FILE: include/trace/events/block.h:332:
+	TP_fast_assign(

ERROR:CODE_INDENT: code indent should use tabs where possible
#5267: FILE: include/trace/events/block.h:339:
+        ),$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5267: FILE: include/trace/events/block.h:339:
+        ),$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5276: FILE: include/trace/events/block.h:348:
+TRACE_EVENT(block_sleeprq,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5281: FILE: include/trace/events/block.h:353:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5282: FILE: include/trace/events/block.h:354:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5282: FILE: include/trace/events/block.h:354:
+		__field( dev_t,		dev			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5283: FILE: include/trace/events/block.h:355:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5283: FILE: include/trace/events/block.h:355:
+		__field( sector_t,	sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5284: FILE: include/trace/events/block.h:356:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5284: FILE: include/trace/events/block.h:356:
+		__field( unsigned int,	nr_sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5285: FILE: include/trace/events/block.h:357:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5285: FILE: include/trace/events/block.h:357:
+		__array( char,		rwbs,	6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5286: FILE: include/trace/events/block.h:358:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5286: FILE: include/trace/events/block.h:358:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5289: FILE: include/trace/events/block.h:361:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5294: FILE: include/trace/events/block.h:366:
+		blk_fill_rwbs(__entry->rwbs,
+			    bio ? bio->bi_rw : 0, __entry->nr_sector);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5305: FILE: include/trace/events/block.h:377:
+TRACE_EVENT(block_plug,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5310: FILE: include/trace/events/block.h:382:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5311: FILE: include/trace/events/block.h:383:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5311: FILE: include/trace/events/block.h:383:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5314: FILE: include/trace/events/block.h:386:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5322: FILE: include/trace/events/block.h:394:
+TRACE_EVENT(block_unplug_timer,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5327: FILE: include/trace/events/block.h:399:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5328: FILE: include/trace/events/block.h:400:
+		__field( int,		nr_rq			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5328: FILE: include/trace/events/block.h:400:
+		__field( int,		nr_rq			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5329: FILE: include/trace/events/block.h:401:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5329: FILE: include/trace/events/block.h:401:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5332: FILE: include/trace/events/block.h:404:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5341: FILE: include/trace/events/block.h:413:
+TRACE_EVENT(block_unplug_io,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5346: FILE: include/trace/events/block.h:418:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5347: FILE: include/trace/events/block.h:419:
+		__field( int,		nr_rq			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5347: FILE: include/trace/events/block.h:419:
+		__field( int,		nr_rq			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5348: FILE: include/trace/events/block.h:420:
+		__array( char,		comm,	TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5348: FILE: include/trace/events/block.h:420:
+		__array( char,		comm,	TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5351: FILE: include/trace/events/block.h:423:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5360: FILE: include/trace/events/block.h:432:
+TRACE_EVENT(block_split,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5366: FILE: include/trace/events/block.h:438:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5367: FILE: include/trace/events/block.h:439:
+		__field( dev_t,		dev				)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5367: FILE: include/trace/events/block.h:439:
+		__field( dev_t,		dev				)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5368: FILE: include/trace/events/block.h:440:
+		__field( sector_t,	sector				)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5368: FILE: include/trace/events/block.h:440:
+		__field( sector_t,	sector				)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5369: FILE: include/trace/events/block.h:441:
+		__field( sector_t,	new_sector			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5369: FILE: include/trace/events/block.h:441:
+		__field( sector_t,	new_sector			)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5370: FILE: include/trace/events/block.h:442:
+		__array( char,		rwbs,		6		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5370: FILE: include/trace/events/block.h:442:
+		__array( char,		rwbs,		6		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5371: FILE: include/trace/events/block.h:443:
+		__array( char,		comm,		TASK_COMM_LEN	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5371: FILE: include/trace/events/block.h:443:
+		__array( char,		comm,		TASK_COMM_LEN	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5374: FILE: include/trace/events/block.h:446:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5390: FILE: include/trace/events/block.h:462:
+TRACE_EVENT(block_remap,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5396: FILE: include/trace/events/block.h:468:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5397: FILE: include/trace/events/block.h:469:
+		__field( dev_t,		dev		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5397: FILE: include/trace/events/block.h:469:
+		__field( dev_t,		dev		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5398: FILE: include/trace/events/block.h:470:
+		__field( sector_t,	sector		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5398: FILE: include/trace/events/block.h:470:
+		__field( sector_t,	sector		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5399: FILE: include/trace/events/block.h:471:
+		__field( unsigned int,	nr_sector	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5399: FILE: include/trace/events/block.h:471:
+		__field( unsigned int,	nr_sector	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5400: FILE: include/trace/events/block.h:472:
+		__field( dev_t,		old_dev		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5400: FILE: include/trace/events/block.h:472:
+		__field( dev_t,		old_dev		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5401: FILE: include/trace/events/block.h:473:
+		__field( sector_t,	old_sector	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5401: FILE: include/trace/events/block.h:473:
+		__field( sector_t,	old_sector	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5402: FILE: include/trace/events/block.h:474:
+		__array( char,		rwbs,	6	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5402: FILE: include/trace/events/block.h:474:
+		__array( char,		rwbs,	6	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5405: FILE: include/trace/events/block.h:477:
+	TP_fast_assign(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5433: FILE: include/trace/events/irq.h:1:
+#if !defined(_TRACE_IRQ_H) || defined(TRACE_HEADER_MULTI_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5467: FILE: include/trace/events/irq.h:35:
+TRACE_EVENT(irq_handler_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5472: FILE: include/trace/events/irq.h:40:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5473: FILE: include/trace/events/irq.h:41:
+		__field(	int,	irq		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5473: FILE: include/trace/events/irq.h:41:
+		__field(	int,	irq		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5474: FILE: include/trace/events/irq.h:42:
+		__string(	name,	action->name	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5474: FILE: include/trace/events/irq.h:42:
+		__string(	name,	action->name	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5477: FILE: include/trace/events/irq.h:45:
+	TP_fast_assign(

WARNING:TYPO_SPELLING: 'scuccessully' may be misspelled - perhaps 'successfully'?
#5492: FILE: include/trace/events/irq.h:60:
+ * @action->handler scuccessully handled this irq. Otherwise, the irq might be
                     ^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5497: FILE: include/trace/events/irq.h:65:
+TRACE_EVENT(irq_handler_exit,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5502: FILE: include/trace/events/irq.h:70:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5503: FILE: include/trace/events/irq.h:71:
+		__field(	int,	irq	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5503: FILE: include/trace/events/irq.h:71:
+		__field(	int,	irq	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5504: FILE: include/trace/events/irq.h:72:
+		__field(	int,	ret	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5504: FILE: include/trace/events/irq.h:72:
+		__field(	int,	ret	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5507: FILE: include/trace/events/irq.h:75:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5528: FILE: include/trace/events/irq.h:96:
+TRACE_EVENT(softirq_entry,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5533: FILE: include/trace/events/irq.h:101:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5534: FILE: include/trace/events/irq.h:102:
+		__field(	int,	vec			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5534: FILE: include/trace/events/irq.h:102:
+		__field(	int,	vec			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5537: FILE: include/trace/events/irq.h:105:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5557: FILE: include/trace/events/irq.h:125:
+TRACE_EVENT(softirq_exit,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5562: FILE: include/trace/events/irq.h:130:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5563: FILE: include/trace/events/irq.h:131:
+		__field(	int,	vec			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5563: FILE: include/trace/events/irq.h:131:
+		__field(	int,	vec			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5566: FILE: include/trace/events/irq.h:134:
+	TP_fast_assign(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5584: FILE: include/trace/events/kmem.h:1:
+#if !defined(_TRACE_KMEM_H) || defined(TRACE_HEADER_MULTI_READ)

WARNING:TYPO_SPELLING: 'wil' may be misspelled - perhaps 'will'?
#5597: FILE: include/trace/events/kmem.h:14:
+ * For example, if we have GFP_KERNEL before GFP_USER we wil get:
                                                          ^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'flags' - possible side-effects?
#5603: FILE: include/trace/events/kmem.h:20:
+#define show_gfp_flags(flags)						\
+	(flags) ? __print_flags(flags, "|",				\
+	{(unsigned long)GFP_HIGHUSER_MOVABLE,	"GFP_HIGHUSER_MOVABLE"}, \
+	{(unsigned long)GFP_HIGHUSER,		"GFP_HIGHUSER"},	\
+	{(unsigned long)GFP_USER,		"GFP_USER"},		\
+	{(unsigned long)GFP_TEMPORARY,		"GFP_TEMPORARY"},	\
+	{(unsigned long)GFP_KERNEL,		"GFP_KERNEL"},		\
+	{(unsigned long)GFP_NOFS,		"GFP_NOFS"},		\
+	{(unsigned long)GFP_ATOMIC,		"GFP_ATOMIC"},		\
+	{(unsigned long)GFP_NOIO,		"GFP_NOIO"},		\
+	{(unsigned long)__GFP_HIGH,		"GFP_HIGH"},		\
+	{(unsigned long)__GFP_WAIT,		"GFP_WAIT"},		\
+	{(unsigned long)__GFP_IO,		"GFP_IO"},		\
+	{(unsigned long)__GFP_COLD,		"GFP_COLD"},		\
+	{(unsigned long)__GFP_NOWARN,		"GFP_NOWARN"},		\
+	{(unsigned long)__GFP_REPEAT,		"GFP_REPEAT"},		\
+	{(unsigned long)__GFP_NOFAIL,		"GFP_NOFAIL"},		\
+	{(unsigned long)__GFP_NORETRY,		"GFP_NORETRY"},		\
+	{(unsigned long)__GFP_COMP,		"GFP_COMP"},		\
+	{(unsigned long)__GFP_ZERO,		"GFP_ZERO"},		\
+	{(unsigned long)__GFP_NOMEMALLOC,	"GFP_NOMEMALLOC"},	\
+	{(unsigned long)__GFP_HARDWALL,		"GFP_HARDWALL"},	\
+	{(unsigned long)__GFP_THISNODE,		"GFP_THISNODE"},	\
+	{(unsigned long)__GFP_RECLAIMABLE,	"GFP_RECLAIMABLE"},	\
+	{(unsigned long)__GFP_MOVABLE,		"GFP_MOVABLE"}		\
+	) : "GFP_NOWAIT"

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5631: FILE: include/trace/events/kmem.h:48:
+TRACE_EVENT(kmalloc,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5640: FILE: include/trace/events/kmem.h:57:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5641: FILE: include/trace/events/kmem.h:58:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5641: FILE: include/trace/events/kmem.h:58:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5642: FILE: include/trace/events/kmem.h:59:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5642: FILE: include/trace/events/kmem.h:59:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5643: FILE: include/trace/events/kmem.h:60:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5643: FILE: include/trace/events/kmem.h:60:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5644: FILE: include/trace/events/kmem.h:61:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5644: FILE: include/trace/events/kmem.h:61:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5645: FILE: include/trace/events/kmem.h:62:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5645: FILE: include/trace/events/kmem.h:62:
+		__field(	gfp_t,		gfp_flags	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5648: FILE: include/trace/events/kmem.h:65:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5657: FILE: include/trace/events/kmem.h:74:
+	TP_printk("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu gfp_flags=%s",
+		__entry->call_site,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5665: FILE: include/trace/events/kmem.h:82:
+TRACE_EVENT(kmem_cache_alloc,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5674: FILE: include/trace/events/kmem.h:91:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5675: FILE: include/trace/events/kmem.h:92:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5675: FILE: include/trace/events/kmem.h:92:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5676: FILE: include/trace/events/kmem.h:93:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5676: FILE: include/trace/events/kmem.h:93:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5677: FILE: include/trace/events/kmem.h:94:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5677: FILE: include/trace/events/kmem.h:94:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5678: FILE: include/trace/events/kmem.h:95:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5678: FILE: include/trace/events/kmem.h:95:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5679: FILE: include/trace/events/kmem.h:96:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5679: FILE: include/trace/events/kmem.h:96:
+		__field(	gfp_t,		gfp_flags	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5682: FILE: include/trace/events/kmem.h:99:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5691: FILE: include/trace/events/kmem.h:108:
+	TP_printk("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu gfp_flags=%s",
+		__entry->call_site,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5699: FILE: include/trace/events/kmem.h:116:
+TRACE_EVENT(kmalloc_node,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5709: FILE: include/trace/events/kmem.h:126:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5710: FILE: include/trace/events/kmem.h:127:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5710: FILE: include/trace/events/kmem.h:127:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5711: FILE: include/trace/events/kmem.h:128:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5711: FILE: include/trace/events/kmem.h:128:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5712: FILE: include/trace/events/kmem.h:129:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5712: FILE: include/trace/events/kmem.h:129:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5713: FILE: include/trace/events/kmem.h:130:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5713: FILE: include/trace/events/kmem.h:130:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5714: FILE: include/trace/events/kmem.h:131:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5714: FILE: include/trace/events/kmem.h:131:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5715: FILE: include/trace/events/kmem.h:132:
+		__field(	int,		node		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5715: FILE: include/trace/events/kmem.h:132:
+		__field(	int,		node		)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5718: FILE: include/trace/events/kmem.h:135:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5728: FILE: include/trace/events/kmem.h:145:
+	TP_printk("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu gfp_flags=%s node=%d",
+		__entry->call_site,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5737: FILE: include/trace/events/kmem.h:154:
+TRACE_EVENT(kmem_cache_alloc_node,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5747: FILE: include/trace/events/kmem.h:164:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5748: FILE: include/trace/events/kmem.h:165:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5748: FILE: include/trace/events/kmem.h:165:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5749: FILE: include/trace/events/kmem.h:166:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5749: FILE: include/trace/events/kmem.h:166:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5750: FILE: include/trace/events/kmem.h:167:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5750: FILE: include/trace/events/kmem.h:167:
+		__field(	size_t,		bytes_req	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5751: FILE: include/trace/events/kmem.h:168:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5751: FILE: include/trace/events/kmem.h:168:
+		__field(	size_t,		bytes_alloc	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5752: FILE: include/trace/events/kmem.h:169:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5752: FILE: include/trace/events/kmem.h:169:
+		__field(	gfp_t,		gfp_flags	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5753: FILE: include/trace/events/kmem.h:170:
+		__field(	int,		node		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5753: FILE: include/trace/events/kmem.h:170:
+		__field(	int,		node		)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5756: FILE: include/trace/events/kmem.h:173:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5766: FILE: include/trace/events/kmem.h:183:
+	TP_printk("call_site=%lx ptr=%p bytes_req=%zu bytes_alloc=%zu gfp_flags=%s node=%d",
+		__entry->call_site,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5775: FILE: include/trace/events/kmem.h:192:
+TRACE_EVENT(kfree,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5780: FILE: include/trace/events/kmem.h:197:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5781: FILE: include/trace/events/kmem.h:198:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5781: FILE: include/trace/events/kmem.h:198:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5782: FILE: include/trace/events/kmem.h:199:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5782: FILE: include/trace/events/kmem.h:199:
+		__field(	const void *,	ptr		)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5785: FILE: include/trace/events/kmem.h:202:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5794: FILE: include/trace/events/kmem.h:211:
+TRACE_EVENT(kmem_cache_free,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5799: FILE: include/trace/events/kmem.h:216:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#5800: FILE: include/trace/events/kmem.h:217:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5800: FILE: include/trace/events/kmem.h:217:
+		__field(	unsigned long,	call_site	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5801: FILE: include/trace/events/kmem.h:218:
+		__field(	const void *,	ptr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5801: FILE: include/trace/events/kmem.h:218:
+		__field(	const void *,	ptr		)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5804: FILE: include/trace/events/kmem.h:221:
+	TP_fast_assign(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5821: FILE: include/trace/events/lockdep.h:1:
+#if !defined(_TRACE_LOCKDEP_H) || defined(TRACE_HEADER_MULTI_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5833: FILE: include/trace/events/lockdep.h:13:
+TRACE_EVENT(lock_acquire,
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5835: FILE: include/trace/events/lockdep.h:15:
+	TP_PROTO(struct lockdep_map *lock, unsigned int subclass,
+		int trylock, int read, int check,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5840: FILE: include/trace/events/lockdep.h:20:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5845: FILE: include/trace/events/lockdep.h:25:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5856: FILE: include/trace/events/lockdep.h:36:
+TRACE_EVENT(lock_release,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5861: FILE: include/trace/events/lockdep.h:41:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5865: FILE: include/trace/events/lockdep.h:45:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5875: FILE: include/trace/events/lockdep.h:55:
+TRACE_EVENT(lock_contended,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5880: FILE: include/trace/events/lockdep.h:60:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5884: FILE: include/trace/events/lockdep.h:64:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5892: FILE: include/trace/events/lockdep.h:72:
+TRACE_EVENT(lock_acquired,
+	TP_PROTO(struct lockdep_map *lock, unsigned long ip, s64 waittime),

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5896: FILE: include/trace/events/lockdep.h:76:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#5901: FILE: include/trace/events/lockdep.h:81:
+	TP_fast_assign(

CHECK:SPACING: No space is necessary after a cast
#5904: FILE: include/trace/events/lockdep.h:84:
+		__entry->wait_usec = (unsigned long) waittime;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5907: FILE: include/trace/events/lockdep.h:87:
+	TP_printk("%s (%lu.%03lu us)", __get_str(name), __entry->wait_usec,
+				       __entry->wait_nsec_rem)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5925: FILE: include/trace/events/sched.h:1:
+#if !defined(_TRACE_SCHED_H) || defined(TRACE_HEADER_MULTI_READ)

ERROR:SPACING: space prohibited after that open parenthesis '('
#5942: FILE: include/trace/events/sched.h:159:
+		__field(	long,	prev_state			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5942: FILE: include/trace/events/sched.h:159:
+		__field(	long,	prev_state			)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5958: FILE: include/trace/events/sched.h:176:
+	TP_printk("task %s:%d [%d] (%s) ==> %s:%d [%d]",
 		__entry->prev_comm, __entry->prev_pid, __entry->prev_prio,

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5961: FILE: include/trace/events/sched.h:179:
+				{ 1, "S"} , { 2, "D" }, { 4, "T" }, { 8, "t" },
 				          ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6003: FILE: include/trace/events/skb.h:1:
+#if !defined(_TRACE_SKB_H) || defined(TRACE_HEADER_MULTI_READ)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6016: FILE: include/trace/events/skb.h:14:
+TRACE_EVENT(kfree_skb,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6021: FILE: include/trace/events/skb.h:19:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#6022: FILE: include/trace/events/skb.h:20:
+		__field(	void *,		skbaddr		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6022: FILE: include/trace/events/skb.h:20:
+		__field(	void *,		skbaddr		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#6023: FILE: include/trace/events/skb.h:21:
+		__field(	unsigned short,	protocol	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6023: FILE: include/trace/events/skb.h:21:
+		__field(	unsigned short,	protocol	)

ERROR:SPACING: space prohibited after that open parenthesis '('
#6024: FILE: include/trace/events/skb.h:22:
+		__field(	void *,		location	)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#6024: FILE: include/trace/events/skb.h:22:
+		__field(	void *,		location	)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6027: FILE: include/trace/events/skb.h:25:
+	TP_fast_assign(

WARNING:BRACES: braces {} are not necessary for single statement blocks
#6029: FILE: include/trace/events/skb.h:27:
+		if (skb) {
+			__entry->protocol = ntohs(skb->protocol);
+		}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6036: FILE: include/trace/events/skb.h:34:
+	TP_printk("skbaddr=%p protocol=%u location=%p",
+		__entry->skbaddr, __entry->protocol, __entry->location)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6049: FILE: include/trace/events/workqueue.h:1:
+#if !defined(_TRACE_WORKQUEUE_H) || defined(TRACE_HEADER_MULTI_READ)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6059: FILE: include/trace/events/workqueue.h:11:
+TRACE_EVENT(workqueue_insertion,
+
+	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
+
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6060: FILE: include/trace/events/workqueue.h:12:
+TRACE_EVENT(workqueue_insertion,
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6061: FILE: include/trace/events/workqueue.h:13:
+	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
+
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6063: FILE: include/trace/events/workqueue.h:15:
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6065: FILE: include/trace/events/workqueue.h:17:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6065: FILE: include/trace/events/workqueue.h:17:
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6066: FILE: include/trace/events/workqueue.h:18:
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6067: FILE: include/trace/events/workqueue.h:19:
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6068: FILE: include/trace/events/workqueue.h:20:
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6069: FILE: include/trace/events/workqueue.h:21:
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6071: FILE: include/trace/events/workqueue.h:23:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6071: FILE: include/trace/events/workqueue.h:23:
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6075: FILE: include/trace/events/workqueue.h:27:
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6078: FILE: include/trace/events/workqueue.h:30:
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6081: FILE: include/trace/events/workqueue.h:33:
+TRACE_EVENT(workqueue_execution,
+
+	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
+
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6082: FILE: include/trace/events/workqueue.h:34:
+TRACE_EVENT(workqueue_execution,
+

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6083: FILE: include/trace/events/workqueue.h:35:
+	TP_PROTO(struct task_struct *wq_thread, struct work_struct *work),
+
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6085: FILE: include/trace/events/workqueue.h:37:
+	TP_ARGS(wq_thread, work),
+
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6087: FILE: include/trace/events/workqueue.h:39:
+	TP_STRUCT__entry(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6087: FILE: include/trace/events/workqueue.h:39:
+	TP_STRUCT__entry(
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6088: FILE: include/trace/events/workqueue.h:40:
+		__array(char,		thread_comm,	TASK_COMM_LEN)
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6089: FILE: include/trace/events/workqueue.h:41:
+		__field(pid_t,		thread_pid)
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6090: FILE: include/trace/events/workqueue.h:42:
+		__field(work_func_t,	func)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6091: FILE: include/trace/events/workqueue.h:43:
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6093: FILE: include/trace/events/workqueue.h:45:
+	TP_fast_assign(

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6093: FILE: include/trace/events/workqueue.h:45:
+	TP_fast_assign(
+		memcpy(__entry->thread_comm, wq_thread->comm, TASK_COMM_LEN);
+		__entry->thread_pid	= wq_thread->pid;
+		__entry->func		= work->func;
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

WARNING:VSPRINTF_POINTER_EXTENSION: Invalid vsprintf pointer extension '%pF' - use %pS instead
#6097: FILE: include/trace/events/workqueue.h:49:
+	),
+
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)
+);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6100: FILE: include/trace/events/workqueue.h:52:
+	TP_printk("thread=%s:%d func=%pF", __entry->thread_comm,
+		__entry->thread_pid, __entry->func)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6105: FILE: include/trace/events/workqueue.h:57:
+TRACE_EVENT(workqueue_creation,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6110: FILE: include/trace/events/workqueue.h:62:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6116: FILE: include/trace/events/workqueue.h:68:
+	TP_fast_assign(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6123: FILE: include/trace/events/workqueue.h:75:
+	TP_printk("thread=%s:%d cpu=%d", __entry->thread_comm,
+		__entry->thread_pid, __entry->cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6127: FILE: include/trace/events/workqueue.h:79:
+TRACE_EVENT(workqueue_destruction,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6132: FILE: include/trace/events/workqueue.h:84:
+	TP_STRUCT__entry(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#6137: FILE: include/trace/events/workqueue.h:89:
+	TP_fast_assign(

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6155: FILE: include/trace/ftrace.h:1:
+/*

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6176: FILE: include/trace/ftrace.h:22:
+#define __field(type, item)		type	item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6176: FILE: include/trace/ftrace.h:22:
+#define __field(type, item)		type	item;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6179: FILE: include/trace/ftrace.h:25:
+#define __array(type, item, len)	type	item[len];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6179: FILE: include/trace/ftrace.h:25:
+#define __array(type, item, len)	type	item[len];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6182: FILE: include/trace/ftrace.h:28:
+#define __dynamic_array(type, item, len) unsigned short __data_loc_##item;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#6201: FILE: include/trace/ftrace.h:47:
+
+

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6218: FILE: include/trace/ftrace.h:64:
+#define __field(type, item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6218: FILE: include/trace/ftrace.h:64:
+#define __field(type, item);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6224: FILE: include/trace/ftrace.h:70:
+#define __dynamic_array(type, item, len)	int item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6230: FILE: include/trace/ftrace.h:76:
+#define TRACE_EVENT(call, proto, args, tstruct, assign, print)		\
+	struct ftrace_data_offsets_##call {				\
+		tstruct;						\
+	};

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6258: FILE: include/trace/ftrace.h:104:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#6258: FILE: include/trace/ftrace.h:104:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#6258: FILE: include/trace/ftrace.h:104:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6258: FILE: include/trace/ftrace.h:104:
+#define __field(type, item)					\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item ";\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6267: FILE: include/trace/ftrace.h:113:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#6267: FILE: include/trace/ftrace.h:113:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#6267: FILE: include/trace/ftrace.h:113:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6267: FILE: include/trace/ftrace.h:113:
+#define __array(type, item, len)						\
+	ret = trace_seq_printf(s, "\tfield:" #type " " #item "[" #len "];\t"	\
+			       "offset:%u;\tsize:%u;\n",		\
+			       (unsigned int)offsetof(typeof(field), item), \
+			       (unsigned int)sizeof(field.item));	\
+	if (!ret)							\
+		return 0;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6276: FILE: include/trace/ftrace.h:122:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_seq_printf(s, "\tfield:__data_loc " #item ";\t"	       \
+			       "offset:%u;\tsize:%u;\n",		       \
+			       (unsigned int)offsetof(typeof(field),	       \
+					__data_loc_##item),		       \
+			       (unsigned int)sizeof(field.__data_loc_##item)); \
+	if (!ret)							       \
+		return 0;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6276: FILE: include/trace/ftrace.h:122:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_seq_printf(s, "\tfield:__data_loc " #item ";\t"	       \
+			       "offset:%u;\tsize:%u;\n",		       \
+			       (unsigned int)offsetof(typeof(field),	       \
+					__data_loc_##item),		       \
+			       (unsigned int)sizeof(field.__data_loc_##item)); \
+	if (!ret)							       \
+		return 0;

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: __always_unused or __maybe_unused is preferred over __attribute__((__unused__))
#6306: FILE: include/trace/ftrace.h:152:
+	struct ftrace_raw_##call field __attribute__((unused));		\

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#6367: FILE: include/trace/ftrace.h:213:
+#define __get_str(field) (char *)__get_dynamic_array(field)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#6414: FILE: include/trace/ftrace.h:260:
+^I$

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6418: FILE: include/trace/ftrace.h:264:
+#define __field(type, item)						\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#6418: FILE: include/trace/ftrace.h:264:
+#define __field(type, item)						\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#6418: FILE: include/trace/ftrace.h:264:
+#define __field(type, item)						\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6418: FILE: include/trace/ftrace.h:264:
+#define __field(type, item)						\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6426: FILE: include/trace/ftrace.h:272:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#6426: FILE: include/trace/ftrace.h:272:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'len' may be better as '(len)' to avoid precedence issues
#6426: FILE: include/trace/ftrace.h:272:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#6426: FILE: include/trace/ftrace.h:272:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6426: FILE: include/trace/ftrace.h:272:
+#define __array(type, item, len)					\
+	BUILD_BUG_ON(len > MAX_FILTER_STR_VAL);				\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6435: FILE: include/trace/ftrace.h:281:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\
+				offsetof(typeof(field), __data_loc_##item),    \
+				 sizeof(field.__data_loc_##item), 0);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6435: FILE: include/trace/ftrace.h:281:
+#define __dynamic_array(type, item, len)				       \
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\
+				offsetof(typeof(field), __data_loc_##item),    \
+				 sizeof(field.__data_loc_##item), 0);

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#6436: FILE: include/trace/ftrace.h:282:
+	ret = trace_define_field(event_call, "__data_loc" "[" #type "]", #item,\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6479: FILE: include/trace/ftrace.h:325:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'item' may be better as '(item)' to avoid precedence issues
#6479: FILE: include/trace/ftrace.h:325:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6479: FILE: include/trace/ftrace.h:325:
+#define __dynamic_array(type, item, len)				\
+	__data_offsets->item = __data_size +				\
+			       offsetof(typeof(*entry), __data);	\
+	__data_size += (len) * sizeof(type);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#6588: FILE: include/trace/ftrace.h:434:
+ * __attribute__((__aligned__(4)))

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#6589: FILE: include/trace/ftrace.h:435:
+ * __attribute__((section("_ftrace_events"))) event_<call> = {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6607: FILE: include/trace/ftrace.h:453:
+	extern void perf_tpcounter_event(int);				\

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#6607: FILE: include/trace/ftrace.h:453:
+	extern void perf_tpcounter_event(int);				\

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#6647: FILE: include/trace/ftrace.h:493:
+#define __dynamic_array(type, item, len)				\
+	__entry->__data_loc_##item = __data_offsets.item;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6647: FILE: include/trace/ftrace.h:493:
+#define __dynamic_array(type, item, len)				\
+	__entry->__data_loc_##item = __data_offsets.item;

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6651: FILE: include/trace/ftrace.h:497:
+#define __string(item, src) __dynamic_array(char, item, -1)       ^I\$

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#6654: FILE: include/trace/ftrace.h:500:
+#define __assign_str(dst, src)						\
+	strcpy(__get_str(dst), src);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'call' - possible side-effects?
#6658: FILE: include/trace/ftrace.h:504:
+#define TRACE_EVENT(call, proto, args, tstruct, assign, print)		\
+_TRACE_PROFILE(call, PARAMS(proto), PARAMS(args))			\
+									\
+static struct ftrace_event_call event_##call;				\
+									\
+static void ftrace_raw_event_##call(proto)				\
+{									\
+	struct ftrace_data_offsets_##call __maybe_unused __data_offsets;\
+	struct ftrace_event_call *event_call = &event_##call;		\
+	struct ring_buffer_event *event;				\
+	struct ftrace_raw_##call *entry;				\
+	unsigned long irq_flags;					\
+	int __data_size;						\
+	int pc;								\
+									\
+	local_save_flags(irq_flags);					\
+	pc = preempt_count();						\
+									\
+	__data_size = ftrace_get_offsets_##call(&__data_offsets, args); \
+									\
+	event = trace_current_buffer_lock_reserve(event_##call.id,	\
+				 sizeof(*entry) + __data_size,		\
+				 irq_flags, pc);			\
+	if (!event)							\
+		return;							\
+	entry	= ring_buffer_event_data(event);			\
+									\
+									\
+	tstruct								\
+									\
+	{ assign; }							\
+									\
+	if (!filter_current_check_discard(event_call, entry, event))	\
+		trace_nowake_buffer_unlock_commit(event, irq_flags, pc); \
+}									\
+									\
+static int ftrace_raw_reg_event_##call(void)				\
+{									\
+	int ret;							\
+									\
+	ret = register_trace_##call(ftrace_raw_event_##call);		\
+	if (ret)							\
+		pr_info("event trace: Could not activate trace point "	\
+			"probe to " #call "\n");			\
+	return ret;							\
+}									\
+									\
+static void ftrace_raw_unreg_event_##call(void)				\
+{									\
+	unregister_trace_##call(ftrace_raw_event_##call);		\
+}									\
+									\
+static struct trace_event ftrace_event_type_##call = {			\
+	.trace			= ftrace_raw_output_##call,		\
+};									\
+									\
+static int ftrace_raw_init_event_##call(void)				\
+{									\
+	int id;								\
+									\
+	id = register_ftrace_event(&ftrace_event_type_##call);		\
+	if (!id)							\
+		return -ENODEV;						\
+	event_##call.id = id;						\
+	INIT_LIST_HEAD(&event_##call.fields);				\
+	init_preds(&event_##call);					\
+	return 0;							\
+}									\
+									\
+static struct ftrace_event_call __used					\
+__attribute__((__aligned__(4)))						\
+__attribute__((section("_ftrace_events"))) event_##call = {		\
+	.name			= #call,				\
+	.system			= __stringify(TRACE_SYSTEM),		\
+	.event			= &ftrace_event_type_##call,		\
+	.raw_init		= ftrace_raw_init_event_##call,		\
+	.regfunc		= ftrace_raw_reg_event_##call,		\
+	.unregfunc		= ftrace_raw_unreg_event_##call,	\
+	.show_format		= ftrace_format_##call,			\
+	.define_fields		= ftrace_define_fields_##call,		\
+	_TRACE_PROFILE_INIT(call)					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'proto' - possible side-effects?
#6658: FILE: include/trace/ftrace.h:504:
+#define TRACE_EVENT(call, proto, args, tstruct, assign, print)		\
+_TRACE_PROFILE(call, PARAMS(proto), PARAMS(args))			\
+									\
+static struct ftrace_event_call event_##call;				\
+									\
+static void ftrace_raw_event_##call(proto)				\
+{									\
+	struct ftrace_data_offsets_##call __maybe_unused __data_offsets;\
+	struct ftrace_event_call *event_call = &event_##call;		\
+	struct ring_buffer_event *event;				\
+	struct ftrace_raw_##call *entry;				\
+	unsigned long irq_flags;					\
+	int __data_size;						\
+	int pc;								\
+									\
+	local_save_flags(irq_flags);					\
+	pc = preempt_count();						\
+									\
+	__data_size = ftrace_get_offsets_##call(&__data_offsets, args); \
+									\
+	event = trace_current_buffer_lock_reserve(event_##call.id,	\
+				 sizeof(*entry) + __data_size,		\
+				 irq_flags, pc);			\
+	if (!event)							\
+		return;							\
+	entry	= ring_buffer_event_data(event);			\
+									\
+									\
+	tstruct								\
+									\
+	{ assign; }							\
+									\
+	if (!filter_current_check_discard(event_call, entry, event))	\
+		trace_nowake_buffer_unlock_commit(event, irq_flags, pc); \
+}									\
+									\
+static int ftrace_raw_reg_event_##call(void)				\
+{									\
+	int ret;							\
+									\
+	ret = register_trace_##call(ftrace_raw_event_##call);		\
+	if (ret)							\
+		pr_info("event trace: Could not activate trace point "	\
+			"probe to " #call "\n");			\
+	return ret;							\
+}									\
+									\
+static void ftrace_raw_unreg_event_##call(void)				\
+{									\
+	unregister_trace_##call(ftrace_raw_event_##call);		\
+}									\
+									\
+static struct trace_event ftrace_event_type_##call = {			\
+	.trace			= ftrace_raw_output_##call,		\
+};									\
+									\
+static int ftrace_raw_init_event_##call(void)				\
+{									\
+	int id;								\
+									\
+	id = register_ftrace_event(&ftrace_event_type_##call);		\
+	if (!id)							\
+		return -ENODEV;						\
+	event_##call.id = id;						\
+	INIT_LIST_HEAD(&event_##call.fields);				\
+	init_preds(&event_##call);					\
+	return 0;							\
+}									\
+									\
+static struct ftrace_event_call __used					\
+__attribute__((__aligned__(4)))						\
+__attribute__((section("_ftrace_events"))) event_##call = {		\
+	.name			= #call,				\
+	.system			= __stringify(TRACE_SYSTEM),		\
+	.event			= &ftrace_event_type_##call,		\
+	.raw_init		= ftrace_raw_init_event_##call,		\
+	.regfunc		= ftrace_raw_reg_event_##call,		\
+	.unregfunc		= ftrace_raw_unreg_event_##call,	\
+	.show_format		= ftrace_format_##call,			\
+	.define_fields		= ftrace_define_fields_##call,		\
+	_TRACE_PROFILE_INIT(call)					\
+}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'args' - possible side-effects?
#6658: FILE: include/trace/ftrace.h:504:
+#define TRACE_EVENT(call, proto, args, tstruct, assign, print)		\
+_TRACE_PROFILE(call, PARAMS(proto), PARAMS(args))			\
+									\
+static struct ftrace_event_call event_##call;				\
+									\
+static void ftrace_raw_event_##call(proto)				\
+{									\
+	struct ftrace_data_offsets_##call __maybe_unused __data_offsets;\
+	struct ftrace_event_call *event_call = &event_##call;		\
+	struct ring_buffer_event *event;				\
+	struct ftrace_raw_##call *entry;				\
+	unsigned long irq_flags;					\
+	int __data_size;						\
+	int pc;								\
+									\
+	local_save_flags(irq_flags);					\
+	pc = preempt_count();						\
+									\
+	__data_size = ftrace_get_offsets_##call(&__data_offsets, args); \
+									\
+	event = trace_current_buffer_lock_reserve(event_##call.id,	\
+				 sizeof(*entry) + __data_size,		\
+				 irq_flags, pc);			\
+	if (!event)							\
+		return;							\
+	entry	= ring_buffer_event_data(event);			\
+									\
+									\
+	tstruct								\
+									\
+	{ assign; }							\
+									\
+	if (!filter_current_check_discard(event_call, entry, event))	\
+		trace_nowake_buffer_unlock_commit(event, irq_flags, pc); \
+}									\
+									\
+static int ftrace_raw_reg_event_##call(void)				\
+{									\
+	int ret;							\
+									\
+	ret = register_trace_##call(ftrace_raw_event_##call);		\
+	if (ret)							\
+		pr_info("event trace: Could not activate trace point "	\
+			"probe to " #call "\n");			\
+	return ret;							\
+}									\
+									\
+static void ftrace_raw_unreg_event_##call(void)				\
+{									\
+	unregister_trace_##call(ftrace_raw_event_##call);		\
+}									\
+									\
+static struct trace_event ftrace_event_type_##call = {			\
+	.trace			= ftrace_raw_output_##call,		\
+};									\
+									\
+static int ftrace_raw_init_event_##call(void)				\
+{									\
+	int id;								\
+									\
+	id = register_ftrace_event(&ftrace_event_type_##call);		\
+	if (!id)							\
+		return -ENODEV;						\
+	event_##call.id = id;						\
+	INIT_LIST_HEAD(&event_##call.fields);				\
+	init_preds(&event_##call);					\
+	return 0;							\
+}									\
+									\
+static struct ftrace_event_call __used					\
+__attribute__((__aligned__(4)))						\
+__attribute__((section("_ftrace_events"))) event_##call = {		\
+	.name			= #call,				\
+	.system			= __stringify(TRACE_SYSTEM),		\
+	.event			= &ftrace_event_type_##call,		\
+	.raw_init		= ftrace_raw_init_event_##call,		\
+	.regfunc		= ftrace_raw_reg_event_##call,		\
+	.unregfunc		= ftrace_raw_unreg_event_##call,	\
+	.show_format		= ftrace_format_##call,			\
+	.define_fields		= ftrace_define_fields_##call,		\
+	_TRACE_PROFILE_INIT(call)					\
+}

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#6728: FILE: include/trace/ftrace.h:574:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#6729: FILE: include/trace/ftrace.h:575:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:TYPO_SPELLING: 'hidding' may be misspelled - perhaps 'hiding'?
#7513: FILE: kernel/trace/Kconfig:64:
+# hidding of the automatic options options.
   ^^^^^^^

WARNING:REPEATED_WORD: Possible repeated word: 'options'
#7513: FILE: kernel/trace/Kconfig:64:
+# hidding of the automatic options options.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#7535: FILE: kernel/trace/Kconfig:96:
+menuconfig FTRACE
+	bool "Tracers"
+	default y if DEBUG_KERNEL
+	help
+	 Enable the kernel tracing infrastructure.
+

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#7609: FILE: kernel/trace/Kconfig:195:
+config ENABLE_DEFAULT_TRACERS
+	bool "Trace process context switches and events"
+	depends on !GENERIC_TRACER
 	select TRACING
 	help
 	  This tracer hooks to various trace points in the kernel
 	  allowing the user to pick and choose which trace point they
+	  want to trace. It also includes the sched_switch tracer plugin.
+	  want to trace. It also includes the sched_switch tracer plugin.
 

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#7659: FILE: kernel/trace/Kconfig:250:
+config BRANCH_PROFILE_NONE
+	bool "No branch profiling"
+	help
+	 No branch profiling. Branch profiling adds a bit of overhead.
+	 Only enable it if you want to analyse the branching behavior.
+	 Otherwise keep it disabled.
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#8067: FILE: kernel/trace/blktrace.c:1093:
+	for (i = 0; i < pdu_len; i++) {
+

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#8104: FILE: kernel/trace/blktrace.c:1126:
+		return trace_seq_printf(s, "[%s]\n", cmd);
+	} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#8126: FILE: kernel/trace/blktrace.c:1144:
+		return 0;
+	} else {

WARNING:SPLIT_STRING: quoted string split across lines
#8496: FILE: kernel/trace/ftrace.c:352:
+	seq_printf(m, "  Function                               "
+		   "Hit    Time            Avg\n"

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#8498: FILE: kernel/trace/ftrace.c:354:
+		      "  --------                               "
+		   "---    ----            ---\n");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#8520: FILE: kernel/trace/ftrace.c:376:
+	seq_printf(m, "    ");

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#8541: FILE: kernel/trace/ftrace.c:397:
+	pg = stat->pages = stat->start;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#8581: FILE: kernel/trace/ftrace.c:437:
+	pg = stat->start = stat->pages;

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*stat->hash)...) over kzalloc(sizeof(struct hlist_head)...)
#8629: FILE: kernel/trace/ftrace.c:485:
+	stat->hash = kzalloc(sizeof(struct hlist_head) * size, GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#8629: FILE: kernel/trace/ftrace.c:485:
+	stat->hash = kzalloc(sizeof(struct hlist_head) * size, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#8817: FILE: kernel/trace/ftrace.c:673:
+static struct ftrace_ops ftrace_profile_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8833: FILE: kernel/trace/ftrace.c:689:
+ftrace_profile_write(struct file *filp, const char __user *ubuf,
                                   ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#8848: FILE: kernel/trace/ftrace.c:704:
+	ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#8887: FILE: kernel/trace/ftrace.c:743:
+ftrace_profile_read(struct file *filp, char __user *ubuf,
                                  ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#8888: FILE: kernel/trace/ftrace.c:744:
+ftrace_profile_read(struct file *filp, char __user *ubuf,
+		     size_t cnt, loff_t *ppos)

WARNING:SPLIT_STRING: quoted string split across lines
#8954: FILE: kernel/trace/ftrace.c:810:
+		pr_warning("Could not create debugfs "
+			   "'function_profile_enabled' entry\n");

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#9030: FILE: kernel/trace/ftrace.c:2389:
+__setup("ftrace_notrace=", set_ftrace_notrace);

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#9037: FILE: kernel/trace/ftrace.c:2396:
+__setup("ftrace_filter=", set_ftrace_filter);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9072: FILE: kernel/trace/ftrace.c:2723:
+	trace_create_file("available_filter_functions", 0444,
+			d_tracer, NULL, &ftrace_avail_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9079: FILE: kernel/trace/ftrace.c:2726:
+	trace_create_file("failures", 0444,
+			d_tracer, NULL, &ftrace_failures_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9087: FILE: kernel/trace/ftrace.c:2729:
+	trace_create_file("set_ftrace_filter", 0644, d_tracer,
+			NULL, &ftrace_filter_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9091: FILE: kernel/trace/ftrace.c:2732:
+	trace_create_file("set_ftrace_notrace", 0644, d_tracer,
 				    NULL, &ftrace_notrace_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9099: FILE: kernel/trace/ftrace.c:2736:
+	trace_create_file("set_graph_function", 0444, d_tracer,
 				    NULL,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rec->ip >= s'
#9126: FILE: kernel/trace/ftrace.c:2788:
+		if ((rec->ip >= s) && (rec->ip < e)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rec->ip < e'
#9126: FILE: kernel/trace/ftrace.c:2788:
+		if ((rec->ip >= s) && (rec->ip < e)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#9213: FILE: kernel/trace/ftrace.c:3067:
+	trace_create_file("set_ftrace_pid", 0644, d_tracer,
+			    NULL, &ftrace_pid_fops);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#9363: FILE: kernel/trace/ring_buffer.c:210:
+#define RINGBUF_TYPE_DATA 0 ... RINGBUF_TYPE_DATA_TYPE_LEN_MAX

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#9373: FILE: kernel/trace/ring_buffer.c:220:
+	return event->type_len == RINGBUF_TYPE_PADDING
+			&& event->time_delta == 0;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#9451: FILE: kernel/trace/ring_buffer.c:292:
+	BUG_ON(event->type_len > RINGBUF_TYPE_DATA_TYPE_LEN_MAX);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9561: FILE: kernel/trace/ring_buffer.c:641:
+struct ring_buffer *__ring_buffer_alloc(unsigned long size, unsigned flags,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#9662: FILE: kernel/trace/ring_buffer.c:1173:
 
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#9709: FILE: kernel/trace/ring_buffer.c:1206:
+	if (unlikely(in_nmi())) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#9714: FILE: kernel/trace/ring_buffer.c:1211:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#9895: FILE: kernel/trace/ring_buffer.c:1306:
+		  unsigned type, unsigned long length, u64 *ts)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn_once([subsystem]dev, ... then dev_warn_once(dev, ... then pr_warn_once(...  to printk_once(KERN_WARNING ...
#10103: FILE: kernel/trace/ring_buffer.c:1547:
+	printk_once(KERN_WARNING "Tracing recursion: depth[%ld]:"

WARNING:SPLIT_STRING: quoted string split across lines
#10104: FILE: kernel/trace/ring_buffer.c:1548:
+	printk_once(KERN_WARNING "Tracing recursion: depth[%ld]:"
+		    "HC[%lu]:SC[%lu]:NMI[%lu]\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#10270: FILE: kernel/trace/ring_buffer.c:1774:
+
+}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#10399: FILE: kernel/trace/ring_buffer.c:2260:
+	if (event->type_len <= RINGBUF_TYPE_DATA_TYPE_LEN_MAX
+			|| rb_discarded_event(event))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#10637: FILE: kernel/trace/ring_buffer.c:3090:
+	trace_create_file("tracing_on", 0644, d_tracer,
+			    &ring_buffer_flags, &rb_simple_fops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#10647: FILE: kernel/trace/ring_buffer_benchmark.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#10741: FILE: kernel/trace/ring_buffer_benchmark.c:95:
+		for (i = 0; i < commit && !kill_test; i += inc) {
+

WARNING:TYPO_SPELLING: 'Caculate' may be misspelled - perhaps 'Calculate'?
#10949: FILE: kernel/trace/ring_buffer_benchmark.c:303:
+		/* Caculate the average time in nanosecs */
 		   ^^^^^^^^

WARNING:MEMORY_BARRIER: memory barrier without comment
#10995: FILE: kernel/trace/ring_buffer_benchmark.c:349:
+			smp_wmb();

WARNING:TYPO_SPELLING: 'overwite' may be misspelled - perhaps 'overwrite'?
#11018: FILE: kernel/trace/ring_buffer_benchmark.c:372:
+	/* make a one meg buffer in overwite mode */
 	                            ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11434: FILE: kernel/trace/trace.c:2449:
+tracing_saved_cmdlines_read(struct file *file, char __user *ubuf,
+				size_t cnt, loff_t *ppos)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#11443: FILE: kernel/trace/trace.c:2458:
+	file_buf = kmalloc(SAVED_CMDLINES*(16+TASK_COMM_LEN), GFP_KERNEL);
 	                                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#11443: FILE: kernel/trace/trace.c:2458:
+	file_buf = kmalloc(SAVED_CMDLINES*(16+TASK_COMM_LEN), GFP_KERNEL);
 	                                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11478: FILE: kernel/trace/trace.c:2493:
+    .open       = tracing_open_generic,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#11479: FILE: kernel/trace/trace.c:2494:
+    .read       = tracing_saved_cmdlines_read,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#11572: FILE: kernel/trace/trace.c:3622:
+tracing_stats_read(struct file *filp, char __user *ubuf,
                                 ^^^^

WARNING:USE_NEGATIVE_ERRNO: return of an errno should typically be negative (ie: return -ENOMEM)
#11582: FILE: kernel/trace/trace.c:3632:
+		return ENOMEM;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11631: FILE: kernel/trace/trace.c:3765:
+	trace_create_file("trace_pipe", 0444, d_cpu,
+			(void *) cpu, &tracing_pipe_fops);

CHECK:SPACING: No space is necessary after a cast
#11631: FILE: kernel/trace/trace.c:3765:
+			(void *) cpu, &tracing_pipe_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11639: FILE: kernel/trace/trace.c:3769:
+	trace_create_file("trace", 0644, d_cpu,
+			(void *) cpu, &tracing_fops);

CHECK:SPACING: No space is necessary after a cast
#11639: FILE: kernel/trace/trace.c:3769:
+			(void *) cpu, &tracing_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11642: FILE: kernel/trace/trace.c:3772:
+	trace_create_file("trace_pipe_raw", 0444, d_cpu,
+			(void *) cpu, &tracing_buffers_fops);

CHECK:SPACING: No space is necessary after a cast
#11642: FILE: kernel/trace/trace.c:3772:
+			(void *) cpu, &tracing_buffers_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11649: FILE: kernel/trace/trace.c:3775:
+	trace_create_file("stats", 0444, d_cpu,
+			(void *) cpu, &tracing_stats_fops);

CHECK:SPACING: No space is necessary after a cast
#11649: FILE: kernel/trace/trace.c:3775:
+			(void *) cpu, &tracing_stats_fops);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#11672: FILE: kernel/trace/trace.c:3946:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11690: FILE: kernel/trace/trace.c:3983:
+	topt->entry = trace_create_file(opt->name, 0644, t_options, topt,
 				    &trace_options_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11747: FILE: kernel/trace/trace.c:4069:
+	trace_create_file("tracing_enabled", 0644, d_tracer,
+			&global_trace, &tracing_ctrl_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11754: FILE: kernel/trace/trace.c:4072:
+	trace_create_file("trace_options", 0644, d_tracer,
+			NULL, &tracing_iter_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11758: FILE: kernel/trace/trace.c:4075:
+	trace_create_file("tracing_cpumask", 0644, d_tracer,
+			NULL, &tracing_cpumask_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11761: FILE: kernel/trace/trace.c:4078:
+	trace_create_file("trace", 0644, d_tracer,
+			(void *) TRACE_PIPE_ALL_CPU, &tracing_fops);

CHECK:SPACING: No space is necessary after a cast
#11761: FILE: kernel/trace/trace.c:4078:
+			(void *) TRACE_PIPE_ALL_CPU, &tracing_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11802: FILE: kernel/trace/trace.c:4081:
+	trace_create_file("available_tracers", 0444, d_tracer,
+			&global_trace, &show_traces_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11805: FILE: kernel/trace/trace.c:4084:
+	trace_create_file("current_tracer", 0644, d_tracer,
+			&global_trace, &set_tracer_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11808: FILE: kernel/trace/trace.c:4087:
+	trace_create_file("tracing_max_latency", 0644, d_tracer,
+			&tracing_max_latency, &tracing_max_lat_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11811: FILE: kernel/trace/trace.c:4090:
+	trace_create_file("tracing_thresh", 0644, d_tracer,
+			&tracing_thresh, &tracing_max_lat_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11814: FILE: kernel/trace/trace.c:4093:
+	trace_create_file("README", 0444, d_tracer,
+			NULL, &tracing_readme_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11817: FILE: kernel/trace/trace.c:4096:
+	trace_create_file("trace_pipe", 0444, d_tracer,
 			(void *) TRACE_PIPE_ALL_CPU, &tracing_pipe_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11835: FILE: kernel/trace/trace.c:4099:
+	trace_create_file("buffer_size_kb", 0644, d_tracer,
+			&global_trace, &tracing_entries_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11838: FILE: kernel/trace/trace.c:4102:
+	trace_create_file("trace_marker", 0220, d_tracer,
+			NULL, &tracing_mark_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11841: FILE: kernel/trace/trace.c:4105:
+	trace_create_file("saved_cmdlines", 0444, d_tracer,
+			NULL, &tracing_saved_cmdlines_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#11851: FILE: kernel/trace/trace.c:4109:
+	trace_create_file("dyn_ftrace_total_info", 0444, d_tracer,
+			&ftrace_update_tot_cnt, &tracing_dyn_info_fops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12053: FILE: kernel/trace/trace.h:541:
+extern int trace_selftest_startup_hw_branches(struct tracer *trace,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12155: FILE: kernel/trace/trace.h:769:
+extern void print_event_filter(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12174: FILE: kernel/trace/trace.h:771:
+extern int apply_event_filter(struct ftrace_event_call *call,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12176: FILE: kernel/trace/trace.h:773:
+extern int apply_subsystem_event_filter(struct event_subsystem *system,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#12178: FILE: kernel/trace/trace.h:775:
+extern void print_subsystem_event_filter(struct event_subsystem *system,

CHECK:SPACING: spaces preferred around that '*' (ctx:WxV)
#12226: FILE: kernel/trace/trace.h:823:
+	u##size *addr = (u##size *)(event + pred->offset);		\
 	        ^

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#12260: FILE: kernel/trace/trace.h:839:
+#define TRACE_EVENT_FORMAT(call, proto, args, fmt, tstruct, tpfmt)	\
+	extern struct ftrace_event_call event_##call;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#12390: FILE: kernel/trace/trace_event_types.h:61:
+TRACE_EVENT_FORMAT_NOFILTER(special, TRACE_SPECIAL, special_entry, ignore,
 	TRACE_STRUCT(

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#12399: FILE: kernel/trace/trace_event_types.h:125:
+		TRACE_FIELD_SPECIAL(char func[TRACE_FUNC_SIZE+1], func,
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#12400: FILE: kernel/trace/trace_event_types.h:126:
+				    TRACE_FUNC_SIZE+1, func)
 				                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#12401: FILE: kernel/trace/trace_event_types.h:127:
+		TRACE_FIELD_SPECIAL(char file[TRACE_FUNC_SIZE+1], file,
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#12402: FILE: kernel/trace/trace_event_types.h:128:
+				    TRACE_FUNC_SIZE+1, file)
 				                   ^

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#12439: FILE: kernel/trace/trace_events.c:24:
+DEFINE_MUTEX(event_mutex);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#12533: FILE: kernel/trace/trace_events.c:122:
+	list_for_each_entry(call, &ftrace_events, list) {
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12729: FILE: kernel/trace/trace_events.c:428:
+system_enable_read(struct file *filp, char __user *ubuf, size_t cnt,
                                 ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12771: FILE: kernel/trace/trace_events.c:470:
+system_enable_write(struct file *filp, const char __user *ubuf, size_t cnt,
                                  ^^^^

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#12787: FILE: kernel/trace/trace_events.c:486:
+	ret = strict_strtoul(buf, 10, &val);

CHECK:SPACING: No space is necessary after a cast
#12870: FILE: kernel/trace/trace_events.c:643:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#12879: FILE: kernel/trace/trace_events.c:649:
+	free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#12929: FILE: kernel/trace/trace_events.c:699:
+		free_page((unsigned long) buf);

CHECK:SPACING: No space is necessary after a cast
#12939: FILE: kernel/trace/trace_events.c:705:
+	free_page((unsigned long) buf);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#12950: FILE: kernel/trace/trace_events.c:715:
+show_header(struct file *filp, char __user *ubuf, size_t cnt, loff_t *ppos)
                          ^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*system->filter)...) over kzalloc(sizeof(struct event_filter)...)
#13019: FILE: kernel/trace/trace_events.c:867:
+	system->filter = kzalloc(sizeof(struct event_filter), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#13021: FILE: kernel/trace/trace_events.c:869:
+	if (!system->filter) {
+		pr_warning("Could not allocate filter for subsystem "

WARNING:SPLIT_STRING: quoted string split across lines
#13022: FILE: kernel/trace/trace_events.c:870:
+		pr_warning("Could not allocate filter for subsystem "
+			   "'%s'\n", name);

WARNING:SPLIT_STRING: quoted string split across lines
#13032: FILE: kernel/trace/trace_events.c:880:
+		pr_warning("Could not create debugfs "
+			   "'%s/filter' entry\n", name);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'event' - possible side-effects?
#13117: FILE: kernel/trace/trace_events.c:952:
+#define for_each_event(event, start, end)			\
+	for (event = start;					\
+	     (unsigned long)event < (unsigned long)end;		\
+	     event++)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#13133: FILE: kernel/trace/trace_events.c:968:
+	struct file_operations		id;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct file_operations should normally be const
#13134: FILE: kernel/trace/trace_events.c:969:
+	struct file_operations		enable;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#13135: FILE: kernel/trace/trace_events.c:970:
+	struct file_operations		format;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#13136: FILE: kernel/trace/trace_events.c:971:
+	struct file_operations		filter;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13282: FILE: kernel/trace/trace_events.c:1117:
+extern struct ftrace_event_call __start_ftrace_events[];

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#13283: FILE: kernel/trace/trace_events.c:1118:
+extern struct ftrace_event_call __stop_ftrace_events[];

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#13347: FILE: kernel/trace/trace_events.c:1195:
+	msleep(1);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#13357: FILE: kernel/trace/trace_events.c:1205:
+	if (!test_malloc)
+		pr_info("failed to kmalloc\n");

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#13378: FILE: kernel/trace/trace_events.c:1226:
+	msleep(1);

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#13395: FILE: kernel/trace/trace_events.c:1243:
+	list_for_each_entry(call, &ftrace_events, list) {
+

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#13416: FILE: kernel/trace/trace_events.c:1264:
+		pr_cont("OK\n");

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#13424: FILE: kernel/trace/trace_events.c:1272:
+	list_for_each_entry(system, &event_subsystems, list) {
+

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#13445: FILE: kernel/trace/trace_events.c:1293:
+		pr_cont("OK\n");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#13468: FILE: kernel/trace/trace_events.c:1316:
+	pr_cont("OK\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#13512: FILE: kernel/trace/trace_events.c:1360:
+static struct ftrace_ops trace_ops __initdata  =
+{

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#13531: FILE: kernel/trace/trace_events.c:1379:
+{
+

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#13559: FILE: kernel/trace/trace_events_filter.c:33:
+enum filter_op_ids
+{

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#13808: FILE: kernel/trace/trace_events_filter.c:257:
+	BUG_ON(!filter->filter_string);

CHECK:SPACING: No space is necessary after a cast
#13864: FILE: kernel/trace/trace_events_filter.c:290:
+	free_page((unsigned long) buf);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#14008: FILE: kernel/trace/trace_events_filter.c:394:
+	filter = call->filter = kzalloc(sizeof(*filter), GFP_KERNEL);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#14021: FILE: kernel/trace/trace_events_filter.c:401:
+	filter->preds = kzalloc(MAX_FILTER_PRED * sizeof(pred), GFP_KERNEL);

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#14249: FILE: kernel/trace/trace_events_filter.c:583:
+		return filter_add_pred_fn(ps, call, pred, fn);
+	} else {

WARNING:CONSIDER_KSTRTO: strict_strtoull is obsolete, use kstrtoull instead
#14250: FILE: kernel/trace/trace_events_filter.c:584:
+		if (strict_strtoull(pred->str_val, 0, &val)) {

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#14290: FILE: kernel/trace/trace_events_filter.c:613:
+		filter->preds = kzalloc(MAX_FILTER_PRED * sizeof(pred),
 					GFP_KERNEL);

CHECK:BRACES: braces {} should be used on all arms of this statement
#14778: FILE: kernel/trace/trace_events_filter.c:1020:
+			if (!operand1)
[...]
+			else if (!operand2)
[...]
+			else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#14782: FILE: kernel/trace/trace_events_filter.c:1024:
+			else {

CHECK:BRACES: Unbalanced braces around else statement
#14794: FILE: kernel/trace/trace_events_filter.c:1036:
+			} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#14796: FILE: kernel/trace/trace_events_filter.c:1038:
+				err = filter_add_subsystem_pred(ps, system,
+							pred, filter_string);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#14800: FILE: kernel/trace/trace_events_filter.c:1042:
+			operand1 = operand2 = NULL;

CHECK:BRACES: Unbalanced braces around else statement
#14813: FILE: kernel/trace/trace_events_filter.c:1055:
+		} else

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#14819: FILE: kernel/trace/trace_events_filter.c:1061:
+		operand1 = operand2 = NULL;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#15436: FILE: kernel/trace/trace_export.c:22:
+extern void __bad_type_size(void);

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#15450: FILE: kernel/trace/trace_export.c:37:
+#define TRACE_FIELD_SPECIAL(type_item, item, len, cmd)			\
 	ret = trace_seq_printf(s, "\tfield special:" #type_item ";\t"	\
 			       "offset:%u;\tsize:%u;\n",		\
 			       (unsigned int)offsetof(typeof(field), item), \

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#15503: FILE: kernel/trace/trace_export.c:115:
+#define TRACE_FIELD_SPECIAL(type_item, item, len, cmd)	\
 	cmd;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#15508: FILE: kernel/trace/trace_export.c:120:
+int ftrace_define_fields_##call(void);					\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(4) over __attribute__((__aligned__(4)))
#15512: FILE: kernel/trace/trace_export.c:124:
+__attribute__((__aligned__(4)))						\

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("_ftrace_events") over __attribute__((section("_ftrace_events")))
#15513: FILE: kernel/trace/trace_export.c:125:
+__attribute__((section("_ftrace_events"))) event_##call = {		\

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#15529: FILE: kernel/trace/trace_export.c:141:
+#define TRACE_EVENT_FORMAT_NOFILTER(call, proto, args, fmt, tstruct,	\
+				    tpfmt)				\
 									\
+struct ftrace_event_call __used						\
 __attribute__((__aligned__(4)))						\
 __attribute__((section("_ftrace_events"))) event_##call = {		\
 	.name			= #call,				\
 	.id			= proto,				\
 	.system			= __stringify(TRACE_SYSTEM),		\
 	.show_format		= ftrace_format_##call,			\
+};

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#15545: FILE: kernel/trace/trace_export.c:156:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#15545: FILE: kernel/trace/trace_export.c:156:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#15545: FILE: kernel/trace/trace_export.c:156:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#15545: FILE: kernel/trace/trace_export.c:156:
+#define TRACE_FIELD(type, item, assign)					\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed_type(type));	\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#15553: FILE: kernel/trace/trace_export.c:164:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#15553: FILE: kernel/trace/trace_export.c:164:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#15553: FILE: kernel/trace/trace_export.c:164:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#15553: FILE: kernel/trace/trace_export.c:164:
+#define TRACE_FIELD_SPECIAL(type, item, len, cmd)			\
+	ret = trace_define_field(event_call, #type "[" #len "]", #item,	\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), 0);		\
+	if (ret)							\
+		return ret;

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#15561: FILE: kernel/trace/trace_export.c:172:
+#define TRACE_FIELD_SIGN(type, item, assign, is_signed)			\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed);	\
+	if (ret)							\
+		return ret;

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'item' - possible side-effects?
#15561: FILE: kernel/trace/trace_export.c:172:
+#define TRACE_FIELD_SIGN(type, item, assign, is_signed)			\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed);	\
+	if (ret)							\
+		return ret;

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#15561: FILE: kernel/trace/trace_export.c:172:
+#define TRACE_FIELD_SIGN(type, item, assign, is_signed)			\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed);	\
+	if (ret)							\
+		return ret;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#15561: FILE: kernel/trace/trace_export.c:172:
+#define TRACE_FIELD_SIGN(type, item, assign, is_signed)			\
+	ret = trace_define_field(event_call, #type, #item,		\
+				 offsetof(typeof(field), item),		\
+				 sizeof(field.item), is_signed);	\
+	if (ret)							\
+		return ret;

CHECK:BIT_MACRO: Prefer using the BIT macro
#15697: FILE: kernel/trace/trace_hw_branches.c:21:
+#define BTS_BUFFER_SIZE (1 << 13)

WARNING:TYPO_SPELLING: 'formating' may be misspelled - perhaps 'formatting'?
#16085: FILE: kernel/trace/trace_output.c:109:
+ * copy to user routines. To simplify formating of a trace
                                       ^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#16128: FILE: kernel/trace/trace_output.c:262:
+	for (i = 0;  flag_array[i].name && flags; i++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#16161: FILE: kernel/trace/trace_output.c:295:
+	for (i = 0;  symbol_array[i].name; i++) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#16171: FILE: kernel/trace/trace_output.c:305:
+^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#16290: FILE: kernel/trace/trace_output.c:658:
+		if (next_event_type > FTRACE_MAX_EVENT) {
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#16296: FILE: kernel/trace/trace_output.c:664:
+^I^I^I$

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#16296: FILE: kernel/trace/trace_output.c:664:
+		} else {
+			

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'field->caller[i] == ULONG_MAX'
#16376: FILE: kernel/trace/trace_output.c:1023:
+		if (!field->caller[i] || (field->caller[i] == ULONG_MAX))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#16453: FILE: kernel/trace/trace_output.h:23:
+extern void trace_event_read_lock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#16454: FILE: kernel/trace/trace_output.h:24:
+extern void trace_event_read_unlock(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#16463: FILE: kernel/trace/trace_output.h:31:
+extern int __unregister_ftrace_event(struct trace_event *event);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#16525: FILE: kernel/trace/trace_printk.c:254:
+	trace_create_file("printk_formats", 0444, d_tracer,
 				    NULL, &ftrace_formats_fops);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#16649: FILE: kernel/trace/trace_selftest.c:766:
+		printk(KERN_CONT "missing open function...");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#16649: FILE: kernel/trace/trace_selftest.c:766:
+		printk(KERN_CONT "missing open function...");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_cont([subsystem]dev, ... then dev_cont(dev, ... then pr_cont(...  to printk(KERN_CONT ...
#16686: FILE: kernel/trace/trace_selftest.c:803:
+		printk(KERN_CONT "no entries found..");

WARNING:LOGGING_CONTINUATION: Avoid logging continuation uses where feasible
#16686: FILE: kernel/trace/trace_selftest.c:803:
+		printk(KERN_CONT "no entries found..");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#16719: FILE: kernel/trace/trace_stack.c:359:
+	trace_create_file("stack_max_size", 0644, d_tracer,
+			&max_stack_size, &stack_max_size_fops);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#16726: FILE: kernel/trace/trace_stack.c:362:
+	trace_create_file("stack_trace", 0444, d_tracer,
+			NULL, &stack_trace_fops);

CHECK:BRACES: braces {} should be used on all arms of this statement
#16792: FILE: kernel/trace/trace_stat.c:57:
+	if (node->rb_left)
[...]
+	else if (node->rb_right)
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#16796: FILE: kernel/trace/trace_stat.c:61:
+		return node->rb_right;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#16796: FILE: kernel/trace/trace_stat.c:61:
+	else {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around root->rb_node
#16839: FILE: kernel/trace/trace_stat.c:98:
+	struct rb_node **new = &(root->rb_node), *parent = NULL;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#17137: FILE: kernel/trace/trace_sysprof.c:326:
+	trace_create_file("sysprof_sample_period", 0644,
 			d_tracer, NULL, &sysprof_sample_fops);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#17502: FILE: samples/Kconfig:22:
+config SAMPLE_TRACE_EVENTS
+	tristate "Build trace_events examples -- loadable modules only"
+	depends on EVENT_TRACING && m
+	help
+	  This build trace event example modules.
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#17538: FILE: samples/trace_events/trace-events-sample.c:1:
+#include <linux/module.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#17550: FILE: samples/trace_events/trace-events-sample.c:13:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#17596: FILE: samples/trace_events/trace-events-sample.h:1:
+/*

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#17665: FILE: samples/trace_events/trace-events-sample.h:70:
+TRACE_EVENT(foo_bar,
+

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#17670: FILE: samples/trace_events/trace-events-sample.h:75:
+	TP_STRUCT__entry(

ERROR:SPACING: space prohibited after that open parenthesis '('
#17671: FILE: samples/trace_events/trace-events-sample.h:76:
+		__array(	char,	foo,    10		)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#17671: FILE: samples/trace_events/trace-events-sample.h:76:
+		__array(	char,	foo,    10		)

ERROR:SPACING: space prohibited after that open parenthesis '('
#17672: FILE: samples/trace_events/trace-events-sample.h:77:
+		__field(	int,	bar			)

ERROR:SPACING: space prohibited before that close parenthesis ')'
#17672: FILE: samples/trace_events/trace-events-sample.h:77:
+		__field(	int,	bar			)

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#17675: FILE: samples/trace_events/trace-events-sample.h:80:
+	TP_fast_assign(

CHECK:LINE_SPACING: Please don't use multiple blank lines
#17686: FILE: samples/trace_events/trace-events-sample.h:91:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#17723: FILE: samples/trace_events/trace-events-sample.h:128:
+#define TRACE_INCLUDE_FILE trace-events-sample
                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#17723: FILE: samples/trace_events/trace-events-sample.h:128:
+#define TRACE_INCLUDE_FILE trace-events-sample
                                        ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112388.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 277 errors, 209 warnings, 329 checks, 15356 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112388.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
