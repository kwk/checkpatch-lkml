WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#91: FILE: include/linux/qos_params.h:1:
+/* interface for the qos_power infrastructure of the linux kernel.

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#142: FILE: kernel/qos_params.c:1:
+/*

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#198: FILE: kernel/qos_params.c:57:
+	s32 (*comparitor)(s32, s32);
 	      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's32' should also have an identifier name
#198: FILE: kernel/qos_params.c:57:
+	s32 (*comparitor)(s32, s32);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 's32' should also have an identifier name
#198: FILE: kernel/qos_params.c:57:
+	s32 (*comparitor)(s32, s32);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#200: FILE: kernel/qos_params.c:59:
+};
+static struct qos_object qos_array[QOS_NUM_CLASSES];

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#203: FILE: kernel/qos_params.c:62:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#204: FILE: kernel/qos_params.c:63:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *f_pos);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#205: FILE: kernel/qos_params.c:64:
+static int qos_power_open(struct inode *inode, struct file *filp);
                                                             ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#206: FILE: kernel/qos_params.c:65:
+static int qos_power_release(struct inode *inode, struct file *filp);
                                                                ^^^^

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#233: FILE: kernel/qos_params.c:92:
+		extreme_value = qos_array[target].comparitor(
 		                                  ^^^^^^^^^^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#233: FILE: kernel/qos_params.c:92:
+		extreme_value = qos_array[target].comparitor(

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#238: FILE: kernel/qos_params.c:97:
+		printk(KERN_ERR "new target for qos %d is %d\n", target,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#239: FILE: kernel/qos_params.c:98:
+		printk(KERN_ERR "new target for qos %d is %d\n", target,
+			qos_array[target].target_value);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#241: FILE: kernel/qos_params.c:100:
+		srcu_notifier_call_chain(&qos_array[target].notifiers,
+			(unsigned long) qos_array[target].target_value, NULL);

CHECK:SPACING: No space is necessary after a cast
#241: FILE: kernel/qos_params.c:100:
+			(unsigned long) qos_array[target].target_value, NULL);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#258: FILE: kernel/qos_params.c:117:
+
+

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#261: FILE: kernel/qos_params.c:120:
+	s32 (*comparitor)(s32, s32))
 	      ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#261: FILE: kernel/qos_params.c:120:
+static int init_qos_object(int qos_class, const char *name, s32 default_value,
+	s32 (*comparitor)(s32, s32))

CHECK:BRACES: braces {} should be used on all arms of this statement
#266: FILE: kernel/qos_params.c:125:
+	if (qos_class < QOS_NUM_CLASSES) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#274: FILE: kernel/qos_params.c:133:
+		qos->comparitor = comparitor;
 		     ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'comparitor' may be misspelled - perhaps 'comparator'?
#274: FILE: kernel/qos_params.c:133:
+		qos->comparitor = comparitor;
 		                  ^^^^^^^^^^

CHECK:BRACES: Unbalanced braces around else statement
#280: FILE: kernel/qos_params.c:139:
+	} else

WARNING:TYPO_SPELLING: 'agregate' may be misspelled - perhaps 'aggregate'?
#339: FILE: kernel/qos_params.c:198:
+ * performance charactoistics.  It recomputes the agregate QoS expectations for
                                                   ^^^^^^^^

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*dep)...) over kzalloc(sizeof(struct requirement_list)...)
#347: FILE: kernel/qos_params.c:206:
+	dep = kzalloc(sizeof(struct requirement_list), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'requierement' may be misspelled - perhaps 'requirement'?
#377: FILE: kernel/qos_params.c:236:
+ * Updates an existing qos requierement for the qos_class of parameters along
                            ^^^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: kernel/qos_params.c:249:
+	list_for_each_entry(node,
+		&qos_array[qos_class].requirements.list, list) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#426: FILE: kernel/qos_params.c:285:
+	list_for_each_entry(node,
+		&qos_array[qos_class].requirements.list, list) {

WARNING:TYPO_SPELLING: 'uppon' may be misspelled - perhaps 'upon'?
#447: FILE: kernel/qos_params.c:306:
+ * uppon changes to the qos_class target value.
    ^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/qos_params.c:308:
+ int qos_add_notifier(int qos_class, struct notifier_block *notifier)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#456: FILE: kernel/qos_params.c:315:
+	retval = srcu_notifier_chain_register(&qos_array[qos_class].notifiers,
+			notifier);

WARNING:TYPO_SPELLING: 'uppon' may be misspelled - perhaps 'upon'?
#469: FILE: kernel/qos_params.c:328:
+ * uppon changes to the qos_class target value.
    ^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#478: FILE: kernel/qos_params.c:337:
+	retval = srcu_notifier_chain_unregister(&qos_array[qos_class].notifiers,
+			notifier);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#488: FILE: kernel/qos_params.c:347:
+static int qos_power_open(struct inode *inode, struct file *filp)
                                                             ^^^^

CHECK:SPACING: No space is necessary after a cast
#495: FILE: kernel/qos_params.c:354:
+		filp->private_data = (void *) qos_class;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#505: FILE: kernel/qos_params.c:364:
+static int qos_power_release(struct inode *inode, struct file *filp)
                                                                ^^^^

CHECK:SPACING: No space is necessary after a cast
#509: FILE: kernel/qos_params.c:368:
+	qos_class = (int) filp->private_data;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#516: FILE: kernel/qos_params.c:375:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#517: FILE: kernel/qos_params.c:376:
+static ssize_t qos_power_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *f_pos)

CHECK:SPACING: No space is necessary after a cast
#522: FILE: kernel/qos_params.c:381:
+	qos_class = (int) filp->private_data;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#533: FILE: kernel/qos_params.c:392:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#537: FILE: kernel/qos_params.c:396:
+	int ret = 0;
+	ret = new_latency_qos(QOS_CPU_DMA_LATENCY, "cpu_dma_latency");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#539: FILE: kernel/qos_params.c:398:
+		printk(KERN_ERR "qos_param: cpu_dma_latency setup failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#544: FILE: kernel/qos_params.c:403:
+		printk(KERN_ERR "qos_param: network_latency setup failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#549: FILE: kernel/qos_params.c:408:
+		printk(KERN_ERR "qos_param: network_throughput setup failed\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 25 warnings, 20 checks, 456 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000375723.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
