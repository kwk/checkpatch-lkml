WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#67: FILE: init/main.c:123:
+extern void init_tasklets(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#94: FILE: include/linux/tasklet.h:1:
+#ifndef _LINUX_WORK_TASKLET_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#117: FILE: include/linux/tasklet.h:6:
+extern void work_tasklet_exec(struct work_struct *work);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#188: FILE: include/linux/tasklet.h:19:
+#define DECLARE_TASKLET(name, func, data)				\
+	struct tasklet_struct name = {					\
+		__WORK_INITIALIZER((name).work, work_tasklet_exec),	\
+		LIST_HEAD_INIT((name).list),				\
+		0,							\
+		ATOMIC_INIT(0),						\
+		func,							\
+		data,							\
+		#name							\
+	}

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'name' - possible side-effects?
#199: FILE: include/linux/tasklet.h:30:
+#define DECLARE_TASKLET_DISABLED(name, func, data)			\
+	struct tasklet_struct name = {					\
+		__WORK_INITIALIZER((name).work, work_tasklet_exec),	\
+		LIST_HEAD_INIT((name).list),				\
+		0,							\
+		ATOMIC_INIT(1),						\
+		func,							\
+		data,							\
+ 		#name							\
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#207: FILE: include/linux/tasklet.h:38:
+ ^I^I#name^I^I^I^I^I^I^I\$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#207: FILE: include/linux/tasklet.h:38:
+ ^I^I#name^I^I^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#207: FILE: include/linux/tasklet.h:38:
+ ^I^I#name^I^I^I^I^I^I^I\$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#212: FILE: include/linux/tasklet.h:43:
+extern fastcall void tasklet_enable(struct tasklet_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#240: FILE: include/linux/tasklet.h:49:
+extern int tasklet_is_scheduled(struct tasklet_struct *t);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: kernel/tasklet_work.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#260: FILE: kernel/tasklet_work.c:2:
+ *	linux/kernel/tasklet_work.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

ERROR:OPEN_BRACE: open brace '{' following enum go on the same line
#272: FILE: kernel/tasklet_work.c:14:
+enum
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#278: FILE: kernel/tasklet_work.c:20:
+#define TASKLET_STATEF_SCHED	(1 << TASKLET_STATE_SCHED)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#279: FILE: kernel/tasklet_work.c:21:
+#define TASKLET_STATEF_RUN	(1 << TASKLET_STATE_RUN)

CHECK:BIT_MACRO: Prefer using the BIT macro
#280: FILE: kernel/tasklet_work.c:22:
+#define TASKLET_STATEF_PENDING	(1 << TASKLET_STATE_PENDING)

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#288: FILE: kernel/tasklet_work.c:30:
+EXPORT_SYMBOL(tasklet_schedule);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#293: FILE: kernel/tasklet_work.c:35:
+	int ret;
+	ret = work_pending(&t->work);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#297: FILE: kernel/tasklet_work.c:39:
+EXPORT_SYMBOL(tasklet_is_scheduled);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#305: FILE: kernel/tasklet_work.c:47:
+EXPORT_SYMBOL(tasklet_disable_nosync);

WARNING:MEMORY_BARRIER: memory barrier without comment
#311: FILE: kernel/tasklet_work.c:53:
+	smp_mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#314: FILE: kernel/tasklet_work.c:56:
+EXPORT_SYMBOL(tasklet_disable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#324: FILE: kernel/tasklet_work.c:66:
+EXPORT_SYMBOL(tasklet_enable);

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#331: FILE: kernel/tasklet_work.c:73:
+EXPORT_SYMBOL(tasklet_kill);

WARNING:MEMORY_BARRIER: memory barrier without comment
#340: FILE: kernel/tasklet_work.c:82:
+		smp_mb();

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#356: FILE: kernel/tasklet_work.c:98:
+EXPORT_SYMBOL(work_tasklet_exec);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#361: FILE: kernel/tasklet_work.c:103:
+	BUG_ON(!ktaskletd_wq);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: kernel/tasklet_work.c:121:
+	pr_debug("anonymous tasklet %p set at %p\n",
+		t, __builtin_return_address(0));

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#382: FILE: kernel/tasklet_work.c:124:
+EXPORT_SYMBOL(tasklet_init);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 18 warnings, 9 checks, 316 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000414449.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
