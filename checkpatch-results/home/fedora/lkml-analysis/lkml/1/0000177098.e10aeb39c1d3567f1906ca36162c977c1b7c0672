CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#73: FILE: drivers/misc/sgi-gru/grukservices.c:255:
+int gru_create_message_queue(struct gru_message_queue_desc *mqd,
+		void *p, unsigned int bytes, int nasid, int vector, int apicid)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#97: FILE: drivers/misc/sgi-gru/grukservices.c:289:
+static int send_noop_message(void *cb, struct gru_message_queue_desc *mqd,
+				void *mesg)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: drivers/misc/sgi-gru/grukservices.c:345:
+static int send_message_queue_full(void *cb, struct gru_message_queue_desc *mqd,
+				void *mesg, int lines)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#171: FILE: drivers/misc/sgi-gru/grukservices.c:378:
+			gru_gamir(cb, EOP_IR_INC, HSTATUS(mqd->mq_gpa, half),
 					XTYPE_DW, IMA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#180: FILE: drivers/misc/sgi-gru/grukservices.c:389:
+	gru_gamer(cb, EOP_ERR_CSWAP, mqd->mq_gpa, XTYPE_DW, mqh.val, avalue,
+							IMA);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#189: FILE: drivers/misc/sgi-gru/grukservices.c:397:
+		gru_gamir(cb, EOP_IR_INC, HSTATUS(mqd->mq_gpa, half), XTYPE_DW,
+							IMA);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#256: FILE: drivers/misc/sgi-gru/grukservices.c:467:
+ * ^Imqd^Imessage queue descriptor$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#262: FILE: drivers/misc/sgi-gru/grukservices.c:472:
+int gru_send_message_gpa(struct gru_message_queue_desc *mqd, void *mesg,
+				unsigned int bytes)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'quicktest', this function's name, in a string
#325: FILE: drivers/misc/sgi-gru/grukservices.c:626:
+		    ("GRU quicktest err: gid %d, found 0x%lx, expected 0x%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#354: FILE: drivers/misc/sgi-gru/grukservices.h:63:
+ * ^Imqd^Ipointer to message queue descriptor$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: drivers/misc/sgi-gru/grukservices.h:64:
+ * ^Ip^Ipointer to user allocated mesq memory.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#366: FILE: drivers/misc/sgi-gru/grukservices.h:74:
+extern int gru_create_message_queue(struct gru_message_queue_desc *mqd,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#367: FILE: drivers/misc/sgi-gru/grukservices.h:75:
+extern int gru_create_message_queue(struct gru_message_queue_desc *mqd,
+		void *p, unsigned int bytes, int nasid, int vector, int apicid);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#376: FILE: drivers/misc/sgi-gru/grukservices.h:85:
+ * ^Imqd^Ipointer to message queue descriptor$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#386: FILE: drivers/misc/sgi-gru/grukservices.h:94:
+extern int gru_send_message_gpa(struct gru_message_queue_desc *mqd,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#387: FILE: drivers/misc/sgi-gru/grukservices.h:95:
+extern int gru_send_message_gpa(struct gru_message_queue_desc *mqd,
+			void *mesg, unsigned int bytes);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: drivers/misc/sgi-gru/grukservices.h:111:
+ * ^Imqd^Ipointer to message queue descriptor$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#400: FILE: drivers/misc/sgi-gru/grukservices.h:114:
+extern void gru_free_message(struct gru_message_queue_desc *mqd,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: drivers/misc/sgi-gru/grukservices.h:124:
+ * ^Imqd^Ipointer to message queue descriptor$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#417: FILE: drivers/misc/sgi-gru/grukservices.h:130:
+extern void *gru_get_next_message(struct gru_message_queue_desc *mqd);

WARNING:SPACING: Unnecessary space before function pointer arguments
#514: FILE: drivers/misc/sgi-xp/xpc.h:816:
+extern void (*xpc_teardown_partitions_sn) (void);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACING: Unnecessary space before function pointer arguments
#524: FILE: drivers/misc/sgi-xp/xpc.h:859:
+extern enum xp_retval (*xpc_save_remote_msgqueue_pa) (struct xpc_channel *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct xpc_channel *' should also have an identifier name
#524: FILE: drivers/misc/sgi-xp/xpc.h:859:
+extern enum xp_retval (*xpc_save_remote_msgqueue_pa) (struct xpc_channel *,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#524: FILE: drivers/misc/sgi-xp/xpc.h:859:
+extern enum xp_retval (*xpc_save_remote_msgqueue_pa) (struct xpc_channel *,

CHECK:CAMELCASE: Avoid CamelCase: <xpSuccess>
#546: FILE: drivers/misc/sgi-xp/xpc_channel.c:407:
+		if (ret != xpSuccess) {

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:SPACING: Unnecessary space before function pointer arguments
#564: FILE: drivers/misc/sgi-xp/xpc_main.c:174:
+void (*xpc_teardown_partitions_sn) (void);

WARNING:SPACING: Unnecessary space before function pointer arguments
#574: FILE: drivers/misc/sgi-xp/xpc_main.c:221:
+enum xp_retval (*xpc_save_remote_msgqueue_pa) (struct xpc_channel *ch,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "part_uv->cached_activate_gru_mq_desc"
#673: FILE: drivers/misc/sgi-xp/xpc_uv.c:91:
+		if (part_uv->cached_activate_gru_mq_desc != NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part_uv->cached_activate_gru_mq_desc_mutex'
#681: FILE: drivers/misc/sgi-xp/xpc_uv.c:99:
+			mutex_unlock(&part_uv->
+				     cached_activate_gru_mq_desc_mutex);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*mq->gru_mq_desc)...) over kzalloc(sizeof(struct gru_message_queue_desc)...)
#745: FILE: drivers/misc/sgi-xp/xpc_uv.c:220:
+	mq->gru_mq_desc = kzalloc(sizeof(struct gru_message_queue_desc),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!mq->gru_mq_desc"
#747: FILE: drivers/misc/sgi-xp/xpc_uv.c:222:
+	if (mq->gru_mq_desc == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'xpc_create_gru_mq_uv', this function's name, in a string
#748: FILE: drivers/misc/sgi-xp/xpc_uv.c:223:
+		dev_err(xpc_part, "xpc_create_gru_mq_uv() failed to kmalloc() "

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#748: FILE: drivers/misc/sgi-xp/xpc_uv.c:223:
+	if (mq->gru_mq_desc == NULL) {
+		dev_err(xpc_part, "xpc_create_gru_mq_uv() failed to kmalloc() "

WARNING:SPLIT_STRING: quoted string split across lines
#749: FILE: drivers/misc/sgi-xp/xpc_uv.c:224:
+		dev_err(xpc_part, "xpc_create_gru_mq_uv() failed to kmalloc() "
+			"a gru_message_queue_desc structure\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#783: FILE: drivers/misc/sgi-xp/xpc_uv.c:267:
+		dev_err(xpc_part, "gru_create_message_queue() returned "
+			"error=%d\n", ret);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gru_mq_desc"
#918: FILE: drivers/misc/sgi-xp/xpc_uv.c:689:
+		if (gru_mq_desc == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gru_mq_desc"
#922: FILE: drivers/misc/sgi-xp/xpc_uv.c:693:
+			if (gru_mq_desc == NULL) {

CHECK:CAMELCASE: Avoid CamelCase: <xpNoMemory>
#923: FILE: drivers/misc/sgi-xp/xpc_uv.c:694:
+				ret = xpNoMemory;

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'part_uv->activate_gru_mq_desc_gpa'
#931: FILE: drivers/misc/sgi-xp/xpc_uv.c:702:
+						      part_uv->
+						      activate_gru_mq_desc_gpa);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1001: FILE: drivers/misc/sgi-xp/xpc_uv.c:980:
+	BUG_ON(head->n_entries < 0);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch_uv->cached_notify_gru_mq_desc"
#1022: FILE: drivers/misc/sgi-xp/xpc_uv.c:1162:
+	if (ch_uv->cached_notify_gru_mq_desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ch_uv->cached_notify_gru_mq_desc"
#1060: FILE: drivers/misc/sgi-xp/xpc_uv.c:1263:
+	DBUG_ON(ch_uv->cached_notify_gru_mq_desc == NULL);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 20 warnings, 22 checks, 968 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000177098.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
