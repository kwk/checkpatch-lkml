WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#75: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#80: FILE: drivers/scsi/osd/osd_ktests.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'preform' may be misspelled - perhaps 'perform'?
#98: FILE: drivers/scsi/osd/osd_ktests.h:19:
+ *	structure that will define what tests to preform and with some
   	                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#113: FILE: drivers/scsi/osd/osd_uld.c:1:
+/*

WARNING:STATIC_CONST_CHAR_ARRAY: const array should probably be static const
#186: FILE: drivers/scsi/osd/osd_uld.c:74:
+const char osd_symlink[] = "scsi_osd";

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'osd_uld_open', this function's name, in a string
#218: FILE: drivers/scsi/osd/osd_uld.c:106:
+	OSD_DEBUG("osd_uld_open %p\n", oud);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'osd_uld_release', this function's name, in a string
#226: FILE: drivers/scsi/osd/osd_uld.c:114:
+	OSD_DEBUG("osd_uld_release %p\n", file->private_data);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#233: FILE: drivers/scsi/osd/osd_uld.c:121:
+static long osd_uld_ioctl(struct file *file, unsigned int cmd,
+	unsigned long arg)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'osd_uld_ioctl', this function's name, in a string
#244: FILE: drivers/scsi/osd/osd_uld.c:132:
+		OSD_ERR("Unknown osd_uld_ioctl %d\n", cmd);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: drivers/scsi/osd/osd_uld.c:158:
+	OSD_DEBUG("start scsi_test_unit_ready %p %p %p\n",
+			oud, scsi_device, scsi_device->request_queue);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#271: FILE: drivers/scsi/osd/osd_uld.c:159:
+	error = scsi_test_unit_ready(scsi_device, 10*HZ, 5, NULL);
 	                                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#308: FILE: drivers/scsi/osd/osd_uld.c:196:
+	if (NULL == oud)

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#353: FILE: drivers/scsi/osd/osd_uld.c:241:
+	oud->class_member = device_create(osd_sysfs_class, dev,
+		MKDEV(SCSI_OSD_MAJOR, oud->minor), "%s", disk->disk_name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'osd_probe', this function's name, in a string
#366: FILE: drivers/scsi/osd/osd_uld.c:254:
+	OSD_INFO("osd_probe %s\n", disk->disk_name);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'oud->od.scsi_device != scsi_device'
#387: FILE: drivers/scsi/osd/osd_uld.c:275:
+	if (!oud || (oud->od.scsi_device != scsi_device)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 5 checks, 431 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000190804.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
