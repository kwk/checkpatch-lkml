WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#60: 
  occured during the op, and carries out the delayed cancel/unlock-force
  ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#101: FILE: fs/dlm/dlm_internal.h:2:
*******************************************************************************

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExO)
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.
 ^

ERROR:SPACING: space prohibited after that '*' (ctx:OxW)
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.
  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.
                       ^

CHECK:CAMELCASE: Avoid CamelCase: <Copyright>
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Red>
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <Hat>
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <Inc>
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

CHECK:CAMELCASE: Avoid CamelCase: <All>
#106: FILE: fs/dlm/dlm_internal.h:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's8' over 'int8_t'
#128: FILE: fs/dlm/dlm_internal.h:237:
+	int8_t			lkb_wait_count;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#136: FILE: fs/dlm/dlm_internal.h:446:
+	struct mutex		ls_orphans_mutex;

CHECK:SPACING: No space is necessary after a cast
#191: FILE: fs/dlm/lock.c:289:
+		   is_overlap_unlock(lkb) ? -DLM_EUNLOCK : -DLM_ECANCEL);

CHECK:SPACING: No space is necessary after a cast
#242: FILE: fs/dlm/lock.c:788:
+	if (is_overlap_unlock(lkb) ||

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstype == DLM_MSG_CANCEL'
#242: FILE: fs/dlm/lock.c:788:
+	if (is_overlap_unlock(lkb) ||
+	    (is_overlap_cancel(lkb) && (mstype == DLM_MSG_CANCEL))) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:SPACING: No space is necessary after a cast
#243: FILE: fs/dlm/lock.c:789:
+	    (is_overlap_cancel(lkb) && (mstype == DLM_MSG_CANCEL))) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#271: FILE: fs/dlm/lock.c:817:
+		   printk("wait_count %d\n", lkb->lkb_wait_count););

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'add_to_waiters', this function's name, in a string
#280: FILE: fs/dlm/lock.c:825:
+		log_error(ls, "add_to_waiters %x error %d flags %x %d %d %s",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:SPACING: No space is necessary after a cast
#306: FILE: fs/dlm/lock.c:842:
+	if (is_overlap_unlock(lkb) && (mstype == DLM_MSG_UNLOCK_REPLY)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstype == DLM_MSG_UNLOCK_REPLY'
#306: FILE: fs/dlm/lock.c:842:
+	if (is_overlap_unlock(lkb) && (mstype == DLM_MSG_UNLOCK_REPLY)) {

CHECK:SPACING: No space is necessary after a cast
#313: FILE: fs/dlm/lock.c:848:
+	if (is_overlap_cancel(lkb) && (mstype == DLM_MSG_CANCEL_REPLY)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'mstype == DLM_MSG_CANCEL_REPLY'
#313: FILE: fs/dlm/lock.c:848:
+	if (is_overlap_cancel(lkb) && (mstype == DLM_MSG_CANCEL_REPLY)) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#320: FILE: fs/dlm/lock.c:855:
+	/* N.B. type of reply may not always correspond to type of original
+	   msg due to lookup->request optimization, verify others? */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: fs/dlm/lock.c:855:
+	   msg due to lookup->request optimization, verify others? */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#333: FILE: fs/dlm/lock.c:868:
+	/* the force-unlock/cancel has completed and we haven't recvd a reply
+	   to the op that was in progress prior to the unlock/cancel; we

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#335: FILE: fs/dlm/lock.c:870:
+	   this would happen */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#372: FILE: fs/dlm/lock.c:901:
+/* Handles situations where we might be processing a "fake" or "stub"
+   which we can't try to take waiters_mutex again. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#372: FILE: fs/dlm/lock.c:901:
+   which we can't try to take waiters_mutex again. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#398: FILE: fs/dlm/lock.c:1118:
+/* returns: 0 did nothing
+	    1 moved lock to granted

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#399: FILE: fs/dlm/lock.c:1119:
+	   -1 removed lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#485: FILE: fs/dlm/lock.c:1799:
+/* when dlm_unlock() sees -EBUSY with CANCEL/FORCEUNLOCK it returns 0
+   for success */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#485: FILE: fs/dlm/lock.c:1799:
+   for success */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#488: FILE: fs/dlm/lock.c:1802:
+/* note: it's valid for lkb_nodeid/res_nodeid to be -1 when we get here
+   because there may be a lookup in progress and it's valid to do

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#489: FILE: fs/dlm/lock.c:1803:
+   cancel/unlockf on it */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#507: FILE: fs/dlm/lock.c:1817:
+	/* an lkb may still exist even though the lock is EOL'ed due to a
+	   cancel, unlock or failed noqueue request; an app can't use these

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#523: FILE: fs/dlm/lock.c:1827:
+	/* an lkb may be waiting for an rsb lookup to complete where the
+	   lookup was initiated by another lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#523: FILE: fs/dlm/lock.c:1827:
+	   lookup was initiated by another lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#568: FILE: fs/dlm/lock.c:1872:
+	/* do we need to allow a force-unlock if there's a normal unlock
+	   already in progress?  in what conditions could the normal unlock

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#569: FILE: fs/dlm/lock.c:1873:
+	   fail such that we'd want to send a force-unlock to be sure? */

CHECK:BRACES: braces {} should be used on all arms of this statement
#780: FILE: fs/dlm/lock.c:3025:
+		if (result)
[...]
 		else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#793: FILE: fs/dlm/lock.c:3037:
+		log_debug(ls, "receive_request_reply %x %x master diff %d %d",

CHECK:BRACES: braces {} should be used on all arms of this statement
#799: FILE: fs/dlm/lock.c:3042:
+		if (is_overlap(lkb)) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#803: FILE: fs/dlm/lock.c:3046:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#809: FILE: fs/dlm/lock.c:3051:
+		log_error(ls, "receive_request_reply %x error %d",

CHECK:SPACING: No space is necessary after a cast
#813: FILE: fs/dlm/lock.c:3055:
+	if (is_overlap_unlock(lkb) && (result == 0 || result == -EINPROGRESS))

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#815: FILE: fs/dlm/lock.c:3056:
+		log_debug(ls, "receive_request_reply %x result %d unlock",

CHECK:SPACING: No space is necessary after a cast
#820: FILE: fs/dlm/lock.c:3061:
+	} else if (is_overlap_cancel(lkb) && (result == -EINPROGRESS)) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_request_reply', this function's name, in a string
#821: FILE: fs/dlm/lock.c:3062:
+		log_debug(ls, "receive_request_reply %x cancel", lkb->lkb_id);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'receive_lookup_reply', this function's name, in a string
#1035: FILE: fs/dlm/lock.c:3271:
+		log_debug(ls, "receive_lookup_reply %x unlock %x",

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1129: FILE: fs/dlm/lock.c:3546:
+/* We do this after normal locking has been enabled and any saved
+   (in requestqueue) have been processed.  We should be confident that

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1134: FILE: fs/dlm/lock.c:3549:
+   userspace or remotely. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1138: FILE: fs/dlm/lock.c:3552:
+/* there may have been an overlap unlock/cancel prior to recovery or
+   recovery.  if before, the lkb may still have a pos wait_count; if

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1144: FILE: fs/dlm/lock.c:3555:
+   prior to recovery have been received. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1210: FILE: fs/dlm/lock.c:3587:
+		/* At this point we assume that we won't get a reply to any
+		   previous op or overlap op on this lock.  First, do a big

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1211: FILE: fs/dlm/lock.c:3588:
+		   remove_from_waiters() for all previous ops. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#1261: FILE: fs/dlm/lock.c:3638:
+^I^I^I  ^I  lkb->lkb_id, mstype, lkb->lkb_flags, oc, ou);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1261: FILE: fs/dlm/lock.c:3638:
+^I^I^I  ^I  lkb->lkb_id, mstype, lkb->lkb_flags, oc, ou);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1261: FILE: fs/dlm/lock.c:3638:
+			log_error(ls, "recover_waiters_post %x %d %x %d %d",
+			  	  lkb->lkb_id, mstype, lkb->lkb_flags, oc, ou);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1325: FILE: fs/dlm/lock.c:4140:
+/* lkb's that are removed from the waiters list by revert are just left
+   orphans list with the granted orphan locks, to be freed by purge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1325: FILE: fs/dlm/lock.c:4140:
+   orphans list with the granted orphan locks, to be freed by purge */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1373: FILE: fs/dlm/lock.c:4179:
+/* We have to release clear_proc_locks mutex before calling
+   (which does lock_rsb) due to deadlock with receiving a message that

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1375: FILE: fs/dlm/lock.c:4180:
+   lock_rsb followed by dlm_user_add_ast() */

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1450: FILE: fs/dlm/lockspace.c:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.

CHECK:SPACING: spaces preferred around that '*' (ctx:ExO)
#1450: FILE: fs/dlm/lockspace.c:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.
 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1450: FILE: fs/dlm/lockspace.c:5:
+**  Copyright (C) 2004-2007 Red Hat, Inc.  All rights reserved.
                       ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1485: FILE: fs/dlm/user.c:132:
+/* we could possibly check if the cancel of an orphan has resulted in
+   being removed and then remove that lkb from the orphans list and

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1515: FILE: fs/dlm/user.c:151:
+	   began before clear_proc_locks did its cancel/unlock. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1559: FILE: fs/dlm/user.c:178:
+	/* Figure out if this lock is at the end of its life and no longer
+	   available for the application to use.  The lkb still exists until

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1567: FILE: fs/dlm/user.c:186:
+	   entirely by refcount. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1574: FILE: fs/dlm/user.c:193:
+	else if (ua->lksb.sb_status == -DLM_EUNLOCK ||
 	    (ua->lksb.sb_status == -DLM_ECANCEL &&

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 42 warnings, 26 checks, 1434 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000437791.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
