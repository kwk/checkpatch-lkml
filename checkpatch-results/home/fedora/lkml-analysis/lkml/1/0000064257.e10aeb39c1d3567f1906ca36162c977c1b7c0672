WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#30: 
LSM version does not add post accept() hook. Instead, do connection filtering

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#44: FILE: security/tomoyo/network.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#45: FILE: security/tomoyo/network.c:2:
+ * security/tomoyo/network.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:SPLIT_STRING: quoted string split across lines
#86: FILE: security/tomoyo/network.c:43:
+	int count = sscanf(address, "%hx:%hx:%hx:%hx:%hx:%hx:%hx:%hx"
+			   "-%hx:%hx:%hx:%hx:%hx:%hx:%hx:%hx",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#93: FILE: security/tomoyo/network.c:50:
+		u8 i;
+		if (count == 8)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#105: FILE: security/tomoyo/network.c:62:
+		u32 ip = htonl((((u8) min[0]) << 24) + (((u8) min[1]) << 16)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#106: FILE: security/tomoyo/network.c:63:
+			       + (((u8) min[2]) << 8) + (u8) min[3]);

CHECK:SPACING: No space is necessary after a cast
#109: FILE: security/tomoyo/network.c:66:
+			ip = htonl((((u8) max[0]) << 24) +

CHECK:SPACING: No space is necessary after a cast
#110: FILE: security/tomoyo/network.c:67:
+				   (((u8) max[1]) << 16) + (((u8) max[2]) << 8)

CHECK:SPACING: No space is necessary after a cast
#111: FILE: security/tomoyo/network.c:68:
+				   + (u8) max[3]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: security/tomoyo/network.c:107:
+	const char *keyword = "unknown";
+	switch (operation) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#202: FILE: security/tomoyo/network.c:159:
+	char buf[64];
+	if (tomoyo_init_request_info(&r, NULL,

WARNING:LINE_SPACING: Missing a blank line after declarations
#216: FILE: security/tomoyo/network.c:173:
+			struct tomoyo_ip_network_acl *acl;
+			if (ptr->is_deleted ||

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'acl->address.group'
#231: FILE: security/tomoyo/network.c:188:
+								  acl->address.
+								  group))

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:LINE_SPACING: Missing a blank line after declarations
#308: FILE: security/tomoyo/network.c:265:
+	char *w[4];
+	if (!tomoyo_tokenize(data, w, sizeof(w)) || !w[3][0])

CHECK:SPACING: No space is necessary after a cast
#363: FILE: security/tomoyo/network.c:320:
+		e.address.ipv4.min = ntohl(*(u32 *) min_address);

CHECK:SPACING: No space is necessary after a cast
#364: FILE: security/tomoyo/network.c:321:
+		e.address.ipv4.max = ntohl(*(u32 *) max_address);

CHECK:BRACES: braces {} should be used on all arms of this statement
#409: FILE: security/tomoyo/network.c:366:
+	if (w[2][0] == '@')
[...]
+	else if (e.address_type == TOMOYO_IP_ADDRESS_TYPE_IPv6) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#433: FILE: security/tomoyo/network.c:390:
+				    (const u32 *) address, ntohs(port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#451: FILE: security/tomoyo/network.c:408:
+	u8 operation;
+	switch (sock_type) {

CHECK:SPACING: No space is necessary after a cast
#462: FILE: security/tomoyo/network.c:419:
+				    (const u32 *) address, ntohs(port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#479: FILE: security/tomoyo/network.c:436:
+	u8 operation;
+	switch (sock_type) {

CHECK:SPACING: No space is necessary after a cast
#490: FILE: security/tomoyo/network.c:447:
+				    (const u32 *) address, ntohs(port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#506: FILE: security/tomoyo/network.c:463:
+	int retval;
+	current->tomoyo_flags |= TOMOYO_DONT_SLEEP_ON_ENFORCE_ERROR;

CHECK:SPACING: No space is necessary after a cast
#508: FILE: security/tomoyo/network.c:465:
+				      (const u32 *) address, ntohs(port));

WARNING:LINE_SPACING: Missing a blank line after declarations
#528: FILE: security/tomoyo/network.c:485:
+	u8 operation;
+	if (sock_type == SOCK_DGRAM)

CHECK:SPACING: No space is necessary after a cast
#533: FILE: security/tomoyo/network.c:490:
+				    (const u32 *) address, ntohs(port));

CHECK:SPACING: No space is necessary after a cast
#588: FILE: security/tomoyo/network.c:545:
+	if (sock->ops->getname(sock, (struct sockaddr *) addr, &addr_len, 0))

CHECK:SPACING: No space is necessary after a cast
#590: FILE: security/tomoyo/network.c:547:
+	switch (((struct sockaddr *) addr)->sa_family) {

CHECK:SPACING: No space is necessary after a cast
#594: FILE: security/tomoyo/network.c:551:
+		addr6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#600: FILE: security/tomoyo/network.c:557:
+		addr4 = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#602: FILE: security/tomoyo/network.c:559:
+						  (u8 *) &addr4->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#633: FILE: security/tomoyo/network.c:590:
+		addr6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#645: FILE: security/tomoyo/network.c:602:
+		addr4 = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#651: FILE: security/tomoyo/network.c:608:
+						   (u8 *) &addr4->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#691: FILE: security/tomoyo/network.c:648:
+		addr6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#703: FILE: security/tomoyo/network.c:660:
+		addr4 = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#709: FILE: security/tomoyo/network.c:666:
+						(u8 *) &addr4->sin_addr, port);

CHECK:SPACING: No space is necessary after a cast
#735: FILE: security/tomoyo/network.c:692:
+	error = sock->ops->getname(sock, (struct sockaddr *) &addr, &addr_len,

CHECK:SPACING: No space is necessary after a cast
#739: FILE: security/tomoyo/network.c:696:
+	switch (((struct sockaddr *) &addr)->sa_family) {

CHECK:SPACING: No space is necessary after a cast
#743: FILE: security/tomoyo/network.c:700:
+		addr6 = (struct sockaddr_in6 *) &addr;

CHECK:SPACING: No space is necessary after a cast
#749: FILE: security/tomoyo/network.c:706:
+		addr4 = (struct sockaddr_in *) &addr;

CHECK:SPACING: No space is necessary after a cast
#751: FILE: security/tomoyo/network.c:708:
+						  (u8 *) &addr4->sin_addr,

CHECK:SPACING: No space is necessary after a cast
#777: FILE: security/tomoyo/network.c:734:
+		addr6 = (struct sockaddr_in6 *) addr;

CHECK:SPACING: No space is necessary after a cast
#789: FILE: security/tomoyo/network.c:746:
+		addr4 = (struct sockaddr_in *) addr;

CHECK:SPACING: No space is necessary after a cast
#795: FILE: security/tomoyo/network.c:752:
+						   (u8 *) &addr4->sin_addr,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 32 checks, 757 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000064257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
