WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
We have been working on building a kernel tracer for a production environment.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#69: FILE: init/Kconfig:953:
+config KTRACE
+       bool "Enable ktrace support"
+       select DEBUG_FS
+       select TRACING
+       select RING_BUFFER
+       help
+         Ktrace is a kernel tracing tool that allows you to trace
+         kernel events by inserting trace points at proper places.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#103: FILE: include/asm-generic/vmlinux.lds.h:76:
+       VMLINUX_SYMBOL(__start___ktraces) = .;                          \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#104: FILE: include/asm-generic/vmlinux.lds.h:77:
+       *(__ktrace)                                                     \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#105: FILE: include/asm-generic/vmlinux.lds.h:78:
+       VMLINUX_SYMBOL(__stop___ktraces) = .;                           \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#113: FILE: include/asm-generic/vmlinux.lds.h:95:
+               *(__ktrace_strings)     /* Ktrace: strings */           \$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#113: FILE: include/asm-generic/vmlinux.lds.h:95:
+               *(__ktrace_strings)     /* Ktrace: strings */           \$

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#113: FILE: include/asm-generic/vmlinux.lds.h:95:
+               *(__ktrace_strings)     /* Ktrace: strings */           \
                ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: kernel/module.c:2150:
+       mod->ktrace = section_objs(hdr, sechdrs, secstrings, "__ktrace",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: kernel/module.c:2151:
+                               sizeof(*mod->ktrace), &mod->num_ktrace);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#135: FILE: kernel/module.c:2151:
+       mod->ktrace = section_objs(hdr, sechdrs, secstrings, "__ktrace",
+                               sizeof(*mod->ktrace), &mod->num_ktrace);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: kernel/module.c:2151:
+                               sizeof(*mod->ktrace), &mod->num_ktrace);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#158: FILE: include/linux/module.h:352:
+       struct kernel_trace *ktrace;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#159: FILE: include/linux/module.h:353:
+       unsigned int num_ktrace;$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#170: FILE: include/linux/ktrace.h:1:
+#ifndef _LINUX_KTRACE_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#180: FILE: include/linux/ktrace.h:11:
+       const char      *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#181: FILE: include/linux/ktrace.h:12:
+       const char      *format;  /* format string describing variable list */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#182: FILE: include/linux/ktrace.h:13:
+       size_t          *stroff;  /* offsets of string variables */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#184: FILE: include/linux/ktrace.h:15:
+       u32             enabled:1, event_id:31;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#185: FILE: include/linux/ktrace.h:16:
+       ktrace_probe_func *func;  /* probe function */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#186: FILE: include/linux/ktrace.h:17:
+       struct list_head list;  /* list head linked to the hash table entry */$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#187: FILE: include/linux/ktrace.h:18:
+} __attribute__((aligned(8)));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#198: FILE: include/linux/ktrace.h:29:
+       struct __attribute__((packed)) ktrace_struct_##name$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#198: FILE: include/linux/ktrace.h:29:
+       struct __attribute__((packed)) ktrace_struct_##name

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#213: FILE: include/linux/ktrace.h:44:
+       do {                                                            \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#213: FILE: include/linux/ktrace.h:44:
+       do {                                                            \
+               static const char __kstrtab_##name[]                    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: include/linux/ktrace.h:45:
+               static const char __kstrtab_##name[]                    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#214: FILE: include/linux/ktrace.h:45:
+               static const char __kstrtab_##name[]                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#215: FILE: include/linux/ktrace.h:46:
+               __attribute__((section("__ktrace_strings")))            \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#215: FILE: include/linux/ktrace.h:46:
+               __attribute__((section("__ktrace_strings")))            \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ktrace_strings") over __attribute__((section("__ktrace_strings")))
#215: FILE: include/linux/ktrace.h:46:
+               __attribute__((section("__ktrace_strings")))            \

ERROR:CODE_INDENT: code indent should use tabs where possible
#216: FILE: include/linux/ktrace.h:47:
+               = #name "\0" format;                                    \$

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#216: FILE: include/linux/ktrace.h:47:
+               __attribute__((section("__ktrace_strings")))            \
+               = #name "\0" format;                                    \

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#216: FILE: include/linux/ktrace.h:47:
+               = #name "\0" format;                                    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#217: FILE: include/linux/ktrace.h:48:
+               static struct kernel_trace __ktrace_##name              \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#217: FILE: include/linux/ktrace.h:48:
+               static struct kernel_trace __ktrace_##name              \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#218: FILE: include/linux/ktrace.h:49:
+               __attribute__((section("__ktrace"), aligned(8))) =      \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#218: FILE: include/linux/ktrace.h:49:
+               __attribute__((section("__ktrace"), aligned(8))) =      \$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __section("__ktrace") over __attribute__((section("__ktrace")))
#218: FILE: include/linux/ktrace.h:49:
+               __attribute__((section("__ktrace"), aligned(8))) =      \

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#218: FILE: include/linux/ktrace.h:49:
+               __attribute__((section("__ktrace"), aligned(8))) =      \

ERROR:CODE_INDENT: code indent should use tabs where possible
#219: FILE: include/linux/ktrace.h:50:
+               { __kstrtab_##name, &__kstrtab_##name[sizeof(#name)],   \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#219: FILE: include/linux/ktrace.h:50:
+               { __kstrtab_##name, &__kstrtab_##name[sizeof(#name)],   \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#220: FILE: include/linux/ktrace.h:51:
+               NULL, 0, 0, NULL, LIST_HEAD_INIT(__ktrace_##name.list) }; \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#220: FILE: include/linux/ktrace.h:51:
+               NULL, 0, 0, NULL, LIST_HEAD_INIT(__ktrace_##name.list) }; \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#221: FILE: include/linux/ktrace.h:52:
+               __ktrace_check_format(format, ## args);                 \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#221: FILE: include/linux/ktrace.h:52:
+               __ktrace_check_format(format, ## args);                 \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#222: FILE: include/linux/ktrace.h:53:
+               if (unlikely(ktrace_enabled) &&                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#222: FILE: include/linux/ktrace.h:53:
+               if (unlikely(ktrace_enabled) &&                         \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#222: FILE: include/linux/ktrace.h:53:
+               if (unlikely(ktrace_enabled) &&                         \
[...]
+                       struct ktrace_struct_##name karg = { args };    \

ERROR:CODE_INDENT: code indent should use tabs where possible
#223: FILE: include/linux/ktrace.h:54:
+                               unlikely(__ktrace_##name.enabled)) {    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#223: FILE: include/linux/ktrace.h:54:
+                               unlikely(__ktrace_##name.enabled)) {    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#224: FILE: include/linux/ktrace.h:55:
+                       struct ktrace_struct_##name karg = { args };    \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#224: FILE: include/linux/ktrace.h:55:
+                       struct ktrace_struct_##name karg = { args };    \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#225: FILE: include/linux/ktrace.h:56:
+                       (*__ktrace_##name.func)                         \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#225: FILE: include/linux/ktrace.h:56:
+                       (*__ktrace_##name.func)                         \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#226: FILE: include/linux/ktrace.h:57:
+                       (&__ktrace_##name, &karg, sizeof(karg));        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#226: FILE: include/linux/ktrace.h:57:
+                       (&__ktrace_##name, &karg, sizeof(karg));        \$

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: include/linux/ktrace.h:58:
+               }                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: include/linux/ktrace.h:58:
+               }                                                       \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: include/linux/ktrace.h:59:
+       } while (0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#240: FILE: include/linux/ktrace.h:71:
+       do {                                                            \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#240: FILE: include/linux/ktrace.h:71:
+       do {                                                            \
+               if (0)                                                  \

ERROR:CODE_INDENT: code indent should use tabs where possible
#241: FILE: include/linux/ktrace.h:72:
+               if (0)                                                  \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#241: FILE: include/linux/ktrace.h:72:
+               if (0)                                                  \$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#241: FILE: include/linux/ktrace.h:72:
+               if (0)                                                  \
+                       ___ktrace_check_format(format, ## args);        \

ERROR:CODE_INDENT: code indent should use tabs where possible
#242: FILE: include/linux/ktrace.h:73:
+                       ___ktrace_check_format(format, ## args);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#242: FILE: include/linux/ktrace.h:73:
+                       ___ktrace_check_format(format, ## args);        \$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#243: FILE: include/linux/ktrace.h:74:
+       } while (0)$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#245: FILE: include/linux/ktrace.h:76:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#259: FILE: kernel/ktrace.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#260: FILE: kernel/ktrace.c:2:
+ * kernel/ktrace.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#287: FILE: kernel/ktrace.c:29:
+static uint16_t ktrace_next_id;

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#289: FILE: kernel/ktrace.c:31:
+extern struct kernel_trace __start___ktraces[];

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#290: FILE: kernel/ktrace.c:32:
+extern struct kernel_trace __stop___ktraces[];

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#296: FILE: kernel/ktrace.c:38:
+       struct hlist_node       hlist;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#297: FILE: kernel/ktrace.c:39:
+       char                    *name;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#298: FILE: kernel/ktrace.c:40:
+       char                    *format;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#299: FILE: kernel/ktrace.c:41:
+       size_t                  *stroff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#300: FILE: kernel/ktrace.c:42:
+       ktrace_probe_func       *func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#301: FILE: kernel/ktrace.c:43:
+       u32                     enabled:1, event_id:31;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#302: FILE: kernel/ktrace.c:44:
+       struct list_head        klist;  /* list of loaded ktraces */$

CHECK:BIT_MACRO: Prefer using the BIT macro
#306: FILE: kernel/ktrace.c:48:
+#define KTRACE_HASH_SIZE (1 << KTRACE_HASH_BITS)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#325: FILE: kernel/ktrace.c:67:
+       struct ring_buffer_event *event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#326: FILE: kernel/ktrace.c:68:
+       void *trace_event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#327: FILE: kernel/ktrace.c:69:
+       unsigned long flag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#329: FILE: kernel/ktrace.c:71:
+       event = ring_buffer_lock_reserve(trace_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#330: FILE: kernel/ktrace.c:72:
+                       sizeof(uint16_t) + event_size, &flag);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#330: FILE: kernel/ktrace.c:72:
+       event = ring_buffer_lock_reserve(trace_buffer,
+                       sizeof(uint16_t) + event_size, &flag);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#330: FILE: kernel/ktrace.c:72:
+                       sizeof(uint16_t) + event_size, &flag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#331: FILE: kernel/ktrace.c:73:
+       if (!event)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#331: FILE: kernel/ktrace.c:73:
+       if (!event)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#332: FILE: kernel/ktrace.c:74:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#332: FILE: kernel/ktrace.c:74:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#333: FILE: kernel/ktrace.c:75:
+       trace_event = ring_buffer_event_data(event);$

CHECK:SPACING: No space is necessary after a cast
#334: FILE: kernel/ktrace.c:76:
+       *(uint16_t *) trace_event = (uint16_t) kt->event_id;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#334: FILE: kernel/ktrace.c:76:
+       *(uint16_t *) trace_event = (uint16_t) kt->event_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#335: FILE: kernel/ktrace.c:77:
+       memcpy(trace_event + sizeof(uint16_t), data, event_size);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#336: FILE: kernel/ktrace.c:78:
+       ring_buffer_unlock_commit(trace_buffer, event, flag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#343: FILE: kernel/ktrace.c:85:
+       struct ring_buffer_event *event;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#344: FILE: kernel/ktrace.c:86:
+       void *trace_event, *p;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#345: FILE: kernel/ktrace.c:87:
+       unsigned long flag;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#346: FILE: kernel/ktrace.c:88:
+       size_t *offset, scanned;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#347: FILE: kernel/ktrace.c:89:
+       char *string;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#350: FILE: kernel/ktrace.c:92:
+        * Get the real length of the event, i.e., we use stroff array to$

ERROR:CODE_INDENT: code indent should use tabs where possible
#351: FILE: kernel/ktrace.c:93:
+        * locate string variables in the passed-in trace data and use their$

ERROR:CODE_INDENT: code indent should use tabs where possible
#352: FILE: kernel/ktrace.c:94:
+        * length to replace the size of the string pointers.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#353: FILE: kernel/ktrace.c:95:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#354: FILE: kernel/ktrace.c:96:
+       for (offset = kt->stroff; *offset != -1; offset++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#354: FILE: kernel/ktrace.c:96:
+       for (offset = kt->stroff; *offset != -1; offset++) {
+               string = *(char **) (data + *offset);

ERROR:CODE_INDENT: code indent should use tabs where possible
#355: FILE: kernel/ktrace.c:97:
+               string = *(char **) (data + *offset);$

CHECK:SPACING: No space is necessary after a cast
#355: FILE: kernel/ktrace.c:97:
+               string = *(char **) (data + *offset);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#355: FILE: kernel/ktrace.c:97:
+               string = *(char **) (data + *offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#356: FILE: kernel/ktrace.c:98:
+               event_size += strlen(string) + 1 - sizeof(char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#356: FILE: kernel/ktrace.c:98:
+               event_size += strlen(string) + 1 - sizeof(char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#357: FILE: kernel/ktrace.c:99:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#358: FILE: kernel/ktrace.c:100:
+       event = ring_buffer_lock_reserve(trace_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#359: FILE: kernel/ktrace.c:101:
+                       sizeof(uint16_t) + event_size, &flag);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#359: FILE: kernel/ktrace.c:101:
+       event = ring_buffer_lock_reserve(trace_buffer,
+                       sizeof(uint16_t) + event_size, &flag);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#359: FILE: kernel/ktrace.c:101:
+                       sizeof(uint16_t) + event_size, &flag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#360: FILE: kernel/ktrace.c:102:
+       if (!event)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#360: FILE: kernel/ktrace.c:102:
+       if (!event)
+               return;

ERROR:CODE_INDENT: code indent should use tabs where possible
#361: FILE: kernel/ktrace.c:103:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#361: FILE: kernel/ktrace.c:103:
+               return;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#362: FILE: kernel/ktrace.c:104:
+       trace_event = ring_buffer_event_data(event);$

CHECK:SPACING: No space is necessary after a cast
#363: FILE: kernel/ktrace.c:105:
+       *(uint16_t *) trace_event = (uint16_t) kt->event_id;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#363: FILE: kernel/ktrace.c:105:
+       *(uint16_t *) trace_event = (uint16_t) kt->event_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#364: FILE: kernel/ktrace.c:106:
+       p = trace_event + sizeof(uint16_t);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#366: FILE: kernel/ktrace.c:108:
+        * Copy the trace data into buffer. For string variables, we enter the$

ERROR:CODE_INDENT: code indent should use tabs where possible
#367: FILE: kernel/ktrace.c:109:
+        * string into the buffer. Otherwise, the passed in data is copied.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#368: FILE: kernel/ktrace.c:110:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: kernel/ktrace.c:111:
+       for (offset = kt->stroff, scanned = 0; *offset != -1; offset++) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#369: FILE: kernel/ktrace.c:111:
+       for (offset = kt->stroff, scanned = 0; *offset != -1; offset++) {
+               memcpy(p, data + scanned, *offset - scanned);

ERROR:CODE_INDENT: code indent should use tabs where possible
#370: FILE: kernel/ktrace.c:112:
+               memcpy(p, data + scanned, *offset - scanned);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: kernel/ktrace.c:112:
+               memcpy(p, data + scanned, *offset - scanned);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#371: FILE: kernel/ktrace.c:113:
+               p += *offset - scanned;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: kernel/ktrace.c:113:
+               p += *offset - scanned;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: kernel/ktrace.c:114:
+               string = *(char **) (data + *offset);$

CHECK:SPACING: No space is necessary after a cast
#372: FILE: kernel/ktrace.c:114:
+               string = *(char **) (data + *offset);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: kernel/ktrace.c:114:
+               string = *(char **) (data + *offset);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: kernel/ktrace.c:115:
+               memcpy(p, string, strlen(string) + 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: kernel/ktrace.c:115:
+               memcpy(p, string, strlen(string) + 1);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#374: FILE: kernel/ktrace.c:116:
+               p += strlen(string) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: kernel/ktrace.c:116:
+               p += strlen(string) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#375: FILE: kernel/ktrace.c:117:
+               scanned = *offset + sizeof(char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: kernel/ktrace.c:117:
+               scanned = *offset + sizeof(char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: kernel/ktrace.c:118:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#377: FILE: kernel/ktrace.c:119:
+       memcpy(p, data + scanned,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#378: FILE: kernel/ktrace.c:120:
+                       trace_event + sizeof(uint16_t) + event_size - p);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#378: FILE: kernel/ktrace.c:120:
+       memcpy(p, data + scanned,
+                       trace_event + sizeof(uint16_t) + event_size - p);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#378: FILE: kernel/ktrace.c:120:
+                       trace_event + sizeof(uint16_t) + event_size - p);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#379: FILE: kernel/ktrace.c:121:
+       ring_buffer_unlock_commit(trace_buffer, event, flag);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#385: FILE: kernel/ktrace.c:127:
+       if (trace_buffer && !ring_buffer_empty(trace_buffer))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#385: FILE: kernel/ktrace.c:127:
+       if (trace_buffer && !ring_buffer_empty(trace_buffer))
+               wake_up_interruptible(&trace_wait);

ERROR:CODE_INDENT: code indent should use tabs where possible
#386: FILE: kernel/ktrace.c:128:
+               wake_up_interruptible(&trace_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#386: FILE: kernel/ktrace.c:128:
+               wake_up_interruptible(&trace_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#387: FILE: kernel/ktrace.c:129:
+       mod_timer(&trace_timer, jiffies + TRACEREAD_WAKEUP_INTERVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#393: FILE: kernel/ktrace.c:135:
+       seq_printf(seq, "version %s\n", ktrace_version);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#394: FILE: kernel/ktrace.c:136:
+       return (*pos >= KTRACE_HASH_SIZE) ? NULL : &ktrace_table[*pos];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#399: FILE: kernel/ktrace.c:141:
+       ++*pos;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#400: FILE: kernel/ktrace.c:142:
+       return (*pos >= KTRACE_HASH_SIZE) ? NULL : &ktrace_table[*pos];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#405: FILE: kernel/ktrace.c:147:
+       struct hlist_head *head = v;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#406: FILE: kernel/ktrace.c:148:
+       struct hlist_node *node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#407: FILE: kernel/ktrace.c:149:
+       struct ktrace_entry *entry;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#408: FILE: kernel/ktrace.c:150:
+       struct ktrace_entry *entry;
+       hlist_for_each_entry(entry, node, head, hlist)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#408: FILE: kernel/ktrace.c:150:
+       hlist_for_each_entry(entry, node, head, hlist)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#408: FILE: kernel/ktrace.c:150:
+       hlist_for_each_entry(entry, node, head, hlist)
+               seq_printf(seq, "name '%s' format '%s' id %u %s\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#409: FILE: kernel/ktrace.c:151:
+               seq_printf(seq, "name '%s' format '%s' id %u %s\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#409: FILE: kernel/ktrace.c:151:
+               seq_printf(seq, "name '%s' format '%s' id %u %s\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: kernel/ktrace.c:152:
+                       entry->name, entry->format, entry->event_id,$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: kernel/ktrace.c:152:
+               seq_printf(seq, "name '%s' format '%s' id %u %s\n",
+                       entry->name, entry->format, entry->event_id,

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#410: FILE: kernel/ktrace.c:152:
+                       entry->name, entry->format, entry->event_id,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: kernel/ktrace.c:153:
+                       entry->enabled ? "enabled" : "disabled");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#411: FILE: kernel/ktrace.c:153:
+                       entry->enabled ? "enabled" : "disabled");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#412: FILE: kernel/ktrace.c:154:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#420: FILE: kernel/ktrace.c:162:
+       .start  = tracing_info_start,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#421: FILE: kernel/ktrace.c:163:
+       .next   = tracing_info_next,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#422: FILE: kernel/ktrace.c:164:
+       .show   = tracing_info_show,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#423: FILE: kernel/ktrace.c:165:
+       .stop   = tracing_info_stop,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#428: FILE: kernel/ktrace.c:170:
+       return seq_open(file, &tracing_info_seq_ops);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#432: FILE: kernel/ktrace.c:174:
+       .open   = tracing_info_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#433: FILE: kernel/ktrace.c:175:
+       .read   = seq_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#434: FILE: kernel/ktrace.c:176:
+       .llseek = seq_lseek,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#435: FILE: kernel/ktrace.c:177:
+       .release = seq_release,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#442: FILE: kernel/ktrace.c:184:
+static ssize_t trace_debugfs_write(struct file *filp, const char __user *ubuf,
                                                 ^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:CODE_INDENT: code indent should use tabs where possible
#443: FILE: kernel/ktrace.c:185:
+               size_t cnt, loff_t *ppos, tracecontrol_handle_func *func)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#443: FILE: kernel/ktrace.c:185:
+static ssize_t trace_debugfs_write(struct file *filp, const char __user *ubuf,
+               size_t cnt, loff_t *ppos, tracecontrol_handle_func *func)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#443: FILE: kernel/ktrace.c:185:
+               size_t cnt, loff_t *ppos, tracecontrol_handle_func *func)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#445: FILE: kernel/ktrace.c:187:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#446: FILE: kernel/ktrace.c:188:
+       char buf[64];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#447: FILE: kernel/ktrace.c:189:
+       unsigned long val;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#449: FILE: kernel/ktrace.c:191:
+       if (cnt >= sizeof(buf))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#449: FILE: kernel/ktrace.c:191:
+       if (cnt >= sizeof(buf))
+               return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#450: FILE: kernel/ktrace.c:192:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#450: FILE: kernel/ktrace.c:192:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#451: FILE: kernel/ktrace.c:193:
+       if (copy_from_user(&buf, ubuf, cnt))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#451: FILE: kernel/ktrace.c:193:
+       if (copy_from_user(&buf, ubuf, cnt))
+               return -EFAULT;

ERROR:CODE_INDENT: code indent should use tabs where possible
#452: FILE: kernel/ktrace.c:194:
+               return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#452: FILE: kernel/ktrace.c:194:
+               return -EFAULT;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#453: FILE: kernel/ktrace.c:195:
+       buf[cnt] = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#455: FILE: kernel/ktrace.c:197:
+       ret = strict_strtoul(buf, 10, &val);$

WARNING:CONSIDER_KSTRTO: strict_strtoul is obsolete, use kstrtoul instead
#455: FILE: kernel/ktrace.c:197:
+       ret = strict_strtoul(buf, 10, &val);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#456: FILE: kernel/ktrace.c:198:
+       if (ret < 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#456: FILE: kernel/ktrace.c:198:
+       if (ret < 0)
+               return ret;

ERROR:CODE_INDENT: code indent should use tabs where possible
#457: FILE: kernel/ktrace.c:199:
+               return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#457: FILE: kernel/ktrace.c:199:
+               return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#458: FILE: kernel/ktrace.c:200:
+       val = !!val;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#460: FILE: kernel/ktrace.c:202:
+       func(filp, val, &cnt);
             ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#460: FILE: kernel/ktrace.c:202:
+       func(filp, val, &cnt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#462: FILE: kernel/ktrace.c:204:
+       filp->f_pos += cnt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#463: FILE: kernel/ktrace.c:205:
+       return cnt;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#467: FILE: kernel/ktrace.c:209:
+static ssize_t tracing_control_read(struct file *filp, char __user *ubuf,
                                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: kernel/ktrace.c:210:
+               size_t cnt, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#468: FILE: kernel/ktrace.c:210:
+static ssize_t tracing_control_read(struct file *filp, char __user *ubuf,
+               size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#468: FILE: kernel/ktrace.c:210:
+               size_t cnt, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: kernel/ktrace.c:212:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#471: FILE: kernel/ktrace.c:213:
+       char buf[64];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#472: FILE: kernel/ktrace.c:214:
+       char buf[64];
+       ret = snprintf(buf, 64, "%u\n", ktrace_enabled);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#472: FILE: kernel/ktrace.c:214:
+       ret = snprintf(buf, 64, "%u\n", ktrace_enabled);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#473: FILE: kernel/ktrace.c:215:
+       return simple_read_from_buffer(ubuf, cnt, ppos, buf, ret);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#476: FILE: kernel/ktrace.c:218:
+static void __tracing_control_write(struct file *filp,
                                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#477: FILE: kernel/ktrace.c:219:
+               unsigned long val, size_t *cnt)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#477: FILE: kernel/ktrace.c:219:
+static void __tracing_control_write(struct file *filp,
+               unsigned long val, size_t *cnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#477: FILE: kernel/ktrace.c:219:
+               unsigned long val, size_t *cnt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#479: FILE: kernel/ktrace.c:221:
+       if (val ^ ktrace_enabled) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#479: FILE: kernel/ktrace.c:221:
+       if (val ^ ktrace_enabled) {
+               if (val) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#480: FILE: kernel/ktrace.c:222:
+               if (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#480: FILE: kernel/ktrace.c:222:
+               if (val) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#480: FILE: kernel/ktrace.c:222:
+               if (val) {
+                       trace_timer.expires =

ERROR:CODE_INDENT: code indent should use tabs where possible
#481: FILE: kernel/ktrace.c:223:
+                       trace_timer.expires =$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#481: FILE: kernel/ktrace.c:223:
+                       trace_timer.expires =$

ERROR:CODE_INDENT: code indent should use tabs where possible
#482: FILE: kernel/ktrace.c:224:
+                               jiffies + TRACEREAD_WAKEUP_INTERVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#482: FILE: kernel/ktrace.c:224:
+                               jiffies + TRACEREAD_WAKEUP_INTERVAL;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#483: FILE: kernel/ktrace.c:225:
+                       add_timer(&trace_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#483: FILE: kernel/ktrace.c:225:
+                       add_timer(&trace_timer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#484: FILE: kernel/ktrace.c:226:
+                       ktrace_enabled = 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#484: FILE: kernel/ktrace.c:226:
+                       ktrace_enabled = 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#485: FILE: kernel/ktrace.c:227:
+               } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#485: FILE: kernel/ktrace.c:227:
+               } else {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#485: FILE: kernel/ktrace.c:227:
+               } else {
+                       ktrace_enabled = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#486: FILE: kernel/ktrace.c:228:
+                       ktrace_enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#486: FILE: kernel/ktrace.c:228:
+                       ktrace_enabled = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#487: FILE: kernel/ktrace.c:229:
+                       del_timer_sync(&trace_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#487: FILE: kernel/ktrace.c:229:
+                       del_timer_sync(&trace_timer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#488: FILE: kernel/ktrace.c:230:
+                       if (trace_buffer && !ring_buffer_empty(trace_buffer))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#488: FILE: kernel/ktrace.c:230:
+                       if (trace_buffer && !ring_buffer_empty(trace_buffer))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#488: FILE: kernel/ktrace.c:230:
+                       if (trace_buffer && !ring_buffer_empty(trace_buffer))
+                               wake_up_interruptible(&trace_wait);

ERROR:CODE_INDENT: code indent should use tabs where possible
#489: FILE: kernel/ktrace.c:231:
+                               wake_up_interruptible(&trace_wait);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#489: FILE: kernel/ktrace.c:231:
+                               wake_up_interruptible(&trace_wait);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#490: FILE: kernel/ktrace.c:232:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#490: FILE: kernel/ktrace.c:232:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#491: FILE: kernel/ktrace.c:233:
+       }$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#494: FILE: kernel/ktrace.c:236:
+static ssize_t tracing_control_write(struct file *filp, const char
                                                   ^^^^

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#495: FILE: kernel/ktrace.c:236:
__user *ubuf,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

ERROR:CODE_INDENT: code indent should use tabs where possible
#496: FILE: kernel/ktrace.c:237:
+               size_t cnt, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#496: FILE: kernel/ktrace.c:237:
+               size_t cnt, loff_t *ppos)$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#498: FILE: kernel/ktrace.c:239:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,
                                   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#498: FILE: kernel/ktrace.c:239:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#499: FILE: kernel/ktrace.c:240:
+                       __tracing_control_write);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#499: FILE: kernel/ktrace.c:240:
+                       __tracing_control_write);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#503: FILE: kernel/ktrace.c:244:
+       .read   = tracing_control_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#504: FILE: kernel/ktrace.c:245:
+       .write  = tracing_control_write,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#509: FILE: kernel/ktrace.c:250:
+               ktrace_probe_func *func, int enabled)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#509: FILE: kernel/ktrace.c:250:
+static int update_ktrace(struct ktrace_entry *entry,
+               ktrace_probe_func *func, int enabled)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#509: FILE: kernel/ktrace.c:250:
+               ktrace_probe_func *func, int enabled)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#511: FILE: kernel/ktrace.c:252:
+       struct kernel_trace *iter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#513: FILE: kernel/ktrace.c:254:
+       if (!tracedir)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#513: FILE: kernel/ktrace.c:254:
+       if (!tracedir)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#514: FILE: kernel/ktrace.c:255:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#514: FILE: kernel/ktrace.c:255:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#515: FILE: kernel/ktrace.c:256:
+       entry->enabled = enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#516: FILE: kernel/ktrace.c:257:
+       entry->func = func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#517: FILE: kernel/ktrace.c:258:
+       list_for_each_entry(iter, &entry->klist, list) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#517: FILE: kernel/ktrace.c:258:
+       list_for_each_entry(iter, &entry->klist, list) {
+               iter->stroff = entry->stroff;

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: kernel/ktrace.c:259:
+               iter->stroff = entry->stroff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: kernel/ktrace.c:259:
+               iter->stroff = entry->stroff;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#519: FILE: kernel/ktrace.c:260:
+               iter->func = func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#519: FILE: kernel/ktrace.c:260:
+               iter->func = func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#520: FILE: kernel/ktrace.c:261:
+               iter->enabled = enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#520: FILE: kernel/ktrace.c:261:
+               iter->enabled = enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#521: FILE: kernel/ktrace.c:262:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#522: FILE: kernel/ktrace.c:263:
+       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#526: FILE: kernel/ktrace.c:267:
+               ktrace_probe_func *probefunc)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#526: FILE: kernel/ktrace.c:267:
+static int ktrace_probe_register(struct ktrace_entry *entry,
+               ktrace_probe_func *probefunc)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: kernel/ktrace.c:267:
+               ktrace_probe_func *probefunc)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: kernel/ktrace.c:269:
+       return update_ktrace(entry, probefunc, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: kernel/ktrace.c:274:
+       return update_ktrace(entry, NULL, 0);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#536: FILE: kernel/ktrace.c:277:
+static int ktrace_control_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: kernel/ktrace.c:279:
+       filp->private_data = inode->i_private;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: kernel/ktrace.c:280:
+       return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#542: FILE: kernel/ktrace.c:283:
+static ssize_t ktrace_control_read(struct file *filp, char __user *ubuf,
                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#543: FILE: kernel/ktrace.c:284:
+               size_t cnt, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#543: FILE: kernel/ktrace.c:284:
+static ssize_t ktrace_control_read(struct file *filp, char __user *ubuf,
+               size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: kernel/ktrace.c:284:
+               size_t cnt, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: kernel/ktrace.c:286:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: kernel/ktrace.c:287:
+       char buf[64];$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: kernel/ktrace.c:288:
+       struct ktrace_entry *entry = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: kernel/ktrace.c:290:
+       ret = snprintf(buf, 64, "%u\n", entry->enabled);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#550: FILE: kernel/ktrace.c:291:
+       return simple_read_from_buffer(ubuf, cnt, ppos, buf, ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: kernel/ktrace.c:303:
+       int count = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: kernel/ktrace.c:304:
+       char *fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: kernel/ktrace.c:305:
+       int qualifier;          /* 'h', 'l', or 'L' for integer fields */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: kernel/ktrace.c:306:
+       size_t offset = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: kernel/ktrace.c:308:
+       for (fmt = strstr(entry->format, "%s"); fmt; fmt = strstr(++fmt, "%s"))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#567: FILE: kernel/ktrace.c:308:
+       for (fmt = strstr(entry->format, "%s"); fmt; fmt = strstr(++fmt, "%s"))
+               count++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#568: FILE: kernel/ktrace.c:309:
+               count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#568: FILE: kernel/ktrace.c:309:
+               count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#569: FILE: kernel/ktrace.c:310:
+       if (!count)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#569: FILE: kernel/ktrace.c:310:
+       if (!count)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#570: FILE: kernel/ktrace.c:311:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#570: FILE: kernel/ktrace.c:311:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#571: FILE: kernel/ktrace.c:312:
+       entry->stroff = kmalloc(sizeof(size_t) * (count + 1), GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#572: FILE: kernel/ktrace.c:313:
+       if (!entry->stroff)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#572: FILE: kernel/ktrace.c:313:
+       if (!entry->stroff)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#573: FILE: kernel/ktrace.c:314:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#573: FILE: kernel/ktrace.c:314:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#575: FILE: kernel/ktrace.c:316:
+       for (fmt = entry->format, count = 0; *fmt ; ++fmt) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#575: FILE: kernel/ktrace.c:316:
+       for (fmt = entry->format, count = 0; *fmt ; ++fmt) {
+               if (*fmt != '%')

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: kernel/ktrace.c:317:
+               if (*fmt != '%')$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: kernel/ktrace.c:317:
+               if (*fmt != '%')$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#576: FILE: kernel/ktrace.c:317:
+               if (*fmt != '%')
+                       continue;

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: kernel/ktrace.c:318:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#577: FILE: kernel/ktrace.c:318:
+                       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#579: FILE: kernel/ktrace.c:320:
+               ++fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#579: FILE: kernel/ktrace.c:320:
+               ++fmt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#580: FILE: kernel/ktrace.c:321:
+               switch (*fmt) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#580: FILE: kernel/ktrace.c:321:
+               switch (*fmt) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#581: FILE: kernel/ktrace.c:322:
+               case '-':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#581: FILE: kernel/ktrace.c:322:
+               case '-':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#582: FILE: kernel/ktrace.c:323:
+               case '+':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#582: FILE: kernel/ktrace.c:323:
+               case '+':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#583: FILE: kernel/ktrace.c:324:
+               case ' ':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#583: FILE: kernel/ktrace.c:324:
+               case ' ':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#584: FILE: kernel/ktrace.c:325:
+               case '#':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#584: FILE: kernel/ktrace.c:325:
+               case '#':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#585: FILE: kernel/ktrace.c:326:
+               case '0':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#585: FILE: kernel/ktrace.c:326:
+               case '0':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#586: FILE: kernel/ktrace.c:327:
+                       ++fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#586: FILE: kernel/ktrace.c:327:
+                       ++fmt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#587: FILE: kernel/ktrace.c:328:
+                       goto repeat;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#587: FILE: kernel/ktrace.c:328:
+                       goto repeat;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#588: FILE: kernel/ktrace.c:329:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#588: FILE: kernel/ktrace.c:329:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#590: FILE: kernel/ktrace.c:331:
+               while (isdigit(*fmt))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#590: FILE: kernel/ktrace.c:331:
+               while (isdigit(*fmt))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#590: FILE: kernel/ktrace.c:331:
+               while (isdigit(*fmt))
+                       fmt++;

ERROR:CODE_INDENT: code indent should use tabs where possible
#591: FILE: kernel/ktrace.c:332:
+                       fmt++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#591: FILE: kernel/ktrace.c:332:
+                       fmt++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#593: FILE: kernel/ktrace.c:334:
+               /* get the conversion qualifier */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#594: FILE: kernel/ktrace.c:335:
+               qualifier = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#594: FILE: kernel/ktrace.c:335:
+               qualifier = -1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#595: FILE: kernel/ktrace.c:336:
+               if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#595: FILE: kernel/ktrace.c:336:
+               if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#595: FILE: kernel/ktrace.c:336:
+               if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
+                       qualifier = *fmt;

ERROR:CODE_INDENT: code indent should use tabs where possible
#596: FILE: kernel/ktrace.c:337:
+                       qualifier = *fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#596: FILE: kernel/ktrace.c:337:
+                       qualifier = *fmt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#597: FILE: kernel/ktrace.c:338:
+                       ++fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: kernel/ktrace.c:338:
+                       ++fmt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#598: FILE: kernel/ktrace.c:339:
+                       if (qualifier == 'l' && *fmt == 'l') {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#598: FILE: kernel/ktrace.c:339:
+                       if (qualifier == 'l' && *fmt == 'l') {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#598: FILE: kernel/ktrace.c:339:
+                       if (qualifier == 'l' && *fmt == 'l') {
+                               qualifier = 'L';

ERROR:CODE_INDENT: code indent should use tabs where possible
#599: FILE: kernel/ktrace.c:340:
+                               qualifier = 'L';$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#599: FILE: kernel/ktrace.c:340:
+                               qualifier = 'L';$

ERROR:CODE_INDENT: code indent should use tabs where possible
#600: FILE: kernel/ktrace.c:341:
+                               ++fmt;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#600: FILE: kernel/ktrace.c:341:
+                               ++fmt;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: kernel/ktrace.c:342:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#601: FILE: kernel/ktrace.c:342:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: kernel/ktrace.c:343:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#602: FILE: kernel/ktrace.c:343:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: kernel/ktrace.c:345:
+               switch (*fmt) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: kernel/ktrace.c:345:
+               switch (*fmt) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#605: FILE: kernel/ktrace.c:346:
+               case 'c':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#605: FILE: kernel/ktrace.c:346:
+               case 'c':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#606: FILE: kernel/ktrace.c:347:
+                       offset += sizeof(char);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#606: FILE: kernel/ktrace.c:347:
+                       offset += sizeof(char);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#607: FILE: kernel/ktrace.c:348:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#607: FILE: kernel/ktrace.c:348:
+                       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#608: FILE: kernel/ktrace.c:349:
+               case 's':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#608: FILE: kernel/ktrace.c:349:
+               case 's':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#609: FILE: kernel/ktrace.c:350:
+                       entry->stroff[count] = offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#609: FILE: kernel/ktrace.c:350:
+                       entry->stroff[count] = offset;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#610: FILE: kernel/ktrace.c:351:
+                       count++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#610: FILE: kernel/ktrace.c:351:
+                       count++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#611: FILE: kernel/ktrace.c:352:
+                       offset += sizeof(char *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#611: FILE: kernel/ktrace.c:352:
+                       offset += sizeof(char *);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: kernel/ktrace.c:353:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#612: FILE: kernel/ktrace.c:353:
+                       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#613: FILE: kernel/ktrace.c:354:
+               case 'p':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#613: FILE: kernel/ktrace.c:354:
+               case 'p':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#614: FILE: kernel/ktrace.c:355:
+                       offset += sizeof(void *);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#614: FILE: kernel/ktrace.c:355:
+                       offset += sizeof(void *);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#615: FILE: kernel/ktrace.c:356:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#615: FILE: kernel/ktrace.c:356:
+                       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#616: FILE: kernel/ktrace.c:357:
+               case 'd':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#616: FILE: kernel/ktrace.c:357:
+               case 'd':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#617: FILE: kernel/ktrace.c:358:
+               case 'i':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#617: FILE: kernel/ktrace.c:358:
+               case 'i':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#618: FILE: kernel/ktrace.c:359:
+               case 'o':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#618: FILE: kernel/ktrace.c:359:
+               case 'o':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#619: FILE: kernel/ktrace.c:360:
+               case 'u':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#619: FILE: kernel/ktrace.c:360:
+               case 'u':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#620: FILE: kernel/ktrace.c:361:
+               case 'x':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#620: FILE: kernel/ktrace.c:361:
+               case 'x':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#621: FILE: kernel/ktrace.c:362:
+               case 'X':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#621: FILE: kernel/ktrace.c:362:
+               case 'X':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#622: FILE: kernel/ktrace.c:363:
+                       switch (qualifier) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#622: FILE: kernel/ktrace.c:363:
+                       switch (qualifier) {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#623: FILE: kernel/ktrace.c:364:
+                       case 'L':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#623: FILE: kernel/ktrace.c:364:
+                       case 'L':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#624: FILE: kernel/ktrace.c:365:
+                               offset += sizeof(long long);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#624: FILE: kernel/ktrace.c:365:
+                               offset += sizeof(long long);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#625: FILE: kernel/ktrace.c:366:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#625: FILE: kernel/ktrace.c:366:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#626: FILE: kernel/ktrace.c:367:
+                       case 'l':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#626: FILE: kernel/ktrace.c:367:
+                       case 'l':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#627: FILE: kernel/ktrace.c:368:
+                               offset += sizeof(long);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#627: FILE: kernel/ktrace.c:368:
+                               offset += sizeof(long);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#628: FILE: kernel/ktrace.c:369:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#628: FILE: kernel/ktrace.c:369:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#629: FILE: kernel/ktrace.c:370:
+                       case 'h':$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#629: FILE: kernel/ktrace.c:370:
+                       case 'h':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#630: FILE: kernel/ktrace.c:371:
+                               offset += sizeof(short);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#630: FILE: kernel/ktrace.c:371:
+                               offset += sizeof(short);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#631: FILE: kernel/ktrace.c:372:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#631: FILE: kernel/ktrace.c:372:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#632: FILE: kernel/ktrace.c:373:
+                       default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#633: FILE: kernel/ktrace.c:374:
+                               offset += sizeof(int);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#633: FILE: kernel/ktrace.c:374:
+                               offset += sizeof(int);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#634: FILE: kernel/ktrace.c:375:
+                               break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#634: FILE: kernel/ktrace.c:375:
+                               break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#635: FILE: kernel/ktrace.c:376:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#635: FILE: kernel/ktrace.c:376:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#636: FILE: kernel/ktrace.c:377:
+                       break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#636: FILE: kernel/ktrace.c:377:
+                       break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#637: FILE: kernel/ktrace.c:378:
+               default:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#638: FILE: kernel/ktrace.c:379:
+                       printk(KERN_WARNING "unknown format '%c'", *fmt);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#638: FILE: kernel/ktrace.c:379:
+                       printk(KERN_WARNING "unknown format '%c'", *fmt);$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#638: FILE: kernel/ktrace.c:379:
+                       printk(KERN_WARNING "unknown format '%c'", *fmt);

ERROR:CODE_INDENT: code indent should use tabs where possible
#639: FILE: kernel/ktrace.c:380:
+                       continue;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#639: FILE: kernel/ktrace.c:380:
+                       continue;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#640: FILE: kernel/ktrace.c:381:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#640: FILE: kernel/ktrace.c:381:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#641: FILE: kernel/ktrace.c:382:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#642: FILE: kernel/ktrace.c:383:
+       entry->stroff[count] = -1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#643: FILE: kernel/ktrace.c:384:
+       return 1;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#646: FILE: kernel/ktrace.c:387:
+static void __ktrace_control_write(struct file *filp,
                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: kernel/ktrace.c:388:
+               unsigned long val, size_t *cnt)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: kernel/ktrace.c:388:
+static void __ktrace_control_write(struct file *filp,
+               unsigned long val, size_t *cnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: kernel/ktrace.c:388:
+               unsigned long val, size_t *cnt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#649: FILE: kernel/ktrace.c:390:
+       struct ktrace_entry *entry = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#650: FILE: kernel/ktrace.c:391:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#652: FILE: kernel/ktrace.c:393:
+       mutex_lock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#653: FILE: kernel/ktrace.c:394:
+       if (val ^ entry->enabled) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#653: FILE: kernel/ktrace.c:394:
+       if (val ^ entry->enabled) {
+               if (val) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#654: FILE: kernel/ktrace.c:395:
+               if (val) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#654: FILE: kernel/ktrace.c:395:
+               if (val) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#654: FILE: kernel/ktrace.c:395:
+               if (val) {
+                       ret = contain_string_arguments(entry);

CHECK:BRACES: braces {} should be used on all arms of this statement
#654: FILE: kernel/ktrace.c:395:
+               if (val) {
[...]
+               } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#655: FILE: kernel/ktrace.c:396:
+                       ret = contain_string_arguments(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#655: FILE: kernel/ktrace.c:396:
+                       ret = contain_string_arguments(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#656: FILE: kernel/ktrace.c:397:
+                       if (ret == 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#656: FILE: kernel/ktrace.c:397:
+                       if (ret == 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#656: FILE: kernel/ktrace.c:397:
+                       if (ret == 0)
+                               ktrace_probe_register(entry, ring_buffer_probe);

ERROR:CODE_INDENT: code indent should use tabs where possible
#657: FILE: kernel/ktrace.c:398:
+                               ktrace_probe_register(entry, ring_buffer_probe);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#657: FILE: kernel/ktrace.c:398:
+                               ktrace_probe_register(entry, ring_buffer_probe);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#658: FILE: kernel/ktrace.c:399:
+                       else if (ret > 0)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#658: FILE: kernel/ktrace.c:399:
+                       else if (ret > 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#658: FILE: kernel/ktrace.c:399:
+                       else if (ret > 0)
+                               ktrace_probe_register(entry, string_probe);

ERROR:CODE_INDENT: code indent should use tabs where possible
#659: FILE: kernel/ktrace.c:400:
+                               ktrace_probe_register(entry, string_probe);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#659: FILE: kernel/ktrace.c:400:
+                               ktrace_probe_register(entry, string_probe);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#660: FILE: kernel/ktrace.c:401:
+                       else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#660: FILE: kernel/ktrace.c:401:
+                       else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#660: FILE: kernel/ktrace.c:401:
+                       else
+                               *cnt = ret;

ERROR:CODE_INDENT: code indent should use tabs where possible
#661: FILE: kernel/ktrace.c:402:
+                               *cnt = ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#661: FILE: kernel/ktrace.c:402:
+                               *cnt = ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#662: FILE: kernel/ktrace.c:403:
+               } else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#662: FILE: kernel/ktrace.c:403:
+               } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#662: FILE: kernel/ktrace.c:403:
+               } else
+                       ktrace_probe_unregister(entry);

CHECK:BRACES: Unbalanced braces around else statement
#662: FILE: kernel/ktrace.c:403:
+               } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#663: FILE: kernel/ktrace.c:404:
+                       ktrace_probe_unregister(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#663: FILE: kernel/ktrace.c:404:
+                       ktrace_probe_unregister(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#664: FILE: kernel/ktrace.c:405:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#665: FILE: kernel/ktrace.c:406:
+       mutex_unlock(&ktrace_mutex);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#668: FILE: kernel/ktrace.c:409:
+static ssize_t ktrace_control_write(struct file *filp, const char __user *ubuf,
                                                  ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#669: FILE: kernel/ktrace.c:410:
+               size_t cnt, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: kernel/ktrace.c:410:
+static ssize_t ktrace_control_write(struct file *filp, const char __user *ubuf,
+               size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#669: FILE: kernel/ktrace.c:410:
+               size_t cnt, loff_t *ppos)$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#671: FILE: kernel/ktrace.c:412:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,
                                   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#671: FILE: kernel/ktrace.c:412:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#672: FILE: kernel/ktrace.c:413:
+                       __ktrace_control_write);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#672: FILE: kernel/ktrace.c:413:
+                       __ktrace_control_write);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#676: FILE: kernel/ktrace.c:417:
+       .open   = ktrace_control_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#677: FILE: kernel/ktrace.c:418:
+       .read   = ktrace_control_read,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#678: FILE: kernel/ktrace.c:419:
+       .write  = ktrace_control_write,$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#682: FILE: kernel/ktrace.c:423:
+ * Called during initialization or after loading a module */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#685: FILE: kernel/ktrace.c:426:
+       struct ktrace_entry *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#686: FILE: kernel/ktrace.c:427:
+       size_t name_len = strlen(ktrace->name) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#687: FILE: kernel/ktrace.c:428:
+       u32 hash = jhash(ktrace->name, name_len-1, 0);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#687: FILE: kernel/ktrace.c:428:
+       u32 hash = jhash(ktrace->name, name_len-1, 0);
                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#688: FILE: kernel/ktrace.c:429:
+       struct hlist_head *head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#689: FILE: kernel/ktrace.c:430:
+       struct hlist_node *node;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#690: FILE: kernel/ktrace.c:431:
+       struct dentry *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#692: FILE: kernel/ktrace.c:433:
+       if (!tracedir)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#692: FILE: kernel/ktrace.c:433:
+       if (!tracedir)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#693: FILE: kernel/ktrace.c:434:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#693: FILE: kernel/ktrace.c:434:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#694: FILE: kernel/ktrace.c:435:
+       head = &ktrace_table[hash & ((1 << KTRACE_HASH_BITS)-1)];$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#694: FILE: kernel/ktrace.c:435:
+       head = &ktrace_table[hash & ((1 << KTRACE_HASH_BITS)-1)];
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#695: FILE: kernel/ktrace.c:436:
+       hlist_for_each_entry(entry, node, head, hlist) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#695: FILE: kernel/ktrace.c:436:
+       hlist_for_each_entry(entry, node, head, hlist) {
+               if (!strcmp(ktrace->name, entry->name)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#696: FILE: kernel/ktrace.c:437:
+               if (!strcmp(ktrace->name, entry->name)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#696: FILE: kernel/ktrace.c:437:
+               if (!strcmp(ktrace->name, entry->name)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#696: FILE: kernel/ktrace.c:437:
+               if (!strcmp(ktrace->name, entry->name)) {
+                       if (strcmp(ktrace->format, entry->format)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#697: FILE: kernel/ktrace.c:438:
+                       if (strcmp(ktrace->format, entry->format)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#697: FILE: kernel/ktrace.c:438:
+                       if (strcmp(ktrace->format, entry->format)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#697: FILE: kernel/ktrace.c:438:
+                       if (strcmp(ktrace->format, entry->format)) {
+                               printk(KERN_WARNING "the format of tracepoint "

ERROR:CODE_INDENT: code indent should use tabs where possible
#698: FILE: kernel/ktrace.c:439:
+                               printk(KERN_WARNING "the format of tracepoint "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#698: FILE: kernel/ktrace.c:439:
+                               printk(KERN_WARNING "the format of tracepoint "$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#698: FILE: kernel/ktrace.c:439:
+                               printk(KERN_WARNING "the format of tracepoint "

ERROR:CODE_INDENT: code indent should use tabs where possible
#699: FILE: kernel/ktrace.c:440:
+                                       "\'%s\' changes from \'%s\' to \'%s\'."$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#699: FILE: kernel/ktrace.c:440:
+                                       "\'%s\' changes from \'%s\' to \'%s\'."$

WARNING:SPLIT_STRING: quoted string split across lines
#699: FILE: kernel/ktrace.c:440:
+                               printk(KERN_WARNING "the format of tracepoint "
+                                       "\'%s\' changes from \'%s\' to \'%s\'."

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

ERROR:CODE_INDENT: code indent should use tabs where possible
#700: FILE: kernel/ktrace.c:441:
+                                       "Dynamic changing of trace format is "$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#700: FILE: kernel/ktrace.c:441:
+                                       "Dynamic changing of trace format is "$

WARNING:SPLIT_STRING: quoted string split across lines
#700: FILE: kernel/ktrace.c:441:
+                                       "\'%s\' changes from \'%s\' to \'%s\'."
+                                       "Dynamic changing of trace format is "

ERROR:CODE_INDENT: code indent should use tabs where possible
#701: FILE: kernel/ktrace.c:442:
+                                       "not supported yet!\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#701: FILE: kernel/ktrace.c:442:
+                                       "not supported yet!\n",$

WARNING:SPLIT_STRING: quoted string split across lines
#701: FILE: kernel/ktrace.c:442:
+                                       "Dynamic changing of trace format is "
+                                       "not supported yet!\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#702: FILE: kernel/ktrace.c:443:
+                                       ktrace->name, entry->format,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#702: FILE: kernel/ktrace.c:443:
+                                       ktrace->name, entry->format,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#703: FILE: kernel/ktrace.c:444:
+                                       ktrace->format);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#703: FILE: kernel/ktrace.c:444:
+                                       ktrace->format);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#704: FILE: kernel/ktrace.c:445:
+                               return ERR_PTR(-EINVAL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#704: FILE: kernel/ktrace.c:445:
+                               return ERR_PTR(-EINVAL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#705: FILE: kernel/ktrace.c:446:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#705: FILE: kernel/ktrace.c:446:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#706: FILE: kernel/ktrace.c:447:
+                       ktrace->enabled = entry->enabled;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#706: FILE: kernel/ktrace.c:447:
+                       ktrace->enabled = entry->enabled;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#707: FILE: kernel/ktrace.c:448:
+                       ktrace->func = entry->func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#707: FILE: kernel/ktrace.c:448:
+                       ktrace->func = entry->func;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#708: FILE: kernel/ktrace.c:449:
+                       ktrace->event_id = entry->event_id;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#708: FILE: kernel/ktrace.c:449:
+                       ktrace->event_id = entry->event_id;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#709: FILE: kernel/ktrace.c:450:
+                       if (list_empty(&entry->klist))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#709: FILE: kernel/ktrace.c:450:
+                       if (list_empty(&entry->klist))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#709: FILE: kernel/ktrace.c:450:
+                       if (list_empty(&entry->klist))
+                               goto add_head;

ERROR:CODE_INDENT: code indent should use tabs where possible
#710: FILE: kernel/ktrace.c:451:
+                               goto add_head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#710: FILE: kernel/ktrace.c:451:
+                               goto add_head;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#711: FILE: kernel/ktrace.c:452:
+                       list_add_tail(&ktrace->list, &entry->klist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#711: FILE: kernel/ktrace.c:452:
+                       list_add_tail(&ktrace->list, &entry->klist);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#712: FILE: kernel/ktrace.c:453:
+                       return entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#712: FILE: kernel/ktrace.c:453:
+                       return entry;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#713: FILE: kernel/ktrace.c:454:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#713: FILE: kernel/ktrace.c:454:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#714: FILE: kernel/ktrace.c:455:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#715: FILE: kernel/ktrace.c:456:
+       entry = kmalloc(sizeof(struct ktrace_entry), GFP_KERNEL);$

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*entry)...) over kmalloc(sizeof(struct ktrace_entry)...)
#715: FILE: kernel/ktrace.c:456:
+       entry = kmalloc(sizeof(struct ktrace_entry), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#716: FILE: kernel/ktrace.c:457:
+       if (!entry)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#716: FILE: kernel/ktrace.c:457:
+       if (!entry)
+               return ERR_PTR(-ENOMEM);

ERROR:CODE_INDENT: code indent should use tabs where possible
#717: FILE: kernel/ktrace.c:458:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#717: FILE: kernel/ktrace.c:458:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#718: FILE: kernel/ktrace.c:459:
+       entry->name = kmalloc(name_len, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#719: FILE: kernel/ktrace.c:460:
+       if (!entry->name) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#719: FILE: kernel/ktrace.c:460:
+       if (!entry->name) {
+               kfree(entry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#720: FILE: kernel/ktrace.c:461:
+               kfree(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: kernel/ktrace.c:461:
+               kfree(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#721: FILE: kernel/ktrace.c:462:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: kernel/ktrace.c:462:
+               return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#722: FILE: kernel/ktrace.c:463:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: kernel/ktrace.c:464:
+       memcpy(entry->name, ktrace->name, name_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#724: FILE: kernel/ktrace.c:465:
+       if (ktrace->format) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#724: FILE: kernel/ktrace.c:465:
+       if (ktrace->format) {
+               size_t format_len = strlen(ktrace->format) + 1;

CHECK:BRACES: braces {} should be used on all arms of this statement
#724: FILE: kernel/ktrace.c:465:
+       if (ktrace->format) {
[...]
+       } else
[...]

ERROR:CODE_INDENT: code indent should use tabs where possible
#725: FILE: kernel/ktrace.c:466:
+               size_t format_len = strlen(ktrace->format) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#725: FILE: kernel/ktrace.c:466:
+               size_t format_len = strlen(ktrace->format) + 1;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#726: FILE: kernel/ktrace.c:467:
+               entry->format = kmalloc(format_len, GFP_KERNEL);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#726: FILE: kernel/ktrace.c:467:
+               size_t format_len = strlen(ktrace->format) + 1;
+               entry->format = kmalloc(format_len, GFP_KERNEL);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#726: FILE: kernel/ktrace.c:467:
+               entry->format = kmalloc(format_len, GFP_KERNEL);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#727: FILE: kernel/ktrace.c:468:
+               if (!entry->format) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#727: FILE: kernel/ktrace.c:468:
+               if (!entry->format) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#727: FILE: kernel/ktrace.c:468:
+               if (!entry->format) {
+                       kfree(entry->name);

ERROR:CODE_INDENT: code indent should use tabs where possible
#728: FILE: kernel/ktrace.c:469:
+                       kfree(entry->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#728: FILE: kernel/ktrace.c:469:
+                       kfree(entry->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#729: FILE: kernel/ktrace.c:470:
+                       kfree(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#729: FILE: kernel/ktrace.c:470:
+                       kfree(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#730: FILE: kernel/ktrace.c:471:
+                       return ERR_PTR(-ENOMEM);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#730: FILE: kernel/ktrace.c:471:
+                       return ERR_PTR(-ENOMEM);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#731: FILE: kernel/ktrace.c:472:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#731: FILE: kernel/ktrace.c:472:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#732: FILE: kernel/ktrace.c:473:
+               memcpy(entry->format, ktrace->format, format_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#732: FILE: kernel/ktrace.c:473:
+               memcpy(entry->format, ktrace->format, format_len);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#733: FILE: kernel/ktrace.c:474:
+       } else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#733: FILE: kernel/ktrace.c:474:
+       } else
+               entry->format = NULL;

CHECK:BRACES: Unbalanced braces around else statement
#733: FILE: kernel/ktrace.c:474:
+       } else

ERROR:CODE_INDENT: code indent should use tabs where possible
#734: FILE: kernel/ktrace.c:475:
+               entry->format = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#734: FILE: kernel/ktrace.c:475:
+               entry->format = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#735: FILE: kernel/ktrace.c:476:
+       entry->func = ktrace->func;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#736: FILE: kernel/ktrace.c:477:
+       entry->enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#737: FILE: kernel/ktrace.c:478:
+       ktrace->event_id = entry->event_id = ktrace_next_id++;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#737: FILE: kernel/ktrace.c:478:
+       ktrace->event_id = entry->event_id = ktrace_next_id++;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#738: FILE: kernel/ktrace.c:479:
+       entry->stroff = NULL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#739: FILE: kernel/ktrace.c:480:
+       INIT_LIST_HEAD(&entry->klist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#740: FILE: kernel/ktrace.c:481:
+       hlist_add_head(&entry->hlist, head);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#742: FILE: kernel/ktrace.c:483:
+       list_add(&ktrace->list, &entry->klist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#743: FILE: kernel/ktrace.c:484:
+       dentry = debugfs_create_file(entry->name, 0660, eventdir,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#744: FILE: kernel/ktrace.c:485:
+                               entry, &ktracecontrol_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#744: FILE: kernel/ktrace.c:485:
+       dentry = debugfs_create_file(entry->name, 0660, eventdir,
+                               entry, &ktracecontrol_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#744: FILE: kernel/ktrace.c:485:
+                               entry, &ktracecontrol_file_operations);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#745: FILE: kernel/ktrace.c:486:
+       if (!dentry)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#745: FILE: kernel/ktrace.c:486:
+       if (!dentry)
+               printk(KERN_WARNING "Couldn't create debugfs '%s' entry\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#746: FILE: kernel/ktrace.c:487:
+               printk(KERN_WARNING "Couldn't create debugfs '%s' entry\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#746: FILE: kernel/ktrace.c:487:
+               printk(KERN_WARNING "Couldn't create debugfs '%s' entry\n",$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#746: FILE: kernel/ktrace.c:487:
+               printk(KERN_WARNING "Couldn't create debugfs '%s' entry\n",

ERROR:CODE_INDENT: code indent should use tabs where possible
#747: FILE: kernel/ktrace.c:488:
+                                                       entry->name);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#747: FILE: kernel/ktrace.c:488:
+               printk(KERN_WARNING "Couldn't create debugfs '%s' entry\n",
+                                                       entry->name);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#747: FILE: kernel/ktrace.c:488:
+                                                       entry->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#748: FILE: kernel/ktrace.c:489:
+       return entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#753: FILE: kernel/ktrace.c:494:
+       struct ktrace_entry *entry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#754: FILE: kernel/ktrace.c:495:
+       size_t name_len = strlen(ktrace->name) + 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#755: FILE: kernel/ktrace.c:496:
+       u32 hash = jhash(ktrace->name, name_len-1, 0);$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#755: FILE: kernel/ktrace.c:496:
+       u32 hash = jhash(ktrace->name, name_len-1, 0);
                                               ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#756: FILE: kernel/ktrace.c:497:
+       struct hlist_head *head;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#757: FILE: kernel/ktrace.c:498:
+       struct hlist_node *node, *temp;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#758: FILE: kernel/ktrace.c:499:
+       struct dentry *dentry;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#760: FILE: kernel/ktrace.c:501:
+       if (!tracedir)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#760: FILE: kernel/ktrace.c:501:
+       if (!tracedir)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#761: FILE: kernel/ktrace.c:502:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#761: FILE: kernel/ktrace.c:502:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#762: FILE: kernel/ktrace.c:503:
+       list_del(&ktrace->list);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#763: FILE: kernel/ktrace.c:504:
+       head = &ktrace_table[hash & ((1 << KTRACE_HASH_BITS)-1)];$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#763: FILE: kernel/ktrace.c:504:
+       head = &ktrace_table[hash & ((1 << KTRACE_HASH_BITS)-1)];
                                                            ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#764: FILE: kernel/ktrace.c:505:
+       hlist_for_each_entry_safe(entry, node, temp, head, hlist)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#764: FILE: kernel/ktrace.c:505:
+       hlist_for_each_entry_safe(entry, node, temp, head, hlist)
+               if (!strcmp(ktrace->name, entry->name)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#765: FILE: kernel/ktrace.c:506:
+               if (!strcmp(ktrace->name, entry->name)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#765: FILE: kernel/ktrace.c:506:
+               if (!strcmp(ktrace->name, entry->name)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#765: FILE: kernel/ktrace.c:506:
+               if (!strcmp(ktrace->name, entry->name)) {
+                       if (list_empty(&entry->klist)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#766: FILE: kernel/ktrace.c:507:
+                       if (list_empty(&entry->klist)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#766: FILE: kernel/ktrace.c:507:
+                       if (list_empty(&entry->klist)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (23, 31)
#766: FILE: kernel/ktrace.c:507:
+                       if (list_empty(&entry->klist)) {
+                               dentry = lookup_one_len(entry->name,

ERROR:CODE_INDENT: code indent should use tabs where possible
#767: FILE: kernel/ktrace.c:508:
+                               dentry = lookup_one_len(entry->name,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#767: FILE: kernel/ktrace.c:508:
+                               dentry = lookup_one_len(entry->name,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#768: FILE: kernel/ktrace.c:509:
+                                       eventdir, strlen(entry->name));$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#768: FILE: kernel/ktrace.c:509:
+                               dentry = lookup_one_len(entry->name,
+                                       eventdir, strlen(entry->name));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#768: FILE: kernel/ktrace.c:509:
+                                       eventdir, strlen(entry->name));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#769: FILE: kernel/ktrace.c:510:
+                               if (dentry && !IS_ERR(dentry)) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#769: FILE: kernel/ktrace.c:510:
+                               if (dentry && !IS_ERR(dentry)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#769: FILE: kernel/ktrace.c:510:
+                               if (dentry && !IS_ERR(dentry)) {
+                                       debugfs_remove(dentry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: kernel/ktrace.c:511:
+                                       debugfs_remove(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: kernel/ktrace.c:511:
+                                       debugfs_remove(dentry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#771: FILE: kernel/ktrace.c:512:
+                                       dput(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#771: FILE: kernel/ktrace.c:512:
+                                       dput(dentry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#772: FILE: kernel/ktrace.c:513:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#772: FILE: kernel/ktrace.c:513:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#773: FILE: kernel/ktrace.c:514:
+                               entry->enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#773: FILE: kernel/ktrace.c:514:
+                               entry->enabled = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#774: FILE: kernel/ktrace.c:515:
+                               if (free) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#774: FILE: kernel/ktrace.c:515:
+                               if (free) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (31, 39)
#774: FILE: kernel/ktrace.c:515:
+                               if (free) {
+                                       hlist_del(&entry->hlist);

ERROR:CODE_INDENT: code indent should use tabs where possible
#775: FILE: kernel/ktrace.c:516:
+                                       hlist_del(&entry->hlist);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#775: FILE: kernel/ktrace.c:516:
+                                       hlist_del(&entry->hlist);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#776: FILE: kernel/ktrace.c:517:
+                                       kfree(entry->name);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#776: FILE: kernel/ktrace.c:517:
+                                       kfree(entry->name);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#777: FILE: kernel/ktrace.c:518:
+                                       kfree(entry->format);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#777: FILE: kernel/ktrace.c:518:
+                                       kfree(entry->format);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#778: FILE: kernel/ktrace.c:519:
+                                       kfree(entry->stroff);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#778: FILE: kernel/ktrace.c:519:
+                                       kfree(entry->stroff);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#779: FILE: kernel/ktrace.c:520:
+                                       kfree(entry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#779: FILE: kernel/ktrace.c:520:
+                                       kfree(entry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#780: FILE: kernel/ktrace.c:521:
+                               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#780: FILE: kernel/ktrace.c:521:
+                               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#781: FILE: kernel/ktrace.c:522:
+                       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#781: FILE: kernel/ktrace.c:522:
+                       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#782: FILE: kernel/ktrace.c:523:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#782: FILE: kernel/ktrace.c:523:
+                       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#783: FILE: kernel/ktrace.c:524:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#783: FILE: kernel/ktrace.c:524:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#784: FILE: kernel/ktrace.c:525:
+       return -1;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#788: FILE: kernel/ktrace.c:529:
+ * Called at the end of module load/unload. */

ERROR:CODE_INDENT: code indent should use tabs where possible
#790: FILE: kernel/ktrace.c:531:
+               unsigned long val, void *data)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#790: FILE: kernel/ktrace.c:531:
+static int ktrace_module_notify(struct notifier_block *self,
+               unsigned long val, void *data)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#790: FILE: kernel/ktrace.c:531:
+               unsigned long val, void *data)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#793: FILE: kernel/ktrace.c:534:
+       struct kernel_trace *iter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#794: FILE: kernel/ktrace.c:535:
+       struct module *mod = data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#796: FILE: kernel/ktrace.c:537:
+       if (val != MODULE_STATE_COMING && val != MODULE_STATE_GOING)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#796: FILE: kernel/ktrace.c:537:
+       if (val != MODULE_STATE_COMING && val != MODULE_STATE_GOING)
+               return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#797: FILE: kernel/ktrace.c:538:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#797: FILE: kernel/ktrace.c:538:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#798: FILE: kernel/ktrace.c:539:
+       mutex_lock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#799: FILE: kernel/ktrace.c:540:
+       for (iter = mod->ktrace; iter < mod->ktrace + mod->num_ktrace; iter++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#799: FILE: kernel/ktrace.c:540:
+       for (iter = mod->ktrace; iter < mod->ktrace + mod->num_ktrace; iter++)
+               if (val == MODULE_STATE_COMING)

ERROR:CODE_INDENT: code indent should use tabs where possible
#800: FILE: kernel/ktrace.c:541:
+               if (val == MODULE_STATE_COMING)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#800: FILE: kernel/ktrace.c:541:
+               if (val == MODULE_STATE_COMING)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#800: FILE: kernel/ktrace.c:541:
+               if (val == MODULE_STATE_COMING)
+                       add_ktrace(iter);

ERROR:CODE_INDENT: code indent should use tabs where possible
#801: FILE: kernel/ktrace.c:542:
+                       add_ktrace(iter);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#801: FILE: kernel/ktrace.c:542:
+                       add_ktrace(iter);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#802: FILE: kernel/ktrace.c:543:
+               else$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#802: FILE: kernel/ktrace.c:543:
+               else$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#802: FILE: kernel/ktrace.c:543:
+               else
+                       remove_ktrace(iter, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#803: FILE: kernel/ktrace.c:544:
+                       remove_ktrace(iter, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#803: FILE: kernel/ktrace.c:544:
+                       remove_ktrace(iter, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#804: FILE: kernel/ktrace.c:545:
+       mutex_unlock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#806: FILE: kernel/ktrace.c:547:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#810: FILE: kernel/ktrace.c:551:
+       .notifier_call  = ktrace_module_notify,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#814: FILE: kernel/ktrace.c:555:
+static int trace_data_open(struct inode *inode, struct file *filp)
                                                              ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#816: FILE: kernel/ktrace.c:557:
+       filp->private_data = inode->i_private;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#817: FILE: kernel/ktrace.c:558:
+       kref_get(&ktrace_kref);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#818: FILE: kernel/ktrace.c:559:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#823: FILE: kernel/ktrace.c:564:
+       ring_buffer_free(trace_buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#824: FILE: kernel/ktrace.c:565:
+       trace_buffer = NULL;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#827: FILE: kernel/ktrace.c:568:
+static int trace_data_release(struct inode *inode, struct file *filp)
                                                                 ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#829: FILE: kernel/ktrace.c:570:
+       kref_put(&ktrace_kref, release_trace_buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#830: FILE: kernel/ktrace.c:571:
+       return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#833: FILE: kernel/ktrace.c:574:
+static unsigned int trace_data_poll(struct file *filp, poll_table *poll_table)
                                                  ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#835: FILE: kernel/ktrace.c:576:
+       struct ring_buffer_per_cpu *cpu_buffer = filp->private_data;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#836: FILE: kernel/ktrace.c:577:
+       struct ring_buffer_per_cpu *cpu_buffer = filp->private_data;
+       if (filp->f_mode & FMODE_READ) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#836: FILE: kernel/ktrace.c:577:
+       if (filp->f_mode & FMODE_READ) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#836: FILE: kernel/ktrace.c:577:
+       if (filp->f_mode & FMODE_READ) {
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))

ERROR:CODE_INDENT: code indent should use tabs where possible
#837: FILE: kernel/ktrace.c:578:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#837: FILE: kernel/ktrace.c:578:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#837: FILE: kernel/ktrace.c:578:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))
+                       return POLLIN | POLLRDNORM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#838: FILE: kernel/ktrace.c:579:
+                       return POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#838: FILE: kernel/ktrace.c:579:
+                       return POLLIN | POLLRDNORM;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#839: FILE: kernel/ktrace.c:580:
+               poll_wait(filp, &trace_wait, poll_table);
                          ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#839: FILE: kernel/ktrace.c:580:
+               poll_wait(filp, &trace_wait, poll_table);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#839: FILE: kernel/ktrace.c:580:
+               poll_wait(filp, &trace_wait, poll_table);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#840: FILE: kernel/ktrace.c:581:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#840: FILE: kernel/ktrace.c:581:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#840: FILE: kernel/ktrace.c:581:
+               if (!ring_buffer_per_cpu_empty(cpu_buffer))
+                       return POLLIN | POLLRDNORM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#841: FILE: kernel/ktrace.c:582:
+                       return POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#841: FILE: kernel/ktrace.c:582:
+                       return POLLIN | POLLRDNORM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#842: FILE: kernel/ktrace.c:583:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#843: FILE: kernel/ktrace.c:584:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#848: FILE: kernel/ktrace.c:589:
+       struct ring_buffer_per_cpu *cpu_buffer = vma->vm_private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#849: FILE: kernel/ktrace.c:590:
+       pgoff_t pgoff = vmf->pgoff;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#850: FILE: kernel/ktrace.c:591:
+       struct page *page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#852: FILE: kernel/ktrace.c:593:
+       if (!trace_buffer)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#852: FILE: kernel/ktrace.c:593:
+       if (!trace_buffer)
+               return VM_FAULT_OOM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#853: FILE: kernel/ktrace.c:594:
+               return VM_FAULT_OOM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#853: FILE: kernel/ktrace.c:594:
+               return VM_FAULT_OOM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#854: FILE: kernel/ktrace.c:595:
+       page = ring_buffer_get_page(cpu_buffer, pgoff);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#855: FILE: kernel/ktrace.c:596:
+       if (page == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#855: FILE: kernel/ktrace.c:596:
+       if (page == NULL)
+               return VM_FAULT_SIGBUS;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#855: FILE: kernel/ktrace.c:596:
+       if (page == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:CODE_INDENT: code indent should use tabs where possible
#856: FILE: kernel/ktrace.c:597:
+               return VM_FAULT_SIGBUS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#856: FILE: kernel/ktrace.c:597:
+               return VM_FAULT_SIGBUS;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#857: FILE: kernel/ktrace.c:598:
+       get_page(page);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#858: FILE: kernel/ktrace.c:599:
+       vmf->page = page;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#859: FILE: kernel/ktrace.c:600:
+       return 0;$

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#862: FILE: kernel/ktrace.c:603:
+static struct vm_operations_struct trace_data_mmap_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#863: FILE: kernel/ktrace.c:604:
+       .fault = trace_buf_fault,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#866: FILE: kernel/ktrace.c:607:
+static int trace_data_mmap(struct file *filp, struct vm_area_struct *vma)
                                         ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#868: FILE: kernel/ktrace.c:609:
+       struct ring_buffer_per_cpu *cpu_buffer = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#870: FILE: kernel/ktrace.c:611:
+       vma->vm_ops = &trace_data_mmap_ops;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#871: FILE: kernel/ktrace.c:612:
+       vma->vm_flags |= VM_DONTEXPAND;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#872: FILE: kernel/ktrace.c:613:
+       vma->vm_private_data = cpu_buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#873: FILE: kernel/ktrace.c:614:
+       return 0;$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#876: FILE: kernel/ktrace.c:617:
+static int trace_data_ioctl(struct inode *inode, struct file *filp,
                                                               ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#877: FILE: kernel/ktrace.c:618:
+               unsigned int cmd, unsigned long arg)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: kernel/ktrace.c:618:
+static int trace_data_ioctl(struct inode *inode, struct file *filp,
+               unsigned int cmd, unsigned long arg)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#877: FILE: kernel/ktrace.c:618:
+               unsigned int cmd, unsigned long arg)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#879: FILE: kernel/ktrace.c:620:
+       u32 __user *argp = (u32 __user *)arg;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#880: FILE: kernel/ktrace.c:621:
+       struct ring_buffer_per_cpu *cpu_buffer = filp->private_data;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#882: FILE: kernel/ktrace.c:623:
+       if (!trace_buffer || !tracedir)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#882: FILE: kernel/ktrace.c:623:
+       if (!trace_buffer || !tracedir)
+               return -EINVAL;

ERROR:CODE_INDENT: code indent should use tabs where possible
#883: FILE: kernel/ktrace.c:624:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#883: FILE: kernel/ktrace.c:624:
+               return -EINVAL;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#884: FILE: kernel/ktrace.c:625:
+       switch (cmd) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#885: FILE: kernel/ktrace.c:626:
+       case KTRACE_BUF_GET_SIZE:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#886: FILE: kernel/ktrace.c:627:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#887: FILE: kernel/ktrace.c:628:
+               unsigned long bufsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#887: FILE: kernel/ktrace.c:628:
+               unsigned long bufsize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#888: FILE: kernel/ktrace.c:629:
+               bufsize = ring_buffer_size(trace_buffer);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#888: FILE: kernel/ktrace.c:629:
+               unsigned long bufsize;
+               bufsize = ring_buffer_size(trace_buffer);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#888: FILE: kernel/ktrace.c:629:
+               bufsize = ring_buffer_size(trace_buffer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#889: FILE: kernel/ktrace.c:630:
+               return put_user((u32)bufsize, argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#889: FILE: kernel/ktrace.c:630:
+               return put_user((u32)bufsize, argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#890: FILE: kernel/ktrace.c:631:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#891: FILE: kernel/ktrace.c:632:
+       case KTRACE_BUF_GET_PRODUCED:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#892: FILE: kernel/ktrace.c:633:
+               return put_user(ring_buffer_get_produced(cpu_buffer), argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#892: FILE: kernel/ktrace.c:633:
+               return put_user(ring_buffer_get_produced(cpu_buffer), argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#893: FILE: kernel/ktrace.c:634:
+       case KTRACE_BUF_GET_CONSUMED:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#894: FILE: kernel/ktrace.c:635:
+               return put_user(ring_buffer_get_consumed(cpu_buffer), argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#894: FILE: kernel/ktrace.c:635:
+               return put_user(ring_buffer_get_consumed(cpu_buffer), argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#895: FILE: kernel/ktrace.c:636:
+       case KTRACE_BUF_PUT_CONSUMED:$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#896: FILE: kernel/ktrace.c:637:
+       {$

ERROR:CODE_INDENT: code indent should use tabs where possible
#897: FILE: kernel/ktrace.c:638:
+               u32 consumed, consumed_old;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#897: FILE: kernel/ktrace.c:638:
+               u32 consumed, consumed_old;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#898: FILE: kernel/ktrace.c:639:
+               int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#898: FILE: kernel/ktrace.c:639:
+               int ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#900: FILE: kernel/ktrace.c:641:
+               ret = get_user(consumed, argp);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#900: FILE: kernel/ktrace.c:641:
+               ret = get_user(consumed, argp);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#901: FILE: kernel/ktrace.c:642:
+               if (ret) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#901: FILE: kernel/ktrace.c:642:
+               if (ret) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#901: FILE: kernel/ktrace.c:642:
+               if (ret) {
+                       printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#902: FILE: kernel/ktrace.c:643:
+                       printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#902: FILE: kernel/ktrace.c:643:
+                       printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#902: FILE: kernel/ktrace.c:643:
+                       printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#903: FILE: kernel/ktrace.c:644:
+                               "error getting consumed value: %d\n", ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#903: FILE: kernel/ktrace.c:644:
+                               "error getting consumed value: %d\n", ret);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#904: FILE: kernel/ktrace.c:645:
+                       return ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#904: FILE: kernel/ktrace.c:645:
+                       return ret;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#905: FILE: kernel/ktrace.c:646:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#905: FILE: kernel/ktrace.c:646:
+               }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#906: FILE: kernel/ktrace.c:647:
+               consumed_old = ring_buffer_get_consumed(cpu_buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#906: FILE: kernel/ktrace.c:647:
+               consumed_old = ring_buffer_get_consumed(cpu_buffer);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#907: FILE: kernel/ktrace.c:648:
+               if (consumed == consumed_old)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#907: FILE: kernel/ktrace.c:648:
+               if (consumed == consumed_old)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#907: FILE: kernel/ktrace.c:648:
+               if (consumed == consumed_old)
+                       return 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#908: FILE: kernel/ktrace.c:649:
+                       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#908: FILE: kernel/ktrace.c:649:
+                       return 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#909: FILE: kernel/ktrace.c:650:
+               ring_buffer_advance_reader(cpu_buffer, consumed - consumed_old);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#909: FILE: kernel/ktrace.c:650:
+               ring_buffer_advance_reader(cpu_buffer, consumed - consumed_old);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#910: FILE: kernel/ktrace.c:651:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#910: FILE: kernel/ktrace.c:651:
+               return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#911: FILE: kernel/ktrace.c:652:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#913: FILE: kernel/ktrace.c:654:
+               return -ENOIOCTLCMD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#913: FILE: kernel/ktrace.c:654:
+               return -ENOIOCTLCMD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#914: FILE: kernel/ktrace.c:655:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#915: FILE: kernel/ktrace.c:656:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#919: FILE: kernel/ktrace.c:660:
+       .open           = trace_data_open,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#920: FILE: kernel/ktrace.c:661:
+       .poll           = trace_data_poll,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#921: FILE: kernel/ktrace.c:662:
+       .mmap           = trace_data_mmap,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#922: FILE: kernel/ktrace.c:663:
+       .ioctl          = trace_data_ioctl,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#923: FILE: kernel/ktrace.c:664:
+       .release        = trace_data_release,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#927: FILE: kernel/ktrace.c:668:
+static ssize_t trace_overflow_read(struct file *filp, char __user *ubuf,
                                                 ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#928: FILE: kernel/ktrace.c:669:
+               size_t cnt, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#928: FILE: kernel/ktrace.c:669:
+static ssize_t trace_overflow_read(struct file *filp, char __user *ubuf,
+               size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#928: FILE: kernel/ktrace.c:669:
+               size_t cnt, loff_t *ppos)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#930: FILE: kernel/ktrace.c:671:
+       int ret;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#931: FILE: kernel/ktrace.c:672:
+       char buf[64];$

WARNING:LINE_SPACING: Missing a blank line after declarations
#932: FILE: kernel/ktrace.c:673:
+       char buf[64];
+       ret = snprintf(buf, 64, "%lu\n", ring_buffer_overruns(trace_buffer));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#932: FILE: kernel/ktrace.c:673:
+       ret = snprintf(buf, 64, "%lu\n", ring_buffer_overruns(trace_buffer));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#933: FILE: kernel/ktrace.c:674:
+       return simple_read_from_buffer(ubuf, cnt, ppos, buf, ret);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#937: FILE: kernel/ktrace.c:678:
+       .read           = trace_overflow_read,$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#941: FILE: kernel/ktrace.c:682:
+static void __trace_buffer_reset(struct file *filp,
                                               ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#942: FILE: kernel/ktrace.c:683:
+               unsigned long val, size_t *cnt)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#942: FILE: kernel/ktrace.c:683:
+static void __trace_buffer_reset(struct file *filp,
+               unsigned long val, size_t *cnt)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: kernel/ktrace.c:683:
+               unsigned long val, size_t *cnt)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#944: FILE: kernel/ktrace.c:685:
+       if (val && trace_buffer)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#944: FILE: kernel/ktrace.c:685:
+       if (val && trace_buffer)
+               ring_buffer_reset(trace_buffer);

ERROR:CODE_INDENT: code indent should use tabs where possible
#945: FILE: kernel/ktrace.c:686:
+               ring_buffer_reset(trace_buffer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#945: FILE: kernel/ktrace.c:686:
+               ring_buffer_reset(trace_buffer);$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#948: FILE: kernel/ktrace.c:689:
+static ssize_t trace_buffer_reset(struct file *filp, const char __user *ubuf,
                                                ^^^^

ERROR:CODE_INDENT: code indent should use tabs where possible
#949: FILE: kernel/ktrace.c:690:
+               size_t cnt, loff_t *ppos)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: kernel/ktrace.c:690:
+static ssize_t trace_buffer_reset(struct file *filp, const char __user *ubuf,
+               size_t cnt, loff_t *ppos)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#949: FILE: kernel/ktrace.c:690:
+               size_t cnt, loff_t *ppos)$

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#951: FILE: kernel/ktrace.c:692:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,
                                   ^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#951: FILE: kernel/ktrace.c:692:
+       return trace_debugfs_write(filp, ubuf, cnt, ppos,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#952: FILE: kernel/ktrace.c:693:
+                       __trace_buffer_reset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#952: FILE: kernel/ktrace.c:693:
+                       __trace_buffer_reset);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#956: FILE: kernel/ktrace.c:697:
+       .write          = trace_buffer_reset,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#965: FILE: kernel/ktrace.c:706:
+       struct dentry *entry, *bufdir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#966: FILE: kernel/ktrace.c:707:
+       struct ring_buffer_per_cpu *cpu_buffer;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#967: FILE: kernel/ktrace.c:708:
+       char *tmpname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#968: FILE: kernel/ktrace.c:709:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#970: FILE: kernel/ktrace.c:711:
+       tracedir = debugfs_create_dir("ktrace", NULL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#971: FILE: kernel/ktrace.c:712:
+       if (!tracedir) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#971: FILE: kernel/ktrace.c:712:
+       if (!tracedir) {
+               printk(KERN_WARNING "Couldn't create debugfs directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#972: FILE: kernel/ktrace.c:713:
+               printk(KERN_WARNING "Couldn't create debugfs directory\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#972: FILE: kernel/ktrace.c:713:
+               printk(KERN_WARNING "Couldn't create debugfs directory\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#972: FILE: kernel/ktrace.c:713:
+               printk(KERN_WARNING "Couldn't create debugfs directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#973: FILE: kernel/ktrace.c:714:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#973: FILE: kernel/ktrace.c:714:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#974: FILE: kernel/ktrace.c:715:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#977: FILE: kernel/ktrace.c:718:
+       bufdir = debugfs_create_dir("buffers", tracedir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#978: FILE: kernel/ktrace.c:719:
+       if (!bufdir) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#978: FILE: kernel/ktrace.c:719:
+       if (!bufdir) {
+               printk(KERN_WARNING "Couldn't create 'buffers' directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#979: FILE: kernel/ktrace.c:720:
+               printk(KERN_WARNING "Couldn't create 'buffers' directory\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#979: FILE: kernel/ktrace.c:720:
+               printk(KERN_WARNING "Couldn't create 'buffers' directory\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#979: FILE: kernel/ktrace.c:720:
+               printk(KERN_WARNING "Couldn't create 'buffers' directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#980: FILE: kernel/ktrace.c:721:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#980: FILE: kernel/ktrace.c:721:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#981: FILE: kernel/ktrace.c:722:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#983: FILE: kernel/ktrace.c:724:
+       tmpname = kzalloc(NAME_MAX + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#984: FILE: kernel/ktrace.c:725:
+       if (!tmpname)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#984: FILE: kernel/ktrace.c:725:
+       if (!tmpname)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#985: FILE: kernel/ktrace.c:726:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#985: FILE: kernel/ktrace.c:726:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#987: FILE: kernel/ktrace.c:728:
+       for_each_possible_cpu(cpu) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#987: FILE: kernel/ktrace.c:728:
+       for_each_possible_cpu(cpu) {
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#988: FILE: kernel/ktrace.c:729:
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#988: FILE: kernel/ktrace.c:729:
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#989: FILE: kernel/ktrace.c:730:
+               cpu_buffer = ring_buffer_cpu(trace_buffer, cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#989: FILE: kernel/ktrace.c:730:
+               cpu_buffer = ring_buffer_cpu(trace_buffer, cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#990: FILE: kernel/ktrace.c:731:
+               entry = debugfs_create_file(tmpname, 0440, bufdir, cpu_buffer,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#990: FILE: kernel/ktrace.c:731:
+               entry = debugfs_create_file(tmpname, 0440, bufdir, cpu_buffer,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#991: FILE: kernel/ktrace.c:732:
+                       &tracedata_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#991: FILE: kernel/ktrace.c:732:
+               entry = debugfs_create_file(tmpname, 0440, bufdir, cpu_buffer,
+                       &tracedata_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#991: FILE: kernel/ktrace.c:732:
+                       &tracedata_file_operations);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#992: FILE: kernel/ktrace.c:733:
+               if (!entry) {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#992: FILE: kernel/ktrace.c:733:
+               if (!entry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (15, 23)
#992: FILE: kernel/ktrace.c:733:
+               if (!entry) {
+                       printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#993: FILE: kernel/ktrace.c:734:
+                       printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#993: FILE: kernel/ktrace.c:734:
+                       printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#993: FILE: kernel/ktrace.c:734:
+                       printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#994: FILE: kernel/ktrace.c:735:
+                               "Couldn't create debugfs \'%s\' entry\n",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#994: FILE: kernel/ktrace.c:735:
+                               "Couldn't create debugfs \'%s\' entry\n",$

ERROR:CODE_INDENT: code indent should use tabs where possible
#995: FILE: kernel/ktrace.c:736:
+                                       tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#995: FILE: kernel/ktrace.c:736:
+                                       tmpname);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#996: FILE: kernel/ktrace.c:737:
+                       return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#996: FILE: kernel/ktrace.c:737:
+                       return -ENOMEM;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#997: FILE: kernel/ktrace.c:738:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#997: FILE: kernel/ktrace.c:738:
+               }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#998: FILE: kernel/ktrace.c:739:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#999: FILE: kernel/ktrace.c:740:
+       kfree(tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1002: FILE: kernel/ktrace.c:743:
+       entry = debugfs_create_file("enabled", 0664, tracedir, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1003: FILE: kernel/ktrace.c:744:
+                       &tracecontrol_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1003: FILE: kernel/ktrace.c:744:
+       entry = debugfs_create_file("enabled", 0664, tracedir, NULL,
+                       &tracecontrol_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1003: FILE: kernel/ktrace.c:744:
+                       &tracecontrol_file_operations);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1004: FILE: kernel/ktrace.c:745:
+       if (!entry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1004: FILE: kernel/ktrace.c:745:
+       if (!entry) {
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#1005: FILE: kernel/ktrace.c:746:
+               printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1005: FILE: kernel/ktrace.c:746:
+               printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1005: FILE: kernel/ktrace.c:746:
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#1006: FILE: kernel/ktrace.c:747:
+                       "Couldn't create debugfs 'enabled' entry\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1006: FILE: kernel/ktrace.c:747:
+                       "Couldn't create debugfs 'enabled' entry\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1007: FILE: kernel/ktrace.c:748:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1007: FILE: kernel/ktrace.c:748:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1008: FILE: kernel/ktrace.c:749:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1011: FILE: kernel/ktrace.c:752:
+        * the debugfs file that displays the name, format etc. of every$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1012: FILE: kernel/ktrace.c:753:
+        * supported trace event. The file is to be used by the user-space$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1013: FILE: kernel/ktrace.c:754:
+        * trace parser to analyze the collected trace data.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1014: FILE: kernel/ktrace.c:755:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1015: FILE: kernel/ktrace.c:756:
+       entry = debugfs_create_file("info", 0444, tracedir, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1016: FILE: kernel/ktrace.c:757:
+                       &traceinfo_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1016: FILE: kernel/ktrace.c:757:
+       entry = debugfs_create_file("info", 0444, tracedir, NULL,
+                       &traceinfo_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1016: FILE: kernel/ktrace.c:757:
+                       &traceinfo_file_operations);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1017: FILE: kernel/ktrace.c:758:
+       if (!entry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1017: FILE: kernel/ktrace.c:758:
+       if (!entry) {
+               printk(KERN_WARNING "Couldn't create debugfs 'info' entry\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1018: FILE: kernel/ktrace.c:759:
+               printk(KERN_WARNING "Couldn't create debugfs 'info' entry\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1018: FILE: kernel/ktrace.c:759:
+               printk(KERN_WARNING "Couldn't create debugfs 'info' entry\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1018: FILE: kernel/ktrace.c:759:
+               printk(KERN_WARNING "Couldn't create debugfs 'info' entry\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1019: FILE: kernel/ktrace.c:760:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1019: FILE: kernel/ktrace.c:760:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1020: FILE: kernel/ktrace.c:761:
+       }$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1023: FILE: kernel/ktrace.c:764:
+        * the debugfs file that reports the number of events$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1024: FILE: kernel/ktrace.c:765:
+        * lost due to buffer overflow$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1025: FILE: kernel/ktrace.c:766:
+        */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1026: FILE: kernel/ktrace.c:767:
+       entry = debugfs_create_file("overflow", 0444, tracedir, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1027: FILE: kernel/ktrace.c:768:
+                       &traceoverflow_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1027: FILE: kernel/ktrace.c:768:
+       entry = debugfs_create_file("overflow", 0444, tracedir, NULL,
+                       &traceoverflow_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1027: FILE: kernel/ktrace.c:768:
+                       &traceoverflow_file_operations);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1028: FILE: kernel/ktrace.c:769:
+       if (!entry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1028: FILE: kernel/ktrace.c:769:
+       if (!entry) {
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#1029: FILE: kernel/ktrace.c:770:
+               printk(KERN_WARNING$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1029: FILE: kernel/ktrace.c:770:
+               printk(KERN_WARNING$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1029: FILE: kernel/ktrace.c:770:
+               printk(KERN_WARNING

ERROR:CODE_INDENT: code indent should use tabs where possible
#1030: FILE: kernel/ktrace.c:771:
+                       "Couldn't create debugfs 'overflow' entry\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1030: FILE: kernel/ktrace.c:771:
+                       "Couldn't create debugfs 'overflow' entry\n");$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1031: FILE: kernel/ktrace.c:772:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1031: FILE: kernel/ktrace.c:772:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1032: FILE: kernel/ktrace.c:773:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1035: FILE: kernel/ktrace.c:776:
+       entry = debugfs_create_file("reset", 0220, tracedir, NULL,$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1036: FILE: kernel/ktrace.c:777:
+                       &tracereset_file_operations);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1036: FILE: kernel/ktrace.c:777:
+       entry = debugfs_create_file("reset", 0220, tracedir, NULL,
+                       &tracereset_file_operations);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1036: FILE: kernel/ktrace.c:777:
+                       &tracereset_file_operations);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1037: FILE: kernel/ktrace.c:778:
+       if (!entry) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1037: FILE: kernel/ktrace.c:778:
+       if (!entry) {
+               printk(KERN_WARNING "Couldn't create debugfs 'reset' entry\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1038: FILE: kernel/ktrace.c:779:
+               printk(KERN_WARNING "Couldn't create debugfs 'reset' entry\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1038: FILE: kernel/ktrace.c:779:
+               printk(KERN_WARNING "Couldn't create debugfs 'reset' entry\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1038: FILE: kernel/ktrace.c:779:
+               printk(KERN_WARNING "Couldn't create debugfs 'reset' entry\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1039: FILE: kernel/ktrace.c:780:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1039: FILE: kernel/ktrace.c:780:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1040: FILE: kernel/ktrace.c:781:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1043: FILE: kernel/ktrace.c:784:
+       eventdir = debugfs_create_dir("events", tracedir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1044: FILE: kernel/ktrace.c:785:
+       if (!eventdir) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1044: FILE: kernel/ktrace.c:785:
+       if (!eventdir) {
+               printk(KERN_WARNING "Couldn't create 'events' directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1045: FILE: kernel/ktrace.c:786:
+               printk(KERN_WARNING "Couldn't create 'events' directory\n");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1045: FILE: kernel/ktrace.c:786:
+               printk(KERN_WARNING "Couldn't create 'events' directory\n");$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1045: FILE: kernel/ktrace.c:786:
+               printk(KERN_WARNING "Couldn't create 'events' directory\n");

ERROR:CODE_INDENT: code indent should use tabs where possible
#1046: FILE: kernel/ktrace.c:787:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1046: FILE: kernel/ktrace.c:787:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1047: FILE: kernel/ktrace.c:788:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1048: FILE: kernel/ktrace.c:789:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1053: FILE: kernel/ktrace.c:794:
+       struct dentry *dentry;$

WARNING:LINE_SPACING: Missing a blank line after declarations
#1054: FILE: kernel/ktrace.c:795:
+       struct dentry *dentry;
+       dentry = lookup_one_len(name, dir, strlen(name));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1054: FILE: kernel/ktrace.c:795:
+       dentry = lookup_one_len(name, dir, strlen(name));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1055: FILE: kernel/ktrace.c:796:
+       if (dentry && !IS_ERR(dentry)) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1055: FILE: kernel/ktrace.c:796:
+       if (dentry && !IS_ERR(dentry)) {
+               debugfs_remove(dentry);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1056: FILE: kernel/ktrace.c:797:
+               debugfs_remove(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1056: FILE: kernel/ktrace.c:797:
+               debugfs_remove(dentry);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1057: FILE: kernel/ktrace.c:798:
+               dput(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1057: FILE: kernel/ktrace.c:798:
+               dput(dentry);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1058: FILE: kernel/ktrace.c:799:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1063: FILE: kernel/ktrace.c:804:
+       struct dentry *bufdir;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1064: FILE: kernel/ktrace.c:805:
+       char *tmpname;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1065: FILE: kernel/ktrace.c:806:
+       int cpu;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1067: FILE: kernel/ktrace.c:808:
+       bufdir = lookup_one_len("buffers", tracedir, strlen("buffers"));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1068: FILE: kernel/ktrace.c:809:
+       if (!bufdir || IS_ERR(bufdir))$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1068: FILE: kernel/ktrace.c:809:
+       if (!bufdir || IS_ERR(bufdir))
+               return -EIO;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1069: FILE: kernel/ktrace.c:810:
+               return -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1069: FILE: kernel/ktrace.c:810:
+               return -EIO;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1070: FILE: kernel/ktrace.c:811:
+       tmpname = kzalloc(NAME_MAX + 1, GFP_KERNEL);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1071: FILE: kernel/ktrace.c:812:
+       if (!tmpname)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1071: FILE: kernel/ktrace.c:812:
+       if (!tmpname)
+               return -ENOMEM;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1072: FILE: kernel/ktrace.c:813:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1072: FILE: kernel/ktrace.c:813:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1073: FILE: kernel/ktrace.c:814:
+       for_each_possible_cpu(cpu) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1073: FILE: kernel/ktrace.c:814:
+       for_each_possible_cpu(cpu) {
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1074: FILE: kernel/ktrace.c:815:
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1074: FILE: kernel/ktrace.c:815:
+               snprintf(tmpname, NAME_MAX, "%s%d", "cpu", cpu);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1075: FILE: kernel/ktrace.c:816:
+               remove_debugfs_file(bufdir, tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1075: FILE: kernel/ktrace.c:816:
+               remove_debugfs_file(bufdir, tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1076: FILE: kernel/ktrace.c:817:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1077: FILE: kernel/ktrace.c:818:
+       kfree(tmpname);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1078: FILE: kernel/ktrace.c:819:
+       debugfs_remove(bufdir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1080: FILE: kernel/ktrace.c:821:
+       remove_debugfs_file(tracedir, "enabled");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1081: FILE: kernel/ktrace.c:822:
+       remove_debugfs_file(tracedir, "info");$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1082: FILE: kernel/ktrace.c:823:
+       debugfs_remove(eventdir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1083: FILE: kernel/ktrace.c:824:
+       debugfs_remove(tracedir);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1084: FILE: kernel/ktrace.c:825:
+       return 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1089: FILE: kernel/ktrace.c:830:
+       struct kernel_trace *iter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1090: FILE: kernel/ktrace.c:831:
+       int i, err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1092: FILE: kernel/ktrace.c:833:
+       ktrace_next_id = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1093: FILE: kernel/ktrace.c:834:
+       kref_set(&ktrace_kref, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1094: FILE: kernel/ktrace.c:835:
+       trace_buffer = ring_buffer_alloc(trace_buf_size, RB_FL_OVERWRITE);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1095: FILE: kernel/ktrace.c:836:
+       if (trace_buffer == NULL)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1095: FILE: kernel/ktrace.c:836:
+       if (trace_buffer == NULL)
+               return -ENOMEM;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!trace_buffer"
#1095: FILE: kernel/ktrace.c:836:
+       if (trace_buffer == NULL)

ERROR:CODE_INDENT: code indent should use tabs where possible
#1096: FILE: kernel/ktrace.c:837:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1096: FILE: kernel/ktrace.c:837:
+               return -ENOMEM;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1097: FILE: kernel/ktrace.c:838:
+       setup_timer(&trace_timer, wakeup_readers, 0);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1098: FILE: kernel/ktrace.c:839:
+       for (i = 0; i < KTRACE_HASH_SIZE; i++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1098: FILE: kernel/ktrace.c:839:
+       for (i = 0; i < KTRACE_HASH_SIZE; i++)
+               INIT_HLIST_HEAD(&ktrace_table[i]);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1099: FILE: kernel/ktrace.c:840:
+               INIT_HLIST_HEAD(&ktrace_table[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1099: FILE: kernel/ktrace.c:840:
+               INIT_HLIST_HEAD(&ktrace_table[i]);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1101: FILE: kernel/ktrace.c:842:
+       mutex_lock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1102: FILE: kernel/ktrace.c:843:
+       err = create_debugfs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1103: FILE: kernel/ktrace.c:844:
+       if (err != 0)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1103: FILE: kernel/ktrace.c:844:
+       if (err != 0)
+               goto out;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1104: FILE: kernel/ktrace.c:845:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1104: FILE: kernel/ktrace.c:845:
+               goto out;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1105: FILE: kernel/ktrace.c:846:
+       for (iter = __start___ktraces; iter < __stop___ktraces; iter++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1105: FILE: kernel/ktrace.c:846:
+       for (iter = __start___ktraces; iter < __stop___ktraces; iter++)
+               add_ktrace(iter);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1106: FILE: kernel/ktrace.c:847:
+               add_ktrace(iter);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1106: FILE: kernel/ktrace.c:847:
+               add_ktrace(iter);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1107: FILE: kernel/ktrace.c:848:
+       err = register_module_notifier(&ktrace_module_nb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1109: FILE: kernel/ktrace.c:850:
+       mutex_unlock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1110: FILE: kernel/ktrace.c:851:
+       return err;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1116: FILE: kernel/ktrace.c:857:
+       struct kernel_trace *iter;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1118: FILE: kernel/ktrace.c:859:
+       if (ktrace_enabled) {$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1118: FILE: kernel/ktrace.c:859:
+       if (ktrace_enabled) {
+               ktrace_enabled = 0;

ERROR:CODE_INDENT: code indent should use tabs where possible
#1119: FILE: kernel/ktrace.c:860:
+               ktrace_enabled = 0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1119: FILE: kernel/ktrace.c:860:
+               ktrace_enabled = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#1120: FILE: kernel/ktrace.c:861:
+               del_timer_sync(&trace_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1120: FILE: kernel/ktrace.c:861:
+               del_timer_sync(&trace_timer);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1121: FILE: kernel/ktrace.c:862:
+       }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1122: FILE: kernel/ktrace.c:863:
+       mutex_lock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1123: FILE: kernel/ktrace.c:864:
+       for (iter = __start___ktraces; iter < __stop___ktraces; iter++)$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (7, 15)
#1123: FILE: kernel/ktrace.c:864:
+       for (iter = __start___ktraces; iter < __stop___ktraces; iter++)
+               remove_ktrace(iter, 1);

ERROR:CODE_INDENT: code indent should use tabs where possible
#1124: FILE: kernel/ktrace.c:865:
+               remove_ktrace(iter, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1124: FILE: kernel/ktrace.c:865:
+               remove_ktrace(iter, 1);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1125: FILE: kernel/ktrace.c:866:
+       unregister_module_notifier(&ktrace_module_nb);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1126: FILE: kernel/ktrace.c:867:
+       remove_debugfs();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1127: FILE: kernel/ktrace.c:868:
+       mutex_unlock(&ktrace_mutex);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#1129: FILE: kernel/ktrace.c:870:
+       kref_put(&ktrace_kref, release_trace_buffer);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000163340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 290 errors, 717 warnings, 47 checks, 1029 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000163340.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
