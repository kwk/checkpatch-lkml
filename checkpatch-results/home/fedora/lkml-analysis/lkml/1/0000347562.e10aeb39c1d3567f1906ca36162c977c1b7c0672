CHECK:MACRO_ARG_REUSE: Macro argument reuse 'srclist' - possible side-effects?
#115: FILE: kernel/rcupreempt.c:643:
+#define rcu_offline_cpu_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'srctail' - possible side-effects?
#115: FILE: kernel/rcupreempt.c:643:
+#define rcu_offline_cpu_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'dsttail' - possible side-effects?
#115: FILE: kernel/rcupreempt.c:643:
+#define rcu_offline_cpu_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'dsttail' may be better as '(dsttail)' to avoid precedence issues
#115: FILE: kernel/rcupreempt.c:643:
+#define rcu_offline_cpu_enqueue(srclist, srctail, dstlist, dsttail) do { \
+		*dsttail = srclist; \
+		if (srclist != NULL) { \
+			dsttail = srctail; \
+			srclist = NULL; \
+			srctail = &srclist;\
+		} \
+	} while (0)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "srclist"
#117: FILE: kernel/rcupreempt.c:645:
+		if (srclist != NULL) { \

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#141: FILE: kernel/rcupreempt.c:669:
+		rcu_offline_cpu_enqueue(rdp->waitlist[i], rdp->waittail[i],
+						list, tail);

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#154: FILE: kernel/rcupreempt.c:682:
+			   /*  seen -after- acknowledgement. */
 			                    ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#185: FILE: kernel/rcupreempt.c:713:
+void __devinit rcu_online_cpu(int cpu)

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#200: FILE: kernel/rcupreempt.c:728:
+void __devinit rcu_online_cpu(int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#214: FILE: kernel/rcupreempt.c:844:
+static int __cpuinit rcu_cpu_notify(struct notifier_block *self,
+				unsigned long action, void *hcpu)

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after rcu_nb
#235: FILE: kernel/rcupreempt.c:865:
+static struct notifier_block __cpuinitdata rcu_nb = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

CHECK:SPACING: No space is necessary after a cast
#261: FILE: kernel/rcupreempt.c:907:
+		rcu_cpu_notify(&rcu_nb, CPU_UP_PREPARE,	(void *)(long) cpu);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347562.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 8 checks, 201 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000347562.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
