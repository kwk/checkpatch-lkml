WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#35: 
Anything that would involve an action (dereference a pointer, vmcs read, ...)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#318: FILE: include/trace/kvm.h:1:
+#ifndef _TRACE_KVM_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#328: FILE: include/trace/kvm.h:11:
+DEFINE_TRACE(kvm_vmentry,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: include/trace/kvm.h:14:
+DEFINE_TRACE(kvm_vmexit,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 exit_reason),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#338: FILE: include/trace/kvm.h:21:
+DEFINE_TRACE(kvm_page_fault,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 error_code, unsigned long cr2),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#342: FILE: include/trace/kvm.h:25:
+DEFINE_TRACE(kvm_inj_virq,
+	TPPROTO(struct kvm_vcpu *vcpu, int irq),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#345: FILE: include/trace/kvm.h:28:
+DEFINE_TRACE(kvm_redeliver_evt,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 idtv_info_field),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#348: FILE: include/trace/kvm.h:31:
+DEFINE_TRACE(kvm_pend_intr,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#351: FILE: include/trace/kvm.h:34:
+DEFINE_TRACE(kvm_io,
+	TPPROTO(struct kvm_vcpu *vcpu, int size),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#354: FILE: include/trace/kvm.h:37:
+DEFINE_TRACE(kvm_cr_read,
+	TPPROTO(struct kvm_vcpu *vcpu, int cr, int reg),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#357: FILE: include/trace/kvm.h:40:
+DEFINE_TRACE(kvm_cr_write,
+	TPPROTO(struct kvm_vcpu *vcpu, int cr, int reg),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#360: FILE: include/trace/kvm.h:43:
+DEFINE_TRACE(kvm_cr_read_realmode,
+	TPPROTO(struct kvm_vcpu *vcpu, int cr, unsigned long value),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#363: FILE: include/trace/kvm.h:46:
+DEFINE_TRACE(kvm_cr_write_realmode,
+	TPPROTO(struct kvm_vcpu *vcpu, int cr, unsigned long value),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#366: FILE: include/trace/kvm.h:49:
+DEFINE_TRACE(kvm_dr_read,
+	TPPROTO(struct kvm_vcpu *vcpu, int dr, unsigned long val),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#370: FILE: include/trace/kvm.h:53:
+DEFINE_TRACE(kvm_msr_read,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 ecx, u64 data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: include/trace/kvm.h:56:
+DEFINE_TRACE(kvm_msr_write,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 ecx, u64 data),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#376: FILE: include/trace/kvm.h:59:
+DEFINE_TRACE(kvm_cpuid,
+	TPPROTO(struct kvm_vcpu *vcpu, u32 function),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#379: FILE: include/trace/kvm.h:62:
+DEFINE_TRACE(kvm_intr,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#382: FILE: include/trace/kvm.h:65:
+DEFINE_TRACE(kvm_nmi,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#385: FILE: include/trace/kvm.h:68:
+DEFINE_TRACE(kvm_vmmcall,
+	TPPROTO(struct kvm_vcpu *vcpu, unsigned long nr),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#388: FILE: include/trace/kvm.h:71:
+DEFINE_TRACE(kvm_hlt,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#391: FILE: include/trace/kvm.h:74:
+DEFINE_TRACE(kvm_clts,
+	TPPROTO(struct kvm_vcpu *vcpu),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#394: FILE: include/trace/kvm.h:77:
+DEFINE_TRACE(kvm_lmsw,
+	TPPROTO(struct kvm_vcpu *vcpu, unsigned long cr0),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#397: FILE: include/trace/kvm.h:80:
+DEFINE_TRACE(kvm_apic_access,
+	TPPROTO(struct kvm_vcpu *vcpu, unsigned long offset),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#444: FILE: virt/kvm/kvm_trace.c:50:
+static void kvm_add_trace_timestamp(unsigned int evid, struct kvm_vcpu *vcpu,
+		int nr_args, u32 *args)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: virt/kvm/kvm_trace.c:62:
+^Irec.cycle_in ^I= 1;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#496: FILE: virt/kvm/kvm_trace.c:77:
+static void kvm_add_trace(unsigned int evid, struct kvm_vcpu *vcpu,
+		int nr_args, u32 *args)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#508: FILE: virt/kvm/kvm_trace.c:89:
+^Irec.cycle_in ^I= 0;$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#594: FILE: virt/kvm/kvm_trace.c:299:
+	kvm_add_trace_timestamp(KVM_TRC_VMEXIT, vcpu, 3,
+		(u32 []){ exit_reason,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#603: FILE: virt/kvm/kvm_trace.c:308:
+static void probe_kvm_page_fault(struct kvm_vcpu *vcpu, u32 error_code,
+		unsigned long cr2)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: virt/kvm/kvm_trace.c:311:
+	kvm_add_trace(KVM_TRC_PAGE_FAULT, vcpu, 3,
+		(u32 []){ error_code, (u32)cr2, (u32)((u64)cr2 >> 32) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#617: FILE: virt/kvm/kvm_trace.c:322:
+	kvm_add_trace(KVM_TRC_REDELIVER_EVT, vcpu, 1,
+		(u32 []){ idtv_info_field });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: virt/kvm/kvm_trace.c:334:
+		kvm_add_trace(KVM_TRC_IO_READ, vcpu, 2,
+			(u32 []){ vcpu->run->io.port, (u32)size });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#632: FILE: virt/kvm/kvm_trace.c:337:
+		kvm_add_trace(KVM_TRC_IO_WRITE, vcpu, 2,
+			(u32 []){ vcpu->run->io.port, (u32)size });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#640: FILE: virt/kvm/kvm_trace.c:345:
+		kvm_add_trace(KVM_TRC_CR_READ, vcpu, 3,
+			(u32 []){ (u32)cr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#646: FILE: virt/kvm/kvm_trace.c:351:
+		kvm_add_trace(KVM_TRC_CR_READ, vcpu, 2,
+			(u32 []){ (u32)cr, (u32)kvm_register_read(vcpu, reg) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#654: FILE: virt/kvm/kvm_trace.c:359:
+	kvm_add_trace(KVM_TRC_CR_WRITE, vcpu, 3,
+		(u32 []){ (u32)cr,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#659: FILE: virt/kvm/kvm_trace.c:364:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#661: FILE: virt/kvm/kvm_trace.c:366:
+static void probe_kvm_cr_read_realmode(struct kvm_vcpu *vcpu, int cr,
+		unsigned long value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#664: FILE: virt/kvm/kvm_trace.c:369:
+	kvm_add_trace(KVM_TRC_CR_READ, vcpu, 3,
+		(u32 []){ (u32)cr, (u32)value, (u32)((u64)value >> 32) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: virt/kvm/kvm_trace.c:373:
+static void probe_kvm_cr_write_realmode(struct kvm_vcpu *vcpu, int cr,
+		unsigned long value)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#671: FILE: virt/kvm/kvm_trace.c:376:
+	kvm_add_trace(KVM_TRC_CR_WRITE, vcpu, 3,
+		(u32 []){ (u32)cr, (u32)value, (u32)((u64)value >> 32) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#677: FILE: virt/kvm/kvm_trace.c:382:
+	kvm_add_trace(KVM_TRC_DR_READ, vcpu, 2,
+		(u32 []){ (u32)dr, (u32)val });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#683: FILE: virt/kvm/kvm_trace.c:388:
+	kvm_add_trace(KVM_TRC_MSR_READ, vcpu, 3,
+		(u32 []){ ecx, (u32)data, (u32)(data >> 32) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#689: FILE: virt/kvm/kvm_trace.c:394:
+	kvm_add_trace(KVM_TRC_MSR_WRITE, vcpu, 3,
+		(u32 []){ ecx, (u32)data, (u32)(data >> 32) });

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#695: FILE: virt/kvm/kvm_trace.c:400:
+	kvm_add_trace(KVM_TRC_CPUID, vcpu, 5,
+		(u32 []){ function,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#705: FILE: virt/kvm/kvm_trace.c:410:
+	kvm_add_trace(KVM_TRC_INTR, vcpu, 1,
+		(u32 []){ vmcs_read32(VM_EXIT_INTR_INFO) });

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#815: FILE: virt/kvm/kvm_trace.c:520:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000253180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 44 checks, 715 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000253180.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
