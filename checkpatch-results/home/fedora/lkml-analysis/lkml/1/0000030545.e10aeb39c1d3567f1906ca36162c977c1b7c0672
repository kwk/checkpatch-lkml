WARNING:TYPO_SPELLING: 'archictectures' may be misspelled - perhaps 'architectures'?
#52: 
blackfin.  More archictectures can be added by implementing the
                ^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#177: FILE: fs/proc/meminfo.c:197:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#185: FILE: fs/proc/meminfo.c:205:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#195: FILE: fs/proc/meminfo.c:215:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#206: FILE: fs/proc/meminfo.c:226:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#214: FILE: fs/proc/meminfo.c:234:
+	kdb_printf(

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#221: FILE: fs/proc/meminfo.c:241:
+		K(i.totalram-i.totalhigh),
 		            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#222: FILE: fs/proc/meminfo.c:242:
+		K(i.freeram-i.freehigh)
 		           ^

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#225: FILE: fs/proc/meminfo.c:245:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#233: FILE: fs/proc/meminfo.c:253:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#241: FILE: fs/proc/meminfo.c:261:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#250: FILE: fs/proc/meminfo.c:270:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#264: FILE: fs/proc/meminfo.c:284:
+	kdb_printf(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#272: FILE: fs/proc/meminfo.c:292:
+	kdb_printf(

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#365: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#370: FILE: include/linux/kdb.h:1:
+#ifndef _KDB_H

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#388: FILE: include/linux/kdb.h:19:
+#include <asm/atomic.h>

CHECK:BIT_MACRO: Prefer using the BIT macro
#409: FILE: include/linux/kdb.h:40:
+#define KDB_FLAG_EARLYKDB	(1 << 0) /* set from boot parameter kdb=early */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#410: FILE: include/linux/kdb.h:41:
+#define KDB_FLAG_CATASTROPHIC	(1 << 1) /* A catastrophic event has occurred */

CHECK:BIT_MACRO: Prefer using the BIT macro
#411: FILE: include/linux/kdb.h:42:
+#define KDB_FLAG_CMD_INTERRUPT	(1 << 2) /* Previous command was interrupted */

CHECK:BIT_MACRO: Prefer using the BIT macro
#412: FILE: include/linux/kdb.h:43:
+#define KDB_FLAG_NOIPI		(1 << 3) /* Do not send IPIs */

CHECK:BIT_MACRO: Prefer using the BIT macro
#413: FILE: include/linux/kdb.h:44:
+#define KDB_FLAG_ONLY_DO_DUMP	(1 << 4) /* Only do a dump, used when

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#414: FILE: include/linux/kdb.h:45:
+					  * kdb is off */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BIT_MACRO: Prefer using the BIT macro
#415: FILE: include/linux/kdb.h:46:
+#define KDB_FLAG_NO_CONSOLE	(1 << 5) /* No console is available,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#416: FILE: include/linux/kdb.h:47:
+					  * kdb is disabled */

CHECK:BIT_MACRO: Prefer using the BIT macro
#417: FILE: include/linux/kdb.h:48:
+#define KDB_FLAG_NO_VT_CONSOLE	(1 << 6) /* No VT console is available, do

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#418: FILE: include/linux/kdb.h:49:
+					  * not use keyboard */

CHECK:BIT_MACRO: Prefer using the BIT macro
#419: FILE: include/linux/kdb.h:50:
+#define KDB_FLAG_NO_I8042	(1 << 7) /* No i8042 chip is available, do

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#420: FILE: include/linux/kdb.h:51:
+					  * not use keyboard */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#424: FILE: include/linux/kdb.h:55:
+extern void kdb_save_flags(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#425: FILE: include/linux/kdb.h:56:
+extern void kdb_restore_flags(void);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#437: FILE: include/linux/kdb.h:68:
+typedef enum {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#447: FILE: include/linux/kdb.h:78:
+				 * regs probably valid */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#451: FILE: include/linux/kdb.h:82:
+extern void kdb_printf(const char *, ...)

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#451: FILE: include/linux/kdb.h:82:
+extern void kdb_printf(const char *, ...)

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#452: FILE: include/linux/kdb.h:83:
+	    __attribute__ ((format (printf, 1, 2)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#454: FILE: include/linux/kdb.h:85:
+	     __attribute__ ((format (printf, 1, 2)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#455: FILE: include/linux/kdb.h:86:
+extern void kdb_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#460: FILE: include/linux/kdb.h:91:
+extern int kdb_get_kbd_char(void);

WARNING:LINE_SPACING: Missing a blank line after declarations
#466: FILE: include/linux/kdb.h:97:
+	unsigned int cpu = task_thread_info(p)->cpu;
+	if (cpu > num_possible_cpus())

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#473: FILE: include/linux/kdb.h:104:
+extern void kdb_si_swapinfo(struct sysinfo *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#491: FILE: include/linux/swap.h:315:
+extern void __si_swapinfo(struct sysinfo *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct sysinfo *' should also have an identifier name
#491: FILE: include/linux/swap.h:315:
+extern void __si_swapinfo(struct sysinfo *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#583: FILE: kernel/debug/kdb/kdb_bp.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#642: FILE: kernel/debug/kdb/kdb_bp.c:60:
+	unsigned char data[KDB_MAX_VERIFY_SIZE];
+	return kdb_getarea_size(data, addr, size) ||

CHECK:LINE_SPACING: Please don't use multiple blank lines
#678: FILE: kernel/debug/kdb/kdb_bp.c:96:
+
+

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len > 4'
#679: FILE: kernel/debug/kdb/kdb_bp.c:97:
+			if ((len > 4) || (len == 3))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'len == 3'
#679: FILE: kernel/debug/kdb/kdb_bp.c:97:
+			if ((len > 4) || (len == 3))

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#720: FILE: kernel/debug/kdb/kdb_bp.c:138:
+	    kdb_verify_rw(bp->bp_addr, bph->bph_length+1)) {
 	                                              ^

WARNING:SPLIT_STRING: quoted string split across lines
#722: FILE: kernel/debug/kdb/kdb_bp.c:140:
+		kdb_printf("Invalid address for breakpoint, "
+			   "ignoring bp command\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:LINE_SPACING: Missing a blank line after declarations
#733: FILE: kernel/debug/kdb/kdb_bp.c:151:
+	int ret = 1;
+	if (!bp->bp_installed)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#855: FILE: kernel/debug/kdb/kdb_bp.c:273:
+
+

WARNING:SPLIT_STRING: quoted string split across lines
#894: FILE: kernel/debug/kdb/kdb_bp.c:312:
+	kdb_printf("\taddr at %016lx, hardtype=%d, forcehw=%d, "
+		   "installed=%d, hard=%p\n",

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1076: FILE: kernel/debug/kdb/kdb_bp.c:494:
+			lowbp = highbp = addr;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1082: FILE: kernel/debug/kdb/kdb_bp.c:500:
+					lowbp = highbp = i;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1120: FILE: kernel/debug/kdb/kdb_bp.c:538:
+			if (!bp->bp_template.bph_free
+			 && !bp->bp_hardtype) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1233: FILE: kernel/debug/kdb/kdb_bp.c:651:
+	kdb_register_repeat("bp", kdb_bp, "[<vaddr>]",
+		"Set/Display breakpoints", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1235: FILE: kernel/debug/kdb/kdb_bp.c:653:
+	kdb_register_repeat("bl", kdb_bp, "[<vaddr>]",
+		"Display breakpoints", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1238: FILE: kernel/debug/kdb/kdb_bp.c:656:
+		kdb_register_repeat("bph", kdb_bp, "[<vaddr>]",
+		"Set hardware breakpoint", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1240: FILE: kernel/debug/kdb/kdb_bp.c:658:
+	kdb_register_repeat("bc", kdb_bc, "<bpnum>",
+		"Clear Breakpoint", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1242: FILE: kernel/debug/kdb/kdb_bp.c:660:
+	kdb_register_repeat("be", kdb_bc, "<bpnum>",
+		"Enable Breakpoint", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1244: FILE: kernel/debug/kdb/kdb_bp.c:662:
+	kdb_register_repeat("bd", kdb_bc, "<bpnum>",
+		"Disable Breakpoint", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1247: FILE: kernel/debug/kdb/kdb_bp.c:665:
+	kdb_register_repeat("ss", kdb_ss, "",
+		"Single Step", 1, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1249: FILE: kernel/debug/kdb/kdb_bp.c:667:
+	kdb_register_repeat("ssb", kdb_ss, "",
+		"Single step to branch/call", 0, KDB_REPEAT_NO_ARGS);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1260: FILE: kernel/debug/kdb/kdb_bt.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1280: FILE: kernel/debug/kdb/kdb_bt.c:21:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1284: FILE: kernel/debug/kdb/kdb_bt.c:25:
+	int old_lvl = console_loglevel;
+	console_loglevel = 15;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1342: FILE: kernel/debug/kdb/kdb_bt.c:83:
+	char buffer[2];
+	if (kdb_getarea(buffer[0], (unsigned long)p) ||

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1343: FILE: kernel/debug/kdb/kdb_bt.c:84:
+	    kdb_getarea(buffer[0], (unsigned long)(p+1)-1))
 	                                            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1343: FILE: kernel/debug/kdb/kdb_bt.c:84:
+	    kdb_getarea(buffer[0], (unsigned long)(p+1)-1))
 	                                               ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1374: FILE: kernel/debug/kdb/kdb_bt.c:115:
+						 * proc in bta */

WARNING:LINE_SPACING: Missing a blank line after declarations
#1399: FILE: kernel/debug/kdb/kdb_bt.c:140:
+		unsigned long pid;
+		if (argc != 1)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1424: FILE: kernel/debug/kdb/kdb_bt.c:165:
+		char buf[80];
+		if (argc > 1)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1432: FILE: kernel/debug/kdb/kdb_bt.c:173:
+		 * this point */

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1458: FILE: kernel/debug/kdb/kdb_bt.c:199:
+		return 0;
+	} else {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1519: FILE: kernel/debug/kdb/kdb_debugger.c:1:
+/*

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bp->bp_enabled'
#1562: FILE: kernel/debug/kdb/kdb_debugger.c:44:
+		if ((bp->bp_enabled) && (bp->bp_addr == addr)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bp->bp_addr == addr'
#1562: FILE: kernel/debug/kdb/kdb_debugger.c:44:
+		if ((bp->bp_enabled) && (bp->bp_addr == addr)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1572: FILE: kernel/debug/kdb/kdb_debugger.c:54:
+		kdb_bp_t *bp;
+		for (i = 0, bp = kdb_breakpoints; i < KDB_MAXBPT; i++, bp++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1594: FILE: kernel/debug/kdb/kdb_debugger.c:76:
+	if (reason != KDB_REASON_BREAK && ks->ex_vector == 0 &&
+		ks->signo == SIGTRAP) {

WARNING:TYPO_SPELLING: 'inteface' may be misspelled - perhaps 'interface'?
#1633: FILE: kernel/debug/kdb/kdb_debugger.c:115:
+			/* This inteface glue which allows kdb to
 			        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1669: FILE: kernel/debug/kdb/kdb_debugger.c:151:
+		 * differently vs the gdbstub */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1683: FILE: kernel/debug/kdb/kdb_io.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1713: FILE: kernel/debug/kdb/kdb_io.c:31:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#1717: FILE: kernel/debug/kdb/kdb_io.c:35:
+	int slen = strlen(buffer);
+	if (strncmp(buffer, "$?#3f", slen) != 0 &&

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1728: FILE: kernel/debug/kdb/kdb_io.c:46:
+#define ESCAPE_DELAY (2*1000000/ESCAPE_UDELAY) /* 2 seconds worth of udelays */
                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#1728: FILE: kernel/debug/kdb/kdb_io.c:46:
+#define ESCAPE_DELAY (2*1000000/ESCAPE_UDELAY) /* 2 seconds worth of udelays */
                                ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!f"
#1736: FILE: kernel/debug/kdb/kdb_io.c:54:
+		if (*f == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LINE_SPACING: Missing a blank line after declarations
#1789: FILE: kernel/debug/kdb/kdb_io.c:107:
+				int mapkey = 0;
+				switch (key) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1820: FILE: kernel/debug/kdb/kdb_io.c:138:
+				int mapkey = 0;
+				if (key == '~') {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1880: FILE: kernel/debug/kdb/kdb_io.c:198:
+	char *bufend = buffer+bufsize-2;	/* Reserve space for newline
 	                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1880: FILE: kernel/debug/kdb/kdb_io.c:198:
+	char *bufend = buffer+bufsize-2;	/* Reserve space for newline
 	                             ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1881: FILE: kernel/debug/kdb/kdb_io.c:199:
+						 * and null byte */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1894: FILE: kernel/debug/kdb/kdb_io.c:212:
+
+

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1901: FILE: kernel/debug/kdb/kdb_io.c:219:
+		if (*(buffer+len-1) == '\n')
 		            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1901: FILE: kernel/debug/kdb/kdb_io.c:219:
+		if (*(buffer+len-1) == '\n')
 		                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1919: FILE: kernel/debug/kdb/kdb_io.c:237:
+				memcpy(cp-1, tmpbuffer, lastchar - cp);
 				         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1938: FILE: kernel/debug/kdb/kdb_io.c:256:
+			memcpy(tmpbuffer, cp+1, lastchar - cp - 1);
 			                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1970: FILE: kernel/debug/kdb/kdb_io.c:288:
+		       strlen(kdb_prompt_str) + (lastchar-buffer));
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1971: FILE: kernel/debug/kdb/kdb_io.c:289:
+		*(tmpbuffer+strlen(kdb_prompt_str) +
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1972: FILE: kernel/debug/kdb/kdb_io.c:290:
+		  (lastchar-buffer)) = '\0';
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1975: FILE: kernel/debug/kdb/kdb_io.c:293:
+		*(lastchar+1) = '\0';
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1985: FILE: kernel/debug/kdb/kdb_io.c:303:
+		       strlen(kdb_prompt_str) + (lastchar-buffer));
 		                                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1986: FILE: kernel/debug/kdb/kdb_io.c:304:
+		*(tmpbuffer+strlen(kdb_prompt_str) +
 		           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1987: FILE: kernel/debug/kdb/kdb_io.c:305:
+		  (lastchar-buffer)) = '\0';
 		           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1990: FILE: kernel/debug/kdb/kdb_io.c:308:
+		*(lastchar+1) = '\0';
 		          ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2000: FILE: kernel/debug/kdb/kdb_io.c:318:
+		memcpy(tmpbuffer, p_tmp, cp-p_tmp);
 		                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2001: FILE: kernel/debug/kdb/kdb_io.c:319:
+		*(tmpbuffer + (cp-p_tmp)) = '\0';
 		                 ^

WARNING:SPLIT_STRING: quoted string split across lines
#2016: FILE: kernel/debug/kdb/kdb_io.c:334:
+				kdb_printf(" But only first %d symbols will"
+					   " be printed.\nYou can change the"

WARNING:SPLIT_STRING: quoted string split across lines
#2017: FILE: kernel/debug/kdb/kdb_io.c:335:
+					   " be printed.\nYou can change the"
+					   " environment variable DTABCOUNT.",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2034: FILE: kernel/debug/kdb/kdb_io.c:352:
+			strncpy(p_tmp+len_tmp, cp, lastchar-cp+1);
 			             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2034: FILE: kernel/debug/kdb/kdb_io.c:352:
+			strncpy(p_tmp+len_tmp, cp, lastchar-cp+1);
 			                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2034: FILE: kernel/debug/kdb/kdb_io.c:352:
+			strncpy(p_tmp+len_tmp, cp, lastchar-cp+1);
 			                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2036: FILE: kernel/debug/kdb/kdb_io.c:354:
+			strncpy(cp, p_tmp+len, len_tmp-len + 1);
 			                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2036: FILE: kernel/debug/kdb/kdb_io.c:354:
+			strncpy(cp, p_tmp+len, len_tmp-len + 1);
 			                              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2048: FILE: kernel/debug/kdb/kdb_io.c:366:
+				memcpy(cp+1, tmpbuffer, lastchar - cp);
 				         ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2064: FILE: kernel/debug/kdb/kdb_io.c:382:
+				 * fails */

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2136: FILE: kernel/debug/kdb/kdb_io.c:454:
+#define FLUSH_DELAY (500000/FLUSH_UDELAY) /* 0.5 seconds worth of udelays */
                            ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2142: FILE: kernel/debug/kdb/kdb_io.c:460:
+	int flush_delay = 1;
+	while (flush_delay--) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2193: FILE: kernel/debug/kdb/kdb_io.c:511:
+	len1 = strlen(searched)-1;
 	                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2203: FILE: kernel/debug/kdb/kdb_io.c:521:
+		if (!strncmp(searched+len1-len2, searchfor, len2))
 		                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2203: FILE: kernel/debug/kdb/kdb_io.c:521:
+		if (!strncmp(searched+len1-len2, searchfor, len2))
 		                          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2229: FILE: kernel/debug/kdb/kdb_io.c:547:
+	static DEFINE_SPINLOCK(kdb_printf_lock);
+	unsigned long uninitialized_var(flags);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2229: FILE: kernel/debug/kdb/kdb_io.c:547:
+	unsigned long uninitialized_var(flags);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'flags' should also have an identifier name
#2229: FILE: kernel/debug/kdb/kdb_io.c:547:
+	unsigned long uninitialized_var(flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2306: FILE: kernel/debug/kdb/kdb_io.c:624:
+			/* no newline; don't search/write the buffer
+			   until one is there */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2306: FILE: kernel/debug/kdb/kdb_io.c:624:
+			   until one is there */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2317: FILE: kernel/debug/kdb/kdb_io.c:635:
+^I^Icp++;^I ^I     /* to byte after the newline */$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2360: FILE: kernel/debug/kdb/kdb_io.c:678:
+		printk(KERN_INFO "%s", kdb_buffer);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!moreprompt"
#2383: FILE: kernel/debug/kdb/kdb_io.c:701:
+		if (moreprompt == NULL)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#2404: FILE: kernel/debug/kdb/kdb_io.c:722:
+			printk("%s", moreprompt);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2407: FILE: kernel/debug/kdb/kdb_io.c:725:
+				    * immediately after getting one key. */

WARNING:SPLIT_STRING: quoted string split across lines
#2432: FILE: kernel/debug/kdb/kdb_io.c:750:
+			kdb_printf("\nOnly 'q' or 'Q' are processed at more "
+				   "prompt, input ignored\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2475: FILE: kernel/debug/kdb/kdb_main.c:1:
+/*

WARNING:NEW_TYPEDEFS: do not add new typedefs
#2559: FILE: kernel/debug/kdb/kdb_main.c:85:
+typedef struct _kdbmsg {

WARNING:SPLIT_STRING: quoted string split across lines
#2571: FILE: kernel/debug/kdb/kdb_main.c:97:
+	KDBMSG(BADWIDTH, "Illegal value for BYTESPERWORD use 1, 2, 4 or 8, "
+	       "8 is only allowed on 64 bit systems"),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2595: FILE: kernel/debug/kdb/kdb_main.c:121:
+};
+#undef KDBMSG

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2599: FILE: kernel/debug/kdb/kdb_main.c:125:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2612: FILE: kernel/debug/kdb/kdb_main.c:138:
+ "PROMPT=[%d]kdb> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2613: FILE: kernel/debug/kdb/kdb_main.c:139:
+ "MOREPROMPT=[%d]more> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2615: FILE: kernel/debug/kdb/kdb_main.c:141:
+ "PROMPT=kdb> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2616: FILE: kernel/debug/kdb/kdb_main.c:142:
+ "MOREPROMPT=more> ",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2618: FILE: kernel/debug/kdb/kdb_main.c:144:
+ "RADIX=16",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2619: FILE: kernel/debug/kdb/kdb_main.c:145:
+ "LINES=24",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2620: FILE: kernel/debug/kdb/kdb_main.c:146:
+ "COLUMNS=80",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2621: FILE: kernel/debug/kdb/kdb_main.c:147:
+ "MDCOUNT=8",^I^I^I/* lines of md output */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2622: FILE: kernel/debug/kdb/kdb_main.c:148:
+ "BTARGS=9",^I^I^I/* 9 possible args in bt */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2623: FILE: kernel/debug/kdb/kdb_main.c:149:
+ KDB_PLATFORM_ENV,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2624: FILE: kernel/debug/kdb/kdb_main.c:150:
+ "DTABCOUNT=30",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2625: FILE: kernel/debug/kdb/kdb_main.c:151:
+ "NOSECT=1",$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2626: FILE: kernel/debug/kdb/kdb_main.c:152:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2627: FILE: kernel/debug/kdb/kdb_main.c:153:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2628: FILE: kernel/debug/kdb/kdb_main.c:154:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2629: FILE: kernel/debug/kdb/kdb_main.c:155:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2630: FILE: kernel/debug/kdb/kdb_main.c:156:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2631: FILE: kernel/debug/kdb/kdb_main.c:157:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2632: FILE: kernel/debug/kdb/kdb_main.c:158:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2633: FILE: kernel/debug/kdb/kdb_main.c:159:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2634: FILE: kernel/debug/kdb/kdb_main.c:160:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2635: FILE: kernel/debug/kdb/kdb_main.c:161:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2636: FILE: kernel/debug/kdb/kdb_main.c:162:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2637: FILE: kernel/debug/kdb/kdb_main.c:163:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2638: FILE: kernel/debug/kdb/kdb_main.c:164:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2639: FILE: kernel/debug/kdb/kdb_main.c:165:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2640: FILE: kernel/debug/kdb/kdb_main.c:166:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2641: FILE: kernel/debug/kdb/kdb_main.c:167:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2642: FILE: kernel/debug/kdb/kdb_main.c:168:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2643: FILE: kernel/debug/kdb/kdb_main.c:169:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2644: FILE: kernel/debug/kdb/kdb_main.c:170:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2645: FILE: kernel/debug/kdb/kdb_main.c:171:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2646: FILE: kernel/debug/kdb/kdb_main.c:172:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2647: FILE: kernel/debug/kdb/kdb_main.c:173:
+ (char *)0,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2648: FILE: kernel/debug/kdb/kdb_main.c:174:
+ (char *)0,$

WARNING:LINE_SPACING: Missing a blank line after declarations
#2658: FILE: kernel/debug/kdb/kdb_main.c:184:
+	struct kdb_running_process *krp = kdb_running_process + cpu;
+	if ((task_thread_info(p)->flags & _TIF_MCA_INIT) && krp->p)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2686: FILE: kernel/debug/kdb/kdb_main.c:212:
+		if ((strncmp(match, e, matchlen) == 0)
+		 && ((e[matchlen] == '\0')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2687: FILE: kernel/debug/kdb/kdb_main.c:213:
+		 && ((e[matchlen] == '\0')
+		   || (e[matchlen] == '='))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#2689: FILE: kernel/debug/kdb/kdb_main.c:215:
+			char *cp = strchr(e, '=');
+			return cp ? ++cp : "";

WARNING:TYPO_SPELLING: 'represntation' may be misspelled - perhaps 'representation'?
#2731: FILE: kernel/debug/kdb/kdb_main.c:257:
+ *	*value  the unsigned long represntation of the env variable 'match'
   	                          ^^^^^^^^^^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2745: FILE: kernel/debug/kdb/kdb_main.c:271:
+	*value = simple_strtoul(ep, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: No space is necessary after a cast
#2767: FILE: kernel/debug/kdb/kdb_main.c:293:
+		*value = (int) val;

WARNING:TYPO_SPELLING: 'represntation' may be misspelled - perhaps 'representation'?
#2777: FILE: kernel/debug/kdb/kdb_main.c:303:
+ *	*value  the unsigned long represntation of arg.
   	                          ^^^^^^^^^^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2786: FILE: kernel/debug/kdb/kdb_main.c:312:
+	val = simple_strtoul(arg, &endp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2793: FILE: kernel/debug/kdb/kdb_main.c:319:
+		val = simple_strtoul(arg, &endp, 16);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2834: FILE: kernel/debug/kdb/kdb_main.c:360:
+		debugflags = simple_strtoul(argv[2], &cp, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2837: FILE: kernel/debug/kdb/kdb_main.c:363:
+			kdb_printf("kdb: illegal debug flags '%s'\n",
+				    argv[2]);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2859: FILE: kernel/debug/kdb/kdb_main.c:385:
+	ep[varlen+vallen+1] = '\0';
 	         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2859: FILE: kernel/debug/kdb/kdb_main.c:385:
+	ep[varlen+vallen+1] = '\0';
 	                ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2863: FILE: kernel/debug/kdb/kdb_main.c:389:
+		if (__env[i]
+		 && ((strncmp(__env[i], argv[1], varlen) == 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2864: FILE: kernel/debug/kdb/kdb_main.c:390:
+		 && ((strncmp(__env[i], argv[1], varlen) == 0)
+		   && ((__env[i][varlen] == '\0')

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2865: FILE: kernel/debug/kdb/kdb_main.c:391:
+		   && ((__env[i][varlen] == '\0')
+		    || (__env[i][varlen] == '=')))) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2874: FILE: kernel/debug/kdb/kdb_main.c:400:
+	for (i = 0; i < __nenv-1; i++) {
 	                      ^

WARNING:SPLIT_STRING: quoted string split across lines
#2888: FILE: kernel/debug/kdb/kdb_main.c:414:
+		kdb_printf("No current kdb registers."
+			   "  You may need to select another task\n");

WARNING:TYPO_SPELLING: 'hexidecimal' may be misspelled - perhaps 'hexadecimal'?
#2900: FILE: kernel/debug/kdb/kdb_main.c:426:
+ *	hexidecimal), a symbol name, a register name (preceeded by the
   	^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#2900: FILE: kernel/debug/kdb/kdb_main.c:426:
+ *	hexidecimal), a symbol name, a register name (preceeded by the
   	                                              ^^^^^^^^^

WARNING:TYPO_SPELLING: 'preceeded' may be misspelled - perhaps 'preceded'?
#2902: FILE: kernel/debug/kdb/kdb_main.c:428:
+ *	(preceeded by a dollar sign) or a simple arithmetic expression
   	 ^^^^^^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "cp"
#2953: FILE: kernel/debug/kdb/kdb_main.c:479:
+	if (cp != NULL) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#2970: FILE: kernel/debug/kdb/kdb_main.c:496:
+		return KDB_NOTIMP;
+	} else {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2994: FILE: kernel/debug/kdb/kdb_main.c:520:
+	if ((*nextarg > argc)
+	 && (symbol == '\0'))

CHECK:BRACES: braces {} should be used on all arms of this statement
#3001: FILE: kernel/debug/kdb/kdb_main.c:527:
+	if (symbol == '\0') {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3003: FILE: kernel/debug/kdb/kdb_main.c:529:
+		if ((argv[*nextarg][0] != '+')
+		 && (argv[*nextarg][0] != '-')) {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#3008: FILE: kernel/debug/kdb/kdb_main.c:534:
+			return 0;
+		} else {

CHECK:BRACES: Unbalanced braces around else statement
#3012: FILE: kernel/debug/kdb/kdb_main.c:538:
+	} else

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3019: FILE: kernel/debug/kdb/kdb_main.c:545:
+	if ((*nextarg > argc)
+	 && (symbol == '\0')) {

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#3083: FILE: kernel/debug/kdb/kdb_main.c:609:
+};
+static struct defcmd_set *defcmd_set;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3094: FILE: kernel/debug/kdb/kdb_main.c:620:
+	char **save_command = s->command;
+	if (strcmp(argv0, "endefcmd") == 0) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->command
#3105: FILE: kernel/debug/kdb/kdb_main.c:631:
+	s->command = kmalloc((s->count + 1) * sizeof(*(s->command)), GFP_KDB);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around s->command
#3112: FILE: kernel/debug/kdb/kdb_main.c:638:
+	memcpy(s->command, save_command, s->count * sizeof(*(s->command)));

WARNING:LINE_SPACING: Missing a blank line after declarations
#3121: FILE: kernel/debug/kdb/kdb_main.c:647:
+	struct defcmd_set *save_defcmd_set = defcmd_set, *s;
+	if (defcmd_in_progress) {

WARNING:SPLIT_STRING: quoted string split across lines
#3123: FILE: kernel/debug/kdb/kdb_main.c:649:
+		kdb_printf("kdb: nested defcmd detected, assuming missing "
+			   "endefcmd\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#3128: FILE: kernel/debug/kdb/kdb_main.c:654:
+		int i;
+		for (s = defcmd_set; s < defcmd_set + defcmd_set_count; ++s) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3157: FILE: kernel/debug/kdb/kdb_main.c:683:
+		strcpy(s->usage, s->usage+1);
 		                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3158: FILE: kernel/debug/kdb/kdb_main.c:684:
+		s->usage[strlen(s->usage)-1] = '\0';
 		                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3161: FILE: kernel/debug/kdb/kdb_main.c:687:
+		strcpy(s->help, s->help+1);
 		                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3162: FILE: kernel/debug/kdb/kdb_main.c:688:
+		s->help[strlen(s->help)-1] = '\0';
 		                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#3182: FILE: kernel/debug/kdb/kdb_main.c:708:
+	struct defcmd_set *s;
+	if (argc != 0)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_exec_defcmd', this function's name, in a string
#3189: FILE: kernel/debug/kdb/kdb_main.c:715:
+		kdb_printf("kdb_exec_defcmd: could not find commands for %s\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3195: FILE: kernel/debug/kdb/kdb_main.c:721:
+		 * this point */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3208: FILE: kernel/debug/kdb/kdb_main.c:734:
+					 * size == 256 */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3246: FILE: kernel/debug/kdb/kdb_main.c:772:
+		/* allow it be "x y z" by removing the "'s - there must
+		   be two of them */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3246: FILE: kernel/debug/kdb/kdb_main.c:772:
+		   be two of them */

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3262: FILE: kernel/debug/kdb/kdb_main.c:788:
+	if (*(cp+len-1) == '$') {
 	        ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3262: FILE: kernel/debug/kdb/kdb_main.c:788:
+	if (*(cp+len-1) == '$') {
 	            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3264: FILE: kernel/debug/kdb/kdb_main.c:790:
+		*(cp+len-1) = '\0';
 		    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3264: FILE: kernel/debug/kdb/kdb_main.c:790:
+		*(cp+len-1) = '\0';
 		        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#3276: FILE: kernel/debug/kdb/kdb_main.c:802:
+	return;
+}

WARNING:TYPO_SPELLING: 'delimeter' may be misspelled - perhaps 'delimiter'?
#3294: FILE: kernel/debug/kdb/kdb_main.c:820:
+ *	is considered a token delimeter (but special consideration
   	                      ^^^^^^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3310: FILE: kernel/debug/kdb/kdb_main.c:836:
+	static char cbuf[CMD_BUFLEN+2];
 	                           ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3320: FILE: kernel/debug/kdb/kdb_main.c:846:
+	kdb_grepping_flag = check_grep = 0;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3324: FILE: kernel/debug/kdb/kdb_main.c:850:
+		 * repeat the command */

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_parse', this function's name, in a string
#3346: FILE: kernel/debug/kdb/kdb_main.c:872:
+				kdb_printf("kdb_parse: command buffer "

WARNING:SPLIT_STRING: quoted string split across lines
#3347: FILE: kernel/debug/kdb/kdb_main.c:873:
+				kdb_printf("kdb_parse: command buffer "
+					   "overflow, command ignored\n%s\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_parse', this function's name, in a string
#3352: FILE: kernel/debug/kdb/kdb_main.c:878:
+				kdb_printf("kdb_parse: too many arguments, "

WARNING:SPLIT_STRING: quoted string split across lines
#3353: FILE: kernel/debug/kdb/kdb_main.c:879:
+				kdb_printf("kdb_parse: too many arguments, "
+					   "command ignored\n%s\n", cmdstr);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#3360: FILE: kernel/debug/kdb/kdb_main.c:886:
+			 * whitespace or '=' */

WARNING:LINE_SPACING: Missing a blank line after declarations
#3393: FILE: kernel/debug/kdb/kdb_main.c:919:
+		int result = kdb_defcmd2(cmdstr, argv[0]);
+		if (!defcmd_in_progress) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[0]
#3395: FILE: kernel/debug/kdb/kdb_main.c:921:
+			*(argv[0]) = '\0';

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3413: FILE: kernel/debug/kdb/kdb_main.c:939:
+			if (tp->cmd_minlen
+			 && (strlen(argv[0]) <= tp->cmd_minlen)) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#3446: FILE: kernel/debug/kdb/kdb_main.c:972:
+		int result;
+		KDB_STATE_SET(CMD);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3447: FILE: kernel/debug/kdb/kdb_main.c:973:
+		result = (*tp->cmd_func)(argc-1, (const char **)argv);
 		                             ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[0]
#3455: FILE: kernel/debug/kdb/kdb_main.c:981:
+				*(argv[0]) = '\0';

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around argv[1]
#3460: FILE: kernel/debug/kdb/kdb_main.c:986:
+				*(argv[1]) = '\0';

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3493: FILE: kernel/debug/kdb/kdb_main.c:1019:
+
+

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3505: FILE: kernel/debug/kdb/kdb_main.c:1031:
+			cmdptr = (cmdptr-1) % KDB_CMD_HISTORY_COUNT;
 			                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3510: FILE: kernel/debug/kdb/kdb_main.c:1036:
+			cmdptr = (cmdptr+1) % KDB_CMD_HISTORY_COUNT;
 			                ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_reboot', this function's name, in a string
#3524: FILE: kernel/debug/kdb/kdb_main.c:1050:
+	kdb_printf("Hmm, kdb_reboot did not reboot, spinning here\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#3534: FILE: kernel/debug/kdb/kdb_main.c:1060:
+	int old_lvl = console_loglevel;
+	console_loglevel = 15;

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3581: FILE: kernel/debug/kdb/kdb_main.c:1107:
+	KDB_DEBUG_STATE("kdb_local 1", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3614: FILE: kernel/debug/kdb/kdb_main.c:1140:
+			KDB_DEBUG_STATE("kdb_local 3", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3621: FILE: kernel/debug/kdb/kdb_main.c:1147:
+			KDB_DEBUG_STATE("kdb_local 4", reason);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#3629: FILE: kernel/debug/kdb/kdb_main.c:1155:
+
+	}

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3670: FILE: kernel/debug/kdb/kdb_main.c:1196:
+			KDB_DEBUG_STATE("kdb_local 6", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3680: FILE: kernel/debug/kdb/kdb_main.c:1206:
+		KDB_DEBUG_STATE("kdb_local 8", reason);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around cmd_hist[cmd_head]
#3693: FILE: kernel/debug/kdb/kdb_main.c:1219:
+		*(cmd_hist[cmd_head]) = '\0';

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#3701: FILE: kernel/debug/kdb/kdb_main.c:1227:
+			const char *setargs[] = { "set", "LOGGING", "1" };

WARNING:LINE_SPACING: Missing a blank line after declarations
#3702: FILE: kernel/debug/kdb/kdb_main.c:1228:
+			const char *setargs[] = { "set", "LOGGING", "1" };
+			kdb_set(2, setargs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3727: FILE: kernel/debug/kdb/kdb_main.c:1253:
+					  strlen(cmd_hist[cmd_head])-1) = '\0';
 					                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3730: FILE: kernel/debug/kdb/kdb_main.c:1256:
+					*(cmd_cur+strlen(cmd_cur)-1) = '\0';
 					         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3730: FILE: kernel/debug/kdb/kdb_main.c:1256:
+					*(cmd_cur+strlen(cmd_cur)-1) = '\0';
 					                         ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3738: FILE: kernel/debug/kdb/kdb_main.c:1264:
+			cmd_head = (cmd_head+1) % KDB_CMD_HISTORY_COUNT;
 			                    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3740: FILE: kernel/debug/kdb/kdb_main.c:1266:
+				cmd_tail = (cmd_tail+1) % KDB_CMD_HISTORY_COUNT;
 				                    ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3750: FILE: kernel/debug/kdb/kdb_main.c:1276:
+		if (diag == KDB_CMD_GO
+		 || diag == KDB_CMD_CPU

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3751: FILE: kernel/debug/kdb/kdb_main.c:1277:
+		 || diag == KDB_CMD_CPU
+		 || diag == KDB_CMD_SS

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3752: FILE: kernel/debug/kdb/kdb_main.c:1278:
+		 || diag == KDB_CMD_SS
+		 || diag == KDB_CMD_SSB

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3753: FILE: kernel/debug/kdb/kdb_main.c:1279:
+		 || diag == KDB_CMD_SSB
+		 || diag == KDB_CMD_KGDB)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_local', this function's name, in a string
#3759: FILE: kernel/debug/kdb/kdb_main.c:1285:
+	KDB_DEBUG_STATE("kdb_local 9", diag);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3763: FILE: kernel/debug/kdb/kdb_main.c:1289:
+
+

WARNING:TYPO_SPELLING: 'acording' may be misspelled - perhaps 'according'?
#3795: FILE: kernel/debug/kdb/kdb_main.c:1321:
+ *			acording to kdb state.
   			^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3804: FILE: kernel/debug/kdb/kdb_main.c:1330:
+int kdb_main_loop(kdb_reason_t reason, kdb_reason_t reason2, int error,
+	      kdb_dbtrap_t db_result, struct pt_regs *regs)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#3813: FILE: kernel/debug/kdb/kdb_main.c:1339:
+		KDB_DEBUG_STATE("kdb_main_loop 1", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#3824: FILE: kernel/debug/kdb/kdb_main.c:1350:
+		KDB_DEBUG_STATE("kdb_main_loop 2", reason);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#3829: FILE: kernel/debug/kdb/kdb_main.c:1355:
+		KDB_DEBUG_STATE("kdb_main_loop 3", result);

WARNING:SPLIT_STRING: quoted string split across lines
#3848: FILE: kernel/debug/kdb/kdb_main.c:1374:
+				kdb_printf("Entering please attach debugger "
+					   "or use $D#44+ or $3#33\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_main_loop', this function's name, in a string
#3854: FILE: kernel/debug/kdb/kdb_main.c:1380:
+		KDB_DEBUG_STATE("kdb_main_loop 4", reason);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3876: FILE: kernel/debug/kdb/kdb_main.c:1402:
+	unsigned char c;
+	while (count--) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3914: FILE: kernel/debug/kdb/kdb_main.c:1440:
+		if (phys) {
[...]
+		} else if (kdb_getword(&word, addr, bytesperword))
[...]

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3972: FILE: kernel/debug/kdb/kdb_main.c:1498:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1),
 	                                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3972: FILE: kernel/debug/kdb/kdb_main.c:1498:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1),
 	                                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#3972: FILE: kernel/debug/kdb/kdb_main.c:1498:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1),
 	                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3972: FILE: kernel/debug/kdb/kdb_main.c:1498:
+	kdb_printf("%*s %s\n", (int)((num-i)*(2*bytesperword + 1)+1),
 	                                                         ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#3997: FILE: kernel/debug/kdb/kdb_main.c:1523:
+	if (strcmp(argv[0], "mdr") == 0) {
[...]
+	} else if (isdigit(argv[0][2])) {
[...]
+	} else if (strcmp(argv[0], "md") == 0)
[...]
+	else if (strcmp(argv[0], "mds") == 0)
[...]
+	else if (strcmp(argv[0], "mdp") == 0) {
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#4010: FILE: kernel/debug/kdb/kdb_main.c:1536:
+		if (!argv[0][3])
[...]
+		else if (argv[0][3] == 'c' && argv[0][4]) {
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#4014: FILE: kernel/debug/kdb/kdb_main.c:1540:
+			char *p;
+			repeat = simple_strtoul(argv[0] + 4, &p, 10);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4014: FILE: kernel/debug/kdb/kdb_main.c:1540:
+			repeat = simple_strtoul(argv[0] + 4, &p, 10);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#4024: FILE: kernel/debug/kdb/kdb_main.c:1550:
+		phys = valid = 1;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4042: FILE: kernel/debug/kdb/kdb_main.c:1568:
+		int diag, nextarg = 1;
+		diag = kdbgetaddrarg(argc, argv, &nextarg, &addr,

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4046: FILE: kernel/debug/kdb/kdb_main.c:1572:
+		if (argc > nextarg+2)
 		                  ^

CHECK:SPACING: No space is necessary after a cast
#4052: FILE: kernel/debug/kdb/kdb_main.c:1578:
+				mdcount = (int) val;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4056: FILE: kernel/debug/kdb/kdb_main.c:1582:
+		if (argc >= nextarg+1) {
 		                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4057: FILE: kernel/debug/kdb/kdb_main.c:1583:
+			diag = kdbgetularg(argv[nextarg+1], &val);
 			                               ^

CHECK:SPACING: No space is necessary after a cast
#4059: FILE: kernel/debug/kdb/kdb_main.c:1585:
+				radix = (int) val;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4117: FILE: kernel/debug/kdb/kdb_main.c:1643:
+	addr &= ~(bytesperword-1);
 	                      ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#4124: FILE: kernel/debug/kdb/kdb_main.c:1650:
+			if (phys) {
[...]
+			} else if (kdb_getword(&word, a, bytesperword) || word)
[...]

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4126: FILE: kernel/debug/kdb/kdb_main.c:1652:
+				if (kdb_getphysword(&word, a, bytesperword)
+						|| word)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4138: FILE: kernel/debug/kdb/kdb_main.c:1664:
+			int s = num * (z-2);
 			                ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4139: FILE: kernel/debug/kdb/kdb_main.c:1665:
+			int s = num * (z-2);
+			kdb_printf(kdb_machreg_fmt0 "-" kdb_machreg_fmt0

WARNING:SPLIT_STRING: quoted string split across lines
#4210: FILE: kernel/debug/kdb/kdb_main.c:1736:
+			kdb_printf("go <address> must be issued from the "
+				   "initial cpu, do cpu %d first\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4227: FILE: kernel/debug/kdb/kdb_main.c:1753:
+		kdb_printf("kdb_continue_catastrophic=%d, ",
+			kdb_continue_catastrophic);

WARNING:SPLIT_STRING: quoted string split across lines
#4230: FILE: kernel/debug/kdb/kdb_main.c:1756:
+			kdb_printf("type go a second time if you really want "
+				   "to continue\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#4241: FILE: kernel/debug/kdb/kdb_main.c:1767:
+		char buf[80];
+		kdb_printf("go was not issued from initial cpu, switching "

WARNING:SPLIT_STRING: quoted string split across lines
#4242: FILE: kernel/debug/kdb/kdb_main.c:1768:
+		kdb_printf("go was not issued from initial cpu, switching "
+			   "back to cpu %d\n", kdb_initial_cpu);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4245: FILE: kernel/debug/kdb/kdb_main.c:1771:
+		 * this point */

WARNING:LINE_SPACING: Missing a blank line after declarations
#4260: FILE: kernel/debug/kdb/kdb_main.c:1786:
+	int diag = kdb_check_regs();
+	if (diag)

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#4368: FILE: kernel/debug/kdb/kdb_main.c:1894:
+	list_for_each_entry(mod, kdb_modules, list) {
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#4384: FILE: kernel/debug/kdb/kdb_main.c:1910:
+			struct module_use *use;
+			kdb_printf(" [ ");

WARNING:LINE_SPACING: Missing a blank line after declarations
#4432: FILE: kernel/debug/kdb/kdb_main.c:1958:
+		char *cp;
+		lines = simple_strtol(argv[1], &cp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#4432: FILE: kernel/debug/kdb/kdb_main.c:1958:
+		lines = simple_strtol(argv[1], &cp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4436: FILE: kernel/debug/kdb/kdb_main.c:1962:
+			adjust = simple_strtoul(argv[2], &cp, 0);

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#4445: FILE: kernel/debug/kdb/kdb_main.c:1971:
+		const char *setargs[] = { "set", "LOGGING", "0" };

WARNING:LINE_SPACING: Missing a blank line after declarations
#4446: FILE: kernel/debug/kdb/kdb_main.c:1972:
+		const char *setargs[] = { "set", "LOGGING", "0" };
+		kdb_set(2, setargs);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4450: FILE: kernel/debug/kdb/kdb_main.c:1976:
+	 * logical start, end+1. */

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#4457: FILE: kernel/debug/kdb/kdb_main.c:1983:
+#define KDB_WRAP(p) (((p - syslog_data[0]) % logsize) + syslog_data[0])

WARNING:SPLIT_STRING: quoted string split across lines
#4468: FILE: kernel/debug/kdb/kdb_main.c:1994:
+			kdb_printf("buffer only contains %d lines, nothing "
+				   "printed\n", n);

WARNING:SPLIT_STRING: quoted string split across lines
#4471: FILE: kernel/debug/kdb/kdb_main.c:1997:
+			kdb_printf("buffer only contains %d lines, last %d "
+				   "lines printed\n", n, n - adjust);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4487: FILE: kernel/debug/kdb/kdb_main.c:2013:
+		int skip = n - (adjust + lines);
+		if (adjust >= n) {

WARNING:SPLIT_STRING: quoted string split across lines
#4489: FILE: kernel/debug/kdb/kdb_main.c:2015:
+			kdb_printf("buffer only contains %d lines, "
+				   "nothing printed\n", n);

WARNING:SPLIT_STRING: quoted string split across lines
#4495: FILE: kernel/debug/kdb/kdb_main.c:2021:
+			kdb_printf("buffer only contains %d lines, first "
+				   "%d lines printed\n", n, lines);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4511: FILE: kernel/debug/kdb/kdb_main.c:2037:
+		char buf[201];
+		p = buf;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4515: FILE: kernel/debug/kdb/kdb_main.c:2041:
+		       (p - buf) < sizeof(buf)-1) {
 		                              ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4543: FILE: kernel/debug/kdb/kdb_main.c:2069:
+	for (start_cpu = -1, i = 0; i < NR_CPUS; i++) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4559: FILE: kernel/debug/kdb/kdb_main.c:2085:
+				if (start_cpu < i-1)
 				                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4560: FILE: kernel/debug/kdb/kdb_main.c:2086:
+					kdb_printf("-%d", i-1);
 					                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4573: FILE: kernel/debug/kdb/kdb_main.c:2099:
+		if (start_cpu < i-1)
 		                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4574: FILE: kernel/debug/kdb/kdb_main.c:2100:
+			kdb_printf("-%d", i-1);
 			                   ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cpunum > NR_CPUS'
#4601: FILE: kernel/debug/kdb/kdb_main.c:2127:
+	if ((cpunum > NR_CPUS) || !cpu_online(cpunum))

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#4601: FILE: kernel/debug/kdb/kdb_main.c:2127:
+	if ((cpunum > NR_CPUS) || !cpu_online(cpunum))

WARNING:LINE_SPACING: Missing a blank line after declarations
#4622: FILE: kernel/debug/kdb/kdb_main.c:2148:
+	const struct task_struct *p, *g;
+	for_each_online_cpu(cpu) {

WARNING:SPLIT_STRING: quoted string split across lines
#4638: FILE: kernel/debug/kdb/kdb_main.c:2164:
+			kdb_printf("%d sleeping system daemon (state M) "
+				   "process%s", daemon,

CHECK:BRACES: braces {} should be used on all arms of this statement
#4661: FILE: kernel/debug/kdb/kdb_main.c:2187:
+		if (!krp->seqno || !krp->p)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#4663: FILE: kernel/debug/kdb/kdb_main.c:2189:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#4666: FILE: kernel/debug/kdb/kdb_main.c:2192:
+				kdb_printf("  Warning: process state is "
+					   "stale\n");

WARNING:SPLIT_STRING: quoted string split across lines
#4669: FILE: kernel/debug/kdb/kdb_main.c:2195:
+				kdb_printf("  Error: does not match running "
+					   "process table (0x%p)\n", krp->p);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4682: FILE: kernel/debug/kdb/kdb_main.c:2208:
+	kdb_printf("%-*s      Pid   Parent [*] cpu State %-*s Command\n",
+		(int)(2*sizeof(void *))+2, "Task Addr",

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4682: FILE: kernel/debug/kdb/kdb_main.c:2208:
+		(int)(2*sizeof(void *))+2, "Task Addr",
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4682: FILE: kernel/debug/kdb/kdb_main.c:2208:
+		(int)(2*sizeof(void *))+2, "Task Addr",
 		                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4683: FILE: kernel/debug/kdb/kdb_main.c:2209:
+		(int)(2*sizeof(void *))+2, "Thread");
 		       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4683: FILE: kernel/debug/kdb/kdb_main.c:2209:
+		(int)(2*sizeof(void *))+2, "Thread");
 		                       ^

WARNING:SPLIT_STRING: quoted string split across lines
#4816: FILE: kernel/debug/kdb/kdb_main.c:2342:
+	kdb_printf("-----------------------------"
+		   "-----------------------------\n");

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#4838: FILE: kernel/debug/kdb/kdb_main.c:2364:
+	sig = simple_strtol(argv[1], &endp, 0);

WARNING:CONSIDER_KSTRTO: simple_strtol is obsolete, use kstrtol instead
#4847: FILE: kernel/debug/kdb/kdb_main.c:2373:
+	pid = simple_strtol(argv[2], &endp, 0);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4892: FILE: kernel/debug/kdb/kdb_main.c:2418:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4892: FILE: kernel/debug/kdb/kdb_main.c:2418:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                                      ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4892: FILE: kernel/debug/kdb/kdb_main.c:2418:
+	tm->tm_year = 68 + 4*(tm->tm_mday / (4*365+1));
 	                                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4893: FILE: kernel/debug/kdb/kdb_main.c:2419:
+	tm->tm_mday %= (4*365+1);
 	                 ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4893: FILE: kernel/debug/kdb/kdb_main.c:2419:
+	tm->tm_mday %= (4*365+1);
 	                     ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4914: FILE: kernel/debug/kdb/kdb_main.c:2440:
+	struct timespec uptime;
+	do_posix_clock_monotonic_gettime(&uptime);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4920: FILE: kernel/debug/kdb/kdb_main.c:2446:
+	val->procs = nr_threads-1;
 	                       ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#4925: FILE: kernel/debug/kdb/kdb_main.c:2451:
+	return;
+}

WARNING:SPLIT_STRING: quoted string split across lines
#4948: FILE: kernel/debug/kdb/kdb_main.c:2474:
+	kdb_printf("date       %04d-%02d-%02d %02d:%02d:%02d "
+		   "tz_minuteswest %d\n",

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4949: FILE: kernel/debug/kdb/kdb_main.c:2475:
+		1900+tm.tm_year, tm.tm_mon+1, tm.tm_mday,
 		    ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#4949: FILE: kernel/debug/kdb/kdb_main.c:2475:
+		1900+tm.tm_year, tm.tm_mon+1, tm.tm_mday,
 		                          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4955: FILE: kernel/debug/kdb/kdb_main.c:2481:
+	if (val.uptime > (24*60*60)) {
 	                    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4955: FILE: kernel/debug/kdb/kdb_main.c:2481:
+	if (val.uptime > (24*60*60)) {
 	                       ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4956: FILE: kernel/debug/kdb/kdb_main.c:2482:
+		int days = val.uptime / (24*60*60);
 		                           ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4956: FILE: kernel/debug/kdb/kdb_main.c:2482:
+		int days = val.uptime / (24*60*60);
 		                              ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#4957: FILE: kernel/debug/kdb/kdb_main.c:2483:
+		int days = val.uptime / (24*60*60);
+		val.uptime %= (24*60*60);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4957: FILE: kernel/debug/kdb/kdb_main.c:2483:
+		val.uptime %= (24*60*60);
 		                 ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4957: FILE: kernel/debug/kdb/kdb_main.c:2483:
+		val.uptime %= (24*60*60);
 		                    ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4960: FILE: kernel/debug/kdb/kdb_main.c:2486:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                      ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#4960: FILE: kernel/debug/kdb/kdb_main.c:2486:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                          ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#4960: FILE: kernel/debug/kdb/kdb_main.c:2486:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '%' (ctx:VxV)
#4960: FILE: kernel/debug/kdb/kdb_main.c:2486:
+	kdb_printf("%02ld:%02ld\n", val.uptime/(60*60), (val.uptime/60)%60);
 	                                                               ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4965: FILE: kernel/debug/kdb/kdb_main.c:2491:
+#define LOAD_FRAC(x) LOAD_INT(((x) & (FIXED_1-1)) * 100)
                                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4967: FILE: kernel/debug/kdb/kdb_main.c:2493:
+	kdb_printf("load avg   %ld.%02ld %ld.%02ld %ld.%02ld\n",
+		LOAD_INT(val.loads[0]), LOAD_FRAC(val.loads[0]),

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5007: FILE: kernel/debug/kdb/kdb_main.c:2533:
+	sprintf(fmtstr, "%%0%dlx ", (int)(2*bytesperword));
 	                                   ^

WARNING:SPLIT_STRING: quoted string split across lines
#5038: FILE: kernel/debug/kdb/kdb_main.c:2564:
+			kdb_printf("%5d " kdb_bfd_vma_fmt0 " - unable to "
+				   "read, diag=%d\n", cpu, addr, diag);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5049: FILE: kernel/debug/kdb/kdb_main.c:2575:
+		kdb_md_line(fmtstr, addr,
+			bytesperword == KDB_WORD_SIZE,

WARNING:SPLIT_STRING: quoted string split across lines
#5083: FILE: kernel/debug/kdb/kdb_main.c:2609:
+	kdb_printf("  The pattern may include a very limited set of "
+		   "metacharacters:\n");

WARNING:SPLIT_STRING: quoted string split across lines
#5086: FILE: kernel/debug/kdb/kdb_main.c:2612:
+	kdb_printf("  And if there are spaces in the pattern, you may "
+		   "quote it:\n");

WARNING:SPLIT_STRING: quoted string split across lines
#5088: FILE: kernel/debug/kdb/kdb_main.c:2614:
+	kdb_printf("   \"pat tern\" or \"^pat tern\" or \"pat tern$\""
+		   " or \"^pat tern$\"\n");

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5094: FILE: kernel/debug/kdb/kdb_main.c:2620:
+ * ^Idebugger command.$

WARNING:SPLIT_STRING: quoted string split across lines
#5121: FILE: kernel/debug/kdb/kdb_main.c:2647:
+			kdb_printf("Duplicate kdb command registered: "
+				"%s, func %p help %s\n", cmd, func, help);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!kp->cmd_name"
#5130: FILE: kernel/debug/kdb/kdb_main.c:2656:
+		if (kp->cmd_name == NULL)

WARNING:SPLIT_STRING: quoted string split across lines
#5139: FILE: kernel/debug/kdb/kdb_main.c:2665:
+			kdb_printf("Could not allocate new kdb_command "
+				   "table\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5178: FILE: kernel/debug/kdb/kdb_main.c:2704:
+int kdb_register(char *cmd,
+	     kdb_func_t func,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5225: FILE: kernel/debug/kdb/kdb_main.c:2751:
+	kdb_register_repeat("md", kdb_md, "<vaddr>",
+	  "Display Memory Contents, also mdWcN, e.g. md8c1", 1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5228: FILE: kernel/debug/kdb/kdb_main.c:2754:
+	kdb_register_repeat("mdr", kdb_md, "<vaddr> <bytes>",
+	  "Display Raw Memory", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5230: FILE: kernel/debug/kdb/kdb_main.c:2756:
+	kdb_register_repeat("mdp", kdb_md, "<paddr> <bytes>",
+	  "Display Physical Memory", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5232: FILE: kernel/debug/kdb/kdb_main.c:2758:
+	kdb_register_repeat("mds", kdb_md, "<vaddr>",
+	  "Display Memory Symbolically", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5234: FILE: kernel/debug/kdb/kdb_main.c:2760:
+	kdb_register_repeat("mm", kdb_mm, "<vaddr> <contents>",
+	  "Modify Memory Contents", 0, KDB_REPEAT_NO_ARGS);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5236: FILE: kernel/debug/kdb/kdb_main.c:2762:
+	kdb_register_repeat("go", kdb_go, "[<vaddr>]",
+	  "Continue Execution", 1, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5238: FILE: kernel/debug/kdb/kdb_main.c:2764:
+	kdb_register_repeat("rd", kdb_rd, "",
+	  "Display Registers", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5240: FILE: kernel/debug/kdb/kdb_main.c:2766:
+	kdb_register_repeat("rm", kdb_rm, "<reg> <contents>",
+	  "Modify Registers", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5242: FILE: kernel/debug/kdb/kdb_main.c:2768:
+	kdb_register_repeat("ef", kdb_ef, "<vaddr>",
+	  "Display exception frame", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5244: FILE: kernel/debug/kdb/kdb_main.c:2770:
+	kdb_register_repeat("bt", kdb_bt, "[<vaddr>]",
+	  "Stack traceback", 1, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5246: FILE: kernel/debug/kdb/kdb_main.c:2772:
+	kdb_register_repeat("btp", kdb_bt, "<pid>",
+	  "Display stack for process <pid>", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5248: FILE: kernel/debug/kdb/kdb_main.c:2774:
+	kdb_register_repeat("bta", kdb_bt, "[DRSTCZEUIMA]",
+	  "Display stack all processes", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5250: FILE: kernel/debug/kdb/kdb_main.c:2776:
+	kdb_register_repeat("btc", kdb_bt, "",
+	  "Backtrace current process on each cpu", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5252: FILE: kernel/debug/kdb/kdb_main.c:2778:
+	kdb_register_repeat("btt", kdb_bt, "<vaddr>",
+	  "Backtrace process given its struct task address", 0,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5255: FILE: kernel/debug/kdb/kdb_main.c:2781:
+	kdb_register_repeat("ll", kdb_ll, "<first-element> <linkoffset> <cmd>",
+	  "Execute cmd for each element in linked list", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5257: FILE: kernel/debug/kdb/kdb_main.c:2783:
+	kdb_register_repeat("env", kdb_env, "",
+	  "Show environment variables", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5259: FILE: kernel/debug/kdb/kdb_main.c:2785:
+	kdb_register_repeat("set", kdb_set, "",
+	  "Set environment variables", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5261: FILE: kernel/debug/kdb/kdb_main.c:2787:
+	kdb_register_repeat("help", kdb_help, "",
+	  "Display Help Message", 1, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5263: FILE: kernel/debug/kdb/kdb_main.c:2789:
+	kdb_register_repeat("?", kdb_help, "",
+	  "Display Help Message", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5265: FILE: kernel/debug/kdb/kdb_main.c:2791:
+	kdb_register_repeat("cpu", kdb_cpu, "<cpunum>",
+	  "Switch to new cpu", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5267: FILE: kernel/debug/kdb/kdb_main.c:2793:
+	kdb_register_repeat("kgdb", kdb_kgdb, "",
+	  "Enter kgdb mode", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5269: FILE: kernel/debug/kdb/kdb_main.c:2795:
+	kdb_register_repeat("ps", kdb_ps, "[<flags>|A]",
+	  "Display active task list", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5271: FILE: kernel/debug/kdb/kdb_main.c:2797:
+	kdb_register_repeat("pid", kdb_pid, "<pidnum>",
+	  "Switch to another task", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5273: FILE: kernel/debug/kdb/kdb_main.c:2799:
+	kdb_register_repeat("reboot", kdb_reboot, "",
+	  "Reboot the machine immediately", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5276: FILE: kernel/debug/kdb/kdb_main.c:2802:
+	kdb_register_repeat("lsmod", kdb_lsmod, "",
+	  "List loaded kernel modules", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5280: FILE: kernel/debug/kdb/kdb_main.c:2806:
+	kdb_register_repeat("sr", kdb_sr, "<key>",
+	  "Magic SysRq key", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5283: FILE: kernel/debug/kdb/kdb_main.c:2809:
+	kdb_register_repeat("dmesg", kdb_dmesg, "[lines]",
+	  "Display syslog buffer", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5285: FILE: kernel/debug/kdb/kdb_main.c:2811:
+	kdb_register_repeat("defcmd", kdb_defcmd, "name \"usage\" \"help\"",
+	  "Define a set of commands, down to endefcmd", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5287: FILE: kernel/debug/kdb/kdb_main.c:2813:
+	kdb_register_repeat("kill", kdb_kill, "<-signal> <pid>",
+	  "Send a signal to a process", 0, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5289: FILE: kernel/debug/kdb/kdb_main.c:2815:
+	kdb_register_repeat("summary", kdb_summary, "",
+	  "Summarize the system", 4, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5291: FILE: kernel/debug/kdb/kdb_main.c:2817:
+	kdb_register_repeat("per_cpu", kdb_per_cpu, "",
+	  "Display per_cpu variables", 3, KDB_REPEAT_NONE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5293: FILE: kernel/debug/kdb/kdb_main.c:2819:
+	kdb_register_repeat("grephelp", kdb_grep_help, "",
+	  "Display help on | grep", 0, KDB_REPEAT_NONE);

WARNING:LINE_SPACING: Missing a blank line after declarations
#5300: FILE: kernel/debug/kdb/kdb_main.c:2826:
+	int i, diag;
+	for (i = 0; kdb_cmds[i]; ++i) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5304: FILE: kernel/debug/kdb/kdb_main.c:2830:
+			kdb_printf("kdb command %s failed, kdb diag %d\n",
+				kdb_cmds[i], diag);

WARNING:TYPO_SPELLING: 'Intialize' may be misspelled - perhaps 'Initialize'?
#5312: FILE: kernel/debug/kdb/kdb_main.c:2838:
+/* Intialize kdb_printf, breakpoint tables and kdb state */
    ^^^^^^^^^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5326: FILE: kernel/debug/kdb/kdb_private.h:1:
+#ifndef _KDBPRIVATE_H

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#5392: FILE: kernel/debug/kdb/kdb_private.h:67:
+#define KDB_DEBUG_STATE(text, value) if (KDB_DEBUG(STATE)) \
+		kdb_print_state(text, value)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:TYPO_SPELLING: 'architecure' may be misspelled - perhaps 'architecture'?
#5425: FILE: kernel/debug/kdb/kdb_private.h:100:
+ * supported by this architecure.
                      ^^^^^^^^^^^

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5439: FILE: kernel/debug/kdb/kdb_private.h:114:
+typedef struct _kdbhard_bp {

CHECK:LINE_SPACING: Please don't use multiple blank lines
#5451: FILE: kernel/debug/kdb/kdb_private.h:126:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5454: FILE: kernel/debug/kdb/kdb_private.h:129:
+typedef enum {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5466: FILE: kernel/debug/kdb/kdb_private.h:141:
+typedef struct __ksymtab {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5469: FILE: kernel/debug/kdb/kdb_private.h:144:
+					 * "kernel" */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5476: FILE: kernel/debug/kdb/kdb_private.h:151:
+					 * any version */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5480: FILE: kernel/debug/kdb/kdb_private.h:155:
+extern int kallsyms_symbol_next(char *prefix_name, int flag);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5481: FILE: kernel/debug/kdb/kdb_private.h:156:
+extern int kallsyms_symbol_complete(char *prefix_name, int max_len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_func_t' should also have an identifier name
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#5486: FILE: kernel/debug/kdb/kdb_private.h:161:
+extern int kdb_register(char *, kdb_func_t, char *, char *, short);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_func_t' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'short' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_repeat_t' should also have an identifier name
#5487: FILE: kernel/debug/kdb/kdb_private.h:162:
+extern int kdb_register_repeat(char *, kdb_func_t, char *, char *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5489: FILE: kernel/debug/kdb/kdb_private.h:164:
+extern int kdb_unregister(char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5489: FILE: kernel/debug/kdb/kdb_private.h:164:
+extern int kdb_unregister(char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5491: FILE: kernel/debug/kdb/kdb_private.h:166:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#5491: FILE: kernel/debug/kdb/kdb_private.h:166:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5491: FILE: kernel/debug/kdb/kdb_private.h:166:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#5491: FILE: kernel/debug/kdb/kdb_private.h:166:
+extern int kdb_getarea_size(void *, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5492: FILE: kernel/debug/kdb/kdb_private.h:167:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5492: FILE: kernel/debug/kdb/kdb_private.h:167:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#5492: FILE: kernel/debug/kdb/kdb_private.h:167:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#5492: FILE: kernel/debug/kdb/kdb_private.h:167:
+extern int kdb_putarea_size(unsigned long, void *, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5500: FILE: kernel/debug/kdb/kdb_private.h:175:
+extern int kdb_getphysword(unsigned long *word,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5501: FILE: kernel/debug/kdb/kdb_private.h:176:
+extern int kdb_getphysword(unsigned long *word,
+			unsigned long addr, size_t size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5502: FILE: kernel/debug/kdb/kdb_private.h:177:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#5502: FILE: kernel/debug/kdb/kdb_private.h:177:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5502: FILE: kernel/debug/kdb/kdb_private.h:177:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#5502: FILE: kernel/debug/kdb/kdb_private.h:177:
+extern int kdb_getword(unsigned long *, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5503: FILE: kernel/debug/kdb/kdb_private.h:178:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5503: FILE: kernel/debug/kdb/kdb_private.h:178:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5503: FILE: kernel/debug/kdb/kdb_private.h:178:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#5503: FILE: kernel/debug/kdb/kdb_private.h:178:
+extern int kdb_putword(unsigned long, unsigned long, size_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5505: FILE: kernel/debug/kdb/kdb_private.h:180:
+extern int kdbgetularg(const char *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5505: FILE: kernel/debug/kdb/kdb_private.h:180:
+extern int kdbgetularg(const char *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#5505: FILE: kernel/debug/kdb/kdb_private.h:180:
+extern int kdbgetularg(const char *, unsigned long *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5506: FILE: kernel/debug/kdb/kdb_private.h:181:
+extern char *kdbgetenv(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5506: FILE: kernel/debug/kdb/kdb_private.h:181:
+extern char *kdbgetenv(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5507: FILE: kernel/debug/kdb/kdb_private.h:182:
+extern int kdbgetintenv(const char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5507: FILE: kernel/debug/kdb/kdb_private.h:182:
+extern int kdbgetintenv(const char *, int *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int *' should also have an identifier name
#5507: FILE: kernel/debug/kdb/kdb_private.h:182:
+extern int kdbgetintenv(const char *, int *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char**' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int*' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'long *' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char **' should also have an identifier name
#5508: FILE: kernel/debug/kdb/kdb_private.h:183:
+extern int kdbgetaddrarg(int, const char**, int*, unsigned long *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5510: FILE: kernel/debug/kdb/kdb_private.h:185:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5510: FILE: kernel/debug/kdb/kdb_private.h:185:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_symtab_t *' should also have an identifier name
#5510: FILE: kernel/debug/kdb/kdb_private.h:185:
+extern int kdbgetsymval(const char *, kdb_symtab_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5511: FILE: kernel/debug/kdb/kdb_private.h:186:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5511: FILE: kernel/debug/kdb/kdb_private.h:186:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_symtab_t *' should also have an identifier name
#5511: FILE: kernel/debug/kdb/kdb_private.h:186:
+extern int kdbnearsym(unsigned long, kdb_symtab_t *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5512: FILE: kernel/debug/kdb/kdb_private.h:187:
+extern void kdbnearsym_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5513: FILE: kernel/debug/kdb/kdb_private.h:188:
+extern char *kdb_read(char *buffer, size_t bufsize);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5514: FILE: kernel/debug/kdb/kdb_private.h:189:
+extern char *kdb_strdup(const char *str, gfp_t type);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5515: FILE: kernel/debug/kdb/kdb_private.h:190:
+extern void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5515: FILE: kernel/debug/kdb/kdb_private.h:190:
+extern void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const kdb_symtab_t *' should also have an identifier name
#5515: FILE: kernel/debug/kdb/kdb_private.h:190:
+extern void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#5515: FILE: kernel/debug/kdb/kdb_private.h:190:
+extern void kdb_symbol_print(unsigned long, const kdb_symtab_t *, unsigned int);

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'regs' may be better as '(regs)' to avoid precedence issues
#5521: FILE: kernel/debug/kdb/kdb_private.h:196:
+#define KDB_NULL_REGS(regs) \
+	(regs == (struct pt_regs *)NULL ? \
+	 kdb_printf("%s: null regs - should never happen\n", __func__), \
+	 1 : 0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5530: FILE: kernel/debug/kdb/kdb_private.h:205:
+extern void kdb_print_state(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5530: FILE: kernel/debug/kdb/kdb_private.h:205:
+extern void kdb_print_state(const char *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5530: FILE: kernel/debug/kdb/kdb_private.h:205:
+extern void kdb_print_state(const char *, int);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5541: FILE: kernel/debug/kdb/kdb_private.h:216:
+						 * kdb control */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5545: FILE: kernel/debug/kdb/kdb_private.h:220:
+						 * DOING_SS is also set */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5548: FILE: kernel/debug/kdb/kdb_private.h:223:
+						 * DOING_SS */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5553: FILE: kernel/debug/kdb/kdb_private.h:228:
+						 * back to initial cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5558: FILE: kernel/debug/kdb/kdb_private.h:233:
+						 * adjusted */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5561: FILE: kernel/debug/kdb/kdb_private.h:236:
+						 * keyboard on this cpu */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5567: FILE: kernel/debug/kdb/kdb_private.h:242:
+						 * specific use */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5594: FILE: kernel/debug/kdb/kdb_private.h:269:
+typedef struct _kdb_bp {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5610: FILE: kernel/debug/kdb/kdb_private.h:285:
+					 * instruction */

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5623: FILE: kernel/debug/kdb/kdb_private.h:298:
+typedef struct _kdbtab {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5630: FILE: kernel/debug/kdb/kdb_private.h:305:
+					 * chars required */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5637: FILE: kernel/debug/kdb/kdb_private.h:312:
+extern int kdb_bt(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5637: FILE: kernel/debug/kdb/kdb_private.h:312:
+extern int kdb_bt(int, const char **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char **' should also have an identifier name
#5637: FILE: kernel/debug/kdb/kdb_private.h:312:
+extern int kdb_bt(int, const char **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5642: FILE: kernel/debug/kdb/kdb_private.h:317:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5642: FILE: kernel/debug/kdb/kdb_private.h:317:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t' should also have an identifier name
#5642: FILE: kernel/debug/kdb/kdb_private.h:317:
+extern char *kdb_getstr(char *, size_t, char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'char *' should also have an identifier name
#5642: FILE: kernel/debug/kdb/kdb_private.h:317:
+extern char *kdb_getstr(char *, size_t, char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5647: FILE: kernel/debug/kdb/kdb_private.h:322:
+extern void kdb_initbptab(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5648: FILE: kernel/debug/kdb/kdb_private.h:323:
+extern void kdb_bp_install(struct pt_regs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#5648: FILE: kernel/debug/kdb/kdb_private.h:323:
+extern void kdb_bp_install(struct pt_regs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5649: FILE: kernel/debug/kdb/kdb_private.h:324:
+extern void kdb_bp_remove(void);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#5651: FILE: kernel/debug/kdb/kdb_private.h:326:
+typedef enum {

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_dbtrap_t' should also have an identifier name
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#5659: FILE: kernel/debug/kdb/kdb_private.h:334:
+extern int kdb_main_loop(kdb_reason_t, kdb_reason_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5670: FILE: kernel/debug/kdb/kdb_private.h:345:
+extern void kdb_syslog_data(char *syslog_data[]);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5671: FILE: kernel/debug/kdb/kdb_private.h:346:
+extern unsigned long kdb_task_state_string(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#5671: FILE: kernel/debug/kdb/kdb_private.h:346:
+extern unsigned long kdb_task_state_string(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5672: FILE: kernel/debug/kdb/kdb_private.h:347:
+extern char kdb_task_state_char (const struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct task_struct *' should also have an identifier name
#5672: FILE: kernel/debug/kdb/kdb_private.h:347:
+extern char kdb_task_state_char (const struct task_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5673: FILE: kernel/debug/kdb/kdb_private.h:348:
+extern unsigned long kdb_task_state(const struct task_struct *p,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5675: FILE: kernel/debug/kdb/kdb_private.h:350:
+extern void kdb_ps_suppressed(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5676: FILE: kernel/debug/kdb/kdb_private.h:351:
+extern void kdb_ps1(const struct task_struct *p);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5677: FILE: kernel/debug/kdb/kdb_private.h:352:
+extern int kdb_parse(const char *cmdstr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5678: FILE: kernel/debug/kdb/kdb_private.h:353:
+extern void kdb_print_nameval(const char *name, unsigned long val);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5679: FILE: kernel/debug/kdb/kdb_private.h:354:
+extern void kdb_send_sig_info(struct task_struct *p,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5681: FILE: kernel/debug/kdb/kdb_private.h:356:
+extern void kdb_meminfo_proc_show(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5682: FILE: kernel/debug/kdb/kdb_private.h:357:
+extern const char *kdb_walk_kallsyms(loff_t *pos);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#5693: FILE: kernel/debug/kdb/kdb_private.h:368:
+#define KDB_SP_DEFAULT (KDB_SP_VALUE|KDB_SP_PAREN)
                                     ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5707: FILE: kernel/debug/kdb/kdb_private.h:382:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#5707: FILE: kernel/debug/kdb/kdb_private.h:382:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#5707: FILE: kernel/debug/kdb/kdb_private.h:382:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5707: FILE: kernel/debug/kdb/kdb_private.h:382:
+extern void kdb_save_running_cpu(struct pt_regs *, struct task_struct *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pt_regs *' should also have an identifier name
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_reason_t' should also have an identifier name
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kdb_dbtrap_t' should also have an identifier name
#5708: FILE: kernel/debug/kdb/kdb_private.h:383:
+extern int kdb_save_running(struct pt_regs *, kdb_reason_t,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5710: FILE: kernel/debug/kdb/kdb_private.h:385:
+extern struct task_struct *kdb_curr_task(int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#5710: FILE: kernel/debug/kdb/kdb_private.h:385:
+extern struct task_struct *kdb_curr_task(int);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5712: FILE: kernel/debug/kdb/kdb_private.h:387:
+/* ^IIncremented each time the main kdb loop is entered on the initial cpu,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5713: FILE: kernel/debug/kdb/kdb_private.h:388:
+ * ^Iit gives some indication of how old the saved data is.$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5718: FILE: kernel/debug/kdb/kdb_private.h:393:
+extern void kdb_runqueue(unsigned long cpu, kdb_printf_t xxx_printf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5726: FILE: kernel/debug/kdb/kdb_private.h:401:
+extern void *debug_kmalloc(size_t size, gfp_t flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5727: FILE: kernel/debug/kdb/kdb_private.h:402:
+extern void debug_kfree(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#5727: FILE: kernel/debug/kdb/kdb_private.h:402:
+extern void debug_kfree(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5728: FILE: kernel/debug/kdb/kdb_private.h:403:
+extern void debug_kusage(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5730: FILE: kernel/debug/kdb/kdb_private.h:405:
+extern void kdb_set_current_task(struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#5730: FILE: kernel/debug/kdb/kdb_private.h:405:
+extern void kdb_set_current_task(struct task_struct *);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5753: FILE: kernel/debug/kdb/kdb_support.c:1:
+/*

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#5794: FILE: kernel/debug/kdb/kdb_support.c:42:
+		kdb_printf("kdbgetsymval: symname=%s, symtab=%p\n", symname,

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#5800: FILE: kernel/debug/kdb/kdb_support.c:48:
+			kdb_printf("kdbgetsymval: returns 1, "

WARNING:SPLIT_STRING: quoted string split across lines
#5801: FILE: kernel/debug/kdb/kdb_support.c:49:
+			kdb_printf("kdbgetsymval: returns 1, "
+				   "symtab->sym_start=0x%lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbgetsymval', this function's name, in a string
#5806: FILE: kernel/debug/kdb/kdb_support.c:54:
+		kdb_printf("kdbgetsymval: returns 0\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#5842: FILE: kernel/debug/kdb/kdb_support.c:90:
+		kdb_printf("kdbnearsym: addr=0x%lx, symtab=%p\n", addr, symtab);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#5849: FILE: kernel/debug/kdb/kdb_support.c:97:
+		kdb_printf("kdbnearsym: addr=0x%lx cannot kmalloc knt1\n",

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#5853: FILE: kernel/debug/kdb/kdb_support.c:101:
+	symtab->sym_name = kallsyms_lookup(addr, &symbolsize , &offset,
 	                                                     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5854: FILE: kernel/debug/kdb/kdb_support.c:102:
+	symtab->sym_name = kallsyms_lookup(addr, &symbolsize , &offset,
+				(char **)(&symtab->mod_name), knt1);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5855: FILE: kernel/debug/kdb/kdb_support.c:103:
+	if (offset > 8*1024*1024) {
 	              ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5855: FILE: kernel/debug/kdb/kdb_support.c:103:
+	if (offset > 8*1024*1024) {
 	                   ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#5857: FILE: kernel/debug/kdb/kdb_support.c:105:
+		addr = offset = symbolsize = 0;

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around symtab->sym_name
#5861: FILE: kernel/debug/kdb/kdb_support.c:109:
+	ret = symtab->sym_name != NULL && *(symtab->sym_name) != '\0';

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "symtab->sym_name"
#5861: FILE: kernel/debug/kdb/kdb_support.c:109:
+	ret = symtab->sym_name != NULL && *(symtab->sym_name) != '\0';

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5874: FILE: kernel/debug/kdb/kdb_support.c:122:
+			knt1[knt1_size-1] = '\0';
 			              ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5883: FILE: kernel/debug/kdb/kdb_support.c:131:
+			memcpy(kdb_name_table, kdb_name_table+1,
 			                                     ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5885: FILE: kernel/debug/kdb/kdb_support.c:133:
+			       (ARRAY_SIZE(kdb_name_table)-1));
 			                                  ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5889: FILE: kernel/debug/kdb/kdb_support.c:137:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5889: FILE: kernel/debug/kdb/kdb_support.c:137:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5889: FILE: kernel/debug/kdb/kdb_support.c:137:
+			memcpy(kdb_name_table+i, kdb_name_table+i+1,
 			                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5891: FILE: kernel/debug/kdb/kdb_support.c:139:
+			       (ARRAY_SIZE(kdb_name_table)-i-1));
 			                                  ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5891: FILE: kernel/debug/kdb/kdb_support.c:139:
+			       (ARRAY_SIZE(kdb_name_table)-i-1));
 			                                    ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!symtab->mod_name"
#5899: FILE: kernel/debug/kdb/kdb_support.c:147:
+	if (symtab->mod_name == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdbnearsym', this function's name, in a string
#5902: FILE: kernel/debug/kdb/kdb_support.c:150:
+		kdb_printf("kdbnearsym: returns %d symtab->sym_start=0x%lx, "

WARNING:SPLIT_STRING: quoted string split across lines
#5903: FILE: kernel/debug/kdb/kdb_support.c:151:
+		kdb_printf("kdbnearsym: returns %d symtab->sym_start=0x%lx, "
+		   "symtab->mod_name=%p, symtab->sym_name=%p (%s)\n", ret,

WARNING:LINE_SPACING: Missing a blank line after declarations
#5915: FILE: kernel/debug/kdb/kdb_support.c:163:
+	int i;
+	for (i = 0; i < ARRAY_SIZE(kdb_name_table); ++i) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5923: FILE: kernel/debug/kdb/kdb_support.c:171:
+static char ks_namebuf[KSYM_NAME_LEN+1], ks_namebuf_prev[KSYM_NAME_LEN+1];
                                     ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5923: FILE: kernel/debug/kdb/kdb_support.c:171:
+static char ks_namebuf[KSYM_NAME_LEN+1], ks_namebuf_prev[KSYM_NAME_LEN+1];
                                                                       ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#5949: FILE: kernel/debug/kdb/kdb_support.c:197:
+				prev_len = min_t(int, max_len-1,
 				                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5965: FILE: kernel/debug/kdb/kdb_support.c:213:
+		memcpy(prefix_name, ks_namebuf_prev, prev_len+1);
 		                                             ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#5990: FILE: kernel/debug/kdb/kdb_support.c:238:
+			strncpy(prefix_name, name, strlen(name)+1);
 			                                       ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6013: FILE: kernel/debug/kdb/kdb_support.c:261:
+	kdb_symtab_t symtab, *symtab_p2;
+	if (symtab_p) {

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#6060: FILE: kernel/debug/kdb/kdb_support.c:308:
+	int n = strlen(str)+1;
 	                   ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6062: FILE: kernel/debug/kdb/kdb_support.c:310:
+	char *s = kmalloc(n, type);
+	if (!s)

WARNING:LINE_SPACING: Missing a blank line after declarations
#6080: FILE: kernel/debug/kdb/kdb_support.c:328:
+	int ret = probe_kernel_read((char *)res, (char *)addr, size);
+	if (ret) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#6105: FILE: kernel/debug/kdb/kdb_support.c:353:
+	int ret = probe_kernel_read((char *)addr, (char *)res, size);
+	if (ret) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6119: FILE: kernel/debug/kdb/kdb_support.c:367:
+ * ^Iaddress is in range, use kmap_atomic() to get data$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6120: FILE: kernel/debug/kdb/kdb_support.c:368:
+ * ^Isimilar to kdb_getarea() - but for phys addresses$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6122: FILE: kernel/debug/kdb/kdb_support.c:370:
+ * ^Ires^IPointer to the word to receive the result$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6123: FILE: kernel/debug/kdb/kdb_support.c:371:
+ * ^Iaddr^IPhysical address of the area to copy$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#6124: FILE: kernel/debug/kdb/kdb_support.c:372:
+ * ^Isize^ISize of the area$

CHECK:SPACING: No space is necessary after a cast
#6189: FILE: kernel/debug/kdb/kdb_support.c:437:
+		kdb_printf("kdb_getphysword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_getphysword', this function's name, in a string
#6189: FILE: kernel/debug/kdb/kdb_support.c:437:
+		kdb_printf("kdb_getphysword: bad width %ld\n", (long) size);

CHECK:SPACING: No space is necessary after a cast
#6238: FILE: kernel/debug/kdb/kdb_support.c:486:
+		kdb_printf("kdb_getword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_getword', this function's name, in a string
#6238: FILE: kernel/debug/kdb/kdb_support.c:486:
+		kdb_printf("kdb_getword: bad width %ld\n", (long) size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6260: FILE: kernel/debug/kdb/kdb_support.c:508:
+	__u64 w8;
+	switch (size) {

CHECK:SPACING: No space is necessary after a cast
#6282: FILE: kernel/debug/kdb/kdb_support.c:530:
+		kdb_printf("kdb_putword: bad width %ld\n", (long) size);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'kdb_putword', this function's name, in a string
#6282: FILE: kernel/debug/kdb/kdb_support.c:530:
+		kdb_printf("kdb_putword: bad width %ld\n", (long) size);

WARNING:TYPO_SPELLING: 'carefull' may be misspelled - perhaps 'careful'?
#6299: FILE: kernel/debug/kdb/kdb_support.c:547:
+ *	be carefull not to overlap the bits.  TASK_* bits are in the LSB,
   	   ^^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6307: FILE: kernel/debug/kdb/kdb_support.c:555:
+#define UNRUNNABLE	(1UL << (8*sizeof(unsigned long) - 1))
                   	          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6308: FILE: kernel/debug/kdb/kdb_support.c:556:
+#define RUNNING		(1UL << (8*sizeof(unsigned long) - 2))
                		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6309: FILE: kernel/debug/kdb/kdb_support.c:557:
+#define IDLE		(1UL << (8*sizeof(unsigned long) - 3))
             		          ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6310: FILE: kernel/debug/kdb/kdb_support.c:558:
+#define DAEMON		(1UL << (8*sizeof(unsigned long) - 4))
               		          ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6315: FILE: kernel/debug/kdb/kdb_support.c:563:
+	long res = 0;
+	if (!s) {

WARNING:TABSTOP: Statements should start on a tabstop
#6358: FILE: kernel/debug/kdb/kdb_support.c:606:
+			  break;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6386: FILE: kernel/debug/kdb/kdb_support.c:634:
+		 * interrupt? */

WARNING:LINE_SPACING: Missing a blank line after declarations
#6416: FILE: kernel/debug/kdb/kdb_support.c:664:
+	char state[] = { kdb_task_state_char(p), '\0' };
+	return (mask & kdb_task_state_string(state)) != 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#6428: FILE: kernel/debug/kdb/kdb_support.c:676:
+	struct kdb_running_process *krp = kdb_running_process + cpu;
+	krp->p = task;

WARNING:LINE_SPACING: Missing a blank line after declarations
#6444: FILE: kernel/debug/kdb/kdb_support.c:692:
+	kdb_symtab_t symtab;
+	kdb_printf("  %-11.11s ", name);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#6447: FILE: kernel/debug/kdb/kdb_support.c:695:
+				 KDB_SP_VALUE|KDB_SP_SYMSIZE|KDB_SP_NEWLINE);
 				             ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#6447: FILE: kernel/debug/kdb/kdb_support.c:695:
+				 KDB_SP_VALUE|KDB_SP_SYMSIZE|KDB_SP_NEWLINE);
 				                            ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#6475: FILE: kernel/debug/kdb/kdb_support.c:723:
+static u64 debug_alloc_pool_aligned[256*1024/dah_align];	/* 256K pool */
                                        ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#6475: FILE: kernel/debug/kdb/kdb_support.c:723:
+static u64 debug_alloc_pool_aligned[256*1024/dah_align];	/* 256K pool */
                                             ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#6494: FILE: kernel/debug/kdb/kdb_support.c:742:
+	int count;
+	if (dap_locked == smp_processor_id())

CHECK:USLEEP_RANGE: usleep_range is preferred over udelay; see Documentation/timers/timers-howto.rst
#6505: FILE: kernel/debug/kdb/kdb_support.c:753:
+		udelay(1000);

usleep_range() should be preferred over udelay(). The proper way of
using usleep_range() is mentioned in the kernel docs.

See: https://www.kernel.org/doc/html/latest/timers/timers-howto.html#delays-information-on-the-various-kernel-delay-sleep-mechanisms

WARNING:LINE_SPACING: Missing a blank line after declarations
#6517: FILE: kernel/debug/kdb/kdb_support.c:765:
+	void *p = NULL;
+	if (!get_dap_lock()) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6527: FILE: kernel/debug/kdb/kdb_support.c:775:
+	prev = best = bestprev = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bestprev"
#6544: FILE: kernel/debug/kdb/kdb_support.c:792:
+	if (best->next == 0 && bestprev == NULL && rem < dah_overhead)

CHECK:BRACES: braces {} should be used on all arms of this statement
#6546: FILE: kernel/debug/kdb/kdb_support.c:794:
+	if (rem >= dah_overhead) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#6553: FILE: kernel/debug/kdb/kdb_support.c:801:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#6574: FILE: kernel/debug/kdb/kdb_support.c:822:
+	unsigned int h_offset;
+	if (!p)

WARNING:LINE_SPACING: Missing a blank line after declarations
#6597: FILE: kernel/debug/kdb/kdb_support.c:845:
+		unsigned int prev_offset;
+		prev = (struct debug_alloc_header *)(debug_alloc_pool +

WARNING:LINE_SPACING: Missing a blank line after declarations
#6619: FILE: kernel/debug/kdb/kdb_support.c:867:
+		struct debug_alloc_header *next;
+		next = (struct debug_alloc_header *)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6686: FILE: kernel/debug/kdb/kdb_support.c:934:
+	BUG_ON(kdb_flags_index >= ARRAY_SIZE(kdb_flags_stack));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6692: FILE: kernel/debug/kdb/kdb_support.c:940:
+	BUG_ON(kdb_flags_index <= 0);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6715: FILE: kernel/kallsyms.c:523:
+	static struct kallsym_iter kdb_walk_kallsyms_iter;
+	if (*pos == 0) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6839: FILE: kernel/sched.c:10920:
+kdb_prio(char *name, struct rt_prio_array *array, kdb_printf_t xxx_printf,
+	unsigned int cpu)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6845: FILE: kernel/sched.c:10926:
+	xxx_printf("  %s rt bitmap: 0x%lx 0x%lx 0x%lx\n",
+		name,

WARNING:LINE_SPACING: Missing a blank line after declarations
#6867: FILE: kernel/sched.c:10948:
+			struct task_struct *task;
+			if (!printed_hdr) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6875: FILE: kernel/sched.c:10956:
+				xxx_printf("    0x%p %d %s  time_slice:%d\n",
+				   task, task->pid, task->comm,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->policy == SCHED_NORMAL'
#6881: FILE: kernel/sched.c:10962:
+		if (p->se.on_rq && (task_cpu(p) == cpu) &&
+		   (p->policy == SCHED_NORMAL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6882: FILE: kernel/sched.c:10963:
+		if (p->se.on_rq && (task_cpu(p) == cpu) &&
+		   (p->policy == SCHED_NORMAL)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6888: FILE: kernel/sched.c:10969:
+			xxx_printf("    0x%p %d %s pri:%d spri:%d npri:%d\n",
+				p, p->pid, p->comm, p->prio,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#6915: FILE: kernel/sched.c:10996:
+	xxx_printf(" cpu_load:%lu %lu %lu",
+			rq->cpu_load[0], rq->cpu_load[1], rq->cpu_load[2]);

WARNING:LINE_SPACING: Missing a blank line after declarations
#6951: FILE: kernel/signal.c:2735:
+	int sig, new_t;
+	if (!spin_trylock(&t->sighand->siglock)) {

WARNING:SPLIT_STRING: quoted string split across lines
#6954: FILE: kernel/signal.c:2738:
+			   "The sigmask lock is held somewhere else in "
+			   "kernel, try again later\n");

WARNING:SPLIT_STRING: quoted string split across lines
#6963: FILE: kernel/signal.c:2747:
+		kdb_printf("Process is not RUNNING, sending a signal from "
+			   "kdb risks deadlock\n"

WARNING:SPLIT_STRING: quoted string split across lines
#6965: FILE: kernel/signal.c:2749:
+			   "on the run queue locks. "
+			   "The signal has _not_ been sent.\n"

WARNING:SPLIT_STRING: quoted string split across lines
#6967: FILE: kernel/signal.c:2751:
+			   "Reissue the kill command if you want to risk "
+			   "the deadlock.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#6999: FILE: mm/hugetlb.c:1939:
+	struct hstate *h = &default_hstate;
+	kdb_printf("HugePages_Total: %5lu\n"

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 319 warnings, 318 checks, 6790 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000030545.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
