WARNING:TYPO_SPELLING: 'wierd' may be misspelled - perhaps 'weird'?
#49: 
due to wierd oob layout.
       ^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'EXPERMENTAL' may be misspelled - perhaps 'EXPERIMENTAL'?
#75: FILE: drivers/mtd/Kconfig:322:
+	  This enables new and very EXPERMENTAL support for SmartMedia/xD
 	                            ^^^^^^^^^^^

WARNING:TYPO_SPELLING: 'tanslation' may be misspelled - perhaps 'translation'?
#76: FILE: drivers/mtd/Kconfig:323:
+	  FTL (Flash tanslation layer)
 	             ^^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#97: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#102: FILE: drivers/mtd/sm_ftl.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#124: FILE: drivers/mtd/sm_ftl.c:23:
+module_param(cache_size, int, S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: drivers/mtd/sm_ftl.c:25:
+MODULE_PARM_DESC(cache_size,
+		"Number of blocks to hold in the cache (5 default)");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#128: FILE: drivers/mtd/sm_ftl.c:27:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#131: FILE: drivers/mtd/sm_ftl.c:30:
+static void sm_erase_block(struct sm_ftl *ftl, int zone_num, s16 block,
+								int put_free);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#135: FILE: drivers/mtd/sm_ftl.c:34:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#153: FILE: drivers/mtd/sm_ftl.c:52:
+ * This ideally has to be based on nand id, but for now device size is enough */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#158: FILE: drivers/mtd/sm_ftl.c:57:
+	int size_in_megs = mtd->size / (1024 * 1024);
+	ftl->readonly = mtd->type == MTD_ROM;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#201: FILE: drivers/mtd/sm_ftl.c:100:
+	/* Minimum xD size is 16M, and thus all xD cards have standard zone
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#201: FILE: drivers/mtd/sm_ftl.c:100:
+	   sizes. SmartMedia cards exist up to 128 Mb and have same layout*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#259: FILE: drivers/mtd/sm_ftl.c:158:
+static void sm_break_offset(struct sm_ftl *ftl, loff_t offset,
+					int *zone, int *block, int *boffset)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sm_break_offset', this function's name, in a string
#267: FILE: drivers/mtd/sm_ftl.c:166:
+		dbg("sm_break_offset: try to access a zone %lx",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#268: FILE: drivers/mtd/sm_ftl.c:167:
+		dbg("sm_break_offset: try to access a zone %lx",
+						(long unsigned int)offset);

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#268: FILE: drivers/mtd/sm_ftl.c:167:
+						(long unsigned int)offset);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#268: FILE: drivers/mtd/sm_ftl.c:167:
+						(long unsigned int)offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#275: FILE: drivers/mtd/sm_ftl.c:174:
+static int sm_read_sector(struct sm_ftl *ftl,
+		int zone, int block, int boffset,

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#297: FILE: drivers/mtd/sm_ftl.c:196:
+	if (block == -1) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#310: FILE: drivers/mtd/sm_ftl.c:209:
+		dbg("read of sector at 0x%lx failed with error %d",
+					(long unsigned int)offset, ret);

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#310: FILE: drivers/mtd/sm_ftl.c:209:
+					(long unsigned int)offset, ret);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#310: FILE: drivers/mtd/sm_ftl.c:209:
+					(long unsigned int)offset, ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#315: FILE: drivers/mtd/sm_ftl.c:214:
+		dbg("read of sector at 0x%lx failed with wrong oob len %d",
+				(long unsigned int)offset, (int)ops.oobretlen);

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#315: FILE: drivers/mtd/sm_ftl.c:214:
+				(long unsigned int)offset, (int)ops.oobretlen);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#315: FILE: drivers/mtd/sm_ftl.c:214:
+				(long unsigned int)offset, (int)ops.oobretlen);

WARNING:SPLIT_STRING: quoted string split across lines
#321: FILE: drivers/mtd/sm_ftl.c:220:
+		dbg("read of sector at 0x%lxfailed because "
+			"it is marked as invalid",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#322: FILE: drivers/mtd/sm_ftl.c:221:
+						(long unsigned int)offset);

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#322: FILE: drivers/mtd/sm_ftl.c:221:
+						(long unsigned int)offset);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/mtd/sm_ftl.c:230:
+static int sm_write_block(struct sm_ftl *ftl, u8 *buf,
+					int zone_num, int block, int lba)

WARNING:LINE_SPACING: Missing a blank line after declarations
#340: FILE: drivers/mtd/sm_ftl.c:239:
+	struct sm_oob oob;
+	memset(&oob, 0xFF, sizeof(oob));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: drivers/mtd/sm_ftl.c:247:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#357: FILE: drivers/mtd/sm_ftl.c:256:
+	/* Use write_oob here because some xD cards only accept writes that
+		contain both page and oob write. These cards most likely

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#358: FILE: drivers/mtd/sm_ftl.c:257:
+		do their own ftl */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#365: FILE: drivers/mtd/sm_ftl.c:264:
+				boffset += SM_SECTOR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#374: FILE: drivers/mtd/sm_ftl.c:273:
+			dbg("write of block %d in zone %d failed, erasing it",
+							block, zone_num);

WARNING:SPLIT_STRING: quoted string split across lines
#382: FILE: drivers/mtd/sm_ftl.c:281:
+			dbg("write of block %d in zone %d failed again"
+				", marking as bad", block, zone_num);

WARNING:TYPO_SPELLING: 'succedes' may be misspelled - perhaps 'succeeds'?
#393: FILE: drivers/mtd/sm_ftl.c:292:
+ * If erase succedes, it updates free block fifo
             ^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#396: FILE: drivers/mtd/sm_ftl.c:295:
+static void sm_erase_block(struct sm_ftl *ftl, int zone_num, s16 block,
+								int put_free)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#415: FILE: drivers/mtd/sm_ftl.c:314:
+		dbg("erase of block %d in zone %d failed in mtd->erase call",
+			block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/mtd/sm_ftl.c:322:
+		dbg("erase of block %d in zone %d failed after wait",
+			block, zone_num);

WARNING:RETURN_VOID: void function return statements are not generally useful
#434: FILE: drivers/mtd/sm_ftl.c:333:
+	return;
+}

WARNING:LINE_SPACING: Missing a blank line after declarations
#439: FILE: drivers/mtd/sm_ftl.c:338:
+	struct sm_ftl *ftl = (struct sm_ftl *)self->priv;
+	ftl->erase_error = (self->state == MTD_ERASE_FAILED);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#443: FILE: drivers/mtd/sm_ftl.c:342:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#456: FILE: drivers/mtd/sm_ftl.c:355:
+					boffset += SM_SECTOR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#458: FILE: drivers/mtd/sm_ftl.c:357:
+		if (sm_read_sector(ftl, zone, block, boffset, tmp_buffer,
+								&oob)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#460: FILE: drivers/mtd/sm_ftl.c:359:
+			dbg("block check: fail in sector %d in zone %d",
+				block, zone);

WARNING:SPLIT_STRING: quoted string split across lines
#466: FILE: drivers/mtd/sm_ftl.c:365:
+			dbg("block check: block/sector status invalid"
+				" for sector %d in zone %d",

WARNING:SPLIT_STRING: quoted string split across lines
#475: FILE: drivers/mtd/sm_ftl.c:374:
+			dbg("block check: block offset %d, we get "
+				"different LBA (%d), should get %d",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#520: FILE: drivers/mtd/sm_ftl.c:419:
+	BUG_ON(zone_num >= ftl->zone_count);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#540: FILE: drivers/mtd/sm_ftl.c:439:
+	for (block = 0 ; block < ftl->zone_size ; block++) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#543: FILE: drivers/mtd/sm_ftl.c:442:
+		if (zone_num == 0 && block <= ftl->cis_block) {
+

WARNING:SPLIT_STRING: quoted string split across lines
#546: FILE: drivers/mtd/sm_ftl.c:445:
+				dbg("skipping block %d because"
+					" it is before the CIS (%d)",

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#552: FILE: drivers/mtd/sm_ftl.c:451:
+		 * even readable oob... - skip*/

WARNING:SPLIT_STRING: quoted string split across lines
#556: FILE: drivers/mtd/sm_ftl.c:455:
+			dbg("skipping block %d because it's "
+				"oob was unreadable", block);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#561: FILE: drivers/mtd/sm_ftl.c:460:
+		/* Blocks with 0xFFs in the oob area are assumed free -
+			add to free table*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#561: FILE: drivers/mtd/sm_ftl.c:460:
+			add to free table*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#565: FILE: drivers/mtd/sm_ftl.c:464:
+			kfifo_in(&zone->free_sectors,
+				(unsigned char *)&block, 2);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#571: FILE: drivers/mtd/sm_ftl.c:470:
+		/* If such block has correct LBA and no other block has it,
+			return errors on read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#571: FILE: drivers/mtd/sm_ftl.c:470:
+			return errors on read */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#576: FILE: drivers/mtd/sm_ftl.c:475:
+			dbg("skipping block %d because it was marked bad",
+									block);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#581: FILE: drivers/mtd/sm_ftl.c:480:
+		/* Try to erase blocks that have invalid LBA,
+			but marked as valid */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#581: FILE: drivers/mtd/sm_ftl.c:480:
+			but marked as valid */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#584: FILE: drivers/mtd/sm_ftl.c:483:
+			dbg("erasing block %d because it has invalid LBA (%d)",
+				 block, lba);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#591: FILE: drivers/mtd/sm_ftl.c:490:
+		/* If there is no collision,
+			just put the sector in the FTL table */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#591: FILE: drivers/mtd/sm_ftl.c:490:
+			just put the sector in the FTL table */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#599: FILE: drivers/mtd/sm_ftl.c:498:
+		dbg("collision of LBA %d between blocks %d and %d in zone %d",
+			lba, zone->lba_to_phys_table[lba], block, zone_num);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: drivers/mtd/sm_ftl.c:505:
+		if (sm_check_block_lba(ftl, zone_num,
+				zone->lba_to_phys_table[lba], lba))

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#610: FILE: drivers/mtd/sm_ftl.c:509:
+		/* Now both blocks are valid and share same LBA...
+		   I guess only solution is to throw a dice.... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#610: FILE: drivers/mtd/sm_ftl.c:509:
+		   I guess only solution is to throw a dice.... */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#619: FILE: drivers/mtd/sm_ftl.c:518:
+	/* No free sectors, means that the zone is heavily damaged, write won't
+		work, but it can still can be (partially) read */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#619: FILE: drivers/mtd/sm_ftl.c:518:
+		work, but it can still can be (partially) read */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#631: FILE: drivers/mtd/sm_ftl.c:530:
+
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#649: FILE: drivers/mtd/sm_ftl.c:548:
+	BUG_ON(cache_entry->zone < 0);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#653: FILE: drivers/mtd/sm_ftl.c:552:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: drivers/mtd/sm_ftl.c:555:
+	for_each_bit(sector_num, &cache_entry->data_invalid_bitmap,
+		ftl->block_size / SM_SECTOR_SIZE) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#657: FILE: drivers/mtd/sm_ftl.c:556:
+		ftl->block_size / SM_SECTOR_SIZE) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#658: FILE: drivers/mtd/sm_ftl.c:557:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#660: FILE: drivers/mtd/sm_ftl.c:559:
+		if (sm_read_sector(ftl,
+			zone_num, block_num, sector_num * SM_SECTOR_SIZE,

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#667: FILE: drivers/mtd/sm_ftl.c:566:
+	/* We could still continue by erasing the current block,
+		but for such worn out media it doesn't worth the trouble,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#668: FILE: drivers/mtd/sm_ftl.c:567:
+			and the dangers */

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#677: FILE: drivers/mtd/sm_ftl.c:576:
+	if (sm_write_block(ftl, cache_entry->data, zone_num, write_sector,
[...]
+			goto restart;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#678: FILE: drivers/mtd/sm_ftl.c:577:
+	if (sm_write_block(ftl, cache_entry->data, zone_num, write_sector,
+							cache_entry->lba))

WARNING:TYPO_SPELLING: 'succesfull' may be misspelled - perhaps 'successful'?
#684: FILE: drivers/mtd/sm_ftl.c:583:
+	/* Write succesfull, so erase and free the old block */
 	         ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#692: FILE: drivers/mtd/sm_ftl.c:591:
+static int sm_cache_block_init(struct sm_ftl *ftl,
+				struct cached_block *cache_entry)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#720: FILE: drivers/mtd/sm_ftl.c:619:
+	list_for_each_entry_safe(cache_entry, tmp_entry, &ftl->cache,
+								list_member) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#724: FILE: drivers/mtd/sm_ftl.c:623:
+			dbg("sm_ftl: failed to write block %d at zone %d",
+				(int)cache_entry->lba, cache_entry->zone);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#739: FILE: drivers/mtd/sm_ftl.c:638:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#744: FILE: drivers/mtd/sm_ftl.c:643:
+	int retval;
+	mutex_lock(&ftl->cache_mutex);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: drivers/mtd/sm_ftl.c:657:
+		cache_entry = list_first_entry(&ftl->free_cache,
+				struct cached_block, list_member);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#767: FILE: drivers/mtd/sm_ftl.c:666:
+
+

WARNING:LINE_SPACING: Missing a blank line after declarations
#772: FILE: drivers/mtd/sm_ftl.c:671:
+	struct sm_ftl *ftl = dev->priv;
+	ftl->flush_thread = kthread_run(sm_cache_flush_thread,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#773: FILE: drivers/mtd/sm_ftl.c:672:
+	ftl->flush_thread = kthread_run(sm_cache_flush_thread,
+				ftl, "smflush%d", dev->mtd->index);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#782: FILE: drivers/mtd/sm_ftl.c:681:
+static int sm_read(struct mtd_blktrans_dev *dev,
+				unsigned long sect_no, char *buf)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/mtd/sm_ftl.c:702:
+		if (cache_entry->zone == zone_num &&
+			cache_entry->lba == block &&

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#807: FILE: drivers/mtd/sm_ftl.c:706:
+				&cache_entry->data_invalid_bitmap)) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#809: FILE: drivers/mtd/sm_ftl.c:708:
+			memcpy(buf, cache_entry->data + boffset,
+							SM_SECTOR_SIZE);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#813: FILE: drivers/mtd/sm_ftl.c:712:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: drivers/mtd/sm_ftl.c:723:
+		dbg("read block %d of zone %d marked invalid in the ftl",
+							block, zone_num);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#830: FILE: drivers/mtd/sm_ftl.c:729:
+	/* Do the read. The below relies on proper ftl setup and underlying
+	  driver to check at least the ecc

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#838: FILE: drivers/mtd/sm_ftl.c:737:
+	/* If we already have the cache entry, then add the data there, because
+		we will need it anyway..*/

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#838: FILE: drivers/mtd/sm_ftl.c:737:
+		we will need it anyway..*/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#842: FILE: drivers/mtd/sm_ftl.c:741:
+		clear_bit(boffset / SM_SECTOR_SIZE,
+				&cache_entry->data_invalid_bitmap);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#849: FILE: drivers/mtd/sm_ftl.c:748:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#852: FILE: drivers/mtd/sm_ftl.c:751:
+static int sm_write(struct mtd_blktrans_dev *dev,
+				unsigned long sec_no, char *buf)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#873: FILE: drivers/mtd/sm_ftl.c:772:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#877: FILE: drivers/mtd/sm_ftl.c:776:
+		if (cache_entry->zone == zone_num &&
+				cache_entry->lba == block) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#884: FILE: drivers/mtd/sm_ftl.c:783:
+	if (!cache_found) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#887: FILE: drivers/mtd/sm_ftl.c:786:
+		if (list_empty(&ftl->free_cache)) {
+

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#894: FILE: drivers/mtd/sm_ftl.c:793:
+		BUG_ON(list_empty(&ftl->free_cache));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#897: FILE: drivers/mtd/sm_ftl.c:796:
+		cache_entry = list_first_entry(&ftl->free_cache,
+			struct cached_block, list_member);

WARNING:LINE_SPACING: Missing a blank line after declarations
#918: FILE: drivers/mtd/sm_ftl.c:817:
+	struct sm_ftl *ftl = dev->priv;
+	return sm_cache_flush(ftl);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#922: FILE: drivers/mtd/sm_ftl.c:821:
+/* outside interface: last user has quit using the device,
+						also called on removal */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#922: FILE: drivers/mtd/sm_ftl.c:821:
+						also called on removal */

WARNING:LINE_SPACING: Missing a blank line after declarations
#926: FILE: drivers/mtd/sm_ftl.c:825:
+	struct sm_ftl *ftl = dev->priv;
+	sm_cache_flush(ftl);

WARNING:LINE_SPACING: Missing a blank line after declarations
#935: FILE: drivers/mtd/sm_ftl.c:834:
+	struct sm_ftl *ftl = dev->priv;
+	geo->heads = ftl->heads;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#941: FILE: drivers/mtd/sm_ftl.c:840:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#949: FILE: drivers/mtd/sm_ftl.c:848:
+	while (!kthread_should_stop()) {
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#970: FILE: drivers/mtd/sm_ftl.c:869:
+
+

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#987: FILE: drivers/mtd/sm_ftl.c:886:
+	/* Block might be still partially damaged, so scan for first valid
+		sector */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#987: FILE: drivers/mtd/sm_ftl.c:886:
+		sector */

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#990: FILE: drivers/mtd/sm_ftl.c:889:
+					boffset += SM_SECTOR_SIZE) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#998: FILE: drivers/mtd/sm_ftl.c:897:
+		if (!memcmp(tmp_buffer + SM_SECTOR_SIZE / 2, cis_signature,
+							sizeof(cis_signature)))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1016: FILE: drivers/mtd/sm_ftl.c:915:
+
+

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl)...) over kzalloc(sizeof(struct sm_ftl)...)
#1018: FILE: drivers/mtd/sm_ftl.c:917:
+	ftl = kzalloc(sizeof(struct sm_ftl), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*ftl->zones)...) over kzalloc(sizeof(struct ftl_zone)...)
#1032: FILE: drivers/mtd/sm_ftl.c:931:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1032: FILE: drivers/mtd/sm_ftl.c:931:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1033: FILE: drivers/mtd/sm_ftl.c:932:
+	ftl->zones = kzalloc(sizeof(struct ftl_zone) * ftl->zone_count,
+								GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*cache_entry)...) over kzalloc(sizeof(struct cached_block)...)
#1042: FILE: drivers/mtd/sm_ftl.c:941:
+		cache_entry = kzalloc(sizeof(struct cached_block),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1043: FILE: drivers/mtd/sm_ftl.c:942:
+		cache_entry = kzalloc(sizeof(struct cached_block),
+								GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*trans)...) over kzalloc(sizeof(struct mtd_blktrans_dev)...)
#1058: FILE: drivers/mtd/sm_ftl.c:957:
+	trans = kzalloc(sizeof(struct mtd_blktrans_dev), GFP_KERNEL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1079: FILE: drivers/mtd/sm_ftl.c:978:
+	dbg("Found %d MiB SmartMedia/xD card on %s",
+		(int)(mtd->size / (1024 * 1024)), mtd->name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1083: FILE: drivers/mtd/sm_ftl.c:982:
+	dbg("%d zones, each consists of %d blocks (+%d spares)",
+		ftl->zone_count, ftl->max_lba,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: drivers/mtd/sm_ftl.c:985:
+	dbg("each block consists of %d bytes",
+		ftl->block_size);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1105: FILE: drivers/mtd/sm_ftl.c:1004:
+	struct sm_ftl *ftl = dev->priv;
+	dbg("removing the ftl device");

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#1110: FILE: drivers/mtd/sm_ftl.c:1009:
+	kfree(ftl); /* WE free that here, but the ->release can still
+			be called after ..... fuck */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1110: FILE: drivers/mtd/sm_ftl.c:1009:
+			be called after ..... fuck */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1123: FILE: drivers/mtd/sm_ftl.c:1022:
+^I.open ^I^I= sm_open,$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1151: FILE: drivers/mtd/sm_ftl.h:1:
+/*

WARNING:TYPO_SPELLING: 'loosly' may be misspelled - perhaps 'loosely'?
#1155: FILE: drivers/mtd/sm_ftl.h:5:
+ * Based loosly on ssfdc.c which is
          ^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1172: FILE: drivers/mtd/sm_ftl.h:22:
+
+

WARNING:MISORDERED_TYPE: type 'long unsigned int' should be specified in [[un]signed] [short|int|long|long long] order
#1183: FILE: drivers/mtd/sm_ftl.h:33:
+	long unsigned int data_invalid_bitmap;

WARNING:UNNECESSARY_INT: Prefer 'unsigned long' over 'long unsigned int' as the int is unnecessary
#1183: FILE: drivers/mtd/sm_ftl.h:33:
+	long unsigned int data_invalid_bitmap;

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1192: FILE: drivers/mtd/sm_ftl.h:42:
+	struct mutex cache_mutex;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1221: FILE: drivers/mtd/sm_ftl.h:71:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1225: FILE: drivers/mtd/sm_ftl.h:75:
+	printk(KERN_ERR "sm_ftl" ": " format "\n", ## __VA_ARGS__)

WARNING:STRING_FRAGMENTS: Consecutive strings are generally better as a single string
#1225: FILE: drivers/mtd/sm_ftl.h:75:
+	printk(KERN_ERR "sm_ftl" ": " format "\n", ## __VA_ARGS__)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 74 warnings, 74 checks, 1143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000025987.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
