WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#57: 
 include/asm-s390/pgtable.h        |  191 +++++++++++++++++++++----------------

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#535: FILE: arch/s390/kernel/traps.c:63:
+extern pgm_check_handler_t do_asce_exception;

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#556: FILE: arch/s390/mm/fault.c:35:
+#include <asm/mmu_context.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

WARNING:IN_ATOMIC: use of in_atomic() is incorrect outside core kernel code
#576: FILE: arch/s390/mm/fault.c:460:
+	if (unlikely(space == 0 || in_atomic() || !mm))

in_atomic() is not for driver use so any such use is reported as an ERROR.
Also in_atomic() is often used to determine if sleeping is permitted,
but it is not reliable in this use model.  Therefore its use is
strongly discouraged.

However, in_atomic() is ok for core kernel use.

See: https://lore.kernel.org/lkml/20080320201723.b87b3732.akpm@linux-foundation.org/

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#655: FILE: arch/s390/mm/mmap.c:93:
+s390_get_unmapped_area(struct file *filp, unsigned long addr,
                                     ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#656: FILE: arch/s390/mm/mmap.c:94:
+s390_get_unmapped_area(struct file *filp, unsigned long addr,
+		unsigned long len, unsigned long pgoff, unsigned long flags)

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#661: FILE: arch/s390/mm/mmap.c:99:
+	addr = arch_get_unmapped_area(filp, addr, len, pgoff, flags);
 	                              ^^^^

CHECK:SPACING: No space is necessary after a cast
#667: FILE: arch/s390/mm/mmap.c:105:
+			return (unsigned long) rc;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#673: FILE: arch/s390/mm/mmap.c:111:
+s390_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
                                             ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#674: FILE: arch/s390/mm/mmap.c:112:
+s390_get_unmapped_area_topdown(struct file *filp, const unsigned long addr0,
+			  const unsigned long len, const unsigned long pgoff,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#681: FILE: arch/s390/mm/mmap.c:119:
+	addr = arch_get_unmapped_area_topdown(filp, addr, len, pgoff, flags);
 	                                      ^^^^

CHECK:SPACING: No space is necessary after a cast
#687: FILE: arch/s390/mm/mmap.c:125:
+			return (unsigned long) rc;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#691: FILE: arch/s390/mm/mmap.c:129:
+}
+/*

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#722: FILE: arch/s390/mm/pgtable.c:26:
+#include <asm/mmu_context.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#767: FILE: arch/s390/mm/pgtable.c:80:
+	BUG_ON(limit > (1UL << 53));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#774: FILE: arch/s390/mm/pgtable.c:87:
+		pgd = (unsigned long *) mm->pgd;

CHECK:SPACING: No space is necessary after a cast
#789: FILE: arch/s390/mm/pgtable.c:102:
+		pgd_populate(mm, (pgd_t *) table, (pud_t *) pgd);

CHECK:SPACING: No space is necessary after a cast
#790: FILE: arch/s390/mm/pgtable.c:103:
+		mm->pgd = (pgd_t *) table;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#825: FILE: arch/s390/mm/pgtable.c:138:
+			BUG();

CHECK:SPACING: No space is necessary after a cast
#827: FILE: arch/s390/mm/pgtable.c:140:
+		mm->pgd = (pgd_t *) (pgd_val(*pgd) & _REGION_ENTRY_ORIGIN);

CHECK:SPACING: No space is necessary after a cast
#828: FILE: arch/s390/mm/pgtable.c:141:
+		crst_table_free(mm, (unsigned long *) pgd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#863: FILE: arch/s390/mm/pgtable.c:167:
+		page = alloc_page(GFP_KERNEL|__GFP_REPEAT);
 		                            ^

CHECK:SPACING: No space is necessary after a cast
#870: FILE: arch/s390/mm/pgtable.c:172:
+		table = (unsigned long *) page_to_phys(page);

CHECK:BRACES: Unbalanced braces around else statement
#910: FILE: arch/s390/mm/pgtable.c:203:
+	} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#928: FILE: arch/s390/mm/pgtable.c:221:
+			free_pages((unsigned long) page->index, ALLOC_ORDER);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#956: FILE: arch/s390/mm/vmem.c:81:
+	memcpy(pud + 1, pud, (PTRS_PER_PUD - 1)*sizeof(pud_t));
 	                                       ^

CHECK:SPACING: No space is necessary after a cast
#974: FILE: arch/s390/mm/vmem.c:104:
+		pte = (pte_t *) page_table_alloc(&init_mm);

CHECK:SPACING: No space is necessary after a cast
#980: FILE: arch/s390/mm/vmem.c:109:
+	clear_table((unsigned long *) pte, _PAGE_TYPE_EMPTY,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1033: FILE: drivers/s390/char/sclp_vt220.c:676:
+		printk(KERN_ERR SCLP_VT220_PRINT_HEADER

WARNING:SPLIT_STRING: quoted string split across lines
#1035: FILE: drivers/s390/char/sclp_vt220.c:678:
+		       "could not register vt220 - "
+		       "sclp_register returned %d\n", rc);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1098: FILE: drivers/s390/cio/qdio.c:3193:
+	result = ccw_device_start(cdev, &irq_ptr->ccw,
+				QDIO_DOING_ESTABLISH, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1104: FILE: drivers/s390/cio/qdio.c:3196:
+		result2 = ccw_device_start(cdev, &irq_ptr->ccw,
+					QDIO_DOING_ESTABLISH, 0, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1117: FILE: drivers/s390/cio/qdio.c:3221:
+	wait_event_interruptible_timeout(cdev->private->wait_q,
+		irq_ptr->state == QDIO_IRQ_STATE_ESTABLISHED ||

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#1132: FILE: drivers/s390/crypto/ap_bus.c:64:
+static int ap_thread_flag = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#1140: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:INCLUDE_LINUX: Use #include <linux/mmu_context.h> instead of <asm/mmu_context.h>
#1207: FILE: include/asm-s390/elf.h:118:
+#include <asm/mmu_context.h>

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'executable_stack' may be better as '(executable_stack)' to avoid precedence issues
#1235: FILE: include/asm-s390/elf.h:215:
+#define elf_read_implies_exec(ex, executable_stack)	\
+({							\
+	if (current->mm->context.noexec &&		\
+	    executable_stack != EXSTACK_DISABLE_X)	\
+		disable_noexec(current->mm, current);	\
+	current->mm->context.noexec == 0;		\
+})

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1254: FILE: include/asm-s390/mmu.h:4:
+typedef struct {

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1271: FILE: include/asm-s390/mmu_context.h:13:
+#include <asm/uaccess.h>

CHECK:SPACING: No space is necessary after a cast
#1285: FILE: include/asm-s390/mmu_context.h:25:
+	crst_table_init((unsigned long *) mm->pgd, pgd_entry_type(mm));

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1363: FILE: include/asm-s390/page.h:80:
+typedef pte_t *pgtable_t;

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1398: FILE: include/asm-s390/pgalloc.h:23:
+void crst_table_free(struct mm_struct *, unsigned long *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1398: FILE: include/asm-s390/pgalloc.h:23:
+void crst_table_free(struct mm_struct *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1402: FILE: include/asm-s390/pgalloc.h:25:
+unsigned long *page_table_alloc(struct mm_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1403: FILE: include/asm-s390/pgalloc.h:26:
+void page_table_free(struct mm_struct *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long *' should also have an identifier name
#1403: FILE: include/asm-s390/pgalloc.h:26:
+void page_table_free(struct mm_struct *, unsigned long *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1404: FILE: include/asm-s390/pgalloc.h:27:
+void disable_noexec(struct mm_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct task_struct *' should also have an identifier name
#1404: FILE: include/asm-s390/pgalloc.h:27:
+void disable_noexec(struct mm_struct *, struct task_struct *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#1423: FILE: include/asm-s390/pgalloc.h:84:
+void crst_table_downgrade(struct mm_struct *, unsigned long limit);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1428: FILE: include/asm-s390/pgalloc.h:89:
+	unsigned long *table = crst_table_alloc(mm, mm->context.noexec);
+	if (table)

CHECK:SPACING: No space is necessary after a cast
#1430: FILE: include/asm-s390/pgalloc.h:91:
+	return (pud_t *) table;

CHECK:SPACING: No space is necessary after a cast
#1432: FILE: include/asm-s390/pgalloc.h:93:
+#define pud_free(mm, pud) crst_table_free(mm, (unsigned long *) pud)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1432: FILE: include/asm-s390/pgalloc.h:93:
+}
+#define pud_free(mm, pud) crst_table_free(mm, (unsigned long *) pud)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1441: FILE: include/asm-s390/pgalloc.h:98:
+	unsigned long *table = crst_table_alloc(mm, mm->context.noexec);
+	if (table)

CHECK:SPACING: No space is necessary after a cast
#1443: FILE: include/asm-s390/pgalloc.h:100:
+	return (pmd_t *) table;

CHECK:SPACING: No space is necessary after a cast
#1446: FILE: include/asm-s390/pgalloc.h:102:
+#define pmd_free(mm, pmd) crst_table_free(mm, (unsigned long *) pmd)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1446: FILE: include/asm-s390/pgalloc.h:102:
 }
+#define pmd_free(mm, pmd) crst_table_free(mm, (unsigned long *) pmd)

CHECK:SPACING: No space is necessary after a cast
#1495: FILE: include/asm-s390/pgalloc.h:142:
+	return (pgd_t *) crst_table_alloc(mm, s390_noexec);

CHECK:SPACING: No space is necessary after a cast
#1498: FILE: include/asm-s390/pgalloc.h:144:
+#define pgd_free(mm, pgd) crst_table_free(mm, (unsigned long *) pgd)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1498: FILE: include/asm-s390/pgalloc.h:144:
 }
+#define pgd_free(mm, pgd) crst_table_free(mm, (unsigned long *) pgd)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1535: FILE: include/asm-s390/pgalloc.h:162:
+#define pmd_pgtable(pmd) \
+	(pgtable_t)(pmd_val(pmd) & -sizeof(pte_t)*PTRS_PER_PTE)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1536: FILE: include/asm-s390/pgalloc.h:163:
+	(pgtable_t)(pmd_val(pmd) & -sizeof(pte_t)*PTRS_PER_PTE)
 	                                         ^

CHECK:SPACING: No space is necessary after a cast
#1550: FILE: include/asm-s390/pgalloc.h:168:
+#define pte_alloc_one_kernel(mm, vmaddr) ((pte_t *) page_table_alloc(mm))

CHECK:SPACING: No space is necessary after a cast
#1551: FILE: include/asm-s390/pgalloc.h:169:
+#define pte_alloc_one(mm, vmaddr) ((pte_t *) page_table_alloc(mm))

CHECK:SPACING: No space is necessary after a cast
#1553: FILE: include/asm-s390/pgalloc.h:171:
+#define pte_free_kernel(mm, pte) page_table_free(mm, (unsigned long *) pte)

CHECK:SPACING: No space is necessary after a cast
#1554: FILE: include/asm-s390/pgalloc.h:172:
+#define pte_free(mm, pte) page_table_free(mm, (unsigned long *) pte)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1585: FILE: include/asm-s390/pgtable.h:73:
+#define PGDIR_SIZE	(1UL << PGDIR_SHIFT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1586: FILE: include/asm-s390/pgtable.h:74:
+#define PGDIR_MASK	(~(PGDIR_SIZE-1))
                   	             ^

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1748: FILE: include/asm-s390/pgtable.h:554:
+static inline void pgd_clear_kernel(pgd_t * pgd)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1759: FILE: include/asm-s390/pgtable.h:560:
+static inline void pgd_clear(pgd_t * pgd)

CHECK:SPACING: No space is necessary after a cast
#1902: FILE: include/asm-s390/pgtable.h:864:
+	pud_t *pud = (pud_t *) pgd;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1903: FILE: include/asm-s390/pgtable.h:865:
+	pud_t *pud = (pud_t *) pgd;
+	if ((pgd_val(*pgd) & _REGION_ENTRY_TYPE_MASK) == _REGION_ENTRY_TYPE_R2)

CHECK:SPACING: No space is necessary after a cast
#1904: FILE: include/asm-s390/pgtable.h:866:
+		pud = (pud_t *) pgd_deref(*pgd);

CHECK:SPACING: No space is necessary after a cast
#1911: FILE: include/asm-s390/pgtable.h:872:
+	pmd_t *pmd = (pmd_t *) pud;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1912: FILE: include/asm-s390/pgtable.h:873:
+	pmd_t *pmd = (pmd_t *) pud;
+	if ((pud_val(*pud) & _REGION_ENTRY_TYPE_MASK) == _REGION_ENTRY_TYPE_R3)

CHECK:SPACING: No space is necessary after a cast
#1913: FILE: include/asm-s390/pgtable.h:874:
+		pmd = (pmd_t *) pud_deref(*pud);

CHECK:BIT_MACRO: Prefer using the BIT macro
#1928: FILE: include/asm-s390/processor.h:67:
+#define TASK_SIZE		(1UL << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1929: FILE: include/asm-s390/processor.h:68:
+#define TASK_UNMAPPED_BASE	(1UL << 30)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#1938: FILE: include/asm-s390/processor.h:72:
+#define TASK_SIZE_OF(tsk)	(test_tsk_thread_flag(tsk,TIF_31BIT) ? \
                          	                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1951: FILE: include/asm-s390/processor.h:83:
+#define STACK_TOP		(1UL << 31)

CHECK:BIT_MACRO: Prefer using the BIT macro
#1952: FILE: include/asm-s390/processor.h:84:
+#define STACK_TOP_MAX		(1UL << 31)

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#1954: FILE: include/asm-s390/processor.h:86:
+#define STACK_TOP		(1UL << (test_thread_flag(TIF_31BIT) ? 31:42))
                  		                                         ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#1955: FILE: include/asm-s390/processor.h:87:
+#define STACK_TOP_MAX		(1UL << 42)

CHECK:BRACES: braces {} should be used on all arms of this statement
#2088: FILE: include/asm-s390/tlb.h:142:
+	if (!tlb->fullmm) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2092: FILE: include/asm-s390/tlb.h:146:
+	} else

CHECK:SPACING: No space is necessary after a cast
#2116: FILE: include/asm-s390/tlbflush.h:68:
+		__tlb_flush_idte((unsigned long) mm->pgd |

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324148.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 5 errors, 28 warnings, 53 checks, 1814 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000324148.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
