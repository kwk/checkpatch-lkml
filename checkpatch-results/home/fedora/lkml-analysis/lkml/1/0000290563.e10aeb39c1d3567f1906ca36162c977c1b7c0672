WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#40: 
   git://git.kernel.org/pub/scm/linux/kernel/git/x86/linux-2.6-xen-next.git for-linus

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#275: FILE: arch/x86/kernel/reboot.c:11:
+#include <asm/pgtable.h>

Whenever asm/file.h is included and linux/file.h exists, a
conversion can be made when linux/file.h includes asm/file.h.
However this is not always the case (See signal.h).
This message type is emitted only for includes from arch/.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#293: FILE: arch/x86/kernel/reboot.c:279:
+	memcpy(swapper_pg_dir, swapper_pg_dir + KERNEL_PGD_BOUNDARY,
 		sizeof(swapper_pg_dir [0]) * KERNEL_PGD_PTRS);

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#480: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#485: FILE: arch/x86/mm/pgtable.c:1:
+#include <linux/mm.h>

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#487: FILE: arch/x86/mm/pgtable.c:3:
+#include <asm/pgtable.h>

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#492: FILE: arch/x86/mm/pgtable.c:8:
+	return (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                          ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#492: FILE: arch/x86/mm/pgtable.c:8:
+	return (pte_t *)__get_free_page(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#500: FILE: arch/x86/mm/pgtable.c:16:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#500: FILE: arch/x86/mm/pgtable.c:16:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#500: FILE: arch/x86/mm/pgtable.c:16:
+	pte = alloc_pages(GFP_KERNEL|__GFP_HIGHMEM|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#502: FILE: arch/x86/mm/pgtable.c:18:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#502: FILE: arch/x86/mm/pgtable.c:18:
+	pte = alloc_pages(GFP_KERNEL|__GFP_REPEAT|__GFP_ZERO, 0);
 	                                         ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#555: FILE: arch/x86/mm/pgtable.c:71:
+	memset(pgd, 0, KERNEL_PGD_BOUNDARY*sizeof(pgd_t));
 	                                  ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#560: FILE: arch/x86/mm/pgtable.c:76:
+	/* If the pgd points to a shared pagetable level (either the
+	   ptes in non-PAE, or shared PMD in PAE), then just copy the

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#561: FILE: arch/x86/mm/pgtable.c:77:
+	   references from swapper_pg_dir. */

ERROR:SPACING: space required before the open parenthesis '('
#615: FILE: arch/x86/mm/pgtable.c:131:
+	for(i = 0; i < UNSHARED_PTRS_PER_PGD; i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#647: FILE: arch/x86/mm/pgtable.c:163:
+ ^Ifor (addr = i = 0; i < UNSHARED_PTRS_PER_PGD;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#647: FILE: arch/x86/mm/pgtable.c:163:
+ ^Ifor (addr = i = 0; i < UNSHARED_PTRS_PER_PGD;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#647: FILE: arch/x86/mm/pgtable.c:163:
+ ^Ifor (addr = i = 0; i < UNSHARED_PTRS_PER_PGD;$

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#671: FILE: arch/x86/mm/pgtable.c:187:
+	/* Note: almost everything apart from _PAGE_PRESENT is
+	   reserved at the pmd (PDPT) level. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#671: FILE: arch/x86/mm/pgtable.c:187:
+	   reserved at the pmd (PDPT) level. */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1152: FILE: arch/x86/xen/grant-table.c:1:
+/******************************************************************************

CHECK:ARCH_INCLUDE_LINUX: Consider using #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1196: FILE: arch/x86/xen/grant-table.c:45:
+#include <asm/pgtable.h>

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#1211: FILE: arch/x86/xen/grant-table.c:60:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!shared"
#1223: FILE: arch/x86/xen/grant-table.c:72:
+	if (shared == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1226: FILE: arch/x86/xen/grant-table.c:75:
+		BUG_ON(area == NULL);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!area"
#1226: FILE: arch/x86/xen/grant-table.c:75:
+		BUG_ON(area == NULL);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1289: FILE: arch/x86/xen/mmu.c:195:
+	pgdval_t ret = pgd.pgd;
+	if (ret & _PAGE_PRESENT)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1315: FILE: arch/x86/xen/mmu.c:221:
+	pmdval_t ret = native_pmd_val(pmd);
+	if (ret & _PAGE_PRESENT)

WARNING:LINE_SPACING: Missing a blank line after declarations
#1445: FILE: arch/x86/xen/setup.c:75:
+	int cpu = smp_processor_id();
+	extern void xen_sysenter_target(void);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#1445: FILE: arch/x86/xen/setup.c:75:
+	extern void xen_sysenter_target(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1812: FILE: drivers/input/xen-kbdfront.c:1:
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#1873: FILE: drivers/input/xen-kbdfront.c:62:
+		struct input_dev *dev;
+		event = &XENKBD_IN_RING_REF(page, cons);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1891: FILE: drivers/input/xen-kbdfront.c:80:
+				printk(KERN_WARNING

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#1910: FILE: drivers/input/xen-kbdfront.c:99:
+static int __devinit xenkbd_probe(struct xenbus_device *dev,

CHECK:CAMELCASE: Avoid CamelCase: <XenbusStateInitialised>
#2055: FILE: drivers/input/xen-kbdfront.c:244:
+	xenbus_switch_state(dev, XenbusStateInitialised);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <InitWait>
#2085: FILE: drivers/input/xen-kbdfront.c:274:
+InitWait:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2094: FILE: drivers/input/xen-kbdfront.c:283:
+				printk(KERN_WARNING

CHECK:CAMELCASE: Avoid CamelCase: <XenbusStateConnected>
#2097: FILE: drivers/input/xen-kbdfront.c:286:
+		xenbus_switch_state(dev, XenbusStateConnected);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2170: FILE: drivers/video/Kconfig:1933:
+config XEN_FBDEV_FRONTEND
+	tristate "Xen virtual frame buffer support"
+	depends on FB && XEN
+	select FB_SYS_FILLRECT
+	select FB_SYS_COPYAREA
+	select FB_SYS_IMAGEBLIT
+	select FB_SYS_FOPS
+	select FB_DEFERRED_IO
+	default y
+	help
+	  This driver implements the front-end of the Xen virtual
+	  frame buffer driver.  It communicates with a back-end
+	  in another domain.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2205: FILE: drivers/video/xen-fbfront.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2242: FILE: drivers/video/xen-fbfront.c:38:
+	int			x1, y1, x2, y2;	/* dirty rectangle,
+						   protected by dirty_lock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2242: FILE: drivers/video/xen-fbfront.c:38:
+						   protected by dirty_lock */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2247: FILE: drivers/video/xen-fbfront.c:43:
+^Iunsigned long ^I^I*mfns;$

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2324: FILE: drivers/video/xen-fbfront.c:120:
+	info->x1 = info->y1 = INT_MAX;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2325: FILE: drivers/video/xen-fbfront.c:121:
+	info->x2 = info->y2 = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2363: FILE: drivers/video/xen-fbfront.c:159:
+static int xenfb_setcolreg(unsigned regno, unsigned red, unsigned green,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2363: FILE: drivers/video/xen-fbfront.c:159:
+static int xenfb_setcolreg(unsigned regno, unsigned red, unsigned green,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2363: FILE: drivers/video/xen-fbfront.c:159:
+static int xenfb_setcolreg(unsigned regno, unsigned red, unsigned green,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2364: FILE: drivers/video/xen-fbfront.c:160:
+			   unsigned blue, unsigned transp,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2364: FILE: drivers/video/xen-fbfront.c:160:
+			   unsigned blue, unsigned transp,

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2372: FILE: drivers/video/xen-fbfront.c:168:
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
                                       ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2372: FILE: drivers/video/xen-fbfront.c:168:
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
                                                 ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2372: FILE: drivers/video/xen-fbfront.c:168:
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
                                                        ^

CHECK:SPACING: spaces preferred around that '>>' (ctx:VxV)
#2372: FILE: drivers/video/xen-fbfront.c:168:
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
                                                               ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'val' - possible side-effects?
#2372: FILE: drivers/video/xen-fbfront.c:168:
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2419: FILE: drivers/video/xen-fbfront.c:215:
+static ssize_t xenfb_write(struct fb_info *p, const char __user *buf,
+			size_t count, loff_t *ppos)

WARNING:CONST_STRUCT: struct fb_ops should normally be const
#2429: FILE: drivers/video/xen-fbfront.c:225:
+static struct fb_ops xenfb_fb_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#2460: FILE: drivers/video/xen-fbfront.c:256:
+static int __devinit xenfb_probe(struct xenbus_device *dev,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info"
#2468: FILE: drivers/video/xen-fbfront.c:264:
+	if (info == NULL) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2475: FILE: drivers/video/xen-fbfront.c:271:
+	info->x1 = info->y1 = INT_MAX;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!info->fb"
#2479: FILE: drivers/video/xen-fbfront.c:275:
+	if (info->fb == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!fb_info"
#2498: FILE: drivers/video/xen-fbfront.c:294:
+	if (fb_info == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2508: FILE: drivers/video/xen-fbfront.c:304:
+	fb_info->var.xres_virtual = fb_info->var.xres = info->page->width;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2509: FILE: drivers/video/xen-fbfront.c:305:
+	fb_info->var.yres_virtual = fb_info->var.yres = info->page->height;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2612: FILE: drivers/video/xen-fbfront.c:408:
+	info->page->in_cons = info->page->in_prod = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2613: FILE: drivers/video/xen-fbfront.c:409:
+	info->page->out_cons = info->page->out_prod = 0;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2796: FILE: drivers/xen/balloon.c:1:
+/******************************************************************************

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#2846: FILE: drivers/xen/balloon.c:51:
+#include <asm/pgtable.h>

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2847: FILE: drivers/xen/balloon.c:52:
+#include <asm/uaccess.h>

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#2856: FILE: drivers/xen/balloon.c:61:
+#define PAGES2KB(_p) ((_p)<<(PAGE_SHIFT-10))
                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2856: FILE: drivers/xen/balloon.c:61:
+#define PAGES2KB(_p) ((_p)<<(PAGE_SHIFT-10))
                                        ^

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2895: FILE: drivers/xen/balloon.c:100:
+extern unsigned long totalram_pages;

ERROR:SPACING: space required before the open parenthesis '('
#2902: FILE: drivers/xen/balloon.c:107:
+#define inc_totalhigh_pages() do {} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#2903: FILE: drivers/xen/balloon.c:108:
+#define dec_totalhigh_pages() do {} while(0)

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2915: FILE: drivers/xen/balloon.c:120:
+/* When ballooning out (allocating memory to return to Xen) we don't really
+   want the kernel to try too hard since that can trigger the oom killer. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2915: FILE: drivers/xen/balloon.c:120:
+   want the kernel to try too hard since that can trigger the oom killer. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#2924: FILE: drivers/xen/balloon.c:129:
+		void *v = kmap(page);
+		clear_page(v);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2928: FILE: drivers/xen/balloon.c:133:
+		void *v = page_address(page);
+		clear_page(v);

CHECK:BRACES: braces {} should be used on all arms of this statement
#2958: FILE: drivers/xen/balloon.c:163:
+	if (PageHighMem(page)) {
[...]
+	else
[...]

ERROR:ELSE_AFTER_BRACE: else should follow close brace '}'
#2962: FILE: drivers/xen/balloon.c:167:
+	}
+	else

`else {` should follow the closing block `}` on the same line.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#2978: FILE: drivers/xen/balloon.c:183:
+	struct list_head *next = page->lru.next;
+	if (next == &ballooned_pages)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3018: FILE: drivers/xen/balloon.c:223:
+		BUG_ON(page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#3018: FILE: drivers/xen/balloon.c:223:
+		BUG_ON(page == NULL);

WARNING:ONE_SEMICOLON: Statements terminations use 1 semicolon
#3019: FILE: drivers/xen/balloon.c:224:
+		frame_list[i] = page_to_pfn(page);;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3025: FILE: drivers/xen/balloon.c:230:
+	rc = HYPERVISOR_memory_op(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3034: FILE: drivers/xen/balloon.c:239:
+			ret = HYPERVISOR_memory_op(XENMEM_decrease_reservation,
+					&reservation);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3035: FILE: drivers/xen/balloon.c:240:
+			BUG_ON(ret != rc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3045: FILE: drivers/xen/balloon.c:250:
+		BUG_ON(page == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#3045: FILE: drivers/xen/balloon.c:250:
+		BUG_ON(page == NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3048: FILE: drivers/xen/balloon.c:253:
+		BUG_ON(!xen_feature(XENFEAT_auto_translated_physmap) &&

WARNING:LINE_SPACING: Missing a blank line after declarations
#3056: FILE: drivers/xen/balloon.c:261:
+			int ret;
+			ret = HYPERVISOR_update_va_mapping(

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3056: FILE: drivers/xen/balloon.c:261:
+			ret = HYPERVISOR_update_va_mapping(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3060: FILE: drivers/xen/balloon.c:265:
+			BUG_ON(ret);

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#3094: FILE: drivers/xen/balloon.c:299:
+		if ((page = alloc_page(GFP_BALLOON)) == NULL) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3122: FILE: drivers/xen/balloon.c:327:
+	BUG_ON(ret != nr_pages);

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#3175: FILE: drivers/xen/balloon.c:380:
+static struct xenbus_watch target_watch =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3206: FILE: drivers/xen/balloon.c:411:
+		printk(KERN_ERR "Failed to set balloon watcher\n");

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3257: FILE: drivers/xen/balloon.c:462:
+    return;$

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3271: FILE: drivers/xen/balloon.c:476:
+static int dealloc_pte_fn(

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3285: FILE: drivers/xen/balloon.c:490:
+	BUG_ON(ret != 1);

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#3295: FILE: drivers/xen/balloon.c:500:
+	pagevec = kmalloc(sizeof(page) * nr_pages, GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pagevec"
#3296: FILE: drivers/xen/balloon.c:501:
+	if (pagevec == NULL)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#3300: FILE: drivers/xen/balloon.c:505:
+		page = pagevec[i] = alloc_page(GFP_KERNEL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!page"
#3301: FILE: drivers/xen/balloon.c:506:
+		if (page == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pagevec"
#3358: FILE: drivers/xen/balloon.c:563:
+	if (pagevec == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3363: FILE: drivers/xen/balloon.c:568:
+		BUG_ON(page_count(pagevec[i]) != 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3385: FILE: drivers/xen/balloon.c:590:
+
+

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#3386: FILE: drivers/xen/balloon.c:591:
+#define BALLOON_SHOW(name, format, args...)			\
+	static ssize_t show_##name(struct sys_device *dev,	\
+				   char *buf)			\
+	{							\
+		return sprintf(buf, format, ##args);		\
+	}							\
+	static SYSDEV_ATTR(name, S_IRUGO, show_##name, NULL)

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#3392: FILE: drivers/xen/balloon.c:597:
+	static SYSDEV_ATTR(name, S_IRUGO, show_##name, NULL)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#3398: FILE: drivers/xen/balloon.c:603:
+	     (balloon_stats.hard_limit!=~0UL) ? "%lu\n" : "???\n",
 	                              ^

ERROR:SPACING: space required before that '~' (ctx:OxV)
#3398: FILE: drivers/xen/balloon.c:603:
+	     (balloon_stats.hard_limit!=~0UL) ? "%lu\n" : "???\n",
 	                                ^

ERROR:SPACING: spaces required around that '!=' (ctx:VxO)
#3399: FILE: drivers/xen/balloon.c:604:
+	     (balloon_stats.hard_limit!=~0UL) ? PAGES2KB(balloon_stats.hard_limit) : 0);
 	                              ^

ERROR:SPACING: space required before that '~' (ctx:OxV)
#3399: FILE: drivers/xen/balloon.c:604:
+	     (balloon_stats.hard_limit!=~0UL) ? PAGES2KB(balloon_stats.hard_limit) : 0);
 	                                ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO | S_IWUSR' are not preferred. Consider using octal permissions '0644'.
#3429: FILE: drivers/xen/balloon.c:634:
+static SYSDEV_ATTR(target_kb, S_IRUGO | S_IWUSR,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3543: FILE: drivers/xen/events.c:467:
+	printk("vcpu %d\n  ", cpu);

WARNING:LINE_SPACING: Missing a blank line after declarations
#3547: FILE: drivers/xen/events.c:471:
+		struct vcpu_info *v = per_cpu(xen_vcpu, i);
+		printk("%d: masked=%d pending=%d event_sel %08lx\n  ", i,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3547: FILE: drivers/xen/events.c:471:
+		printk("%d: masked=%d pending=%d event_sel %08lx\n  ", i,

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#3548: FILE: drivers/xen/events.c:472:
+			(get_irq_regs() && i == cpu) ? xen_irqs_disabled(get_irq_regs()) : v->evtchn_upcall_mask,

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3548: FILE: drivers/xen/events.c:472:
+		printk("%d: masked=%d pending=%d event_sel %08lx\n  ", i,
+			(get_irq_regs() && i == cpu) ? xen_irqs_disabled(get_irq_regs()) : v->evtchn_upcall_mask,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3552: FILE: drivers/xen/events.c:476:
+	printk("pending:\n   ");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3553: FILE: drivers/xen/events.c:477:
+	for(i = ARRAY_SIZE(sh->evtchn_pending)-1; i >= 0; i--)
 	                                      ^

ERROR:SPACING: space required before the open parenthesis '('
#3553: FILE: drivers/xen/events.c:477:
+	for(i = ARRAY_SIZE(sh->evtchn_pending)-1; i >= 0; i--)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3554: FILE: drivers/xen/events.c:478:
+		printk("%08lx%s", sh->evtchn_pending[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3555: FILE: drivers/xen/events.c:479:
+		printk("%08lx%s", sh->evtchn_pending[i],
+			i % 8 == 0 ? "\n   " : " ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3556: FILE: drivers/xen/events.c:480:
+	printk("\nmasks:\n   ");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3557: FILE: drivers/xen/events.c:481:
+	for(i = ARRAY_SIZE(sh->evtchn_mask)-1; i >= 0; i--)
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#3557: FILE: drivers/xen/events.c:481:
+	for(i = ARRAY_SIZE(sh->evtchn_mask)-1; i >= 0; i--)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3558: FILE: drivers/xen/events.c:482:
+		printk("%08lx%s", sh->evtchn_mask[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3559: FILE: drivers/xen/events.c:483:
+		printk("%08lx%s", sh->evtchn_mask[i],
+			i % 8 == 0 ? "\n   " : " ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3561: FILE: drivers/xen/events.c:485:
+	printk("\nunmasked:\n   ");

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#3562: FILE: drivers/xen/events.c:486:
+	for(i = ARRAY_SIZE(sh->evtchn_mask)-1; i >= 0; i--)
 	                                   ^

ERROR:SPACING: space required before the open parenthesis '('
#3562: FILE: drivers/xen/events.c:486:
+	for(i = ARRAY_SIZE(sh->evtchn_mask)-1; i >= 0; i--)

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3563: FILE: drivers/xen/events.c:487:
+		printk("%08lx%s", sh->evtchn_pending[i] & ~sh->evtchn_mask[i],

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3564: FILE: drivers/xen/events.c:488:
+		printk("%08lx%s", sh->evtchn_pending[i] & ~sh->evtchn_mask[i],
+			i % 8 == 0 ? "\n   " : " ");

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3566: FILE: drivers/xen/events.c:490:
+	printk("\npending list:\n");

ERROR:SPACING: space required before the open parenthesis '('
#3567: FILE: drivers/xen/events.c:491:
+	for(i = 0; i < NR_EVENT_CHANNELS; i++) {

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#3569: FILE: drivers/xen/events.c:493:
+			printk("  %d: event %d -> irq %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3570: FILE: drivers/xen/events.c:494:
+			printk("  %d: event %d -> irq %d\n",
+				cpu_evtchn[i], i,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3588: FILE: drivers/xen/events.c:519:
+	static DEFINE_PER_CPU(unsigned, nesting_count);

ERROR:CODE_INDENT: code indent should use tabs where possible
#3589: FILE: drivers/xen/events.c:520:
+ ^Iunsigned count;$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3589: FILE: drivers/xen/events.c:520:
+ ^Iunsigned count;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3589: FILE: drivers/xen/events.c:520:
+ ^Iunsigned count;$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3589: FILE: drivers/xen/events.c:520:
+ 	unsigned count;

WARNING:LINE_SPACING: Missing a blank line after declarations
#3621: FILE: drivers/xen/events.c:538:
+			int word_idx = __ffs(pending_words);
+			pending_words &= ~(1UL << word_idx);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3634: FILE: drivers/xen/events.c:550:
+		BUG_ON(!irqs_disabled());

ERROR:SPACING: space required before the open parenthesis '('
#3638: FILE: drivers/xen/events.c:554:
+	} while(count != 1);

WARNING:DEVICE_ATTR_FUNCTIONS: Consider renaming function(s) 'xendev_show_modalias' to 'modalias_show'
#3827: FILE: drivers/xen/xenbus/xenbus_probe.c:456:
+}

The function names used in DEVICE_ATTR is unusual.
Typically, the store and show functions are used with <attr>_store and
<attr>_show, where <attr> is a named attribute variable of the device.

Consider the following examples::

  static DEVICE_ATTR(type, 0444, type_show, NULL);
  static DEVICE_ATTR(power, 0644, power_show, power_store);

The function names should preferably follow the above pattern.

See: https://www.kernel.org/doc/html/latest/driver-api/driver-model/device.html#attributes

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR | S_IRGRP | S_IROTH' are not preferred. Consider using octal permissions '0444'.
#3828: FILE: drivers/xen/xenbus/xenbus_probe.c:457:
+DEVICE_ATTR(modalias, S_IRUSR | S_IRGRP | S_IROTH, xendev_show_modalias, NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3876: FILE: drivers/xen/xencomm.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3888: FILE: drivers/xen/xencomm.c:13:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#3889: FILE: drivers/xen/xencomm.c:14:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3926: FILE: drivers/xen/xencomm.c:51:
+			printk(KERN_DEBUG "%s: couldn't translate vaddr %lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3936: FILE: drivers/xen/xencomm.c:61:
+		printk(KERN_DEBUG

WARNING:LINE_SPACING: Missing a blank line after declarations
#3969: FILE: drivers/xen/xencomm.c:94:
+		unsigned long order = get_order(size);
+		desc = (struct xencomm_desc *)__get_free_pages(gfp_mask,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#3971: FILE: drivers/xen/xencomm.c:96:
+		if (desc == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#3979: FILE: drivers/xen/xencomm.c:104:
+		if (desc == NULL)

WARNING:LINE_SPACING: Missing a blank line after declarations
#3991: FILE: drivers/xen/xencomm.c:116:
+		struct xencomm_desc *desc__ = (struct xencomm_desc *)desc;
+		if (sizeof(*desc__) > sizeof(void *)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#3991: FILE: drivers/xen/xencomm.c:116:
+		if (sizeof(*desc__) > sizeof(void *)) {
[...]
+		} else
[...]

WARNING:LINE_SPACING: Missing a blank line after declarations
#3995: FILE: drivers/xen/xencomm.c:120:
+			unsigned long order = get_order(size);
+			free_pages((unsigned long)__va(desc), order);

CHECK:BRACES: Unbalanced braces around else statement
#3996: FILE: drivers/xen/xencomm.c:121:
+		} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4011: FILE: drivers/xen/xencomm.c:136:
+		BUG_ON(buffer != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "buffer"
#4011: FILE: drivers/xen/xencomm.c:136:
+		BUG_ON(buffer != NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4016: FILE: drivers/xen/xencomm.c:141:
+	BUG_ON(buffer == NULL); /* 'bytes' is non-zero */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!buffer"
#4016: FILE: drivers/xen/xencomm.c:141:
+	BUG_ON(buffer == NULL); /* 'bytes' is non-zero */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4020: FILE: drivers/xen/xencomm.c:145:
+		printk(KERN_DEBUG "%s failure\n", "xencomm_alloc");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#4026: FILE: drivers/xen/xencomm.c:151:
+		printk(KERN_DEBUG "%s failure: %d\n", "xencomm_init", rc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4048: FILE: drivers/xen/xencomm.c:173:
+	BUG_ON(!is_phys_contiguous((unsigned long)ptr));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4051: FILE: drivers/xen/xencomm.c:176:
+	BUG_ON(paddr & XENCOMM_INLINE_FLAG);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4057: FILE: drivers/xen/xencomm.c:182:
+static int xencomm_create_mini(void *buffer,
+	unsigned long bytes, struct xencomm_mini *xc_desc,

WARNING:LINE_SPACING: Missing a blank line after declarations
#4062: FILE: drivers/xen/xencomm.c:187:
+	struct xencomm_desc *desc;
+	BUG_ON(((unsigned long)xc_desc) % sizeof(*xc_desc) != 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4062: FILE: drivers/xen/xencomm.c:187:
+	BUG_ON(((unsigned long)xc_desc) % sizeof(*xc_desc) != 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!desc"
#4085: FILE: drivers/xen/xencomm.c:210:
+	if (rc || desc == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4092: FILE: drivers/xen/xencomm.c:217:
+struct xencomm_handle *__xencomm_map_no_alloc(void *ptr, unsigned long bytes,
+			struct xencomm_mini *xc_desc)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4101: FILE: drivers/xen/xencomm.c:226:
+	rc = xencomm_create_mini(ptr, bytes, xc_desc,
+				&desc);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4136: FILE: include/asm-x86/paravirt.h:915:
+static inline void paravirt_alloc_pte(struct mm_struct *mm, unsigned pfn)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4142: FILE: include/asm-x86/paravirt.h:919:
 }
+static inline void paravirt_release_pte(unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4142: FILE: include/asm-x86/paravirt.h:919:
+static inline void paravirt_release_pte(unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4149: FILE: include/asm-x86/paravirt.h:924:
+static inline void paravirt_alloc_pmd(struct mm_struct *mm, unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4157: FILE: include/asm-x86/paravirt.h:929:
+static inline void paravirt_alloc_pmd_clone(unsigned pfn, unsigned clonepfn,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4157: FILE: include/asm-x86/paravirt.h:929:
+static inline void paravirt_alloc_pmd_clone(unsigned pfn, unsigned clonepfn,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4158: FILE: include/asm-x86/paravirt.h:930:
+					    unsigned start, unsigned count)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4158: FILE: include/asm-x86/paravirt.h:930:
+					    unsigned start, unsigned count)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4164: FILE: include/asm-x86/paravirt.h:934:
 }
+static inline void paravirt_release_pmd(unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4164: FILE: include/asm-x86/paravirt.h:934:
+static inline void paravirt_release_pmd(unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4170: FILE: include/asm-x86/paravirt.h:939:
+static inline void paravirt_alloc_pud(struct mm_struct *mm, unsigned pfn)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4174: FILE: include/asm-x86/paravirt.h:943:
+}
+static inline void paravirt_release_pud(unsigned pfn)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4174: FILE: include/asm-x86/paravirt.h:943:
+static inline void paravirt_release_pud(unsigned pfn)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4187: FILE: include/asm-x86/pgalloc.h:1:
+#ifndef _ASM_X86_PGALLOC_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4211: FILE: include/asm-x86/pgalloc.h:24:
+extern pgd_t *pgd_alloc(struct mm_struct *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4212: FILE: include/asm-x86/pgalloc.h:25:
+extern void pgd_free(struct mm_struct *mm, pgd_t *pgd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4214: FILE: include/asm-x86/pgalloc.h:27:
+extern pte_t *pte_alloc_one_kernel(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#4214: FILE: include/asm-x86/pgalloc.h:27:
+extern pte_t *pte_alloc_one_kernel(struct mm_struct *, unsigned long);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4214: FILE: include/asm-x86/pgalloc.h:27:
+extern pte_t *pte_alloc_one_kernel(struct mm_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4215: FILE: include/asm-x86/pgalloc.h:28:
+extern pgtable_t pte_alloc_one(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct mm_struct *' should also have an identifier name
#4215: FILE: include/asm-x86/pgalloc.h:28:
+extern pgtable_t pte_alloc_one(struct mm_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#4215: FILE: include/asm-x86/pgalloc.h:28:
+extern pgtable_t pte_alloc_one(struct mm_struct *, unsigned long);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4218: FILE: include/asm-x86/pgalloc.h:31:
+/* Should really implement gc for free page table pages. This could be
+   done with a reference count in struct page. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4218: FILE: include/asm-x86/pgalloc.h:31:
+   done with a reference count in struct page. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4222: FILE: include/asm-x86/pgalloc.h:35:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4222: FILE: include/asm-x86/pgalloc.h:35:
+	BUG_ON((unsigned long)pte & (PAGE_SIZE-1));
 	                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4231: FILE: include/asm-x86/pgalloc.h:44:
+extern void __pte_free_tlb(struct mmu_gather *tlb, struct page *pte);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4254: FILE: include/asm-x86/pgalloc.h:67:
+	return (pmd_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4259: FILE: include/asm-x86/pgalloc.h:72:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4259: FILE: include/asm-x86/pgalloc.h:72:
+	BUG_ON((unsigned long)pmd & (PAGE_SIZE-1));
 	                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4263: FILE: include/asm-x86/pgalloc.h:76:
+extern void __pmd_free_tlb(struct mmu_gather *tlb, pmd_t *pmd);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4266: FILE: include/asm-x86/pgalloc.h:79:
+extern void pud_populate(struct mm_struct *mm, pud_t *pudp, pmd_t *pmd);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#4284: FILE: include/asm-x86/pgalloc.h:97:
+	return (pud_t *)get_zeroed_page(GFP_KERNEL|__GFP_REPEAT);
 	                                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4289: FILE: include/asm-x86/pgalloc.h:102:
+	BUG_ON((unsigned long)pud & (PAGE_SIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#4289: FILE: include/asm-x86/pgalloc.h:102:
+	BUG_ON((unsigned long)pud & (PAGE_SIZE-1));
 	                                      ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4293: FILE: include/asm-x86/pgalloc.h:106:
+extern void __pud_free_tlb(struct mmu_gather *tlb, pud_t *pud);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4574: FILE: include/asm-x86/pgtable.h:394:
+extern int ptep_set_access_flags(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4588: FILE: include/asm-x86/pgtable.h:399:
+extern int ptep_test_and_clear_young(struct vm_area_struct *vma,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#4600: FILE: include/asm-x86/pgtable.h:403:
+extern int ptep_clear_flush_young(struct vm_area_struct *vma,

WARNING:TYPO_SPELLING: 'anwhere' may be misspelled - perhaps 'anywhere'?
#4612: FILE: include/asm-x86/pgtable.h:444:
+ *  dst - pointer to pgd range anwhere on a pgd page
                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#4621: FILE: include/asm-x86/pgtable.h:453:
+       memcpy(dst, src, count * sizeof(pgd_t));$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4624: FILE: include/asm-x86/pgtable.h:456:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4683: FILE: include/asm-x86/xen/events.h:1:
+#ifndef __XEN_EVENTS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4711: FILE: include/asm-x86/xen/grant_table.h:1:
+#ifndef __XEN_GRANT_TABLE_H

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hnd' - possible side-effects?
#4745: FILE: include/asm-x86/xen/interface.h:27:
+#define set_xen_guest_handle(hnd, val)			\
+	do {						\
+		if (sizeof(hnd) == 8)			\
+			*(uint64_t *)&(hnd) = 0;	\
+		(hnd).p = val;				\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4752: FILE: include/asm-x86/xen/interface.h:34:
+#define set_xen_guest_handle(hnd, val)	do { (hnd).p = val; } while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'hnd' - possible side-effects?
#4756: FILE: include/asm-x86/xen/interface.h:38:
+#define set_xen_guest_handle(hnd, val)			\
+	do {						\
+		if (sizeof(hnd) == 8)			\
+			*(uint64_t *)&(hnd) = 0;	\
+		(hnd) = val;				\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#4763: FILE: include/asm-x86/xen/interface.h:45:
+#define set_xen_guest_handle(hnd, val)	do { (hnd) = val; } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4787: FILE: include/asm-x86/xen/page.h:1:
+#ifndef __XEN_PAGE_H

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#4792: FILE: include/asm-x86/xen/page.h:6:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#4793: FILE: include/asm-x86/xen/page.h:7:
+#include <asm/pgtable.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4798: FILE: include/asm-x86/xen/page.h:12:
+typedef struct xmaddr {

WARNING:NEW_TYPEDEFS: do not add new typedefs
#4803: FILE: include/asm-x86/xen/page.h:17:
+typedef struct xpaddr {

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#4812: FILE: include/asm-x86/xen/page.h:26:
+#define FOREIGN_FRAME_BIT	(1UL<<31)
                          	    ^

CHECK:BIT_MACRO: Prefer using the BIT macro
#4812: FILE: include/asm-x86/xen/page.h:26:
+#define FOREIGN_FRAME_BIT	(1UL<<31)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4841: FILE: include/asm-x86/xen/page.h:55:
+#if 0

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4859: FILE: include/asm-x86/xen/page.h:73:
+	unsigned offset = phys.paddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4860: FILE: include/asm-x86/xen/page.h:74:
+	unsigned offset = phys.paddr & ~PAGE_MASK;
+	return XMADDR(PFN_PHYS((u64)pfn_to_mfn(PFN_DOWN(phys.paddr))) | offset);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#4865: FILE: include/asm-x86/xen/page.h:79:
+	unsigned offset = machine.maddr & ~PAGE_MASK;

WARNING:LINE_SPACING: Missing a blank line after declarations
#4866: FILE: include/asm-x86/xen/page.h:80:
+	unsigned offset = machine.maddr & ~PAGE_MASK;
+	return XPADDR(PFN_PHYS((u64)mfn_to_pfn(PFN_DOWN(machine.maddr))) | offset);

WARNING:LINE_SPACING: Missing a blank line after declarations
#4893: FILE: include/asm-x86/xen/page.h:107:
+	unsigned long pfn = mfn_to_pfn(mfn);
+	if ((pfn < max_mapnr)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pfn < max_mapnr'
#4893: FILE: include/asm-x86/xen/page.h:107:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'phys_to_machine_mapping[pfn] != mfn'
#4893: FILE: include/asm-x86/xen/page.h:107:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4894: FILE: include/asm-x86/xen/page.h:108:
+	if ((pfn < max_mapnr)
+	    && !xen_feature(XENFEAT_auto_translated_physmap)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#4895: FILE: include/asm-x86/xen/page.h:109:
+	    && !xen_feature(XENFEAT_auto_translated_physmap)
+	    && (phys_to_machine_mapping[pfn] != mfn))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4903: FILE: include/asm-x86/xen/page.h:117:
+		BUG_ON(pfn != mfn && mfn != INVALID_P2M_ENTRY);

ERROR:SPACING: space prohibited before that close parenthesis ')'
#4942: FILE: include/asm-x86/xen/page.h:156:
+#define __pmd_ma(x)	((pmd_t) { (x) } )

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4949: FILE: include/asm-x86/xen/page.h:163:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4961: FILE: include/xen/balloon.h:1:
+/******************************************************************************

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#4999: FILE: include/xen/balloon.h:39:
+#if 0

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5080: FILE: include/xen/interface/callback.h:1:
+/******************************************************************************

CHECK:BIT_MACRO: Prefer using the BIT macro
#5157: FILE: include/xen/interface/callback.h:78:
+#define CALLBACKF_mask_events              (1U << _CALLBACKF_mask_events)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5164: FILE: include/xen/interface/callback.h:85:
+    uint16_t type;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5164: FILE: include/xen/interface/callback.h:85:
+    uint16_t type;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5165: FILE: include/xen/interface/callback.h:86:
+    uint16_t flags;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5165: FILE: include/xen/interface/callback.h:86:
+    uint16_t flags;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5166: FILE: include/xen/interface/callback.h:87:
+    struct xen_callback address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5177: FILE: include/xen/interface/callback.h:98:
+    uint16_t type;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5177: FILE: include/xen/interface/callback.h:98:
+    uint16_t type;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5178: FILE: include/xen/interface/callback.h:99:
+    uint16_t _unused;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u16' over 'uint16_t'
#5178: FILE: include/xen/interface/callback.h:99:
+    uint16_t _unused;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5190: FILE: include/xen/interface/grant_table.h:188:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_map_grant_ref);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5198: FILE: include/xen/interface/grant_table.h:210:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_unmap_grant_ref);

CHECK:SPACING: No space is necessary after a cast
#5207: FILE: include/xen/interface/grant_table.h:228:
+    GUEST_HANDLE(ulong) frame_list;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5207: FILE: include/xen/interface/grant_table.h:228:
+    GUEST_HANDLE(ulong) frame_list;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5209: FILE: include/xen/interface/grant_table.h:230:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_setup_table);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5217: FILE: include/xen/interface/grant_table.h:243:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_dump_table);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5226: FILE: include/xen/interface/grant_table.h:262:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_transfer);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5234: FILE: include/xen/interface/grant_table.h:303:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_copy);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5243: FILE: include/xen/interface/grant_table.h:321:
 };
+DEFINE_GUEST_HANDLE_STRUCT(gnttab_query_size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5253: FILE: include/xen/interface/io/fbif.h:1:
+/*

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5297: FILE: include/xen/interface/io/fbif.h:45:
+	uint8_t type;		/* XENFB_TYPE_UPDATE */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5298: FILE: include/xen/interface/io/fbif.h:46:
+	int32_t x;		/* source x */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5299: FILE: include/xen/interface/io/fbif.h:47:
+	int32_t y;		/* source y */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5300: FILE: include/xen/interface/io/fbif.h:48:
+	int32_t width;		/* rect width */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5301: FILE: include/xen/interface/io/fbif.h:49:
+	int32_t height;		/* rect height */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5307: FILE: include/xen/interface/io/fbif.h:55:
+	uint8_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5322: FILE: include/xen/interface/io/fbif.h:70:
+	uint8_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5345: FILE: include/xen/interface/io/fbif.h:93:
+	uint32_t in_cons, in_prod;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5346: FILE: include/xen/interface/io/fbif.h:94:
+	uint32_t out_cons, out_prod;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5348: FILE: include/xen/interface/io/fbif.h:96:
+	int32_t width;          /* width of the framebuffer (in pixels) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5349: FILE: include/xen/interface/io/fbif.h:97:
+	int32_t height;         /* height of the framebuffer (in pixels) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5350: FILE: include/xen/interface/io/fbif.h:98:
+	uint32_t line_length;   /* length of a row of pixels (in bytes) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5351: FILE: include/xen/interface/io/fbif.h:99:
+	uint32_t mem_length;    /* length of the framebuffer (in bytes) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5352: FILE: include/xen/interface/io/fbif.h:100:
+	uint8_t depth;          /* depth of a pixel (in bits) */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5383: FILE: include/xen/interface/io/kbdif.h:1:
+/*

WARNING:TYPO_SPELLING: 'ot' may be misspelled - perhaps 'to'?
#5425: FILE: include/xen/interface/io/kbdif.h:43:
+ * Frontend requests ot instead of XENKBD_TYPE_MOTION by setting
                      ^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5431: FILE: include/xen/interface/io/kbdif.h:49:
+	uint8_t type;		/* XENKBD_TYPE_MOTION */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5432: FILE: include/xen/interface/io/kbdif.h:50:
+	int32_t rel_x;		/* relative X motion */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5433: FILE: include/xen/interface/io/kbdif.h:51:
+	int32_t rel_y;		/* relative Y motion */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5437: FILE: include/xen/interface/io/kbdif.h:55:
+	uint8_t type;		/* XENKBD_TYPE_KEY */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5438: FILE: include/xen/interface/io/kbdif.h:56:
+	uint8_t pressed;	/* 1 if pressed; 0 otherwise */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5439: FILE: include/xen/interface/io/kbdif.h:57:
+	uint32_t keycode;	/* KEY_* from linux/input.h */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5443: FILE: include/xen/interface/io/kbdif.h:61:
+	uint8_t type;		/* XENKBD_TYPE_POS */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5444: FILE: include/xen/interface/io/kbdif.h:62:
+	int32_t abs_x;		/* absolute X position (in FB pixels) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 's32' over 'int32_t'
#5445: FILE: include/xen/interface/io/kbdif.h:63:
+	int32_t abs_y;		/* absolute Y position (in FB pixels) */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5451: FILE: include/xen/interface/io/kbdif.h:69:
+	uint8_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#5469: FILE: include/xen/interface/io/kbdif.h:87:
+	uint8_t type;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5492: FILE: include/xen/interface/io/kbdif.h:110:
+	uint32_t in_cons, in_prod;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5493: FILE: include/xen/interface/io/kbdif.h:111:
+	uint32_t out_cons, out_prod;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5503: FILE: include/xen/interface/io/protocols.h:1:
+#ifndef __XEN_PROTOCOLS_H__

CHECK:ARCH_DEFINES: architecture specific defines should be avoided
#5511: FILE: include/xen/interface/io/protocols.h:9:
+#if defined(__i386__)

Architecture specific defines should be avoided wherever
possible.

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5533: FILE: include/xen/interface/memory.h:32:
+    ulong extent_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5550: FILE: include/xen/interface/memory.h:88:
+    ulong extent_start;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5575: FILE: include/xen/interface/memory.h:132:
+    ulong gpfn_list;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5582: FILE: include/xen/interface/memory.h:138:
+    ulong mfn_list;$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5595: FILE: include/xen/interface/vcpu.h:88:
 };
+DEFINE_GUEST_HANDLE_STRUCT(vcpu_runstate_info);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5611: FILE: include/xen/interface/vcpu.h:139:
 };
+DEFINE_GUEST_HANDLE_STRUCT(vcpu_set_periodic_timer);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5619: FILE: include/xen/interface/vcpu.h:151:
 };
+DEFINE_GUEST_HANDLE_STRUCT(vcpu_set_singleshot_timer);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#5627: FILE: include/xen/interface/vcpu.h:171:
 };
+DEFINE_GUEST_HANDLE_STRUCT(vcpu_register_vcpu_info);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5677: FILE: include/xen/interface/xencomm.h:1:
+/*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5712: FILE: include/xen/interface/xencomm.h:36:
+    uint32_t magic;$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5712: FILE: include/xen/interface/xencomm.h:36:
+    uint32_t magic;

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5713: FILE: include/xen/interface/xencomm.h:37:
+    uint32_t nr_addrs; /* the number of entries in address[] */$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#5713: FILE: include/xen/interface/xencomm.h:37:
+    uint32_t nr_addrs; /* the number of entries in address[] */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5714: FILE: include/xen/interface/xencomm.h:38:
+    uint64_t address[0];$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5714: FILE: include/xen/interface/xencomm.h:38:
+    uint64_t address[0];

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5903: FILE: include/xen/page.h:1:
+#include <asm/xen/page.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5910: FILE: include/xen/xen-ops.h:1:
+#ifndef INCLUDE_XEN_OPS_H

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5936: FILE: include/xen/xencomm.h:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5948: FILE: include/xen/xencomm.h:13:
+ * along with this program; if not, write to the Free Software$

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#5949: FILE: include/xen/xencomm.h:14:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA$

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#5965: FILE: include/xen/xencomm.h:30:
+	uint64_t address[XENCOMM_MINI_ADDRS];

WARNING:TYPO_SPELLING: 'additionnal' may be misspelled - perhaps 'additional'?
#5968: FILE: include/xen/xencomm.h:33:
+/* To avoid additionnal virt to phys conversion, an opaque structure is
             ^^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#5969: FILE: include/xen/xencomm.h:34:
+/* To avoid additionnal virt to phys conversion, an opaque structure is
+   presented.  */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5969: FILE: include/xen/xencomm.h:34:
+   presented.  */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5972: FILE: include/xen/xencomm.h:37:
+extern void xencomm_free(struct xencomm_handle *desc);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5973: FILE: include/xen/xencomm.h:38:
+extern struct xencomm_handle *xencomm_map(void *ptr, unsigned long bytes);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5974: FILE: include/xen/xencomm.h:39:
+extern struct xencomm_handle *__xencomm_map_no_alloc(void *ptr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5975: FILE: include/xen/xencomm.h:40:
+extern struct xencomm_handle *__xencomm_map_no_alloc(void *ptr,
+			unsigned long bytes,  struct xencomm_mini *xc_area);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#5977: FILE: include/xen/xencomm.h:42:
+#if 0

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xc_desc' may be better as '(xc_desc)' to avoid precedence issues
#5978: FILE: include/xen/xencomm.h:43:
+#define XENCOMM_MINI_ALIGNED(xc_desc, n)				\
+	struct xencomm_mini xc_desc ## _base[(n)]			\
+	__attribute__((__aligned__(sizeof(struct xencomm_mini))));	\
+	struct xencomm_mini *xc_desc = &xc_desc ## _base[0];

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#5978: FILE: include/xen/xencomm.h:43:
+#define XENCOMM_MINI_ALIGNED(xc_desc, n)				\
+	struct xencomm_mini xc_desc ## _base[(n)]			\
+	__attribute__((__aligned__(sizeof(struct xencomm_mini))));	\
+	struct xencomm_mini *xc_desc = &xc_desc ## _base[0];

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(sizeof(struct xencomm_mini)) over __attribute__((__aligned__(sizeof(struct xencomm_mini))))
#5980: FILE: include/xen/xencomm.h:45:
+	__attribute__((__aligned__(sizeof(struct xencomm_mini))));	\

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'xc_desc' may be better as '(xc_desc)' to avoid precedence issues
#5989: FILE: include/xen/xencomm.h:54:
+#define XENCOMM_MINI_ALIGNED(xc_desc, n)				\
+	unsigned char xc_desc ## _base[((n) + 1 ) *			\
+				       sizeof(struct xencomm_mini)];	\
+	struct xencomm_mini *xc_desc = (struct xencomm_mini *)		\
+		((unsigned long)xc_desc ## _base +			\
+		 (sizeof(struct xencomm_mini) -				\
+		  ((unsigned long)xc_desc ## _base) %			\
+		  sizeof(struct xencomm_mini)));

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#5989: FILE: include/xen/xencomm.h:54:
+#define XENCOMM_MINI_ALIGNED(xc_desc, n)				\
+	unsigned char xc_desc ## _base[((n) + 1 ) *			\
+				       sizeof(struct xencomm_mini)];	\
+	struct xencomm_mini *xc_desc = (struct xencomm_mini *)		\
+		((unsigned long)xc_desc ## _base +			\
+		 (sizeof(struct xencomm_mini) -				\
+		  ((unsigned long)xc_desc ## _base) %			\
+		  sizeof(struct xencomm_mini)));

ERROR:SPACING: space prohibited before that close parenthesis ')'
#5990: FILE: include/xen/xencomm.h:55:
+	unsigned char xc_desc ## _base[((n) + 1 ) *			\

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6003: FILE: include/xen/xencomm.h:68:
+extern unsigned long xencomm_vtop(unsigned long vaddr);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290563.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 23 errors, 160 warnings, 151 checks, 5143 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000290563.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
