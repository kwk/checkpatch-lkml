WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#141: FILE: kernel/trace/trace.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#171: FILE: kernel/trace/trace.c:31:
+unsigned long __read_mostly	tracing_max_latency = (cycle_t)ULONG_MAX;

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo __read_mostly	bar" should be "foo __read_mostly bar"
#172: FILE: kernel/trace/trace.c:32:
+unsigned long __read_mostly	tracing_thresh;

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#204: FILE: kernel/trace/trace.c:64:
+	trace_nr_entries = simple_strtoul(str, &str, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#207: FILE: kernel/trace/trace.c:67:
+__setup("trace_entries=", set_nr_entries);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#233: FILE: kernel/trace/trace.c:93:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#233: FILE: kernel/trace/trace.c:93:
+	(TRACE_ITER_PRINT_PARENT|TRACE_ITER_SYM_OFFSET|TRACE_ITER_SYM_ADDR)
 	                                              ^

WARNING:TYPO_SPELLING: 'postions' may be misspelled - perhaps 'positions'?
#235: FILE: kernel/trace/trace.c:95:
+/* These must match the bit postions above */
                             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#236: FILE: kernel/trace/trace.c:96:
+static const char *trace_options[] = {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#244: FILE: kernel/trace/trace.c:104:
+static unsigned trace_flags;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#246: FILE: kernel/trace/trace.c:106:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#408: FILE: kernel/trace/trace.c:268:
+static struct ftrace_ops trace_ops __read_mostly =
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#424: FILE: kernel/trace/trace.c:284:
+static unsigned map_pid_to_cmdline[PID_MAX_DEFAULT+1];

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#424: FILE: kernel/trace/trace.c:284:
+static unsigned map_pid_to_cmdline[PID_MAX_DEFAULT+1];
                                                   ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#425: FILE: kernel/trace/trace.c:285:
+static unsigned map_cmdline_to_pid[SAVED_CMDLINES];

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#442: FILE: kernel/trace/trace.c:302:
+	unsigned map;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#443: FILE: kernel/trace/trace.c:303:
+	unsigned idx;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#463: FILE: kernel/trace/trace.c:323:
+			map_pid_to_cmdline[map] = (unsigned)-1;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#478: FILE: kernel/trace/trace.c:338:
+	unsigned map;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#550: FILE: kernel/trace/trace.c:410:
+ftrace(struct trace_array *tr, struct trace_array_cpu *data,
+		       unsigned long ip, unsigned long parent_ip,

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#697: FILE: kernel/trace/trace.c:557:
+		for (i = 0; i < NR_CPUS; i++)

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#757: FILE: kernel/trace/trace.c:617:
+		seq_printf(m, "0");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#772: FILE: kernel/trace/trace.c:632:
+	seq_puts(m, "#                _------=> CPU#            \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#773: FILE: kernel/trace/trace.c:633:
+	seq_puts(m, "#               / _-----=> irqs-off        \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#774: FILE: kernel/trace/trace.c:634:
+	seq_puts(m, "#              | / _----=> need-resched    \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#775: FILE: kernel/trace/trace.c:635:
+	seq_puts(m, "#              || / _---=> hardirq/softirq \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#776: FILE: kernel/trace/trace.c:636:
+	seq_puts(m, "#              ||| / _--=> preempt-depth   \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#777: FILE: kernel/trace/trace.c:637:
+	seq_puts(m, "#              |||| /                      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#778: FILE: kernel/trace/trace.c:638:
+	seq_puts(m, "#              |||||     delay             \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#779: FILE: kernel/trace/trace.c:639:
+	seq_puts(m, "#  cmd     pid ||||| time  |   caller      \n");

WARNING:QUOTED_WHITESPACE_BEFORE_NEWLINE: unnecessary whitespace before a quoted newline
#780: FILE: kernel/trace/trace.c:640:
+	seq_puts(m, "#     \\   /    |||||   \\   |   /           \n");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#789: FILE: kernel/trace/trace.c:649:
+
+

CHECK:BRACES: braces {} should be used on all arms of this statement
#809: FILE: kernel/trace/trace.c:669:
+			if (underrun) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#812: FILE: kernel/trace/trace.c:672:
+			} else

WARNING:SPLIT_STRING: quoted string split across lines
#820: FILE: kernel/trace/trace.c:680:
+	seq_puts(m, "-----------------------------------"
+		 "---------------------------------\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#822: FILE: kernel/trace/trace.c:682:
+	seq_printf(m, " latency: %lu us, #%lu/%lu, CPU#%d |"
+		   " (M:%s VP:%d, KP:%d, SP:%d HP:%d",

WARNING:SPLIT_STRING: quoted string split across lines
#845: FILE: kernel/trace/trace.c:705:
+	seq_printf(m, "    | task: %.16s-%d "
+		   "(uid:%d nice:%ld policy:%ld rt_prio:%ld)\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#882: FILE: kernel/trace/trace.c:742:
+	if (hardirq && softirq)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#884: FILE: kernel/trace/trace.c:744:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#885: FILE: kernel/trace/trace.c:745:
+		if (hardirq)
[...]
+		else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#887: FILE: kernel/trace/trace.c:747:
+		else {

WARNING:SPLIT_STRING: quoted string split across lines
#939: FILE: kernel/trace/trace.c:799:
+		seq_printf(m, "%16s %5d %d %d %08x %08x [%08lx]"
+			   " %ld.%03ldms (+%ld.%03ldms): ",

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#944: FILE: kernel/trace/trace.c:804:
+			   abs_usecs/1000,
 			            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#945: FILE: kernel/trace/trace.c:805:
+			   abs_usecs % 1000, rel_usecs/1000, rel_usecs % 1000);
 			                              ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: kernel/trace/trace.c:857:
+		if ((sym_flags & TRACE_ITER_PRINT_PARENT) &&
+						entry->fn.parent_ip) {

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#998: FILE: kernel/trace/trace.c:858:
+			seq_printf(m, " <-");

WARNING:PREFER_SEQ_PUTS: Prefer seq_puts to seq_printf
#1013: FILE: kernel/trace/trace.c:873:
+	seq_printf(m, "\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!iter->ent"
#1036: FILE: kernel/trace/trace.c:896:
+	if (iter->ent == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1062: FILE: kernel/trace/trace.c:922:
+static struct seq_operations tracer_seq_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:LINE_SPACING: Missing a blank line after declarations
#1092: FILE: kernel/trace/trace.c:952:
+		struct seq_file *m = file->private_data;
+		m->private = iter;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1110: FILE: kernel/trace/trace.c:970:
+int tracing_open_generic(struct inode *inode, struct file *filp)
                                                            ^^^^

WARNING:TYPO_SPELLING: 'reenable' may be misspelled - perhaps 're-enable'?
#1125: FILE: kernel/trace/trace.c:985:
+	/* reenable tracing if it was previously enabled */
 	   ^^^^^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1157: FILE: kernel/trace/trace.c:1017:
+
+

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#1206: FILE: kernel/trace/trace.c:1066:
+static struct seq_operations show_traces_seq_ops = {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1220: FILE: kernel/trace/trace.c:1080:
+		struct seq_file *m = file->private_data;
+		m->private = trace_types;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1226: FILE: kernel/trace/trace.c:1086:
+static struct file_operations tracing_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1233: FILE: kernel/trace/trace.c:1093:
+static struct file_operations tracing_lt_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1240: FILE: kernel/trace/trace.c:1100:
+static struct file_operations show_traces_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1247: FILE: kernel/trace/trace.c:1107:
+tracing_iter_ctrl_read(struct file *filp, char __user *ubuf,
                                     ^^^^

WARNING:TYPO_SPELLING: 'calulate' may be misspelled - perhaps 'calculate'?
#1255: FILE: kernel/trace/trace.c:1115:
+	/* calulate max size */
 	   ^^^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1285: FILE: kernel/trace/trace.c:1145:
+tracing_iter_ctrl_write(struct file *filp, const char __user *ubuf,
                                      ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1323: FILE: kernel/trace/trace.c:1183:
+static struct file_operations tracing_iter_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1330: FILE: kernel/trace/trace.c:1190:
+tracing_ctrl_read(struct file *filp, char __user *ubuf,
                                ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1343: FILE: kernel/trace/trace.c:1203:
+tracing_ctrl_write(struct file *filp, const char __user *ubuf,
                                 ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1358: FILE: kernel/trace/trace.c:1218:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1382: FILE: kernel/trace/trace.c:1242:
+tracing_set_trace_read(struct file *filp, char __user *ubuf,
                                     ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1385: FILE: kernel/trace/trace.c:1245:
+	char buf[max_tracer_type_len+2];
 	                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1400: FILE: kernel/trace/trace.c:1260:
+tracing_set_trace_write(struct file *filp, const char __user *ubuf,
                                      ^^^^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1405: FILE: kernel/trace/trace.c:1265:
+	char buf[max_tracer_type_len+1];
 	                            ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1444: FILE: kernel/trace/trace.c:1304:
+tracing_max_lat_read(struct file *filp, char __user *ubuf,
                                   ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1460: FILE: kernel/trace/trace.c:1320:
+tracing_max_lat_write(struct file *filp, const char __user *ubuf,
                                    ^^^^

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#1475: FILE: kernel/trace/trace.c:1335:
+	val = simple_strtoul(buf, NULL, 10);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1482: FILE: kernel/trace/trace.c:1342:
+static struct file_operations tracing_max_lat_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1488: FILE: kernel/trace/trace.c:1348:
+static struct file_operations tracing_ctrl_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1494: FILE: kernel/trace/trace.c:1354:
+static struct file_operations set_tracer_fops = {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1503: FILE: kernel/trace/trace.c:1363:
+tracing_read_long(struct file *filp, char __user *ubuf,
                                ^^^^

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1515: FILE: kernel/trace/trace.c:1375:
+static struct file_operations tracing_read_long_fops = {

WARNING:SPLIT_STRING: quoted string split across lines
#1583: FILE: kernel/trace/trace.c:1443:
+		pr_warning("Could not create debugfs "
+			   "'tracing_max_latency' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1589: FILE: kernel/trace/trace.c:1449:
+		pr_warning("Could not create debugfs "
+			   "'tracing_threash' entry\n");

WARNING:SPLIT_STRING: quoted string split across lines
#1597: FILE: kernel/trace/trace.c:1457:
+		pr_warning("Could not create debugfs "
+			   "'dyn_ftrace_total_info' entry\n");

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#1603: FILE: kernel/trace/trace.c:1463:
+static struct tracer no_tracer __read_mostly =
+{

WARNING:LINE_SPACING: Missing a blank line after declarations
#1610: FILE: kernel/trace/trace.c:1470:
+	const unsigned long nr_pages = DIV_ROUND_UP(size, PAGE_SIZE);
+	return ilog2(roundup_pow_of_two(nr_pages));

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#1626: FILE: kernel/trace/trace.c:1486:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1627: FILE: kernel/trace/trace.c:1487:
+			printk(KERN_ERR "tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#1628: FILE: kernel/trace/trace.c:1488:
+			printk(KERN_ERR "tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!array"
#1637: FILE: kernel/trace/trace.c:1497:
+		if (array == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1638: FILE: kernel/trace/trace.c:1498:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"

WARNING:SPLIT_STRING: quoted string split across lines
#1639: FILE: kernel/trace/trace.c:1499:
+			printk(KERN_ERR "wakeup tracer: failed to allocate"
+			       " %ld bytes for trace buffer!\n", size);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1693: FILE: kernel/trace/trace.h:1:
+#ifndef _LINUX_KERNEL_TRACE_H

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#1697: FILE: kernel/trace/trace.h:5:
+#include <asm/atomic.h>

WARNING:TYPO_SPELLING: 'addres' may be misspelled - perhaps 'address'?
#1702: FILE: kernel/trace/trace.h:10:
+ * Function trace entry - function address and parent function addres:
                                                                ^^^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1812: FILE: kernel/trace/trace.h:120:
+int tracing_open_generic(struct inode *inode, struct file *filp);
                                                            ^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1815: FILE: kernel/trace/trace.h:123:
+void ftrace(struct trace_array *tr,
+			    struct trace_array_cpu *data,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1831: FILE: kernel/trace/trace.h:139:
+extern unsigned long nsecs_to_usecs(unsigned long nsecs);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:NEW_TYPEDEFS: do not add new typedefs
#1857: FILE: kernel/trace/trace.h:165:
+typedef void

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1868: FILE: kernel/trace/trace.h:176:
+extern int register_tracer_switch(struct tracer_switch_ops *ops);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1869: FILE: kernel/trace/trace.h:177:
+extern int unregister_tracer_switch(struct tracer_switch_ops *ops);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 67 warnings, 26 checks, 1752 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000323902.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
