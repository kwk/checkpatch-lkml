WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#336: FILE: arch/i386/kernel/tsc_sync.c:1:
+#include "../../x86_64/kernel/tsc_sync.c"

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:CODE_INDENT: code indent should use tabs where possible
#577: FILE: arch/x86_64/kernel/smpboot.c:338:
+  ^I * Check TSC sync first:$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#577: FILE: arch/x86_64/kernel/smpboot.c:338:
+  ^I * Check TSC sync first:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#578: FILE: arch/x86_64/kernel/smpboot.c:339:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#578: FILE: arch/x86_64/kernel/smpboot.c:339:
+ ^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#612: FILE: arch/x86_64/kernel/smpboot.c:957:
+  ^I * Make sure and check TSC sync:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#612: FILE: arch/x86_64/kernel/smpboot.c:957:
+  ^I * Make sure and check TSC sync:$

ERROR:CODE_INDENT: code indent should use tabs where possible
#613: FILE: arch/x86_64/kernel/smpboot.c:958:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#613: FILE: arch/x86_64/kernel/smpboot.c:958:
+ ^I */$

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#627: FILE: arch/x86_64/kernel/time.c:942:
+static int tsc_unstable = 0;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#652: FILE: arch/x86_64/kernel/tsc_sync.c:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#653: FILE: arch/x86_64/kernel/tsc_sync.c:2:
+ * arch/x86_64/kernel/tsc_sync.c: check TSC synchronization.

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after start_count
#679: FILE: arch/x86_64/kernel/tsc_sync.c:28:
+static __cpuinitdata atomic_t start_count;

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after stop_count
#680: FILE: arch/x86_64/kernel/tsc_sync.c:29:
+static __cpuinitdata atomic_t stop_count;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after sync_lock
#687: FILE: arch/x86_64/kernel/tsc_sync.c:36:
+static __cpuinitdata raw_spinlock_t sync_lock = __RAW_SPIN_LOCK_UNLOCKED;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after last_tsc
#688: FILE: arch/x86_64/kernel/tsc_sync.c:37:
+static __cpuinitdata cycles_t last_tsc;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after max_warp
#689: FILE: arch/x86_64/kernel/tsc_sync.c:38:
+static __cpuinitdata cycles_t max_warp;

WARNING:MISPLACED_INIT: __cpuinitdata should be placed after nr_warps
#690: FILE: arch/x86_64/kernel/tsc_sync.c:39:
+static __cpuinitdata int nr_warps;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#742: FILE: arch/x86_64/kernel/tsc_sync.c:91:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#760: FILE: arch/x86_64/kernel/tsc_sync.c:109:
+	printk(KERN_INFO "checking TSC synchronization [CPU#%d -> CPU#%d]:",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: arch/x86_64/kernel/tsc_sync.c:110:
+	printk(KERN_INFO "checking TSC synchronization [CPU#%d -> CPU#%d]:",
+			  smp_processor_id(), cpu);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#771: FILE: arch/x86_64/kernel/tsc_sync.c:120:
+	while (atomic_read(&start_count) != cpus-1)
 	                                        ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#780: FILE: arch/x86_64/kernel/tsc_sync.c:129:
+	while (atomic_read(&stop_count) != cpus-1)
 	                                       ^

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#789: FILE: arch/x86_64/kernel/tsc_sync.c:138:
+		printk("\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#790: FILE: arch/x86_64/kernel/tsc_sync.c:139:
+		printk(KERN_WARNING "Measured %Ld cycles TSC warp between CPUs,"

WARNING:PRINTF_L: %Ld is non-standard C, use %lld
#790: FILE: arch/x86_64/kernel/tsc_sync.c:139:
+		printk(KERN_WARNING "Measured %Ld cycles TSC warp between CPUs,"

WARNING:SPLIT_STRING: quoted string split across lines
#791: FILE: arch/x86_64/kernel/tsc_sync.c:140:
+		printk(KERN_WARNING "Measured %Ld cycles TSC warp between CPUs,"
+				    " turning off TSC clock.\n", max_warp);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#797: FILE: arch/x86_64/kernel/tsc_sync.c:146:
+		printk(" passed.\n");

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#837: FILE: arch/x86_64/kernel/tsc_sync.c:186:
+}
+#undef NR_LOOPS

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#892: FILE: include/asm-i386/tsc.h:1:
+#include <asm-x86_64/tsc.h>

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#952: FILE: include/asm-x86_64/tsc.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#953: FILE: include/asm-x86_64/tsc.h:2:
+ * linux/include/asm-x86_64/tsc.h

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#960: FILE: include/asm-x86_64/tsc.h:9:
+#include <asm/processor.h>

WARNING:NEW_TYPEDEFS: do not add new typedefs
#965: FILE: include/asm-x86_64/tsc.h:14:
+typedef unsigned long long cycles_t;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#990: FILE: include/asm-x86_64/tsc.h:39:
+	unsigned eax;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#997: FILE: include/asm-x86_64/tsc.h:46:
+	alternative_io("cpuid", ASM_NOP2, X86_FEATURE_SYNC_RDTSC,
+			  "=a" (eax), "0" (1) : "ebx","ecx","edx","memory");

ERROR:SPACING: space required after that ',' (ctx:VxV)
#997: FILE: include/asm-x86_64/tsc.h:46:
+			  "=a" (eax), "0" (1) : "ebx","ecx","edx","memory");
 			                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#997: FILE: include/asm-x86_64/tsc.h:46:
+			  "=a" (eax), "0" (1) : "ebx","ecx","edx","memory");
 			                                   ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#997: FILE: include/asm-x86_64/tsc.h:46:
+			  "=a" (eax), "0" (1) : "ebx","ecx","edx","memory");
 			                                         ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1006: FILE: include/asm-x86_64/tsc.h:55:
+extern void tsc_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1007: FILE: include/asm-x86_64/tsc.h:56:
+extern void mark_tsc_unstable(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1008: FILE: include/asm-x86_64/tsc.h:57:
+extern int unsynchronized_tsc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1014: FILE: include/asm-x86_64/tsc.h:63:
+extern void check_tsc_sync_source(int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1015: FILE: include/asm-x86_64/tsc.h:64:
+extern void check_tsc_sync_target(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 8 errors, 25 warnings, 11 checks, 886 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000475216.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
