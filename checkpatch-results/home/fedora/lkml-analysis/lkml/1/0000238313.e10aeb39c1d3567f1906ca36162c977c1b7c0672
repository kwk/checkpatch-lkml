CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#192: FILE: mm/memcontrol.c:377:
+	if (do_account_swap
+	    && (memcg->res.pages + memcg->res.swaps + num

WARNING:LINE_SPACING: Missing a blank line after declarations
#231: FILE: mm/memcontrol.c:421:
+	unsigned long flags;
+	spin_lock_irqsave(&memcg->res.lock, flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#328: FILE: mm/memcontrol.c:623:
+		struct page_cgroup *pc;
+		pc  = page_get_page_cgroup(page);

WARNING:LINE_SPACING: Missing a blank line after declarations
#331: FILE: mm/memcontrol.c:626:
+			struct mem_cgroup *memcg = pc->mem_cgroup;
+			sc->mem_cgroup = memcg;

WARNING:LINE_SPACING: Missing a blank line after declarations
#357: FILE: mm/memcontrol.c:652:
+	struct swap_cgroup *sc;
+	sc = mem_cgroup_lookup_swap(entry);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'lookup_memcg_from_swap', this function's name, in a string
#361: FILE: mm/memcontrol.c:656:
+	WARN_ON("lookup_memcg_from_swap returns NULL");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#370: FILE: mm/memcontrol.c:665:
+	BUG_ON(!sc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:RETURN_VOID: void function return statements are not generally useful
#399: FILE: mm/memcontrol.c:694:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#406: FILE: mm/memcontrol.c:701:
+}
+static void swap_cgroup_uncharge_swap(struct mem_cgroup *mem, swp_entry_t val)

WARNING:RETURN_VOID: void function return statements are not generally useful
#409: FILE: mm/memcontrol.c:704:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#410: FILE: mm/memcontrol.c:705:
+}
+static void swap_cgroup_delete_swap(swp_entry_t val)

WARNING:RETURN_VOID: void function return statements are not generally useful
#413: FILE: mm/memcontrol.c:708:
+	return;
+}

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#453: FILE: mm/memcontrol.c:976:
+			/* When we hit memsw_limit, success of
+			   try_to_free_page() doesn't mean we can go ahead. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#453: FILE: mm/memcontrol.c:976:
+			   try_to_free_page() doesn't mean we can go ahead. */

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#455: FILE: mm/memcontrol.c:978:
+			if (progress
+			    && __mem_counter_check_under_memsw_limit(mem))

ERROR:CODE_INDENT: code indent should use tabs where possible
#461: FILE: mm/memcontrol.c:984:
+^I^I ^I * try_to_free_mem_cgroup_pages() might not give us a$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#461: FILE: mm/memcontrol.c:984:
+^I^I ^I * try_to_free_mem_cgroup_pages() might not give us a$

ERROR:CODE_INDENT: code indent should use tabs where possible
#462: FILE: mm/memcontrol.c:985:
+^I^I ^I * full picture of reclaim. Some pages are reclaimed$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#462: FILE: mm/memcontrol.c:985:
+^I^I ^I * full picture of reclaim. Some pages are reclaimed$

ERROR:CODE_INDENT: code indent should use tabs where possible
#465: FILE: mm/memcontrol.c:988:
+^I^I ^I * cgroup.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#465: FILE: mm/memcontrol.c:988:
+^I^I ^I * cgroup.$

ERROR:CODE_INDENT: code indent should use tabs where possible
#466: FILE: mm/memcontrol.c:989:
+^I^I ^I * Check the limit again to see if the reclaim reduced$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#466: FILE: mm/memcontrol.c:989:
+^I^I ^I * Check the limit again to see if the reclaim reduced$

ERROR:CODE_INDENT: code indent should use tabs where possible
#468: FILE: mm/memcontrol.c:991:
+^I^I ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#468: FILE: mm/memcontrol.c:991:
+^I^I ^I */$

WARNING:LINE_SPACING: Missing a blank line after declarations
#481: FILE: mm/memcontrol.c:1029:
+		swp_entry_t entry = { .val = page_private(page) };
+		swap_cgroup_uncharge_swap(mem, entry);

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#566: FILE: mm/memcontrol.c:1136:
+		if (PageSwapCache(page) || page_mapped(page) ||
[...]
 		goto out;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#567: FILE: mm/memcontrol.c:1137:
+		if (PageSwapCache(page) || page_mapped(page) ||
+			(page->mapping && !PageAnon(page)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#576: FILE: mm/memcontrol.c:1144:
+	if (ctype == MEM_CGROUP_CHARGE_TYPE_SWAPOUT) {
[...]
+	 } else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#579: FILE: mm/memcontrol.c:1147:
+	 } else

CHECK:BRACES: Unbalanced braces around else statement
#579: FILE: mm/memcontrol.c:1147:
+	 } else

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#592: FILE: mm/memcontrol.c:1165:
 }
+#ifdef CONFIG_CGROUP_MEM_RES_CTLR_SWAP

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#609: FILE: mm/memcontrol.c:1182:
+	BUG_ON(!sc);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#610: FILE: mm/memcontrol.c:1183:
+	BUG_ON(PageSwapCache(page));

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#616: FILE: mm/memcontrol.c:1189:
+			printk("%d need to uncharge page ???", __LINE__);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#658: FILE: include/linux/swap.h:298:
+extern swp_entry_t get_swap_page(gfp_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#658: FILE: include/linux/swap.h:298:
+extern swp_entry_t get_swap_page(gfp_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#659: FILE: include/linux/swap.h:299:
+extern swp_entry_t get_swap_page_of_type(int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#659: FILE: include/linux/swap.h:299:
+extern swp_entry_t get_swap_page_of_type(int, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#659: FILE: include/linux/swap.h:299:
+extern swp_entry_t get_swap_page_of_type(int, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#668: FILE: include/linux/swap.h:336:
+extern int cgroup_precharge_swap_ent(swp_entry_t entry, gfp_t mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#670: FILE: include/linux/swap.h:338:
+extern void cgroup_commit_swap_owner(struct page *page, swp_entry_t entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#671: FILE: include/linux/swap.h:339:
+extern void mem_cgroup_uncharge_swap_cache(struct page *page,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#672: FILE: include/linux/swap.h:340:
+extern void mem_cgroup_uncharge_swap_cache(struct page *page,
+		swp_entry_t entry);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/swap.h:341:
+extern void mem_cgroup_uncharge_swap(swp_entry_t entry);

ERROR:OPEN_BRACE: open brace '{' following function definitions go on the next line
#677: FILE: include/linux/swap.h:345:
+static int cgroup_precharge_swap_ent(swp_entry_t entry, gfp_mask mask) {

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#686: FILE: include/linux/swap.h:354:
+static void mem_cgroup_uncharge_swap_cache(struct page *page,
+		swp_entry_t entry)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#791: FILE: mm/swapfile.c:236:
 }
+#ifdef CONFIG_CGROUP_MEM_RES_CTLR_SWAP

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#807: FILE: mm/swapfile.c:252:
+}
+swp_entry_t get_swap_page_of_type(int type, gfp_t mask)

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#828: FILE: mm/swapfile.c:273:
+}
+swp_entry_t get_swap_page_of_type(int type, gfp_t mask)

WARNING:TYPO_SPELLING: 'Contoller' may be misspelled - perhaps 'Controller'?
#882: FILE: init/Kconfig:412:
+	bool "Memory Resource Contoller Swap extention"
 	                      ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'extention' may be misspelled - perhaps 'extension'?
#882: FILE: init/Kconfig:412:
+	bool "Memory Resource Contoller Swap extention"
 	                                     ^^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000238313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 27 warnings, 19 checks, 748 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000238313.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
