WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#32: 
slab page allocations in such a way that we can determine if a slab is valid whenever we access it regardless of its time in life.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#56: FILE: include/linux/slab.h:100:
+int kmem_cache_vacate(struct page *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:CAMELCASE: Avoid CamelCase: <__SetPageSlab>
#141: FILE: mm/slub.c:1138:
+	__SetPageSlab(page);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <SetSlabDebug>
#144: FILE: mm/slub.c:1141:
+		SetSlabDebug(page);

CHECK:CAMELCASE: Avoid CamelCase: <SetSlabFrozen>
#162: FILE: mm/slub.c:2680:
+	SetSlabFrozen(page);

WARNING:TYPO_SPELLING: 'succesful' may be misspelled - perhaps 'successful'?
#166: FILE: mm/slub.c:2684:
+ * Attempt to free objects in a page. Return 1 if succesful.
                                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#190: FILE: mm/slub.c:2708:
+	vector = kmalloc(s->objects * sizeof(void *), GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

CHECK:CAMELCASE: Avoid CamelCase: <SlabFrozen>
#212: FILE: mm/slub.c:2730:
+	if (!PageSlab(page) || SlabFrozen(page) || !page->inuse)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#233: FILE: mm/slub.c:2751:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 4 warnings, 5 checks, 168 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000409402.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
