WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#64: FILE: fs/notify/Kconfig:40:
+config FANOTIFY
+        bool "Filesystem wide access notification"
+        select SECURITY
+        default y
+        ---help---
+           Say Y here to enable fanotify suport.  fanotify is a system wide
+           file access notification interface.  Events are read from from a
+           single open fd and in doing so a fd is created in the reading process
+           which points to the same data as the one on which the event occured.
+
+           For more information, see <file:Documentation/filesystems/fanotify.txt>
+
+           If unsure, say Y.

Kconfig symbols should have a help text which fully describes
it.

WARNING:TYPO_SPELLING: 'suport' may be misspelled - perhaps 'support'?
#69: FILE: fs/notify/Kconfig:45:
+           Say Y here to enable fanotify suport.  fanotify is a system wide
                                          ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:REPEATED_WORD: Possible repeated word: 'from'
#70: FILE: fs/notify/Kconfig:46:
+           file access notification interface.  Events are read from from a

WARNING:TYPO_SPELLING: 'occured' may be misspelled - perhaps 'occurred'?
#72: FILE: fs/notify/Kconfig:48:
+           which points to the same data as the one on which the event occured.
                                                                        ^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#88: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#93: FILE: fs/notify/fanotify.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#108: FILE: fs/notify/fanotify.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#148: FILE: fs/notify/fanotify.c:56:
+	 * SRCU!!  the groups list is very very much read only and the path is

WARNING:LONG_LINE_COMMENT: line length of 109 exceeds 100 columns
#164: FILE: fs/notify/fanotify.c:72:
+				/* shit, we OOM'd and now we can't tell, lets hope something else blows up */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:LINE_SPACING: Please don't use multiple blank lines
#181: FILE: fs/notify/fanotify.c:89:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 111 exceeds 100 columns
#188: FILE: fs/notify/fanotify.c:96:
+		printk(KERN_ERR "fanotify: failed to create root directory: %ld\n", PTR_ERR(fanotify_fs_root));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#188: FILE: fs/notify/fanotify.c:96:
+		printk(KERN_ERR "fanotify: failed to create root directory: %ld\n", PTR_ERR(fanotify_fs_root));

WARNING:USE_DEVICE_INITCALL: please use device_initcall() or more appropriate function instead of __initcall() (see include/linux/init.h)
#209: FILE: fs/notify/fanotify.c:117:
+__initcall(fanotify_init);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#216: FILE: fs/notify/fanotify.h:1:
+#ifndef _LINUX_FANOTIFY_PRIVATE_H

CHECK:LINE_SPACING: Please don't use multiple blank lines
#221: FILE: fs/notify/fanotify.h:6:
+
+

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#222: FILE: fs/notify/fanotify.h:7:
+#include <asm/atomic.h>

WARNING:LONG_LINE_COMMENT: line length of 108 exceeds 100 columns
#236: FILE: fs/notify/fanotify.h:21:
+	struct list_head notification_list; /* list of event_holder this group needs to send to userspace */

WARNING:LONG_LINE_COMMENT: line length of 104 exceeds 100 columns
#237: FILE: fs/notify/fanotify.h:22:
+	wait_queue_head_t notification_waitq; /* read() on the notification file blocks on this waitq */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#252: FILE: fs/notify/fanotify.h:37:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#281: FILE: fs/notify/fanotify.h:66:
+extern __init int fanotify_register_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#282: FILE: fs/notify/fanotify.h:67:
+extern __init int fanotify_register_uninit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#284: FILE: fs/notify/fanotify.h:69:
+extern int fanotify_notification_user_destroy(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#285: FILE: fs/notify/fanotify.h:70:
+extern int fanotify_notification_user_create(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#287: FILE: fs/notify/fanotify.h:72:
+extern int check_notification_queue(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#288: FILE: fs/notify/fanotify.h:73:
+extern void get_event(struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#289: FILE: fs/notify/fanotify.h:74:
+extern void put_event(struct fanotify_event *event);

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#290: FILE: fs/notify/fanotify.h:75:
+extern int add_event_to_group_notification(struct fanotify_group *group, struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#290: FILE: fs/notify/fanotify.h:75:
+extern int add_event_to_group_notification(struct fanotify_group *group, struct fanotify_event *event);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#291: FILE: fs/notify/fanotify.h:76:
+extern struct fanotify_event *remove_event_from_group_notification(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#292: FILE: fs/notify/fanotify.h:77:
+extern struct fanotify_event *create_event(struct file *file, unsigned int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#293: FILE: fs/notify/fanotify.h:78:
+extern struct fanotify_event_holder *alloc_event_holder(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#294: FILE: fs/notify/fanotify.h:79:
+extern void destroy_event_holder(struct fanotify_event_holder *holder);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#295: FILE: fs/notify/fanotify.h:80:
+extern __init int fanotify_notification_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#296: FILE: fs/notify/fanotify.h:81:
+extern __init int fanotify_notification_uninit(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#298: FILE: fs/notify/fanotify.h:83:
+extern void fanotify_get_group(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#299: FILE: fs/notify/fanotify.h:84:
+extern void fanotify_put_group(struct fanotify_group *group);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#300: FILE: fs/notify/fanotify.h:85:
+extern int fanotify_register_group(char *name, unsigned int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#301: FILE: fs/notify/fanotify.h:86:
+extern int fanotify_unregister_group(char *name, unsigned int mask);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#309: FILE: fs/notify/group.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#324: FILE: fs/notify/group.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

CHECK:UNCOMMENTED_DEFINITION: DEFINE_MUTEX definition without comment
#344: FILE: fs/notify/group.c:36:
+DEFINE_MUTEX(groups_mutex);

WARNING:LINE_SPACING: Missing a blank line after declarations
#369: FILE: fs/notify/group.c:61:
+		struct fanotify_event *event;
+		while (!atomic_read(&group->num_clients) && check_notification_queue(group)) {

WARNING:RETURN_VOID: void function return statements are not generally useful
#377: FILE: fs/notify/group.c:69:
+	return;
+}

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*group)...) over kmalloc(sizeof(struct fanotify_group)...)
#393: FILE: fs/notify/group.c:85:
+	group = kmalloc(sizeof(struct fanotify_group), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'group->mask == mask'
#440: FILE: fs/notify/group.c:132:
+		if (!strcmp(group->name, name) && (group->mask == mask)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#468: FILE: fs/notify/group_user.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#483: FILE: fs/notify/group_user.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:LONG_LINE: line length of 110 exceeds 100 columns
#510: FILE: fs/notify/group_user.c:43:
+static ssize_t fanotify_register_write(struct file *file, const char __user *buf, size_t lenp, loff_t *offset)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#546: FILE: fs/notify/group_user.c:79:
+static ssize_t fanotify_unregister_write(struct file *file, const char __user *buf, size_t lenp, loff_t *offset)

WARNING:CONST_STRUCT: struct file_operations should normally be const
#580: FILE: fs/notify/group_user.c:113:
+static struct file_operations fanotify_register_fops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#582: FILE: fs/notify/group_user.c:115:
+^I.release = ^Isimple_transaction_release,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#585: FILE: fs/notify/group_user.c:118:
+static struct file_operations fanotify_unregister_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#587: FILE: fs/notify/group_user.c:120:
+^I.release = ^Isimple_transaction_release,$

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#592: FILE: fs/notify/group_user.c:125:
+	if (d_register);
+		securityfs_remove(d_register);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#592: FILE: fs/notify/group_user.c:125:
+	if (d_register);

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:TRAILING_SEMICOLON: trailing semicolon indicates no statements, indent implies otherwise
#596: FILE: fs/notify/group_user.c:129:
+	if (d_unregister);
+		securityfs_remove(d_unregister);

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#596: FILE: fs/notify/group_user.c:129:
+	if (d_unregister);

WARNING:LONG_LINE: line length of 122 exceeds 100 columns
#606: FILE: fs/notify/group_user.c:139:
+	d_register = securityfs_create_file("register", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_register_fops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#606: FILE: fs/notify/group_user.c:139:
+	d_register = securityfs_create_file("register", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_register_fops);
 	                                                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#606: FILE: fs/notify/group_user.c:139:
+	d_register = securityfs_create_file("register", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_register_fops);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#608: FILE: fs/notify/group_user.c:141:
+		printk(KERN_ERR "fanotify: failed to create register file: %ld\n", PTR_ERR(d_register));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#608: FILE: fs/notify/group_user.c:141:
+		printk(KERN_ERR "fanotify: failed to create register file: %ld\n", PTR_ERR(d_register));

WARNING:LONG_LINE: line length of 128 exceeds 100 columns
#613: FILE: fs/notify/group_user.c:146:
+	d_unregister = securityfs_create_file("unregister", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_unregister_fops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#613: FILE: fs/notify/group_user.c:146:
+	d_unregister = securityfs_create_file("unregister", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_unregister_fops);
 	                                                           ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#613: FILE: fs/notify/group_user.c:146:
+	d_unregister = securityfs_create_file("unregister", S_IRUSR|S_IWUSR, fanotify_fs_root, NULL, &fanotify_unregister_fops);

WARNING:LONG_LINE: line length of 108 exceeds 100 columns
#615: FILE: fs/notify/group_user.c:148:
+		printk(KERN_ERR "fanotify: failed to create unregister file: %ld\n", PTR_ERR(d_unregister));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#615: FILE: fs/notify/group_user.c:148:
+		printk(KERN_ERR "fanotify: failed to create unregister file: %ld\n", PTR_ERR(d_unregister));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#630: FILE: fs/notify/notification.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#645: FILE: fs/notify/notification.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#648: FILE: fs/notify/notification.c:19:
+#include <asm/atomic.h>

WARNING:LONG_LINE: line length of 103 exceeds 100 columns
#739: FILE: fs/notify/notification.c:110:
+	holder = list_first_entry(&group->notification_list, struct fanotify_event_holder, event_list);

WARNING:LONG_LINE: line length of 115 exceeds 100 columns
#792: FILE: fs/notify/notification.c:163:
+	event_kmem_cache = kmem_cache_create("fanotify_event", sizeof(struct fanotify_event), 0, SLAB_PANIC, NULL);

WARNING:LONG_LINE: line length of 136 exceeds 100 columns
#793: FILE: fs/notify/notification.c:164:
+	event_holder_kmem_cache = kmem_cache_create("fanotify_event_holder", sizeof(struct fanotify_event_holder), 0, SLAB_PANIC, NULL);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#803: FILE: fs/notify/notification_user.c:1:
+/*

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#818: FILE: fs/notify/notification_user.c:16:
+ *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#851: FILE: fs/notify/notification_user.c:49:
+ * $

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#856: FILE: fs/notify/notification_user.c:54:
+static ssize_t fanotify_notification_read(struct file *file, char __user *buf, size_t lenp, loff_t *offset)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#867: FILE: fs/notify/notification_user.c:65:
+	BUG_ON(!group);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#891: FILE: fs/notify/notification_user.c:89:
+		rc = wait_event_interruptible(group->notification_waitq, check_notification_queue(group));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#901: FILE: fs/notify/notification_user.c:99:
+	BUG_ON(!event);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#934: FILE: fs/notify/notification_user.c:132:
+	rc = snprintf(output, lenp-1, "fd=%d mask=%x\n", client_fd, event->mask);
 	                          ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#954: FILE: fs/notify/notification_user.c:152:
+	BUG_ON(!group);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1000: FILE: fs/notify/notification_user.c:198:
+	BUG_ON(!group);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1008: FILE: fs/notify/notification_user.c:206:
+static struct file_operations notification_fops = {

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#1029: FILE: fs/notify/notification_user.c:227:
+	notification_file = securityfs_create_file("notification", S_IRUSR|S_IWUSR, group->subdir, group, &notification_fops);

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1029: FILE: fs/notify/notification_user.c:227:
+	notification_file = securityfs_create_file("notification", S_IRUSR|S_IWUSR, group->subdir, group, &notification_fops);
 	                                                                  ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR|S_IWUSR' are not preferred. Consider using octal permissions '0600'.
#1029: FILE: fs/notify/notification_user.c:227:
+	notification_file = securityfs_create_file("notification", S_IRUSR|S_IWUSR, group->subdir, group, &notification_fops);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1048: FILE: include/linux/fanotify.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1089: FILE: include/linux/fanotify.h:42:
+extern void fanotify(struct file *file, unsigned int mask);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223684.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 52 warnings, 28 checks, 1048 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000223684.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
