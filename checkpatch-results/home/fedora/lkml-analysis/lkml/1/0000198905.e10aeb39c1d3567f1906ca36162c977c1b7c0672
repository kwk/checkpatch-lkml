WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#36: 
when sparse_irq is used (CONFIG_SPARSE_IRQ), use kzalloc_node to get irq_desc, irq_cfg

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#43: 
seperate move_irq_desc to another patch
^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#88: FILE: arch/x86/Kconfig:244:
+config SPARSE_IRQ
+	bool "Support sparse irq numbering"
+	depends on PCI_MSI || HT_IRQ
+	default y
+	help
+	  This enables support for sparse irq, esp for msi/msi-x. You may need

Kconfig symbols should have a help text which fully describes
it.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#130: FILE: arch/x86/kernel/io_apic.c:132:
+	printk(KERN_DEBUG "  alloc irq_2_pin on cpu %d node %d\n", cpu, node);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#203: FILE: arch/x86/kernel/io_apic.c:185:
+	BUG_ON(count > count_desc);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#250: FILE: arch/x86/kernel/io_apic.c:214:
+	printk(KERN_DEBUG "  alloc irq_cfg on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#272: FILE: arch/x86/kernel/io_apic.c:227:
+			printk(KERN_ERR "can not alloc irq_cfg\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#273: FILE: arch/x86/kernel/io_apic.c:228:
+			BUG_ON(1);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#400: FILE: arch/x86/kernel/io_apic.c:463:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: arch/x86/kernel/io_apic.c:464:
+			printk(KERN_ERR "can not alloc irq_2_pin to add %d - %d\n",
+					apic, pin);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: arch/x86/kernel/io_apic.c:491:
+static void __init replace_pin_at_irq_cpu(struct irq_cfg *cfg, int cpu,
 				      int oldapic, int oldpin,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#439: FILE: arch/x86/kernel/io_apic.c:514:
+static inline void io_apic_modify_irq(struct irq_cfg *cfg,
 				int mask_and, int mask_or,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#485: FILE: arch/x86/kernel/io_apic.c:562:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_LEVEL_TRIGGER,
 			IO_APIC_REDIR_MASKED, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#493: FILE: arch/x86/kernel/io_apic.c:568:
+	io_apic_modify_irq(cfg, ~IO_APIC_REDIR_MASKED,
 			IO_APIC_REDIR_LEVEL_TRIGGER, NULL);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#503: FILE: arch/x86/kernel/io_apic.c:577:
+	BUG_ON(!cfg);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#529: FILE: arch/x86/kernel/io_apic.c:600:
+}
+static void unmask_IO_APIC_irq(unsigned int irq)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'cfg->move_in_progress'
#564: FILE: arch/x86/kernel/io_apic.c:1125:
+	if ((cfg->move_in_progress) || cfg->move_cleanup_count)

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#691: FILE: arch/x86/kernel/io_apic.c:1460:
+				printk(KERN_INFO "can not get irq_desc for %d\n", irq);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: arch/x86/kernel/io_apic.c:1467:
+			setup_IO_APIC_irq(apic, pin, irq, desc,
 					irq_trigger(idx), irq_polarity(idx));

WARNING:LINE_SPACING: Missing a blank line after declarations
#718: FILE: arch/x86/kernel/io_apic.c:1617:
+		struct irq_pin_list *entry;
+		cfg = desc->chip_data;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#859: FILE: arch/x86/kernel/io_apic.c:2294:
+}
+static void set_ir_ioapic_affinity_irq(unsigned int irq, cpumask_t mask)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1102: FILE: arch/x86/kernel/io_apic.c:3014:
+			printk(KERN_INFO "can not get irq_desc for %d\n", new);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1527: FILE: arch/x86/kernel/io_apic.c:3840:
+		printk(KERN_INFO "can not get irq_desc %d\n", irq);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#1692: FILE: drivers/pci/intr_remapping.c:31:
+	printk(KERN_DEBUG "alloc irq_2_iommu on cpu %d node %d\n", cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1720: FILE: drivers/pci/intr_remapping.c:58:
+		printk(KERN_INFO "can not get irq_desc for %d\n", irq);

CHECK:CAMELCASE: Avoid CamelCase: <irq_2_iommuX>
#1739: FILE: drivers/pci/intr_remapping.c:77:
+static struct irq_2_iommu irq_2_iommuX[NR_IRQS];

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1774: FILE: drivers/pci/intr_remapping.c:195:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1787: FILE: drivers/pci/intr_remapping.c:248:
+		printk(KERN_ERR "can't allocate irq_2_iommu\n");

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1965: FILE: include/linux/irq.h:194:
+extern void early_irq_init(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1966: FILE: include/linux/irq.h:195:
+extern void arch_early_irq_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1967: FILE: include/linux/irq.h:196:
+extern void arch_init_chip_data(struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1968: FILE: include/linux/irq.h:197:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1969: FILE: include/linux/irq.h:198:
+extern void arch_init_copy_chip_data(struct irq_desc *old_desc,
+					struct irq_desc *desc, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1970: FILE: include/linux/irq.h:199:
+extern void arch_free_chip_data(struct irq_desc *old_desc, struct irq_desc *desc);

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1981: FILE: include/linux/irq.h:209:
+}
+static inline struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1987: FILE: include/linux/irq.h:215:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1987: FILE: include/linux/irq.h:215:
+# define for_each_irq_desc(irq, desc)		\
+	for (irq = 0, desc = irq_desc; irq < nr_irqs; irq++, desc++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irq' - possible side-effects?
#1989: FILE: include/linux/irq.h:217:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#1989: FILE: include/linux/irq.h:217:
+# define for_each_irq_desc_reverse(irq, desc)                          \
+	for (irq = nr_irqs - 1, desc = irq_desc + (nr_irqs - 1);        \
+	    irq >= 0; irq--, desc--)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1998: FILE: include/linux/irq.h:226:
+extern struct irq_desc *irq_to_desc(unsigned int irq);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1999: FILE: include/linux/irq.h:227:
+extern struct irq_desc *irq_to_desc_alloc_cpu(unsigned int irq, int cpu);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2000: FILE: include/linux/irq.h:228:
+extern struct irq_desc *move_irq_desc(struct irq_desc *old_desc, int cpu);

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2003: FILE: include/linux/irq.h:231:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2003: FILE: include/linux/irq.h:231:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2003: FILE: include/linux/irq.h:231:
+#define for_each_irq_desc(irqX, desc)					\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.next), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2005: FILE: include/linux/irq.h:233:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.next), typeof(*desc), list), irqX = desc->irq; \

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2007: FILE: include/linux/irq.h:235:
+		desc = list_entry(rcu_dereference(desc->list.next), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#2009: FILE: include/linux/irq.h:237:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'irqX' - possible side-effects?
#2009: FILE: include/linux/irq.h:237:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'desc' - possible side-effects?
#2009: FILE: include/linux/irq.h:237:
+#define for_each_irq_desc_reverse(irqX, desc)				\
+	rcu_read_lock();						\
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \
+		prefetch(desc->list.prev), &desc->list != &sparse_irqs_head; \
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LONG_LINE: line length of 112 exceeds 100 columns
#2011: FILE: include/linux/irq.h:239:
+	for (desc = list_entry(rcu_dereference(sparse_irqs_head.prev), typeof(*desc), list), irqX = desc->irq; \

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2013: FILE: include/linux/irq.h:241:
+		desc = list_entry(rcu_dereference(desc->list.prev), typeof(*desc), list), irqX = desc ? desc->irq : -1U)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#2049: FILE: include/linux/kernel_stat.h:32:
+       unsigned int irqs[NR_IRQS];$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2078: FILE: include/linux/kernel_stat.h:64:
+extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2173: FILE: kernel/irq/handle.c:59:
+void __init __attribute__((weak)) arch_early_irq_init(void)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2201: FILE: kernel/irq/handle.c:87:
+	printk(KERN_DEBUG "  alloc kstat_irqs on cpu %d node %d\n", cpu, node);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#2207: FILE: kernel/irq/handle.c:93:
+void __attribute__((weak)) arch_init_chip_data(struct irq_desc *desc, int cpu)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2221: FILE: kernel/irq/handle.c:107:
+		printk(KERN_ERR "can not alloc kstat_irqs\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2222: FILE: kernel/irq/handle.c:108:
+		BUG_ON(1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2236: FILE: kernel/irq/handle.c:122:
+	[0 ... NR_IRQS_LEGACY-1] = {
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2278: FILE: kernel/irq/handle.c:164:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc: %d %d\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'irq_to_desc', this function's name, in a string
#2278: FILE: kernel/irq/handle.c:164:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc: %d %d\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2279: FILE: kernel/irq/handle.c:165:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc: %d %d\n",
+				irq, NR_IRQS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2293: FILE: kernel/irq/handle.c:179:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc_alloc: %d %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2294: FILE: kernel/irq/handle.c:180:
+		printk(KERN_WARNING "irq >= NR_IRQS in irq_to_desc_alloc: %d %d\n",
+				irq, NR_IRQS);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#2312: FILE: kernel/irq/handle.c:198:
+	printk(KERN_DEBUG "  alloc irq_desc for %d on cpu %d node %d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2313: FILE: kernel/irq/handle.c:199:
+	printk(KERN_DEBUG "  alloc irq_desc for %d on cpu %d node %d\n",
+		 irq, cpu, node);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2315: FILE: kernel/irq/handle.c:201:
+		printk(KERN_ERR "can not alloc irq_desc\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2316: FILE: kernel/irq/handle.c:202:
+		BUG_ON(1);

WARNING:LINE_SPACING: Missing a blank line after declarations
#2370: FILE: kernel/irq/handle.c:448:
+	struct irq_desc *desc = irq_to_desc(irq);
+	return desc->kstat_irqs[cpu];

CHECK:SPACING: No space is necessary after a cast
#2395: FILE: arch/x86/kernel/irq.c:113:
+	i = *(loff_t *) v;

WARNING:LINE_SPACING: Missing a blank line after declarations
#2687: FILE: drivers/pci/msi.c:325:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, entry->msi_attrib.maskbits_mask,

WARNING:LINE_SPACING: Missing a blank line after declarations
#2710: FILE: drivers/pci/msi.c:620:
+		struct irq_desc *desc = irq_to_desc(dev->irq);
+		msi_set_mask_bits(desc, mask, ~mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2725: FILE: include/linux/msi.h:16:
+extern void read_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2726: FILE: include/linux/msi.h:17:
+extern void write_msi_msg_desc(struct irq_desc *desc, struct msi_msg *msg);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2739: FILE: arch/x86/include/asm/io_apic.h:201:
+extern void probe_nr_irqs_gsi(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198905.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 37 warnings, 37 checks, 2433 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000198905.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
