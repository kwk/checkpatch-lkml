ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#68: FILE: mm/slub.c:23:
=20

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#82: FILE: mm/slub.c:1072:
 }
+static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node, =

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:ExV)
#91: FILE: mm/slub.c:1090:
+	*reserve =3D page->reserve;
 	^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#91: FILE: mm/slub.c:1090:
+	*reserve =3D page->reserve;
 	         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#103: FILE: mm/slub.c:1411:
+static inline unsigned long cpu_slab_reserve(struct kmem_cache *s, int cpu=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#105: FILE: mm/slub.c:1412:
+static inline unsigned long cpu_slab_reserve(struct kmem_cache *s, int cpu=
+{

The opening brace should be following the function definitions on the
next line.  For any non-functional block it should be on the same line
as the last construct.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#110: FILE: mm/slub.c:1417:
+cpu_slab_set(struct kmem_cache *s, int cpu, struct page *page, int reserve=
                                                                           ^

ERROR:OPEN_BRACE: that open brace { should be on the previous line
#112: FILE: mm/slub.c:1418:
+cpu_slab_set(struct kmem_cache *s, int cpu, struct page *page, int reserve=
+{

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#114: FILE: mm/slub.c:1420:
+		page =3D (struct page *)((unsigned long)page | 1);

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#114: FILE: mm/slub.c:1420:
+		page =3D (struct page *)((unsigned long)page | 1);
 		     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#116: FILE: mm/slub.c:1422:
+	s->cpu_slab[cpu] =3D page;
 	                 ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#131: FILE: mm/slub.c:1436:
+	struct page *page =3D cpu_slab(s, cpu);
 	                  ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#139: FILE: mm/slub.c:1486:
+	int reserve =3D 0;
 	            ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#152: FILE: mm/slub.c:1497:
+		reserve =3D 1;
 		        ^

CHECK:CAMELCASE: Avoid CamelCase: <SlabDebug>
#163: FILE: mm/slub.c:1509:
+	if (unlikely(SlabDebug(page) || reserve))

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

ERROR:SPACING: spaces required around that ':' (ctx:VxE)
#180: FILE: mm/slub.c:1527:
+alloc_slab:
           ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#181: FILE: mm/slub.c:1528:
+	page =3D new_slab(s, gfpflags, node, &reserve);
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#187: FILE: mm/slub.c:1533:
+		slab =3D cpu_slab(s, cpu);
 		     ^

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 0)
#198: FILE: mm/slub.c:1544:
+		if (slab) {
[...]
@@ -1499,29 +1550,28 @@ new_slab:

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {
 			         ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {
 			            ^

CHECK:SPACING: spaces preferred around that '-' (ctx:WxV)
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {
 			                ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {
 			                                        ^

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {
 			                                           ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: mm/slub.c:1553:
+			if (node =3D=3D -1 || page_to_nid(slab) =3D=3D node) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#215: FILE: mm/slub.c:1559:
+				page =3D slab;
 				     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: mm/slub.c:1574:
+	if (SlabDebug(page) &&
+			!alloc_debug_processing(s, page, object, addr))

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#243: FILE: mm/slub.c:1600:
+	page =3D cpu_slab(s, smp_processor_id());
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#256: FILE: mm/slub.c:1928:
+	page =3D new_slab(kmalloc_caches, gfpflags | GFP_THISNODE, node, &reserve=
 	     ^

ERROR:SPACING: spaces required around that '=' (ctx:VxE)
#256: FILE: mm/slub.c:1928:
+	page =3D new_slab(kmalloc_caches, gfpflags | GFP_THISNODE, node, &reserve=
 	                                                                         ^

ERROR:SPACING: spaces required around that '=' (ctx:WxV)
#266: FILE: mm/slub.c:3242:
+		struct page *page =3D cpu_slab(s, cpu);
 		                  ^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 2 warnings, 5 checks, 198 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000389212.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
