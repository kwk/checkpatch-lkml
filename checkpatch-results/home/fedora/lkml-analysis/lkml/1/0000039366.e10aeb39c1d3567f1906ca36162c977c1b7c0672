WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#24: 
I noticed on some discussion, that it might speedup the FTRACE build process,

WARNING:TYPO_SPELLING: 'wether' may be misspelled - perhaps 'weather'?
#33: 
I'm not sure wether it's worth to continue in this effort,
             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'possitive' may be misspelled - perhaps 'positive'?
#76: 
possitive feedback I consider this as a deadend for me :)
^^^^^^^^^

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#128: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#133: FILE: scripts/mctool.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#142: FILE: scripts/mctool.c:10:
+static char *filename_in      = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#143: FILE: scripts/mctool.c:11:
+static char *filename_out     = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#144: FILE: scripts/mctool.c:12:
+static char *filename_convert = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#145: FILE: scripts/mctool.c:13:
+static char *data_type        = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#146: FILE: scripts/mctool.c:14:
+static char *section_type     = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#147: FILE: scripts/mctool.c:15:
+static char *section_align    = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#148: FILE: scripts/mctool.c:16:
+static char *section_name     = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#149: FILE: scripts/mctool.c:17:
+static int   verbose          = 0;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#151: FILE: scripts/mctool.c:19:
+static bfd       *bfd_in      = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#152: FILE: scripts/mctool.c:20:
+static FILE     *file_out     = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#153: FILE: scripts/mctool.c:21:
+static asymbol **symbol_table = NULL;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#161: FILE: scripts/mctool.c:29:
+		__FUNCTION__, \

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: scripts/mctool.c:34:
+} while(0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'cond' may be better as '(cond)' to avoid precedence issues
#168: FILE: scripts/mctool.c:36:
+#define PRINT_VERBOSE(cond, fmt, args...) \
+do { \
+	if (cond > verbose) \
+		break; \
+	PRINT(fmt, ## args); \
+} while(0)

ERROR:SPACING: space required before the open parenthesis '('
#173: FILE: scripts/mctool.c:41:
+} while(0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#175: FILE: scripts/mctool.c:43:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo* bar" should be "foo *bar"
#192: FILE: scripts/mctool.c:60:
+static struct section_st* section_find(const char *name)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: scripts/mctool.c:64:
+	for(i = 0; i < SAFE_SECTIONS_COUNT; i++) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'usage', this function's name, in a string
#206: FILE: scripts/mctool.c:74:
+	printf("usage: mctool [-vVhtTacon] <object>\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:CODE_INDENT: code indent should use tabs where possible
#267: FILE: scripts/mctool.c:135:
+                case 'h':$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#267: FILE: scripts/mctool.c:135:
+                case 'h':$

ERROR:CODE_INDENT: code indent should use tabs where possible
#269: FILE: scripts/mctool.c:137:
+                        break;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#269: FILE: scripts/mctool.c:137:
+                        break;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#275: FILE: scripts/mctool.c:143:
+        } else {$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#275: FILE: scripts/mctool.c:143:
+        } else {$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#290: FILE: scripts/mctool.c:158:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bfd_in"
#313: FILE: scripts/mctool.c:181:
+	if (bfd_in == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#390: FILE: scripts/mctool.c:258:
+	for (i = 0; i < number_of_symbols; i++) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#397: FILE: scripts/mctool.c:265:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#413: FILE: scripts/mctool.c:281:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#417: FILE: scripts/mctool.c:285:
+		if (ref_sec->ref_sym) {
+

ERROR:SPACING: space required before the open parenthesis '('
#434: FILE: scripts/mctool.c:302:
+	for(i = 0; i < SAFE_SECTIONS_COUNT; i++) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: scripts/mctool.c:306:
+		PRINT_VERBOSE(1, "%s -> %s\n", sec->name,
+			sec->ref_sym ? sec->ref_sym->name : "undef");

CHECK:SPACING: No space is necessary after a cast
#472: FILE: scripts/mctool.c:340:
+	relpp = (arelent **) malloc(relsize);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#484: FILE: scripts/mctool.c:352:
+
+

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "p"
#485: FILE: scripts/mctool.c:353:
+	for (p = relpp; relcount && *p != NULL; p++, relcount--) {

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#486: FILE: scripts/mctool.c:354:
+	for (p = relpp; relcount && *p != NULL; p++, relcount--) {
+

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#490: FILE: scripts/mctool.c:358:
+		if (q->sym_ptr_ptr && *q->sym_ptr_ptr) {
[...]
+		} else {
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around q->sym_ptr_ptr
#491: FILE: scripts/mctool.c:359:
+			sym_name = (*(q->sym_ptr_ptr))->name;

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:TRAILING_WHITESPACE: trailing whitespace
#516: FILE: scripts/mctool.c:384:
+^I^I^Idata_type, sec->ref_sym->name, $

ERROR:CODE_INDENT: code indent should use tabs where possible
#518: FILE: scripts/mctool.c:386:
+        }$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#518: FILE: scripts/mctool.c:386:
+        }$

ERROR:SPACING: space required before the open parenthesis '('
#534: FILE: scripts/mctool.c:402:
+	for(i = 0; i < SAFE_SECTIONS_COUNT; i++) {

ERROR:SPACING: space required before the open parenthesis '('
#596: FILE: scripts/mctool.c:464:
+	} while(0);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039366.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 24 errors, 12 warnings, 13 checks, 811 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000039366.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
