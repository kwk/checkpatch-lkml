WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
an overflow may occur for long files. Also make inode_bmap() return offset in

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#42: FILE: fs/udf/dir.c:116:
+	uint32_t extoffset, elen;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#76: FILE: fs/udf/inode.c:53:
+static struct buffer_head *inode_getblk(struct inode *, sector_t, int *,
 	long *, int *);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/udf/inode.c:357:
+static struct buffer_head * inode_getblk(struct inode * inode, sector_t block,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#84: FILE: fs/udf/inode.c:357:
+static struct buffer_head * inode_getblk(struct inode * inode, sector_t block,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#85: FILE: fs/udf/inode.c:358:
+static struct buffer_head * inode_getblk(struct inode * inode, sector_t block,
 	int *err, long *phys, int *new)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#95: FILE: fs/udf/inode.c:368:
+	uint32_t newblocknum, newblock;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: fs/udf/inode.c:1953:
+int8_t inode_bmap(struct inode *inode, sector_t block, kernel_lb_addr *bloc, uint32_t *extoffset,
+	kernel_lb_addr *eloc, uint32_t *elen, sector_t *offset, struct buffer_head **bh)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#144: FILE: fs/udf/inode.c:1987:
+	uint32_t extoffset, elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#165: FILE: fs/udf/namei.c:159:
+	uint32_t extoffset, elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#183: FILE: fs/udf/namei.c:357:
+	uint32_t extoffset, elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#201: FILE: fs/udf/namei.c:785:
+	uint32_t extoffset, elen;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#222: FILE: fs/udf/truncate.c:128:
+	uint32_t extoffset, elen, nelen = 0, lelen = 0, lenalloc;

WARNING:LONG_LINE: line length of 113 exceeds 100 columns
#235: FILE: fs/udf/truncate.c:143:
+	byte_offset = (offset << inode->i_sb->s_blocksize_bits) + (inode->i_size & (inode->i_sb->s_blocksize-1));

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#235: FILE: fs/udf/truncate.c:143:
+	byte_offset = (offset << inode->i_sb->s_blocksize_bits) + (inode->i_size & (inode->i_sb->s_blocksize-1));
 	                                                                                                    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#271: FILE: fs/udf/truncate.c:261:
+					elen = EXT_NOT_RECORDED_NOT_ALLOCATED | (elen + byte_offset);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#280: FILE: fs/udf/truncate.c:269:
+						((elen + byte_offset + inode->i_sb->s_blocksize - 1) &

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#302: FILE: fs/udf/udfdecl.h:101:
+extern long udf_block_map(struct inode *, sector_t);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#302: FILE: fs/udf/udfdecl.h:101:
+extern long udf_block_map(struct inode *, sector_t);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#302: FILE: fs/udf/udfdecl.h:101:
+extern long udf_block_map(struct inode *, sector_t);

WARNING:LONG_LINE: line length of 146 exceeds 100 columns
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t *' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#303: FILE: fs/udf/udfdecl.h:102:
+extern int8_t inode_bmap(struct inode *, sector_t, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:LONG_LINE: line length of 221 exceeds 100 columns
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

CHECK:CAMELCASE: Avoid CamelCase: <fileIdentDesc>
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct udf_fileident_bh *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fileIdentDesc *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'kernel_lb_addr *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'uint32_t *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'sector_t *' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct buffer_head **' should also have an identifier name
#312: FILE: fs/udf/udfdecl.h:154:
+extern struct fileIdentDesc * udf_fileident_read(struct inode *, loff_t *, struct udf_fileident_bh *, struct fileIdentDesc *, kernel_lb_addr *, uint32_t *, kernel_lb_addr *, uint32_t *, sector_t *, struct buffer_head **);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 26 warnings, 15 checks, 241 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000459943.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
