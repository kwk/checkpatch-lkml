WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#54: 
> > of faulting in the buffered write path.  I think these warnings could be

WARNING:TYPO_SPELLING: 'comming' may be misspelled - perhaps 'coming'?
#80: 
Anyway, I'm not comming up with anything nicer atm, hopefully a nice
                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'chello' may be misspelled - perhaps 'cello'?
#85: 
Not-signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
                                                ^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#270: FILE: arch/ia64/ia32/sys_ia32.c:216:
+	ret = do_mmap(NULL, PAGE_START(start), PAGE_SIZE, prot | PROT_WRITE,
+			flags | MAP_FIXED | MAP_ANONYMOUS, 0);

ERROR:CODE_INDENT: code indent should use tabs where possible
#288: FILE: arch/ia64/ia32/sys_ia32.c:822:
+^I^I^I       ^Iflags | MAP_FIXED, poff);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#288: FILE: arch/ia64/ia32/sys_ia32.c:822:
+^I^I^I       ^Iflags | MAP_FIXED, poff);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#288: FILE: arch/ia64/ia32/sys_ia32.c:822:
+		ret = do_mmap(file, pstart, pend - pstart, prot,
+			       	flags | MAP_FIXED, poff);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#291: FILE: arch/ia64/ia32/sys_ia32.c:825:
+		ret = do_mmap(NULL, pstart, pend - pstart,
+			prot | ((flags & MAP_ANONYMOUS) ? 0 : PROT_WRITE),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1086: FILE: fs/binfmt_flat.c:546:
+		realdatastart = do_mmap_locked(0, 0, len,
 			PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE, 0);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1095: FILE: fs/binfmt_flat.c:598:
+		textpos = do_mmap_locked(0, 0, len,
 			PROT_READ | PROT_EXEC | PROT_WRITE, MAP_PRIVATE, 0);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1143: FILE: fs/nfs/file.c:45:
+nfs_file_mmap_prepare(struct file * file, unsigned long addr, unsigned long len,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1144: FILE: fs/nfs/file.c:46:
+nfs_file_mmap_prepare(struct file * file, unsigned long addr, unsigned long len,
+		unsigned long prot, unsigned long flags, unsigned long pgoff);

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1161: FILE: fs/nfs/file.c:277:
+nfs_file_mmap_prepare(struct file * file, unsigned long addr, unsigned long len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1162: FILE: fs/nfs/file.c:278:
+nfs_file_mmap_prepare(struct file * file, unsigned long addr, unsigned long len,
+		unsigned long prot, unsigned long flags, unsigned long pgoff)

WARNING:LONG_LINE: line length of 145 exceeds 100 columns
#1199: FILE: include/linux/fs.h:1175:
+	int (*mmap_prepare) (struct file *, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:SPACING: Unnecessary space before function pointer arguments
#1199: FILE: include/linux/fs.h:1175:
+	int (*mmap_prepare) (struct file *, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#1199: FILE: include/linux/fs.h:1175:
+	int (*mmap_prepare) (struct file *, unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long pgoff);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1211: FILE: include/linux/mm.h:983:
+extern unsigned long do_mmap_pgoff_locked(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1211: FILE: include/linux/mm.h:983:
+extern unsigned long do_mmap_pgoff_locked(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1224: FILE: include/linux/mm.h:996:
+static inline unsigned long do_mmap_locked(struct file *file, unsigned long addr,
 	unsigned long len, unsigned long prot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1233: FILE: include/linux/mm.h:1004:
+		ret = do_mmap_pgoff_locked(file, addr, len, prot,
+				flag, offset >> PAGE_SHIFT);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1238: FILE: include/linux/mm.h:1009:
+extern unsigned long do_mmap(struct file *file, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1239: FILE: include/linux/mm.h:1010:
+extern unsigned long do_mmap(struct file *file, unsigned long addr,
+	unsigned long len, unsigned long prot,

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#1254: FILE: ipc/shm.c:1015:
+	user_addr = do_mmap_locked (file, addr, size, prot, flags, 0);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1269: FILE: mm/mmap.c:891:
+static unsigned long __do_mmap_pgoff_locked(

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1270: FILE: mm/mmap.c:892:
+		struct file * file, unsigned long addr,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1281: FILE: mm/mmap.c:1031:
+unsigned long do_mmap_pgoff_locked(struct file * file, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1282: FILE: mm/mmap.c:1032:
+unsigned long do_mmap_pgoff_locked(struct file * file, unsigned long addr,
+		unsigned long len, unsigned long prot,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#1290: FILE: mm/mmap.c:1040:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1291: FILE: mm/mmap.c:1041:
+unsigned long do_mmap_pgoff(struct file * file, unsigned long addr,
+			unsigned long len, unsigned long prot,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1313: FILE: mm/mmap.c:1063:
+unsigned long do_mmap(struct file *file, unsigned long addr,
+		unsigned long len, unsigned long prot,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 8 warnings, 17 checks, 935 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000359091.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
