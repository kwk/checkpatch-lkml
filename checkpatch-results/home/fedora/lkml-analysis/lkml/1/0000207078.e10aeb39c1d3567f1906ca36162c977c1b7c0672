WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#63: 
   git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip.git cpus4096

WARNING:NEW_TYPEDEFS: do not add new typedefs
#110: FILE: include/linux/cpumask.h:144:
+typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#110: FILE: include/linux/cpumask.h:144:
+typedef struct cpumask { DECLARE_BITMAP(bits, NR_CPUS); } cpumask_t;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#119: FILE: include/linux/cpumask.h:534:
+ * The older versions will be implemented in terms of these, then deleted. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#125: FILE: include/linux/cpumask.h:540:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD	\
 	                       ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#125: FILE: include/linux/cpumask.h:540:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD	\

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#135: FILE: include/linux/cpumask.h:550:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-2] = ~0UL,		\
 	                             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#136: FILE: include/linux/cpumask.h:551:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD		\
 	                       ^

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#136: FILE: include/linux/cpumask.h:551:
+	[BITS_TO_LONGS(NR_CPUS)-1] = CPU_MASK_LAST_WORD		\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#159: FILE: include/linux/cpumask.h:574:
+#define for_each_cpu(cpu, mask)			\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#161: FILE: include/linux/cpumask.h:576:
+#define for_each_cpu_and(cpu, mask, and)	\
+	for ((cpu) = 0; (cpu) < 1; (cpu)++, (void)mask, (void)and)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#187: FILE: include/linux/cpumask.h:602:
+	return find_next_bit(cpumask_bits(srcp), nr_cpumask_bits, n+1);
 	                                                           ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#202: FILE: include/linux/cpumask.h:617:
+	return find_next_zero_bit(cpumask_bits(srcp), nr_cpumask_bits, n+1);
 	                                                                ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#208: FILE: include/linux/cpumask.h:623:
+#define for_each_cpu(cpu, mask)				\
+	for ((cpu) = -1;				\
+		(cpu) = cpumask_next((cpu), (mask)),	\
+		(cpu) < nr_cpu_ids;)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'cpu' - possible side-effects?
#212: FILE: include/linux/cpumask.h:627:
+#define for_each_cpu_and(cpu, mask, and)				\
+	for ((cpu) = -1;						\
+		(cpu) = cpumask_next_and((cpu), (mask), (and)),		\
+		(cpu) < nr_cpu_ids;)

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#220: FILE: include/linux/cpumask.h:635:
+	[0 ... BITS_TO_LONGS(NR_CPUS)-1] = 0UL			\
 	                             ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: include/linux/cpumask.h:714:
+	bitmap_and(cpumask_bits(dstp), cpumask_bits(src1p),
+				       cpumask_bits(src2p), nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#312: FILE: include/linux/cpumask.h:727:
+	bitmap_or(cpumask_bits(dstp), cpumask_bits(src1p),
+				      cpumask_bits(src2p), nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#326: FILE: include/linux/cpumask.h:741:
+	bitmap_xor(cpumask_bits(dstp), cpumask_bits(src1p),
+				       cpumask_bits(src2p), nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: include/linux/cpumask.h:755:
+	bitmap_andnot(cpumask_bits(dstp), cpumask_bits(src1p),
+					  cpumask_bits(src2p), nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#352: FILE: include/linux/cpumask.h:767:
+	bitmap_complement(cpumask_bits(dstp), cpumask_bits(srcp),
+					      nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#361: FILE: include/linux/cpumask.h:776:
+static inline bool cpumask_equal(const struct cpumask *src1p,
+				const struct cpumask *src2p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#373: FILE: include/linux/cpumask.h:788:
+static inline bool cpumask_intersects(const struct cpumask *src1p,
+				     const struct cpumask *src2p)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: include/linux/cpumask.h:843:
+	bitmap_shift_right(cpumask_bits(dstp), cpumask_bits(srcp), n,
+					       nr_cpumask_bits);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#441: FILE: include/linux/cpumask.h:856:
+	bitmap_shift_left(cpumask_bits(dstp), cpumask_bits(srcp), n,
+					      nr_cpumask_bits);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'bitmap' - possible side-effects?
#491: FILE: include/linux/cpumask.h:906:
+#define to_cpumask(bitmap)						\
+	((struct cpumask *)(1 ? (bitmap)				\
+			    : (void *)sizeof(__check_is_bitmap(bitmap))))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#508: FILE: include/linux/cpumask.h:923:
+	 * can be nr_cpumask_bits */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#509: FILE: include/linux/cpumask.h:924:
+	return BITS_TO_LONGS(NR_CPUS) * sizeof(long);

WARNING:NEW_TYPEDEFS: do not add new typedefs
#529: FILE: include/linux/cpumask.h:944:
+typedef struct cpumask *cpumask_var_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#536: FILE: include/linux/cpumask.h:951:
+typedef struct cpumask cpumask_var_t[1];

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#559: FILE: include/linux/cpumask.h:974:
+ * so it has to refer to an address rather than a pointer. */

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#560: FILE: include/linux/cpumask.h:975:
+extern const DECLARE_BITMAP(cpu_all_bits, NR_CPUS);

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#662: FILE: kernel/cpu.c:503:
+const DECLARE_BITMAP(cpu_all_bits, NR_CPUS) = CPU_BITS_ALL;

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#663: FILE: kernel/cpu.c:504:
+EXPORT_SYMBOL(cpu_all_bits);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#675: FILE: kernel/workqueue.c:976:
+	long (*fn)(void *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:BRACES: braces {} should be used on all arms of this statement
#704: FILE: kernel/workqueue.c:1005:
+	if (unlikely(!cpu_online(cpu)))
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#706: FILE: kernel/workqueue.c:1007:
+	else {

CHECK:BRACES: braces {} should be used on all arms of this statement
#777: FILE: lib/cpumask.c:80:
+	if (likely(slab_is_available()))
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#779: FILE: lib/cpumask.c:82:
+	else {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#781: FILE: lib/cpumask.c:84:
+		printk(KERN_ERR

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_cpumask_var', this function's name, in a string
#782: FILE: lib/cpumask.c:85:
+			"=> alloc_cpumask_var: kmalloc not available!\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#789: FILE: lib/cpumask.c:92:
+		printk(KERN_ERR "=> alloc_cpumask_var: failed!\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'alloc_cpumask_var', this function's name, in a string
#789: FILE: lib/cpumask.c:92:
+		printk(KERN_ERR "=> alloc_cpumask_var: failed!\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "mask"
#793: FILE: lib/cpumask.c:96:
+	return *mask != NULL;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 19 warnings, 25 checks, 692 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000207078.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
