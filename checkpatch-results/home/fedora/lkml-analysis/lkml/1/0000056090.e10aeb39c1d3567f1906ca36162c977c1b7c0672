WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#68: FILE: drivers/isdn/gigaset/asyncdata.c:46:
+static unsigned cmd_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#68: FILE: drivers/isdn/gigaset/asyncdata.c:46:
+static unsigned cmd_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#80: FILE: drivers/isdn/gigaset/asyncdata.c:50:
+	unsigned cbytes = cs->cbytes;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#81: FILE: drivers/isdn/gigaset/asyncdata.c:51:
+	unsigned procbytes = 0;

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#95: FILE: drivers/isdn/gigaset/asyncdata.c:65:
+			/* --v-- fall through --v-- */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#152: FILE: drivers/isdn/gigaset/asyncdata.c:100:
+			/* --v-- fall through --v-- */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#177: FILE: drivers/isdn/gigaset/asyncdata.c:118:
+static unsigned lock_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#177: FILE: drivers/isdn/gigaset/asyncdata.c:118:
+static unsigned lock_loop(unsigned numbytes, struct inbuf_t *inbuf)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!bcs->skb"
#204: FILE: drivers/isdn/gigaset/asyncdata.c:140:
+	if (bcs->skb == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#205: FILE: drivers/isdn/gigaset/asyncdata.c:141:
+	if (bcs->skb == NULL) {
+		dev_warn(cs->dev, "could not allocate new skb\n");

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: drivers/isdn/gigaset/asyncdata.c:155:
+static unsigned hdlc_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#222: FILE: drivers/isdn/gigaset/asyncdata.c:155:
+static unsigned hdlc_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#232: FILE: drivers/isdn/gigaset/asyncdata.c:163:
+	unsigned procbytes = 0;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#418: FILE: drivers/isdn/gigaset/asyncdata.c:284:
+				bcs->skb = skb = NULL;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#456: FILE: drivers/isdn/gigaset/asyncdata.c:304:
+static unsigned iraw_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#456: FILE: drivers/isdn/gigaset/asyncdata.c:304:
+static unsigned iraw_loop(unsigned numbytes, struct inbuf_t *inbuf)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#465: FILE: drivers/isdn/gigaset/asyncdata.c:311:
+	unsigned procbytes = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#631: FILE: drivers/isdn/gigaset/asyncdata.c:429:
+	unsigned numbytes, procbytes;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#902: FILE: drivers/isdn/gigaset/gigaset.h:484:
+	int dle;			/* !=0 if DLE mode is active
+					   (ZDLE=1 received -- M10x only) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#902: FILE: drivers/isdn/gigaset/gigaset.h:484:
+					   (ZDLE=1 received -- M10x only) */

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kmalloc(sizeof(*cb)...) over kmalloc(sizeof(struct cmdbuf_t)...)
#1049: FILE: drivers/isdn/gigaset/usb-gigaset.c:512:
+	cb = kmalloc(sizeof(struct cmdbuf_t) + len, GFP_ATOMIC);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:CAMELCASE: Avoid CamelCase: <bulk_out_endpointAddr>
#1070: FILE: drivers/isdn/gigaset/usb-gigaset.c:650:
+						  ucs->bulk_out_endpointAddr &

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <bInterval>
#1103: FILE: drivers/isdn/gigaset/usb-gigaset.c:776:
+			 cs, endpoint->bInterval);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1126: FILE: drivers/isdn/gigaset/usb-gigaset.c:803:
+	ucs->rcvbuf = ucs->bulk_out_buffer = NULL;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1139: FILE: drivers/isdn/gigaset/usb-gigaset.c:835:
+	ucs->rcvbuf = ucs->bulk_out_buffer = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!driver"
#1153: FILE: drivers/isdn/gigaset/usb-gigaset.c:920:
+	if (driver == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 8 checks, 1063 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000056090.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
