WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#67: FILE: arch/sh/drivers/dma/Kconfig:9:
+config SH_DMA_API
+	depends on SH_DMA
+	bool "SuperH DMA API support"
+	default n
+	help
+	  SH_DMA_API always enabled DMA API of used SuperH.
+	  If you want to use DMA ENGINE, you must not enable this.
+	  Please enable DMA_ENGINE and SH_DMAE.
+

Kconfig symbols should have a help text which fully describes
it.

CHECK:BIT_MACRO: Prefer using the BIT macro
#102: FILE: arch/sh/include/asm/dma-sh.h:120:
+#define SHDMA_MIX_IRQ	(1 << 1)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#103: FILE: arch/sh/include/asm/dma-sh.h:121:
+#define SHDMA_DMAOR1	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#104: FILE: arch/sh/include/asm/dma-sh.h:122:
+#define SHDMA_DMAE1		(1 << 3)

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#120: FILE: drivers/dma/Kconfig:84:
+config SH_DMAE
+	tristate "Renesas SuperH DMAC support"
+	depends on SUPERH && SH_DMA
+	depends on !SH_DMA_API
+	select DMA_ENGINE
+	help
+	  There is SH_DMA_API which is another DMA implementation in SuperH.
+	  When you want to use this, please enable SH_DMA_API.
+

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#143: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#148: FILE: drivers/dma/shdma.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:LINE_SPACING: Missing a blank line after declarations
#214: FILE: drivers/dma/shdma.c:67:
+	u32 chcr = RS_DEFAULT; /* default is DUAL mode */
+	sh_dmae_writel(sh_chan, chcr, CHCR);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#218: FILE: drivers/dma/shdma.c:71:
+ * Reset DMA controler
              ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#235: FILE: drivers/dma/shdma.c:88:
+	dmaor = (dmaor_read_reg(id)|DMAOR_INIT);
 	                           ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_KERN_LEVEL: Possible unnecessary KERN_ERR
#239: FILE: drivers/dma/shdma.c:92:
+		pr_warning(KERN_ERR "dma-sh: Can't initialize DMAOR.\n");

WARNING:LINE_SPACING: Missing a blank line after declarations
#248: FILE: drivers/dma/shdma.c:101:
+	u32 chcr = sh_dmae_readl(sh_chan, CHCR);
+	if (chcr & CHCR_DE) {

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#270: FILE: drivers/dma/shdma.c:123:
+    u32 chcr = sh_dmae_readl(sh_chan, CHCR);$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#272: FILE: drivers/dma/shdma.c:125:
+    chcr |= (CHCR_DE|CHCR_IE);$

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#272: FILE: drivers/dma/shdma.c:125:
+    chcr |= (CHCR_DE|CHCR_IE);
                     ^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#278: FILE: drivers/dma/shdma.c:131:
+    u32 chcr = sh_dmae_readl(sh_chan, CHCR);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#279: FILE: drivers/dma/shdma.c:132:
+    u32 chcr = sh_dmae_readl(sh_chan, CHCR);
+    chcr &= ~(CHCR_DE | CHCR_TE | CHCR_IE);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#279: FILE: drivers/dma/shdma.c:132:
+    chcr &= ~(CHCR_DE | CHCR_TE | CHCR_IE);$

WARNING:LINE_SPACING: Missing a blank line after declarations
#303: FILE: drivers/dma/shdma.c:156:
+	int ret = dmae_is_idle(sh_chan);
+	if (ret)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: drivers/dma/shdma.c:184:
+	sh_dmae_writew(sh_chan,
+		(val << shift) | (dmars & (shift ? 0xFF00 : 0x00FF)),

WARNING:LINE_SPACING: Missing a blank line after declarations
#365: FILE: drivers/dma/shdma.c:218:
+	struct sh_desc *desc_sw;
+	desc_sw = kzalloc(sizeof(struct sh_desc), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*desc_sw)...) over kzalloc(sizeof(struct sh_desc)...)
#365: FILE: drivers/dma/shdma.c:218:
+	desc_sw = kzalloc(sizeof(struct sh_desc), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: drivers/dma/shdma.c:221:
+		dma_async_tx_descriptor_init(&desc_sw->async_tx,
+						&sh_chan->common);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#400: FILE: drivers/dma/shdma.c:253:
+static struct dma_async_tx_descriptor *sh_dmae_prep_memcpy(

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#423: FILE: drivers/dma/shdma.c:276:
+			dev_err(sh_chan->dev,
+					"No free memory for link descriptor\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#483: FILE: drivers/dma/shdma.c:336:
+		dev_dbg(sh_chan->dev, "link descriptor %p will be recycle.\n",
+				desc);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#489: FILE: drivers/dma/shdma.c:342:
+			dev_dbg(sh_chan->dev, "link descriptor %p callback\n",
+					desc);

WARNING:TYPO_SPELLING: 'desciptor' may be misspelled - perhaps 'descriptor'?
#509: FILE: drivers/dma/shdma.c:362:
+	/* Find the first un-transfer desciptor */
 	                              ^^^^^^^^^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#512: FILE: drivers/dma/shdma.c:365:
+		(ld_node != &sh_chan->ld_queue)
+			&& (to_sh_desc(ld_node)->mark == DESC_COMP);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#534: FILE: drivers/dma/shdma.c:387:
+static enum dma_status sh_dmae_is_complete(struct dma_chan *chan,
+					dma_cookie_t cookie,

WARNING:LINE_SPACING: Missing a blank line after declarations
#606: FILE: drivers/dma/shdma.c:459:
+		int cnt = 0;
+		switch (irq) {

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#620: FILE: drivers/dma/shdma.c:473:
+		/* reset dma controler */
 		             ^^^^^^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#638: FILE: drivers/dma/shdma.c:491:
+	struct sh_dmae_chan *sh_chan = (struct sh_dmae_chan *)data;
+	sh_dmae_chan_ld_cleanup(sh_chan);

WARNING:LINE_SPACING: Missing a blank line after declarations
#644: FILE: drivers/dma/shdma.c:497:
+	unsigned int irq = 0;
+	if (id < ARRAY_SIZE(dmte_irq_map))

WARNING:HOTPLUG_SECTION: Using __devinit is unnecessary
#649: FILE: drivers/dma/shdma.c:502:
+static int __devinit sh_dmae_chan_probe(struct sh_dmae_device *shdev, int id)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_sh_chan)...) over kzalloc(sizeof(struct sh_dmae_chan)...)
#657: FILE: drivers/dma/shdma.c:510:
+	new_sh_chan = kzalloc(sizeof(struct sh_dmae_chan), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#659: FILE: drivers/dma/shdma.c:512:
+	if (!new_sh_chan) {
+		dev_err(shdev->dev, "No free memory for allocating "

WARNING:SPLIT_STRING: quoted string split across lines
#660: FILE: drivers/dma/shdma.c:513:
+		dev_err(shdev->dev, "No free memory for allocating "
+				"dma channels!\n");

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#670: FILE: drivers/dma/shdma.c:523:
+	tasklet_init(&new_sh_chan->tasklet, dmae_do_tasklet,
+			(unsigned long)new_sh_chan);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: drivers/dma/shdma.c:538:
+	list_add_tail(&new_sh_chan->common.device_node,
+			&shdev->common.channels);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#699: FILE: drivers/dma/shdma.c:552:
+	snprintf(new_sh_chan->dev_id, sizeof(new_sh_chan->dev_id),
+			"sh-dmae%d", new_sh_chan->id);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: drivers/dma/shdma.c:556:
+	err = request_irq(irq, &sh_dmae_interrupt,
+		irqflags, new_sh_chan->dev_id, new_sh_chan);

WARNING:SPLIT_STRING: quoted string split across lines
#706: FILE: drivers/dma/shdma.c:559:
+		dev_err(shdev->dev, "DMA channel %d request_irq error "
+			"with return %d\n", id, err);

WARNING:LINE_SPACING: Missing a blank line after declarations
#726: FILE: drivers/dma/shdma.c:579:
+			struct sh_dmae_chan *shchan = shdev->chan[i];
+			if (!(shdev->pdata.mode & SHDMA_MIX_IRQ))

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*shdev)...) over kzalloc(sizeof(struct sh_dmae_device)...)
#748: FILE: drivers/dma/shdma.c:601:
+	shdev = kzalloc(sizeof(struct sh_dmae_device), GFP_KERNEL);

WARNING:OOM_MESSAGE: Possible unnecessary 'out of memory' message
#750: FILE: drivers/dma/shdma.c:603:
+	if (!shdev) {
+		dev_err(&pdev->dev, "No enough memory\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#761: FILE: drivers/dma/shdma.c:614:
+	memcpy(&shdev->pdata, pdev->dev.platform_data,
+			sizeof(struct sh_dmae_pdata));

WARNING:TYPO_SPELLING: 'controler' may be misspelled - perhaps 'controller'?
#763: FILE: drivers/dma/shdma.c:616:
+	/* reset dma controler */
 	             ^^^^^^^^^

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#780: FILE: drivers/dma/shdma.c:633:
+	shdev->common.device_alloc_chan_resources
+		= sh_dmae_alloc_chan_resources;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#798: FILE: drivers/dma/shdma.c:651:
+		err = request_irq(eirq[ecnt], sh_dmae_err,
+			irqflags, "DMAC Address Error", shdev);

WARNING:TYPO_SPELLING: 'erro' may be misspelled - perhaps 'error'?
#801: FILE: drivers/dma/shdma.c:654:
+				"erro (irq %d) with return %d\n",
 				 ^^^^

WARNING:SPLIT_STRING: quoted string split across lines
#801: FILE: drivers/dma/shdma.c:654:
+			dev_err(&pdev->dev, "DMA device request_irq"
+				"erro (irq %d) with return %d\n",

WARNING:MISSING_SPACE: break quoted strings at a space character
#801: FILE: drivers/dma/shdma.c:654:
+			dev_err(&pdev->dev, "DMA device request_irq"
+				"erro (irq %d) with return %d\n",

WARNING:LINE_SPACING: Missing a blank line after declarations
#863: FILE: drivers/dma/shdma.c:716:
+	struct sh_dmae_device *shdev = platform_get_drvdata(pdev);
+	sh_dmae_ctl_stop(0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#897: FILE: drivers/dma/shdma.h:1:
+/*

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 32 warnings, 23 checks, 874 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156105.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
