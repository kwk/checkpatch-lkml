WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#59: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#64: FILE: fs/gfs2/aops.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#101: FILE: fs/gfs2/aops.c:38:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#166: FILE: fs/gfs2/aops.c:103:
+	unsigned offset;

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#173: FILE: fs/gfs2/aops.c:110:
+	offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                  ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#228: FILE: fs/gfs2/aops.c:165:
+				     (1 << BH_Dirty)|(1 << BH_Uptodate));
 				                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#230: FILE: fs/gfs2/aops.c:167:
+	gfs2_page_add_databufs(ip, page, 0, inode->i_sb->s_blocksize-1);
 	                                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#255: FILE: fs/gfs2/aops.c:192:
+					     (1 << BH_Dirty)|(1 << BH_Uptodate));
 					                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#257: FILE: fs/gfs2/aops.c:194:
+		gfs2_page_add_databufs(ip, page, 0, sdp->sd_vfs->s_blocksize-1);
 		                                                            ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#333: FILE: fs/gfs2/aops.c:270:
+	unsigned offset = i_size & (PAGE_CACHE_SIZE-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#333: FILE: fs/gfs2/aops.c:270:
+	unsigned offset = i_size & (PAGE_CACHE_SIZE-1);
 	                                           ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#334: FILE: fs/gfs2/aops.c:271:
+	unsigned nrblocks = nr_pages * (PAGE_CACHE_SIZE/inode->i_sb->s_blocksize);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#334: FILE: fs/gfs2/aops.c:271:
+	unsigned nrblocks = nr_pages * (PAGE_CACHE_SIZE/inode->i_sb->s_blocksize);
 	                                               ^

ERROR:SPACING: space required before the open parenthesis '('
#343: FILE: fs/gfs2/aops.c:280:
+	for(i = 0; i < nr_pages; i++) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'wbc->nr_to_write'
#377: FILE: fs/gfs2/aops.c:314:
+		if (ret || (--(wbc->nr_to_write) <= 0))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#384: FILE: fs/gfs2/aops.c:321:
+
+	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:TABSTOP: Statements should start on a tabstop
#432: FILE: fs/gfs2/aops.c:369:
+	 while (!done && (index <= end) &&

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#435: FILE: fs/gfs2/aops.c:372:
+					       min(end - index, (pgoff_t)PAGEVEC_SIZE-1) + 1))) {
 					                                             ^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#462: FILE: fs/gfs2/aops.c:399:
+
+

ERROR:TRAILING_WHITESPACE: trailing whitespace
#467: FILE: fs/gfs2/aops.c:404:
+ * $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#526: FILE: fs/gfs2/aops.c:463:
+
+

ERROR:CODE_INDENT: code indent should use tabs where possible
#604: FILE: fs/gfs2/aops.c:541:
+                       char *buf, loff_t *pos, unsigned size)$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#604: FILE: fs/gfs2/aops.c:541:
+                       char *buf, loff_t *pos, unsigned size)$

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#604: FILE: fs/gfs2/aops.c:541:
+                       char *buf, loff_t *pos, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#608: FILE: fs/gfs2/aops.c:545:
+	unsigned offset = *pos & (PAGE_CACHE_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#609: FILE: fs/gfs2/aops.c:546:
+	unsigned copied = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#610: FILE: fs/gfs2/aops.c:547:
+	unsigned amt;

ERROR:SPACING: space required before the open parenthesis '('
#629: FILE: fs/gfs2/aops.c:566:
+	} while(copied < size);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#649: FILE: fs/gfs2/aops.c:586:
+			  struct list_head *pages, unsigned nr_pages)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#685: FILE: fs/gfs2/aops.c:622:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#685: FILE: fs/gfs2/aops.c:622:
+			    loff_t pos, unsigned len, unsigned flags,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#695: FILE: fs/gfs2/aops.c:632:
+	unsigned from = pos & (PAGE_CACHE_SIZE - 1);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#696: FILE: fs/gfs2/aops.c:633:
+	unsigned to = from + len;

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#735: FILE: fs/gfs2/aops.c:672:
+				 PAGE_CACHE_SIZE/sdp->sd_sb.sb_bsize);
 				                ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#824: FILE: fs/gfs2/aops.c:761:
+				  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#824: FILE: fs/gfs2/aops.c:761:
+				  loff_t pos, unsigned len, unsigned copied,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#834: FILE: fs/gfs2/aops.c:771:
+	BUG_ON((pos + len) > (dibh->b_size - sizeof(struct gfs2_dinode)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#883: FILE: fs/gfs2/aops.c:820:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#883: FILE: fs/gfs2/aops.c:820:
+			  loff_t pos, unsigned len, unsigned copied,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#895: FILE: fs/gfs2/aops.c:832:
+	BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!gfs2_glock_is_locked_by_me"
#895: FILE: fs/gfs2/aops.c:832:
+	BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:TYPO_SPELLING: 'dirtyed' may be misspelled - perhaps 'dirtied'?
#940: FILE: fs/gfs2/aops.c:877:
+ * Returns: 1 if it dirtyed the page, or 0 otherwise
                     ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#942: FILE: fs/gfs2/aops.c:879:
+ $

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#942: FILE: fs/gfs2/aops.c:879:
+ $

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1004: FILE: fs/gfs2/aops.c:941:
+	BUG_ON(!PageLocked(page));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1010: FILE: fs/gfs2/aops.c:947:
+	bh = head = page_buffers(page);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1046: FILE: fs/gfs2/aops.c:983:
+
+

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1105: FILE: fs/gfs2/aops.c:1042:
+	head = bh = page_buffers(page);

ERROR:SPACING: space required before the open parenthesis '('
#1115: FILE: fs/gfs2/aops.c:1052:
+	} while(bh != head);

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1118: FILE: fs/gfs2/aops.c:1055:
+	head = bh = page_buffers(page);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1206: FILE: fs/gfs2/aops.c:1143:
+		BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1227: FILE: fs/gfs2/dentry.c:1:
+/*

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1254: FILE: fs/gfs2/dentry.c:28:
+ * @nd:
     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1262: FILE: fs/gfs2/dentry.c:36:
+static int gfs2_drevalidate(struct dentry *dentry, struct nameidata *nd)
                                                                      ^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "gfs2_glock_is_locked_by_me"
#1282: FILE: fs/gfs2/dentry.c:56:
+	had_lock = (gfs2_glock_is_locked_by_me(dip->i_gl) != NULL);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1287: FILE: fs/gfs2/dentry.c:61:
+^I} $

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1347: FILE: fs/gfs2/export.c:1:
+/*

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1411: FILE: fs/gfs2/export.c:65:
+	iput(inode);
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1492: FILE: fs/gfs2/export.c:146:
+static struct dentry *gfs2_get_dentry(struct super_block *sb,
+		struct gfs2_inum_host *inum)

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1506: FILE: fs/gfs2/export.c:160:
+			iput(inode);
 			^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1538: FILE: fs/gfs2/export.c:192:
+	inode = gfs2_inode_lookup(sb, DT_UNKNOWN,
+					inum->no_addr,

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1547: FILE: fs/gfs2/export.c:201:
+		iput(inode);
 		^^^^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1552: FILE: fs/gfs2/export.c:206:
+^Iif (inode->i_state & I_NEW) $

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1556: FILE: fs/gfs2/export.c:210:
+		iput(inode);
 		^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#1562: FILE: fs/gfs2/export.c:216:
+		iput(inode);
 		^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1586: FILE: fs/gfs2/export.c:240:
+static struct dentry *gfs2_fh_to_dentry(struct super_block *sb, struct fid *fid,
+		int fh_len, int fh_type)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1606: FILE: fs/gfs2/export.c:260:
+static struct dentry *gfs2_fh_to_parent(struct super_block *sb, struct fid *fid,
+		int fh_len, int fh_type)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1638: FILE: fs/gfs2/file.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1661: FILE: fs/gfs2/file.c:24:
+#include <asm/uaccess.h>

CHECK:BRACES: braces {} should be used on all arms of this statement
#1698: FILE: fs/gfs2/file.c:61:
+	if (origin == 2) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1705: FILE: fs/gfs2/file.c:68:
+	} else

WARNING:LINE_SPACING: Missing a blank line after declarations
#1757: FILE: fs/gfs2/file.c:120:
+	u32 res = 0;
+	while(val) {

ERROR:SPACING: space required before the open parenthesis '('
#1757: FILE: fs/gfs2/file.c:120:
+	while(val) {

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Sync>
#1776: FILE: fs/gfs2/file.c:139:
+	[gfs2fl_Sync] = FS_SYNC_FL,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_Immutable>
#1777: FILE: fs/gfs2/file.c:140:
+	[gfs2fl_Immutable] = FS_IMMUTABLE_FL,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_AppendOnly>
#1778: FILE: fs/gfs2/file.c:141:
+	[gfs2fl_AppendOnly] = FS_APPEND_FL,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_NoAtime>
#1779: FILE: fs/gfs2/file.c:142:
+	[gfs2fl_NoAtime] = FS_NOATIME_FL,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_ExHash>
#1780: FILE: fs/gfs2/file.c:143:
+	[gfs2fl_ExHash] = FS_INDEX_FL,

CHECK:CAMELCASE: Avoid CamelCase: <gfs2fl_InheritJdata>
#1781: FILE: fs/gfs2/file.c:144:
+	[gfs2fl_InheritJdata] = FS_JOURNAL_DATA_FL,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1784: FILE: fs/gfs2/file.c:147:
+static int gfs2_get_flags(struct file *filp, u32 __user *ptr)
                                        ^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1813: FILE: fs/gfs2/file.c:176:
+	flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
 	                 ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1813: FILE: fs/gfs2/file.c:176:
+	flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
 	                          ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1813: FILE: fs/gfs2/file.c:176:
+	flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
 	                                      ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#1813: FILE: fs/gfs2/file.c:176:
+	flags &= ~(S_SYNC|S_APPEND|S_IMMUTABLE|S_NOATIME|S_DIRSYNC);
 	                                                ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1826: FILE: fs/gfs2/file.c:189:
+#define GFS2_FLAGS_USER_SET (GFS2_DIF_JDATA|			\
                                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1827: FILE: fs/gfs2/file.c:190:
+			     GFS2_DIF_IMMUTABLE|		\
 			                       ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1828: FILE: fs/gfs2/file.c:191:
+			     GFS2_DIF_APPENDONLY|		\
 			                        ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1829: FILE: fs/gfs2/file.c:192:
+			     GFS2_DIF_NOATIME|			\
 			                     ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1830: FILE: fs/gfs2/file.c:193:
+			     GFS2_DIF_SYNC|			\
 			                  ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxE)
#1831: FILE: fs/gfs2/file.c:194:
+			     GFS2_DIF_SYSTEM|			\
 			                    ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1841: FILE: fs/gfs2/file.c:204:
+static int do_gfs2_set_flags(struct file *filp, u32 reqflags, u32 mask)
                                           ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1912: FILE: fs/gfs2/file.c:275:
+static int gfs2_set_flags(struct file *filp, u32 __user *ptr)
                                        ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1916: FILE: fs/gfs2/file.c:279:
+	u32 fsflags, gfsflags;
+	if (get_user(fsflags, ptr))

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1922: FILE: fs/gfs2/file.c:285:
+		return do_gfs2_set_flags(filp, gfsflags, ~0);
 		                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1924: FILE: fs/gfs2/file.c:287:
+	return do_gfs2_set_flags(filp, gfsflags, ~GFS2_DIF_JDATA);
 	                         ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1927: FILE: fs/gfs2/file.c:290:
+static long gfs2_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
                                     ^^^^

ERROR:SPACING: space required before the open parenthesis '('
#1929: FILE: fs/gfs2/file.c:292:
+	switch(cmd) {

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1931: FILE: fs/gfs2/file.c:294:
+		return gfs2_get_flags(filp, (u32 __user *)arg);
 		                      ^^^^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#1933: FILE: fs/gfs2/file.c:296:
+		return gfs2_set_flags(filp, (u32 __user *)arg);
 		                      ^^^^

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#1945: FILE: fs/gfs2/file.c:308:
+ * If some of the blocks are already allocated, thats ok too.
                                                 ^^^^^

ERROR:SPACING: space required before the open parenthesis '('
#1963: FILE: fs/gfs2/file.c:326:
+	} while(size > 0);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!al"
#2003: FILE: fs/gfs2/file.c:366:
+	if (al == NULL)

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2059: FILE: fs/gfs2/file.c:422:
+static struct vm_operations_struct gfs2_vm_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*fp)...) over kzalloc(sizeof(struct gfs2_file)...)
#2111: FILE: fs/gfs2/file.c:474:
+	fp = kzalloc(sizeof(struct gfs2_file), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:TYPO_SPELLING: 'thats' may be misspelled - perhaps 'that's'?
#2181: FILE: fs/gfs2/file.c:544:
+ * the inode itself. It does also try and write the data, but thats
                                                               ^^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#2191: FILE: fs/gfs2/file.c:554:
+	int sync_state = inode->i_state & (I_DIRTY_SYNC|I_DIRTY_DATASYNC);
 	                                               ^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2427: FILE: fs/gfs2/inode.h:18:
+extern int gfs2_releasepage(struct page *page, gfp_t gfp_mask);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2428: FILE: fs/gfs2/inode.h:19:
+extern int gfs2_internal_read(struct gfs2_inode *ip,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2430: FILE: fs/gfs2/inode.h:21:
+			      char *buf, loff_t *pos, unsigned size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2431: FILE: fs/gfs2/inode.h:22:
+extern void gfs2_set_aops(struct inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2464: FILE: fs/gfs2/inode.h:84:
+extern void gfs2_set_iop(struct inode *inode);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#2465: FILE: fs/gfs2/inode.h:85:
+extern struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type, $

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#2465: FILE: fs/gfs2/inode.h:85:
+extern struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2465: FILE: fs/gfs2/inode.h:85:
+extern struct inode *gfs2_inode_lookup(struct super_block *sb, unsigned type, 

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2468: FILE: fs/gfs2/inode.h:88:
+extern struct inode *gfs2_ilookup(struct super_block *sb, u64 no_addr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2470: FILE: fs/gfs2/inode.h:90:
+extern int gfs2_inode_refresh(struct gfs2_inode *ip);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2472: FILE: fs/gfs2/inode.h:92:
+extern int gfs2_dinode_dealloc(struct gfs2_inode *inode);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2473: FILE: fs/gfs2/inode.h:93:
+extern int gfs2_change_nlink(struct gfs2_inode *ip, int diff);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2474: FILE: fs/gfs2/inode.h:94:
+extern struct inode *gfs2_lookupi(struct inode *dir, const struct qstr *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2476: FILE: fs/gfs2/inode.h:96:
+extern struct inode *gfs2_createi(struct gfs2_holder *ghs,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2479: FILE: fs/gfs2/inode.h:99:
+extern int gfs2_rmdiri(struct gfs2_inode *dip, const struct qstr *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2481: FILE: fs/gfs2/inode.h:101:
+extern int gfs2_unlink_ok(struct gfs2_inode *dip, const struct qstr *name,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2483: FILE: fs/gfs2/inode.h:103:
+extern int gfs2_permission(struct inode *inode, int mask);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2484: FILE: fs/gfs2/inode.h:104:
+extern int gfs2_readlinki(struct gfs2_inode *ip, char **buf, unsigned int *len);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2485: FILE: fs/gfs2/inode.h:105:
+extern int gfs2_setattr_simple(struct gfs2_inode *ip, struct iattr *attr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2486: FILE: fs/gfs2/inode.h:106:
+extern struct inode *gfs2_lookup_simple(struct inode *dip, const char *name);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2487: FILE: fs/gfs2/inode.h:107:
+extern void gfs2_dinode_out(const struct gfs2_inode *ip, void *buf);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2488: FILE: fs/gfs2/inode.h:108:
+extern void gfs2_dinode_print(const struct gfs2_inode *ip);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 12 errors, 52 warnings, 64 checks, 2423 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000112740.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
