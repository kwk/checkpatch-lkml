ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#88: FILE: include/linux/module.h:173:
#x)))

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:SPACING: No space is necessary after a cast
#89: FILE: include/linux/module.h:174:
+#define symbol_get(x) ((typeof(&x))(__symbol_get(MODULE_SYMBOL_PREFIX

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '&' (ctx:BxV)
#89: FILE: include/linux/module.h:174:
+#define symbol_get(x) ((typeof(&x))(__symbol_get(MODULE_SYMBOL_PREFIX
                                ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#89: FILE: include/linux/module.h:174:
+#define symbol_get(x) ((typeof(&x))(__symbol_get(MODULE_SYMBOL_PREFIX

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#89: FILE: include/linux/module.h:174:
+#define symbol_get(x) ((typeof(&x))(__symbol_get(MODULE_SYMBOL_PREFIX

CHECK:SPACING: No space is necessary after a cast
#103: FILE: include/linux/module.h:393:
+#define symbol_put(x) __symbol_put(MODULE_SYMBOL_PREFIX #x,

ERROR:SPACING: space required after that ',' (ctx:VxV)
#105: FILE: include/linux/module.h:394:
+#define symbol_put_user(x,u) __symbol_put(MODULE_SYMBOL_PREFIX #x, (u))
                          ^

CHECK:SPACING: No space is necessary after a cast
#107: FILE: include/linux/module.h:396:
+#define symbol_put_addr(x) __symbol_put_addr((x), THIS_MODULE)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#123: FILE: kernel/module.c:522:
+/* Does a already use b?  Return NULL if it doesn't, a pointer to the $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#124: FILE: kernel/module.c:523:
+/* Does a already use b?  Return NULL if it doesn't, a pointer to the 
+   relevant module_use structure if it does. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#124: FILE: kernel/module.c:523:
+   relevant module_use structure if it does. */

ERROR:TRAILING_WHITESPACE: trailing whitespace
#146: FILE: kernel/module.c:538:
+/* Module a uses b $

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#147: FILE: kernel/module.c:539:
+/* Module a uses b 
+   If inc is set, then the use count will be incremented. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#147: FILE: kernel/module.c:539:
+   If inc is set, then the use count will be incremented. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#154: FILE: kernel/module.c:545:
+	if (b == NULL) return 1;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!b"
#154: FILE: kernel/module.c:545:
+	if (b == NULL) return 1;

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#156: FILE: kernel/module.c:547:
+	if ((use = already_uses(a, b))) {

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#157: FILE: kernel/module.c:548:
+		if (inc) use->count++;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#158: FILE: kernel/module.c:549:
+		DEBUGP("%s: %s already used %s, count now at %d\n", __FUNCTION__,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#160: FILE: kernel/module.c:550:
+		DEBUGP("%s: %s already used %s, count now at %d\n", __FUNCTION__,
+		return 1;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#177: FILE: kernel/module.c:572:
+/* Module a is "un-using" module b.  The use count is decremented, and
+   it reaches zero the module_use is removed.  Returns number of

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#178: FILE: kernel/module.c:573:
+   remaining uses. */

WARNING:LINE_SPACING: Missing a blank line after declarations
#182: FILE: kernel/module.c:577:
+	struct module_use *use = already_uses(a, b);
+	DEBUGP("%s: unuse %s by %s\n", __FUNCTION__, b->name, a->name);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#182: FILE: kernel/module.c:577:
+	DEBUGP("%s: unuse %s by %s\n", __FUNCTION__, b->name, a->name);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#184: FILE: kernel/module.c:579:
+	BUG_ON(!use);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#185: FILE: kernel/module.c:580:
+	DEBUGP("%s: %s used %s %d time(s)\n", __FUNCTION__, a->name, b->name,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#187: FILE: kernel/module.c:581:
+	DEBUGP("%s: %s used %s %d time(s)\n", __FUNCTION__, a->name, b->name,
+	if (! --(use->count)) {

ERROR:SPACING: space prohibited after that '!' (ctx:BxW)
#187: FILE: kernel/module.c:581:
+	if (! --(use->count)) {
 	    ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'use->count'
#187: FILE: kernel/module.c:581:
+	if (! --(use->count)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#190: FILE: kernel/module.c:583:
+		DEBUGP("%s: removing module_use structure and sysfs link\n",
+		list_del(&use->list);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#206: FILE: kernel/module.c:603:
+					printk(KERN_ERR "%s unloading but still has uses of %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#208: FILE: kernel/module.c:604:
+					printk(KERN_ERR "%s unloading but still has uses of %s\n",
 				module_put(i);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#226: FILE: kernel/module.c:793:
+	DEBUGP("%s: putting %s by %s\n", __FUNCTION__, symbol,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#228: FILE: kernel/module.c:794:
+	DEBUGP("%s: putting %s by %s\n", __FUNCTION__, symbol,
 	spin_lock_irqsave(&modlist_lock, flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#234: FILE: kernel/module.c:799:
+	/* If the symbol is owned by a module, put it if no user was
+	   specified or if this is the last of user's uses of the module. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#234: FILE: kernel/module.c:799:
+	   specified or if this is the last of user's uses of the module. */

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#248: FILE: kernel/module.c:811:
+	DEBUGP("%s: putting %p by %s\n", __FUNCTION__, addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: kernel/module.c:812:
+	DEBUGP("%s: putting %p by %s\n", __FUNCTION__, addr,
 	if (core_kernel_text((unsigned long)addr))

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#297: FILE: kernel/module.c:1270:
+	DEBUGP("%s: get symbol %s by %s\n", __FUNCTION__, symbol,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#299: FILE: kernel/module.c:1271:
+	DEBUGP("%s: get symbol %s by %s\n", __FUNCTION__, symbol,
 	spin_lock_irqsave(&modlist_lock, flags);

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#302: FILE: kernel/module.c:1273:
+	DEBUGP("%s: symbol %s is 0WN3D by %s\n", __FUNCTION__, symbol,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#304: FILE: kernel/module.c:1274:
+	DEBUGP("%s: symbol %s is 0WN3D by %s\n", __FUNCTION__, symbol,
+	if (value && owner && !use_module(user, owner, true))

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 9 errors, 18 warnings, 15 checks, 216 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000457824.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
