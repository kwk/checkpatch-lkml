WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#99: FILE: fs/ext4/ioctl.c:258:
+		return ext4_ext_migrate(inode, filp, cmd, arg);
 		                               ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#105: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#110: FILE: fs/ext4/migrate.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:SPACING: No space is necessary after a cast
#136: FILE: fs/ext4/migrate.c:27:
+	ex->ee_start_lo = cpu_to_le32((unsigned long) (pb & 0xffffffff));

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#137: FILE: fs/ext4/migrate.c:28:
+	ex->ee_start_hi = cpu_to_le16((unsigned long) ((pb >> 31) >> 1)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#142: FILE: fs/ext4/migrate.c:33:
+static int finish_range(handle_t *handle, struct inode *inode,
+				struct list_blocks_struct *lb)

WARNING:LINE_SPACING: Missing a blank line after declarations
#148: FILE: fs/ext4/migrate.c:39:
+	struct ext4_ext_path *path;
+	if (lb->first_pblock == 0)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'accumalate' may be misspelled - perhaps 'accumulate'?
#164: FILE: fs/ext4/migrate.c:55:
+	 * Since we are doing this in loop we may accumalate extra
 	                                          ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'accumalate' may be misspelled - perhaps 'accumulate'?
#165: FILE: fs/ext4/migrate.c:56:
+	 * credit. But below we try to not accumalate too much
 	                                   ^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#175: FILE: fs/ext4/migrate.c:66:
+	if (needed && handle->h_buffer_credits >= EXT4_RESERVE_TRANS_BLOCKS) {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#180: FILE: fs/ext4/migrate.c:71:
+
+	}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#200: FILE: fs/ext4/migrate.c:91:
+}
+static int update_extent_range(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#201: FILE: fs/ext4/migrate.c:92:
+static int update_extent_range(handle_t *handle, struct inode *inode,
+				ext4_fsblk_t pblock, ext4_lblk_t blk_num,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#210: FILE: fs/ext4/migrate.c:101:
+	if (lb->first_pblock &&
+		(lb->last_pblock+1 == pblock) &&

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#210: FILE: fs/ext4/migrate.c:101:
+		(lb->last_pblock+1 == pblock) &&
 		                ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#211: FILE: fs/ext4/migrate.c:102:
+		(lb->last_block+1 == blk_num)) {
 		               ^

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#220: FILE: fs/ext4/migrate.c:111:
+	lb->first_pblock = lb->last_pblock = pblock;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#221: FILE: fs/ext4/migrate.c:112:
+	lb->first_block = lb->last_block = blk_num;

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#225: FILE: fs/ext4/migrate.c:116:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#252: FILE: fs/ext4/migrate.c:143:
+			retval = update_extent_range(handle, inode,
+						le32_to_cpu(i_data[i]),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#264: FILE: fs/ext4/migrate.c:155:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#265: FILE: fs/ext4/migrate.c:156:
+}
+static int update_dind_extent_range(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#290: FILE: fs/ext4/migrate.c:181:
+			retval = update_ind_extent_range(handle, inode,
+						le32_to_cpu(i_data[i]),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#305: FILE: fs/ext4/migrate.c:196:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#306: FILE: fs/ext4/migrate.c:197:
+}
+static int update_tind_extent_range(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#307: FILE: fs/ext4/migrate.c:198:
+static int update_tind_extent_range(handle_t *handle, struct inode *inode,
+				     ext4_fsblk_t pblock, ext4_lblk_t *blk_nump,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#331: FILE: fs/ext4/migrate.c:222:
+			retval = update_dind_extent_range(handle, inode,
+						le32_to_cpu(i_data[i]),

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#346: FILE: fs/ext4/migrate.c:237:
+
+}

CHECK:LINE_SPACING: Please don't use multiple blank lines
#348: FILE: fs/ext4/migrate.c:239:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#350: FILE: fs/ext4/migrate.c:241:
+static int free_dind_blocks(handle_t *handle,
+				struct inode *inode, __le32 i_data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#365: FILE: fs/ext4/migrate.c:256:
+			ext4_free_blocks(handle, inode,
+					le32_to_cpu(tmp_idata[i]), 1);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#373: FILE: fs/ext4/migrate.c:264:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#374: FILE: fs/ext4/migrate.c:265:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#377: FILE: fs/ext4/migrate.c:268:
+static int free_tind_blocks(handle_t *handle,
+				struct inode *inode, __le32 i_data)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#393: FILE: fs/ext4/migrate.c:284:
+			retval = free_dind_blocks(handle,
+					inode, tmp_idata[i]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#405: FILE: fs/ext4/migrate.c:296:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#406: FILE: fs/ext4/migrate.c:297:
+
+}

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#414: FILE: fs/ext4/migrate.c:305:
+	if (ei->i_data[EXT4_IND_BLOCK]) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#416: FILE: fs/ext4/migrate.c:307:
+		ext4_free_blocks(handle, inode,
+				le32_to_cpu(ei->i_data[EXT4_IND_BLOCK]), 1);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#418: FILE: fs/ext4/migrate.c:309:
+
+	}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#422: FILE: fs/ext4/migrate.c:313:
+		retval = free_dind_blocks(handle, inode,
+						ei->i_data[EXT4_DIND_BLOCK]);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#429: FILE: fs/ext4/migrate.c:320:
+		retval = free_tind_blocks(handle, inode,
+						ei->i_data[EXT4_TIND_BLOCK]);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#434: FILE: fs/ext4/migrate.c:325:
+
+

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#437: FILE: fs/ext4/migrate.c:328:
+}
+static int ext4_ext_swap_inode_data(handle_t *handle, struct inode *inode,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#438: FILE: fs/ext4/migrate.c:329:
+static int ext4_ext_swap_inode_data(handle_t *handle, struct inode *inode,
+				struct inode *tmp_inode, int retval)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#443: FILE: fs/ext4/migrate.c:334:
+
+

WARNING:TYPO_SPELLING: 'orignal' may be misspelled - perhaps 'original'?
#472: FILE: fs/ext4/migrate.c:363:
+	 * update the orignal inode i_blocks for extent blocks
 	              ^^^^^^^

CHECK:SPACING: No space is necessary after a cast
#492: FILE: fs/ext4/migrate.c:383:
+	block |= ((ext4_fsblk_t) le16_to_cpu(ix->ei_leaf_hi) << 31) << 1;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#497: FILE: fs/ext4/migrate.c:388:
+static int free_ext_idx(handle_t *handle, struct inode *inode,
+					struct ext4_extent_idx *ix)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#504: FILE: fs/ext4/migrate.c:395:
+
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#512: FILE: fs/ext4/migrate.c:403:
+	if (eh->eh_depth == 0) {
+

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#517: FILE: fs/ext4/migrate.c:408:
+	} else {
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#525: FILE: fs/ext4/migrate.c:416:
+
+	}

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#529: FILE: fs/ext4/migrate.c:420:
+
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#530: FILE: fs/ext4/migrate.c:421:
+}
+/*

WARNING:LINE_SPACING: Missing a blank line after declarations
#539: FILE: fs/ext4/migrate.c:430:
+	struct ext4_extent_idx *ix;
+	if (eh->eh_depth == 0) {

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#554: FILE: fs/ext4/migrate.c:445:
+
+}

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#555: FILE: fs/ext4/migrate.c:446:
+int ext4_ext_migrate(struct inode *inode, struct file *filp,
                                                        ^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#555: FILE: fs/ext4/migrate.c:446:
+}
+int ext4_ext_migrate(struct inode *inode, struct file *filp,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#556: FILE: fs/ext4/migrate.c:447:
+int ext4_ext_migrate(struct inode *inode, struct file *filp,
+				unsigned int cmd, unsigned long arg)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#567: FILE: fs/ext4/migrate.c:458:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#581: FILE: fs/ext4/migrate.c:472:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#583: FILE: fs/ext4/migrate.c:474:
+	handle = ext4_journal_start(inode,
+					EXT4_DATA_TRANS_BLOCKS(inode->i_sb) +

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: fs/ext4/migrate.c:484:
+	tmp_inode = ext4_new_inode(handle,
+				inode->i_sb->s_root->d_inode,

WARNING:TYPO_SPELLING: 'commited' may be misspelled - perhaps 'committed'?
#629: FILE: fs/ext4/migrate.c:520:
+	 * For the tmp_inode we already have commited the
 	                                     ^^^^^^^^

WARNING:TYPO_SPELLING: 'trascation' may be misspelled - perhaps 'transaction'?
#630: FILE: fs/ext4/migrate.c:521:
+	 * trascation that created the inode. Later as and
 	   ^^^^^^^^^^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#635: FILE: fs/ext4/migrate.c:526:
+	for (i = 0; i < EXT4_NDIR_BLOCKS; i++, blk_count++) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#638: FILE: fs/ext4/migrate.c:529:
+			retval = update_extent_range(handle, tmp_inode,
+						le32_to_cpu(i_data[i]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#647: FILE: fs/ext4/migrate.c:538:
+		retval = update_ind_extent_range(handle, tmp_inode,
+					le32_to_cpu(i_data[EXT4_IND_BLOCK]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: fs/ext4/migrate.c:548:
+		retval = update_dind_extent_range(handle, tmp_inode,
+					le32_to_cpu(i_data[EXT4_DIND_BLOCK]),

CHECK:LINE_SPACING: Please don't use multiple blank lines
#665: FILE: fs/ext4/migrate.c:556:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#668: FILE: fs/ext4/migrate.c:559:
+		retval = update_tind_extent_range(handle, tmp_inode,
+					le32_to_cpu(i_data[EXT4_TIND_BLOCK]),

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: fs/ext4/migrate.c:582:
+	if (ext4_journal_extend(handle,
+			4 + 2*EXT4_QUOTA_TRANS_BLOCKS(inode->i_sb)) != 0) {

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#691: FILE: fs/ext4/migrate.c:582:
+			4 + 2*EXT4_QUOTA_TRANS_BLOCKS(inode->i_sb)) != 0) {
 			     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#692: FILE: fs/ext4/migrate.c:583:
+			4 + 2*EXT4_QUOTA_TRANS_BLOCKS(inode->i_sb)) != 0) {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#694: FILE: fs/ext4/migrate.c:585:
+		ext4_journal_restart(handle,
+				4 + 2*EXT4_QUOTA_TRANS_BLOCKS(inode->i_sb));

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#694: FILE: fs/ext4/migrate.c:585:
+				4 + 2*EXT4_QUOTA_TRANS_BLOCKS(inode->i_sb));
 				     ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#705: FILE: fs/ext4/migrate.c:596:
+	} else {
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#707: FILE: fs/ext4/migrate.c:598:
+		retval = ext4_ext_swap_inode_data(handle, inode,
+							tmp_inode, retval);

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#740: FILE: fs/ext4/migrate.c:631:
+		iput(tmp_inode);
 		^^^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#761: FILE: include/linux/ext4_fs.h:988:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct inode *' should also have an identifier name
#761: FILE: include/linux/ext4_fs.h:988:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#761: FILE: include/linux/ext4_fs.h:988:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned int' should also have an identifier name
#761: FILE: include/linux/ext4_fs.h:988:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#761: FILE: include/linux/ext4_fs.h:988:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#762: FILE: include/linux/ext4_fs.h:989:
+extern int ext4_ext_migrate(struct inode *, struct file *, unsigned int,
+		       unsigned long);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333569.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 16 warnings, 70 checks, 667 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000333569.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
