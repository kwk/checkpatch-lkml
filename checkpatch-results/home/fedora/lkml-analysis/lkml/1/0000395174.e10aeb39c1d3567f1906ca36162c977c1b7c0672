WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#47: 
Content-Disposition: inline; filename="sdio-extend-sdio-readsb-and-friends-to-handle-any-length-of-buffer.patch"

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#75: FILE: drivers/mmc/core/sdio_io.c:157:
+	 * sdio_readsb() etc. can only work with block size <= 512. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#89: FILE: drivers/mmc/core/sdio_io.c:238:
+ * IO_RW_EXTENDED commands. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#91: FILE: drivers/mmc/core/sdio_io.c:240:
+static int sdio_io_rw_ext_helper(struct sdio_func *func, int write,
+	unsigned fn, unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: drivers/mmc/core/sdio_io.c:240:
+	unsigned fn, unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: drivers/mmc/core/sdio_io.c:240:
+	unsigned fn, unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#91: FILE: drivers/mmc/core/sdio_io.c:240:
+	unsigned fn, unsigned addr, int incr_addr, u8 *buf, unsigned size)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#93: FILE: drivers/mmc/core/sdio_io.c:242:
+	unsigned remainder = size;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#94: FILE: drivers/mmc/core/sdio_io.c:243:
+	unsigned max_blocks;

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#98: FILE: drivers/mmc/core/sdio_io.c:247:
+	/* Blocks per command is limited by host count, host transfer size
+	   (we only use a single sg entry) and the maximum for IO_RW_EXTENDED

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#99: FILE: drivers/mmc/core/sdio_io.c:248:
+	   of 511 blocks. */

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#100: FILE: drivers/mmc/core/sdio_io.c:249:
+	max_blocks = min(min(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#106: FILE: drivers/mmc/core/sdio_io.c:255:
+		unsigned blocks;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#114: FILE: drivers/mmc/core/sdio_io.c:263:
+		ret = mmc_io_rw_extended(func->card, write, fn, addr,
+			incr_addr, buf, blocks, func->cur_blksize);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#126: FILE: drivers/mmc/core/sdio_io.c:275:
+		ret = mmc_io_rw_extended(func->card, write, fn, addr,
+			 incr_addr, buf, 1, remainder);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#205: FILE: drivers/mmc/core/sdio_ops.c:91:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#214: FILE: drivers/mmc/core/sdio_ops.c:100:
+	BUG_ON(blocks == 1 && blksz > 512);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#226: FILE: drivers/mmc/core/sdio_ops.c:114:
+	if (blocks > 1) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#229: FILE: drivers/mmc/core/sdio_ops.c:117:
+	} else

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#255: FILE: drivers/mmc/core/sdio_ops.h:19:
+	unsigned addr, int incr_addr, u8 *buf, unsigned blocks, unsigned blksz);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 18 warnings, 6 checks, 171 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000395174.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
