WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
> >  arch/arm/mach-omap2/pm.c        |  969 ++++++++++++++++++++++++++++-----------

CHECK:BIT_MACRO: Prefer using the BIT macro
#463: FILE: arch/arm/mach-omap2/pm.c:54:
+#define		AUTO_EXTVOLT	(1 << 15)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#464: FILE: arch/arm/mach-omap2/pm.c:55:
+#define		FORCE_EXTVOLT	(1 << 14)

CHECK:BIT_MACRO: Prefer using the BIT macro
#466: FILE: arch/arm/mach-omap2/pm.c:57:
+#define		MEMRETCTRL	(1 << 8)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#476: FILE: arch/arm/mach-omap2/pm.c:67:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BIT_MACRO: Prefer using the BIT macro
#479: FILE: arch/arm/mach-omap2/pm.c:70:
+#define		AUTOSTAT_MPU	(1 << 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#481: FILE: arch/arm/mach-omap2/pm.c:72:
+#define ^IEN_WKUP^I^I(1 << 4)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#481: FILE: arch/arm/mach-omap2/pm.c:72:
+#define 	EN_WKUP		(1 << 4)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#482: FILE: arch/arm/mach-omap2/pm.c:73:
+#define ^IEN_GFX^I^I(1 << 3)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#482: FILE: arch/arm/mach-omap2/pm.c:73:
+#define 	EN_GFX		(1 << 3)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#483: FILE: arch/arm/mach-omap2/pm.c:74:
+#define ^IEN_DSP^I^I(1 << 2)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#483: FILE: arch/arm/mach-omap2/pm.c:74:
+#define 	EN_DSP		(1 << 2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#484: FILE: arch/arm/mach-omap2/pm.c:75:
+#define ^IEN_MPU^I^I(1 << 1)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#484: FILE: arch/arm/mach-omap2/pm.c:75:
+#define 	EN_MPU		(1 << 1)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#485: FILE: arch/arm/mach-omap2/pm.c:76:
+#define ^IEN_CORE^I^I(1 << 0)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#485: FILE: arch/arm/mach-omap2/pm.c:76:
+#define 	EN_CORE		(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#489: FILE: arch/arm/mach-omap2/pm.c:80:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#504: FILE: arch/arm/mach-omap2/pm.c:95:
+#define		AUTOSTAT_DSS	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#505: FILE: arch/arm/mach-omap2/pm.c:96:
+#define		AUTOSTAT_L4	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#506: FILE: arch/arm/mach-omap2/pm.c:97:
+#define		AUTOSTAT_L3	(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#515: FILE: arch/arm/mach-omap2/pm.c:106:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#517: FILE: arch/arm/mach-omap2/pm.c:108:
+#define		AUTOSTAT_GFX	(1 << 0)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#518: FILE: arch/arm/mach-omap2/pm.c:109:
+#define PM_WKDEP_GFX    ^I0x3c8$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#521: FILE: arch/arm/mach-omap2/pm.c:112:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#526: FILE: arch/arm/mach-omap2/pm.c:117:
+#define ^IEN_GPIOS^I(1 << 2)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#526: FILE: arch/arm/mach-omap2/pm.c:117:
+#define 	EN_GPIOS	(1 << 2)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#527: FILE: arch/arm/mach-omap2/pm.c:118:
+#define ^IEN_GPT1^I^I(1 << 0)$

CHECK:BIT_MACRO: Prefer using the BIT macro
#527: FILE: arch/arm/mach-omap2/pm.c:118:
+#define 	EN_GPT1		(1 << 0)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#530: FILE: arch/arm/mach-omap2/pm.c:121:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#537: FILE: arch/arm/mach-omap2/pm.c:128:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#544: FILE: arch/arm/mach-omap2/pm.c:135:
+#define		AUTOSTAT_IVA	(1 << 8)

CHECK:BIT_MACRO: Prefer using the BIT macro
#545: FILE: arch/arm/mach-omap2/pm.c:136:
+#define		AUTOSTAT_DSP	(1 << 0)

ERROR:CODE_INDENT: code indent should use tabs where possible
#576: FILE: arch/arm/mach-omap2/pm.c:161:
+        return omap_readl(0x48004010);$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#576: FILE: arch/arm/mach-omap2/pm.c:161:
+        return omap_readl(0x48004010);$

ERROR:GLOBAL_INITIALISERS: do not initialise globals to 0
#580: FILE: arch/arm/mach-omap2/pm.c:165:
+int omap2_pm_debug = 0;

Global variables should not be initialized explicitly to
0 (or NULL, false, etc.).  Your compiler (or rather your
loader, which is responsible for zeroing out the relevant
sections) automatically does it for you.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_iclk"
#628: FILE: arch/arm/mach-omap2/pm.c:213:
+	if (console_iclk == NULL || console_fclk == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_fclk"
#628: FILE: arch/arm/mach-omap2/pm.c:213:
+	if (console_iclk == NULL || console_fclk == NULL)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: arch/arm/mach-omap2/pm.c:217:
+		BUG_ON(serial_console_clock_disabled);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:SPACING: No space is necessary after a cast
#635: FILE: arch/arm/mach-omap2/pm.c:220:
+		if ((int) serial_console_next_disable - (int) omap2_read_32k_sync_counter() >= 0)

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!conf"
#680: FILE: arch/arm/mach-omap2/pm.c:265:
+	if (conf == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_fclk"
#693: FILE: arch/arm/mach-omap2/pm.c:278:
+	if (console_fclk == NULL || console_iclk == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!console_iclk"
#693: FILE: arch/arm/mach-omap2/pm.c:278:
+	if (console_fclk == NULL || console_iclk == NULL) {

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#733: FILE: arch/arm/mach-omap2/pm.c:318:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#741: FILE: arch/arm/mach-omap2/pm.c:326:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#747: FILE: arch/arm/mach-omap2/pm.c:332:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#760: FILE: arch/arm/mach-omap2/pm.c:345:
+#if 0

WARNING:IF_1: Consider removing the #if 1 and its #endif
#778: FILE: arch/arm/mach-omap2/pm.c:363:
+#if 1

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#801: FILE: arch/arm/mach-omap2/pm.c:386:
+		printk("--- Going to %s %s (next timer after %u ms)\n", s1, s2,

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#804: FILE: arch/arm/mach-omap2/pm.c:389:
+		printk("--- Woke up (slept for %u.%03u ms)\n", us / 1000, us % 1000);

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#806: FILE: arch/arm/mach-omap2/pm.c:391:
+		printk("%-20s: 0x%08x\n", regs[i].name, regs[i].val);

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#819: FILE: arch/arm/mach-omap2/pm.c:404:
+static unsigned short enable_dyn_sleep = 0; /* disabled till drivers are fixed */

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#821: FILE: arch/arm/mach-omap2/pm.c:406:
+static ssize_t omap_pm_sleep_while_idle_show(struct subsystem * subsys, char *buf)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#826: FILE: arch/arm/mach-omap2/pm.c:411:
+static ssize_t omap_pm_sleep_while_idle_store(struct subsystem * subsys,

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#827: FILE: arch/arm/mach-omap2/pm.c:412:
+					      const char * buf,

WARNING:LINE_SPACING: Missing a blank line after declarations
#831: FILE: arch/arm/mach-omap2/pm.c:416:
+	unsigned short value;
+	if (sscanf(buf, "%hu", &value) != 1 ||

WARNING:SSCANF_TO_KSTRTO: Prefer kstrto<type> to single variable sscanf
#831: FILE: arch/arm/mach-omap2/pm.c:416:
+	if (sscanf(buf, "%hu", &value) != 1 ||
+	    (value != 0 && value != 1)) {
+		printk(KERN_ERR "idle_sleep_store: Invalid value\n");
+		return -EINVAL;
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#833: FILE: arch/arm/mach-omap2/pm.c:418:
+		printk(KERN_ERR "idle_sleep_store: Invalid value\n");

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#891: FILE: arch/arm/mach-omap2/pm.c:476:
+	BUG_ON(i < 0);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#925: FILE: arch/arm/mach-omap2/pm.c:509:
+	 * to sleeping unnecessarily. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#948: FILE: arch/arm/mach-omap2/pm.c:532:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#988: FILE: arch/arm/mach-omap2/pm.c:572:
+	 * seems to cause the I2C block to timeout. Why? Good question. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#993: FILE: arch/arm/mach-omap2/pm.c:577:
+	 * it is in retention mode. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1420: FILE: arch/arm/mach-omap2/pm.c:782:
+	 * stabilisation */

WARNING:LINE_CONTINUATIONS: Avoid unnecessary line continuations
#1425: FILE: arch/arm/mach-omap2/pm.c:787:
+	l = AUTO_EXTVOLT | SETOFF_LEVEL(1) | MEMRETCTRL | \

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1438: FILE: arch/arm/mach-omap2/pm.c:799:
+	printk(KERN_INFO "Power Management for OMAP2 initializing\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1440: FILE: arch/arm/mach-omap2/pm.c:801:
+	printk(KERN_INFO "PRCM revision %d.%d\n", (l >> 4) & 0x0f, l & 0x0f);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1444: FILE: arch/arm/mach-omap2/pm.c:805:
+		printk(KERN_ERR "could not get osc_ck\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1453: FILE: arch/arm/mach-omap2/pm.c:811:
+		printk(KERN_ERR "could not get emul_ck\n");

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "sti"
#1468: FILE: arch/arm/mach-omap2/pm.c:826:
+		if (sti != NULL && sti->enable)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1578: FILE: include/asm-arm/arch-omap/pm.h:137:
+extern void omap2_block_sleep(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1579: FILE: include/asm-arm/arch-omap/pm.h:138:
+extern void omap2_allow_sleep(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1664: FILE: include/asm-arm/arch-omap/gpio.h:78:
+extern void omap2_gpio_prepare_for_retention(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1665: FILE: include/asm-arm/arch-omap/gpio.h:79:
+extern void omap2_gpio_resume_after_retention(void);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 6 errors, 32 warnings, 35 checks, 1228 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000448258.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
