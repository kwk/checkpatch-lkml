ERROR:CODE_INDENT: code indent should use tabs where possible
#126: FILE: arch/alpha/kernel/asm-offsets.c:22:
+        DEFINE(TASK_CRED, offsetof(struct task_struct, cred));$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#126: FILE: arch/alpha/kernel/asm-offsets.c:22:
+        DEFINE(TASK_CRED, offsetof(struct task_struct, cred));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#132: FILE: arch/alpha/kernel/asm-offsets.c:28:
+        DEFINE(CRED_UID,  offsetof(struct cred, uid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#132: FILE: arch/alpha/kernel/asm-offsets.c:28:
+        DEFINE(CRED_UID,  offsetof(struct cred, uid));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#133: FILE: arch/alpha/kernel/asm-offsets.c:29:
+        DEFINE(CRED_EUID, offsetof(struct cred, euid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#133: FILE: arch/alpha/kernel/asm-offsets.c:29:
+        DEFINE(CRED_EUID, offsetof(struct cred, euid));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#134: FILE: arch/alpha/kernel/asm-offsets.c:30:
+        DEFINE(CRED_GID,  offsetof(struct cred, gid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#134: FILE: arch/alpha/kernel/asm-offsets.c:30:
+        DEFINE(CRED_GID,  offsetof(struct cred, gid));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#135: FILE: arch/alpha/kernel/asm-offsets.c:31:
+        DEFINE(CRED_EGID, offsetof(struct cred, egid));$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#135: FILE: arch/alpha/kernel/asm-offsets.c:31:
+        DEFINE(CRED_EGID, offsetof(struct cred, egid));$

ERROR:CODE_INDENT: code indent should use tabs where possible
#136: FILE: arch/alpha/kernel/asm-offsets.c:32:
+        BLANK();$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#136: FILE: arch/alpha/kernel/asm-offsets.c:32:
+        BLANK();$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#195: FILE: arch/s390/kernel/compat_linux.c:151:
+	if (!(retval = put_user(high2lowuid(current->cred->uid), ruid)) &&

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#208: FILE: arch/s390/kernel/compat_linux.c:168:
+	if (!(retval = put_user(high2lowgid(current->cred->gid), rgid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#277: FILE: arch/sparc64/kernel/sys_sparc32.c:106:
+	if (!(retval = put_user(high2lowuid(current->cred->uid), ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#290: FILE: arch/sparc64/kernel/sys_sparc32.c:123:
+	if (!(retval = put_user(high2lowgid(current->cred->gid), rgid)) &&

CHECK:SPACING: No space is necessary after a cast
#410: FILE: fs/binfmt_elf_fdpic.c:589:
+	NEW_AUX_ENT(AT_UID,	(elf_addr_t) current->cred->uid);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: No space is necessary after a cast
#411: FILE: fs/binfmt_elf_fdpic.c:590:
+	NEW_AUX_ENT(AT_EUID,	(elf_addr_t) current->cred->euid);

CHECK:SPACING: No space is necessary after a cast
#412: FILE: fs/binfmt_elf_fdpic.c:591:
+	NEW_AUX_ENT(AT_GID,	(elf_addr_t) current->cred->gid);

CHECK:SPACING: No space is necessary after a cast
#413: FILE: fs/binfmt_elf_fdpic.c:592:
+	NEW_AUX_ENT(AT_EGID,	(elf_addr_t) current->cred->egid);

WARNING:SPACING: space prohibited before semicolon
#584: FILE: fs/nfsd/auth.c:30:
+	struct cred *act_as = current->cred ;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#827: FILE: fs/xfs/linux-2.6/xfs_cred.h:26:
+typedef const struct cred cred_t;

WARNING:INCLUDE_LINUX: Use #include <linux/atomic.h> instead of <asm/atomic.h>
#940: FILE: include/linux/cred.h:17:
+#include <asm/atomic.h>

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#968: FILE: include/linux/cred.h:45:
+#define get_group_info(group_info)		\
+do {						\
+	atomic_inc(&(group_info)->usage);	\
+} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'group_info' - possible side-effects?
#977: FILE: include/linux/cred.h:54:
+#define put_group_info(group_info)			\
+do {							\
+	if (atomic_dec_and_test(&(group_info)->usage))	\
+		groups_free(group_info);		\
+} while (0)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#983: FILE: include/linux/cred.h:60:
+extern struct group_info *groups_alloc(int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#984: FILE: include/linux/cred.h:61:
+extern void groups_free(struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#984: FILE: include/linux/cred.h:61:
+extern void groups_free(struct group_info *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#985: FILE: include/linux/cred.h:62:
+extern int set_current_groups(struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#985: FILE: include/linux/cred.h:62:
+extern int set_current_groups(struct group_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#986: FILE: include/linux/cred.h:63:
+extern int set_groups(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct cred *' should also have an identifier name
#986: FILE: include/linux/cred.h:63:
+extern int set_groups(struct cred *, struct group_info *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#986: FILE: include/linux/cred.h:63:
+extern int set_groups(struct cred *, struct group_info *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#987: FILE: include/linux/cred.h:64:
+extern int groups_search(struct group_info *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct group_info *' should also have an identifier name
#987: FILE: include/linux/cred.h:64:
+extern int groups_search(struct group_info *, gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#987: FILE: include/linux/cred.h:64:
+extern int groups_search(struct group_info *, gid_t);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#990: FILE: include/linux/cred.h:67:
+#define GROUP_AT(gi, i) \
+	((gi)->blocks[(i) / NGROUPS_PER_BLOCK][(i) % NGROUPS_PER_BLOCK])

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#993: FILE: include/linux/cred.h:70:
+extern int in_group_p(gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#993: FILE: include/linux/cred.h:70:
+extern int in_group_p(gid_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#994: FILE: include/linux/cred.h:71:
+extern int in_egroup_p(gid_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gid_t' should also have an identifier name
#994: FILE: include/linux/cred.h:71:
+extern int in_egroup_p(gid_t);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1029: FILE: include/linux/cred.h:106:
+	unsigned	securebits;	/* SUID-less security management */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1036: FILE: include/linux/cred.h:113:
+					 * keys to */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1141: FILE: include/linux/sched.h:621:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1686: FILE: kernel/signal.c:1100:
 	if ((info == SEND_SIG_NOINFO || (!is_si_special(info) && SI_FROMUSER(info)))
+	    && (euid != p->cred->suid) && (euid != p->cred->uid)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1687: FILE: kernel/signal.c:1101:
+	    && (euid != p->cred->suid) && (euid != p->cred->uid)
+	    && (uid != p->cred->suid) && (uid != p->cred->uid)) {

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1832: FILE: kernel/sys.c:540:
+		cred->gid = cred->egid = cred->sgid = cred->fsgid = gid;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1839: FILE: kernel/sys.c:546:
+		cred->egid = cred->fsgid = gid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1867: FILE: kernel/sys.c:606:
+	new_ruid = old_ruid = cred->uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1868: FILE: kernel/sys.c:607:
+	new_euid = old_euid = cred->euid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1895: FILE: kernel/sys.c:634:
+	cred->fsuid = cred->euid = new_euid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1939: FILE: kernel/sys.c:685:
+	cred->fsuid = cred->euid = uid;

CHECK:SPACING: No space is necessary after a cast
#1964: FILE: kernel/sys.c:712:
+		if ((ruid != (uid_t) -1) && (ruid != cred->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != cred->uid'
#1964: FILE: kernel/sys.c:712:
+		if ((ruid != (uid_t) -1) && (ruid != cred->uid) &&
+		    (ruid != cred->euid) && (ruid != cred->suid))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != cred->euid'
#1964: FILE: kernel/sys.c:712:
+		if ((ruid != (uid_t) -1) && (ruid != cred->uid) &&
+		    (ruid != cred->euid) && (ruid != cred->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'ruid != cred->suid'
#1964: FILE: kernel/sys.c:712:
+		if ((ruid != (uid_t) -1) && (ruid != cred->uid) &&
+		    (ruid != cred->euid) && (ruid != cred->suid))

CHECK:SPACING: No space is necessary after a cast
#1969: FILE: kernel/sys.c:715:
+		if ((euid != (uid_t) -1) && (euid != cred->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != cred->uid'
#1969: FILE: kernel/sys.c:715:
+		if ((euid != (uid_t) -1) && (euid != cred->uid) &&
+		    (euid != cred->euid) && (euid != cred->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != cred->euid'
#1969: FILE: kernel/sys.c:715:
+		if ((euid != (uid_t) -1) && (euid != cred->uid) &&
+		    (euid != cred->euid) && (euid != cred->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'euid != cred->suid'
#1969: FILE: kernel/sys.c:715:
+		if ((euid != (uid_t) -1) && (euid != cred->uid) &&
+		    (euid != cred->euid) && (euid != cred->suid))

CHECK:SPACING: No space is necessary after a cast
#1974: FILE: kernel/sys.c:718:
+		if ((suid != (uid_t) -1) && (suid != cred->uid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != cred->uid'
#1974: FILE: kernel/sys.c:718:
+		if ((suid != (uid_t) -1) && (suid != cred->uid) &&
+		    (suid != cred->euid) && (suid != cred->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != cred->euid'
#1974: FILE: kernel/sys.c:718:
+		if ((suid != (uid_t) -1) && (suid != cred->uid) &&
+		    (suid != cred->euid) && (suid != cred->suid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'suid != cred->suid'
#1974: FILE: kernel/sys.c:718:
+		if ((suid != (uid_t) -1) && (suid != cred->uid) &&
+		    (suid != cred->euid) && (suid != cred->suid))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2011: FILE: kernel/sys.c:749:
+	if (!(retval = put_user(cred->uid, ruid)) &&

CHECK:SPACING: No space is necessary after a cast
#2031: FILE: kernel/sys.c:769:
+		if ((rgid != (gid_t) -1) && (rgid != cred->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != cred->gid'
#2031: FILE: kernel/sys.c:769:
+		if ((rgid != (gid_t) -1) && (rgid != cred->gid) &&
+		    (rgid != cred->egid) && (rgid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != cred->egid'
#2031: FILE: kernel/sys.c:769:
+		if ((rgid != (gid_t) -1) && (rgid != cred->gid) &&
+		    (rgid != cred->egid) && (rgid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rgid != cred->sgid'
#2031: FILE: kernel/sys.c:769:
+		if ((rgid != (gid_t) -1) && (rgid != cred->gid) &&
+		    (rgid != cred->egid) && (rgid != cred->sgid))

CHECK:SPACING: No space is necessary after a cast
#2036: FILE: kernel/sys.c:772:
+		if ((egid != (gid_t) -1) && (egid != cred->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != cred->gid'
#2036: FILE: kernel/sys.c:772:
+		if ((egid != (gid_t) -1) && (egid != cred->gid) &&
+		    (egid != cred->egid) && (egid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != cred->egid'
#2036: FILE: kernel/sys.c:772:
+		if ((egid != (gid_t) -1) && (egid != cred->gid) &&
+		    (egid != cred->egid) && (egid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'egid != cred->sgid'
#2036: FILE: kernel/sys.c:772:
+		if ((egid != (gid_t) -1) && (egid != cred->gid) &&
+		    (egid != cred->egid) && (egid != cred->sgid))

CHECK:SPACING: No space is necessary after a cast
#2041: FILE: kernel/sys.c:775:
+		if ((sgid != (gid_t) -1) && (sgid != cred->gid) &&

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != cred->gid'
#2041: FILE: kernel/sys.c:775:
+		if ((sgid != (gid_t) -1) && (sgid != cred->gid) &&
+		    (sgid != cred->egid) && (sgid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != cred->egid'
#2041: FILE: kernel/sys.c:775:
+		if ((sgid != (gid_t) -1) && (sgid != cred->gid) &&
+		    (sgid != cred->egid) && (sgid != cred->sgid))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sgid != cred->sgid'
#2041: FILE: kernel/sys.c:775:
+		if ((sgid != (gid_t) -1) && (sgid != cred->gid) &&
+		    (sgid != cred->egid) && (sgid != cred->sgid))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2075: FILE: kernel/sys.c:802:
+	if (!(retval = put_user(cred->gid, rgid)) &&

WARNING:EXPORT_SYMBOL: EXPORT_SYMBOL(foo); should immediately follow its function/variable
#2169: FILE: kernel/sys.c:1265:
+EXPORT_SYMBOL(set_groups);

EXPORT_SYMBOL should immediately follow the symbol to be exported.

WARNING:LINE_SPACING: Missing a blank line after declarations
#2240: FILE: kernel/sys.c:1676:
+	unsigned char comm[sizeof(me->comm)];
+	long uninitialized_var(error);

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#2240: FILE: kernel/sys.c:1676:
+	long uninitialized_var(error);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'error' should also have an identifier name
#2240: FILE: kernel/sys.c:1676:
+	long uninitialized_var(error);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2306: FILE: kernel/sys.c:1730:
+			comm[sizeof(me->comm)-1] = 0;
 			                     ^

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2376: FILE: kernel/uid16.c:89:
+	if (!(retval = put_user(high2lowuid(current->cred->uid), ruid)) &&

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#2389: FILE: kernel/uid16.c:109:
+	if (!(retval = put_user(high2lowgid(current->cred->gid), rgid)) &&

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2665: FILE: security/commoncap.c:145:
+			   cap_combine (cred->cap_permitted,

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2743: FILE: security/commoncap.c:380:
+	cred->suid = cred->euid = cred->fsuid = bprm->e_uid;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2744: FILE: security/commoncap.c:381:
+	cred->sgid = cred->egid = cred->fsgid = bprm->e_gid;

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2799: FILE: security/commoncap.c:479:
+		cap_clear (cred->cap_permitted);

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2800: FILE: security/commoncap.c:480:
+		cap_clear (cred->cap_effective);

WARNING:BRACES: braces {} are not necessary for single statement blocks
#2804: FILE: security/commoncap.c:482:
+	if (old_euid == 0 && cred->euid != 0) {
+		cap_clear (cred->cap_effective);
 	}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#2805: FILE: security/commoncap.c:483:
+		cap_clear (cred->cap_effective);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2891: FILE: security/commoncap.c:646:
+		     & (cred->securebits ^ arg2))                  /*[1]*/
+		    || ((cred->securebits & SECURE_ALL_LOCKS

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3167: FILE: security/keys/process_keys.c:376:
+	BUG_ON(!tsk->cred);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3183: FILE: security/keys/process_keys.c:392:
+	BUG_ON(!tsk->cred);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3283: FILE: security/keys/process_keys.c:634:
+			ret = install_session_keyring(

WARNING:LINE_SPACING: Missing a blank line after declarations
#3496: FILE: security/selinux/hooks.c:177:
+	struct task_security_struct *tsec = task->cred->security;
+	task->cred->security = NULL;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "smack_onlycap"
#4049: FILE: security/smack/smack_access.c:176:
+	if (smack_onlycap != NULL && smack_onlycap != current->cred->security)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!context->cred->security"
#4361: FILE: security/smack/smack_lsm.c:2405:
+	if (context->cred->security == NULL)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 14 errors, 32 warnings, 53 checks, 3740 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000243795.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
