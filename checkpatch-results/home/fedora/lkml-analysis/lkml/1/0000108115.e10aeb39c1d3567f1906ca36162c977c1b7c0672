WARNING:SPACING: Unnecessary space before function pointer arguments
#86: FILE: include/fuse.h:516:
+	int (*mmap) (const char *, void *addr, size_t len, int prot, int flags,

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#86: FILE: include/fuse.h:516:
+	int (*mmap) (const char *, void *addr, size_t len, int prot, int flags,

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#88: FILE: include/fuse.h:518:
+		     int *fdp, unsigned *flagsp);

WARNING:SPACING: Unnecessary space before function pointer arguments
#110: FILE: include/fuse.h:540:
+	int (*mmap_commit) (const char *, void *addr, size_t len,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#110: FILE: include/fuse.h:540:
+	int (*mmap_commit) (const char *, void *addr, size_t len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#124: FILE: include/fuse.h:554:
+	void (*munmap) (const char *, void *addr, size_t len,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#124: FILE: include/fuse.h:554:
+	void (*munmap) (const char *, void *addr, size_t len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#136: FILE: include/fuse.h:796:
+		 int *fdp, unsigned *flagsp);

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#142: FILE: include/fuse.h:802:
+		    uint64_t mmap_unique, int fd);

CHECK:BIT_MACRO: Prefer using the BIT macro
#160: FILE: include/fuse_kernel.h:216:
+#define FUSE_MMAP_DONT_COPY	(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#161: FILE: include/fuse_kernel.h:217:
+#define FUSE_MMAP_DONT_EXPAND	(1 << 1)

WARNING:SPACING: Unnecessary space before function pointer arguments
#245: FILE: include/fuse_lowlevel.h:891:
+	void (*mmap) (fuse_req_t req, fuse_ino_t ino, void *addr, size_t len,

WARNING:SPACING: Unnecessary space before function pointer arguments
#268: FILE: include/fuse_lowlevel.h:914:
+	void (*mmap_commit) (fuse_req_t req, fuse_ino_t ino,

WARNING:SPACING: Unnecessary space before function pointer arguments
#289: FILE: include/fuse_lowlevel.h:935:
+	void (*munmap) (fuse_req_t req, fuse_ino_t ino,

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#291: FILE: include/fuse_lowlevel.h:937:
+			uint64_t mmap_unique, int fd);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#307: FILE: include/fuse_lowlevel.h:1215:
+int fuse_reply_mmap(fuse_req_t req, int fd, unsigned flags);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#320: FILE: lib/fuse_lowlevel.c:512:
+int fuse_reply_mmap(fuse_req_t req, int fd, unsigned flags)

CHECK:SPACING: No space is necessary after a cast
#340: FILE: lib/fuse_lowlevel.c:1141:
+	struct fuse_mmap_in *arg = (struct fuse_mmap_in *) inarg;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#352: FILE: lib/fuse_lowlevel.c:1153:
+		fuse_reply_err(req, ENOSYS);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:SPACING: No space is necessary after a cast
#357: FILE: lib/fuse_lowlevel.c:1158:
+	struct fuse_mmap_commit_in *arg = (struct fuse_mmap_commit_in *) inarg;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#370: FILE: lib/fuse_lowlevel.c:1171:
+		fuse_reply_err(req, ENOSYS);

CHECK:SPACING: No space is necessary after a cast
#375: FILE: lib/fuse_lowlevel.c:1176:
+	struct fuse_munmap_in *arg = (struct fuse_munmap_in *) inarg;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#444: FILE: example/fmmap.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#445: FILE: example/fmmap.c:2:
+/*
+  FUSE fmmap: FUSE mmap example

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:SPACING: No space is necessary after a cast
#567: FILE: example/fmmap.c:124:
+	(void) fi;

CHECK:SPACING: No space is necessary after a cast
#568: FILE: example/fmmap.c:125:
+	(void) offset;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#584: FILE: example/fmmap.c:141:
+	stbuf->st_atime = stbuf->st_mtime = time(NULL);

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#619: FILE: example/fmmap.c:176:
+static int fmmap_read(const char *path, char *buf, size_t size,
+		     off_t offset, struct fuse_file_info *fi)

CHECK:SPACING: No space is necessary after a cast
#624: FILE: example/fmmap.c:181:
+	(void) path;

CHECK:SPACING: No space is necessary after a cast
#625: FILE: example/fmmap.c:182:
+	(void) fi;

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#634: FILE: example/fmmap.c:191:
+		cur = t = snprintf(buf + bytes, size - bytes,		\

ERROR:SPACING: space prohibited before that ',' (ctx:WxW)
#635: FILE: example/fmmap.c:192:
+				   fmt , ##args);			\
 				       ^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#689: FILE: example/fmmap.c:246:
+		      int *fdp, unsigned *flagsp)

CHECK:SPACING: No space is necessary after a cast
#694: FILE: example/fmmap.c:251:
+	(void) path;

CHECK:SPACING: No space is necessary after a cast
#695: FILE: example/fmmap.c:252:
+	(void) addr;

CHECK:SPACING: No space is necessary after a cast
#696: FILE: example/fmmap.c:253:
+	(void) len;

CHECK:SPACING: No space is necessary after a cast
#697: FILE: example/fmmap.c:254:
+	(void) prot;

CHECK:SPACING: No space is necessary after a cast
#698: FILE: example/fmmap.c:255:
+	(void) flags;

CHECK:SPACING: No space is necessary after a cast
#699: FILE: example/fmmap.c:256:
+	(void) offset;

CHECK:SPACING: No space is necessary after a cast
#722: FILE: example/fmmap.c:279:
+	(void) path;

CHECK:SPACING: No space is necessary after a cast
#750: FILE: example/fmmap.c:307:
+	(void) path;

CHECK:SPACING: No space is necessary after a cast
#751: FILE: example/fmmap.c:308:
+	(void) addr;

CHECK:SPACING: No space is necessary after a cast
#752: FILE: example/fmmap.c:309:
+	(void) len;

CHECK:SPACING: No space is necessary after a cast
#753: FILE: example/fmmap.c:310:
+	(void) fi;

CHECK:SPACING: No space is necessary after a cast
#754: FILE: example/fmmap.c:311:
+	(void) mmap_unique;

CHECK:SPACING: No space is necessary after a cast
#755: FILE: example/fmmap.c:312:
+	(void) fd;

CHECK:SPACING: No space is necessary after a cast
#776: FILE: example/fmmap.c:333:
+	(void) arg;

CHECK:BIT_MACRO: Prefer using the BIT macro
#827: FILE: include/fuse_common.h:117:
+#define FUSE_MMAP_DONT_COPY	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#828: FILE: include/fuse_common.h:118:
+#define FUSE_MMAP_DONT_EXPAND	(1 << 1)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#839: FILE: example/fmmapclient.c:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#840: FILE: example/fmmapclient.c:2:
+/*
+  FUSE fmmapclient: FUSE mmap example client

WARNING:SPACING: Unnecessary space before function pointer arguments
#959: FILE: include/cuse_lowlevel.h:66:
+	void (*mmap) (fuse_req_t req, void *addr, size_t len, int prot,

WARNING:SPACING: Unnecessary space before function pointer arguments
#961: FILE: include/cuse_lowlevel.h:68:
+	void (*mmap_commit) (fuse_req_t req, void *addr, size_t len, int prot,

WARNING:SPACING: Unnecessary space before function pointer arguments
#964: FILE: include/cuse_lowlevel.h:71:
+	void (*munmap) (fuse_req_t req, void *addr, size_t len,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#980: FILE: lib/fuse.c:1695:
+		 int *fdp, unsigned *flagsp)

CHECK:BRACES: braces {} should be used on all arms of this statement
#983: FILE: lib/fuse.c:1698:
+	if (fs->op.mmap) {
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPLIT_STRING: quoted string split across lines
#988: FILE: lib/fuse.c:1703:
+			fprintf(stderr, "mmap[%llu] addr: %p len: %zu "
+				"prot: 0x%x flags: 0x%x offset: %llu\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:SPACING: No space is necessary after a cast
#989: FILE: lib/fuse.c:1704:
+				(unsigned long long) fi->fh, addr, len,

CHECK:SPACING: No space is necessary after a cast
#990: FILE: lib/fuse.c:1705:
+				prot, flags, (unsigned long long) offset);

CHECK:SPACING: No space is necessary after a cast
#997: FILE: lib/fuse.c:1712:
+				(unsigned long long) fi->fh, *fdp, *flagsp);

CHECK:BRACES: Unbalanced braces around else statement
#1000: FILE: lib/fuse.c:1715:
+	} else

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1001: FILE: lib/fuse.c:1716:
+		return -ENOSYS;

CHECK:BRACES: braces {} should be used on all arms of this statement
#1009: FILE: lib/fuse.c:1724:
+	if (fs->op.mmap_commit) {
[...]
+	} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1012: FILE: lib/fuse.c:1727:
+			fprintf(stderr, "mmap_commit[%llu] addr: %p len: %zu "
+				"prot: 0x%x flags: 0x%x fd: %d offset: %llu "

WARNING:SPLIT_STRING: quoted string split across lines
#1013: FILE: lib/fuse.c:1728:
+				"prot: 0x%x flags: 0x%x fd: %d offset: %llu "
+				"mmap_unique: 0x%llx\n",

CHECK:SPACING: No space is necessary after a cast
#1014: FILE: lib/fuse.c:1729:
+				(unsigned long long) fi->fh, addr, len,

CHECK:SPACING: No space is necessary after a cast
#1015: FILE: lib/fuse.c:1730:
+				prot, flags, fd, (unsigned long long) offset,

CHECK:SPACING: No space is necessary after a cast
#1016: FILE: lib/fuse.c:1731:
+				(unsigned long long) mmap_unique);

CHECK:BRACES: Unbalanced braces around else statement
#1020: FILE: lib/fuse.c:1735:
+	} else

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1021: FILE: lib/fuse.c:1736:
+		return -ENOSYS;

WARNING:SPLIT_STRING: quoted string split across lines
#1031: FILE: lib/fuse.c:1746:
+			fprintf(stderr, "munmap[%llu] addr: %p len: %zu "
+				"mmap_unique: 0x%llx fd: %d\n",

CHECK:SPACING: No space is necessary after a cast
#1032: FILE: lib/fuse.c:1747:
+				(unsigned long long) fi->fh, addr, len,

CHECK:SPACING: No space is necessary after a cast
#1033: FILE: lib/fuse.c:1748:
+				(unsigned long long) mmap_unique, fd);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#1055: FILE: lib/fuse.c:3347:
+	unsigned fmmap_flags = 0;

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1094: FILE: lib/fuse.c:3386:
+			    uint64_t mmap_unique, int fd)

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#1153: FILE: lib/cuse_lowlevel.c:117:
+			    uint64_t mmap_unique, int fd)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 31 warnings, 44 checks, 1044 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000108115.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
