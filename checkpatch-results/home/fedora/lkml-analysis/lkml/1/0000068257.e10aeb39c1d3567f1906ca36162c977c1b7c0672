WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#137: FILE: arch/x86/include/asm/checkpoint_hdr.h:127:
+} __attribute__((aligned(8)));

CHECK:SPACING: No space is necessary after a cast
#160: FILE: arch/x86/mm/checkpoint.c:339:
+	h->vdso = (unsigned long) mm->context.vdso;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#212: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#217: FILE: checkpoint/memory.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#362: FILE: checkpoint/memory.c:146:
+	pgarr->vaddrs = kmalloc(CKPT_PGARR_TOTAL * sizeof(unsigned long),
+				GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#369: FILE: checkpoint/memory.c:153:
+		pgarr->pages = kmalloc(CKPT_PGARR_TOTAL *
+				       sizeof(struct page *), GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#427: FILE: checkpoint/memory.c:211:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#464: FILE: checkpoint/memory.c:248:
+				return ERR_PTR(-EFAULT);
+			else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#465: FILE: checkpoint/memory.c:249:
+				BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "page_mapping"
#487: FILE: checkpoint/memory.c:271:
+	} else if (vma->vm_file && (page_mapping(page) != NULL)) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#515: FILE: checkpoint/memory.c:299:
+	BUG_ON(vma->vm_flags & (VM_SHARED | VM_MAYSHARE));

CHECK:SPACING: No space is necessary after a cast
#594: FILE: checkpoint/memory.c:378:
+	buf = (void *) __get_free_page(GFP_KERNEL);

CHECK:SPACING: No space is necessary after a cast
#606: FILE: checkpoint/memory.c:390:
+	free_page((unsigned long) buf);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#703: FILE: checkpoint/memory.c:487:
+	ckpt_debug("vma %#lx-%#lx flags %#lx type %d\n",
+		 vma->vm_start, vma->vm_end, vma->vm_flags, type);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#736: FILE: checkpoint/memory.c:520:
+	BUG_ON(vma->vm_flags & (VM_SHARED | VM_MAYSHARE));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#755: FILE: checkpoint/memory.c:539:
+	BUG_ON(vma->vm_flags & VM_MAYSHARE);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#756: FILE: checkpoint/memory.c:540:
+	BUG_ON(vma->vm_file);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#812: FILE: checkpoint/memory.c:596:
+		ckpt_debug("vma %#lx-%#lx flags %#lx\n",
+			 vma->vm_start, vma->vm_end, vma->vm_flags);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#814: FILE: checkpoint/memory.c:598:
+			ckpt_write_err(ctx, "TE", "vma: bad flags (%#lx)\n",
 			                     ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#815: FILE: checkpoint/memory.c:599:
+				       -ENOSYS, vma->vm_flags);

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#816: FILE: checkpoint/memory.c:600:
+			return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#823: FILE: checkpoint/memory.c:607:
+			ret = -ENOSYS;

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#825: FILE: checkpoint/memory.c:609:
+			ckpt_write_err(ctx, "TE", "vma: failed", ret);
 			                     ^^

CHECK:SPACING: No space is necessary after a cast
#848: FILE: checkpoint/memory.c:632:
+	return do_checkpoint_mm(ctx, (struct mm_struct *) ptr);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#883: FILE: checkpoint/memory.c:667:
+			ckpt_write_err(ctx, "TE", "mm: collect exe_file", ret);
 			                     ^^

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#893: FILE: checkpoint/memory.c:677:
+			ckpt_write_err(ctx, "TE", "mm: collect vm_file", ret);
 			                     ^^

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#901: FILE: checkpoint/memory.c:685:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: No space is necessary after a cast
#924: FILE: checkpoint/objhash.c:101:
+	atomic_inc(&((struct mm_struct *) ptr)->mm_users);

CHECK:SPACING: No space is necessary after a cast
#930: FILE: checkpoint/objhash.c:107:
+	mmput((struct mm_struct *) ptr);

CHECK:SPACING: No space is necessary after a cast
#935: FILE: checkpoint/objhash.c:112:
+	return atomic_read(&((struct mm_struct *) ptr)->mm_users);

WARNING:TYPO_SPELLING: 'TE' may be misspelled - perhaps 'THE'?
#976: FILE: checkpoint/process.c:124:
+		ckpt_write_err(ctx, "TE", "mm_struct", mm_objref);
 		                     ^^

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1027: FILE: include/linux/checkpoint.h:134:
+extern int checkpoint_mm_context(struct ckpt_ctx *ctx, struct mm_struct *mm);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1036: FILE: include/linux/checkpoint.h:167:
+extern void ckpt_pgarr_free(struct ckpt_ctx *ctx);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1038: FILE: include/linux/checkpoint.h:169:
+extern int generic_vma_checkpoint(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1042: FILE: include/linux/checkpoint.h:173:
+extern int private_vma_checkpoint(struct ckpt_ctx *ctx,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1047: FILE: include/linux/checkpoint.h:178:
+extern int checkpoint_obj_mm(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1049: FILE: include/linux/checkpoint.h:180:
+extern int ckpt_collect_mm(struct ckpt_ctx *ctx, struct task_struct *t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1050: FILE: include/linux/checkpoint.h:181:
+extern int checkpoint_mm(struct ckpt_ctx *ctx, void *ptr);

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1127: FILE: include/linux/checkpoint_hdr.h:251:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1149: FILE: include/linux/checkpoint_hdr.h:273:
+} __attribute__((aligned(8)));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __aligned(8) over __attribute__((aligned(8)))
#1155: FILE: include/linux/checkpoint_hdr.h:279:
+} __attribute__((aligned(8)));

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1157: FILE: include/linux/checkpoint_hdr.h:281:
+
+

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1192: FILE: include/linux/mm.h:1162:
+extern int filemap_checkpoint(struct ckpt_ctx *, struct vm_area_struct *);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1222: FILE: mm/filemap.c:1660:
+		return -ENOSYS;

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1225: FILE: mm/filemap.c:1663:
+	BUG_ON(!file);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1273: FILE: mm/mmap.c:2285:
+		return -ENOSYS;

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1277: FILE: mm/mmap.c:2289:
+		return -ENOSYS;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 26 warnings, 21 checks, 1091 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068257.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
