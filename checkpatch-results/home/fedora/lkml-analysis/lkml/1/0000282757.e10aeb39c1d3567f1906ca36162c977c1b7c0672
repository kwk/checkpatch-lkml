WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#47: FILE: mm/bootmem2.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#227: FILE: mm/bootmem2.c:181:
+			BUG_ON(first && start != block->start);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#250: FILE: mm/bootmem2.c:204:
+static struct block * __init find_node_block(int nid, unsigned long start,
+					unsigned long end)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#272: FILE: mm/bootmem2.c:226:
+			BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: mm/bootmem2.c:230:
+static int __init __reserve(void *map, unsigned long start,
+			unsigned long end, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#292: FILE: mm/bootmem2.c:246:
+static void __init free_range(struct block *block, unsigned long start,
+			unsigned long end)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#298: FILE: mm/bootmem2.c:252:
+static int __init reserve_range(struct block *block, unsigned long start,
+			unsigned long end, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#305: FILE: mm/bootmem2.c:259:
+static int __init mark_bootmem(int nid, unsigned long start,
+			unsigned long end, int reserve, int flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#315: FILE: mm/bootmem2.c:269:
+	BUG_ON(!block);

CHECK:BRACES: braces {} should be used on all arms of this statement
#320: FILE: mm/bootmem2.c:274:
+		if (reserve) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#327: FILE: mm/bootmem2.c:281:
+		} else

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#340: FILE: mm/bootmem2.c:294:
+static void __init __free_bootmem_node(int nid, unsigned long addr,
+			unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#355: FILE: mm/bootmem2.c:309:
+void __init free_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+			unsigned long size)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#371: FILE: mm/bootmem2.c:325:
+static int __init __reserve_bootmem_node(int nid, unsigned long addr,
+					unsigned long size, int flags)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#410: FILE: mm/bootmem2.c:364:
+static void * __init ___alloc_bootmem_block(struct block *block,
+				unsigned long align, unsigned long start,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#428: FILE: mm/bootmem2.c:382:
+	if (__reserve(block->map, PFN_DOWN(new_start) + merge,
+			PFN_UP(new_end), 1))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#429: FILE: mm/bootmem2.c:383:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#437: FILE: mm/bootmem2.c:391:
+static void * __init __alloc_bootmem_block(struct block *block,
+				unsigned long size, unsigned long align,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#442: FILE: mm/bootmem2.c:396:
+	BUG_ON(!block->map);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#447: FILE: mm/bootmem2.c:401:
+	BUG_ON(align & (align - 1));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#448: FILE: mm/bootmem2.c:402:
+	BUG_ON(limit && goal + size > limit);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#495: FILE: mm/bootmem2.c:449:
+static void * __init alloc_bootmem_blocks(int start_bid, int nr_blocks,
+				unsigned long size, unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#527: FILE: mm/bootmem2.c:481:
+static void * __init ___alloc_bootmem_node(int nid, unsigned long size,
+				unsigned long align, unsigned long goal,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#545: FILE: mm/bootmem2.c:499:
+void * __init __alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#562: FILE: mm/bootmem2.c:516:
+void * __init __alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#575: FILE: mm/bootmem2.c:529:
+void * __init __alloc_bootmem(unsigned long size, unsigned long align,
+			unsigned long goal)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#587: FILE: mm/bootmem2.c:541:
+void * __init __alloc_bootmem_low(unsigned long size, unsigned long align,
+				unsigned long goal)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#595: FILE: mm/bootmem2.c:549:
+void * __init alloc_bootmem_section(unsigned long size,
+				unsigned long section_nr)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#606: FILE: mm/bootmem2.c:560:
+	region = ___alloc_bootmem_node(nid, size, SMP_CACHE_BYTES,
+				goal, limit);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#613: FILE: mm/bootmem2.c:567:
+		printk(KERN_WARNING "alloc_bootmem failed on section %ld.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#614: FILE: mm/bootmem2.c:568:
+		printk(KERN_WARNING "alloc_bootmem failed on section %ld.\n",
+			section_nr);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#625: FILE: include/linux/bootmem2.h:1:
+#ifndef _LINUX_BOOTMEM2_H

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#644: FILE: include/linux/bootmem2.h:20:
+extern unsigned long bootmem_bootmap_pages(unsigned long pages);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#650: FILE: include/linux/bootmem2.h:26:
+extern unsigned long init_bootmem_block(int nid, int bnr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#669: FILE: include/linux/bootmem2.h:45:
+static inline unsigned long init_bootmem_node(pg_data_t *pgdat,
+					unsigned long mapstart,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#673: FILE: include/linux/bootmem2.h:49:
+	extern void ___multiple_blocks_per_node(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#679: FILE: include/linux/bootmem2.h:55:
+extern unsigned long free_all_bootmem_node(pg_data_t *pgdat);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#681: FILE: include/linux/bootmem2.h:57:
+extern void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#682: FILE: include/linux/bootmem2.h:58:
+extern void free_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+			unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#684: FILE: include/linux/bootmem2.h:60:
+extern int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#685: FILE: include/linux/bootmem2.h:61:
+extern int reserve_bootmem_node(pg_data_t *pgdat, unsigned long addr,
+			unsigned long size, int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#687: FILE: include/linux/bootmem2.h:63:
+extern void *__alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#688: FILE: include/linux/bootmem2.h:64:
+extern void *__alloc_bootmem_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#690: FILE: include/linux/bootmem2.h:66:
+extern void *__alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#691: FILE: include/linux/bootmem2.h:67:
+extern void *__alloc_bootmem_low_node(pg_data_t *pgdat, unsigned long size,
+				unsigned long align, unsigned long goal);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#714: FILE: include/linux/bootmem2.h:90:
+static inline unsigned long init_bootmem(unsigned long start,
+					unsigned long pages)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#733: FILE: include/linux/bootmem2.h:109:
+extern void free_bootmem(unsigned long addr, unsigned long size);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#735: FILE: include/linux/bootmem2.h:111:
+extern int __reserve_bootmem(unsigned long addr, unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#736: FILE: include/linux/bootmem2.h:112:
+extern int __reserve_bootmem(unsigned long addr, unsigned long size,
+			int flags);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#738: FILE: include/linux/bootmem2.h:114:
+extern void *__alloc_bootmem(unsigned long size, unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#739: FILE: include/linux/bootmem2.h:115:
+extern void *__alloc_bootmem(unsigned long size, unsigned long align,
+			unsigned long goal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#741: FILE: include/linux/bootmem2.h:117:
+extern void *__alloc_bootmem_low(unsigned long size, unsigned long align,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#742: FILE: include/linux/bootmem2.h:118:
+extern void *__alloc_bootmem_low(unsigned long size, unsigned long align,
+				unsigned long goal);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#757: FILE: include/linux/bootmem2.h:133:
+extern void *alloc_bootmem_section(unsigned long size,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#758: FILE: include/linux/bootmem2.h:134:
+extern void *alloc_bootmem_section(unsigned long size,
+				unsigned long section_nr);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#766: FILE: include/linux/bootmem2.h:142:
+extern void *alloc_remap(int nid, unsigned long size);

ERROR:CODE_INDENT: code indent should use tabs where possible
#770: FILE: include/linux/bootmem2.h:146:
+        return NULL;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#770: FILE: include/linux/bootmem2.h:146:
+        return NULL;$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#777: FILE: include/linux/bootmem2.h:153:
+extern void *alloc_large_system_hash(const char *tablename,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 11 warnings, 47 checks, 802 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000282757.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
