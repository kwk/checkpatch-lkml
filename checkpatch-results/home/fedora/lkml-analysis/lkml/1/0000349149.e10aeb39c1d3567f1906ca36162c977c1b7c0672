WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#28: 
Includes create, lookup, link, symlink, mkdir, mknod, readlink, follow_link,

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#38: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#43: FILE: fs/unionfs/inode.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#64: FILE: fs/unionfs/inode.c:22:
+			  int mode, struct nameidata *nd)
 			                              ^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#78: FILE: fs/unionfs/inode.c:36:
+	valid = __unionfs_d_revalidate_chain(dentry->d_parent, nd, false);
 	                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#84: FILE: fs/unionfs/inode.c:42:
+	valid = __unionfs_d_revalidate_chain(dentry, nd, false);
 	                                             ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#89: FILE: fs/unionfs/inode.c:47:
+	BUG_ON(!valid && dentry->d_inode);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#112: FILE: fs/unionfs/inode.c:70:
+		if (unlikely(IS_ERR(name))) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#150: FILE: fs/unionfs/inode.c:108:
+				struct inode *inode = lower_dir_dentry->d_inode;
+				err = inode->i_op->unlink(inode, wh_dentry);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#153: FILE: fs/unionfs/inode.c:111:
+				printk(KERN_ERR "unionfs: create: could not "

WARNING:SPLIT_STRING: quoted string split across lines
#154: FILE: fs/unionfs/inode.c:112:
+				printk(KERN_ERR "unionfs: create: could not "
+				       "unlink whiteout, err = %d\n", err);

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#207: FILE: fs/unionfs/inode.c:165:
+		unionfs_check_nd(nd);
 		                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#222: FILE: fs/unionfs/inode.c:180:
+				     struct nameidata *nd)
 				                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#230: FILE: fs/unionfs/inode.c:188:
+	if (nd) {
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#239: FILE: fs/unionfs/inode.c:197:
+	ret = unionfs_lookup_backend(dentry, nd, INTERPOSE_LOOKUP);
 	                                     ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#242: FILE: fs/unionfs/inode.c:200:
+	if (nd) {
 	    ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#256: FILE: fs/unionfs/inode.c:214:
+	unionfs_check_nd(nd);
 	                 ^^

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#294: FILE: fs/unionfs/inode.c:252:
+	if (unlikely(IS_ERR(name))) {

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#340: FILE: fs/unionfs/inode.c:298:
+	BUG_ON(dbstart(old_dentry) != dbstart(new_dentry));

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#443: FILE: fs/unionfs/inode.c:401:
+	if (unlikely(IS_ERR(name))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#512: FILE: fs/unionfs/inode.c:470:
+					printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#514: FILE: fs/unionfs/inode.c:472:
+					       "unionfs: create_parents for "
+					       "symlink failed: bindex=%d "

WARNING:SPLIT_STRING: quoted string split across lines
#515: FILE: fs/unionfs/inode.c:473:
+					       "symlink failed: bindex=%d "
+					       "err=%d\n", bindex, err);

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lower_dir_dentry->d_inode'
#547: FILE: fs/unionfs/inode.c:505:
+							lower_dir_dentry->
+							d_inode);

A single dereferencing identifier spanned on multiple lines like::

  struct_identifier->member[index].
  member = <foo>;

is generally hard to follow. It can easily lead to typos and so makes
the code vulnerable to bugs.

If fixing the multiple line dereferencing leads to an 80 column
violation, then either rewrite the code in a more simple way or if the
starting part of the dereferencing identifier is the same and used at
multiple places then store it in a temporary variable, and use that
temporary variable only at all the places. For example, if there are
two dereferencing identifiers::

  member1->member2->member3.foo1;
  member1->member2->member3.foo2;

then store the member1->member2->member3 part in a temporary variable.
It not only helps to avoid the 80 column violation but also reduces
the program size by removing the unnecessary dereferences.

But if none of the above methods work then ignore the 80 column
violation because it is much easier to read a dereferencing identifier
on a single line.

WARNING:MULTILINE_DEREFERENCE: Avoid multiple line dereference - prefer 'lower_dir_dentry->d_inode'
#550: FILE: fs/unionfs/inode.c:508:
+							lower_dir_dentry->
+							d_inode);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#605: FILE: fs/unionfs/inode.c:563:
+	if (unlikely(IS_ERR(name))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#658: FILE: fs/unionfs/inode.c:616:
+				printk(KERN_ERR "unionfs: lower dentry "

WARNING:SPLIT_STRING: quoted string split across lines
#659: FILE: fs/unionfs/inode.c:617:
+				printk(KERN_ERR "unionfs: lower dentry "
+				       " NULL for bindex = %d\n", bindex);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#704: FILE: fs/unionfs/inode.c:662:
+			printk(KERN_ERR "unionfs: mkdir: error creating "

WARNING:SPLIT_STRING: quoted string split across lines
#705: FILE: fs/unionfs/inode.c:663:
+			printk(KERN_ERR "unionfs: mkdir: error creating "
+			       ".wh.__dir_opaque: %d\n", err);

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#759: FILE: fs/unionfs/inode.c:717:
+	if (unlikely(IS_ERR(name))) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#806: FILE: fs/unionfs/inode.c:764:
+				printk(KERN_ERR "unionfs: failed to create "

WARNING:SPLIT_STRING: quoted string split across lines
#807: FILE: fs/unionfs/inode.c:765:
+				printk(KERN_ERR "unionfs: failed to create "
+				       "parents on %d, err = %ld\n",

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#908: FILE: fs/unionfs/inode.c:866:
+static void *unionfs_follow_link(struct dentry *dentry, struct nameidata *nd)
                                                                           ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#934: FILE: fs/unionfs/inode.c:892:
+	nd_set_link(nd, buf);
 	            ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#939: FILE: fs/unionfs/inode.c:897:
+	unionfs_check_nd(nd);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#945: FILE: fs/unionfs/inode.c:903:
+static void unionfs_put_link(struct dentry *dentry, struct nameidata *nd,
                                                                       ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#951: FILE: fs/unionfs/inode.c:909:
+	if (unlikely(!__unionfs_d_revalidate_chain(dentry, nd, false)))
 	                                                   ^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#952: FILE: fs/unionfs/inode.c:910:
+		printk(KERN_ERR

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#956: FILE: fs/unionfs/inode.c:914:
+	unionfs_check_nd(nd);
 	                 ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#957: FILE: fs/unionfs/inode.c:915:
+	kfree(nd_get_link(nd));
 	                  ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#971: FILE: fs/unionfs/inode.c:929:
+			      struct nameidata *nd)
 			                        ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#987: FILE: fs/unionfs/inode.c:945:
+		 * __unionfs_d_revalidate_chain on nd.dentry here.
 		                                   ^^

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1013: FILE: fs/unionfs/inode.c:971:
+		err = permission(lower_inode, mask, nd);
 		                                    ^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#1016: FILE: fs/unionfs/inode.c:974:
+			umode_t mode = lower_inode->i_mode;
+			if (is_robranch_super(inode->i_sb, bindex) &&

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#1045: FILE: fs/unionfs/inode.c:1003:
+	unionfs_check_nd(nd);
 	                 ^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1083: FILE: fs/unionfs/inode.c:1041:
+		BUG_ON(lower_dentry->d_inode == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!lower_dentry->d_inode"
#1083: FILE: fs/unionfs/inode.c:1041:
+		BUG_ON(lower_dentry->d_inode == NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1087: FILE: fs/unionfs/inode.c:1045:
+		if (is_robranch_super(dentry->d_sb, bindex)
+		    || IS_RDONLY(lower_dentry->d_inode)) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'bindex != bstart'
#1088: FILE: fs/unionfs/inode.c:1046:
+			if (copyup || (bindex != bstart))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:LINE_SPACING: Missing a blank line after declarations
#1093: FILE: fs/unionfs/inode.c:1051:
+				loff_t size = i_size_read(dentry->d_inode);
+				if (ia->ia_valid & ATTR_SIZE)

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1115: FILE: fs/unionfs/inode.c:1073:
+
+		}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1127: FILE: fs/unionfs/inode.c:1085:
+				printk(KERN_ERR

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1159: FILE: fs/unionfs/inode.c:1117:
+struct inode_operations unionfs_symlink_iops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1167: FILE: fs/unionfs/inode.c:1125:
+struct inode_operations unionfs_dir_iops = {

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#1187: FILE: fs/unionfs/inode.c:1145:
+struct inode_operations unionfs_main_iops = {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349149.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 52 warnings, 4 checks, 1154 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000349149.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
