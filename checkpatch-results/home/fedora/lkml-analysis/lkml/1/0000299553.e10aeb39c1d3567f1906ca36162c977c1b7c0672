WARNING:COMMIT_MESSAGE: Missing commit description - Add an appropriate one

The patch is missing a commit description.  A brief
description of the changes made by the patch should be added.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#describe-your-changes

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#28: FILE: fs/logfs/readwrite.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#29: FILE: fs/logfs/readwrite.c:2:
+ * fs/logfs/readwrite.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#90: FILE: fs/logfs/readwrite.c:63:
+	BUG_ON(bix >= INDIRECT_BIT);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#91: FILE: fs/logfs/readwrite.c:64:
+	BUG_ON(level > 7);

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#97: FILE: fs/logfs/readwrite.c:70:
+	index |= bix >> (level*LOGFS_BLOCK_BITS);
 	                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#110: FILE: fs/logfs/readwrite.c:83:
+	*bix = (index << (*level*LOGFS_BLOCK_BITS)) & ~INDIRECT_BIT;
 	                        ^

WARNING:RETURN_VOID: void function return statements are not generally useful
#113: FILE: fs/logfs/readwrite.c:86:
+	return;
+}

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#114: FILE: fs/logfs/readwrite.c:87:
+}
+#undef ARCH_SHIFT

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#122: FILE: fs/logfs/readwrite.c:95:
+ * ^I^Iif 1, completely flush list$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#138: FILE: fs/logfs/readwrite.c:111:
+		BUG_ON(list_empty(&super->s_dirty_list));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: fs/logfs/readwrite.c:113:
+		block = list_entry(super->s_dirty_list.next, struct logfs_block,
+				dirty_list);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#144: FILE: fs/logfs/readwrite.c:117:
+		BUG_ON(ret);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#168: FILE: fs/logfs/readwrite.c:141:
+static void logfs_get_wblocks(struct super_block *sb, struct page *page,
+		int lock)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#179: FILE: fs/logfs/readwrite.c:152:
+		 * and mempool fill grade */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#185: FILE: fs/logfs/readwrite.c:158:
+static void logfs_put_wblocks(struct super_block *sb, struct page *page,
+		int lock)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#190: FILE: fs/logfs/readwrite.c:163:
+		 * s_w_mutex or we could race against another task. */

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#230: FILE: fs/logfs/readwrite.c:203:
+	} else while (unlikely(TestSetPageLocked(page))) {

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#230: FILE: fs/logfs/readwrite.c:203:
+	} else while (unlikely(TestSetPageLocked(page))) {

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#233: FILE: fs/logfs/readwrite.c:206:
+			 * is safe to use this page. */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#238: FILE: fs/logfs/readwrite.c:211:
+			printk(KERN_ERR "stack at %p\n", &loop);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#239: FILE: fs/logfs/readwrite.c:212:
+			BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_mapping == write_page->mapping'
#261: FILE: fs/logfs/readwrite.c:234:
+	if (write_page && (inode->i_mapping == write_page->mapping)
+			&& (index == write_page->index))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'index == write_page->index'
#261: FILE: fs/logfs/readwrite.c:234:
+	if (write_page && (inode->i_mapping == write_page->mapping)
+			&& (index == write_page->index))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#262: FILE: fs/logfs/readwrite.c:235:
+	if (write_page && (inode->i_mapping == write_page->mapping)
+			&& (index == write_page->index))

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#313: FILE: fs/logfs/readwrite.c:286:
+		return bs_fully_populated;
+	} else {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#390: FILE: fs/logfs/readwrite.c:363:
+	memset(buf + LOGFS_EMBEDDED_SIZE, 0,
+			PAGE_CACHE_SIZE - LOGFS_EMBEDDED_SIZE);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#431: FILE: fs/logfs/readwrite.c:404:
+		bofs = block_get_pointer(ipage, get_bits(bix, level-1));
 		                                                   ^

CHECK:BRACES: braces {} should be used on all arms of this statement
#445: FILE: fs/logfs/readwrite.c:418:
+	if (li->li_flags & LOGFS_IF_EMBEDDED) {
[...]
+	} else if (index < I0_BLOCKS)
[...]
+	else if (index < I1_BLOCKS)
[...]
+	else if (index < I2_BLOCKS)
[...]
+	else if (index < I3_BLOCKS)
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#459: FILE: fs/logfs/readwrite.c:432:
+	BUG();

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'li->li_data[bix] == 0'
#468: FILE: fs/logfs/readwrite.c:441:
+		if (data ^ (li->li_data[bix] == 0))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#481: FILE: fs/logfs/readwrite.c:454:
+	BUG_ON(!bofs);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#494: FILE: fs/logfs/readwrite.c:467:
+		slot = get_bits(bix, level-1);
 		                          ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rblock[slot] != 0'
#497: FILE: fs/logfs/readwrite.c:470:
+			if (data && (rblock[slot] != 0))

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#502: FILE: fs/logfs/readwrite.c:475:
+			bix += 1 << (LOGFS_BLOCK_BITS * (level-1));
 			                                      ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#513: FILE: fs/logfs/readwrite.c:486:
+			BUG_ON(data);

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'index' - possible side-effects?
#541: FILE: fs/logfs/readwrite.c:514:
+#define SEEK_HOLE_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			return bix;					\
+		else if (li->li_data[index] & LOGFS_FULLY_POPULATED)	\
+			bix = blocks;					\
+		else {							\
+			bix = seek_holedata_loop(inode, bix, count, 0);	\
+			if (bix < blocks)				\
+				return bix;				\
+			/* LOGFS_FULLY_POPULATED should have been set */\
+			WARN_ON_ONCE(bix == blocks);			\
+		}							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'blocks' - possible side-effects?
#541: FILE: fs/logfs/readwrite.c:514:
+#define SEEK_HOLE_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			return bix;					\
+		else if (li->li_data[index] & LOGFS_FULLY_POPULATED)	\
+			bix = blocks;					\
+		else {							\
+			bix = seek_holedata_loop(inode, bix, count, 0);	\
+			if (bix < blocks)				\
+				return bix;				\
+			/* LOGFS_FULLY_POPULATED should have been set */\
+			WARN_ON_ONCE(bix == blocks);			\
+		}							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'blocks' may be better as '(blocks)' to avoid precedence issues
#541: FILE: fs/logfs/readwrite.c:514:
+#define SEEK_HOLE_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			return bix;					\
+		else if (li->li_data[index] & LOGFS_FULLY_POPULATED)	\
+			bix = blocks;					\
+		else {							\
+			bix = seek_holedata_loop(inode, bix, count, 0);	\
+			if (bix < blocks)				\
+				return bix;				\
+			/* LOGFS_FULLY_POPULATED should have been set */\
+			WARN_ON_ONCE(bix == blocks);			\
+		}							\
+	}								\
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#541: FILE: fs/logfs/readwrite.c:514:
+#define SEEK_HOLE_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			return bix;					\
+		else if (li->li_data[index] & LOGFS_FULLY_POPULATED)	\
+			bix = blocks;					\
+		else {							\
+			bix = seek_holedata_loop(inode, bix, count, 0);	\
+			if (bix < blocks)				\
+				return bix;				\
+			/* LOGFS_FULLY_POPULATED should have been set */\
+			WARN_ON_ONCE(bix == blocks);			\
+		}							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'blocks' - possible side-effects?
#577: FILE: fs/logfs/readwrite.c:550:
+#define SEEK_DATA_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			bix = blocks;					\
+		else							\
+			return seek_holedata_loop(inode, bix, count, 1);\
+	}								\
+} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'blocks' may be better as '(blocks)' to avoid precedence issues
#577: FILE: fs/logfs/readwrite.c:550:
+#define SEEK_DATA_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			bix = blocks;					\
+		else							\
+			return seek_holedata_loop(inode, bix, count, 1);\
+	}								\
+} while (0)

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#577: FILE: fs/logfs/readwrite.c:550:
+#define SEEK_DATA_LOOP_WRAPPER(index, blocks, count) do {		\
+	if (bix < blocks) {						\
+		if (!li->li_data[index])				\
+			bix = blocks;					\
+		else							\
+			return seek_holedata_loop(inode, bix, count, 1);\
+	}								\
+} while (0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#625: FILE: fs/logfs/readwrite.c:598:
+static int __logfs_is_valid_loop(struct inode *inode, u64 bix, int count,
+		u64 ofs, u64 bofs)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#632: FILE: fs/logfs/readwrite.c:605:
+		BUG_ON(!page);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#645: FILE: fs/logfs/readwrite.c:618:
+		bofs = block_get_pointer(page, get_bits(bix, level-1));
 		                                                  ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: fs/logfs/readwrite.c:630:
+static int logfs_is_valid_loop(struct inode *inode, pgoff_t index,
+		int count, u64 ofs)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inode->i_nlink == 0'
#680: FILE: fs/logfs/readwrite.c:653:
+	if ((inode->i_nlink == 0) && atomic_read(&inode->i_count) == 1)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#695: FILE: fs/logfs/readwrite.c:668:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#711: FILE: fs/logfs/readwrite.c:684:
+int logfs_is_valid_block(struct super_block *sb, u64 ofs, u64 ino, u64 bix,
+		u8 level)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#719: FILE: fs/logfs/readwrite.c:692:
+	 * blocks are by definition invalid. */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#735: FILE: fs/logfs/readwrite.c:708:
+	 * in the ifile, with properly forged parameters */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#827: FILE: fs/logfs/readwrite.c:800:
+	BUG_ON(level >= LOGFS_MAX_LEVELS);

WARNING:TYPO_SPELLING: 'seperate' may be misspelled - perhaps 'separate'?
#830: FILE: fs/logfs/readwrite.c:803:
+		/* ifile has seperate areas */
 		             ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#837: FILE: fs/logfs/readwrite.c:810:
+static struct logfs_shadow *alloc_shadow(struct inode *inode, u64 bix, u8 level,
+		u64 old_ofs)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#858: FILE: fs/logfs/readwrite.c:831:
+static void shadow_tree_merge(struct shadow_tree *target,
+		struct shadow_tree *victim)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#865: FILE: fs/logfs/readwrite.c:838:
+static void add_shadow_tree_to_page(struct page *page,
+		struct shadow_tree *shadow_tree)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shadow_tree->old.height == 0'
#869: FILE: fs/logfs/readwrite.c:842:
+	if ((shadow_tree->old.height == 0) && (shadow_tree->new.height == 0))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'shadow_tree->new.height == 0'
#869: FILE: fs/logfs/readwrite.c:842:
+	if ((shadow_tree->old.height == 0) && (shadow_tree->new.height == 0))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#876: FILE: fs/logfs/readwrite.c:849:
+static void fill_shadow_tree(struct shadow_tree *tree, struct page *page,
+		struct logfs_shadow *shadow)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#949: FILE: fs/logfs/readwrite.c:922:
+static int logfs_write_i0(struct inode *inode, struct page *page,
+		struct write_control *wc)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'level == 0'
#973: FILE: fs/logfs/readwrite.c:946:
+	if (wc->ofs && ((level == 0) || (page_state(page) == bs_fully_populated)))

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#979: FILE: fs/logfs/readwrite.c:952:
+static int logfs_write_direct(struct inode *inode, struct page *page,
+		long flags)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1004: FILE: fs/logfs/readwrite.c:977:
+	 * to buggerhead being the default. */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1005: FILE: fs/logfs/readwrite.c:978:
+	BUG_ON(!page_mapping(page)->a_ops->set_page_dirty);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1018: FILE: fs/logfs/readwrite.c:991:
+static int __logfs_write_rec(struct inode *inode, struct page *page,
+		struct write_control *this_wc,

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1042: FILE: fs/logfs/readwrite.c:1015:
+	child_wc.ofs = block_get_pointer(ipage, get_bits(bix, level-1));
 	                                                           ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1044: FILE: fs/logfs/readwrite.c:1017:
+	if (level-1 > target_level)
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1046: FILE: fs/logfs/readwrite.c:1019:
+		ret = __logfs_write_rec(inode, page, &child_wc, bix,
+				target_level, level-1);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1046: FILE: fs/logfs/readwrite.c:1019:
+				target_level, level-1);
 				                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1054: FILE: fs/logfs/readwrite.c:1027:
+	block_set_pointer(ipage, get_bits(bix, level-1), child_wc.ofs);
 	                                            ^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#1059: FILE: fs/logfs/readwrite.c:1032:
+	 * space for indirect blocks in the future, which we cannot reserve */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1070: FILE: fs/logfs/readwrite.c:1043:
+static int logfs_write_rec(struct inode *inode, struct page *page,
+		pgoff_t bix, int count, int target_level, long flags)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1080: FILE: fs/logfs/readwrite.c:1053:
+	if (count+1 > target_level)
 	         ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1082: FILE: fs/logfs/readwrite.c:1055:
+		ret = __logfs_write_rec(inode, page, &wc, bix, target_level,
+				count+1);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1082: FILE: fs/logfs/readwrite.c:1055:
+				count+1);
 				     ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1101: FILE: fs/logfs/readwrite.c:1074:
+static void logfs_handle_transaction(struct inode *inode,
+		struct logfs_transaction *ta)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1110: FILE: fs/logfs/readwrite.c:1083:
+		BUG_ON(logfs_inode(inode)->li_transaction);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1117: FILE: fs/logfs/readwrite.c:1090:
+	case CREATE_1: /* fall through */

Use the `fallthrough;` pseudo keyword instead of
`/* fallthrough */` like comments.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1119: FILE: fs/logfs/readwrite.c:1092:
+		BUG_ON(super->s_victim_ino);

WARNING:PREFER_FALLTHROUGH: Prefer 'fallthrough;' over fallthrough comment
#1122: FILE: fs/logfs/readwrite.c:1095:
+	case CREATE_2: /* fall through */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1124: FILE: fs/logfs/readwrite.c:1097:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1130: FILE: fs/logfs/readwrite.c:1103:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1131: FILE: fs/logfs/readwrite.c:1104:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1136: FILE: fs/logfs/readwrite.c:1109:
+		BUG_ON(super->s_rename_dir != ta->dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1137: FILE: fs/logfs/readwrite.c:1110:
+		BUG_ON(super->s_rename_pos != ta->pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1143: FILE: fs/logfs/readwrite.c:1116:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1144: FILE: fs/logfs/readwrite.c:1117:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1145: FILE: fs/logfs/readwrite.c:1118:
+		BUG_ON(super->s_victim_ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1151: FILE: fs/logfs/readwrite.c:1124:
+		BUG_ON(super->s_rename_dir != ta->dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1152: FILE: fs/logfs/readwrite.c:1125:
+		BUG_ON(super->s_rename_pos != ta->pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1153: FILE: fs/logfs/readwrite.c:1126:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1158: FILE: fs/logfs/readwrite.c:1131:
+		BUG_ON(super->s_rename_dir);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1159: FILE: fs/logfs/readwrite.c:1132:
+		BUG_ON(super->s_rename_pos);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1160: FILE: fs/logfs/readwrite.c:1133:
+		BUG_ON(super->s_victim_ino != ta->ino);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1165: FILE: fs/logfs/readwrite.c:1138:
+		BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1170: FILE: fs/logfs/readwrite.c:1143:
+static int __logfs_write_buf(struct inode *inode, struct page *page,
+		struct logfs_transaction *ta, long flags)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1179: FILE: fs/logfs/readwrite.c:1152:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1201: FILE: fs/logfs/readwrite.c:1174:
+	BUG();

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1206: FILE: fs/logfs/readwrite.c:1179:
+int logfs_write_buf(struct inode *inode, struct page *page,
+		struct logfs_transaction *ta, long flags)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1214: FILE: fs/logfs/readwrite.c:1187:
+	BUG_ON(PagePrivate(page));

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1226: FILE: fs/logfs/readwrite.c:1199:
+	inode->i_ctime = inode->i_mtime = CURRENT_TIME;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1246: FILE: fs/logfs/readwrite.c:1219:
+int logfs_delete(struct inode *inode, pgoff_t index,
+		struct shadow_tree *shadow_tree, struct logfs_transaction *ta)

WARNING:TYPO_SPELLING: 'immediatly' may be misspelled - perhaps 'immediately'?
#1270: FILE: fs/logfs/readwrite.c:1243:
+/* Rewrite cannot mark the inode dirty but has to write it immediatly. */
                                                            ^^^^^^^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1272: FILE: fs/logfs/readwrite.c:1245:
+int logfs_rewrite_block(struct inode *inode, u64 bix, u64 ofs, int level,
+		long flags)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'offset' - possible side-effects?
#1289: FILE: fs/logfs/readwrite.c:1262:
+#define truncate_page(page, offset, km_type) \
+	zero_user_page(page, offset, PAGE_SIZE - offset, km_type);

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#1289: FILE: fs/logfs/readwrite.c:1262:
+#define truncate_page(page, offset, km_type) \
+	zero_user_page(page, offset, PAGE_SIZE - offset, km_type);

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1293: FILE: fs/logfs/readwrite.c:1266:
+static int truncate_data_block(struct inode *inode, struct page *page,
+		u64 ofs, struct logfs_shadow *shadow)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1302: FILE: fs/logfs/readwrite.c:1275:
+	BUG_ON(level > 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1306: FILE: fs/logfs/readwrite.c:1279:
+	BUG_ON(size - pageofs >= PAGE_SIZE);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1315: FILE: fs/logfs/readwrite.c:1288:
+static int __logfs_truncate_i0(struct inode *inode, struct page *page,
+		struct write_control *wc)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1350: FILE: fs/logfs/readwrite.c:1323:
+		if (size > (e+1) * LOGFS_BLOCKSIZE)
 		             ^

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1360: FILE: fs/logfs/readwrite.c:1333:
+#if 0 /* I believe this is unnecessary */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1403: FILE: fs/logfs/readwrite.c:1376:
+	if (*bix <= logfs_start_index[*level-1])
 	                                    ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1408: FILE: fs/logfs/readwrite.c:1381:
+static int __logfs_truncate_rec(struct inode *inode, struct page *ipage,
+		struct write_control *this_wc, u64 size)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#1426: FILE: fs/logfs/readwrite.c:1399:
+		child_bix = bix + e*logfs_foo[level-1];
 		                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1426: FILE: fs/logfs/readwrite.c:1399:
+		child_bix = bix + e*logfs_foo[level-1];
 		                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1427: FILE: fs/logfs/readwrite.c:1400:
+		if (size > (e+1) * logfs_factor[level-1]) {
 		             ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1427: FILE: fs/logfs/readwrite.c:1400:
+		if (size > (e+1) * logfs_factor[level-1]) {
 		                                     ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1429: FILE: fs/logfs/readwrite.c:1402:
+				BUG(); /* FIXME: Write out truncated block */

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1438: FILE: fs/logfs/readwrite.c:1411:
+		page = logfs_get_write_page(inode, child_bix, level-1);
 		                                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1460: FILE: fs/logfs/readwrite.c:1433:
+		.ofs = li->li_data[I1_INDEX + level-1],
 		                                   ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1478: FILE: fs/logfs/readwrite.c:1451:
+	if (li->li_data[I1_INDEX + level-1] != wc.ofs) {
 	                                ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1479: FILE: fs/logfs/readwrite.c:1452:
+		li->li_data[I1_INDEX + level-1] = wc.ofs;
 		                            ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1557: FILE: fs/logfs/readwrite.c:1530:
+	page = read_cache_page(inode->i_mapping, bix,
+			(filler_t *)logfs_readpage, NULL);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1583: FILE: fs/logfs/readwrite.c:1556:
+int logfs_inode_write(struct inode *inode, const void *buf, size_t count,
+		loff_t bix, long flags, struct logfs_transaction *ta,

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1591: FILE: fs/logfs/readwrite.c:1564:
+	BUG_ON(pos & (LOGFS_BLOCKSIZE-1));

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1591: FILE: fs/logfs/readwrite.c:1564:
+	BUG_ON(pos & (LOGFS_BLOCKSIZE-1));
 	                             ^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1592: FILE: fs/logfs/readwrite.c:1565:
+	BUG_ON(count > LOGFS_BLOCKSIZE);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#1599: FILE: fs/logfs/readwrite.c:1572:
+	memset(pagebuf+count, 0, LOGFS_BLOCKSIZE-count);
 	              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1599: FILE: fs/logfs/readwrite.c:1572:
+	memset(pagebuf+count, 0, LOGFS_BLOCKSIZE-count);
 	                                        ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1635: FILE: fs/logfs/readwrite.c:1608:
+	super->s_block_pool = mempool_create_kzalloc_pool(min_fill,
+			sizeof(struct logfs_block));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1637: FILE: fs/logfs/readwrite.c:1610:
+	super->s_shadow_pool = mempool_create_kzalloc_pool(min_fill,
+			sizeof(struct logfs_shadow));

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 58 warnings, 73 checks, 1618 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000299553.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
