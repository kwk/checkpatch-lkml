WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#51: 
   struct or special tricks like overloading the LRU pointer. A per-container

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#101: FILE: include/linux/memcontrol.h:57:
+extern int memcontrol_mm_overlimit(struct mm_struct *mm, void *sc_cont);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#137: FILE: include/linux/rmap.h:94:
+int try_to_unmap(struct page *, int ignore_refs, struct container *container);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#140: FILE: include/linux/rmap.h:97:
+bool page_in_container(struct page *page, struct zone *zone,
+			struct container *container);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#143: FILE: include/linux/rmap.h:100:
+static inline bool page_in_container(struct page *page, struct zone *zone,
+					struct container *container)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#158: FILE: include/linux/rmap.h:134:
+static inline bool page_in_container(struct page *page, struct zone *zone,
+					struct container *container)

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#180: FILE: include/linux/swap.h:192:
+extern unsigned long memcontrol_shrink_mapped_memory(unsigned long nr_pages,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#181: FILE: include/linux/swap.h:193:
+extern unsigned long memcontrol_shrink_mapped_memory(unsigned long nr_pages,
+						struct container *container);

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#215: FILE: mm/memcontrol.c:64:
+	spinlock_t			lock;

ERROR:CODE_INDENT: code indent should use tabs where possible
#236: FILE: mm/memcontrol.c:93:
+ ^I * Regular reclaim, let it proceed as usual$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#236: FILE: mm/memcontrol.c:93:
+ ^I * Regular reclaim, let it proceed as usual$

ERROR:CODE_INDENT: code indent should use tabs where possible
#237: FILE: mm/memcontrol.c:94:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#237: FILE: mm/memcontrol.c:94:
+ ^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage > limit'
#250: FILE: mm/memcontrol.c:107:
+	if (limit && (usage > limit))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

ERROR:CODE_INDENT: code indent should use tabs where possible
#293: FILE: mm/memcontrol.c:175:
+ ^I^I * Resample usage and limit after reclaim$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#293: FILE: mm/memcontrol.c:175:
+ ^I^I * Resample usage and limit after reclaim$

ERROR:CODE_INDENT: code indent should use tabs where possible
#294: FILE: mm/memcontrol.c:176:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#294: FILE: mm/memcontrol.c:176:
+ ^I^I */$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage > limit'
#300: FILE: mm/memcontrol.c:182:
+	if (limit && (usage > limit))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'usage > limit'
#359: FILE: mm/memcontrol.c:283:
+	if (limit && (usage > limit))

ERROR:CODE_INDENT: code indent should use tabs where possible
#372: FILE: mm/memcontrol.c:378:
+ ^I * See if this can be stopped at the upper layer$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: mm/memcontrol.c:378:
+ ^I * See if this can be stopped at the upper layer$

ERROR:CODE_INDENT: code indent should use tabs where possible
#373: FILE: mm/memcontrol.c:379:
+ ^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: mm/memcontrol.c:379:
+ ^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#401: FILE: mm/rmap.c:796:
+static int try_to_unmap_anon(struct page *page, int migration,
+				struct container *container)

ERROR:CODE_INDENT: code indent should use tabs where possible
#410: FILE: mm/rmap.c:808:
+ ^I^I * When reclaiming memory on behalf of overlimit containers$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#410: FILE: mm/rmap.c:808:
+ ^I^I * When reclaiming memory on behalf of overlimit containers$

ERROR:CODE_INDENT: code indent should use tabs where possible
#411: FILE: mm/rmap.c:809:
+ ^I^I * shared pages are spared, they are only unmapped from$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#411: FILE: mm/rmap.c:809:
+ ^I^I * shared pages are spared, they are only unmapped from$

ERROR:CODE_INDENT: code indent should use tabs where possible
#412: FILE: mm/rmap.c:810:
+ ^I^I * the vma's (mm's) whose containers are over limit$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#412: FILE: mm/rmap.c:810:
+ ^I^I * the vma's (mm's) whose containers are over limit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#413: FILE: mm/rmap.c:811:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#413: FILE: mm/rmap.c:811:
+ ^I^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#425: FILE: mm/rmap.c:832:
+static int try_to_unmap_file(struct page *page, int migration,
+				struct container *container)

ERROR:CODE_INDENT: code indent should use tabs where possible
#434: FILE: mm/rmap.c:847:
+ ^I^I * If we are reclaiming memory due to containers being overlimit$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#434: FILE: mm/rmap.c:847:
+ ^I^I * If we are reclaiming memory due to containers being overlimit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#435: FILE: mm/rmap.c:848:
+ ^I^I * and this mm is not over it's limit, spare the page$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#435: FILE: mm/rmap.c:848:
+ ^I^I * and this mm is not over it's limit, spare the page$

ERROR:CODE_INDENT: code indent should use tabs where possible
#436: FILE: mm/rmap.c:849:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#436: FILE: mm/rmap.c:849:
+ ^I^I */$

ERROR:CODE_INDENT: code indent should use tabs where possible
#510: FILE: mm/rmap.c:991:
+ ^I^I * Check if the page belongs to the container and it is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#510: FILE: mm/rmap.c:991:
+ ^I^I * Check if the page belongs to the container and it is$

ERROR:CODE_INDENT: code indent should use tabs where possible
#511: FILE: mm/rmap.c:992:
+ ^I^I * overlimit$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#511: FILE: mm/rmap.c:992:
+ ^I^I * overlimit$

ERROR:CODE_INDENT: code indent should use tabs where possible
#512: FILE: mm/rmap.c:993:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#512: FILE: mm/rmap.c:993:
+ ^I^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#522: FILE: mm/rmap.c:1003:
+	list_for_each_entry(vma, &mapping->i_mmap_nonlinear,
+						shared.vm_set.list)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#533: FILE: mm/rmap.c:1014:
+bool page_in_container(struct page *page, struct zone *zone,
+			struct container *container)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#593: FILE: mm/vmscan.c:637:
+	for (scan = 0, vscan = 0; scan < nr_to_scan && (vscan < max_scan) &&
+					!list_empty(src); scan++, vscan++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#601: FILE: mm/vmscan.c:645:
+ ^I^I * For containers, do not scan the page unless it$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#601: FILE: mm/vmscan.c:645:
+ ^I^I * For containers, do not scan the page unless it$

ERROR:CODE_INDENT: code indent should use tabs where possible
#602: FILE: mm/vmscan.c:646:
+ ^I^I * belongs to the container we are reclaiming for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#602: FILE: mm/vmscan.c:646:
+ ^I^I * belongs to the container we are reclaiming for$

ERROR:CODE_INDENT: code indent should use tabs where possible
#603: FILE: mm/vmscan.c:647:
+ ^I^I */$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#603: FILE: mm/vmscan.c:647:
+ ^I^I */$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#729: FILE: mm/vmscan.c:1561:
+unsigned long memcontrol_shrink_mapped_memory(unsigned long nr_pages,
+						struct container *container)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#785: FILE: include/linux/list.h:347:
+static inline void __list_splice_tail(struct list_head *list,
+					struct list_head *head)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#804: FILE: include/linux/list.h:366:
+static inline void list_splice_tail(struct list_head *list,
+					struct list_head *head)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 19 errors, 21 warnings, 18 checks, 662 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000463610.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
