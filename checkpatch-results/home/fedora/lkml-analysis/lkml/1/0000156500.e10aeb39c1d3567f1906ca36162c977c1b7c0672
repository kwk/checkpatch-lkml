WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#45: 
my experience with plain old 2.6.24 on 32bit _production_ boxes was that un=

WARNING:TYPO_SPELLING: 'Thats' may be misspelled - perhaps 'That's'?
#86: 
Thats all.
^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct ctl_table *' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct file *' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void __user *' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'size_t *' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t *' should also have an identifier name
#110: FILE: include/linux/mmzone.h:693:
+int mempattern_sysctl_handler(struct ctl_table *, int, struct file *, 

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#122: FILE: include/linux/sysctl.h:228:
+	VM_MEMPATTERN=36,	 /* output physical memory patterns */
 	             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#161: FILE: mm/page_alloc.c:1961:
+        size_t pos = 0;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#161: FILE: mm/page_alloc.c:1961:
+        size_t pos = 0;$

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: mm/page_alloc.c:1963:
+#define WRITE_CHAR(out,order,pfn)				\
                       ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#163: FILE: mm/page_alloc.c:1963:
+#define WRITE_CHAR(out,order,pfn)				\
                             ^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros with multiple statements should be enclosed in a do - while loop
#163: FILE: mm/page_alloc.c:1963:
+#define WRITE_CHAR(out,order,pfn)				\
+        if(bufsize -  pos <= (1 << (order)))			\
+	          goto done;					\
+        if(!((pfn) % 64)) {					\
+	        put_user('\n', (char __user *)(buf + pos));	\
+		pos++;						\
+	}							\
+        put_user((out), (char __user *)(buf + pos));		\
+        pos++;

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

WARNING:MACRO_WITH_FLOW_CONTROL: Macros with flow control statements should be avoided
#163: FILE: mm/page_alloc.c:1963:
+#define WRITE_CHAR(out,order,pfn)				\
+        if(bufsize -  pos <= (1 << (order)))			\
+	          goto done;					\
+        if(!((pfn) % 64)) {					\
+	        put_user('\n', (char __user *)(buf + pos));	\
+		pos++;						\
+	}							\
+        put_user((out), (char __user *)(buf + pos));		\
+        pos++;

WARNING:TRAILING_SEMICOLON: macros should not use a trailing semicolon
#163: FILE: mm/page_alloc.c:1963:
+#define WRITE_CHAR(out,order,pfn)				\
+        if(bufsize -  pos <= (1 << (order)))			\
+	          goto done;					\
+        if(!((pfn) % 64)) {					\
+	        put_user('\n', (char __user *)(buf + pos));	\
+		pos++;						\
+	}							\
+        put_user((out), (char __user *)(buf + pos));		\
+        pos++;

Macro definition should not end with a semicolon. The macro
invocation style should be consistent with function calls.
This can prevent any unexpected code paths::

  #define MAC do_something;

If this macro is used within a if else statement, like::

  if (some_condition)
          MAC;

  else
          do_something;

Then there would be a compilation error, because when the macro is
expanded there are two trailing semicolons, so the else branch gets
orphaned.

See: https://lore.kernel.org/lkml/1399671106.2912.21.camel@joe-AO725/

ERROR:CODE_INDENT: code indent should use tabs where possible
#164: FILE: mm/page_alloc.c:1964:
+        if(bufsize -  pos <= (1 << (order)))^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#164: FILE: mm/page_alloc.c:1964:
+        if(bufsize -  pos <= (1 << (order)))^I^I^I\$

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 18)
#164: FILE: mm/page_alloc.c:1964:
+        if(bufsize -  pos <= (1 << (order)))			\
+	          goto done;					\

ERROR:SPACING: space required before the open parenthesis '('
#164: FILE: mm/page_alloc.c:1964:
+        if(bufsize -  pos <= (1 << (order)))			\

ERROR:CODE_INDENT: code indent should use tabs where possible
#165: FILE: mm/page_alloc.c:1965:
+^I          goto done;^I^I^I^I^I\$

WARNING:TABSTOP: Statements should start on a tabstop
#165: FILE: mm/page_alloc.c:1965:
+	          goto done;					\

ERROR:CODE_INDENT: code indent should use tabs where possible
#166: FILE: mm/page_alloc.c:1966:
+        if(!((pfn) % 64)) {^I^I^I^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#166: FILE: mm/page_alloc.c:1966:
+        if(!((pfn) % 64)) {^I^I^I^I^I\$

ERROR:SPACING: space required before the open parenthesis '('
#166: FILE: mm/page_alloc.c:1966:
+        if(!((pfn) % 64)) {					\

ERROR:CODE_INDENT: code indent should use tabs where possible
#167: FILE: mm/page_alloc.c:1967:
+^I        put_user('\n', (char __user *)(buf + pos));^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#170: FILE: mm/page_alloc.c:1970:
+        put_user((out), (char __user *)(buf + pos));^I^I\$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#170: FILE: mm/page_alloc.c:1970:
+        put_user((out), (char __user *)(buf + pos));^I^I\$

ERROR:CODE_INDENT: code indent should use tabs where possible
#171: FILE: mm/page_alloc.c:1971:
+        pos++;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#171: FILE: mm/page_alloc.c:1971:
+        pos++;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#173: FILE: mm/page_alloc.c:1973:
+        //printk("called do_mempattern bufsize=%ld\n", bufsize);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#175: FILE: mm/page_alloc.c:1975:
+^I        size_t len = strlen(zone->name);$

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#178: FILE: mm/page_alloc.c:1978:
+		if(bufsize -  pos <= len+7)
 		                        ^

ERROR:SPACING: space required before the open parenthesis '('
#178: FILE: mm/page_alloc.c:1978:
+		if(bufsize -  pos <= len+7)

ERROR:CODE_INDENT: code indent should use tabs where possible
#179: FILE: mm/page_alloc.c:1979:
+^I^I        goto done;$

ERROR:SPACING: space required before the open parenthesis '('
#180: FILE: mm/page_alloc.c:1980:
+		if(copy_to_user(buf + pos, "Zone: ", 6))

ERROR:CODE_INDENT: code indent should use tabs where possible
#181: FILE: mm/page_alloc.c:1981:
+^I^I        return -EFAULT;$

ERROR:SPACING: space required before the open parenthesis '('
#183: FILE: mm/page_alloc.c:1983:
+		if(copy_to_user(buf + pos, zone->name, len))

ERROR:CODE_INDENT: code indent should use tabs where possible
#184: FILE: mm/page_alloc.c:1984:
+^I^I        return -EFAULT;$

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#188: FILE: mm/page_alloc.c:1988:
+		for(pfn = zone->zone_start_pfn; pfn < zone->zone_start_pfn+zone->spanned_pages; pfn++) {

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#188: FILE: mm/page_alloc.c:1988:
+		for(pfn = zone->zone_start_pfn; pfn < zone->zone_start_pfn+zone->spanned_pages; pfn++) {
 		                                                          ^

ERROR:SPACING: space required before the open parenthesis '('
#188: FILE: mm/page_alloc.c:1988:
+		for(pfn = zone->zone_start_pfn; pfn < zone->zone_start_pfn+zone->spanned_pages; pfn++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#193: FILE: mm/page_alloc.c:1993:
+^I^I        if(!pfn_valid(pfn))$

ERROR:SPACING: space required before the open parenthesis '('
#193: FILE: mm/page_alloc.c:1993:
+		        if(!pfn_valid(pfn))

ERROR:CODE_INDENT: code indent should use tabs where possible
#194: FILE: mm/page_alloc.c:1994:
+^I^I^I        continue;$

ERROR:SPACING: space required before the open parenthesis '('
#196: FILE: mm/page_alloc.c:1996:
+			if(PageBuddy(page)) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#197: FILE: mm/page_alloc.c:1997:
+^I^I^I        order = page_order(page);$

ERROR:SPACING: space required before the open parenthesis '('
#199: FILE: mm/page_alloc.c:1999:
+			} else if(PageSlab(page)) {

ERROR:SPACING: space required before the open parenthesis '('
#201: FILE: mm/page_alloc.c:2001:
+			} else if(PageDirty(page)) {

ERROR:SPACING: space required before the open parenthesis '('
#203: FILE: mm/page_alloc.c:2003:
+				if(PageLRU(page)) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#203: FILE: mm/page_alloc.c:2003:
+				if(PageLRU(page)) {
+				        out = '@';
+				}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

ERROR:CODE_INDENT: code indent should use tabs where possible
#204: FILE: mm/page_alloc.c:2004:
+^I^I^I^I        out = '@';$

ERROR:SPACING: space required before the open parenthesis '('
#206: FILE: mm/page_alloc.c:2006:
+			} else if(PageLRU(page)) {

ERROR:SPACING: space required before the open parenthesis '('
#212: FILE: mm/page_alloc.c:2012:
+			for(i = 1; i < (1 << order); i++) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#214: FILE: mm/page_alloc.c:2014:
+^I^I^I        WRITE_CHAR('x', 0, pfn);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#224: FILE: mm/page_alloc.c:2024:
+int sysctl_mempattern(struct ctl_table *table, int __user *name, int nlen,
+		  void __user *oldval, size_t __user *oldlenp,

ERROR:CODE_INDENT: code indent should use tabs where possible
#227: FILE: mm/page_alloc.c:2027:
+        size_t res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#227: FILE: mm/page_alloc.c:2027:
+        size_t res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#228: FILE: mm/page_alloc.c:2028:
+        size_t bufsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#228: FILE: mm/page_alloc.c:2028:
+        size_t bufsize;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#229: FILE: mm/page_alloc.c:2029:
+        printk("called sysctl_mempattern\n");$

WARNING:LINE_SPACING: Missing a blank line after declarations
#229: FILE: mm/page_alloc.c:2029:
+        size_t bufsize;
+        printk("called sysctl_mempattern\n");

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#229: FILE: mm/page_alloc.c:2029:
+        printk("called sysctl_mempattern\n");$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#229: FILE: mm/page_alloc.c:2029:
+        printk("called sysctl_mempattern\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sysctl_mempattern', this function's name, in a string
#229: FILE: mm/page_alloc.c:2029:
+        printk("called sysctl_mempattern\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#231: FILE: mm/page_alloc.c:2031:
+^Iif (!table->data || !table->maxlen) $

ERROR:SPACING: space required before the open parenthesis '('
#234: FILE: mm/page_alloc.c:2034:
+	if(!oldval || !oldlenp) {

WARNING:BRACES: braces {} are not necessary for single statement blocks
#234: FILE: mm/page_alloc.c:2034:
+	if(!oldval || !oldlenp) {
+	        return 0;
+	}

ERROR:CODE_INDENT: code indent should use tabs where possible
#235: FILE: mm/page_alloc.c:2035:
+^I        return 0;$

ERROR:SPACING: space required before the open parenthesis '('
#242: FILE: mm/page_alloc.c:2042:
+	if(res >= 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#244: FILE: mm/page_alloc.c:2044:
+^I^I        return -EFAULT;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#245: FILE: mm/page_alloc.c:2045:
+^I        return 1;$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#250: FILE: mm/page_alloc.c:2050:
+int mempattern_sysctl_handler(ctl_table *table, int write, $

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#251: FILE: mm/page_alloc.c:2051:
+int mempattern_sysctl_handler(ctl_table *table, int write, 
+	struct file *file, void __user *buffer, size_t *length, loff_t *ppos)

ERROR:CODE_INDENT: code indent should use tabs where possible
#253: FILE: mm/page_alloc.c:2053:
+        size_t res;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#253: FILE: mm/page_alloc.c:2053:
+        size_t res;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#254: FILE: mm/page_alloc.c:2054:
+        //printk("called mempattern_sysctl_handler write=%d length=%ld\n", write, *length);$

ERROR:CODE_INDENT: code indent should use tabs where possible
#256: FILE: mm/page_alloc.c:2056:
+^I        *length = 0;$

ERROR:CODE_INDENT: code indent should use tabs where possible
#260: FILE: mm/page_alloc.c:2060:
+        //printk("res=%ld\n", res);$

ERROR:SPACING: space required before the open parenthesis '('
#261: FILE: mm/page_alloc.c:2061:
+	if(res > 0) {

ERROR:CODE_INDENT: code indent should use tabs where possible
#262: FILE: mm/page_alloc.c:2062:
+^I        *ppos += res;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#269: FILE: mm/page_alloc.c:2069:
+
+

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156500.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 51 errors, 27 warnings, 5 checks, 157 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000156500.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
