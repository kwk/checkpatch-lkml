WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#56: 
deleted file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1152: FILE: drivers/of/prom_parse.c:1:
+#undef DEBUG

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <PRu64>
#1164: FILE: drivers/of/prom_parse.c:13:
+#define PRu64	"%lx"

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'na' - possible side-effects?
#1171: FILE: drivers/of/prom_parse.c:20:
+#define OF_CHECK_COUNTS(na, ns)	((na) > 0 && (na) <= OF_MAX_ADDR_CELLS && \
+			(ns) > 0)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1176: FILE: drivers/of/prom_parse.c:25:
+static int __of_address_to_resource(struct device_node *dev,
+		const u32 *addrp, u64 size, unsigned int flags,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1183: FILE: drivers/of/prom_parse.c:32:
+	printk(KERN_INFO "%s", s);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1185: FILE: drivers/of/prom_parse.c:34:
+		printk(KERN_INFO " %08x", *(addr++));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1186: FILE: drivers/of/prom_parse.c:35:
+	printk(KERN_INFO "\n");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1200: FILE: drivers/of/prom_parse.c:49:
+	u64		(*map)(u32 *addr, const u32 *range,
+				int na, int ns, int pna);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1205: FILE: drivers/of/prom_parse.c:54:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1220: FILE: drivers/of/prom_parse.c:69:
+static u64 of_bus_default_map(u32 *addr, const u32 *range,
+		int na, int ns, int pna)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1228: FILE: drivers/of/prom_parse.c:77:
+	pr_debug("OF: default map, cp="PRu64", s="PRu64", da="PRu64"\n",

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1229: FILE: drivers/of/prom_parse.c:78:
+	pr_debug("OF: default map, cp="PRu64", s="PRu64", da="PRu64"\n",
+		cp, s, da);

WARNING:LINE_SPACING: Missing a blank line after declarations
#1239: FILE: drivers/of/prom_parse.c:88:
+	u64 a = of_read_number(addr, na);
+	memset(addr, 0, na * 4);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1286: FILE: drivers/of/prom_parse.c:135:
+	pr_debug("OF: PCI map, cp="PRu64", s="PRu64", da="PRu64"\n", cp, s, da);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1318: FILE: drivers/of/prom_parse.c:167:
+const u32 *of_get_pci_address(struct device_node *dev, int bar_no, u64 *size,
+			unsigned int *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1328: FILE: drivers/of/prom_parse.c:177:
+	if (parent == NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#1342: FILE: drivers/of/prom_parse.c:191:
+	if (prop == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addrp"
#1367: FILE: drivers/of/prom_parse.c:216:
+	if (addrp == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppdev"
#1412: FILE: drivers/of/prom_parse.c:261:
+		if (ppdev == NULL) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1417: FILE: drivers/of/prom_parse.c:266:
+			struct pci_controller *host;
+			host = pci_bus_to_host(pdev->bus);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ppnode"
#1421: FILE: drivers/of/prom_parse.c:270:
+			if (ppnode == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#1423: FILE: drivers/of/prom_parse.c:272:
+		} else

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#1450: FILE: drivers/of/prom_parse.c:299:
+	laddr[1]  = laddr[2] = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1487: FILE: drivers/of/prom_parse.c:336:
+	pr_debug("OF: ISA map, cp="PRu64", s="PRu64", da="PRu64"\n", cp, s, da);

ERROR:SPACING: space prohibited before that '++' (ctx:WxB)
#1553: FILE: drivers/of/prom_parse.c:402:
+	for (i = 0; i < ARRAY_SIZE(of_busses); i ++)
 	                                         ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1556: FILE: drivers/of/prom_parse.c:405:
+	BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'useable' may be misspelled - perhaps 'usable'?
#1575: FILE: drivers/of/prom_parse.c:424:
+	 * useable mapped devices below them. Thus we treat the absence of
 	   ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ranges"
#1582: FILE: drivers/of/prom_parse.c:431:
+	if (ranges == NULL || rlen == 0) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1607: FILE: drivers/of/prom_parse.c:456:
+	pr_debug("OF: with offset: "PRu64"\n", offset);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1639: FILE: drivers/of/prom_parse.c:488:
+	if (parent == NULL)

WARNING:TYPO_SPELLING: 'Cound' may be misspelled - perhaps 'Could'?
#1643: FILE: drivers/of/prom_parse.c:492:
+	/* Cound address cells & copy address locally */
 	   ^^^^^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1646: FILE: drivers/of/prom_parse.c:495:
+		printk(KERN_ERR "prom_parse: Bad cell count for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1653: FILE: drivers/of/prom_parse.c:502:
+	pr_debug("OF: bus is %s (na=%d, ns=%d) on %s\n",
+		bus->name, na, ns, parent->full_name);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1664: FILE: drivers/of/prom_parse.c:513:
+		if (parent == NULL) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1674: FILE: drivers/of/prom_parse.c:523:
+			printk(KERN_ERR "prom_parse: Bad cell count for %s\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1680: FILE: drivers/of/prom_parse.c:529:
+		pr_debug("OF: parent bus is %s (na=%d, ns=%d) on %s\n",
+		    pbus->name, pna, pns, parent->full_name);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1713: FILE: drivers/of/prom_parse.c:562:
+const u32 *of_get_address(struct device_node *dev, int index, u64 *size,
+			unsigned int *flags)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parent"
#1723: FILE: drivers/of/prom_parse.c:572:
+	if (parent == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!prop"
#1733: FILE: drivers/of/prom_parse.c:582:
+	if (prop == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addrp"
#1790: FILE: drivers/of/prom_parse.c:639:
+	if (addrp == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1797: FILE: drivers/of/prom_parse.c:646:
+void of_parse_dma_window(struct device_node *dn, const void *dma_window_prop,
+		unsigned long *busno, unsigned long *phys, unsigned long *size)

CHECK:BRACES: braces {} should be used on all arms of this statement
#1839: FILE: drivers/of/prom_parse.c:688:
+		if (parp == NULL)
[...]
+		else {
[...]

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!parp"
#1839: FILE: drivers/of/prom_parse.c:688:
+		if (parp == NULL)

CHECK:BRACES: Unbalanced braces around else statement
#1841: FILE: drivers/of/prom_parse.c:690:
+		else {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!of_get_property"
#1849: FILE: drivers/of/prom_parse.c:698:
+	} while (p && of_get_property(p, "#interrupt-cells", NULL) == NULL);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1893: FILE: drivers/of/prom_parse.c:742:
+
+}

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1896: FILE: drivers/of/prom_parse.c:745:
+int of_irq_map_raw(struct device_node *parent, const u32 *intspec, u32 ointsize,
+		const u32 *addr, struct of_irq *out_irq)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_raw', this function's name, in a string
#1903: FILE: drivers/of/prom_parse.c:752:
+	pr_debug("of_irq_map_raw: par=%s,intspec=[0x%08x 0x%08x...],"

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1904: FILE: drivers/of/prom_parse.c:753:
+	pr_debug("of_irq_map_raw: par=%s,intspec=[0x%08x 0x%08x...],"
+		"ointsize=%d\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "tmp"
#1915: FILE: drivers/of/prom_parse.c:764:
+		if (tmp != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ipar"
#1923: FILE: drivers/of/prom_parse.c:772:
+	if (ipar == NULL) {

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_raw', this function's name, in a string
#1928: FILE: drivers/of/prom_parse.c:777:
+	pr_debug("of_irq_map_raw: ipar=%s, size=%d\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1929: FILE: drivers/of/prom_parse.c:778:
+	pr_debug("of_irq_map_raw: ipar=%s, size=%d\n",
+			ipar->full_name, intsize);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1943: FILE: drivers/of/prom_parse.c:792:
+	} while (old && tmp == NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#1946: FILE: drivers/of/prom_parse.c:795:
+	addrsize = (tmp == NULL) ? 2 : *tmp;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ipar"
#1951: FILE: drivers/of/prom_parse.c:800:
+	while (ipar != NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!imap"
#1969: FILE: drivers/of/prom_parse.c:818:
+		if (imap == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!addr"
#1983: FILE: drivers/of/prom_parse.c:832:
+		if (addr == NULL && addrsize != 0) {

WARNING:LINE_SPACING: Missing a blank line after declarations
#1995: FILE: drivers/of/prom_parse.c:844:
+				u32 mask = imask ? imask[i] : 0xffffffffu;
+				match = ((addr[i] ^ imap[i]) & mask) == 0;

WARNING:LINE_SPACING: Missing a blank line after declarations
#1999: FILE: drivers/of/prom_parse.c:848:
+				u32 mask = imask ? imask[i] : 0xffffffffu;
+				match =

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2000: FILE: drivers/of/prom_parse.c:849:
+				   ((intspec[i-addrsize] ^ imap[i]) & mask) == 0;
 				              ^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpar"
#2016: FILE: drivers/of/prom_parse.c:865:
+			if (newpar == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#2025: FILE: drivers/of/prom_parse.c:874:
+			if (tmp == NULL) {

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#2031: FILE: drivers/of/prom_parse.c:880:
+			newaddrsize = (tmp == NULL) ? 0 : *tmp;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2034: FILE: drivers/of/prom_parse.c:883:
+			pr_debug(" -> newintsize=%d, newaddrsize=%d\n",
+			    newintsize, newaddrsize);

WARNING:INDENTED_LABEL: labels should not be indented
#2055: FILE: drivers/of/prom_parse.c:904:
+	skiplevel:

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "ints"
#2088: FILE: drivers/of/prom_parse.c:937:
+		if (ints != NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!ints"
#2094: FILE: drivers/of/prom_parse.c:943:
+	if (ints == NULL)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'of_irq_map_one', this function's name, in a string
#2122: FILE: drivers/of/prom_parse.c:971:
+	pr_debug("of_irq_map_one: dev=%s, index=%d\n", device->full_name, index);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!intspec"
#2130: FILE: drivers/of/prom_parse.c:979:
+	if (intspec == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!p"
#2139: FILE: drivers/of/prom_parse.c:988:
+	if (p == NULL)

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!tmp"
#2144: FILE: drivers/of/prom_parse.c:993:
+	if (tmp == NULL) {

WARNING:BLOCK_COMMENT_STYLE: Block comments should align the * on each line
#2181: FILE: drivers/of/prom_parse.c:1030:
+ * but is all zeros.
+*/

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#2187: FILE: drivers/of/prom_parse.c:1036:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#2191: FILE: drivers/of/prom_parse.c:1040:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'pp->length == 6'
#2195: FILE: drivers/of/prom_parse.c:1044:
+	if (pp && (pp->length == 6) && is_valid_ether_addr(pp->value))

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2207: FILE: drivers/of/prom_parse.c:1056:
+	 * resource and the irq are valid. */

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#2209: FILE: drivers/of/prom_parse.c:1058:
+		r->start = r->end = irq;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 21 warnings, 57 checks, 1087 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000286061.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
