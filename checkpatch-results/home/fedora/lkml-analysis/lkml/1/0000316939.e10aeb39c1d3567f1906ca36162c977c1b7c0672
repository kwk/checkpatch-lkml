WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#44: 
mmaped into the user address space. The GRU contains functions such
^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:DEPRECATED_VARIABLE: Use of EXTRA_CFLAGS is deprecated, please use `ccflags-y instead.
#110: FILE: drivers/gru/Makefile:2:
+EXTRA_CFLAGS += -Werror -Wall

EXTRA_{A,C,CPP,LD}FLAGS are deprecated and should be replaced by the new
flags added via commit f77bf01425b1 ("kbuild: introduce ccflags-y,
asflags-y and ldflags-y").

The following conversion scheme maybe used::

  EXTRA_AFLAGS    ->  asflags-y
  EXTRA_CFLAGS    ->  ccflags-y
  EXTRA_CPPFLAGS  ->  cppflags-y
  EXTRA_LDFLAGS   ->  ldflags-y

See:

  1. https://lore.kernel.org/lkml/20070930191054.GA15876@uranus.ravnborg.org/
  2. https://lore.kernel.org/lkml/1313384834-24433-12-git-send-email-lacombar@gmail.com/
  3. https://www.kernel.org/doc/html/latest/kbuild/makefiles.html#compilation-flags

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#121: FILE: drivers/sn/Kconfig:21:
+config GRU
+	tristate "SGI GRU driver"
+	default y
+	---help---
+	This option enables basic support for the SGI UV GRU driver.
+
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:AVOID_EXTERNS: externs should be avoided in .c files
#137: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:116:
+	extern void gru_migrate_task(int, int);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#137: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:116:
+	extern void gru_migrate_task(int, int);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#137: FILE: arch/ia64/sn/kernel/sn2/sn2_smp.c:116:
+	extern void gru_migrate_task(int, int);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#150: FILE: drivers/gru/gru.h:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:LINE_SPACING: Please don't use multiple blank lines
#188: FILE: drivers/gru/gru.h:39:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#205: FILE: drivers/gru/gru.h:56:
+
+

WARNING:NEW_TYPEDEFS: do not add new typedefs
#207: FILE: drivers/gru/gru.h:58:
+typedef struct { void *cookie; } gru_cookie_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#208: FILE: drivers/gru/gru.h:59:
+typedef struct gru_control_segment_s gru_segment_t;

WARNING:NEW_TYPEDEFS: do not add new typedefs
#209: FILE: drivers/gru/gru.h:60:
+typedef struct gru_control_block_s gru_control_block_t;

WARNING:TYPO_SPELLING: 'interrut' may be misspelled - perhaps 'interrupt'?
#215: FILE: drivers/gru/gru.h:66:
+#define GRU_OPT_MISS_FMM_INTR	0x0002	/* Send interrut to cpu to
                              	      	        ^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#216: FILE: drivers/gru/gru.h:67:
+#define GRU_OPT_MISS_FMM_INTR	0x0002	/* Send interrut to cpu to
+					   handle fault */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#216: FILE: drivers/gru/gru.h:67:
+					   handle fault */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#225: FILE: drivers/gru/gru.h:76:
+#define GRU_OPT_FAKE_TB_PAGES	0x8000	/* EMU testing only - GRU uses
+					   1 TB pages */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#225: FILE: drivers/gru/gru.h:76:
+					   1 TB pages */

CHECK:LINE_SPACING: Please don't use multiple blank lines
#243: FILE: drivers/gru/gru.h:94:
+
+

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#272: FILE: drivers/gru/gru.h:123:
+	volatile unsigned int	icmd		:1;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#275: FILE: drivers/gru/gru.h:126:
+	volatile unsigned int	istatus		:2;

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#276: FILE: drivers/gru/gru.h:127:
+	volatile unsigned int	isubstatus	:4;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#304: FILE: drivers/gru/gru.h:155:
+extern int gru_check_status_proc(gru_control_block_t *cb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#305: FILE: drivers/gru/gru.h:156:
+extern int gru_wait_proc(gru_control_block_t *cb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#306: FILE: drivers/gru/gru.h:157:
+extern void gru_wait_abort_proc(gru_control_block_t *cb);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#307: FILE: drivers/gru/gru.h:158:
+extern void gru_abort(int, gru_control_block_t *cb, char *str);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#307: FILE: drivers/gru/gru.h:158:
+extern void gru_abort(int, gru_control_block_t *cb, char *str);

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#355: FILE: drivers/gru/gru.h:206:
+ * ^I- "user_polling", "interrupt", "os_polling"$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#363: FILE: drivers/gru/gru.h:214:
+
+

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#368: FILE: drivers/gru/gru.h:219:
+ *	start 		- starting address for mmaped segments (NULL means
   	      		                       ^^^^^^

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#368: FILE: drivers/gru/gru.h:219:
+ *^Istart ^I^I- starting address for mmaped segments (NULL means$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#370: FILE: drivers/gru/gru.h:221:
+ *^Ictlblks ^I- number of active control blocks$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#371: FILE: drivers/gru/gru.h:222:
+ *^Idataseg_bytes ^I- number of data segment bytes$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#372: FILE: drivers/gru/gru.h:223:
+ *^Imax_threads ^I- maximum number of threads that will use the context$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#373: FILE: drivers/gru/gru.h:224:
+ *^Ioptions ^I- specifies various options$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#378: FILE: drivers/gru/gru.h:229:
+extern int gru_create_context(gru_cookie_t *cookie, void *start,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#382: FILE: drivers/gru/gru.h:233:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#385: FILE: drivers/gru/gru.h:236:
+ * ^Icookie^I- cookie returned from gru_create_context()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#388: FILE: drivers/gru/gru.h:239:
+ * ^I 0 - success$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#389: FILE: drivers/gru/gru.h:240:
+ * ^I-1 - failure. See errno for additional status$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#391: FILE: drivers/gru/gru.h:242:
+extern int gru_destroy_context(gru_cookie_t cookie);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#393: FILE: drivers/gru/gru.h:244:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#396: FILE: drivers/gru/gru.h:247:
+ * ^Icookie^I^I- cookie returned from gru_create_context()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#397: FILE: drivers/gru/gru.h:248:
+ * ^Ithreadnum^I- thread number (0 .. #threads-1)$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#419: FILE: drivers/gru/gru.h:270:
+extern int gru_get_cb_exception_detail(gru_control_block_t *cb,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#420: FILE: drivers/gru/gru.h:271:
+extern int gru_get_cb_exception_detail(gru_control_block_t *cb,
+		       struct control_block_extended_exc_detail *excdet);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#423: FILE: drivers/gru/gru.h:274:
+extern char *gru_get_cb_exception_detail_str(int ret, gru_control_block_t *cb);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#425: FILE: drivers/gru/gru.h:276:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#428: FILE: drivers/gru/gru.h:279:
+ * ^Igseg^I- GSeg address returned from gru_get_thread_gru_segment()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#429: FILE: drivers/gru/gru.h:280:
+ * ^Iindex^I- index of desired CB$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#440: FILE: drivers/gru/gru.h:291:
+ * ^Igseg^I- GSeg address returned from gru_get_thread_gru_segment()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#441: FILE: drivers/gru/gru.h:292:
+ * ^Iindex^I- index of desired cache line$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#451: FILE: drivers/gru/gru.h:302:
+ * ^Ivaddr^I^I- virtual address of within gseg$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#466: FILE: drivers/gru/gru.h:317:
+extern void emuloguser(char *fmt, ...);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#467: FILE: drivers/gru/gru.h:318:
+extern int is_emu(void);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#469: FILE: drivers/gru/gru.h:320:
+   extern void emu_writeback_hook(void *p);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#469: FILE: drivers/gru/gru.h:320:
+   extern void emu_writeback_hook(void *p);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#470: FILE: drivers/gru/gru.h:321:
+   extern void emu_kwait_hook(void *p, int wait);$

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#470: FILE: drivers/gru/gru.h:321:
+   extern void emu_kwait_hook(void *p, int wait);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#474: FILE: drivers/gru/gru.h:325:
+   extern void lib_cb_wait_hook(void *p, int wait) __attribute__ ((weak));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#474: FILE: drivers/gru/gru.h:325:
+   extern void lib_cb_wait_hook(void *p, int wait) __attribute__ ((weak));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#474: FILE: drivers/gru/gru.h:325:
+   extern void lib_cb_wait_hook(void *p, int wait) __attribute__ ((weak));

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#475: FILE: drivers/gru/gru.h:326:
+   extern void lib_writeback_hook(void *p) __attribute__ ((weak));$

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __weak over __attribute__((weak))
#475: FILE: drivers/gru/gru.h:326:
+   extern void lib_writeback_hook(void *p) __attribute__ ((weak));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#475: FILE: drivers/gru/gru.h:326:
+   extern void lib_writeback_hook(void *p) __attribute__ ((weak));

WARNING:TABSTOP: Statements should start on a tabstop
#481: FILE: drivers/gru/gru.h:332:
+	 } while (0)

WARNING:TABSTOP: Statements should start on a tabstop
#484: FILE: drivers/gru/gru.h:335:
+	   do {							\

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (11, 19)
#484: FILE: drivers/gru/gru.h:335:
+	   do {							\
+		   if (lib_cb_wait_hook)			\

WARNING:TABSTOP: Statements should start on a tabstop
#485: FILE: drivers/gru/gru.h:336:
+		   if (lib_cb_wait_hook)			\

WARNING:TABSTOP: Statements should start on a tabstop
#487: FILE: drivers/gru/gru.h:338:
+	   } while (0)

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#503: FILE: drivers/gru/gru_instructions.h:1:
+/*

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#525: FILE: drivers/gru/gru_instructions.h:23:
+    unsigned int^I^Iicmd:      1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#526: FILE: drivers/gru/gru_instructions.h:24:
+    unsigned char^I^Iima:^I   3;^I/* CB_DelRep, unmapped mode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#527: FILE: drivers/gru/gru_instructions.h:25:
+    unsigned char^I^Ireserved0: 4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#528: FILE: drivers/gru/gru_instructions.h:26:
+    unsigned int^I^Ixtype:     3;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#529: FILE: drivers/gru/gru_instructions.h:27:
+    unsigned int^I^Iiaa0:      2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#530: FILE: drivers/gru/gru_instructions.h:28:
+    unsigned int^I^Iiaa1:      2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#531: FILE: drivers/gru/gru_instructions.h:29:
+    unsigned char^I^Ireserved1: 1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#532: FILE: drivers/gru/gru_instructions.h:30:
+    unsigned char^I^Iopc:       8;^I/* opcode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#533: FILE: drivers/gru/gru_instructions.h:31:
+    unsigned char^I^Iexopc:     8;^I/* extended opcode */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#535: FILE: drivers/gru/gru_instructions.h:33:
+    unsigned int^I^Iidef2:    22;^I/* TRi0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#536: FILE: drivers/gru/gru_instructions.h:34:
+    unsigned char^I^Ireserved2: 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#537: FILE: drivers/gru/gru_instructions.h:35:
+    unsigned char^I^Iistatus:   2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#538: FILE: drivers/gru/gru_instructions.h:36:
+    unsigned char^I^Iisubstatus:4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#539: FILE: drivers/gru/gru_instructions.h:37:
+    unsigned char^I^Ireserved3: 2;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#541: FILE: drivers/gru/gru_instructions.h:39:
+    unsigned long^I^Iidef4;^I^I/* 42 bits: TRi1, BufSize */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#543: FILE: drivers/gru/gru_instructions.h:41:
+    unsigned long^I^Iidef1;^I^I/* BAddr0 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#544: FILE: drivers/gru/gru_instructions.h:42:
+    unsigned long^I^Iidef5;^I^I/* Nelem */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#545: FILE: drivers/gru/gru_instructions.h:43:
+    unsigned long^I^Iidef6;^I^I/* Stride, Operand1 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#546: FILE: drivers/gru/gru_instructions.h:44:
+    unsigned long^I^Iidef3;^I^I/* BAddr1, Value, Operand2 */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#547: FILE: drivers/gru/gru_instructions.h:45:
+    unsigned long^I^Ireserved4;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#549: FILE: drivers/gru/gru_instructions.h:47:
+    unsigned long^I^Iavalue;^I^I /* AValue */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#558: FILE: drivers/gru/gru_instructions.h:56:
+    volatile unsigned int^Iop32;    /* icmd,xtype,iaa0,ima,opc */$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#558: FILE: drivers/gru/gru_instructions.h:56:
+    volatile unsigned int	op32;    /* icmd,xtype,iaa0,ima,opc */

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#559: FILE: drivers/gru/gru_instructions.h:57:
+    unsigned int^I^Itri0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#561: FILE: drivers/gru/gru_instructions.h:59:
+    unsigned long^I^Itri1_bufsize;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#562: FILE: drivers/gru/gru_instructions.h:60:
+    unsigned long^I^Ibaddr0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#563: FILE: drivers/gru/gru_instructions.h:61:
+    unsigned long^I^Inelem;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#564: FILE: drivers/gru/gru_instructions.h:62:
+    unsigned long^I^Iop1_stride;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#565: FILE: drivers/gru/gru_instructions.h:63:
+    unsigned long^I^Iop2_value_baddr1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#566: FILE: drivers/gru/gru_instructions.h:64:
+    unsigned long^I^Ireserved0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#567: FILE: drivers/gru/gru_instructions.h:65:
+    unsigned long^I^Iavalue;$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#604: FILE: drivers/gru/gru_instructions.h:102:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#643: FILE: drivers/gru/gru_instructions.h:141:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#654: FILE: drivers/gru/gru_instructions.h:152:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#661: FILE: drivers/gru/gru_instructions.h:159:
+
+

CHECK:BIT_MACRO: Prefer using the BIT macro
#687: FILE: drivers/gru/gru_instructions.h:185:
+#define CBE_CAUSE_RI				(1 << CBE_CAUSE_RI_BIT)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:BIT_MACRO: Prefer using the BIT macro
#688: FILE: drivers/gru/gru_instructions.h:186:
+#define CBE_CAUSE_INVALID_INSTRUCTION		(1 << CBE_CAUSE_INVALID_INSTRUCTION_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#689: FILE: drivers/gru/gru_instructions.h:187:
+#define CBE_CAUSE_UNMAPPED_MODE_FORBIDDEN	(1 << CBE_CAUSE_UNMAPPED_MODE_FORBIDDEN_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#690: FILE: drivers/gru/gru_instructions.h:188:
+#define CBE_CAUSE_PE_CHECK_DATA_ERROR		(1 << CBE_CAUSE_PE_CHECK_DATA_ERROR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#691: FILE: drivers/gru/gru_instructions.h:189:
+#define CBE_CAUSE_IAA_GAA_MISMATCH		(1 << CBE_CAUSE_IAA_GAA_MISMATCH_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#692: FILE: drivers/gru/gru_instructions.h:190:
+#define CBE_CAUSE_DATA_SEGMENT_LIMIT_EXCEPTION	(1 << CBE_CAUSE_DATA_SEGMENT_LIMIT_EXCEPTION_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#693: FILE: drivers/gru/gru_instructions.h:191:
+#define CBE_CAUSE_OS_FATAL_TLB_FAULT		(1 << CBE_CAUSE_OS_FATAL_TLB_FAULT_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#694: FILE: drivers/gru/gru_instructions.h:192:
+#define CBE_CAUSE_EXECUTION_HW_ERROR		(1 << CBE_CAUSE_EXECUTION_HW_ERROR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#695: FILE: drivers/gru/gru_instructions.h:193:
+#define CBE_CAUSE_TLBHW_ERROR			(1 << CBE_CAUSE_TLBHW_ERROR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#696: FILE: drivers/gru/gru_instructions.h:194:
+#define CBE_CAUSE_RA_REQUEST_TIMEOUT		(1 << CBE_CAUSE_RA_REQUEST_TIMEOUT_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#697: FILE: drivers/gru/gru_instructions.h:195:
+#define CBE_CAUSE_HA_REQUEST_TIMEOUT		(1 << CBE_CAUSE_HA_REQUEST_TIMEOUT_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#698: FILE: drivers/gru/gru_instructions.h:196:
+#define CBE_CAUSE_RA_RESPONSE_FATAL		(1 << CBE_CAUSE_RA_RESPONSE_FATAL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#699: FILE: drivers/gru/gru_instructions.h:197:
+#define CBE_CAUSE_RA_RESPONSE_NON_FATAL		(1 << CBE_CAUSE_RA_RESPONSE_NON_FATAL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#700: FILE: drivers/gru/gru_instructions.h:198:
+#define CBE_CAUSE_HA_RESPONSE_FATAL		(1 << CBE_CAUSE_HA_RESPONSE_FATAL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#701: FILE: drivers/gru/gru_instructions.h:199:
+#define CBE_CAUSE_HA_RESPONSE_NON_FATAL		(1 << CBE_CAUSE_HA_RESPONSE_NON_FATAL_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#702: FILE: drivers/gru/gru_instructions.h:200:
+#define CBE_CAUSE_ADDRESS_SPACE_DECODE_ERROR	(1 << CBE_CAUSE_ADDRESS_SPACE_DECODE_ERROR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#703: FILE: drivers/gru/gru_instructions.h:201:
+#define CBE_CAUSE_RESPONSE_DATA_ERROR		(1 << CBE_CAUSE_RESPONSE_DATA_ERROR_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#704: FILE: drivers/gru/gru_instructions.h:202:
+#define CBE_CAUSE_PROTOCOL_STATE_DATA_ERROR	(1 << CBE_CAUSE_PROTOCOL_STATE_DATA_ERROR_BIT)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#706: FILE: drivers/gru/gru_instructions.h:204:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#716: FILE: drivers/gru/gru_instructions.h:214:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#720: FILE: drivers/gru/gru_instructions.h:218:
+       unsigned char iaa0, unsigned char iaa1,$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#721: FILE: drivers/gru/gru_instructions.h:219:
+       unsigned char ima)$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#723: FILE: drivers/gru/gru_instructions.h:221:
+    return ((1 << GRU_CB_ICMD_SHFT) |$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#734: FILE: drivers/gru/gru_instructions.h:232:
+ * ^I??? should I use actual "load" or hardware prefetch???$

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#738: FILE: drivers/gru/gru_instructions.h:236:
+	*(volatile char *)p;

CHECK:LINE_SPACING: Please don't use multiple blank lines
#741: FILE: drivers/gru/gru_instructions.h:239:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#744: FILE: drivers/gru/gru_instructions.h:242:
+ * ^IZZZ serialization requirements here???$

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#749: FILE: drivers/gru/gru_instructions.h:247:
+	asm volatile ("fc %0"::"r" (p):"memory");
 	                              ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#758: FILE: drivers/gru/gru_instructions.h:256:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#771: FILE: drivers/gru/gru_instructions.h:269:
+ *     ^I- nelem and stride are in elements$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#772: FILE: drivers/gru/gru_instructions.h:270:
+ *     ^I- tri0/tri1 is in bytes for the beginning of the data segment.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#775: FILE: drivers/gru/gru_instructions.h:273:
+static inline void gru_vload(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned int tri0, unsigned char xtype, unsigned long nelem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#789: FILE: drivers/gru/gru_instructions.h:287:
+static inline void gru_vstore(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned int tri0, unsigned char xtype, unsigned long nelem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#803: FILE: drivers/gru/gru_instructions.h:301:
+static inline void gru_ivload(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned int tri0, unsigned int tri1, unsigned char xtype,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#817: FILE: drivers/gru/gru_instructions.h:315:
+static inline void gru_ivstore(gru_control_block_t *cb, void *mem_addr,
+		int iaa0, unsigned int tri0, unsigned int tri1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#831: FILE: drivers/gru/gru_instructions.h:329:
+static inline void gru_vset(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned long value, unsigned char xtype, unsigned long nelem,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#845: FILE: drivers/gru/gru_instructions.h:343:
+static inline void gru_ivset(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned long value, unsigned int tri1, unsigned char xtype,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#859: FILE: drivers/gru/gru_instructions.h:357:
+static inline void gru_vflush(gru_control_block_t *cb, void *mem_addr, int iaa0,
+		unsigned long nelem, unsigned char xtype, unsigned long stride,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#879: FILE: drivers/gru/gru_instructions.h:377:
+
+

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#881: FILE: drivers/gru/gru_instructions.h:379:
+static inline void gru_bcopy(gru_control_block_t *cb, const void *src,
+		int iaa0, void *dest, int iaa1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#898: FILE: drivers/gru/gru_instructions.h:396:
+static inline void gru_bstore(gru_control_block_t *cb, const void *src,
+		void *dest, int iaa0, unsigned long nelem, unsigned int xtype,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#914: FILE: drivers/gru/gru_instructions.h:412:
+static inline void gru_gamir(gru_control_block_t *cb, int exopc, void *src,
+		int iaa0, unsigned int xtype, unsigned long hints)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#924: FILE: drivers/gru/gru_instructions.h:422:
+static inline void gru_gamirr(gru_control_block_t *cb, int exopc, void *src,
+		int iaa0, unsigned int xtype, unsigned long hints)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#934: FILE: drivers/gru/gru_instructions.h:432:
+static inline void gru_gamer(gru_control_block_t *cb, int exopc, void *src,
+		int iaa0, unsigned int xtype,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#948: FILE: drivers/gru/gru_instructions.h:446:
+static inline void gru_gamerr(gru_control_block_t *cb, int exopc, void *src,
+		int iaa0, unsigned int xtype, unsigned long operand1,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#961: FILE: drivers/gru/gru_instructions.h:459:
+static inline void gru_mesq(gru_control_block_t *cb, void *queue, int iaa0,
+		unsigned long msg_bytes, unsigned long tri0,

CHECK:LINE_SPACING: Please don't use multiple blank lines
#1003: FILE: drivers/gru/gru_instructions.h:501:
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1010: FILE: drivers/gru/grufault.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1035: FILE: drivers/gru/grufault.c:26:
+#include <asm/uaccess.h>

WARNING:INCLUDE_LINUX: Use #include <linux/pgtable.h> instead of <asm/pgtable.h>
#1036: FILE: drivers/gru/grufault.c:27:
+#include <asm/pgtable.h>

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1057: FILE: drivers/gru/grufault.c:48:
+ * ^I- *gts with the mmap_sem locked for read and the GTS locked.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1159: FILE: drivers/gru/grufault.c:150:
+ * ^Ireturns:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1160: FILE: drivers/gru/grufault.c:151:
+ * ^I^I  0 - successful$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1161: FILE: drivers/gru/grufault.c:152:
+ * ^I^I< 0 - error code$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1162: FILE: drivers/gru/grufault.c:153:
+ * ^I^I  1 - (atomic only) try again in non-atomic context$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1200: FILE: drivers/gru/grufault.c:191:
+ * ^IReturn:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1201: FILE: drivers/gru/grufault.c:192:
+ * ^I^I  0 = dropin, exception, or switch to UPM successful$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1202: FILE: drivers/gru/grufault.c:193:
+ * ^I^I  1 = range invalidate active$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1203: FILE: drivers/gru/grufault.c:194:
+ * ^I^I  2 = asid == 0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1204: FILE: drivers/gru/grufault.c:195:
+ * ^I^I< 0 = error code$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1377: FILE: drivers/gru/grufault.c:368:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1400: FILE: drivers/gru/grufault.c:391:
+ * ^Icb - user virtual address of the CB$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1572: FILE: drivers/gru/grufile.c:1:
+/*

WARNING:TYPO_SPELLING: 'incudes' may be misspelled - perhaps 'includes'?
#1578: FILE: drivers/gru/grufile.c:7:
+ * This also incudes the driver initialization code.
              ^^^^^^^

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#1601: FILE: drivers/gru/grufile.c:30:
+#include <asm/uaccess.h>

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1621: FILE: drivers/gru/grufile.c:50:
+static struct file_operations gru_fops;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1767: FILE: drivers/gru/grufile.c:196:
+	if (req.data_segment_bytes == 0
+	    || req.data_segment_bytes > GRU_NUM_USER_DSR_BYTES)

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#1771: FILE: drivers/gru/grufile.c:200:
+	if (req.maximum_thread_count == 0 || req.maximum_thread_count > NR_CPUS)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1845: FILE: drivers/gru/grufile.c:274:
+static void gru_init_chiplet(struct gru_state *gru, unsigned long paddr,
+			void *vaddr, int base_nasid, int nid, int bid, int grunum)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1859: FILE: drivers/gru/grufile.c:288:
+	gru_dbg(grudev, "bid %d, nid %d, gru %x, vaddr %p (0x%lx)\n",
+			bid, nid, gru->gs_gid, gru->gs_gru_base_vaddr,

ERROR:CODE_INDENT: code indent should use tabs where possible
#1888: FILE: drivers/gru/grufile.c:317:
+^I^I     ^I^Igrunum < GRU_CHIPLETS_PER_BLADE; grunum++, gru++) {$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#1888: FILE: drivers/gru/grufile.c:317:
+^I^I     ^I^Igrunum < GRU_CHIPLETS_PER_BLADE; grunum++, gru++) {$

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1927: FILE: drivers/gru/grufile.c:356:
+	printk(KERN_INFO "GRU space: 0x%lx - 0x%lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1932: FILE: drivers/gru/grufile.c:361:
+			printk(KERN_ERR "%s: request_irq failed\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1940: FILE: drivers/gru/grufile.c:369:
+		printk(KERN_ERR "%s: misc_register failed\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1947: FILE: drivers/gru/grufile.c:376:
+		printk(KERN_ERR "%s: proc init failed\n", GRU_DRIVER_ID_STR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1953: FILE: drivers/gru/grufile.c:382:
+		printk(KERN_ERR "%s: init tables failed\n", GRU_DRIVER_ID_STR);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1957: FILE: drivers/gru/grufile.c:386:
+	printk(KERN_INFO "%s: v%s\n", GRU_DRIVER_ID_STR, REVISION);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1969: FILE: drivers/gru/grufile.c:398:
+
+}

WARNING:CONST_STRUCT: struct file_operations should normally be const
#1986: FILE: drivers/gru/grufile.c:415:
+static struct file_operations gru_fops = {

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#2000: FILE: drivers/gru/grufile.c:429:
+struct vm_operations_struct gru_vm_ops = {

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2019: FILE: drivers/gru/grufile.c:448:
+__setup("gru_debug=", set_debug_options);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2030: FILE: drivers/gru/gruhandles.h:1:
+/*

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2072: FILE: drivers/gru/gruhandles.h:43:
+ * are the same */

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2107: FILE: drivers/gru/gruhandles.h:78:
+#define GRU_CB_COUNT_TO_AU(n)^I(((n) + GRU_CBR_AU_SIZE - 1) / ^I\$

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#2123: FILE: drivers/gru/gruhandles.h:94:
+#define GRU_GSEG_CB(b, c, i)	((void *)(GRU_GSEG((b), (c)) + GRU_CB_BASE + GRU_HANDLE_STRIDE * (i)))

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#2124: FILE: drivers/gru/gruhandles.h:95:
+#define GRU_GSEG_DS(b, c, cl)	((void *)(GRU_GSEG((b), (c)) + GRU_DS_BASE + GRU_CACHE_LINE_BYTES * (cl)))

WARNING:LONG_LINE: line length of 123 exceeds 100 columns
#2125: FILE: drivers/gru/gruhandles.h:96:
+#define GRU_TFM(b, c)		((struct gru_tlb_fault_map *)((unsigned long)(b) + GRU_TFM_BASE + (c) * GRU_HANDLE_STRIDE))

WARNING:LONG_LINE: line length of 127 exceeds 100 columns
#2126: FILE: drivers/gru/gruhandles.h:97:
+#define GRU_TGH(b, c)		((struct gru_tlb_global_handle *)((unsigned long)(b) + GRU_TGH_BASE + (c) * GRU_HANDLE_STRIDE))

WARNING:LONG_LINE: line length of 132 exceeds 100 columns
#2127: FILE: drivers/gru/gruhandles.h:98:
+#define GRU_CBE(b, n)		((struct gru_control_block_extended *)((unsigned long)(b) + GRU_CBE_BASE + (n) * GRU_HANDLE_STRIDE))

WARNING:LONG_LINE: line length of 126 exceeds 100 columns
#2128: FILE: drivers/gru/gruhandles.h:99:
+#define GRU_TFH(b, n)		((struct gru_tlb_fault_handle *)((unsigned long)(b) + GRU_TFH_BASE + (n) * GRU_HANDLE_STRIDE))

WARNING:LONG_LINE: line length of 138 exceeds 100 columns
#2129: FILE: drivers/gru/gruhandles.h:100:
+#define GRU_CCH(b, n)		((struct gru_context_configuration_handle *)((unsigned long)(b) + GRU_CCH_BASE + (n) * GRU_HANDLE_STRIDE))

WARNING:LONG_LINE: line length of 104 exceeds 100 columns
#2130: FILE: drivers/gru/gruhandles.h:101:
+#define GRU_GSH(b)		((struct gru_global_status_handle *)((unsigned long)(b) + GRU_GSH_BASE))

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#2133: FILE: drivers/gru/gruhandles.h:104:
+#define TYPE_IS(hid, h)		((h) >= GRU_##hid##_BASE && (h) < GRU_##hid##_BASE + GRU_NUM_##hid * GRU_HANDLE_STRIDE	\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#2133: FILE: drivers/gru/gruhandles.h:104:
+#define TYPE_IS(hid, h)		((h) >= GRU_##hid##_BASE && (h) < GRU_##hid##_BASE + GRU_NUM_##hid * GRU_HANDLE_STRIDE	\
+				 && (((h) & (GRU_HANDLE_STRIDE - 1)) == 0))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2134: FILE: drivers/gru/gruhandles.h:105:
+#define TYPE_IS(hid, h)		((h) >= GRU_##hid##_BASE && (h) < GRU_##hid##_BASE + GRU_NUM_##hid * GRU_HANDLE_STRIDE	\
+				 && (((h) & (GRU_HANDLE_STRIDE - 1)) == 0))

WARNING:LONG_LINE: line length of 120 exceeds 100 columns
#2138: FILE: drivers/gru/gruhandles.h:109:
+#define IS_CBR_PADDR(h)		(((h) & (GRU_SIZE - 1)) < GRU_MCS_BASE && (((h) & (GRU_GSEG_STRIDE - 1)) < GRU_DS_BASE))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#2138: FILE: drivers/gru/gruhandles.h:109:
+#define IS_CBR_PADDR(h)		(((h) & (GRU_SIZE - 1)) < GRU_MCS_BASE && (((h) & (GRU_GSEG_STRIDE - 1)) < GRU_DS_BASE))

WARNING:LONG_LINE: line length of 121 exceeds 100 columns
#2139: FILE: drivers/gru/gruhandles.h:110:
+#define IS_DSR_PADDR(h)		(((h) & (GRU_SIZE - 1)) < GRU_MCS_BASE && (((h) & (GRU_GSEG_STRIDE - 1)) >= GRU_DS_BASE))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'h' - possible side-effects?
#2139: FILE: drivers/gru/gruhandles.h:110:
+#define IS_DSR_PADDR(h)		(((h) & (GRU_SIZE - 1)) < GRU_MCS_BASE && (((h) & (GRU_GSEG_STRIDE - 1)) >= GRU_DS_BASE))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#2146: FILE: drivers/gru/gruhandles.h:117:
+extern void *gmu_grubase(void *h);

WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#2168: FILE: drivers/gru/gruhandles.h:139:
+/* byte offset to a specific GRU chiplet. (n=nasid, bn=base_nasid for first node, c=chiplet (0 or 1)*/

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#2172: FILE: drivers/gru/gruhandles.h:143:
+#define BITS_TO_LONGS(bits)     (((bits)+64-1)/64)
                                         ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#2172: FILE: drivers/gru/gruhandles.h:143:
+#define BITS_TO_LONGS(bits)     (((bits)+64-1)/64)
                                            ^

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2172: FILE: drivers/gru/gruhandles.h:143:
+#define BITS_TO_LONGS(bits)     (((bits)+64-1)/64)
                                               ^

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2387: FILE: drivers/gru/gruhandles.h:358:
+} __attribute__ ((packed));

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2425: FILE: drivers/gru/gruhandles.h:396:
+};
+/*

CHECK:BIT_MACRO: Prefer using the BIT macro
#2489: FILE: drivers/gru/gruhandles.h:460:
+#define CBR_EXS_ABORT_OCC				(1 << CBR_EXS_ABORT_OCC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2490: FILE: drivers/gru/gruhandles.h:461:
+#define CBR_EXS_INT_OCC					(1 << CBR_EXS_INT_OCC_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2491: FILE: drivers/gru/gruhandles.h:462:
+#define CBR_EXS_PENDING					(1 << CBR_EXS_PENDING_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2492: FILE: drivers/gru/gruhandles.h:463:
+#define CBR_EXS_QUEUED					(1 << CBR_EXS_QUEUED_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2493: FILE: drivers/gru/gruhandles.h:464:
+#define CBR_EXS_TLBHW					(1 << CBR_EXS_TLBHW_BIT)

CHECK:BIT_MACRO: Prefer using the BIT macro
#2494: FILE: drivers/gru/gruhandles.h:465:
+#define CBR_EXS_EXCEPTION				(1 << CBR_EXS_EXCEPTION_BIT)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2501: FILE: drivers/gru/gruhandles.h:472:
+ * ^Ipagesize^Ilog pagesize^Igrupagesize$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2502: FILE: drivers/gru/gruhandles.h:473:
+ * ^I  4k^I^I^I12^I0$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2503: FILE: drivers/gru/gruhandles.h:474:
+ * ^I  8k^I^I^I13^I1$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2504: FILE: drivers/gru/gruhandles.h:475:
+ * ^I 16k ^I^I^I14^I2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2505: FILE: drivers/gru/gruhandles.h:476:
+ * ^I 64k^I^I^I16^I3$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2506: FILE: drivers/gru/gruhandles.h:477:
+ * ^I256k^I^I^I18^I4$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2507: FILE: drivers/gru/gruhandles.h:478:
+ * ^I...$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'sh' - possible side-effects?
#2509: FILE: drivers/gru/gruhandles.h:480:
+#define GRU_PAGESIZE(sh)		(((sh) <= 14) ? (sh) - 12 : ((sh) >> 1) - 5)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'e' - possible side-effects?
#2516: FILE: drivers/gru/gruhandles.h:487:
+#define GRUPAGESHIFT(e)			(((e) < 2) ? (12UL + (e)) : (14UL + 2UL * ((e) - 2)))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2527: FILE: drivers/gru/gruhandles.h:498:
+#define cbe_to_tfh(c)		GRU_TFH(GRUBASE(c), CBENUM(c))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2528: FILE: drivers/gru/gruhandles.h:499:
+#define cbe_to_cch(c)		GRU_CCH(GRUBASE(c), CBENUM(c))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'c' - possible side-effects?
#2529: FILE: drivers/gru/gruhandles.h:500:
+#define tfh_to_cbe(c)		GRU_CBE(GRUBASE(c), TFHNUM(c))

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#2535: FILE: drivers/gru/gruhandles.h:506:
+#define GET_MSEG_HANDLE_STATUS(h)	(((*(unsigned long*)(h)) >> 16) & 3)

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2690: FILE: drivers/gru/grukservices.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#2715: FILE: drivers/gru/grukservices.c:26:
+#include <asm/uaccess.h>

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2763: FILE: drivers/gru/grukservices.c:74:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2768: FILE: drivers/gru/grukservices.c:79:
+		BUG();

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'quicktest', this function's name, in a string
#2772: FILE: drivers/gru/grukservices.c:83:
+		    ("GRU quicktest err: gru %d, found 0x%lx, expected 0x%lx\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2774: FILE: drivers/gru/grukservices.c:85:
+		BUG();		/* ZZZ should not be fatal */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2808: FILE: drivers/gru/grukservices.c:119:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2813: FILE: drivers/gru/grukservices.c:124:
+		BUG();

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2824: FILE: drivers/gru/grulib.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2838: FILE: drivers/gru/grulib.h:15:
+#define GRU_IOCTL_NUM ^I^I 'G'$

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#2868: FILE: drivers/gru/grulib.h:45:
+#define THREAD_POINTER(p, th)		(p + GRU_GSEG_PAGESIZE * (th))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2913: FILE: drivers/gru/grumain.c:1:
+/*

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2966: FILE: drivers/gru/grumain.c:54:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2987: FILE: drivers/gru/grumain.c:75:
+ *   ^I0---------------x------------x---------------------x----|$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2988: FILE: drivers/gru/grumain.c:76:
+ *^I  ^-next^I^-limit^I   ^I^I^I^I^-MAX_ASID$

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inuse_asid > asid'
#3036: FILE: drivers/gru/grumain.c:124:
+		if ((inuse_asid > asid) && (inuse_asid < limit))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'inuse_asid < limit'
#3036: FILE: drivers/gru/grumain.c:124:
+		if ((inuse_asid > asid) && (inuse_asid < limit))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3075: FILE: drivers/gru/grumain.c:163:
+			BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3128: FILE: drivers/gru/grumain.c:216:
+	return (hweight64(gru->gs_cbr_map) >= cbr_au_count
+		&& hweight64(gru->gs_dsr_map) >= dsr_au_count

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3129: FILE: drivers/gru/grumain.c:217:
+		&& hweight64(gru->gs_dsr_map) >= dsr_au_count
+		&& gru->gs_active_contexts < max_active_contexts);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3155: FILE: drivers/gru/grumain.c:243:
+	BUG_ON(asids->mt_ctxbitmap & ctxbitmap);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#3162: FILE: drivers/gru/grumain.c:250:
+		"gru %x, gms %p, ctxnum 0x%d, asid 0x%x, asidmap 0x%lx\n",

Prefixing 0x with decimal output is defective and should be corrected.

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3176: FILE: drivers/gru/grumain.c:264:
+	BUG_ON((asids->mt_ctxbitmap & ctxbitmap) != ctxbitmap);

ERROR:PRINTF_0XDECIMAL: Prefixing 0x with decimal output is defective
#3178: FILE: drivers/gru/grumain.c:266:
+	gru_dbg(grudev, "gru %x, gms %p, ctxnum 0x%d, asidmap 0x%lx\n",

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#3216: FILE: drivers/gru/grumain.c:304:
+	list_for_each_entry(gts, &vdata->vd_head, ts_next)
+	    if (gts->ts_tsid == tsid)

WARNING:TABSTOP: Statements should start on a tabstop
#3217: FILE: drivers/gru/grumain.c:305:
+	    if (gts->ts_tsid == tsid)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3414: FILE: drivers/gru/grumain.c:502:
+	BUG_ON(test_bit(gts->ts_ctxnum, &gru->gs_context_map) == 0);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3505: FILE: drivers/gru/grumain.c:593:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3515: FILE: drivers/gru/grumain.c:603:
+		BUG();

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3541: FILE: drivers/gru/grumain.c:629:
+	    (gts->ts_user_options == GRU_OPT_MISS_FMM_POLL
+	     || gts->ts_user_options == GRU_OPT_MISS_FMM_INTR);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3553: FILE: drivers/gru/grumain.c:641:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3560: FILE: drivers/gru/grumain.c:648:
+		BUG();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3568: FILE: drivers/gru/grumain.c:656:
+ * ^I- retarget interrupts on local blade$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3569: FILE: drivers/gru/grumain.c:657:
+ * ^I- force a delayed context unload by clearing the CCH asids. This$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3570: FILE: drivers/gru/grumain.c:658:
+ * ^I  forces TLB misses for new GRU instructions. The context is unloaded$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3571: FILE: drivers/gru/grumain.c:659:
+ * ^I  when the next TLB miss occurs.$

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3586: FILE: drivers/gru/grumain.c:674:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3598: FILE: drivers/gru/grumain.c:686:
+			BUG();

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3608: FILE: drivers/gru/grumain.c:696:
+ * ^I- task's GRU context is loaded into a GRU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3609: FILE: drivers/gru/grumain.c:697:
+ * ^I- task is using interrupt notification for TLB faults$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3610: FILE: drivers/gru/grumain.c:698:
+ * ^I- task has migrated to a different cpu on the same blade where$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3611: FILE: drivers/gru/grumain.c:699:
+ * ^I  it was previously running.$

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3616: FILE: drivers/gru/grumain.c:704:
+	if (gts->ts_tlb_int_select < 0
+	    || gts->ts_tlb_int_select == gru_cpu_fault_map_id())

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#3639: FILE: drivers/gru/grumain.c:727:
+#define next_ctxnum(n)		((n) <  GRU_NUM_CCH - 2 ? (n) + 1 : 0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'b' - possible side-effects?
#3640: FILE: drivers/gru/grumain.c:728:
+#define next_gru(b, g)		(((g) < &(b)->bs_grus[GRU_CHIPLETS_PER_BLADE - 1]) ?  \
+				 ((g)+1) : &(b)->bs_grus[0])

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'g' - possible side-effects?
#3640: FILE: drivers/gru/grumain.c:728:
+#define next_gru(b, g)		(((g) < &(b)->bs_grus[GRU_CHIPLETS_PER_BLADE - 1]) ?  \
+				 ((g)+1) : &(b)->bs_grus[0])

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#3641: FILE: drivers/gru/grumain.c:729:
+				 ((g)+1) : &(b)->bs_grus[0])
 				     ^

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3665: FILE: drivers/gru/grumain.c:753:
+			if (gru == blade->bs_lru_gru
+			    && ctxnum == blade->bs_lru_ctxnum)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3677: FILE: drivers/gru/grumain.c:765:
+		if (ok || ngts
+		    || (gru == blade->bs_lru_gru

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#3678: FILE: drivers/gru/grumain.c:766:
+		    || (gru == blade->bs_lru_gru
+			&& ctxnum == blade->bs_lru_ctxnum))

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3738: FILE: drivers/gru/grumain.c:826:
+		BUG_ON(gts->ts_ctxnum == GRU_NUM_CCH);

WARNING:JIFFIES_COMPARISON: Comparing jiffies is almost always wrong; prefer time_after, time_before and friends
#3795: FILE: drivers/gru/grumain.c:883:
+			if (gts->ts_steal_jiffies + GRU_STEAL_DELAY < jiffies)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#3823: FILE: drivers/gru/grumain.c:911:
+static int do_migrate_gts(struct gru_state *gru, struct gru_thread_state *gts,
+			   int locked, int pbid, int bid)

ERROR:SPACING: spaces required around that '=' (ctx:VxW)
#3858: FILE: drivers/gru/grumain.c:946:
+		locked= down_read_trylock(&mm->mmap_sem);
 		      ^

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3876: FILE: drivers/gru/grummuops.c:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3879: FILE: drivers/gru/grummuops.c:4:
+ * ^I^IMMUOPS callbacks  + TLB flushing$

WARNING:INCLUDE_LINUX: Use #include <linux/processor.h> instead of <asm/processor.h>
#3906: FILE: drivers/gru/grummuops.c:31:
+#include <asm/processor.h>

WARNING:INCLUDE_LINUX: Use #include <linux/delay.h> instead of <asm/delay.h>
#3907: FILE: drivers/gru/grummuops.c:32:
+#include <asm/delay.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3963: FILE: drivers/gru/grummuops.c:88:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3982: FILE: drivers/gru/grummuops.c:107:
+ * ^I- GRU contexts are not loaded into a GRU unless a reference is made to$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3983: FILE: drivers/gru/grummuops.c:108:
+ * ^I  the data segment or control block (this is true, not an assumption).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3984: FILE: drivers/gru/grummuops.c:109:
+ * ^I  If a DS/CB is referenced, the user will also issue instructions that$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3985: FILE: drivers/gru/grummuops.c:110:
+ * ^I  cause TLBmisses. It is not necessary to optimize for the case where$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3986: FILE: drivers/gru/grummuops.c:111:
+ * ^I  contexts are loaded but no instructions cause TLB misses. (I know$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3987: FILE: drivers/gru/grummuops.c:112:
+ * ^I  this will happen but I'm not optimizing for it).$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3988: FILE: drivers/gru/grummuops.c:113:
+ * ^I- GRU instructions to invalidate TLB entries are SLOOOOWWW - normally$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3989: FILE: drivers/gru/grummuops.c:114:
+ * ^I  a few usec but in unusual cases, it could be longer. Avoid if$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3990: FILE: drivers/gru/grummuops.c:115:
+ * ^I  possible.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3991: FILE: drivers/gru/grummuops.c:116:
+ * ^I- intrablade process migration between cpus is not frequent but is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3992: FILE: drivers/gru/grummuops.c:117:
+ * ^I  common.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3993: FILE: drivers/gru/grummuops.c:118:
+ * ^I- a GRU context is not typically migrated to a different GRU on the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3994: FILE: drivers/gru/grummuops.c:119:
+ * ^I  blade because of intrablade migration$

WARNING:REPEATED_WORD: Possible repeated word: 'very'
#3998: FILE: drivers/gru/grummuops.c:123:
+ *	  is very very rare (ie., no optimization for this case)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4009: FILE: drivers/gru/grummuops.c:134:
+ * ^I- asid[maxgrus] array. ASIDs are assigned to a GRU when a context is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4010: FILE: drivers/gru/grummuops.c:135:
+ * ^I  loaded into the GRU.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4011: FILE: drivers/gru/grummuops.c:136:
+ * ^I- asidmap[maxgrus]. bitmap to make it easier to find non-zero asids in$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4012: FILE: drivers/gru/grummuops.c:137:
+ * ^I  the above array$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4018: FILE: drivers/gru/grummuops.c:143:
+ * ^I- scan the asidmap for GRUs where the context has been loaded, ie,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4019: FILE: drivers/gru/grummuops.c:144:
+ * ^I  asid is non-zero.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4020: FILE: drivers/gru/grummuops.c:145:
+ * ^I- for each gru found:$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4021: FILE: drivers/gru/grummuops.c:146:
+ * ^I^I- if the ctxtmap is non-zero, there are active contexts in the$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4022: FILE: drivers/gru/grummuops.c:147:
+ * ^I^I  GRU. TLB invalidate instructions must be issued to the GRU.$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4058: FILE: drivers/gru/grummuops.c:183:
+			gru_dbg(grudev,
+	"  FLUSH gruid %d, asid 0x%x, num %ld, cbmap 0x%x\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4069: FILE: drivers/gru/grummuops.c:194:
+			gru_dbg(grudev,
+	"  CLEARASID gruid %d, asid 0x%x, cbtmap 0x%x, asidmap 0x%lx\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4097: FILE: drivers/gru/grummuops.c:222:
+static void gru_mmuops_invalidate_range_begin(struct mmu_notifier *mn,
+				       struct mm_struct *mm,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#4112: FILE: drivers/gru/grummuops.c:237:
+static void gru_mmuops_invalidate_range_end(struct mmu_notifier *mn,
+				     struct mm_struct *mm, unsigned long start,

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 12)
#4171: FILE: drivers/gru/grummuops.c:296:
+	hlist_for_each_entry_safe_rcu(mn, n, t, &mm->mmu_notifier.head, hlist)
+	    if (mn->ops == &gru_mmuops) {

WARNING:TABSTOP: Statements should start on a tabstop
#4172: FILE: drivers/gru/grummuops.c:297:
+	    if (mn->ops == &gru_mmuops) {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4216: FILE: drivers/gru/grummuops.c:341:
+ * ^I- 24 TGH handles per GRU chiplet$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4217: FILE: drivers/gru/grummuops.c:342:
+ * ^I- a portion (MAX_LOCAL_TGH) of the handles are reserved for$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4218: FILE: drivers/gru/grummuops.c:343:
+ * ^I  use by blade-local cpus$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4219: FILE: drivers/gru/grummuops.c:344:
+ * ^I- the rest are used by off-blade cpus. This usage is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4220: FILE: drivers/gru/grummuops.c:345:
+ * ^I  less frequent than blade-local usage.$

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#4251: FILE: drivers/gru/grummuops.c:376:
+
+}

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4257: FILE: drivers/gru/gruprocfs.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#4277: FILE: drivers/gru/gruprocfs.c:21:
+#include <asm/uaccess.h>

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#4369: FILE: drivers/gru/gruprocfs.c:113:
+	options = simple_strtoul(buf, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

WARNING:STATIC_CONST_CHAR_ARRAY: char * array declaration might be better as static const
#4380: FILE: drivers/gru/gruprocfs.c:124:
+	const char *mode[] = { "??", "UPM", "INTR", "OS_POLL" };

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#4445: FILE: drivers/gru/gruprocfs.c:189:
+static struct seq_operations cch_seq_ops = {

WARNING:CONST_STRUCT: struct seq_operations should normally be const
#4452: FILE: drivers/gru/gruprocfs.c:196:
+static struct seq_operations gru_seq_ops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#4480: FILE: drivers/gru/gruprocfs.c:224:
+static struct file_operations statistics_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4481: FILE: drivers/gru/gruprocfs.c:225:
+^I.open ^I^I= statistics_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4482: FILE: drivers/gru/gruprocfs.c:226:
+^I.read ^I^I= seq_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4483: FILE: drivers/gru/gruprocfs.c:227:
+^I.write ^I^I= statistics_write,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4484: FILE: drivers/gru/gruprocfs.c:228:
+^I.llseek ^I= seq_lseek,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4485: FILE: drivers/gru/gruprocfs.c:229:
+^I.release ^I= seq_release,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#4488: FILE: drivers/gru/gruprocfs.c:232:
+static struct file_operations options_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4489: FILE: drivers/gru/gruprocfs.c:233:
+^I.open ^I^I= options_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4490: FILE: drivers/gru/gruprocfs.c:234:
+^I.read ^I^I= seq_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4491: FILE: drivers/gru/gruprocfs.c:235:
+^I.write ^I^I= options_write,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4492: FILE: drivers/gru/gruprocfs.c:236:
+^I.llseek ^I= seq_lseek,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4493: FILE: drivers/gru/gruprocfs.c:237:
+^I.release ^I= seq_release,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#4496: FILE: drivers/gru/gruprocfs.c:240:
+static struct file_operations cch_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4497: FILE: drivers/gru/gruprocfs.c:241:
+^I.open ^I^I= cch_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4498: FILE: drivers/gru/gruprocfs.c:242:
+^I.read ^I^I= seq_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4499: FILE: drivers/gru/gruprocfs.c:243:
+^I.llseek ^I= seq_lseek,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4500: FILE: drivers/gru/gruprocfs.c:244:
+^I.release ^I= seq_release,$

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4502: FILE: drivers/gru/gruprocfs.c:246:
+};
+static struct file_operations gru_fops = {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#4502: FILE: drivers/gru/gruprocfs.c:246:
+static struct file_operations gru_fops = {

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4503: FILE: drivers/gru/gruprocfs.c:247:
+^I.open ^I^I= gru_open,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4504: FILE: drivers/gru/gruprocfs.c:248:
+^I.read ^I^I= seq_read,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4505: FILE: drivers/gru/gruprocfs.c:249:
+^I.llseek ^I= seq_lseek,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4506: FILE: drivers/gru/gruprocfs.c:250:
+^I.release ^I= seq_release,$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#4512: FILE: drivers/gru/gruprocfs.c:256:
+	struct file_operations *fops;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4521: FILE: drivers/gru/gruprocfs.c:265:
+};
+/* *INDENT-ON* */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4571: FILE: drivers/gru/grutables.h:1:
+/*

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4589: FILE: drivers/gru/grutables.h:19:
+ * ^IGFD - GRU File Data     - Holds GSEG options. Used to communicate with$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4590: FILE: drivers/gru/grutables.h:20:
+ * ^I^I^I^I  user using ioctls.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4591: FILE: drivers/gru/grutables.h:21:
+ * ^IVDATA-VMA Data^I^I- Holds a few parameters. Head of linked list of$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4592: FILE: drivers/gru/grutables.h:22:
+ * ^I^I^I^I  GTS tables for threads using the GSEG$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4593: FILE: drivers/gru/grutables.h:23:
+ * ^IGTS - Gru Thread State  - contains info for managing a GSEG context. A$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4594: FILE: drivers/gru/grutables.h:24:
+ * ^I^I^I^I  GTS is allocated for each thread accessing a$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4595: FILE: drivers/gru/grutables.h:25:
+ * ^I^I^I^I  GSEG.$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4596: FILE: drivers/gru/grutables.h:26:
+ *     ^IGTD - GRU Thread Data   - contains shadow copy of GRU data when GSEG is$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4597: FILE: drivers/gru/grutables.h:27:
+ *     ^I^I^I^I  not loaded into a GRU$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4602: FILE: drivers/gru/grutables.h:32:
+ *^IGS  - GRU State ^I- Used to manage the state of a GRU chiplet$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4608: FILE: drivers/gru/grutables.h:38:
+ *  ^I^I- 2 threads in process$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4609: FILE: drivers/gru/grutables.h:39:
+ *  ^I^I- 2 GSEGs open in process$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4610: FILE: drivers/gru/grutables.h:40:
+ *  ^I^I- GSEG1 is being used by both tthreads$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4611: FILE: drivers/gru/grutables.h:41:
+ *  ^I^I- GSEG2 is used only by thread 2$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4630: FILE: drivers/gru/grutables.h:60:
+ * ^Ifile.private_data -> gfd$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4633: FILE: drivers/gru/grutables.h:63:
+ * ^Ivma -> vdata -> gts -> gtd$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4637: FILE: drivers/gru/grutables.h:67:
+ * ^Ivma -> vdata -> gts -> gtd^I# normal case$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4639: FILE: drivers/gru/grutables.h:69:
+ * ^Ivma -> ------------/^I^I# gtd shared with parent$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4649: FILE: drivers/gru/grutables.h:79:
+ * ^I vma -> gtd$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#4650: FILE: drivers/gru/grutables.h:80:
+ *     after $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4652: FILE: drivers/gru/grutables.h:82:
+ *^I ^I^I^I^I  to new gts$

CHECK:LINE_SPACING: Please don't use multiple blank lines
#4662: FILE: drivers/gru/grutables.h:92:
+
+

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4667: FILE: drivers/gru/grutables.h:97:
+#define local_irq_disable() ^Iemu_local_irq_disable()$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4668: FILE: drivers/gru/grutables.h:98:
+#define local_irq_enable() ^Iemu_local_irq_enable()$

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4764: FILE: drivers/gru/grutables.h:194:
+ * steal a context from another process */

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4774: FILE: drivers/gru/grutables.h:204:
+				if (options & OPT_DPRINT) dev_dbg(dev, "%s: " fmt, __FUNCTION__, x); \

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#4774: FILE: drivers/gru/grutables.h:204:
+				if (options & OPT_DPRINT) dev_dbg(dev, "%s: " fmt, __FUNCTION__, x); \

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#4774: FILE: drivers/gru/grutables.h:204:
+				if (options & OPT_DPRINT) dev_dbg(dev, "%s: " fmt, __FUNCTION__, x); \

WARNING:TABSTOP: Statements should start on a tabstop
#4775: FILE: drivers/gru/grutables.h:205:
+			   } while (0)

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#4808: FILE: drivers/gru/grutables.h:238:
+ *   Note: values are used only when GRU is mmaped. At that
                                             ^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4816: FILE: drivers/gru/grutables.h:246:
+	int		fd_thread_slices;	/* max threads that will access
+						   the context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4816: FILE: drivers/gru/grutables.h:246:
+						   the context */

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#4827: FILE: drivers/gru/grutables.h:257:
+	unsigned short		mt_ctxbitmap;	/* bitmap of contexts using
+						   asid */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4827: FILE: drivers/gru/grutables.h:257:
+						   asid */

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#4834: FILE: drivers/gru/grutables.h:264:
+	spinlock_t		ms_asid_lock;

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#4842: FILE: drivers/gru/grutables.h:272:
+ * One of these structures is allocated when a GSEG is mmaped. The
                                                        ^^^^^^

WARNING:TYPO_SPELLING: 'mmaped' may be misspelled - perhaps 'mapped'?
#4858: FILE: drivers/gru/grutables.h:288:
+ * One of these is allocated for each thread accessing a mmaped GRU. A linked
                                                          ^^^^^^

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#4866: FILE: drivers/gru/grutables.h:296:
+};
+#define TD_MAGIC		0xabcd1235

WARNING:TYPO_SPELLING: 'requied' may be misspelled - perhaps 'required'?
#4886: FILE: drivers/gru/grutables.h:316:
+	unsigned char		ts_dsr_au_count;/* Number of DSR resources requied for contest */
 	             		                                           ^^^^^^^

WARNING:TYPO_SPELLING: 'requied' may be misspelled - perhaps 'required'?
#4887: FILE: drivers/gru/grutables.h:317:
+	unsigned char		ts_cbr_au_count;/* Number of CBR resources requied for contest */
 	             		                                           ^^^^^^^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gts' - possible side-effects?
#4897: FILE: drivers/gru/grutables.h:327:
+#define UGRUADDR(gts)		((gts)->ts_vma->vm_start + (gts)->ts_tsid * GRU_GSEG_PAGESIZE)

WARNING:LONG_LINE: line length of 101 exceeds 100 columns
#4949: FILE: drivers/gru/grutables.h:379:
+#define get_tfh_by_index(g, i)	((struct gru_tlb_fault_handle *)GRU_TFH((g)->gs_gru_base_vaddr, (i)))

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#4950: FILE: drivers/gru/grutables.h:380:
+#define get_tgh_by_index(g, i)	((struct gru_tlb_global_handle *)GRU_TGH((g)->gs_gru_base_vaddr, (i)))

WARNING:LONG_LINE: line length of 107 exceeds 100 columns
#4951: FILE: drivers/gru/grutables.h:381:
+#define get_cbe_by_index(g, i)	((struct gru_control_block_extended *)GRU_CBE((g)->gs_gru_base_vaddr, (i)))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4960: FILE: drivers/gru/grutables.h:390:
+#define THREADDATABYTES(v) ^I(sizeof(struct gru_thread_data) + ^I^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'v' - possible side-effects?
#4960: FILE: drivers/gru/grutables.h:390:
+#define THREADDATABYTES(v) 	(sizeof(struct gru_thread_data) + 		\
+					DSR_BYTES((v)->vd_dsr_au_count)	+	\
+					CB_CBR_BYTES((v)->vd_cbr_au_count))

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#4965: FILE: drivers/gru/grutables.h:395:
+#define thread_cbr_number(gts, n) ((gts)->ts_cbr_idx[(n) / GRU_CBR_AU_SIZE] ^I\$

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'n' - possible side-effects?
#4965: FILE: drivers/gru/grutables.h:395:
+#define thread_cbr_number(gts, n) ((gts)->ts_cbr_idx[(n) / GRU_CBR_AU_SIZE] 	\
+				  * GRU_CBR_AU_SIZE + (n) % GRU_CBR_AU_SIZE)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gid' - possible side-effects?
#4972: FILE: drivers/gru/grutables.h:402:
+#define GID_TO_GRU(gid)		(gru_base[(gid) / GRU_CHIPLETS_PER_BLADE] ?	\
+				 (&gru_base[(gid) / GRU_CHIPLETS_PER_BLADE]->	\
+					bs_grus[(gid) % GRU_CHIPLETS_PER_BLADE]) : NULL)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gid' - possible side-effects?
#4977: FILE: drivers/gru/grutables.h:407:
+#define for_each_gru_in_bitmap(gid, map)					\
+	for (gid = find_first_bit(map, GRU_MAX_GRUS); gid < GRU_MAX_GRUS;	\
+			 gid++, gid = find_next_bit(map, GRU_MAX_GRUS, gid))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#4977: FILE: drivers/gru/grutables.h:407:
+#define for_each_gru_in_bitmap(gid, map)					\
+	for (gid = find_first_bit(map, GRU_MAX_GRUS); gid < GRU_MAX_GRUS;	\
+			 gid++, gid = find_next_bit(map, GRU_MAX_GRUS, gid))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4982: FILE: drivers/gru/grutables.h:412:
+#define for_each_gru_on_blade(gru, nid, i)					\
+	for (gru = gru_base[nid]->bs_grus, i = 0; i < GRU_CHIPLETS_PER_BLADE; i++, gru++)	\
+		if (gru->gs_present)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gru' - possible side-effects?
#4982: FILE: drivers/gru/grutables.h:412:
+#define for_each_gru_on_blade(gru, nid, i)					\
+	for (gru = gru_base[nid]->bs_grus, i = 0; i < GRU_CHIPLETS_PER_BLADE; i++, gru++)	\
+		if (gru->gs_present)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#4982: FILE: drivers/gru/grutables.h:412:
+#define for_each_gru_on_blade(gru, nid, i)					\
+	for (gru = gru_base[nid]->bs_grus, i = 0; i < GRU_CHIPLETS_PER_BLADE; i++, gru++)	\
+		if (gru->gs_present)

WARNING:TYPO_SPELLING: 'thsi' may be misspelled - perhaps 'this'?
#4986: FILE: drivers/gru/grutables.h:416:
+/* Scan all active GTSs on a gru. Note: must hold ss_lock to use thsi macro. */
                                                                  ^^^^

ERROR:MULTISTATEMENT_MACRO_USE_DO_WHILE: Macros starting with if should be enclosed by a do - while loop to avoid possible if/else logic defects
#4987: FILE: drivers/gru/grutables.h:417:
+#define for_each_gts_on_gru(gts, gru, ctxnum)					\
+	if (gru->gs_present)							\
+		for (ctxnum = 0; ctxnum < GRU_NUM_CCH; ctxnum++)		\
+			if ((gts = gru->gs_gts[ctxnum]))

Macros with multiple statements should be enclosed in a
do - while block.  Same should also be the case for macros
starting with `if` to avoid logic defects::

  #define macrofun(a, b, c)                 \
    do {                                    \
            if (a == 5)                     \
                    do_this(b, c);          \
    } while (0)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#macros-enums-and-rtl

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'gru' - possible side-effects?
#4987: FILE: drivers/gru/grutables.h:417:
+#define for_each_gts_on_gru(gts, gru, ctxnum)					\
+	if (gru->gs_present)							\
+		for (ctxnum = 0; ctxnum < GRU_NUM_CCH; ctxnum++)		\
+			if ((gts = gru->gs_gts[ctxnum]))

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gru' may be better as '(gru)' to avoid precedence issues
#4987: FILE: drivers/gru/grutables.h:417:
+#define for_each_gts_on_gru(gts, gru, ctxnum)					\
+	if (gru->gs_present)							\
+		for (ctxnum = 0; ctxnum < GRU_NUM_CCH; ctxnum++)		\
+			if ((gts = gru->gs_gts[ctxnum]))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ctxnum' - possible side-effects?
#4987: FILE: drivers/gru/grutables.h:417:
+#define for_each_gts_on_gru(gts, gru, ctxnum)					\
+	if (gru->gs_present)							\
+		for (ctxnum = 0; ctxnum < GRU_NUM_CCH; ctxnum++)		\
+			if ((gts = gru->gs_gts[ctxnum]))

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#4990: FILE: drivers/gru/grutables.h:420:
+			if ((gts = gru->gs_gts[ctxnum]))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#4993: FILE: drivers/gru/grutables.h:423:
+#define for_each_cbr_in_tfm(i, map)						\
+	for (i = find_first_bit(map, GRU_NUM_CBE); i < GRU_NUM_CBE;		\
+			 i++, i = find_next_bit(map, GRU_NUM_CBE, i))

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#4993: FILE: drivers/gru/grutables.h:423:
+#define for_each_cbr_in_tfm(i, map)						\
+	for (i = find_first_bit(map, GRU_NUM_CBE); i < GRU_NUM_CBE;		\
+			 i++, i = find_next_bit(map, GRU_NUM_CBE, i))

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#4998: FILE: drivers/gru/grutables.h:428:
+#define for_each_cbr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit(map, GRU_CBR_AU); k < GRU_CBR_AU;		\
+			 k = find_next_bit(map, GRU_CBR_AU, k + 1)) 		\
+		for (i = k*GRU_CBR_AU_SIZE; i < (k + 1) * GRU_CBR_AU_SIZE; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#4998: FILE: drivers/gru/grutables.h:428:
+#define for_each_cbr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit(map, GRU_CBR_AU); k < GRU_CBR_AU;		\
+			 k = find_next_bit(map, GRU_CBR_AU, k + 1)) 		\
+		for (i = k*GRU_CBR_AU_SIZE; i < (k + 1) * GRU_CBR_AU_SIZE; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#4998: FILE: drivers/gru/grutables.h:428:
+#define for_each_cbr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit(map, GRU_CBR_AU); k < GRU_CBR_AU;		\
+			 k = find_next_bit(map, GRU_CBR_AU, k + 1)) 		\
+		for (i = k*GRU_CBR_AU_SIZE; i < (k + 1) * GRU_CBR_AU_SIZE; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k' - possible side-effects?
#4998: FILE: drivers/gru/grutables.h:428:
+#define for_each_cbr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit(map, GRU_CBR_AU); k < GRU_CBR_AU;		\
+			 k = find_next_bit(map, GRU_CBR_AU, k + 1)) 		\
+		for (i = k*GRU_CBR_AU_SIZE; i < (k + 1) * GRU_CBR_AU_SIZE; i++)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5000: FILE: drivers/gru/grutables.h:430:
+^I^I^I k = find_next_bit(map, GRU_CBR_AU, k + 1)) ^I^I\$

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5001: FILE: drivers/gru/grutables.h:431:
+		for (i = k*GRU_CBR_AU_SIZE; i < (k + 1) * GRU_CBR_AU_SIZE; i++)
 		          ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#5004: FILE: drivers/gru/grutables.h:434:
+#define for_each_dsr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit((const unsigned long *)map, GRU_DSR_AU);	\
+			k < GRU_DSR_AU;						\
+			k = find_next_bit((const unsigned long *)map, GRU_DSR_AU, k + 1))\
+		for (i = k*GRU_DSR_AU_CL; i < (k + 1) * GRU_DSR_AU_CL; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'i' - possible side-effects?
#5004: FILE: drivers/gru/grutables.h:434:
+#define for_each_dsr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit((const unsigned long *)map, GRU_DSR_AU);	\
+			k < GRU_DSR_AU;						\
+			k = find_next_bit((const unsigned long *)map, GRU_DSR_AU, k + 1))\
+		for (i = k*GRU_DSR_AU_CL; i < (k + 1) * GRU_DSR_AU_CL; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'map' - possible side-effects?
#5004: FILE: drivers/gru/grutables.h:434:
+#define for_each_dsr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit((const unsigned long *)map, GRU_DSR_AU);	\
+			k < GRU_DSR_AU;						\
+			k = find_next_bit((const unsigned long *)map, GRU_DSR_AU, k + 1))\
+		for (i = k*GRU_DSR_AU_CL; i < (k + 1) * GRU_DSR_AU_CL; i++)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'k' - possible side-effects?
#5004: FILE: drivers/gru/grutables.h:434:
+#define for_each_dsr_in_allocation_map(i, map, k)				\
+	for (k = find_first_bit((const unsigned long *)map, GRU_DSR_AU);	\
+			k < GRU_DSR_AU;						\
+			k = find_next_bit((const unsigned long *)map, GRU_DSR_AU, k + 1))\
+		for (i = k*GRU_DSR_AU_CL; i < (k + 1) * GRU_DSR_AU_CL; i++)

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#5008: FILE: drivers/gru/grutables.h:438:
+		for (i = k*GRU_DSR_AU_CL; i < (k + 1) * GRU_DSR_AU_CL; i++)
 		          ^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gru' may be better as '(gru)' to avoid precedence issues
#5010: FILE: drivers/gru/grutables.h:440:
+#define gseg_physical_address(gru, ctxnum)					\
+		(gru->gs_gru_base_paddr + ctxnum * GRU_GSEG_STRIDE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctxnum' may be better as '(ctxnum)' to avoid precedence issues
#5010: FILE: drivers/gru/grutables.h:440:
+#define gseg_physical_address(gru, ctxnum)					\
+		(gru->gs_gru_base_paddr + ctxnum * GRU_GSEG_STRIDE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'gru' may be better as '(gru)' to avoid precedence issues
#5012: FILE: drivers/gru/grutables.h:442:
+#define gseg_virtual_address(gru, ctxnum)					\
+		(gru->gs_gru_base_vaddr + ctxnum * GRU_GSEG_STRIDE)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'ctxnum' may be better as '(ctxnum)' to avoid precedence issues
#5012: FILE: drivers/gru/grutables.h:442:
+#define gseg_virtual_address(gru, ctxnum)					\
+		(gru->gs_gru_base_vaddr + ctxnum * GRU_GSEG_STRIDE)

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5022: FILE: drivers/gru/grutables.h:452:
+#define blade_processor_id() ^I(smp_processor_id() % CPUSPERBLADE)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5023: FILE: drivers/gru/grutables.h:453:
+#define numa_blade_id() ^I(numa_node_id() / NODESPERBLADE)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#5030: FILE: drivers/gru/grutables.h:460:
+ * ^IUse the "delresp" bit in the handle as a "lock" bit.$

WARNING:CONST_STRUCT: struct vm_operations_struct should normally be const
#5051: FILE: drivers/gru/grutables.h:481:
+extern struct vm_operations_struct gru_vm_ops;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5078: FILE: drivers/gru/grutables.h:508:
+extern unsigned long gru_nopfn(struct vm_area_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct vm_area_struct *' should also have an identifier name
#5078: FILE: drivers/gru/grutables.h:508:
+extern unsigned long gru_nopfn(struct vm_area_struct *, unsigned long);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned long' should also have an identifier name
#5078: FILE: drivers/gru/grutables.h:508:
+extern unsigned long gru_nopfn(struct vm_area_struct *, unsigned long);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5079: FILE: drivers/gru/grutables.h:509:
+extern struct gru_mm_struct *gru_register_mmu_notifier(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#5080: FILE: drivers/gru/grutables.h:510:
+extern void gru_drop_mmu_notifier(struct gru_mm_struct *gms);

ERROR:CODE_INDENT: code indent should use tabs where possible
#5083: FILE: drivers/gru/grutables.h:513:
+                           unsigned long len);$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#5083: FILE: drivers/gru/grutables.h:513:
+void gru_flush_tlb_range(struct gru_mm_struct *gms, unsigned long start,
+                           unsigned long len);

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#5083: FILE: drivers/gru/grutables.h:513:
+                           unsigned long len);$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 13 errors, 286 warnings, 147 checks, 4921 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000316939.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
