WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#62: FILE: kernel/cgroup.c:128:
+	 * but no longer (only if CGRP_NOTIFY_ON_RELEASE is set) */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:LINE_SPACING: Missing a blank line after declarations
#137: FILE: kernel/cgroup.c:257:
+		struct cgroup *cgrp = cg->subsys[i]->cgroup;
+		if (atomic_dec_and_test(&cgrp->count) &&

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: kernel/cgroup.c:595:
+		struct cgroup *cgrp = dentry->d_fsdata;
+		BUG_ON(!(cgroup_is_removed(cgrp)));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#288: FILE: kernel/cgroup.c:595:
+		BUG_ON(!(cgroup_is_removed(cgrp)));

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#324: FILE: kernel/cgroup.c:690:
+			BUG_ON(cgrp->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#341: FILE: kernel/cgroup.c:702:
+			BUG_ON(cgrp->subsys[i] != dummytop->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#342: FILE: kernel/cgroup.c:703:
+			BUG_ON(cgrp->subsys[i]->cgroup != cgrp);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#353: FILE: kernel/cgroup.c:712:
+			BUG_ON(!cgrp->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#357: FILE: kernel/cgroup.c:715:
+			BUG_ON(cgrp->subsys[i]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#445: FILE: kernel/cgroup.c:1023:
+		BUG_ON(!list_empty(&cgrp->sibling));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#446: FILE: kernel/cgroup.c:1024:
+		BUG_ON(!list_empty(&cgrp->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#467: FILE: kernel/cgroup.c:1049:
+	BUG_ON(!list_empty(&cgrp->children));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#468: FILE: kernel/cgroup.c:1050:
+	BUG_ON(!list_empty(&cgrp->sibling));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#538: FILE: kernel/cgroup.c:1144:
+static void get_first_subsys(const struct cgroup *cgrp,
 			struct cgroup_subsys_state **css, int *subsys_id)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#657: FILE: kernel/cgroup.c:1311:
+static ssize_t cgroup_common_file_write(struct cgroup *cgrp,
 					   struct cftype *cft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#712: FILE: kernel/cgroup.c:1401:
+static ssize_t cgroup_read_uint(struct cgroup *cgrp, struct cftype *cft,
 				   struct file *file,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#726: FILE: kernel/cgroup.c:1413:
+static ssize_t cgroup_common_file_read(struct cgroup *cgrp,
 					  struct cftype *cft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#771: FILE: kernel/cgroup.c:1576:
+static int cgroup_create_dir(struct cgroup *cgrp, struct dentry *dentry,
 				int mode)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#795: FILE: kernel/cgroup.c:1595:
+int cgroup_add_file(struct cgroup *cgrp,
 		       struct cgroup_subsys *subsys,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#824: FILE: kernel/cgroup.c:1622:
+int cgroup_add_files(struct cgroup *cgrp,
 			struct cgroup_subsys *subsys,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#862: FILE: kernel/cgroup.c:1659:
+static void cgroup_advance_iter(struct cgroup *cgrp,
 					  struct cgroup_iter *it)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#899: FILE: kernel/cgroup.c:1704:
+struct task_struct *cgroup_iter_next(struct cgroup *cgrp,
 					struct cgroup_iter *it)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1012: FILE: kernel/cgroup.c:1903:
+static ssize_t cgroup_tasks_read(struct cgroup *cgrp,
 				    struct cftype *cft,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1021: FILE: kernel/cgroup.c:1926:
+static u64 cgroup_read_notify_on_release(struct cgroup *cgrp,
 					    struct cftype *cft)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1057: FILE: kernel/cgroup.c:1983:
+		if ((err = cgroup_add_file(cgrp, NULL, &cft_release_agent)) < 0)

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#1064: FILE: kernel/cgroup.c:1988:
+		if (ss->populate && (err = ss->populate(ss, cgrp)) < 0)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1084: FILE: kernel/cgroup.c:2004:
+	BUG_ON(cgrp->subsys[ss->subsys_id]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1152: FILE: kernel/cgroup.c:2066:
+	BUG_ON(!mutex_is_locked(&cgrp->dentry->d_inode->i_mutex));

ERROR:SPACING: spaces required around that '!=' (ctx:VxW)
#1349: FILE: kernel/cgroup.c:2709:
+	while (cgrp != target && cgrp!= cgrp->top_cgroup)
 	                             ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1363: FILE: kernel/cgroup.c:2720:
+	if (cgroup_is_releasable(cgrp) && !atomic_read(&cgrp->count)
+	    && list_empty(&cgrp->children) && !cgroup_has_css_refs(cgrp)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 15 warnings, 12 checks, 1290 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000369589.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
