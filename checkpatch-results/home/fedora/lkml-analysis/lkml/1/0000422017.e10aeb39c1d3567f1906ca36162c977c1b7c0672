ERROR:DIFF_IN_COMMIT_MSG: Avoid using diff content in the commit message - patch(1) might not work
#104: 
--- a/fs/Kconfig	Tue Jun 05 11:37:21 2007 -0700

Avoid having diff content in commit message.
This causes problems when one tries to apply a file containing both
the changelog and the diff because patch(1) tries to apply the diff
which it found in the changelog.

See: https://lore.kernel.org/lkml/20150611134006.9df79a893e3636019ad2759e@linux-foundation.org/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#131: FILE: fs/Kconfig:1383:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#135: FILE: fs/Kconfig:1387:
+^I$

WARNING:TYPO_SPELLING: 'Usefull' may be misspelled - perhaps 'Useful'?
#171: FILE: fs/cramfs/inode.c:21:
+ * etc.  Usefull on embedded platform with ROM :-).
          ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#193: FILE: fs/cramfs/inode.c:43:
+ * along with this program; if not, write to the Free Software$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#194: FILE: fs/cramfs/inode.c:44:
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA$

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#221: FILE: fs/cramfs/inode.c:76:
+static struct inode_operations cramfs_dir_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

ERROR:TRAILING_WHITESPACE: trailing whitespace
#244: FILE: fs/cramfs/inode.c:149:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#249: FILE: fs/cramfs/inode.c:154:
+	if ((CRAMFS_INODE_IS_XIP(inode)) && !(vma->vm_flags & VM_WRITE) &&
+	  (LINEAR_CRAMFS(sbi)))

ERROR:CORRUPTED_PATCH: patch seems to be corrupt (line wrapped?)
#256: FILE: fs/cramfs/inode.c:160:
sector_t offset,

The patch seems to be corrupted or lines are wrapped.
Please regenerate the patch file before sending it to the maintainer.

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#257: FILE: fs/cramfs/inode.c:161:
+struct page *cramfs_get_xip_page(struct address_space *mapping,
+			       int create)

ERROR:CODE_INDENT: code indent should use tabs where possible
#259: FILE: fs/cramfs/inode.c:163:
+ ^Iunsigned long address;$

Code indent should use tabs instead of spaces.
Outside of comments, documentation and Kconfig,
spaces are never used for indentation.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#indentation

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#259: FILE: fs/cramfs/inode.c:163:
+ ^Iunsigned long address;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#259: FILE: fs/cramfs/inode.c:163:
+ ^Iunsigned long address;$

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#273: FILE: fs/cramfs/inode.c:177:
+ssize_t cramfs_file_read(struct file *file, char __user * buf, size_t len,

When using pointer data or a function that returns a pointer type,
the preferred use of * is adjacent to the data name or function name
and not adjacent to the type name.
Examples::

  char *linux_banner;
  unsigned long long memparse(char *ptr, char **retptr);
  char *match_strdup(substring_t *s);

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#274: FILE: fs/cramfs/inode.c:178:
+ssize_t cramfs_file_read(struct file *file, char __user * buf, size_t len,
+		       loff_t * ppos)

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#274: FILE: fs/cramfs/inode.c:178:
+		       loff_t * ppos)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#278: FILE: fs/cramfs/inode.c:182:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#281: FILE: fs/cramfs/inode.c:185:
+^I^I$

WARNING:CONST_STRUCT: struct file_operations should normally be const
#285: FILE: fs/cramfs/inode.c:189:
+static struct file_operations cramfs_linear_xip_fops = {

WARNING:INDENTED_LABEL: labels should not be indented
#286: FILE: fs/cramfs/inode.c:190:
+	aio_read:	generic_file_aio_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#287: FILE: fs/cramfs/inode.c:191:
+	read:		cramfs_file_read,
 	    ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:INDENTED_LABEL: labels should not be indented
#287: FILE: fs/cramfs/inode.c:191:
+	read:		cramfs_file_read,

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#288: FILE: fs/cramfs/inode.c:192:
+	mmap:		cramfs_mmap,
 	    ^

WARNING:INDENTED_LABEL: labels should not be indented
#288: FILE: fs/cramfs/inode.c:192:
+	mmap:		cramfs_mmap,

ERROR:SPACING: space required before the open parenthesis '('
#308: FILE: fs/cramfs/inode.c:212:
+		if(S_ISREG(inode->i_mode))

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#322: FILE: fs/cramfs/inode.c:245:
+static unsigned char **read_buffers = NULL;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#323: FILE: fs/cramfs/inode.c:246:
+static unsigned *buffer_blocknr = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#323: FILE: fs/cramfs/inode.c:246:
+static unsigned *buffer_blocknr = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to NULL
#324: FILE: fs/cramfs/inode.c:247:
+static struct super_block **buffer_dev = NULL;

ERROR:INITIALISED_STATIC: do not initialise statics to 0
#326: FILE: fs/cramfs/inode.c:249:
+static int block_filesystems = 0;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#335: FILE: fs/cramfs/inode.c:256:
+static void *cramfs_read_block(struct super_block *sb, unsigned int offset,
+	    unsigned int len)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#344: FILE: fs/cramfs/inode.c:332:
+static void *cramfs_read(struct super_block *sb, unsigned int offset,
+	    unsigned int len)

ERROR:POINTER_LOCATION: "(foo*)" should be "(foo *)"
#351: FILE: fs/cramfs/inode.c:339:
+		return (void*)(sbi->linear_virt_addr + offset);

ERROR:TRAILING_WHITESPACE: trailing whitespace
#404: FILE: fs/cramfs/inode.c:378:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#414: FILE: fs/cramfs/inode.c:388:
+		memcpy(&super, cramfs_read(sb, 512, sizeof(super)),
+		    sizeof(super));

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#423: FILE: fs/cramfs/inode.c:441:
+	printk(KERN_INFO "cramfs: cramfs image appears to be %lu KB in size\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#424: FILE: fs/cramfs/inode.c:442:
+	printk(KERN_INFO "cramfs: cramfs image appears to be %lu KB in size\n",
+		sbi->size/1024);

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#424: FILE: fs/cramfs/inode.c:442:
+		sbi->size/1024);
 		         ^

ERROR:TRAILING_WHITESPACE: trailing whitespace
#425: FILE: fs/cramfs/inode.c:443:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#432: FILE: fs/cramfs/inode.c:450:
+static int cramfs_fill_super_physaddr(struct super_block *sb, void *data,
+	    int silent)

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#438: FILE: fs/cramfs/inode.c:456:
+	if (!(p = strstr((char *)data, "physaddr=")))

Do not use assignments in if condition.
Example::

  if ((foo = bar(...)) < BAZ) {

should be written as::

  foo = bar(...);
  if (foo < BAZ) {

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#441: FILE: fs/cramfs/inode.c:459:
+	sbi->linear_phys_addr = simple_strtoul(p + 9, NULL, 0);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#442: FILE: fs/cramfs/inode.c:460:
+	if (sbi->linear_phys_addr & (PAGE_SIZE-1)) {
 	                                      ^

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#443: FILE: fs/cramfs/inode.c:461:
+		printk(KERN_ERR "cramfs: physical address 0x%lx for linear"

WARNING:SPLIT_STRING: quoted string split across lines
#444: FILE: fs/cramfs/inode.c:462:
+		printk(KERN_ERR "cramfs: physical address 0x%lx for linear"
+		    "cramfs isn't aligned to a page boundary\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:MISSING_SPACE: break quoted strings at a space character
#444: FILE: fs/cramfs/inode.c:462:
+		printk(KERN_ERR "cramfs: physical address 0x%lx for linear"
+		    "cramfs isn't aligned to a page boundary\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#449: FILE: fs/cramfs/inode.c:467:
+		printk(KERN_ERR "cramfs: physical address for linear cramfs"

WARNING:SPLIT_STRING: quoted string split across lines
#450: FILE: fs/cramfs/inode.c:468:
+		printk(KERN_ERR "cramfs: physical address for linear cramfs"
+		    "image can't be 0\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#450: FILE: fs/cramfs/inode.c:468:
+		printk(KERN_ERR "cramfs: physical address for linear cramfs"
+		    "image can't be 0\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#453: FILE: fs/cramfs/inode.c:471:
+	printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear"

WARNING:SPLIT_STRING: quoted string split across lines
#454: FILE: fs/cramfs/inode.c:472:
+	printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear"
+	    "cramfs image\n", sbi->linear_phys_addr);

WARNING:MISSING_SPACE: break quoted strings at a space character
#454: FILE: fs/cramfs/inode.c:472:
+	printk(KERN_INFO "cramfs: checking physical address 0x%lx for linear"
+	    "cramfs image\n", sbi->linear_phys_addr);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#460: FILE: fs/cramfs/inode.c:478:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image"

WARNING:SPLIT_STRING: quoted string split across lines
#461: FILE: fs/cramfs/inode.c:479:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image"
+		    "failed\n");

WARNING:MISSING_SPACE: break quoted strings at a space character
#461: FILE: fs/cramfs/inode.c:479:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image"
+		    "failed\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#475: FILE: fs/cramfs/inode.c:493:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image"

WARNING:SPLIT_STRING: quoted string split across lines
#476: FILE: fs/cramfs/inode.c:494:
+		printk(KERN_ERR "cramfs: ioremap of the linear cramfs image"
+		    " failed\n");

ERROR:TRAILING_WHITESPACE: trailing whitespace
#479: FILE: fs/cramfs/inode.c:497:
+^I$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#488: FILE: fs/cramfs/inode.c:506:
+static int cramfs_fill_super_iomem(struct super_block *sb, void *data,
+	    int silent)

ERROR:TRAILING_WHITESPACE: trailing whitespace
#496: FILE: fs/cramfs/inode.c:514:
+^I$

ERROR:ASSIGN_IN_IF: do not use assignment in if condition
#497: FILE: fs/cramfs/inode.c:515:
+	if (!(p = strstr((char *)data, "iomem=")))

ERROR:TRAILING_WHITESPACE: trailing whitespace
#499: FILE: fs/cramfs/inode.c:517:
+^I$

ERROR:TRAILING_WHITESPACE: trailing whitespace
#503: FILE: fs/cramfs/inode.c:521:
+^I$

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#504: FILE: fs/cramfs/inode.c:522:
+	if ((unsigned long)(sbi->linear_virt_addr) & (PAGE_SIZE-1)) {
 	                                                       ^

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->linear_virt_addr'
#504: FILE: fs/cramfs/inode.c:522:
+	if ((unsigned long)(sbi->linear_virt_addr) & (PAGE_SIZE-1)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#505: FILE: fs/cramfs/inode.c:523:
+		printk(KERN_ERR "cramfs: virtual address 0x%lx for linear"

WARNING:SPLIT_STRING: quoted string split across lines
#506: FILE: fs/cramfs/inode.c:524:
+		printk(KERN_ERR "cramfs: virtual address 0x%lx for linear"
+		    " cramfs isn't aligned to a page boundary\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sbi->linear_virt_addr'
#510: FILE: fs/cramfs/inode.c:528:
+	if ((unsigned long)(sbi->linear_virt_addr) == 0) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#511: FILE: fs/cramfs/inode.c:529:
+		printk(KERN_ERR "cramfs: virtual address for linear cramfs"

WARNING:SPLIT_STRING: quoted string split across lines
#512: FILE: fs/cramfs/inode.c:530:
+		printk(KERN_ERR "cramfs: virtual address for linear cramfs"
+		    " image can't be 0\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#515: FILE: fs/cramfs/inode.c:533:
+	printk(KERN_INFO "cramfs: checking virtual address 0x%lx for"

WARNING:SPLIT_STRING: quoted string split across lines
#516: FILE: fs/cramfs/inode.c:534:
+	printk(KERN_INFO "cramfs: checking virtual address 0x%lx for"
+	    " linear cramfs image\n",

ERROR:TRAILING_WHITESPACE: trailing whitespace
#535: FILE: fs/cramfs/inode.c:553:
+^I$

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#536: FILE: fs/cramfs/inode.c:554:
+	printk("fill_super_block\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*sbi)...) over kzalloc(sizeof(struct cramfs_sb_info)...)
#567: FILE: fs/cramfs/inode.c:585:
+	sbi = kzalloc(sizeof(struct cramfs_sb_info), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#596: FILE: fs/cramfs/inode.c:692:
+static struct dentry * cramfs_lookup(struct inode *dir, struct dentry *dentry,

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#597: FILE: fs/cramfs/inode.c:693:
+    struct nameidata *nd)
                       ^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#597: FILE: fs/cramfs/inode.c:693:
+static struct dentry * cramfs_lookup(struct inode *dir, struct dentry *dentry,
+    struct nameidata *nd)

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#597: FILE: fs/cramfs/inode.c:693:
+    struct nameidata *nd)$

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#607: FILE: fs/cramfs/inode.c:706:
+		de = cramfs_read(dir->i_sb, OFFSET(dir) + offset,
+		    sizeof(*de)+256);

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#607: FILE: fs/cramfs/inode.c:706:
+		    sizeof(*de)+256);
 		               ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#619: FILE: fs/cramfs/inode.c:759:
+		u32 blkptr_off = OFFSET(inode) + page->index*4;
 		                                            ^

ERROR:SPACING: space required before the open parenthesis '('
#623: FILE: fs/cramfs/inode.c:763:
+		if(CRAMFS_INODE_IS_XIP(inode)) {

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#629: FILE: fs/cramfs/inode.c:769:
+			memcpy(page_address(page),
+				cramfs_read(sb, blkptr_off, PAGE_CACHE_SIZE),

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (16, 16)
#634: FILE: fs/cramfs/inode.c:774:
+		} else {
[...]
+		start_off = OFFSET(inode) + maxblock*4;

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#636: FILE: fs/cramfs/inode.c:776:
+		start_off = OFFSET(inode) + maxblock*4;
 		                                    ^

CHECK:SPACING: No space is necessary after a cast
#641: FILE: fs/cramfs/inode.c:779:
+			start_off = *(u32 *) cramfs_read(sb, blkptr_off-4, 4);

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#641: FILE: fs/cramfs/inode.c:779:
+			start_off = *(u32 *) cramfs_read(sb, blkptr_off-4, 4);
 			                                               ^

CHECK:SPACING: No space is necessary after a cast
#642: FILE: fs/cramfs/inode.c:780:
+		compr_len = (*(u32 *) cramfs_read(sb, blkptr_off, 4)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#650: FILE: fs/cramfs/inode.c:787:
+			printk(KERN_ERR "cramfs: bad compressed blocksize"

WARNING:SPLIT_STRING: quoted string split across lines
#651: FILE: fs/cramfs/inode.c:788:
+			printk(KERN_ERR "cramfs: bad compressed blocksize"
+			    " %u\n", compr_len);

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#682: FILE: fs/cramfs/inode.c:828:
+static struct inode_operations cramfs_dir_inode_operations = {

WARNING:BRACES: braces {} are not necessary for any arm of this statement
#709: FILE: fs/cramfs/inode.c:854:
+	if (LINEAR_CRAMFS(sbi)) {
[...]
+	} else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#741: FILE: include/linux/cramfs_fs.h:87:
+#define LINEAR_CRAMFS(x) \
+(((x)->linear_phys_addr != 0) || ((x)->linear_virt_addr))

ERROR:POINTER_LOCATION: "foo * bar" should be "foo *bar"
#772: FILE: include/linux/cramfs_fs_sb.h:24:
+static inline void __iomem * ioremap(unsigned long offset, unsigned long size)

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#777: FILE: include/linux/cramfs_fs_sb.h:29:
+static inline void iounmap(volatile void __iomem *addr)

ERROR:SPACING: space required after that ',' (ctx:VxV)
#793: FILE: init/do_mounts.c:349:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,
 	                             ^

ERROR:SPACING: space required after that ',' (ctx:VxV)
#793: FILE: init/do_mounts.c:349:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,
 	                                      ^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#794: FILE: init/do_mounts.c:350:
+	if (do_mount_root("/dev/root","cramfs",root_mountflags,
+	    root_mount_data) == 0)

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#806: FILE: init/do_mounts.c:387:
+	if (ROOT_DEV == MKDEV(0, 0)) {

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#809: FILE: init/do_mounts.c:390:
+		printk (KERN_ERR "VFS: Unable to mount linear cramfs root.\n");

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#809: FILE: init/do_mounts.c:390:
+		printk (KERN_ERR "VFS: Unable to mount linear cramfs root.\n");

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422017.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 34 errors, 43 warnings, 26 checks, 674 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000422017.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
