WARNING:TYPO_SPELLING: 'direcotry' may be misspelled - perhaps 'directory'?
#16: 
Subject: [RFC Aufs2 #2 18/28] aufs direcotry
                                   ^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#41: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#46: FILE: fs/aufs/dir.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:CAMELCASE: Avoid CamelCase: <AuDebugOn>
#64: FILE: fs/aufs/dir.c:19:
+	AuDebugOn(!S_ISDIR(dir->i_mode) || !S_ISDIR(h_dir->i_mode));

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <IMustLock>
#210: FILE: fs/aufs/dir.c:165:
+	IMustLock(inode);

WARNING:CONST_STRUCT: struct file_operations should normally be const
#215: FILE: fs/aufs/dir.c:170:
+		struct file_operations *fop;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#252: FILE: fs/aufs/dir.c:207:
+	struct mutex *h_mtx;

CHECK:BRACES: braces {} should be used on all arms of this statement
#294: FILE: fs/aufs/dir.c:249:
+	if (file)
[...]
+	else {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#296: FILE: fs/aufs/dir.c:251:
+	else {

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_FLUSH>
#323: FILE: fs/aufs/dir.c:278:
+	si_read_lock(sb, AuLock_FLUSH);

CHECK:CAMELCASE: Avoid CamelCase: <AuLock_IR>
#328: FILE: fs/aufs/dir.c:283:
+	di_downgrade_lock(dentry, AuLock_IR);

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_WHONLY>
#345: FILE: fs/aufs/dir.c:300:
+#define AuTestEmpty_WHONLY	1

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_CALLED>
#346: FILE: fs/aufs/dir.c:301:
+#define AuTestEmpty_CALLED	(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#346: FILE: fs/aufs/dir.c:301:
+#define AuTestEmpty_CALLED	(1 << 2)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:CAMELCASE: Avoid CamelCase: <AuTestEmpty_##name>
#347: FILE: fs/aufs/dir.c:302:
+#define au_ftest_testempty(flags, name)	((flags) & AuTestEmpty_##name)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#369: FILE: fs/aufs/dir.c:324:
+	if (name[0] == '.'
+	    && (namelen == 1 || (name[1] == '.' && namelen == 2)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#373: FILE: fs/aufs/dir.c:328:
+	if (namelen <= AUFS_WH_PFX_LEN
+	    || memcmp(name, AUFS_WH_PFX, AUFS_WH_PFX_LEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#375: FILE: fs/aufs/dir.c:330:
+		if (au_ftest_testempty(arg->flags, WHONLY)
+		    && !au_nhash_test_known_wh(arg->whlist, name, namelen))

CHECK:CAMELCASE: Avoid CamelCase: <AuTraceErr>
#388: FILE: fs/aufs/dir.c:343:
+	AuTraceErr(arg->err);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#406: FILE: fs/aufs/dir.c:361:
+	if (!au_opt_test(au_mntflags(dentry->d_sb), UDBA_NONE)
+	    && !h_file->f_dentry->d_inode->i_nlink)

CHECK:CAMELCASE: Avoid CamelCase: <AuLsc_I_CHILD>
#445: FILE: fs/aufs/dir.c:400:
+	mutex_lock_nested(&h_inode->i_mutex, AuLsc_I_CHILD);

CHECK:BRACES: braces {} should be used on all arms of this statement
#448: FILE: fs/aufs/dir.c:403:
+	if (!err)
[...]
+	else {
[...]

CHECK:BRACES: Unbalanced braces around else statement
#450: FILE: fs/aufs/dir.c:405:
+	else {

WARNING:CONST_STRUCT: struct file_operations should normally be const
#530: FILE: fs/aufs/dir.c:485:
+struct file_operations aufs_dir_fop = {

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#545: FILE: fs/aufs/dir.h:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_DEBLK>
#570: FILE: fs/aufs/dir.h:26:
+#define AuSize_DEBLK	512

CHECK:CAMELCASE: Avoid CamelCase: <AuSize_NHASH>
#571: FILE: fs/aufs/dir.h:27:
+#define AuSize_NHASH	32

WARNING:NEW_TYPEDEFS: do not add new typedefs
#573: FILE: fs/aufs/dir.h:29:
+typedef char au_vdir_deblk_t[AuSize_DEBLK];

WARNING:CONST_STRUCT: struct file_operations should normally be const
#623: FILE: fs/aufs/dir.h:79:
+extern struct file_operations aufs_dir_fop;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#655: FILE: fs/aufs/vdir.c:1:
+/*

CHECK:CAMELCASE: Avoid CamelCase: <AuDbg>
#811: FILE: fs/aufs/vdir.c:157:
+		AuDbg("%.*s\n", str->len, str->name);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#970: FILE: fs/aufs/vdir.c:316:
+
+}

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#983: FILE: fs/aufs/vdir.c:329:
+	AuDebugOn(room->p < p.p || deblk_end.p <= room->p
+		  || !is_deblk_end(room, &deblk_end));

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#1026: FILE: fs/aufs/vdir.c:372:
+	struct mutex *mtx;

CHECK:CAMELCASE: Avoid CamelCase: <AuFillVdir_CALLED>
#1055: FILE: fs/aufs/vdir.c:401:
+#define AuFillVdir_CALLED	1

CHECK:CAMELCASE: Avoid CamelCase: <AuFillVdir_##name>
#1056: FILE: fs/aufs/vdir.c:402:
+#define au_ftest_fillvdir(flags, name)	((flags) & AuFillVdir_##name)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1086: FILE: fs/aufs/vdir.c:432:
+	if (namelen <= AUFS_WH_PFX_LEN
+	    || memcmp(name, AUFS_WH_PFX, AUFS_WH_PFX_LEN)) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1090: FILE: fs/aufs/vdir.c:436:
+			if (test_known(delist++, name, namelen)
+			    || au_nhash_test_known_wh(arg->whlist + bindex,

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1210: FILE: fs/aufs/vdir.c:556:
+	} else if (may_read
+		   && (inode->i_version != vdir->vd_version

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1211: FILE: fs/aufs/vdir.c:557:
+		   && (inode->i_version != vdir->vd_version
+		       || time_after(jiffies, vdir->vd_jiffy + expire))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1224: FILE: fs/aufs/vdir.c:570:
+	if (!err) {
[...]
+	} else if (allocated)
[...]

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1276: FILE: fs/aufs/vdir.c:622:
+	BUG_ON(rerr);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1292: FILE: fs/aufs/vdir.c:638:
+	if (!vdir_cache) {
[...]
+	} else if (!file->f_pos && vdir_cache->vd_version != file->f_version) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1302: FILE: fs/aufs/vdir.c:648:
+	} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#1307: FILE: fs/aufs/vdir.c:653:
+	if (!err) {
[...]
+	} else if (allocated)
[...]

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1397: FILE: fs/aufs/vdir.c:743:
+		deblk_end.deblk
+			= vdir_cache->vd_deblk[vdir_cache->vd_last.i] + 1;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1420: FILE: fs/aufs/vdir.c:766:
+			vdir_cache->vd_last.p.deblk
+				= vdir_cache->vd_deblk[vdir_cache->vd_last.i];

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154200.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 10 warnings, 37 checks, 1373 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000154200.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
