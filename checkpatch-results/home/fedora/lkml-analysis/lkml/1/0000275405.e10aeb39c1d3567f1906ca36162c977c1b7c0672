WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#44: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#49: FILE: fs/ubifs/xattr.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

ERROR:FSF_MAILING_ADDRESS: Do not include the paragraph about writing to the Free Software Foundation's mailing address from the sample GPL notice. The FSF has changed addresses in the past, and may do so again. Linux already includes a copy of the GPL.
#64: FILE: fs/ubifs/xattr.c:16:
+ * this program; if not, write to the Free Software Foundation, Inc., 51$

Kernel maintainers reject new instances of the GPL boilerplate paragraph
directing people to write to the FSF for a copy of the GPL, since the
FSF has moved in the past and may do so again.
So do not write paragraphs about writing to the Free Software Foundation's
mailing address.

See: https://lore.kernel.org/lkml/20131006222342.GT19510@leaf/

WARNING:CONST_STRUCT: struct inode_operations should normally be const
#126: FILE: fs/ubifs/xattr.c:78:
+static struct inode_operations none_inode_operations;

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:CONST_STRUCT: struct address_space_operations should normally be const
#127: FILE: fs/ubifs/xattr.c:79:
+static struct address_space_operations none_address_operations;

WARNING:CONST_STRUCT: struct file_operations should normally be const
#128: FILE: fs/ubifs/xattr.c:80:
+static struct file_operations none_file_operations;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRWXUGO' are not preferred. Consider using octal permissions '0777'.
#167: FILE: fs/ubifs/xattr.c:119:
+	inode = ubifs_new_inode(c, host, S_IFREG | S_IRWXUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#215: FILE: fs/ubifs/xattr.c:167:
+	iput(inode);
 	^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#226: FILE: fs/ubifs/xattr.c:178:
+	iput(inode);
 	^^^^

CHECK:BRACES: braces {} should be used on all arms of this statement
#315: FILE: fs/ubifs/xattr.c:267:
+	if (!strncmp(nm->name, XATTR_TRUSTED_PREFIX,
[...]
+	} else if (!strncmp(nm->name, XATTR_USER_PREFIX,
[...]
+	} else if (!strncmp(nm->name, XATTR_SECURITY_PREFIX,
[...]
+	} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#330: FILE: fs/ubifs/xattr.c:282:
+	} else

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#396: FILE: fs/ubifs/xattr.c:348:
+	iput(inode);
 	^^^^

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#463: FILE: fs/ubifs/xattr.c:415:
+	iput(inode);
 	^^^^

WARNING:LIKELY_MISUSE: nested (un)?likely() calls, IS_ERR already uses unlikely() internally
#504: FILE: fs/ubifs/xattr.c:456:
+		if (unlikely(IS_ERR(xent))) {

WARNING:TYPO_SPELLING: 'iput' may be misspelled - perhaps 'input'?
#625: FILE: fs/ubifs/xattr.c:577:
+	iput(inode);
 	^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275405.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 12 warnings, 2 checks, 582 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000275405.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
