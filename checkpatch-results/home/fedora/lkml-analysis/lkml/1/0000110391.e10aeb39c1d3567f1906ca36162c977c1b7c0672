WARNING:TYPO_SPELLING: 'shoudl' may be misspelled - perhaps 'should'?
#94: 
> slightly different). But that's broken: it shoudl be enforcing that
                                             ^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#211: FILE: drivers/char/tpm/tpm.h:285:
+extern ssize_t tpm_getcap(struct device *, __be32, cap_t *, const char *);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct device *' should also have an identifier name
#211: FILE: drivers/char/tpm/tpm.h:285:
+extern ssize_t tpm_getcap(struct device *, __be32, cap_t *, const char *);

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

WARNING:FUNCTION_ARGUMENTS: function definition argument '__be32' should also have an identifier name
#211: FILE: drivers/char/tpm/tpm.h:285:
+extern ssize_t tpm_getcap(struct device *, __be32, cap_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'cap_t *' should also have an identifier name
#211: FILE: drivers/char/tpm/tpm.h:285:
+extern ssize_t tpm_getcap(struct device *, __be32, cap_t *, const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#211: FILE: drivers/char/tpm/tpm.h:285:
+extern ssize_t tpm_getcap(struct device *, __be32, cap_t *, const char *);

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'chip->manufacturer_id != ITPM_ID'
#233: FILE: drivers/char/tpm/tpm_tis.c:298:
+		if (((status & TPM_STS_DATA_EXPECT) == 0) &&
+		     (chip->manufacturer_id != ITPM_ID)) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#234: FILE: drivers/char/tpm/tpm_tis.c:299:
+		if (((status & TPM_STS_DATA_EXPECT) == 0) &&
+		     (chip->manufacturer_id != ITPM_ID)) {

ERROR:TRAILING_WHITESPACE: trailing whitespace
#253: FILE: drivers/char/tpm/tpm_tis.c:590:
+^I$

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:TRAILING_WHITESPACE: trailing whitespace
#255: FILE: drivers/char/tpm/tpm_tis.c:592:
+^I$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 5 warnings, 3 checks, 104 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000110391.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
