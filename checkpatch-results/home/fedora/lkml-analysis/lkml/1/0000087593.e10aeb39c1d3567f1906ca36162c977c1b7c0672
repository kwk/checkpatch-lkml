WARNING:LINE_SPACING: Missing a blank line after declarations
#121: FILE: kernel/power/main.c:237:
+	int error = pm_start_workqueue();
+	if (error)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#249: FILE: include/linux/pm.h:423:
+	spinlock_t		lock;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#280: FILE: drivers/base/power/runtime.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#281: FILE: drivers/base/power/runtime.c:2:
+ * drivers/base/power/runtime.c - Helper functions for device run-time PM

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#338: FILE: drivers/base/power/runtime.c:59:
+	else if (atomic_read(&dev->power.usage_count) > 0
+	    || dev->power.disable_depth > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#339: FILE: drivers/base/power/runtime.c:60:
+	    || dev->power.disable_depth > 0
+	    || dev->power.runtime_status != RPM_ACTIVE)

WARNING:SUSPECT_CODE_INDENT: suspect code indent for conditional statements (8, 24)
#413: FILE: drivers/base/power/runtime.c:134:
+	if (dev->power.request_pending && dev->power.request == RPM_REQ_RESUME)
+			return -EAGAIN;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#422: FILE: drivers/base/power/runtime.c:143:
+	else if (dev->power.runtime_status == RPM_RESUMING
+	    || dev->power.disable_depth > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#423: FILE: drivers/base/power/runtime.c:144:
+	    || dev->power.disable_depth > 0
+	    || atomic_read(&dev->power.usage_count) > 0)

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#462: FILE: drivers/base/power/runtime.c:183:
+		retval = -ENOSYS;

ENOSYS means that a nonexistent system call was called.
Earlier, it was wrongly used for things like invalid operations on
otherwise valid syscalls.  This should be avoided in new code.

See: https://lore.kernel.org/lkml/5eb299021dec23c1a48fa7d9f2c8b794e967766d.1408730669.git.luto@amacapital.net/

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#555: FILE: drivers/base/power/runtime.c:276:
+	if (dev->power.runtime_status == RPM_RESUMING
+	    || dev->power.runtime_status == RPM_SUSPENDING) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#570: FILE: drivers/base/power/runtime.c:291:
+			if (dev->power.runtime_status != RPM_RESUMING
+			    && dev->power.runtime_status != RPM_SUSPENDING)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#599: FILE: drivers/base/power/runtime.c:320:
+		if (!parent->power.disable_depth
+		    && !parent->power.ignore_children) {

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#621: FILE: drivers/base/power/runtime.c:342:
+		retval = -ENOSYS;

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#723: FILE: drivers/base/power/runtime.c:444:
+	else if (atomic_read(&dev->power.usage_count) > 0
+	    || dev->power.disable_depth > 0

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#724: FILE: drivers/base/power/runtime.c:445:
+	    || dev->power.disable_depth > 0
+	    || dev->power.runtime_status == RPM_SUSPENDED

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#725: FILE: drivers/base/power/runtime.c:446:
+	    || dev->power.runtime_status == RPM_SUSPENDED
+	    || dev->power.runtime_status == RPM_SUSPENDING)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#781: FILE: drivers/base/power/runtime.c:502:
+	else if (atomic_read(&dev->power.usage_count) > 0
+	    || dev->power.disable_depth > 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#879: FILE: drivers/base/power/runtime.c:600:
+	else if (atomic_read(&dev->power.usage_count) > 0
+	    || dev->power.disable_depth > 0)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1046: FILE: drivers/base/power/runtime.c:767:
+		if (!parent->power.disable_depth
+		    && !parent->power.ignore_children

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1047: FILE: drivers/base/power/runtime.c:768:
+		    && !parent->power.ignore_children
+		    && parent->power.runtime_status != RPM_ACTIVE) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1124: FILE: drivers/base/power/runtime.c:845:
+	if (check_resume && dev->power.request_pending
+	    && dev->power.request == RPM_REQ_RESUME) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1153: FILE: drivers/base/power/runtime.c:874:
+	if (dev->power.runtime_status == RPM_SUSPENDING
+	    || dev->power.runtime_status == RPM_RESUMING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1154: FILE: drivers/base/power/runtime.c:875:
+	    || dev->power.runtime_status == RPM_RESUMING
+	    || dev->power.idle_notification) {

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1162: FILE: drivers/base/power/runtime.c:883:
+			if (dev->power.runtime_status != RPM_SUSPENDING
+			    && dev->power.runtime_status != RPM_RESUMING

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1163: FILE: drivers/base/power/runtime.c:884:
+			    && dev->power.runtime_status != RPM_RESUMING
+			    && !dev->power.idle_notification)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1207: FILE: drivers/base/power/runtime.c:928:
+	setup_timer(&dev->power.suspend_timer, pm_suspend_timer_fn,
+			(unsigned long)dev);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1229: FILE: include/linux/pm_runtime.h:1:
+/*

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1247: FILE: include/linux/pm_runtime.h:19:
+extern int pm_runtime_idle(struct device *dev);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1248: FILE: include/linux/pm_runtime.h:20:
+extern int pm_runtime_suspend(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1249: FILE: include/linux/pm_runtime.h:21:
+extern int pm_runtime_resume(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1250: FILE: include/linux/pm_runtime.h:22:
+extern int pm_request_idle(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1251: FILE: include/linux/pm_runtime.h:23:
+extern int pm_schedule_suspend(struct device *dev, unsigned int delay);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1252: FILE: include/linux/pm_runtime.h:24:
+extern int pm_request_resume(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1253: FILE: include/linux/pm_runtime.h:25:
+extern int __pm_runtime_get(struct device *dev, bool sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1254: FILE: include/linux/pm_runtime.h:26:
+extern int __pm_runtime_put(struct device *dev, bool sync);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1255: FILE: include/linux/pm_runtime.h:27:
+extern int __pm_runtime_set_status(struct device *dev, unsigned int status);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1256: FILE: include/linux/pm_runtime.h:28:
+extern void pm_runtime_enable(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1257: FILE: include/linux/pm_runtime.h:29:
+extern int __pm_runtime_disable(struct device *dev, bool check_resume);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1262: FILE: include/linux/pm_runtime.h:34:
+	return dev->power.ignore_children
+		|| !atomic_read(&dev->power.child_count);

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1282: FILE: include/linux/pm_runtime.h:54:
+static inline int pm_runtime_idle(struct device *dev) { return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1283: FILE: include/linux/pm_runtime.h:55:
+static inline int pm_runtime_suspend(struct device *dev) { return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1285: FILE: include/linux/pm_runtime.h:57:
+static inline int pm_request_idle(struct device *dev) { return -ENOSYS; }

WARNING:ENOSYS: ENOSYS means 'invalid syscall nr' and nothing else
#1288: FILE: include/linux/pm_runtime.h:60:
+	return -ENOSYS;

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#1290: FILE: include/linux/pm_runtime.h:62:
+}
+static inline int pm_request_resume(struct device *dev) { return 0; }

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1294: FILE: include/linux/pm_runtime.h:66:
+static inline int __pm_runtime_set_status(struct device *dev,
+					    unsigned int status) { return 0; }

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1464: FILE: drivers/base/power/power.h:1:
+#ifdef CONFIG_PM_RUNTIME

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1466: FILE: drivers/base/power/power.h:3:
+extern void pm_runtime_init(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1467: FILE: drivers/base/power/power.h:4:
+extern void pm_runtime_remove(struct device *dev);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#1482: FILE: drivers/base/power/power.h:26:
+extern void device_pm_init(struct device *dev);

WARNING:TYPO_SPELLING: 'funcions' may be misspelled - perhaps 'functions'?
#1712: FILE: Documentation/power/runtime_pm.txt:193:
+    - used for disabling the helper funcions (they work normally if this is
                                     ^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#1718: FILE: Documentation/power/runtime_pm.txt:199:
+      as described in Section 2), so the helper funtions will not work until
                                                 ^^^^^^^^

WARNING:TYPO_SPELLING: 'funtions' may be misspelled - perhaps 'functions'?
#1863: FILE: Documentation/power/runtime_pm.txt:344:
+majority of the run-time PM helper funtions described in Section 4 will return
                                    ^^^^^^^^

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000087593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 15 warnings, 38 checks, 1768 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000087593.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
