WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#52: 
> 	static const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {

WARNING:BAD_SIGN_OFF: Duplicate signature
#219: 
Signed-off-by: Ingo Molnar <mingo@elte.hu>

The signed-off-by line does not fall in line with the standards
specified by the community.

See: https://www.kernel.org/doc/html/latest/process/submitting-patches.html#developer-s-certificate-of-origin-1-1

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#283: FILE: include/linux/cpumask.h:276:
+	cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)];
 	                            ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:NR_CPUS: usage of NR_CPUS is often wrong - consider using cpu_possible(), num_possible_cpus(), for_each_possible_cpu(), etc
#283: FILE: include/linux/cpumask.h:276:
+	cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)];

WARNING:LINE_SPACING: Missing a blank line after declarations
#288: FILE: include/linux/cpumask.h:281:
+	const unsigned long *p = cpu_bit_bitmap[1 + cpu % BITS_PER_LONG];
+	p -= cpu / BITS_PER_LONG;

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:BRACKET_SPACE: space prohibited before open square bracket '['
#351: FILE: kernel/cpu.c:474:
+#define MASK_DECLARE_1(x)	[x+1][0] = 1UL << (x)

Whitespace before opening bracket '[' is prohibited.
There are some exceptions:

1. With a type on the left::

    int [] a;

2. At the beginning of a line for slice initialisers::

    [0...10] = 5,

3. Inside a curly brace::

    = { [0...10] = 5 }

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#351: FILE: kernel/cpu.c:474:
+#define MASK_DECLARE_1(x)	[x+1][0] = 1UL << (x)
                          	  ^

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#351: FILE: kernel/cpu.c:474:
+#define MASK_DECLARE_1(x)	[x+1][0] = 1UL << (x)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'x' may be better as '(x)' to avoid precedence issues
#351: FILE: kernel/cpu.c:474:
+#define MASK_DECLARE_1(x)	[x+1][0] = 1UL << (x)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#352: FILE: kernel/cpu.c:475:
+#define MASK_DECLARE_2(x)	MASK_DECLARE_1(x), MASK_DECLARE_1(x+1)
                          	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#352: FILE: kernel/cpu.c:475:
+#define MASK_DECLARE_2(x)	MASK_DECLARE_1(x), MASK_DECLARE_1(x+1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#352: FILE: kernel/cpu.c:475:
+#define MASK_DECLARE_2(x)	MASK_DECLARE_1(x), MASK_DECLARE_1(x+1)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#353: FILE: kernel/cpu.c:476:
+#define MASK_DECLARE_4(x)	MASK_DECLARE_2(x), MASK_DECLARE_2(x+2)
                          	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#353: FILE: kernel/cpu.c:476:
+#define MASK_DECLARE_4(x)	MASK_DECLARE_2(x), MASK_DECLARE_2(x+2)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#353: FILE: kernel/cpu.c:476:
+#define MASK_DECLARE_4(x)	MASK_DECLARE_2(x), MASK_DECLARE_2(x+2)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#354: FILE: kernel/cpu.c:477:
+#define MASK_DECLARE_8(x)	MASK_DECLARE_4(x), MASK_DECLARE_4(x+4)
                          	                                   ^

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#354: FILE: kernel/cpu.c:477:
+#define MASK_DECLARE_8(x)	MASK_DECLARE_4(x), MASK_DECLARE_4(x+4)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'x' - possible side-effects?
#354: FILE: kernel/cpu.c:477:
+#define MASK_DECLARE_8(x)	MASK_DECLARE_4(x), MASK_DECLARE_4(x+4)

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#431: FILE: kernel/cpu.c:479:
+const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {
                                                 ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#432: FILE: kernel/cpu.c:480:
+const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(NR_CPUS)] = {
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 4 errors, 4 warnings, 12 checks, 203 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000248524.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
