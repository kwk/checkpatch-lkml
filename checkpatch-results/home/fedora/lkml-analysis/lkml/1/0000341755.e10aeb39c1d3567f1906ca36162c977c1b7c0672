WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'M:' before 'P:'
#71: FILE: MAINTAINERS:3510:
+P:	Alex Dubov
+M:	oakad@yahoo.com

WARNING:MAINTAINERS_STYLE: Misordered MAINTAINERS entry - list 'S:' before 'W:'
#74: FILE: MAINTAINERS:3513:
+W:	http://tifmxx.berlios.de/
+S:	Maintained

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#114: FILE: drivers/memstick/Kconfig:5:
+menuconfig MEMSTICK
+	tristate "Sony MemoryStick card support (EXPERIMENTAL)"
+	help
+	  Sony MemoryStick is a proprietary storage/extension card protocol.
+
+	  If you want MemoryStick support, you should say Y here and also
+	  to the specific driver for your MMC interface.
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#124: FILE: drivers/memstick/Kconfig:15:
+config MEMSTICK_DEBUG
+	bool "MemoryStick debugging"
+	help
+	  This is an option for use by developers; most people should
+	  say N here.  This enables MemoryStick core and driver debugging.
+
+

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#208: FILE: drivers/memstick/core/memstick.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->type == card->id.type'
#242: FILE: drivers/memstick/core/memstick.c:35:
+		if ((id->type == card->id.type)
+		    && (id->category == card->id.category)
+		    && (id->class == card->id.class))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->category == card->id.category'
#242: FILE: drivers/memstick/core/memstick.c:35:
+		if ((id->type == card->id.type)
+		    && (id->category == card->id.category)
+		    && (id->class == card->id.class))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'id->class == card->id.class'
#242: FILE: drivers/memstick/core/memstick.c:35:
+		if ((id->type == card->id.type)
+		    && (id->category == card->id.category)
+		    && (id->class == card->id.class))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#243: FILE: drivers/memstick/core/memstick.c:36:
+		if ((id->type == card->id.type)
+		    && (id->category == card->id.category)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#244: FILE: drivers/memstick/core/memstick.c:37:
+		    && (id->category == card->id.category)
+		    && (id->class == card->id.class))

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#371: FILE: drivers/memstick/core/memstick.c:164:
+#define MEMSTICK_ATTR_RO(name) __ATTR(name, S_IRUGO, name##_show, NULL)

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#505: FILE: drivers/memstick/core/memstick.c:298:
+		return 0;
+	} else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#529: FILE: drivers/memstick/core/memstick.c:322:
+		return 0;
+	} else {

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*card)...) over kzalloc(sizeof(struct memstick_dev)...)
#547: FILE: drivers/memstick/core/memstick.c:340:
+	struct memstick_dev *card = kzalloc(sizeof(struct memstick_dev),

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

WARNING:MSLEEP: msleep < 20ms can sleep for up to 20ms; see Documentation/timers/timers-howto.rst
#593: FILE: drivers/memstick/core/memstick.c:386:
+	msleep(1);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'memstick_check', this function's name, in a string
#602: FILE: drivers/memstick/core/memstick.c:395:
+	dev_dbg(host->cdev.dev, "memstick_check started\n");

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#619: FILE: drivers/memstick/core/memstick.c:412:
+			if (memstick_set_rw_addr(host->card)
+			    || !memstick_dev_match(host->card, &card->id)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#620: FILE: drivers/memstick/core/memstick.c:413:
+			    || !memstick_dev_match(host->card, &card->id)
+			    || !(host->card->check(host->card))) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#626: FILE: drivers/memstick/core/memstick.c:419:
+		if (!host->card) {
[...]
+		} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Unbalanced braces around else statement
#632: FILE: drivers/memstick/core/memstick.c:425:
+		} else

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'memstick_check', this function's name, in a string
#640: FILE: drivers/memstick/core/memstick.c:433:
+	dev_dbg(host->cdev.dev, "memstick_check finished\n");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*host)...) over kzalloc(sizeof(struct memstick_host)...)
#648: FILE: drivers/memstick/core/memstick.c:441:
+	host = kzalloc(sizeof(struct memstick_host) + extra, GFP_KERNEL);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#728: FILE: drivers/memstick/core/memstick.c:521:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#771: FILE: drivers/memstick/core/mspro_block.c:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#828: FILE: drivers/memstick/core/mspro_block.c:58:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#836: FILE: drivers/memstick/core/mspro_block.c:66:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#869: FILE: drivers/memstick/core/mspro_block.c:99:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#882: FILE: drivers/memstick/core/mspro_block.c:112:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#891: FILE: drivers/memstick/core/mspro_block.c:121:
+} __attribute__((packed));

CHECK:UNCOMMENTED_DEFINITION: spinlock_t definition without comment
#898: FILE: drivers/memstick/core/mspro_block.c:128:
+	spinlock_t            q_lock;

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#931: FILE: drivers/memstick/core/mspro_block.c:161:
+static int mspro_block_bd_open(struct inode *inode, struct file *filp)
                                                                  ^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#952: FILE: drivers/memstick/core/mspro_block.c:182:
+
+

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#975: FILE: drivers/memstick/core/mspro_block.c:205:
+static int mspro_block_bd_release(struct inode *inode, struct file *filp)
                                                                     ^^^^

WARNING:LINE_SPACING: Missing a blank line after declarations
#978: FILE: drivers/memstick/core/mspro_block.c:208:
+	struct gendisk *disk = inode->i_bdev->bd_disk;
+	return mspro_block_disk_release(disk);

WARNING:CONST_STRUCT: struct block_device_operations should normally be const
#993: FILE: drivers/memstick/core/mspro_block.c:223:
+static struct block_device_operations ms_block_bdops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:SPLIT_STRING: quoted string split across lines
#1073: FILE: drivers/memstick/core/mspro_block.c:303:
+	rc += snprintf(buffer + rc, PAGE_SIZE - rc, "assembly date: "
+		       "%d %04u-%02u-%02u %02u:%02u:%02u\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:SPLIT_STRING: quoted string split across lines
#1084: FILE: drivers/memstick/core/mspro_block.c:314:
+	rc += snprintf(buffer + rc, PAGE_SIZE - rc, "assembly model code: "
+		       "%02x%02x%02x\n", x_sys->assembly_model_code[0],

CHECK:BRACES: braces {} should be used on all arms of this statement
#1291: FILE: drivers/memstick/core/mspro_block.c:521:
+	if (!((*mrq)->data[0] & MEMSTICK_INT_CED))
[...]
+	else {
[...]

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1293: FILE: drivers/memstick/core/mspro_block.c:523:
+		return 0;
+	else {

CHECK:BRACES: Unbalanced braces around else statement
#1293: FILE: drivers/memstick/core/mspro_block.c:523:
+	else {

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#1345: FILE: drivers/memstick/core/mspro_block.c:575:
+					return -EAGAIN;
+				} else {

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1347: FILE: drivers/memstick/core/mspro_block.c:577:
+					card->next_request
+						= h_mspro_block_wait_for_ced;

Assignment operators should not be written at the start of a
line but should follow the operand at the previous line.

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around msb->req_sg[msb->current_seg]
#1364: FILE: drivers/memstick/core/mspro_block.c:594:
+			    nth_page(sg_page(&(msb->req_sg[msb->current_seg])),

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#1386: FILE: drivers/memstick/core/mspro_block.c:616:
+		BUG();

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

CHECK:BRACES: braces {} should be used on all arms of this statement
#1407: FILE: drivers/memstick/core/mspro_block.c:637:
+		if (msb->seg_count) {
[...]
+		} else
[...]

WARNING:SPLIT_STRING: quoted string split across lines
#1428: FILE: drivers/memstick/core/mspro_block.c:658:
+			dev_dbg(&card->dev, "data transfer: cmd %x, "
+				"lba %x, count %x\n", msb->transfer_cmd,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'card->current_mrq.tpc == MSPRO_CMD_STOP'
#1440: FILE: drivers/memstick/core/mspro_block.c:670:
+			if (rc || (card->current_mrq.tpc == MSPRO_CMD_STOP)) {

CHECK:BRACES: braces {} should be used on all arms of this statement
#1440: FILE: drivers/memstick/core/mspro_block.c:670:
+			if (rc || (card->current_mrq.tpc == MSPRO_CMD_STOP)) {
[...]
+			} else
[...]

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'msb->data_dir == READ'
#1448: FILE: drivers/memstick/core/mspro_block.c:678:
+				if (page_count && (msb->data_dir == READ))

CHECK:BRACES: Unbalanced braces around else statement
#1452: FILE: drivers/memstick/core/mspro_block.c:682:
+			} else

CHECK:BRACES: Unbalanced braces around else statement
#1454: FILE: drivers/memstick/core/mspro_block.c:684:
+		} else

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1473: FILE: drivers/memstick/core/mspro_block.c:703:
+
+}

CHECK:BRACES: braces {} should be used on all arms of this statement
#1502: FILE: drivers/memstick/core/mspro_block.c:732:
+		if (!req) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#1508: FILE: drivers/memstick/core/mspro_block.c:738:
+		} else

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#1531: FILE: drivers/memstick/core/mspro_block.c:761:
+			while (end_that_request_chunk(req, -ENODEV,
[...]
+						      << 9)) {}

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#1632: FILE: drivers/memstick/core/mspro_block.c:862:
+		printk(KERN_ERR "%s: unrecognized device signature %x\n",

CHECK:BRACES: braces {} should be used on all arms of this statement
#1638: FILE: drivers/memstick/core/mspro_block.c:868:
+	if (attr->count > MSPRO_BLOCK_MAX_ATTRIBUTES) {
[...]
+	} else
[...]

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1639: FILE: drivers/memstick/core/mspro_block.c:869:
+		printk(KERN_WARNING "%s: way too many attribute entries\n",

CHECK:BRACES: Unbalanced braces around else statement
#1642: FILE: drivers/memstick/core/mspro_block.c:872:
+	} else

WARNING:ALLOC_WITH_MULTIPLY: Prefer kcalloc over kzalloc with multiply
#1645: FILE: drivers/memstick/core/mspro_block.c:875:
+	msb->attributes = kzalloc(msb->attr_count
+				  * sizeof(struct mspro_sys_attr),
+				  GFP_KERNEL);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:SPLIT_STRING: quoted string split across lines
#1666: FILE: drivers/memstick/core/mspro_block.c:896:
+		dev_dbg(&card->dev, "adding attribute %d: id %x, address %x, "
+			"size %x\n", cnt, attr->entries[cnt].id, addr, rc);

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#1679: FILE: drivers/memstick/core/mspro_block.c:909:
+		msb->attributes[cnt].sys_attr
+			= (struct device_attribute){

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUGO' are not preferred. Consider using octal permissions '0444'.
#1682: FILE: drivers/memstick/core/mspro_block.c:912:
+					.mode = S_IRUGO,

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#1685: FILE: drivers/memstick/core/mspro_block.c:915:
+				.show = mspro_block_attr_show(

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#1702: FILE: drivers/memstick/core/mspro_block.c:932:
+		     == be32_to_cpu(param.data_address))
+		    && (((addr + rc - 1) / msb->page_size)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#1783: FILE: drivers/memstick/core/mspro_block.c:1013:
+			printk(KERN_WARNING "%s: could not switch to "

WARNING:SPLIT_STRING: quoted string split across lines
#1784: FILE: drivers/memstick/core/mspro_block.c:1014:
+			printk(KERN_WARNING "%s: could not switch to "
+			       "parallel interface\n", card->dev.bus_id);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1811: FILE: drivers/memstick/core/mspro_block.c:1041:
+
+}

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around host->cdev.dev->dma_mask
#1823: FILE: drivers/memstick/core/mspro_block.c:1053:
+	if (host->cdev.dev->dma_mask && *(host->cdev.dev->dma_mask))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->cdev.dev->dma_mask'
#1823: FILE: drivers/memstick/core/mspro_block.c:1053:
+	if (host->cdev.dev->dma_mask && *(host->cdev.dev->dma_mask))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around host->cdev.dev->dma_mask
#1824: FILE: drivers/memstick/core/mspro_block.c:1054:
+		limit = *(host->cdev.dev->dma_mask);

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#1901: FILE: drivers/memstick/core/mspro_block.c:1131:
+				    DRIVER_NAME"d");

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*msb)...) over kzalloc(sizeof(struct mspro_block_data)...)
#1943: FILE: drivers/memstick/core/mspro_block.c:1173:
+	msb = kzalloc(sizeof(struct mspro_block_data), GFP_KERNEL);

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*new_msb)...) over kzalloc(sizeof(struct mspro_block_data)...)
#2040: FILE: drivers/memstick/core/mspro_block.c:1270:
+	new_msb = kzalloc(sizeof(struct mspro_block_data), GFP_KERNEL);

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2053: FILE: drivers/memstick/core/mspro_block.c:1283:
+		if (new_msb->attributes[cnt].id == MSPRO_BLOCK_ID_SYSINFO
+		    && cnt < msb->attr_count

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2054: FILE: drivers/memstick/core/mspro_block.c:1284:
+		    && cnt < msb->attr_count
+		    && msb->attributes[cnt].id == MSPRO_BLOCK_ID_SYSINFO) {

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#2062: FILE: drivers/memstick/core/mspro_block.c:1292:
+						    card, DRIVER_NAME"d");

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2100: FILE: drivers/memstick/core/mspro_block.c:1330:
+
+

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2119: FILE: drivers/memstick/core/mspro_block.c:1349:
+		printk(KERN_ERR DRIVER_NAME ": failed to register "

WARNING:SPLIT_STRING: quoted string split across lines
#2120: FILE: drivers/memstick/core/mspro_block.c:1350:
+		printk(KERN_ERR DRIVER_NAME ": failed to register "
+		       "major %d, error %d\n", major, rc);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2197: FILE: drivers/memstick/host/tifm_ms.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/io.h> instead of <asm/io.h>
#2215: FILE: drivers/memstick/host/tifm_ms.c:19:
+#include <asm/io.h>

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->req->data_dir == READ'
#2386: FILE: drivers/memstick/host/tifm_ms.c:190:
+	if ((host->req->data_dir == READ)
+	    && (host->block_pos == host->req->sg.length))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->block_pos == host->req->sg.length'
#2386: FILE: drivers/memstick/host/tifm_ms.c:190:
+	if ((host->req->data_dir == READ)
+	    && (host->block_pos == host->req->sg.length))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2387: FILE: drivers/memstick/host/tifm_ms.c:191:
+	if ((host->req->data_dir == READ)
+	    && (host->block_pos == host->req->sg.length))

CHECK:BRACES: braces {} should be used on all arms of this statement
#2407: FILE: drivers/memstick/host/tifm_ms.c:211:
+	if (host->req->io_type == MEMSTICK_IO_SG) {
[...]
+	} else if (host->req->io_type == MEMSTICK_IO_VAL) {
[...]
+	} else
[...]

CHECK:BRACES: braces {} should be used on all arms of this statement
#2408: FILE: drivers/memstick/host/tifm_ms.c:212:
+		if (!host->no_dma) {
[...]
+		} else
[...]

WARNING:CONSTANT_COMPARISON: Comparisons should place the constant on the right side of the test
#2409: FILE: drivers/memstick/host/tifm_ms.c:213:
+			if (1 != tifm_map_sg(sock, &host->req->sg, 1,

Comparisons with a constant or upper case identifier on the left
side of the test should be avoided.

CHECK:BRACES: Unbalanced braces around else statement
#2417: FILE: drivers/memstick/host/tifm_ms.c:221:
+		} else

CHECK:BRACES: braces {} should be used on all arms of this statement
#2452: FILE: drivers/memstick/host/tifm_ms.c:256:
+		if (host->req->data_dir == WRITE) {
[...]
+		} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2484: FILE: drivers/memstick/host/tifm_ms.c:288:
+		} else

CHECK:BRACES: Unbalanced braces around else statement
#2492: FILE: drivers/memstick/host/tifm_ms.c:296:
+	} else

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2493: FILE: drivers/memstick/host/tifm_ms.c:297:
+		BUG();

CHECK:ASSIGNMENT_CONTINUATIONS: Assignment operator '=' should be on the previous line
#2533: FILE: drivers/memstick/host/tifm_ms.c:337:
+				*(int *)(data + rc)
+					= __raw_readl(sock->addr

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->req->io_type == MEMSTICK_IO_SG'
#2563: FILE: drivers/memstick/host/tifm_ms.c:367:
+		if ((host->req->io_type == MEMSTICK_IO_SG)
+		    && !(host->cmd_flags & FIFO_READY))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2564: FILE: drivers/memstick/host/tifm_ms.c:368:
+		if ((host->req->io_type == MEMSTICK_IO_SG)
+		    && !(host->cmd_flags & FIFO_READY))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2567: FILE: drivers/memstick/host/tifm_ms.c:371:
+		if (host->req->need_card_int
+		    && !(host->cmd_flags & CARD_READY))

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2602: FILE: drivers/memstick/host/tifm_ms.c:406:
+
+

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2635: FILE: drivers/memstick/host/tifm_ms.c:439:
+
+	}

WARNING:RETURN_VOID: void function return statements are not generally useful
#2647: FILE: drivers/memstick/host/tifm_ms.c:451:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2658: FILE: drivers/memstick/host/tifm_ms.c:462:
+		printk(KERN_ERR "%s : unfinished request detected\n",

WARNING:RETURN_VOID: void function return statements are not generally useful
#2681: FILE: drivers/memstick/host/tifm_ms.c:485:
+	return;
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2721: FILE: drivers/memstick/host/tifm_ms.c:525:
+	printk(KERN_ERR

WARNING:SPLIT_STRING: quoted string split across lines
#2723: FILE: drivers/memstick/host/tifm_ms.c:527:
+	       "%s : card failed to respond for a long period of time "
+	       "(%x, %x)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2753: FILE: drivers/memstick/host/tifm_ms.c:557:
+		printk(KERN_WARNING "%s : card gone, unexpectedly\n",

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'host->req->io_type == MEMSTICK_IO_SG'
#2799: FILE: drivers/memstick/host/tifm_ms.c:603:
+		if ((host->req->io_type == MEMSTICK_IO_SG) && !host->no_dma)

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fm->num_sockets == 4'
#2897: FILE: drivers/misc/tifm_7xx1.c:313:
+	if (((fm->num_sockets == 4) && (sock->socket_id == 2))
+	    || ((fm->num_sockets == 2) && (sock->socket_id == 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sock->socket_id == 2'
#2897: FILE: drivers/misc/tifm_7xx1.c:313:
+	if (((fm->num_sockets == 4) && (sock->socket_id == 2))
+	    || ((fm->num_sockets == 2) && (sock->socket_id == 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'fm->num_sockets == 2'
#2897: FILE: drivers/misc/tifm_7xx1.c:313:
+	if (((fm->num_sockets == 4) && (sock->socket_id == 2))
+	    || ((fm->num_sockets == 2) && (sock->socket_id == 0)))

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'sock->socket_id == 0'
#2897: FILE: drivers/misc/tifm_7xx1.c:313:
+	if (((fm->num_sockets == 4) && (sock->socket_id == 2))
+	    || ((fm->num_sockets == 2) && (sock->socket_id == 0)))

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#2898: FILE: drivers/misc/tifm_7xx1.c:314:
+	if (((fm->num_sockets == 4) && (sock->socket_id == 2))
+	    || ((fm->num_sockets == 2) && (sock->socket_id == 0)))

WARNING:LINE_SPACING: Missing a blank line after declarations
#2934: FILE: drivers/misc/tifm_core.c:290:
+	struct tifm_adapter *fm = dev_get_drvdata(sock->dev.parent);
+	return fm->has_ms_pif(fm, sock);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2947: FILE: include/linux/memstick.h:1:
+/*

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2988: FILE: include/linux/memstick.h:42:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#2995: FILE: include/linux/memstick.h:49:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3008: FILE: include/linux/memstick.h:62:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3023: FILE: include/linux/memstick.h:77:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3031: FILE: include/linux/memstick.h:85:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3038: FILE: include/linux/memstick.h:92:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3045: FILE: include/linux/memstick.h:99:
+} __attribute__((packed));

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __packed over __attribute__((packed))
#3052: FILE: include/linux/memstick.h:106:
+} __attribute__((packed));

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#3088: FILE: include/linux/memstick.h:142:
+/*
+	MSPRO_CMD_RESET

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

CHECK:LINE_SPACING: Please don't use multiple blank lines
#3125: FILE: include/linux/memstick.h:179:
+
+

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#3169: FILE: include/linux/memstick.h:223:
+	struct mutex        lock;

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 1 errors, 57 warnings, 66 checks, 3110 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000341755.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
