WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#62: FILE: fs/proc/kimgcore.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#63: FILE: fs/proc/kimgcore.c:2:
+ * fs/proc/kimgcore.c - Interface for accessing the loaded

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:INCLUDE_LINUX: Use #include <linux/uaccess.h> instead of <asm/uaccess.h>
#82: FILE: fs/proc/kimgcore.c:21:
+#include <asm/uaccess.h>

CHECK:BRACES: braces {} should be used on all arms of this statement
#111: FILE: fs/proc/kimgcore.c:50:
+			if (PageHighMem(page)) {
[...]
+			} else
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#113: FILE: fs/proc/kimgcore.c:52:
+				memcpy(buf_page, vaddr+offinp, trunk);
 				                      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:BRACES: Unbalanced braces around else statement
#116: FILE: fs/proc/kimgcore.c:55:
+			} else

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#159: FILE: fs/proc/kimgcore.c:98:
+				memcpy(vaddr+offinp, buf_page, trunk);
 				            ^

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Ehdr>
#239: FILE: fs/proc/kimgcore.c:178:
+	Elf64_Ehdr *ehdr;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Phdr>
#240: FILE: fs/proc/kimgcore.c:179:
+	Elf64_Phdr *phdr;

CHECK:CAMELCASE: Avoid CamelCase: <Elf64_Off>
#242: FILE: fs/proc/kimgcore.c:181:
+	Elf64_Off off;

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#256: FILE: fs/proc/kimgcore.c:195:
+	memset(ehdr->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                    ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#256: FILE: fs/proc/kimgcore.c:195:
+	memset(ehdr->e_ident+EI_PAD, 0, EI_NIDENT-EI_PAD);
 	                                         ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#276: FILE: fs/proc/kimgcore.c:215:
+		phdr->p_flags = PF_R|PF_W|PF_X;
 		                    ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#276: FILE: fs/proc/kimgcore.c:215:
+		phdr->p_flags = PF_R|PF_W|PF_X;
 		                         ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#308: FILE: fs/proc/kimgcore.c:247:
+static int open_kimgcore(struct inode *inode, struct file *filp)
                                                            ^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:LINE_SPACING: Missing a blank line after declarations
#311: FILE: fs/proc/kimgcore.c:250:
+	int ret;
+	if (xchg(&kexec_lock, 1))

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#326: FILE: fs/proc/kimgcore.c:265:
+static int release_kimgcore(struct inode *inode, struct file *filp)
                                                               ^^^^

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'image' may be better as '(image)' to avoid precedence issues
#353: FILE: include/linux/kexec.h:107:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr + 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'ptr' - possible side-effects?
#353: FILE: include/linux/kexec.h:107:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr + 1)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'entry' - possible side-effects?
#353: FILE: include/linux/kexec.h:107:
+#define for_each_kimage_entry(image, ptr, entry) \
+	for (ptr = &image->head; (entry = *ptr) && !(entry & IND_DONE); \
+		ptr = (entry & IND_INDIRECTION)? \
+			phys_to_virt((entry & PAGE_MASK)): ptr + 1)

ERROR:SPACING: spaces required around that '?' (ctx:VxE)
#355: FILE: include/linux/kexec.h:109:
+		ptr = (entry & IND_INDIRECTION)? \
 		                               ^

ERROR:SPACING: spaces required around that ':' (ctx:VxW)
#356: FILE: include/linux/kexec.h:110:
+			phys_to_virt((entry & PAGE_MASK)): ptr + 1)
 			                                 ^

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IRUSR' are not preferred. Consider using octal permissions '0400'.
#393: FILE: fs/proc/proc_misc.c:1039:
+	proc_root_kimgcore = create_proc_entry("kimgcore", S_IRUSR, NULL);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344263.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 7 warnings, 14 checks, 337 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000344263.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
