WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#43: 
All module_init()s are called asynchronously from init/main.c:do_initcalls()

CHECK:UNCOMMENTED_DEFINITION: struct mutex definition without comment
#105: FILE: drivers/mtd/devices/block2mtd.c:384:
+	struct mutex lock;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "add_device"
#113: FILE: drivers/mtd/devices/block2mtd.c:392:
+	if (add_device(params->name, params->erase_size) != NULL)

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:LONG_LINE: line length of 106 exceeds 100 columns
#123: FILE: drivers/mtd/devices/block2mtd.c:402:
+	printk(KERN_WARNING "block2mtd: spawned kernel thread for async waiting on '%s'\n", params->name);

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#123: FILE: drivers/mtd/devices/block2mtd.c:402:
+	printk(KERN_WARNING "block2mtd: spawned kernel thread for async waiting on '%s'\n", params->name);

ERROR:SPACING: spaces required around that '=' (ctx:VxV)
#125: FILE: drivers/mtd/devices/block2mtd.c:404:
+	for (i=0; i<20 && params->attached == 0; i++) {
 	      ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

ERROR:SPACING: spaces required around that '<' (ctx:VxV)
#125: FILE: drivers/mtd/devices/block2mtd.c:404:
+	for (i=0; i<20 && params->attached == 0; i++) {
 	           ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#127: FILE: drivers/mtd/devices/block2mtd.c:406:
+		int attached = 0;
+		msleep(1000);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#134: FILE: drivers/mtd/devices/block2mtd.c:413:
+		/* HACK: Call add_device from async_schedule()ed task
+		   so mounting rootfs will wait for ubi scan to complete */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#134: FILE: drivers/mtd/devices/block2mtd.c:413:
+		   so mounting rootfs will wait for ubi scan to complete */

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "add_device"
#162: FILE: drivers/mtd/devices/block2mtd.c:459:
+	if (add_device(name, erase_size) != NULL)

CHECK:ALLOC_SIZEOF_STRUCT: Prefer kzalloc(sizeof(*params)...) over kzalloc(sizeof(struct block2mtd_setupasync_params)...)
#165: FILE: drivers/mtd/devices/block2mtd.c:462:
+	params = kzalloc(sizeof(struct block2mtd_setupasync_params), GFP_KERNEL);

The allocation style is bad.  In general for family of
allocation functions using sizeof() to get memory size,
constructs like::

  p = alloc(sizeof(struct foo), ...)

should be::

  p = alloc(sizeof(*p), ...)

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#allocating-memory

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#169: FILE: drivers/mtd/devices/block2mtd.c:466:
+	params->name = kmalloc(strlen(name)+1, GFP_KERNEL);
 	                                   ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#176: FILE: drivers/mtd/devices/block2mtd.c:473:
+	memcpy(params->name, name, strlen(name)+1);
 	                                       ^

CHECK:BRACES: Blank lines aren't necessary after an open brace '{'
#229: FILE: drivers/mtd/ubi/build.c:128:
+{
+

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#230: FILE: drivers/mtd/ubi/build.c:129:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#239: FILE: drivers/mtd/ubi/build.c:138:
+	printk(KERN_WARNING "ubi_notify_add(%p [%s])\n", mtd, mtd->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ubi_notify_add', this function's name, in a string
#239: FILE: drivers/mtd/ubi/build.c:138:
+	printk(KERN_WARNING "ubi_notify_add(%p [%s])\n", mtd, mtd->name);

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:BRACES: braces {} are not necessary for single statement blocks
#241: FILE: drivers/mtd/ubi/build.c:140:
+	if (err < 0) {
+		printk(KERN_WARNING "ubi_attach failed on '%s': %d\n", mtd->name, err);
+	}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#242: FILE: drivers/mtd/ubi/build.c:141:
+		printk(KERN_WARNING "ubi_attach failed on '%s': %d\n", mtd->name, err);

WARNING:LONG_LINE: line length of 102 exceeds 100 columns
#265: FILE: drivers/mtd/ubi/build.c:1177:
+	printk(KERN_WARNING "ubi_init_attach_mtd(%s): waiting async for device to appear\n", p->name);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#265: FILE: drivers/mtd/ubi/build.c:1177:
+	printk(KERN_WARNING "ubi_init_attach_mtd(%s): waiting async for device to appear\n", p->name);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ubi_init_attach_mtd', this function's name, in a string
#265: FILE: drivers/mtd/ubi/build.c:1177:
+	printk(KERN_WARNING "ubi_init_attach_mtd(%s): waiting async for device to appear\n", p->name);

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#300: FILE: drivers/mtd/ubi/build.c:1244:
+#if 0

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095812.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 2 errors, 14 warnings, 8 checks, 237 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000095812.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
