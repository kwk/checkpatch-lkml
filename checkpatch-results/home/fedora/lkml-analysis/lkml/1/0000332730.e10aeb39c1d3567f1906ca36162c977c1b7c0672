WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#34: 
The attached patch adds a generic intermediary (FS-Cache) by which filesystems

WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#267: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

ERROR:TRAILING_WHITESPACE: trailing whitespace
#1144: FILE: Documentation/filesystems/caching/fscache.txt:242:
+^Icat /proc/fs/fscache/histogram $

Trailing whitespace should always be removed.
Some editors highlight the trailing whitespace and cause visual
distractions when editing files.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1312: FILE: Documentation/filesystems/caching/netfs-api.txt:109:
+Each index entry consists of a key of indeterminate length plus some auxilliary
                                                                      ^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:TYPO_SPELLING: 'chosed' may be misspelled - perhaps 'chose'?
#1401: FILE: Documentation/filesystems/caching/netfs-api.txt:198:
+     cache in the parent's list will be chosed, or failing that, the first
                                         ^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1420: FILE: Documentation/filesystems/caching/netfs-api.txt:217:
+ (6) A function to retrieve auxilliary data from the netfs [optional].
                             ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1423: FILE: Documentation/filesystems/caching/netfs-api.txt:220:
+     cookie acquisition function and the maximum length of auxilliary data that
                                                            ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1424: FILE: Documentation/filesystems/caching/netfs-api.txt:221:
+     it may provide.  It should write the auxilliary data into the given buffer
                                           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1427: FILE: Documentation/filesystems/caching/netfs-api.txt:224:
+     If this function is absent, the auxilliary data length will be set to 0.
                                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1429: FILE: Documentation/filesystems/caching/netfs-api.txt:226:
+     The length of the auxilliary data buffer may be dependent on the key
                        ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1433: FILE: Documentation/filesystems/caching/netfs-api.txt:230:
+ (7) A function to check the auxilliary data [optional].
                              ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1436: FILE: Documentation/filesystems/caching/netfs-api.txt:233:
+     this object is valid.  For instance with AFS it could check the auxilliary
                                                                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#1449: FILE: Documentation/filesystems/caching/netfs-api.txt:246:
+     This function can also be used to extract data from the auxilliary data in
                                                              ^^^^^^^^^^

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1992: FILE: fs/fscache/Kconfig:13:
+config FSCACHE_PROC
+	bool "Provide /proc interface for local caching statistics"
+	depends on FSCACHE && PROC_FS
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2060: FILE: fs/fscache/fsc-cache.c:1:
+/* FS-Cache cache handling

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#2082: FILE: fs/fscache/fsc-cache.c:23:
+static struct sysfs_ops fscache_cache_sysfs_ops = {

Using const is generally a good idea.  Checkpatch reads
a list of frequently used structs that are always or
almost always constant.

The existing structs list can be viewed from
`scripts/const_structs.checkpatch`.

See: https://lore.kernel.org/lkml/alpine.DEB.2.10.1608281509480.3321@hadrien/

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2201: FILE: fs/fscache/fsc-cache.c:142:
+	printk(KERN_NOTICE "FS-Cache: Netfs '%s' registered for caching\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2233: FILE: fs/fscache/fsc-cache.c:174:
+	printk(KERN_NOTICE "FS-Cache: Netfs '%s' unregistered from caching\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2293: FILE: fs/fscache/fsc-cache.c:234:
+	BUG_ON(!cache->ops);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2294: FILE: fs/fscache/fsc-cache.c:235:
+	BUG_ON(!ifsdef);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2308: FILE: fs/fscache/fsc-cache.c:249:
+	BUG_ON(!tagname[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2329: FILE: fs/fscache/fsc-cache.c:270:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2344: FILE: fs/fscache/fsc-cache.c:285:
+	 * list */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2350: FILE: fs/fscache/fsc-cache.c:291:
+	 * cookie as a known backing object */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2362: FILE: fs/fscache/fsc-cache.c:303:
+	printk(KERN_NOTICE "FS-Cache: Cache \"%s\" added (type %s)\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2369: FILE: fs/fscache/fsc-cache.c:310:
+	printk(KERN_ERR "FS-Cache: Cache tag '%s' already in use\n", tagname);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#2390: FILE: fs/fscache/fsc-cache.c:331:
+struct fscache_cache *fscache_select_cache_for_object(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2408: FILE: fs/fscache/fsc-cache.c:349:
+	 * cache */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2480: FILE: fs/fscache/fsc-cache.c:421:
+	printk(KERN_ERR "FS-Cache: Cache %s stopped due to I/O error\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2502: FILE: fs/fscache/fsc-cache.c:443:
+	printk(KERN_NOTICE "FS-Cache: Withdrawing cache \"%s\"\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2507: FILE: fs/fscache/fsc-cache.c:448:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2515: FILE: fs/fscache/fsc-cache.c:456:
+	 * written to disk */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2519: FILE: fs/fscache/fsc-cache.c:460:
+	 * mappings in the cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2524: FILE: fs/fscache/fsc-cache.c:465:
+	 * of */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2548: FILE: fs/fscache/fsc-cache.c:489:
+	 * and go away */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2572: FILE: fs/fscache/fsc-cookie.c:1:
+/* netfs cookie management

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2631: FILE: fs/fscache/fsc-cookie.c:60:
+	BUG_ON(!def);

CHECK:SPACING: No space is necessary after a cast
#2634: FILE: fs/fscache/fsc-cookie.c:63:
+	       parent ? (char *) parent->def->name : "<no-parent>",

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2647: FILE: fs/fscache/fsc-cookie.c:76:
+	BUG_ON(!def->get_key);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2648: FILE: fs/fscache/fsc-cookie.c:77:
+	BUG_ON(!def->name[0]);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2650: FILE: fs/fscache/fsc-cookie.c:79:
+	BUG_ON(def->type == FSCACHE_COOKIE_TYPE_INDEX &&

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2686: FILE: fs/fscache/fsc-cookie.c:115:
+	 * multiple caches */

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u64' over 'uint64_t'
#2712: FILE: fs/fscache/fsc-cookie.c:141:
+	uint64_t i_size;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2720: FILE: fs/fscache/fsc-cookie.c:149:
+	 * exist, if not there'll be nothing to search */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2746: FILE: fs/fscache/fsc-cookie.c:175:
+	 * chain */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2812: FILE: fs/fscache/fsc-cookie.c:241:
+	 * objects at this stage, but we sort that out later) */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2833: FILE: fs/fscache/fsc-cookie.c:262:
+	 * attached to the cookie */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2873: FILE: fs/fscache/fsc-cookie.c:302:
+	 * want one */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2939: FILE: fs/fscache/fsc-cookie.c:368:
+	BUG_ON(!cookie->def->get_aux);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2978: FILE: fs/fscache/fsc-cookie.c:407:
+		printk(KERN_ERR "FS-Cache: Cookie '%s' still has children\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#2980: FILE: fs/fscache/fsc-cookie.c:409:
+		BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3017: FILE: fs/fscache/fsc-cookie.c:446:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3048: FILE: fs/fscache/fsc-cookie.c:477:
+		BUG_ON(!hlist_empty(&cookie->backing_objects));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3055: FILE: fs/fscache/fsc-cookie.c:484:
+		BUG_ON(atomic_read(&cookie->usage) <= 0);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3068: FILE: fs/fscache/fsc-fsdef.c:1:
+/* Filesystem index definition

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3122: FILE: fs/fscache/fsc-fsdef.c:55:
+	unsigned klen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#3135: FILE: fs/fscache/fsc-fsdef.c:68:
+ * get the auxilliary data for an FSDEF index record
            ^^^^^^^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3141: FILE: fs/fscache/fsc-fsdef.c:74:
+	unsigned dlen;

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#3154: FILE: fs/fscache/fsc-fsdef.c:87:
+ * check that the version stored in the auxilliary data is correct
                                         ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#3162: FILE: fs/fscache/fsc-fsdef.c:95:
+	uint32_t version;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3186: FILE: fs/fscache/fsc-internal.h:1:
+/* Internal definitions for FS-Cache

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#3222: FILE: fs/fscache/fsc-internal.h:37:
+extern struct fscache_cache *fscache_select_cache_for_object(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3222: FILE: fs/fscache/fsc-internal.h:37:
+extern struct fscache_cache *fscache_select_cache_for_object(

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#3222: FILE: fs/fscache/fsc-internal.h:37:
+extern struct fscache_cache *fscache_select_cache_for_object(

This warning is emitted due to any of the following reasons:

  1. Arguments for the function declaration do not follow
     the identifier name.  Example::

       void foo
       (int bar, int baz)

     This should be corrected to::

       void foo(int bar, int baz)

  2. Some arguments for the function definition do not
     have an identifier name.  Example::

       void foo(int)

     All arguments should have identifier names.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3230: FILE: fs/fscache/fsc-internal.h:45:
+extern void fscache_cookie_init_once(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct kmem_cache *' should also have an identifier name
#3230: FILE: fs/fscache/fsc-internal.h:45:
+extern void fscache_cookie_init_once(struct kmem_cache *, void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3230: FILE: fs/fscache/fsc-internal.h:45:
+extern void fscache_cookie_init_once(struct kmem_cache *, void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3231: FILE: fs/fscache/fsc-internal.h:46:
+extern void __fscache_cookie_put(struct fscache_cookie *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#3231: FILE: fs/fscache/fsc-internal.h:46:
+extern void __fscache_cookie_put(struct fscache_cookie *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3242: FILE: fs/fscache/fsc-internal.h:57:
+extern unsigned fscache_defer_lookup;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3243: FILE: fs/fscache/fsc-internal.h:58:
+extern unsigned fscache_defer_create;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3244: FILE: fs/fscache/fsc-internal.h:59:
+extern unsigned fscache_debug;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3247: FILE: fs/fscache/fsc-internal.h:62:
+extern int fscache_wait_bit(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3247: FILE: fs/fscache/fsc-internal.h:62:
+extern int fscache_wait_bit(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3248: FILE: fs/fscache/fsc-internal.h:63:
+extern int fscache_wait_bit_interruptible(void *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#3248: FILE: fs/fscache/fsc-internal.h:63:
+extern int fscache_wait_bit_interruptible(void *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3253: FILE: fs/fscache/fsc-internal.h:68:
+extern void fscache_object_state_machine(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3253: FILE: fs/fscache/fsc-internal.h:68:
+extern void fscache_object_state_machine(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3254: FILE: fs/fscache/fsc-internal.h:69:
+extern void fscache_withdrawing_object(struct fscache_cache *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cache *' should also have an identifier name
#3254: FILE: fs/fscache/fsc-internal.h:69:
+extern void fscache_withdrawing_object(struct fscache_cache *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3254: FILE: fs/fscache/fsc-internal.h:69:
+extern void fscache_withdrawing_object(struct fscache_cache *,

WARNING:LINE_SPACING: Missing a blank line after declarations
#3351: FILE: fs/fscache/fsc-internal.h:166:
+	unsigned long jif = jiffies - start_jif;
+	if (jif >= HZ)

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3361: FILE: fs/fscache/fsc-internal.h:176:
+extern int __init fscache_proc_init(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3362: FILE: fs/fscache/fsc-internal.h:177:
+extern void fscache_proc_cleanup(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3371: FILE: fs/fscache/fsc-internal.h:186:
+extern void fscache_start_operations(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3372: FILE: fs/fscache/fsc-internal.h:187:
+extern void fscache_enqueue_object(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3372: FILE: fs/fscache/fsc-internal.h:187:
+extern void fscache_enqueue_object(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3373: FILE: fs/fscache/fsc-internal.h:188:
+extern void fscache_enqueue_dependents(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3373: FILE: fs/fscache/fsc-internal.h:188:
+extern void fscache_enqueue_dependents(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3374: FILE: fs/fscache/fsc-internal.h:189:
+extern void fscache_dequeue_object(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3374: FILE: fs/fscache/fsc-internal.h:189:
+extern void fscache_dequeue_object(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3375: FILE: fs/fscache/fsc-internal.h:190:
+extern void fscache_boost_object(struct fscache_object *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_object *' should also have an identifier name
#3375: FILE: fs/fscache/fsc-internal.h:190:
+extern void fscache_boost_object(struct fscache_object *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3376: FILE: fs/fscache/fsc-internal.h:191:
+extern int fscache_init_threads(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3377: FILE: fs/fscache/fsc-internal.h:192:
+extern void fscache_kill_threads(void);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3385: FILE: fs/fscache/fsc-internal.h:200:
+				       unsigned event)

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3397: FILE: fs/fscache/fsc-internal.h:212:
+	BUG_ON(atomic_read(&cookie->usage) <= 0);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_dbg([subsystem]dev, ... then dev_dbg(dev, ... then pr_debug(...  to printk(KERN_DEBUG ...
#3428: FILE: fs/fscache/fsc-internal.h:243:
+	printk(KERN_DEBUG "[%-6.6s] "FMT"\n", current->comm, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3428: FILE: fs/fscache/fsc-internal.h:243:
+	printk(KERN_DEBUG "[%-6.6s] "FMT"\n", current->comm, ##__VA_ARGS__)

Concatenated elements should have a space in between.
Example::

  printk(KERN_INFO"bar");

should be::

  printk(KERN_INFO "bar");

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(1, 2) over __attribute__((format(printf, 1, 2)))
#3431: FILE: fs/fscache/fsc-internal.h:246:
+static inline __attribute__((format(printf, 1, 2)))

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3436: FILE: fs/fscache/fsc-internal.h:251:
+#define kenter(FMT, ...) dbgprintk("==> %s("FMT")", __FUNCTION__, ##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3436: FILE: fs/fscache/fsc-internal.h:251:
+#define kenter(FMT, ...) dbgprintk("==> %s("FMT")", __FUNCTION__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3437: FILE: fs/fscache/fsc-internal.h:252:
+#define kleave(FMT, ...) dbgprintk("<== %s()"FMT"", __FUNCTION__, ##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3437: FILE: fs/fscache/fsc-internal.h:252:
+#define kleave(FMT, ...) dbgprintk("<== %s()"FMT"", __FUNCTION__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3467: FILE: fs/fscache/fsc-internal.h:282:
+#define _enter(FMT, ...) _dbprintk("==> %s("FMT")", __FUNCTION__, ##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3467: FILE: fs/fscache/fsc-internal.h:282:
+#define _enter(FMT, ...) _dbprintk("==> %s("FMT")", __FUNCTION__, ##__VA_ARGS__)

CHECK:CONCATENATED_STRING: Concatenated strings should use spaces between elements
#3468: FILE: fs/fscache/fsc-internal.h:283:
+#define _leave(FMT, ...) _dbprintk("<== %s()"FMT"", __FUNCTION__, ##__VA_ARGS__)

WARNING:USE_FUNC: __func__ should be used instead of gcc specific __FUNCTION__
#3468: FILE: fs/fscache/fsc-internal.h:283:
+#define _leave(FMT, ...) _dbprintk("<== %s()"FMT"", __FUNCTION__, ##__VA_ARGS__)

WARNING:IF_1: Consider removing the #if 1 and its #endif
#3501: FILE: fs/fscache/fsc-internal.h:316:
+#if 1 /* defined(__KDEBUGALL) */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3506: FILE: fs/fscache/fsc-internal.h:321:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3507: FILE: fs/fscache/fsc-internal.h:322:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3508: FILE: fs/fscache/fsc-internal.h:323:
+		BUG();							\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#3512: FILE: fs/fscache/fsc-internal.h:327:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#3512: FILE: fs/fscache/fsc-internal.h:327:
+#define ASSERTCMP(X, OP, Y)						\
+do {									\
+	if (unlikely(!((X) OP (Y)))) {					\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3514: FILE: fs/fscache/fsc-internal.h:329:
+	if (unlikely(!((X) OP (Y)))) {					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3515: FILE: fs/fscache/fsc-internal.h:330:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3516: FILE: fs/fscache/fsc-internal.h:331:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3517: FILE: fs/fscache/fsc-internal.h:332:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3519: FILE: fs/fscache/fsc-internal.h:334:
+		BUG();							\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3526: FILE: fs/fscache/fsc-internal.h:341:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3527: FILE: fs/fscache/fsc-internal.h:342:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3528: FILE: fs/fscache/fsc-internal.h:343:
+		BUG();							\

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'X' - possible side-effects?
#3532: FILE: fs/fscache/fsc-internal.h:347:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'Y' - possible side-effects?
#3532: FILE: fs/fscache/fsc-internal.h:347:
+#define ASSERTIFCMP(C, X, OP, Y)					\
+do {									\
+	if (unlikely((C) && !((X) OP (Y)))) {				\
+		printk(KERN_ERR "\n");					\
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\
+		       (unsigned long)(X), (unsigned long)(Y));		\
+		BUG();							\
+	}								\
+} while (0)

WARNING:SPACING: space prohibited between function name and open parenthesis '('
#3534: FILE: fs/fscache/fsc-internal.h:349:
+	if (unlikely((C) && !((X) OP (Y)))) {				\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3535: FILE: fs/fscache/fsc-internal.h:350:
+		printk(KERN_ERR "\n");					\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3536: FILE: fs/fscache/fsc-internal.h:351:
+		printk(KERN_ERR "FS-Cache: Assertion failed\n");	\

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#3537: FILE: fs/fscache/fsc-internal.h:352:
+		printk(KERN_ERR "%lx " #OP " %lx is false\n",		\

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3539: FILE: fs/fscache/fsc-internal.h:354:
+		BUG();							\

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3568: FILE: fs/fscache/fsc-main.c:1:
+/* General filesystem local caching manager

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3591: FILE: fs/fscache/fsc-main.c:24:
+unsigned fscache_defer_lookup = 1;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#3593: FILE: fs/fscache/fsc-main.c:26:
+		   S_IWUSR | S_IRUGO);

Permission bits in the octal form are more readable and easier to
understand than their symbolic counterparts because many command-line
tools use this notation. Experienced kernel developers have been using
these traditional Unix permission bits for decades and so they find it
easier to understand the octal notation than the symbolic macros.
For example, it is harder to read S_IWUSR|S_IRUGO than 0644, which
obscures the developer's intent rather than clarifying it.

See: https://lore.kernel.org/lkml/CA+55aFw5v23T-zvDZp-MmD_EYxF8WbafwwB59934FV7g21uMGQ@mail.gmail.com/

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3597: FILE: fs/fscache/fsc-main.c:30:
+unsigned fscache_defer_create = 1;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#3599: FILE: fs/fscache/fsc-main.c:32:
+		   S_IWUSR | S_IRUGO);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#3603: FILE: fs/fscache/fsc-main.c:36:
+unsigned fscache_debug;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#3605: FILE: fs/fscache/fsc-main.c:38:
+		   S_IWUSR | S_IRUGO);

WARNING:CONST_STRUCT: struct sysfs_ops should normally be const
#3609: FILE: fs/fscache/fsc-main.c:42:
+static struct sysfs_ops fscache_sysfs_ops = {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3643: FILE: fs/fscache/fsc-main.c:76:
+		printk(KERN_NOTICE

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3653: FILE: fs/fscache/fsc-main.c:86:
+	printk(KERN_NOTICE "FS-Cache: Loaded\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#3679: FILE: fs/fscache/fsc-main.c:112:
+	printk(KERN_NOTICE "FS-Cache: Unloaded\n");

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3707: FILE: fs/fscache/fsc-manage.c:1:
+/* Manage cache objects

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3731: FILE: fs/fscache/fsc-manage.c:25:
+#if 0

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3757: FILE: fs/fscache/fsc-manage.c:51:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3812: FILE: fs/fscache/fsc-manage.c:106:
+			BUG();

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3834: FILE: fs/fscache/fsc-manage.c:128:
+		BUG();

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#3852: FILE: fs/fscache/fsc-manage.c:146:
+#if 0

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3869: FILE: fs/fscache/fsc-manage.c:163:
+	BUG_ON(cookie->def->type == FSCACHE_COOKIE_TYPE_INDEX);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#3926: FILE: fs/fscache/fsc-manage.c:220:
+	BUG_ON(cookie->def->type == FSCACHE_COOKIE_TYPE_INDEX);

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3970: FILE: fs/fscache/fsc-object.c:1:
+/* FS-Cache object state machine handler

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "object"
#4018: FILE: fs/fscache/fsc-object.c:49:
+	ASSERT(object != NULL);

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:INDENTED_LABEL: labels should not be indented
#4067: FILE: fs/fscache/fsc-object.c:98:
+	dying:

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4130: FILE: fs/fscache/fsc-object.c:161:
+		printk(KERN_ERR "FS-Cache:"

WARNING:SPLIT_STRING: quoted string split across lines
#4131: FILE: fs/fscache/fsc-object.c:162:
+		printk(KERN_ERR "FS-Cache:"
+		       " Unexpected event in dead state %lx\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4133: FILE: fs/fscache/fsc-object.c:164:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4136: FILE: fs/fscache/fsc-object.c:167:
+		printk(KERN_ERR "FS-Cache: Unknown object state %u\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4138: FILE: fs/fscache/fsc-object.c:169:
+		BUG();

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#4208: FILE: fs/fscache/fsc-object.c:239:
+	printk(KERN_ERR "FS-Cache:"

WARNING:SPLIT_STRING: quoted string split across lines
#4209: FILE: fs/fscache/fsc-object.c:240:
+	printk(KERN_ERR "FS-Cache:"
+	       " Unsupported event %lx [mask %lx] in state %s\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4212: FILE: fs/fscache/fsc-object.c:243:
+	BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "object->cookie"
#4228: FILE: fs/fscache/fsc-object.c:259:
+	ASSERT(object->cookie != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "object->cookie->parent"
#4229: FILE: fs/fscache/fsc-object.c:260:
+	ASSERT(object->cookie->parent != NULL);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "parent"
#4294: FILE: fs/fscache/fsc-object.c:325:
+	ASSERT(parent != NULL);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4339: FILE: fs/fscache/fsc-object.c:370:
+		 * and read requests to begin returning ENODATA */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4378: FILE: fs/fscache/fsc-object.c:409:
+	 * result, in which case there may be data available */

WARNING:MEMORY_BARRIER: memory barrier without comment
#4398: FILE: fs/fscache/fsc-object.c:429:
+		smp_wmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4498: FILE: fs/fscache/fsc-object.c:529:
+		 * from the object pointer */

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#4559: FILE: fs/fscache/fsc-page.c:1:
+/* Cache page management and data I/O routines

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#4629: FILE: fs/fscache/fsc-page.c:71:
+		BUG();

WARNING:LINE_SPACING: Missing a blank line after declarations
#4672: FILE: fs/fscache/fsc-page.c:114:
+		static bool once_only;
+		if (!once_only) {

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#4782: FILE: fs/fscache/fsc-page.c:224:
+static struct fscache_retrieval *fscache_alloc_retrieval(

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4822: FILE: fs/fscache/fsc-page.c:264:
+	 * upon for lookup completion */

WARNING:MEMORY_BARRIER: memory barrier without comment
#4842: FILE: fs/fscache/fsc-page.c:284:
+	smp_rmb();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#4901: FILE: fs/fscache/fsc-page.c:343:
+	 * read because we've encountered a cache read failure */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#4967: FILE: fs/fscache/fsc-page.c:409:
+				  unsigned *nr_pages,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5009: FILE: fs/fscache/fsc-page.c:451:
+	 * read because we've encountered a cache read failure */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5145: FILE: fs/fscache/fsc-page.c:587:
+	unsigned n;

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5194: FILE: fs/fscache/fsc-page.c:636:
+	 * write */

CHECK:SPACING: No space is necessary after a cast
#5241: FILE: fs/fscache/fsc-page.c:683:
+	_enter("%p,%x,", cookie, (u32) page->flags);

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5274: FILE: fs/fscache/fsc-page.c:716:
+	 * object */

CHECK:SPACING: No space is necessary after a cast
#5277: FILE: fs/fscache/fsc-page.c:719:
+	_debug("store limit %llx", (unsigned long long) object->store_limit);

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#5290: FILE: fs/fscache/fsc-page.c:732:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5293: FILE: fs/fscache/fsc-page.c:735:
+	 * writers after exclusive ops */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#5376: FILE: fs/fscache/fsc-page.c:818:
+	 * uncached here; this deals with synchronisation vs withdrawal */

ERROR:INITIALISED_STATIC: do not initialise statics to false
#5414: FILE: fs/fscache/fsc-page.c:856:
+			static bool once_only = false;

Static variables should not be initialized explicitly to zero.
Your compiler (or rather your loader) automatically does
it for you.

WARNING:LINE_SPACING: Missing a blank line after declarations
#5415: FILE: fs/fscache/fsc-page.c:857:
+			static bool once_only = false;
+			if (!once_only) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#5417: FILE: fs/fscache/fsc-page.c:859:
+				printk(KERN_WARNING "FS-Cache:"

WARNING:SPLIT_STRING: quoted string split across lines
#5418: FILE: fs/fscache/fsc-page.c:860:
+				printk(KERN_WARNING "FS-Cache:"
+				       " Cookie type %s marked page %lx"

WARNING:SPLIT_STRING: quoted string split across lines
#5419: FILE: fs/fscache/fsc-page.c:861:
+				       " Cookie type %s marked page %lx"
+				       " multiple times\n",

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5437: FILE: fs/fscache/fsc-proc.c:1:
+/* FS-Cache statistics viewing interface

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5455: FILE: fs/fscache/fsc-proc.c:19:
+	unsigned			nlines;

CHECK:SPACING: No space is necessary after a cast
#5521: FILE: fs/fscache/fsc-proc.c:85:
+#define FSC_DESC(SELECT, N) ((void *) (unsigned long) (((SELECT) << 16) | (N)))

CHECK:SPACING: No space is necessary after a cast
#5545: FILE: fs/fscache/fsc-proc.c:109:
+	p->data = (void *) &fscache_stats;

CHECK:SPACING: No space is necessary after a cast
#5552: FILE: fs/fscache/fsc-proc.c:116:
+	p->data = (void *) &fscache_pool;

CHECK:SPACING: No space is necessary after a cast
#5561: FILE: fs/fscache/fsc-proc.c:125:
+	p->data = (void *) &fscache_histogram;

CHECK:SPACING: No space is necessary after a cast
#5610: FILE: fs/fscache/fsc-proc.c:174:
+		m->private = (void *) proc;

CHECK:SPACING: No space is necessary after a cast
#5622: FILE: fs/fscache/fsc-proc.c:186:
+	return (void *)(unsigned long) *_pos;

CHECK:SPACING: No space is necessary after a cast
#5633: FILE: fs/fscache/fsc-proc.c:197:
+	return *pos > proc->nlines ? NULL : (void *)(unsigned long) *pos;

CHECK:SPACING: No space is necessary after a cast
#5650: FILE: fs/fscache/fsc-proc.c:214:
+	unsigned long line = (unsigned long) v;

WARNING:SPLIT_STRING: quoted string split across lines
#5679: FILE: fs/fscache/fsc-proc.c:243:
+		seq_printf(m, "Acquire: n=%u nul=%u noc=%u ok=%u nbf=%u"
+			   " oom=%u\n",

WARNING:SPLIT_STRING: quoted string split across lines
#5735: FILE: fs/fscache/fsc-proc.c:299:
+		seq_printf(m, "Retrvls: n=%u ok=%u wt=%u nod=%u nbf=%u"
+			   " int=%u oom=%u\n",

CHECK:SPACING: No space is necessary after a cast
#5784: FILE: fs/fscache/fsc-proc.c:348:
+	unsigned line = (unsigned long) v;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5784: FILE: fs/fscache/fsc-proc.c:348:
+	unsigned line = (unsigned long) v;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5785: FILE: fs/fscache/fsc-proc.c:349:
+	unsigned x, y;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5812: FILE: fs/fscache/fsc-proc.c:376:
+	unsigned n[5], t;

CHECK:SPACING: No space is necessary after a cast
#5814: FILE: fs/fscache/fsc-proc.c:378:
+	switch ((unsigned long) v) {

WARNING:SPLIT_STRING: quoted string split across lines
#5817: FILE: fs/fscache/fsc-proc.c:381:
+		seq_puts(m, "JIFS  SECS  OBJ INST  OP RUNS   OBJ RUNS "
+			 " RETRV DLY RETRIEVLS\n");

WARNING:SPLIT_STRING: quoted string split across lines
#5821: FILE: fs/fscache/fsc-proc.c:385:
+		seq_puts(m, "===== ===== ========= ========= ========="
+			 " ========= =========\n");

CHECK:SPACING: No space is necessary after a cast
#5824: FILE: fs/fscache/fsc-proc.c:388:
+		index = (unsigned long) v - 3;

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5847: FILE: fs/fscache/fsc-stats.c:1:
+/* FS-Cache statistics

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#5956: FILE: fs/fscache/fsc-threads.c:1:
+/* FS-Cache worker thread pool manager

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#5979: FILE: fs/fscache/fsc-threads.c:24:
+static unsigned fscache_n_threads = 21;

WARNING:SYMBOLIC_PERMS: Symbolic permissions 'S_IWUSR | S_IRUGO' are not preferred. Consider using octal permissions '0644'.
#5980: FILE: fs/fscache/fsc-threads.c:25:
+module_param_named(n_threads, fscache_n_threads, uint, S_IWUSR | S_IRUGO);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6000: FILE: fs/fscache/fsc-threads.c:45:
+	unsigned wake = 0;

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op->processor"
#6004: FILE: fs/fscache/fsc-threads.c:49:
+	ASSERT(op->processor != NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6127: FILE: fs/fscache/fsc-threads.c:172:
+static unsigned __fscache_enqueue_object(struct fscache_object *object)

WARNING:UNNECESSARY_ELSE: else is not generally useful after a break or return
#6132: FILE: fs/fscache/fsc-threads.c:177:
+		return 1;
+	} else {

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6144: FILE: fs/fscache/fsc-threads.c:189:
+	unsigned wake = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6188: FILE: fs/fscache/fsc-threads.c:233:
+	unsigned wake = 0;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6260: FILE: fs/fscache/fsc-threads.c:305:
+static void fscache_dispatch_object(unsigned thread)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6289: FILE: fs/fscache/fsc-threads.c:334:
+	 * once */

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6317: FILE: fs/fscache/fsc-threads.c:362:
+		BUG();

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6324: FILE: fs/fscache/fsc-threads.c:369:
+		 * CacheFiles */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6341: FILE: fs/fscache/fsc-threads.c:386:
+static void fscache_dispatch_operation(unsigned thread, struct list_head *queue)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6358: FILE: fs/fscache/fsc-threads.c:403:
+	 * at once */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6361: FILE: fs/fscache/fsc-threads.c:406:
+		printk(KERN_ERR "FS-Cache: OP on OBJ%x already locked\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6363: FILE: fs/fscache/fsc-threads.c:408:
+		BUG();

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "op->processor"
#6368: FILE: fs/fscache/fsc-threads.c:413:
+	ASSERT(op->processor != NULL);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6392: FILE: fs/fscache/fsc-threads.c:437:
+static void fscache_dispatch(unsigned thread, unsigned level)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6392: FILE: fs/fscache/fsc-threads.c:437:
+static void fscache_dispatch(unsigned thread, unsigned level)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6399: FILE: fs/fscache/fsc-threads.c:444:
+		 * object processing, then async ops then sync ops */

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6436: FILE: fs/fscache/fsc-threads.c:481:
+static int kfscached_type_2(unsigned thread)

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6491: FILE: fs/fscache/fsc-threads.c:536:
+static int kfscached_type_1(unsigned thread)

CHECK:SPACING: No space is necessary after a cast
#6524: FILE: fs/fscache/fsc-threads.c:569:
+	unsigned thread = (unsigned long) _thread;

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#6524: FILE: fs/fscache/fsc-threads.c:569:
+	unsigned thread = (unsigned long) _thread;

ERROR:INITIALISED_STATIC: do not initialise statics to false
#6562: FILE: fs/fscache/fsc-threads.c:607:
+	static bool inited = false;

CHECK:SPACING: No space is necessary after a cast
#6579: FILE: fs/fscache/fsc-threads.c:624:
+			t = kthread_create(kfscached, (void *) loop,

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#6595: FILE: fs/fscache/fsc-threads.c:640:
+	printk(KERN_ERR "FS-Cache: Unable to create kfscached threads (%d)\n",

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6624: FILE: fs/fscache/fsc-threads.c:669:
+	BUG_ON(!list_empty(&fscache_async_object_fifo));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6625: FILE: fs/fscache/fsc-threads.c:670:
+	BUG_ON(!list_empty(&fscache_sync_object_fifo));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6626: FILE: fs/fscache/fsc-threads.c:671:
+	BUG_ON(!list_empty(&fscache_async_op_fifo));

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#6627: FILE: fs/fscache/fsc-threads.c:672:
+	BUG_ON(!list_empty(&fscache_sync_op_fifo));

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#6638: FILE: include/linux/fscache-cache.h:1:
+/* General filesystem caching backing cache interface

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6711: FILE: include/linux/fscache-cache.h:74:
+						 * link in object->pending_ops */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6725: FILE: include/linux/fscache-cache.h:88:
+	 *   the op in a non-pool thread */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6732: FILE: include/linux/fscache-cache.h:95:
+extern void fscache_enqueue_operation(struct fscache_operation *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#6732: FILE: include/linux/fscache-cache.h:95:
+extern void fscache_enqueue_operation(struct fscache_operation *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#6733: FILE: include/linux/fscache-cache.h:96:
+extern void fscache_put_operation(struct fscache_operation *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_operation *' should also have an identifier name
#6733: FILE: include/linux/fscache-cache.h:96:
+extern void fscache_put_operation(struct fscache_operation *);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#6753: FILE: include/linux/fscache-cache.h:116:
+					      unsigned *nr_pages,

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#6829: FILE: include/linux/fscache-cache.h:192:
+	/* store the updated auxilliary data on an object */
 	                     ^^^^^^^^^^

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6833: FILE: include/linux/fscache-cache.h:196:
+	 * necessary */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6843: FILE: include/linux/fscache-cache.h:206:
+	 * i_size) have changed */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6850: FILE: include/linux/fscache-cache.h:213:
+	 * cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6854: FILE: include/linux/fscache-cache.h:217:
+	 * the cache */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6858: FILE: include/linux/fscache-cache.h:221:
+	 * it can be written directly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6862: FILE: include/linux/fscache-cache.h:225:
+	 * they can be written directly */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#6939: FILE: include/linux/fscache-cache.h:302:
+						 * (order is important - using fls) */

CHECK:MACRO_ARG_REUSE: Macro argument reuse 'obj' - possible side-effects?
#6969: FILE: include/linux/fscache-cache.h:332:
+#define fscache_object_is_active(obj)			      \
+	(!test_bit(FSCACHE_IOERROR, &(obj)->cache->flags) &&  \
+	 (obj)->state >= FSCACHE_OBJECT_AVAILABLE &&	      \
+	 (obj)->state < FSCACHE_OBJECT_DYING)

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6995: FILE: include/linux/fscache-cache.h:358:
+	object->n_ops = object->n_in_progress = object->n_exclusive = 0;

Multiple assignments on a single line makes the code unnecessarily
complicated. So on a single line assign value to a single variable
only, this makes the code more readable and helps avoid typos.

CHECK:MULTIPLE_ASSIGNMENTS: multiple assignments should be avoided
#6996: FILE: include/linux/fscache-cache.h:359:
+	object->events = object->event_mask = 0;

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7003: FILE: include/linux/fscache-cache.h:366:
+extern void fscache_object_lookup_negative(struct fscache_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7004: FILE: include/linux/fscache-cache.h:367:
+extern void fscache_obtained_object(struct fscache_object *object);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7055: FILE: include/linux/fscache-cache.h:418:
+extern void fscache_init_cache(struct fscache_cache *cache,

WARNING:PREFER_DEFINED_ATTRIBUTE_MACRO: Prefer __printf(3, 4) over __attribute__((format(printf, 3, 4)))
#7058: FILE: include/linux/fscache-cache.h:421:
+			       ...) __attribute__ ((format (printf, 3, 4)));

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7060: FILE: include/linux/fscache-cache.h:423:
+extern int fscache_add_cache(struct fscache_cache *cache,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7063: FILE: include/linux/fscache-cache.h:426:
+extern void fscache_withdraw_cache(struct fscache_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7065: FILE: include/linux/fscache-cache.h:428:
+extern void fscache_io_error(struct fscache_cache *cache);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7067: FILE: include/linux/fscache-cache.h:430:
+extern void fscache_mark_pages_cached(struct fscache_retrieval *op,

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#7077: FILE: include/linux/fscache.h:1:
+/* General filesystem caching interface

WARNING:PREFER_IS_ENABLED: Prefer IS_ENABLED(<FOO>) to CONFIG_<FOO> || CONFIG_<FOO>_MODULE
#7102: FILE: include/linux/fscache.h:26:
+#if defined(CONFIG_FSCACHE) || defined(CONFIG_FSCACHE_MODULE)

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7110: FILE: include/linux/fscache.h:34:
+
+

CHECK:LINE_SPACING: Please don't use multiple blank lines
#7134: FILE: include/linux/fscache.h:58:
+
+

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u8' over 'uint8_t'
#7163: FILE: include/linux/fscache.h:87:
+	uint8_t type;

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7173: FILE: include/linux/fscache.h:97:
+	struct fscache_cache_tag *(*select_cache)(

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#7196: FILE: include/linux/fscache.h:120:
+	/* get the auxilliary data from netfs data
 	           ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#7198: FILE: include/linux/fscache.h:122:
+	 * - should store the auxilliary data in the buffer
 	                      ^^^^^^^^^^

WARNING:TYPO_SPELLING: 'auxilliary' may be misspelled - perhaps 'auxiliary'?
#7211: FILE: include/linux/fscache.h:135:
+	 *   presented, as is the auxilliary data
 	                          ^^^^^^^^^^

CHECK:PREFER_KERNEL_TYPES: Prefer kernel type 'u32' over 'uint32_t'
#7260: FILE: include/linux/fscache.h:184:
+	uint32_t			version;	/* indexing version */

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7274: FILE: include/linux/fscache.h:198:
+extern int __fscache_register_netfs(struct fscache_netfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_netfs *' should also have an identifier name
#7274: FILE: include/linux/fscache.h:198:
+extern int __fscache_register_netfs(struct fscache_netfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7275: FILE: include/linux/fscache.h:199:
+extern void __fscache_unregister_netfs(struct fscache_netfs *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_netfs *' should also have an identifier name
#7275: FILE: include/linux/fscache.h:199:
+extern void __fscache_unregister_netfs(struct fscache_netfs *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7276: FILE: include/linux/fscache.h:200:
+extern struct fscache_cache_tag *__fscache_lookup_cache_tag(const char *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const char *' should also have an identifier name
#7276: FILE: include/linux/fscache.h:200:
+extern struct fscache_cache_tag *__fscache_lookup_cache_tag(const char *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7277: FILE: include/linux/fscache.h:201:
+extern void __fscache_release_cache_tag(struct fscache_cache_tag *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cache_tag *' should also have an identifier name
#7277: FILE: include/linux/fscache.h:201:
+extern void __fscache_release_cache_tag(struct fscache_cache_tag *);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7278: FILE: include/linux/fscache.h:202:
+extern struct fscache_cookie *__fscache_acquire_cookie(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7278: FILE: include/linux/fscache.h:202:
+extern struct fscache_cookie *__fscache_acquire_cookie(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7278: FILE: include/linux/fscache.h:202:
+extern struct fscache_cookie *__fscache_acquire_cookie(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'const struct fscache_cookie_def *' should also have an identifier name
#7278: FILE: include/linux/fscache.h:202:
+extern struct fscache_cookie *__fscache_acquire_cookie(

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7278: FILE: include/linux/fscache.h:202:
+extern struct fscache_cookie *__fscache_acquire_cookie(

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7282: FILE: include/linux/fscache.h:206:
+extern void __fscache_relinquish_cookie(struct fscache_cookie *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7282: FILE: include/linux/fscache.h:206:
+extern void __fscache_relinquish_cookie(struct fscache_cookie *, int);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'int' should also have an identifier name
#7282: FILE: include/linux/fscache.h:206:
+extern void __fscache_relinquish_cookie(struct fscache_cookie *, int);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7283: FILE: include/linux/fscache.h:207:
+extern void __fscache_update_cookie(struct fscache_cookie *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7283: FILE: include/linux/fscache.h:207:
+extern void __fscache_update_cookie(struct fscache_cookie *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7284: FILE: include/linux/fscache.h:208:
+extern int __fscache_pin_cookie(struct fscache_cookie *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7284: FILE: include/linux/fscache.h:208:
+extern int __fscache_pin_cookie(struct fscache_cookie *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7285: FILE: include/linux/fscache.h:209:
+extern void __fscache_unpin_cookie(struct fscache_cookie *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7285: FILE: include/linux/fscache.h:209:
+extern void __fscache_unpin_cookie(struct fscache_cookie *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7286: FILE: include/linux/fscache.h:210:
+extern int __fscache_attr_changed(struct fscache_cookie *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7286: FILE: include/linux/fscache.h:210:
+extern int __fscache_attr_changed(struct fscache_cookie *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7287: FILE: include/linux/fscache.h:211:
+extern int __fscache_reserve_space(struct fscache_cookie *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7287: FILE: include/linux/fscache.h:211:
+extern int __fscache_reserve_space(struct fscache_cookie *, loff_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'loff_t' should also have an identifier name
#7287: FILE: include/linux/fscache.h:211:
+extern int __fscache_reserve_space(struct fscache_cookie *, loff_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'fscache_rw_complete_t' should also have an identifier name
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#7288: FILE: include/linux/fscache.h:212:
+extern int __fscache_read_or_alloc_page(struct fscache_cookie *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct address_space *' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct list_head *' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'unsigned *' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'fscache_rw_complete_t' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#7293: FILE: include/linux/fscache.h:217:
+extern int __fscache_read_or_alloc_pages(struct fscache_cookie *,

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#7296: FILE: include/linux/fscache.h:220:
+					 unsigned *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7300: FILE: include/linux/fscache.h:224:
+extern int __fscache_alloc_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7300: FILE: include/linux/fscache.h:224:
+extern int __fscache_alloc_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#7300: FILE: include/linux/fscache.h:224:
+extern int __fscache_alloc_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#7300: FILE: include/linux/fscache.h:224:
+extern int __fscache_alloc_page(struct fscache_cookie *, struct page *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7301: FILE: include/linux/fscache.h:225:
+extern int __fscache_write_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7301: FILE: include/linux/fscache.h:225:
+extern int __fscache_write_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#7301: FILE: include/linux/fscache.h:225:
+extern int __fscache_write_page(struct fscache_cookie *, struct page *, gfp_t);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#7301: FILE: include/linux/fscache.h:225:
+extern int __fscache_write_page(struct fscache_cookie *, struct page *, gfp_t);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagevec *' should also have an identifier name
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'fscache_rw_complete_t' should also have an identifier name
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'void *' should also have an identifier name
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

WARNING:FUNCTION_ARGUMENTS: function definition argument 'gfp_t' should also have an identifier name
#7303: FILE: include/linux/fscache.h:227:
+extern int __fscache_write_pages(struct fscache_cookie *,

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7308: FILE: include/linux/fscache.h:232:
+extern void __fscache_uncache_page(struct fscache_cookie *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7308: FILE: include/linux/fscache.h:232:
+extern void __fscache_uncache_page(struct fscache_cookie *, struct page *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct page *' should also have an identifier name
#7308: FILE: include/linux/fscache.h:232:
+extern void __fscache_uncache_page(struct fscache_cookie *, struct page *);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#7309: FILE: include/linux/fscache.h:233:
+extern void __fscache_uncache_pages(struct fscache_cookie *, struct pagevec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct fscache_cookie *' should also have an identifier name
#7309: FILE: include/linux/fscache.h:233:
+extern void __fscache_uncache_pages(struct fscache_cookie *, struct pagevec *);

WARNING:FUNCTION_ARGUMENTS: function definition argument 'struct pagevec *' should also have an identifier name
#7309: FILE: include/linux/fscache.h:233:
+extern void __fscache_uncache_pages(struct fscache_cookie *, struct pagevec *);

CHECK:OPEN_ENDED_LINE: Lines should not end with a '('
#7397: FILE: include/linux/fscache.h:321:
+struct fscache_cookie *fscache_acquire_cookie(

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int *' to bare use of 'unsigned *'
#7600: FILE: include/linux/fscache.h:524:
+				unsigned *nr_pages,

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000332730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 3 errors, 250 warnings, 89 checks, 7328 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

NOTE: Whitespace errors detected.
      You may wish to use scripts/cleanpatch or scripts/cleanfile

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000332730.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
