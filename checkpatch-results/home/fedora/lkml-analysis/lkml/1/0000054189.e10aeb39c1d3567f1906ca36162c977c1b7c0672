CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#79: FILE: fs/binfmt_elf.c:42:
+elf_map(struct file *, unsigned long, struct elf_phdr *,
+				int, int, unsigned long, unsigned long);

CHECK:LINE_SPACING: Please don't use multiple blank lines
#142: FILE: fs/binfmt_elf.c:568:
 
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#152: FILE: fs/binfmt_elf.c:578:
+static int examine_fatelf(struct file *file, const char *filename, char *buf,
+		int buflen, unsigned long *offset, struct elfhdr *elf)

CHECK:SPACING: No space is necessary after a cast
#155: FILE: fs/binfmt_elf.c:581:
+	const struct Fatelf_hdr *fatelf = (struct Fatelf_hdr *) buf;

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <Fatelf_hdr>
#155: FILE: fs/binfmt_elf.c:581:
+	const struct Fatelf_hdr *fatelf = (struct Fatelf_hdr *) buf;

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:SPACING: No space is necessary after a cast
#177: FILE: fs/binfmt_elf.c:603:
+	records = (int) fatelf->num_records;  /* uint8, no byteswap needed */

CHECK:CAMELCASE: Avoid CamelCase: <Fatelf_record>
#182: FILE: fs/binfmt_elf.c:608:
+		const struct Fatelf_record *record = &fatelf->records[i];

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#194: FILE: fs/binfmt_elf.c:620:
+		if (unlikely(elf_check_arch(elf))
+		    && likely(abiok)

CHECK:LOGICAL_CONTINUATIONS: Logical continuations should be on the previous line
#195: FILE: fs/binfmt_elf.c:621:
+		    && likely(abiok)
+		    && likely(record->osabi_version == 0)) {

CHECK:SPACING: No space is necessary after a cast
#200: FILE: fs/binfmt_elf.c:626:
+			const unsigned long uloff = (unsigned long) rec_offset;

CHECK:SPACING: No space is necessary after a cast
#213: FILE: fs/binfmt_elf.c:639:
+			rc = kernel_read(file, uloff, (char *) elf,

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc != sizeof(*elf)'
#215: FILE: fs/binfmt_elf.c:641:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'rc >= 0'
#215: FILE: fs/binfmt_elf.c:641:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))

CHECK:BRACES: braces {} should be used on all arms of this statement
#215: FILE: fs/binfmt_elf.c:641:
+			if (unlikely((rc != sizeof(*elf)) && (rc >= 0)))
[...]
+			else if (likely(rc == sizeof(*elf))) {
[...]

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

CHECK:LINE_SPACING: Please don't use multiple blank lines
#229: FILE: fs/binfmt_elf.c:655:
+
+

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#368: FILE: include/linux/elf.h:40:
+  __le16 machine;      /* maps to e_machine */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#369: FILE: include/linux/elf.h:41:
+  __u8 osabi;          /* maps to e_ident[EI_OSABI] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#370: FILE: include/linux/elf.h:42:
+  __u8 osabi_version;  /* maps to e_ident[EI_ABIVERSION] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#371: FILE: include/linux/elf.h:43:
+  __u8 word_size;      /* maps to e_ident[EI_CLASS] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#372: FILE: include/linux/elf.h:44:
+  __u8 byte_order;     /* maps to e_ident[EI_DATA] */$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#373: FILE: include/linux/elf.h:45:
+  __u8 reserved0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#374: FILE: include/linux/elf.h:46:
+  __u8 reserved1;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#375: FILE: include/linux/elf.h:47:
+  __le64 offset;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#376: FILE: include/linux/elf.h:48:
+  __le64 size;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#380: FILE: include/linux/elf.h:52:
+  __le32 magic;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#381: FILE: include/linux/elf.h:53:
+  __le16 version;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#382: FILE: include/linux/elf.h:54:
+  __u8 num_records;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#383: FILE: include/linux/elf.h:55:
+  __u8 reserved0;$

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#384: FILE: include/linux/elf.h:56:
+  struct Fatelf_record records[];$

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000054189.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 14 warnings, 15 checks, 311 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000054189.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
