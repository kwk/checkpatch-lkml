WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#52: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#57: FILE: fs/ceph/file.c:1:
+

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:TYPO_SPELLING: 'acknowledgement' may be misspelled - perhaps 'acknowledgment'?
#85: FILE: fs/ceph/file.c:29:
+ * need to wait for MDS acknowledgement.
                         ^^^^^^^^^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:LINE_SPACING: Please don't use multiple blank lines
#88: FILE: fs/ceph/file.c:32:
+
+

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#102: FILE: fs/ceph/file.c:46:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#102: FILE: fs/ceph/file.c:46:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                            ^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#102: FILE: fs/ceph/file.c:46:
+	if (flags & (O_WRONLY|O_RDWR|O_CREAT|O_TRUNC))
 	                                    ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#127: FILE: fs/ceph/file.c:71:
+		dout("init_file %p %p 0%o (regular)\n", inode, file,
 		^^^^

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!cf"
#130: FILE: fs/ceph/file.c:74:
+		if (cf == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#137: FILE: fs/ceph/file.c:81:
+		BUG_ON(inode->i_fop->release != ceph_release);

BUG() or BUG_ON() should be avoided totally.
Use WARN() and WARN_ON() instead, and handle the "impossible"
error condition as gracefully as possible.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#bug-and-bug-on

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#141: FILE: fs/ceph/file.c:85:
+		dout("init_file %p %p 0%o (symlink)\n", inode, file,
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#147: FILE: fs/ceph/file.c:91:
+		dout("init_file %p %p 0%o (special)\n", inode, file,
 		^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#154: FILE: fs/ceph/file.c:98:
+		BUG_ON(inode->i_fop->release == ceph_release);

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#163: FILE: fs/ceph/file.c:107:
+ * If the filp already has private_data, that means the file was
           ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#183: FILE: fs/ceph/file.c:127:
+		dout("open file %p is already opened\n", file);
 		^^^^

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#188: FILE: fs/ceph/file.c:132:
+	flags = file->f_flags & ~(O_CREAT|O_EXCL);
 	                                 ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#192: FILE: fs/ceph/file.c:136:
+	dout("open inode %p ino %llx.%llx file %p flags %d (%d)\n", inode,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#218: FILE: fs/ceph/file.c:162:
+		dout("open %p fmode %d want %s issued %s using existing\n",
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#239: FILE: fs/ceph/file.c:183:
+	dout("open fmode %d wants %s\n", fmode, ceph_cap_string(wanted));
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#251: FILE: fs/ceph/file.c:195:
+	dout("open result=%d on %llx.%llx\n", err, ceph_vinop(inode));
 	^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#256: FILE: fs/ceph/file.c:200:
+
+

WARNING:TYPO_SPELLING: 'nd' may be misspelled - perhaps 'and'?
#270: FILE: fs/ceph/file.c:214:
+				struct nameidata *nd, int mode,
 				                  ^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#281: FILE: fs/ceph/file.c:225:
+	dout("ceph_lookup_open dentry %p '%.*s' flags %d mode 0%o\n",
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_lookup_open', this function's name, in a string
#281: FILE: fs/ceph/file.c:225:
+	dout("ceph_lookup_open dentry %p '%.*s' flags %d mode 0%o\n",

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#303: FILE: fs/ceph/file.c:247:
+	dout("ceph_lookup_open result=%p\n", dentry);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'ceph_lookup_open', this function's name, in a string
#303: FILE: fs/ceph/file.c:247:
+	dout("ceph_lookup_open result=%p\n", dentry);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#312: FILE: fs/ceph/file.c:256:
+	dout("release inode %p file %p\n", inode, file);
 	^^^^

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#333: FILE: fs/ceph/file.c:277:
+	pages = kmalloc(sizeof(*pages) * num_pages, GFP_NOFS);

Prefer kmalloc_array/kcalloc over kmalloc/kzalloc with a
sizeof multiply.

See: https://www.kernel.org/doc/html/latest/core-api/memory-allocation.html

WARNING:ALLOC_WITH_MULTIPLY: Prefer kmalloc_array over kmalloc with multiply
#376: FILE: fs/ceph/file.c:320:
+	pages = kmalloc(sizeof(*pages) * num_pages, GFP_NOFS);

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!pages[i]"
#381: FILE: fs/ceph/file.c:325:
+		if (pages[i] == NULL) {

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#402: FILE: fs/ceph/file.c:346:
+		l = min_t(int, PAGE_CACHE_SIZE-po, left);
 		                              ^

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#429: FILE: fs/ceph/file.c:373:
+		l = min_t(int, left, PAGE_CACHE_SIZE-po);
 		                                    ^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#453: FILE: fs/ceph/file.c:397:
+	dout("zero_page_vector_page %u~%u\n", off, len);
 	^^^^

WARNING:AVOID_BUG: Avoid crashing the kernel - try using WARN_ON & recovery code rather than BUG() or BUG_ON()
#454: FILE: fs/ceph/file.c:398:
+	BUG_ON(len < PAGE_CACHE_SIZE);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#458: FILE: fs/ceph/file.c:402:
+		dout("zeroing %d %p head from %d\n", i, pages[i],
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#467: FILE: fs/ceph/file.c:411:
+		dout("zeroing %d %p\n", i, pages[i]);
 		^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#475: FILE: fs/ceph/file.c:419:
+		dout("zeroing %d %p tail to %d\n", i, pages[i], (int)len);
 		^^^^

CHECK:LINE_SPACING: Please don't use multiple blank lines
#480: FILE: fs/ceph/file.c:424:
+
+

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#522: FILE: fs/ceph/file.c:466:
+	dout("striped_read %llu~%u (read %u) got %d%s%s\n", pos, left, read,
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'striped_read', this function's name, in a string
#522: FILE: fs/ceph/file.c:466:
+	dout("striped_read %llu~%u (read %u) got %d%s%s\n", pos, left, read,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#530: FILE: fs/ceph/file.c:474:
+			dout(" zero gap %llu to %llu\n", off + read, pos);
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#548: FILE: fs/ceph/file.c:492:
+			dout("zero tail\n");
 			^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#569: FILE: fs/ceph/file.c:513:
+	dout("striped_read returns %d\n", ret);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'striped_read', this function's name, in a string
#569: FILE: fs/ceph/file.c:513:
+	dout("striped_read returns %d\n", ret);

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#580: FILE: fs/ceph/file.c:524:
+			      unsigned len, loff_t *poff)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#588: FILE: fs/ceph/file.c:532:
+	dout("sync_read on file %p %llu~%u %s\n", file, off, len,
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#618: FILE: fs/ceph/file.c:562:
+	dout("sync_read result %d\n", ret);
 	^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#631: FILE: fs/ceph/file.c:575:
+	dout("sync_write_commit %p tid %llu\n", req, req->r_tid);
 	^^^^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'sync_write_commit', this function's name, in a string
#631: FILE: fs/ceph/file.c:575:
+	dout("sync_write_commit %p tid %llu\n", req, req->r_tid);

WARNING:MISORDERED_TYPE: type 'long long unsigned' should be specified in [[un]signed] [short|int|long|long long] order
#655: FILE: fs/ceph/file.c:599:
+	long long unsigned pos;

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#667: FILE: fs/ceph/file.c:611:
+	dout("sync_write on file %p %lld~%u %s\n", file, *offset,
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#668: FILE: fs/ceph/file.c:612:
+	     (unsigned)left, (file->f_flags & O_DIRECT) ? "O_DIRECT" : "");

CHECK:SPACING: spaces preferred around that '|' (ctx:VxV)
#678: FILE: fs/ceph/file.c:622:
+	if ((file->f_flags & (O_SYNC|O_DIRECT)) == 0)
 	                            ^

CHECK:SPACING: spaces preferred around that '+' (ctx:VxV)
#712: FILE: fs/ceph/file.c:656:
+		truncate_inode_pages_range(inode->i_mapping, pos, pos+len);
 		                                                     ^

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#785: FILE: fs/ceph/file.c:729:
+	struct file *filp = iocb->ki_filp;
 	             ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#793: FILE: fs/ceph/file.c:737:
+	dout("aio_read %p %llx.%llx %llu~%u trying to get caps on %p\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#794: FILE: fs/ceph/file.c:738:
+	     inode, ceph_vinop(inode), pos, (unsigned)len, inode);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#800: FILE: fs/ceph/file.c:744:
+	dout("aio_read %p %llx.%llx %llu~%u got cap refs on %s\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#801: FILE: fs/ceph/file.c:745:
+	     inode, ceph_vinop(inode), pos, (unsigned)len,

WARNING:TYPO_SPELLING: 'filp' may be misspelled - perhaps 'flip'?
#808: FILE: fs/ceph/file.c:752:
+		ret = ceph_sync_read(filp, iov->iov_base, len, ppos);
 		                     ^^^^

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#813: FILE: fs/ceph/file.c:757:
+	dout("aio_read %p %llx.%llx dropping cap refs on %s = %d\n",
 	^^^^

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#830: FILE: fs/ceph/file.c:774:
+static ssize_t ceph_aio_write(struct kiocb *iocb, const struct iovec *iov,
+		       unsigned long nr_segs, loff_t pos)

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#848: FILE: fs/ceph/file.c:792:
+	dout("aio_write %p %llx.%llx %llu~%u getting caps. i_size %llu\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#849: FILE: fs/ceph/file.c:793:
+	     inode, ceph_vinop(inode), pos, (unsigned)iov->iov_len,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#856: FILE: fs/ceph/file.c:800:
+	dout("aio_write %p %llx.%llx %llu~%u  got cap refs on %s\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#857: FILE: fs/ceph/file.c:801:
+	     inode, ceph_vinop(inode), pos, (unsigned)iov->iov_len,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#864: FILE: fs/ceph/file.c:808:
+		ret = ceph_sync_write(file, iov->iov_base, iov->iov_len,
+			&iocb->ki_pos);

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#879: FILE: fs/ceph/file.c:823:
+	dout("aio_write %p %llx.%llx %llu~%u  dropping cap refs on %s\n",
 	^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#880: FILE: fs/ceph/file.c:824:
+	     inode, ceph_vinop(inode), pos, (unsigned)iov->iov_len,

WARNING:TYPO_SPELLING: 'dout' may be misspelled - perhaps 'doubt'?
#885: FILE: fs/ceph/file.c:829:
+		dout("aio_write %p %llx.%llx %llu~%u got EOLDSNAPC, retrying\n",
 		^^^^

WARNING:UNSPECIFIED_INT: Prefer 'unsigned int' to bare use of 'unsigned'
#886: FILE: fs/ceph/file.c:830:
+		     inode, ceph_vinop(inode), pos, (unsigned)iov->iov_len);

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068930.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 56 warnings, 15 checks, 902 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000068930.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
