WARNING:LONG_LINE_COMMENT: line length of 102 exceeds 100 columns
#308: FILE: drivers/char/rio/cirrus.h:195:
+#define RIOC_MEMDUMP		(0x11 | RIOC_PRE_EMPTIVE)	/* Send back mem from addr supplied */

A comment starts before but extends beyond the maximum line length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:SPACING: No space is necessary after a cast
#340: FILE: drivers/char/rio/rio_linux.c:347:
+	return RIOParam((struct Port *) ptr, RIOC_CONFIG, 1, 1);

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

CHECK:CAMELCASE: Avoid CamelCase: <RIOParam>
#340: FILE: drivers/char/rio/rio_linux.c:347:
+	return RIOParam((struct Port *) ptr, RIOC_CONFIG, 1, 1);

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <Port>
#340: FILE: drivers/char/rio/rio_linux.c:347:
+	return RIOParam((struct Port *) ptr, RIOC_CONFIG, 1, 1);

CHECK:CAMELCASE: Avoid CamelCase: <PortP>
#349: FILE: drivers/char/rio/rio_linux.c:490:
+	rv = (PortP->ModemState & RIOC_MSVR1_CD) != 0;

CHECK:CAMELCASE: Avoid CamelCase: <ModemState>
#349: FILE: drivers/char/rio/rio_linux.c:490:
+	rv = (PortP->ModemState & RIOC_MSVR1_CD) != 0;

CHECK:CAMELCASE: Avoid CamelCase: <RIOShortCommand>
#358: FILE: drivers/char/rio/rio_linux.c:610:
+			if (RIOShortCommand(p, PortP, RIOC_SBREAK, 2, 250) ==

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#369: FILE: drivers/char/rio/rio_linux.c:627:
+			if (RIOShortCommand(p, PortP, RIOC_SBREAK, 2,
+					arg ? arg * 100 : 250) == RIO_FAIL) {

CHECK:CAMELCASE: Avoid CamelCase: <CdRegister>
#403: FILE: drivers/char/rio/riocmd.c:440:
+			p->CdRegister = (readb(&PktCmdP->ModemStatus) & RIOC_MSVR1_HOST);

CHECK:CAMELCASE: Avoid CamelCase: <PktCmdP>
#403: FILE: drivers/char/rio/riocmd.c:440:
+			p->CdRegister = (readb(&PktCmdP->ModemStatus) & RIOC_MSVR1_HOST);

CHECK:CAMELCASE: Avoid CamelCase: <ModemStatus>
#403: FILE: drivers/char/rio/riocmd.c:440:
+			p->CdRegister = (readb(&PktCmdP->ModemStatus) & RIOC_MSVR1_HOST);

CHECK:CAMELCASE: Avoid CamelCase: <ReportedModemStatus>
#421: FILE: drivers/char/rio/riocmd.c:467:
+				(ReportedModemStatus & RIOC_MSVR1_HOST)) {

CHECK:CAMELCASE: Avoid CamelCase: <PacketP>
#439: FILE: drivers/char/rio/riocmd.c:695:
+				if (readb(&PacketP->data[5]) == RIOC_MEMDUMP) {

CHECK:UNNECESSARY_PARENTHESES: Unnecessary parentheses around 'p->RIOPortp[port]'
#452: FILE: drivers/char/rio/rioctrl.c:425:
+		if (RIOPreemptiveCmd(p, (p->RIOPortp[port]), RIOC_RESUME) ==
+				RIO_FAIL) {

Parentheses are not required in the following cases:

  1. Function pointer uses::

      (foo->bar)();

    could be::

      foo->bar();

  2. Comparisons in if::

      if ((foo->bar) && (foo->baz))
      if ((foo == bar))

    could be::

      if (foo->bar && foo->baz)
      if (foo == bar)

  3. addressof/dereference single Lvalues::

      &(foo->bar)
      *(foo->bar)

    could be::

      &foo->bar
      *foo->bar

CHECK:CAMELCASE: Avoid CamelCase: <RIOPreemptiveCmd>
#452: FILE: drivers/char/rio/rioctrl.c:425:
+		if (RIOPreemptiveCmd(p, (p->RIOPortp[port]), RIOC_RESUME) ==

CHECK:CAMELCASE: Avoid CamelCase: <RIOPortp>
#452: FILE: drivers/char/rio/rioctrl.c:425:
+		if (RIOPreemptiveCmd(p, (p->RIOPortp[port]), RIOC_RESUME) ==

CHECK:CAMELCASE: Avoid CamelCase: <State>
#462: FILE: drivers/char/rio/rioctrl.c:640:
+		RIOParam(PortP, RIOC_CONFIG, PortP->State & RIO_MODEM,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#463: FILE: drivers/char/rio/rioctrl.c:641:
+		RIOParam(PortP, RIOC_CONFIG, PortP->State & RIO_MODEM,
+				OK_TO_SLEEP);

CHECK:CAMELCASE: Avoid CamelCase: <SubCommand>
#495: FILE: drivers/char/rio/rioctrl.c:1443:
+		PktCmdP->SubCommand = RIOC_MEMDUMP;

WARNING:LONG_LINE: line length of 209 exceeds 100 columns
#559: FILE: drivers/char/rio/riointr.c:404:
+					if (RIOParam(PortP, RIOC_OPEN, ((PortP->Cor2Copy & (RIOC_COR2_RTSFLOW | RIOC_COR2_CTSFLOW)) == (RIOC_COR2_RTSFLOW | RIOC_COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL)

The line has exceeded the specified maximum length.
To use a different maximum line length, the --max-line-length=n option
may be added while invoking checkpatch.

Earlier, the default line length was 80 columns.  Commit bdc48fa11e46
("checkpatch/coding-style: deprecate 80-column warning") increased the
limit to 100 columns.  This is not a hard limit either and it's
preferable to stay within 80 columns whenever possible.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#breaking-long-lines-and-strings

CHECK:CAMELCASE: Avoid CamelCase: <Cor2Copy>
#559: FILE: drivers/char/rio/riointr.c:404:
+					if (RIOParam(PortP, RIOC_OPEN, ((PortP->Cor2Copy & (RIOC_COR2_RTSFLOW | RIOC_COR2_CTSFLOW)) == (RIOC_COR2_RTSFLOW | RIOC_COR2_CTSFLOW)) ? 1 : 0, DONT_SLEEP) == RIO_FAIL)

CHECK:CAMELCASE: Avoid CamelCase: <Command>
#570: FILE: drivers/char/rio/riointr.c:431:
+					writeb(RIOC_WFLUSH, &PktCmdP->Command);

CHECK:CAMELCASE: Avoid CamelCase: <Cor1>
#592: FILE: drivers/char/rio/rioparam.c:244:
+			Cor1 |= RIOC_COR1_5BITS;

CHECK:CAMELCASE: Avoid CamelCase: <Cor2>
#653: FILE: drivers/char/rio/rioparam.c:295:
+		Cor2 |= RIOC_COR2_IXON;

CHECK:CAMELCASE: Avoid CamelCase: <Cor4>
#704: FILE: drivers/char/rio/rioparam.c:344:
+		Cor4 |= RIOC_COR4_IGNBRK;

CHECK:CAMELCASE: Avoid CamelCase: <Cor5>
#755: FILE: drivers/char/rio/rioparam.c:387:
+	Cor5 = RIOC_COR5_CMOE;

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#836: FILE: drivers/char/rio/riotty.c:301:
+	if ((PortP->gs.tty->termios->c_cflag & CLOCAL) ||
+			(PortP->ModemState & RIOC_MSVR1_CD)) {

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000301883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 2 warnings, 25 checks, 790 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000301883.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
