WARNING:COMMIT_LOG_LONG_LINE: Possible unwrapped commit description (prefer a maximum 75 chars per line)
#27: 
if MAX_NUMNODES > BITS_PER_LONG, loading/storing task->mems_allowed or mems_allowed in

WARNING:TYPO_SPELLING: 'probelm' may be misspelled - perhaps 'problem'?
#30: 
use a rwlock to protect them to fix this probelm.
                                         ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#57: FILE: include/linux/cpuset.h:56:
+extern int cpuset_mems_allowed_intersects(struct task_struct *tsk1,

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#85: FILE: include/linux/cpuset.h:112:
+#define read_mem_lock_irqsave(p, flags)				\
+	do {							\
+		read_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#85: FILE: include/linux/cpuset.h:112:
+#define read_mem_lock_irqsave(p, flags)				\
+	do {							\
+		read_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

For the multi-statement macros, it is necessary to use the do-while
loop to avoid unpredictable code paths. The do-while loop helps to
group the multiple statements into a single one so that a
function-like macro can be used as a function only.

But for the single statement macros, it is unnecessary to use the
do-while loop. Although the code is syntactically correct but using
the do-while loop is redundant. So remove the do-while loop for single
statement macros.

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#90: FILE: include/linux/cpuset.h:117:
+#define read_mem_unlock_irqrestore(p, flags)			\
+	do {							\
+		read_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#90: FILE: include/linux/cpuset.h:117:
+#define read_mem_unlock_irqrestore(p, flags)			\
+	do {							\
+		read_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#96: FILE: include/linux/cpuset.h:123:
+#define read_mempolicy_lock_irqsave(p, flags)			\
+	do {							\
+		read_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#96: FILE: include/linux/cpuset.h:123:
+#define read_mempolicy_lock_irqsave(p, flags)			\
+	do {							\
+		read_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#101: FILE: include/linux/cpuset.h:128:
+#define read_mempolicy_unlock_irqrestore(p, flags)		\
+	do {							\
+		read_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#101: FILE: include/linux/cpuset.h:128:
+#define read_mempolicy_unlock_irqrestore(p, flags)		\
+	do {							\
+		read_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#106: FILE: include/linux/cpuset.h:133:
+#define write_mem_lock_irqsave(p, flags)			\
+	do {							\
+		write_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#106: FILE: include/linux/cpuset.h:133:
+#define write_mem_lock_irqsave(p, flags)			\
+	do {							\
+		write_lock_irqsave(&p->mem_rwlock, flags);	\
+	} while (0)

CHECK:MACRO_ARG_PRECEDENCE: Macro argument 'p' may be better as '(p)' to avoid precedence issues
#111: FILE: include/linux/cpuset.h:138:
+#define write_mem_unlock_irqrestore(p, flags)			\
+	do {							\
+		write_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#111: FILE: include/linux/cpuset.h:138:
+#define write_mem_unlock_irqrestore(p, flags)			\
+	do {							\
+		write_unlock_irqrestore(&p->mem_rwlock, flags);	\
+	} while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#116: FILE: include/linux/cpuset.h:143:
+#define read_mem_lock_irqsave(p, flags)		do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#118: FILE: include/linux/cpuset.h:145:
+#define read_mem_unlock_irqrestore(p, flags)	do { (void)(flags); } while (0)

WARNING:LINE_SPACING: Missing a blank line after declarations
#149: FILE: include/linux/cpuset.h:176:
+	unsigned long flags;
+	write_mem_lock_irqsave(current, flags);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#170: FILE: include/linux/cpuset.h:279:
+#define read_mem_lock_irqsave(p, flags)		do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#172: FILE: include/linux/cpuset.h:281:
+#define read_mem_unlock_irqrestore(p, flags)	do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#174: FILE: include/linux/cpuset.h:283:
+#define read_mempolicy_lock_irqsave(p, flags)	do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#176: FILE: include/linux/cpuset.h:285:
+#define read_mempolicy_unlock_irqrestore(p, flags)	\
+	do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#179: FILE: include/linux/cpuset.h:288:
+#define write_mem_lock_irqsave(p, flags)	do { (void)(flags); } while (0)

WARNING:SINGLE_STATEMENT_DO_WHILE_MACRO: Single statement macros should not use a do {} while (0) loop
#181: FILE: include/linux/cpuset.h:290:
+#define write_mem_unlock_irqrestore(p, flags)	do { (void)(flags); } while (0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#220: FILE: include/linux/mempolicy.h:54:
+#define MPOL_F_TASK    (1 << 2)	/* identify tasks' policies */

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#228: FILE: include/linux/mempolicy.h:111:
+extern struct mempolicy *__mpol_alloc(void);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#252: FILE: include/linux/mempolicy.h:203:
+extern int mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new,

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#253: FILE: include/linux/mempolicy.h:204:
+extern int mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new,
+				struct mempolicy *newpol);

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#276: FILE: include/linux/mempolicy.h:323:
+static inline int mpol_rebind_task(struct task_struct *tsk,
+					const nodemask_t *new,

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#295: FILE: include/linux/sched.h:1408:
+ * Or we use other rwlock - mem_rwlock to protect them. */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#309: FILE: include/linux/sched.h:1481:
+	 * else Protected by mem_rwlock */

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#320: FILE: include/linux/sched.h:1506:
+	 * else Protected by mem_rwlock */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#368: FILE: kernel/cpuset.c:972:
+static int cpuset_change_task_nodemask(struct task_struct *tsk,
+					nodemask_t *newmems,

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpol"
#397: FILE: kernel/cpuset.c:1006:
+	if (newpol == NULL) {

Comparisons to NULL in the form (foo == NULL) or (foo != NULL)
are better written as (!foo) and (foo).

CHECK:COMPARISON_TO_NULL: Comparison to NULL could be written "!newpol"
#436: FILE: kernel/cpuset.c:1427:
+	if (newpol == NULL)

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#693: FILE: mm/mempolicy.c:367:
+int mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new,
+						struct mempolicy *newpol)

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#818: FILE: mm/mempolicy.c:827:
+		 * a new one. */

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#920: FILE: mm/mempolicy.c:1740:
+		page =  __alloc_pages_nodemask(gfp, 0, zl,
+					policy_nodemask(gfp, pol));

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#972: FILE: mm/mempolicy.c:1791:
+		page =  __alloc_pages_nodemask(gfp, order,
+					policy_zonelist(gfp, pol),

WARNING:LINE_SPACING: Missing a blank line after declarations
#1084: FILE: mm/slub.c:1361:
+	struct mempolicy *pol;
+	unsigned long lflags

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 0 errors, 22 warnings, 18 checks, 950 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000004871.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
