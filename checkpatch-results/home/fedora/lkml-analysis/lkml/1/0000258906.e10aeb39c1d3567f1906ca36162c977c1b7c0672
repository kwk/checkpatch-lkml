WARNING:FILE_PATH_CHANGES: added, moved or deleted file(s), does MAINTAINERS need updating?
#69: 
new file mode 100644

Whenever files are added, moved, or deleted, the MAINTAINERS file
patterns can be out of sync or outdated.

So MAINTAINERS might need updating in these cases.

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#1682: FILE: arch/arm/mach-pxa/Kconfig:60:
+config ARCH_VIPER
+	bool "Arcom VIPER SBC"
+	select PXA25x
+	select ISA
+	select I2C_GPIO
+

Kconfig symbols should have a help text which fully describes
it.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#1709: FILE: arch/arm/mach-pxa/viper.c:1:
+/*

The source file is missing or has an improper SPDX identifier tag.
The Linux kernel requires the precise SPDX identifier in all source files,
and it is thoroughly documented in the kernel docs.

See: https://www.kernel.org/doc/html/latest/process/license-rules.html

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#1710: FILE: arch/arm/mach-pxa/viper.c:2:
+ *  linux/arch/arm/mach-pxa/viper.c

Embedding the complete filename path inside the file isn't particularly
useful as often the path is moved around and becomes incorrect.

WARNING:IF_0: Consider removing the code enclosed by this #if 0 and its #endif
#1762: FILE: arch/arm/mach-pxa/viper.c:54:
+#if 0

WARNING:PRINTK_WITHOUT_KERN_LEVEL: printk() should include KERN_<LEVEL> facility level
#1763: FILE: arch/arm/mach-pxa/viper.c:55:
+#define DEBUG_INTR(fmt...)	printk(fmt)

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_ack_irq', this function's name, in a string
#1843: FILE: arch/arm/mach-pxa/viper.c:135:
+		DEBUG_INTR(KERN_DEBUG "viper_ack_irq: acknowledge lo irq %d "

Embedded function names are less appropriate to use as
refactoring can cause function renaming.  Prefer the use of
"%s", __func__ to embedded function names.

Note that this does not work with -f (--file) checkpatch option
as it depends on patch context providing the function name.

WARNING:SPLIT_STRING: quoted string split across lines
#1844: FILE: arch/arm/mach-pxa/viper.c:136:
+		DEBUG_INTR(KERN_DEBUG "viper_ack_irq: acknowledge lo irq %d "
+			   "(number %d) with 0x%x => %p\n",

Quoted strings that appear as messages in userspace and can be
grepped, should not be split across multiple lines.

See: https://lore.kernel.org/lkml/20120203052727.GA15035@leaf/

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_ack_irq', this function's name, in a string
#1849: FILE: arch/arm/mach-pxa/viper.c:141:
+		DEBUG_INTR(KERN_DEBUG "viper_ack_irq: acknowledge hi irq %d "

WARNING:SPLIT_STRING: quoted string split across lines
#1850: FILE: arch/arm/mach-pxa/viper.c:142:
+		DEBUG_INTR(KERN_DEBUG "viper_ack_irq: acknowledge hi irq %d "
+			   "(number %d) with 0x%x => %p\n",

CHECK:SPACING: spaces preferred around that '-' (ctx:VxV)
#1853: FILE: arch/arm/mach-pxa/viper.c:145:
+		VIPER_HI_IRQ_STATUS = 1 << (viper_irq-8);
 		                                     ^

Whitespace style used in the kernel sources is described in kernel docs.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1860: FILE: arch/arm/mach-pxa/viper.c:152:
+	int viper_irq = (irq - VIPER_IRQ(0));
+	viper_irq_enabled_mask &= ~(1 << viper_irq);

Vertical space is wasted given the limited number of lines an
editor window can display when multiple blank lines are used.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#spaces

WARNING:LINE_SPACING: Missing a blank line after declarations
#1866: FILE: arch/arm/mach-pxa/viper.c:158:
+	int viper_irq = (irq - VIPER_IRQ(0));
+	viper_irq_enabled_mask |= (1 << viper_irq);

CHECK:SPACING: spaces preferred around that '<<' (ctx:VxV)
#1877: FILE: arch/arm/mach-pxa/viper.c:169:
+	result |= hi<<8;
 	            ^

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_irq_handler', this function's name, in a string
#1886: FILE: arch/arm/mach-pxa/viper.c:178:
+	DEBUG_INTR(KERN_DEBUG "viper_irq_handler: entry\n");

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_irq_handler', this function's name, in a string
#1890: FILE: arch/arm/mach-pxa/viper.c:182:
+		DEBUG_INTR(KERN_DEBUG "viper_irq_handler: pending 0x%lx\n",

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_irq_handler', this function's name, in a string
#1896: FILE: arch/arm/mach-pxa/viper.c:188:
+			DEBUG_INTR(KERN_DEBUG "viper_irq_handler: dispatching IRQ %d to %p\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#1897: FILE: arch/arm/mach-pxa/viper.c:189:
+			DEBUG_INTR(KERN_DEBUG "viper_irq_handler: dispatching IRQ %d to %p\n",
+			       irq, desc->handle);

WARNING:EMBEDDED_FUNCTION_NAME: Prefer using '"%s...", __func__' to using 'viper_irq_handler', this function's name, in a string
#1902: FILE: arch/arm/mach-pxa/viper.c:194:
+	DEBUG_INTR(KERN_DEBUG "viper_irq_handler: exit\n");

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1911: FILE: arch/arm/mach-pxa/viper.c:203:
+#define DIN_SET()	GPSR(PSU_DIN) = GPIO_bit(PSU_DIN)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1912: FILE: arch/arm/mach-pxa/viper.c:204:
+#define DIN_CLR()	GPCR(PSU_DIN) = GPIO_bit(PSU_DIN)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1914: FILE: arch/arm/mach-pxa/viper.c:206:
+#define CLK_SET()	GPSR(PSU_CLK) = GPIO_bit(PSU_CLK)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1915: FILE: arch/arm/mach-pxa/viper.c:207:
+#define CLK_CLR()	GPCR(PSU_CLK) = GPIO_bit(PSU_CLK)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1917: FILE: arch/arm/mach-pxa/viper.c:209:
+#define LD_SET()	GPSR(PSU_LD) = GPIO_bit(PSU_LD)

ERROR:COMPLEX_MACRO: Macros with complex values should be enclosed in parentheses
#1918: FILE: arch/arm/mach-pxa/viper.c:210:
+#define LD_CLR()	GPCR(PSU_LD) = GPIO_bit(PSU_LD)

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#1944: FILE: arch/arm/mach-pxa/viper.c:236:
+	printk(KERN_INFO "viper: setting CPU core voltage to %sV at %d.%03dMHz\n",

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#1986: FILE: arch/arm/mach-pxa/viper.c:278:
+
+}

The placement of braces is stylistically incorrect.
The preferred way is to put the opening brace last on the line,
and put the closing brace first::

  if (x is true) {
          we do y
  }

This applies for all non-functional blocks.
However, there is one special case, namely functions: they have the
opening brace at the beginning of the next line, thus::

  int function(int x)
  {
          body of function
  }

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#placing-braces-and-spaces

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2001: FILE: arch/arm/mach-pxa/viper.c:293:
+			 * before we change freq */

The comment style is incorrect.  The preferred style for multi-
line comments is::

  /*
  * This is the preferred style
  * for multi line comments.
  */

The networking comment style is a bit different, with the first line
not empty like the former::

  /* This is the preferred comment style
  * for files in net/ and drivers/net/
  */

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#commenting

WARNING:BLOCK_COMMENT_STYLE: Block comments use a trailing */ on a separate line
#2008: FILE: arch/arm/mach-pxa/viper.c:300:
+			 * after we change freq */

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2051: FILE: arch/arm/mach-pxa/viper.c:343:
+		printk(KERN_INFO "Map ISA IRQ %d to IRQ %d\n", isa_irqs[irq - VIPER_IRQ(0)], irq);

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2077: FILE: arch/arm/mach-pxa/viper.c:369:
+
+}

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2081: FILE: arch/arm/mach-pxa/viper.c:373:
+	printk(KERN_NOTICE "Shutting off UPS\n");

WARNING:SPACING: space prohibited before semicolon
#2084: FILE: arch/arm/mach-pxa/viper.c:376:
+	while (1) /*spin*/ ;

ERROR:TRAILING_STATEMENTS: trailing statements should be on next line
#2084: FILE: arch/arm/mach-pxa/viper.c:376:
+	while (1) /*spin*/ ;

Trailing statements (for example after any conditional) should be
on the next line.
Statements, such as::

  if (x == y) break;

should be::

  if (x == y)
          break;

CHECK:CAMELCASE: Avoid CamelCase: <LCCR0_Act>
#2143: FILE: arch/arm/mach-pxa/viper.c:435:
+	.lccr0	   = LCCR0_Act | LCCR0_Color,

Avoid CamelCase Identifiers.

See: https://www.kernel.org/doc/html/latest/process/coding-style.html#naming

CHECK:CAMELCASE: Avoid CamelCase: <LCCR0_Color>
#2143: FILE: arch/arm/mach-pxa/viper.c:435:
+	.lccr0	   = LCCR0_Act | LCCR0_Color,

CHECK:CAMELCASE: Avoid CamelCase: <LCCR3_OutEnH>
#2144: FILE: arch/arm/mach-pxa/viper.c:436:
+	.lccr3	   = LCCR3_OutEnH | LCCR3_PixFlEdg | LCCR3_Acb(0xFF),

CHECK:CAMELCASE: Avoid CamelCase: <LCCR3_PixFlEdg>
#2144: FILE: arch/arm/mach-pxa/viper.c:436:
+	.lccr3	   = LCCR3_OutEnH | LCCR3_PixFlEdg | LCCR3_Acb(0xFF),

CHECK:CAMELCASE: Avoid CamelCase: <LCCR3_Acb>
#2144: FILE: arch/arm/mach-pxa/viper.c:436:
+	.lccr3	   = LCCR3_OutEnH | LCCR3_PixFlEdg | LCCR3_Acb(0xFF),

CHECK:LINE_SPACING: Please use a blank line after function/struct/union/enum declarations
#2185: FILE: arch/arm/mach-pxa/viper.c:477:
+};
+static struct platform_device i2c_bus_device = {

WARNING:MISPLACED_INIT: __initdata should be placed after viper_i2c_devices[]
#2208: FILE: arch/arm/mach-pxa/viper.c:500:
+static struct i2c_board_info __initdata viper_i2c_devices[] = {

It is possible to use section markers on variables in a way
which gcc doesn't understand (or at least not the way the
developer intended)::

  static struct __initdata samsung_pll_clock exynos4_plls[nr_plls] = {

does not put exynos4_plls in the .initdata section. The __initdata
marker can be virtually anywhere on the line, except right after
"struct". The preferred location is before the "=" sign if there is
one, or before the trailing ";" otherwise.

See: https://lore.kernel.org/lkml/1377655732.3619.19.camel@joe-AO722/

WARNING:BLOCK_COMMENT_STYLE: Block comments use * on subsequent lines
#2306: FILE: arch/arm/mach-pxa/viper.c:598:
+	/* On this platform, we work with 200MHz clock, giving
+	   5 ns per instruction. The cycle below involves 2

CHECK:SPACING: spaces preferred around that '/' (ctx:VxV)
#2311: FILE: arch/arm/mach-pxa/viper.c:603:
+	int cyc = delay/20 + 1;
 	               ^

WARNING:LINE_SPACING: Missing a blank line after declarations
#2312: FILE: arch/arm/mach-pxa/viper.c:604:
+	int cyc = delay/20 + 1;
+	cyc <<= 2; /* actually, 400MHz */

CHECK:CAMELCASE: Avoid CamelCase: <sel15Kres>
#2343: FILE: arch/arm/mach-pxa/viper.c:635:
+	.sel15Kres		= 1,

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2361: FILE: arch/arm/mach-pxa/viper.c:653:
+^I.num_resources  ^I= ARRAY_SIZE(isp116x_resources),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2362: FILE: arch/arm/mach-pxa/viper.c:654:
+^I.resource       ^I= isp116x_resources,$

WARNING:CONSIDER_KSTRTO: simple_strtoul is obsolete, use kstrtoul instead
#2396: FILE: arch/arm/mach-pxa/viper.c:688:
+	viper_tpm = simple_strtoul(str, NULL, 10);

The simple_strtol(), simple_strtoll(), simple_strtoul(), and
simple_strtoull() functions explicitly ignore overflows, which
may lead to unexpected results in callers.  The respective kstrtol(),
kstrtoll(), kstrtoul(), and kstrtoull() functions tend to be the
correct replacements.

See: https://www.kernel.org/doc/html/latest/process/deprecated.html#simple-strtol-simple-strtoll-simple-strtoul-simple-strtoull

CHECK:UNDOCUMENTED_SETUP: __setup appears un-documented -- check Documentation/admin-guide/kernel-parameters.txt
#2400: FILE: arch/arm/mach-pxa/viper.c:692:
+__setup("tpm=", viper_tpm_setup);

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2427: FILE: arch/arm/mach-pxa/viper.c:719:
+		printk(KERN_INFO "viper: hardware v%di%d detected. CPLD revision %d.\n",

CHECK:PARENTHESIS_ALIGNMENT: Alignment should match open parenthesis
#2428: FILE: arch/arm/mach-pxa/viper.c:720:
+		printk(KERN_INFO "viper: hardware v%di%d detected. CPLD revision %d.\n",
+		      VIPER_BOARD_VERSION(version), VIPER_BOARD_ISSUE(version),

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2431: FILE: arch/arm/mach-pxa/viper.c:723:
+		printk(KERN_INFO "viper: this hardware version has no version register.\n");

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2437: FILE: arch/arm/mach-pxa/viper.c:729:
+
+}

CHECK:CAMELCASE: Avoid CamelCase: <GPIO78_nCS_2_MD>
#2461: FILE: arch/arm/mach-pxa/viper.c:753:
+	pxa_gpio_mode(GPIO78_nCS_2_MD);

CHECK:CAMELCASE: Avoid CamelCase: <GPIO79_nCS_3_MD>
#2462: FILE: arch/arm/mach-pxa/viper.c:754:
+	pxa_gpio_mode(GPIO79_nCS_3_MD);

CHECK:CAMELCASE: Avoid CamelCase: <GPIO80_nCS_4_MD>
#2463: FILE: arch/arm/mach-pxa/viper.c:755:
+	pxa_gpio_mode(GPIO80_nCS_4_MD);

CHECK:CAMELCASE: Avoid CamelCase: <GPIO33_nCS_5_MD>
#2464: FILE: arch/arm/mach-pxa/viper.c:756:
+	pxa_gpio_mode(GPIO33_nCS_5_MD);

WARNING:CONFIG_DESCRIPTION: please write a help paragraph that fully describes the config symbol
#2494: FILE: drivers/mtd/maps/Kconfig:169:
+config MTD_VIPER
+	tristate "Arcom VIPER Primary Flash"
+	depends on ARCH_VIPER && MTD_CFI_INTELEXT
+	select MTD_PARTITIONS
+	help
+	  This provides a driver for the Intel strata flash on the Arcom
+	  VIPER SBC.
+

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#2511: FILE: drivers/mtd/maps/Kconfig:186:
+	  in case of LCD or the monitor loosing sync and going blank (when
 	                                ^^^^^^^

Some words may have been misspelled.  Consider reviewing them.

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2540: FILE: drivers/mtd/maps/viper_flash.c:1:
+/*

WARNING:INCLUDE_LINUX: Use #include <linux/cacheflush.h> instead of <asm/cacheflush.h>
#2564: FILE: drivers/mtd/maps/viper_flash.c:25:
+#include <asm/cacheflush.h>

CHECK:LINE_SPACING: Please don't use multiple blank lines
#2569: FILE: drivers/mtd/maps/viper_flash.c:30:
+
+

WARNING:TYPO_SPELLING: 'loosing' may be misspelled - perhaps 'losing'?
#2574: FILE: drivers/mtd/maps/viper_flash.c:35:
+ * LCD DMA; causing screen flicker in case of LCD or the monitor loosing sync
                                                                  ^^^^^^^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2593: FILE: drivers/mtd/maps/viper_flash.c:54:
+	.size		= 64*1024*1024,
 	     		    ^

CHECK:SPACING: spaces preferred around that '*' (ctx:VxV)
#2593: FILE: drivers/mtd/maps/viper_flash.c:54:
+	.size		= 64*1024*1024,
 	     		         ^

WARNING:STATIC_CONST_CHAR_ARRAY: static const char * array should probably be static const char * const
#2604: FILE: drivers/mtd/maps/viper_flash.c:65:
+static const char *part_probes[] = {"cmdlinepart", "RedBoot", NULL};

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2614: FILE: drivers/mtd/maps/viper_flash.c:75:
+		printk(KERN_ERR "viper flash device already registered\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2618: FILE: drivers/mtd/maps/viper_flash.c:79:
+	printk(KERN_NOTICE "Probing VIPER flash device at physical address 0x%08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2622: FILE: drivers/mtd/maps/viper_flash.c:83:
+		printk(KERN_ERR "Failed to ioremap_nocache flash device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_warn([subsystem]dev, ... then dev_warn(dev, ... then pr_warn(...  to printk(KERN_WARNING ...
#2629: FILE: drivers/mtd/maps/viper_flash.c:90:
+		printk(KERN_WARNING "Failed to ioremap cached flash device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_notice([subsystem]dev, ... then dev_notice(dev, ... then pr_notice(...  to printk(KERN_NOTICE ...
#2634: FILE: drivers/mtd/maps/viper_flash.c:95:
+	printk(KERN_NOTICE "Probing flash at physical address 0x%08lx\n",

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2655: FILE: drivers/mtd/maps/viper_flash.c:116:
+		printk(KERN_INFO "Unlocking VIPER flash device\n");

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_info([subsystem]dev, ... then dev_info(dev, ... then pr_info(...  to printk(KERN_INFO ...
#2657: FILE: drivers/mtd/maps/viper_flash.c:118:
+		printk(KERN_INFO "VIPER flash unlocked\n");

CHECK:BRACES: braces {} should be used on all arms of this statement
#2664: FILE: drivers/mtd/maps/viper_flash.c:125:
+	if (mtd_parts_nb > 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2666: FILE: drivers/mtd/maps/viper_flash.c:127:
+	} else

CHECK:BRACES: Unbalanced braces around else statement
#2680: FILE: drivers/mtd/maps/viper_flash.c:141:
+	} else

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2719: FILE: drivers/mtd/maps/viper_flash.c:180:
+^I.remove^I ^I= __exit_p(viper_mtd_remove),$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2724: FILE: drivers/mtd/maps/viper_flash.c:185:
+^I.resume^I ^I= viper_mtd_resume,$

CHECK:BRACES: braces {} should be used on all arms of this statement
#2814: FILE: drivers/pcmcia/pxa2xx_base.c:230:
+	if (nr > 0) {
[...]
+	} else
[...]

CHECK:BRACES: Unbalanced braces around else statement
#2829: FILE: drivers/pcmcia/pxa2xx_base.c:245:
+	} else

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2839: FILE: drivers/pcmcia/pxa2xx_base.h:1:
+#ifndef PXA2XX_BASE

CHECK:BIT_MACRO: Prefer using the BIT macro
#2842: FILE: drivers/pcmcia/pxa2xx_base.h:4:
+#define PXA2XX_QUIRK_NEEDS_MECR_NOS		(1 << 0)

Defines like: 1 << <digit> could be BIT(digit).
The BIT() macro is defined via include/linux/bits.h::

  #define BIT(nr)         (1UL << (nr))

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#2855: FILE: drivers/pcmcia/pxa2xx_viper.c:1:
+/*

CHECK:BRACES: Blank lines aren't necessary before a close brace '}'
#2894: FILE: drivers/pcmcia/pxa2xx_viper.c:40:
+
+}

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2929: FILE: drivers/pcmcia/pxa2xx_viper.c:75:
+	state->detect = (GPLR(VIPER_CF_CD_GPIO) & GPIO_bit(VIPER_CF_CD_GPIO))?0:1;
 	                                                                     ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2929: FILE: drivers/pcmcia/pxa2xx_viper.c:75:
+	state->detect = (GPLR(VIPER_CF_CD_GPIO) & GPIO_bit(VIPER_CF_CD_GPIO))?0:1;
 	                                                                       ^

CHECK:SPACING: spaces required around that '?' (ctx:VxV)
#2930: FILE: drivers/pcmcia/pxa2xx_viper.c:76:
+	state->ready  = (GPLR(VIPER_CF_RDY_GPIO) & GPIO_bit(VIPER_CF_RDY_GPIO))?1:0;
 	                                                                       ^

CHECK:SPACING: spaces required around that ':' (ctx:VxV)
#2930: FILE: drivers/pcmcia/pxa2xx_viper.c:76:
+	state->ready  = (GPLR(VIPER_CF_RDY_GPIO) & GPIO_bit(VIPER_CF_RDY_GPIO))?1:0;
 	                                                                         ^

CHECK:CAMELCASE: Avoid CamelCase: <vs_Xv>
#2935: FILE: drivers/pcmcia/pxa2xx_viper.c:81:
+	state->vs_Xv  = 0;

CHECK:CAMELCASE: Avoid CamelCase: <Vcc>
#2944: FILE: drivers/pcmcia/pxa2xx_viper.c:90:
+	switch (state->Vcc) {

WARNING:PREFER_PR_LEVEL: Prefer [subsystem eg: netdev]_err([subsystem]dev, ... then dev_err(dev, ... then pr_err(...  to printk(KERN_ERR ...
#2952: FILE: drivers/pcmcia/pxa2xx_viper.c:98:
+		printk(KERN_ERR "%s: Unsupported Vcc:%d\n",

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2969: FILE: drivers/pcmcia/pxa2xx_viper.c:115:
+^I.owner          ^I= THIS_MODULE,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2970: FILE: drivers/pcmcia/pxa2xx_viper.c:116:
+^I.hw_init        ^I= viper_pcmcia_hw_init,$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#2976: FILE: drivers/pcmcia/pxa2xx_viper.c:122:
+^I.nr         ^I^I= 1,$

WARNING:TYPO_SPELLING: 'dependant' may be misspelled - perhaps 'dependent'?
#3017: FILE: drivers/pcmcia/soc_common.h:80:
+	/* Quirks required by this system, SOC dependant */
 	                                       ^^^^^^^^^

WARNING:LEADING_SPACE: please, no spaces at the start of a line
#3030: FILE: include/asm-arm/arch-pxa/irqs.h:182:
+      defined(CONFIG_ARCH_VIPER) || \$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3043: FILE: include/asm-arm/arch-pxa/irqs.h:238:
+#define VIPER_UARTA_IRQ^I ^IIRQ_GPIO(4)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3044: FILE: include/asm-arm/arch-pxa/irqs.h:239:
+#define VIPER_UARTB_IRQ^I ^IIRQ_GPIO(3)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3046: FILE: include/asm-arm/arch-pxa/irqs.h:241:
+#define VIPER_CF_CD_IRQ^I ^IIRQ_GPIO(VIPER_CF_CD_GPIO)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3056: FILE: include/asm-arm/arch-pxa/irqs.h:251:
+#define VIPER_ISA_IRQ10^I ^IVIPER_IRQ(5)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3057: FILE: include/asm-arm/arch-pxa/irqs.h:252:
+#define VIPER_ISA_IRQ11^I ^IVIPER_IRQ(6)$

WARNING:SPACE_BEFORE_TAB: please, no space before tabs
#3058: FILE: include/asm-arm/arch-pxa/irqs.h:253:
+#define VIPER_ISA_IRQ14^I ^IVIPER_IRQ(7)$

WARNING:SPDX_LICENSE_TAG: Missing or malformed SPDX-License-Identifier tag in line 1
#3069: FILE: include/asm-arm/arch-pxa/viper.h:1:
+/*

WARNING:EMBEDDED_FILENAME: It's generally not useful to have the filename in the file
#3070: FILE: include/asm-arm/arch-pxa/viper.h:2:
+ *  linux/include/asm-arm/arch-pxa/viper.h

WARNING:VOLATILE: Use of volatile is usually wrong: see Documentation/process/volatile-considered-harmful.rst
#3107: FILE: include/asm-arm/arch-pxa/viper.h:39:
+#  define __VIPER_CPLD_REG(x)		(*((volatile u16 *)VIPER_CPLD_P2V(x)))

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3126: FILE: include/asm-arm/arch-pxa/viper.h:58:
+extern u8 viper_hw_version(void);

Function prototypes don't need to be declared extern in .h
files.  It's assumed by the compiler and is unnecessary.

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3133: FILE: include/asm-arm/arch-pxa/viper.h:65:
+extern void viper_icr_set_bit(unsigned int bit);

CHECK:AVOID_EXTERNS: extern prototypes should be avoided in .h files
#3134: FILE: include/asm-arm/arch-pxa/viper.h:66:
+extern void viper_icr_clear_bit(unsigned int bit);

CHECK:BIT_MACRO: Prefer using the BIT macro
#3135: FILE: include/asm-arm/arch-pxa/viper.h:67:
+#define VIPER_ICR_RETRIG	(1 << 0)

CHECK:BIT_MACRO: Prefer using the BIT macro
#3136: FILE: include/asm-arm/arch-pxa/viper.h:68:
+#define VIPER_ICR_AUTO_CLR	(1 << 1)

CHECK:BIT_MACRO: Prefer using the BIT macro
#3137: FILE: include/asm-arm/arch-pxa/viper.h:69:
+#define VIPER_ICR_R_DIS		(1 << 2)

CHECK:BIT_MACRO: Prefer using the BIT macro
#3138: FILE: include/asm-arm/arch-pxa/viper.h:70:
+#define VIPER_ICR_CF_RST	(1 << 3)

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258906.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 total: 7 errors, 62 warnings, 43 checks, 2987 lines checked

NOTE: For some of the reported defects, checkpatch may be able to
      mechanically convert to the typical style using --fix or --fix-inplace.

./tmp.JOzjvdpBcb//home/fedora/lkml-analysis/lkml/1/patch.offset.0000258906.commit.e10aeb39c1d3567f1906ca36162c977c1b7c0672 has style problems, please review.

NOTE: If any of the errors are false positives, please report
      them to the maintainer, see CHECKPATCH in MAINTAINERS.
